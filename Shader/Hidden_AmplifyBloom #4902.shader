//////////////////////////////////////////
//
// NOTE: This is *not* a valid shader file
//
///////////////////////////////////////////
Shader "Hidden/AmplifyBloom" {
Properties {
_MainTex (" ", 2D) = "black" { }
_AnamorphicRTS0 (" ", 2D) = "black" { }
_AnamorphicRTS1 (" ", 2D) = "black" { }
_AnamorphicRTS2 (" ", 2D) = "black" { }
_AnamorphicRTS3 (" ", 2D) = "black" { }
_AnamorphicRTS4 (" ", 2D) = "black" { }
_AnamorphicRTS5 (" ", 2D) = "black" { }
_AnamorphicRTS6 (" ", 2D) = "black" { }
_AnamorphicRTS7 (" ", 2D) = "black" { }
_LensFlareLUT (" ", 2D) = "black" { }
}
SubShader {
 Pass {
  Name "frag_threshold"
  ZTest Always
  ZWrite Off
  Cull Off
  GpuProgramID 63897
Program "vp" {
SubProgram "d3d11 " {
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in  vec4 in_POSITION0;
in  vec2 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BloomRange;
uniform 	vec4 _BloomParams;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
in  vec2 vs_TEXCOORD0;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
float u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0 = texture(_MainTex, u_xlat0.xy);
    u_xlat0.xyz = u_xlat0.xyz + (-_BloomParams.yyy);
    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat0.xyz = min(u_xlat0.xyz, _BloomRange.xxx);
    u_xlat0.xyz = u_xlat0.xyz * _BloomRange.yyy;
    u_xlat6 = max(u_xlat0.y, u_xlat0.x);
    u_xlat1 = max(u_xlat0.z, 9.99999997e-07);
    u_xlat6 = max(u_xlat6, u_xlat1);
    u_xlat6 = min(u_xlat6, 1.0);
    u_xlat6 = u_xlat6 * 255.0;
    u_xlat6 = ceil(u_xlat6);
    u_xlat6 = u_xlat6 * 0.00392156886;
    SV_Target0.xyz = u_xlat0.xyz / vec3(u_xlat6);
    SV_Target0.w = u_xlat6;
    return;
}

#endif
"
}
SubProgram "vulkan " {
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 94
; Schema: 0
                                              OpCapability Shader 
                                       %1 = OpExtInstImport "GLSL.std.450" 
                                              OpMemoryModel Logical GLSL450 
                                              OpEntryPoint Vertex %4 "main" %11 %72 %84 %86 
                                              OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                              OpDecorate %11 Location 11 
                                              OpDecorate %16 ArrayStride 16 
                                              OpDecorate %17 ArrayStride 17 
                                              OpMemberDecorate %18 0 Offset 18 
                                              OpMemberDecorate %18 1 Offset 18 
                                              OpDecorate %18 Block 
                                              OpDecorate %20 DescriptorSet 20 
                                              OpDecorate %20 Binding 20 
                                              OpMemberDecorate %70 0 BuiltIn 70 
                                              OpMemberDecorate %70 1 BuiltIn 70 
                                              OpMemberDecorate %70 2 BuiltIn 70 
                                              OpDecorate %70 Block 
                                              OpDecorate vs_TEXCOORD0 Location 84 
                                              OpDecorate %86 Location 86 
                                       %2 = OpTypeVoid 
                                       %3 = OpTypeFunction %2 
                                       %6 = OpTypeFloat 32 
                                       %7 = OpTypeVector %6 4 
                                       %8 = OpTypePointer Private %7 
                        Private f32_4* %9 = OpVariable Private 
                                      %10 = OpTypePointer Input %7 
                         Input f32_4* %11 = OpVariable Input 
                                      %14 = OpTypeInt 32 0 
                                  u32 %15 = OpConstant 4 
                                      %16 = OpTypeArray %7 %15 
                                      %17 = OpTypeArray %7 %15 
                                      %18 = OpTypeStruct %16 %17 
                                      %19 = OpTypePointer Uniform %18 
Uniform struct {f32_4[4]; f32_4[4];}* %20 = OpVariable Uniform 
                                      %21 = OpTypeInt 32 1 
                                  i32 %22 = OpConstant 0 
                                  i32 %23 = OpConstant 1 
                                      %24 = OpTypePointer Uniform %7 
                                  i32 %35 = OpConstant 2 
                                  i32 %44 = OpConstant 3 
                       Private f32_4* %48 = OpVariable Private 
                                  u32 %68 = OpConstant 1 
                                      %69 = OpTypeArray %6 %68 
                                      %70 = OpTypeStruct %7 %6 %69 
                                      %71 = OpTypePointer Output %70 
 Output struct {f32_4; f32; f32[1];}* %72 = OpVariable Output 
                                      %80 = OpTypePointer Output %7 
                                      %82 = OpTypeVector %6 2 
                                      %83 = OpTypePointer Output %82 
               Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                      %85 = OpTypePointer Input %82 
                         Input f32_2* %86 = OpVariable Input 
                                      %88 = OpTypePointer Output %6 
                                  void %4 = OpFunction None %3 
                                       %5 = OpLabel 
                                f32_4 %12 = OpLoad %11 
                                f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                       Uniform f32_4* %25 = OpAccessChain %20 %22 %23 
                                f32_4 %26 = OpLoad %25 
                                f32_4 %27 = OpFMul %13 %26 
                                              OpStore %9 %27 
                       Uniform f32_4* %28 = OpAccessChain %20 %22 %22 
                                f32_4 %29 = OpLoad %28 
                                f32_4 %30 = OpLoad %11 
                                f32_4 %31 = OpVectorShuffle %30 %30 0 0 0 0 
                                f32_4 %32 = OpFMul %29 %31 
                                f32_4 %33 = OpLoad %9 
                                f32_4 %34 = OpFAdd %32 %33 
                                              OpStore %9 %34 
                       Uniform f32_4* %36 = OpAccessChain %20 %22 %35 
                                f32_4 %37 = OpLoad %36 
                                f32_4 %38 = OpLoad %11 
                                f32_4 %39 = OpVectorShuffle %38 %38 2 2 2 2 
                                f32_4 %40 = OpFMul %37 %39 
                                f32_4 %41 = OpLoad %9 
                                f32_4 %42 = OpFAdd %40 %41 
                                              OpStore %9 %42 
                                f32_4 %43 = OpLoad %9 
                       Uniform f32_4* %45 = OpAccessChain %20 %22 %44 
                                f32_4 %46 = OpLoad %45 
                                f32_4 %47 = OpFAdd %43 %46 
                                              OpStore %9 %47 
                                f32_4 %49 = OpLoad %9 
                                f32_4 %50 = OpVectorShuffle %49 %49 1 1 1 1 
                       Uniform f32_4* %51 = OpAccessChain %20 %23 %23 
                                f32_4 %52 = OpLoad %51 
                                f32_4 %53 = OpFMul %50 %52 
                                              OpStore %48 %53 
                       Uniform f32_4* %54 = OpAccessChain %20 %23 %22 
                                f32_4 %55 = OpLoad %54 
                                f32_4 %56 = OpLoad %9 
                                f32_4 %57 = OpVectorShuffle %56 %56 0 0 0 0 
                                f32_4 %58 = OpFMul %55 %57 
                                f32_4 %59 = OpLoad %48 
                                f32_4 %60 = OpFAdd %58 %59 
                                              OpStore %48 %60 
                       Uniform f32_4* %61 = OpAccessChain %20 %23 %35 
                                f32_4 %62 = OpLoad %61 
                                f32_4 %63 = OpLoad %9 
                                f32_4 %64 = OpVectorShuffle %63 %63 2 2 2 2 
                                f32_4 %65 = OpFMul %62 %64 
                                f32_4 %66 = OpLoad %48 
                                f32_4 %67 = OpFAdd %65 %66 
                                              OpStore %48 %67 
                       Uniform f32_4* %73 = OpAccessChain %20 %23 %44 
                                f32_4 %74 = OpLoad %73 
                                f32_4 %75 = OpLoad %9 
                                f32_4 %76 = OpVectorShuffle %75 %75 3 3 3 3 
                                f32_4 %77 = OpFMul %74 %76 
                                f32_4 %78 = OpLoad %48 
                                f32_4 %79 = OpFAdd %77 %78 
                        Output f32_4* %81 = OpAccessChain %72 %22 
                                              OpStore %81 %79 
                                f32_2 %87 = OpLoad %86 
                                              OpStore vs_TEXCOORD0 %87 
                          Output f32* %89 = OpAccessChain %72 %22 %68 
                                  f32 %90 = OpLoad %89 
                                  f32 %91 = OpFNegate %90 
                          Output f32* %92 = OpAccessChain %72 %22 %68 
                                              OpStore %92 %91 
                                              OpReturn
                                              OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 110
; Schema: 0
                                               OpCapability Shader 
                                        %1 = OpExtInstImport "GLSL.std.450" 
                                               OpMemoryModel Logical GLSL450 
                                               OpEntryPoint Fragment %4 "main" %12 %98 
                                               OpExecutionMode %4 OriginUpperLeft 
                                               OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                               OpDecorate vs_TEXCOORD0 Location 12 
                                               OpMemberDecorate %15 0 Offset 15 
                                               OpMemberDecorate %15 1 Offset 15 
                                               OpMemberDecorate %15 2 Offset 15 
                                               OpDecorate %15 Block 
                                               OpDecorate %17 DescriptorSet 17 
                                               OpDecorate %17 Binding 17 
                                               OpDecorate %33 DescriptorSet 33 
                                               OpDecorate %33 Binding 33 
                                               OpDecorate %37 DescriptorSet 37 
                                               OpDecorate %37 Binding 37 
                                               OpDecorate %98 Location 98 
                                        %2 = OpTypeVoid 
                                        %3 = OpTypeFunction %2 
                                        %6 = OpTypeFloat 32 
                                        %7 = OpTypeVector %6 3 
                                        %8 = OpTypePointer Private %7 
                         Private f32_3* %9 = OpVariable Private 
                                       %10 = OpTypeVector %6 2 
                                       %11 = OpTypePointer Input %10 
                 Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                       %14 = OpTypeVector %6 4 
                                       %15 = OpTypeStruct %14 %14 %14 
                                       %16 = OpTypePointer Uniform %15 
Uniform struct {f32_4; f32_4; f32_4;}* %17 = OpVariable Uniform 
                                       %18 = OpTypeInt 32 1 
                                   i32 %19 = OpConstant 0 
                                       %20 = OpTypePointer Uniform %14 
                                       %31 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                       %32 = OpTypePointer UniformConstant %31 
  UniformConstant read_only Texture2D* %33 = OpVariable UniformConstant 
                                       %35 = OpTypeSampler 
                                       %36 = OpTypePointer UniformConstant %35 
              UniformConstant sampler* %37 = OpVariable UniformConstant 
                                       %39 = OpTypeSampledImage %31 
                                   i32 %46 = OpConstant 2 
                                   f32 %53 = OpConstant 3.674022E-40 
                                 f32_3 %54 = OpConstantComposite %53 %53 %53 
                                   i32 %57 = OpConstant 1 
                                       %67 = OpTypePointer Private %6 
                          Private f32* %68 = OpVariable Private 
                                       %69 = OpTypeInt 32 0 
                                   u32 %70 = OpConstant 1 
                                   u32 %73 = OpConstant 0 
                          Private f32* %77 = OpVariable Private 
                                   u32 %78 = OpConstant 2 
                                   f32 %81 = OpConstant 3.674022E-40 
                                   f32 %87 = OpConstant 3.674022E-40 
                                   f32 %90 = OpConstant 3.674022E-40 
                                   f32 %95 = OpConstant 3.674022E-40 
                                       %97 = OpTypePointer Output %14 
                         Output f32_4* %98 = OpVariable Output 
                                  u32 %106 = OpConstant 3 
                                      %107 = OpTypePointer Output %6 
                                   void %4 = OpFunction None %3 
                                        %5 = OpLabel 
                                 f32_2 %13 = OpLoad vs_TEXCOORD0 
                        Uniform f32_4* %21 = OpAccessChain %17 %19 
                                 f32_4 %22 = OpLoad %21 
                                 f32_2 %23 = OpVectorShuffle %22 %22 0 1 
                                 f32_2 %24 = OpFMul %13 %23 
                        Uniform f32_4* %25 = OpAccessChain %17 %19 
                                 f32_4 %26 = OpLoad %25 
                                 f32_2 %27 = OpVectorShuffle %26 %26 2 3 
                                 f32_2 %28 = OpFAdd %24 %27 
                                 f32_3 %29 = OpLoad %9 
                                 f32_3 %30 = OpVectorShuffle %29 %28 3 4 2 
                                               OpStore %9 %30 
                   read_only Texture2D %34 = OpLoad %33 
                               sampler %38 = OpLoad %37 
            read_only Texture2DSampled %40 = OpSampledImage %34 %38 
                                 f32_3 %41 = OpLoad %9 
                                 f32_2 %42 = OpVectorShuffle %41 %41 0 1 
                                 f32_4 %43 = OpImageSampleImplicitLod %40 %42 
                                 f32_3 %44 = OpVectorShuffle %43 %43 0 1 2 
                                               OpStore %9 %44 
                                 f32_3 %45 = OpLoad %9 
                        Uniform f32_4* %47 = OpAccessChain %17 %46 
                                 f32_4 %48 = OpLoad %47 
                                 f32_3 %49 = OpVectorShuffle %48 %48 1 1 1 
                                 f32_3 %50 = OpFNegate %49 
                                 f32_3 %51 = OpFAdd %45 %50 
                                               OpStore %9 %51 
                                 f32_3 %52 = OpLoad %9 
                                 f32_3 %55 = OpExtInst %1 40 %52 %54 
                                               OpStore %9 %55 
                                 f32_3 %56 = OpLoad %9 
                        Uniform f32_4* %58 = OpAccessChain %17 %57 
                                 f32_4 %59 = OpLoad %58 
                                 f32_3 %60 = OpVectorShuffle %59 %59 0 0 0 
                                 f32_3 %61 = OpExtInst %1 37 %56 %60 
                                               OpStore %9 %61 
                                 f32_3 %62 = OpLoad %9 
                        Uniform f32_4* %63 = OpAccessChain %17 %57 
                                 f32_4 %64 = OpLoad %63 
                                 f32_3 %65 = OpVectorShuffle %64 %64 1 1 1 
                                 f32_3 %66 = OpFMul %62 %65 
                                               OpStore %9 %66 
                          Private f32* %71 = OpAccessChain %9 %70 
                                   f32 %72 = OpLoad %71 
                          Private f32* %74 = OpAccessChain %9 %73 
                                   f32 %75 = OpLoad %74 
                                   f32 %76 = OpExtInst %1 40 %72 %75 
                                               OpStore %68 %76 
                          Private f32* %79 = OpAccessChain %9 %78 
                                   f32 %80 = OpLoad %79 
                                   f32 %82 = OpExtInst %1 40 %80 %81 
                                               OpStore %77 %82 
                                   f32 %83 = OpLoad %68 
                                   f32 %84 = OpLoad %77 
                                   f32 %85 = OpExtInst %1 40 %83 %84 
                                               OpStore %68 %85 
                                   f32 %86 = OpLoad %68 
                                   f32 %88 = OpExtInst %1 37 %86 %87 
                                               OpStore %68 %88 
                                   f32 %89 = OpLoad %68 
                                   f32 %91 = OpFMul %89 %90 
                                               OpStore %68 %91 
                                   f32 %92 = OpLoad %68 
                                   f32 %93 = OpExtInst %1 9 %92 
                                               OpStore %68 %93 
                                   f32 %94 = OpLoad %68 
                                   f32 %96 = OpFMul %94 %95 
                                               OpStore %68 %96 
                                 f32_3 %99 = OpLoad %9 
                                  f32 %100 = OpLoad %68 
                                f32_3 %101 = OpCompositeConstruct %100 %100 %100 
                                f32_3 %102 = OpFDiv %99 %101 
                                f32_4 %103 = OpLoad %98 
                                f32_4 %104 = OpVectorShuffle %103 %102 4 5 6 3 
                                               OpStore %98 %104 
                                  f32 %105 = OpLoad %68 
                          Output f32* %108 = OpAccessChain %98 %106 
                                               OpStore %108 %105 
                                               OpReturn
                                               OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "AB_HIGH_PRECISION" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "AB_HIGH_PRECISION" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in  vec4 in_POSITION0;
in  vec2 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BloomParams;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
in  vec2 vs_TEXCOORD0;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0 = texture(_MainTex, u_xlat0.xy);
    u_xlat0 = u_xlat0 + (-_BloomParams.yyyy);
    SV_Target0 = max(u_xlat0, vec4(0.0, 0.0, 0.0, 0.0));
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "AB_HIGH_PRECISION" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 94
; Schema: 0
                                              OpCapability Shader 
                                       %1 = OpExtInstImport "GLSL.std.450" 
                                              OpMemoryModel Logical GLSL450 
                                              OpEntryPoint Vertex %4 "main" %11 %72 %84 %86 
                                              OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                              OpDecorate %11 Location 11 
                                              OpDecorate %16 ArrayStride 16 
                                              OpDecorate %17 ArrayStride 17 
                                              OpMemberDecorate %18 0 Offset 18 
                                              OpMemberDecorate %18 1 Offset 18 
                                              OpDecorate %18 Block 
                                              OpDecorate %20 DescriptorSet 20 
                                              OpDecorate %20 Binding 20 
                                              OpMemberDecorate %70 0 BuiltIn 70 
                                              OpMemberDecorate %70 1 BuiltIn 70 
                                              OpMemberDecorate %70 2 BuiltIn 70 
                                              OpDecorate %70 Block 
                                              OpDecorate vs_TEXCOORD0 Location 84 
                                              OpDecorate %86 Location 86 
                                       %2 = OpTypeVoid 
                                       %3 = OpTypeFunction %2 
                                       %6 = OpTypeFloat 32 
                                       %7 = OpTypeVector %6 4 
                                       %8 = OpTypePointer Private %7 
                        Private f32_4* %9 = OpVariable Private 
                                      %10 = OpTypePointer Input %7 
                         Input f32_4* %11 = OpVariable Input 
                                      %14 = OpTypeInt 32 0 
                                  u32 %15 = OpConstant 4 
                                      %16 = OpTypeArray %7 %15 
                                      %17 = OpTypeArray %7 %15 
                                      %18 = OpTypeStruct %16 %17 
                                      %19 = OpTypePointer Uniform %18 
Uniform struct {f32_4[4]; f32_4[4];}* %20 = OpVariable Uniform 
                                      %21 = OpTypeInt 32 1 
                                  i32 %22 = OpConstant 0 
                                  i32 %23 = OpConstant 1 
                                      %24 = OpTypePointer Uniform %7 
                                  i32 %35 = OpConstant 2 
                                  i32 %44 = OpConstant 3 
                       Private f32_4* %48 = OpVariable Private 
                                  u32 %68 = OpConstant 1 
                                      %69 = OpTypeArray %6 %68 
                                      %70 = OpTypeStruct %7 %6 %69 
                                      %71 = OpTypePointer Output %70 
 Output struct {f32_4; f32; f32[1];}* %72 = OpVariable Output 
                                      %80 = OpTypePointer Output %7 
                                      %82 = OpTypeVector %6 2 
                                      %83 = OpTypePointer Output %82 
               Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                      %85 = OpTypePointer Input %82 
                         Input f32_2* %86 = OpVariable Input 
                                      %88 = OpTypePointer Output %6 
                                  void %4 = OpFunction None %3 
                                       %5 = OpLabel 
                                f32_4 %12 = OpLoad %11 
                                f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                       Uniform f32_4* %25 = OpAccessChain %20 %22 %23 
                                f32_4 %26 = OpLoad %25 
                                f32_4 %27 = OpFMul %13 %26 
                                              OpStore %9 %27 
                       Uniform f32_4* %28 = OpAccessChain %20 %22 %22 
                                f32_4 %29 = OpLoad %28 
                                f32_4 %30 = OpLoad %11 
                                f32_4 %31 = OpVectorShuffle %30 %30 0 0 0 0 
                                f32_4 %32 = OpFMul %29 %31 
                                f32_4 %33 = OpLoad %9 
                                f32_4 %34 = OpFAdd %32 %33 
                                              OpStore %9 %34 
                       Uniform f32_4* %36 = OpAccessChain %20 %22 %35 
                                f32_4 %37 = OpLoad %36 
                                f32_4 %38 = OpLoad %11 
                                f32_4 %39 = OpVectorShuffle %38 %38 2 2 2 2 
                                f32_4 %40 = OpFMul %37 %39 
                                f32_4 %41 = OpLoad %9 
                                f32_4 %42 = OpFAdd %40 %41 
                                              OpStore %9 %42 
                                f32_4 %43 = OpLoad %9 
                       Uniform f32_4* %45 = OpAccessChain %20 %22 %44 
                                f32_4 %46 = OpLoad %45 
                                f32_4 %47 = OpFAdd %43 %46 
                                              OpStore %9 %47 
                                f32_4 %49 = OpLoad %9 
                                f32_4 %50 = OpVectorShuffle %49 %49 1 1 1 1 
                       Uniform f32_4* %51 = OpAccessChain %20 %23 %23 
                                f32_4 %52 = OpLoad %51 
                                f32_4 %53 = OpFMul %50 %52 
                                              OpStore %48 %53 
                       Uniform f32_4* %54 = OpAccessChain %20 %23 %22 
                                f32_4 %55 = OpLoad %54 
                                f32_4 %56 = OpLoad %9 
                                f32_4 %57 = OpVectorShuffle %56 %56 0 0 0 0 
                                f32_4 %58 = OpFMul %55 %57 
                                f32_4 %59 = OpLoad %48 
                                f32_4 %60 = OpFAdd %58 %59 
                                              OpStore %48 %60 
                       Uniform f32_4* %61 = OpAccessChain %20 %23 %35 
                                f32_4 %62 = OpLoad %61 
                                f32_4 %63 = OpLoad %9 
                                f32_4 %64 = OpVectorShuffle %63 %63 2 2 2 2 
                                f32_4 %65 = OpFMul %62 %64 
                                f32_4 %66 = OpLoad %48 
                                f32_4 %67 = OpFAdd %65 %66 
                                              OpStore %48 %67 
                       Uniform f32_4* %73 = OpAccessChain %20 %23 %44 
                                f32_4 %74 = OpLoad %73 
                                f32_4 %75 = OpLoad %9 
                                f32_4 %76 = OpVectorShuffle %75 %75 3 3 3 3 
                                f32_4 %77 = OpFMul %74 %76 
                                f32_4 %78 = OpLoad %48 
                                f32_4 %79 = OpFAdd %77 %78 
                        Output f32_4* %81 = OpAccessChain %72 %22 
                                              OpStore %81 %79 
                                f32_2 %87 = OpLoad %86 
                                              OpStore vs_TEXCOORD0 %87 
                          Output f32* %89 = OpAccessChain %72 %22 %68 
                                  f32 %90 = OpLoad %89 
                                  f32 %91 = OpFNegate %90 
                          Output f32* %92 = OpAccessChain %72 %22 %68 
                                              OpStore %92 %91 
                                              OpReturn
                                              OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 57
; Schema: 0
                                             OpCapability Shader 
                                      %1 = OpExtInstImport "GLSL.std.450" 
                                             OpMemoryModel Logical GLSL450 
                                             OpEntryPoint Fragment %4 "main" %12 %51 
                                             OpExecutionMode %4 OriginUpperLeft 
                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                             OpDecorate vs_TEXCOORD0 Location 12 
                                             OpMemberDecorate %14 0 Offset 14 
                                             OpMemberDecorate %14 1 Offset 14 
                                             OpDecorate %14 Block 
                                             OpDecorate %16 DescriptorSet 16 
                                             OpDecorate %16 Binding 16 
                                             OpDecorate %32 DescriptorSet 32 
                                             OpDecorate %32 Binding 32 
                                             OpDecorate %36 DescriptorSet 36 
                                             OpDecorate %36 Binding 36 
                                             OpDecorate %51 Location 51 
                                      %2 = OpTypeVoid 
                                      %3 = OpTypeFunction %2 
                                      %6 = OpTypeFloat 32 
                                      %7 = OpTypeVector %6 4 
                                      %8 = OpTypePointer Private %7 
                       Private f32_4* %9 = OpVariable Private 
                                     %10 = OpTypeVector %6 2 
                                     %11 = OpTypePointer Input %10 
               Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                     %14 = OpTypeStruct %7 %7 
                                     %15 = OpTypePointer Uniform %14 
     Uniform struct {f32_4; f32_4;}* %16 = OpVariable Uniform 
                                     %17 = OpTypeInt 32 1 
                                 i32 %18 = OpConstant 0 
                                     %19 = OpTypePointer Uniform %7 
                                     %30 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                     %31 = OpTypePointer UniformConstant %30 
UniformConstant read_only Texture2D* %32 = OpVariable UniformConstant 
                                     %34 = OpTypeSampler 
                                     %35 = OpTypePointer UniformConstant %34 
            UniformConstant sampler* %36 = OpVariable UniformConstant 
                                     %38 = OpTypeSampledImage %30 
                                 i32 %44 = OpConstant 1 
                                     %50 = OpTypePointer Output %7 
                       Output f32_4* %51 = OpVariable Output 
                                 f32 %53 = OpConstant 3.674022E-40 
                               f32_4 %54 = OpConstantComposite %53 %53 %53 %53 
                                 void %4 = OpFunction None %3 
                                      %5 = OpLabel 
                               f32_2 %13 = OpLoad vs_TEXCOORD0 
                      Uniform f32_4* %20 = OpAccessChain %16 %18 
                               f32_4 %21 = OpLoad %20 
                               f32_2 %22 = OpVectorShuffle %21 %21 0 1 
                               f32_2 %23 = OpFMul %13 %22 
                      Uniform f32_4* %24 = OpAccessChain %16 %18 
                               f32_4 %25 = OpLoad %24 
                               f32_2 %26 = OpVectorShuffle %25 %25 2 3 
                               f32_2 %27 = OpFAdd %23 %26 
                               f32_4 %28 = OpLoad %9 
                               f32_4 %29 = OpVectorShuffle %28 %27 4 5 2 3 
                                             OpStore %9 %29 
                 read_only Texture2D %33 = OpLoad %32 
                             sampler %37 = OpLoad %36 
          read_only Texture2DSampled %39 = OpSampledImage %33 %37 
                               f32_4 %40 = OpLoad %9 
                               f32_2 %41 = OpVectorShuffle %40 %40 0 1 
                               f32_4 %42 = OpImageSampleImplicitLod %39 %41 
                                             OpStore %9 %42 
                               f32_4 %43 = OpLoad %9 
                      Uniform f32_4* %45 = OpAccessChain %16 %44 
                               f32_4 %46 = OpLoad %45 
                               f32_4 %47 = OpVectorShuffle %46 %46 1 1 1 1 
                               f32_4 %48 = OpFNegate %47 
                               f32_4 %49 = OpFAdd %43 %48 
                                             OpStore %9 %49 
                               f32_4 %52 = OpLoad %9 
                               f32_4 %55 = OpExtInst %1 40 %52 %54 
                                             OpStore %51 %55 
                                             OpReturn
                                             OpFunctionEnd
"
}
}
Program "fp" {
SubProgram "d3d11 " {
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
""
}
SubProgram "vulkan " {
""
}
SubProgram "d3d11 " {
Keywords { "AB_HIGH_PRECISION" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "AB_HIGH_PRECISION" }
""
}
SubProgram "vulkan " {
Keywords { "AB_HIGH_PRECISION" }
""
}
}
}
 Pass {
  Name "frag_thresholdMask"
  ZTest Always
  ZWrite Off
  Cull Off
  GpuProgramID 89948
Program "vp" {
SubProgram "d3d11 " {
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in  vec4 in_POSITION0;
in  vec2 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BloomRange;
uniform 	vec4 _BloomParams;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
UNITY_LOCATION(1) uniform  sampler2D _MaskTex;
in  vec2 vs_TEXCOORD0;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0 = texture(_MainTex, u_xlat0.xy);
    u_xlat1 = texture(_MaskTex, vs_TEXCOORD0.xy);
    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz + (-_BloomParams.yyy);
    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat0.xyz = min(u_xlat0.xyz, _BloomRange.xxx);
    u_xlat0.xyz = u_xlat0.xyz * _BloomRange.yyy;
    u_xlat6 = max(u_xlat0.y, u_xlat0.x);
    u_xlat1.x = max(u_xlat0.z, 9.99999997e-07);
    u_xlat6 = max(u_xlat6, u_xlat1.x);
    u_xlat6 = min(u_xlat6, 1.0);
    u_xlat6 = u_xlat6 * 255.0;
    u_xlat6 = ceil(u_xlat6);
    u_xlat6 = u_xlat6 * 0.00392156886;
    SV_Target0.xyz = u_xlat0.xyz / vec3(u_xlat6);
    SV_Target0.w = u_xlat6;
    return;
}

#endif
"
}
SubProgram "vulkan " {
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 94
; Schema: 0
                                              OpCapability Shader 
                                       %1 = OpExtInstImport "GLSL.std.450" 
                                              OpMemoryModel Logical GLSL450 
                                              OpEntryPoint Vertex %4 "main" %11 %72 %84 %86 
                                              OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                              OpDecorate %11 Location 11 
                                              OpDecorate %16 ArrayStride 16 
                                              OpDecorate %17 ArrayStride 17 
                                              OpMemberDecorate %18 0 Offset 18 
                                              OpMemberDecorate %18 1 Offset 18 
                                              OpDecorate %18 Block 
                                              OpDecorate %20 DescriptorSet 20 
                                              OpDecorate %20 Binding 20 
                                              OpMemberDecorate %70 0 BuiltIn 70 
                                              OpMemberDecorate %70 1 BuiltIn 70 
                                              OpMemberDecorate %70 2 BuiltIn 70 
                                              OpDecorate %70 Block 
                                              OpDecorate vs_TEXCOORD0 Location 84 
                                              OpDecorate %86 Location 86 
                                       %2 = OpTypeVoid 
                                       %3 = OpTypeFunction %2 
                                       %6 = OpTypeFloat 32 
                                       %7 = OpTypeVector %6 4 
                                       %8 = OpTypePointer Private %7 
                        Private f32_4* %9 = OpVariable Private 
                                      %10 = OpTypePointer Input %7 
                         Input f32_4* %11 = OpVariable Input 
                                      %14 = OpTypeInt 32 0 
                                  u32 %15 = OpConstant 4 
                                      %16 = OpTypeArray %7 %15 
                                      %17 = OpTypeArray %7 %15 
                                      %18 = OpTypeStruct %16 %17 
                                      %19 = OpTypePointer Uniform %18 
Uniform struct {f32_4[4]; f32_4[4];}* %20 = OpVariable Uniform 
                                      %21 = OpTypeInt 32 1 
                                  i32 %22 = OpConstant 0 
                                  i32 %23 = OpConstant 1 
                                      %24 = OpTypePointer Uniform %7 
                                  i32 %35 = OpConstant 2 
                                  i32 %44 = OpConstant 3 
                       Private f32_4* %48 = OpVariable Private 
                                  u32 %68 = OpConstant 1 
                                      %69 = OpTypeArray %6 %68 
                                      %70 = OpTypeStruct %7 %6 %69 
                                      %71 = OpTypePointer Output %70 
 Output struct {f32_4; f32; f32[1];}* %72 = OpVariable Output 
                                      %80 = OpTypePointer Output %7 
                                      %82 = OpTypeVector %6 2 
                                      %83 = OpTypePointer Output %82 
               Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                      %85 = OpTypePointer Input %82 
                         Input f32_2* %86 = OpVariable Input 
                                      %88 = OpTypePointer Output %6 
                                  void %4 = OpFunction None %3 
                                       %5 = OpLabel 
                                f32_4 %12 = OpLoad %11 
                                f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                       Uniform f32_4* %25 = OpAccessChain %20 %22 %23 
                                f32_4 %26 = OpLoad %25 
                                f32_4 %27 = OpFMul %13 %26 
                                              OpStore %9 %27 
                       Uniform f32_4* %28 = OpAccessChain %20 %22 %22 
                                f32_4 %29 = OpLoad %28 
                                f32_4 %30 = OpLoad %11 
                                f32_4 %31 = OpVectorShuffle %30 %30 0 0 0 0 
                                f32_4 %32 = OpFMul %29 %31 
                                f32_4 %33 = OpLoad %9 
                                f32_4 %34 = OpFAdd %32 %33 
                                              OpStore %9 %34 
                       Uniform f32_4* %36 = OpAccessChain %20 %22 %35 
                                f32_4 %37 = OpLoad %36 
                                f32_4 %38 = OpLoad %11 
                                f32_4 %39 = OpVectorShuffle %38 %38 2 2 2 2 
                                f32_4 %40 = OpFMul %37 %39 
                                f32_4 %41 = OpLoad %9 
                                f32_4 %42 = OpFAdd %40 %41 
                                              OpStore %9 %42 
                                f32_4 %43 = OpLoad %9 
                       Uniform f32_4* %45 = OpAccessChain %20 %22 %44 
                                f32_4 %46 = OpLoad %45 
                                f32_4 %47 = OpFAdd %43 %46 
                                              OpStore %9 %47 
                                f32_4 %49 = OpLoad %9 
                                f32_4 %50 = OpVectorShuffle %49 %49 1 1 1 1 
                       Uniform f32_4* %51 = OpAccessChain %20 %23 %23 
                                f32_4 %52 = OpLoad %51 
                                f32_4 %53 = OpFMul %50 %52 
                                              OpStore %48 %53 
                       Uniform f32_4* %54 = OpAccessChain %20 %23 %22 
                                f32_4 %55 = OpLoad %54 
                                f32_4 %56 = OpLoad %9 
                                f32_4 %57 = OpVectorShuffle %56 %56 0 0 0 0 
                                f32_4 %58 = OpFMul %55 %57 
                                f32_4 %59 = OpLoad %48 
                                f32_4 %60 = OpFAdd %58 %59 
                                              OpStore %48 %60 
                       Uniform f32_4* %61 = OpAccessChain %20 %23 %35 
                                f32_4 %62 = OpLoad %61 
                                f32_4 %63 = OpLoad %9 
                                f32_4 %64 = OpVectorShuffle %63 %63 2 2 2 2 
                                f32_4 %65 = OpFMul %62 %64 
                                f32_4 %66 = OpLoad %48 
                                f32_4 %67 = OpFAdd %65 %66 
                                              OpStore %48 %67 
                       Uniform f32_4* %73 = OpAccessChain %20 %23 %44 
                                f32_4 %74 = OpLoad %73 
                                f32_4 %75 = OpLoad %9 
                                f32_4 %76 = OpVectorShuffle %75 %75 3 3 3 3 
                                f32_4 %77 = OpFMul %74 %76 
                                f32_4 %78 = OpLoad %48 
                                f32_4 %79 = OpFAdd %77 %78 
                        Output f32_4* %81 = OpAccessChain %72 %22 
                                              OpStore %81 %79 
                                f32_2 %87 = OpLoad %86 
                                              OpStore vs_TEXCOORD0 %87 
                          Output f32* %89 = OpAccessChain %72 %22 %68 
                                  f32 %90 = OpLoad %89 
                                  f32 %91 = OpFNegate %90 
                          Output f32* %92 = OpAccessChain %72 %22 %68 
                                              OpStore %92 %91 
                                              OpReturn
                                              OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 122
; Schema: 0
                                               OpCapability Shader 
                                        %1 = OpExtInstImport "GLSL.std.450" 
                                               OpMemoryModel Logical GLSL450 
                                               OpEntryPoint Fragment %4 "main" %12 %110 
                                               OpExecutionMode %4 OriginUpperLeft 
                                               OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                               OpDecorate vs_TEXCOORD0 Location 12 
                                               OpMemberDecorate %15 0 Offset 15 
                                               OpMemberDecorate %15 1 Offset 15 
                                               OpMemberDecorate %15 2 Offset 15 
                                               OpDecorate %15 Block 
                                               OpDecorate %17 DescriptorSet 17 
                                               OpDecorate %17 Binding 17 
                                               OpDecorate %33 DescriptorSet 33 
                                               OpDecorate %33 Binding 33 
                                               OpDecorate %37 DescriptorSet 37 
                                               OpDecorate %37 Binding 37 
                                               OpDecorate %46 DescriptorSet 46 
                                               OpDecorate %46 Binding 46 
                                               OpDecorate %48 DescriptorSet 48 
                                               OpDecorate %48 Binding 48 
                                               OpDecorate %110 Location 110 
                                        %2 = OpTypeVoid 
                                        %3 = OpTypeFunction %2 
                                        %6 = OpTypeFloat 32 
                                        %7 = OpTypeVector %6 3 
                                        %8 = OpTypePointer Private %7 
                         Private f32_3* %9 = OpVariable Private 
                                       %10 = OpTypeVector %6 2 
                                       %11 = OpTypePointer Input %10 
                 Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                       %14 = OpTypeVector %6 4 
                                       %15 = OpTypeStruct %14 %14 %14 
                                       %16 = OpTypePointer Uniform %15 
Uniform struct {f32_4; f32_4; f32_4;}* %17 = OpVariable Uniform 
                                       %18 = OpTypeInt 32 1 
                                   i32 %19 = OpConstant 0 
                                       %20 = OpTypePointer Uniform %14 
                                       %31 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                       %32 = OpTypePointer UniformConstant %31 
  UniformConstant read_only Texture2D* %33 = OpVariable UniformConstant 
                                       %35 = OpTypeSampler 
                                       %36 = OpTypePointer UniformConstant %35 
              UniformConstant sampler* %37 = OpVariable UniformConstant 
                                       %39 = OpTypeSampledImage %31 
                        Private f32_3* %45 = OpVariable Private 
  UniformConstant read_only Texture2D* %46 = OpVariable UniformConstant 
              UniformConstant sampler* %48 = OpVariable UniformConstant 
                                   i32 %57 = OpConstant 2 
                                   f32 %64 = OpConstant 3.674022E-40 
                                 f32_3 %65 = OpConstantComposite %64 %64 %64 
                                   i32 %68 = OpConstant 1 
                                       %78 = OpTypePointer Private %6 
                          Private f32* %79 = OpVariable Private 
                                       %80 = OpTypeInt 32 0 
                                   u32 %81 = OpConstant 1 
                                   u32 %84 = OpConstant 0 
                                   u32 %88 = OpConstant 2 
                                   f32 %91 = OpConstant 3.674022E-40 
                                   f32 %99 = OpConstant 3.674022E-40 
                                  f32 %102 = OpConstant 3.674022E-40 
                                  f32 %107 = OpConstant 3.674022E-40 
                                      %109 = OpTypePointer Output %14 
                        Output f32_4* %110 = OpVariable Output 
                                  u32 %118 = OpConstant 3 
                                      %119 = OpTypePointer Output %6 
                                   void %4 = OpFunction None %3 
                                        %5 = OpLabel 
                                 f32_2 %13 = OpLoad vs_TEXCOORD0 
                        Uniform f32_4* %21 = OpAccessChain %17 %19 
                                 f32_4 %22 = OpLoad %21 
                                 f32_2 %23 = OpVectorShuffle %22 %22 0 1 
                                 f32_2 %24 = OpFMul %13 %23 
                        Uniform f32_4* %25 = OpAccessChain %17 %19 
                                 f32_4 %26 = OpLoad %25 
                                 f32_2 %27 = OpVectorShuffle %26 %26 2 3 
                                 f32_2 %28 = OpFAdd %24 %27 
                                 f32_3 %29 = OpLoad %9 
                                 f32_3 %30 = OpVectorShuffle %29 %28 3 4 2 
                                               OpStore %9 %30 
                   read_only Texture2D %34 = OpLoad %33 
                               sampler %38 = OpLoad %37 
            read_only Texture2DSampled %40 = OpSampledImage %34 %38 
                                 f32_3 %41 = OpLoad %9 
                                 f32_2 %42 = OpVectorShuffle %41 %41 0 1 
                                 f32_4 %43 = OpImageSampleImplicitLod %40 %42 
                                 f32_3 %44 = OpVectorShuffle %43 %43 0 1 2 
                                               OpStore %9 %44 
                   read_only Texture2D %47 = OpLoad %46 
                               sampler %49 = OpLoad %48 
            read_only Texture2DSampled %50 = OpSampledImage %47 %49 
                                 f32_2 %51 = OpLoad vs_TEXCOORD0 
                                 f32_4 %52 = OpImageSampleImplicitLod %50 %51 
                                 f32_3 %53 = OpVectorShuffle %52 %52 0 1 2 
                                               OpStore %45 %53 
                                 f32_3 %54 = OpLoad %9 
                                 f32_3 %55 = OpLoad %45 
                                 f32_3 %56 = OpFMul %54 %55 
                        Uniform f32_4* %58 = OpAccessChain %17 %57 
                                 f32_4 %59 = OpLoad %58 
                                 f32_3 %60 = OpVectorShuffle %59 %59 1 1 1 
                                 f32_3 %61 = OpFNegate %60 
                                 f32_3 %62 = OpFAdd %56 %61 
                                               OpStore %9 %62 
                                 f32_3 %63 = OpLoad %9 
                                 f32_3 %66 = OpExtInst %1 40 %63 %65 
                                               OpStore %9 %66 
                                 f32_3 %67 = OpLoad %9 
                        Uniform f32_4* %69 = OpAccessChain %17 %68 
                                 f32_4 %70 = OpLoad %69 
                                 f32_3 %71 = OpVectorShuffle %70 %70 0 0 0 
                                 f32_3 %72 = OpExtInst %1 37 %67 %71 
                                               OpStore %9 %72 
                                 f32_3 %73 = OpLoad %9 
                        Uniform f32_4* %74 = OpAccessChain %17 %68 
                                 f32_4 %75 = OpLoad %74 
                                 f32_3 %76 = OpVectorShuffle %75 %75 1 1 1 
                                 f32_3 %77 = OpFMul %73 %76 
                                               OpStore %9 %77 
                          Private f32* %82 = OpAccessChain %9 %81 
                                   f32 %83 = OpLoad %82 
                          Private f32* %85 = OpAccessChain %9 %84 
                                   f32 %86 = OpLoad %85 
                                   f32 %87 = OpExtInst %1 40 %83 %86 
                                               OpStore %79 %87 
                          Private f32* %89 = OpAccessChain %9 %88 
                                   f32 %90 = OpLoad %89 
                                   f32 %92 = OpExtInst %1 40 %90 %91 
                          Private f32* %93 = OpAccessChain %45 %84 
                                               OpStore %93 %92 
                                   f32 %94 = OpLoad %79 
                          Private f32* %95 = OpAccessChain %45 %84 
                                   f32 %96 = OpLoad %95 
                                   f32 %97 = OpExtInst %1 40 %94 %96 
                                               OpStore %79 %97 
                                   f32 %98 = OpLoad %79 
                                  f32 %100 = OpExtInst %1 37 %98 %99 
                                               OpStore %79 %100 
                                  f32 %101 = OpLoad %79 
                                  f32 %103 = OpFMul %101 %102 
                                               OpStore %79 %103 
                                  f32 %104 = OpLoad %79 
                                  f32 %105 = OpExtInst %1 9 %104 
                                               OpStore %79 %105 
                                  f32 %106 = OpLoad %79 
                                  f32 %108 = OpFMul %106 %107 
                                               OpStore %79 %108 
                                f32_3 %111 = OpLoad %9 
                                  f32 %112 = OpLoad %79 
                                f32_3 %113 = OpCompositeConstruct %112 %112 %112 
                                f32_3 %114 = OpFDiv %111 %113 
                                f32_4 %115 = OpLoad %110 
                                f32_4 %116 = OpVectorShuffle %115 %114 4 5 6 3 
                                               OpStore %110 %116 
                                  f32 %117 = OpLoad %79 
                          Output f32* %120 = OpAccessChain %110 %118 
                                               OpStore %120 %117 
                                               OpReturn
                                               OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "AB_HIGH_PRECISION" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "AB_HIGH_PRECISION" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in  vec4 in_POSITION0;
in  vec2 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BloomParams;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
UNITY_LOCATION(1) uniform  sampler2D _MaskTex;
in  vec2 vs_TEXCOORD0;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0 = texture(_MainTex, u_xlat0.xy);
    u_xlat1 = texture(_MaskTex, vs_TEXCOORD0.xy);
    u_xlat0 = u_xlat0 * u_xlat1 + (-_BloomParams.yyyy);
    SV_Target0 = max(u_xlat0, vec4(0.0, 0.0, 0.0, 0.0));
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "AB_HIGH_PRECISION" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 94
; Schema: 0
                                              OpCapability Shader 
                                       %1 = OpExtInstImport "GLSL.std.450" 
                                              OpMemoryModel Logical GLSL450 
                                              OpEntryPoint Vertex %4 "main" %11 %72 %84 %86 
                                              OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                              OpDecorate %11 Location 11 
                                              OpDecorate %16 ArrayStride 16 
                                              OpDecorate %17 ArrayStride 17 
                                              OpMemberDecorate %18 0 Offset 18 
                                              OpMemberDecorate %18 1 Offset 18 
                                              OpDecorate %18 Block 
                                              OpDecorate %20 DescriptorSet 20 
                                              OpDecorate %20 Binding 20 
                                              OpMemberDecorate %70 0 BuiltIn 70 
                                              OpMemberDecorate %70 1 BuiltIn 70 
                                              OpMemberDecorate %70 2 BuiltIn 70 
                                              OpDecorate %70 Block 
                                              OpDecorate vs_TEXCOORD0 Location 84 
                                              OpDecorate %86 Location 86 
                                       %2 = OpTypeVoid 
                                       %3 = OpTypeFunction %2 
                                       %6 = OpTypeFloat 32 
                                       %7 = OpTypeVector %6 4 
                                       %8 = OpTypePointer Private %7 
                        Private f32_4* %9 = OpVariable Private 
                                      %10 = OpTypePointer Input %7 
                         Input f32_4* %11 = OpVariable Input 
                                      %14 = OpTypeInt 32 0 
                                  u32 %15 = OpConstant 4 
                                      %16 = OpTypeArray %7 %15 
                                      %17 = OpTypeArray %7 %15 
                                      %18 = OpTypeStruct %16 %17 
                                      %19 = OpTypePointer Uniform %18 
Uniform struct {f32_4[4]; f32_4[4];}* %20 = OpVariable Uniform 
                                      %21 = OpTypeInt 32 1 
                                  i32 %22 = OpConstant 0 
                                  i32 %23 = OpConstant 1 
                                      %24 = OpTypePointer Uniform %7 
                                  i32 %35 = OpConstant 2 
                                  i32 %44 = OpConstant 3 
                       Private f32_4* %48 = OpVariable Private 
                                  u32 %68 = OpConstant 1 
                                      %69 = OpTypeArray %6 %68 
                                      %70 = OpTypeStruct %7 %6 %69 
                                      %71 = OpTypePointer Output %70 
 Output struct {f32_4; f32; f32[1];}* %72 = OpVariable Output 
                                      %80 = OpTypePointer Output %7 
                                      %82 = OpTypeVector %6 2 
                                      %83 = OpTypePointer Output %82 
               Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                      %85 = OpTypePointer Input %82 
                         Input f32_2* %86 = OpVariable Input 
                                      %88 = OpTypePointer Output %6 
                                  void %4 = OpFunction None %3 
                                       %5 = OpLabel 
                                f32_4 %12 = OpLoad %11 
                                f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                       Uniform f32_4* %25 = OpAccessChain %20 %22 %23 
                                f32_4 %26 = OpLoad %25 
                                f32_4 %27 = OpFMul %13 %26 
                                              OpStore %9 %27 
                       Uniform f32_4* %28 = OpAccessChain %20 %22 %22 
                                f32_4 %29 = OpLoad %28 
                                f32_4 %30 = OpLoad %11 
                                f32_4 %31 = OpVectorShuffle %30 %30 0 0 0 0 
                                f32_4 %32 = OpFMul %29 %31 
                                f32_4 %33 = OpLoad %9 
                                f32_4 %34 = OpFAdd %32 %33 
                                              OpStore %9 %34 
                       Uniform f32_4* %36 = OpAccessChain %20 %22 %35 
                                f32_4 %37 = OpLoad %36 
                                f32_4 %38 = OpLoad %11 
                                f32_4 %39 = OpVectorShuffle %38 %38 2 2 2 2 
                                f32_4 %40 = OpFMul %37 %39 
                                f32_4 %41 = OpLoad %9 
                                f32_4 %42 = OpFAdd %40 %41 
                                              OpStore %9 %42 
                                f32_4 %43 = OpLoad %9 
                       Uniform f32_4* %45 = OpAccessChain %20 %22 %44 
                                f32_4 %46 = OpLoad %45 
                                f32_4 %47 = OpFAdd %43 %46 
                                              OpStore %9 %47 
                                f32_4 %49 = OpLoad %9 
                                f32_4 %50 = OpVectorShuffle %49 %49 1 1 1 1 
                       Uniform f32_4* %51 = OpAccessChain %20 %23 %23 
                                f32_4 %52 = OpLoad %51 
                                f32_4 %53 = OpFMul %50 %52 
                                              OpStore %48 %53 
                       Uniform f32_4* %54 = OpAccessChain %20 %23 %22 
                                f32_4 %55 = OpLoad %54 
                                f32_4 %56 = OpLoad %9 
                                f32_4 %57 = OpVectorShuffle %56 %56 0 0 0 0 
                                f32_4 %58 = OpFMul %55 %57 
                                f32_4 %59 = OpLoad %48 
                                f32_4 %60 = OpFAdd %58 %59 
                                              OpStore %48 %60 
                       Uniform f32_4* %61 = OpAccessChain %20 %23 %35 
                                f32_4 %62 = OpLoad %61 
                                f32_4 %63 = OpLoad %9 
                                f32_4 %64 = OpVectorShuffle %63 %63 2 2 2 2 
                                f32_4 %65 = OpFMul %62 %64 
                                f32_4 %66 = OpLoad %48 
                                f32_4 %67 = OpFAdd %65 %66 
                                              OpStore %48 %67 
                       Uniform f32_4* %73 = OpAccessChain %20 %23 %44 
                                f32_4 %74 = OpLoad %73 
                                f32_4 %75 = OpLoad %9 
                                f32_4 %76 = OpVectorShuffle %75 %75 3 3 3 3 
                                f32_4 %77 = OpFMul %74 %76 
                                f32_4 %78 = OpLoad %48 
                                f32_4 %79 = OpFAdd %77 %78 
                        Output f32_4* %81 = OpAccessChain %72 %22 
                                              OpStore %81 %79 
                                f32_2 %87 = OpLoad %86 
                                              OpStore vs_TEXCOORD0 %87 
                          Output f32* %89 = OpAccessChain %72 %22 %68 
                                  f32 %90 = OpLoad %89 
                                  f32 %91 = OpFNegate %90 
                          Output f32* %92 = OpAccessChain %72 %22 %68 
                                              OpStore %92 %91 
                                              OpReturn
                                              OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 67
; Schema: 0
                                             OpCapability Shader 
                                      %1 = OpExtInstImport "GLSL.std.450" 
                                             OpMemoryModel Logical GLSL450 
                                             OpEntryPoint Fragment %4 "main" %12 %61 
                                             OpExecutionMode %4 OriginUpperLeft 
                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                             OpDecorate vs_TEXCOORD0 Location 12 
                                             OpMemberDecorate %14 0 Offset 14 
                                             OpMemberDecorate %14 1 Offset 14 
                                             OpDecorate %14 Block 
                                             OpDecorate %16 DescriptorSet 16 
                                             OpDecorate %16 Binding 16 
                                             OpDecorate %32 DescriptorSet 32 
                                             OpDecorate %32 Binding 32 
                                             OpDecorate %36 DescriptorSet 36 
                                             OpDecorate %36 Binding 36 
                                             OpDecorate %44 DescriptorSet 44 
                                             OpDecorate %44 Binding 44 
                                             OpDecorate %46 DescriptorSet 46 
                                             OpDecorate %46 Binding 46 
                                             OpDecorate %61 Location 61 
                                      %2 = OpTypeVoid 
                                      %3 = OpTypeFunction %2 
                                      %6 = OpTypeFloat 32 
                                      %7 = OpTypeVector %6 4 
                                      %8 = OpTypePointer Private %7 
                       Private f32_4* %9 = OpVariable Private 
                                     %10 = OpTypeVector %6 2 
                                     %11 = OpTypePointer Input %10 
               Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                     %14 = OpTypeStruct %7 %7 
                                     %15 = OpTypePointer Uniform %14 
     Uniform struct {f32_4; f32_4;}* %16 = OpVariable Uniform 
                                     %17 = OpTypeInt 32 1 
                                 i32 %18 = OpConstant 0 
                                     %19 = OpTypePointer Uniform %7 
                                     %30 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                     %31 = OpTypePointer UniformConstant %30 
UniformConstant read_only Texture2D* %32 = OpVariable UniformConstant 
                                     %34 = OpTypeSampler 
                                     %35 = OpTypePointer UniformConstant %34 
            UniformConstant sampler* %36 = OpVariable UniformConstant 
                                     %38 = OpTypeSampledImage %30 
                      Private f32_4* %43 = OpVariable Private 
UniformConstant read_only Texture2D* %44 = OpVariable UniformConstant 
            UniformConstant sampler* %46 = OpVariable UniformConstant 
                                 i32 %54 = OpConstant 1 
                                     %60 = OpTypePointer Output %7 
                       Output f32_4* %61 = OpVariable Output 
                                 f32 %63 = OpConstant 3.674022E-40 
                               f32_4 %64 = OpConstantComposite %63 %63 %63 %63 
                                 void %4 = OpFunction None %3 
                                      %5 = OpLabel 
                               f32_2 %13 = OpLoad vs_TEXCOORD0 
                      Uniform f32_4* %20 = OpAccessChain %16 %18 
                               f32_4 %21 = OpLoad %20 
                               f32_2 %22 = OpVectorShuffle %21 %21 0 1 
                               f32_2 %23 = OpFMul %13 %22 
                      Uniform f32_4* %24 = OpAccessChain %16 %18 
                               f32_4 %25 = OpLoad %24 
                               f32_2 %26 = OpVectorShuffle %25 %25 2 3 
                               f32_2 %27 = OpFAdd %23 %26 
                               f32_4 %28 = OpLoad %9 
                               f32_4 %29 = OpVectorShuffle %28 %27 4 5 2 3 
                                             OpStore %9 %29 
                 read_only Texture2D %33 = OpLoad %32 
                             sampler %37 = OpLoad %36 
          read_only Texture2DSampled %39 = OpSampledImage %33 %37 
                               f32_4 %40 = OpLoad %9 
                               f32_2 %41 = OpVectorShuffle %40 %40 0 1 
                               f32_4 %42 = OpImageSampleImplicitLod %39 %41 
                                             OpStore %9 %42 
                 read_only Texture2D %45 = OpLoad %44 
                             sampler %47 = OpLoad %46 
          read_only Texture2DSampled %48 = OpSampledImage %45 %47 
                               f32_2 %49 = OpLoad vs_TEXCOORD0 
                               f32_4 %50 = OpImageSampleImplicitLod %48 %49 
                                             OpStore %43 %50 
                               f32_4 %51 = OpLoad %9 
                               f32_4 %52 = OpLoad %43 
                               f32_4 %53 = OpFMul %51 %52 
                      Uniform f32_4* %55 = OpAccessChain %16 %54 
                               f32_4 %56 = OpLoad %55 
                               f32_4 %57 = OpVectorShuffle %56 %56 1 1 1 1 
                               f32_4 %58 = OpFNegate %57 
                               f32_4 %59 = OpFAdd %53 %58 
                                             OpStore %9 %59 
                               f32_4 %62 = OpLoad %9 
                               f32_4 %65 = OpExtInst %1 40 %62 %64 
                                             OpStore %61 %65 
                                             OpReturn
                                             OpFunctionEnd
"
}
}
Program "fp" {
SubProgram "d3d11 " {
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
""
}
SubProgram "vulkan " {
""
}
SubProgram "d3d11 " {
Keywords { "AB_HIGH_PRECISION" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "AB_HIGH_PRECISION" }
""
}
SubProgram "vulkan " {
Keywords { "AB_HIGH_PRECISION" }
""
}
}
}
 Pass {
  Name "frag_anamorphicGlare"
  ZTest Always
  ZWrite Off
  Cull Off
  GpuProgramID 160591
Program "vp" {
SubProgram "d3d11 " {
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in  vec4 in_POSITION0;
in  vec2 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4_AnamorphicGlareOffsetsMat0[4];
uniform 	vec4 hlslcc_mtx4x4_AnamorphicGlareOffsetsMat1[4];
uniform 	vec4 hlslcc_mtx4x4_AnamorphicGlareOffsetsMat2[4];
uniform 	vec4 hlslcc_mtx4x4_AnamorphicGlareOffsetsMat3[4];
uniform 	vec4 hlslcc_mtx4x4_AnamorphicGlareWeightsMat0[4];
uniform 	vec4 hlslcc_mtx4x4_AnamorphicGlareWeightsMat1[4];
uniform 	vec4 hlslcc_mtx4x4_AnamorphicGlareWeightsMat2[4];
uniform 	vec4 hlslcc_mtx4x4_AnamorphicGlareWeightsMat3[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BloomRange;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
in  vec2 vs_TEXCOORD0;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat12;
void main()
{
    u_xlat0.xz = vs_TEXCOORD0.xx + hlslcc_mtx4x4_AnamorphicGlareOffsetsMat0[0].xy;
    u_xlat0.yw = vs_TEXCOORD0.yy + hlslcc_mtx4x4_AnamorphicGlareOffsetsMat0[1].xy;
    u_xlat0 = u_xlat0 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
    u_xlat1 = texture(_MainTex, u_xlat0.xy);
    u_xlat0 = texture(_MainTex, u_xlat0.zw);
    u_xlat1.xyz = u_xlat1.xyz * _BloomRange.xxx;
    u_xlat1.xyz = u_xlat1.www * u_xlat1.xyz;
    u_xlat2.x = u_xlat1.x * hlslcc_mtx4x4_AnamorphicGlareWeightsMat0[0].x;
    u_xlat2.y = u_xlat1.y * hlslcc_mtx4x4_AnamorphicGlareWeightsMat0[1].x;
    u_xlat2.z = u_xlat1.z * hlslcc_mtx4x4_AnamorphicGlareWeightsMat0[2].x;
    u_xlat0.xyz = u_xlat0.xyz * _BloomRange.xxx;
    u_xlat0.xyz = u_xlat0.www * u_xlat0.xyz;
    u_xlat1.x = u_xlat0.x * hlslcc_mtx4x4_AnamorphicGlareWeightsMat0[0].y;
    u_xlat1.y = u_xlat0.y * hlslcc_mtx4x4_AnamorphicGlareWeightsMat0[1].y;
    u_xlat1.z = u_xlat0.z * hlslcc_mtx4x4_AnamorphicGlareWeightsMat0[2].y;
    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
    u_xlat1.xz = vs_TEXCOORD0.xx + hlslcc_mtx4x4_AnamorphicGlareOffsetsMat0[0].zw;
    u_xlat1.yw = vs_TEXCOORD0.yy + hlslcc_mtx4x4_AnamorphicGlareOffsetsMat0[1].zw;
    u_xlat1 = u_xlat1 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
    u_xlat2 = texture(_MainTex, u_xlat1.xy);
    u_xlat1 = texture(_MainTex, u_xlat1.zw);
    u_xlat2.xyz = u_xlat2.xyz * _BloomRange.xxx;
    u_xlat2.xyz = u_xlat2.www * u_xlat2.xyz;
    u_xlat3.x = u_xlat2.x * hlslcc_mtx4x4_AnamorphicGlareWeightsMat0[0].z;
    u_xlat3.y = u_xlat2.y * hlslcc_mtx4x4_AnamorphicGlareWeightsMat0[1].z;
    u_xlat3.z = u_xlat2.z * hlslcc_mtx4x4_AnamorphicGlareWeightsMat0[2].z;
    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _BloomRange.xxx;
    u_xlat1.xyz = u_xlat1.www * u_xlat1.xyz;
    u_xlat2.x = u_xlat1.x * hlslcc_mtx4x4_AnamorphicGlareWeightsMat0[0].w;
    u_xlat2.y = u_xlat1.y * hlslcc_mtx4x4_AnamorphicGlareWeightsMat0[1].w;
    u_xlat2.z = u_xlat1.z * hlslcc_mtx4x4_AnamorphicGlareWeightsMat0[2].w;
    u_xlat0.xyz = u_xlat0.xyz + u_xlat2.xyz;
    u_xlat1.xz = vs_TEXCOORD0.xx + hlslcc_mtx4x4_AnamorphicGlareOffsetsMat1[0].xy;
    u_xlat1.yw = vs_TEXCOORD0.yy + hlslcc_mtx4x4_AnamorphicGlareOffsetsMat1[1].xy;
    u_xlat1 = u_xlat1 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
    u_xlat2 = texture(_MainTex, u_xlat1.xy);
    u_xlat1 = texture(_MainTex, u_xlat1.zw);
    u_xlat2.xyz = u_xlat2.xyz * _BloomRange.xxx;
    u_xlat2.xyz = u_xlat2.www * u_xlat2.xyz;
    u_xlat3.x = u_xlat2.x * hlslcc_mtx4x4_AnamorphicGlareWeightsMat1[0].x;
    u_xlat3.y = u_xlat2.y * hlslcc_mtx4x4_AnamorphicGlareWeightsMat1[1].x;
    u_xlat3.z = u_xlat2.z * hlslcc_mtx4x4_AnamorphicGlareWeightsMat1[2].x;
    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _BloomRange.xxx;
    u_xlat1.xyz = u_xlat1.www * u_xlat1.xyz;
    u_xlat2.x = u_xlat1.x * hlslcc_mtx4x4_AnamorphicGlareWeightsMat1[0].y;
    u_xlat2.y = u_xlat1.y * hlslcc_mtx4x4_AnamorphicGlareWeightsMat1[1].y;
    u_xlat2.z = u_xlat1.z * hlslcc_mtx4x4_AnamorphicGlareWeightsMat1[2].y;
    u_xlat0.xyz = u_xlat0.xyz + u_xlat2.xyz;
    u_xlat1.xz = vs_TEXCOORD0.xx + hlslcc_mtx4x4_AnamorphicGlareOffsetsMat1[0].zw;
    u_xlat1.yw = vs_TEXCOORD0.yy + hlslcc_mtx4x4_AnamorphicGlareOffsetsMat1[1].zw;
    u_xlat1 = u_xlat1 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
    u_xlat2 = texture(_MainTex, u_xlat1.xy);
    u_xlat1 = texture(_MainTex, u_xlat1.zw);
    u_xlat2.xyz = u_xlat2.xyz * _BloomRange.xxx;
    u_xlat2.xyz = u_xlat2.www * u_xlat2.xyz;
    u_xlat3.x = u_xlat2.x * hlslcc_mtx4x4_AnamorphicGlareWeightsMat1[0].z;
    u_xlat3.y = u_xlat2.y * hlslcc_mtx4x4_AnamorphicGlareWeightsMat1[1].z;
    u_xlat3.z = u_xlat2.z * hlslcc_mtx4x4_AnamorphicGlareWeightsMat1[2].z;
    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _BloomRange.xxx;
    u_xlat1.xyz = u_xlat1.www * u_xlat1.xyz;
    u_xlat2.x = u_xlat1.x * hlslcc_mtx4x4_AnamorphicGlareWeightsMat1[0].w;
    u_xlat2.y = u_xlat1.y * hlslcc_mtx4x4_AnamorphicGlareWeightsMat1[1].w;
    u_xlat2.z = u_xlat1.z * hlslcc_mtx4x4_AnamorphicGlareWeightsMat1[2].w;
    u_xlat0.xyz = u_xlat0.xyz + u_xlat2.xyz;
    u_xlat1.xz = vs_TEXCOORD0.xx + hlslcc_mtx4x4_AnamorphicGlareOffsetsMat2[0].xy;
    u_xlat1.yw = vs_TEXCOORD0.yy + hlslcc_mtx4x4_AnamorphicGlareOffsetsMat2[1].xy;
    u_xlat1 = u_xlat1 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
    u_xlat2 = texture(_MainTex, u_xlat1.xy);
    u_xlat1 = texture(_MainTex, u_xlat1.zw);
    u_xlat2.xyz = u_xlat2.xyz * _BloomRange.xxx;
    u_xlat2.xyz = u_xlat2.www * u_xlat2.xyz;
    u_xlat3.x = u_xlat2.x * hlslcc_mtx4x4_AnamorphicGlareWeightsMat2[0].x;
    u_xlat3.y = u_xlat2.y * hlslcc_mtx4x4_AnamorphicGlareWeightsMat2[1].x;
    u_xlat3.z = u_xlat2.z * hlslcc_mtx4x4_AnamorphicGlareWeightsMat2[2].x;
    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _BloomRange.xxx;
    u_xlat1.xyz = u_xlat1.www * u_xlat1.xyz;
    u_xlat2.x = u_xlat1.x * hlslcc_mtx4x4_AnamorphicGlareWeightsMat2[0].y;
    u_xlat2.y = u_xlat1.y * hlslcc_mtx4x4_AnamorphicGlareWeightsMat2[1].y;
    u_xlat2.z = u_xlat1.z * hlslcc_mtx4x4_AnamorphicGlareWeightsMat2[2].y;
    u_xlat0.xyz = u_xlat0.xyz + u_xlat2.xyz;
    u_xlat1.xz = vs_TEXCOORD0.xx + hlslcc_mtx4x4_AnamorphicGlareOffsetsMat2[0].zw;
    u_xlat1.yw = vs_TEXCOORD0.yy + hlslcc_mtx4x4_AnamorphicGlareOffsetsMat2[1].zw;
    u_xlat1 = u_xlat1 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
    u_xlat2 = texture(_MainTex, u_xlat1.xy);
    u_xlat1 = texture(_MainTex, u_xlat1.zw);
    u_xlat2.xyz = u_xlat2.xyz * _BloomRange.xxx;
    u_xlat2.xyz = u_xlat2.www * u_xlat2.xyz;
    u_xlat3.x = u_xlat2.x * hlslcc_mtx4x4_AnamorphicGlareWeightsMat2[0].z;
    u_xlat3.y = u_xlat2.y * hlslcc_mtx4x4_AnamorphicGlareWeightsMat2[1].z;
    u_xlat3.z = u_xlat2.z * hlslcc_mtx4x4_AnamorphicGlareWeightsMat2[2].z;
    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _BloomRange.xxx;
    u_xlat1.xyz = u_xlat1.www * u_xlat1.xyz;
    u_xlat2.x = u_xlat1.x * hlslcc_mtx4x4_AnamorphicGlareWeightsMat2[0].w;
    u_xlat2.y = u_xlat1.y * hlslcc_mtx4x4_AnamorphicGlareWeightsMat2[1].w;
    u_xlat2.z = u_xlat1.z * hlslcc_mtx4x4_AnamorphicGlareWeightsMat2[2].w;
    u_xlat0.xyz = u_xlat0.xyz + u_xlat2.xyz;
    u_xlat1.xz = vs_TEXCOORD0.xx + hlslcc_mtx4x4_AnamorphicGlareOffsetsMat3[0].xy;
    u_xlat1.yw = vs_TEXCOORD0.yy + hlslcc_mtx4x4_AnamorphicGlareOffsetsMat3[1].xy;
    u_xlat1 = u_xlat1 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
    u_xlat2 = texture(_MainTex, u_xlat1.xy);
    u_xlat1 = texture(_MainTex, u_xlat1.zw);
    u_xlat2.xyz = u_xlat2.xyz * _BloomRange.xxx;
    u_xlat2.xyz = u_xlat2.www * u_xlat2.xyz;
    u_xlat3.x = u_xlat2.x * hlslcc_mtx4x4_AnamorphicGlareWeightsMat3[0].x;
    u_xlat3.y = u_xlat2.y * hlslcc_mtx4x4_AnamorphicGlareWeightsMat3[1].x;
    u_xlat3.z = u_xlat2.z * hlslcc_mtx4x4_AnamorphicGlareWeightsMat3[2].x;
    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _BloomRange.xxx;
    u_xlat1.xyz = u_xlat1.www * u_xlat1.xyz;
    u_xlat2.x = u_xlat1.x * hlslcc_mtx4x4_AnamorphicGlareWeightsMat3[0].y;
    u_xlat2.y = u_xlat1.y * hlslcc_mtx4x4_AnamorphicGlareWeightsMat3[1].y;
    u_xlat2.z = u_xlat1.z * hlslcc_mtx4x4_AnamorphicGlareWeightsMat3[2].y;
    u_xlat0.xyz = u_xlat0.xyz + u_xlat2.xyz;
    u_xlat1.xz = vs_TEXCOORD0.xx + hlslcc_mtx4x4_AnamorphicGlareOffsetsMat3[0].zw;
    u_xlat1.yw = vs_TEXCOORD0.yy + hlslcc_mtx4x4_AnamorphicGlareOffsetsMat3[1].zw;
    u_xlat1 = u_xlat1 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
    u_xlat2 = texture(_MainTex, u_xlat1.xy);
    u_xlat1 = texture(_MainTex, u_xlat1.zw);
    u_xlat2.xyz = u_xlat2.xyz * _BloomRange.xxx;
    u_xlat2.xyz = u_xlat2.www * u_xlat2.xyz;
    u_xlat3.x = u_xlat2.x * hlslcc_mtx4x4_AnamorphicGlareWeightsMat3[0].z;
    u_xlat3.y = u_xlat2.y * hlslcc_mtx4x4_AnamorphicGlareWeightsMat3[1].z;
    u_xlat3.z = u_xlat2.z * hlslcc_mtx4x4_AnamorphicGlareWeightsMat3[2].z;
    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _BloomRange.xxx;
    u_xlat1.xyz = u_xlat1.www * u_xlat1.xyz;
    u_xlat2.x = u_xlat1.x * hlslcc_mtx4x4_AnamorphicGlareWeightsMat3[0].w;
    u_xlat2.y = u_xlat1.y * hlslcc_mtx4x4_AnamorphicGlareWeightsMat3[1].w;
    u_xlat2.z = u_xlat1.z * hlslcc_mtx4x4_AnamorphicGlareWeightsMat3[2].w;
    u_xlat0.xyz = u_xlat0.xyz + u_xlat2.xyz;
    u_xlat0.xyz = u_xlat0.xyz * _BloomRange.yyy;
    u_xlat12 = max(u_xlat0.y, u_xlat0.x);
    u_xlat1.x = max(u_xlat0.z, 9.99999997e-07);
    u_xlat12 = max(u_xlat12, u_xlat1.x);
    u_xlat12 = min(u_xlat12, 1.0);
    u_xlat12 = u_xlat12 * 255.0;
    u_xlat12 = ceil(u_xlat12);
    u_xlat12 = u_xlat12 * 0.00392156886;
    SV_Target0.xyz = u_xlat0.xyz / vec3(u_xlat12);
    SV_Target0.w = u_xlat12;
    return;
}

#endif
"
}
SubProgram "vulkan " {
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 94
; Schema: 0
                                              OpCapability Shader 
                                       %1 = OpExtInstImport "GLSL.std.450" 
                                              OpMemoryModel Logical GLSL450 
                                              OpEntryPoint Vertex %4 "main" %11 %72 %84 %86 
                                              OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                              OpDecorate %11 Location 11 
                                              OpDecorate %16 ArrayStride 16 
                                              OpDecorate %17 ArrayStride 17 
                                              OpMemberDecorate %18 0 Offset 18 
                                              OpMemberDecorate %18 1 Offset 18 
                                              OpDecorate %18 Block 
                                              OpDecorate %20 DescriptorSet 20 
                                              OpDecorate %20 Binding 20 
                                              OpMemberDecorate %70 0 BuiltIn 70 
                                              OpMemberDecorate %70 1 BuiltIn 70 
                                              OpMemberDecorate %70 2 BuiltIn 70 
                                              OpDecorate %70 Block 
                                              OpDecorate vs_TEXCOORD0 Location 84 
                                              OpDecorate %86 Location 86 
                                       %2 = OpTypeVoid 
                                       %3 = OpTypeFunction %2 
                                       %6 = OpTypeFloat 32 
                                       %7 = OpTypeVector %6 4 
                                       %8 = OpTypePointer Private %7 
                        Private f32_4* %9 = OpVariable Private 
                                      %10 = OpTypePointer Input %7 
                         Input f32_4* %11 = OpVariable Input 
                                      %14 = OpTypeInt 32 0 
                                  u32 %15 = OpConstant 4 
                                      %16 = OpTypeArray %7 %15 
                                      %17 = OpTypeArray %7 %15 
                                      %18 = OpTypeStruct %16 %17 
                                      %19 = OpTypePointer Uniform %18 
Uniform struct {f32_4[4]; f32_4[4];}* %20 = OpVariable Uniform 
                                      %21 = OpTypeInt 32 1 
                                  i32 %22 = OpConstant 0 
                                  i32 %23 = OpConstant 1 
                                      %24 = OpTypePointer Uniform %7 
                                  i32 %35 = OpConstant 2 
                                  i32 %44 = OpConstant 3 
                       Private f32_4* %48 = OpVariable Private 
                                  u32 %68 = OpConstant 1 
                                      %69 = OpTypeArray %6 %68 
                                      %70 = OpTypeStruct %7 %6 %69 
                                      %71 = OpTypePointer Output %70 
 Output struct {f32_4; f32; f32[1];}* %72 = OpVariable Output 
                                      %80 = OpTypePointer Output %7 
                                      %82 = OpTypeVector %6 2 
                                      %83 = OpTypePointer Output %82 
               Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                      %85 = OpTypePointer Input %82 
                         Input f32_2* %86 = OpVariable Input 
                                      %88 = OpTypePointer Output %6 
                                  void %4 = OpFunction None %3 
                                       %5 = OpLabel 
                                f32_4 %12 = OpLoad %11 
                                f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                       Uniform f32_4* %25 = OpAccessChain %20 %22 %23 
                                f32_4 %26 = OpLoad %25 
                                f32_4 %27 = OpFMul %13 %26 
                                              OpStore %9 %27 
                       Uniform f32_4* %28 = OpAccessChain %20 %22 %22 
                                f32_4 %29 = OpLoad %28 
                                f32_4 %30 = OpLoad %11 
                                f32_4 %31 = OpVectorShuffle %30 %30 0 0 0 0 
                                f32_4 %32 = OpFMul %29 %31 
                                f32_4 %33 = OpLoad %9 
                                f32_4 %34 = OpFAdd %32 %33 
                                              OpStore %9 %34 
                       Uniform f32_4* %36 = OpAccessChain %20 %22 %35 
                                f32_4 %37 = OpLoad %36 
                                f32_4 %38 = OpLoad %11 
                                f32_4 %39 = OpVectorShuffle %38 %38 2 2 2 2 
                                f32_4 %40 = OpFMul %37 %39 
                                f32_4 %41 = OpLoad %9 
                                f32_4 %42 = OpFAdd %40 %41 
                                              OpStore %9 %42 
                                f32_4 %43 = OpLoad %9 
                       Uniform f32_4* %45 = OpAccessChain %20 %22 %44 
                                f32_4 %46 = OpLoad %45 
                                f32_4 %47 = OpFAdd %43 %46 
                                              OpStore %9 %47 
                                f32_4 %49 = OpLoad %9 
                                f32_4 %50 = OpVectorShuffle %49 %49 1 1 1 1 
                       Uniform f32_4* %51 = OpAccessChain %20 %23 %23 
                                f32_4 %52 = OpLoad %51 
                                f32_4 %53 = OpFMul %50 %52 
                                              OpStore %48 %53 
                       Uniform f32_4* %54 = OpAccessChain %20 %23 %22 
                                f32_4 %55 = OpLoad %54 
                                f32_4 %56 = OpLoad %9 
                                f32_4 %57 = OpVectorShuffle %56 %56 0 0 0 0 
                                f32_4 %58 = OpFMul %55 %57 
                                f32_4 %59 = OpLoad %48 
                                f32_4 %60 = OpFAdd %58 %59 
                                              OpStore %48 %60 
                       Uniform f32_4* %61 = OpAccessChain %20 %23 %35 
                                f32_4 %62 = OpLoad %61 
                                f32_4 %63 = OpLoad %9 
                                f32_4 %64 = OpVectorShuffle %63 %63 2 2 2 2 
                                f32_4 %65 = OpFMul %62 %64 
                                f32_4 %66 = OpLoad %48 
                                f32_4 %67 = OpFAdd %65 %66 
                                              OpStore %48 %67 
                       Uniform f32_4* %73 = OpAccessChain %20 %23 %44 
                                f32_4 %74 = OpLoad %73 
                                f32_4 %75 = OpLoad %9 
                                f32_4 %76 = OpVectorShuffle %75 %75 3 3 3 3 
                                f32_4 %77 = OpFMul %74 %76 
                                f32_4 %78 = OpLoad %48 
                                f32_4 %79 = OpFAdd %77 %78 
                        Output f32_4* %81 = OpAccessChain %72 %22 
                                              OpStore %81 %79 
                                f32_2 %87 = OpLoad %86 
                                              OpStore vs_TEXCOORD0 %87 
                          Output f32* %89 = OpAccessChain %72 %22 %68 
                                  f32 %90 = OpLoad %89 
                                  f32 %91 = OpFNegate %90 
                          Output f32* %92 = OpAccessChain %72 %22 %68 
                                              OpStore %92 %91 
                                              OpReturn
                                              OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 1025
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %12 %1013 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpDecorate vs_TEXCOORD0 Location 12 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpDecorate %19 ArrayStride 19 
                                                      OpDecorate %20 ArrayStride 20 
                                                      OpDecorate %21 ArrayStride 21 
                                                      OpDecorate %22 ArrayStride 22 
                                                      OpDecorate %23 ArrayStride 23 
                                                      OpDecorate %24 ArrayStride 24 
                                                      OpMemberDecorate %25 0 Offset 25 
                                                      OpMemberDecorate %25 1 Offset 25 
                                                      OpMemberDecorate %25 2 Offset 25 
                                                      OpMemberDecorate %25 3 Offset 25 
                                                      OpMemberDecorate %25 4 Offset 25 
                                                      OpMemberDecorate %25 5 Offset 25 
                                                      OpMemberDecorate %25 6 Offset 25 
                                                      OpMemberDecorate %25 7 Offset 25 
                                                      OpMemberDecorate %25 8 Offset 25 
                                                      OpMemberDecorate %25 9 Offset 25 
                                                      OpDecorate %25 Block 
                                                      OpDecorate %27 DescriptorSet 27 
                                                      OpDecorate %27 Binding 27 
                                                      OpDecorate %59 DescriptorSet 59 
                                                      OpDecorate %59 Binding 59 
                                                      OpDecorate %63 DescriptorSet 63 
                                                      OpDecorate %63 Binding 63 
                                                      OpDecorate %1013 Location 1013 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 2 
                                              %11 = OpTypePointer Input %10 
                        Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                              %15 = OpTypeInt 32 0 
                                          u32 %16 = OpConstant 4 
                                              %17 = OpTypeArray %7 %16 
                                              %18 = OpTypeArray %7 %16 
                                              %19 = OpTypeArray %7 %16 
                                              %20 = OpTypeArray %7 %16 
                                              %21 = OpTypeArray %7 %16 
                                              %22 = OpTypeArray %7 %16 
                                              %23 = OpTypeArray %7 %16 
                                              %24 = OpTypeArray %7 %16 
                                              %25 = OpTypeStruct %17 %18 %19 %20 %21 %22 %23 %24 %7 %7 
                                              %26 = OpTypePointer Uniform %25 
Uniform struct {f32_4[4]; f32_4[4]; f32_4[4]; f32_4[4]; f32_4[4]; f32_4[4]; f32_4[4]; f32_4[4]; f32_4; f32_4;}* %27 = OpVariable Uniform 
                                              %28 = OpTypeInt 32 1 
                                          i32 %29 = OpConstant 0 
                                              %30 = OpTypePointer Uniform %7 
                                          i32 %39 = OpConstant 1 
                                          i32 %47 = OpConstant 8 
                               Private f32_4* %56 = OpVariable Private 
                                              %57 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %58 = OpTypePointer UniformConstant %57 
         UniformConstant read_only Texture2D* %59 = OpVariable UniformConstant 
                                              %61 = OpTypeSampler 
                                              %62 = OpTypePointer UniformConstant %61 
                     UniformConstant sampler* %63 = OpVariable UniformConstant 
                                              %65 = OpTypeSampledImage %57 
                                              %76 = OpTypeVector %6 3 
                                          i32 %79 = OpConstant 9 
                               Private f32_4* %93 = OpVariable Private 
                                          u32 %94 = OpConstant 0 
                                              %95 = OpTypePointer Private %6 
                                          i32 %98 = OpConstant 4 
                                              %99 = OpTypePointer Uniform %6 
                                         u32 %104 = OpConstant 1 
                                         u32 %111 = OpConstant 2 
                                         i32 %114 = OpConstant 2 
                                             %211 = OpTypePointer Private %76 
                              Private f32_3* %212 = OpVariable Private 
                                         u32 %254 = OpConstant 3 
                                         i32 %332 = OpConstant 5 
                                         i32 %565 = OpConstant 6 
                                         i32 %746 = OpConstant 3 
                                         i32 %799 = OpConstant 7 
                                Private f32* %986 = OpVariable Private 
                                         f32 %994 = OpConstant 3.674022E-40 
                                        f32 %1002 = OpConstant 3.674022E-40 
                                        f32 %1005 = OpConstant 3.674022E-40 
                                        f32 %1010 = OpConstant 3.674022E-40 
                                            %1012 = OpTypePointer Output %7 
                              Output f32_4* %1013 = OpVariable Output 
                                            %1022 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_2 %13 = OpLoad vs_TEXCOORD0 
                                        f32_2 %14 = OpVectorShuffle %13 %13 0 0 
                               Uniform f32_4* %31 = OpAccessChain %27 %29 %29 
                                        f32_4 %32 = OpLoad %31 
                                        f32_2 %33 = OpVectorShuffle %32 %32 0 1 
                                        f32_2 %34 = OpFAdd %14 %33 
                                        f32_4 %35 = OpLoad %9 
                                        f32_4 %36 = OpVectorShuffle %35 %34 4 1 5 3 
                                                      OpStore %9 %36 
                                        f32_2 %37 = OpLoad vs_TEXCOORD0 
                                        f32_2 %38 = OpVectorShuffle %37 %37 1 1 
                               Uniform f32_4* %40 = OpAccessChain %27 %29 %39 
                                        f32_4 %41 = OpLoad %40 
                                        f32_2 %42 = OpVectorShuffle %41 %41 0 1 
                                        f32_2 %43 = OpFAdd %38 %42 
                                        f32_4 %44 = OpLoad %9 
                                        f32_4 %45 = OpVectorShuffle %44 %43 0 4 2 5 
                                                      OpStore %9 %45 
                                        f32_4 %46 = OpLoad %9 
                               Uniform f32_4* %48 = OpAccessChain %27 %47 
                                        f32_4 %49 = OpLoad %48 
                                        f32_4 %50 = OpVectorShuffle %49 %49 0 1 0 1 
                                        f32_4 %51 = OpFMul %46 %50 
                               Uniform f32_4* %52 = OpAccessChain %27 %47 
                                        f32_4 %53 = OpLoad %52 
                                        f32_4 %54 = OpVectorShuffle %53 %53 2 3 2 3 
                                        f32_4 %55 = OpFAdd %51 %54 
                                                      OpStore %9 %55 
                          read_only Texture2D %60 = OpLoad %59 
                                      sampler %64 = OpLoad %63 
                   read_only Texture2DSampled %66 = OpSampledImage %60 %64 
                                        f32_4 %67 = OpLoad %9 
                                        f32_2 %68 = OpVectorShuffle %67 %67 0 1 
                                        f32_4 %69 = OpImageSampleImplicitLod %66 %68 
                                                      OpStore %56 %69 
                          read_only Texture2D %70 = OpLoad %59 
                                      sampler %71 = OpLoad %63 
                   read_only Texture2DSampled %72 = OpSampledImage %70 %71 
                                        f32_4 %73 = OpLoad %9 
                                        f32_2 %74 = OpVectorShuffle %73 %73 2 3 
                                        f32_4 %75 = OpImageSampleImplicitLod %72 %74 
                                                      OpStore %9 %75 
                                        f32_4 %77 = OpLoad %56 
                                        f32_3 %78 = OpVectorShuffle %77 %77 0 1 2 
                               Uniform f32_4* %80 = OpAccessChain %27 %79 
                                        f32_4 %81 = OpLoad %80 
                                        f32_3 %82 = OpVectorShuffle %81 %81 0 0 0 
                                        f32_3 %83 = OpFMul %78 %82 
                                        f32_4 %84 = OpLoad %56 
                                        f32_4 %85 = OpVectorShuffle %84 %83 4 5 6 3 
                                                      OpStore %56 %85 
                                        f32_4 %86 = OpLoad %56 
                                        f32_3 %87 = OpVectorShuffle %86 %86 3 3 3 
                                        f32_4 %88 = OpLoad %56 
                                        f32_3 %89 = OpVectorShuffle %88 %88 0 1 2 
                                        f32_3 %90 = OpFMul %87 %89 
                                        f32_4 %91 = OpLoad %56 
                                        f32_4 %92 = OpVectorShuffle %91 %90 4 5 6 3 
                                                      OpStore %56 %92 
                                 Private f32* %96 = OpAccessChain %56 %94 
                                          f32 %97 = OpLoad %96 
                                Uniform f32* %100 = OpAccessChain %27 %98 %29 %94 
                                         f32 %101 = OpLoad %100 
                                         f32 %102 = OpFMul %97 %101 
                                Private f32* %103 = OpAccessChain %93 %94 
                                                      OpStore %103 %102 
                                Private f32* %105 = OpAccessChain %56 %104 
                                         f32 %106 = OpLoad %105 
                                Uniform f32* %107 = OpAccessChain %27 %98 %39 %94 
                                         f32 %108 = OpLoad %107 
                                         f32 %109 = OpFMul %106 %108 
                                Private f32* %110 = OpAccessChain %93 %104 
                                                      OpStore %110 %109 
                                Private f32* %112 = OpAccessChain %56 %111 
                                         f32 %113 = OpLoad %112 
                                Uniform f32* %115 = OpAccessChain %27 %98 %114 %94 
                                         f32 %116 = OpLoad %115 
                                         f32 %117 = OpFMul %113 %116 
                                Private f32* %118 = OpAccessChain %93 %111 
                                                      OpStore %118 %117 
                                       f32_4 %119 = OpLoad %9 
                                       f32_3 %120 = OpVectorShuffle %119 %119 0 1 2 
                              Uniform f32_4* %121 = OpAccessChain %27 %79 
                                       f32_4 %122 = OpLoad %121 
                                       f32_3 %123 = OpVectorShuffle %122 %122 0 0 0 
                                       f32_3 %124 = OpFMul %120 %123 
                                       f32_4 %125 = OpLoad %9 
                                       f32_4 %126 = OpVectorShuffle %125 %124 4 5 6 3 
                                                      OpStore %9 %126 
                                       f32_4 %127 = OpLoad %9 
                                       f32_3 %128 = OpVectorShuffle %127 %127 3 3 3 
                                       f32_4 %129 = OpLoad %9 
                                       f32_3 %130 = OpVectorShuffle %129 %129 0 1 2 
                                       f32_3 %131 = OpFMul %128 %130 
                                       f32_4 %132 = OpLoad %9 
                                       f32_4 %133 = OpVectorShuffle %132 %131 4 5 6 3 
                                                      OpStore %9 %133 
                                Private f32* %134 = OpAccessChain %9 %94 
                                         f32 %135 = OpLoad %134 
                                Uniform f32* %136 = OpAccessChain %27 %98 %29 %104 
                                         f32 %137 = OpLoad %136 
                                         f32 %138 = OpFMul %135 %137 
                                Private f32* %139 = OpAccessChain %56 %94 
                                                      OpStore %139 %138 
                                Private f32* %140 = OpAccessChain %9 %104 
                                         f32 %141 = OpLoad %140 
                                Uniform f32* %142 = OpAccessChain %27 %98 %39 %104 
                                         f32 %143 = OpLoad %142 
                                         f32 %144 = OpFMul %141 %143 
                                Private f32* %145 = OpAccessChain %56 %104 
                                                      OpStore %145 %144 
                                Private f32* %146 = OpAccessChain %9 %111 
                                         f32 %147 = OpLoad %146 
                                Uniform f32* %148 = OpAccessChain %27 %98 %114 %104 
                                         f32 %149 = OpLoad %148 
                                         f32 %150 = OpFMul %147 %149 
                                Private f32* %151 = OpAccessChain %56 %111 
                                                      OpStore %151 %150 
                                       f32_4 %152 = OpLoad %56 
                                       f32_3 %153 = OpVectorShuffle %152 %152 0 1 2 
                                       f32_4 %154 = OpLoad %93 
                                       f32_3 %155 = OpVectorShuffle %154 %154 0 1 2 
                                       f32_3 %156 = OpFAdd %153 %155 
                                       f32_4 %157 = OpLoad %9 
                                       f32_4 %158 = OpVectorShuffle %157 %156 4 5 6 3 
                                                      OpStore %9 %158 
                                       f32_2 %159 = OpLoad vs_TEXCOORD0 
                                       f32_2 %160 = OpVectorShuffle %159 %159 0 0 
                              Uniform f32_4* %161 = OpAccessChain %27 %29 %29 
                                       f32_4 %162 = OpLoad %161 
                                       f32_2 %163 = OpVectorShuffle %162 %162 2 3 
                                       f32_2 %164 = OpFAdd %160 %163 
                                       f32_4 %165 = OpLoad %56 
                                       f32_4 %166 = OpVectorShuffle %165 %164 4 1 5 3 
                                                      OpStore %56 %166 
                                       f32_2 %167 = OpLoad vs_TEXCOORD0 
                                       f32_2 %168 = OpVectorShuffle %167 %167 1 1 
                              Uniform f32_4* %169 = OpAccessChain %27 %29 %39 
                                       f32_4 %170 = OpLoad %169 
                                       f32_2 %171 = OpVectorShuffle %170 %170 2 3 
                                       f32_2 %172 = OpFAdd %168 %171 
                                       f32_4 %173 = OpLoad %56 
                                       f32_4 %174 = OpVectorShuffle %173 %172 0 4 2 5 
                                                      OpStore %56 %174 
                                       f32_4 %175 = OpLoad %56 
                              Uniform f32_4* %176 = OpAccessChain %27 %47 
                                       f32_4 %177 = OpLoad %176 
                                       f32_4 %178 = OpVectorShuffle %177 %177 0 1 0 1 
                                       f32_4 %179 = OpFMul %175 %178 
                              Uniform f32_4* %180 = OpAccessChain %27 %47 
                                       f32_4 %181 = OpLoad %180 
                                       f32_4 %182 = OpVectorShuffle %181 %181 2 3 2 3 
                                       f32_4 %183 = OpFAdd %179 %182 
                                                      OpStore %56 %183 
                         read_only Texture2D %184 = OpLoad %59 
                                     sampler %185 = OpLoad %63 
                  read_only Texture2DSampled %186 = OpSampledImage %184 %185 
                                       f32_4 %187 = OpLoad %56 
                                       f32_2 %188 = OpVectorShuffle %187 %187 0 1 
                                       f32_4 %189 = OpImageSampleImplicitLod %186 %188 
                                                      OpStore %93 %189 
                         read_only Texture2D %190 = OpLoad %59 
                                     sampler %191 = OpLoad %63 
                  read_only Texture2DSampled %192 = OpSampledImage %190 %191 
                                       f32_4 %193 = OpLoad %56 
                                       f32_2 %194 = OpVectorShuffle %193 %193 2 3 
                                       f32_4 %195 = OpImageSampleImplicitLod %192 %194 
                                                      OpStore %56 %195 
                                       f32_4 %196 = OpLoad %93 
                                       f32_3 %197 = OpVectorShuffle %196 %196 0 1 2 
                              Uniform f32_4* %198 = OpAccessChain %27 %79 
                                       f32_4 %199 = OpLoad %198 
                                       f32_3 %200 = OpVectorShuffle %199 %199 0 0 0 
                                       f32_3 %201 = OpFMul %197 %200 
                                       f32_4 %202 = OpLoad %93 
                                       f32_4 %203 = OpVectorShuffle %202 %201 4 5 6 3 
                                                      OpStore %93 %203 
                                       f32_4 %204 = OpLoad %93 
                                       f32_3 %205 = OpVectorShuffle %204 %204 3 3 3 
                                       f32_4 %206 = OpLoad %93 
                                       f32_3 %207 = OpVectorShuffle %206 %206 0 1 2 
                                       f32_3 %208 = OpFMul %205 %207 
                                       f32_4 %209 = OpLoad %93 
                                       f32_4 %210 = OpVectorShuffle %209 %208 4 5 6 3 
                                                      OpStore %93 %210 
                                Private f32* %213 = OpAccessChain %93 %94 
                                         f32 %214 = OpLoad %213 
                                Uniform f32* %215 = OpAccessChain %27 %98 %29 %111 
                                         f32 %216 = OpLoad %215 
                                         f32 %217 = OpFMul %214 %216 
                                Private f32* %218 = OpAccessChain %212 %94 
                                                      OpStore %218 %217 
                                Private f32* %219 = OpAccessChain %93 %104 
                                         f32 %220 = OpLoad %219 
                                Uniform f32* %221 = OpAccessChain %27 %98 %39 %111 
                                         f32 %222 = OpLoad %221 
                                         f32 %223 = OpFMul %220 %222 
                                Private f32* %224 = OpAccessChain %212 %104 
                                                      OpStore %224 %223 
                                Private f32* %225 = OpAccessChain %93 %111 
                                         f32 %226 = OpLoad %225 
                                Uniform f32* %227 = OpAccessChain %27 %98 %114 %111 
                                         f32 %228 = OpLoad %227 
                                         f32 %229 = OpFMul %226 %228 
                                Private f32* %230 = OpAccessChain %212 %111 
                                                      OpStore %230 %229 
                                       f32_4 %231 = OpLoad %9 
                                       f32_3 %232 = OpVectorShuffle %231 %231 0 1 2 
                                       f32_3 %233 = OpLoad %212 
                                       f32_3 %234 = OpFAdd %232 %233 
                                       f32_4 %235 = OpLoad %9 
                                       f32_4 %236 = OpVectorShuffle %235 %234 4 5 6 3 
                                                      OpStore %9 %236 
                                       f32_4 %237 = OpLoad %56 
                                       f32_3 %238 = OpVectorShuffle %237 %237 0 1 2 
                              Uniform f32_4* %239 = OpAccessChain %27 %79 
                                       f32_4 %240 = OpLoad %239 
                                       f32_3 %241 = OpVectorShuffle %240 %240 0 0 0 
                                       f32_3 %242 = OpFMul %238 %241 
                                       f32_4 %243 = OpLoad %56 
                                       f32_4 %244 = OpVectorShuffle %243 %242 4 5 6 3 
                                                      OpStore %56 %244 
                                       f32_4 %245 = OpLoad %56 
                                       f32_3 %246 = OpVectorShuffle %245 %245 3 3 3 
                                       f32_4 %247 = OpLoad %56 
                                       f32_3 %248 = OpVectorShuffle %247 %247 0 1 2 
                                       f32_3 %249 = OpFMul %246 %248 
                                       f32_4 %250 = OpLoad %56 
                                       f32_4 %251 = OpVectorShuffle %250 %249 4 5 6 3 
                                                      OpStore %56 %251 
                                Private f32* %252 = OpAccessChain %56 %94 
                                         f32 %253 = OpLoad %252 
                                Uniform f32* %255 = OpAccessChain %27 %98 %29 %254 
                                         f32 %256 = OpLoad %255 
                                         f32 %257 = OpFMul %253 %256 
                                Private f32* %258 = OpAccessChain %93 %94 
                                                      OpStore %258 %257 
                                Private f32* %259 = OpAccessChain %56 %104 
                                         f32 %260 = OpLoad %259 
                                Uniform f32* %261 = OpAccessChain %27 %98 %39 %254 
                                         f32 %262 = OpLoad %261 
                                         f32 %263 = OpFMul %260 %262 
                                Private f32* %264 = OpAccessChain %93 %104 
                                                      OpStore %264 %263 
                                Private f32* %265 = OpAccessChain %56 %111 
                                         f32 %266 = OpLoad %265 
                                Uniform f32* %267 = OpAccessChain %27 %98 %114 %254 
                                         f32 %268 = OpLoad %267 
                                         f32 %269 = OpFMul %266 %268 
                                Private f32* %270 = OpAccessChain %93 %111 
                                                      OpStore %270 %269 
                                       f32_4 %271 = OpLoad %9 
                                       f32_3 %272 = OpVectorShuffle %271 %271 0 1 2 
                                       f32_4 %273 = OpLoad %93 
                                       f32_3 %274 = OpVectorShuffle %273 %273 0 1 2 
                                       f32_3 %275 = OpFAdd %272 %274 
                                       f32_4 %276 = OpLoad %9 
                                       f32_4 %277 = OpVectorShuffle %276 %275 4 5 6 3 
                                                      OpStore %9 %277 
                                       f32_2 %278 = OpLoad vs_TEXCOORD0 
                                       f32_2 %279 = OpVectorShuffle %278 %278 0 0 
                              Uniform f32_4* %280 = OpAccessChain %27 %39 %29 
                                       f32_4 %281 = OpLoad %280 
                                       f32_2 %282 = OpVectorShuffle %281 %281 0 1 
                                       f32_2 %283 = OpFAdd %279 %282 
                                       f32_4 %284 = OpLoad %56 
                                       f32_4 %285 = OpVectorShuffle %284 %283 4 1 5 3 
                                                      OpStore %56 %285 
                                       f32_2 %286 = OpLoad vs_TEXCOORD0 
                                       f32_2 %287 = OpVectorShuffle %286 %286 1 1 
                              Uniform f32_4* %288 = OpAccessChain %27 %39 %39 
                                       f32_4 %289 = OpLoad %288 
                                       f32_2 %290 = OpVectorShuffle %289 %289 0 1 
                                       f32_2 %291 = OpFAdd %287 %290 
                                       f32_4 %292 = OpLoad %56 
                                       f32_4 %293 = OpVectorShuffle %292 %291 0 4 2 5 
                                                      OpStore %56 %293 
                                       f32_4 %294 = OpLoad %56 
                              Uniform f32_4* %295 = OpAccessChain %27 %47 
                                       f32_4 %296 = OpLoad %295 
                                       f32_4 %297 = OpVectorShuffle %296 %296 0 1 0 1 
                                       f32_4 %298 = OpFMul %294 %297 
                              Uniform f32_4* %299 = OpAccessChain %27 %47 
                                       f32_4 %300 = OpLoad %299 
                                       f32_4 %301 = OpVectorShuffle %300 %300 2 3 2 3 
                                       f32_4 %302 = OpFAdd %298 %301 
                                                      OpStore %56 %302 
                         read_only Texture2D %303 = OpLoad %59 
                                     sampler %304 = OpLoad %63 
                  read_only Texture2DSampled %305 = OpSampledImage %303 %304 
                                       f32_4 %306 = OpLoad %56 
                                       f32_2 %307 = OpVectorShuffle %306 %306 0 1 
                                       f32_4 %308 = OpImageSampleImplicitLod %305 %307 
                                                      OpStore %93 %308 
                         read_only Texture2D %309 = OpLoad %59 
                                     sampler %310 = OpLoad %63 
                  read_only Texture2DSampled %311 = OpSampledImage %309 %310 
                                       f32_4 %312 = OpLoad %56 
                                       f32_2 %313 = OpVectorShuffle %312 %312 2 3 
                                       f32_4 %314 = OpImageSampleImplicitLod %311 %313 
                                                      OpStore %56 %314 
                                       f32_4 %315 = OpLoad %93 
                                       f32_3 %316 = OpVectorShuffle %315 %315 0 1 2 
                              Uniform f32_4* %317 = OpAccessChain %27 %79 
                                       f32_4 %318 = OpLoad %317 
                                       f32_3 %319 = OpVectorShuffle %318 %318 0 0 0 
                                       f32_3 %320 = OpFMul %316 %319 
                                       f32_4 %321 = OpLoad %93 
                                       f32_4 %322 = OpVectorShuffle %321 %320 4 5 6 3 
                                                      OpStore %93 %322 
                                       f32_4 %323 = OpLoad %93 
                                       f32_3 %324 = OpVectorShuffle %323 %323 3 3 3 
                                       f32_4 %325 = OpLoad %93 
                                       f32_3 %326 = OpVectorShuffle %325 %325 0 1 2 
                                       f32_3 %327 = OpFMul %324 %326 
                                       f32_4 %328 = OpLoad %93 
                                       f32_4 %329 = OpVectorShuffle %328 %327 4 5 6 3 
                                                      OpStore %93 %329 
                                Private f32* %330 = OpAccessChain %93 %94 
                                         f32 %331 = OpLoad %330 
                                Uniform f32* %333 = OpAccessChain %27 %332 %29 %94 
                                         f32 %334 = OpLoad %333 
                                         f32 %335 = OpFMul %331 %334 
                                Private f32* %336 = OpAccessChain %212 %94 
                                                      OpStore %336 %335 
                                Private f32* %337 = OpAccessChain %93 %104 
                                         f32 %338 = OpLoad %337 
                                Uniform f32* %339 = OpAccessChain %27 %332 %39 %94 
                                         f32 %340 = OpLoad %339 
                                         f32 %341 = OpFMul %338 %340 
                                Private f32* %342 = OpAccessChain %212 %104 
                                                      OpStore %342 %341 
                                Private f32* %343 = OpAccessChain %93 %111 
                                         f32 %344 = OpLoad %343 
                                Uniform f32* %345 = OpAccessChain %27 %332 %114 %94 
                                         f32 %346 = OpLoad %345 
                                         f32 %347 = OpFMul %344 %346 
                                Private f32* %348 = OpAccessChain %212 %111 
                                                      OpStore %348 %347 
                                       f32_4 %349 = OpLoad %9 
                                       f32_3 %350 = OpVectorShuffle %349 %349 0 1 2 
                                       f32_3 %351 = OpLoad %212 
                                       f32_3 %352 = OpFAdd %350 %351 
                                       f32_4 %353 = OpLoad %9 
                                       f32_4 %354 = OpVectorShuffle %353 %352 4 5 6 3 
                                                      OpStore %9 %354 
                                       f32_4 %355 = OpLoad %56 
                                       f32_3 %356 = OpVectorShuffle %355 %355 0 1 2 
                              Uniform f32_4* %357 = OpAccessChain %27 %79 
                                       f32_4 %358 = OpLoad %357 
                                       f32_3 %359 = OpVectorShuffle %358 %358 0 0 0 
                                       f32_3 %360 = OpFMul %356 %359 
                                       f32_4 %361 = OpLoad %56 
                                       f32_4 %362 = OpVectorShuffle %361 %360 4 5 6 3 
                                                      OpStore %56 %362 
                                       f32_4 %363 = OpLoad %56 
                                       f32_3 %364 = OpVectorShuffle %363 %363 3 3 3 
                                       f32_4 %365 = OpLoad %56 
                                       f32_3 %366 = OpVectorShuffle %365 %365 0 1 2 
                                       f32_3 %367 = OpFMul %364 %366 
                                       f32_4 %368 = OpLoad %56 
                                       f32_4 %369 = OpVectorShuffle %368 %367 4 5 6 3 
                                                      OpStore %56 %369 
                                Private f32* %370 = OpAccessChain %56 %94 
                                         f32 %371 = OpLoad %370 
                                Uniform f32* %372 = OpAccessChain %27 %332 %29 %104 
                                         f32 %373 = OpLoad %372 
                                         f32 %374 = OpFMul %371 %373 
                                Private f32* %375 = OpAccessChain %93 %94 
                                                      OpStore %375 %374 
                                Private f32* %376 = OpAccessChain %56 %104 
                                         f32 %377 = OpLoad %376 
                                Uniform f32* %378 = OpAccessChain %27 %332 %39 %104 
                                         f32 %379 = OpLoad %378 
                                         f32 %380 = OpFMul %377 %379 
                                Private f32* %381 = OpAccessChain %93 %104 
                                                      OpStore %381 %380 
                                Private f32* %382 = OpAccessChain %56 %111 
                                         f32 %383 = OpLoad %382 
                                Uniform f32* %384 = OpAccessChain %27 %332 %114 %104 
                                         f32 %385 = OpLoad %384 
                                         f32 %386 = OpFMul %383 %385 
                                Private f32* %387 = OpAccessChain %93 %111 
                                                      OpStore %387 %386 
                                       f32_4 %388 = OpLoad %9 
                                       f32_3 %389 = OpVectorShuffle %388 %388 0 1 2 
                                       f32_4 %390 = OpLoad %93 
                                       f32_3 %391 = OpVectorShuffle %390 %390 0 1 2 
                                       f32_3 %392 = OpFAdd %389 %391 
                                       f32_4 %393 = OpLoad %9 
                                       f32_4 %394 = OpVectorShuffle %393 %392 4 5 6 3 
                                                      OpStore %9 %394 
                                       f32_2 %395 = OpLoad vs_TEXCOORD0 
                                       f32_2 %396 = OpVectorShuffle %395 %395 0 0 
                              Uniform f32_4* %397 = OpAccessChain %27 %39 %29 
                                       f32_4 %398 = OpLoad %397 
                                       f32_2 %399 = OpVectorShuffle %398 %398 2 3 
                                       f32_2 %400 = OpFAdd %396 %399 
                                       f32_4 %401 = OpLoad %56 
                                       f32_4 %402 = OpVectorShuffle %401 %400 4 1 5 3 
                                                      OpStore %56 %402 
                                       f32_2 %403 = OpLoad vs_TEXCOORD0 
                                       f32_2 %404 = OpVectorShuffle %403 %403 1 1 
                              Uniform f32_4* %405 = OpAccessChain %27 %39 %39 
                                       f32_4 %406 = OpLoad %405 
                                       f32_2 %407 = OpVectorShuffle %406 %406 2 3 
                                       f32_2 %408 = OpFAdd %404 %407 
                                       f32_4 %409 = OpLoad %56 
                                       f32_4 %410 = OpVectorShuffle %409 %408 0 4 2 5 
                                                      OpStore %56 %410 
                                       f32_4 %411 = OpLoad %56 
                              Uniform f32_4* %412 = OpAccessChain %27 %47 
                                       f32_4 %413 = OpLoad %412 
                                       f32_4 %414 = OpVectorShuffle %413 %413 0 1 0 1 
                                       f32_4 %415 = OpFMul %411 %414 
                              Uniform f32_4* %416 = OpAccessChain %27 %47 
                                       f32_4 %417 = OpLoad %416 
                                       f32_4 %418 = OpVectorShuffle %417 %417 2 3 2 3 
                                       f32_4 %419 = OpFAdd %415 %418 
                                                      OpStore %56 %419 
                         read_only Texture2D %420 = OpLoad %59 
                                     sampler %421 = OpLoad %63 
                  read_only Texture2DSampled %422 = OpSampledImage %420 %421 
                                       f32_4 %423 = OpLoad %56 
                                       f32_2 %424 = OpVectorShuffle %423 %423 0 1 
                                       f32_4 %425 = OpImageSampleImplicitLod %422 %424 
                                                      OpStore %93 %425 
                         read_only Texture2D %426 = OpLoad %59 
                                     sampler %427 = OpLoad %63 
                  read_only Texture2DSampled %428 = OpSampledImage %426 %427 
                                       f32_4 %429 = OpLoad %56 
                                       f32_2 %430 = OpVectorShuffle %429 %429 2 3 
                                       f32_4 %431 = OpImageSampleImplicitLod %428 %430 
                                                      OpStore %56 %431 
                                       f32_4 %432 = OpLoad %93 
                                       f32_3 %433 = OpVectorShuffle %432 %432 0 1 2 
                              Uniform f32_4* %434 = OpAccessChain %27 %79 
                                       f32_4 %435 = OpLoad %434 
                                       f32_3 %436 = OpVectorShuffle %435 %435 0 0 0 
                                       f32_3 %437 = OpFMul %433 %436 
                                       f32_4 %438 = OpLoad %93 
                                       f32_4 %439 = OpVectorShuffle %438 %437 4 5 6 3 
                                                      OpStore %93 %439 
                                       f32_4 %440 = OpLoad %93 
                                       f32_3 %441 = OpVectorShuffle %440 %440 3 3 3 
                                       f32_4 %442 = OpLoad %93 
                                       f32_3 %443 = OpVectorShuffle %442 %442 0 1 2 
                                       f32_3 %444 = OpFMul %441 %443 
                                       f32_4 %445 = OpLoad %93 
                                       f32_4 %446 = OpVectorShuffle %445 %444 4 5 6 3 
                                                      OpStore %93 %446 
                                Private f32* %447 = OpAccessChain %93 %94 
                                         f32 %448 = OpLoad %447 
                                Uniform f32* %449 = OpAccessChain %27 %332 %29 %111 
                                         f32 %450 = OpLoad %449 
                                         f32 %451 = OpFMul %448 %450 
                                Private f32* %452 = OpAccessChain %212 %94 
                                                      OpStore %452 %451 
                                Private f32* %453 = OpAccessChain %93 %104 
                                         f32 %454 = OpLoad %453 
                                Uniform f32* %455 = OpAccessChain %27 %332 %39 %111 
                                         f32 %456 = OpLoad %455 
                                         f32 %457 = OpFMul %454 %456 
                                Private f32* %458 = OpAccessChain %212 %104 
                                                      OpStore %458 %457 
                                Private f32* %459 = OpAccessChain %93 %111 
                                         f32 %460 = OpLoad %459 
                                Uniform f32* %461 = OpAccessChain %27 %332 %114 %111 
                                         f32 %462 = OpLoad %461 
                                         f32 %463 = OpFMul %460 %462 
                                Private f32* %464 = OpAccessChain %212 %111 
                                                      OpStore %464 %463 
                                       f32_4 %465 = OpLoad %9 
                                       f32_3 %466 = OpVectorShuffle %465 %465 0 1 2 
                                       f32_3 %467 = OpLoad %212 
                                       f32_3 %468 = OpFAdd %466 %467 
                                       f32_4 %469 = OpLoad %9 
                                       f32_4 %470 = OpVectorShuffle %469 %468 4 5 6 3 
                                                      OpStore %9 %470 
                                       f32_4 %471 = OpLoad %56 
                                       f32_3 %472 = OpVectorShuffle %471 %471 0 1 2 
                              Uniform f32_4* %473 = OpAccessChain %27 %79 
                                       f32_4 %474 = OpLoad %473 
                                       f32_3 %475 = OpVectorShuffle %474 %474 0 0 0 
                                       f32_3 %476 = OpFMul %472 %475 
                                       f32_4 %477 = OpLoad %56 
                                       f32_4 %478 = OpVectorShuffle %477 %476 4 5 6 3 
                                                      OpStore %56 %478 
                                       f32_4 %479 = OpLoad %56 
                                       f32_3 %480 = OpVectorShuffle %479 %479 3 3 3 
                                       f32_4 %481 = OpLoad %56 
                                       f32_3 %482 = OpVectorShuffle %481 %481 0 1 2 
                                       f32_3 %483 = OpFMul %480 %482 
                                       f32_4 %484 = OpLoad %56 
                                       f32_4 %485 = OpVectorShuffle %484 %483 4 5 6 3 
                                                      OpStore %56 %485 
                                Private f32* %486 = OpAccessChain %56 %94 
                                         f32 %487 = OpLoad %486 
                                Uniform f32* %488 = OpAccessChain %27 %332 %29 %254 
                                         f32 %489 = OpLoad %488 
                                         f32 %490 = OpFMul %487 %489 
                                Private f32* %491 = OpAccessChain %93 %94 
                                                      OpStore %491 %490 
                                Private f32* %492 = OpAccessChain %56 %104 
                                         f32 %493 = OpLoad %492 
                                Uniform f32* %494 = OpAccessChain %27 %332 %39 %254 
                                         f32 %495 = OpLoad %494 
                                         f32 %496 = OpFMul %493 %495 
                                Private f32* %497 = OpAccessChain %93 %104 
                                                      OpStore %497 %496 
                                Private f32* %498 = OpAccessChain %56 %111 
                                         f32 %499 = OpLoad %498 
                                Uniform f32* %500 = OpAccessChain %27 %332 %114 %254 
                                         f32 %501 = OpLoad %500 
                                         f32 %502 = OpFMul %499 %501 
                                Private f32* %503 = OpAccessChain %93 %111 
                                                      OpStore %503 %502 
                                       f32_4 %504 = OpLoad %9 
                                       f32_3 %505 = OpVectorShuffle %504 %504 0 1 2 
                                       f32_4 %506 = OpLoad %93 
                                       f32_3 %507 = OpVectorShuffle %506 %506 0 1 2 
                                       f32_3 %508 = OpFAdd %505 %507 
                                       f32_4 %509 = OpLoad %9 
                                       f32_4 %510 = OpVectorShuffle %509 %508 4 5 6 3 
                                                      OpStore %9 %510 
                                       f32_2 %511 = OpLoad vs_TEXCOORD0 
                                       f32_2 %512 = OpVectorShuffle %511 %511 0 0 
                              Uniform f32_4* %513 = OpAccessChain %27 %114 %29 
                                       f32_4 %514 = OpLoad %513 
                                       f32_2 %515 = OpVectorShuffle %514 %514 0 1 
                                       f32_2 %516 = OpFAdd %512 %515 
                                       f32_4 %517 = OpLoad %56 
                                       f32_4 %518 = OpVectorShuffle %517 %516 4 1 5 3 
                                                      OpStore %56 %518 
                                       f32_2 %519 = OpLoad vs_TEXCOORD0 
                                       f32_2 %520 = OpVectorShuffle %519 %519 1 1 
                              Uniform f32_4* %521 = OpAccessChain %27 %114 %39 
                                       f32_4 %522 = OpLoad %521 
                                       f32_2 %523 = OpVectorShuffle %522 %522 0 1 
                                       f32_2 %524 = OpFAdd %520 %523 
                                       f32_4 %525 = OpLoad %56 
                                       f32_4 %526 = OpVectorShuffle %525 %524 0 4 2 5 
                                                      OpStore %56 %526 
                                       f32_4 %527 = OpLoad %56 
                              Uniform f32_4* %528 = OpAccessChain %27 %47 
                                       f32_4 %529 = OpLoad %528 
                                       f32_4 %530 = OpVectorShuffle %529 %529 0 1 0 1 
                                       f32_4 %531 = OpFMul %527 %530 
                              Uniform f32_4* %532 = OpAccessChain %27 %47 
                                       f32_4 %533 = OpLoad %532 
                                       f32_4 %534 = OpVectorShuffle %533 %533 2 3 2 3 
                                       f32_4 %535 = OpFAdd %531 %534 
                                                      OpStore %56 %535 
                         read_only Texture2D %536 = OpLoad %59 
                                     sampler %537 = OpLoad %63 
                  read_only Texture2DSampled %538 = OpSampledImage %536 %537 
                                       f32_4 %539 = OpLoad %56 
                                       f32_2 %540 = OpVectorShuffle %539 %539 0 1 
                                       f32_4 %541 = OpImageSampleImplicitLod %538 %540 
                                                      OpStore %93 %541 
                         read_only Texture2D %542 = OpLoad %59 
                                     sampler %543 = OpLoad %63 
                  read_only Texture2DSampled %544 = OpSampledImage %542 %543 
                                       f32_4 %545 = OpLoad %56 
                                       f32_2 %546 = OpVectorShuffle %545 %545 2 3 
                                       f32_4 %547 = OpImageSampleImplicitLod %544 %546 
                                                      OpStore %56 %547 
                                       f32_4 %548 = OpLoad %93 
                                       f32_3 %549 = OpVectorShuffle %548 %548 0 1 2 
                              Uniform f32_4* %550 = OpAccessChain %27 %79 
                                       f32_4 %551 = OpLoad %550 
                                       f32_3 %552 = OpVectorShuffle %551 %551 0 0 0 
                                       f32_3 %553 = OpFMul %549 %552 
                                       f32_4 %554 = OpLoad %93 
                                       f32_4 %555 = OpVectorShuffle %554 %553 4 5 6 3 
                                                      OpStore %93 %555 
                                       f32_4 %556 = OpLoad %93 
                                       f32_3 %557 = OpVectorShuffle %556 %556 3 3 3 
                                       f32_4 %558 = OpLoad %93 
                                       f32_3 %559 = OpVectorShuffle %558 %558 0 1 2 
                                       f32_3 %560 = OpFMul %557 %559 
                                       f32_4 %561 = OpLoad %93 
                                       f32_4 %562 = OpVectorShuffle %561 %560 4 5 6 3 
                                                      OpStore %93 %562 
                                Private f32* %563 = OpAccessChain %93 %94 
                                         f32 %564 = OpLoad %563 
                                Uniform f32* %566 = OpAccessChain %27 %565 %29 %94 
                                         f32 %567 = OpLoad %566 
                                         f32 %568 = OpFMul %564 %567 
                                Private f32* %569 = OpAccessChain %212 %94 
                                                      OpStore %569 %568 
                                Private f32* %570 = OpAccessChain %93 %104 
                                         f32 %571 = OpLoad %570 
                                Uniform f32* %572 = OpAccessChain %27 %565 %39 %94 
                                         f32 %573 = OpLoad %572 
                                         f32 %574 = OpFMul %571 %573 
                                Private f32* %575 = OpAccessChain %212 %104 
                                                      OpStore %575 %574 
                                Private f32* %576 = OpAccessChain %93 %111 
                                         f32 %577 = OpLoad %576 
                                Uniform f32* %578 = OpAccessChain %27 %565 %114 %94 
                                         f32 %579 = OpLoad %578 
                                         f32 %580 = OpFMul %577 %579 
                                Private f32* %581 = OpAccessChain %212 %111 
                                                      OpStore %581 %580 
                                       f32_4 %582 = OpLoad %9 
                                       f32_3 %583 = OpVectorShuffle %582 %582 0 1 2 
                                       f32_3 %584 = OpLoad %212 
                                       f32_3 %585 = OpFAdd %583 %584 
                                       f32_4 %586 = OpLoad %9 
                                       f32_4 %587 = OpVectorShuffle %586 %585 4 5 6 3 
                                                      OpStore %9 %587 
                                       f32_4 %588 = OpLoad %56 
                                       f32_3 %589 = OpVectorShuffle %588 %588 0 1 2 
                              Uniform f32_4* %590 = OpAccessChain %27 %79 
                                       f32_4 %591 = OpLoad %590 
                                       f32_3 %592 = OpVectorShuffle %591 %591 0 0 0 
                                       f32_3 %593 = OpFMul %589 %592 
                                       f32_4 %594 = OpLoad %56 
                                       f32_4 %595 = OpVectorShuffle %594 %593 4 5 6 3 
                                                      OpStore %56 %595 
                                       f32_4 %596 = OpLoad %56 
                                       f32_3 %597 = OpVectorShuffle %596 %596 3 3 3 
                                       f32_4 %598 = OpLoad %56 
                                       f32_3 %599 = OpVectorShuffle %598 %598 0 1 2 
                                       f32_3 %600 = OpFMul %597 %599 
                                       f32_4 %601 = OpLoad %56 
                                       f32_4 %602 = OpVectorShuffle %601 %600 4 5 6 3 
                                                      OpStore %56 %602 
                                Private f32* %603 = OpAccessChain %56 %94 
                                         f32 %604 = OpLoad %603 
                                Uniform f32* %605 = OpAccessChain %27 %565 %29 %104 
                                         f32 %606 = OpLoad %605 
                                         f32 %607 = OpFMul %604 %606 
                                Private f32* %608 = OpAccessChain %93 %94 
                                                      OpStore %608 %607 
                                Private f32* %609 = OpAccessChain %56 %104 
                                         f32 %610 = OpLoad %609 
                                Uniform f32* %611 = OpAccessChain %27 %565 %39 %104 
                                         f32 %612 = OpLoad %611 
                                         f32 %613 = OpFMul %610 %612 
                                Private f32* %614 = OpAccessChain %93 %104 
                                                      OpStore %614 %613 
                                Private f32* %615 = OpAccessChain %56 %111 
                                         f32 %616 = OpLoad %615 
                                Uniform f32* %617 = OpAccessChain %27 %565 %114 %104 
                                         f32 %618 = OpLoad %617 
                                         f32 %619 = OpFMul %616 %618 
                                Private f32* %620 = OpAccessChain %93 %111 
                                                      OpStore %620 %619 
                                       f32_4 %621 = OpLoad %9 
                                       f32_3 %622 = OpVectorShuffle %621 %621 0 1 2 
                                       f32_4 %623 = OpLoad %93 
                                       f32_3 %624 = OpVectorShuffle %623 %623 0 1 2 
                                       f32_3 %625 = OpFAdd %622 %624 
                                       f32_4 %626 = OpLoad %9 
                                       f32_4 %627 = OpVectorShuffle %626 %625 4 5 6 3 
                                                      OpStore %9 %627 
                                       f32_2 %628 = OpLoad vs_TEXCOORD0 
                                       f32_2 %629 = OpVectorShuffle %628 %628 0 0 
                              Uniform f32_4* %630 = OpAccessChain %27 %114 %29 
                                       f32_4 %631 = OpLoad %630 
                                       f32_2 %632 = OpVectorShuffle %631 %631 2 3 
                                       f32_2 %633 = OpFAdd %629 %632 
                                       f32_4 %634 = OpLoad %56 
                                       f32_4 %635 = OpVectorShuffle %634 %633 4 1 5 3 
                                                      OpStore %56 %635 
                                       f32_2 %636 = OpLoad vs_TEXCOORD0 
                                       f32_2 %637 = OpVectorShuffle %636 %636 1 1 
                              Uniform f32_4* %638 = OpAccessChain %27 %114 %39 
                                       f32_4 %639 = OpLoad %638 
                                       f32_2 %640 = OpVectorShuffle %639 %639 2 3 
                                       f32_2 %641 = OpFAdd %637 %640 
                                       f32_4 %642 = OpLoad %56 
                                       f32_4 %643 = OpVectorShuffle %642 %641 0 4 2 5 
                                                      OpStore %56 %643 
                                       f32_4 %644 = OpLoad %56 
                              Uniform f32_4* %645 = OpAccessChain %27 %47 
                                       f32_4 %646 = OpLoad %645 
                                       f32_4 %647 = OpVectorShuffle %646 %646 0 1 0 1 
                                       f32_4 %648 = OpFMul %644 %647 
                              Uniform f32_4* %649 = OpAccessChain %27 %47 
                                       f32_4 %650 = OpLoad %649 
                                       f32_4 %651 = OpVectorShuffle %650 %650 2 3 2 3 
                                       f32_4 %652 = OpFAdd %648 %651 
                                                      OpStore %56 %652 
                         read_only Texture2D %653 = OpLoad %59 
                                     sampler %654 = OpLoad %63 
                  read_only Texture2DSampled %655 = OpSampledImage %653 %654 
                                       f32_4 %656 = OpLoad %56 
                                       f32_2 %657 = OpVectorShuffle %656 %656 0 1 
                                       f32_4 %658 = OpImageSampleImplicitLod %655 %657 
                                                      OpStore %93 %658 
                         read_only Texture2D %659 = OpLoad %59 
                                     sampler %660 = OpLoad %63 
                  read_only Texture2DSampled %661 = OpSampledImage %659 %660 
                                       f32_4 %662 = OpLoad %56 
                                       f32_2 %663 = OpVectorShuffle %662 %662 2 3 
                                       f32_4 %664 = OpImageSampleImplicitLod %661 %663 
                                                      OpStore %56 %664 
                                       f32_4 %665 = OpLoad %93 
                                       f32_3 %666 = OpVectorShuffle %665 %665 0 1 2 
                              Uniform f32_4* %667 = OpAccessChain %27 %79 
                                       f32_4 %668 = OpLoad %667 
                                       f32_3 %669 = OpVectorShuffle %668 %668 0 0 0 
                                       f32_3 %670 = OpFMul %666 %669 
                                       f32_4 %671 = OpLoad %93 
                                       f32_4 %672 = OpVectorShuffle %671 %670 4 5 6 3 
                                                      OpStore %93 %672 
                                       f32_4 %673 = OpLoad %93 
                                       f32_3 %674 = OpVectorShuffle %673 %673 3 3 3 
                                       f32_4 %675 = OpLoad %93 
                                       f32_3 %676 = OpVectorShuffle %675 %675 0 1 2 
                                       f32_3 %677 = OpFMul %674 %676 
                                       f32_4 %678 = OpLoad %93 
                                       f32_4 %679 = OpVectorShuffle %678 %677 4 5 6 3 
                                                      OpStore %93 %679 
                                Private f32* %680 = OpAccessChain %93 %94 
                                         f32 %681 = OpLoad %680 
                                Uniform f32* %682 = OpAccessChain %27 %565 %29 %111 
                                         f32 %683 = OpLoad %682 
                                         f32 %684 = OpFMul %681 %683 
                                Private f32* %685 = OpAccessChain %212 %94 
                                                      OpStore %685 %684 
                                Private f32* %686 = OpAccessChain %93 %104 
                                         f32 %687 = OpLoad %686 
                                Uniform f32* %688 = OpAccessChain %27 %565 %39 %111 
                                         f32 %689 = OpLoad %688 
                                         f32 %690 = OpFMul %687 %689 
                                Private f32* %691 = OpAccessChain %212 %104 
                                                      OpStore %691 %690 
                                Private f32* %692 = OpAccessChain %93 %111 
                                         f32 %693 = OpLoad %692 
                                Uniform f32* %694 = OpAccessChain %27 %565 %114 %111 
                                         f32 %695 = OpLoad %694 
                                         f32 %696 = OpFMul %693 %695 
                                Private f32* %697 = OpAccessChain %212 %111 
                                                      OpStore %697 %696 
                                       f32_4 %698 = OpLoad %9 
                                       f32_3 %699 = OpVectorShuffle %698 %698 0 1 2 
                                       f32_3 %700 = OpLoad %212 
                                       f32_3 %701 = OpFAdd %699 %700 
                                       f32_4 %702 = OpLoad %9 
                                       f32_4 %703 = OpVectorShuffle %702 %701 4 5 6 3 
                                                      OpStore %9 %703 
                                       f32_4 %704 = OpLoad %56 
                                       f32_3 %705 = OpVectorShuffle %704 %704 0 1 2 
                              Uniform f32_4* %706 = OpAccessChain %27 %79 
                                       f32_4 %707 = OpLoad %706 
                                       f32_3 %708 = OpVectorShuffle %707 %707 0 0 0 
                                       f32_3 %709 = OpFMul %705 %708 
                                       f32_4 %710 = OpLoad %56 
                                       f32_4 %711 = OpVectorShuffle %710 %709 4 5 6 3 
                                                      OpStore %56 %711 
                                       f32_4 %712 = OpLoad %56 
                                       f32_3 %713 = OpVectorShuffle %712 %712 3 3 3 
                                       f32_4 %714 = OpLoad %56 
                                       f32_3 %715 = OpVectorShuffle %714 %714 0 1 2 
                                       f32_3 %716 = OpFMul %713 %715 
                                       f32_4 %717 = OpLoad %56 
                                       f32_4 %718 = OpVectorShuffle %717 %716 4 5 6 3 
                                                      OpStore %56 %718 
                                Private f32* %719 = OpAccessChain %56 %94 
                                         f32 %720 = OpLoad %719 
                                Uniform f32* %721 = OpAccessChain %27 %565 %29 %254 
                                         f32 %722 = OpLoad %721 
                                         f32 %723 = OpFMul %720 %722 
                                Private f32* %724 = OpAccessChain %93 %94 
                                                      OpStore %724 %723 
                                Private f32* %725 = OpAccessChain %56 %104 
                                         f32 %726 = OpLoad %725 
                                Uniform f32* %727 = OpAccessChain %27 %565 %39 %254 
                                         f32 %728 = OpLoad %727 
                                         f32 %729 = OpFMul %726 %728 
                                Private f32* %730 = OpAccessChain %93 %104 
                                                      OpStore %730 %729 
                                Private f32* %731 = OpAccessChain %56 %111 
                                         f32 %732 = OpLoad %731 
                                Uniform f32* %733 = OpAccessChain %27 %565 %114 %254 
                                         f32 %734 = OpLoad %733 
                                         f32 %735 = OpFMul %732 %734 
                                Private f32* %736 = OpAccessChain %93 %111 
                                                      OpStore %736 %735 
                                       f32_4 %737 = OpLoad %9 
                                       f32_3 %738 = OpVectorShuffle %737 %737 0 1 2 
                                       f32_4 %739 = OpLoad %93 
                                       f32_3 %740 = OpVectorShuffle %739 %739 0 1 2 
                                       f32_3 %741 = OpFAdd %738 %740 
                                       f32_4 %742 = OpLoad %9 
                                       f32_4 %743 = OpVectorShuffle %742 %741 4 5 6 3 
                                                      OpStore %9 %743 
                                       f32_2 %744 = OpLoad vs_TEXCOORD0 
                                       f32_2 %745 = OpVectorShuffle %744 %744 0 0 
                              Uniform f32_4* %747 = OpAccessChain %27 %746 %29 
                                       f32_4 %748 = OpLoad %747 
                                       f32_2 %749 = OpVectorShuffle %748 %748 0 1 
                                       f32_2 %750 = OpFAdd %745 %749 
                                       f32_4 %751 = OpLoad %56 
                                       f32_4 %752 = OpVectorShuffle %751 %750 4 1 5 3 
                                                      OpStore %56 %752 
                                       f32_2 %753 = OpLoad vs_TEXCOORD0 
                                       f32_2 %754 = OpVectorShuffle %753 %753 1 1 
                              Uniform f32_4* %755 = OpAccessChain %27 %746 %39 
                                       f32_4 %756 = OpLoad %755 
                                       f32_2 %757 = OpVectorShuffle %756 %756 0 1 
                                       f32_2 %758 = OpFAdd %754 %757 
                                       f32_4 %759 = OpLoad %56 
                                       f32_4 %760 = OpVectorShuffle %759 %758 0 4 2 5 
                                                      OpStore %56 %760 
                                       f32_4 %761 = OpLoad %56 
                              Uniform f32_4* %762 = OpAccessChain %27 %47 
                                       f32_4 %763 = OpLoad %762 
                                       f32_4 %764 = OpVectorShuffle %763 %763 0 1 0 1 
                                       f32_4 %765 = OpFMul %761 %764 
                              Uniform f32_4* %766 = OpAccessChain %27 %47 
                                       f32_4 %767 = OpLoad %766 
                                       f32_4 %768 = OpVectorShuffle %767 %767 2 3 2 3 
                                       f32_4 %769 = OpFAdd %765 %768 
                                                      OpStore %56 %769 
                         read_only Texture2D %770 = OpLoad %59 
                                     sampler %771 = OpLoad %63 
                  read_only Texture2DSampled %772 = OpSampledImage %770 %771 
                                       f32_4 %773 = OpLoad %56 
                                       f32_2 %774 = OpVectorShuffle %773 %773 0 1 
                                       f32_4 %775 = OpImageSampleImplicitLod %772 %774 
                                                      OpStore %93 %775 
                         read_only Texture2D %776 = OpLoad %59 
                                     sampler %777 = OpLoad %63 
                  read_only Texture2DSampled %778 = OpSampledImage %776 %777 
                                       f32_4 %779 = OpLoad %56 
                                       f32_2 %780 = OpVectorShuffle %779 %779 2 3 
                                       f32_4 %781 = OpImageSampleImplicitLod %778 %780 
                                                      OpStore %56 %781 
                                       f32_4 %782 = OpLoad %93 
                                       f32_3 %783 = OpVectorShuffle %782 %782 0 1 2 
                              Uniform f32_4* %784 = OpAccessChain %27 %79 
                                       f32_4 %785 = OpLoad %784 
                                       f32_3 %786 = OpVectorShuffle %785 %785 0 0 0 
                                       f32_3 %787 = OpFMul %783 %786 
                                       f32_4 %788 = OpLoad %93 
                                       f32_4 %789 = OpVectorShuffle %788 %787 4 5 6 3 
                                                      OpStore %93 %789 
                                       f32_4 %790 = OpLoad %93 
                                       f32_3 %791 = OpVectorShuffle %790 %790 3 3 3 
                                       f32_4 %792 = OpLoad %93 
                                       f32_3 %793 = OpVectorShuffle %792 %792 0 1 2 
                                       f32_3 %794 = OpFMul %791 %793 
                                       f32_4 %795 = OpLoad %93 
                                       f32_4 %796 = OpVectorShuffle %795 %794 4 5 6 3 
                                                      OpStore %93 %796 
                                Private f32* %797 = OpAccessChain %93 %94 
                                         f32 %798 = OpLoad %797 
                                Uniform f32* %800 = OpAccessChain %27 %799 %29 %94 
                                         f32 %801 = OpLoad %800 
                                         f32 %802 = OpFMul %798 %801 
                                Private f32* %803 = OpAccessChain %212 %94 
                                                      OpStore %803 %802 
                                Private f32* %804 = OpAccessChain %93 %104 
                                         f32 %805 = OpLoad %804 
                                Uniform f32* %806 = OpAccessChain %27 %799 %39 %94 
                                         f32 %807 = OpLoad %806 
                                         f32 %808 = OpFMul %805 %807 
                                Private f32* %809 = OpAccessChain %212 %104 
                                                      OpStore %809 %808 
                                Private f32* %810 = OpAccessChain %93 %111 
                                         f32 %811 = OpLoad %810 
                                Uniform f32* %812 = OpAccessChain %27 %799 %114 %94 
                                         f32 %813 = OpLoad %812 
                                         f32 %814 = OpFMul %811 %813 
                                Private f32* %815 = OpAccessChain %212 %111 
                                                      OpStore %815 %814 
                                       f32_4 %816 = OpLoad %9 
                                       f32_3 %817 = OpVectorShuffle %816 %816 0 1 2 
                                       f32_3 %818 = OpLoad %212 
                                       f32_3 %819 = OpFAdd %817 %818 
                                       f32_4 %820 = OpLoad %9 
                                       f32_4 %821 = OpVectorShuffle %820 %819 4 5 6 3 
                                                      OpStore %9 %821 
                                       f32_4 %822 = OpLoad %56 
                                       f32_3 %823 = OpVectorShuffle %822 %822 0 1 2 
                              Uniform f32_4* %824 = OpAccessChain %27 %79 
                                       f32_4 %825 = OpLoad %824 
                                       f32_3 %826 = OpVectorShuffle %825 %825 0 0 0 
                                       f32_3 %827 = OpFMul %823 %826 
                                       f32_4 %828 = OpLoad %56 
                                       f32_4 %829 = OpVectorShuffle %828 %827 4 5 6 3 
                                                      OpStore %56 %829 
                                       f32_4 %830 = OpLoad %56 
                                       f32_3 %831 = OpVectorShuffle %830 %830 3 3 3 
                                       f32_4 %832 = OpLoad %56 
                                       f32_3 %833 = OpVectorShuffle %832 %832 0 1 2 
                                       f32_3 %834 = OpFMul %831 %833 
                                       f32_4 %835 = OpLoad %56 
                                       f32_4 %836 = OpVectorShuffle %835 %834 4 5 6 3 
                                                      OpStore %56 %836 
                                Private f32* %837 = OpAccessChain %56 %94 
                                         f32 %838 = OpLoad %837 
                                Uniform f32* %839 = OpAccessChain %27 %799 %29 %104 
                                         f32 %840 = OpLoad %839 
                                         f32 %841 = OpFMul %838 %840 
                                Private f32* %842 = OpAccessChain %93 %94 
                                                      OpStore %842 %841 
                                Private f32* %843 = OpAccessChain %56 %104 
                                         f32 %844 = OpLoad %843 
                                Uniform f32* %845 = OpAccessChain %27 %799 %39 %104 
                                         f32 %846 = OpLoad %845 
                                         f32 %847 = OpFMul %844 %846 
                                Private f32* %848 = OpAccessChain %93 %104 
                                                      OpStore %848 %847 
                                Private f32* %849 = OpAccessChain %56 %111 
                                         f32 %850 = OpLoad %849 
                                Uniform f32* %851 = OpAccessChain %27 %799 %114 %104 
                                         f32 %852 = OpLoad %851 
                                         f32 %853 = OpFMul %850 %852 
                                Private f32* %854 = OpAccessChain %93 %111 
                                                      OpStore %854 %853 
                                       f32_4 %855 = OpLoad %9 
                                       f32_3 %856 = OpVectorShuffle %855 %855 0 1 2 
                                       f32_4 %857 = OpLoad %93 
                                       f32_3 %858 = OpVectorShuffle %857 %857 0 1 2 
                                       f32_3 %859 = OpFAdd %856 %858 
                                       f32_4 %860 = OpLoad %9 
                                       f32_4 %861 = OpVectorShuffle %860 %859 4 5 6 3 
                                                      OpStore %9 %861 
                                       f32_2 %862 = OpLoad vs_TEXCOORD0 
                                       f32_2 %863 = OpVectorShuffle %862 %862 0 0 
                              Uniform f32_4* %864 = OpAccessChain %27 %746 %29 
                                       f32_4 %865 = OpLoad %864 
                                       f32_2 %866 = OpVectorShuffle %865 %865 2 3 
                                       f32_2 %867 = OpFAdd %863 %866 
                                       f32_4 %868 = OpLoad %56 
                                       f32_4 %869 = OpVectorShuffle %868 %867 4 1 5 3 
                                                      OpStore %56 %869 
                                       f32_2 %870 = OpLoad vs_TEXCOORD0 
                                       f32_2 %871 = OpVectorShuffle %870 %870 1 1 
                              Uniform f32_4* %872 = OpAccessChain %27 %746 %39 
                                       f32_4 %873 = OpLoad %872 
                                       f32_2 %874 = OpVectorShuffle %873 %873 2 3 
                                       f32_2 %875 = OpFAdd %871 %874 
                                       f32_4 %876 = OpLoad %56 
                                       f32_4 %877 = OpVectorShuffle %876 %875 0 4 2 5 
                                                      OpStore %56 %877 
                                       f32_4 %878 = OpLoad %56 
                              Uniform f32_4* %879 = OpAccessChain %27 %47 
                                       f32_4 %880 = OpLoad %879 
                                       f32_4 %881 = OpVectorShuffle %880 %880 0 1 0 1 
                                       f32_4 %882 = OpFMul %878 %881 
                              Uniform f32_4* %883 = OpAccessChain %27 %47 
                                       f32_4 %884 = OpLoad %883 
                                       f32_4 %885 = OpVectorShuffle %884 %884 2 3 2 3 
                                       f32_4 %886 = OpFAdd %882 %885 
                                                      OpStore %56 %886 
                         read_only Texture2D %887 = OpLoad %59 
                                     sampler %888 = OpLoad %63 
                  read_only Texture2DSampled %889 = OpSampledImage %887 %888 
                                       f32_4 %890 = OpLoad %56 
                                       f32_2 %891 = OpVectorShuffle %890 %890 0 1 
                                       f32_4 %892 = OpImageSampleImplicitLod %889 %891 
                                                      OpStore %93 %892 
                         read_only Texture2D %893 = OpLoad %59 
                                     sampler %894 = OpLoad %63 
                  read_only Texture2DSampled %895 = OpSampledImage %893 %894 
                                       f32_4 %896 = OpLoad %56 
                                       f32_2 %897 = OpVectorShuffle %896 %896 2 3 
                                       f32_4 %898 = OpImageSampleImplicitLod %895 %897 
                                                      OpStore %56 %898 
                                       f32_4 %899 = OpLoad %93 
                                       f32_3 %900 = OpVectorShuffle %899 %899 0 1 2 
                              Uniform f32_4* %901 = OpAccessChain %27 %79 
                                       f32_4 %902 = OpLoad %901 
                                       f32_3 %903 = OpVectorShuffle %902 %902 0 0 0 
                                       f32_3 %904 = OpFMul %900 %903 
                                       f32_4 %905 = OpLoad %93 
                                       f32_4 %906 = OpVectorShuffle %905 %904 4 5 6 3 
                                                      OpStore %93 %906 
                                       f32_4 %907 = OpLoad %93 
                                       f32_3 %908 = OpVectorShuffle %907 %907 3 3 3 
                                       f32_4 %909 = OpLoad %93 
                                       f32_3 %910 = OpVectorShuffle %909 %909 0 1 2 
                                       f32_3 %911 = OpFMul %908 %910 
                                       f32_4 %912 = OpLoad %93 
                                       f32_4 %913 = OpVectorShuffle %912 %911 4 5 6 3 
                                                      OpStore %93 %913 
                                Private f32* %914 = OpAccessChain %93 %94 
                                         f32 %915 = OpLoad %914 
                                Uniform f32* %916 = OpAccessChain %27 %799 %29 %111 
                                         f32 %917 = OpLoad %916 
                                         f32 %918 = OpFMul %915 %917 
                                Private f32* %919 = OpAccessChain %212 %94 
                                                      OpStore %919 %918 
                                Private f32* %920 = OpAccessChain %93 %104 
                                         f32 %921 = OpLoad %920 
                                Uniform f32* %922 = OpAccessChain %27 %799 %39 %111 
                                         f32 %923 = OpLoad %922 
                                         f32 %924 = OpFMul %921 %923 
                                Private f32* %925 = OpAccessChain %212 %104 
                                                      OpStore %925 %924 
                                Private f32* %926 = OpAccessChain %93 %111 
                                         f32 %927 = OpLoad %926 
                                Uniform f32* %928 = OpAccessChain %27 %799 %114 %111 
                                         f32 %929 = OpLoad %928 
                                         f32 %930 = OpFMul %927 %929 
                                Private f32* %931 = OpAccessChain %212 %111 
                                                      OpStore %931 %930 
                                       f32_4 %932 = OpLoad %9 
                                       f32_3 %933 = OpVectorShuffle %932 %932 0 1 2 
                                       f32_3 %934 = OpLoad %212 
                                       f32_3 %935 = OpFAdd %933 %934 
                                       f32_4 %936 = OpLoad %9 
                                       f32_4 %937 = OpVectorShuffle %936 %935 4 5 6 3 
                                                      OpStore %9 %937 
                                       f32_4 %938 = OpLoad %56 
                                       f32_3 %939 = OpVectorShuffle %938 %938 0 1 2 
                              Uniform f32_4* %940 = OpAccessChain %27 %79 
                                       f32_4 %941 = OpLoad %940 
                                       f32_3 %942 = OpVectorShuffle %941 %941 0 0 0 
                                       f32_3 %943 = OpFMul %939 %942 
                                       f32_4 %944 = OpLoad %56 
                                       f32_4 %945 = OpVectorShuffle %944 %943 4 5 6 3 
                                                      OpStore %56 %945 
                                       f32_4 %946 = OpLoad %56 
                                       f32_3 %947 = OpVectorShuffle %946 %946 3 3 3 
                                       f32_4 %948 = OpLoad %56 
                                       f32_3 %949 = OpVectorShuffle %948 %948 0 1 2 
                                       f32_3 %950 = OpFMul %947 %949 
                                       f32_4 %951 = OpLoad %56 
                                       f32_4 %952 = OpVectorShuffle %951 %950 4 5 6 3 
                                                      OpStore %56 %952 
                                Private f32* %953 = OpAccessChain %56 %94 
                                         f32 %954 = OpLoad %953 
                                Uniform f32* %955 = OpAccessChain %27 %799 %29 %254 
                                         f32 %956 = OpLoad %955 
                                         f32 %957 = OpFMul %954 %956 
                                Private f32* %958 = OpAccessChain %93 %94 
                                                      OpStore %958 %957 
                                Private f32* %959 = OpAccessChain %56 %104 
                                         f32 %960 = OpLoad %959 
                                Uniform f32* %961 = OpAccessChain %27 %799 %39 %254 
                                         f32 %962 = OpLoad %961 
                                         f32 %963 = OpFMul %960 %962 
                                Private f32* %964 = OpAccessChain %93 %104 
                                                      OpStore %964 %963 
                                Private f32* %965 = OpAccessChain %56 %111 
                                         f32 %966 = OpLoad %965 
                                Uniform f32* %967 = OpAccessChain %27 %799 %114 %254 
                                         f32 %968 = OpLoad %967 
                                         f32 %969 = OpFMul %966 %968 
                                Private f32* %970 = OpAccessChain %93 %111 
                                                      OpStore %970 %969 
                                       f32_4 %971 = OpLoad %9 
                                       f32_3 %972 = OpVectorShuffle %971 %971 0 1 2 
                                       f32_4 %973 = OpLoad %93 
                                       f32_3 %974 = OpVectorShuffle %973 %973 0 1 2 
                                       f32_3 %975 = OpFAdd %972 %974 
                                       f32_4 %976 = OpLoad %9 
                                       f32_4 %977 = OpVectorShuffle %976 %975 4 5 6 3 
                                                      OpStore %9 %977 
                                       f32_4 %978 = OpLoad %9 
                                       f32_3 %979 = OpVectorShuffle %978 %978 0 1 2 
                              Uniform f32_4* %980 = OpAccessChain %27 %79 
                                       f32_4 %981 = OpLoad %980 
                                       f32_3 %982 = OpVectorShuffle %981 %981 1 1 1 
                                       f32_3 %983 = OpFMul %979 %982 
                                       f32_4 %984 = OpLoad %9 
                                       f32_4 %985 = OpVectorShuffle %984 %983 4 5 6 3 
                                                      OpStore %9 %985 
                                Private f32* %987 = OpAccessChain %9 %104 
                                         f32 %988 = OpLoad %987 
                                Private f32* %989 = OpAccessChain %9 %94 
                                         f32 %990 = OpLoad %989 
                                         f32 %991 = OpExtInst %1 40 %988 %990 
                                                      OpStore %986 %991 
                                Private f32* %992 = OpAccessChain %9 %111 
                                         f32 %993 = OpLoad %992 
                                         f32 %995 = OpExtInst %1 40 %993 %994 
                                Private f32* %996 = OpAccessChain %56 %94 
                                                      OpStore %996 %995 
                                         f32 %997 = OpLoad %986 
                                Private f32* %998 = OpAccessChain %56 %94 
                                         f32 %999 = OpLoad %998 
                                        f32 %1000 = OpExtInst %1 40 %997 %999 
                                                      OpStore %986 %1000 
                                        f32 %1001 = OpLoad %986 
                                        f32 %1003 = OpExtInst %1 37 %1001 %1002 
                                                      OpStore %986 %1003 
                                        f32 %1004 = OpLoad %986 
                                        f32 %1006 = OpFMul %1004 %1005 
                                                      OpStore %986 %1006 
                                        f32 %1007 = OpLoad %986 
                                        f32 %1008 = OpExtInst %1 9 %1007 
                                                      OpStore %986 %1008 
                                        f32 %1009 = OpLoad %986 
                                        f32 %1011 = OpFMul %1009 %1010 
                                                      OpStore %986 %1011 
                                      f32_4 %1014 = OpLoad %9 
                                      f32_3 %1015 = OpVectorShuffle %1014 %1014 0 1 2 
                                        f32 %1016 = OpLoad %986 
                                      f32_3 %1017 = OpCompositeConstruct %1016 %1016 %1016 
                                      f32_3 %1018 = OpFDiv %1015 %1017 
                                      f32_4 %1019 = OpLoad %1013 
                                      f32_4 %1020 = OpVectorShuffle %1019 %1018 4 5 6 3 
                                                      OpStore %1013 %1020 
                                        f32 %1021 = OpLoad %986 
                                Output f32* %1023 = OpAccessChain %1013 %254 
                                                      OpStore %1023 %1021 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "AB_HIGH_PRECISION" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "AB_HIGH_PRECISION" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in  vec4 in_POSITION0;
in  vec2 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4_AnamorphicGlareOffsetsMat0[4];
uniform 	vec4 hlslcc_mtx4x4_AnamorphicGlareOffsetsMat1[4];
uniform 	vec4 hlslcc_mtx4x4_AnamorphicGlareOffsetsMat2[4];
uniform 	vec4 hlslcc_mtx4x4_AnamorphicGlareOffsetsMat3[4];
uniform 	vec4 hlslcc_mtx4x4_AnamorphicGlareWeightsMat0[4];
uniform 	vec4 hlslcc_mtx4x4_AnamorphicGlareWeightsMat1[4];
uniform 	vec4 hlslcc_mtx4x4_AnamorphicGlareWeightsMat2[4];
uniform 	vec4 hlslcc_mtx4x4_AnamorphicGlareWeightsMat3[4];
uniform 	vec4 _MainTex_ST;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
in  vec2 vs_TEXCOORD0;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
void main()
{
    u_xlat0.xz = vs_TEXCOORD0.xx + hlslcc_mtx4x4_AnamorphicGlareOffsetsMat0[0].xy;
    u_xlat0.yw = vs_TEXCOORD0.yy + hlslcc_mtx4x4_AnamorphicGlareOffsetsMat0[1].xy;
    u_xlat0 = u_xlat0 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
    u_xlat1 = texture(_MainTex, u_xlat0.xy);
    u_xlat0 = texture(_MainTex, u_xlat0.zw);
    u_xlat2.x = u_xlat1.x * hlslcc_mtx4x4_AnamorphicGlareWeightsMat0[0].x;
    u_xlat2.y = u_xlat1.y * hlslcc_mtx4x4_AnamorphicGlareWeightsMat0[1].x;
    u_xlat2.z = u_xlat1.z * hlslcc_mtx4x4_AnamorphicGlareWeightsMat0[2].x;
    u_xlat1.x = u_xlat0.x * hlslcc_mtx4x4_AnamorphicGlareWeightsMat0[0].y;
    u_xlat1.y = u_xlat0.y * hlslcc_mtx4x4_AnamorphicGlareWeightsMat0[1].y;
    u_xlat1.z = u_xlat0.z * hlslcc_mtx4x4_AnamorphicGlareWeightsMat0[2].y;
    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
    u_xlat1.xz = vs_TEXCOORD0.xx + hlslcc_mtx4x4_AnamorphicGlareOffsetsMat0[0].zw;
    u_xlat1.yw = vs_TEXCOORD0.yy + hlslcc_mtx4x4_AnamorphicGlareOffsetsMat0[1].zw;
    u_xlat1 = u_xlat1 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
    u_xlat2 = texture(_MainTex, u_xlat1.xy);
    u_xlat1 = texture(_MainTex, u_xlat1.zw);
    u_xlat3.x = u_xlat2.x * hlslcc_mtx4x4_AnamorphicGlareWeightsMat0[0].z;
    u_xlat3.y = u_xlat2.y * hlslcc_mtx4x4_AnamorphicGlareWeightsMat0[1].z;
    u_xlat3.z = u_xlat2.z * hlslcc_mtx4x4_AnamorphicGlareWeightsMat0[2].z;
    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
    u_xlat2.x = u_xlat1.x * hlslcc_mtx4x4_AnamorphicGlareWeightsMat0[0].w;
    u_xlat2.y = u_xlat1.y * hlslcc_mtx4x4_AnamorphicGlareWeightsMat0[1].w;
    u_xlat2.z = u_xlat1.z * hlslcc_mtx4x4_AnamorphicGlareWeightsMat0[2].w;
    u_xlat0.xyz = u_xlat0.xyz + u_xlat2.xyz;
    u_xlat1.xz = vs_TEXCOORD0.xx + hlslcc_mtx4x4_AnamorphicGlareOffsetsMat1[0].xy;
    u_xlat1.yw = vs_TEXCOORD0.yy + hlslcc_mtx4x4_AnamorphicGlareOffsetsMat1[1].xy;
    u_xlat1 = u_xlat1 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
    u_xlat2 = texture(_MainTex, u_xlat1.xy);
    u_xlat1 = texture(_MainTex, u_xlat1.zw);
    u_xlat3.x = u_xlat2.x * hlslcc_mtx4x4_AnamorphicGlareWeightsMat1[0].x;
    u_xlat3.y = u_xlat2.y * hlslcc_mtx4x4_AnamorphicGlareWeightsMat1[1].x;
    u_xlat3.z = u_xlat2.z * hlslcc_mtx4x4_AnamorphicGlareWeightsMat1[2].x;
    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
    u_xlat2.x = u_xlat1.x * hlslcc_mtx4x4_AnamorphicGlareWeightsMat1[0].y;
    u_xlat2.y = u_xlat1.y * hlslcc_mtx4x4_AnamorphicGlareWeightsMat1[1].y;
    u_xlat2.z = u_xlat1.z * hlslcc_mtx4x4_AnamorphicGlareWeightsMat1[2].y;
    u_xlat0.xyz = u_xlat0.xyz + u_xlat2.xyz;
    u_xlat1.xz = vs_TEXCOORD0.xx + hlslcc_mtx4x4_AnamorphicGlareOffsetsMat1[0].zw;
    u_xlat1.yw = vs_TEXCOORD0.yy + hlslcc_mtx4x4_AnamorphicGlareOffsetsMat1[1].zw;
    u_xlat1 = u_xlat1 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
    u_xlat2 = texture(_MainTex, u_xlat1.xy);
    u_xlat1 = texture(_MainTex, u_xlat1.zw);
    u_xlat3.x = u_xlat2.x * hlslcc_mtx4x4_AnamorphicGlareWeightsMat1[0].z;
    u_xlat3.y = u_xlat2.y * hlslcc_mtx4x4_AnamorphicGlareWeightsMat1[1].z;
    u_xlat3.z = u_xlat2.z * hlslcc_mtx4x4_AnamorphicGlareWeightsMat1[2].z;
    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
    u_xlat2.x = u_xlat1.x * hlslcc_mtx4x4_AnamorphicGlareWeightsMat1[0].w;
    u_xlat2.y = u_xlat1.y * hlslcc_mtx4x4_AnamorphicGlareWeightsMat1[1].w;
    u_xlat2.z = u_xlat1.z * hlslcc_mtx4x4_AnamorphicGlareWeightsMat1[2].w;
    u_xlat0.xyz = u_xlat0.xyz + u_xlat2.xyz;
    u_xlat1.xz = vs_TEXCOORD0.xx + hlslcc_mtx4x4_AnamorphicGlareOffsetsMat2[0].xy;
    u_xlat1.yw = vs_TEXCOORD0.yy + hlslcc_mtx4x4_AnamorphicGlareOffsetsMat2[1].xy;
    u_xlat1 = u_xlat1 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
    u_xlat2 = texture(_MainTex, u_xlat1.xy);
    u_xlat1 = texture(_MainTex, u_xlat1.zw);
    u_xlat3.x = u_xlat2.x * hlslcc_mtx4x4_AnamorphicGlareWeightsMat2[0].x;
    u_xlat3.y = u_xlat2.y * hlslcc_mtx4x4_AnamorphicGlareWeightsMat2[1].x;
    u_xlat3.z = u_xlat2.z * hlslcc_mtx4x4_AnamorphicGlareWeightsMat2[2].x;
    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
    u_xlat2.x = u_xlat1.x * hlslcc_mtx4x4_AnamorphicGlareWeightsMat2[0].y;
    u_xlat2.y = u_xlat1.y * hlslcc_mtx4x4_AnamorphicGlareWeightsMat2[1].y;
    u_xlat2.z = u_xlat1.z * hlslcc_mtx4x4_AnamorphicGlareWeightsMat2[2].y;
    u_xlat0.xyz = u_xlat0.xyz + u_xlat2.xyz;
    u_xlat1.xz = vs_TEXCOORD0.xx + hlslcc_mtx4x4_AnamorphicGlareOffsetsMat2[0].zw;
    u_xlat1.yw = vs_TEXCOORD0.yy + hlslcc_mtx4x4_AnamorphicGlareOffsetsMat2[1].zw;
    u_xlat1 = u_xlat1 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
    u_xlat2 = texture(_MainTex, u_xlat1.xy);
    u_xlat1 = texture(_MainTex, u_xlat1.zw);
    u_xlat3.x = u_xlat2.x * hlslcc_mtx4x4_AnamorphicGlareWeightsMat2[0].z;
    u_xlat3.y = u_xlat2.y * hlslcc_mtx4x4_AnamorphicGlareWeightsMat2[1].z;
    u_xlat3.z = u_xlat2.z * hlslcc_mtx4x4_AnamorphicGlareWeightsMat2[2].z;
    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
    u_xlat2.x = u_xlat1.x * hlslcc_mtx4x4_AnamorphicGlareWeightsMat2[0].w;
    u_xlat2.y = u_xlat1.y * hlslcc_mtx4x4_AnamorphicGlareWeightsMat2[1].w;
    u_xlat2.z = u_xlat1.z * hlslcc_mtx4x4_AnamorphicGlareWeightsMat2[2].w;
    u_xlat0.xyz = u_xlat0.xyz + u_xlat2.xyz;
    u_xlat1.xz = vs_TEXCOORD0.xx + hlslcc_mtx4x4_AnamorphicGlareOffsetsMat3[0].xy;
    u_xlat1.yw = vs_TEXCOORD0.yy + hlslcc_mtx4x4_AnamorphicGlareOffsetsMat3[1].xy;
    u_xlat1 = u_xlat1 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
    u_xlat2 = texture(_MainTex, u_xlat1.xy);
    u_xlat1 = texture(_MainTex, u_xlat1.zw);
    u_xlat3.x = u_xlat2.x * hlslcc_mtx4x4_AnamorphicGlareWeightsMat3[0].x;
    u_xlat3.y = u_xlat2.y * hlslcc_mtx4x4_AnamorphicGlareWeightsMat3[1].x;
    u_xlat3.z = u_xlat2.z * hlslcc_mtx4x4_AnamorphicGlareWeightsMat3[2].x;
    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
    u_xlat2.x = u_xlat1.x * hlslcc_mtx4x4_AnamorphicGlareWeightsMat3[0].y;
    u_xlat2.y = u_xlat1.y * hlslcc_mtx4x4_AnamorphicGlareWeightsMat3[1].y;
    u_xlat2.z = u_xlat1.z * hlslcc_mtx4x4_AnamorphicGlareWeightsMat3[2].y;
    u_xlat0.xyz = u_xlat0.xyz + u_xlat2.xyz;
    u_xlat1.xz = vs_TEXCOORD0.xx + hlslcc_mtx4x4_AnamorphicGlareOffsetsMat3[0].zw;
    u_xlat1.yw = vs_TEXCOORD0.yy + hlslcc_mtx4x4_AnamorphicGlareOffsetsMat3[1].zw;
    u_xlat1 = u_xlat1 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
    u_xlat2 = texture(_MainTex, u_xlat1.xy);
    u_xlat1 = texture(_MainTex, u_xlat1.zw);
    u_xlat3.x = u_xlat2.x * hlslcc_mtx4x4_AnamorphicGlareWeightsMat3[0].z;
    u_xlat3.y = u_xlat2.y * hlslcc_mtx4x4_AnamorphicGlareWeightsMat3[1].z;
    u_xlat3.z = u_xlat2.z * hlslcc_mtx4x4_AnamorphicGlareWeightsMat3[2].z;
    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
    u_xlat2.x = u_xlat1.x * hlslcc_mtx4x4_AnamorphicGlareWeightsMat3[0].w;
    u_xlat2.y = u_xlat1.y * hlslcc_mtx4x4_AnamorphicGlareWeightsMat3[1].w;
    u_xlat2.z = u_xlat1.z * hlslcc_mtx4x4_AnamorphicGlareWeightsMat3[2].w;
    SV_Target0.xyz = u_xlat0.xyz + u_xlat2.xyz;
    SV_Target0.w = 0.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "AB_HIGH_PRECISION" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 94
; Schema: 0
                                              OpCapability Shader 
                                       %1 = OpExtInstImport "GLSL.std.450" 
                                              OpMemoryModel Logical GLSL450 
                                              OpEntryPoint Vertex %4 "main" %11 %72 %84 %86 
                                              OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                              OpDecorate %11 Location 11 
                                              OpDecorate %16 ArrayStride 16 
                                              OpDecorate %17 ArrayStride 17 
                                              OpMemberDecorate %18 0 Offset 18 
                                              OpMemberDecorate %18 1 Offset 18 
                                              OpDecorate %18 Block 
                                              OpDecorate %20 DescriptorSet 20 
                                              OpDecorate %20 Binding 20 
                                              OpMemberDecorate %70 0 BuiltIn 70 
                                              OpMemberDecorate %70 1 BuiltIn 70 
                                              OpMemberDecorate %70 2 BuiltIn 70 
                                              OpDecorate %70 Block 
                                              OpDecorate vs_TEXCOORD0 Location 84 
                                              OpDecorate %86 Location 86 
                                       %2 = OpTypeVoid 
                                       %3 = OpTypeFunction %2 
                                       %6 = OpTypeFloat 32 
                                       %7 = OpTypeVector %6 4 
                                       %8 = OpTypePointer Private %7 
                        Private f32_4* %9 = OpVariable Private 
                                      %10 = OpTypePointer Input %7 
                         Input f32_4* %11 = OpVariable Input 
                                      %14 = OpTypeInt 32 0 
                                  u32 %15 = OpConstant 4 
                                      %16 = OpTypeArray %7 %15 
                                      %17 = OpTypeArray %7 %15 
                                      %18 = OpTypeStruct %16 %17 
                                      %19 = OpTypePointer Uniform %18 
Uniform struct {f32_4[4]; f32_4[4];}* %20 = OpVariable Uniform 
                                      %21 = OpTypeInt 32 1 
                                  i32 %22 = OpConstant 0 
                                  i32 %23 = OpConstant 1 
                                      %24 = OpTypePointer Uniform %7 
                                  i32 %35 = OpConstant 2 
                                  i32 %44 = OpConstant 3 
                       Private f32_4* %48 = OpVariable Private 
                                  u32 %68 = OpConstant 1 
                                      %69 = OpTypeArray %6 %68 
                                      %70 = OpTypeStruct %7 %6 %69 
                                      %71 = OpTypePointer Output %70 
 Output struct {f32_4; f32; f32[1];}* %72 = OpVariable Output 
                                      %80 = OpTypePointer Output %7 
                                      %82 = OpTypeVector %6 2 
                                      %83 = OpTypePointer Output %82 
               Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                      %85 = OpTypePointer Input %82 
                         Input f32_2* %86 = OpVariable Input 
                                      %88 = OpTypePointer Output %6 
                                  void %4 = OpFunction None %3 
                                       %5 = OpLabel 
                                f32_4 %12 = OpLoad %11 
                                f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                       Uniform f32_4* %25 = OpAccessChain %20 %22 %23 
                                f32_4 %26 = OpLoad %25 
                                f32_4 %27 = OpFMul %13 %26 
                                              OpStore %9 %27 
                       Uniform f32_4* %28 = OpAccessChain %20 %22 %22 
                                f32_4 %29 = OpLoad %28 
                                f32_4 %30 = OpLoad %11 
                                f32_4 %31 = OpVectorShuffle %30 %30 0 0 0 0 
                                f32_4 %32 = OpFMul %29 %31 
                                f32_4 %33 = OpLoad %9 
                                f32_4 %34 = OpFAdd %32 %33 
                                              OpStore %9 %34 
                       Uniform f32_4* %36 = OpAccessChain %20 %22 %35 
                                f32_4 %37 = OpLoad %36 
                                f32_4 %38 = OpLoad %11 
                                f32_4 %39 = OpVectorShuffle %38 %38 2 2 2 2 
                                f32_4 %40 = OpFMul %37 %39 
                                f32_4 %41 = OpLoad %9 
                                f32_4 %42 = OpFAdd %40 %41 
                                              OpStore %9 %42 
                                f32_4 %43 = OpLoad %9 
                       Uniform f32_4* %45 = OpAccessChain %20 %22 %44 
                                f32_4 %46 = OpLoad %45 
                                f32_4 %47 = OpFAdd %43 %46 
                                              OpStore %9 %47 
                                f32_4 %49 = OpLoad %9 
                                f32_4 %50 = OpVectorShuffle %49 %49 1 1 1 1 
                       Uniform f32_4* %51 = OpAccessChain %20 %23 %23 
                                f32_4 %52 = OpLoad %51 
                                f32_4 %53 = OpFMul %50 %52 
                                              OpStore %48 %53 
                       Uniform f32_4* %54 = OpAccessChain %20 %23 %22 
                                f32_4 %55 = OpLoad %54 
                                f32_4 %56 = OpLoad %9 
                                f32_4 %57 = OpVectorShuffle %56 %56 0 0 0 0 
                                f32_4 %58 = OpFMul %55 %57 
                                f32_4 %59 = OpLoad %48 
                                f32_4 %60 = OpFAdd %58 %59 
                                              OpStore %48 %60 
                       Uniform f32_4* %61 = OpAccessChain %20 %23 %35 
                                f32_4 %62 = OpLoad %61 
                                f32_4 %63 = OpLoad %9 
                                f32_4 %64 = OpVectorShuffle %63 %63 2 2 2 2 
                                f32_4 %65 = OpFMul %62 %64 
                                f32_4 %66 = OpLoad %48 
                                f32_4 %67 = OpFAdd %65 %66 
                                              OpStore %48 %67 
                       Uniform f32_4* %73 = OpAccessChain %20 %23 %44 
                                f32_4 %74 = OpLoad %73 
                                f32_4 %75 = OpLoad %9 
                                f32_4 %76 = OpVectorShuffle %75 %75 3 3 3 3 
                                f32_4 %77 = OpFMul %74 %76 
                                f32_4 %78 = OpLoad %48 
                                f32_4 %79 = OpFAdd %77 %78 
                        Output f32_4* %81 = OpAccessChain %72 %22 
                                              OpStore %81 %79 
                                f32_2 %87 = OpLoad %86 
                                              OpStore vs_TEXCOORD0 %87 
                          Output f32* %89 = OpAccessChain %72 %22 %68 
                                  f32 %90 = OpLoad %89 
                                  f32 %91 = OpFNegate %90 
                          Output f32* %92 = OpAccessChain %72 %22 %68 
                                              OpStore %92 %91 
                                              OpReturn
                                              OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 769
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %12 %758 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpDecorate vs_TEXCOORD0 Location 12 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpDecorate %19 ArrayStride 19 
                                                      OpDecorate %20 ArrayStride 20 
                                                      OpDecorate %21 ArrayStride 21 
                                                      OpDecorate %22 ArrayStride 22 
                                                      OpDecorate %23 ArrayStride 23 
                                                      OpDecorate %24 ArrayStride 24 
                                                      OpMemberDecorate %25 0 Offset 25 
                                                      OpMemberDecorate %25 1 Offset 25 
                                                      OpMemberDecorate %25 2 Offset 25 
                                                      OpMemberDecorate %25 3 Offset 25 
                                                      OpMemberDecorate %25 4 Offset 25 
                                                      OpMemberDecorate %25 5 Offset 25 
                                                      OpMemberDecorate %25 6 Offset 25 
                                                      OpMemberDecorate %25 7 Offset 25 
                                                      OpMemberDecorate %25 8 Offset 25 
                                                      OpDecorate %25 Block 
                                                      OpDecorate %27 DescriptorSet 27 
                                                      OpDecorate %27 Binding 27 
                                                      OpDecorate %59 DescriptorSet 59 
                                                      OpDecorate %59 Binding 59 
                                                      OpDecorate %63 DescriptorSet 63 
                                                      OpDecorate %63 Binding 63 
                                                      OpDecorate %758 Location 758 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 2 
                                              %11 = OpTypePointer Input %10 
                        Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                              %15 = OpTypeInt 32 0 
                                          u32 %16 = OpConstant 4 
                                              %17 = OpTypeArray %7 %16 
                                              %18 = OpTypeArray %7 %16 
                                              %19 = OpTypeArray %7 %16 
                                              %20 = OpTypeArray %7 %16 
                                              %21 = OpTypeArray %7 %16 
                                              %22 = OpTypeArray %7 %16 
                                              %23 = OpTypeArray %7 %16 
                                              %24 = OpTypeArray %7 %16 
                                              %25 = OpTypeStruct %17 %18 %19 %20 %21 %22 %23 %24 %7 
                                              %26 = OpTypePointer Uniform %25 
Uniform struct {f32_4[4]; f32_4[4]; f32_4[4]; f32_4[4]; f32_4[4]; f32_4[4]; f32_4[4]; f32_4[4]; f32_4;}* %27 = OpVariable Uniform 
                                              %28 = OpTypeInt 32 1 
                                          i32 %29 = OpConstant 0 
                                              %30 = OpTypePointer Uniform %7 
                                          i32 %39 = OpConstant 1 
                                          i32 %47 = OpConstant 8 
                               Private f32_4* %56 = OpVariable Private 
                                              %57 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %58 = OpTypePointer UniformConstant %57 
         UniformConstant read_only Texture2D* %59 = OpVariable UniformConstant 
                                              %61 = OpTypeSampler 
                                              %62 = OpTypePointer UniformConstant %61 
                     UniformConstant sampler* %63 = OpVariable UniformConstant 
                                              %65 = OpTypeSampledImage %57 
                                              %70 = OpTypeVector %6 3 
                                              %83 = OpTypePointer Private %70 
                               Private f32_3* %84 = OpVariable Private 
                                          u32 %85 = OpConstant 0 
                                              %86 = OpTypePointer Private %6 
                                          i32 %89 = OpConstant 4 
                                              %90 = OpTypePointer Uniform %6 
                                          u32 %95 = OpConstant 1 
                                         u32 %102 = OpConstant 2 
                                         i32 %105 = OpConstant 2 
                              Private f32_3* %175 = OpVariable Private 
                                         u32 %202 = OpConstant 3 
                                         i32 %268 = OpConstant 5 
                                         i32 %447 = OpConstant 6 
                                         i32 %585 = OpConstant 3 
                                         i32 %627 = OpConstant 7 
                                             %757 = OpTypePointer Output %7 
                               Output f32_4* %758 = OpVariable Output 
                                         f32 %765 = OpConstant 3.674022E-40 
                                             %766 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_2 %13 = OpLoad vs_TEXCOORD0 
                                        f32_2 %14 = OpVectorShuffle %13 %13 0 0 
                               Uniform f32_4* %31 = OpAccessChain %27 %29 %29 
                                        f32_4 %32 = OpLoad %31 
                                        f32_2 %33 = OpVectorShuffle %32 %32 0 1 
                                        f32_2 %34 = OpFAdd %14 %33 
                                        f32_4 %35 = OpLoad %9 
                                        f32_4 %36 = OpVectorShuffle %35 %34 4 1 5 3 
                                                      OpStore %9 %36 
                                        f32_2 %37 = OpLoad vs_TEXCOORD0 
                                        f32_2 %38 = OpVectorShuffle %37 %37 1 1 
                               Uniform f32_4* %40 = OpAccessChain %27 %29 %39 
                                        f32_4 %41 = OpLoad %40 
                                        f32_2 %42 = OpVectorShuffle %41 %41 0 1 
                                        f32_2 %43 = OpFAdd %38 %42 
                                        f32_4 %44 = OpLoad %9 
                                        f32_4 %45 = OpVectorShuffle %44 %43 0 4 2 5 
                                                      OpStore %9 %45 
                                        f32_4 %46 = OpLoad %9 
                               Uniform f32_4* %48 = OpAccessChain %27 %47 
                                        f32_4 %49 = OpLoad %48 
                                        f32_4 %50 = OpVectorShuffle %49 %49 0 1 0 1 
                                        f32_4 %51 = OpFMul %46 %50 
                               Uniform f32_4* %52 = OpAccessChain %27 %47 
                                        f32_4 %53 = OpLoad %52 
                                        f32_4 %54 = OpVectorShuffle %53 %53 2 3 2 3 
                                        f32_4 %55 = OpFAdd %51 %54 
                                                      OpStore %9 %55 
                          read_only Texture2D %60 = OpLoad %59 
                                      sampler %64 = OpLoad %63 
                   read_only Texture2DSampled %66 = OpSampledImage %60 %64 
                                        f32_4 %67 = OpLoad %9 
                                        f32_2 %68 = OpVectorShuffle %67 %67 0 1 
                                        f32_4 %69 = OpImageSampleImplicitLod %66 %68 
                                        f32_3 %71 = OpVectorShuffle %69 %69 0 1 2 
                                        f32_4 %72 = OpLoad %56 
                                        f32_4 %73 = OpVectorShuffle %72 %71 4 5 6 3 
                                                      OpStore %56 %73 
                          read_only Texture2D %74 = OpLoad %59 
                                      sampler %75 = OpLoad %63 
                   read_only Texture2DSampled %76 = OpSampledImage %74 %75 
                                        f32_4 %77 = OpLoad %9 
                                        f32_2 %78 = OpVectorShuffle %77 %77 2 3 
                                        f32_4 %79 = OpImageSampleImplicitLod %76 %78 
                                        f32_3 %80 = OpVectorShuffle %79 %79 0 1 2 
                                        f32_4 %81 = OpLoad %9 
                                        f32_4 %82 = OpVectorShuffle %81 %80 4 5 6 3 
                                                      OpStore %9 %82 
                                 Private f32* %87 = OpAccessChain %56 %85 
                                          f32 %88 = OpLoad %87 
                                 Uniform f32* %91 = OpAccessChain %27 %89 %29 %85 
                                          f32 %92 = OpLoad %91 
                                          f32 %93 = OpFMul %88 %92 
                                 Private f32* %94 = OpAccessChain %84 %85 
                                                      OpStore %94 %93 
                                 Private f32* %96 = OpAccessChain %56 %95 
                                          f32 %97 = OpLoad %96 
                                 Uniform f32* %98 = OpAccessChain %27 %89 %39 %85 
                                          f32 %99 = OpLoad %98 
                                         f32 %100 = OpFMul %97 %99 
                                Private f32* %101 = OpAccessChain %84 %95 
                                                      OpStore %101 %100 
                                Private f32* %103 = OpAccessChain %56 %102 
                                         f32 %104 = OpLoad %103 
                                Uniform f32* %106 = OpAccessChain %27 %89 %105 %85 
                                         f32 %107 = OpLoad %106 
                                         f32 %108 = OpFMul %104 %107 
                                Private f32* %109 = OpAccessChain %84 %102 
                                                      OpStore %109 %108 
                                Private f32* %110 = OpAccessChain %9 %85 
                                         f32 %111 = OpLoad %110 
                                Uniform f32* %112 = OpAccessChain %27 %89 %29 %95 
                                         f32 %113 = OpLoad %112 
                                         f32 %114 = OpFMul %111 %113 
                                Private f32* %115 = OpAccessChain %56 %85 
                                                      OpStore %115 %114 
                                Private f32* %116 = OpAccessChain %9 %95 
                                         f32 %117 = OpLoad %116 
                                Uniform f32* %118 = OpAccessChain %27 %89 %39 %95 
                                         f32 %119 = OpLoad %118 
                                         f32 %120 = OpFMul %117 %119 
                                Private f32* %121 = OpAccessChain %56 %95 
                                                      OpStore %121 %120 
                                Private f32* %122 = OpAccessChain %9 %102 
                                         f32 %123 = OpLoad %122 
                                Uniform f32* %124 = OpAccessChain %27 %89 %105 %95 
                                         f32 %125 = OpLoad %124 
                                         f32 %126 = OpFMul %123 %125 
                                Private f32* %127 = OpAccessChain %56 %102 
                                                      OpStore %127 %126 
                                       f32_4 %128 = OpLoad %56 
                                       f32_3 %129 = OpVectorShuffle %128 %128 0 1 2 
                                       f32_3 %130 = OpLoad %84 
                                       f32_3 %131 = OpFAdd %129 %130 
                                       f32_4 %132 = OpLoad %9 
                                       f32_4 %133 = OpVectorShuffle %132 %131 4 5 6 3 
                                                      OpStore %9 %133 
                                       f32_2 %134 = OpLoad vs_TEXCOORD0 
                                       f32_2 %135 = OpVectorShuffle %134 %134 0 0 
                              Uniform f32_4* %136 = OpAccessChain %27 %29 %29 
                                       f32_4 %137 = OpLoad %136 
                                       f32_2 %138 = OpVectorShuffle %137 %137 2 3 
                                       f32_2 %139 = OpFAdd %135 %138 
                                       f32_4 %140 = OpLoad %56 
                                       f32_4 %141 = OpVectorShuffle %140 %139 4 1 5 3 
                                                      OpStore %56 %141 
                                       f32_2 %142 = OpLoad vs_TEXCOORD0 
                                       f32_2 %143 = OpVectorShuffle %142 %142 1 1 
                              Uniform f32_4* %144 = OpAccessChain %27 %29 %39 
                                       f32_4 %145 = OpLoad %144 
                                       f32_2 %146 = OpVectorShuffle %145 %145 2 3 
                                       f32_2 %147 = OpFAdd %143 %146 
                                       f32_4 %148 = OpLoad %56 
                                       f32_4 %149 = OpVectorShuffle %148 %147 0 4 2 5 
                                                      OpStore %56 %149 
                                       f32_4 %150 = OpLoad %56 
                              Uniform f32_4* %151 = OpAccessChain %27 %47 
                                       f32_4 %152 = OpLoad %151 
                                       f32_4 %153 = OpVectorShuffle %152 %152 0 1 0 1 
                                       f32_4 %154 = OpFMul %150 %153 
                              Uniform f32_4* %155 = OpAccessChain %27 %47 
                                       f32_4 %156 = OpLoad %155 
                                       f32_4 %157 = OpVectorShuffle %156 %156 2 3 2 3 
                                       f32_4 %158 = OpFAdd %154 %157 
                                                      OpStore %56 %158 
                         read_only Texture2D %159 = OpLoad %59 
                                     sampler %160 = OpLoad %63 
                  read_only Texture2DSampled %161 = OpSampledImage %159 %160 
                                       f32_4 %162 = OpLoad %56 
                                       f32_2 %163 = OpVectorShuffle %162 %162 0 1 
                                       f32_4 %164 = OpImageSampleImplicitLod %161 %163 
                                       f32_3 %165 = OpVectorShuffle %164 %164 0 1 2 
                                                      OpStore %84 %165 
                         read_only Texture2D %166 = OpLoad %59 
                                     sampler %167 = OpLoad %63 
                  read_only Texture2DSampled %168 = OpSampledImage %166 %167 
                                       f32_4 %169 = OpLoad %56 
                                       f32_2 %170 = OpVectorShuffle %169 %169 2 3 
                                       f32_4 %171 = OpImageSampleImplicitLod %168 %170 
                                       f32_3 %172 = OpVectorShuffle %171 %171 0 1 2 
                                       f32_4 %173 = OpLoad %56 
                                       f32_4 %174 = OpVectorShuffle %173 %172 4 5 6 3 
                                                      OpStore %56 %174 
                                Private f32* %176 = OpAccessChain %84 %85 
                                         f32 %177 = OpLoad %176 
                                Uniform f32* %178 = OpAccessChain %27 %89 %29 %102 
                                         f32 %179 = OpLoad %178 
                                         f32 %180 = OpFMul %177 %179 
                                Private f32* %181 = OpAccessChain %175 %85 
                                                      OpStore %181 %180 
                                Private f32* %182 = OpAccessChain %84 %95 
                                         f32 %183 = OpLoad %182 
                                Uniform f32* %184 = OpAccessChain %27 %89 %39 %102 
                                         f32 %185 = OpLoad %184 
                                         f32 %186 = OpFMul %183 %185 
                                Private f32* %187 = OpAccessChain %175 %95 
                                                      OpStore %187 %186 
                                Private f32* %188 = OpAccessChain %84 %102 
                                         f32 %189 = OpLoad %188 
                                Uniform f32* %190 = OpAccessChain %27 %89 %105 %102 
                                         f32 %191 = OpLoad %190 
                                         f32 %192 = OpFMul %189 %191 
                                Private f32* %193 = OpAccessChain %175 %102 
                                                      OpStore %193 %192 
                                       f32_4 %194 = OpLoad %9 
                                       f32_3 %195 = OpVectorShuffle %194 %194 0 1 2 
                                       f32_3 %196 = OpLoad %175 
                                       f32_3 %197 = OpFAdd %195 %196 
                                       f32_4 %198 = OpLoad %9 
                                       f32_4 %199 = OpVectorShuffle %198 %197 4 5 6 3 
                                                      OpStore %9 %199 
                                Private f32* %200 = OpAccessChain %56 %85 
                                         f32 %201 = OpLoad %200 
                                Uniform f32* %203 = OpAccessChain %27 %89 %29 %202 
                                         f32 %204 = OpLoad %203 
                                         f32 %205 = OpFMul %201 %204 
                                Private f32* %206 = OpAccessChain %84 %85 
                                                      OpStore %206 %205 
                                Private f32* %207 = OpAccessChain %56 %95 
                                         f32 %208 = OpLoad %207 
                                Uniform f32* %209 = OpAccessChain %27 %89 %39 %202 
                                         f32 %210 = OpLoad %209 
                                         f32 %211 = OpFMul %208 %210 
                                Private f32* %212 = OpAccessChain %84 %95 
                                                      OpStore %212 %211 
                                Private f32* %213 = OpAccessChain %56 %102 
                                         f32 %214 = OpLoad %213 
                                Uniform f32* %215 = OpAccessChain %27 %89 %105 %202 
                                         f32 %216 = OpLoad %215 
                                         f32 %217 = OpFMul %214 %216 
                                Private f32* %218 = OpAccessChain %84 %102 
                                                      OpStore %218 %217 
                                       f32_4 %219 = OpLoad %9 
                                       f32_3 %220 = OpVectorShuffle %219 %219 0 1 2 
                                       f32_3 %221 = OpLoad %84 
                                       f32_3 %222 = OpFAdd %220 %221 
                                       f32_4 %223 = OpLoad %9 
                                       f32_4 %224 = OpVectorShuffle %223 %222 4 5 6 3 
                                                      OpStore %9 %224 
                                       f32_2 %225 = OpLoad vs_TEXCOORD0 
                                       f32_2 %226 = OpVectorShuffle %225 %225 0 0 
                              Uniform f32_4* %227 = OpAccessChain %27 %39 %29 
                                       f32_4 %228 = OpLoad %227 
                                       f32_2 %229 = OpVectorShuffle %228 %228 0 1 
                                       f32_2 %230 = OpFAdd %226 %229 
                                       f32_4 %231 = OpLoad %56 
                                       f32_4 %232 = OpVectorShuffle %231 %230 4 1 5 3 
                                                      OpStore %56 %232 
                                       f32_2 %233 = OpLoad vs_TEXCOORD0 
                                       f32_2 %234 = OpVectorShuffle %233 %233 1 1 
                              Uniform f32_4* %235 = OpAccessChain %27 %39 %39 
                                       f32_4 %236 = OpLoad %235 
                                       f32_2 %237 = OpVectorShuffle %236 %236 0 1 
                                       f32_2 %238 = OpFAdd %234 %237 
                                       f32_4 %239 = OpLoad %56 
                                       f32_4 %240 = OpVectorShuffle %239 %238 0 4 2 5 
                                                      OpStore %56 %240 
                                       f32_4 %241 = OpLoad %56 
                              Uniform f32_4* %242 = OpAccessChain %27 %47 
                                       f32_4 %243 = OpLoad %242 
                                       f32_4 %244 = OpVectorShuffle %243 %243 0 1 0 1 
                                       f32_4 %245 = OpFMul %241 %244 
                              Uniform f32_4* %246 = OpAccessChain %27 %47 
                                       f32_4 %247 = OpLoad %246 
                                       f32_4 %248 = OpVectorShuffle %247 %247 2 3 2 3 
                                       f32_4 %249 = OpFAdd %245 %248 
                                                      OpStore %56 %249 
                         read_only Texture2D %250 = OpLoad %59 
                                     sampler %251 = OpLoad %63 
                  read_only Texture2DSampled %252 = OpSampledImage %250 %251 
                                       f32_4 %253 = OpLoad %56 
                                       f32_2 %254 = OpVectorShuffle %253 %253 0 1 
                                       f32_4 %255 = OpImageSampleImplicitLod %252 %254 
                                       f32_3 %256 = OpVectorShuffle %255 %255 0 1 2 
                                                      OpStore %84 %256 
                         read_only Texture2D %257 = OpLoad %59 
                                     sampler %258 = OpLoad %63 
                  read_only Texture2DSampled %259 = OpSampledImage %257 %258 
                                       f32_4 %260 = OpLoad %56 
                                       f32_2 %261 = OpVectorShuffle %260 %260 2 3 
                                       f32_4 %262 = OpImageSampleImplicitLod %259 %261 
                                       f32_3 %263 = OpVectorShuffle %262 %262 0 1 2 
                                       f32_4 %264 = OpLoad %56 
                                       f32_4 %265 = OpVectorShuffle %264 %263 4 5 6 3 
                                                      OpStore %56 %265 
                                Private f32* %266 = OpAccessChain %84 %85 
                                         f32 %267 = OpLoad %266 
                                Uniform f32* %269 = OpAccessChain %27 %268 %29 %85 
                                         f32 %270 = OpLoad %269 
                                         f32 %271 = OpFMul %267 %270 
                                Private f32* %272 = OpAccessChain %175 %85 
                                                      OpStore %272 %271 
                                Private f32* %273 = OpAccessChain %84 %95 
                                         f32 %274 = OpLoad %273 
                                Uniform f32* %275 = OpAccessChain %27 %268 %39 %85 
                                         f32 %276 = OpLoad %275 
                                         f32 %277 = OpFMul %274 %276 
                                Private f32* %278 = OpAccessChain %175 %95 
                                                      OpStore %278 %277 
                                Private f32* %279 = OpAccessChain %84 %102 
                                         f32 %280 = OpLoad %279 
                                Uniform f32* %281 = OpAccessChain %27 %268 %105 %85 
                                         f32 %282 = OpLoad %281 
                                         f32 %283 = OpFMul %280 %282 
                                Private f32* %284 = OpAccessChain %175 %102 
                                                      OpStore %284 %283 
                                       f32_4 %285 = OpLoad %9 
                                       f32_3 %286 = OpVectorShuffle %285 %285 0 1 2 
                                       f32_3 %287 = OpLoad %175 
                                       f32_3 %288 = OpFAdd %286 %287 
                                       f32_4 %289 = OpLoad %9 
                                       f32_4 %290 = OpVectorShuffle %289 %288 4 5 6 3 
                                                      OpStore %9 %290 
                                Private f32* %291 = OpAccessChain %56 %85 
                                         f32 %292 = OpLoad %291 
                                Uniform f32* %293 = OpAccessChain %27 %268 %29 %95 
                                         f32 %294 = OpLoad %293 
                                         f32 %295 = OpFMul %292 %294 
                                Private f32* %296 = OpAccessChain %84 %85 
                                                      OpStore %296 %295 
                                Private f32* %297 = OpAccessChain %56 %95 
                                         f32 %298 = OpLoad %297 
                                Uniform f32* %299 = OpAccessChain %27 %268 %39 %95 
                                         f32 %300 = OpLoad %299 
                                         f32 %301 = OpFMul %298 %300 
                                Private f32* %302 = OpAccessChain %84 %95 
                                                      OpStore %302 %301 
                                Private f32* %303 = OpAccessChain %56 %102 
                                         f32 %304 = OpLoad %303 
                                Uniform f32* %305 = OpAccessChain %27 %268 %105 %95 
                                         f32 %306 = OpLoad %305 
                                         f32 %307 = OpFMul %304 %306 
                                Private f32* %308 = OpAccessChain %84 %102 
                                                      OpStore %308 %307 
                                       f32_4 %309 = OpLoad %9 
                                       f32_3 %310 = OpVectorShuffle %309 %309 0 1 2 
                                       f32_3 %311 = OpLoad %84 
                                       f32_3 %312 = OpFAdd %310 %311 
                                       f32_4 %313 = OpLoad %9 
                                       f32_4 %314 = OpVectorShuffle %313 %312 4 5 6 3 
                                                      OpStore %9 %314 
                                       f32_2 %315 = OpLoad vs_TEXCOORD0 
                                       f32_2 %316 = OpVectorShuffle %315 %315 0 0 
                              Uniform f32_4* %317 = OpAccessChain %27 %39 %29 
                                       f32_4 %318 = OpLoad %317 
                                       f32_2 %319 = OpVectorShuffle %318 %318 2 3 
                                       f32_2 %320 = OpFAdd %316 %319 
                                       f32_4 %321 = OpLoad %56 
                                       f32_4 %322 = OpVectorShuffle %321 %320 4 1 5 3 
                                                      OpStore %56 %322 
                                       f32_2 %323 = OpLoad vs_TEXCOORD0 
                                       f32_2 %324 = OpVectorShuffle %323 %323 1 1 
                              Uniform f32_4* %325 = OpAccessChain %27 %39 %39 
                                       f32_4 %326 = OpLoad %325 
                                       f32_2 %327 = OpVectorShuffle %326 %326 2 3 
                                       f32_2 %328 = OpFAdd %324 %327 
                                       f32_4 %329 = OpLoad %56 
                                       f32_4 %330 = OpVectorShuffle %329 %328 0 4 2 5 
                                                      OpStore %56 %330 
                                       f32_4 %331 = OpLoad %56 
                              Uniform f32_4* %332 = OpAccessChain %27 %47 
                                       f32_4 %333 = OpLoad %332 
                                       f32_4 %334 = OpVectorShuffle %333 %333 0 1 0 1 
                                       f32_4 %335 = OpFMul %331 %334 
                              Uniform f32_4* %336 = OpAccessChain %27 %47 
                                       f32_4 %337 = OpLoad %336 
                                       f32_4 %338 = OpVectorShuffle %337 %337 2 3 2 3 
                                       f32_4 %339 = OpFAdd %335 %338 
                                                      OpStore %56 %339 
                         read_only Texture2D %340 = OpLoad %59 
                                     sampler %341 = OpLoad %63 
                  read_only Texture2DSampled %342 = OpSampledImage %340 %341 
                                       f32_4 %343 = OpLoad %56 
                                       f32_2 %344 = OpVectorShuffle %343 %343 0 1 
                                       f32_4 %345 = OpImageSampleImplicitLod %342 %344 
                                       f32_3 %346 = OpVectorShuffle %345 %345 0 1 2 
                                                      OpStore %84 %346 
                         read_only Texture2D %347 = OpLoad %59 
                                     sampler %348 = OpLoad %63 
                  read_only Texture2DSampled %349 = OpSampledImage %347 %348 
                                       f32_4 %350 = OpLoad %56 
                                       f32_2 %351 = OpVectorShuffle %350 %350 2 3 
                                       f32_4 %352 = OpImageSampleImplicitLod %349 %351 
                                       f32_3 %353 = OpVectorShuffle %352 %352 0 1 2 
                                       f32_4 %354 = OpLoad %56 
                                       f32_4 %355 = OpVectorShuffle %354 %353 4 5 6 3 
                                                      OpStore %56 %355 
                                Private f32* %356 = OpAccessChain %84 %85 
                                         f32 %357 = OpLoad %356 
                                Uniform f32* %358 = OpAccessChain %27 %268 %29 %102 
                                         f32 %359 = OpLoad %358 
                                         f32 %360 = OpFMul %357 %359 
                                Private f32* %361 = OpAccessChain %175 %85 
                                                      OpStore %361 %360 
                                Private f32* %362 = OpAccessChain %84 %95 
                                         f32 %363 = OpLoad %362 
                                Uniform f32* %364 = OpAccessChain %27 %268 %39 %102 
                                         f32 %365 = OpLoad %364 
                                         f32 %366 = OpFMul %363 %365 
                                Private f32* %367 = OpAccessChain %175 %95 
                                                      OpStore %367 %366 
                                Private f32* %368 = OpAccessChain %84 %102 
                                         f32 %369 = OpLoad %368 
                                Uniform f32* %370 = OpAccessChain %27 %268 %105 %102 
                                         f32 %371 = OpLoad %370 
                                         f32 %372 = OpFMul %369 %371 
                                Private f32* %373 = OpAccessChain %175 %102 
                                                      OpStore %373 %372 
                                       f32_4 %374 = OpLoad %9 
                                       f32_3 %375 = OpVectorShuffle %374 %374 0 1 2 
                                       f32_3 %376 = OpLoad %175 
                                       f32_3 %377 = OpFAdd %375 %376 
                                       f32_4 %378 = OpLoad %9 
                                       f32_4 %379 = OpVectorShuffle %378 %377 4 5 6 3 
                                                      OpStore %9 %379 
                                Private f32* %380 = OpAccessChain %56 %85 
                                         f32 %381 = OpLoad %380 
                                Uniform f32* %382 = OpAccessChain %27 %268 %29 %202 
                                         f32 %383 = OpLoad %382 
                                         f32 %384 = OpFMul %381 %383 
                                Private f32* %385 = OpAccessChain %84 %85 
                                                      OpStore %385 %384 
                                Private f32* %386 = OpAccessChain %56 %95 
                                         f32 %387 = OpLoad %386 
                                Uniform f32* %388 = OpAccessChain %27 %268 %39 %202 
                                         f32 %389 = OpLoad %388 
                                         f32 %390 = OpFMul %387 %389 
                                Private f32* %391 = OpAccessChain %84 %95 
                                                      OpStore %391 %390 
                                Private f32* %392 = OpAccessChain %56 %102 
                                         f32 %393 = OpLoad %392 
                                Uniform f32* %394 = OpAccessChain %27 %268 %105 %202 
                                         f32 %395 = OpLoad %394 
                                         f32 %396 = OpFMul %393 %395 
                                Private f32* %397 = OpAccessChain %84 %102 
                                                      OpStore %397 %396 
                                       f32_4 %398 = OpLoad %9 
                                       f32_3 %399 = OpVectorShuffle %398 %398 0 1 2 
                                       f32_3 %400 = OpLoad %84 
                                       f32_3 %401 = OpFAdd %399 %400 
                                       f32_4 %402 = OpLoad %9 
                                       f32_4 %403 = OpVectorShuffle %402 %401 4 5 6 3 
                                                      OpStore %9 %403 
                                       f32_2 %404 = OpLoad vs_TEXCOORD0 
                                       f32_2 %405 = OpVectorShuffle %404 %404 0 0 
                              Uniform f32_4* %406 = OpAccessChain %27 %105 %29 
                                       f32_4 %407 = OpLoad %406 
                                       f32_2 %408 = OpVectorShuffle %407 %407 0 1 
                                       f32_2 %409 = OpFAdd %405 %408 
                                       f32_4 %410 = OpLoad %56 
                                       f32_4 %411 = OpVectorShuffle %410 %409 4 1 5 3 
                                                      OpStore %56 %411 
                                       f32_2 %412 = OpLoad vs_TEXCOORD0 
                                       f32_2 %413 = OpVectorShuffle %412 %412 1 1 
                              Uniform f32_4* %414 = OpAccessChain %27 %105 %39 
                                       f32_4 %415 = OpLoad %414 
                                       f32_2 %416 = OpVectorShuffle %415 %415 0 1 
                                       f32_2 %417 = OpFAdd %413 %416 
                                       f32_4 %418 = OpLoad %56 
                                       f32_4 %419 = OpVectorShuffle %418 %417 0 4 2 5 
                                                      OpStore %56 %419 
                                       f32_4 %420 = OpLoad %56 
                              Uniform f32_4* %421 = OpAccessChain %27 %47 
                                       f32_4 %422 = OpLoad %421 
                                       f32_4 %423 = OpVectorShuffle %422 %422 0 1 0 1 
                                       f32_4 %424 = OpFMul %420 %423 
                              Uniform f32_4* %425 = OpAccessChain %27 %47 
                                       f32_4 %426 = OpLoad %425 
                                       f32_4 %427 = OpVectorShuffle %426 %426 2 3 2 3 
                                       f32_4 %428 = OpFAdd %424 %427 
                                                      OpStore %56 %428 
                         read_only Texture2D %429 = OpLoad %59 
                                     sampler %430 = OpLoad %63 
                  read_only Texture2DSampled %431 = OpSampledImage %429 %430 
                                       f32_4 %432 = OpLoad %56 
                                       f32_2 %433 = OpVectorShuffle %432 %432 0 1 
                                       f32_4 %434 = OpImageSampleImplicitLod %431 %433 
                                       f32_3 %435 = OpVectorShuffle %434 %434 0 1 2 
                                                      OpStore %84 %435 
                         read_only Texture2D %436 = OpLoad %59 
                                     sampler %437 = OpLoad %63 
                  read_only Texture2DSampled %438 = OpSampledImage %436 %437 
                                       f32_4 %439 = OpLoad %56 
                                       f32_2 %440 = OpVectorShuffle %439 %439 2 3 
                                       f32_4 %441 = OpImageSampleImplicitLod %438 %440 
                                       f32_3 %442 = OpVectorShuffle %441 %441 0 1 2 
                                       f32_4 %443 = OpLoad %56 
                                       f32_4 %444 = OpVectorShuffle %443 %442 4 5 6 3 
                                                      OpStore %56 %444 
                                Private f32* %445 = OpAccessChain %84 %85 
                                         f32 %446 = OpLoad %445 
                                Uniform f32* %448 = OpAccessChain %27 %447 %29 %85 
                                         f32 %449 = OpLoad %448 
                                         f32 %450 = OpFMul %446 %449 
                                Private f32* %451 = OpAccessChain %175 %85 
                                                      OpStore %451 %450 
                                Private f32* %452 = OpAccessChain %84 %95 
                                         f32 %453 = OpLoad %452 
                                Uniform f32* %454 = OpAccessChain %27 %447 %39 %85 
                                         f32 %455 = OpLoad %454 
                                         f32 %456 = OpFMul %453 %455 
                                Private f32* %457 = OpAccessChain %175 %95 
                                                      OpStore %457 %456 
                                Private f32* %458 = OpAccessChain %84 %102 
                                         f32 %459 = OpLoad %458 
                                Uniform f32* %460 = OpAccessChain %27 %447 %105 %85 
                                         f32 %461 = OpLoad %460 
                                         f32 %462 = OpFMul %459 %461 
                                Private f32* %463 = OpAccessChain %175 %102 
                                                      OpStore %463 %462 
                                       f32_4 %464 = OpLoad %9 
                                       f32_3 %465 = OpVectorShuffle %464 %464 0 1 2 
                                       f32_3 %466 = OpLoad %175 
                                       f32_3 %467 = OpFAdd %465 %466 
                                       f32_4 %468 = OpLoad %9 
                                       f32_4 %469 = OpVectorShuffle %468 %467 4 5 6 3 
                                                      OpStore %9 %469 
                                Private f32* %470 = OpAccessChain %56 %85 
                                         f32 %471 = OpLoad %470 
                                Uniform f32* %472 = OpAccessChain %27 %447 %29 %95 
                                         f32 %473 = OpLoad %472 
                                         f32 %474 = OpFMul %471 %473 
                                Private f32* %475 = OpAccessChain %84 %85 
                                                      OpStore %475 %474 
                                Private f32* %476 = OpAccessChain %56 %95 
                                         f32 %477 = OpLoad %476 
                                Uniform f32* %478 = OpAccessChain %27 %447 %39 %95 
                                         f32 %479 = OpLoad %478 
                                         f32 %480 = OpFMul %477 %479 
                                Private f32* %481 = OpAccessChain %84 %95 
                                                      OpStore %481 %480 
                                Private f32* %482 = OpAccessChain %56 %102 
                                         f32 %483 = OpLoad %482 
                                Uniform f32* %484 = OpAccessChain %27 %447 %105 %95 
                                         f32 %485 = OpLoad %484 
                                         f32 %486 = OpFMul %483 %485 
                                Private f32* %487 = OpAccessChain %84 %102 
                                                      OpStore %487 %486 
                                       f32_4 %488 = OpLoad %9 
                                       f32_3 %489 = OpVectorShuffle %488 %488 0 1 2 
                                       f32_3 %490 = OpLoad %84 
                                       f32_3 %491 = OpFAdd %489 %490 
                                       f32_4 %492 = OpLoad %9 
                                       f32_4 %493 = OpVectorShuffle %492 %491 4 5 6 3 
                                                      OpStore %9 %493 
                                       f32_2 %494 = OpLoad vs_TEXCOORD0 
                                       f32_2 %495 = OpVectorShuffle %494 %494 0 0 
                              Uniform f32_4* %496 = OpAccessChain %27 %105 %29 
                                       f32_4 %497 = OpLoad %496 
                                       f32_2 %498 = OpVectorShuffle %497 %497 2 3 
                                       f32_2 %499 = OpFAdd %495 %498 
                                       f32_4 %500 = OpLoad %56 
                                       f32_4 %501 = OpVectorShuffle %500 %499 4 1 5 3 
                                                      OpStore %56 %501 
                                       f32_2 %502 = OpLoad vs_TEXCOORD0 
                                       f32_2 %503 = OpVectorShuffle %502 %502 1 1 
                              Uniform f32_4* %504 = OpAccessChain %27 %105 %39 
                                       f32_4 %505 = OpLoad %504 
                                       f32_2 %506 = OpVectorShuffle %505 %505 2 3 
                                       f32_2 %507 = OpFAdd %503 %506 
                                       f32_4 %508 = OpLoad %56 
                                       f32_4 %509 = OpVectorShuffle %508 %507 0 4 2 5 
                                                      OpStore %56 %509 
                                       f32_4 %510 = OpLoad %56 
                              Uniform f32_4* %511 = OpAccessChain %27 %47 
                                       f32_4 %512 = OpLoad %511 
                                       f32_4 %513 = OpVectorShuffle %512 %512 0 1 0 1 
                                       f32_4 %514 = OpFMul %510 %513 
                              Uniform f32_4* %515 = OpAccessChain %27 %47 
                                       f32_4 %516 = OpLoad %515 
                                       f32_4 %517 = OpVectorShuffle %516 %516 2 3 2 3 
                                       f32_4 %518 = OpFAdd %514 %517 
                                                      OpStore %56 %518 
                         read_only Texture2D %519 = OpLoad %59 
                                     sampler %520 = OpLoad %63 
                  read_only Texture2DSampled %521 = OpSampledImage %519 %520 
                                       f32_4 %522 = OpLoad %56 
                                       f32_2 %523 = OpVectorShuffle %522 %522 0 1 
                                       f32_4 %524 = OpImageSampleImplicitLod %521 %523 
                                       f32_3 %525 = OpVectorShuffle %524 %524 0 1 2 
                                                      OpStore %84 %525 
                         read_only Texture2D %526 = OpLoad %59 
                                     sampler %527 = OpLoad %63 
                  read_only Texture2DSampled %528 = OpSampledImage %526 %527 
                                       f32_4 %529 = OpLoad %56 
                                       f32_2 %530 = OpVectorShuffle %529 %529 2 3 
                                       f32_4 %531 = OpImageSampleImplicitLod %528 %530 
                                       f32_3 %532 = OpVectorShuffle %531 %531 0 1 2 
                                       f32_4 %533 = OpLoad %56 
                                       f32_4 %534 = OpVectorShuffle %533 %532 4 5 6 3 
                                                      OpStore %56 %534 
                                Private f32* %535 = OpAccessChain %84 %85 
                                         f32 %536 = OpLoad %535 
                                Uniform f32* %537 = OpAccessChain %27 %447 %29 %102 
                                         f32 %538 = OpLoad %537 
                                         f32 %539 = OpFMul %536 %538 
                                Private f32* %540 = OpAccessChain %175 %85 
                                                      OpStore %540 %539 
                                Private f32* %541 = OpAccessChain %84 %95 
                                         f32 %542 = OpLoad %541 
                                Uniform f32* %543 = OpAccessChain %27 %447 %39 %102 
                                         f32 %544 = OpLoad %543 
                                         f32 %545 = OpFMul %542 %544 
                                Private f32* %546 = OpAccessChain %175 %95 
                                                      OpStore %546 %545 
                                Private f32* %547 = OpAccessChain %84 %102 
                                         f32 %548 = OpLoad %547 
                                Uniform f32* %549 = OpAccessChain %27 %447 %105 %102 
                                         f32 %550 = OpLoad %549 
                                         f32 %551 = OpFMul %548 %550 
                                Private f32* %552 = OpAccessChain %175 %102 
                                                      OpStore %552 %551 
                                       f32_4 %553 = OpLoad %9 
                                       f32_3 %554 = OpVectorShuffle %553 %553 0 1 2 
                                       f32_3 %555 = OpLoad %175 
                                       f32_3 %556 = OpFAdd %554 %555 
                                       f32_4 %557 = OpLoad %9 
                                       f32_4 %558 = OpVectorShuffle %557 %556 4 5 6 3 
                                                      OpStore %9 %558 
                                Private f32* %559 = OpAccessChain %56 %85 
                                         f32 %560 = OpLoad %559 
                                Uniform f32* %561 = OpAccessChain %27 %447 %29 %202 
                                         f32 %562 = OpLoad %561 
                                         f32 %563 = OpFMul %560 %562 
                                Private f32* %564 = OpAccessChain %84 %85 
                                                      OpStore %564 %563 
                                Private f32* %565 = OpAccessChain %56 %95 
                                         f32 %566 = OpLoad %565 
                                Uniform f32* %567 = OpAccessChain %27 %447 %39 %202 
                                         f32 %568 = OpLoad %567 
                                         f32 %569 = OpFMul %566 %568 
                                Private f32* %570 = OpAccessChain %84 %95 
                                                      OpStore %570 %569 
                                Private f32* %571 = OpAccessChain %56 %102 
                                         f32 %572 = OpLoad %571 
                                Uniform f32* %573 = OpAccessChain %27 %447 %105 %202 
                                         f32 %574 = OpLoad %573 
                                         f32 %575 = OpFMul %572 %574 
                                Private f32* %576 = OpAccessChain %84 %102 
                                                      OpStore %576 %575 
                                       f32_4 %577 = OpLoad %9 
                                       f32_3 %578 = OpVectorShuffle %577 %577 0 1 2 
                                       f32_3 %579 = OpLoad %84 
                                       f32_3 %580 = OpFAdd %578 %579 
                                       f32_4 %581 = OpLoad %9 
                                       f32_4 %582 = OpVectorShuffle %581 %580 4 5 6 3 
                                                      OpStore %9 %582 
                                       f32_2 %583 = OpLoad vs_TEXCOORD0 
                                       f32_2 %584 = OpVectorShuffle %583 %583 0 0 
                              Uniform f32_4* %586 = OpAccessChain %27 %585 %29 
                                       f32_4 %587 = OpLoad %586 
                                       f32_2 %588 = OpVectorShuffle %587 %587 0 1 
                                       f32_2 %589 = OpFAdd %584 %588 
                                       f32_4 %590 = OpLoad %56 
                                       f32_4 %591 = OpVectorShuffle %590 %589 4 1 5 3 
                                                      OpStore %56 %591 
                                       f32_2 %592 = OpLoad vs_TEXCOORD0 
                                       f32_2 %593 = OpVectorShuffle %592 %592 1 1 
                              Uniform f32_4* %594 = OpAccessChain %27 %585 %39 
                                       f32_4 %595 = OpLoad %594 
                                       f32_2 %596 = OpVectorShuffle %595 %595 0 1 
                                       f32_2 %597 = OpFAdd %593 %596 
                                       f32_4 %598 = OpLoad %56 
                                       f32_4 %599 = OpVectorShuffle %598 %597 0 4 2 5 
                                                      OpStore %56 %599 
                                       f32_4 %600 = OpLoad %56 
                              Uniform f32_4* %601 = OpAccessChain %27 %47 
                                       f32_4 %602 = OpLoad %601 
                                       f32_4 %603 = OpVectorShuffle %602 %602 0 1 0 1 
                                       f32_4 %604 = OpFMul %600 %603 
                              Uniform f32_4* %605 = OpAccessChain %27 %47 
                                       f32_4 %606 = OpLoad %605 
                                       f32_4 %607 = OpVectorShuffle %606 %606 2 3 2 3 
                                       f32_4 %608 = OpFAdd %604 %607 
                                                      OpStore %56 %608 
                         read_only Texture2D %609 = OpLoad %59 
                                     sampler %610 = OpLoad %63 
                  read_only Texture2DSampled %611 = OpSampledImage %609 %610 
                                       f32_4 %612 = OpLoad %56 
                                       f32_2 %613 = OpVectorShuffle %612 %612 0 1 
                                       f32_4 %614 = OpImageSampleImplicitLod %611 %613 
                                       f32_3 %615 = OpVectorShuffle %614 %614 0 1 2 
                                                      OpStore %84 %615 
                         read_only Texture2D %616 = OpLoad %59 
                                     sampler %617 = OpLoad %63 
                  read_only Texture2DSampled %618 = OpSampledImage %616 %617 
                                       f32_4 %619 = OpLoad %56 
                                       f32_2 %620 = OpVectorShuffle %619 %619 2 3 
                                       f32_4 %621 = OpImageSampleImplicitLod %618 %620 
                                       f32_3 %622 = OpVectorShuffle %621 %621 0 1 2 
                                       f32_4 %623 = OpLoad %56 
                                       f32_4 %624 = OpVectorShuffle %623 %622 4 5 6 3 
                                                      OpStore %56 %624 
                                Private f32* %625 = OpAccessChain %84 %85 
                                         f32 %626 = OpLoad %625 
                                Uniform f32* %628 = OpAccessChain %27 %627 %29 %85 
                                         f32 %629 = OpLoad %628 
                                         f32 %630 = OpFMul %626 %629 
                                Private f32* %631 = OpAccessChain %175 %85 
                                                      OpStore %631 %630 
                                Private f32* %632 = OpAccessChain %84 %95 
                                         f32 %633 = OpLoad %632 
                                Uniform f32* %634 = OpAccessChain %27 %627 %39 %85 
                                         f32 %635 = OpLoad %634 
                                         f32 %636 = OpFMul %633 %635 
                                Private f32* %637 = OpAccessChain %175 %95 
                                                      OpStore %637 %636 
                                Private f32* %638 = OpAccessChain %84 %102 
                                         f32 %639 = OpLoad %638 
                                Uniform f32* %640 = OpAccessChain %27 %627 %105 %85 
                                         f32 %641 = OpLoad %640 
                                         f32 %642 = OpFMul %639 %641 
                                Private f32* %643 = OpAccessChain %175 %102 
                                                      OpStore %643 %642 
                                       f32_4 %644 = OpLoad %9 
                                       f32_3 %645 = OpVectorShuffle %644 %644 0 1 2 
                                       f32_3 %646 = OpLoad %175 
                                       f32_3 %647 = OpFAdd %645 %646 
                                       f32_4 %648 = OpLoad %9 
                                       f32_4 %649 = OpVectorShuffle %648 %647 4 5 6 3 
                                                      OpStore %9 %649 
                                Private f32* %650 = OpAccessChain %56 %85 
                                         f32 %651 = OpLoad %650 
                                Uniform f32* %652 = OpAccessChain %27 %627 %29 %95 
                                         f32 %653 = OpLoad %652 
                                         f32 %654 = OpFMul %651 %653 
                                Private f32* %655 = OpAccessChain %84 %85 
                                                      OpStore %655 %654 
                                Private f32* %656 = OpAccessChain %56 %95 
                                         f32 %657 = OpLoad %656 
                                Uniform f32* %658 = OpAccessChain %27 %627 %39 %95 
                                         f32 %659 = OpLoad %658 
                                         f32 %660 = OpFMul %657 %659 
                                Private f32* %661 = OpAccessChain %84 %95 
                                                      OpStore %661 %660 
                                Private f32* %662 = OpAccessChain %56 %102 
                                         f32 %663 = OpLoad %662 
                                Uniform f32* %664 = OpAccessChain %27 %627 %105 %95 
                                         f32 %665 = OpLoad %664 
                                         f32 %666 = OpFMul %663 %665 
                                Private f32* %667 = OpAccessChain %84 %102 
                                                      OpStore %667 %666 
                                       f32_4 %668 = OpLoad %9 
                                       f32_3 %669 = OpVectorShuffle %668 %668 0 1 2 
                                       f32_3 %670 = OpLoad %84 
                                       f32_3 %671 = OpFAdd %669 %670 
                                       f32_4 %672 = OpLoad %9 
                                       f32_4 %673 = OpVectorShuffle %672 %671 4 5 6 3 
                                                      OpStore %9 %673 
                                       f32_2 %674 = OpLoad vs_TEXCOORD0 
                                       f32_2 %675 = OpVectorShuffle %674 %674 0 0 
                              Uniform f32_4* %676 = OpAccessChain %27 %585 %29 
                                       f32_4 %677 = OpLoad %676 
                                       f32_2 %678 = OpVectorShuffle %677 %677 2 3 
                                       f32_2 %679 = OpFAdd %675 %678 
                                       f32_4 %680 = OpLoad %56 
                                       f32_4 %681 = OpVectorShuffle %680 %679 4 1 5 3 
                                                      OpStore %56 %681 
                                       f32_2 %682 = OpLoad vs_TEXCOORD0 
                                       f32_2 %683 = OpVectorShuffle %682 %682 1 1 
                              Uniform f32_4* %684 = OpAccessChain %27 %585 %39 
                                       f32_4 %685 = OpLoad %684 
                                       f32_2 %686 = OpVectorShuffle %685 %685 2 3 
                                       f32_2 %687 = OpFAdd %683 %686 
                                       f32_4 %688 = OpLoad %56 
                                       f32_4 %689 = OpVectorShuffle %688 %687 0 4 2 5 
                                                      OpStore %56 %689 
                                       f32_4 %690 = OpLoad %56 
                              Uniform f32_4* %691 = OpAccessChain %27 %47 
                                       f32_4 %692 = OpLoad %691 
                                       f32_4 %693 = OpVectorShuffle %692 %692 0 1 0 1 
                                       f32_4 %694 = OpFMul %690 %693 
                              Uniform f32_4* %695 = OpAccessChain %27 %47 
                                       f32_4 %696 = OpLoad %695 
                                       f32_4 %697 = OpVectorShuffle %696 %696 2 3 2 3 
                                       f32_4 %698 = OpFAdd %694 %697 
                                                      OpStore %56 %698 
                         read_only Texture2D %699 = OpLoad %59 
                                     sampler %700 = OpLoad %63 
                  read_only Texture2DSampled %701 = OpSampledImage %699 %700 
                                       f32_4 %702 = OpLoad %56 
                                       f32_2 %703 = OpVectorShuffle %702 %702 0 1 
                                       f32_4 %704 = OpImageSampleImplicitLod %701 %703 
                                       f32_3 %705 = OpVectorShuffle %704 %704 0 1 2 
                                                      OpStore %84 %705 
                         read_only Texture2D %706 = OpLoad %59 
                                     sampler %707 = OpLoad %63 
                  read_only Texture2DSampled %708 = OpSampledImage %706 %707 
                                       f32_4 %709 = OpLoad %56 
                                       f32_2 %710 = OpVectorShuffle %709 %709 2 3 
                                       f32_4 %711 = OpImageSampleImplicitLod %708 %710 
                                       f32_3 %712 = OpVectorShuffle %711 %711 0 1 2 
                                       f32_4 %713 = OpLoad %56 
                                       f32_4 %714 = OpVectorShuffle %713 %712 4 5 6 3 
                                                      OpStore %56 %714 
                                Private f32* %715 = OpAccessChain %84 %85 
                                         f32 %716 = OpLoad %715 
                                Uniform f32* %717 = OpAccessChain %27 %627 %29 %102 
                                         f32 %718 = OpLoad %717 
                                         f32 %719 = OpFMul %716 %718 
                                Private f32* %720 = OpAccessChain %175 %85 
                                                      OpStore %720 %719 
                                Private f32* %721 = OpAccessChain %84 %95 
                                         f32 %722 = OpLoad %721 
                                Uniform f32* %723 = OpAccessChain %27 %627 %39 %102 
                                         f32 %724 = OpLoad %723 
                                         f32 %725 = OpFMul %722 %724 
                                Private f32* %726 = OpAccessChain %175 %95 
                                                      OpStore %726 %725 
                                Private f32* %727 = OpAccessChain %84 %102 
                                         f32 %728 = OpLoad %727 
                                Uniform f32* %729 = OpAccessChain %27 %627 %105 %102 
                                         f32 %730 = OpLoad %729 
                                         f32 %731 = OpFMul %728 %730 
                                Private f32* %732 = OpAccessChain %175 %102 
                                                      OpStore %732 %731 
                                       f32_4 %733 = OpLoad %9 
                                       f32_3 %734 = OpVectorShuffle %733 %733 0 1 2 
                                       f32_3 %735 = OpLoad %175 
                                       f32_3 %736 = OpFAdd %734 %735 
                                       f32_4 %737 = OpLoad %9 
                                       f32_4 %738 = OpVectorShuffle %737 %736 4 5 6 3 
                                                      OpStore %9 %738 
                                Private f32* %739 = OpAccessChain %56 %85 
                                         f32 %740 = OpLoad %739 
                                Uniform f32* %741 = OpAccessChain %27 %627 %29 %202 
                                         f32 %742 = OpLoad %741 
                                         f32 %743 = OpFMul %740 %742 
                                Private f32* %744 = OpAccessChain %84 %85 
                                                      OpStore %744 %743 
                                Private f32* %745 = OpAccessChain %56 %95 
                                         f32 %746 = OpLoad %745 
                                Uniform f32* %747 = OpAccessChain %27 %627 %39 %202 
                                         f32 %748 = OpLoad %747 
                                         f32 %749 = OpFMul %746 %748 
                                Private f32* %750 = OpAccessChain %84 %95 
                                                      OpStore %750 %749 
                                Private f32* %751 = OpAccessChain %56 %102 
                                         f32 %752 = OpLoad %751 
                                Uniform f32* %753 = OpAccessChain %27 %627 %105 %202 
                                         f32 %754 = OpLoad %753 
                                         f32 %755 = OpFMul %752 %754 
                                Private f32* %756 = OpAccessChain %84 %102 
                                                      OpStore %756 %755 
                                       f32_4 %759 = OpLoad %9 
                                       f32_3 %760 = OpVectorShuffle %759 %759 0 1 2 
                                       f32_3 %761 = OpLoad %84 
                                       f32_3 %762 = OpFAdd %760 %761 
                                       f32_4 %763 = OpLoad %758 
                                       f32_4 %764 = OpVectorShuffle %763 %762 4 5 6 3 
                                                      OpStore %758 %764 
                                 Output f32* %767 = OpAccessChain %758 %202 
                                                      OpStore %767 %765 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
}
Program "fp" {
SubProgram "d3d11 " {
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
""
}
SubProgram "vulkan " {
""
}
SubProgram "d3d11 " {
Keywords { "AB_HIGH_PRECISION" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "AB_HIGH_PRECISION" }
""
}
SubProgram "vulkan " {
Keywords { "AB_HIGH_PRECISION" }
""
}
}
}
 Pass {
  Name "frag_lensFlare0"
  ZTest Always
  ZWrite Off
  Cull Off
  GpuProgramID 222232
Program "vp" {
SubProgram "d3d11 " {
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in  vec4 in_POSITION0;
in  vec2 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _LensFlareGhostsParams;
uniform 	vec4 _LensFlareHaloParams;
uniform 	float _LensFlareHaloChrDistortion;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BloomRange;
uniform 	vec4 _MainTex_TexelSize;
UNITY_LOCATION(0) uniform  sampler2D _LensFlareLUT;
UNITY_LOCATION(1) uniform  sampler2D _MainTex;
in  vec2 vs_TEXCOORD0;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
vec2 u_xlat2;
vec4 u_xlat3;
vec2 u_xlat4;
vec2 u_xlat8;
float u_xlat12;
void main()
{
    u_xlat0.x = _LensFlareHaloChrDistortion * (-_MainTex_TexelSize.x);
    u_xlat4.xy = (-vs_TEXCOORD0.xy) + vec2(0.5, 0.5);
    u_xlat1.xy = u_xlat4.xy * _LensFlareGhostsParams.yy;
    u_xlat4.x = dot(u_xlat4.xy, u_xlat4.xy);
    u_xlat4.x = sqrt(u_xlat4.x);
    u_xlat4.x = u_xlat4.x * 1.41419995;
    u_xlat2.x = fract(u_xlat4.x);
    u_xlat4.x = dot(u_xlat1.xy, u_xlat1.xy);
    u_xlat4.x = inversesqrt(u_xlat4.x);
    u_xlat4.xy = u_xlat4.xx * u_xlat1.xy;
    u_xlat1.xy = u_xlat4.xy * _LensFlareHaloParams.yy + vs_TEXCOORD0.xy;
    u_xlat1.xy = fract(u_xlat1.xy);
    u_xlat0.xw = u_xlat4.xy * u_xlat0.xx + u_xlat1.xy;
    u_xlat0.xw = u_xlat0.xw * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat3 = texture(_MainTex, u_xlat0.xw);
    u_xlat0.x = u_xlat3.x * _BloomRange.x;
    u_xlat3.x = u_xlat3.w * u_xlat0.x;
    u_xlat0.x = _LensFlareHaloChrDistortion * _MainTex_TexelSize.x;
    u_xlat0.xy = u_xlat4.xy * u_xlat0.xx + u_xlat1.xy;
    u_xlat0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0 = texture(_MainTex, u_xlat0.xy);
    u_xlat0.x = u_xlat0.z * _BloomRange.x;
    u_xlat3.z = u_xlat0.w * u_xlat0.x;
    u_xlat0.xy = (-u_xlat1.xy) + vec2(0.5, 0.5);
    u_xlat8.xy = u_xlat1.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1 = texture(_MainTex, u_xlat8.xy);
    u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.x) * 1.41419995 + 1.0;
    u_xlat0.x = u_xlat0.x * _LensFlareHaloParams.z;
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _LensFlareHaloParams.w;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat4.x = u_xlat1.y * _BloomRange.x;
    u_xlat3.y = u_xlat1.w * u_xlat4.x;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat0.xyz = u_xlat0.xyz * _LensFlareHaloParams.xxx;
    u_xlat2.y = 0.0;
    u_xlat1 = texture(_LensFlareLUT, u_xlat2.xy);
    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.xyz * _BloomRange.yyy;
    u_xlat12 = max(u_xlat0.y, u_xlat0.x);
    u_xlat1.x = max(u_xlat0.z, 9.99999997e-07);
    u_xlat12 = max(u_xlat12, u_xlat1.x);
    u_xlat12 = min(u_xlat12, 1.0);
    u_xlat12 = u_xlat12 * 255.0;
    u_xlat12 = ceil(u_xlat12);
    u_xlat12 = u_xlat12 * 0.00392156886;
    SV_Target0.xyz = u_xlat0.xyz / vec3(u_xlat12);
    SV_Target0.w = u_xlat12;
    return;
}

#endif
"
}
SubProgram "vulkan " {
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 94
; Schema: 0
                                              OpCapability Shader 
                                       %1 = OpExtInstImport "GLSL.std.450" 
                                              OpMemoryModel Logical GLSL450 
                                              OpEntryPoint Vertex %4 "main" %11 %72 %84 %86 
                                              OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                              OpDecorate %11 Location 11 
                                              OpDecorate %16 ArrayStride 16 
                                              OpDecorate %17 ArrayStride 17 
                                              OpMemberDecorate %18 0 Offset 18 
                                              OpMemberDecorate %18 1 Offset 18 
                                              OpDecorate %18 Block 
                                              OpDecorate %20 DescriptorSet 20 
                                              OpDecorate %20 Binding 20 
                                              OpMemberDecorate %70 0 BuiltIn 70 
                                              OpMemberDecorate %70 1 BuiltIn 70 
                                              OpMemberDecorate %70 2 BuiltIn 70 
                                              OpDecorate %70 Block 
                                              OpDecorate vs_TEXCOORD0 Location 84 
                                              OpDecorate %86 Location 86 
                                       %2 = OpTypeVoid 
                                       %3 = OpTypeFunction %2 
                                       %6 = OpTypeFloat 32 
                                       %7 = OpTypeVector %6 4 
                                       %8 = OpTypePointer Private %7 
                        Private f32_4* %9 = OpVariable Private 
                                      %10 = OpTypePointer Input %7 
                         Input f32_4* %11 = OpVariable Input 
                                      %14 = OpTypeInt 32 0 
                                  u32 %15 = OpConstant 4 
                                      %16 = OpTypeArray %7 %15 
                                      %17 = OpTypeArray %7 %15 
                                      %18 = OpTypeStruct %16 %17 
                                      %19 = OpTypePointer Uniform %18 
Uniform struct {f32_4[4]; f32_4[4];}* %20 = OpVariable Uniform 
                                      %21 = OpTypeInt 32 1 
                                  i32 %22 = OpConstant 0 
                                  i32 %23 = OpConstant 1 
                                      %24 = OpTypePointer Uniform %7 
                                  i32 %35 = OpConstant 2 
                                  i32 %44 = OpConstant 3 
                       Private f32_4* %48 = OpVariable Private 
                                  u32 %68 = OpConstant 1 
                                      %69 = OpTypeArray %6 %68 
                                      %70 = OpTypeStruct %7 %6 %69 
                                      %71 = OpTypePointer Output %70 
 Output struct {f32_4; f32; f32[1];}* %72 = OpVariable Output 
                                      %80 = OpTypePointer Output %7 
                                      %82 = OpTypeVector %6 2 
                                      %83 = OpTypePointer Output %82 
               Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                      %85 = OpTypePointer Input %82 
                         Input f32_2* %86 = OpVariable Input 
                                      %88 = OpTypePointer Output %6 
                                  void %4 = OpFunction None %3 
                                       %5 = OpLabel 
                                f32_4 %12 = OpLoad %11 
                                f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                       Uniform f32_4* %25 = OpAccessChain %20 %22 %23 
                                f32_4 %26 = OpLoad %25 
                                f32_4 %27 = OpFMul %13 %26 
                                              OpStore %9 %27 
                       Uniform f32_4* %28 = OpAccessChain %20 %22 %22 
                                f32_4 %29 = OpLoad %28 
                                f32_4 %30 = OpLoad %11 
                                f32_4 %31 = OpVectorShuffle %30 %30 0 0 0 0 
                                f32_4 %32 = OpFMul %29 %31 
                                f32_4 %33 = OpLoad %9 
                                f32_4 %34 = OpFAdd %32 %33 
                                              OpStore %9 %34 
                       Uniform f32_4* %36 = OpAccessChain %20 %22 %35 
                                f32_4 %37 = OpLoad %36 
                                f32_4 %38 = OpLoad %11 
                                f32_4 %39 = OpVectorShuffle %38 %38 2 2 2 2 
                                f32_4 %40 = OpFMul %37 %39 
                                f32_4 %41 = OpLoad %9 
                                f32_4 %42 = OpFAdd %40 %41 
                                              OpStore %9 %42 
                                f32_4 %43 = OpLoad %9 
                       Uniform f32_4* %45 = OpAccessChain %20 %22 %44 
                                f32_4 %46 = OpLoad %45 
                                f32_4 %47 = OpFAdd %43 %46 
                                              OpStore %9 %47 
                                f32_4 %49 = OpLoad %9 
                                f32_4 %50 = OpVectorShuffle %49 %49 1 1 1 1 
                       Uniform f32_4* %51 = OpAccessChain %20 %23 %23 
                                f32_4 %52 = OpLoad %51 
                                f32_4 %53 = OpFMul %50 %52 
                                              OpStore %48 %53 
                       Uniform f32_4* %54 = OpAccessChain %20 %23 %22 
                                f32_4 %55 = OpLoad %54 
                                f32_4 %56 = OpLoad %9 
                                f32_4 %57 = OpVectorShuffle %56 %56 0 0 0 0 
                                f32_4 %58 = OpFMul %55 %57 
                                f32_4 %59 = OpLoad %48 
                                f32_4 %60 = OpFAdd %58 %59 
                                              OpStore %48 %60 
                       Uniform f32_4* %61 = OpAccessChain %20 %23 %35 
                                f32_4 %62 = OpLoad %61 
                                f32_4 %63 = OpLoad %9 
                                f32_4 %64 = OpVectorShuffle %63 %63 2 2 2 2 
                                f32_4 %65 = OpFMul %62 %64 
                                f32_4 %66 = OpLoad %48 
                                f32_4 %67 = OpFAdd %65 %66 
                                              OpStore %48 %67 
                       Uniform f32_4* %73 = OpAccessChain %20 %23 %44 
                                f32_4 %74 = OpLoad %73 
                                f32_4 %75 = OpLoad %9 
                                f32_4 %76 = OpVectorShuffle %75 %75 3 3 3 3 
                                f32_4 %77 = OpFMul %74 %76 
                                f32_4 %78 = OpLoad %48 
                                f32_4 %79 = OpFAdd %77 %78 
                        Output f32_4* %81 = OpAccessChain %72 %22 
                                              OpStore %81 %79 
                                f32_2 %87 = OpLoad %86 
                                              OpStore vs_TEXCOORD0 %87 
                          Output f32* %89 = OpAccessChain %72 %22 %68 
                                  f32 %90 = OpLoad %89 
                                  f32 %91 = OpFNegate %90 
                          Output f32* %92 = OpAccessChain %72 %22 %68 
                                              OpStore %92 %91 
                                              OpReturn
                                              OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 348
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %31 %336 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpMemberDecorate %10 0 Offset 10 
                                                      OpMemberDecorate %10 1 Offset 10 
                                                      OpMemberDecorate %10 2 Offset 10 
                                                      OpMemberDecorate %10 3 Offset 10 
                                                      OpMemberDecorate %10 4 Offset 10 
                                                      OpMemberDecorate %10 5 Offset 10 
                                                      OpDecorate %10 Block 
                                                      OpDecorate %12 DescriptorSet 12 
                                                      OpDecorate %12 Binding 12 
                                                      OpDecorate vs_TEXCOORD0 Location 31 
                                                      OpDecorate %121 DescriptorSet 121 
                                                      OpDecorate %121 Binding 121 
                                                      OpDecorate %125 DescriptorSet 125 
                                                      OpDecorate %125 Binding 125 
                                                      OpDecorate %288 DescriptorSet 288 
                                                      OpDecorate %288 Binding 288 
                                                      OpDecorate %290 DescriptorSet 290 
                                                      OpDecorate %290 Binding 290 
                                                      OpDecorate %336 Location 336 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeStruct %7 %7 %6 %7 %7 %7 
                                              %11 = OpTypePointer Uniform %10 
Uniform struct {f32_4; f32_4; f32; f32_4; f32_4; f32_4;}* %12 = OpVariable Uniform 
                                              %13 = OpTypeInt 32 1 
                                          i32 %14 = OpConstant 2 
                                              %15 = OpTypePointer Uniform %6 
                                          i32 %18 = OpConstant 5 
                                              %19 = OpTypeInt 32 0 
                                          u32 %20 = OpConstant 0 
                                              %25 = OpTypePointer Private %6 
                                              %27 = OpTypeVector %6 2 
                                              %28 = OpTypePointer Private %27 
                               Private f32_2* %29 = OpVariable Private 
                                              %30 = OpTypePointer Input %27 
                        Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                          f32 %34 = OpConstant 3.674022E-40 
                                        f32_2 %35 = OpConstantComposite %34 %34 
                                              %37 = OpTypeVector %6 3 
                                              %38 = OpTypePointer Private %37 
                               Private f32_3* %39 = OpVariable Private 
                                          i32 %41 = OpConstant 0 
                                              %42 = OpTypePointer Uniform %7 
                                          f32 %59 = OpConstant 3.674022E-40 
                               Private f32_2* %62 = OpVariable Private 
                                          i32 %83 = OpConstant 1 
                                         i32 %108 = OpConstant 3 
                                             %119 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                             %120 = OpTypePointer UniformConstant %119 
        UniformConstant read_only Texture2D* %121 = OpVariable UniformConstant 
                                             %123 = OpTypeSampler 
                                             %124 = OpTypePointer UniformConstant %123 
                    UniformConstant sampler* %125 = OpVariable UniformConstant 
                                             %127 = OpTypeSampledImage %119 
                                         i32 %137 = OpConstant 4 
                              Private f32_3* %142 = OpVariable Private 
                                         u32 %143 = OpConstant 3 
                                         u32 %192 = OpConstant 1 
                                         u32 %198 = OpConstant 2 
                              Private f32_2* %206 = OpVariable Private 
                                         f32 %237 = OpConstant 3.674022E-40 
                                         f32 %286 = OpConstant 3.674022E-40 
        UniformConstant read_only Texture2D* %288 = OpVariable UniformConstant 
                    UniformConstant sampler* %290 = OpVariable UniformConstant 
                                Private f32* %310 = OpVariable Private 
                                         f32 %318 = OpConstant 3.674022E-40 
                                         f32 %328 = OpConstant 3.674022E-40 
                                         f32 %333 = OpConstant 3.674022E-40 
                                             %335 = OpTypePointer Output %7 
                               Output f32_4* %336 = OpVariable Output 
                                             %345 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                 Uniform f32* %16 = OpAccessChain %12 %14 
                                          f32 %17 = OpLoad %16 
                                 Uniform f32* %21 = OpAccessChain %12 %18 %20 
                                          f32 %22 = OpLoad %21 
                                          f32 %23 = OpFNegate %22 
                                          f32 %24 = OpFMul %17 %23 
                                 Private f32* %26 = OpAccessChain %9 %20 
                                                      OpStore %26 %24 
                                        f32_2 %32 = OpLoad vs_TEXCOORD0 
                                        f32_2 %33 = OpFNegate %32 
                                        f32_2 %36 = OpFAdd %33 %35 
                                                      OpStore %29 %36 
                                        f32_2 %40 = OpLoad %29 
                               Uniform f32_4* %43 = OpAccessChain %12 %41 
                                        f32_4 %44 = OpLoad %43 
                                        f32_2 %45 = OpVectorShuffle %44 %44 1 1 
                                        f32_2 %46 = OpFMul %40 %45 
                                        f32_3 %47 = OpLoad %39 
                                        f32_3 %48 = OpVectorShuffle %47 %46 3 4 2 
                                                      OpStore %39 %48 
                                        f32_2 %49 = OpLoad %29 
                                        f32_2 %50 = OpLoad %29 
                                          f32 %51 = OpDot %49 %50 
                                 Private f32* %52 = OpAccessChain %29 %20 
                                                      OpStore %52 %51 
                                 Private f32* %53 = OpAccessChain %29 %20 
                                          f32 %54 = OpLoad %53 
                                          f32 %55 = OpExtInst %1 31 %54 
                                 Private f32* %56 = OpAccessChain %29 %20 
                                                      OpStore %56 %55 
                                 Private f32* %57 = OpAccessChain %29 %20 
                                          f32 %58 = OpLoad %57 
                                          f32 %60 = OpFMul %58 %59 
                                 Private f32* %61 = OpAccessChain %29 %20 
                                                      OpStore %61 %60 
                                 Private f32* %63 = OpAccessChain %29 %20 
                                          f32 %64 = OpLoad %63 
                                          f32 %65 = OpExtInst %1 10 %64 
                                 Private f32* %66 = OpAccessChain %62 %20 
                                                      OpStore %66 %65 
                                        f32_3 %67 = OpLoad %39 
                                        f32_2 %68 = OpVectorShuffle %67 %67 0 1 
                                        f32_3 %69 = OpLoad %39 
                                        f32_2 %70 = OpVectorShuffle %69 %69 0 1 
                                          f32 %71 = OpDot %68 %70 
                                 Private f32* %72 = OpAccessChain %29 %20 
                                                      OpStore %72 %71 
                                 Private f32* %73 = OpAccessChain %29 %20 
                                          f32 %74 = OpLoad %73 
                                          f32 %75 = OpExtInst %1 32 %74 
                                 Private f32* %76 = OpAccessChain %29 %20 
                                                      OpStore %76 %75 
                                        f32_2 %77 = OpLoad %29 
                                        f32_2 %78 = OpVectorShuffle %77 %77 0 0 
                                        f32_3 %79 = OpLoad %39 
                                        f32_2 %80 = OpVectorShuffle %79 %79 0 1 
                                        f32_2 %81 = OpFMul %78 %80 
                                                      OpStore %29 %81 
                                        f32_2 %82 = OpLoad %29 
                               Uniform f32_4* %84 = OpAccessChain %12 %83 
                                        f32_4 %85 = OpLoad %84 
                                        f32_2 %86 = OpVectorShuffle %85 %85 1 1 
                                        f32_2 %87 = OpFMul %82 %86 
                                        f32_2 %88 = OpLoad vs_TEXCOORD0 
                                        f32_2 %89 = OpFAdd %87 %88 
                                        f32_3 %90 = OpLoad %39 
                                        f32_3 %91 = OpVectorShuffle %90 %89 3 4 2 
                                                      OpStore %39 %91 
                                        f32_3 %92 = OpLoad %39 
                                        f32_2 %93 = OpVectorShuffle %92 %92 0 1 
                                        f32_2 %94 = OpExtInst %1 10 %93 
                                        f32_3 %95 = OpLoad %39 
                                        f32_3 %96 = OpVectorShuffle %95 %94 3 4 2 
                                                      OpStore %39 %96 
                                        f32_2 %97 = OpLoad %29 
                                        f32_4 %98 = OpLoad %9 
                                        f32_2 %99 = OpVectorShuffle %98 %98 0 0 
                                       f32_2 %100 = OpFMul %97 %99 
                                       f32_3 %101 = OpLoad %39 
                                       f32_2 %102 = OpVectorShuffle %101 %101 0 1 
                                       f32_2 %103 = OpFAdd %100 %102 
                                       f32_4 %104 = OpLoad %9 
                                       f32_4 %105 = OpVectorShuffle %104 %103 4 1 2 5 
                                                      OpStore %9 %105 
                                       f32_4 %106 = OpLoad %9 
                                       f32_2 %107 = OpVectorShuffle %106 %106 0 3 
                              Uniform f32_4* %109 = OpAccessChain %12 %108 
                                       f32_4 %110 = OpLoad %109 
                                       f32_2 %111 = OpVectorShuffle %110 %110 0 1 
                                       f32_2 %112 = OpFMul %107 %111 
                              Uniform f32_4* %113 = OpAccessChain %12 %108 
                                       f32_4 %114 = OpLoad %113 
                                       f32_2 %115 = OpVectorShuffle %114 %114 2 3 
                                       f32_2 %116 = OpFAdd %112 %115 
                                       f32_4 %117 = OpLoad %9 
                                       f32_4 %118 = OpVectorShuffle %117 %116 4 1 2 5 
                                                      OpStore %9 %118 
                         read_only Texture2D %122 = OpLoad %121 
                                     sampler %126 = OpLoad %125 
                  read_only Texture2DSampled %128 = OpSampledImage %122 %126 
                                       f32_4 %129 = OpLoad %9 
                                       f32_2 %130 = OpVectorShuffle %129 %129 0 3 
                                       f32_4 %131 = OpImageSampleImplicitLod %128 %130 
                                       f32_2 %132 = OpVectorShuffle %131 %131 0 3 
                                       f32_4 %133 = OpLoad %9 
                                       f32_4 %134 = OpVectorShuffle %133 %132 4 1 2 5 
                                                      OpStore %9 %134 
                                Private f32* %135 = OpAccessChain %9 %20 
                                         f32 %136 = OpLoad %135 
                                Uniform f32* %138 = OpAccessChain %12 %137 %20 
                                         f32 %139 = OpLoad %138 
                                         f32 %140 = OpFMul %136 %139 
                                Private f32* %141 = OpAccessChain %9 %20 
                                                      OpStore %141 %140 
                                Private f32* %144 = OpAccessChain %9 %143 
                                         f32 %145 = OpLoad %144 
                                Private f32* %146 = OpAccessChain %9 %20 
                                         f32 %147 = OpLoad %146 
                                         f32 %148 = OpFMul %145 %147 
                                Private f32* %149 = OpAccessChain %142 %20 
                                                      OpStore %149 %148 
                                Uniform f32* %150 = OpAccessChain %12 %14 
                                         f32 %151 = OpLoad %150 
                                Uniform f32* %152 = OpAccessChain %12 %18 %20 
                                         f32 %153 = OpLoad %152 
                                         f32 %154 = OpFMul %151 %153 
                                Private f32* %155 = OpAccessChain %9 %20 
                                                      OpStore %155 %154 
                                       f32_2 %156 = OpLoad %29 
                                       f32_4 %157 = OpLoad %9 
                                       f32_2 %158 = OpVectorShuffle %157 %157 0 0 
                                       f32_2 %159 = OpFMul %156 %158 
                                       f32_3 %160 = OpLoad %39 
                                       f32_2 %161 = OpVectorShuffle %160 %160 0 1 
                                       f32_2 %162 = OpFAdd %159 %161 
                                       f32_4 %163 = OpLoad %9 
                                       f32_4 %164 = OpVectorShuffle %163 %162 4 5 2 3 
                                                      OpStore %9 %164 
                                       f32_4 %165 = OpLoad %9 
                                       f32_2 %166 = OpVectorShuffle %165 %165 0 1 
                              Uniform f32_4* %167 = OpAccessChain %12 %108 
                                       f32_4 %168 = OpLoad %167 
                                       f32_2 %169 = OpVectorShuffle %168 %168 0 1 
                                       f32_2 %170 = OpFMul %166 %169 
                              Uniform f32_4* %171 = OpAccessChain %12 %108 
                                       f32_4 %172 = OpLoad %171 
                                       f32_2 %173 = OpVectorShuffle %172 %172 2 3 
                                       f32_2 %174 = OpFAdd %170 %173 
                                       f32_4 %175 = OpLoad %9 
                                       f32_4 %176 = OpVectorShuffle %175 %174 4 5 2 3 
                                                      OpStore %9 %176 
                         read_only Texture2D %177 = OpLoad %121 
                                     sampler %178 = OpLoad %125 
                  read_only Texture2DSampled %179 = OpSampledImage %177 %178 
                                       f32_4 %180 = OpLoad %9 
                                       f32_2 %181 = OpVectorShuffle %180 %180 0 1 
                                       f32_4 %182 = OpImageSampleImplicitLod %179 %181 
                                       f32_2 %183 = OpVectorShuffle %182 %182 2 3 
                                       f32_4 %184 = OpLoad %9 
                                       f32_4 %185 = OpVectorShuffle %184 %183 4 5 2 3 
                                                      OpStore %9 %185 
                                Private f32* %186 = OpAccessChain %9 %20 
                                         f32 %187 = OpLoad %186 
                                Uniform f32* %188 = OpAccessChain %12 %137 %20 
                                         f32 %189 = OpLoad %188 
                                         f32 %190 = OpFMul %187 %189 
                                Private f32* %191 = OpAccessChain %9 %20 
                                                      OpStore %191 %190 
                                Private f32* %193 = OpAccessChain %9 %192 
                                         f32 %194 = OpLoad %193 
                                Private f32* %195 = OpAccessChain %9 %20 
                                         f32 %196 = OpLoad %195 
                                         f32 %197 = OpFMul %194 %196 
                                Private f32* %199 = OpAccessChain %142 %198 
                                                      OpStore %199 %197 
                                       f32_3 %200 = OpLoad %39 
                                       f32_2 %201 = OpVectorShuffle %200 %200 0 1 
                                       f32_2 %202 = OpFNegate %201 
                                       f32_2 %203 = OpFAdd %202 %35 
                                       f32_4 %204 = OpLoad %9 
                                       f32_4 %205 = OpVectorShuffle %204 %203 4 5 2 3 
                                                      OpStore %9 %205 
                                       f32_3 %207 = OpLoad %39 
                                       f32_2 %208 = OpVectorShuffle %207 %207 0 1 
                              Uniform f32_4* %209 = OpAccessChain %12 %108 
                                       f32_4 %210 = OpLoad %209 
                                       f32_2 %211 = OpVectorShuffle %210 %210 0 1 
                                       f32_2 %212 = OpFMul %208 %211 
                              Uniform f32_4* %213 = OpAccessChain %12 %108 
                                       f32_4 %214 = OpLoad %213 
                                       f32_2 %215 = OpVectorShuffle %214 %214 2 3 
                                       f32_2 %216 = OpFAdd %212 %215 
                                                      OpStore %206 %216 
                         read_only Texture2D %217 = OpLoad %121 
                                     sampler %218 = OpLoad %125 
                  read_only Texture2DSampled %219 = OpSampledImage %217 %218 
                                       f32_2 %220 = OpLoad %206 
                                       f32_4 %221 = OpImageSampleImplicitLod %219 %220 
                                       f32_2 %222 = OpVectorShuffle %221 %221 1 3 
                                                      OpStore %206 %222 
                                       f32_4 %223 = OpLoad %9 
                                       f32_2 %224 = OpVectorShuffle %223 %223 0 1 
                                       f32_4 %225 = OpLoad %9 
                                       f32_2 %226 = OpVectorShuffle %225 %225 0 1 
                                         f32 %227 = OpDot %224 %226 
                                Private f32* %228 = OpAccessChain %9 %20 
                                                      OpStore %228 %227 
                                Private f32* %229 = OpAccessChain %9 %20 
                                         f32 %230 = OpLoad %229 
                                         f32 %231 = OpExtInst %1 31 %230 
                                Private f32* %232 = OpAccessChain %9 %20 
                                                      OpStore %232 %231 
                                Private f32* %233 = OpAccessChain %9 %20 
                                         f32 %234 = OpLoad %233 
                                         f32 %235 = OpFNegate %234 
                                         f32 %236 = OpFMul %235 %59 
                                         f32 %238 = OpFAdd %236 %237 
                                Private f32* %239 = OpAccessChain %9 %20 
                                                      OpStore %239 %238 
                                Private f32* %240 = OpAccessChain %9 %20 
                                         f32 %241 = OpLoad %240 
                                Uniform f32* %242 = OpAccessChain %12 %83 %198 
                                         f32 %243 = OpLoad %242 
                                         f32 %244 = OpFMul %241 %243 
                                Private f32* %245 = OpAccessChain %9 %20 
                                                      OpStore %245 %244 
                                Private f32* %246 = OpAccessChain %9 %20 
                                         f32 %247 = OpLoad %246 
                                         f32 %248 = OpExtInst %1 30 %247 
                                Private f32* %249 = OpAccessChain %9 %20 
                                                      OpStore %249 %248 
                                Private f32* %250 = OpAccessChain %9 %20 
                                         f32 %251 = OpLoad %250 
                                Uniform f32* %252 = OpAccessChain %12 %83 %143 
                                         f32 %253 = OpLoad %252 
                                         f32 %254 = OpFMul %251 %253 
                                Private f32* %255 = OpAccessChain %9 %20 
                                                      OpStore %255 %254 
                                Private f32* %256 = OpAccessChain %9 %20 
                                         f32 %257 = OpLoad %256 
                                         f32 %258 = OpExtInst %1 29 %257 
                                Private f32* %259 = OpAccessChain %9 %20 
                                                      OpStore %259 %258 
                                Private f32* %260 = OpAccessChain %206 %20 
                                         f32 %261 = OpLoad %260 
                                Uniform f32* %262 = OpAccessChain %12 %137 %20 
                                         f32 %263 = OpLoad %262 
                                         f32 %264 = OpFMul %261 %263 
                                Private f32* %265 = OpAccessChain %29 %20 
                                                      OpStore %265 %264 
                                Private f32* %266 = OpAccessChain %206 %192 
                                         f32 %267 = OpLoad %266 
                                Private f32* %268 = OpAccessChain %29 %20 
                                         f32 %269 = OpLoad %268 
                                         f32 %270 = OpFMul %267 %269 
                                Private f32* %271 = OpAccessChain %142 %192 
                                                      OpStore %271 %270 
                                       f32_4 %272 = OpLoad %9 
                                       f32_3 %273 = OpVectorShuffle %272 %272 0 0 0 
                                       f32_3 %274 = OpLoad %142 
                                       f32_3 %275 = OpFMul %273 %274 
                                       f32_4 %276 = OpLoad %9 
                                       f32_4 %277 = OpVectorShuffle %276 %275 4 5 6 3 
                                                      OpStore %9 %277 
                                       f32_4 %278 = OpLoad %9 
                                       f32_3 %279 = OpVectorShuffle %278 %278 0 1 2 
                              Uniform f32_4* %280 = OpAccessChain %12 %83 
                                       f32_4 %281 = OpLoad %280 
                                       f32_3 %282 = OpVectorShuffle %281 %281 0 0 0 
                                       f32_3 %283 = OpFMul %279 %282 
                                       f32_4 %284 = OpLoad %9 
                                       f32_4 %285 = OpVectorShuffle %284 %283 4 5 6 3 
                                                      OpStore %9 %285 
                                Private f32* %287 = OpAccessChain %62 %192 
                                                      OpStore %287 %286 
                         read_only Texture2D %289 = OpLoad %288 
                                     sampler %291 = OpLoad %290 
                  read_only Texture2DSampled %292 = OpSampledImage %289 %291 
                                       f32_2 %293 = OpLoad %62 
                                       f32_4 %294 = OpImageSampleImplicitLod %292 %293 
                                       f32_3 %295 = OpVectorShuffle %294 %294 0 1 2 
                                                      OpStore %39 %295 
                                       f32_4 %296 = OpLoad %9 
                                       f32_3 %297 = OpVectorShuffle %296 %296 0 1 2 
                                       f32_3 %298 = OpLoad %39 
                                       f32_3 %299 = OpFMul %297 %298 
                                       f32_4 %300 = OpLoad %9 
                                       f32_4 %301 = OpVectorShuffle %300 %299 4 5 6 3 
                                                      OpStore %9 %301 
                                       f32_4 %302 = OpLoad %9 
                                       f32_3 %303 = OpVectorShuffle %302 %302 0 1 2 
                              Uniform f32_4* %304 = OpAccessChain %12 %137 
                                       f32_4 %305 = OpLoad %304 
                                       f32_3 %306 = OpVectorShuffle %305 %305 1 1 1 
                                       f32_3 %307 = OpFMul %303 %306 
                                       f32_4 %308 = OpLoad %9 
                                       f32_4 %309 = OpVectorShuffle %308 %307 4 5 6 3 
                                                      OpStore %9 %309 
                                Private f32* %311 = OpAccessChain %9 %192 
                                         f32 %312 = OpLoad %311 
                                Private f32* %313 = OpAccessChain %9 %20 
                                         f32 %314 = OpLoad %313 
                                         f32 %315 = OpExtInst %1 40 %312 %314 
                                                      OpStore %310 %315 
                                Private f32* %316 = OpAccessChain %9 %198 
                                         f32 %317 = OpLoad %316 
                                         f32 %319 = OpExtInst %1 40 %317 %318 
                                Private f32* %320 = OpAccessChain %39 %20 
                                                      OpStore %320 %319 
                                         f32 %321 = OpLoad %310 
                                Private f32* %322 = OpAccessChain %39 %20 
                                         f32 %323 = OpLoad %322 
                                         f32 %324 = OpExtInst %1 40 %321 %323 
                                                      OpStore %310 %324 
                                         f32 %325 = OpLoad %310 
                                         f32 %326 = OpExtInst %1 37 %325 %237 
                                                      OpStore %310 %326 
                                         f32 %327 = OpLoad %310 
                                         f32 %329 = OpFMul %327 %328 
                                                      OpStore %310 %329 
                                         f32 %330 = OpLoad %310 
                                         f32 %331 = OpExtInst %1 9 %330 
                                                      OpStore %310 %331 
                                         f32 %332 = OpLoad %310 
                                         f32 %334 = OpFMul %332 %333 
                                                      OpStore %310 %334 
                                       f32_4 %337 = OpLoad %9 
                                       f32_3 %338 = OpVectorShuffle %337 %337 0 1 2 
                                         f32 %339 = OpLoad %310 
                                       f32_3 %340 = OpCompositeConstruct %339 %339 %339 
                                       f32_3 %341 = OpFDiv %338 %340 
                                       f32_4 %342 = OpLoad %336 
                                       f32_4 %343 = OpVectorShuffle %342 %341 4 5 6 3 
                                                      OpStore %336 %343 
                                         f32 %344 = OpLoad %310 
                                 Output f32* %346 = OpAccessChain %336 %143 
                                                      OpStore %346 %344 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "AB_HIGH_PRECISION" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "AB_HIGH_PRECISION" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in  vec4 in_POSITION0;
in  vec2 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _LensFlareGhostsParams;
uniform 	vec4 _LensFlareHaloParams;
uniform 	float _LensFlareHaloChrDistortion;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _MainTex_TexelSize;
UNITY_LOCATION(0) uniform  sampler2D _LensFlareLUT;
UNITY_LOCATION(1) uniform  sampler2D _MainTex;
in  vec2 vs_TEXCOORD0;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec3 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec2 u_xlat8;
vec2 u_xlat9;
float u_xlat13;
void main()
{
    u_xlat0.xy = (-vs_TEXCOORD0.xy) + vec2(0.5, 0.5);
    u_xlat8.xy = u_xlat0.xy * _LensFlareGhostsParams.yy;
    u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * 1.41419995;
    u_xlat0.x = fract(u_xlat0.x);
    u_xlat1.x = dot(u_xlat8.xy, u_xlat8.xy);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat8.xy = u_xlat8.xy * u_xlat1.xx;
    u_xlat1.xy = u_xlat8.xy * _LensFlareHaloParams.yy + vs_TEXCOORD0.xy;
    u_xlat1.xy = fract(u_xlat1.xy);
    u_xlat9.xy = (-u_xlat1.xy) + vec2(0.5, 0.5);
    u_xlat9.x = dot(u_xlat9.xy, u_xlat9.xy);
    u_xlat9.x = sqrt(u_xlat9.x);
    u_xlat9.x = (-u_xlat9.x) * 1.41419995 + 1.0;
    u_xlat9.x = u_xlat9.x * _LensFlareHaloParams.z;
    u_xlat9.x = log2(u_xlat9.x);
    u_xlat9.x = u_xlat9.x * _LensFlareHaloParams.w;
    u_xlat9.x = exp2(u_xlat9.x);
    u_xlat13 = _LensFlareHaloChrDistortion * (-_MainTex_TexelSize.x);
    u_xlat2.xy = u_xlat8.xy * vec2(u_xlat13) + u_xlat1.xy;
    u_xlat2.xy = u_xlat2.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat2 = texture(_MainTex, u_xlat2.xy);
    u_xlat13 = _LensFlareHaloChrDistortion * _MainTex_TexelSize.x;
    u_xlat8.xy = u_xlat8.xy * vec2(u_xlat13) + u_xlat1.xy;
    u_xlat1.xy = u_xlat1.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat3 = texture(_MainTex, u_xlat1.xy);
    u_xlat2.y = u_xlat3.y;
    u_xlat8.xy = u_xlat8.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat3 = texture(_MainTex, u_xlat8.xy);
    u_xlat2.z = u_xlat3.z;
    u_xlat1.xyz = u_xlat9.xxx * u_xlat2.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _LensFlareHaloParams.xxx;
    u_xlat0.y = 0.0;
    u_xlat0 = texture(_LensFlareLUT, u_xlat0.xy);
    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
    SV_Target0.w = 0.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "AB_HIGH_PRECISION" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 94
; Schema: 0
                                              OpCapability Shader 
                                       %1 = OpExtInstImport "GLSL.std.450" 
                                              OpMemoryModel Logical GLSL450 
                                              OpEntryPoint Vertex %4 "main" %11 %72 %84 %86 
                                              OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                              OpDecorate %11 Location 11 
                                              OpDecorate %16 ArrayStride 16 
                                              OpDecorate %17 ArrayStride 17 
                                              OpMemberDecorate %18 0 Offset 18 
                                              OpMemberDecorate %18 1 Offset 18 
                                              OpDecorate %18 Block 
                                              OpDecorate %20 DescriptorSet 20 
                                              OpDecorate %20 Binding 20 
                                              OpMemberDecorate %70 0 BuiltIn 70 
                                              OpMemberDecorate %70 1 BuiltIn 70 
                                              OpMemberDecorate %70 2 BuiltIn 70 
                                              OpDecorate %70 Block 
                                              OpDecorate vs_TEXCOORD0 Location 84 
                                              OpDecorate %86 Location 86 
                                       %2 = OpTypeVoid 
                                       %3 = OpTypeFunction %2 
                                       %6 = OpTypeFloat 32 
                                       %7 = OpTypeVector %6 4 
                                       %8 = OpTypePointer Private %7 
                        Private f32_4* %9 = OpVariable Private 
                                      %10 = OpTypePointer Input %7 
                         Input f32_4* %11 = OpVariable Input 
                                      %14 = OpTypeInt 32 0 
                                  u32 %15 = OpConstant 4 
                                      %16 = OpTypeArray %7 %15 
                                      %17 = OpTypeArray %7 %15 
                                      %18 = OpTypeStruct %16 %17 
                                      %19 = OpTypePointer Uniform %18 
Uniform struct {f32_4[4]; f32_4[4];}* %20 = OpVariable Uniform 
                                      %21 = OpTypeInt 32 1 
                                  i32 %22 = OpConstant 0 
                                  i32 %23 = OpConstant 1 
                                      %24 = OpTypePointer Uniform %7 
                                  i32 %35 = OpConstant 2 
                                  i32 %44 = OpConstant 3 
                       Private f32_4* %48 = OpVariable Private 
                                  u32 %68 = OpConstant 1 
                                      %69 = OpTypeArray %6 %68 
                                      %70 = OpTypeStruct %7 %6 %69 
                                      %71 = OpTypePointer Output %70 
 Output struct {f32_4; f32; f32[1];}* %72 = OpVariable Output 
                                      %80 = OpTypePointer Output %7 
                                      %82 = OpTypeVector %6 2 
                                      %83 = OpTypePointer Output %82 
               Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                      %85 = OpTypePointer Input %82 
                         Input f32_2* %86 = OpVariable Input 
                                      %88 = OpTypePointer Output %6 
                                  void %4 = OpFunction None %3 
                                       %5 = OpLabel 
                                f32_4 %12 = OpLoad %11 
                                f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                       Uniform f32_4* %25 = OpAccessChain %20 %22 %23 
                                f32_4 %26 = OpLoad %25 
                                f32_4 %27 = OpFMul %13 %26 
                                              OpStore %9 %27 
                       Uniform f32_4* %28 = OpAccessChain %20 %22 %22 
                                f32_4 %29 = OpLoad %28 
                                f32_4 %30 = OpLoad %11 
                                f32_4 %31 = OpVectorShuffle %30 %30 0 0 0 0 
                                f32_4 %32 = OpFMul %29 %31 
                                f32_4 %33 = OpLoad %9 
                                f32_4 %34 = OpFAdd %32 %33 
                                              OpStore %9 %34 
                       Uniform f32_4* %36 = OpAccessChain %20 %22 %35 
                                f32_4 %37 = OpLoad %36 
                                f32_4 %38 = OpLoad %11 
                                f32_4 %39 = OpVectorShuffle %38 %38 2 2 2 2 
                                f32_4 %40 = OpFMul %37 %39 
                                f32_4 %41 = OpLoad %9 
                                f32_4 %42 = OpFAdd %40 %41 
                                              OpStore %9 %42 
                                f32_4 %43 = OpLoad %9 
                       Uniform f32_4* %45 = OpAccessChain %20 %22 %44 
                                f32_4 %46 = OpLoad %45 
                                f32_4 %47 = OpFAdd %43 %46 
                                              OpStore %9 %47 
                                f32_4 %49 = OpLoad %9 
                                f32_4 %50 = OpVectorShuffle %49 %49 1 1 1 1 
                       Uniform f32_4* %51 = OpAccessChain %20 %23 %23 
                                f32_4 %52 = OpLoad %51 
                                f32_4 %53 = OpFMul %50 %52 
                                              OpStore %48 %53 
                       Uniform f32_4* %54 = OpAccessChain %20 %23 %22 
                                f32_4 %55 = OpLoad %54 
                                f32_4 %56 = OpLoad %9 
                                f32_4 %57 = OpVectorShuffle %56 %56 0 0 0 0 
                                f32_4 %58 = OpFMul %55 %57 
                                f32_4 %59 = OpLoad %48 
                                f32_4 %60 = OpFAdd %58 %59 
                                              OpStore %48 %60 
                       Uniform f32_4* %61 = OpAccessChain %20 %23 %35 
                                f32_4 %62 = OpLoad %61 
                                f32_4 %63 = OpLoad %9 
                                f32_4 %64 = OpVectorShuffle %63 %63 2 2 2 2 
                                f32_4 %65 = OpFMul %62 %64 
                                f32_4 %66 = OpLoad %48 
                                f32_4 %67 = OpFAdd %65 %66 
                                              OpStore %48 %67 
                       Uniform f32_4* %73 = OpAccessChain %20 %23 %44 
                                f32_4 %74 = OpLoad %73 
                                f32_4 %75 = OpLoad %9 
                                f32_4 %76 = OpVectorShuffle %75 %75 3 3 3 3 
                                f32_4 %77 = OpFMul %74 %76 
                                f32_4 %78 = OpLoad %48 
                                f32_4 %79 = OpFAdd %77 %78 
                        Output f32_4* %81 = OpAccessChain %72 %22 
                                              OpStore %81 %79 
                                f32_2 %87 = OpLoad %86 
                                              OpStore vs_TEXCOORD0 %87 
                          Output f32* %89 = OpAccessChain %72 %22 %68 
                                  f32 %90 = OpLoad %89 
                                  f32 %91 = OpFNegate %90 
                          Output f32* %92 = OpAccessChain %72 %22 %68 
                                              OpStore %92 %91 
                                              OpReturn
                                              OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 254
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %12 %245 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpDecorate vs_TEXCOORD0 Location 12 
                                                      OpMemberDecorate %25 0 Offset 25 
                                                      OpMemberDecorate %25 1 Offset 25 
                                                      OpMemberDecorate %25 2 Offset 25 
                                                      OpMemberDecorate %25 3 Offset 25 
                                                      OpMemberDecorate %25 4 Offset 25 
                                                      OpDecorate %25 Block 
                                                      OpDecorate %27 DescriptorSet 27 
                                                      OpDecorate %27 Binding 27 
                                                      OpDecorate %162 DescriptorSet 162 
                                                      OpDecorate %162 Binding 162 
                                                      OpDecorate %166 DescriptorSet 166 
                                                      OpDecorate %166 Binding 166 
                                                      OpDecorate %235 DescriptorSet 235 
                                                      OpDecorate %235 Binding 235 
                                                      OpDecorate %237 DescriptorSet 237 
                                                      OpDecorate %237 Binding 237 
                                                      OpDecorate %245 Location 245 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 3 
                                               %8 = OpTypePointer Private %7 
                                Private f32_3* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 2 
                                              %11 = OpTypePointer Input %10 
                        Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                          f32 %15 = OpConstant 3.674022E-40 
                                        f32_2 %16 = OpConstantComposite %15 %15 
                                              %20 = OpTypePointer Private %10 
                               Private f32_2* %21 = OpVariable Private 
                                              %24 = OpTypeVector %6 4 
                                              %25 = OpTypeStruct %24 %24 %6 %24 %24 
                                              %26 = OpTypePointer Uniform %25 
Uniform struct {f32_4; f32_4; f32; f32_4; f32_4;}* %27 = OpVariable Uniform 
                                              %28 = OpTypeInt 32 1 
                                          i32 %29 = OpConstant 0 
                                              %30 = OpTypePointer Uniform %24 
                                              %40 = OpTypeInt 32 0 
                                          u32 %41 = OpConstant 0 
                                              %42 = OpTypePointer Private %6 
                                          f32 %50 = OpConstant 3.674022E-40 
                               Private f32_3* %57 = OpVariable Private 
                                          i32 %71 = OpConstant 1 
                               Private f32_2* %85 = OpVariable Private 
                                         f32 %102 = OpConstant 3.674022E-40 
                                         u32 %107 = OpConstant 2 
                                             %108 = OpTypePointer Uniform %6 
                                         u32 %119 = OpConstant 3 
                                Private f32* %128 = OpVariable Private 
                                         i32 %129 = OpConstant 2 
                                         i32 %132 = OpConstant 4 
                              Private f32_3* %137 = OpVariable Private 
                                         i32 %149 = OpConstant 3 
                                             %160 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                             %161 = OpTypePointer UniformConstant %160 
        UniformConstant read_only Texture2D* %162 = OpVariable UniformConstant 
                                             %164 = OpTypeSampler 
                                             %165 = OpTypePointer UniformConstant %164 
                    UniformConstant sampler* %166 = OpVariable UniformConstant 
                                             %168 = OpTypeSampledImage %160 
                                         u32 %205 = OpConstant 1 
                                         f32 %233 = OpConstant 3.674022E-40 
        UniformConstant read_only Texture2D* %235 = OpVariable UniformConstant 
                    UniformConstant sampler* %237 = OpVariable UniformConstant 
                                             %244 = OpTypePointer Output %24 
                               Output f32_4* %245 = OpVariable Output 
                                             %251 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_2 %13 = OpLoad vs_TEXCOORD0 
                                        f32_2 %14 = OpFNegate %13 
                                        f32_2 %17 = OpFAdd %14 %16 
                                        f32_3 %18 = OpLoad %9 
                                        f32_3 %19 = OpVectorShuffle %18 %17 3 4 2 
                                                      OpStore %9 %19 
                                        f32_3 %22 = OpLoad %9 
                                        f32_2 %23 = OpVectorShuffle %22 %22 0 1 
                               Uniform f32_4* %31 = OpAccessChain %27 %29 
                                        f32_4 %32 = OpLoad %31 
                                        f32_2 %33 = OpVectorShuffle %32 %32 1 1 
                                        f32_2 %34 = OpFMul %23 %33 
                                                      OpStore %21 %34 
                                        f32_3 %35 = OpLoad %9 
                                        f32_2 %36 = OpVectorShuffle %35 %35 0 1 
                                        f32_3 %37 = OpLoad %9 
                                        f32_2 %38 = OpVectorShuffle %37 %37 0 1 
                                          f32 %39 = OpDot %36 %38 
                                 Private f32* %43 = OpAccessChain %9 %41 
                                                      OpStore %43 %39 
                                 Private f32* %44 = OpAccessChain %9 %41 
                                          f32 %45 = OpLoad %44 
                                          f32 %46 = OpExtInst %1 31 %45 
                                 Private f32* %47 = OpAccessChain %9 %41 
                                                      OpStore %47 %46 
                                 Private f32* %48 = OpAccessChain %9 %41 
                                          f32 %49 = OpLoad %48 
                                          f32 %51 = OpFMul %49 %50 
                                 Private f32* %52 = OpAccessChain %9 %41 
                                                      OpStore %52 %51 
                                 Private f32* %53 = OpAccessChain %9 %41 
                                          f32 %54 = OpLoad %53 
                                          f32 %55 = OpExtInst %1 10 %54 
                                 Private f32* %56 = OpAccessChain %9 %41 
                                                      OpStore %56 %55 
                                        f32_2 %58 = OpLoad %21 
                                        f32_2 %59 = OpLoad %21 
                                          f32 %60 = OpDot %58 %59 
                                 Private f32* %61 = OpAccessChain %57 %41 
                                                      OpStore %61 %60 
                                 Private f32* %62 = OpAccessChain %57 %41 
                                          f32 %63 = OpLoad %62 
                                          f32 %64 = OpExtInst %1 32 %63 
                                 Private f32* %65 = OpAccessChain %57 %41 
                                                      OpStore %65 %64 
                                        f32_2 %66 = OpLoad %21 
                                        f32_3 %67 = OpLoad %57 
                                        f32_2 %68 = OpVectorShuffle %67 %67 0 0 
                                        f32_2 %69 = OpFMul %66 %68 
                                                      OpStore %21 %69 
                                        f32_2 %70 = OpLoad %21 
                               Uniform f32_4* %72 = OpAccessChain %27 %71 
                                        f32_4 %73 = OpLoad %72 
                                        f32_2 %74 = OpVectorShuffle %73 %73 1 1 
                                        f32_2 %75 = OpFMul %70 %74 
                                        f32_2 %76 = OpLoad vs_TEXCOORD0 
                                        f32_2 %77 = OpFAdd %75 %76 
                                        f32_3 %78 = OpLoad %57 
                                        f32_3 %79 = OpVectorShuffle %78 %77 3 4 2 
                                                      OpStore %57 %79 
                                        f32_3 %80 = OpLoad %57 
                                        f32_2 %81 = OpVectorShuffle %80 %80 0 1 
                                        f32_2 %82 = OpExtInst %1 10 %81 
                                        f32_3 %83 = OpLoad %57 
                                        f32_3 %84 = OpVectorShuffle %83 %82 3 4 2 
                                                      OpStore %57 %84 
                                        f32_3 %86 = OpLoad %57 
                                        f32_2 %87 = OpVectorShuffle %86 %86 0 1 
                                        f32_2 %88 = OpFNegate %87 
                                        f32_2 %89 = OpFAdd %88 %16 
                                                      OpStore %85 %89 
                                        f32_2 %90 = OpLoad %85 
                                        f32_2 %91 = OpLoad %85 
                                          f32 %92 = OpDot %90 %91 
                                 Private f32* %93 = OpAccessChain %85 %41 
                                                      OpStore %93 %92 
                                 Private f32* %94 = OpAccessChain %85 %41 
                                          f32 %95 = OpLoad %94 
                                          f32 %96 = OpExtInst %1 31 %95 
                                 Private f32* %97 = OpAccessChain %85 %41 
                                                      OpStore %97 %96 
                                 Private f32* %98 = OpAccessChain %85 %41 
                                          f32 %99 = OpLoad %98 
                                         f32 %100 = OpFNegate %99 
                                         f32 %101 = OpFMul %100 %50 
                                         f32 %103 = OpFAdd %101 %102 
                                Private f32* %104 = OpAccessChain %85 %41 
                                                      OpStore %104 %103 
                                Private f32* %105 = OpAccessChain %85 %41 
                                         f32 %106 = OpLoad %105 
                                Uniform f32* %109 = OpAccessChain %27 %71 %107 
                                         f32 %110 = OpLoad %109 
                                         f32 %111 = OpFMul %106 %110 
                                Private f32* %112 = OpAccessChain %85 %41 
                                                      OpStore %112 %111 
                                Private f32* %113 = OpAccessChain %85 %41 
                                         f32 %114 = OpLoad %113 
                                         f32 %115 = OpExtInst %1 30 %114 
                                Private f32* %116 = OpAccessChain %85 %41 
                                                      OpStore %116 %115 
                                Private f32* %117 = OpAccessChain %85 %41 
                                         f32 %118 = OpLoad %117 
                                Uniform f32* %120 = OpAccessChain %27 %71 %119 
                                         f32 %121 = OpLoad %120 
                                         f32 %122 = OpFMul %118 %121 
                                Private f32* %123 = OpAccessChain %85 %41 
                                                      OpStore %123 %122 
                                Private f32* %124 = OpAccessChain %85 %41 
                                         f32 %125 = OpLoad %124 
                                         f32 %126 = OpExtInst %1 29 %125 
                                Private f32* %127 = OpAccessChain %85 %41 
                                                      OpStore %127 %126 
                                Uniform f32* %130 = OpAccessChain %27 %129 
                                         f32 %131 = OpLoad %130 
                                Uniform f32* %133 = OpAccessChain %27 %132 %41 
                                         f32 %134 = OpLoad %133 
                                         f32 %135 = OpFNegate %134 
                                         f32 %136 = OpFMul %131 %135 
                                                      OpStore %128 %136 
                                       f32_2 %138 = OpLoad %21 
                                         f32 %139 = OpLoad %128 
                                       f32_2 %140 = OpCompositeConstruct %139 %139 
                                       f32_2 %141 = OpFMul %138 %140 
                                       f32_3 %142 = OpLoad %57 
                                       f32_2 %143 = OpVectorShuffle %142 %142 0 1 
                                       f32_2 %144 = OpFAdd %141 %143 
                                       f32_3 %145 = OpLoad %137 
                                       f32_3 %146 = OpVectorShuffle %145 %144 3 4 2 
                                                      OpStore %137 %146 
                                       f32_3 %147 = OpLoad %137 
                                       f32_2 %148 = OpVectorShuffle %147 %147 0 1 
                              Uniform f32_4* %150 = OpAccessChain %27 %149 
                                       f32_4 %151 = OpLoad %150 
                                       f32_2 %152 = OpVectorShuffle %151 %151 0 1 
                                       f32_2 %153 = OpFMul %148 %152 
                              Uniform f32_4* %154 = OpAccessChain %27 %149 
                                       f32_4 %155 = OpLoad %154 
                                       f32_2 %156 = OpVectorShuffle %155 %155 2 3 
                                       f32_2 %157 = OpFAdd %153 %156 
                                       f32_3 %158 = OpLoad %137 
                                       f32_3 %159 = OpVectorShuffle %158 %157 3 4 2 
                                                      OpStore %137 %159 
                         read_only Texture2D %163 = OpLoad %162 
                                     sampler %167 = OpLoad %166 
                  read_only Texture2DSampled %169 = OpSampledImage %163 %167 
                                       f32_3 %170 = OpLoad %137 
                                       f32_2 %171 = OpVectorShuffle %170 %170 0 1 
                                       f32_4 %172 = OpImageSampleImplicitLod %169 %171 
                                         f32 %173 = OpCompositeExtract %172 0 
                                Private f32* %174 = OpAccessChain %137 %41 
                                                      OpStore %174 %173 
                                Uniform f32* %175 = OpAccessChain %27 %129 
                                         f32 %176 = OpLoad %175 
                                Uniform f32* %177 = OpAccessChain %27 %132 %41 
                                         f32 %178 = OpLoad %177 
                                         f32 %179 = OpFMul %176 %178 
                                                      OpStore %128 %179 
                                       f32_2 %180 = OpLoad %21 
                                         f32 %181 = OpLoad %128 
                                       f32_2 %182 = OpCompositeConstruct %181 %181 
                                       f32_2 %183 = OpFMul %180 %182 
                                       f32_3 %184 = OpLoad %57 
                                       f32_2 %185 = OpVectorShuffle %184 %184 0 1 
                                       f32_2 %186 = OpFAdd %183 %185 
                                                      OpStore %21 %186 
                                       f32_3 %187 = OpLoad %57 
                                       f32_2 %188 = OpVectorShuffle %187 %187 0 1 
                              Uniform f32_4* %189 = OpAccessChain %27 %149 
                                       f32_4 %190 = OpLoad %189 
                                       f32_2 %191 = OpVectorShuffle %190 %190 0 1 
                                       f32_2 %192 = OpFMul %188 %191 
                              Uniform f32_4* %193 = OpAccessChain %27 %149 
                                       f32_4 %194 = OpLoad %193 
                                       f32_2 %195 = OpVectorShuffle %194 %194 2 3 
                                       f32_2 %196 = OpFAdd %192 %195 
                                       f32_3 %197 = OpLoad %57 
                                       f32_3 %198 = OpVectorShuffle %197 %196 3 4 2 
                                                      OpStore %57 %198 
                         read_only Texture2D %199 = OpLoad %162 
                                     sampler %200 = OpLoad %166 
                  read_only Texture2DSampled %201 = OpSampledImage %199 %200 
                                       f32_3 %202 = OpLoad %57 
                                       f32_2 %203 = OpVectorShuffle %202 %202 0 1 
                                       f32_4 %204 = OpImageSampleImplicitLod %201 %203 
                                         f32 %206 = OpCompositeExtract %204 1 
                                Private f32* %207 = OpAccessChain %137 %205 
                                                      OpStore %207 %206 
                                       f32_2 %208 = OpLoad %21 
                              Uniform f32_4* %209 = OpAccessChain %27 %149 
                                       f32_4 %210 = OpLoad %209 
                                       f32_2 %211 = OpVectorShuffle %210 %210 0 1 
                                       f32_2 %212 = OpFMul %208 %211 
                              Uniform f32_4* %213 = OpAccessChain %27 %149 
                                       f32_4 %214 = OpLoad %213 
                                       f32_2 %215 = OpVectorShuffle %214 %214 2 3 
                                       f32_2 %216 = OpFAdd %212 %215 
                                                      OpStore %21 %216 
                         read_only Texture2D %217 = OpLoad %162 
                                     sampler %218 = OpLoad %166 
                  read_only Texture2DSampled %219 = OpSampledImage %217 %218 
                                       f32_2 %220 = OpLoad %21 
                                       f32_4 %221 = OpImageSampleImplicitLod %219 %220 
                                         f32 %222 = OpCompositeExtract %221 2 
                                Private f32* %223 = OpAccessChain %137 %107 
                                                      OpStore %223 %222 
                                       f32_2 %224 = OpLoad %85 
                                       f32_3 %225 = OpVectorShuffle %224 %224 0 0 0 
                                       f32_3 %226 = OpLoad %137 
                                       f32_3 %227 = OpFMul %225 %226 
                                                      OpStore %57 %227 
                                       f32_3 %228 = OpLoad %57 
                              Uniform f32_4* %229 = OpAccessChain %27 %71 
                                       f32_4 %230 = OpLoad %229 
                                       f32_3 %231 = OpVectorShuffle %230 %230 0 0 0 
                                       f32_3 %232 = OpFMul %228 %231 
                                                      OpStore %57 %232 
                                Private f32* %234 = OpAccessChain %9 %205 
                                                      OpStore %234 %233 
                         read_only Texture2D %236 = OpLoad %235 
                                     sampler %238 = OpLoad %237 
                  read_only Texture2DSampled %239 = OpSampledImage %236 %238 
                                       f32_3 %240 = OpLoad %9 
                                       f32_2 %241 = OpVectorShuffle %240 %240 0 1 
                                       f32_4 %242 = OpImageSampleImplicitLod %239 %241 
                                       f32_3 %243 = OpVectorShuffle %242 %242 0 1 2 
                                                      OpStore %9 %243 
                                       f32_3 %246 = OpLoad %9 
                                       f32_3 %247 = OpLoad %57 
                                       f32_3 %248 = OpFMul %246 %247 
                                       f32_4 %249 = OpLoad %245 
                                       f32_4 %250 = OpVectorShuffle %249 %248 4 5 6 3 
                                                      OpStore %245 %250 
                                 Output f32* %252 = OpAccessChain %245 %119 
                                                      OpStore %252 %233 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
}
Program "fp" {
SubProgram "d3d11 " {
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
""
}
SubProgram "vulkan " {
""
}
SubProgram "d3d11 " {
Keywords { "AB_HIGH_PRECISION" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "AB_HIGH_PRECISION" }
""
}
SubProgram "vulkan " {
Keywords { "AB_HIGH_PRECISION" }
""
}
}
}
 Pass {
  Name "frag_lensFlare1"
  ZTest Always
  ZWrite Off
  Cull Off
  GpuProgramID 309675
Program "vp" {
SubProgram "d3d11 " {
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in  vec4 in_POSITION0;
in  vec2 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _LensFlareGhostsParams;
uniform 	vec4 _LensFlareHaloParams;
uniform 	float _LensFlareGhostChrDistortion;
uniform 	float _LensFlareHaloChrDistortion;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BloomRange;
uniform 	vec4 _MainTex_TexelSize;
UNITY_LOCATION(0) uniform  sampler2D _LensFlareLUT;
UNITY_LOCATION(1) uniform  sampler2D _MainTex;
in  vec2 vs_TEXCOORD0;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec3 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
vec4 u_xlat6;
float u_xlat7;
vec2 u_xlat14;
vec2 u_xlat15;
vec2 u_xlat16;
float u_xlat21;
float u_xlat22;
void main()
{
    u_xlat0.xy = (-vs_TEXCOORD0.xy) + vec2(0.5, 0.5);
    u_xlat14.xy = u_xlat0.xy * _LensFlareGhostsParams.yy;
    u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * 1.41419995;
    u_xlat0.x = fract(u_xlat0.x);
    u_xlat1.x = dot(u_xlat14.xy, u_xlat14.xy);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat14.xy = u_xlat14.xy * u_xlat1.xx;
    u_xlat1.xy = u_xlat14.xy * _LensFlareHaloParams.yy + vs_TEXCOORD0.xy;
    u_xlat1.xy = fract(u_xlat1.xy);
    u_xlat15.xy = (-u_xlat1.xy) + vec2(0.5, 0.5);
    u_xlat15.x = dot(u_xlat15.xy, u_xlat15.xy);
    u_xlat15.x = sqrt(u_xlat15.x);
    u_xlat15.x = (-u_xlat15.x) * 1.41419995 + 1.0;
    u_xlat15.x = u_xlat15.x * _LensFlareHaloParams.z;
    u_xlat15.x = log2(u_xlat15.x);
    u_xlat15.x = u_xlat15.x * _LensFlareHaloParams.w;
    u_xlat15.x = exp2(u_xlat15.x);
    u_xlat2 = vec4(_LensFlareGhostChrDistortion, _LensFlareGhostChrDistortion, _LensFlareHaloChrDistortion, _LensFlareHaloChrDistortion) * (-_MainTex_TexelSize.xxxx);
    u_xlat16.xy = u_xlat14.xy * u_xlat2.zw + u_xlat1.xy;
    u_xlat16.xy = u_xlat16.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat3 = texture(_MainTex, u_xlat16.xy);
    u_xlat22 = u_xlat3.x * _BloomRange.x;
    u_xlat3.x = u_xlat3.w * u_xlat22;
    u_xlat4 = vec4(_LensFlareGhostChrDistortion, _LensFlareGhostChrDistortion, _LensFlareHaloChrDistortion, _LensFlareHaloChrDistortion) * _MainTex_TexelSize.xxxx;
    u_xlat16.xy = u_xlat14.xy * u_xlat4.zw + u_xlat1.xy;
    u_xlat1.xy = u_xlat1.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat5 = texture(_MainTex, u_xlat1.xy);
    u_xlat1.xy = u_xlat16.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat6 = texture(_MainTex, u_xlat1.xy);
    u_xlat1.x = u_xlat6.z * _BloomRange.x;
    u_xlat3.z = u_xlat6.w * u_xlat1.x;
    u_xlat1.x = u_xlat5.y * _BloomRange.x;
    u_xlat3.y = u_xlat5.w * u_xlat1.x;
    u_xlat1.xyz = u_xlat15.xxx * u_xlat3.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _LensFlareHaloParams.xxx;
    u_xlat0.y = 0.0;
    u_xlat3 = texture(_LensFlareLUT, u_xlat0.xy);
    u_xlat1.xyz = u_xlat1.xyz * u_xlat3.xyz;
    u_xlat0.xy = fract(vs_TEXCOORD0.xy);
    u_xlat2.xy = u_xlat14.xy * u_xlat2.xy + u_xlat0.xy;
    u_xlat14.xy = u_xlat14.xy * u_xlat4.xy + u_xlat0.xy;
    u_xlat14.xy = u_xlat14.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat4 = texture(_MainTex, u_xlat14.xy);
    u_xlat14.xy = u_xlat2.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat2 = texture(_MainTex, u_xlat14.xy);
    u_xlat14.x = u_xlat2.x * _BloomRange.x;
    u_xlat2.x = u_xlat2.w * u_xlat14.x;
    u_xlat14.x = u_xlat4.z * _BloomRange.x;
    u_xlat2.z = u_xlat4.w * u_xlat14.x;
    u_xlat14.xy = (-u_xlat0.xy) + vec2(0.5, 0.5);
    u_xlat0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat4 = texture(_MainTex, u_xlat0.xy);
    u_xlat0.x = dot(u_xlat14.xy, u_xlat14.xy);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.x) * 1.41419995 + 1.0;
    u_xlat0.x = u_xlat0.x * _LensFlareGhostsParams.z;
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _LensFlareGhostsParams.w;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat7 = u_xlat4.y * _BloomRange.x;
    u_xlat2.y = u_xlat4.w * u_xlat7;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat0.xyz = u_xlat3.xyz * u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * _LensFlareGhostsParams.xxx + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.xyz * _BloomRange.yyy;
    u_xlat21 = max(u_xlat0.y, u_xlat0.x);
    u_xlat1.x = max(u_xlat0.z, 9.99999997e-07);
    u_xlat21 = max(u_xlat21, u_xlat1.x);
    u_xlat21 = min(u_xlat21, 1.0);
    u_xlat21 = u_xlat21 * 255.0;
    u_xlat21 = ceil(u_xlat21);
    u_xlat21 = u_xlat21 * 0.00392156886;
    SV_Target0.xyz = u_xlat0.xyz / vec3(u_xlat21);
    SV_Target0.w = u_xlat21;
    return;
}

#endif
"
}
SubProgram "vulkan " {
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 94
; Schema: 0
                                              OpCapability Shader 
                                       %1 = OpExtInstImport "GLSL.std.450" 
                                              OpMemoryModel Logical GLSL450 
                                              OpEntryPoint Vertex %4 "main" %11 %72 %84 %86 
                                              OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                              OpDecorate %11 Location 11 
                                              OpDecorate %16 ArrayStride 16 
                                              OpDecorate %17 ArrayStride 17 
                                              OpMemberDecorate %18 0 Offset 18 
                                              OpMemberDecorate %18 1 Offset 18 
                                              OpDecorate %18 Block 
                                              OpDecorate %20 DescriptorSet 20 
                                              OpDecorate %20 Binding 20 
                                              OpMemberDecorate %70 0 BuiltIn 70 
                                              OpMemberDecorate %70 1 BuiltIn 70 
                                              OpMemberDecorate %70 2 BuiltIn 70 
                                              OpDecorate %70 Block 
                                              OpDecorate vs_TEXCOORD0 Location 84 
                                              OpDecorate %86 Location 86 
                                       %2 = OpTypeVoid 
                                       %3 = OpTypeFunction %2 
                                       %6 = OpTypeFloat 32 
                                       %7 = OpTypeVector %6 4 
                                       %8 = OpTypePointer Private %7 
                        Private f32_4* %9 = OpVariable Private 
                                      %10 = OpTypePointer Input %7 
                         Input f32_4* %11 = OpVariable Input 
                                      %14 = OpTypeInt 32 0 
                                  u32 %15 = OpConstant 4 
                                      %16 = OpTypeArray %7 %15 
                                      %17 = OpTypeArray %7 %15 
                                      %18 = OpTypeStruct %16 %17 
                                      %19 = OpTypePointer Uniform %18 
Uniform struct {f32_4[4]; f32_4[4];}* %20 = OpVariable Uniform 
                                      %21 = OpTypeInt 32 1 
                                  i32 %22 = OpConstant 0 
                                  i32 %23 = OpConstant 1 
                                      %24 = OpTypePointer Uniform %7 
                                  i32 %35 = OpConstant 2 
                                  i32 %44 = OpConstant 3 
                       Private f32_4* %48 = OpVariable Private 
                                  u32 %68 = OpConstant 1 
                                      %69 = OpTypeArray %6 %68 
                                      %70 = OpTypeStruct %7 %6 %69 
                                      %71 = OpTypePointer Output %70 
 Output struct {f32_4; f32; f32[1];}* %72 = OpVariable Output 
                                      %80 = OpTypePointer Output %7 
                                      %82 = OpTypeVector %6 2 
                                      %83 = OpTypePointer Output %82 
               Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                      %85 = OpTypePointer Input %82 
                         Input f32_2* %86 = OpVariable Input 
                                      %88 = OpTypePointer Output %6 
                                  void %4 = OpFunction None %3 
                                       %5 = OpLabel 
                                f32_4 %12 = OpLoad %11 
                                f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                       Uniform f32_4* %25 = OpAccessChain %20 %22 %23 
                                f32_4 %26 = OpLoad %25 
                                f32_4 %27 = OpFMul %13 %26 
                                              OpStore %9 %27 
                       Uniform f32_4* %28 = OpAccessChain %20 %22 %22 
                                f32_4 %29 = OpLoad %28 
                                f32_4 %30 = OpLoad %11 
                                f32_4 %31 = OpVectorShuffle %30 %30 0 0 0 0 
                                f32_4 %32 = OpFMul %29 %31 
                                f32_4 %33 = OpLoad %9 
                                f32_4 %34 = OpFAdd %32 %33 
                                              OpStore %9 %34 
                       Uniform f32_4* %36 = OpAccessChain %20 %22 %35 
                                f32_4 %37 = OpLoad %36 
                                f32_4 %38 = OpLoad %11 
                                f32_4 %39 = OpVectorShuffle %38 %38 2 2 2 2 
                                f32_4 %40 = OpFMul %37 %39 
                                f32_4 %41 = OpLoad %9 
                                f32_4 %42 = OpFAdd %40 %41 
                                              OpStore %9 %42 
                                f32_4 %43 = OpLoad %9 
                       Uniform f32_4* %45 = OpAccessChain %20 %22 %44 
                                f32_4 %46 = OpLoad %45 
                                f32_4 %47 = OpFAdd %43 %46 
                                              OpStore %9 %47 
                                f32_4 %49 = OpLoad %9 
                                f32_4 %50 = OpVectorShuffle %49 %49 1 1 1 1 
                       Uniform f32_4* %51 = OpAccessChain %20 %23 %23 
                                f32_4 %52 = OpLoad %51 
                                f32_4 %53 = OpFMul %50 %52 
                                              OpStore %48 %53 
                       Uniform f32_4* %54 = OpAccessChain %20 %23 %22 
                                f32_4 %55 = OpLoad %54 
                                f32_4 %56 = OpLoad %9 
                                f32_4 %57 = OpVectorShuffle %56 %56 0 0 0 0 
                                f32_4 %58 = OpFMul %55 %57 
                                f32_4 %59 = OpLoad %48 
                                f32_4 %60 = OpFAdd %58 %59 
                                              OpStore %48 %60 
                       Uniform f32_4* %61 = OpAccessChain %20 %23 %35 
                                f32_4 %62 = OpLoad %61 
                                f32_4 %63 = OpLoad %9 
                                f32_4 %64 = OpVectorShuffle %63 %63 2 2 2 2 
                                f32_4 %65 = OpFMul %62 %64 
                                f32_4 %66 = OpLoad %48 
                                f32_4 %67 = OpFAdd %65 %66 
                                              OpStore %48 %67 
                       Uniform f32_4* %73 = OpAccessChain %20 %23 %44 
                                f32_4 %74 = OpLoad %73 
                                f32_4 %75 = OpLoad %9 
                                f32_4 %76 = OpVectorShuffle %75 %75 3 3 3 3 
                                f32_4 %77 = OpFMul %74 %76 
                                f32_4 %78 = OpLoad %48 
                                f32_4 %79 = OpFAdd %77 %78 
                        Output f32_4* %81 = OpAccessChain %72 %22 
                                              OpStore %81 %79 
                                f32_2 %87 = OpLoad %86 
                                              OpStore vs_TEXCOORD0 %87 
                          Output f32* %89 = OpAccessChain %72 %22 %68 
                                  f32 %90 = OpLoad %89 
                                  f32 %91 = OpFNegate %90 
                          Output f32* %92 = OpAccessChain %72 %22 %68 
                                              OpStore %92 %91 
                                              OpReturn
                                              OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 506
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %12 %495 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpDecorate vs_TEXCOORD0 Location 12 
                                                      OpMemberDecorate %25 0 Offset 25 
                                                      OpMemberDecorate %25 1 Offset 25 
                                                      OpMemberDecorate %25 2 Offset 25 
                                                      OpMemberDecorate %25 3 Offset 25 
                                                      OpMemberDecorate %25 4 Offset 25 
                                                      OpMemberDecorate %25 5 Offset 25 
                                                      OpMemberDecorate %25 6 Offset 25 
                                                      OpDecorate %25 Block 
                                                      OpDecorate %27 DescriptorSet 27 
                                                      OpDecorate %27 Binding 27 
                                                      OpDecorate %167 DescriptorSet 167 
                                                      OpDecorate %167 Binding 167 
                                                      OpDecorate %171 DescriptorSet 171 
                                                      OpDecorate %171 Binding 171 
                                                      OpDecorate %282 DescriptorSet 282 
                                                      OpDecorate %282 Binding 282 
                                                      OpDecorate %284 DescriptorSet 284 
                                                      OpDecorate %284 Binding 284 
                                                      OpDecorate %495 Location 495 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 3 
                                               %8 = OpTypePointer Private %7 
                                Private f32_3* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 2 
                                              %11 = OpTypePointer Input %10 
                        Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                          f32 %15 = OpConstant 3.674022E-40 
                                        f32_2 %16 = OpConstantComposite %15 %15 
                                              %20 = OpTypePointer Private %10 
                               Private f32_2* %21 = OpVariable Private 
                                              %24 = OpTypeVector %6 4 
                                              %25 = OpTypeStruct %24 %24 %6 %6 %24 %24 %24 
                                              %26 = OpTypePointer Uniform %25 
Uniform struct {f32_4; f32_4; f32; f32; f32_4; f32_4; f32_4;}* %27 = OpVariable Uniform 
                                              %28 = OpTypeInt 32 1 
                                          i32 %29 = OpConstant 0 
                                              %30 = OpTypePointer Uniform %24 
                                              %40 = OpTypeInt 32 0 
                                          u32 %41 = OpConstant 0 
                                              %42 = OpTypePointer Private %6 
                                          f32 %50 = OpConstant 3.674022E-40 
                               Private f32_3* %57 = OpVariable Private 
                                          i32 %71 = OpConstant 1 
                               Private f32_2* %85 = OpVariable Private 
                                         f32 %102 = OpConstant 3.674022E-40 
                                         u32 %107 = OpConstant 2 
                                             %108 = OpTypePointer Uniform %6 
                                         u32 %119 = OpConstant 3 
                                             %128 = OpTypePointer Private %24 
                              Private f32_4* %129 = OpVariable Private 
                                         i32 %130 = OpConstant 2 
                                         i32 %135 = OpConstant 3 
                                         i32 %141 = OpConstant 6 
                              Private f32_2* %147 = OpVariable Private 
                                         i32 %156 = OpConstant 4 
                                             %165 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                             %166 = OpTypePointer UniformConstant %165 
        UniformConstant read_only Texture2D* %167 = OpVariable UniformConstant 
                                             %169 = OpTypeSampler 
                                             %170 = OpTypePointer UniformConstant %169 
                    UniformConstant sampler* %171 = OpVariable UniformConstant 
                                             %173 = OpTypeSampledImage %165 
                                Private f32* %178 = OpVariable Private 
                                         i32 %181 = OpConstant 5 
                              Private f32_3* %185 = OpVariable Private 
                                         u32 %186 = OpConstant 1 
                              Private f32_4* %192 = OpVariable Private 
                                         f32 %280 = OpConstant 3.674022E-40 
        UniformConstant read_only Texture2D* %282 = OpVariable UniformConstant 
                    UniformConstant sampler* %284 = OpVariable UniformConstant 
                                Private f32* %469 = OpVariable Private 
                                         f32 %477 = OpConstant 3.674022E-40 
                                         f32 %487 = OpConstant 3.674022E-40 
                                         f32 %492 = OpConstant 3.674022E-40 
                                             %494 = OpTypePointer Output %24 
                               Output f32_4* %495 = OpVariable Output 
                                             %503 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_2 %13 = OpLoad vs_TEXCOORD0 
                                        f32_2 %14 = OpFNegate %13 
                                        f32_2 %17 = OpFAdd %14 %16 
                                        f32_3 %18 = OpLoad %9 
                                        f32_3 %19 = OpVectorShuffle %18 %17 3 4 2 
                                                      OpStore %9 %19 
                                        f32_3 %22 = OpLoad %9 
                                        f32_2 %23 = OpVectorShuffle %22 %22 0 1 
                               Uniform f32_4* %31 = OpAccessChain %27 %29 
                                        f32_4 %32 = OpLoad %31 
                                        f32_2 %33 = OpVectorShuffle %32 %32 1 1 
                                        f32_2 %34 = OpFMul %23 %33 
                                                      OpStore %21 %34 
                                        f32_3 %35 = OpLoad %9 
                                        f32_2 %36 = OpVectorShuffle %35 %35 0 1 
                                        f32_3 %37 = OpLoad %9 
                                        f32_2 %38 = OpVectorShuffle %37 %37 0 1 
                                          f32 %39 = OpDot %36 %38 
                                 Private f32* %43 = OpAccessChain %9 %41 
                                                      OpStore %43 %39 
                                 Private f32* %44 = OpAccessChain %9 %41 
                                          f32 %45 = OpLoad %44 
                                          f32 %46 = OpExtInst %1 31 %45 
                                 Private f32* %47 = OpAccessChain %9 %41 
                                                      OpStore %47 %46 
                                 Private f32* %48 = OpAccessChain %9 %41 
                                          f32 %49 = OpLoad %48 
                                          f32 %51 = OpFMul %49 %50 
                                 Private f32* %52 = OpAccessChain %9 %41 
                                                      OpStore %52 %51 
                                 Private f32* %53 = OpAccessChain %9 %41 
                                          f32 %54 = OpLoad %53 
                                          f32 %55 = OpExtInst %1 10 %54 
                                 Private f32* %56 = OpAccessChain %9 %41 
                                                      OpStore %56 %55 
                                        f32_2 %58 = OpLoad %21 
                                        f32_2 %59 = OpLoad %21 
                                          f32 %60 = OpDot %58 %59 
                                 Private f32* %61 = OpAccessChain %57 %41 
                                                      OpStore %61 %60 
                                 Private f32* %62 = OpAccessChain %57 %41 
                                          f32 %63 = OpLoad %62 
                                          f32 %64 = OpExtInst %1 32 %63 
                                 Private f32* %65 = OpAccessChain %57 %41 
                                                      OpStore %65 %64 
                                        f32_2 %66 = OpLoad %21 
                                        f32_3 %67 = OpLoad %57 
                                        f32_2 %68 = OpVectorShuffle %67 %67 0 0 
                                        f32_2 %69 = OpFMul %66 %68 
                                                      OpStore %21 %69 
                                        f32_2 %70 = OpLoad %21 
                               Uniform f32_4* %72 = OpAccessChain %27 %71 
                                        f32_4 %73 = OpLoad %72 
                                        f32_2 %74 = OpVectorShuffle %73 %73 1 1 
                                        f32_2 %75 = OpFMul %70 %74 
                                        f32_2 %76 = OpLoad vs_TEXCOORD0 
                                        f32_2 %77 = OpFAdd %75 %76 
                                        f32_3 %78 = OpLoad %57 
                                        f32_3 %79 = OpVectorShuffle %78 %77 3 4 2 
                                                      OpStore %57 %79 
                                        f32_3 %80 = OpLoad %57 
                                        f32_2 %81 = OpVectorShuffle %80 %80 0 1 
                                        f32_2 %82 = OpExtInst %1 10 %81 
                                        f32_3 %83 = OpLoad %57 
                                        f32_3 %84 = OpVectorShuffle %83 %82 3 4 2 
                                                      OpStore %57 %84 
                                        f32_3 %86 = OpLoad %57 
                                        f32_2 %87 = OpVectorShuffle %86 %86 0 1 
                                        f32_2 %88 = OpFNegate %87 
                                        f32_2 %89 = OpFAdd %88 %16 
                                                      OpStore %85 %89 
                                        f32_2 %90 = OpLoad %85 
                                        f32_2 %91 = OpLoad %85 
                                          f32 %92 = OpDot %90 %91 
                                 Private f32* %93 = OpAccessChain %85 %41 
                                                      OpStore %93 %92 
                                 Private f32* %94 = OpAccessChain %85 %41 
                                          f32 %95 = OpLoad %94 
                                          f32 %96 = OpExtInst %1 31 %95 
                                 Private f32* %97 = OpAccessChain %85 %41 
                                                      OpStore %97 %96 
                                 Private f32* %98 = OpAccessChain %85 %41 
                                          f32 %99 = OpLoad %98 
                                         f32 %100 = OpFNegate %99 
                                         f32 %101 = OpFMul %100 %50 
                                         f32 %103 = OpFAdd %101 %102 
                                Private f32* %104 = OpAccessChain %85 %41 
                                                      OpStore %104 %103 
                                Private f32* %105 = OpAccessChain %85 %41 
                                         f32 %106 = OpLoad %105 
                                Uniform f32* %109 = OpAccessChain %27 %71 %107 
                                         f32 %110 = OpLoad %109 
                                         f32 %111 = OpFMul %106 %110 
                                Private f32* %112 = OpAccessChain %85 %41 
                                                      OpStore %112 %111 
                                Private f32* %113 = OpAccessChain %85 %41 
                                         f32 %114 = OpLoad %113 
                                         f32 %115 = OpExtInst %1 30 %114 
                                Private f32* %116 = OpAccessChain %85 %41 
                                                      OpStore %116 %115 
                                Private f32* %117 = OpAccessChain %85 %41 
                                         f32 %118 = OpLoad %117 
                                Uniform f32* %120 = OpAccessChain %27 %71 %119 
                                         f32 %121 = OpLoad %120 
                                         f32 %122 = OpFMul %118 %121 
                                Private f32* %123 = OpAccessChain %85 %41 
                                                      OpStore %123 %122 
                                Private f32* %124 = OpAccessChain %85 %41 
                                         f32 %125 = OpLoad %124 
                                         f32 %126 = OpExtInst %1 29 %125 
                                Private f32* %127 = OpAccessChain %85 %41 
                                                      OpStore %127 %126 
                                Uniform f32* %131 = OpAccessChain %27 %130 
                                         f32 %132 = OpLoad %131 
                                Uniform f32* %133 = OpAccessChain %27 %130 
                                         f32 %134 = OpLoad %133 
                                Uniform f32* %136 = OpAccessChain %27 %135 
                                         f32 %137 = OpLoad %136 
                                Uniform f32* %138 = OpAccessChain %27 %135 
                                         f32 %139 = OpLoad %138 
                                       f32_4 %140 = OpCompositeConstruct %132 %134 %137 %139 
                              Uniform f32_4* %142 = OpAccessChain %27 %141 
                                       f32_4 %143 = OpLoad %142 
                                       f32_4 %144 = OpVectorShuffle %143 %143 0 0 0 0 
                                       f32_4 %145 = OpFNegate %144 
                                       f32_4 %146 = OpFMul %140 %145 
                                                      OpStore %129 %146 
                                       f32_2 %148 = OpLoad %21 
                                       f32_4 %149 = OpLoad %129 
                                       f32_2 %150 = OpVectorShuffle %149 %149 2 3 
                                       f32_2 %151 = OpFMul %148 %150 
                                       f32_3 %152 = OpLoad %57 
                                       f32_2 %153 = OpVectorShuffle %152 %152 0 1 
                                       f32_2 %154 = OpFAdd %151 %153 
                                                      OpStore %147 %154 
                                       f32_2 %155 = OpLoad %147 
                              Uniform f32_4* %157 = OpAccessChain %27 %156 
                                       f32_4 %158 = OpLoad %157 
                                       f32_2 %159 = OpVectorShuffle %158 %158 0 1 
                                       f32_2 %160 = OpFMul %155 %159 
                              Uniform f32_4* %161 = OpAccessChain %27 %156 
                                       f32_4 %162 = OpLoad %161 
                                       f32_2 %163 = OpVectorShuffle %162 %162 2 3 
                                       f32_2 %164 = OpFAdd %160 %163 
                                                      OpStore %147 %164 
                         read_only Texture2D %168 = OpLoad %167 
                                     sampler %172 = OpLoad %171 
                  read_only Texture2DSampled %174 = OpSampledImage %168 %172 
                                       f32_2 %175 = OpLoad %147 
                                       f32_4 %176 = OpImageSampleImplicitLod %174 %175 
                                       f32_2 %177 = OpVectorShuffle %176 %176 0 3 
                                                      OpStore %147 %177 
                                Private f32* %179 = OpAccessChain %147 %41 
                                         f32 %180 = OpLoad %179 
                                Uniform f32* %182 = OpAccessChain %27 %181 %41 
                                         f32 %183 = OpLoad %182 
                                         f32 %184 = OpFMul %180 %183 
                                                      OpStore %178 %184 
                                Private f32* %187 = OpAccessChain %147 %186 
                                         f32 %188 = OpLoad %187 
                                         f32 %189 = OpLoad %178 
                                         f32 %190 = OpFMul %188 %189 
                                Private f32* %191 = OpAccessChain %185 %41 
                                                      OpStore %191 %190 
                                Uniform f32* %193 = OpAccessChain %27 %130 
                                         f32 %194 = OpLoad %193 
                                Uniform f32* %195 = OpAccessChain %27 %130 
                                         f32 %196 = OpLoad %195 
                                Uniform f32* %197 = OpAccessChain %27 %135 
                                         f32 %198 = OpLoad %197 
                                Uniform f32* %199 = OpAccessChain %27 %135 
                                         f32 %200 = OpLoad %199 
                                       f32_4 %201 = OpCompositeConstruct %194 %196 %198 %200 
                              Uniform f32_4* %202 = OpAccessChain %27 %141 
                                       f32_4 %203 = OpLoad %202 
                                       f32_4 %204 = OpVectorShuffle %203 %203 0 0 0 0 
                                       f32_4 %205 = OpFMul %201 %204 
                                                      OpStore %192 %205 
                                       f32_2 %206 = OpLoad %21 
                                       f32_4 %207 = OpLoad %192 
                                       f32_2 %208 = OpVectorShuffle %207 %207 2 3 
                                       f32_2 %209 = OpFMul %206 %208 
                                       f32_3 %210 = OpLoad %57 
                                       f32_2 %211 = OpVectorShuffle %210 %210 0 1 
                                       f32_2 %212 = OpFAdd %209 %211 
                                                      OpStore %147 %212 
                                       f32_3 %213 = OpLoad %57 
                                       f32_2 %214 = OpVectorShuffle %213 %213 0 1 
                              Uniform f32_4* %215 = OpAccessChain %27 %156 
                                       f32_4 %216 = OpLoad %215 
                                       f32_2 %217 = OpVectorShuffle %216 %216 0 1 
                                       f32_2 %218 = OpFMul %214 %217 
                              Uniform f32_4* %219 = OpAccessChain %27 %156 
                                       f32_4 %220 = OpLoad %219 
                                       f32_2 %221 = OpVectorShuffle %220 %220 2 3 
                                       f32_2 %222 = OpFAdd %218 %221 
                                       f32_3 %223 = OpLoad %57 
                                       f32_3 %224 = OpVectorShuffle %223 %222 3 4 2 
                                                      OpStore %57 %224 
                         read_only Texture2D %225 = OpLoad %167 
                                     sampler %226 = OpLoad %171 
                  read_only Texture2DSampled %227 = OpSampledImage %225 %226 
                                       f32_3 %228 = OpLoad %57 
                                       f32_2 %229 = OpVectorShuffle %228 %228 0 1 
                                       f32_4 %230 = OpImageSampleImplicitLod %227 %229 
                                       f32_2 %231 = OpVectorShuffle %230 %230 1 3 
                                       f32_3 %232 = OpLoad %57 
                                       f32_3 %233 = OpVectorShuffle %232 %231 3 4 2 
                                                      OpStore %57 %233 
                                       f32_2 %234 = OpLoad %147 
                              Uniform f32_4* %235 = OpAccessChain %27 %156 
                                       f32_4 %236 = OpLoad %235 
                                       f32_2 %237 = OpVectorShuffle %236 %236 0 1 
                                       f32_2 %238 = OpFMul %234 %237 
                              Uniform f32_4* %239 = OpAccessChain %27 %156 
                                       f32_4 %240 = OpLoad %239 
                                       f32_2 %241 = OpVectorShuffle %240 %240 2 3 
                                       f32_2 %242 = OpFAdd %238 %241 
                                                      OpStore %147 %242 
                         read_only Texture2D %243 = OpLoad %167 
                                     sampler %244 = OpLoad %171 
                  read_only Texture2DSampled %245 = OpSampledImage %243 %244 
                                       f32_2 %246 = OpLoad %147 
                                       f32_4 %247 = OpImageSampleImplicitLod %245 %246 
                                       f32_2 %248 = OpVectorShuffle %247 %247 2 3 
                                                      OpStore %147 %248 
                                Private f32* %249 = OpAccessChain %147 %41 
                                         f32 %250 = OpLoad %249 
                                Uniform f32* %251 = OpAccessChain %27 %181 %41 
                                         f32 %252 = OpLoad %251 
                                         f32 %253 = OpFMul %250 %252 
                                                      OpStore %178 %253 
                                Private f32* %254 = OpAccessChain %147 %186 
                                         f32 %255 = OpLoad %254 
                                         f32 %256 = OpLoad %178 
                                         f32 %257 = OpFMul %255 %256 
                                Private f32* %258 = OpAccessChain %185 %107 
                                                      OpStore %258 %257 
                                Private f32* %259 = OpAccessChain %57 %41 
                                         f32 %260 = OpLoad %259 
                                Uniform f32* %261 = OpAccessChain %27 %181 %41 
                                         f32 %262 = OpLoad %261 
                                         f32 %263 = OpFMul %260 %262 
                                Private f32* %264 = OpAccessChain %57 %41 
                                                      OpStore %264 %263 
                                Private f32* %265 = OpAccessChain %57 %186 
                                         f32 %266 = OpLoad %265 
                                Private f32* %267 = OpAccessChain %57 %41 
                                         f32 %268 = OpLoad %267 
                                         f32 %269 = OpFMul %266 %268 
                                Private f32* %270 = OpAccessChain %185 %186 
                                                      OpStore %270 %269 
                                       f32_2 %271 = OpLoad %85 
                                       f32_3 %272 = OpVectorShuffle %271 %271 0 0 0 
                                       f32_3 %273 = OpLoad %185 
                                       f32_3 %274 = OpFMul %272 %273 
                                                      OpStore %57 %274 
                                       f32_3 %275 = OpLoad %57 
                              Uniform f32_4* %276 = OpAccessChain %27 %71 
                                       f32_4 %277 = OpLoad %276 
                                       f32_3 %278 = OpVectorShuffle %277 %277 0 0 0 
                                       f32_3 %279 = OpFMul %275 %278 
                                                      OpStore %57 %279 
                                Private f32* %281 = OpAccessChain %9 %186 
                                                      OpStore %281 %280 
                         read_only Texture2D %283 = OpLoad %282 
                                     sampler %285 = OpLoad %284 
                  read_only Texture2DSampled %286 = OpSampledImage %283 %285 
                                       f32_3 %287 = OpLoad %9 
                                       f32_2 %288 = OpVectorShuffle %287 %287 0 1 
                                       f32_4 %289 = OpImageSampleImplicitLod %286 %288 
                                       f32_3 %290 = OpVectorShuffle %289 %289 0 1 2 
                                                      OpStore %185 %290 
                                       f32_3 %291 = OpLoad %57 
                                       f32_3 %292 = OpLoad %185 
                                       f32_3 %293 = OpFMul %291 %292 
                                                      OpStore %57 %293 
                                       f32_2 %294 = OpLoad vs_TEXCOORD0 
                                       f32_2 %295 = OpExtInst %1 10 %294 
                                       f32_3 %296 = OpLoad %9 
                                       f32_3 %297 = OpVectorShuffle %296 %295 3 4 2 
                                                      OpStore %9 %297 
                                       f32_2 %298 = OpLoad %21 
                                       f32_4 %299 = OpLoad %129 
                                       f32_2 %300 = OpVectorShuffle %299 %299 0 1 
                                       f32_2 %301 = OpFMul %298 %300 
                                       f32_3 %302 = OpLoad %9 
                                       f32_2 %303 = OpVectorShuffle %302 %302 0 1 
                                       f32_2 %304 = OpFAdd %301 %303 
                                       f32_4 %305 = OpLoad %129 
                                       f32_4 %306 = OpVectorShuffle %305 %304 4 5 2 3 
                                                      OpStore %129 %306 
                                       f32_2 %307 = OpLoad %21 
                                       f32_4 %308 = OpLoad %192 
                                       f32_2 %309 = OpVectorShuffle %308 %308 0 1 
                                       f32_2 %310 = OpFMul %307 %309 
                                       f32_3 %311 = OpLoad %9 
                                       f32_2 %312 = OpVectorShuffle %311 %311 0 1 
                                       f32_2 %313 = OpFAdd %310 %312 
                                                      OpStore %21 %313 
                                       f32_2 %314 = OpLoad %21 
                              Uniform f32_4* %315 = OpAccessChain %27 %156 
                                       f32_4 %316 = OpLoad %315 
                                       f32_2 %317 = OpVectorShuffle %316 %316 0 1 
                                       f32_2 %318 = OpFMul %314 %317 
                              Uniform f32_4* %319 = OpAccessChain %27 %156 
                                       f32_4 %320 = OpLoad %319 
                                       f32_2 %321 = OpVectorShuffle %320 %320 2 3 
                                       f32_2 %322 = OpFAdd %318 %321 
                                                      OpStore %21 %322 
                         read_only Texture2D %323 = OpLoad %167 
                                     sampler %324 = OpLoad %171 
                  read_only Texture2DSampled %325 = OpSampledImage %323 %324 
                                       f32_2 %326 = OpLoad %21 
                                       f32_4 %327 = OpImageSampleImplicitLod %325 %326 
                                       f32_2 %328 = OpVectorShuffle %327 %327 2 3 
                                                      OpStore %21 %328 
                                       f32_4 %329 = OpLoad %129 
                                       f32_2 %330 = OpVectorShuffle %329 %329 0 1 
                              Uniform f32_4* %331 = OpAccessChain %27 %156 
                                       f32_4 %332 = OpLoad %331 
                                       f32_2 %333 = OpVectorShuffle %332 %332 0 1 
                                       f32_2 %334 = OpFMul %330 %333 
                              Uniform f32_4* %335 = OpAccessChain %27 %156 
                                       f32_4 %336 = OpLoad %335 
                                       f32_2 %337 = OpVectorShuffle %336 %336 2 3 
                                       f32_2 %338 = OpFAdd %334 %337 
                                       f32_4 %339 = OpLoad %129 
                                       f32_4 %340 = OpVectorShuffle %339 %338 4 5 2 3 
                                                      OpStore %129 %340 
                         read_only Texture2D %341 = OpLoad %167 
                                     sampler %342 = OpLoad %171 
                  read_only Texture2DSampled %343 = OpSampledImage %341 %342 
                                       f32_4 %344 = OpLoad %129 
                                       f32_2 %345 = OpVectorShuffle %344 %344 0 1 
                                       f32_4 %346 = OpImageSampleImplicitLod %343 %345 
                                       f32_2 %347 = OpVectorShuffle %346 %346 0 3 
                                       f32_4 %348 = OpLoad %129 
                                       f32_4 %349 = OpVectorShuffle %348 %347 4 5 2 3 
                                                      OpStore %129 %349 
                                Private f32* %350 = OpAccessChain %129 %41 
                                         f32 %351 = OpLoad %350 
                                Uniform f32* %352 = OpAccessChain %27 %181 %41 
                                         f32 %353 = OpLoad %352 
                                         f32 %354 = OpFMul %351 %353 
                                                      OpStore %178 %354 
                                Private f32* %355 = OpAccessChain %129 %186 
                                         f32 %356 = OpLoad %355 
                                         f32 %357 = OpLoad %178 
                                         f32 %358 = OpFMul %356 %357 
                                Private f32* %359 = OpAccessChain %129 %41 
                                                      OpStore %359 %358 
                                Private f32* %360 = OpAccessChain %21 %41 
                                         f32 %361 = OpLoad %360 
                                Uniform f32* %362 = OpAccessChain %27 %181 %41 
                                         f32 %363 = OpLoad %362 
                                         f32 %364 = OpFMul %361 %363 
                                Private f32* %365 = OpAccessChain %21 %41 
                                                      OpStore %365 %364 
                                Private f32* %366 = OpAccessChain %21 %186 
                                         f32 %367 = OpLoad %366 
                                Private f32* %368 = OpAccessChain %21 %41 
                                         f32 %369 = OpLoad %368 
                                         f32 %370 = OpFMul %367 %369 
                                Private f32* %371 = OpAccessChain %129 %107 
                                                      OpStore %371 %370 
                                       f32_3 %372 = OpLoad %9 
                                       f32_2 %373 = OpVectorShuffle %372 %372 0 1 
                                       f32_2 %374 = OpFNegate %373 
                                       f32_2 %375 = OpFAdd %374 %16 
                                                      OpStore %21 %375 
                                       f32_3 %376 = OpLoad %9 
                                       f32_2 %377 = OpVectorShuffle %376 %376 0 1 
                              Uniform f32_4* %378 = OpAccessChain %27 %156 
                                       f32_4 %379 = OpLoad %378 
                                       f32_2 %380 = OpVectorShuffle %379 %379 0 1 
                                       f32_2 %381 = OpFMul %377 %380 
                              Uniform f32_4* %382 = OpAccessChain %27 %156 
                                       f32_4 %383 = OpLoad %382 
                                       f32_2 %384 = OpVectorShuffle %383 %383 2 3 
                                       f32_2 %385 = OpFAdd %381 %384 
                                       f32_3 %386 = OpLoad %9 
                                       f32_3 %387 = OpVectorShuffle %386 %385 3 4 2 
                                                      OpStore %9 %387 
                         read_only Texture2D %388 = OpLoad %167 
                                     sampler %389 = OpLoad %171 
                  read_only Texture2DSampled %390 = OpSampledImage %388 %389 
                                       f32_3 %391 = OpLoad %9 
                                       f32_2 %392 = OpVectorShuffle %391 %391 0 1 
                                       f32_4 %393 = OpImageSampleImplicitLod %390 %392 
                                       f32_2 %394 = OpVectorShuffle %393 %393 1 3 
                                       f32_3 %395 = OpLoad %9 
                                       f32_3 %396 = OpVectorShuffle %395 %394 3 4 2 
                                                      OpStore %9 %396 
                                       f32_2 %397 = OpLoad %21 
                                       f32_2 %398 = OpLoad %21 
                                         f32 %399 = OpDot %397 %398 
                                Private f32* %400 = OpAccessChain %21 %41 
                                                      OpStore %400 %399 
                                Private f32* %401 = OpAccessChain %21 %41 
                                         f32 %402 = OpLoad %401 
                                         f32 %403 = OpExtInst %1 31 %402 
                                Private f32* %404 = OpAccessChain %21 %41 
                                                      OpStore %404 %403 
                                Private f32* %405 = OpAccessChain %21 %41 
                                         f32 %406 = OpLoad %405 
                                         f32 %407 = OpFNegate %406 
                                         f32 %408 = OpFMul %407 %50 
                                         f32 %409 = OpFAdd %408 %102 
                                Private f32* %410 = OpAccessChain %21 %41 
                                                      OpStore %410 %409 
                                Private f32* %411 = OpAccessChain %21 %41 
                                         f32 %412 = OpLoad %411 
                                Uniform f32* %413 = OpAccessChain %27 %29 %107 
                                         f32 %414 = OpLoad %413 
                                         f32 %415 = OpFMul %412 %414 
                                Private f32* %416 = OpAccessChain %21 %41 
                                                      OpStore %416 %415 
                                Private f32* %417 = OpAccessChain %21 %41 
                                         f32 %418 = OpLoad %417 
                                         f32 %419 = OpExtInst %1 30 %418 
                                Private f32* %420 = OpAccessChain %21 %41 
                                                      OpStore %420 %419 
                                Private f32* %421 = OpAccessChain %21 %41 
                                         f32 %422 = OpLoad %421 
                                Uniform f32* %423 = OpAccessChain %27 %29 %119 
                                         f32 %424 = OpLoad %423 
                                         f32 %425 = OpFMul %422 %424 
                                Private f32* %426 = OpAccessChain %21 %41 
                                                      OpStore %426 %425 
                                Private f32* %427 = OpAccessChain %21 %41 
                                         f32 %428 = OpLoad %427 
                                         f32 %429 = OpExtInst %1 29 %428 
                                Private f32* %430 = OpAccessChain %21 %41 
                                                      OpStore %430 %429 
                                Private f32* %431 = OpAccessChain %21 %41 
                                         f32 %432 = OpLoad %431 
                                Private f32* %433 = OpAccessChain %21 %41 
                                         f32 %434 = OpLoad %433 
                                         f32 %435 = OpFMul %432 %434 
                                Private f32* %436 = OpAccessChain %21 %41 
                                                      OpStore %436 %435 
                                Private f32* %437 = OpAccessChain %9 %41 
                                         f32 %438 = OpLoad %437 
                                Uniform f32* %439 = OpAccessChain %27 %181 %41 
                                         f32 %440 = OpLoad %439 
                                         f32 %441 = OpFMul %438 %440 
                                Private f32* %442 = OpAccessChain %9 %41 
                                                      OpStore %442 %441 
                                Private f32* %443 = OpAccessChain %9 %186 
                                         f32 %444 = OpLoad %443 
                                Private f32* %445 = OpAccessChain %9 %41 
                                         f32 %446 = OpLoad %445 
                                         f32 %447 = OpFMul %444 %446 
                                Private f32* %448 = OpAccessChain %129 %186 
                                                      OpStore %448 %447 
                                       f32_2 %449 = OpLoad %21 
                                       f32_3 %450 = OpVectorShuffle %449 %449 0 0 0 
                                       f32_4 %451 = OpLoad %129 
                                       f32_3 %452 = OpVectorShuffle %451 %451 0 1 2 
                                       f32_3 %453 = OpFMul %450 %452 
                                                      OpStore %9 %453 
                                       f32_3 %454 = OpLoad %185 
                                       f32_3 %455 = OpLoad %9 
                                       f32_3 %456 = OpFMul %454 %455 
                                                      OpStore %9 %456 
                                       f32_3 %457 = OpLoad %9 
                              Uniform f32_4* %458 = OpAccessChain %27 %29 
                                       f32_4 %459 = OpLoad %458 
                                       f32_3 %460 = OpVectorShuffle %459 %459 0 0 0 
                                       f32_3 %461 = OpFMul %457 %460 
                                       f32_3 %462 = OpLoad %57 
                                       f32_3 %463 = OpFAdd %461 %462 
                                                      OpStore %9 %463 
                                       f32_3 %464 = OpLoad %9 
                              Uniform f32_4* %465 = OpAccessChain %27 %181 
                                       f32_4 %466 = OpLoad %465 
                                       f32_3 %467 = OpVectorShuffle %466 %466 1 1 1 
                                       f32_3 %468 = OpFMul %464 %467 
                                                      OpStore %9 %468 
                                Private f32* %470 = OpAccessChain %9 %186 
                                         f32 %471 = OpLoad %470 
                                Private f32* %472 = OpAccessChain %9 %41 
                                         f32 %473 = OpLoad %472 
                                         f32 %474 = OpExtInst %1 40 %471 %473 
                                                      OpStore %469 %474 
                                Private f32* %475 = OpAccessChain %9 %107 
                                         f32 %476 = OpLoad %475 
                                         f32 %478 = OpExtInst %1 40 %476 %477 
                                Private f32* %479 = OpAccessChain %57 %41 
                                                      OpStore %479 %478 
                                         f32 %480 = OpLoad %469 
                                Private f32* %481 = OpAccessChain %57 %41 
                                         f32 %482 = OpLoad %481 
                                         f32 %483 = OpExtInst %1 40 %480 %482 
                                                      OpStore %469 %483 
                                         f32 %484 = OpLoad %469 
                                         f32 %485 = OpExtInst %1 37 %484 %102 
                                                      OpStore %469 %485 
                                         f32 %486 = OpLoad %469 
                                         f32 %488 = OpFMul %486 %487 
                                                      OpStore %469 %488 
                                         f32 %489 = OpLoad %469 
                                         f32 %490 = OpExtInst %1 9 %489 
                                                      OpStore %469 %490 
                                         f32 %491 = OpLoad %469 
                                         f32 %493 = OpFMul %491 %492 
                                                      OpStore %469 %493 
                                       f32_3 %496 = OpLoad %9 
                                         f32 %497 = OpLoad %469 
                                       f32_3 %498 = OpCompositeConstruct %497 %497 %497 
                                       f32_3 %499 = OpFDiv %496 %498 
                                       f32_4 %500 = OpLoad %495 
                                       f32_4 %501 = OpVectorShuffle %500 %499 4 5 6 3 
                                                      OpStore %495 %501 
                                         f32 %502 = OpLoad %469 
                                 Output f32* %504 = OpAccessChain %495 %119 
                                                      OpStore %504 %502 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "AB_HIGH_PRECISION" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "AB_HIGH_PRECISION" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in  vec4 in_POSITION0;
in  vec2 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _LensFlareGhostsParams;
uniform 	vec4 _LensFlareHaloParams;
uniform 	float _LensFlareGhostChrDistortion;
uniform 	float _LensFlareHaloChrDistortion;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _MainTex_TexelSize;
UNITY_LOCATION(0) uniform  sampler2D _LensFlareLUT;
UNITY_LOCATION(1) uniform  sampler2D _MainTex;
in  vec2 vs_TEXCOORD0;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec3 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
vec2 u_xlat12;
vec2 u_xlat13;
vec2 u_xlat14;
void main()
{
    u_xlat0.xy = (-vs_TEXCOORD0.xy) + vec2(0.5, 0.5);
    u_xlat12.xy = u_xlat0.xy * _LensFlareGhostsParams.yy;
    u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * 1.41419995;
    u_xlat0.x = fract(u_xlat0.x);
    u_xlat1.x = dot(u_xlat12.xy, u_xlat12.xy);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat12.xy = u_xlat12.xy * u_xlat1.xx;
    u_xlat1.xy = u_xlat12.xy * _LensFlareHaloParams.yy + vs_TEXCOORD0.xy;
    u_xlat1.xy = fract(u_xlat1.xy);
    u_xlat13.xy = (-u_xlat1.xy) + vec2(0.5, 0.5);
    u_xlat13.x = dot(u_xlat13.xy, u_xlat13.xy);
    u_xlat13.x = sqrt(u_xlat13.x);
    u_xlat13.x = (-u_xlat13.x) * 1.41419995 + 1.0;
    u_xlat13.x = u_xlat13.x * _LensFlareHaloParams.z;
    u_xlat13.x = log2(u_xlat13.x);
    u_xlat13.x = u_xlat13.x * _LensFlareHaloParams.w;
    u_xlat13.x = exp2(u_xlat13.x);
    u_xlat2 = vec4(_LensFlareGhostChrDistortion, _LensFlareGhostChrDistortion, _LensFlareHaloChrDistortion, _LensFlareHaloChrDistortion) * (-_MainTex_TexelSize.xxxx);
    u_xlat14.xy = u_xlat12.xy * u_xlat2.zw + u_xlat1.xy;
    u_xlat14.xy = u_xlat14.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat3 = texture(_MainTex, u_xlat14.xy);
    u_xlat4 = vec4(_LensFlareGhostChrDistortion, _LensFlareGhostChrDistortion, _LensFlareHaloChrDistortion, _LensFlareHaloChrDistortion) * _MainTex_TexelSize.xxxx;
    u_xlat14.xy = u_xlat12.xy * u_xlat4.zw + u_xlat1.xy;
    u_xlat1.xy = u_xlat1.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat5 = texture(_MainTex, u_xlat1.xy);
    u_xlat3.y = u_xlat5.y;
    u_xlat1.xy = u_xlat14.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat5 = texture(_MainTex, u_xlat1.xy);
    u_xlat3.z = u_xlat5.z;
    u_xlat1.xyz = u_xlat13.xxx * u_xlat3.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _LensFlareHaloParams.xxx;
    u_xlat0.y = 0.0;
    u_xlat3 = texture(_LensFlareLUT, u_xlat0.xy);
    u_xlat1.xyz = u_xlat1.xyz * u_xlat3.xyz;
    u_xlat0.xy = fract(vs_TEXCOORD0.xy);
    u_xlat2.xy = u_xlat12.xy * u_xlat2.xy + u_xlat0.xy;
    u_xlat12.xy = u_xlat12.xy * u_xlat4.xy + u_xlat0.xy;
    u_xlat12.xy = u_xlat12.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat4 = texture(_MainTex, u_xlat12.xy);
    u_xlat12.xy = u_xlat2.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat2 = texture(_MainTex, u_xlat12.xy);
    u_xlat4.x = u_xlat2.x;
    u_xlat12.xy = (-u_xlat0.xy) + vec2(0.5, 0.5);
    u_xlat0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat2 = texture(_MainTex, u_xlat0.xy);
    u_xlat4.y = u_xlat2.y;
    u_xlat0.x = dot(u_xlat12.xy, u_xlat12.xy);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.x) * 1.41419995 + 1.0;
    u_xlat0.x = u_xlat0.x * _LensFlareGhostsParams.z;
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _LensFlareGhostsParams.w;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat4.xyz;
    u_xlat0.xyz = u_xlat3.xyz * u_xlat0.xyz;
    SV_Target0.xyz = u_xlat0.xyz * _LensFlareGhostsParams.xxx + u_xlat1.xyz;
    SV_Target0.w = 0.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "AB_HIGH_PRECISION" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 94
; Schema: 0
                                              OpCapability Shader 
                                       %1 = OpExtInstImport "GLSL.std.450" 
                                              OpMemoryModel Logical GLSL450 
                                              OpEntryPoint Vertex %4 "main" %11 %72 %84 %86 
                                              OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                              OpDecorate %11 Location 11 
                                              OpDecorate %16 ArrayStride 16 
                                              OpDecorate %17 ArrayStride 17 
                                              OpMemberDecorate %18 0 Offset 18 
                                              OpMemberDecorate %18 1 Offset 18 
                                              OpDecorate %18 Block 
                                              OpDecorate %20 DescriptorSet 20 
                                              OpDecorate %20 Binding 20 
                                              OpMemberDecorate %70 0 BuiltIn 70 
                                              OpMemberDecorate %70 1 BuiltIn 70 
                                              OpMemberDecorate %70 2 BuiltIn 70 
                                              OpDecorate %70 Block 
                                              OpDecorate vs_TEXCOORD0 Location 84 
                                              OpDecorate %86 Location 86 
                                       %2 = OpTypeVoid 
                                       %3 = OpTypeFunction %2 
                                       %6 = OpTypeFloat 32 
                                       %7 = OpTypeVector %6 4 
                                       %8 = OpTypePointer Private %7 
                        Private f32_4* %9 = OpVariable Private 
                                      %10 = OpTypePointer Input %7 
                         Input f32_4* %11 = OpVariable Input 
                                      %14 = OpTypeInt 32 0 
                                  u32 %15 = OpConstant 4 
                                      %16 = OpTypeArray %7 %15 
                                      %17 = OpTypeArray %7 %15 
                                      %18 = OpTypeStruct %16 %17 
                                      %19 = OpTypePointer Uniform %18 
Uniform struct {f32_4[4]; f32_4[4];}* %20 = OpVariable Uniform 
                                      %21 = OpTypeInt 32 1 
                                  i32 %22 = OpConstant 0 
                                  i32 %23 = OpConstant 1 
                                      %24 = OpTypePointer Uniform %7 
                                  i32 %35 = OpConstant 2 
                                  i32 %44 = OpConstant 3 
                       Private f32_4* %48 = OpVariable Private 
                                  u32 %68 = OpConstant 1 
                                      %69 = OpTypeArray %6 %68 
                                      %70 = OpTypeStruct %7 %6 %69 
                                      %71 = OpTypePointer Output %70 
 Output struct {f32_4; f32; f32[1];}* %72 = OpVariable Output 
                                      %80 = OpTypePointer Output %7 
                                      %82 = OpTypeVector %6 2 
                                      %83 = OpTypePointer Output %82 
               Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                      %85 = OpTypePointer Input %82 
                         Input f32_2* %86 = OpVariable Input 
                                      %88 = OpTypePointer Output %6 
                                  void %4 = OpFunction None %3 
                                       %5 = OpLabel 
                                f32_4 %12 = OpLoad %11 
                                f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                       Uniform f32_4* %25 = OpAccessChain %20 %22 %23 
                                f32_4 %26 = OpLoad %25 
                                f32_4 %27 = OpFMul %13 %26 
                                              OpStore %9 %27 
                       Uniform f32_4* %28 = OpAccessChain %20 %22 %22 
                                f32_4 %29 = OpLoad %28 
                                f32_4 %30 = OpLoad %11 
                                f32_4 %31 = OpVectorShuffle %30 %30 0 0 0 0 
                                f32_4 %32 = OpFMul %29 %31 
                                f32_4 %33 = OpLoad %9 
                                f32_4 %34 = OpFAdd %32 %33 
                                              OpStore %9 %34 
                       Uniform f32_4* %36 = OpAccessChain %20 %22 %35 
                                f32_4 %37 = OpLoad %36 
                                f32_4 %38 = OpLoad %11 
                                f32_4 %39 = OpVectorShuffle %38 %38 2 2 2 2 
                                f32_4 %40 = OpFMul %37 %39 
                                f32_4 %41 = OpLoad %9 
                                f32_4 %42 = OpFAdd %40 %41 
                                              OpStore %9 %42 
                                f32_4 %43 = OpLoad %9 
                       Uniform f32_4* %45 = OpAccessChain %20 %22 %44 
                                f32_4 %46 = OpLoad %45 
                                f32_4 %47 = OpFAdd %43 %46 
                                              OpStore %9 %47 
                                f32_4 %49 = OpLoad %9 
                                f32_4 %50 = OpVectorShuffle %49 %49 1 1 1 1 
                       Uniform f32_4* %51 = OpAccessChain %20 %23 %23 
                                f32_4 %52 = OpLoad %51 
                                f32_4 %53 = OpFMul %50 %52 
                                              OpStore %48 %53 
                       Uniform f32_4* %54 = OpAccessChain %20 %23 %22 
                                f32_4 %55 = OpLoad %54 
                                f32_4 %56 = OpLoad %9 
                                f32_4 %57 = OpVectorShuffle %56 %56 0 0 0 0 
                                f32_4 %58 = OpFMul %55 %57 
                                f32_4 %59 = OpLoad %48 
                                f32_4 %60 = OpFAdd %58 %59 
                                              OpStore %48 %60 
                       Uniform f32_4* %61 = OpAccessChain %20 %23 %35 
                                f32_4 %62 = OpLoad %61 
                                f32_4 %63 = OpLoad %9 
                                f32_4 %64 = OpVectorShuffle %63 %63 2 2 2 2 
                                f32_4 %65 = OpFMul %62 %64 
                                f32_4 %66 = OpLoad %48 
                                f32_4 %67 = OpFAdd %65 %66 
                                              OpStore %48 %67 
                       Uniform f32_4* %73 = OpAccessChain %20 %23 %44 
                                f32_4 %74 = OpLoad %73 
                                f32_4 %75 = OpLoad %9 
                                f32_4 %76 = OpVectorShuffle %75 %75 3 3 3 3 
                                f32_4 %77 = OpFMul %74 %76 
                                f32_4 %78 = OpLoad %48 
                                f32_4 %79 = OpFAdd %77 %78 
                        Output f32_4* %81 = OpAccessChain %72 %22 
                                              OpStore %81 %79 
                                f32_2 %87 = OpLoad %86 
                                              OpStore vs_TEXCOORD0 %87 
                          Output f32* %89 = OpAccessChain %72 %22 %68 
                                  f32 %90 = OpLoad %89 
                                  f32 %91 = OpFNegate %90 
                          Output f32* %92 = OpAccessChain %72 %22 %68 
                                              OpStore %92 %91 
                                              OpReturn
                                              OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 403
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %12 %390 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpDecorate vs_TEXCOORD0 Location 12 
                                                      OpMemberDecorate %25 0 Offset 25 
                                                      OpMemberDecorate %25 1 Offset 25 
                                                      OpMemberDecorate %25 2 Offset 25 
                                                      OpMemberDecorate %25 3 Offset 25 
                                                      OpMemberDecorate %25 4 Offset 25 
                                                      OpMemberDecorate %25 5 Offset 25 
                                                      OpDecorate %25 Block 
                                                      OpDecorate %27 DescriptorSet 27 
                                                      OpDecorate %27 Binding 27 
                                                      OpDecorate %168 DescriptorSet 168 
                                                      OpDecorate %168 Binding 168 
                                                      OpDecorate %172 DescriptorSet 172 
                                                      OpDecorate %172 Binding 172 
                                                      OpDecorate %252 DescriptorSet 252 
                                                      OpDecorate %252 Binding 252 
                                                      OpDecorate %254 DescriptorSet 254 
                                                      OpDecorate %254 Binding 254 
                                                      OpDecorate %390 Location 390 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 3 
                                               %8 = OpTypePointer Private %7 
                                Private f32_3* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 2 
                                              %11 = OpTypePointer Input %10 
                        Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                          f32 %15 = OpConstant 3.674022E-40 
                                        f32_2 %16 = OpConstantComposite %15 %15 
                                              %20 = OpTypePointer Private %10 
                               Private f32_2* %21 = OpVariable Private 
                                              %24 = OpTypeVector %6 4 
                                              %25 = OpTypeStruct %24 %24 %6 %6 %24 %24 
                                              %26 = OpTypePointer Uniform %25 
Uniform struct {f32_4; f32_4; f32; f32; f32_4; f32_4;}* %27 = OpVariable Uniform 
                                              %28 = OpTypeInt 32 1 
                                          i32 %29 = OpConstant 0 
                                              %30 = OpTypePointer Uniform %24 
                                              %40 = OpTypeInt 32 0 
                                          u32 %41 = OpConstant 0 
                                              %42 = OpTypePointer Private %6 
                                          f32 %50 = OpConstant 3.674022E-40 
                               Private f32_3* %57 = OpVariable Private 
                                          i32 %71 = OpConstant 1 
                               Private f32_2* %85 = OpVariable Private 
                                         f32 %102 = OpConstant 3.674022E-40 
                                         u32 %107 = OpConstant 2 
                                             %108 = OpTypePointer Uniform %6 
                                         u32 %119 = OpConstant 3 
                                             %128 = OpTypePointer Private %24 
                              Private f32_4* %129 = OpVariable Private 
                                         i32 %130 = OpConstant 2 
                                         i32 %135 = OpConstant 3 
                                         i32 %141 = OpConstant 5 
                              Private f32_2* %147 = OpVariable Private 
                                         i32 %156 = OpConstant 4 
                              Private f32_3* %165 = OpVariable Private 
                                             %166 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                             %167 = OpTypePointer UniformConstant %166 
        UniformConstant read_only Texture2D* %168 = OpVariable UniformConstant 
                                             %170 = OpTypeSampler 
                                             %171 = OpTypePointer UniformConstant %170 
                    UniformConstant sampler* %172 = OpVariable UniformConstant 
                                             %174 = OpTypeSampledImage %166 
                              Private f32_4* %180 = OpVariable Private 
                                         u32 %219 = OpConstant 1 
                                         f32 %250 = OpConstant 3.674022E-40 
        UniformConstant read_only Texture2D* %252 = OpVariable UniformConstant 
                    UniformConstant sampler* %254 = OpVariable UniformConstant 
                                             %389 = OpTypePointer Output %24 
                               Output f32_4* %390 = OpVariable Output 
                                             %400 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_2 %13 = OpLoad vs_TEXCOORD0 
                                        f32_2 %14 = OpFNegate %13 
                                        f32_2 %17 = OpFAdd %14 %16 
                                        f32_3 %18 = OpLoad %9 
                                        f32_3 %19 = OpVectorShuffle %18 %17 3 4 2 
                                                      OpStore %9 %19 
                                        f32_3 %22 = OpLoad %9 
                                        f32_2 %23 = OpVectorShuffle %22 %22 0 1 
                               Uniform f32_4* %31 = OpAccessChain %27 %29 
                                        f32_4 %32 = OpLoad %31 
                                        f32_2 %33 = OpVectorShuffle %32 %32 1 1 
                                        f32_2 %34 = OpFMul %23 %33 
                                                      OpStore %21 %34 
                                        f32_3 %35 = OpLoad %9 
                                        f32_2 %36 = OpVectorShuffle %35 %35 0 1 
                                        f32_3 %37 = OpLoad %9 
                                        f32_2 %38 = OpVectorShuffle %37 %37 0 1 
                                          f32 %39 = OpDot %36 %38 
                                 Private f32* %43 = OpAccessChain %9 %41 
                                                      OpStore %43 %39 
                                 Private f32* %44 = OpAccessChain %9 %41 
                                          f32 %45 = OpLoad %44 
                                          f32 %46 = OpExtInst %1 31 %45 
                                 Private f32* %47 = OpAccessChain %9 %41 
                                                      OpStore %47 %46 
                                 Private f32* %48 = OpAccessChain %9 %41 
                                          f32 %49 = OpLoad %48 
                                          f32 %51 = OpFMul %49 %50 
                                 Private f32* %52 = OpAccessChain %9 %41 
                                                      OpStore %52 %51 
                                 Private f32* %53 = OpAccessChain %9 %41 
                                          f32 %54 = OpLoad %53 
                                          f32 %55 = OpExtInst %1 10 %54 
                                 Private f32* %56 = OpAccessChain %9 %41 
                                                      OpStore %56 %55 
                                        f32_2 %58 = OpLoad %21 
                                        f32_2 %59 = OpLoad %21 
                                          f32 %60 = OpDot %58 %59 
                                 Private f32* %61 = OpAccessChain %57 %41 
                                                      OpStore %61 %60 
                                 Private f32* %62 = OpAccessChain %57 %41 
                                          f32 %63 = OpLoad %62 
                                          f32 %64 = OpExtInst %1 32 %63 
                                 Private f32* %65 = OpAccessChain %57 %41 
                                                      OpStore %65 %64 
                                        f32_2 %66 = OpLoad %21 
                                        f32_3 %67 = OpLoad %57 
                                        f32_2 %68 = OpVectorShuffle %67 %67 0 0 
                                        f32_2 %69 = OpFMul %66 %68 
                                                      OpStore %21 %69 
                                        f32_2 %70 = OpLoad %21 
                               Uniform f32_4* %72 = OpAccessChain %27 %71 
                                        f32_4 %73 = OpLoad %72 
                                        f32_2 %74 = OpVectorShuffle %73 %73 1 1 
                                        f32_2 %75 = OpFMul %70 %74 
                                        f32_2 %76 = OpLoad vs_TEXCOORD0 
                                        f32_2 %77 = OpFAdd %75 %76 
                                        f32_3 %78 = OpLoad %57 
                                        f32_3 %79 = OpVectorShuffle %78 %77 3 4 2 
                                                      OpStore %57 %79 
                                        f32_3 %80 = OpLoad %57 
                                        f32_2 %81 = OpVectorShuffle %80 %80 0 1 
                                        f32_2 %82 = OpExtInst %1 10 %81 
                                        f32_3 %83 = OpLoad %57 
                                        f32_3 %84 = OpVectorShuffle %83 %82 3 4 2 
                                                      OpStore %57 %84 
                                        f32_3 %86 = OpLoad %57 
                                        f32_2 %87 = OpVectorShuffle %86 %86 0 1 
                                        f32_2 %88 = OpFNegate %87 
                                        f32_2 %89 = OpFAdd %88 %16 
                                                      OpStore %85 %89 
                                        f32_2 %90 = OpLoad %85 
                                        f32_2 %91 = OpLoad %85 
                                          f32 %92 = OpDot %90 %91 
                                 Private f32* %93 = OpAccessChain %85 %41 
                                                      OpStore %93 %92 
                                 Private f32* %94 = OpAccessChain %85 %41 
                                          f32 %95 = OpLoad %94 
                                          f32 %96 = OpExtInst %1 31 %95 
                                 Private f32* %97 = OpAccessChain %85 %41 
                                                      OpStore %97 %96 
                                 Private f32* %98 = OpAccessChain %85 %41 
                                          f32 %99 = OpLoad %98 
                                         f32 %100 = OpFNegate %99 
                                         f32 %101 = OpFMul %100 %50 
                                         f32 %103 = OpFAdd %101 %102 
                                Private f32* %104 = OpAccessChain %85 %41 
                                                      OpStore %104 %103 
                                Private f32* %105 = OpAccessChain %85 %41 
                                         f32 %106 = OpLoad %105 
                                Uniform f32* %109 = OpAccessChain %27 %71 %107 
                                         f32 %110 = OpLoad %109 
                                         f32 %111 = OpFMul %106 %110 
                                Private f32* %112 = OpAccessChain %85 %41 
                                                      OpStore %112 %111 
                                Private f32* %113 = OpAccessChain %85 %41 
                                         f32 %114 = OpLoad %113 
                                         f32 %115 = OpExtInst %1 30 %114 
                                Private f32* %116 = OpAccessChain %85 %41 
                                                      OpStore %116 %115 
                                Private f32* %117 = OpAccessChain %85 %41 
                                         f32 %118 = OpLoad %117 
                                Uniform f32* %120 = OpAccessChain %27 %71 %119 
                                         f32 %121 = OpLoad %120 
                                         f32 %122 = OpFMul %118 %121 
                                Private f32* %123 = OpAccessChain %85 %41 
                                                      OpStore %123 %122 
                                Private f32* %124 = OpAccessChain %85 %41 
                                         f32 %125 = OpLoad %124 
                                         f32 %126 = OpExtInst %1 29 %125 
                                Private f32* %127 = OpAccessChain %85 %41 
                                                      OpStore %127 %126 
                                Uniform f32* %131 = OpAccessChain %27 %130 
                                         f32 %132 = OpLoad %131 
                                Uniform f32* %133 = OpAccessChain %27 %130 
                                         f32 %134 = OpLoad %133 
                                Uniform f32* %136 = OpAccessChain %27 %135 
                                         f32 %137 = OpLoad %136 
                                Uniform f32* %138 = OpAccessChain %27 %135 
                                         f32 %139 = OpLoad %138 
                                       f32_4 %140 = OpCompositeConstruct %132 %134 %137 %139 
                              Uniform f32_4* %142 = OpAccessChain %27 %141 
                                       f32_4 %143 = OpLoad %142 
                                       f32_4 %144 = OpVectorShuffle %143 %143 0 0 0 0 
                                       f32_4 %145 = OpFNegate %144 
                                       f32_4 %146 = OpFMul %140 %145 
                                                      OpStore %129 %146 
                                       f32_2 %148 = OpLoad %21 
                                       f32_4 %149 = OpLoad %129 
                                       f32_2 %150 = OpVectorShuffle %149 %149 2 3 
                                       f32_2 %151 = OpFMul %148 %150 
                                       f32_3 %152 = OpLoad %57 
                                       f32_2 %153 = OpVectorShuffle %152 %152 0 1 
                                       f32_2 %154 = OpFAdd %151 %153 
                                                      OpStore %147 %154 
                                       f32_2 %155 = OpLoad %147 
                              Uniform f32_4* %157 = OpAccessChain %27 %156 
                                       f32_4 %158 = OpLoad %157 
                                       f32_2 %159 = OpVectorShuffle %158 %158 0 1 
                                       f32_2 %160 = OpFMul %155 %159 
                              Uniform f32_4* %161 = OpAccessChain %27 %156 
                                       f32_4 %162 = OpLoad %161 
                                       f32_2 %163 = OpVectorShuffle %162 %162 2 3 
                                       f32_2 %164 = OpFAdd %160 %163 
                                                      OpStore %147 %164 
                         read_only Texture2D %169 = OpLoad %168 
                                     sampler %173 = OpLoad %172 
                  read_only Texture2DSampled %175 = OpSampledImage %169 %173 
                                       f32_2 %176 = OpLoad %147 
                                       f32_4 %177 = OpImageSampleImplicitLod %175 %176 
                                         f32 %178 = OpCompositeExtract %177 0 
                                Private f32* %179 = OpAccessChain %165 %41 
                                                      OpStore %179 %178 
                                Uniform f32* %181 = OpAccessChain %27 %130 
                                         f32 %182 = OpLoad %181 
                                Uniform f32* %183 = OpAccessChain %27 %130 
                                         f32 %184 = OpLoad %183 
                                Uniform f32* %185 = OpAccessChain %27 %135 
                                         f32 %186 = OpLoad %185 
                                Uniform f32* %187 = OpAccessChain %27 %135 
                                         f32 %188 = OpLoad %187 
                                       f32_4 %189 = OpCompositeConstruct %182 %184 %186 %188 
                              Uniform f32_4* %190 = OpAccessChain %27 %141 
                                       f32_4 %191 = OpLoad %190 
                                       f32_4 %192 = OpVectorShuffle %191 %191 0 0 0 0 
                                       f32_4 %193 = OpFMul %189 %192 
                                                      OpStore %180 %193 
                                       f32_2 %194 = OpLoad %21 
                                       f32_4 %195 = OpLoad %180 
                                       f32_2 %196 = OpVectorShuffle %195 %195 2 3 
                                       f32_2 %197 = OpFMul %194 %196 
                                       f32_3 %198 = OpLoad %57 
                                       f32_2 %199 = OpVectorShuffle %198 %198 0 1 
                                       f32_2 %200 = OpFAdd %197 %199 
                                                      OpStore %147 %200 
                                       f32_3 %201 = OpLoad %57 
                                       f32_2 %202 = OpVectorShuffle %201 %201 0 1 
                              Uniform f32_4* %203 = OpAccessChain %27 %156 
                                       f32_4 %204 = OpLoad %203 
                                       f32_2 %205 = OpVectorShuffle %204 %204 0 1 
                                       f32_2 %206 = OpFMul %202 %205 
                              Uniform f32_4* %207 = OpAccessChain %27 %156 
                                       f32_4 %208 = OpLoad %207 
                                       f32_2 %209 = OpVectorShuffle %208 %208 2 3 
                                       f32_2 %210 = OpFAdd %206 %209 
                                       f32_3 %211 = OpLoad %57 
                                       f32_3 %212 = OpVectorShuffle %211 %210 3 4 2 
                                                      OpStore %57 %212 
                         read_only Texture2D %213 = OpLoad %168 
                                     sampler %214 = OpLoad %172 
                  read_only Texture2DSampled %215 = OpSampledImage %213 %214 
                                       f32_3 %216 = OpLoad %57 
                                       f32_2 %217 = OpVectorShuffle %216 %216 0 1 
                                       f32_4 %218 = OpImageSampleImplicitLod %215 %217 
                                         f32 %220 = OpCompositeExtract %218 1 
                                Private f32* %221 = OpAccessChain %165 %219 
                                                      OpStore %221 %220 
                                       f32_2 %222 = OpLoad %147 
                              Uniform f32_4* %223 = OpAccessChain %27 %156 
                                       f32_4 %224 = OpLoad %223 
                                       f32_2 %225 = OpVectorShuffle %224 %224 0 1 
                                       f32_2 %226 = OpFMul %222 %225 
                              Uniform f32_4* %227 = OpAccessChain %27 %156 
                                       f32_4 %228 = OpLoad %227 
                                       f32_2 %229 = OpVectorShuffle %228 %228 2 3 
                                       f32_2 %230 = OpFAdd %226 %229 
                                       f32_3 %231 = OpLoad %57 
                                       f32_3 %232 = OpVectorShuffle %231 %230 3 4 2 
                                                      OpStore %57 %232 
                         read_only Texture2D %233 = OpLoad %168 
                                     sampler %234 = OpLoad %172 
                  read_only Texture2DSampled %235 = OpSampledImage %233 %234 
                                       f32_3 %236 = OpLoad %57 
                                       f32_2 %237 = OpVectorShuffle %236 %236 0 1 
                                       f32_4 %238 = OpImageSampleImplicitLod %235 %237 
                                         f32 %239 = OpCompositeExtract %238 2 
                                Private f32* %240 = OpAccessChain %165 %107 
                                                      OpStore %240 %239 
                                       f32_2 %241 = OpLoad %85 
                                       f32_3 %242 = OpVectorShuffle %241 %241 0 0 0 
                                       f32_3 %243 = OpLoad %165 
                                       f32_3 %244 = OpFMul %242 %243 
                                                      OpStore %57 %244 
                                       f32_3 %245 = OpLoad %57 
                              Uniform f32_4* %246 = OpAccessChain %27 %71 
                                       f32_4 %247 = OpLoad %246 
                                       f32_3 %248 = OpVectorShuffle %247 %247 0 0 0 
                                       f32_3 %249 = OpFMul %245 %248 
                                                      OpStore %57 %249 
                                Private f32* %251 = OpAccessChain %9 %219 
                                                      OpStore %251 %250 
                         read_only Texture2D %253 = OpLoad %252 
                                     sampler %255 = OpLoad %254 
                  read_only Texture2DSampled %256 = OpSampledImage %253 %255 
                                       f32_3 %257 = OpLoad %9 
                                       f32_2 %258 = OpVectorShuffle %257 %257 0 1 
                                       f32_4 %259 = OpImageSampleImplicitLod %256 %258 
                                       f32_3 %260 = OpVectorShuffle %259 %259 0 1 2 
                                                      OpStore %165 %260 
                                       f32_3 %261 = OpLoad %57 
                                       f32_3 %262 = OpLoad %165 
                                       f32_3 %263 = OpFMul %261 %262 
                                                      OpStore %57 %263 
                                       f32_2 %264 = OpLoad vs_TEXCOORD0 
                                       f32_2 %265 = OpExtInst %1 10 %264 
                                       f32_3 %266 = OpLoad %9 
                                       f32_3 %267 = OpVectorShuffle %266 %265 3 4 2 
                                                      OpStore %9 %267 
                                       f32_2 %268 = OpLoad %21 
                                       f32_4 %269 = OpLoad %129 
                                       f32_2 %270 = OpVectorShuffle %269 %269 0 1 
                                       f32_2 %271 = OpFMul %268 %270 
                                       f32_3 %272 = OpLoad %9 
                                       f32_2 %273 = OpVectorShuffle %272 %272 0 1 
                                       f32_2 %274 = OpFAdd %271 %273 
                                       f32_4 %275 = OpLoad %129 
                                       f32_4 %276 = OpVectorShuffle %275 %274 4 5 2 3 
                                                      OpStore %129 %276 
                                       f32_2 %277 = OpLoad %21 
                                       f32_4 %278 = OpLoad %180 
                                       f32_2 %279 = OpVectorShuffle %278 %278 0 1 
                                       f32_2 %280 = OpFMul %277 %279 
                                       f32_3 %281 = OpLoad %9 
                                       f32_2 %282 = OpVectorShuffle %281 %281 0 1 
                                       f32_2 %283 = OpFAdd %280 %282 
                                                      OpStore %21 %283 
                                       f32_2 %284 = OpLoad %21 
                              Uniform f32_4* %285 = OpAccessChain %27 %156 
                                       f32_4 %286 = OpLoad %285 
                                       f32_2 %287 = OpVectorShuffle %286 %286 0 1 
                                       f32_2 %288 = OpFMul %284 %287 
                              Uniform f32_4* %289 = OpAccessChain %27 %156 
                                       f32_4 %290 = OpLoad %289 
                                       f32_2 %291 = OpVectorShuffle %290 %290 2 3 
                                       f32_2 %292 = OpFAdd %288 %291 
                                                      OpStore %21 %292 
                         read_only Texture2D %293 = OpLoad %168 
                                     sampler %294 = OpLoad %172 
                  read_only Texture2DSampled %295 = OpSampledImage %293 %294 
                                       f32_2 %296 = OpLoad %21 
                                       f32_4 %297 = OpImageSampleImplicitLod %295 %296 
                                         f32 %298 = OpCompositeExtract %297 2 
                                Private f32* %299 = OpAccessChain %180 %107 
                                                      OpStore %299 %298 
                                       f32_4 %300 = OpLoad %129 
                                       f32_2 %301 = OpVectorShuffle %300 %300 0 1 
                              Uniform f32_4* %302 = OpAccessChain %27 %156 
                                       f32_4 %303 = OpLoad %302 
                                       f32_2 %304 = OpVectorShuffle %303 %303 0 1 
                                       f32_2 %305 = OpFMul %301 %304 
                              Uniform f32_4* %306 = OpAccessChain %27 %156 
                                       f32_4 %307 = OpLoad %306 
                                       f32_2 %308 = OpVectorShuffle %307 %307 2 3 
                                       f32_2 %309 = OpFAdd %305 %308 
                                                      OpStore %21 %309 
                         read_only Texture2D %310 = OpLoad %168 
                                     sampler %311 = OpLoad %172 
                  read_only Texture2DSampled %312 = OpSampledImage %310 %311 
                                       f32_2 %313 = OpLoad %21 
                                       f32_4 %314 = OpImageSampleImplicitLod %312 %313 
                                         f32 %315 = OpCompositeExtract %314 0 
                                Private f32* %316 = OpAccessChain %180 %41 
                                                      OpStore %316 %315 
                                       f32_3 %317 = OpLoad %9 
                                       f32_2 %318 = OpVectorShuffle %317 %317 0 1 
                                       f32_2 %319 = OpFNegate %318 
                                       f32_2 %320 = OpFAdd %319 %16 
                                                      OpStore %21 %320 
                                       f32_3 %321 = OpLoad %9 
                                       f32_2 %322 = OpVectorShuffle %321 %321 0 1 
                              Uniform f32_4* %323 = OpAccessChain %27 %156 
                                       f32_4 %324 = OpLoad %323 
                                       f32_2 %325 = OpVectorShuffle %324 %324 0 1 
                                       f32_2 %326 = OpFMul %322 %325 
                              Uniform f32_4* %327 = OpAccessChain %27 %156 
                                       f32_4 %328 = OpLoad %327 
                                       f32_2 %329 = OpVectorShuffle %328 %328 2 3 
                                       f32_2 %330 = OpFAdd %326 %329 
                                       f32_3 %331 = OpLoad %9 
                                       f32_3 %332 = OpVectorShuffle %331 %330 3 4 2 
                                                      OpStore %9 %332 
                         read_only Texture2D %333 = OpLoad %168 
                                     sampler %334 = OpLoad %172 
                  read_only Texture2DSampled %335 = OpSampledImage %333 %334 
                                       f32_3 %336 = OpLoad %9 
                                       f32_2 %337 = OpVectorShuffle %336 %336 0 1 
                                       f32_4 %338 = OpImageSampleImplicitLod %335 %337 
                                         f32 %339 = OpCompositeExtract %338 1 
                                Private f32* %340 = OpAccessChain %180 %219 
                                                      OpStore %340 %339 
                                       f32_2 %341 = OpLoad %21 
                                       f32_2 %342 = OpLoad %21 
                                         f32 %343 = OpDot %341 %342 
                                Private f32* %344 = OpAccessChain %9 %41 
                                                      OpStore %344 %343 
                                Private f32* %345 = OpAccessChain %9 %41 
                                         f32 %346 = OpLoad %345 
                                         f32 %347 = OpExtInst %1 31 %346 
                                Private f32* %348 = OpAccessChain %9 %41 
                                                      OpStore %348 %347 
                                Private f32* %349 = OpAccessChain %9 %41 
                                         f32 %350 = OpLoad %349 
                                         f32 %351 = OpFNegate %350 
                                         f32 %352 = OpFMul %351 %50 
                                         f32 %353 = OpFAdd %352 %102 
                                Private f32* %354 = OpAccessChain %9 %41 
                                                      OpStore %354 %353 
                                Private f32* %355 = OpAccessChain %9 %41 
                                         f32 %356 = OpLoad %355 
                                Uniform f32* %357 = OpAccessChain %27 %29 %107 
                                         f32 %358 = OpLoad %357 
                                         f32 %359 = OpFMul %356 %358 
                                Private f32* %360 = OpAccessChain %9 %41 
                                                      OpStore %360 %359 
                                Private f32* %361 = OpAccessChain %9 %41 
                                         f32 %362 = OpLoad %361 
                                         f32 %363 = OpExtInst %1 30 %362 
                                Private f32* %364 = OpAccessChain %9 %41 
                                                      OpStore %364 %363 
                                Private f32* %365 = OpAccessChain %9 %41 
                                         f32 %366 = OpLoad %365 
                                Uniform f32* %367 = OpAccessChain %27 %29 %119 
                                         f32 %368 = OpLoad %367 
                                         f32 %369 = OpFMul %366 %368 
                                Private f32* %370 = OpAccessChain %9 %41 
                                                      OpStore %370 %369 
                                Private f32* %371 = OpAccessChain %9 %41 
                                         f32 %372 = OpLoad %371 
                                         f32 %373 = OpExtInst %1 29 %372 
                                Private f32* %374 = OpAccessChain %9 %41 
                                                      OpStore %374 %373 
                                Private f32* %375 = OpAccessChain %9 %41 
                                         f32 %376 = OpLoad %375 
                                Private f32* %377 = OpAccessChain %9 %41 
                                         f32 %378 = OpLoad %377 
                                         f32 %379 = OpFMul %376 %378 
                                Private f32* %380 = OpAccessChain %9 %41 
                                                      OpStore %380 %379 
                                       f32_3 %381 = OpLoad %9 
                                       f32_3 %382 = OpVectorShuffle %381 %381 0 0 0 
                                       f32_4 %383 = OpLoad %180 
                                       f32_3 %384 = OpVectorShuffle %383 %383 0 1 2 
                                       f32_3 %385 = OpFMul %382 %384 
                                                      OpStore %9 %385 
                                       f32_3 %386 = OpLoad %165 
                                       f32_3 %387 = OpLoad %9 
                                       f32_3 %388 = OpFMul %386 %387 
                                                      OpStore %9 %388 
                                       f32_3 %391 = OpLoad %9 
                              Uniform f32_4* %392 = OpAccessChain %27 %29 
                                       f32_4 %393 = OpLoad %392 
                                       f32_3 %394 = OpVectorShuffle %393 %393 0 0 0 
                                       f32_3 %395 = OpFMul %391 %394 
                                       f32_3 %396 = OpLoad %57 
                                       f32_3 %397 = OpFAdd %395 %396 
                                       f32_4 %398 = OpLoad %390 
                                       f32_4 %399 = OpVectorShuffle %398 %397 4 5 6 3 
                                                      OpStore %390 %399 
                                 Output f32* %401 = OpAccessChain %390 %119 
                                                      OpStore %401 %250 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
}
Program "fp" {
SubProgram "d3d11 " {
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
""
}
SubProgram "vulkan " {
""
}
SubProgram "d3d11 " {
Keywords { "AB_HIGH_PRECISION" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "AB_HIGH_PRECISION" }
""
}
SubProgram "vulkan " {
Keywords { "AB_HIGH_PRECISION" }
""
}
}
}
 Pass {
  Name "frag_lensFlare2"
  ZTest Always
  ZWrite Off
  Cull Off
  GpuProgramID 370052
Program "vp" {
SubProgram "d3d11 " {
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in  vec4 in_POSITION0;
in  vec2 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _LensFlareGhostsParams;
uniform 	vec4 _LensFlareHaloParams;
uniform 	float _LensFlareGhostChrDistortion;
uniform 	float _LensFlareHaloChrDistortion;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BloomRange;
uniform 	vec4 _MainTex_TexelSize;
UNITY_LOCATION(0) uniform  sampler2D _LensFlareLUT;
UNITY_LOCATION(1) uniform  sampler2D _MainTex;
in  vec2 vs_TEXCOORD0;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
vec4 u_xlat6;
vec4 u_xlat7;
vec2 u_xlat9;
vec2 u_xlat16;
float u_xlat24;
float u_xlat25;
float u_xlat26;
void main()
{
    u_xlat0.xy = (-vs_TEXCOORD0.xy) + vec2(0.5, 0.5);
    u_xlat16.xy = u_xlat0.xy * _LensFlareGhostsParams.yy + vs_TEXCOORD0.xy;
    u_xlat16.xy = fract(u_xlat16.xy);
    u_xlat1.xy = (-u_xlat16.xy) + vec2(0.5, 0.5);
    u_xlat1.x = dot(u_xlat1.xy, u_xlat1.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlat1.x = (-u_xlat1.x) * 1.41419995 + 1.0;
    u_xlat1.x = u_xlat1.x * _LensFlareGhostsParams.z;
    u_xlat1.x = log2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _LensFlareGhostsParams.w;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat9.xy = u_xlat16.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat2 = texture(_MainTex, u_xlat9.xy);
    u_xlat9.x = u_xlat2.y * _BloomRange.x;
    u_xlat2.y = u_xlat2.w * u_xlat9.x;
    u_xlat1.yz = u_xlat0.xy * _LensFlareGhostsParams.yy;
    u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * 1.41419995;
    u_xlat0.x = fract(u_xlat0.x);
    u_xlat25 = dot(u_xlat1.yz, u_xlat1.yz);
    u_xlat1.w = inversesqrt(u_xlat25);
    u_xlat1.xyz = u_xlat1.xww * u_xlat1.xyz;
    u_xlat3 = vec4(_LensFlareGhostChrDistortion, _LensFlareGhostChrDistortion, _LensFlareHaloChrDistortion, _LensFlareHaloChrDistortion) * (-_MainTex_TexelSize.xxxx);
    u_xlat4.xy = u_xlat1.yz * u_xlat3.xy + u_xlat16.xy;
    u_xlat4.xy = u_xlat4.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat4 = texture(_MainTex, u_xlat4.xy);
    u_xlat25 = u_xlat4.x * _BloomRange.x;
    u_xlat2.x = u_xlat4.w * u_xlat25;
    u_xlat4 = vec4(_LensFlareGhostChrDistortion, _LensFlareGhostChrDistortion, _LensFlareHaloChrDistortion, _LensFlareHaloChrDistortion) * _MainTex_TexelSize.xxxx;
    u_xlat16.xy = u_xlat1.yz * u_xlat4.xy + u_xlat16.xy;
    u_xlat16.xy = u_xlat16.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat5 = texture(_MainTex, u_xlat16.xy);
    u_xlat16.x = u_xlat5.z * _BloomRange.x;
    u_xlat2.z = u_xlat5.w * u_xlat16.x;
    u_xlat2.xyz = u_xlat1.xxx * u_xlat2.xyz;
    u_xlat0.y = 0.0;
    u_xlat0 = texture(_LensFlareLUT, u_xlat0.xy);
    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz * _LensFlareGhostsParams.xxx;
    u_xlat1.xw = fract(vs_TEXCOORD0.xy);
    u_xlat5.xy = (-u_xlat1.xw) + vec2(0.5, 0.5);
    u_xlat24 = dot(u_xlat5.xy, u_xlat5.xy);
    u_xlat24 = sqrt(u_xlat24);
    u_xlat24 = (-u_xlat24) * 1.41419995 + 1.0;
    u_xlat24 = u_xlat24 * _LensFlareGhostsParams.z;
    u_xlat24 = log2(u_xlat24);
    u_xlat24 = u_xlat24 * _LensFlareGhostsParams.w;
    u_xlat24 = exp2(u_xlat24);
    u_xlat24 = u_xlat24 * u_xlat24;
    u_xlat3.xy = u_xlat1.yz * u_xlat3.xy + u_xlat1.xw;
    u_xlat3.xy = u_xlat3.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat5 = texture(_MainTex, u_xlat3.xy);
    u_xlat26 = u_xlat5.x * _BloomRange.x;
    u_xlat5.x = u_xlat5.w * u_xlat26;
    u_xlat3.xy = u_xlat1.yz * u_xlat4.xy + u_xlat1.xw;
    u_xlat1.xw = u_xlat1.xw * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat6 = texture(_MainTex, u_xlat1.xw);
    u_xlat1.xw = u_xlat3.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat7 = texture(_MainTex, u_xlat1.xw);
    u_xlat1.x = u_xlat7.z * _BloomRange.x;
    u_xlat5.z = u_xlat7.w * u_xlat1.x;
    u_xlat1.x = u_xlat6.y * _BloomRange.x;
    u_xlat5.y = u_xlat6.w * u_xlat1.x;
    u_xlat5.xyz = vec3(u_xlat24) * u_xlat5.xyz;
    u_xlat5.xyz = u_xlat0.xyz * u_xlat5.xyz;
    u_xlat2.xyz = u_xlat5.xyz * _LensFlareGhostsParams.xxx + u_xlat2.xyz;
    u_xlat1.xw = u_xlat1.yz * _LensFlareHaloParams.yy + vs_TEXCOORD0.xy;
    u_xlat1.xw = fract(u_xlat1.xw);
    u_xlat3.xy = u_xlat1.yz * u_xlat3.zw + u_xlat1.xw;
    u_xlat9.xy = u_xlat1.yz * u_xlat4.zw + u_xlat1.xw;
    u_xlat9.xy = u_xlat9.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat4 = texture(_MainTex, u_xlat9.xy);
    u_xlat9.xy = u_xlat3.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat3 = texture(_MainTex, u_xlat9.xy);
    u_xlat24 = u_xlat3.x * _BloomRange.x;
    u_xlat3.x = u_xlat3.w * u_xlat24;
    u_xlat24 = u_xlat4.z * _BloomRange.x;
    u_xlat3.z = u_xlat4.w * u_xlat24;
    u_xlat9.xy = (-u_xlat1.xw) + vec2(0.5, 0.5);
    u_xlat1.xw = u_xlat1.xw * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat4 = texture(_MainTex, u_xlat1.xw);
    u_xlat24 = dot(u_xlat9.xy, u_xlat9.xy);
    u_xlat24 = sqrt(u_xlat24);
    u_xlat24 = (-u_xlat24) * 1.41419995 + 1.0;
    u_xlat24 = u_xlat24 * _LensFlareHaloParams.z;
    u_xlat24 = log2(u_xlat24);
    u_xlat24 = u_xlat24 * _LensFlareHaloParams.w;
    u_xlat24 = exp2(u_xlat24);
    u_xlat1.x = u_xlat4.y * _BloomRange.x;
    u_xlat3.y = u_xlat4.w * u_xlat1.x;
    u_xlat1.xyz = vec3(u_xlat24) * u_xlat3.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _LensFlareHaloParams.xxx;
    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xyz + u_xlat2.xyz;
    u_xlat0.xyz = u_xlat0.xyz * _BloomRange.yyy;
    u_xlat24 = max(u_xlat0.y, u_xlat0.x);
    u_xlat1.x = max(u_xlat0.z, 9.99999997e-07);
    u_xlat24 = max(u_xlat24, u_xlat1.x);
    u_xlat24 = min(u_xlat24, 1.0);
    u_xlat24 = u_xlat24 * 255.0;
    u_xlat24 = ceil(u_xlat24);
    u_xlat24 = u_xlat24 * 0.00392156886;
    SV_Target0.xyz = u_xlat0.xyz / vec3(u_xlat24);
    SV_Target0.w = u_xlat24;
    return;
}

#endif
"
}
SubProgram "vulkan " {
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 94
; Schema: 0
                                              OpCapability Shader 
                                       %1 = OpExtInstImport "GLSL.std.450" 
                                              OpMemoryModel Logical GLSL450 
                                              OpEntryPoint Vertex %4 "main" %11 %72 %84 %86 
                                              OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                              OpDecorate %11 Location 11 
                                              OpDecorate %16 ArrayStride 16 
                                              OpDecorate %17 ArrayStride 17 
                                              OpMemberDecorate %18 0 Offset 18 
                                              OpMemberDecorate %18 1 Offset 18 
                                              OpDecorate %18 Block 
                                              OpDecorate %20 DescriptorSet 20 
                                              OpDecorate %20 Binding 20 
                                              OpMemberDecorate %70 0 BuiltIn 70 
                                              OpMemberDecorate %70 1 BuiltIn 70 
                                              OpMemberDecorate %70 2 BuiltIn 70 
                                              OpDecorate %70 Block 
                                              OpDecorate vs_TEXCOORD0 Location 84 
                                              OpDecorate %86 Location 86 
                                       %2 = OpTypeVoid 
                                       %3 = OpTypeFunction %2 
                                       %6 = OpTypeFloat 32 
                                       %7 = OpTypeVector %6 4 
                                       %8 = OpTypePointer Private %7 
                        Private f32_4* %9 = OpVariable Private 
                                      %10 = OpTypePointer Input %7 
                         Input f32_4* %11 = OpVariable Input 
                                      %14 = OpTypeInt 32 0 
                                  u32 %15 = OpConstant 4 
                                      %16 = OpTypeArray %7 %15 
                                      %17 = OpTypeArray %7 %15 
                                      %18 = OpTypeStruct %16 %17 
                                      %19 = OpTypePointer Uniform %18 
Uniform struct {f32_4[4]; f32_4[4];}* %20 = OpVariable Uniform 
                                      %21 = OpTypeInt 32 1 
                                  i32 %22 = OpConstant 0 
                                  i32 %23 = OpConstant 1 
                                      %24 = OpTypePointer Uniform %7 
                                  i32 %35 = OpConstant 2 
                                  i32 %44 = OpConstant 3 
                       Private f32_4* %48 = OpVariable Private 
                                  u32 %68 = OpConstant 1 
                                      %69 = OpTypeArray %6 %68 
                                      %70 = OpTypeStruct %7 %6 %69 
                                      %71 = OpTypePointer Output %70 
 Output struct {f32_4; f32; f32[1];}* %72 = OpVariable Output 
                                      %80 = OpTypePointer Output %7 
                                      %82 = OpTypeVector %6 2 
                                      %83 = OpTypePointer Output %82 
               Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                      %85 = OpTypePointer Input %82 
                         Input f32_2* %86 = OpVariable Input 
                                      %88 = OpTypePointer Output %6 
                                  void %4 = OpFunction None %3 
                                       %5 = OpLabel 
                                f32_4 %12 = OpLoad %11 
                                f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                       Uniform f32_4* %25 = OpAccessChain %20 %22 %23 
                                f32_4 %26 = OpLoad %25 
                                f32_4 %27 = OpFMul %13 %26 
                                              OpStore %9 %27 
                       Uniform f32_4* %28 = OpAccessChain %20 %22 %22 
                                f32_4 %29 = OpLoad %28 
                                f32_4 %30 = OpLoad %11 
                                f32_4 %31 = OpVectorShuffle %30 %30 0 0 0 0 
                                f32_4 %32 = OpFMul %29 %31 
                                f32_4 %33 = OpLoad %9 
                                f32_4 %34 = OpFAdd %32 %33 
                                              OpStore %9 %34 
                       Uniform f32_4* %36 = OpAccessChain %20 %22 %35 
                                f32_4 %37 = OpLoad %36 
                                f32_4 %38 = OpLoad %11 
                                f32_4 %39 = OpVectorShuffle %38 %38 2 2 2 2 
                                f32_4 %40 = OpFMul %37 %39 
                                f32_4 %41 = OpLoad %9 
                                f32_4 %42 = OpFAdd %40 %41 
                                              OpStore %9 %42 
                                f32_4 %43 = OpLoad %9 
                       Uniform f32_4* %45 = OpAccessChain %20 %22 %44 
                                f32_4 %46 = OpLoad %45 
                                f32_4 %47 = OpFAdd %43 %46 
                                              OpStore %9 %47 
                                f32_4 %49 = OpLoad %9 
                                f32_4 %50 = OpVectorShuffle %49 %49 1 1 1 1 
                       Uniform f32_4* %51 = OpAccessChain %20 %23 %23 
                                f32_4 %52 = OpLoad %51 
                                f32_4 %53 = OpFMul %50 %52 
                                              OpStore %48 %53 
                       Uniform f32_4* %54 = OpAccessChain %20 %23 %22 
                                f32_4 %55 = OpLoad %54 
                                f32_4 %56 = OpLoad %9 
                                f32_4 %57 = OpVectorShuffle %56 %56 0 0 0 0 
                                f32_4 %58 = OpFMul %55 %57 
                                f32_4 %59 = OpLoad %48 
                                f32_4 %60 = OpFAdd %58 %59 
                                              OpStore %48 %60 
                       Uniform f32_4* %61 = OpAccessChain %20 %23 %35 
                                f32_4 %62 = OpLoad %61 
                                f32_4 %63 = OpLoad %9 
                                f32_4 %64 = OpVectorShuffle %63 %63 2 2 2 2 
                                f32_4 %65 = OpFMul %62 %64 
                                f32_4 %66 = OpLoad %48 
                                f32_4 %67 = OpFAdd %65 %66 
                                              OpStore %48 %67 
                       Uniform f32_4* %73 = OpAccessChain %20 %23 %44 
                                f32_4 %74 = OpLoad %73 
                                f32_4 %75 = OpLoad %9 
                                f32_4 %76 = OpVectorShuffle %75 %75 3 3 3 3 
                                f32_4 %77 = OpFMul %74 %76 
                                f32_4 %78 = OpLoad %48 
                                f32_4 %79 = OpFAdd %77 %78 
                        Output f32_4* %81 = OpAccessChain %72 %22 
                                              OpStore %81 %79 
                                f32_2 %87 = OpLoad %86 
                                              OpStore vs_TEXCOORD0 %87 
                          Output f32* %89 = OpAccessChain %72 %22 %68 
                                  f32 %90 = OpLoad %89 
                                  f32 %91 = OpFNegate %90 
                          Output f32* %92 = OpAccessChain %72 %22 %68 
                                              OpStore %92 %91 
                                              OpReturn
                                              OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 669
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %12 %658 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpDecorate vs_TEXCOORD0 Location 12 
                                                      OpMemberDecorate %25 0 Offset 25 
                                                      OpMemberDecorate %25 1 Offset 25 
                                                      OpMemberDecorate %25 2 Offset 25 
                                                      OpMemberDecorate %25 3 Offset 25 
                                                      OpMemberDecorate %25 4 Offset 25 
                                                      OpMemberDecorate %25 5 Offset 25 
                                                      OpMemberDecorate %25 6 Offset 25 
                                                      OpDecorate %25 Block 
                                                      OpDecorate %27 DescriptorSet 27 
                                                      OpDecorate %27 Binding 27 
                                                      OpDecorate %109 DescriptorSet 109 
                                                      OpDecorate %109 Binding 109 
                                                      OpDecorate %113 DescriptorSet 113 
                                                      OpDecorate %113 Binding 113 
                                                      OpDecorate %279 DescriptorSet 279 
                                                      OpDecorate %279 Binding 279 
                                                      OpDecorate %281 DescriptorSet 281 
                                                      OpDecorate %281 Binding 281 
                                                      OpDecorate %658 Location 658 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 3 
                                               %8 = OpTypePointer Private %7 
                                Private f32_3* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 2 
                                              %11 = OpTypePointer Input %10 
                        Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                          f32 %15 = OpConstant 3.674022E-40 
                                        f32_2 %16 = OpConstantComposite %15 %15 
                                              %20 = OpTypePointer Private %10 
                               Private f32_2* %21 = OpVariable Private 
                                              %24 = OpTypeVector %6 4 
                                              %25 = OpTypeStruct %24 %24 %6 %6 %24 %24 %24 
                                              %26 = OpTypePointer Uniform %25 
Uniform struct {f32_4; f32_4; f32; f32; f32_4; f32_4; f32_4;}* %27 = OpVariable Uniform 
                                              %28 = OpTypeInt 32 1 
                                          i32 %29 = OpConstant 0 
                                              %30 = OpTypePointer Uniform %24 
                                              %39 = OpTypePointer Private %24 
                               Private f32_4* %40 = OpVariable Private 
                                              %51 = OpTypeInt 32 0 
                                          u32 %52 = OpConstant 0 
                                              %53 = OpTypePointer Private %6 
                                          f32 %62 = OpConstant 3.674022E-40 
                                          f32 %64 = OpConstant 3.674022E-40 
                                          u32 %69 = OpConstant 2 
                                              %70 = OpTypePointer Uniform %6 
                                          u32 %81 = OpConstant 3 
                               Private f32_2* %96 = OpVariable Private 
                                          i32 %98 = OpConstant 4 
                                             %107 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                             %108 = OpTypePointer UniformConstant %107 
        UniformConstant read_only Texture2D* %109 = OpVariable UniformConstant 
                                             %111 = OpTypeSampler 
                                             %112 = OpTypePointer UniformConstant %111 
                    UniformConstant sampler* %113 = OpVariable UniformConstant 
                                             %115 = OpTypeSampledImage %107 
                                         i32 %122 = OpConstant 5 
                              Private f32_3* %127 = OpVariable Private 
                                         u32 %128 = OpConstant 1 
                                Private f32* %159 = OpVariable Private 
                              Private f32_4* %169 = OpVariable Private 
                                         i32 %170 = OpConstant 2 
                                         i32 %175 = OpConstant 3 
                                         i32 %181 = OpConstant 6 
                              Private f32_4* %187 = OpVariable Private 
                                         f32 %277 = OpConstant 3.674022E-40 
        UniformConstant read_only Texture2D* %279 = OpVariable UniformConstant 
                    UniformConstant sampler* %281 = OpVariable UniformConstant 
                              Private f32_3* %300 = OpVariable Private 
                                Private f32* %307 = OpVariable Private 
                                Private f32* %364 = OpVariable Private 
                                         i32 %463 = OpConstant 1 
                                         f32 %640 = OpConstant 3.674022E-40 
                                         f32 %650 = OpConstant 3.674022E-40 
                                         f32 %655 = OpConstant 3.674022E-40 
                                             %657 = OpTypePointer Output %24 
                               Output f32_4* %658 = OpVariable Output 
                                             %666 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_2 %13 = OpLoad vs_TEXCOORD0 
                                        f32_2 %14 = OpFNegate %13 
                                        f32_2 %17 = OpFAdd %14 %16 
                                        f32_3 %18 = OpLoad %9 
                                        f32_3 %19 = OpVectorShuffle %18 %17 3 4 2 
                                                      OpStore %9 %19 
                                        f32_3 %22 = OpLoad %9 
                                        f32_2 %23 = OpVectorShuffle %22 %22 0 1 
                               Uniform f32_4* %31 = OpAccessChain %27 %29 
                                        f32_4 %32 = OpLoad %31 
                                        f32_2 %33 = OpVectorShuffle %32 %32 1 1 
                                        f32_2 %34 = OpFMul %23 %33 
                                        f32_2 %35 = OpLoad vs_TEXCOORD0 
                                        f32_2 %36 = OpFAdd %34 %35 
                                                      OpStore %21 %36 
                                        f32_2 %37 = OpLoad %21 
                                        f32_2 %38 = OpExtInst %1 10 %37 
                                                      OpStore %21 %38 
                                        f32_2 %41 = OpLoad %21 
                                        f32_2 %42 = OpFNegate %41 
                                        f32_2 %43 = OpFAdd %42 %16 
                                        f32_4 %44 = OpLoad %40 
                                        f32_4 %45 = OpVectorShuffle %44 %43 4 5 2 3 
                                                      OpStore %40 %45 
                                        f32_4 %46 = OpLoad %40 
                                        f32_2 %47 = OpVectorShuffle %46 %46 0 1 
                                        f32_4 %48 = OpLoad %40 
                                        f32_2 %49 = OpVectorShuffle %48 %48 0 1 
                                          f32 %50 = OpDot %47 %49 
                                 Private f32* %54 = OpAccessChain %40 %52 
                                                      OpStore %54 %50 
                                 Private f32* %55 = OpAccessChain %40 %52 
                                          f32 %56 = OpLoad %55 
                                          f32 %57 = OpExtInst %1 31 %56 
                                 Private f32* %58 = OpAccessChain %40 %52 
                                                      OpStore %58 %57 
                                 Private f32* %59 = OpAccessChain %40 %52 
                                          f32 %60 = OpLoad %59 
                                          f32 %61 = OpFNegate %60 
                                          f32 %63 = OpFMul %61 %62 
                                          f32 %65 = OpFAdd %63 %64 
                                 Private f32* %66 = OpAccessChain %40 %52 
                                                      OpStore %66 %65 
                                 Private f32* %67 = OpAccessChain %40 %52 
                                          f32 %68 = OpLoad %67 
                                 Uniform f32* %71 = OpAccessChain %27 %29 %69 
                                          f32 %72 = OpLoad %71 
                                          f32 %73 = OpFMul %68 %72 
                                 Private f32* %74 = OpAccessChain %40 %52 
                                                      OpStore %74 %73 
                                 Private f32* %75 = OpAccessChain %40 %52 
                                          f32 %76 = OpLoad %75 
                                          f32 %77 = OpExtInst %1 30 %76 
                                 Private f32* %78 = OpAccessChain %40 %52 
                                                      OpStore %78 %77 
                                 Private f32* %79 = OpAccessChain %40 %52 
                                          f32 %80 = OpLoad %79 
                                 Uniform f32* %82 = OpAccessChain %27 %29 %81 
                                          f32 %83 = OpLoad %82 
                                          f32 %84 = OpFMul %80 %83 
                                 Private f32* %85 = OpAccessChain %40 %52 
                                                      OpStore %85 %84 
                                 Private f32* %86 = OpAccessChain %40 %52 
                                          f32 %87 = OpLoad %86 
                                          f32 %88 = OpExtInst %1 29 %87 
                                 Private f32* %89 = OpAccessChain %40 %52 
                                                      OpStore %89 %88 
                                 Private f32* %90 = OpAccessChain %40 %52 
                                          f32 %91 = OpLoad %90 
                                 Private f32* %92 = OpAccessChain %40 %52 
                                          f32 %93 = OpLoad %92 
                                          f32 %94 = OpFMul %91 %93 
                                 Private f32* %95 = OpAccessChain %40 %52 
                                                      OpStore %95 %94 
                                        f32_2 %97 = OpLoad %21 
                               Uniform f32_4* %99 = OpAccessChain %27 %98 
                                       f32_4 %100 = OpLoad %99 
                                       f32_2 %101 = OpVectorShuffle %100 %100 0 1 
                                       f32_2 %102 = OpFMul %97 %101 
                              Uniform f32_4* %103 = OpAccessChain %27 %98 
                                       f32_4 %104 = OpLoad %103 
                                       f32_2 %105 = OpVectorShuffle %104 %104 2 3 
                                       f32_2 %106 = OpFAdd %102 %105 
                                                      OpStore %96 %106 
                         read_only Texture2D %110 = OpLoad %109 
                                     sampler %114 = OpLoad %113 
                  read_only Texture2DSampled %116 = OpSampledImage %110 %114 
                                       f32_2 %117 = OpLoad %96 
                                       f32_4 %118 = OpImageSampleImplicitLod %116 %117 
                                       f32_2 %119 = OpVectorShuffle %118 %118 1 3 
                                                      OpStore %96 %119 
                                Private f32* %120 = OpAccessChain %96 %52 
                                         f32 %121 = OpLoad %120 
                                Uniform f32* %123 = OpAccessChain %27 %122 %52 
                                         f32 %124 = OpLoad %123 
                                         f32 %125 = OpFMul %121 %124 
                                Private f32* %126 = OpAccessChain %96 %52 
                                                      OpStore %126 %125 
                                Private f32* %129 = OpAccessChain %96 %128 
                                         f32 %130 = OpLoad %129 
                                Private f32* %131 = OpAccessChain %96 %52 
                                         f32 %132 = OpLoad %131 
                                         f32 %133 = OpFMul %130 %132 
                                Private f32* %134 = OpAccessChain %127 %128 
                                                      OpStore %134 %133 
                                       f32_3 %135 = OpLoad %9 
                                       f32_2 %136 = OpVectorShuffle %135 %135 0 1 
                              Uniform f32_4* %137 = OpAccessChain %27 %29 
                                       f32_4 %138 = OpLoad %137 
                                       f32_2 %139 = OpVectorShuffle %138 %138 1 1 
                                       f32_2 %140 = OpFMul %136 %139 
                                                      OpStore %96 %140 
                                       f32_3 %141 = OpLoad %9 
                                       f32_2 %142 = OpVectorShuffle %141 %141 0 1 
                                       f32_3 %143 = OpLoad %9 
                                       f32_2 %144 = OpVectorShuffle %143 %143 0 1 
                                         f32 %145 = OpDot %142 %144 
                                Private f32* %146 = OpAccessChain %9 %52 
                                                      OpStore %146 %145 
                                Private f32* %147 = OpAccessChain %9 %52 
                                         f32 %148 = OpLoad %147 
                                         f32 %149 = OpExtInst %1 31 %148 
                                Private f32* %150 = OpAccessChain %9 %52 
                                                      OpStore %150 %149 
                                Private f32* %151 = OpAccessChain %9 %52 
                                         f32 %152 = OpLoad %151 
                                         f32 %153 = OpFMul %152 %62 
                                Private f32* %154 = OpAccessChain %9 %52 
                                                      OpStore %154 %153 
                                Private f32* %155 = OpAccessChain %9 %52 
                                         f32 %156 = OpLoad %155 
                                         f32 %157 = OpExtInst %1 10 %156 
                                Private f32* %158 = OpAccessChain %9 %52 
                                                      OpStore %158 %157 
                                       f32_2 %160 = OpLoad %96 
                                       f32_2 %161 = OpLoad %96 
                                         f32 %162 = OpDot %160 %161 
                                                      OpStore %159 %162 
                                         f32 %163 = OpLoad %159 
                                         f32 %164 = OpExtInst %1 32 %163 
                                                      OpStore %159 %164 
                                         f32 %165 = OpLoad %159 
                                       f32_2 %166 = OpCompositeConstruct %165 %165 
                                       f32_2 %167 = OpLoad %96 
                                       f32_2 %168 = OpFMul %166 %167 
                                                      OpStore %96 %168 
                                Uniform f32* %171 = OpAccessChain %27 %170 
                                         f32 %172 = OpLoad %171 
                                Uniform f32* %173 = OpAccessChain %27 %170 
                                         f32 %174 = OpLoad %173 
                                Uniform f32* %176 = OpAccessChain %27 %175 
                                         f32 %177 = OpLoad %176 
                                Uniform f32* %178 = OpAccessChain %27 %175 
                                         f32 %179 = OpLoad %178 
                                       f32_4 %180 = OpCompositeConstruct %172 %174 %177 %179 
                              Uniform f32_4* %182 = OpAccessChain %27 %181 
                                       f32_4 %183 = OpLoad %182 
                                       f32_4 %184 = OpVectorShuffle %183 %183 0 0 0 0 
                                       f32_4 %185 = OpFNegate %184 
                                       f32_4 %186 = OpFMul %180 %185 
                                                      OpStore %169 %186 
                                       f32_2 %188 = OpLoad %96 
                                       f32_4 %189 = OpLoad %169 
                                       f32_2 %190 = OpVectorShuffle %189 %189 0 1 
                                       f32_2 %191 = OpFMul %188 %190 
                                       f32_2 %192 = OpLoad %21 
                                       f32_2 %193 = OpFAdd %191 %192 
                                       f32_4 %194 = OpLoad %187 
                                       f32_4 %195 = OpVectorShuffle %194 %193 4 5 2 3 
                                                      OpStore %187 %195 
                                       f32_4 %196 = OpLoad %187 
                                       f32_2 %197 = OpVectorShuffle %196 %196 0 1 
                              Uniform f32_4* %198 = OpAccessChain %27 %98 
                                       f32_4 %199 = OpLoad %198 
                                       f32_2 %200 = OpVectorShuffle %199 %199 0 1 
                                       f32_2 %201 = OpFMul %197 %200 
                              Uniform f32_4* %202 = OpAccessChain %27 %98 
                                       f32_4 %203 = OpLoad %202 
                                       f32_2 %204 = OpVectorShuffle %203 %203 2 3 
                                       f32_2 %205 = OpFAdd %201 %204 
                                       f32_4 %206 = OpLoad %187 
                                       f32_4 %207 = OpVectorShuffle %206 %205 4 5 2 3 
                                                      OpStore %187 %207 
                         read_only Texture2D %208 = OpLoad %109 
                                     sampler %209 = OpLoad %113 
                  read_only Texture2DSampled %210 = OpSampledImage %208 %209 
                                       f32_4 %211 = OpLoad %187 
                                       f32_2 %212 = OpVectorShuffle %211 %211 0 1 
                                       f32_4 %213 = OpImageSampleImplicitLod %210 %212 
                                       f32_2 %214 = OpVectorShuffle %213 %213 0 3 
                                       f32_4 %215 = OpLoad %187 
                                       f32_4 %216 = OpVectorShuffle %215 %214 4 5 2 3 
                                                      OpStore %187 %216 
                                Private f32* %217 = OpAccessChain %187 %52 
                                         f32 %218 = OpLoad %217 
                                Uniform f32* %219 = OpAccessChain %27 %122 %52 
                                         f32 %220 = OpLoad %219 
                                         f32 %221 = OpFMul %218 %220 
                                                      OpStore %159 %221 
                                Private f32* %222 = OpAccessChain %187 %128 
                                         f32 %223 = OpLoad %222 
                                         f32 %224 = OpLoad %159 
                                         f32 %225 = OpFMul %223 %224 
                                Private f32* %226 = OpAccessChain %127 %52 
                                                      OpStore %226 %225 
                                Uniform f32* %227 = OpAccessChain %27 %170 
                                         f32 %228 = OpLoad %227 
                                Uniform f32* %229 = OpAccessChain %27 %170 
                                         f32 %230 = OpLoad %229 
                                Uniform f32* %231 = OpAccessChain %27 %175 
                                         f32 %232 = OpLoad %231 
                                Uniform f32* %233 = OpAccessChain %27 %175 
                                         f32 %234 = OpLoad %233 
                                       f32_4 %235 = OpCompositeConstruct %228 %230 %232 %234 
                              Uniform f32_4* %236 = OpAccessChain %27 %181 
                                       f32_4 %237 = OpLoad %236 
                                       f32_4 %238 = OpVectorShuffle %237 %237 0 0 0 0 
                                       f32_4 %239 = OpFMul %235 %238 
                                                      OpStore %187 %239 
                                       f32_2 %240 = OpLoad %96 
                                       f32_4 %241 = OpLoad %187 
                                       f32_2 %242 = OpVectorShuffle %241 %241 0 1 
                                       f32_2 %243 = OpFMul %240 %242 
                                       f32_2 %244 = OpLoad %21 
                                       f32_2 %245 = OpFAdd %243 %244 
                                                      OpStore %21 %245 
                                       f32_2 %246 = OpLoad %21 
                              Uniform f32_4* %247 = OpAccessChain %27 %98 
                                       f32_4 %248 = OpLoad %247 
                                       f32_2 %249 = OpVectorShuffle %248 %248 0 1 
                                       f32_2 %250 = OpFMul %246 %249 
                              Uniform f32_4* %251 = OpAccessChain %27 %98 
                                       f32_4 %252 = OpLoad %251 
                                       f32_2 %253 = OpVectorShuffle %252 %252 2 3 
                                       f32_2 %254 = OpFAdd %250 %253 
                                                      OpStore %21 %254 
                         read_only Texture2D %255 = OpLoad %109 
                                     sampler %256 = OpLoad %113 
                  read_only Texture2DSampled %257 = OpSampledImage %255 %256 
                                       f32_2 %258 = OpLoad %21 
                                       f32_4 %259 = OpImageSampleImplicitLod %257 %258 
                                       f32_2 %260 = OpVectorShuffle %259 %259 2 3 
                                                      OpStore %21 %260 
                                Private f32* %261 = OpAccessChain %21 %52 
                                         f32 %262 = OpLoad %261 
                                Uniform f32* %263 = OpAccessChain %27 %122 %52 
                                         f32 %264 = OpLoad %263 
                                         f32 %265 = OpFMul %262 %264 
                                Private f32* %266 = OpAccessChain %21 %52 
                                                      OpStore %266 %265 
                                Private f32* %267 = OpAccessChain %21 %128 
                                         f32 %268 = OpLoad %267 
                                Private f32* %269 = OpAccessChain %21 %52 
                                         f32 %270 = OpLoad %269 
                                         f32 %271 = OpFMul %268 %270 
                                Private f32* %272 = OpAccessChain %127 %69 
                                                      OpStore %272 %271 
                                       f32_4 %273 = OpLoad %40 
                                       f32_3 %274 = OpVectorShuffle %273 %273 0 0 0 
                                       f32_3 %275 = OpLoad %127 
                                       f32_3 %276 = OpFMul %274 %275 
                                                      OpStore %127 %276 
                                Private f32* %278 = OpAccessChain %9 %128 
                                                      OpStore %278 %277 
                         read_only Texture2D %280 = OpLoad %279 
                                     sampler %282 = OpLoad %281 
                  read_only Texture2DSampled %283 = OpSampledImage %280 %282 
                                       f32_3 %284 = OpLoad %9 
                                       f32_2 %285 = OpVectorShuffle %284 %284 0 1 
                                       f32_4 %286 = OpImageSampleImplicitLod %283 %285 
                                       f32_3 %287 = OpVectorShuffle %286 %286 0 1 2 
                                                      OpStore %9 %287 
                                       f32_3 %288 = OpLoad %9 
                                       f32_3 %289 = OpLoad %127 
                                       f32_3 %290 = OpFMul %288 %289 
                                                      OpStore %127 %290 
                                       f32_3 %291 = OpLoad %127 
                              Uniform f32_4* %292 = OpAccessChain %27 %29 
                                       f32_4 %293 = OpLoad %292 
                                       f32_3 %294 = OpVectorShuffle %293 %293 0 0 0 
                                       f32_3 %295 = OpFMul %291 %294 
                                                      OpStore %127 %295 
                                       f32_2 %296 = OpLoad vs_TEXCOORD0 
                                       f32_2 %297 = OpExtInst %1 10 %296 
                                       f32_4 %298 = OpLoad %40 
                                       f32_4 %299 = OpVectorShuffle %298 %297 4 1 2 5 
                                                      OpStore %40 %299 
                                       f32_4 %301 = OpLoad %40 
                                       f32_2 %302 = OpVectorShuffle %301 %301 0 3 
                                       f32_2 %303 = OpFNegate %302 
                                       f32_2 %304 = OpFAdd %303 %16 
                                       f32_3 %305 = OpLoad %300 
                                       f32_3 %306 = OpVectorShuffle %305 %304 3 4 2 
                                                      OpStore %300 %306 
                                       f32_3 %308 = OpLoad %300 
                                       f32_2 %309 = OpVectorShuffle %308 %308 0 1 
                                       f32_3 %310 = OpLoad %300 
                                       f32_2 %311 = OpVectorShuffle %310 %310 0 1 
                                         f32 %312 = OpDot %309 %311 
                                                      OpStore %307 %312 
                                         f32 %313 = OpLoad %307 
                                         f32 %314 = OpExtInst %1 31 %313 
                                                      OpStore %307 %314 
                                         f32 %315 = OpLoad %307 
                                         f32 %316 = OpFNegate %315 
                                         f32 %317 = OpFMul %316 %62 
                                         f32 %318 = OpFAdd %317 %64 
                                                      OpStore %307 %318 
                                         f32 %319 = OpLoad %307 
                                Uniform f32* %320 = OpAccessChain %27 %29 %69 
                                         f32 %321 = OpLoad %320 
                                         f32 %322 = OpFMul %319 %321 
                                                      OpStore %307 %322 
                                         f32 %323 = OpLoad %307 
                                         f32 %324 = OpExtInst %1 30 %323 
                                                      OpStore %307 %324 
                                         f32 %325 = OpLoad %307 
                                Uniform f32* %326 = OpAccessChain %27 %29 %81 
                                         f32 %327 = OpLoad %326 
                                         f32 %328 = OpFMul %325 %327 
                                                      OpStore %307 %328 
                                         f32 %329 = OpLoad %307 
                                         f32 %330 = OpExtInst %1 29 %329 
                                                      OpStore %307 %330 
                                         f32 %331 = OpLoad %307 
                                         f32 %332 = OpLoad %307 
                                         f32 %333 = OpFMul %331 %332 
                                                      OpStore %307 %333 
                                       f32_2 %334 = OpLoad %96 
                                       f32_4 %335 = OpLoad %169 
                                       f32_2 %336 = OpVectorShuffle %335 %335 0 1 
                                       f32_2 %337 = OpFMul %334 %336 
                                       f32_4 %338 = OpLoad %40 
                                       f32_2 %339 = OpVectorShuffle %338 %338 0 3 
                                       f32_2 %340 = OpFAdd %337 %339 
                                       f32_4 %341 = OpLoad %169 
                                       f32_4 %342 = OpVectorShuffle %341 %340 4 5 2 3 
                                                      OpStore %169 %342 
                                       f32_4 %343 = OpLoad %169 
                                       f32_2 %344 = OpVectorShuffle %343 %343 0 1 
                              Uniform f32_4* %345 = OpAccessChain %27 %98 
                                       f32_4 %346 = OpLoad %345 
                                       f32_2 %347 = OpVectorShuffle %346 %346 0 1 
                                       f32_2 %348 = OpFMul %344 %347 
                              Uniform f32_4* %349 = OpAccessChain %27 %98 
                                       f32_4 %350 = OpLoad %349 
                                       f32_2 %351 = OpVectorShuffle %350 %350 2 3 
                                       f32_2 %352 = OpFAdd %348 %351 
                                       f32_4 %353 = OpLoad %169 
                                       f32_4 %354 = OpVectorShuffle %353 %352 4 5 2 3 
                                                      OpStore %169 %354 
                         read_only Texture2D %355 = OpLoad %109 
                                     sampler %356 = OpLoad %113 
                  read_only Texture2DSampled %357 = OpSampledImage %355 %356 
                                       f32_4 %358 = OpLoad %169 
                                       f32_2 %359 = OpVectorShuffle %358 %358 0 1 
                                       f32_4 %360 = OpImageSampleImplicitLod %357 %359 
                                       f32_2 %361 = OpVectorShuffle %360 %360 0 3 
                                       f32_4 %362 = OpLoad %169 
                                       f32_4 %363 = OpVectorShuffle %362 %361 4 5 2 3 
                                                      OpStore %169 %363 
                                Private f32* %365 = OpAccessChain %169 %52 
                                         f32 %366 = OpLoad %365 
                                Uniform f32* %367 = OpAccessChain %27 %122 %52 
                                         f32 %368 = OpLoad %367 
                                         f32 %369 = OpFMul %366 %368 
                                                      OpStore %364 %369 
                                Private f32* %370 = OpAccessChain %169 %128 
                                         f32 %371 = OpLoad %370 
                                         f32 %372 = OpLoad %364 
                                         f32 %373 = OpFMul %371 %372 
                                Private f32* %374 = OpAccessChain %300 %52 
                                                      OpStore %374 %373 
                                       f32_2 %375 = OpLoad %96 
                                       f32_4 %376 = OpLoad %187 
                                       f32_2 %377 = OpVectorShuffle %376 %376 0 1 
                                       f32_2 %378 = OpFMul %375 %377 
                                       f32_4 %379 = OpLoad %40 
                                       f32_2 %380 = OpVectorShuffle %379 %379 0 3 
                                       f32_2 %381 = OpFAdd %378 %380 
                                       f32_4 %382 = OpLoad %169 
                                       f32_4 %383 = OpVectorShuffle %382 %381 4 5 2 3 
                                                      OpStore %169 %383 
                                       f32_4 %384 = OpLoad %40 
                                       f32_2 %385 = OpVectorShuffle %384 %384 0 3 
                              Uniform f32_4* %386 = OpAccessChain %27 %98 
                                       f32_4 %387 = OpLoad %386 
                                       f32_2 %388 = OpVectorShuffle %387 %387 0 1 
                                       f32_2 %389 = OpFMul %385 %388 
                              Uniform f32_4* %390 = OpAccessChain %27 %98 
                                       f32_4 %391 = OpLoad %390 
                                       f32_2 %392 = OpVectorShuffle %391 %391 2 3 
                                       f32_2 %393 = OpFAdd %389 %392 
                                       f32_4 %394 = OpLoad %40 
                                       f32_4 %395 = OpVectorShuffle %394 %393 4 1 2 5 
                                                      OpStore %40 %395 
                         read_only Texture2D %396 = OpLoad %109 
                                     sampler %397 = OpLoad %113 
                  read_only Texture2DSampled %398 = OpSampledImage %396 %397 
                                       f32_4 %399 = OpLoad %40 
                                       f32_2 %400 = OpVectorShuffle %399 %399 0 3 
                                       f32_4 %401 = OpImageSampleImplicitLod %398 %400 
                                       f32_2 %402 = OpVectorShuffle %401 %401 1 3 
                                       f32_4 %403 = OpLoad %40 
                                       f32_4 %404 = OpVectorShuffle %403 %402 4 1 2 5 
                                                      OpStore %40 %404 
                                       f32_4 %405 = OpLoad %169 
                                       f32_2 %406 = OpVectorShuffle %405 %405 0 1 
                              Uniform f32_4* %407 = OpAccessChain %27 %98 
                                       f32_4 %408 = OpLoad %407 
                                       f32_2 %409 = OpVectorShuffle %408 %408 0 1 
                                       f32_2 %410 = OpFMul %406 %409 
                              Uniform f32_4* %411 = OpAccessChain %27 %98 
                                       f32_4 %412 = OpLoad %411 
                                       f32_2 %413 = OpVectorShuffle %412 %412 2 3 
                                       f32_2 %414 = OpFAdd %410 %413 
                                       f32_4 %415 = OpLoad %169 
                                       f32_4 %416 = OpVectorShuffle %415 %414 4 5 2 3 
                                                      OpStore %169 %416 
                         read_only Texture2D %417 = OpLoad %109 
                                     sampler %418 = OpLoad %113 
                  read_only Texture2DSampled %419 = OpSampledImage %417 %418 
                                       f32_4 %420 = OpLoad %169 
                                       f32_2 %421 = OpVectorShuffle %420 %420 0 1 
                                       f32_4 %422 = OpImageSampleImplicitLod %419 %421 
                                       f32_2 %423 = OpVectorShuffle %422 %422 2 3 
                                       f32_4 %424 = OpLoad %169 
                                       f32_4 %425 = OpVectorShuffle %424 %423 4 5 2 3 
                                                      OpStore %169 %425 
                                Private f32* %426 = OpAccessChain %169 %52 
                                         f32 %427 = OpLoad %426 
                                Uniform f32* %428 = OpAccessChain %27 %122 %52 
                                         f32 %429 = OpLoad %428 
                                         f32 %430 = OpFMul %427 %429 
                                                      OpStore %364 %430 
                                Private f32* %431 = OpAccessChain %169 %128 
                                         f32 %432 = OpLoad %431 
                                         f32 %433 = OpLoad %364 
                                         f32 %434 = OpFMul %432 %433 
                                Private f32* %435 = OpAccessChain %300 %69 
                                                      OpStore %435 %434 
                                Private f32* %436 = OpAccessChain %40 %52 
                                         f32 %437 = OpLoad %436 
                                Uniform f32* %438 = OpAccessChain %27 %122 %52 
                                         f32 %439 = OpLoad %438 
                                         f32 %440 = OpFMul %437 %439 
                                Private f32* %441 = OpAccessChain %40 %52 
                                                      OpStore %441 %440 
                                Private f32* %442 = OpAccessChain %40 %81 
                                         f32 %443 = OpLoad %442 
                                Private f32* %444 = OpAccessChain %40 %52 
                                         f32 %445 = OpLoad %444 
                                         f32 %446 = OpFMul %443 %445 
                                Private f32* %447 = OpAccessChain %300 %128 
                                                      OpStore %447 %446 
                                         f32 %448 = OpLoad %307 
                                       f32_3 %449 = OpCompositeConstruct %448 %448 %448 
                                       f32_3 %450 = OpLoad %300 
                                       f32_3 %451 = OpFMul %449 %450 
                                                      OpStore %300 %451 
                                       f32_3 %452 = OpLoad %9 
                                       f32_3 %453 = OpLoad %300 
                                       f32_3 %454 = OpFMul %452 %453 
                                                      OpStore %300 %454 
                                       f32_3 %455 = OpLoad %300 
                              Uniform f32_4* %456 = OpAccessChain %27 %29 
                                       f32_4 %457 = OpLoad %456 
                                       f32_3 %458 = OpVectorShuffle %457 %457 0 0 0 
                                       f32_3 %459 = OpFMul %455 %458 
                                       f32_3 %460 = OpLoad %127 
                                       f32_3 %461 = OpFAdd %459 %460 
                                                      OpStore %127 %461 
                                       f32_2 %462 = OpLoad %96 
                              Uniform f32_4* %464 = OpAccessChain %27 %463 
                                       f32_4 %465 = OpLoad %464 
                                       f32_2 %466 = OpVectorShuffle %465 %465 1 1 
                                       f32_2 %467 = OpFMul %462 %466 
                                       f32_2 %468 = OpLoad vs_TEXCOORD0 
                                       f32_2 %469 = OpFAdd %467 %468 
                                       f32_4 %470 = OpLoad %40 
                                       f32_4 %471 = OpVectorShuffle %470 %469 4 1 2 5 
                                                      OpStore %40 %471 
                                       f32_4 %472 = OpLoad %40 
                                       f32_2 %473 = OpVectorShuffle %472 %472 0 3 
                                       f32_2 %474 = OpExtInst %1 10 %473 
                                       f32_4 %475 = OpLoad %40 
                                       f32_4 %476 = OpVectorShuffle %475 %474 4 1 2 5 
                                                      OpStore %40 %476 
                                       f32_2 %477 = OpLoad %96 
                                       f32_4 %478 = OpLoad %169 
                                       f32_2 %479 = OpVectorShuffle %478 %478 2 3 
                                       f32_2 %480 = OpFMul %477 %479 
                                       f32_4 %481 = OpLoad %40 
                                       f32_2 %482 = OpVectorShuffle %481 %481 0 3 
                                       f32_2 %483 = OpFAdd %480 %482 
                                       f32_4 %484 = OpLoad %169 
                                       f32_4 %485 = OpVectorShuffle %484 %483 4 5 2 3 
                                                      OpStore %169 %485 
                                       f32_2 %486 = OpLoad %96 
                                       f32_4 %487 = OpLoad %187 
                                       f32_2 %488 = OpVectorShuffle %487 %487 2 3 
                                       f32_2 %489 = OpFMul %486 %488 
                                       f32_4 %490 = OpLoad %40 
                                       f32_2 %491 = OpVectorShuffle %490 %490 0 3 
                                       f32_2 %492 = OpFAdd %489 %491 
                                                      OpStore %96 %492 
                                       f32_2 %493 = OpLoad %96 
                              Uniform f32_4* %494 = OpAccessChain %27 %98 
                                       f32_4 %495 = OpLoad %494 
                                       f32_2 %496 = OpVectorShuffle %495 %495 0 1 
                                       f32_2 %497 = OpFMul %493 %496 
                              Uniform f32_4* %498 = OpAccessChain %27 %98 
                                       f32_4 %499 = OpLoad %498 
                                       f32_2 %500 = OpVectorShuffle %499 %499 2 3 
                                       f32_2 %501 = OpFAdd %497 %500 
                                                      OpStore %96 %501 
                         read_only Texture2D %502 = OpLoad %109 
                                     sampler %503 = OpLoad %113 
                  read_only Texture2DSampled %504 = OpSampledImage %502 %503 
                                       f32_2 %505 = OpLoad %96 
                                       f32_4 %506 = OpImageSampleImplicitLod %504 %505 
                                       f32_2 %507 = OpVectorShuffle %506 %506 2 3 
                                                      OpStore %96 %507 
                                       f32_4 %508 = OpLoad %169 
                                       f32_2 %509 = OpVectorShuffle %508 %508 0 1 
                              Uniform f32_4* %510 = OpAccessChain %27 %98 
                                       f32_4 %511 = OpLoad %510 
                                       f32_2 %512 = OpVectorShuffle %511 %511 0 1 
                                       f32_2 %513 = OpFMul %509 %512 
                              Uniform f32_4* %514 = OpAccessChain %27 %98 
                                       f32_4 %515 = OpLoad %514 
                                       f32_2 %516 = OpVectorShuffle %515 %515 2 3 
                                       f32_2 %517 = OpFAdd %513 %516 
                                       f32_4 %518 = OpLoad %169 
                                       f32_4 %519 = OpVectorShuffle %518 %517 4 5 2 3 
                                                      OpStore %169 %519 
                         read_only Texture2D %520 = OpLoad %109 
                                     sampler %521 = OpLoad %113 
                  read_only Texture2DSampled %522 = OpSampledImage %520 %521 
                                       f32_4 %523 = OpLoad %169 
                                       f32_2 %524 = OpVectorShuffle %523 %523 0 1 
                                       f32_4 %525 = OpImageSampleImplicitLod %522 %524 
                                       f32_2 %526 = OpVectorShuffle %525 %525 0 3 
                                       f32_4 %527 = OpLoad %169 
                                       f32_4 %528 = OpVectorShuffle %527 %526 4 5 2 3 
                                                      OpStore %169 %528 
                                Private f32* %529 = OpAccessChain %169 %52 
                                         f32 %530 = OpLoad %529 
                                Uniform f32* %531 = OpAccessChain %27 %122 %52 
                                         f32 %532 = OpLoad %531 
                                         f32 %533 = OpFMul %530 %532 
                                                      OpStore %307 %533 
                                Private f32* %534 = OpAccessChain %169 %128 
                                         f32 %535 = OpLoad %534 
                                         f32 %536 = OpLoad %307 
                                         f32 %537 = OpFMul %535 %536 
                                Private f32* %538 = OpAccessChain %169 %52 
                                                      OpStore %538 %537 
                                Private f32* %539 = OpAccessChain %96 %52 
                                         f32 %540 = OpLoad %539 
                                Uniform f32* %541 = OpAccessChain %27 %122 %52 
                                         f32 %542 = OpLoad %541 
                                         f32 %543 = OpFMul %540 %542 
                                                      OpStore %307 %543 
                                Private f32* %544 = OpAccessChain %96 %128 
                                         f32 %545 = OpLoad %544 
                                         f32 %546 = OpLoad %307 
                                         f32 %547 = OpFMul %545 %546 
                                Private f32* %548 = OpAccessChain %169 %69 
                                                      OpStore %548 %547 
                                       f32_4 %549 = OpLoad %40 
                                       f32_2 %550 = OpVectorShuffle %549 %549 0 3 
                                       f32_2 %551 = OpFNegate %550 
                                       f32_2 %552 = OpFAdd %551 %16 
                                                      OpStore %96 %552 
                                       f32_4 %553 = OpLoad %40 
                                       f32_2 %554 = OpVectorShuffle %553 %553 0 3 
                              Uniform f32_4* %555 = OpAccessChain %27 %98 
                                       f32_4 %556 = OpLoad %555 
                                       f32_2 %557 = OpVectorShuffle %556 %556 0 1 
                                       f32_2 %558 = OpFMul %554 %557 
                              Uniform f32_4* %559 = OpAccessChain %27 %98 
                                       f32_4 %560 = OpLoad %559 
                                       f32_2 %561 = OpVectorShuffle %560 %560 2 3 
                                       f32_2 %562 = OpFAdd %558 %561 
                                       f32_4 %563 = OpLoad %40 
                                       f32_4 %564 = OpVectorShuffle %563 %562 4 1 2 5 
                                                      OpStore %40 %564 
                         read_only Texture2D %565 = OpLoad %109 
                                     sampler %566 = OpLoad %113 
                  read_only Texture2DSampled %567 = OpSampledImage %565 %566 
                                       f32_4 %568 = OpLoad %40 
                                       f32_2 %569 = OpVectorShuffle %568 %568 0 3 
                                       f32_4 %570 = OpImageSampleImplicitLod %567 %569 
                                       f32_2 %571 = OpVectorShuffle %570 %570 1 3 
                                       f32_4 %572 = OpLoad %40 
                                       f32_4 %573 = OpVectorShuffle %572 %571 4 1 2 5 
                                                      OpStore %40 %573 
                                       f32_2 %574 = OpLoad %96 
                                       f32_2 %575 = OpLoad %96 
                                         f32 %576 = OpDot %574 %575 
                                                      OpStore %307 %576 
                                         f32 %577 = OpLoad %307 
                                         f32 %578 = OpExtInst %1 31 %577 
                                                      OpStore %307 %578 
                                         f32 %579 = OpLoad %307 
                                         f32 %580 = OpFNegate %579 
                                         f32 %581 = OpFMul %580 %62 
                                         f32 %582 = OpFAdd %581 %64 
                                                      OpStore %307 %582 
                                         f32 %583 = OpLoad %307 
                                Uniform f32* %584 = OpAccessChain %27 %463 %69 
                                         f32 %585 = OpLoad %584 
                                         f32 %586 = OpFMul %583 %585 
                                                      OpStore %307 %586 
                                         f32 %587 = OpLoad %307 
                                         f32 %588 = OpExtInst %1 30 %587 
                                                      OpStore %307 %588 
                                         f32 %589 = OpLoad %307 
                                Uniform f32* %590 = OpAccessChain %27 %463 %81 
                                         f32 %591 = OpLoad %590 
                                         f32 %592 = OpFMul %589 %591 
                                                      OpStore %307 %592 
                                         f32 %593 = OpLoad %307 
                                         f32 %594 = OpExtInst %1 29 %593 
                                                      OpStore %307 %594 
                                Private f32* %595 = OpAccessChain %40 %52 
                                         f32 %596 = OpLoad %595 
                                Uniform f32* %597 = OpAccessChain %27 %122 %52 
                                         f32 %598 = OpLoad %597 
                                         f32 %599 = OpFMul %596 %598 
                                Private f32* %600 = OpAccessChain %40 %52 
                                                      OpStore %600 %599 
                                Private f32* %601 = OpAccessChain %40 %81 
                                         f32 %602 = OpLoad %601 
                                Private f32* %603 = OpAccessChain %40 %52 
                                         f32 %604 = OpLoad %603 
                                         f32 %605 = OpFMul %602 %604 
                                Private f32* %606 = OpAccessChain %169 %128 
                                                      OpStore %606 %605 
                                         f32 %607 = OpLoad %307 
                                       f32_3 %608 = OpCompositeConstruct %607 %607 %607 
                                       f32_4 %609 = OpLoad %169 
                                       f32_3 %610 = OpVectorShuffle %609 %609 0 1 2 
                                       f32_3 %611 = OpFMul %608 %610 
                                       f32_4 %612 = OpLoad %40 
                                       f32_4 %613 = OpVectorShuffle %612 %611 4 5 6 3 
                                                      OpStore %40 %613 
                                       f32_4 %614 = OpLoad %40 
                                       f32_3 %615 = OpVectorShuffle %614 %614 0 1 2 
                              Uniform f32_4* %616 = OpAccessChain %27 %463 
                                       f32_4 %617 = OpLoad %616 
                                       f32_3 %618 = OpVectorShuffle %617 %617 0 0 0 
                                       f32_3 %619 = OpFMul %615 %618 
                                       f32_4 %620 = OpLoad %40 
                                       f32_4 %621 = OpVectorShuffle %620 %619 4 5 6 3 
                                                      OpStore %40 %621 
                                       f32_4 %622 = OpLoad %40 
                                       f32_3 %623 = OpVectorShuffle %622 %622 0 1 2 
                                       f32_3 %624 = OpLoad %9 
                                       f32_3 %625 = OpFMul %623 %624 
                                       f32_3 %626 = OpLoad %127 
                                       f32_3 %627 = OpFAdd %625 %626 
                                                      OpStore %9 %627 
                                       f32_3 %628 = OpLoad %9 
                              Uniform f32_4* %629 = OpAccessChain %27 %122 
                                       f32_4 %630 = OpLoad %629 
                                       f32_3 %631 = OpVectorShuffle %630 %630 1 1 1 
                                       f32_3 %632 = OpFMul %628 %631 
                                                      OpStore %9 %632 
                                Private f32* %633 = OpAccessChain %9 %128 
                                         f32 %634 = OpLoad %633 
                                Private f32* %635 = OpAccessChain %9 %52 
                                         f32 %636 = OpLoad %635 
                                         f32 %637 = OpExtInst %1 40 %634 %636 
                                                      OpStore %307 %637 
                                Private f32* %638 = OpAccessChain %9 %69 
                                         f32 %639 = OpLoad %638 
                                         f32 %641 = OpExtInst %1 40 %639 %640 
                                Private f32* %642 = OpAccessChain %40 %52 
                                                      OpStore %642 %641 
                                         f32 %643 = OpLoad %307 
                                Private f32* %644 = OpAccessChain %40 %52 
                                         f32 %645 = OpLoad %644 
                                         f32 %646 = OpExtInst %1 40 %643 %645 
                                                      OpStore %307 %646 
                                         f32 %647 = OpLoad %307 
                                         f32 %648 = OpExtInst %1 37 %647 %64 
                                                      OpStore %307 %648 
                                         f32 %649 = OpLoad %307 
                                         f32 %651 = OpFMul %649 %650 
                                                      OpStore %307 %651 
                                         f32 %652 = OpLoad %307 
                                         f32 %653 = OpExtInst %1 9 %652 
                                                      OpStore %307 %653 
                                         f32 %654 = OpLoad %307 
                                         f32 %656 = OpFMul %654 %655 
                                                      OpStore %307 %656 
                                       f32_3 %659 = OpLoad %9 
                                         f32 %660 = OpLoad %307 
                                       f32_3 %661 = OpCompositeConstruct %660 %660 %660 
                                       f32_3 %662 = OpFDiv %659 %661 
                                       f32_4 %663 = OpLoad %658 
                                       f32_4 %664 = OpVectorShuffle %663 %662 4 5 6 3 
                                                      OpStore %658 %664 
                                         f32 %665 = OpLoad %307 
                                 Output f32* %667 = OpAccessChain %658 %81 
                                                      OpStore %667 %665 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "AB_HIGH_PRECISION" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "AB_HIGH_PRECISION" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in  vec4 in_POSITION0;
in  vec2 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _LensFlareGhostsParams;
uniform 	vec4 _LensFlareHaloParams;
uniform 	float _LensFlareGhostChrDistortion;
uniform 	float _LensFlareHaloChrDistortion;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _MainTex_TexelSize;
UNITY_LOCATION(0) uniform  sampler2D _LensFlareLUT;
UNITY_LOCATION(1) uniform  sampler2D _MainTex;
in  vec2 vs_TEXCOORD0;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
vec4 u_xlat6;
vec2 u_xlat8;
vec2 u_xlat14;
float u_xlat21;
float u_xlat22;
void main()
{
    u_xlat0.xy = (-vs_TEXCOORD0.xy) + vec2(0.5, 0.5);
    u_xlat14.xy = u_xlat0.xy * _LensFlareGhostsParams.yy + vs_TEXCOORD0.xy;
    u_xlat14.xy = fract(u_xlat14.xy);
    u_xlat1.xy = (-u_xlat14.xy) + vec2(0.5, 0.5);
    u_xlat1.x = dot(u_xlat1.xy, u_xlat1.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlat1.x = (-u_xlat1.x) * 1.41419995 + 1.0;
    u_xlat1.x = u_xlat1.x * _LensFlareGhostsParams.z;
    u_xlat1.x = log2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _LensFlareGhostsParams.w;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat8.xy = u_xlat14.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat2 = texture(_MainTex, u_xlat8.xy);
    u_xlat1.yz = u_xlat0.xy * _LensFlareGhostsParams.yy;
    u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * 1.41419995;
    u_xlat0.x = fract(u_xlat0.x);
    u_xlat22 = dot(u_xlat1.yz, u_xlat1.yz);
    u_xlat1.w = inversesqrt(u_xlat22);
    u_xlat1.xyz = u_xlat1.xww * u_xlat1.xyz;
    u_xlat3 = vec4(_LensFlareGhostChrDistortion, _LensFlareGhostChrDistortion, _LensFlareHaloChrDistortion, _LensFlareHaloChrDistortion) * (-_MainTex_TexelSize.xxxx);
    u_xlat4.xy = u_xlat1.yz * u_xlat3.xy + u_xlat14.xy;
    u_xlat4.xy = u_xlat4.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat4 = texture(_MainTex, u_xlat4.xy);
    u_xlat2.x = u_xlat4.x;
    u_xlat4 = vec4(_LensFlareGhostChrDistortion, _LensFlareGhostChrDistortion, _LensFlareHaloChrDistortion, _LensFlareHaloChrDistortion) * _MainTex_TexelSize.xxxx;
    u_xlat14.xy = u_xlat1.yz * u_xlat4.xy + u_xlat14.xy;
    u_xlat14.xy = u_xlat14.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat5 = texture(_MainTex, u_xlat14.xy);
    u_xlat2.z = u_xlat5.z;
    u_xlat2.xyz = u_xlat1.xxx * u_xlat2.xyz;
    u_xlat0.y = 0.0;
    u_xlat0 = texture(_LensFlareLUT, u_xlat0.xy);
    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz * _LensFlareGhostsParams.xxx;
    u_xlat1.xw = fract(vs_TEXCOORD0.xy);
    u_xlat5.xy = (-u_xlat1.xw) + vec2(0.5, 0.5);
    u_xlat21 = dot(u_xlat5.xy, u_xlat5.xy);
    u_xlat21 = sqrt(u_xlat21);
    u_xlat21 = (-u_xlat21) * 1.41419995 + 1.0;
    u_xlat21 = u_xlat21 * _LensFlareGhostsParams.z;
    u_xlat21 = log2(u_xlat21);
    u_xlat21 = u_xlat21 * _LensFlareGhostsParams.w;
    u_xlat21 = exp2(u_xlat21);
    u_xlat21 = u_xlat21 * u_xlat21;
    u_xlat3.xy = u_xlat1.yz * u_xlat3.xy + u_xlat1.xw;
    u_xlat3.xy = u_xlat3.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat5 = texture(_MainTex, u_xlat3.xy);
    u_xlat3.xy = u_xlat1.yz * u_xlat4.xy + u_xlat1.xw;
    u_xlat1.xw = u_xlat1.xw * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat6 = texture(_MainTex, u_xlat1.xw);
    u_xlat5.y = u_xlat6.y;
    u_xlat1.xw = u_xlat3.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat6 = texture(_MainTex, u_xlat1.xw);
    u_xlat5.z = u_xlat6.z;
    u_xlat5.xyz = vec3(u_xlat21) * u_xlat5.xyz;
    u_xlat5.xyz = u_xlat0.xyz * u_xlat5.xyz;
    u_xlat2.xyz = u_xlat5.xyz * _LensFlareGhostsParams.xxx + u_xlat2.xyz;
    u_xlat1.xw = u_xlat1.yz * _LensFlareHaloParams.yy + vs_TEXCOORD0.xy;
    u_xlat1.xw = fract(u_xlat1.xw);
    u_xlat3.xy = u_xlat1.yz * u_xlat3.zw + u_xlat1.xw;
    u_xlat8.xy = u_xlat1.yz * u_xlat4.zw + u_xlat1.xw;
    u_xlat8.xy = u_xlat8.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat4 = texture(_MainTex, u_xlat8.xy);
    u_xlat8.xy = u_xlat3.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat3 = texture(_MainTex, u_xlat8.xy);
    u_xlat4.x = u_xlat3.x;
    u_xlat8.xy = (-u_xlat1.xw) + vec2(0.5, 0.5);
    u_xlat1.xw = u_xlat1.xw * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat3 = texture(_MainTex, u_xlat1.xw);
    u_xlat4.y = u_xlat3.y;
    u_xlat21 = dot(u_xlat8.xy, u_xlat8.xy);
    u_xlat21 = sqrt(u_xlat21);
    u_xlat21 = (-u_xlat21) * 1.41419995 + 1.0;
    u_xlat21 = u_xlat21 * _LensFlareHaloParams.z;
    u_xlat21 = log2(u_xlat21);
    u_xlat21 = u_xlat21 * _LensFlareHaloParams.w;
    u_xlat21 = exp2(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat4.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _LensFlareHaloParams.xxx;
    SV_Target0.xyz = u_xlat1.xyz * u_xlat0.xyz + u_xlat2.xyz;
    SV_Target0.w = 0.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "AB_HIGH_PRECISION" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 94
; Schema: 0
                                              OpCapability Shader 
                                       %1 = OpExtInstImport "GLSL.std.450" 
                                              OpMemoryModel Logical GLSL450 
                                              OpEntryPoint Vertex %4 "main" %11 %72 %84 %86 
                                              OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                              OpDecorate %11 Location 11 
                                              OpDecorate %16 ArrayStride 16 
                                              OpDecorate %17 ArrayStride 17 
                                              OpMemberDecorate %18 0 Offset 18 
                                              OpMemberDecorate %18 1 Offset 18 
                                              OpDecorate %18 Block 
                                              OpDecorate %20 DescriptorSet 20 
                                              OpDecorate %20 Binding 20 
                                              OpMemberDecorate %70 0 BuiltIn 70 
                                              OpMemberDecorate %70 1 BuiltIn 70 
                                              OpMemberDecorate %70 2 BuiltIn 70 
                                              OpDecorate %70 Block 
                                              OpDecorate vs_TEXCOORD0 Location 84 
                                              OpDecorate %86 Location 86 
                                       %2 = OpTypeVoid 
                                       %3 = OpTypeFunction %2 
                                       %6 = OpTypeFloat 32 
                                       %7 = OpTypeVector %6 4 
                                       %8 = OpTypePointer Private %7 
                        Private f32_4* %9 = OpVariable Private 
                                      %10 = OpTypePointer Input %7 
                         Input f32_4* %11 = OpVariable Input 
                                      %14 = OpTypeInt 32 0 
                                  u32 %15 = OpConstant 4 
                                      %16 = OpTypeArray %7 %15 
                                      %17 = OpTypeArray %7 %15 
                                      %18 = OpTypeStruct %16 %17 
                                      %19 = OpTypePointer Uniform %18 
Uniform struct {f32_4[4]; f32_4[4];}* %20 = OpVariable Uniform 
                                      %21 = OpTypeInt 32 1 
                                  i32 %22 = OpConstant 0 
                                  i32 %23 = OpConstant 1 
                                      %24 = OpTypePointer Uniform %7 
                                  i32 %35 = OpConstant 2 
                                  i32 %44 = OpConstant 3 
                       Private f32_4* %48 = OpVariable Private 
                                  u32 %68 = OpConstant 1 
                                      %69 = OpTypeArray %6 %68 
                                      %70 = OpTypeStruct %7 %6 %69 
                                      %71 = OpTypePointer Output %70 
 Output struct {f32_4; f32; f32[1];}* %72 = OpVariable Output 
                                      %80 = OpTypePointer Output %7 
                                      %82 = OpTypeVector %6 2 
                                      %83 = OpTypePointer Output %82 
               Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                      %85 = OpTypePointer Input %82 
                         Input f32_2* %86 = OpVariable Input 
                                      %88 = OpTypePointer Output %6 
                                  void %4 = OpFunction None %3 
                                       %5 = OpLabel 
                                f32_4 %12 = OpLoad %11 
                                f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                       Uniform f32_4* %25 = OpAccessChain %20 %22 %23 
                                f32_4 %26 = OpLoad %25 
                                f32_4 %27 = OpFMul %13 %26 
                                              OpStore %9 %27 
                       Uniform f32_4* %28 = OpAccessChain %20 %22 %22 
                                f32_4 %29 = OpLoad %28 
                                f32_4 %30 = OpLoad %11 
                                f32_4 %31 = OpVectorShuffle %30 %30 0 0 0 0 
                                f32_4 %32 = OpFMul %29 %31 
                                f32_4 %33 = OpLoad %9 
                                f32_4 %34 = OpFAdd %32 %33 
                                              OpStore %9 %34 
                       Uniform f32_4* %36 = OpAccessChain %20 %22 %35 
                                f32_4 %37 = OpLoad %36 
                                f32_4 %38 = OpLoad %11 
                                f32_4 %39 = OpVectorShuffle %38 %38 2 2 2 2 
                                f32_4 %40 = OpFMul %37 %39 
                                f32_4 %41 = OpLoad %9 
                                f32_4 %42 = OpFAdd %40 %41 
                                              OpStore %9 %42 
                                f32_4 %43 = OpLoad %9 
                       Uniform f32_4* %45 = OpAccessChain %20 %22 %44 
                                f32_4 %46 = OpLoad %45 
                                f32_4 %47 = OpFAdd %43 %46 
                                              OpStore %9 %47 
                                f32_4 %49 = OpLoad %9 
                                f32_4 %50 = OpVectorShuffle %49 %49 1 1 1 1 
                       Uniform f32_4* %51 = OpAccessChain %20 %23 %23 
                                f32_4 %52 = OpLoad %51 
                                f32_4 %53 = OpFMul %50 %52 
                                              OpStore %48 %53 
                       Uniform f32_4* %54 = OpAccessChain %20 %23 %22 
                                f32_4 %55 = OpLoad %54 
                                f32_4 %56 = OpLoad %9 
                                f32_4 %57 = OpVectorShuffle %56 %56 0 0 0 0 
                                f32_4 %58 = OpFMul %55 %57 
                                f32_4 %59 = OpLoad %48 
                                f32_4 %60 = OpFAdd %58 %59 
                                              OpStore %48 %60 
                       Uniform f32_4* %61 = OpAccessChain %20 %23 %35 
                                f32_4 %62 = OpLoad %61 
                                f32_4 %63 = OpLoad %9 
                                f32_4 %64 = OpVectorShuffle %63 %63 2 2 2 2 
                                f32_4 %65 = OpFMul %62 %64 
                                f32_4 %66 = OpLoad %48 
                                f32_4 %67 = OpFAdd %65 %66 
                                              OpStore %48 %67 
                       Uniform f32_4* %73 = OpAccessChain %20 %23 %44 
                                f32_4 %74 = OpLoad %73 
                                f32_4 %75 = OpLoad %9 
                                f32_4 %76 = OpVectorShuffle %75 %75 3 3 3 3 
                                f32_4 %77 = OpFMul %74 %76 
                                f32_4 %78 = OpLoad %48 
                                f32_4 %79 = OpFAdd %77 %78 
                        Output f32_4* %81 = OpAccessChain %72 %22 
                                              OpStore %81 %79 
                                f32_2 %87 = OpLoad %86 
                                              OpStore vs_TEXCOORD0 %87 
                          Output f32* %89 = OpAccessChain %72 %22 %68 
                                  f32 %90 = OpLoad %89 
                                  f32 %91 = OpFNegate %90 
                          Output f32* %92 = OpAccessChain %72 %22 %68 
                                              OpStore %92 %91 
                                              OpReturn
                                              OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 526
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %12 %515 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpDecorate vs_TEXCOORD0 Location 12 
                                                      OpMemberDecorate %25 0 Offset 25 
                                                      OpMemberDecorate %25 1 Offset 25 
                                                      OpMemberDecorate %25 2 Offset 25 
                                                      OpMemberDecorate %25 3 Offset 25 
                                                      OpMemberDecorate %25 4 Offset 25 
                                                      OpMemberDecorate %25 5 Offset 25 
                                                      OpDecorate %25 Block 
                                                      OpDecorate %27 DescriptorSet 27 
                                                      OpDecorate %27 Binding 27 
                                                      OpDecorate %110 DescriptorSet 110 
                                                      OpDecorate %110 Binding 110 
                                                      OpDecorate %114 DescriptorSet 114 
                                                      OpDecorate %114 Binding 114 
                                                      OpDecorate %254 DescriptorSet 254 
                                                      OpDecorate %254 Binding 254 
                                                      OpDecorate %256 DescriptorSet 256 
                                                      OpDecorate %256 Binding 256 
                                                      OpDecorate %515 Location 515 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 3 
                                               %8 = OpTypePointer Private %7 
                                Private f32_3* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 2 
                                              %11 = OpTypePointer Input %10 
                        Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                          f32 %15 = OpConstant 3.674022E-40 
                                        f32_2 %16 = OpConstantComposite %15 %15 
                                              %20 = OpTypePointer Private %10 
                               Private f32_2* %21 = OpVariable Private 
                                              %24 = OpTypeVector %6 4 
                                              %25 = OpTypeStruct %24 %24 %6 %6 %24 %24 
                                              %26 = OpTypePointer Uniform %25 
Uniform struct {f32_4; f32_4; f32; f32; f32_4; f32_4;}* %27 = OpVariable Uniform 
                                              %28 = OpTypeInt 32 1 
                                          i32 %29 = OpConstant 0 
                                              %30 = OpTypePointer Uniform %24 
                               Private f32_3* %39 = OpVariable Private 
                                              %50 = OpTypeInt 32 0 
                                          u32 %51 = OpConstant 0 
                                              %52 = OpTypePointer Private %6 
                                          f32 %61 = OpConstant 3.674022E-40 
                                          f32 %63 = OpConstant 3.674022E-40 
                                          u32 %68 = OpConstant 2 
                                              %69 = OpTypePointer Uniform %6 
                                          u32 %80 = OpConstant 3 
                               Private f32_3* %95 = OpVariable Private 
                                          i32 %97 = OpConstant 4 
                                             %108 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                             %109 = OpTypePointer UniformConstant %108 
        UniformConstant read_only Texture2D* %110 = OpVariable UniformConstant 
                                             %112 = OpTypeSampler 
                                             %113 = OpTypePointer UniformConstant %112 
                    UniformConstant sampler* %114 = OpVariable UniformConstant 
                                             %116 = OpTypeSampledImage %108 
                                         u32 %121 = OpConstant 1 
                              Private f32_3* %124 = OpVariable Private 
                              Private f32_2* %151 = OpVariable Private 
                                             %169 = OpTypePointer Private %24 
                              Private f32_4* %170 = OpVariable Private 
                                         i32 %171 = OpConstant 2 
                                         i32 %176 = OpConstant 3 
                                         i32 %182 = OpConstant 5 
                              Private f32_4* %211 = OpVariable Private 
                                         f32 %252 = OpConstant 3.674022E-40 
        UniformConstant read_only Texture2D* %254 = OpVariable UniformConstant 
                    UniformConstant sampler* %256 = OpVariable UniformConstant 
                              Private f32_3* %273 = OpVariable Private 
                                Private f32* %279 = OpVariable Private 
                                         i32 %393 = OpConstant 1 
                                             %514 = OpTypePointer Output %24 
                               Output f32_4* %515 = OpVariable Output 
                                             %523 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_2 %13 = OpLoad vs_TEXCOORD0 
                                        f32_2 %14 = OpFNegate %13 
                                        f32_2 %17 = OpFAdd %14 %16 
                                        f32_3 %18 = OpLoad %9 
                                        f32_3 %19 = OpVectorShuffle %18 %17 3 4 2 
                                                      OpStore %9 %19 
                                        f32_3 %22 = OpLoad %9 
                                        f32_2 %23 = OpVectorShuffle %22 %22 0 1 
                               Uniform f32_4* %31 = OpAccessChain %27 %29 
                                        f32_4 %32 = OpLoad %31 
                                        f32_2 %33 = OpVectorShuffle %32 %32 1 1 
                                        f32_2 %34 = OpFMul %23 %33 
                                        f32_2 %35 = OpLoad vs_TEXCOORD0 
                                        f32_2 %36 = OpFAdd %34 %35 
                                                      OpStore %21 %36 
                                        f32_2 %37 = OpLoad %21 
                                        f32_2 %38 = OpExtInst %1 10 %37 
                                                      OpStore %21 %38 
                                        f32_2 %40 = OpLoad %21 
                                        f32_2 %41 = OpFNegate %40 
                                        f32_2 %42 = OpFAdd %41 %16 
                                        f32_3 %43 = OpLoad %39 
                                        f32_3 %44 = OpVectorShuffle %43 %42 3 4 2 
                                                      OpStore %39 %44 
                                        f32_3 %45 = OpLoad %39 
                                        f32_2 %46 = OpVectorShuffle %45 %45 0 1 
                                        f32_3 %47 = OpLoad %39 
                                        f32_2 %48 = OpVectorShuffle %47 %47 0 1 
                                          f32 %49 = OpDot %46 %48 
                                 Private f32* %53 = OpAccessChain %39 %51 
                                                      OpStore %53 %49 
                                 Private f32* %54 = OpAccessChain %39 %51 
                                          f32 %55 = OpLoad %54 
                                          f32 %56 = OpExtInst %1 31 %55 
                                 Private f32* %57 = OpAccessChain %39 %51 
                                                      OpStore %57 %56 
                                 Private f32* %58 = OpAccessChain %39 %51 
                                          f32 %59 = OpLoad %58 
                                          f32 %60 = OpFNegate %59 
                                          f32 %62 = OpFMul %60 %61 
                                          f32 %64 = OpFAdd %62 %63 
                                 Private f32* %65 = OpAccessChain %39 %51 
                                                      OpStore %65 %64 
                                 Private f32* %66 = OpAccessChain %39 %51 
                                          f32 %67 = OpLoad %66 
                                 Uniform f32* %70 = OpAccessChain %27 %29 %68 
                                          f32 %71 = OpLoad %70 
                                          f32 %72 = OpFMul %67 %71 
                                 Private f32* %73 = OpAccessChain %39 %51 
                                                      OpStore %73 %72 
                                 Private f32* %74 = OpAccessChain %39 %51 
                                          f32 %75 = OpLoad %74 
                                          f32 %76 = OpExtInst %1 30 %75 
                                 Private f32* %77 = OpAccessChain %39 %51 
                                                      OpStore %77 %76 
                                 Private f32* %78 = OpAccessChain %39 %51 
                                          f32 %79 = OpLoad %78 
                                 Uniform f32* %81 = OpAccessChain %27 %29 %80 
                                          f32 %82 = OpLoad %81 
                                          f32 %83 = OpFMul %79 %82 
                                 Private f32* %84 = OpAccessChain %39 %51 
                                                      OpStore %84 %83 
                                 Private f32* %85 = OpAccessChain %39 %51 
                                          f32 %86 = OpLoad %85 
                                          f32 %87 = OpExtInst %1 29 %86 
                                 Private f32* %88 = OpAccessChain %39 %51 
                                                      OpStore %88 %87 
                                 Private f32* %89 = OpAccessChain %39 %51 
                                          f32 %90 = OpLoad %89 
                                 Private f32* %91 = OpAccessChain %39 %51 
                                          f32 %92 = OpLoad %91 
                                          f32 %93 = OpFMul %90 %92 
                                 Private f32* %94 = OpAccessChain %39 %51 
                                                      OpStore %94 %93 
                                        f32_2 %96 = OpLoad %21 
                               Uniform f32_4* %98 = OpAccessChain %27 %97 
                                        f32_4 %99 = OpLoad %98 
                                       f32_2 %100 = OpVectorShuffle %99 %99 0 1 
                                       f32_2 %101 = OpFMul %96 %100 
                              Uniform f32_4* %102 = OpAccessChain %27 %97 
                                       f32_4 %103 = OpLoad %102 
                                       f32_2 %104 = OpVectorShuffle %103 %103 2 3 
                                       f32_2 %105 = OpFAdd %101 %104 
                                       f32_3 %106 = OpLoad %95 
                                       f32_3 %107 = OpVectorShuffle %106 %105 3 4 2 
                                                      OpStore %95 %107 
                         read_only Texture2D %111 = OpLoad %110 
                                     sampler %115 = OpLoad %114 
                  read_only Texture2DSampled %117 = OpSampledImage %111 %115 
                                       f32_3 %118 = OpLoad %95 
                                       f32_2 %119 = OpVectorShuffle %118 %118 0 1 
                                       f32_4 %120 = OpImageSampleImplicitLod %117 %119 
                                         f32 %122 = OpCompositeExtract %120 1 
                                Private f32* %123 = OpAccessChain %95 %121 
                                                      OpStore %123 %122 
                                       f32_3 %125 = OpLoad %9 
                                       f32_2 %126 = OpVectorShuffle %125 %125 0 1 
                              Uniform f32_4* %127 = OpAccessChain %27 %29 
                                       f32_4 %128 = OpLoad %127 
                                       f32_2 %129 = OpVectorShuffle %128 %128 1 1 
                                       f32_2 %130 = OpFMul %126 %129 
                                       f32_3 %131 = OpLoad %124 
                                       f32_3 %132 = OpVectorShuffle %131 %130 3 4 2 
                                                      OpStore %124 %132 
                                       f32_3 %133 = OpLoad %9 
                                       f32_2 %134 = OpVectorShuffle %133 %133 0 1 
                                       f32_3 %135 = OpLoad %9 
                                       f32_2 %136 = OpVectorShuffle %135 %135 0 1 
                                         f32 %137 = OpDot %134 %136 
                                Private f32* %138 = OpAccessChain %9 %51 
                                                      OpStore %138 %137 
                                Private f32* %139 = OpAccessChain %9 %51 
                                         f32 %140 = OpLoad %139 
                                         f32 %141 = OpExtInst %1 31 %140 
                                Private f32* %142 = OpAccessChain %9 %51 
                                                      OpStore %142 %141 
                                Private f32* %143 = OpAccessChain %9 %51 
                                         f32 %144 = OpLoad %143 
                                         f32 %145 = OpFMul %144 %61 
                                Private f32* %146 = OpAccessChain %9 %51 
                                                      OpStore %146 %145 
                                Private f32* %147 = OpAccessChain %9 %51 
                                         f32 %148 = OpLoad %147 
                                         f32 %149 = OpExtInst %1 10 %148 
                                Private f32* %150 = OpAccessChain %9 %51 
                                                      OpStore %150 %149 
                                       f32_3 %152 = OpLoad %124 
                                       f32_2 %153 = OpVectorShuffle %152 %152 0 1 
                                       f32_3 %154 = OpLoad %124 
                                       f32_2 %155 = OpVectorShuffle %154 %154 0 1 
                                         f32 %156 = OpDot %153 %155 
                                Private f32* %157 = OpAccessChain %151 %51 
                                                      OpStore %157 %156 
                                Private f32* %158 = OpAccessChain %151 %51 
                                         f32 %159 = OpLoad %158 
                                         f32 %160 = OpExtInst %1 32 %159 
                                Private f32* %161 = OpAccessChain %151 %51 
                                                      OpStore %161 %160 
                                       f32_2 %162 = OpLoad %151 
                                       f32_2 %163 = OpVectorShuffle %162 %162 0 0 
                                       f32_3 %164 = OpLoad %124 
                                       f32_2 %165 = OpVectorShuffle %164 %164 0 1 
                                       f32_2 %166 = OpFMul %163 %165 
                                       f32_3 %167 = OpLoad %124 
                                       f32_3 %168 = OpVectorShuffle %167 %166 3 4 2 
                                                      OpStore %124 %168 
                                Uniform f32* %172 = OpAccessChain %27 %171 
                                         f32 %173 = OpLoad %172 
                                Uniform f32* %174 = OpAccessChain %27 %171 
                                         f32 %175 = OpLoad %174 
                                Uniform f32* %177 = OpAccessChain %27 %176 
                                         f32 %178 = OpLoad %177 
                                Uniform f32* %179 = OpAccessChain %27 %176 
                                         f32 %180 = OpLoad %179 
                                       f32_4 %181 = OpCompositeConstruct %173 %175 %178 %180 
                              Uniform f32_4* %183 = OpAccessChain %27 %182 
                                       f32_4 %184 = OpLoad %183 
                                       f32_4 %185 = OpVectorShuffle %184 %184 0 0 0 0 
                                       f32_4 %186 = OpFNegate %185 
                                       f32_4 %187 = OpFMul %181 %186 
                                                      OpStore %170 %187 
                                       f32_3 %188 = OpLoad %124 
                                       f32_2 %189 = OpVectorShuffle %188 %188 0 1 
                                       f32_4 %190 = OpLoad %170 
                                       f32_2 %191 = OpVectorShuffle %190 %190 0 1 
                                       f32_2 %192 = OpFMul %189 %191 
                                       f32_2 %193 = OpLoad %21 
                                       f32_2 %194 = OpFAdd %192 %193 
                                                      OpStore %151 %194 
                                       f32_2 %195 = OpLoad %151 
                              Uniform f32_4* %196 = OpAccessChain %27 %97 
                                       f32_4 %197 = OpLoad %196 
                                       f32_2 %198 = OpVectorShuffle %197 %197 0 1 
                                       f32_2 %199 = OpFMul %195 %198 
                              Uniform f32_4* %200 = OpAccessChain %27 %97 
                                       f32_4 %201 = OpLoad %200 
                                       f32_2 %202 = OpVectorShuffle %201 %201 2 3 
                                       f32_2 %203 = OpFAdd %199 %202 
                                                      OpStore %151 %203 
                         read_only Texture2D %204 = OpLoad %110 
                                     sampler %205 = OpLoad %114 
                  read_only Texture2DSampled %206 = OpSampledImage %204 %205 
                                       f32_2 %207 = OpLoad %151 
                                       f32_4 %208 = OpImageSampleImplicitLod %206 %207 
                                         f32 %209 = OpCompositeExtract %208 0 
                                Private f32* %210 = OpAccessChain %95 %51 
                                                      OpStore %210 %209 
                                Uniform f32* %212 = OpAccessChain %27 %171 
                                         f32 %213 = OpLoad %212 
                                Uniform f32* %214 = OpAccessChain %27 %171 
                                         f32 %215 = OpLoad %214 
                                Uniform f32* %216 = OpAccessChain %27 %176 
                                         f32 %217 = OpLoad %216 
                                Uniform f32* %218 = OpAccessChain %27 %176 
                                         f32 %219 = OpLoad %218 
                                       f32_4 %220 = OpCompositeConstruct %213 %215 %217 %219 
                              Uniform f32_4* %221 = OpAccessChain %27 %182 
                                       f32_4 %222 = OpLoad %221 
                                       f32_4 %223 = OpVectorShuffle %222 %222 0 0 0 0 
                                       f32_4 %224 = OpFMul %220 %223 
                                                      OpStore %211 %224 
                                       f32_3 %225 = OpLoad %124 
                                       f32_2 %226 = OpVectorShuffle %225 %225 0 1 
                                       f32_4 %227 = OpLoad %211 
                                       f32_2 %228 = OpVectorShuffle %227 %227 0 1 
                                       f32_2 %229 = OpFMul %226 %228 
                                       f32_2 %230 = OpLoad %21 
                                       f32_2 %231 = OpFAdd %229 %230 
                                                      OpStore %21 %231 
                                       f32_2 %232 = OpLoad %21 
                              Uniform f32_4* %233 = OpAccessChain %27 %97 
                                       f32_4 %234 = OpLoad %233 
                                       f32_2 %235 = OpVectorShuffle %234 %234 0 1 
                                       f32_2 %236 = OpFMul %232 %235 
                              Uniform f32_4* %237 = OpAccessChain %27 %97 
                                       f32_4 %238 = OpLoad %237 
                                       f32_2 %239 = OpVectorShuffle %238 %238 2 3 
                                       f32_2 %240 = OpFAdd %236 %239 
                                                      OpStore %21 %240 
                         read_only Texture2D %241 = OpLoad %110 
                                     sampler %242 = OpLoad %114 
                  read_only Texture2DSampled %243 = OpSampledImage %241 %242 
                                       f32_2 %244 = OpLoad %21 
                                       f32_4 %245 = OpImageSampleImplicitLod %243 %244 
                                         f32 %246 = OpCompositeExtract %245 2 
                                Private f32* %247 = OpAccessChain %95 %68 
                                                      OpStore %247 %246 
                                       f32_3 %248 = OpLoad %39 
                                       f32_3 %249 = OpVectorShuffle %248 %248 0 0 0 
                                       f32_3 %250 = OpLoad %95 
                                       f32_3 %251 = OpFMul %249 %250 
                                                      OpStore %39 %251 
                                Private f32* %253 = OpAccessChain %9 %121 
                                                      OpStore %253 %252 
                         read_only Texture2D %255 = OpLoad %254 
                                     sampler %257 = OpLoad %256 
                  read_only Texture2DSampled %258 = OpSampledImage %255 %257 
                                       f32_3 %259 = OpLoad %9 
                                       f32_2 %260 = OpVectorShuffle %259 %259 0 1 
                                       f32_4 %261 = OpImageSampleImplicitLod %258 %260 
                                       f32_3 %262 = OpVectorShuffle %261 %261 0 1 2 
                                                      OpStore %9 %262 
                                       f32_3 %263 = OpLoad %9 
                                       f32_3 %264 = OpLoad %39 
                                       f32_3 %265 = OpFMul %263 %264 
                                                      OpStore %39 %265 
                                       f32_3 %266 = OpLoad %39 
                              Uniform f32_4* %267 = OpAccessChain %27 %29 
                                       f32_4 %268 = OpLoad %267 
                                       f32_3 %269 = OpVectorShuffle %268 %268 0 0 0 
                                       f32_3 %270 = OpFMul %266 %269 
                                                      OpStore %39 %270 
                                       f32_2 %271 = OpLoad vs_TEXCOORD0 
                                       f32_2 %272 = OpExtInst %1 10 %271 
                                                      OpStore %151 %272 
                                       f32_2 %274 = OpLoad %151 
                                       f32_2 %275 = OpFNegate %274 
                                       f32_2 %276 = OpFAdd %275 %16 
                                       f32_3 %277 = OpLoad %273 
                                       f32_3 %278 = OpVectorShuffle %277 %276 3 4 2 
                                                      OpStore %273 %278 
                                       f32_3 %280 = OpLoad %273 
                                       f32_2 %281 = OpVectorShuffle %280 %280 0 1 
                                       f32_3 %282 = OpLoad %273 
                                       f32_2 %283 = OpVectorShuffle %282 %282 0 1 
                                         f32 %284 = OpDot %281 %283 
                                                      OpStore %279 %284 
                                         f32 %285 = OpLoad %279 
                                         f32 %286 = OpExtInst %1 31 %285 
                                                      OpStore %279 %286 
                                         f32 %287 = OpLoad %279 
                                         f32 %288 = OpFNegate %287 
                                         f32 %289 = OpFMul %288 %61 
                                         f32 %290 = OpFAdd %289 %63 
                                                      OpStore %279 %290 
                                         f32 %291 = OpLoad %279 
                                Uniform f32* %292 = OpAccessChain %27 %29 %68 
                                         f32 %293 = OpLoad %292 
                                         f32 %294 = OpFMul %291 %293 
                                                      OpStore %279 %294 
                                         f32 %295 = OpLoad %279 
                                         f32 %296 = OpExtInst %1 30 %295 
                                                      OpStore %279 %296 
                                         f32 %297 = OpLoad %279 
                                Uniform f32* %298 = OpAccessChain %27 %29 %80 
                                         f32 %299 = OpLoad %298 
                                         f32 %300 = OpFMul %297 %299 
                                                      OpStore %279 %300 
                                         f32 %301 = OpLoad %279 
                                         f32 %302 = OpExtInst %1 29 %301 
                                                      OpStore %279 %302 
                                         f32 %303 = OpLoad %279 
                                         f32 %304 = OpLoad %279 
                                         f32 %305 = OpFMul %303 %304 
                                                      OpStore %279 %305 
                                       f32_3 %306 = OpLoad %124 
                                       f32_2 %307 = OpVectorShuffle %306 %306 0 1 
                                       f32_4 %308 = OpLoad %170 
                                       f32_2 %309 = OpVectorShuffle %308 %308 0 1 
                                       f32_2 %310 = OpFMul %307 %309 
                                       f32_2 %311 = OpLoad %151 
                                       f32_2 %312 = OpFAdd %310 %311 
                                       f32_4 %313 = OpLoad %170 
                                       f32_4 %314 = OpVectorShuffle %313 %312 4 5 2 3 
                                                      OpStore %170 %314 
                                       f32_4 %315 = OpLoad %170 
                                       f32_2 %316 = OpVectorShuffle %315 %315 0 1 
                              Uniform f32_4* %317 = OpAccessChain %27 %97 
                                       f32_4 %318 = OpLoad %317 
                                       f32_2 %319 = OpVectorShuffle %318 %318 0 1 
                                       f32_2 %320 = OpFMul %316 %319 
                              Uniform f32_4* %321 = OpAccessChain %27 %97 
                                       f32_4 %322 = OpLoad %321 
                                       f32_2 %323 = OpVectorShuffle %322 %322 2 3 
                                       f32_2 %324 = OpFAdd %320 %323 
                                       f32_4 %325 = OpLoad %170 
                                       f32_4 %326 = OpVectorShuffle %325 %324 4 5 2 3 
                                                      OpStore %170 %326 
                         read_only Texture2D %327 = OpLoad %110 
                                     sampler %328 = OpLoad %114 
                  read_only Texture2DSampled %329 = OpSampledImage %327 %328 
                                       f32_4 %330 = OpLoad %170 
                                       f32_2 %331 = OpVectorShuffle %330 %330 0 1 
                                       f32_4 %332 = OpImageSampleImplicitLod %329 %331 
                                         f32 %333 = OpCompositeExtract %332 0 
                                Private f32* %334 = OpAccessChain %273 %51 
                                                      OpStore %334 %333 
                                       f32_3 %335 = OpLoad %124 
                                       f32_2 %336 = OpVectorShuffle %335 %335 0 1 
                                       f32_4 %337 = OpLoad %211 
                                       f32_2 %338 = OpVectorShuffle %337 %337 0 1 
                                       f32_2 %339 = OpFMul %336 %338 
                                       f32_2 %340 = OpLoad %151 
                                       f32_2 %341 = OpFAdd %339 %340 
                                       f32_4 %342 = OpLoad %170 
                                       f32_4 %343 = OpVectorShuffle %342 %341 4 5 2 3 
                                                      OpStore %170 %343 
                                       f32_2 %344 = OpLoad %151 
                              Uniform f32_4* %345 = OpAccessChain %27 %97 
                                       f32_4 %346 = OpLoad %345 
                                       f32_2 %347 = OpVectorShuffle %346 %346 0 1 
                                       f32_2 %348 = OpFMul %344 %347 
                              Uniform f32_4* %349 = OpAccessChain %27 %97 
                                       f32_4 %350 = OpLoad %349 
                                       f32_2 %351 = OpVectorShuffle %350 %350 2 3 
                                       f32_2 %352 = OpFAdd %348 %351 
                                                      OpStore %151 %352 
                         read_only Texture2D %353 = OpLoad %110 
                                     sampler %354 = OpLoad %114 
                  read_only Texture2DSampled %355 = OpSampledImage %353 %354 
                                       f32_2 %356 = OpLoad %151 
                                       f32_4 %357 = OpImageSampleImplicitLod %355 %356 
                                         f32 %358 = OpCompositeExtract %357 1 
                                Private f32* %359 = OpAccessChain %273 %121 
                                                      OpStore %359 %358 
                                       f32_4 %360 = OpLoad %170 
                                       f32_2 %361 = OpVectorShuffle %360 %360 0 1 
                              Uniform f32_4* %362 = OpAccessChain %27 %97 
                                       f32_4 %363 = OpLoad %362 
                                       f32_2 %364 = OpVectorShuffle %363 %363 0 1 
                                       f32_2 %365 = OpFMul %361 %364 
                              Uniform f32_4* %366 = OpAccessChain %27 %97 
                                       f32_4 %367 = OpLoad %366 
                                       f32_2 %368 = OpVectorShuffle %367 %367 2 3 
                                       f32_2 %369 = OpFAdd %365 %368 
                                                      OpStore %151 %369 
                         read_only Texture2D %370 = OpLoad %110 
                                     sampler %371 = OpLoad %114 
                  read_only Texture2DSampled %372 = OpSampledImage %370 %371 
                                       f32_2 %373 = OpLoad %151 
                                       f32_4 %374 = OpImageSampleImplicitLod %372 %373 
                                         f32 %375 = OpCompositeExtract %374 2 
                                Private f32* %376 = OpAccessChain %273 %68 
                                                      OpStore %376 %375 
                                         f32 %377 = OpLoad %279 
                                       f32_3 %378 = OpCompositeConstruct %377 %377 %377 
                                       f32_3 %379 = OpLoad %273 
                                       f32_3 %380 = OpFMul %378 %379 
                                                      OpStore %273 %380 
                                       f32_3 %381 = OpLoad %9 
                                       f32_3 %382 = OpLoad %273 
                                       f32_3 %383 = OpFMul %381 %382 
                                                      OpStore %273 %383 
                                       f32_3 %384 = OpLoad %273 
                              Uniform f32_4* %385 = OpAccessChain %27 %29 
                                       f32_4 %386 = OpLoad %385 
                                       f32_3 %387 = OpVectorShuffle %386 %386 0 0 0 
                                       f32_3 %388 = OpFMul %384 %387 
                                       f32_3 %389 = OpLoad %39 
                                       f32_3 %390 = OpFAdd %388 %389 
                                                      OpStore %39 %390 
                                       f32_3 %391 = OpLoad %124 
                                       f32_2 %392 = OpVectorShuffle %391 %391 0 1 
                              Uniform f32_4* %394 = OpAccessChain %27 %393 
                                       f32_4 %395 = OpLoad %394 
                                       f32_2 %396 = OpVectorShuffle %395 %395 1 1 
                                       f32_2 %397 = OpFMul %392 %396 
                                       f32_2 %398 = OpLoad vs_TEXCOORD0 
                                       f32_2 %399 = OpFAdd %397 %398 
                                                      OpStore %151 %399 
                                       f32_2 %400 = OpLoad %151 
                                       f32_2 %401 = OpExtInst %1 10 %400 
                                                      OpStore %151 %401 
                                       f32_3 %402 = OpLoad %124 
                                       f32_2 %403 = OpVectorShuffle %402 %402 0 1 
                                       f32_4 %404 = OpLoad %170 
                                       f32_2 %405 = OpVectorShuffle %404 %404 2 3 
                                       f32_2 %406 = OpFMul %403 %405 
                                       f32_2 %407 = OpLoad %151 
                                       f32_2 %408 = OpFAdd %406 %407 
                                       f32_4 %409 = OpLoad %170 
                                       f32_4 %410 = OpVectorShuffle %409 %408 4 5 2 3 
                                                      OpStore %170 %410 
                                       f32_3 %411 = OpLoad %124 
                                       f32_2 %412 = OpVectorShuffle %411 %411 0 1 
                                       f32_4 %413 = OpLoad %211 
                                       f32_2 %414 = OpVectorShuffle %413 %413 2 3 
                                       f32_2 %415 = OpFMul %412 %414 
                                       f32_2 %416 = OpLoad %151 
                                       f32_2 %417 = OpFAdd %415 %416 
                                       f32_3 %418 = OpLoad %124 
                                       f32_3 %419 = OpVectorShuffle %418 %417 3 4 2 
                                                      OpStore %124 %419 
                                       f32_3 %420 = OpLoad %124 
                                       f32_2 %421 = OpVectorShuffle %420 %420 0 1 
                              Uniform f32_4* %422 = OpAccessChain %27 %97 
                                       f32_4 %423 = OpLoad %422 
                                       f32_2 %424 = OpVectorShuffle %423 %423 0 1 
                                       f32_2 %425 = OpFMul %421 %424 
                              Uniform f32_4* %426 = OpAccessChain %27 %97 
                                       f32_4 %427 = OpLoad %426 
                                       f32_2 %428 = OpVectorShuffle %427 %427 2 3 
                                       f32_2 %429 = OpFAdd %425 %428 
                                       f32_3 %430 = OpLoad %124 
                                       f32_3 %431 = OpVectorShuffle %430 %429 3 4 2 
                                                      OpStore %124 %431 
                         read_only Texture2D %432 = OpLoad %110 
                                     sampler %433 = OpLoad %114 
                  read_only Texture2DSampled %434 = OpSampledImage %432 %433 
                                       f32_3 %435 = OpLoad %124 
                                       f32_2 %436 = OpVectorShuffle %435 %435 0 1 
                                       f32_4 %437 = OpImageSampleImplicitLod %434 %436 
                                         f32 %438 = OpCompositeExtract %437 2 
                                Private f32* %439 = OpAccessChain %211 %68 
                                                      OpStore %439 %438 
                                       f32_4 %440 = OpLoad %170 
                                       f32_2 %441 = OpVectorShuffle %440 %440 0 1 
                              Uniform f32_4* %442 = OpAccessChain %27 %97 
                                       f32_4 %443 = OpLoad %442 
                                       f32_2 %444 = OpVectorShuffle %443 %443 0 1 
                                       f32_2 %445 = OpFMul %441 %444 
                              Uniform f32_4* %446 = OpAccessChain %27 %97 
                                       f32_4 %447 = OpLoad %446 
                                       f32_2 %448 = OpVectorShuffle %447 %447 2 3 
                                       f32_2 %449 = OpFAdd %445 %448 
                                       f32_3 %450 = OpLoad %124 
                                       f32_3 %451 = OpVectorShuffle %450 %449 3 4 2 
                                                      OpStore %124 %451 
                         read_only Texture2D %452 = OpLoad %110 
                                     sampler %453 = OpLoad %114 
                  read_only Texture2DSampled %454 = OpSampledImage %452 %453 
                                       f32_3 %455 = OpLoad %124 
                                       f32_2 %456 = OpVectorShuffle %455 %455 0 1 
                                       f32_4 %457 = OpImageSampleImplicitLod %454 %456 
                                         f32 %458 = OpCompositeExtract %457 0 
                                Private f32* %459 = OpAccessChain %211 %51 
                                                      OpStore %459 %458 
                                       f32_2 %460 = OpLoad %151 
                                       f32_2 %461 = OpFNegate %460 
                                       f32_2 %462 = OpFAdd %461 %16 
                                       f32_3 %463 = OpLoad %124 
                                       f32_3 %464 = OpVectorShuffle %463 %462 3 4 2 
                                                      OpStore %124 %464 
                                       f32_2 %465 = OpLoad %151 
                              Uniform f32_4* %466 = OpAccessChain %27 %97 
                                       f32_4 %467 = OpLoad %466 
                                       f32_2 %468 = OpVectorShuffle %467 %467 0 1 
                                       f32_2 %469 = OpFMul %465 %468 
                              Uniform f32_4* %470 = OpAccessChain %27 %97 
                                       f32_4 %471 = OpLoad %470 
                                       f32_2 %472 = OpVectorShuffle %471 %471 2 3 
                                       f32_2 %473 = OpFAdd %469 %472 
                                                      OpStore %151 %473 
                         read_only Texture2D %474 = OpLoad %110 
                                     sampler %475 = OpLoad %114 
                  read_only Texture2DSampled %476 = OpSampledImage %474 %475 
                                       f32_2 %477 = OpLoad %151 
                                       f32_4 %478 = OpImageSampleImplicitLod %476 %477 
                                         f32 %479 = OpCompositeExtract %478 1 
                                Private f32* %480 = OpAccessChain %211 %121 
                                                      OpStore %480 %479 
                                       f32_3 %481 = OpLoad %124 
                                       f32_2 %482 = OpVectorShuffle %481 %481 0 1 
                                       f32_3 %483 = OpLoad %124 
                                       f32_2 %484 = OpVectorShuffle %483 %483 0 1 
                                         f32 %485 = OpDot %482 %484 
                                                      OpStore %279 %485 
                                         f32 %486 = OpLoad %279 
                                         f32 %487 = OpExtInst %1 31 %486 
                                                      OpStore %279 %487 
                                         f32 %488 = OpLoad %279 
                                         f32 %489 = OpFNegate %488 
                                         f32 %490 = OpFMul %489 %61 
                                         f32 %491 = OpFAdd %490 %63 
                                                      OpStore %279 %491 
                                         f32 %492 = OpLoad %279 
                                Uniform f32* %493 = OpAccessChain %27 %393 %68 
                                         f32 %494 = OpLoad %493 
                                         f32 %495 = OpFMul %492 %494 
                                                      OpStore %279 %495 
                                         f32 %496 = OpLoad %279 
                                         f32 %497 = OpExtInst %1 30 %496 
                                                      OpStore %279 %497 
                                         f32 %498 = OpLoad %279 
                                Uniform f32* %499 = OpAccessChain %27 %393 %80 
                                         f32 %500 = OpLoad %499 
                                         f32 %501 = OpFMul %498 %500 
                                                      OpStore %279 %501 
                                         f32 %502 = OpLoad %279 
                                         f32 %503 = OpExtInst %1 29 %502 
                                                      OpStore %279 %503 
                                         f32 %504 = OpLoad %279 
                                       f32_3 %505 = OpCompositeConstruct %504 %504 %504 
                                       f32_4 %506 = OpLoad %211 
                                       f32_3 %507 = OpVectorShuffle %506 %506 0 1 2 
                                       f32_3 %508 = OpFMul %505 %507 
                                                      OpStore %124 %508 
                                       f32_3 %509 = OpLoad %124 
                              Uniform f32_4* %510 = OpAccessChain %27 %393 
                                       f32_4 %511 = OpLoad %510 
                                       f32_3 %512 = OpVectorShuffle %511 %511 0 0 0 
                                       f32_3 %513 = OpFMul %509 %512 
                                                      OpStore %124 %513 
                                       f32_3 %516 = OpLoad %124 
                                       f32_3 %517 = OpLoad %9 
                                       f32_3 %518 = OpFMul %516 %517 
                                       f32_3 %519 = OpLoad %39 
                                       f32_3 %520 = OpFAdd %518 %519 
                                       f32_4 %521 = OpLoad %515 
                                       f32_4 %522 = OpVectorShuffle %521 %520 4 5 6 3 
                                                      OpStore %515 %522 
                                 Output f32* %524 = OpAccessChain %515 %80 
                                                      OpStore %524 %252 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
}
Program "fp" {
SubProgram "d3d11 " {
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
""
}
SubProgram "vulkan " {
""
}
SubProgram "d3d11 " {
Keywords { "AB_HIGH_PRECISION" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "AB_HIGH_PRECISION" }
""
}
SubProgram "vulkan " {
Keywords { "AB_HIGH_PRECISION" }
""
}
}
}
 Pass {
  Name "frag_lensFlare3"
  ZTest Always
  ZWrite Off
  Cull Off
  GpuProgramID 453897
Program "vp" {
SubProgram "d3d11 " {
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in  vec4 in_POSITION0;
in  vec2 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _LensFlareGhostsParams;
uniform 	vec4 _LensFlareHaloParams;
uniform 	float _LensFlareGhostChrDistortion;
uniform 	float _LensFlareHaloChrDistortion;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BloomRange;
uniform 	vec4 _MainTex_TexelSize;
UNITY_LOCATION(0) uniform  sampler2D _LensFlareLUT;
UNITY_LOCATION(1) uniform  sampler2D _MainTex;
in  vec2 vs_TEXCOORD0;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
vec4 u_xlat6;
vec4 u_xlat7;
vec4 u_xlat8;
vec2 u_xlat10;
vec2 u_xlat18;
vec2 u_xlat20;
vec2 u_xlat21;
float u_xlat27;
float u_xlat28;
float u_xlat29;
void main()
{
    u_xlat0.xy = (-vs_TEXCOORD0.xy) + vec2(0.5, 0.5);
    u_xlat18.xy = u_xlat0.xy * _LensFlareGhostsParams.yy + vs_TEXCOORD0.xy;
    u_xlat18.xy = fract(u_xlat18.xy);
    u_xlat1.xy = (-u_xlat18.xy) + vec2(0.5, 0.5);
    u_xlat1.x = dot(u_xlat1.xy, u_xlat1.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlat1.x = (-u_xlat1.x) * 1.41419995 + 1.0;
    u_xlat1.x = u_xlat1.x * _LensFlareGhostsParams.z;
    u_xlat1.x = log2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _LensFlareGhostsParams.w;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat10.xy = u_xlat18.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat2 = texture(_MainTex, u_xlat10.xy);
    u_xlat10.x = u_xlat2.y * _BloomRange.x;
    u_xlat2.y = u_xlat2.w * u_xlat10.x;
    u_xlat10.xy = u_xlat0.xy * _LensFlareGhostsParams.yy;
    u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * 1.41419995;
    u_xlat0.x = fract(u_xlat0.x);
    u_xlat28 = dot(u_xlat10.xy, u_xlat10.xy);
    u_xlat28 = inversesqrt(u_xlat28);
    u_xlat3.xy = vec2(u_xlat28) * u_xlat10.xy;
    u_xlat10.xy = u_xlat10.xy * vec2(2.0, 2.0) + vs_TEXCOORD0.xy;
    u_xlat10.xy = fract(u_xlat10.xy);
    u_xlat4 = vec4(_LensFlareGhostChrDistortion, _LensFlareGhostChrDistortion, _LensFlareHaloChrDistortion, _LensFlareHaloChrDistortion) * (-_MainTex_TexelSize.xxxx);
    u_xlat21.xy = u_xlat3.xy * u_xlat4.xy + u_xlat18.xy;
    u_xlat21.xy = u_xlat21.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat5 = texture(_MainTex, u_xlat21.xy);
    u_xlat28 = u_xlat5.x * _BloomRange.x;
    u_xlat2.x = u_xlat5.w * u_xlat28;
    u_xlat5 = vec4(_LensFlareGhostChrDistortion, _LensFlareGhostChrDistortion, _LensFlareHaloChrDistortion, _LensFlareHaloChrDistortion) * _MainTex_TexelSize.xxxx;
    u_xlat18.xy = u_xlat3.xy * u_xlat5.xy + u_xlat18.xy;
    u_xlat18.xy = u_xlat18.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat6 = texture(_MainTex, u_xlat18.xy);
    u_xlat18.x = u_xlat6.z * _BloomRange.x;
    u_xlat2.z = u_xlat6.w * u_xlat18.x;
    u_xlat2.xyz = u_xlat1.xxx * u_xlat2.xyz;
    u_xlat0.y = 0.0;
    u_xlat0 = texture(_LensFlareLUT, u_xlat0.xy);
    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz * _LensFlareGhostsParams.xxx;
    u_xlat1.xw = fract(vs_TEXCOORD0.xy);
    u_xlat21.xy = (-u_xlat1.xw) + vec2(0.5, 0.5);
    u_xlat27 = dot(u_xlat21.xy, u_xlat21.xy);
    u_xlat27 = sqrt(u_xlat27);
    u_xlat27 = (-u_xlat27) * 1.41419995 + 1.0;
    u_xlat27 = u_xlat27 * _LensFlareGhostsParams.z;
    u_xlat27 = log2(u_xlat27);
    u_xlat27 = u_xlat27 * _LensFlareGhostsParams.w;
    u_xlat27 = exp2(u_xlat27);
    u_xlat27 = u_xlat27 * u_xlat27;
    u_xlat21.xy = u_xlat1.xw * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat6 = texture(_MainTex, u_xlat21.xy);
    u_xlat29 = u_xlat6.y * _BloomRange.x;
    u_xlat6.y = u_xlat6.w * u_xlat29;
    u_xlat21.xy = u_xlat3.xy * u_xlat4.xy + u_xlat1.xw;
    u_xlat1.xw = u_xlat3.xy * u_xlat5.xy + u_xlat1.xw;
    u_xlat1.xw = u_xlat1.xw * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat7 = texture(_MainTex, u_xlat1.xw);
    u_xlat1.xw = u_xlat21.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat8 = texture(_MainTex, u_xlat1.xw);
    u_xlat1.x = u_xlat8.x * _BloomRange.x;
    u_xlat6.x = u_xlat8.w * u_xlat1.x;
    u_xlat1.x = u_xlat7.z * _BloomRange.x;
    u_xlat6.z = u_xlat7.w * u_xlat1.x;
    u_xlat6.xyz = vec3(u_xlat27) * u_xlat6.xyz;
    u_xlat6.xyz = u_xlat0.xyz * u_xlat6.xyz;
    u_xlat2.xyz = u_xlat6.xyz * _LensFlareGhostsParams.xxx + u_xlat2.xyz;
    u_xlat1.xw = (-u_xlat10.xy) + vec2(0.5, 0.5);
    u_xlat27 = dot(u_xlat1.xw, u_xlat1.xw);
    u_xlat27 = sqrt(u_xlat27);
    u_xlat27 = (-u_xlat27) * 1.41419995 + 1.0;
    u_xlat27 = u_xlat27 * _LensFlareGhostsParams.z;
    u_xlat27 = log2(u_xlat27);
    u_xlat27 = u_xlat27 * _LensFlareGhostsParams.w;
    u_xlat27 = exp2(u_xlat27);
    u_xlat27 = u_xlat27 * u_xlat27;
    u_xlat1.xw = u_xlat10.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat6 = texture(_MainTex, u_xlat1.xw);
    u_xlat1.x = u_xlat6.y * _BloomRange.x;
    u_xlat6.y = u_xlat6.w * u_xlat1.x;
    u_xlat1.xw = u_xlat3.xy * u_xlat4.xy + u_xlat10.xy;
    u_xlat10.xy = u_xlat3.xy * u_xlat5.xy + u_xlat10.xy;
    u_xlat10.xy = u_xlat10.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat7 = texture(_MainTex, u_xlat10.xy);
    u_xlat1.xy = u_xlat1.xw * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1 = texture(_MainTex, u_xlat1.xy);
    u_xlat1.x = u_xlat1.x * _BloomRange.x;
    u_xlat6.x = u_xlat1.w * u_xlat1.x;
    u_xlat1.x = u_xlat7.z * _BloomRange.x;
    u_xlat6.z = u_xlat7.w * u_xlat1.x;
    u_xlat1.xyz = vec3(u_xlat27) * u_xlat6.xyz;
    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _LensFlareGhostsParams.xxx + u_xlat2.xyz;
    u_xlat2.xy = u_xlat3.xy * _LensFlareHaloParams.yy + vs_TEXCOORD0.xy;
    u_xlat2.xy = fract(u_xlat2.xy);
    u_xlat20.xy = u_xlat3.xy * u_xlat4.zw + u_xlat2.xy;
    u_xlat3.xy = u_xlat3.xy * u_xlat5.zw + u_xlat2.xy;
    u_xlat3.xy = u_xlat3.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat3 = texture(_MainTex, u_xlat3.xy);
    u_xlat20.xy = u_xlat20.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat4 = texture(_MainTex, u_xlat20.xy);
    u_xlat27 = u_xlat4.x * _BloomRange.x;
    u_xlat4.x = u_xlat4.w * u_xlat27;
    u_xlat27 = u_xlat3.z * _BloomRange.x;
    u_xlat4.z = u_xlat3.w * u_xlat27;
    u_xlat20.xy = (-u_xlat2.xy) + vec2(0.5, 0.5);
    u_xlat2.xy = u_xlat2.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat3 = texture(_MainTex, u_xlat2.xy);
    u_xlat27 = dot(u_xlat20.xy, u_xlat20.xy);
    u_xlat27 = sqrt(u_xlat27);
    u_xlat27 = (-u_xlat27) * 1.41419995 + 1.0;
    u_xlat27 = u_xlat27 * _LensFlareHaloParams.z;
    u_xlat27 = log2(u_xlat27);
    u_xlat27 = u_xlat27 * _LensFlareHaloParams.w;
    u_xlat27 = exp2(u_xlat27);
    u_xlat28 = u_xlat3.y * _BloomRange.x;
    u_xlat4.y = u_xlat3.w * u_xlat28;
    u_xlat2.xyz = vec3(u_xlat27) * u_xlat4.xyz;
    u_xlat2.xyz = u_xlat2.xyz * _LensFlareHaloParams.xxx;
    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.xyz * _BloomRange.yyy;
    u_xlat27 = max(u_xlat0.y, u_xlat0.x);
    u_xlat1.x = max(u_xlat0.z, 9.99999997e-07);
    u_xlat27 = max(u_xlat27, u_xlat1.x);
    u_xlat27 = min(u_xlat27, 1.0);
    u_xlat27 = u_xlat27 * 255.0;
    u_xlat27 = ceil(u_xlat27);
    u_xlat27 = u_xlat27 * 0.00392156886;
    SV_Target0.xyz = u_xlat0.xyz / vec3(u_xlat27);
    SV_Target0.w = u_xlat27;
    return;
}

#endif
"
}
SubProgram "vulkan " {
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 94
; Schema: 0
                                              OpCapability Shader 
                                       %1 = OpExtInstImport "GLSL.std.450" 
                                              OpMemoryModel Logical GLSL450 
                                              OpEntryPoint Vertex %4 "main" %11 %72 %84 %86 
                                              OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                              OpDecorate %11 Location 11 
                                              OpDecorate %16 ArrayStride 16 
                                              OpDecorate %17 ArrayStride 17 
                                              OpMemberDecorate %18 0 Offset 18 
                                              OpMemberDecorate %18 1 Offset 18 
                                              OpDecorate %18 Block 
                                              OpDecorate %20 DescriptorSet 20 
                                              OpDecorate %20 Binding 20 
                                              OpMemberDecorate %70 0 BuiltIn 70 
                                              OpMemberDecorate %70 1 BuiltIn 70 
                                              OpMemberDecorate %70 2 BuiltIn 70 
                                              OpDecorate %70 Block 
                                              OpDecorate vs_TEXCOORD0 Location 84 
                                              OpDecorate %86 Location 86 
                                       %2 = OpTypeVoid 
                                       %3 = OpTypeFunction %2 
                                       %6 = OpTypeFloat 32 
                                       %7 = OpTypeVector %6 4 
                                       %8 = OpTypePointer Private %7 
                        Private f32_4* %9 = OpVariable Private 
                                      %10 = OpTypePointer Input %7 
                         Input f32_4* %11 = OpVariable Input 
                                      %14 = OpTypeInt 32 0 
                                  u32 %15 = OpConstant 4 
                                      %16 = OpTypeArray %7 %15 
                                      %17 = OpTypeArray %7 %15 
                                      %18 = OpTypeStruct %16 %17 
                                      %19 = OpTypePointer Uniform %18 
Uniform struct {f32_4[4]; f32_4[4];}* %20 = OpVariable Uniform 
                                      %21 = OpTypeInt 32 1 
                                  i32 %22 = OpConstant 0 
                                  i32 %23 = OpConstant 1 
                                      %24 = OpTypePointer Uniform %7 
                                  i32 %35 = OpConstant 2 
                                  i32 %44 = OpConstant 3 
                       Private f32_4* %48 = OpVariable Private 
                                  u32 %68 = OpConstant 1 
                                      %69 = OpTypeArray %6 %68 
                                      %70 = OpTypeStruct %7 %6 %69 
                                      %71 = OpTypePointer Output %70 
 Output struct {f32_4; f32; f32[1];}* %72 = OpVariable Output 
                                      %80 = OpTypePointer Output %7 
                                      %82 = OpTypeVector %6 2 
                                      %83 = OpTypePointer Output %82 
               Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                      %85 = OpTypePointer Input %82 
                         Input f32_2* %86 = OpVariable Input 
                                      %88 = OpTypePointer Output %6 
                                  void %4 = OpFunction None %3 
                                       %5 = OpLabel 
                                f32_4 %12 = OpLoad %11 
                                f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                       Uniform f32_4* %25 = OpAccessChain %20 %22 %23 
                                f32_4 %26 = OpLoad %25 
                                f32_4 %27 = OpFMul %13 %26 
                                              OpStore %9 %27 
                       Uniform f32_4* %28 = OpAccessChain %20 %22 %22 
                                f32_4 %29 = OpLoad %28 
                                f32_4 %30 = OpLoad %11 
                                f32_4 %31 = OpVectorShuffle %30 %30 0 0 0 0 
                                f32_4 %32 = OpFMul %29 %31 
                                f32_4 %33 = OpLoad %9 
                                f32_4 %34 = OpFAdd %32 %33 
                                              OpStore %9 %34 
                       Uniform f32_4* %36 = OpAccessChain %20 %22 %35 
                                f32_4 %37 = OpLoad %36 
                                f32_4 %38 = OpLoad %11 
                                f32_4 %39 = OpVectorShuffle %38 %38 2 2 2 2 
                                f32_4 %40 = OpFMul %37 %39 
                                f32_4 %41 = OpLoad %9 
                                f32_4 %42 = OpFAdd %40 %41 
                                              OpStore %9 %42 
                                f32_4 %43 = OpLoad %9 
                       Uniform f32_4* %45 = OpAccessChain %20 %22 %44 
                                f32_4 %46 = OpLoad %45 
                                f32_4 %47 = OpFAdd %43 %46 
                                              OpStore %9 %47 
                                f32_4 %49 = OpLoad %9 
                                f32_4 %50 = OpVectorShuffle %49 %49 1 1 1 1 
                       Uniform f32_4* %51 = OpAccessChain %20 %23 %23 
                                f32_4 %52 = OpLoad %51 
                                f32_4 %53 = OpFMul %50 %52 
                                              OpStore %48 %53 
                       Uniform f32_4* %54 = OpAccessChain %20 %23 %22 
                                f32_4 %55 = OpLoad %54 
                                f32_4 %56 = OpLoad %9 
                                f32_4 %57 = OpVectorShuffle %56 %56 0 0 0 0 
                                f32_4 %58 = OpFMul %55 %57 
                                f32_4 %59 = OpLoad %48 
                                f32_4 %60 = OpFAdd %58 %59 
                                              OpStore %48 %60 
                       Uniform f32_4* %61 = OpAccessChain %20 %23 %35 
                                f32_4 %62 = OpLoad %61 
                                f32_4 %63 = OpLoad %9 
                                f32_4 %64 = OpVectorShuffle %63 %63 2 2 2 2 
                                f32_4 %65 = OpFMul %62 %64 
                                f32_4 %66 = OpLoad %48 
                                f32_4 %67 = OpFAdd %65 %66 
                                              OpStore %48 %67 
                       Uniform f32_4* %73 = OpAccessChain %20 %23 %44 
                                f32_4 %74 = OpLoad %73 
                                f32_4 %75 = OpLoad %9 
                                f32_4 %76 = OpVectorShuffle %75 %75 3 3 3 3 
                                f32_4 %77 = OpFMul %74 %76 
                                f32_4 %78 = OpLoad %48 
                                f32_4 %79 = OpFAdd %77 %78 
                        Output f32_4* %81 = OpAccessChain %72 %22 
                                              OpStore %81 %79 
                                f32_2 %87 = OpLoad %86 
                                              OpStore vs_TEXCOORD0 %87 
                          Output f32* %89 = OpAccessChain %72 %22 %68 
                                  f32 %90 = OpLoad %89 
                                  f32 %91 = OpFNegate %90 
                          Output f32* %92 = OpAccessChain %72 %22 %68 
                                              OpStore %92 %91 
                                              OpReturn
                                              OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 799
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %12 %788 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpDecorate vs_TEXCOORD0 Location 12 
                                                      OpMemberDecorate %25 0 Offset 25 
                                                      OpMemberDecorate %25 1 Offset 25 
                                                      OpMemberDecorate %25 2 Offset 25 
                                                      OpMemberDecorate %25 3 Offset 25 
                                                      OpMemberDecorate %25 4 Offset 25 
                                                      OpMemberDecorate %25 5 Offset 25 
                                                      OpMemberDecorate %25 6 Offset 25 
                                                      OpDecorate %25 Block 
                                                      OpDecorate %27 DescriptorSet 27 
                                                      OpDecorate %27 Binding 27 
                                                      OpDecorate %109 DescriptorSet 109 
                                                      OpDecorate %109 Binding 109 
                                                      OpDecorate %113 DescriptorSet 113 
                                                      OpDecorate %113 Binding 113 
                                                      OpDecorate %281 DescriptorSet 281 
                                                      OpDecorate %281 Binding 281 
                                                      OpDecorate %283 DescriptorSet 283 
                                                      OpDecorate %283 Binding 283 
                                                      OpDecorate %788 Location 788 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 3 
                                               %8 = OpTypePointer Private %7 
                                Private f32_3* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 2 
                                              %11 = OpTypePointer Input %10 
                        Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                          f32 %15 = OpConstant 3.674022E-40 
                                        f32_2 %16 = OpConstantComposite %15 %15 
                                              %20 = OpTypePointer Private %10 
                               Private f32_2* %21 = OpVariable Private 
                                              %24 = OpTypeVector %6 4 
                                              %25 = OpTypeStruct %24 %24 %6 %6 %24 %24 %24 
                                              %26 = OpTypePointer Uniform %25 
Uniform struct {f32_4; f32_4; f32; f32; f32_4; f32_4; f32_4;}* %27 = OpVariable Uniform 
                                              %28 = OpTypeInt 32 1 
                                          i32 %29 = OpConstant 0 
                                              %30 = OpTypePointer Uniform %24 
                                              %39 = OpTypePointer Private %24 
                               Private f32_4* %40 = OpVariable Private 
                                              %51 = OpTypeInt 32 0 
                                          u32 %52 = OpConstant 0 
                                              %53 = OpTypePointer Private %6 
                                          f32 %62 = OpConstant 3.674022E-40 
                                          f32 %64 = OpConstant 3.674022E-40 
                                          u32 %69 = OpConstant 2 
                                              %70 = OpTypePointer Uniform %6 
                                          u32 %81 = OpConstant 3 
                               Private f32_2* %96 = OpVariable Private 
                                          i32 %98 = OpConstant 4 
                                             %107 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                             %108 = OpTypePointer UniformConstant %107 
        UniformConstant read_only Texture2D* %109 = OpVariable UniformConstant 
                                             %111 = OpTypeSampler 
                                             %112 = OpTypePointer UniformConstant %111 
                    UniformConstant sampler* %113 = OpVariable UniformConstant 
                                             %115 = OpTypeSampledImage %107 
                                         i32 %122 = OpConstant 5 
                              Private f32_3* %127 = OpVariable Private 
                                         u32 %128 = OpConstant 1 
                                Private f32* %159 = OpVariable Private 
                              Private f32_2* %165 = OpVariable Private 
                                         f32 %171 = OpConstant 3.674022E-40 
                                       f32_2 %172 = OpConstantComposite %171 %171 
                              Private f32_4* %178 = OpVariable Private 
                                         i32 %179 = OpConstant 2 
                                         i32 %184 = OpConstant 3 
                                         i32 %190 = OpConstant 6 
                              Private f32_2* %196 = OpVariable Private 
                              Private f32_4* %228 = OpVariable Private 
                                         f32 %279 = OpConstant 3.674022E-40 
        UniformConstant read_only Texture2D* %281 = OpVariable UniformConstant 
                    UniformConstant sampler* %283 = OpVariable UniformConstant 
                                Private f32* %306 = OpVariable Private 
                                Private f32* %347 = OpVariable Private 
                              Private f32_3* %353 = OpVariable Private 
                                         i32 %607 = OpConstant 1 
                              Private f32_2* %621 = OpVariable Private 
                                         f32 %770 = OpConstant 3.674022E-40 
                                         f32 %780 = OpConstant 3.674022E-40 
                                         f32 %785 = OpConstant 3.674022E-40 
                                             %787 = OpTypePointer Output %24 
                               Output f32_4* %788 = OpVariable Output 
                                             %796 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_2 %13 = OpLoad vs_TEXCOORD0 
                                        f32_2 %14 = OpFNegate %13 
                                        f32_2 %17 = OpFAdd %14 %16 
                                        f32_3 %18 = OpLoad %9 
                                        f32_3 %19 = OpVectorShuffle %18 %17 3 4 2 
                                                      OpStore %9 %19 
                                        f32_3 %22 = OpLoad %9 
                                        f32_2 %23 = OpVectorShuffle %22 %22 0 1 
                               Uniform f32_4* %31 = OpAccessChain %27 %29 
                                        f32_4 %32 = OpLoad %31 
                                        f32_2 %33 = OpVectorShuffle %32 %32 1 1 
                                        f32_2 %34 = OpFMul %23 %33 
                                        f32_2 %35 = OpLoad vs_TEXCOORD0 
                                        f32_2 %36 = OpFAdd %34 %35 
                                                      OpStore %21 %36 
                                        f32_2 %37 = OpLoad %21 
                                        f32_2 %38 = OpExtInst %1 10 %37 
                                                      OpStore %21 %38 
                                        f32_2 %41 = OpLoad %21 
                                        f32_2 %42 = OpFNegate %41 
                                        f32_2 %43 = OpFAdd %42 %16 
                                        f32_4 %44 = OpLoad %40 
                                        f32_4 %45 = OpVectorShuffle %44 %43 4 5 2 3 
                                                      OpStore %40 %45 
                                        f32_4 %46 = OpLoad %40 
                                        f32_2 %47 = OpVectorShuffle %46 %46 0 1 
                                        f32_4 %48 = OpLoad %40 
                                        f32_2 %49 = OpVectorShuffle %48 %48 0 1 
                                          f32 %50 = OpDot %47 %49 
                                 Private f32* %54 = OpAccessChain %40 %52 
                                                      OpStore %54 %50 
                                 Private f32* %55 = OpAccessChain %40 %52 
                                          f32 %56 = OpLoad %55 
                                          f32 %57 = OpExtInst %1 31 %56 
                                 Private f32* %58 = OpAccessChain %40 %52 
                                                      OpStore %58 %57 
                                 Private f32* %59 = OpAccessChain %40 %52 
                                          f32 %60 = OpLoad %59 
                                          f32 %61 = OpFNegate %60 
                                          f32 %63 = OpFMul %61 %62 
                                          f32 %65 = OpFAdd %63 %64 
                                 Private f32* %66 = OpAccessChain %40 %52 
                                                      OpStore %66 %65 
                                 Private f32* %67 = OpAccessChain %40 %52 
                                          f32 %68 = OpLoad %67 
                                 Uniform f32* %71 = OpAccessChain %27 %29 %69 
                                          f32 %72 = OpLoad %71 
                                          f32 %73 = OpFMul %68 %72 
                                 Private f32* %74 = OpAccessChain %40 %52 
                                                      OpStore %74 %73 
                                 Private f32* %75 = OpAccessChain %40 %52 
                                          f32 %76 = OpLoad %75 
                                          f32 %77 = OpExtInst %1 30 %76 
                                 Private f32* %78 = OpAccessChain %40 %52 
                                                      OpStore %78 %77 
                                 Private f32* %79 = OpAccessChain %40 %52 
                                          f32 %80 = OpLoad %79 
                                 Uniform f32* %82 = OpAccessChain %27 %29 %81 
                                          f32 %83 = OpLoad %82 
                                          f32 %84 = OpFMul %80 %83 
                                 Private f32* %85 = OpAccessChain %40 %52 
                                                      OpStore %85 %84 
                                 Private f32* %86 = OpAccessChain %40 %52 
                                          f32 %87 = OpLoad %86 
                                          f32 %88 = OpExtInst %1 29 %87 
                                 Private f32* %89 = OpAccessChain %40 %52 
                                                      OpStore %89 %88 
                                 Private f32* %90 = OpAccessChain %40 %52 
                                          f32 %91 = OpLoad %90 
                                 Private f32* %92 = OpAccessChain %40 %52 
                                          f32 %93 = OpLoad %92 
                                          f32 %94 = OpFMul %91 %93 
                                 Private f32* %95 = OpAccessChain %40 %52 
                                                      OpStore %95 %94 
                                        f32_2 %97 = OpLoad %21 
                               Uniform f32_4* %99 = OpAccessChain %27 %98 
                                       f32_4 %100 = OpLoad %99 
                                       f32_2 %101 = OpVectorShuffle %100 %100 0 1 
                                       f32_2 %102 = OpFMul %97 %101 
                              Uniform f32_4* %103 = OpAccessChain %27 %98 
                                       f32_4 %104 = OpLoad %103 
                                       f32_2 %105 = OpVectorShuffle %104 %104 2 3 
                                       f32_2 %106 = OpFAdd %102 %105 
                                                      OpStore %96 %106 
                         read_only Texture2D %110 = OpLoad %109 
                                     sampler %114 = OpLoad %113 
                  read_only Texture2DSampled %116 = OpSampledImage %110 %114 
                                       f32_2 %117 = OpLoad %96 
                                       f32_4 %118 = OpImageSampleImplicitLod %116 %117 
                                       f32_2 %119 = OpVectorShuffle %118 %118 1 3 
                                                      OpStore %96 %119 
                                Private f32* %120 = OpAccessChain %96 %52 
                                         f32 %121 = OpLoad %120 
                                Uniform f32* %123 = OpAccessChain %27 %122 %52 
                                         f32 %124 = OpLoad %123 
                                         f32 %125 = OpFMul %121 %124 
                                Private f32* %126 = OpAccessChain %96 %52 
                                                      OpStore %126 %125 
                                Private f32* %129 = OpAccessChain %96 %128 
                                         f32 %130 = OpLoad %129 
                                Private f32* %131 = OpAccessChain %96 %52 
                                         f32 %132 = OpLoad %131 
                                         f32 %133 = OpFMul %130 %132 
                                Private f32* %134 = OpAccessChain %127 %128 
                                                      OpStore %134 %133 
                                       f32_3 %135 = OpLoad %9 
                                       f32_2 %136 = OpVectorShuffle %135 %135 0 1 
                              Uniform f32_4* %137 = OpAccessChain %27 %29 
                                       f32_4 %138 = OpLoad %137 
                                       f32_2 %139 = OpVectorShuffle %138 %138 1 1 
                                       f32_2 %140 = OpFMul %136 %139 
                                                      OpStore %96 %140 
                                       f32_3 %141 = OpLoad %9 
                                       f32_2 %142 = OpVectorShuffle %141 %141 0 1 
                                       f32_3 %143 = OpLoad %9 
                                       f32_2 %144 = OpVectorShuffle %143 %143 0 1 
                                         f32 %145 = OpDot %142 %144 
                                Private f32* %146 = OpAccessChain %9 %52 
                                                      OpStore %146 %145 
                                Private f32* %147 = OpAccessChain %9 %52 
                                         f32 %148 = OpLoad %147 
                                         f32 %149 = OpExtInst %1 31 %148 
                                Private f32* %150 = OpAccessChain %9 %52 
                                                      OpStore %150 %149 
                                Private f32* %151 = OpAccessChain %9 %52 
                                         f32 %152 = OpLoad %151 
                                         f32 %153 = OpFMul %152 %62 
                                Private f32* %154 = OpAccessChain %9 %52 
                                                      OpStore %154 %153 
                                Private f32* %155 = OpAccessChain %9 %52 
                                         f32 %156 = OpLoad %155 
                                         f32 %157 = OpExtInst %1 10 %156 
                                Private f32* %158 = OpAccessChain %9 %52 
                                                      OpStore %158 %157 
                                       f32_2 %160 = OpLoad %96 
                                       f32_2 %161 = OpLoad %96 
                                         f32 %162 = OpDot %160 %161 
                                                      OpStore %159 %162 
                                         f32 %163 = OpLoad %159 
                                         f32 %164 = OpExtInst %1 32 %163 
                                                      OpStore %159 %164 
                                         f32 %166 = OpLoad %159 
                                       f32_2 %167 = OpCompositeConstruct %166 %166 
                                       f32_2 %168 = OpLoad %96 
                                       f32_2 %169 = OpFMul %167 %168 
                                                      OpStore %165 %169 
                                       f32_2 %170 = OpLoad %96 
                                       f32_2 %173 = OpFMul %170 %172 
                                       f32_2 %174 = OpLoad vs_TEXCOORD0 
                                       f32_2 %175 = OpFAdd %173 %174 
                                                      OpStore %96 %175 
                                       f32_2 %176 = OpLoad %96 
                                       f32_2 %177 = OpExtInst %1 10 %176 
                                                      OpStore %96 %177 
                                Uniform f32* %180 = OpAccessChain %27 %179 
                                         f32 %181 = OpLoad %180 
                                Uniform f32* %182 = OpAccessChain %27 %179 
                                         f32 %183 = OpLoad %182 
                                Uniform f32* %185 = OpAccessChain %27 %184 
                                         f32 %186 = OpLoad %185 
                                Uniform f32* %187 = OpAccessChain %27 %184 
                                         f32 %188 = OpLoad %187 
                                       f32_4 %189 = OpCompositeConstruct %181 %183 %186 %188 
                              Uniform f32_4* %191 = OpAccessChain %27 %190 
                                       f32_4 %192 = OpLoad %191 
                                       f32_4 %193 = OpVectorShuffle %192 %192 0 0 0 0 
                                       f32_4 %194 = OpFNegate %193 
                                       f32_4 %195 = OpFMul %189 %194 
                                                      OpStore %178 %195 
                                       f32_2 %197 = OpLoad %165 
                                       f32_4 %198 = OpLoad %178 
                                       f32_2 %199 = OpVectorShuffle %198 %198 0 1 
                                       f32_2 %200 = OpFMul %197 %199 
                                       f32_2 %201 = OpLoad %21 
                                       f32_2 %202 = OpFAdd %200 %201 
                                                      OpStore %196 %202 
                                       f32_2 %203 = OpLoad %196 
                              Uniform f32_4* %204 = OpAccessChain %27 %98 
                                       f32_4 %205 = OpLoad %204 
                                       f32_2 %206 = OpVectorShuffle %205 %205 0 1 
                                       f32_2 %207 = OpFMul %203 %206 
                              Uniform f32_4* %208 = OpAccessChain %27 %98 
                                       f32_4 %209 = OpLoad %208 
                                       f32_2 %210 = OpVectorShuffle %209 %209 2 3 
                                       f32_2 %211 = OpFAdd %207 %210 
                                                      OpStore %196 %211 
                         read_only Texture2D %212 = OpLoad %109 
                                     sampler %213 = OpLoad %113 
                  read_only Texture2DSampled %214 = OpSampledImage %212 %213 
                                       f32_2 %215 = OpLoad %196 
                                       f32_4 %216 = OpImageSampleImplicitLod %214 %215 
                                       f32_2 %217 = OpVectorShuffle %216 %216 0 3 
                                                      OpStore %196 %217 
                                Private f32* %218 = OpAccessChain %196 %52 
                                         f32 %219 = OpLoad %218 
                                Uniform f32* %220 = OpAccessChain %27 %122 %52 
                                         f32 %221 = OpLoad %220 
                                         f32 %222 = OpFMul %219 %221 
                                                      OpStore %159 %222 
                                Private f32* %223 = OpAccessChain %196 %128 
                                         f32 %224 = OpLoad %223 
                                         f32 %225 = OpLoad %159 
                                         f32 %226 = OpFMul %224 %225 
                                Private f32* %227 = OpAccessChain %127 %52 
                                                      OpStore %227 %226 
                                Uniform f32* %229 = OpAccessChain %27 %179 
                                         f32 %230 = OpLoad %229 
                                Uniform f32* %231 = OpAccessChain %27 %179 
                                         f32 %232 = OpLoad %231 
                                Uniform f32* %233 = OpAccessChain %27 %184 
                                         f32 %234 = OpLoad %233 
                                Uniform f32* %235 = OpAccessChain %27 %184 
                                         f32 %236 = OpLoad %235 
                                       f32_4 %237 = OpCompositeConstruct %230 %232 %234 %236 
                              Uniform f32_4* %238 = OpAccessChain %27 %190 
                                       f32_4 %239 = OpLoad %238 
                                       f32_4 %240 = OpVectorShuffle %239 %239 0 0 0 0 
                                       f32_4 %241 = OpFMul %237 %240 
                                                      OpStore %228 %241 
                                       f32_2 %242 = OpLoad %165 
                                       f32_4 %243 = OpLoad %228 
                                       f32_2 %244 = OpVectorShuffle %243 %243 0 1 
                                       f32_2 %245 = OpFMul %242 %244 
                                       f32_2 %246 = OpLoad %21 
                                       f32_2 %247 = OpFAdd %245 %246 
                                                      OpStore %21 %247 
                                       f32_2 %248 = OpLoad %21 
                              Uniform f32_4* %249 = OpAccessChain %27 %98 
                                       f32_4 %250 = OpLoad %249 
                                       f32_2 %251 = OpVectorShuffle %250 %250 0 1 
                                       f32_2 %252 = OpFMul %248 %251 
                              Uniform f32_4* %253 = OpAccessChain %27 %98 
                                       f32_4 %254 = OpLoad %253 
                                       f32_2 %255 = OpVectorShuffle %254 %254 2 3 
                                       f32_2 %256 = OpFAdd %252 %255 
                                                      OpStore %21 %256 
                         read_only Texture2D %257 = OpLoad %109 
                                     sampler %258 = OpLoad %113 
                  read_only Texture2DSampled %259 = OpSampledImage %257 %258 
                                       f32_2 %260 = OpLoad %21 
                                       f32_4 %261 = OpImageSampleImplicitLod %259 %260 
                                       f32_2 %262 = OpVectorShuffle %261 %261 2 3 
                                                      OpStore %21 %262 
                                Private f32* %263 = OpAccessChain %21 %52 
                                         f32 %264 = OpLoad %263 
                                Uniform f32* %265 = OpAccessChain %27 %122 %52 
                                         f32 %266 = OpLoad %265 
                                         f32 %267 = OpFMul %264 %266 
                                Private f32* %268 = OpAccessChain %21 %52 
                                                      OpStore %268 %267 
                                Private f32* %269 = OpAccessChain %21 %128 
                                         f32 %270 = OpLoad %269 
                                Private f32* %271 = OpAccessChain %21 %52 
                                         f32 %272 = OpLoad %271 
                                         f32 %273 = OpFMul %270 %272 
                                Private f32* %274 = OpAccessChain %127 %69 
                                                      OpStore %274 %273 
                                       f32_4 %275 = OpLoad %40 
                                       f32_3 %276 = OpVectorShuffle %275 %275 0 0 0 
                                       f32_3 %277 = OpLoad %127 
                                       f32_3 %278 = OpFMul %276 %277 
                                                      OpStore %127 %278 
                                Private f32* %280 = OpAccessChain %9 %128 
                                                      OpStore %280 %279 
                         read_only Texture2D %282 = OpLoad %281 
                                     sampler %284 = OpLoad %283 
                  read_only Texture2DSampled %285 = OpSampledImage %282 %284 
                                       f32_3 %286 = OpLoad %9 
                                       f32_2 %287 = OpVectorShuffle %286 %286 0 1 
                                       f32_4 %288 = OpImageSampleImplicitLod %285 %287 
                                       f32_3 %289 = OpVectorShuffle %288 %288 0 1 2 
                                                      OpStore %9 %289 
                                       f32_3 %290 = OpLoad %9 
                                       f32_3 %291 = OpLoad %127 
                                       f32_3 %292 = OpFMul %290 %291 
                                                      OpStore %127 %292 
                                       f32_3 %293 = OpLoad %127 
                              Uniform f32_4* %294 = OpAccessChain %27 %29 
                                       f32_4 %295 = OpLoad %294 
                                       f32_3 %296 = OpVectorShuffle %295 %295 0 0 0 
                                       f32_3 %297 = OpFMul %293 %296 
                                                      OpStore %127 %297 
                                       f32_2 %298 = OpLoad vs_TEXCOORD0 
                                       f32_2 %299 = OpExtInst %1 10 %298 
                                       f32_4 %300 = OpLoad %40 
                                       f32_4 %301 = OpVectorShuffle %300 %299 4 1 2 5 
                                                      OpStore %40 %301 
                                       f32_4 %302 = OpLoad %40 
                                       f32_2 %303 = OpVectorShuffle %302 %302 0 3 
                                       f32_2 %304 = OpFNegate %303 
                                       f32_2 %305 = OpFAdd %304 %16 
                                                      OpStore %196 %305 
                                       f32_2 %307 = OpLoad %196 
                                       f32_2 %308 = OpLoad %196 
                                         f32 %309 = OpDot %307 %308 
                                                      OpStore %306 %309 
                                         f32 %310 = OpLoad %306 
                                         f32 %311 = OpExtInst %1 31 %310 
                                                      OpStore %306 %311 
                                         f32 %312 = OpLoad %306 
                                         f32 %313 = OpFNegate %312 
                                         f32 %314 = OpFMul %313 %62 
                                         f32 %315 = OpFAdd %314 %64 
                                                      OpStore %306 %315 
                                         f32 %316 = OpLoad %306 
                                Uniform f32* %317 = OpAccessChain %27 %29 %69 
                                         f32 %318 = OpLoad %317 
                                         f32 %319 = OpFMul %316 %318 
                                                      OpStore %306 %319 
                                         f32 %320 = OpLoad %306 
                                         f32 %321 = OpExtInst %1 30 %320 
                                                      OpStore %306 %321 
                                         f32 %322 = OpLoad %306 
                                Uniform f32* %323 = OpAccessChain %27 %29 %81 
                                         f32 %324 = OpLoad %323 
                                         f32 %325 = OpFMul %322 %324 
                                                      OpStore %306 %325 
                                         f32 %326 = OpLoad %306 
                                         f32 %327 = OpExtInst %1 29 %326 
                                                      OpStore %306 %327 
                                         f32 %328 = OpLoad %306 
                                         f32 %329 = OpLoad %306 
                                         f32 %330 = OpFMul %328 %329 
                                                      OpStore %306 %330 
                                       f32_4 %331 = OpLoad %40 
                                       f32_2 %332 = OpVectorShuffle %331 %331 0 3 
                              Uniform f32_4* %333 = OpAccessChain %27 %98 
                                       f32_4 %334 = OpLoad %333 
                                       f32_2 %335 = OpVectorShuffle %334 %334 0 1 
                                       f32_2 %336 = OpFMul %332 %335 
                              Uniform f32_4* %337 = OpAccessChain %27 %98 
                                       f32_4 %338 = OpLoad %337 
                                       f32_2 %339 = OpVectorShuffle %338 %338 2 3 
                                       f32_2 %340 = OpFAdd %336 %339 
                                                      OpStore %196 %340 
                         read_only Texture2D %341 = OpLoad %109 
                                     sampler %342 = OpLoad %113 
                  read_only Texture2DSampled %343 = OpSampledImage %341 %342 
                                       f32_2 %344 = OpLoad %196 
                                       f32_4 %345 = OpImageSampleImplicitLod %343 %344 
                                       f32_2 %346 = OpVectorShuffle %345 %345 1 3 
                                                      OpStore %196 %346 
                                Private f32* %348 = OpAccessChain %196 %52 
                                         f32 %349 = OpLoad %348 
                                Uniform f32* %350 = OpAccessChain %27 %122 %52 
                                         f32 %351 = OpLoad %350 
                                         f32 %352 = OpFMul %349 %351 
                                                      OpStore %347 %352 
                                Private f32* %354 = OpAccessChain %196 %128 
                                         f32 %355 = OpLoad %354 
                                         f32 %356 = OpLoad %347 
                                         f32 %357 = OpFMul %355 %356 
                                Private f32* %358 = OpAccessChain %353 %128 
                                                      OpStore %358 %357 
                                       f32_2 %359 = OpLoad %165 
                                       f32_4 %360 = OpLoad %178 
                                       f32_2 %361 = OpVectorShuffle %360 %360 0 1 
                                       f32_2 %362 = OpFMul %359 %361 
                                       f32_4 %363 = OpLoad %40 
                                       f32_2 %364 = OpVectorShuffle %363 %363 0 3 
                                       f32_2 %365 = OpFAdd %362 %364 
                                                      OpStore %196 %365 
                                       f32_2 %366 = OpLoad %165 
                                       f32_4 %367 = OpLoad %228 
                                       f32_2 %368 = OpVectorShuffle %367 %367 0 1 
                                       f32_2 %369 = OpFMul %366 %368 
                                       f32_4 %370 = OpLoad %40 
                                       f32_2 %371 = OpVectorShuffle %370 %370 0 3 
                                       f32_2 %372 = OpFAdd %369 %371 
                                       f32_4 %373 = OpLoad %40 
                                       f32_4 %374 = OpVectorShuffle %373 %372 4 1 2 5 
                                                      OpStore %40 %374 
                                       f32_4 %375 = OpLoad %40 
                                       f32_2 %376 = OpVectorShuffle %375 %375 0 3 
                              Uniform f32_4* %377 = OpAccessChain %27 %98 
                                       f32_4 %378 = OpLoad %377 
                                       f32_2 %379 = OpVectorShuffle %378 %378 0 1 
                                       f32_2 %380 = OpFMul %376 %379 
                              Uniform f32_4* %381 = OpAccessChain %27 %98 
                                       f32_4 %382 = OpLoad %381 
                                       f32_2 %383 = OpVectorShuffle %382 %382 2 3 
                                       f32_2 %384 = OpFAdd %380 %383 
                                       f32_4 %385 = OpLoad %40 
                                       f32_4 %386 = OpVectorShuffle %385 %384 4 1 2 5 
                                                      OpStore %40 %386 
                         read_only Texture2D %387 = OpLoad %109 
                                     sampler %388 = OpLoad %113 
                  read_only Texture2DSampled %389 = OpSampledImage %387 %388 
                                       f32_4 %390 = OpLoad %40 
                                       f32_2 %391 = OpVectorShuffle %390 %390 0 3 
                                       f32_4 %392 = OpImageSampleImplicitLod %389 %391 
                                       f32_2 %393 = OpVectorShuffle %392 %392 2 3 
                                       f32_4 %394 = OpLoad %40 
                                       f32_4 %395 = OpVectorShuffle %394 %393 4 1 2 5 
                                                      OpStore %40 %395 
                                       f32_2 %396 = OpLoad %196 
                              Uniform f32_4* %397 = OpAccessChain %27 %98 
                                       f32_4 %398 = OpLoad %397 
                                       f32_2 %399 = OpVectorShuffle %398 %398 0 1 
                                       f32_2 %400 = OpFMul %396 %399 
                              Uniform f32_4* %401 = OpAccessChain %27 %98 
                                       f32_4 %402 = OpLoad %401 
                                       f32_2 %403 = OpVectorShuffle %402 %402 2 3 
                                       f32_2 %404 = OpFAdd %400 %403 
                                                      OpStore %196 %404 
                         read_only Texture2D %405 = OpLoad %109 
                                     sampler %406 = OpLoad %113 
                  read_only Texture2DSampled %407 = OpSampledImage %405 %406 
                                       f32_2 %408 = OpLoad %196 
                                       f32_4 %409 = OpImageSampleImplicitLod %407 %408 
                                       f32_2 %410 = OpVectorShuffle %409 %409 0 3 
                                                      OpStore %196 %410 
                                Private f32* %411 = OpAccessChain %196 %52 
                                         f32 %412 = OpLoad %411 
                                Uniform f32* %413 = OpAccessChain %27 %122 %52 
                                         f32 %414 = OpLoad %413 
                                         f32 %415 = OpFMul %412 %414 
                                                      OpStore %347 %415 
                                Private f32* %416 = OpAccessChain %196 %128 
                                         f32 %417 = OpLoad %416 
                                         f32 %418 = OpLoad %347 
                                         f32 %419 = OpFMul %417 %418 
                                Private f32* %420 = OpAccessChain %353 %52 
                                                      OpStore %420 %419 
                                Private f32* %421 = OpAccessChain %40 %52 
                                         f32 %422 = OpLoad %421 
                                Uniform f32* %423 = OpAccessChain %27 %122 %52 
                                         f32 %424 = OpLoad %423 
                                         f32 %425 = OpFMul %422 %424 
                                Private f32* %426 = OpAccessChain %40 %52 
                                                      OpStore %426 %425 
                                Private f32* %427 = OpAccessChain %40 %81 
                                         f32 %428 = OpLoad %427 
                                Private f32* %429 = OpAccessChain %40 %52 
                                         f32 %430 = OpLoad %429 
                                         f32 %431 = OpFMul %428 %430 
                                Private f32* %432 = OpAccessChain %353 %69 
                                                      OpStore %432 %431 
                                         f32 %433 = OpLoad %306 
                                       f32_3 %434 = OpCompositeConstruct %433 %433 %433 
                                       f32_3 %435 = OpLoad %353 
                                       f32_3 %436 = OpFMul %434 %435 
                                                      OpStore %353 %436 
                                       f32_3 %437 = OpLoad %9 
                                       f32_3 %438 = OpLoad %353 
                                       f32_3 %439 = OpFMul %437 %438 
                                                      OpStore %353 %439 
                                       f32_3 %440 = OpLoad %353 
                              Uniform f32_4* %441 = OpAccessChain %27 %29 
                                       f32_4 %442 = OpLoad %441 
                                       f32_3 %443 = OpVectorShuffle %442 %442 0 0 0 
                                       f32_3 %444 = OpFMul %440 %443 
                                       f32_3 %445 = OpLoad %127 
                                       f32_3 %446 = OpFAdd %444 %445 
                                                      OpStore %127 %446 
                                       f32_2 %447 = OpLoad %96 
                                       f32_2 %448 = OpFNegate %447 
                                       f32_2 %449 = OpFAdd %448 %16 
                                       f32_4 %450 = OpLoad %40 
                                       f32_4 %451 = OpVectorShuffle %450 %449 4 1 2 5 
                                                      OpStore %40 %451 
                                       f32_4 %452 = OpLoad %40 
                                       f32_2 %453 = OpVectorShuffle %452 %452 0 3 
                                       f32_4 %454 = OpLoad %40 
                                       f32_2 %455 = OpVectorShuffle %454 %454 0 3 
                                         f32 %456 = OpDot %453 %455 
                                                      OpStore %306 %456 
                                         f32 %457 = OpLoad %306 
                                         f32 %458 = OpExtInst %1 31 %457 
                                                      OpStore %306 %458 
                                         f32 %459 = OpLoad %306 
                                         f32 %460 = OpFNegate %459 
                                         f32 %461 = OpFMul %460 %62 
                                         f32 %462 = OpFAdd %461 %64 
                                                      OpStore %306 %462 
                                         f32 %463 = OpLoad %306 
                                Uniform f32* %464 = OpAccessChain %27 %29 %69 
                                         f32 %465 = OpLoad %464 
                                         f32 %466 = OpFMul %463 %465 
                                                      OpStore %306 %466 
                                         f32 %467 = OpLoad %306 
                                         f32 %468 = OpExtInst %1 30 %467 
                                                      OpStore %306 %468 
                                         f32 %469 = OpLoad %306 
                                Uniform f32* %470 = OpAccessChain %27 %29 %81 
                                         f32 %471 = OpLoad %470 
                                         f32 %472 = OpFMul %469 %471 
                                                      OpStore %306 %472 
                                         f32 %473 = OpLoad %306 
                                         f32 %474 = OpExtInst %1 29 %473 
                                                      OpStore %306 %474 
                                         f32 %475 = OpLoad %306 
                                         f32 %476 = OpLoad %306 
                                         f32 %477 = OpFMul %475 %476 
                                                      OpStore %306 %477 
                                       f32_2 %478 = OpLoad %96 
                              Uniform f32_4* %479 = OpAccessChain %27 %98 
                                       f32_4 %480 = OpLoad %479 
                                       f32_2 %481 = OpVectorShuffle %480 %480 0 1 
                                       f32_2 %482 = OpFMul %478 %481 
                              Uniform f32_4* %483 = OpAccessChain %27 %98 
                                       f32_4 %484 = OpLoad %483 
                                       f32_2 %485 = OpVectorShuffle %484 %484 2 3 
                                       f32_2 %486 = OpFAdd %482 %485 
                                       f32_4 %487 = OpLoad %40 
                                       f32_4 %488 = OpVectorShuffle %487 %486 4 1 2 5 
                                                      OpStore %40 %488 
                         read_only Texture2D %489 = OpLoad %109 
                                     sampler %490 = OpLoad %113 
                  read_only Texture2DSampled %491 = OpSampledImage %489 %490 
                                       f32_4 %492 = OpLoad %40 
                                       f32_2 %493 = OpVectorShuffle %492 %492 0 3 
                                       f32_4 %494 = OpImageSampleImplicitLod %491 %493 
                                       f32_2 %495 = OpVectorShuffle %494 %494 1 3 
                                       f32_4 %496 = OpLoad %40 
                                       f32_4 %497 = OpVectorShuffle %496 %495 4 1 2 5 
                                                      OpStore %40 %497 
                                Private f32* %498 = OpAccessChain %40 %52 
                                         f32 %499 = OpLoad %498 
                                Uniform f32* %500 = OpAccessChain %27 %122 %52 
                                         f32 %501 = OpLoad %500 
                                         f32 %502 = OpFMul %499 %501 
                                Private f32* %503 = OpAccessChain %40 %52 
                                                      OpStore %503 %502 
                                Private f32* %504 = OpAccessChain %40 %81 
                                         f32 %505 = OpLoad %504 
                                Private f32* %506 = OpAccessChain %40 %52 
                                         f32 %507 = OpLoad %506 
                                         f32 %508 = OpFMul %505 %507 
                                Private f32* %509 = OpAccessChain %353 %128 
                                                      OpStore %509 %508 
                                       f32_2 %510 = OpLoad %165 
                                       f32_4 %511 = OpLoad %178 
                                       f32_2 %512 = OpVectorShuffle %511 %511 0 1 
                                       f32_2 %513 = OpFMul %510 %512 
                                       f32_2 %514 = OpLoad %96 
                                       f32_2 %515 = OpFAdd %513 %514 
                                       f32_4 %516 = OpLoad %40 
                                       f32_4 %517 = OpVectorShuffle %516 %515 4 1 2 5 
                                                      OpStore %40 %517 
                                       f32_2 %518 = OpLoad %165 
                                       f32_4 %519 = OpLoad %228 
                                       f32_2 %520 = OpVectorShuffle %519 %519 0 1 
                                       f32_2 %521 = OpFMul %518 %520 
                                       f32_2 %522 = OpLoad %96 
                                       f32_2 %523 = OpFAdd %521 %522 
                                                      OpStore %96 %523 
                                       f32_2 %524 = OpLoad %96 
                              Uniform f32_4* %525 = OpAccessChain %27 %98 
                                       f32_4 %526 = OpLoad %525 
                                       f32_2 %527 = OpVectorShuffle %526 %526 0 1 
                                       f32_2 %528 = OpFMul %524 %527 
                              Uniform f32_4* %529 = OpAccessChain %27 %98 
                                       f32_4 %530 = OpLoad %529 
                                       f32_2 %531 = OpVectorShuffle %530 %530 2 3 
                                       f32_2 %532 = OpFAdd %528 %531 
                                                      OpStore %96 %532 
                         read_only Texture2D %533 = OpLoad %109 
                                     sampler %534 = OpLoad %113 
                  read_only Texture2DSampled %535 = OpSampledImage %533 %534 
                                       f32_2 %536 = OpLoad %96 
                                       f32_4 %537 = OpImageSampleImplicitLod %535 %536 
                                       f32_2 %538 = OpVectorShuffle %537 %537 2 3 
                                                      OpStore %96 %538 
                                       f32_4 %539 = OpLoad %40 
                                       f32_2 %540 = OpVectorShuffle %539 %539 0 3 
                              Uniform f32_4* %541 = OpAccessChain %27 %98 
                                       f32_4 %542 = OpLoad %541 
                                       f32_2 %543 = OpVectorShuffle %542 %542 0 1 
                                       f32_2 %544 = OpFMul %540 %543 
                              Uniform f32_4* %545 = OpAccessChain %27 %98 
                                       f32_4 %546 = OpLoad %545 
                                       f32_2 %547 = OpVectorShuffle %546 %546 2 3 
                                       f32_2 %548 = OpFAdd %544 %547 
                                       f32_4 %549 = OpLoad %40 
                                       f32_4 %550 = OpVectorShuffle %549 %548 4 1 2 5 
                                                      OpStore %40 %550 
                         read_only Texture2D %551 = OpLoad %109 
                                     sampler %552 = OpLoad %113 
                  read_only Texture2DSampled %553 = OpSampledImage %551 %552 
                                       f32_4 %554 = OpLoad %40 
                                       f32_2 %555 = OpVectorShuffle %554 %554 0 3 
                                       f32_4 %556 = OpImageSampleImplicitLod %553 %555 
                                       f32_2 %557 = OpVectorShuffle %556 %556 0 3 
                                       f32_4 %558 = OpLoad %40 
                                       f32_4 %559 = OpVectorShuffle %558 %557 4 1 2 5 
                                                      OpStore %40 %559 
                                Private f32* %560 = OpAccessChain %40 %52 
                                         f32 %561 = OpLoad %560 
                                Uniform f32* %562 = OpAccessChain %27 %122 %52 
                                         f32 %563 = OpLoad %562 
                                         f32 %564 = OpFMul %561 %563 
                                Private f32* %565 = OpAccessChain %40 %52 
                                                      OpStore %565 %564 
                                Private f32* %566 = OpAccessChain %40 %81 
                                         f32 %567 = OpLoad %566 
                                Private f32* %568 = OpAccessChain %40 %52 
                                         f32 %569 = OpLoad %568 
                                         f32 %570 = OpFMul %567 %569 
                                Private f32* %571 = OpAccessChain %353 %52 
                                                      OpStore %571 %570 
                                Private f32* %572 = OpAccessChain %96 %52 
                                         f32 %573 = OpLoad %572 
                                Uniform f32* %574 = OpAccessChain %27 %122 %52 
                                         f32 %575 = OpLoad %574 
                                         f32 %576 = OpFMul %573 %575 
                                Private f32* %577 = OpAccessChain %40 %52 
                                                      OpStore %577 %576 
                                Private f32* %578 = OpAccessChain %96 %128 
                                         f32 %579 = OpLoad %578 
                                Private f32* %580 = OpAccessChain %40 %52 
                                         f32 %581 = OpLoad %580 
                                         f32 %582 = OpFMul %579 %581 
                                Private f32* %583 = OpAccessChain %353 %69 
                                                      OpStore %583 %582 
                                         f32 %584 = OpLoad %306 
                                       f32_3 %585 = OpCompositeConstruct %584 %584 %584 
                                       f32_3 %586 = OpLoad %353 
                                       f32_3 %587 = OpFMul %585 %586 
                                       f32_4 %588 = OpLoad %40 
                                       f32_4 %589 = OpVectorShuffle %588 %587 4 5 6 3 
                                                      OpStore %40 %589 
                                       f32_3 %590 = OpLoad %9 
                                       f32_4 %591 = OpLoad %40 
                                       f32_3 %592 = OpVectorShuffle %591 %591 0 1 2 
                                       f32_3 %593 = OpFMul %590 %592 
                                       f32_4 %594 = OpLoad %40 
                                       f32_4 %595 = OpVectorShuffle %594 %593 4 5 6 3 
                                                      OpStore %40 %595 
                                       f32_4 %596 = OpLoad %40 
                                       f32_3 %597 = OpVectorShuffle %596 %596 0 1 2 
                              Uniform f32_4* %598 = OpAccessChain %27 %29 
                                       f32_4 %599 = OpLoad %598 
                                       f32_3 %600 = OpVectorShuffle %599 %599 0 0 0 
                                       f32_3 %601 = OpFMul %597 %600 
                                       f32_3 %602 = OpLoad %127 
                                       f32_3 %603 = OpFAdd %601 %602 
                                       f32_4 %604 = OpLoad %40 
                                       f32_4 %605 = OpVectorShuffle %604 %603 4 5 6 3 
                                                      OpStore %40 %605 
                                       f32_2 %606 = OpLoad %165 
                              Uniform f32_4* %608 = OpAccessChain %27 %607 
                                       f32_4 %609 = OpLoad %608 
                                       f32_2 %610 = OpVectorShuffle %609 %609 1 1 
                                       f32_2 %611 = OpFMul %606 %610 
                                       f32_2 %612 = OpLoad vs_TEXCOORD0 
                                       f32_2 %613 = OpFAdd %611 %612 
                                       f32_3 %614 = OpLoad %127 
                                       f32_3 %615 = OpVectorShuffle %614 %613 3 4 2 
                                                      OpStore %127 %615 
                                       f32_3 %616 = OpLoad %127 
                                       f32_2 %617 = OpVectorShuffle %616 %616 0 1 
                                       f32_2 %618 = OpExtInst %1 10 %617 
                                       f32_3 %619 = OpLoad %127 
                                       f32_3 %620 = OpVectorShuffle %619 %618 3 4 2 
                                                      OpStore %127 %620 
                                       f32_2 %622 = OpLoad %165 
                                       f32_4 %623 = OpLoad %178 
                                       f32_2 %624 = OpVectorShuffle %623 %623 2 3 
                                       f32_2 %625 = OpFMul %622 %624 
                                       f32_3 %626 = OpLoad %127 
                                       f32_2 %627 = OpVectorShuffle %626 %626 0 1 
                                       f32_2 %628 = OpFAdd %625 %627 
                                                      OpStore %621 %628 
                                       f32_2 %629 = OpLoad %165 
                                       f32_4 %630 = OpLoad %228 
                                       f32_2 %631 = OpVectorShuffle %630 %630 2 3 
                                       f32_2 %632 = OpFMul %629 %631 
                                       f32_3 %633 = OpLoad %127 
                                       f32_2 %634 = OpVectorShuffle %633 %633 0 1 
                                       f32_2 %635 = OpFAdd %632 %634 
                                                      OpStore %165 %635 
                                       f32_2 %636 = OpLoad %165 
                              Uniform f32_4* %637 = OpAccessChain %27 %98 
                                       f32_4 %638 = OpLoad %637 
                                       f32_2 %639 = OpVectorShuffle %638 %638 0 1 
                                       f32_2 %640 = OpFMul %636 %639 
                              Uniform f32_4* %641 = OpAccessChain %27 %98 
                                       f32_4 %642 = OpLoad %641 
                                       f32_2 %643 = OpVectorShuffle %642 %642 2 3 
                                       f32_2 %644 = OpFAdd %640 %643 
                                                      OpStore %165 %644 
                         read_only Texture2D %645 = OpLoad %109 
                                     sampler %646 = OpLoad %113 
                  read_only Texture2DSampled %647 = OpSampledImage %645 %646 
                                       f32_2 %648 = OpLoad %165 
                                       f32_4 %649 = OpImageSampleImplicitLod %647 %648 
                                       f32_2 %650 = OpVectorShuffle %649 %649 2 3 
                                                      OpStore %165 %650 
                                       f32_2 %651 = OpLoad %621 
                              Uniform f32_4* %652 = OpAccessChain %27 %98 
                                       f32_4 %653 = OpLoad %652 
                                       f32_2 %654 = OpVectorShuffle %653 %653 0 1 
                                       f32_2 %655 = OpFMul %651 %654 
                              Uniform f32_4* %656 = OpAccessChain %27 %98 
                                       f32_4 %657 = OpLoad %656 
                                       f32_2 %658 = OpVectorShuffle %657 %657 2 3 
                                       f32_2 %659 = OpFAdd %655 %658 
                                                      OpStore %621 %659 
                         read_only Texture2D %660 = OpLoad %109 
                                     sampler %661 = OpLoad %113 
                  read_only Texture2DSampled %662 = OpSampledImage %660 %661 
                                       f32_2 %663 = OpLoad %621 
                                       f32_4 %664 = OpImageSampleImplicitLod %662 %663 
                                       f32_2 %665 = OpVectorShuffle %664 %664 0 3 
                                                      OpStore %621 %665 
                                Private f32* %666 = OpAccessChain %621 %52 
                                         f32 %667 = OpLoad %666 
                                Uniform f32* %668 = OpAccessChain %27 %122 %52 
                                         f32 %669 = OpLoad %668 
                                         f32 %670 = OpFMul %667 %669 
                                                      OpStore %306 %670 
                                Private f32* %671 = OpAccessChain %621 %128 
                                         f32 %672 = OpLoad %671 
                                         f32 %673 = OpLoad %306 
                                         f32 %674 = OpFMul %672 %673 
                                Private f32* %675 = OpAccessChain %178 %52 
                                                      OpStore %675 %674 
                                Private f32* %676 = OpAccessChain %165 %52 
                                         f32 %677 = OpLoad %676 
                                Uniform f32* %678 = OpAccessChain %27 %122 %52 
                                         f32 %679 = OpLoad %678 
                                         f32 %680 = OpFMul %677 %679 
                                                      OpStore %306 %680 
                                Private f32* %681 = OpAccessChain %165 %128 
                                         f32 %682 = OpLoad %681 
                                         f32 %683 = OpLoad %306 
                                         f32 %684 = OpFMul %682 %683 
                                Private f32* %685 = OpAccessChain %178 %69 
                                                      OpStore %685 %684 
                                       f32_3 %686 = OpLoad %127 
                                       f32_2 %687 = OpVectorShuffle %686 %686 0 1 
                                       f32_2 %688 = OpFNegate %687 
                                       f32_2 %689 = OpFAdd %688 %16 
                                                      OpStore %621 %689 
                                       f32_3 %690 = OpLoad %127 
                                       f32_2 %691 = OpVectorShuffle %690 %690 0 1 
                              Uniform f32_4* %692 = OpAccessChain %27 %98 
                                       f32_4 %693 = OpLoad %692 
                                       f32_2 %694 = OpVectorShuffle %693 %693 0 1 
                                       f32_2 %695 = OpFMul %691 %694 
                              Uniform f32_4* %696 = OpAccessChain %27 %98 
                                       f32_4 %697 = OpLoad %696 
                                       f32_2 %698 = OpVectorShuffle %697 %697 2 3 
                                       f32_2 %699 = OpFAdd %695 %698 
                                       f32_3 %700 = OpLoad %127 
                                       f32_3 %701 = OpVectorShuffle %700 %699 3 4 2 
                                                      OpStore %127 %701 
                         read_only Texture2D %702 = OpLoad %109 
                                     sampler %703 = OpLoad %113 
                  read_only Texture2DSampled %704 = OpSampledImage %702 %703 
                                       f32_3 %705 = OpLoad %127 
                                       f32_2 %706 = OpVectorShuffle %705 %705 0 1 
                                       f32_4 %707 = OpImageSampleImplicitLod %704 %706 
                                       f32_2 %708 = OpVectorShuffle %707 %707 1 3 
                                       f32_3 %709 = OpLoad %127 
                                       f32_3 %710 = OpVectorShuffle %709 %708 3 4 2 
                                                      OpStore %127 %710 
                                       f32_2 %711 = OpLoad %621 
                                       f32_2 %712 = OpLoad %621 
                                         f32 %713 = OpDot %711 %712 
                                                      OpStore %306 %713 
                                         f32 %714 = OpLoad %306 
                                         f32 %715 = OpExtInst %1 31 %714 
                                                      OpStore %306 %715 
                                         f32 %716 = OpLoad %306 
                                         f32 %717 = OpFNegate %716 
                                         f32 %718 = OpFMul %717 %62 
                                         f32 %719 = OpFAdd %718 %64 
                                                      OpStore %306 %719 
                                         f32 %720 = OpLoad %306 
                                Uniform f32* %721 = OpAccessChain %27 %607 %69 
                                         f32 %722 = OpLoad %721 
                                         f32 %723 = OpFMul %720 %722 
                                                      OpStore %306 %723 
                                         f32 %724 = OpLoad %306 
                                         f32 %725 = OpExtInst %1 30 %724 
                                                      OpStore %306 %725 
                                         f32 %726 = OpLoad %306 
                                Uniform f32* %727 = OpAccessChain %27 %607 %81 
                                         f32 %728 = OpLoad %727 
                                         f32 %729 = OpFMul %726 %728 
                                                      OpStore %306 %729 
                                         f32 %730 = OpLoad %306 
                                         f32 %731 = OpExtInst %1 29 %730 
                                                      OpStore %306 %731 
                                Private f32* %732 = OpAccessChain %127 %52 
                                         f32 %733 = OpLoad %732 
                                Uniform f32* %734 = OpAccessChain %27 %122 %52 
                                         f32 %735 = OpLoad %734 
                                         f32 %736 = OpFMul %733 %735 
                                                      OpStore %159 %736 
                                Private f32* %737 = OpAccessChain %127 %128 
                                         f32 %738 = OpLoad %737 
                                         f32 %739 = OpLoad %159 
                                         f32 %740 = OpFMul %738 %739 
                                Private f32* %741 = OpAccessChain %178 %128 
                                                      OpStore %741 %740 
                                         f32 %742 = OpLoad %306 
                                       f32_3 %743 = OpCompositeConstruct %742 %742 %742 
                                       f32_4 %744 = OpLoad %178 
                                       f32_3 %745 = OpVectorShuffle %744 %744 0 1 2 
                                       f32_3 %746 = OpFMul %743 %745 
                                                      OpStore %127 %746 
                                       f32_3 %747 = OpLoad %127 
                              Uniform f32_4* %748 = OpAccessChain %27 %607 
                                       f32_4 %749 = OpLoad %748 
                                       f32_3 %750 = OpVectorShuffle %749 %749 0 0 0 
                                       f32_3 %751 = OpFMul %747 %750 
                                                      OpStore %127 %751 
                                       f32_3 %752 = OpLoad %127 
                                       f32_3 %753 = OpLoad %9 
                                       f32_3 %754 = OpFMul %752 %753 
                                       f32_4 %755 = OpLoad %40 
                                       f32_3 %756 = OpVectorShuffle %755 %755 0 1 2 
                                       f32_3 %757 = OpFAdd %754 %756 
                                                      OpStore %9 %757 
                                       f32_3 %758 = OpLoad %9 
                              Uniform f32_4* %759 = OpAccessChain %27 %122 
                                       f32_4 %760 = OpLoad %759 
                                       f32_3 %761 = OpVectorShuffle %760 %760 1 1 1 
                                       f32_3 %762 = OpFMul %758 %761 
                                                      OpStore %9 %762 
                                Private f32* %763 = OpAccessChain %9 %128 
                                         f32 %764 = OpLoad %763 
                                Private f32* %765 = OpAccessChain %9 %52 
                                         f32 %766 = OpLoad %765 
                                         f32 %767 = OpExtInst %1 40 %764 %766 
                                                      OpStore %306 %767 
                                Private f32* %768 = OpAccessChain %9 %69 
                                         f32 %769 = OpLoad %768 
                                         f32 %771 = OpExtInst %1 40 %769 %770 
                                Private f32* %772 = OpAccessChain %40 %52 
                                                      OpStore %772 %771 
                                         f32 %773 = OpLoad %306 
                                Private f32* %774 = OpAccessChain %40 %52 
                                         f32 %775 = OpLoad %774 
                                         f32 %776 = OpExtInst %1 40 %773 %775 
                                                      OpStore %306 %776 
                                         f32 %777 = OpLoad %306 
                                         f32 %778 = OpExtInst %1 37 %777 %64 
                                                      OpStore %306 %778 
                                         f32 %779 = OpLoad %306 
                                         f32 %781 = OpFMul %779 %780 
                                                      OpStore %306 %781 
                                         f32 %782 = OpLoad %306 
                                         f32 %783 = OpExtInst %1 9 %782 
                                                      OpStore %306 %783 
                                         f32 %784 = OpLoad %306 
                                         f32 %786 = OpFMul %784 %785 
                                                      OpStore %306 %786 
                                       f32_3 %789 = OpLoad %9 
                                         f32 %790 = OpLoad %306 
                                       f32_3 %791 = OpCompositeConstruct %790 %790 %790 
                                       f32_3 %792 = OpFDiv %789 %791 
                                       f32_4 %793 = OpLoad %788 
                                       f32_4 %794 = OpVectorShuffle %793 %792 4 5 6 3 
                                                      OpStore %788 %794 
                                         f32 %795 = OpLoad %306 
                                 Output f32* %797 = OpAccessChain %788 %81 
                                                      OpStore %797 %795 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "AB_HIGH_PRECISION" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "AB_HIGH_PRECISION" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in  vec4 in_POSITION0;
in  vec2 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _LensFlareGhostsParams;
uniform 	vec4 _LensFlareHaloParams;
uniform 	float _LensFlareGhostChrDistortion;
uniform 	float _LensFlareHaloChrDistortion;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _MainTex_TexelSize;
UNITY_LOCATION(0) uniform  sampler2D _LensFlareLUT;
UNITY_LOCATION(1) uniform  sampler2D _MainTex;
in  vec2 vs_TEXCOORD0;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
vec4 u_xlat6;
vec4 u_xlat7;
vec2 u_xlat9;
vec2 u_xlat16;
vec2 u_xlat18;
vec2 u_xlat19;
float u_xlat24;
float u_xlat25;
void main()
{
    u_xlat0.xy = (-vs_TEXCOORD0.xy) + vec2(0.5, 0.5);
    u_xlat16.xy = u_xlat0.xy * _LensFlareGhostsParams.yy + vs_TEXCOORD0.xy;
    u_xlat16.xy = fract(u_xlat16.xy);
    u_xlat1.xy = (-u_xlat16.xy) + vec2(0.5, 0.5);
    u_xlat1.x = dot(u_xlat1.xy, u_xlat1.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlat1.x = (-u_xlat1.x) * 1.41419995 + 1.0;
    u_xlat1.x = u_xlat1.x * _LensFlareGhostsParams.z;
    u_xlat1.x = log2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _LensFlareGhostsParams.w;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat9.xy = u_xlat16.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat2 = texture(_MainTex, u_xlat9.xy);
    u_xlat9.xy = u_xlat0.xy * _LensFlareGhostsParams.yy;
    u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * 1.41419995;
    u_xlat0.x = fract(u_xlat0.x);
    u_xlat25 = dot(u_xlat9.xy, u_xlat9.xy);
    u_xlat25 = inversesqrt(u_xlat25);
    u_xlat3.xy = vec2(u_xlat25) * u_xlat9.xy;
    u_xlat9.xy = u_xlat9.xy * vec2(2.0, 2.0) + vs_TEXCOORD0.xy;
    u_xlat9.xy = fract(u_xlat9.xy);
    u_xlat4 = vec4(_LensFlareGhostChrDistortion, _LensFlareGhostChrDistortion, _LensFlareHaloChrDistortion, _LensFlareHaloChrDistortion) * (-_MainTex_TexelSize.xxxx);
    u_xlat19.xy = u_xlat3.xy * u_xlat4.xy + u_xlat16.xy;
    u_xlat19.xy = u_xlat19.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat5 = texture(_MainTex, u_xlat19.xy);
    u_xlat2.x = u_xlat5.x;
    u_xlat5 = vec4(_LensFlareGhostChrDistortion, _LensFlareGhostChrDistortion, _LensFlareHaloChrDistortion, _LensFlareHaloChrDistortion) * _MainTex_TexelSize.xxxx;
    u_xlat16.xy = u_xlat3.xy * u_xlat5.xy + u_xlat16.xy;
    u_xlat16.xy = u_xlat16.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat6 = texture(_MainTex, u_xlat16.xy);
    u_xlat2.z = u_xlat6.z;
    u_xlat2.xyz = u_xlat1.xxx * u_xlat2.xyz;
    u_xlat0.y = 0.0;
    u_xlat0 = texture(_LensFlareLUT, u_xlat0.xy);
    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz * _LensFlareGhostsParams.xxx;
    u_xlat1.xw = fract(vs_TEXCOORD0.xy);
    u_xlat19.xy = (-u_xlat1.xw) + vec2(0.5, 0.5);
    u_xlat24 = dot(u_xlat19.xy, u_xlat19.xy);
    u_xlat24 = sqrt(u_xlat24);
    u_xlat24 = (-u_xlat24) * 1.41419995 + 1.0;
    u_xlat24 = u_xlat24 * _LensFlareGhostsParams.z;
    u_xlat24 = log2(u_xlat24);
    u_xlat24 = u_xlat24 * _LensFlareGhostsParams.w;
    u_xlat24 = exp2(u_xlat24);
    u_xlat24 = u_xlat24 * u_xlat24;
    u_xlat19.xy = u_xlat1.xw * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat6 = texture(_MainTex, u_xlat19.xy);
    u_xlat19.xy = u_xlat3.xy * u_xlat4.xy + u_xlat1.xw;
    u_xlat1.xw = u_xlat3.xy * u_xlat5.xy + u_xlat1.xw;
    u_xlat1.xw = u_xlat1.xw * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat7 = texture(_MainTex, u_xlat1.xw);
    u_xlat6.z = u_xlat7.z;
    u_xlat1.xw = u_xlat19.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat7 = texture(_MainTex, u_xlat1.xw);
    u_xlat6.x = u_xlat7.x;
    u_xlat6.xyz = vec3(u_xlat24) * u_xlat6.xyz;
    u_xlat6.xyz = u_xlat0.xyz * u_xlat6.xyz;
    u_xlat2.xyz = u_xlat6.xyz * _LensFlareGhostsParams.xxx + u_xlat2.xyz;
    u_xlat1.xw = (-u_xlat9.xy) + vec2(0.5, 0.5);
    u_xlat24 = dot(u_xlat1.xw, u_xlat1.xw);
    u_xlat24 = sqrt(u_xlat24);
    u_xlat24 = (-u_xlat24) * 1.41419995 + 1.0;
    u_xlat24 = u_xlat24 * _LensFlareGhostsParams.z;
    u_xlat24 = log2(u_xlat24);
    u_xlat24 = u_xlat24 * _LensFlareGhostsParams.w;
    u_xlat24 = exp2(u_xlat24);
    u_xlat24 = u_xlat24 * u_xlat24;
    u_xlat1.xw = u_xlat9.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat6 = texture(_MainTex, u_xlat1.xw);
    u_xlat1.xw = u_xlat3.xy * u_xlat4.xy + u_xlat9.xy;
    u_xlat9.xy = u_xlat3.xy * u_xlat5.xy + u_xlat9.xy;
    u_xlat9.xy = u_xlat9.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat7 = texture(_MainTex, u_xlat9.xy);
    u_xlat6.z = u_xlat7.z;
    u_xlat1.xy = u_xlat1.xw * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1 = texture(_MainTex, u_xlat1.xy);
    u_xlat6.x = u_xlat1.x;
    u_xlat1.xyz = vec3(u_xlat24) * u_xlat6.xyz;
    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _LensFlareGhostsParams.xxx + u_xlat2.xyz;
    u_xlat2.xy = u_xlat3.xy * _LensFlareHaloParams.yy + vs_TEXCOORD0.xy;
    u_xlat2.xy = fract(u_xlat2.xy);
    u_xlat18.xy = u_xlat3.xy * u_xlat4.zw + u_xlat2.xy;
    u_xlat3.xy = u_xlat3.xy * u_xlat5.zw + u_xlat2.xy;
    u_xlat3.xy = u_xlat3.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat3 = texture(_MainTex, u_xlat3.xy);
    u_xlat18.xy = u_xlat18.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat4 = texture(_MainTex, u_xlat18.xy);
    u_xlat3.x = u_xlat4.x;
    u_xlat18.xy = (-u_xlat2.xy) + vec2(0.5, 0.5);
    u_xlat2.xy = u_xlat2.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat4 = texture(_MainTex, u_xlat2.xy);
    u_xlat3.y = u_xlat4.y;
    u_xlat24 = dot(u_xlat18.xy, u_xlat18.xy);
    u_xlat24 = sqrt(u_xlat24);
    u_xlat24 = (-u_xlat24) * 1.41419995 + 1.0;
    u_xlat24 = u_xlat24 * _LensFlareHaloParams.z;
    u_xlat24 = log2(u_xlat24);
    u_xlat24 = u_xlat24 * _LensFlareHaloParams.w;
    u_xlat24 = exp2(u_xlat24);
    u_xlat2.xyz = vec3(u_xlat24) * u_xlat3.xyz;
    u_xlat2.xyz = u_xlat2.xyz * _LensFlareHaloParams.xxx;
    SV_Target0.xyz = u_xlat2.xyz * u_xlat0.xyz + u_xlat1.xyz;
    SV_Target0.w = 0.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "AB_HIGH_PRECISION" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 94
; Schema: 0
                                              OpCapability Shader 
                                       %1 = OpExtInstImport "GLSL.std.450" 
                                              OpMemoryModel Logical GLSL450 
                                              OpEntryPoint Vertex %4 "main" %11 %72 %84 %86 
                                              OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                              OpDecorate %11 Location 11 
                                              OpDecorate %16 ArrayStride 16 
                                              OpDecorate %17 ArrayStride 17 
                                              OpMemberDecorate %18 0 Offset 18 
                                              OpMemberDecorate %18 1 Offset 18 
                                              OpDecorate %18 Block 
                                              OpDecorate %20 DescriptorSet 20 
                                              OpDecorate %20 Binding 20 
                                              OpMemberDecorate %70 0 BuiltIn 70 
                                              OpMemberDecorate %70 1 BuiltIn 70 
                                              OpMemberDecorate %70 2 BuiltIn 70 
                                              OpDecorate %70 Block 
                                              OpDecorate vs_TEXCOORD0 Location 84 
                                              OpDecorate %86 Location 86 
                                       %2 = OpTypeVoid 
                                       %3 = OpTypeFunction %2 
                                       %6 = OpTypeFloat 32 
                                       %7 = OpTypeVector %6 4 
                                       %8 = OpTypePointer Private %7 
                        Private f32_4* %9 = OpVariable Private 
                                      %10 = OpTypePointer Input %7 
                         Input f32_4* %11 = OpVariable Input 
                                      %14 = OpTypeInt 32 0 
                                  u32 %15 = OpConstant 4 
                                      %16 = OpTypeArray %7 %15 
                                      %17 = OpTypeArray %7 %15 
                                      %18 = OpTypeStruct %16 %17 
                                      %19 = OpTypePointer Uniform %18 
Uniform struct {f32_4[4]; f32_4[4];}* %20 = OpVariable Uniform 
                                      %21 = OpTypeInt 32 1 
                                  i32 %22 = OpConstant 0 
                                  i32 %23 = OpConstant 1 
                                      %24 = OpTypePointer Uniform %7 
                                  i32 %35 = OpConstant 2 
                                  i32 %44 = OpConstant 3 
                       Private f32_4* %48 = OpVariable Private 
                                  u32 %68 = OpConstant 1 
                                      %69 = OpTypeArray %6 %68 
                                      %70 = OpTypeStruct %7 %6 %69 
                                      %71 = OpTypePointer Output %70 
 Output struct {f32_4; f32; f32[1];}* %72 = OpVariable Output 
                                      %80 = OpTypePointer Output %7 
                                      %82 = OpTypeVector %6 2 
                                      %83 = OpTypePointer Output %82 
               Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                      %85 = OpTypePointer Input %82 
                         Input f32_2* %86 = OpVariable Input 
                                      %88 = OpTypePointer Output %6 
                                  void %4 = OpFunction None %3 
                                       %5 = OpLabel 
                                f32_4 %12 = OpLoad %11 
                                f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                       Uniform f32_4* %25 = OpAccessChain %20 %22 %23 
                                f32_4 %26 = OpLoad %25 
                                f32_4 %27 = OpFMul %13 %26 
                                              OpStore %9 %27 
                       Uniform f32_4* %28 = OpAccessChain %20 %22 %22 
                                f32_4 %29 = OpLoad %28 
                                f32_4 %30 = OpLoad %11 
                                f32_4 %31 = OpVectorShuffle %30 %30 0 0 0 0 
                                f32_4 %32 = OpFMul %29 %31 
                                f32_4 %33 = OpLoad %9 
                                f32_4 %34 = OpFAdd %32 %33 
                                              OpStore %9 %34 
                       Uniform f32_4* %36 = OpAccessChain %20 %22 %35 
                                f32_4 %37 = OpLoad %36 
                                f32_4 %38 = OpLoad %11 
                                f32_4 %39 = OpVectorShuffle %38 %38 2 2 2 2 
                                f32_4 %40 = OpFMul %37 %39 
                                f32_4 %41 = OpLoad %9 
                                f32_4 %42 = OpFAdd %40 %41 
                                              OpStore %9 %42 
                                f32_4 %43 = OpLoad %9 
                       Uniform f32_4* %45 = OpAccessChain %20 %22 %44 
                                f32_4 %46 = OpLoad %45 
                                f32_4 %47 = OpFAdd %43 %46 
                                              OpStore %9 %47 
                                f32_4 %49 = OpLoad %9 
                                f32_4 %50 = OpVectorShuffle %49 %49 1 1 1 1 
                       Uniform f32_4* %51 = OpAccessChain %20 %23 %23 
                                f32_4 %52 = OpLoad %51 
                                f32_4 %53 = OpFMul %50 %52 
                                              OpStore %48 %53 
                       Uniform f32_4* %54 = OpAccessChain %20 %23 %22 
                                f32_4 %55 = OpLoad %54 
                                f32_4 %56 = OpLoad %9 
                                f32_4 %57 = OpVectorShuffle %56 %56 0 0 0 0 
                                f32_4 %58 = OpFMul %55 %57 
                                f32_4 %59 = OpLoad %48 
                                f32_4 %60 = OpFAdd %58 %59 
                                              OpStore %48 %60 
                       Uniform f32_4* %61 = OpAccessChain %20 %23 %35 
                                f32_4 %62 = OpLoad %61 
                                f32_4 %63 = OpLoad %9 
                                f32_4 %64 = OpVectorShuffle %63 %63 2 2 2 2 
                                f32_4 %65 = OpFMul %62 %64 
                                f32_4 %66 = OpLoad %48 
                                f32_4 %67 = OpFAdd %65 %66 
                                              OpStore %48 %67 
                       Uniform f32_4* %73 = OpAccessChain %20 %23 %44 
                                f32_4 %74 = OpLoad %73 
                                f32_4 %75 = OpLoad %9 
                                f32_4 %76 = OpVectorShuffle %75 %75 3 3 3 3 
                                f32_4 %77 = OpFMul %74 %76 
                                f32_4 %78 = OpLoad %48 
                                f32_4 %79 = OpFAdd %77 %78 
                        Output f32_4* %81 = OpAccessChain %72 %22 
                                              OpStore %81 %79 
                                f32_2 %87 = OpLoad %86 
                                              OpStore vs_TEXCOORD0 %87 
                          Output f32* %89 = OpAccessChain %72 %22 %68 
                                  f32 %90 = OpLoad %89 
                                  f32 %91 = OpFNegate %90 
                          Output f32* %92 = OpAccessChain %72 %22 %68 
                                              OpStore %92 %91 
                                              OpReturn
                                              OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 664
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %12 %653 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpDecorate vs_TEXCOORD0 Location 12 
                                                      OpMemberDecorate %25 0 Offset 25 
                                                      OpMemberDecorate %25 1 Offset 25 
                                                      OpMemberDecorate %25 2 Offset 25 
                                                      OpMemberDecorate %25 3 Offset 25 
                                                      OpMemberDecorate %25 4 Offset 25 
                                                      OpMemberDecorate %25 5 Offset 25 
                                                      OpDecorate %25 Block 
                                                      OpDecorate %27 DescriptorSet 27 
                                                      OpDecorate %27 Binding 27 
                                                      OpDecorate %110 DescriptorSet 110 
                                                      OpDecorate %110 Binding 110 
                                                      OpDecorate %114 DescriptorSet 114 
                                                      OpDecorate %114 Binding 114 
                                                      OpDecorate %270 DescriptorSet 270 
                                                      OpDecorate %270 Binding 270 
                                                      OpDecorate %272 DescriptorSet 272 
                                                      OpDecorate %272 Binding 272 
                                                      OpDecorate %653 Location 653 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 3 
                                               %8 = OpTypePointer Private %7 
                                Private f32_3* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 2 
                                              %11 = OpTypePointer Input %10 
                        Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                          f32 %15 = OpConstant 3.674022E-40 
                                        f32_2 %16 = OpConstantComposite %15 %15 
                                              %20 = OpTypePointer Private %10 
                               Private f32_2* %21 = OpVariable Private 
                                              %24 = OpTypeVector %6 4 
                                              %25 = OpTypeStruct %24 %24 %6 %6 %24 %24 
                                              %26 = OpTypePointer Uniform %25 
Uniform struct {f32_4; f32_4; f32; f32; f32_4; f32_4;}* %27 = OpVariable Uniform 
                                              %28 = OpTypeInt 32 1 
                                          i32 %29 = OpConstant 0 
                                              %30 = OpTypePointer Uniform %24 
                               Private f32_3* %39 = OpVariable Private 
                                              %50 = OpTypeInt 32 0 
                                          u32 %51 = OpConstant 0 
                                              %52 = OpTypePointer Private %6 
                                          f32 %61 = OpConstant 3.674022E-40 
                                          f32 %63 = OpConstant 3.674022E-40 
                                          u32 %68 = OpConstant 2 
                                              %69 = OpTypePointer Uniform %6 
                                          u32 %80 = OpConstant 3 
                               Private f32_3* %95 = OpVariable Private 
                                          i32 %97 = OpConstant 4 
                                             %108 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                             %109 = OpTypePointer UniformConstant %108 
        UniformConstant read_only Texture2D* %110 = OpVariable UniformConstant 
                                             %112 = OpTypeSampler 
                                             %113 = OpTypePointer UniformConstant %112 
                    UniformConstant sampler* %114 = OpVariable UniformConstant 
                                             %116 = OpTypeSampledImage %108 
                                         u32 %121 = OpConstant 1 
                              Private f32_3* %124 = OpVariable Private 
                              Private f32_2* %151 = OpVariable Private 
                                         f32 %169 = OpConstant 3.674022E-40 
                                       f32_2 %170 = OpConstantComposite %169 %169 
                                             %181 = OpTypePointer Private %24 
                              Private f32_4* %182 = OpVariable Private 
                                         i32 %183 = OpConstant 2 
                                         i32 %188 = OpConstant 3 
                                         i32 %194 = OpConstant 5 
                              Private f32_4* %200 = OpVariable Private 
                                         f32 %268 = OpConstant 3.674022E-40 
        UniformConstant read_only Texture2D* %270 = OpVariable UniformConstant 
                    UniformConstant sampler* %272 = OpVariable UniformConstant 
                              Private f32_3* %287 = OpVariable Private 
                              Private f32_2* %292 = OpVariable Private 
                                Private f32* %297 = OpVariable Private 
                              Private f32_3* %332 = OpVariable Private 
                                         i32 %534 = OpConstant 1 
                                             %652 = OpTypePointer Output %24 
                               Output f32_4* %653 = OpVariable Output 
                                             %661 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_2 %13 = OpLoad vs_TEXCOORD0 
                                        f32_2 %14 = OpFNegate %13 
                                        f32_2 %17 = OpFAdd %14 %16 
                                        f32_3 %18 = OpLoad %9 
                                        f32_3 %19 = OpVectorShuffle %18 %17 3 4 2 
                                                      OpStore %9 %19 
                                        f32_3 %22 = OpLoad %9 
                                        f32_2 %23 = OpVectorShuffle %22 %22 0 1 
                               Uniform f32_4* %31 = OpAccessChain %27 %29 
                                        f32_4 %32 = OpLoad %31 
                                        f32_2 %33 = OpVectorShuffle %32 %32 1 1 
                                        f32_2 %34 = OpFMul %23 %33 
                                        f32_2 %35 = OpLoad vs_TEXCOORD0 
                                        f32_2 %36 = OpFAdd %34 %35 
                                                      OpStore %21 %36 
                                        f32_2 %37 = OpLoad %21 
                                        f32_2 %38 = OpExtInst %1 10 %37 
                                                      OpStore %21 %38 
                                        f32_2 %40 = OpLoad %21 
                                        f32_2 %41 = OpFNegate %40 
                                        f32_2 %42 = OpFAdd %41 %16 
                                        f32_3 %43 = OpLoad %39 
                                        f32_3 %44 = OpVectorShuffle %43 %42 3 4 2 
                                                      OpStore %39 %44 
                                        f32_3 %45 = OpLoad %39 
                                        f32_2 %46 = OpVectorShuffle %45 %45 0 1 
                                        f32_3 %47 = OpLoad %39 
                                        f32_2 %48 = OpVectorShuffle %47 %47 0 1 
                                          f32 %49 = OpDot %46 %48 
                                 Private f32* %53 = OpAccessChain %39 %51 
                                                      OpStore %53 %49 
                                 Private f32* %54 = OpAccessChain %39 %51 
                                          f32 %55 = OpLoad %54 
                                          f32 %56 = OpExtInst %1 31 %55 
                                 Private f32* %57 = OpAccessChain %39 %51 
                                                      OpStore %57 %56 
                                 Private f32* %58 = OpAccessChain %39 %51 
                                          f32 %59 = OpLoad %58 
                                          f32 %60 = OpFNegate %59 
                                          f32 %62 = OpFMul %60 %61 
                                          f32 %64 = OpFAdd %62 %63 
                                 Private f32* %65 = OpAccessChain %39 %51 
                                                      OpStore %65 %64 
                                 Private f32* %66 = OpAccessChain %39 %51 
                                          f32 %67 = OpLoad %66 
                                 Uniform f32* %70 = OpAccessChain %27 %29 %68 
                                          f32 %71 = OpLoad %70 
                                          f32 %72 = OpFMul %67 %71 
                                 Private f32* %73 = OpAccessChain %39 %51 
                                                      OpStore %73 %72 
                                 Private f32* %74 = OpAccessChain %39 %51 
                                          f32 %75 = OpLoad %74 
                                          f32 %76 = OpExtInst %1 30 %75 
                                 Private f32* %77 = OpAccessChain %39 %51 
                                                      OpStore %77 %76 
                                 Private f32* %78 = OpAccessChain %39 %51 
                                          f32 %79 = OpLoad %78 
                                 Uniform f32* %81 = OpAccessChain %27 %29 %80 
                                          f32 %82 = OpLoad %81 
                                          f32 %83 = OpFMul %79 %82 
                                 Private f32* %84 = OpAccessChain %39 %51 
                                                      OpStore %84 %83 
                                 Private f32* %85 = OpAccessChain %39 %51 
                                          f32 %86 = OpLoad %85 
                                          f32 %87 = OpExtInst %1 29 %86 
                                 Private f32* %88 = OpAccessChain %39 %51 
                                                      OpStore %88 %87 
                                 Private f32* %89 = OpAccessChain %39 %51 
                                          f32 %90 = OpLoad %89 
                                 Private f32* %91 = OpAccessChain %39 %51 
                                          f32 %92 = OpLoad %91 
                                          f32 %93 = OpFMul %90 %92 
                                 Private f32* %94 = OpAccessChain %39 %51 
                                                      OpStore %94 %93 
                                        f32_2 %96 = OpLoad %21 
                               Uniform f32_4* %98 = OpAccessChain %27 %97 
                                        f32_4 %99 = OpLoad %98 
                                       f32_2 %100 = OpVectorShuffle %99 %99 0 1 
                                       f32_2 %101 = OpFMul %96 %100 
                              Uniform f32_4* %102 = OpAccessChain %27 %97 
                                       f32_4 %103 = OpLoad %102 
                                       f32_2 %104 = OpVectorShuffle %103 %103 2 3 
                                       f32_2 %105 = OpFAdd %101 %104 
                                       f32_3 %106 = OpLoad %95 
                                       f32_3 %107 = OpVectorShuffle %106 %105 3 4 2 
                                                      OpStore %95 %107 
                         read_only Texture2D %111 = OpLoad %110 
                                     sampler %115 = OpLoad %114 
                  read_only Texture2DSampled %117 = OpSampledImage %111 %115 
                                       f32_3 %118 = OpLoad %95 
                                       f32_2 %119 = OpVectorShuffle %118 %118 0 1 
                                       f32_4 %120 = OpImageSampleImplicitLod %117 %119 
                                         f32 %122 = OpCompositeExtract %120 1 
                                Private f32* %123 = OpAccessChain %95 %121 
                                                      OpStore %123 %122 
                                       f32_3 %125 = OpLoad %9 
                                       f32_2 %126 = OpVectorShuffle %125 %125 0 1 
                              Uniform f32_4* %127 = OpAccessChain %27 %29 
                                       f32_4 %128 = OpLoad %127 
                                       f32_2 %129 = OpVectorShuffle %128 %128 1 1 
                                       f32_2 %130 = OpFMul %126 %129 
                                       f32_3 %131 = OpLoad %124 
                                       f32_3 %132 = OpVectorShuffle %131 %130 3 4 2 
                                                      OpStore %124 %132 
                                       f32_3 %133 = OpLoad %9 
                                       f32_2 %134 = OpVectorShuffle %133 %133 0 1 
                                       f32_3 %135 = OpLoad %9 
                                       f32_2 %136 = OpVectorShuffle %135 %135 0 1 
                                         f32 %137 = OpDot %134 %136 
                                Private f32* %138 = OpAccessChain %9 %51 
                                                      OpStore %138 %137 
                                Private f32* %139 = OpAccessChain %9 %51 
                                         f32 %140 = OpLoad %139 
                                         f32 %141 = OpExtInst %1 31 %140 
                                Private f32* %142 = OpAccessChain %9 %51 
                                                      OpStore %142 %141 
                                Private f32* %143 = OpAccessChain %9 %51 
                                         f32 %144 = OpLoad %143 
                                         f32 %145 = OpFMul %144 %61 
                                Private f32* %146 = OpAccessChain %9 %51 
                                                      OpStore %146 %145 
                                Private f32* %147 = OpAccessChain %9 %51 
                                         f32 %148 = OpLoad %147 
                                         f32 %149 = OpExtInst %1 10 %148 
                                Private f32* %150 = OpAccessChain %9 %51 
                                                      OpStore %150 %149 
                                       f32_3 %152 = OpLoad %124 
                                       f32_2 %153 = OpVectorShuffle %152 %152 0 1 
                                       f32_3 %154 = OpLoad %124 
                                       f32_2 %155 = OpVectorShuffle %154 %154 0 1 
                                         f32 %156 = OpDot %153 %155 
                                Private f32* %157 = OpAccessChain %151 %51 
                                                      OpStore %157 %156 
                                Private f32* %158 = OpAccessChain %151 %51 
                                         f32 %159 = OpLoad %158 
                                         f32 %160 = OpExtInst %1 32 %159 
                                Private f32* %161 = OpAccessChain %151 %51 
                                                      OpStore %161 %160 
                                       f32_2 %162 = OpLoad %151 
                                       f32_2 %163 = OpVectorShuffle %162 %162 0 0 
                                       f32_3 %164 = OpLoad %124 
                                       f32_2 %165 = OpVectorShuffle %164 %164 0 1 
                                       f32_2 %166 = OpFMul %163 %165 
                                                      OpStore %151 %166 
                                       f32_3 %167 = OpLoad %124 
                                       f32_2 %168 = OpVectorShuffle %167 %167 0 1 
                                       f32_2 %171 = OpFMul %168 %170 
                                       f32_2 %172 = OpLoad vs_TEXCOORD0 
                                       f32_2 %173 = OpFAdd %171 %172 
                                       f32_3 %174 = OpLoad %124 
                                       f32_3 %175 = OpVectorShuffle %174 %173 3 4 2 
                                                      OpStore %124 %175 
                                       f32_3 %176 = OpLoad %124 
                                       f32_2 %177 = OpVectorShuffle %176 %176 0 1 
                                       f32_2 %178 = OpExtInst %1 10 %177 
                                       f32_3 %179 = OpLoad %124 
                                       f32_3 %180 = OpVectorShuffle %179 %178 3 4 2 
                                                      OpStore %124 %180 
                                Uniform f32* %184 = OpAccessChain %27 %183 
                                         f32 %185 = OpLoad %184 
                                Uniform f32* %186 = OpAccessChain %27 %183 
                                         f32 %187 = OpLoad %186 
                                Uniform f32* %189 = OpAccessChain %27 %188 
                                         f32 %190 = OpLoad %189 
                                Uniform f32* %191 = OpAccessChain %27 %188 
                                         f32 %192 = OpLoad %191 
                                       f32_4 %193 = OpCompositeConstruct %185 %187 %190 %192 
                              Uniform f32_4* %195 = OpAccessChain %27 %194 
                                       f32_4 %196 = OpLoad %195 
                                       f32_4 %197 = OpVectorShuffle %196 %196 0 0 0 0 
                                       f32_4 %198 = OpFNegate %197 
                                       f32_4 %199 = OpFMul %193 %198 
                                                      OpStore %182 %199 
                                       f32_2 %201 = OpLoad %151 
                                       f32_4 %202 = OpLoad %182 
                                       f32_2 %203 = OpVectorShuffle %202 %202 0 1 
                                       f32_2 %204 = OpFMul %201 %203 
                                       f32_2 %205 = OpLoad %21 
                                       f32_2 %206 = OpFAdd %204 %205 
                                       f32_4 %207 = OpLoad %200 
                                       f32_4 %208 = OpVectorShuffle %207 %206 4 5 2 3 
                                                      OpStore %200 %208 
                                       f32_4 %209 = OpLoad %200 
                                       f32_2 %210 = OpVectorShuffle %209 %209 0 1 
                              Uniform f32_4* %211 = OpAccessChain %27 %97 
                                       f32_4 %212 = OpLoad %211 
                                       f32_2 %213 = OpVectorShuffle %212 %212 0 1 
                                       f32_2 %214 = OpFMul %210 %213 
                              Uniform f32_4* %215 = OpAccessChain %27 %97 
                                       f32_4 %216 = OpLoad %215 
                                       f32_2 %217 = OpVectorShuffle %216 %216 2 3 
                                       f32_2 %218 = OpFAdd %214 %217 
                                       f32_4 %219 = OpLoad %200 
                                       f32_4 %220 = OpVectorShuffle %219 %218 4 5 2 3 
                                                      OpStore %200 %220 
                         read_only Texture2D %221 = OpLoad %110 
                                     sampler %222 = OpLoad %114 
                  read_only Texture2DSampled %223 = OpSampledImage %221 %222 
                                       f32_4 %224 = OpLoad %200 
                                       f32_2 %225 = OpVectorShuffle %224 %224 0 1 
                                       f32_4 %226 = OpImageSampleImplicitLod %223 %225 
                                         f32 %227 = OpCompositeExtract %226 0 
                                Private f32* %228 = OpAccessChain %95 %51 
                                                      OpStore %228 %227 
                                Uniform f32* %229 = OpAccessChain %27 %183 
                                         f32 %230 = OpLoad %229 
                                Uniform f32* %231 = OpAccessChain %27 %183 
                                         f32 %232 = OpLoad %231 
                                Uniform f32* %233 = OpAccessChain %27 %188 
                                         f32 %234 = OpLoad %233 
                                Uniform f32* %235 = OpAccessChain %27 %188 
                                         f32 %236 = OpLoad %235 
                                       f32_4 %237 = OpCompositeConstruct %230 %232 %234 %236 
                              Uniform f32_4* %238 = OpAccessChain %27 %194 
                                       f32_4 %239 = OpLoad %238 
                                       f32_4 %240 = OpVectorShuffle %239 %239 0 0 0 0 
                                       f32_4 %241 = OpFMul %237 %240 
                                                      OpStore %200 %241 
                                       f32_2 %242 = OpLoad %151 
                                       f32_4 %243 = OpLoad %200 
                                       f32_2 %244 = OpVectorShuffle %243 %243 0 1 
                                       f32_2 %245 = OpFMul %242 %244 
                                       f32_2 %246 = OpLoad %21 
                                       f32_2 %247 = OpFAdd %245 %246 
                                                      OpStore %21 %247 
                                       f32_2 %248 = OpLoad %21 
                              Uniform f32_4* %249 = OpAccessChain %27 %97 
                                       f32_4 %250 = OpLoad %249 
                                       f32_2 %251 = OpVectorShuffle %250 %250 0 1 
                                       f32_2 %252 = OpFMul %248 %251 
                              Uniform f32_4* %253 = OpAccessChain %27 %97 
                                       f32_4 %254 = OpLoad %253 
                                       f32_2 %255 = OpVectorShuffle %254 %254 2 3 
                                       f32_2 %256 = OpFAdd %252 %255 
                                                      OpStore %21 %256 
                         read_only Texture2D %257 = OpLoad %110 
                                     sampler %258 = OpLoad %114 
                  read_only Texture2DSampled %259 = OpSampledImage %257 %258 
                                       f32_2 %260 = OpLoad %21 
                                       f32_4 %261 = OpImageSampleImplicitLod %259 %260 
                                         f32 %262 = OpCompositeExtract %261 2 
                                Private f32* %263 = OpAccessChain %95 %68 
                                                      OpStore %263 %262 
                                       f32_3 %264 = OpLoad %39 
                                       f32_3 %265 = OpVectorShuffle %264 %264 0 0 0 
                                       f32_3 %266 = OpLoad %95 
                                       f32_3 %267 = OpFMul %265 %266 
                                                      OpStore %39 %267 
                                Private f32* %269 = OpAccessChain %9 %121 
                                                      OpStore %269 %268 
                         read_only Texture2D %271 = OpLoad %270 
                                     sampler %273 = OpLoad %272 
                  read_only Texture2DSampled %274 = OpSampledImage %271 %273 
                                       f32_3 %275 = OpLoad %9 
                                       f32_2 %276 = OpVectorShuffle %275 %275 0 1 
                                       f32_4 %277 = OpImageSampleImplicitLod %274 %276 
                                       f32_3 %278 = OpVectorShuffle %277 %277 0 1 2 
                                                      OpStore %9 %278 
                                       f32_3 %279 = OpLoad %9 
                                       f32_3 %280 = OpLoad %39 
                                       f32_3 %281 = OpFMul %279 %280 
                                                      OpStore %39 %281 
                                       f32_3 %282 = OpLoad %39 
                              Uniform f32_4* %283 = OpAccessChain %27 %29 
                                       f32_4 %284 = OpLoad %283 
                                       f32_3 %285 = OpVectorShuffle %284 %284 0 0 0 
                                       f32_3 %286 = OpFMul %282 %285 
                                                      OpStore %39 %286 
                                       f32_2 %288 = OpLoad vs_TEXCOORD0 
                                       f32_2 %289 = OpExtInst %1 10 %288 
                                       f32_3 %290 = OpLoad %287 
                                       f32_3 %291 = OpVectorShuffle %290 %289 3 4 2 
                                                      OpStore %287 %291 
                                       f32_3 %293 = OpLoad %287 
                                       f32_2 %294 = OpVectorShuffle %293 %293 0 1 
                                       f32_2 %295 = OpFNegate %294 
                                       f32_2 %296 = OpFAdd %295 %16 
                                                      OpStore %292 %296 
                                       f32_2 %298 = OpLoad %292 
                                       f32_2 %299 = OpLoad %292 
                                         f32 %300 = OpDot %298 %299 
                                                      OpStore %297 %300 
                                         f32 %301 = OpLoad %297 
                                         f32 %302 = OpExtInst %1 31 %301 
                                                      OpStore %297 %302 
                                         f32 %303 = OpLoad %297 
                                         f32 %304 = OpFNegate %303 
                                         f32 %305 = OpFMul %304 %61 
                                         f32 %306 = OpFAdd %305 %63 
                                                      OpStore %297 %306 
                                         f32 %307 = OpLoad %297 
                                Uniform f32* %308 = OpAccessChain %27 %29 %68 
                                         f32 %309 = OpLoad %308 
                                         f32 %310 = OpFMul %307 %309 
                                                      OpStore %297 %310 
                                         f32 %311 = OpLoad %297 
                                         f32 %312 = OpExtInst %1 30 %311 
                                                      OpStore %297 %312 
                                         f32 %313 = OpLoad %297 
                                Uniform f32* %314 = OpAccessChain %27 %29 %80 
                                         f32 %315 = OpLoad %314 
                                         f32 %316 = OpFMul %313 %315 
                                                      OpStore %297 %316 
                                         f32 %317 = OpLoad %297 
                                         f32 %318 = OpExtInst %1 29 %317 
                                                      OpStore %297 %318 
                                         f32 %319 = OpLoad %297 
                                         f32 %320 = OpLoad %297 
                                         f32 %321 = OpFMul %319 %320 
                                                      OpStore %297 %321 
                                       f32_3 %322 = OpLoad %287 
                                       f32_2 %323 = OpVectorShuffle %322 %322 0 1 
                              Uniform f32_4* %324 = OpAccessChain %27 %97 
                                       f32_4 %325 = OpLoad %324 
                                       f32_2 %326 = OpVectorShuffle %325 %325 0 1 
                                       f32_2 %327 = OpFMul %323 %326 
                              Uniform f32_4* %328 = OpAccessChain %27 %97 
                                       f32_4 %329 = OpLoad %328 
                                       f32_2 %330 = OpVectorShuffle %329 %329 2 3 
                                       f32_2 %331 = OpFAdd %327 %330 
                                                      OpStore %292 %331 
                         read_only Texture2D %333 = OpLoad %110 
                                     sampler %334 = OpLoad %114 
                  read_only Texture2DSampled %335 = OpSampledImage %333 %334 
                                       f32_2 %336 = OpLoad %292 
                                       f32_4 %337 = OpImageSampleImplicitLod %335 %336 
                                         f32 %338 = OpCompositeExtract %337 1 
                                Private f32* %339 = OpAccessChain %332 %121 
                                                      OpStore %339 %338 
                                       f32_2 %340 = OpLoad %151 
                                       f32_4 %341 = OpLoad %182 
                                       f32_2 %342 = OpVectorShuffle %341 %341 0 1 
                                       f32_2 %343 = OpFMul %340 %342 
                                       f32_3 %344 = OpLoad %287 
                                       f32_2 %345 = OpVectorShuffle %344 %344 0 1 
                                       f32_2 %346 = OpFAdd %343 %345 
                                                      OpStore %292 %346 
                                       f32_2 %347 = OpLoad %151 
                                       f32_4 %348 = OpLoad %200 
                                       f32_2 %349 = OpVectorShuffle %348 %348 0 1 
                                       f32_2 %350 = OpFMul %347 %349 
                                       f32_3 %351 = OpLoad %287 
                                       f32_2 %352 = OpVectorShuffle %351 %351 0 1 
                                       f32_2 %353 = OpFAdd %350 %352 
                                       f32_3 %354 = OpLoad %287 
                                       f32_3 %355 = OpVectorShuffle %354 %353 3 4 2 
                                                      OpStore %287 %355 
                                       f32_3 %356 = OpLoad %287 
                                       f32_2 %357 = OpVectorShuffle %356 %356 0 1 
                              Uniform f32_4* %358 = OpAccessChain %27 %97 
                                       f32_4 %359 = OpLoad %358 
                                       f32_2 %360 = OpVectorShuffle %359 %359 0 1 
                                       f32_2 %361 = OpFMul %357 %360 
                              Uniform f32_4* %362 = OpAccessChain %27 %97 
                                       f32_4 %363 = OpLoad %362 
                                       f32_2 %364 = OpVectorShuffle %363 %363 2 3 
                                       f32_2 %365 = OpFAdd %361 %364 
                                       f32_3 %366 = OpLoad %287 
                                       f32_3 %367 = OpVectorShuffle %366 %365 3 4 2 
                                                      OpStore %287 %367 
                         read_only Texture2D %368 = OpLoad %110 
                                     sampler %369 = OpLoad %114 
                  read_only Texture2DSampled %370 = OpSampledImage %368 %369 
                                       f32_3 %371 = OpLoad %287 
                                       f32_2 %372 = OpVectorShuffle %371 %371 0 1 
                                       f32_4 %373 = OpImageSampleImplicitLod %370 %372 
                                         f32 %374 = OpCompositeExtract %373 2 
                                Private f32* %375 = OpAccessChain %332 %68 
                                                      OpStore %375 %374 
                                       f32_2 %376 = OpLoad %292 
                              Uniform f32_4* %377 = OpAccessChain %27 %97 
                                       f32_4 %378 = OpLoad %377 
                                       f32_2 %379 = OpVectorShuffle %378 %378 0 1 
                                       f32_2 %380 = OpFMul %376 %379 
                              Uniform f32_4* %381 = OpAccessChain %27 %97 
                                       f32_4 %382 = OpLoad %381 
                                       f32_2 %383 = OpVectorShuffle %382 %382 2 3 
                                       f32_2 %384 = OpFAdd %380 %383 
                                       f32_3 %385 = OpLoad %287 
                                       f32_3 %386 = OpVectorShuffle %385 %384 3 4 2 
                                                      OpStore %287 %386 
                         read_only Texture2D %387 = OpLoad %110 
                                     sampler %388 = OpLoad %114 
                  read_only Texture2DSampled %389 = OpSampledImage %387 %388 
                                       f32_3 %390 = OpLoad %287 
                                       f32_2 %391 = OpVectorShuffle %390 %390 0 1 
                                       f32_4 %392 = OpImageSampleImplicitLod %389 %391 
                                         f32 %393 = OpCompositeExtract %392 0 
                                Private f32* %394 = OpAccessChain %332 %51 
                                                      OpStore %394 %393 
                                         f32 %395 = OpLoad %297 
                                       f32_3 %396 = OpCompositeConstruct %395 %395 %395 
                                       f32_3 %397 = OpLoad %332 
                                       f32_3 %398 = OpFMul %396 %397 
                                                      OpStore %287 %398 
                                       f32_3 %399 = OpLoad %9 
                                       f32_3 %400 = OpLoad %287 
                                       f32_3 %401 = OpFMul %399 %400 
                                                      OpStore %287 %401 
                                       f32_3 %402 = OpLoad %287 
                              Uniform f32_4* %403 = OpAccessChain %27 %29 
                                       f32_4 %404 = OpLoad %403 
                                       f32_3 %405 = OpVectorShuffle %404 %404 0 0 0 
                                       f32_3 %406 = OpFMul %402 %405 
                                       f32_3 %407 = OpLoad %39 
                                       f32_3 %408 = OpFAdd %406 %407 
                                                      OpStore %39 %408 
                                       f32_3 %409 = OpLoad %124 
                                       f32_2 %410 = OpVectorShuffle %409 %409 0 1 
                                       f32_2 %411 = OpFNegate %410 
                                       f32_2 %412 = OpFAdd %411 %16 
                                       f32_3 %413 = OpLoad %287 
                                       f32_3 %414 = OpVectorShuffle %413 %412 3 4 2 
                                                      OpStore %287 %414 
                                       f32_3 %415 = OpLoad %287 
                                       f32_2 %416 = OpVectorShuffle %415 %415 0 1 
                                       f32_3 %417 = OpLoad %287 
                                       f32_2 %418 = OpVectorShuffle %417 %417 0 1 
                                         f32 %419 = OpDot %416 %418 
                                                      OpStore %297 %419 
                                         f32 %420 = OpLoad %297 
                                         f32 %421 = OpExtInst %1 31 %420 
                                                      OpStore %297 %421 
                                         f32 %422 = OpLoad %297 
                                         f32 %423 = OpFNegate %422 
                                         f32 %424 = OpFMul %423 %61 
                                         f32 %425 = OpFAdd %424 %63 
                                                      OpStore %297 %425 
                                         f32 %426 = OpLoad %297 
                                Uniform f32* %427 = OpAccessChain %27 %29 %68 
                                         f32 %428 = OpLoad %427 
                                         f32 %429 = OpFMul %426 %428 
                                                      OpStore %297 %429 
                                         f32 %430 = OpLoad %297 
                                         f32 %431 = OpExtInst %1 30 %430 
                                                      OpStore %297 %431 
                                         f32 %432 = OpLoad %297 
                                Uniform f32* %433 = OpAccessChain %27 %29 %80 
                                         f32 %434 = OpLoad %433 
                                         f32 %435 = OpFMul %432 %434 
                                                      OpStore %297 %435 
                                         f32 %436 = OpLoad %297 
                                         f32 %437 = OpExtInst %1 29 %436 
                                                      OpStore %297 %437 
                                         f32 %438 = OpLoad %297 
                                         f32 %439 = OpLoad %297 
                                         f32 %440 = OpFMul %438 %439 
                                                      OpStore %297 %440 
                                       f32_3 %441 = OpLoad %124 
                                       f32_2 %442 = OpVectorShuffle %441 %441 0 1 
                              Uniform f32_4* %443 = OpAccessChain %27 %97 
                                       f32_4 %444 = OpLoad %443 
                                       f32_2 %445 = OpVectorShuffle %444 %444 0 1 
                                       f32_2 %446 = OpFMul %442 %445 
                              Uniform f32_4* %447 = OpAccessChain %27 %97 
                                       f32_4 %448 = OpLoad %447 
                                       f32_2 %449 = OpVectorShuffle %448 %448 2 3 
                                       f32_2 %450 = OpFAdd %446 %449 
                                       f32_3 %451 = OpLoad %287 
                                       f32_3 %452 = OpVectorShuffle %451 %450 3 4 2 
                                                      OpStore %287 %452 
                         read_only Texture2D %453 = OpLoad %110 
                                     sampler %454 = OpLoad %114 
                  read_only Texture2DSampled %455 = OpSampledImage %453 %454 
                                       f32_3 %456 = OpLoad %287 
                                       f32_2 %457 = OpVectorShuffle %456 %456 0 1 
                                       f32_4 %458 = OpImageSampleImplicitLod %455 %457 
                                         f32 %459 = OpCompositeExtract %458 1 
                                Private f32* %460 = OpAccessChain %287 %121 
                                                      OpStore %460 %459 
                                       f32_2 %461 = OpLoad %151 
                                       f32_4 %462 = OpLoad %182 
                                       f32_2 %463 = OpVectorShuffle %462 %462 0 1 
                                       f32_2 %464 = OpFMul %461 %463 
                                       f32_3 %465 = OpLoad %124 
                                       f32_2 %466 = OpVectorShuffle %465 %465 0 1 
                                       f32_2 %467 = OpFAdd %464 %466 
                                       f32_4 %468 = OpLoad %182 
                                       f32_4 %469 = OpVectorShuffle %468 %467 4 5 2 3 
                                                      OpStore %182 %469 
                                       f32_2 %470 = OpLoad %151 
                                       f32_4 %471 = OpLoad %200 
                                       f32_2 %472 = OpVectorShuffle %471 %471 0 1 
                                       f32_2 %473 = OpFMul %470 %472 
                                       f32_3 %474 = OpLoad %124 
                                       f32_2 %475 = OpVectorShuffle %474 %474 0 1 
                                       f32_2 %476 = OpFAdd %473 %475 
                                       f32_3 %477 = OpLoad %124 
                                       f32_3 %478 = OpVectorShuffle %477 %476 3 4 2 
                                                      OpStore %124 %478 
                                       f32_3 %479 = OpLoad %124 
                                       f32_2 %480 = OpVectorShuffle %479 %479 0 1 
                              Uniform f32_4* %481 = OpAccessChain %27 %97 
                                       f32_4 %482 = OpLoad %481 
                                       f32_2 %483 = OpVectorShuffle %482 %482 0 1 
                                       f32_2 %484 = OpFMul %480 %483 
                              Uniform f32_4* %485 = OpAccessChain %27 %97 
                                       f32_4 %486 = OpLoad %485 
                                       f32_2 %487 = OpVectorShuffle %486 %486 2 3 
                                       f32_2 %488 = OpFAdd %484 %487 
                                       f32_3 %489 = OpLoad %124 
                                       f32_3 %490 = OpVectorShuffle %489 %488 3 4 2 
                                                      OpStore %124 %490 
                         read_only Texture2D %491 = OpLoad %110 
                                     sampler %492 = OpLoad %114 
                  read_only Texture2DSampled %493 = OpSampledImage %491 %492 
                                       f32_3 %494 = OpLoad %124 
                                       f32_2 %495 = OpVectorShuffle %494 %494 0 1 
                                       f32_4 %496 = OpImageSampleImplicitLod %493 %495 
                                         f32 %497 = OpCompositeExtract %496 2 
                                Private f32* %498 = OpAccessChain %287 %68 
                                                      OpStore %498 %497 
                                       f32_4 %499 = OpLoad %182 
                                       f32_2 %500 = OpVectorShuffle %499 %499 0 1 
                              Uniform f32_4* %501 = OpAccessChain %27 %97 
                                       f32_4 %502 = OpLoad %501 
                                       f32_2 %503 = OpVectorShuffle %502 %502 0 1 
                                       f32_2 %504 = OpFMul %500 %503 
                              Uniform f32_4* %505 = OpAccessChain %27 %97 
                                       f32_4 %506 = OpLoad %505 
                                       f32_2 %507 = OpVectorShuffle %506 %506 2 3 
                                       f32_2 %508 = OpFAdd %504 %507 
                                       f32_3 %509 = OpLoad %124 
                                       f32_3 %510 = OpVectorShuffle %509 %508 3 4 2 
                                                      OpStore %124 %510 
                         read_only Texture2D %511 = OpLoad %110 
                                     sampler %512 = OpLoad %114 
                  read_only Texture2DSampled %513 = OpSampledImage %511 %512 
                                       f32_3 %514 = OpLoad %124 
                                       f32_2 %515 = OpVectorShuffle %514 %514 0 1 
                                       f32_4 %516 = OpImageSampleImplicitLod %513 %515 
                                         f32 %517 = OpCompositeExtract %516 0 
                                Private f32* %518 = OpAccessChain %287 %51 
                                                      OpStore %518 %517 
                                         f32 %519 = OpLoad %297 
                                       f32_3 %520 = OpCompositeConstruct %519 %519 %519 
                                       f32_3 %521 = OpLoad %287 
                                       f32_3 %522 = OpFMul %520 %521 
                                                      OpStore %287 %522 
                                       f32_3 %523 = OpLoad %9 
                                       f32_3 %524 = OpLoad %287 
                                       f32_3 %525 = OpFMul %523 %524 
                                                      OpStore %287 %525 
                                       f32_3 %526 = OpLoad %287 
                              Uniform f32_4* %527 = OpAccessChain %27 %29 
                                       f32_4 %528 = OpLoad %527 
                                       f32_3 %529 = OpVectorShuffle %528 %528 0 0 0 
                                       f32_3 %530 = OpFMul %526 %529 
                                       f32_3 %531 = OpLoad %39 
                                       f32_3 %532 = OpFAdd %530 %531 
                                                      OpStore %39 %532 
                                       f32_2 %533 = OpLoad %151 
                              Uniform f32_4* %535 = OpAccessChain %27 %534 
                                       f32_4 %536 = OpLoad %535 
                                       f32_2 %537 = OpVectorShuffle %536 %536 1 1 
                                       f32_2 %538 = OpFMul %533 %537 
                                       f32_2 %539 = OpLoad vs_TEXCOORD0 
                                       f32_2 %540 = OpFAdd %538 %539 
                                       f32_3 %541 = OpLoad %124 
                                       f32_3 %542 = OpVectorShuffle %541 %540 3 4 2 
                                                      OpStore %124 %542 
                                       f32_3 %543 = OpLoad %124 
                                       f32_2 %544 = OpVectorShuffle %543 %543 0 1 
                                       f32_2 %545 = OpExtInst %1 10 %544 
                                       f32_3 %546 = OpLoad %124 
                                       f32_3 %547 = OpVectorShuffle %546 %545 3 4 2 
                                                      OpStore %124 %547 
                                       f32_2 %548 = OpLoad %151 
                                       f32_4 %549 = OpLoad %182 
                                       f32_2 %550 = OpVectorShuffle %549 %549 2 3 
                                       f32_2 %551 = OpFMul %548 %550 
                                       f32_3 %552 = OpLoad %124 
                                       f32_2 %553 = OpVectorShuffle %552 %552 0 1 
                                       f32_2 %554 = OpFAdd %551 %553 
                                       f32_4 %555 = OpLoad %182 
                                       f32_4 %556 = OpVectorShuffle %555 %554 4 5 2 3 
                                                      OpStore %182 %556 
                                       f32_2 %557 = OpLoad %151 
                                       f32_4 %558 = OpLoad %200 
                                       f32_2 %559 = OpVectorShuffle %558 %558 2 3 
                                       f32_2 %560 = OpFMul %557 %559 
                                       f32_3 %561 = OpLoad %124 
                                       f32_2 %562 = OpVectorShuffle %561 %561 0 1 
                                       f32_2 %563 = OpFAdd %560 %562 
                                                      OpStore %151 %563 
                                       f32_2 %564 = OpLoad %151 
                              Uniform f32_4* %565 = OpAccessChain %27 %97 
                                       f32_4 %566 = OpLoad %565 
                                       f32_2 %567 = OpVectorShuffle %566 %566 0 1 
                                       f32_2 %568 = OpFMul %564 %567 
                              Uniform f32_4* %569 = OpAccessChain %27 %97 
                                       f32_4 %570 = OpLoad %569 
                                       f32_2 %571 = OpVectorShuffle %570 %570 2 3 
                                       f32_2 %572 = OpFAdd %568 %571 
                                                      OpStore %151 %572 
                         read_only Texture2D %573 = OpLoad %110 
                                     sampler %574 = OpLoad %114 
                  read_only Texture2DSampled %575 = OpSampledImage %573 %574 
                                       f32_2 %576 = OpLoad %151 
                                       f32_4 %577 = OpImageSampleImplicitLod %575 %576 
                                         f32 %578 = OpCompositeExtract %577 2 
                                Private f32* %579 = OpAccessChain %200 %68 
                                                      OpStore %579 %578 
                                       f32_4 %580 = OpLoad %182 
                                       f32_2 %581 = OpVectorShuffle %580 %580 0 1 
                              Uniform f32_4* %582 = OpAccessChain %27 %97 
                                       f32_4 %583 = OpLoad %582 
                                       f32_2 %584 = OpVectorShuffle %583 %583 0 1 
                                       f32_2 %585 = OpFMul %581 %584 
                              Uniform f32_4* %586 = OpAccessChain %27 %97 
                                       f32_4 %587 = OpLoad %586 
                                       f32_2 %588 = OpVectorShuffle %587 %587 2 3 
                                       f32_2 %589 = OpFAdd %585 %588 
                                                      OpStore %151 %589 
                         read_only Texture2D %590 = OpLoad %110 
                                     sampler %591 = OpLoad %114 
                  read_only Texture2DSampled %592 = OpSampledImage %590 %591 
                                       f32_2 %593 = OpLoad %151 
                                       f32_4 %594 = OpImageSampleImplicitLod %592 %593 
                                         f32 %595 = OpCompositeExtract %594 0 
                                Private f32* %596 = OpAccessChain %200 %51 
                                                      OpStore %596 %595 
                                       f32_3 %597 = OpLoad %124 
                                       f32_2 %598 = OpVectorShuffle %597 %597 0 1 
                                       f32_2 %599 = OpFNegate %598 
                                       f32_2 %600 = OpFAdd %599 %16 
                                                      OpStore %151 %600 
                                       f32_3 %601 = OpLoad %124 
                                       f32_2 %602 = OpVectorShuffle %601 %601 0 1 
                              Uniform f32_4* %603 = OpAccessChain %27 %97 
                                       f32_4 %604 = OpLoad %603 
                                       f32_2 %605 = OpVectorShuffle %604 %604 0 1 
                                       f32_2 %606 = OpFMul %602 %605 
                              Uniform f32_4* %607 = OpAccessChain %27 %97 
                                       f32_4 %608 = OpLoad %607 
                                       f32_2 %609 = OpVectorShuffle %608 %608 2 3 
                                       f32_2 %610 = OpFAdd %606 %609 
                                       f32_3 %611 = OpLoad %124 
                                       f32_3 %612 = OpVectorShuffle %611 %610 3 4 2 
                                                      OpStore %124 %612 
                         read_only Texture2D %613 = OpLoad %110 
                                     sampler %614 = OpLoad %114 
                  read_only Texture2DSampled %615 = OpSampledImage %613 %614 
                                       f32_3 %616 = OpLoad %124 
                                       f32_2 %617 = OpVectorShuffle %616 %616 0 1 
                                       f32_4 %618 = OpImageSampleImplicitLod %615 %617 
                                         f32 %619 = OpCompositeExtract %618 1 
                                Private f32* %620 = OpAccessChain %200 %121 
                                                      OpStore %620 %619 
                                       f32_2 %621 = OpLoad %151 
                                       f32_2 %622 = OpLoad %151 
                                         f32 %623 = OpDot %621 %622 
                                                      OpStore %297 %623 
                                         f32 %624 = OpLoad %297 
                                         f32 %625 = OpExtInst %1 31 %624 
                                                      OpStore %297 %625 
                                         f32 %626 = OpLoad %297 
                                         f32 %627 = OpFNegate %626 
                                         f32 %628 = OpFMul %627 %61 
                                         f32 %629 = OpFAdd %628 %63 
                                                      OpStore %297 %629 
                                         f32 %630 = OpLoad %297 
                                Uniform f32* %631 = OpAccessChain %27 %534 %68 
                                         f32 %632 = OpLoad %631 
                                         f32 %633 = OpFMul %630 %632 
                                                      OpStore %297 %633 
                                         f32 %634 = OpLoad %297 
                                         f32 %635 = OpExtInst %1 30 %634 
                                                      OpStore %297 %635 
                                         f32 %636 = OpLoad %297 
                                Uniform f32* %637 = OpAccessChain %27 %534 %80 
                                         f32 %638 = OpLoad %637 
                                         f32 %639 = OpFMul %636 %638 
                                                      OpStore %297 %639 
                                         f32 %640 = OpLoad %297 
                                         f32 %641 = OpExtInst %1 29 %640 
                                                      OpStore %297 %641 
                                         f32 %642 = OpLoad %297 
                                       f32_3 %643 = OpCompositeConstruct %642 %642 %642 
                                       f32_4 %644 = OpLoad %200 
                                       f32_3 %645 = OpVectorShuffle %644 %644 0 1 2 
                                       f32_3 %646 = OpFMul %643 %645 
                                                      OpStore %124 %646 
                                       f32_3 %647 = OpLoad %124 
                              Uniform f32_4* %648 = OpAccessChain %27 %534 
                                       f32_4 %649 = OpLoad %648 
                                       f32_3 %650 = OpVectorShuffle %649 %649 0 0 0 
                                       f32_3 %651 = OpFMul %647 %650 
                                                      OpStore %124 %651 
                                       f32_3 %654 = OpLoad %124 
                                       f32_3 %655 = OpLoad %9 
                                       f32_3 %656 = OpFMul %654 %655 
                                       f32_3 %657 = OpLoad %39 
                                       f32_3 %658 = OpFAdd %656 %657 
                                       f32_4 %659 = OpLoad %653 
                                       f32_4 %660 = OpVectorShuffle %659 %658 4 5 6 3 
                                                      OpStore %653 %660 
                                 Output f32* %662 = OpAccessChain %653 %80 
                                                      OpStore %662 %268 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
}
Program "fp" {
SubProgram "d3d11 " {
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
""
}
SubProgram "vulkan " {
""
}
SubProgram "d3d11 " {
Keywords { "AB_HIGH_PRECISION" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "AB_HIGH_PRECISION" }
""
}
SubProgram "vulkan " {
Keywords { "AB_HIGH_PRECISION" }
""
}
}
}
 Pass {
  Name "frag_lensFlare4"
  ZTest Always
  ZWrite Off
  Cull Off
  GpuProgramID 506839
Program "vp" {
SubProgram "d3d11 " {
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in  vec4 in_POSITION0;
in  vec2 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _LensFlareGhostsParams;
uniform 	vec4 _LensFlareHaloParams;
uniform 	float _LensFlareGhostChrDistortion;
uniform 	float _LensFlareHaloChrDistortion;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BloomRange;
uniform 	vec4 _MainTex_TexelSize;
UNITY_LOCATION(0) uniform  sampler2D _LensFlareLUT;
UNITY_LOCATION(1) uniform  sampler2D _MainTex;
in  vec2 vs_TEXCOORD0;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
vec4 u_xlat6;
vec4 u_xlat7;
vec4 u_xlat8;
vec2 u_xlat10;
vec2 u_xlat18;
vec2 u_xlat20;
vec2 u_xlat21;
float u_xlat27;
float u_xlat28;
float u_xlat29;
void main()
{
    u_xlat0.xy = (-vs_TEXCOORD0.xy) + vec2(0.5, 0.5);
    u_xlat18.xy = u_xlat0.xy * _LensFlareGhostsParams.yy + vs_TEXCOORD0.xy;
    u_xlat18.xy = fract(u_xlat18.xy);
    u_xlat1.xy = (-u_xlat18.xy) + vec2(0.5, 0.5);
    u_xlat1.x = dot(u_xlat1.xy, u_xlat1.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlat1.x = (-u_xlat1.x) * 1.41419995 + 1.0;
    u_xlat1.x = u_xlat1.x * _LensFlareGhostsParams.z;
    u_xlat1.x = log2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _LensFlareGhostsParams.w;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat10.xy = u_xlat18.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat2 = texture(_MainTex, u_xlat10.xy);
    u_xlat10.x = u_xlat2.y * _BloomRange.x;
    u_xlat2.y = u_xlat2.w * u_xlat10.x;
    u_xlat10.xy = u_xlat0.xy * _LensFlareGhostsParams.yy;
    u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * 1.41419995;
    u_xlat0.x = fract(u_xlat0.x);
    u_xlat28 = dot(u_xlat10.xy, u_xlat10.xy);
    u_xlat28 = inversesqrt(u_xlat28);
    u_xlat3.xy = vec2(u_xlat28) * u_xlat10.xy;
    u_xlat4 = vec4(_LensFlareGhostChrDistortion, _LensFlareGhostChrDistortion, _LensFlareHaloChrDistortion, _LensFlareHaloChrDistortion) * (-_MainTex_TexelSize.xxxx);
    u_xlat21.xy = u_xlat3.xy * u_xlat4.xy + u_xlat18.xy;
    u_xlat21.xy = u_xlat21.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat5 = texture(_MainTex, u_xlat21.xy);
    u_xlat28 = u_xlat5.x * _BloomRange.x;
    u_xlat2.x = u_xlat5.w * u_xlat28;
    u_xlat5 = vec4(_LensFlareGhostChrDistortion, _LensFlareGhostChrDistortion, _LensFlareHaloChrDistortion, _LensFlareHaloChrDistortion) * _MainTex_TexelSize.xxxx;
    u_xlat18.xy = u_xlat3.xy * u_xlat5.xy + u_xlat18.xy;
    u_xlat18.xy = u_xlat18.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat6 = texture(_MainTex, u_xlat18.xy);
    u_xlat18.x = u_xlat6.z * _BloomRange.x;
    u_xlat2.z = u_xlat6.w * u_xlat18.x;
    u_xlat2.xyz = u_xlat1.xxx * u_xlat2.xyz;
    u_xlat0.y = 0.0;
    u_xlat0 = texture(_LensFlareLUT, u_xlat0.xy);
    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz * _LensFlareGhostsParams.xxx;
    u_xlat1.xw = fract(vs_TEXCOORD0.xy);
    u_xlat21.xy = (-u_xlat1.xw) + vec2(0.5, 0.5);
    u_xlat27 = dot(u_xlat21.xy, u_xlat21.xy);
    u_xlat27 = sqrt(u_xlat27);
    u_xlat27 = (-u_xlat27) * 1.41419995 + 1.0;
    u_xlat27 = u_xlat27 * _LensFlareGhostsParams.z;
    u_xlat27 = log2(u_xlat27);
    u_xlat27 = u_xlat27 * _LensFlareGhostsParams.w;
    u_xlat27 = exp2(u_xlat27);
    u_xlat27 = u_xlat27 * u_xlat27;
    u_xlat21.xy = u_xlat1.xw * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat6 = texture(_MainTex, u_xlat21.xy);
    u_xlat29 = u_xlat6.y * _BloomRange.x;
    u_xlat6.y = u_xlat6.w * u_xlat29;
    u_xlat21.xy = u_xlat3.xy * u_xlat4.xy + u_xlat1.xw;
    u_xlat1.xw = u_xlat3.xy * u_xlat5.xy + u_xlat1.xw;
    u_xlat1.xw = u_xlat1.xw * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat7 = texture(_MainTex, u_xlat1.xw);
    u_xlat1.xw = u_xlat21.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat8 = texture(_MainTex, u_xlat1.xw);
    u_xlat1.x = u_xlat8.x * _BloomRange.x;
    u_xlat6.x = u_xlat8.w * u_xlat1.x;
    u_xlat1.x = u_xlat7.z * _BloomRange.x;
    u_xlat6.z = u_xlat7.w * u_xlat1.x;
    u_xlat6.xyz = vec3(u_xlat27) * u_xlat6.xyz;
    u_xlat6.xyz = u_xlat0.xyz * u_xlat6.xyz;
    u_xlat2.xyz = u_xlat6.xyz * _LensFlareGhostsParams.xxx + u_xlat2.xyz;
    u_xlat1.xw = u_xlat10.xy * vec2(2.0, 2.0) + vs_TEXCOORD0.xy;
    u_xlat1.yz = u_xlat10.xy * vec2(3.0, 3.0) + vs_TEXCOORD0.xy;
    u_xlat1 = fract(u_xlat1);
    u_xlat21.xy = (-u_xlat1.xw) + vec2(0.5, 0.5);
    u_xlat27 = dot(u_xlat21.xy, u_xlat21.xy);
    u_xlat27 = sqrt(u_xlat27);
    u_xlat27 = (-u_xlat27) * 1.41419995 + 1.0;
    u_xlat27 = u_xlat27 * _LensFlareGhostsParams.z;
    u_xlat27 = log2(u_xlat27);
    u_xlat27 = u_xlat27 * _LensFlareGhostsParams.w;
    u_xlat27 = exp2(u_xlat27);
    u_xlat27 = u_xlat27 * u_xlat27;
    u_xlat21.xy = u_xlat1.xw * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat6 = texture(_MainTex, u_xlat21.xy);
    u_xlat29 = u_xlat6.y * _BloomRange.x;
    u_xlat6.y = u_xlat6.w * u_xlat29;
    u_xlat21.xy = u_xlat3.xy * u_xlat4.xy + u_xlat1.xw;
    u_xlat1.xw = u_xlat3.xy * u_xlat5.xy + u_xlat1.xw;
    u_xlat1.xw = u_xlat1.xw * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat7 = texture(_MainTex, u_xlat1.xw);
    u_xlat1.xw = u_xlat21.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat8 = texture(_MainTex, u_xlat1.xw);
    u_xlat1.x = u_xlat8.x * _BloomRange.x;
    u_xlat6.x = u_xlat8.w * u_xlat1.x;
    u_xlat1.x = u_xlat7.z * _BloomRange.x;
    u_xlat6.z = u_xlat7.w * u_xlat1.x;
    u_xlat6.xyz = vec3(u_xlat27) * u_xlat6.xyz;
    u_xlat6.xyz = u_xlat0.xyz * u_xlat6.xyz;
    u_xlat2.xyz = u_xlat6.xyz * _LensFlareGhostsParams.xxx + u_xlat2.xyz;
    u_xlat1.xw = (-u_xlat1.yz) + vec2(0.5, 0.5);
    u_xlat27 = dot(u_xlat1.xw, u_xlat1.xw);
    u_xlat27 = sqrt(u_xlat27);
    u_xlat27 = (-u_xlat27) * 1.41419995 + 1.0;
    u_xlat27 = u_xlat27 * _LensFlareGhostsParams.z;
    u_xlat27 = log2(u_xlat27);
    u_xlat27 = u_xlat27 * _LensFlareGhostsParams.w;
    u_xlat27 = exp2(u_xlat27);
    u_xlat27 = u_xlat27 * u_xlat27;
    u_xlat1.xw = u_xlat1.yz * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat6 = texture(_MainTex, u_xlat1.xw);
    u_xlat1.x = u_xlat6.y * _BloomRange.x;
    u_xlat6.y = u_xlat6.w * u_xlat1.x;
    u_xlat1.xw = u_xlat3.xy * u_xlat4.xy + u_xlat1.yz;
    u_xlat10.xy = u_xlat3.xy * u_xlat5.xy + u_xlat1.yz;
    u_xlat10.xy = u_xlat10.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat7 = texture(_MainTex, u_xlat10.xy);
    u_xlat1.xy = u_xlat1.xw * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1 = texture(_MainTex, u_xlat1.xy);
    u_xlat1.x = u_xlat1.x * _BloomRange.x;
    u_xlat6.x = u_xlat1.w * u_xlat1.x;
    u_xlat1.x = u_xlat7.z * _BloomRange.x;
    u_xlat6.z = u_xlat7.w * u_xlat1.x;
    u_xlat1.xyz = vec3(u_xlat27) * u_xlat6.xyz;
    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _LensFlareGhostsParams.xxx + u_xlat2.xyz;
    u_xlat2.xy = u_xlat3.xy * _LensFlareHaloParams.yy + vs_TEXCOORD0.xy;
    u_xlat2.xy = fract(u_xlat2.xy);
    u_xlat20.xy = u_xlat3.xy * u_xlat4.zw + u_xlat2.xy;
    u_xlat3.xy = u_xlat3.xy * u_xlat5.zw + u_xlat2.xy;
    u_xlat3.xy = u_xlat3.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat3 = texture(_MainTex, u_xlat3.xy);
    u_xlat20.xy = u_xlat20.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat4 = texture(_MainTex, u_xlat20.xy);
    u_xlat27 = u_xlat4.x * _BloomRange.x;
    u_xlat4.x = u_xlat4.w * u_xlat27;
    u_xlat27 = u_xlat3.z * _BloomRange.x;
    u_xlat4.z = u_xlat3.w * u_xlat27;
    u_xlat20.xy = (-u_xlat2.xy) + vec2(0.5, 0.5);
    u_xlat2.xy = u_xlat2.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat3 = texture(_MainTex, u_xlat2.xy);
    u_xlat27 = dot(u_xlat20.xy, u_xlat20.xy);
    u_xlat27 = sqrt(u_xlat27);
    u_xlat27 = (-u_xlat27) * 1.41419995 + 1.0;
    u_xlat27 = u_xlat27 * _LensFlareHaloParams.z;
    u_xlat27 = log2(u_xlat27);
    u_xlat27 = u_xlat27 * _LensFlareHaloParams.w;
    u_xlat27 = exp2(u_xlat27);
    u_xlat28 = u_xlat3.y * _BloomRange.x;
    u_xlat4.y = u_xlat3.w * u_xlat28;
    u_xlat2.xyz = vec3(u_xlat27) * u_xlat4.xyz;
    u_xlat2.xyz = u_xlat2.xyz * _LensFlareHaloParams.xxx;
    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.xyz * _BloomRange.yyy;
    u_xlat27 = max(u_xlat0.y, u_xlat0.x);
    u_xlat1.x = max(u_xlat0.z, 9.99999997e-07);
    u_xlat27 = max(u_xlat27, u_xlat1.x);
    u_xlat27 = min(u_xlat27, 1.0);
    u_xlat27 = u_xlat27 * 255.0;
    u_xlat27 = ceil(u_xlat27);
    u_xlat27 = u_xlat27 * 0.00392156886;
    SV_Target0.xyz = u_xlat0.xyz / vec3(u_xlat27);
    SV_Target0.w = u_xlat27;
    return;
}

#endif
"
}
SubProgram "vulkan " {
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 94
; Schema: 0
                                              OpCapability Shader 
                                       %1 = OpExtInstImport "GLSL.std.450" 
                                              OpMemoryModel Logical GLSL450 
                                              OpEntryPoint Vertex %4 "main" %11 %72 %84 %86 
                                              OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                              OpDecorate %11 Location 11 
                                              OpDecorate %16 ArrayStride 16 
                                              OpDecorate %17 ArrayStride 17 
                                              OpMemberDecorate %18 0 Offset 18 
                                              OpMemberDecorate %18 1 Offset 18 
                                              OpDecorate %18 Block 
                                              OpDecorate %20 DescriptorSet 20 
                                              OpDecorate %20 Binding 20 
                                              OpMemberDecorate %70 0 BuiltIn 70 
                                              OpMemberDecorate %70 1 BuiltIn 70 
                                              OpMemberDecorate %70 2 BuiltIn 70 
                                              OpDecorate %70 Block 
                                              OpDecorate vs_TEXCOORD0 Location 84 
                                              OpDecorate %86 Location 86 
                                       %2 = OpTypeVoid 
                                       %3 = OpTypeFunction %2 
                                       %6 = OpTypeFloat 32 
                                       %7 = OpTypeVector %6 4 
                                       %8 = OpTypePointer Private %7 
                        Private f32_4* %9 = OpVariable Private 
                                      %10 = OpTypePointer Input %7 
                         Input f32_4* %11 = OpVariable Input 
                                      %14 = OpTypeInt 32 0 
                                  u32 %15 = OpConstant 4 
                                      %16 = OpTypeArray %7 %15 
                                      %17 = OpTypeArray %7 %15 
                                      %18 = OpTypeStruct %16 %17 
                                      %19 = OpTypePointer Uniform %18 
Uniform struct {f32_4[4]; f32_4[4];}* %20 = OpVariable Uniform 
                                      %21 = OpTypeInt 32 1 
                                  i32 %22 = OpConstant 0 
                                  i32 %23 = OpConstant 1 
                                      %24 = OpTypePointer Uniform %7 
                                  i32 %35 = OpConstant 2 
                                  i32 %44 = OpConstant 3 
                       Private f32_4* %48 = OpVariable Private 
                                  u32 %68 = OpConstant 1 
                                      %69 = OpTypeArray %6 %68 
                                      %70 = OpTypeStruct %7 %6 %69 
                                      %71 = OpTypePointer Output %70 
 Output struct {f32_4; f32; f32[1];}* %72 = OpVariable Output 
                                      %80 = OpTypePointer Output %7 
                                      %82 = OpTypeVector %6 2 
                                      %83 = OpTypePointer Output %82 
               Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                      %85 = OpTypePointer Input %82 
                         Input f32_2* %86 = OpVariable Input 
                                      %88 = OpTypePointer Output %6 
                                  void %4 = OpFunction None %3 
                                       %5 = OpLabel 
                                f32_4 %12 = OpLoad %11 
                                f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                       Uniform f32_4* %25 = OpAccessChain %20 %22 %23 
                                f32_4 %26 = OpLoad %25 
                                f32_4 %27 = OpFMul %13 %26 
                                              OpStore %9 %27 
                       Uniform f32_4* %28 = OpAccessChain %20 %22 %22 
                                f32_4 %29 = OpLoad %28 
                                f32_4 %30 = OpLoad %11 
                                f32_4 %31 = OpVectorShuffle %30 %30 0 0 0 0 
                                f32_4 %32 = OpFMul %29 %31 
                                f32_4 %33 = OpLoad %9 
                                f32_4 %34 = OpFAdd %32 %33 
                                              OpStore %9 %34 
                       Uniform f32_4* %36 = OpAccessChain %20 %22 %35 
                                f32_4 %37 = OpLoad %36 
                                f32_4 %38 = OpLoad %11 
                                f32_4 %39 = OpVectorShuffle %38 %38 2 2 2 2 
                                f32_4 %40 = OpFMul %37 %39 
                                f32_4 %41 = OpLoad %9 
                                f32_4 %42 = OpFAdd %40 %41 
                                              OpStore %9 %42 
                                f32_4 %43 = OpLoad %9 
                       Uniform f32_4* %45 = OpAccessChain %20 %22 %44 
                                f32_4 %46 = OpLoad %45 
                                f32_4 %47 = OpFAdd %43 %46 
                                              OpStore %9 %47 
                                f32_4 %49 = OpLoad %9 
                                f32_4 %50 = OpVectorShuffle %49 %49 1 1 1 1 
                       Uniform f32_4* %51 = OpAccessChain %20 %23 %23 
                                f32_4 %52 = OpLoad %51 
                                f32_4 %53 = OpFMul %50 %52 
                                              OpStore %48 %53 
                       Uniform f32_4* %54 = OpAccessChain %20 %23 %22 
                                f32_4 %55 = OpLoad %54 
                                f32_4 %56 = OpLoad %9 
                                f32_4 %57 = OpVectorShuffle %56 %56 0 0 0 0 
                                f32_4 %58 = OpFMul %55 %57 
                                f32_4 %59 = OpLoad %48 
                                f32_4 %60 = OpFAdd %58 %59 
                                              OpStore %48 %60 
                       Uniform f32_4* %61 = OpAccessChain %20 %23 %35 
                                f32_4 %62 = OpLoad %61 
                                f32_4 %63 = OpLoad %9 
                                f32_4 %64 = OpVectorShuffle %63 %63 2 2 2 2 
                                f32_4 %65 = OpFMul %62 %64 
                                f32_4 %66 = OpLoad %48 
                                f32_4 %67 = OpFAdd %65 %66 
                                              OpStore %48 %67 
                       Uniform f32_4* %73 = OpAccessChain %20 %23 %44 
                                f32_4 %74 = OpLoad %73 
                                f32_4 %75 = OpLoad %9 
                                f32_4 %76 = OpVectorShuffle %75 %75 3 3 3 3 
                                f32_4 %77 = OpFMul %74 %76 
                                f32_4 %78 = OpLoad %48 
                                f32_4 %79 = OpFAdd %77 %78 
                        Output f32_4* %81 = OpAccessChain %72 %22 
                                              OpStore %81 %79 
                                f32_2 %87 = OpLoad %86 
                                              OpStore vs_TEXCOORD0 %87 
                          Output f32* %89 = OpAccessChain %72 %22 %68 
                                  f32 %90 = OpLoad %89 
                                  f32 %91 = OpFNegate %90 
                          Output f32* %92 = OpAccessChain %72 %22 %68 
                                              OpStore %92 %91 
                                              OpReturn
                                              OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 955
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %12 %944 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpDecorate vs_TEXCOORD0 Location 12 
                                                      OpMemberDecorate %25 0 Offset 25 
                                                      OpMemberDecorate %25 1 Offset 25 
                                                      OpMemberDecorate %25 2 Offset 25 
                                                      OpMemberDecorate %25 3 Offset 25 
                                                      OpMemberDecorate %25 4 Offset 25 
                                                      OpMemberDecorate %25 5 Offset 25 
                                                      OpMemberDecorate %25 6 Offset 25 
                                                      OpDecorate %25 Block 
                                                      OpDecorate %27 DescriptorSet 27 
                                                      OpDecorate %27 Binding 27 
                                                      OpDecorate %109 DescriptorSet 109 
                                                      OpDecorate %109 Binding 109 
                                                      OpDecorate %113 DescriptorSet 113 
                                                      OpDecorate %113 Binding 113 
                                                      OpDecorate %273 DescriptorSet 273 
                                                      OpDecorate %273 Binding 273 
                                                      OpDecorate %275 DescriptorSet 275 
                                                      OpDecorate %275 Binding 275 
                                                      OpDecorate %944 Location 944 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 3 
                                               %8 = OpTypePointer Private %7 
                                Private f32_3* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 2 
                                              %11 = OpTypePointer Input %10 
                        Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                          f32 %15 = OpConstant 3.674022E-40 
                                        f32_2 %16 = OpConstantComposite %15 %15 
                                              %20 = OpTypePointer Private %10 
                               Private f32_2* %21 = OpVariable Private 
                                              %24 = OpTypeVector %6 4 
                                              %25 = OpTypeStruct %24 %24 %6 %6 %24 %24 %24 
                                              %26 = OpTypePointer Uniform %25 
Uniform struct {f32_4; f32_4; f32; f32; f32_4; f32_4; f32_4;}* %27 = OpVariable Uniform 
                                              %28 = OpTypeInt 32 1 
                                          i32 %29 = OpConstant 0 
                                              %30 = OpTypePointer Uniform %24 
                                              %39 = OpTypePointer Private %24 
                               Private f32_4* %40 = OpVariable Private 
                                              %51 = OpTypeInt 32 0 
                                          u32 %52 = OpConstant 0 
                                              %53 = OpTypePointer Private %6 
                                          f32 %62 = OpConstant 3.674022E-40 
                                          f32 %64 = OpConstant 3.674022E-40 
                                          u32 %69 = OpConstant 2 
                                              %70 = OpTypePointer Uniform %6 
                                          u32 %81 = OpConstant 3 
                               Private f32_2* %96 = OpVariable Private 
                                          i32 %98 = OpConstant 4 
                                             %107 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                             %108 = OpTypePointer UniformConstant %107 
        UniformConstant read_only Texture2D* %109 = OpVariable UniformConstant 
                                             %111 = OpTypeSampler 
                                             %112 = OpTypePointer UniformConstant %111 
                    UniformConstant sampler* %113 = OpVariable UniformConstant 
                                             %115 = OpTypeSampledImage %107 
                                         i32 %122 = OpConstant 5 
                              Private f32_3* %127 = OpVariable Private 
                                         u32 %128 = OpConstant 1 
                                Private f32* %159 = OpVariable Private 
                              Private f32_2* %165 = OpVariable Private 
                              Private f32_4* %170 = OpVariable Private 
                                         i32 %171 = OpConstant 2 
                                         i32 %176 = OpConstant 3 
                                         i32 %182 = OpConstant 6 
                              Private f32_2* %188 = OpVariable Private 
                              Private f32_4* %220 = OpVariable Private 
                                         f32 %271 = OpConstant 3.674022E-40 
        UniformConstant read_only Texture2D* %273 = OpVariable UniformConstant 
                    UniformConstant sampler* %275 = OpVariable UniformConstant 
                                Private f32* %298 = OpVariable Private 
                                Private f32* %339 = OpVariable Private 
                              Private f32_3* %345 = OpVariable Private 
                                         f32 %440 = OpConstant 3.674022E-40 
                                       f32_2 %441 = OpConstantComposite %440 %440 
                                         f32 %448 = OpConstant 3.674022E-40 
                                       f32_2 %449 = OpConstantComposite %448 %448 
                                         i32 %763 = OpConstant 1 
                              Private f32_2* %777 = OpVariable Private 
                                         f32 %926 = OpConstant 3.674022E-40 
                                         f32 %936 = OpConstant 3.674022E-40 
                                         f32 %941 = OpConstant 3.674022E-40 
                                             %943 = OpTypePointer Output %24 
                               Output f32_4* %944 = OpVariable Output 
                                             %952 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_2 %13 = OpLoad vs_TEXCOORD0 
                                        f32_2 %14 = OpFNegate %13 
                                        f32_2 %17 = OpFAdd %14 %16 
                                        f32_3 %18 = OpLoad %9 
                                        f32_3 %19 = OpVectorShuffle %18 %17 3 4 2 
                                                      OpStore %9 %19 
                                        f32_3 %22 = OpLoad %9 
                                        f32_2 %23 = OpVectorShuffle %22 %22 0 1 
                               Uniform f32_4* %31 = OpAccessChain %27 %29 
                                        f32_4 %32 = OpLoad %31 
                                        f32_2 %33 = OpVectorShuffle %32 %32 1 1 
                                        f32_2 %34 = OpFMul %23 %33 
                                        f32_2 %35 = OpLoad vs_TEXCOORD0 
                                        f32_2 %36 = OpFAdd %34 %35 
                                                      OpStore %21 %36 
                                        f32_2 %37 = OpLoad %21 
                                        f32_2 %38 = OpExtInst %1 10 %37 
                                                      OpStore %21 %38 
                                        f32_2 %41 = OpLoad %21 
                                        f32_2 %42 = OpFNegate %41 
                                        f32_2 %43 = OpFAdd %42 %16 
                                        f32_4 %44 = OpLoad %40 
                                        f32_4 %45 = OpVectorShuffle %44 %43 4 5 2 3 
                                                      OpStore %40 %45 
                                        f32_4 %46 = OpLoad %40 
                                        f32_2 %47 = OpVectorShuffle %46 %46 0 1 
                                        f32_4 %48 = OpLoad %40 
                                        f32_2 %49 = OpVectorShuffle %48 %48 0 1 
                                          f32 %50 = OpDot %47 %49 
                                 Private f32* %54 = OpAccessChain %40 %52 
                                                      OpStore %54 %50 
                                 Private f32* %55 = OpAccessChain %40 %52 
                                          f32 %56 = OpLoad %55 
                                          f32 %57 = OpExtInst %1 31 %56 
                                 Private f32* %58 = OpAccessChain %40 %52 
                                                      OpStore %58 %57 
                                 Private f32* %59 = OpAccessChain %40 %52 
                                          f32 %60 = OpLoad %59 
                                          f32 %61 = OpFNegate %60 
                                          f32 %63 = OpFMul %61 %62 
                                          f32 %65 = OpFAdd %63 %64 
                                 Private f32* %66 = OpAccessChain %40 %52 
                                                      OpStore %66 %65 
                                 Private f32* %67 = OpAccessChain %40 %52 
                                          f32 %68 = OpLoad %67 
                                 Uniform f32* %71 = OpAccessChain %27 %29 %69 
                                          f32 %72 = OpLoad %71 
                                          f32 %73 = OpFMul %68 %72 
                                 Private f32* %74 = OpAccessChain %40 %52 
                                                      OpStore %74 %73 
                                 Private f32* %75 = OpAccessChain %40 %52 
                                          f32 %76 = OpLoad %75 
                                          f32 %77 = OpExtInst %1 30 %76 
                                 Private f32* %78 = OpAccessChain %40 %52 
                                                      OpStore %78 %77 
                                 Private f32* %79 = OpAccessChain %40 %52 
                                          f32 %80 = OpLoad %79 
                                 Uniform f32* %82 = OpAccessChain %27 %29 %81 
                                          f32 %83 = OpLoad %82 
                                          f32 %84 = OpFMul %80 %83 
                                 Private f32* %85 = OpAccessChain %40 %52 
                                                      OpStore %85 %84 
                                 Private f32* %86 = OpAccessChain %40 %52 
                                          f32 %87 = OpLoad %86 
                                          f32 %88 = OpExtInst %1 29 %87 
                                 Private f32* %89 = OpAccessChain %40 %52 
                                                      OpStore %89 %88 
                                 Private f32* %90 = OpAccessChain %40 %52 
                                          f32 %91 = OpLoad %90 
                                 Private f32* %92 = OpAccessChain %40 %52 
                                          f32 %93 = OpLoad %92 
                                          f32 %94 = OpFMul %91 %93 
                                 Private f32* %95 = OpAccessChain %40 %52 
                                                      OpStore %95 %94 
                                        f32_2 %97 = OpLoad %21 
                               Uniform f32_4* %99 = OpAccessChain %27 %98 
                                       f32_4 %100 = OpLoad %99 
                                       f32_2 %101 = OpVectorShuffle %100 %100 0 1 
                                       f32_2 %102 = OpFMul %97 %101 
                              Uniform f32_4* %103 = OpAccessChain %27 %98 
                                       f32_4 %104 = OpLoad %103 
                                       f32_2 %105 = OpVectorShuffle %104 %104 2 3 
                                       f32_2 %106 = OpFAdd %102 %105 
                                                      OpStore %96 %106 
                         read_only Texture2D %110 = OpLoad %109 
                                     sampler %114 = OpLoad %113 
                  read_only Texture2DSampled %116 = OpSampledImage %110 %114 
                                       f32_2 %117 = OpLoad %96 
                                       f32_4 %118 = OpImageSampleImplicitLod %116 %117 
                                       f32_2 %119 = OpVectorShuffle %118 %118 1 3 
                                                      OpStore %96 %119 
                                Private f32* %120 = OpAccessChain %96 %52 
                                         f32 %121 = OpLoad %120 
                                Uniform f32* %123 = OpAccessChain %27 %122 %52 
                                         f32 %124 = OpLoad %123 
                                         f32 %125 = OpFMul %121 %124 
                                Private f32* %126 = OpAccessChain %96 %52 
                                                      OpStore %126 %125 
                                Private f32* %129 = OpAccessChain %96 %128 
                                         f32 %130 = OpLoad %129 
                                Private f32* %131 = OpAccessChain %96 %52 
                                         f32 %132 = OpLoad %131 
                                         f32 %133 = OpFMul %130 %132 
                                Private f32* %134 = OpAccessChain %127 %128 
                                                      OpStore %134 %133 
                                       f32_3 %135 = OpLoad %9 
                                       f32_2 %136 = OpVectorShuffle %135 %135 0 1 
                              Uniform f32_4* %137 = OpAccessChain %27 %29 
                                       f32_4 %138 = OpLoad %137 
                                       f32_2 %139 = OpVectorShuffle %138 %138 1 1 
                                       f32_2 %140 = OpFMul %136 %139 
                                                      OpStore %96 %140 
                                       f32_3 %141 = OpLoad %9 
                                       f32_2 %142 = OpVectorShuffle %141 %141 0 1 
                                       f32_3 %143 = OpLoad %9 
                                       f32_2 %144 = OpVectorShuffle %143 %143 0 1 
                                         f32 %145 = OpDot %142 %144 
                                Private f32* %146 = OpAccessChain %9 %52 
                                                      OpStore %146 %145 
                                Private f32* %147 = OpAccessChain %9 %52 
                                         f32 %148 = OpLoad %147 
                                         f32 %149 = OpExtInst %1 31 %148 
                                Private f32* %150 = OpAccessChain %9 %52 
                                                      OpStore %150 %149 
                                Private f32* %151 = OpAccessChain %9 %52 
                                         f32 %152 = OpLoad %151 
                                         f32 %153 = OpFMul %152 %62 
                                Private f32* %154 = OpAccessChain %9 %52 
                                                      OpStore %154 %153 
                                Private f32* %155 = OpAccessChain %9 %52 
                                         f32 %156 = OpLoad %155 
                                         f32 %157 = OpExtInst %1 10 %156 
                                Private f32* %158 = OpAccessChain %9 %52 
                                                      OpStore %158 %157 
                                       f32_2 %160 = OpLoad %96 
                                       f32_2 %161 = OpLoad %96 
                                         f32 %162 = OpDot %160 %161 
                                                      OpStore %159 %162 
                                         f32 %163 = OpLoad %159 
                                         f32 %164 = OpExtInst %1 32 %163 
                                                      OpStore %159 %164 
                                         f32 %166 = OpLoad %159 
                                       f32_2 %167 = OpCompositeConstruct %166 %166 
                                       f32_2 %168 = OpLoad %96 
                                       f32_2 %169 = OpFMul %167 %168 
                                                      OpStore %165 %169 
                                Uniform f32* %172 = OpAccessChain %27 %171 
                                         f32 %173 = OpLoad %172 
                                Uniform f32* %174 = OpAccessChain %27 %171 
                                         f32 %175 = OpLoad %174 
                                Uniform f32* %177 = OpAccessChain %27 %176 
                                         f32 %178 = OpLoad %177 
                                Uniform f32* %179 = OpAccessChain %27 %176 
                                         f32 %180 = OpLoad %179 
                                       f32_4 %181 = OpCompositeConstruct %173 %175 %178 %180 
                              Uniform f32_4* %183 = OpAccessChain %27 %182 
                                       f32_4 %184 = OpLoad %183 
                                       f32_4 %185 = OpVectorShuffle %184 %184 0 0 0 0 
                                       f32_4 %186 = OpFNegate %185 
                                       f32_4 %187 = OpFMul %181 %186 
                                                      OpStore %170 %187 
                                       f32_2 %189 = OpLoad %165 
                                       f32_4 %190 = OpLoad %170 
                                       f32_2 %191 = OpVectorShuffle %190 %190 0 1 
                                       f32_2 %192 = OpFMul %189 %191 
                                       f32_2 %193 = OpLoad %21 
                                       f32_2 %194 = OpFAdd %192 %193 
                                                      OpStore %188 %194 
                                       f32_2 %195 = OpLoad %188 
                              Uniform f32_4* %196 = OpAccessChain %27 %98 
                                       f32_4 %197 = OpLoad %196 
                                       f32_2 %198 = OpVectorShuffle %197 %197 0 1 
                                       f32_2 %199 = OpFMul %195 %198 
                              Uniform f32_4* %200 = OpAccessChain %27 %98 
                                       f32_4 %201 = OpLoad %200 
                                       f32_2 %202 = OpVectorShuffle %201 %201 2 3 
                                       f32_2 %203 = OpFAdd %199 %202 
                                                      OpStore %188 %203 
                         read_only Texture2D %204 = OpLoad %109 
                                     sampler %205 = OpLoad %113 
                  read_only Texture2DSampled %206 = OpSampledImage %204 %205 
                                       f32_2 %207 = OpLoad %188 
                                       f32_4 %208 = OpImageSampleImplicitLod %206 %207 
                                       f32_2 %209 = OpVectorShuffle %208 %208 0 3 
                                                      OpStore %188 %209 
                                Private f32* %210 = OpAccessChain %188 %52 
                                         f32 %211 = OpLoad %210 
                                Uniform f32* %212 = OpAccessChain %27 %122 %52 
                                         f32 %213 = OpLoad %212 
                                         f32 %214 = OpFMul %211 %213 
                                                      OpStore %159 %214 
                                Private f32* %215 = OpAccessChain %188 %128 
                                         f32 %216 = OpLoad %215 
                                         f32 %217 = OpLoad %159 
                                         f32 %218 = OpFMul %216 %217 
                                Private f32* %219 = OpAccessChain %127 %52 
                                                      OpStore %219 %218 
                                Uniform f32* %221 = OpAccessChain %27 %171 
                                         f32 %222 = OpLoad %221 
                                Uniform f32* %223 = OpAccessChain %27 %171 
                                         f32 %224 = OpLoad %223 
                                Uniform f32* %225 = OpAccessChain %27 %176 
                                         f32 %226 = OpLoad %225 
                                Uniform f32* %227 = OpAccessChain %27 %176 
                                         f32 %228 = OpLoad %227 
                                       f32_4 %229 = OpCompositeConstruct %222 %224 %226 %228 
                              Uniform f32_4* %230 = OpAccessChain %27 %182 
                                       f32_4 %231 = OpLoad %230 
                                       f32_4 %232 = OpVectorShuffle %231 %231 0 0 0 0 
                                       f32_4 %233 = OpFMul %229 %232 
                                                      OpStore %220 %233 
                                       f32_2 %234 = OpLoad %165 
                                       f32_4 %235 = OpLoad %220 
                                       f32_2 %236 = OpVectorShuffle %235 %235 0 1 
                                       f32_2 %237 = OpFMul %234 %236 
                                       f32_2 %238 = OpLoad %21 
                                       f32_2 %239 = OpFAdd %237 %238 
                                                      OpStore %21 %239 
                                       f32_2 %240 = OpLoad %21 
                              Uniform f32_4* %241 = OpAccessChain %27 %98 
                                       f32_4 %242 = OpLoad %241 
                                       f32_2 %243 = OpVectorShuffle %242 %242 0 1 
                                       f32_2 %244 = OpFMul %240 %243 
                              Uniform f32_4* %245 = OpAccessChain %27 %98 
                                       f32_4 %246 = OpLoad %245 
                                       f32_2 %247 = OpVectorShuffle %246 %246 2 3 
                                       f32_2 %248 = OpFAdd %244 %247 
                                                      OpStore %21 %248 
                         read_only Texture2D %249 = OpLoad %109 
                                     sampler %250 = OpLoad %113 
                  read_only Texture2DSampled %251 = OpSampledImage %249 %250 
                                       f32_2 %252 = OpLoad %21 
                                       f32_4 %253 = OpImageSampleImplicitLod %251 %252 
                                       f32_2 %254 = OpVectorShuffle %253 %253 2 3 
                                                      OpStore %21 %254 
                                Private f32* %255 = OpAccessChain %21 %52 
                                         f32 %256 = OpLoad %255 
                                Uniform f32* %257 = OpAccessChain %27 %122 %52 
                                         f32 %258 = OpLoad %257 
                                         f32 %259 = OpFMul %256 %258 
                                Private f32* %260 = OpAccessChain %21 %52 
                                                      OpStore %260 %259 
                                Private f32* %261 = OpAccessChain %21 %128 
                                         f32 %262 = OpLoad %261 
                                Private f32* %263 = OpAccessChain %21 %52 
                                         f32 %264 = OpLoad %263 
                                         f32 %265 = OpFMul %262 %264 
                                Private f32* %266 = OpAccessChain %127 %69 
                                                      OpStore %266 %265 
                                       f32_4 %267 = OpLoad %40 
                                       f32_3 %268 = OpVectorShuffle %267 %267 0 0 0 
                                       f32_3 %269 = OpLoad %127 
                                       f32_3 %270 = OpFMul %268 %269 
                                                      OpStore %127 %270 
                                Private f32* %272 = OpAccessChain %9 %128 
                                                      OpStore %272 %271 
                         read_only Texture2D %274 = OpLoad %273 
                                     sampler %276 = OpLoad %275 
                  read_only Texture2DSampled %277 = OpSampledImage %274 %276 
                                       f32_3 %278 = OpLoad %9 
                                       f32_2 %279 = OpVectorShuffle %278 %278 0 1 
                                       f32_4 %280 = OpImageSampleImplicitLod %277 %279 
                                       f32_3 %281 = OpVectorShuffle %280 %280 0 1 2 
                                                      OpStore %9 %281 
                                       f32_3 %282 = OpLoad %9 
                                       f32_3 %283 = OpLoad %127 
                                       f32_3 %284 = OpFMul %282 %283 
                                                      OpStore %127 %284 
                                       f32_3 %285 = OpLoad %127 
                              Uniform f32_4* %286 = OpAccessChain %27 %29 
                                       f32_4 %287 = OpLoad %286 
                                       f32_3 %288 = OpVectorShuffle %287 %287 0 0 0 
                                       f32_3 %289 = OpFMul %285 %288 
                                                      OpStore %127 %289 
                                       f32_2 %290 = OpLoad vs_TEXCOORD0 
                                       f32_2 %291 = OpExtInst %1 10 %290 
                                       f32_4 %292 = OpLoad %40 
                                       f32_4 %293 = OpVectorShuffle %292 %291 4 1 2 5 
                                                      OpStore %40 %293 
                                       f32_4 %294 = OpLoad %40 
                                       f32_2 %295 = OpVectorShuffle %294 %294 0 3 
                                       f32_2 %296 = OpFNegate %295 
                                       f32_2 %297 = OpFAdd %296 %16 
                                                      OpStore %188 %297 
                                       f32_2 %299 = OpLoad %188 
                                       f32_2 %300 = OpLoad %188 
                                         f32 %301 = OpDot %299 %300 
                                                      OpStore %298 %301 
                                         f32 %302 = OpLoad %298 
                                         f32 %303 = OpExtInst %1 31 %302 
                                                      OpStore %298 %303 
                                         f32 %304 = OpLoad %298 
                                         f32 %305 = OpFNegate %304 
                                         f32 %306 = OpFMul %305 %62 
                                         f32 %307 = OpFAdd %306 %64 
                                                      OpStore %298 %307 
                                         f32 %308 = OpLoad %298 
                                Uniform f32* %309 = OpAccessChain %27 %29 %69 
                                         f32 %310 = OpLoad %309 
                                         f32 %311 = OpFMul %308 %310 
                                                      OpStore %298 %311 
                                         f32 %312 = OpLoad %298 
                                         f32 %313 = OpExtInst %1 30 %312 
                                                      OpStore %298 %313 
                                         f32 %314 = OpLoad %298 
                                Uniform f32* %315 = OpAccessChain %27 %29 %81 
                                         f32 %316 = OpLoad %315 
                                         f32 %317 = OpFMul %314 %316 
                                                      OpStore %298 %317 
                                         f32 %318 = OpLoad %298 
                                         f32 %319 = OpExtInst %1 29 %318 
                                                      OpStore %298 %319 
                                         f32 %320 = OpLoad %298 
                                         f32 %321 = OpLoad %298 
                                         f32 %322 = OpFMul %320 %321 
                                                      OpStore %298 %322 
                                       f32_4 %323 = OpLoad %40 
                                       f32_2 %324 = OpVectorShuffle %323 %323 0 3 
                              Uniform f32_4* %325 = OpAccessChain %27 %98 
                                       f32_4 %326 = OpLoad %325 
                                       f32_2 %327 = OpVectorShuffle %326 %326 0 1 
                                       f32_2 %328 = OpFMul %324 %327 
                              Uniform f32_4* %329 = OpAccessChain %27 %98 
                                       f32_4 %330 = OpLoad %329 
                                       f32_2 %331 = OpVectorShuffle %330 %330 2 3 
                                       f32_2 %332 = OpFAdd %328 %331 
                                                      OpStore %188 %332 
                         read_only Texture2D %333 = OpLoad %109 
                                     sampler %334 = OpLoad %113 
                  read_only Texture2DSampled %335 = OpSampledImage %333 %334 
                                       f32_2 %336 = OpLoad %188 
                                       f32_4 %337 = OpImageSampleImplicitLod %335 %336 
                                       f32_2 %338 = OpVectorShuffle %337 %337 1 3 
                                                      OpStore %188 %338 
                                Private f32* %340 = OpAccessChain %188 %52 
                                         f32 %341 = OpLoad %340 
                                Uniform f32* %342 = OpAccessChain %27 %122 %52 
                                         f32 %343 = OpLoad %342 
                                         f32 %344 = OpFMul %341 %343 
                                                      OpStore %339 %344 
                                Private f32* %346 = OpAccessChain %188 %128 
                                         f32 %347 = OpLoad %346 
                                         f32 %348 = OpLoad %339 
                                         f32 %349 = OpFMul %347 %348 
                                Private f32* %350 = OpAccessChain %345 %128 
                                                      OpStore %350 %349 
                                       f32_2 %351 = OpLoad %165 
                                       f32_4 %352 = OpLoad %170 
                                       f32_2 %353 = OpVectorShuffle %352 %352 0 1 
                                       f32_2 %354 = OpFMul %351 %353 
                                       f32_4 %355 = OpLoad %40 
                                       f32_2 %356 = OpVectorShuffle %355 %355 0 3 
                                       f32_2 %357 = OpFAdd %354 %356 
                                                      OpStore %188 %357 
                                       f32_2 %358 = OpLoad %165 
                                       f32_4 %359 = OpLoad %220 
                                       f32_2 %360 = OpVectorShuffle %359 %359 0 1 
                                       f32_2 %361 = OpFMul %358 %360 
                                       f32_4 %362 = OpLoad %40 
                                       f32_2 %363 = OpVectorShuffle %362 %362 0 3 
                                       f32_2 %364 = OpFAdd %361 %363 
                                       f32_4 %365 = OpLoad %40 
                                       f32_4 %366 = OpVectorShuffle %365 %364 4 1 2 5 
                                                      OpStore %40 %366 
                                       f32_4 %367 = OpLoad %40 
                                       f32_2 %368 = OpVectorShuffle %367 %367 0 3 
                              Uniform f32_4* %369 = OpAccessChain %27 %98 
                                       f32_4 %370 = OpLoad %369 
                                       f32_2 %371 = OpVectorShuffle %370 %370 0 1 
                                       f32_2 %372 = OpFMul %368 %371 
                              Uniform f32_4* %373 = OpAccessChain %27 %98 
                                       f32_4 %374 = OpLoad %373 
                                       f32_2 %375 = OpVectorShuffle %374 %374 2 3 
                                       f32_2 %376 = OpFAdd %372 %375 
                                       f32_4 %377 = OpLoad %40 
                                       f32_4 %378 = OpVectorShuffle %377 %376 4 1 2 5 
                                                      OpStore %40 %378 
                         read_only Texture2D %379 = OpLoad %109 
                                     sampler %380 = OpLoad %113 
                  read_only Texture2DSampled %381 = OpSampledImage %379 %380 
                                       f32_4 %382 = OpLoad %40 
                                       f32_2 %383 = OpVectorShuffle %382 %382 0 3 
                                       f32_4 %384 = OpImageSampleImplicitLod %381 %383 
                                       f32_2 %385 = OpVectorShuffle %384 %384 2 3 
                                       f32_4 %386 = OpLoad %40 
                                       f32_4 %387 = OpVectorShuffle %386 %385 4 1 2 5 
                                                      OpStore %40 %387 
                                       f32_2 %388 = OpLoad %188 
                              Uniform f32_4* %389 = OpAccessChain %27 %98 
                                       f32_4 %390 = OpLoad %389 
                                       f32_2 %391 = OpVectorShuffle %390 %390 0 1 
                                       f32_2 %392 = OpFMul %388 %391 
                              Uniform f32_4* %393 = OpAccessChain %27 %98 
                                       f32_4 %394 = OpLoad %393 
                                       f32_2 %395 = OpVectorShuffle %394 %394 2 3 
                                       f32_2 %396 = OpFAdd %392 %395 
                                                      OpStore %188 %396 
                         read_only Texture2D %397 = OpLoad %109 
                                     sampler %398 = OpLoad %113 
                  read_only Texture2DSampled %399 = OpSampledImage %397 %398 
                                       f32_2 %400 = OpLoad %188 
                                       f32_4 %401 = OpImageSampleImplicitLod %399 %400 
                                       f32_2 %402 = OpVectorShuffle %401 %401 0 3 
                                                      OpStore %188 %402 
                                Private f32* %403 = OpAccessChain %188 %52 
                                         f32 %404 = OpLoad %403 
                                Uniform f32* %405 = OpAccessChain %27 %122 %52 
                                         f32 %406 = OpLoad %405 
                                         f32 %407 = OpFMul %404 %406 
                                                      OpStore %339 %407 
                                Private f32* %408 = OpAccessChain %188 %128 
                                         f32 %409 = OpLoad %408 
                                         f32 %410 = OpLoad %339 
                                         f32 %411 = OpFMul %409 %410 
                                Private f32* %412 = OpAccessChain %345 %52 
                                                      OpStore %412 %411 
                                Private f32* %413 = OpAccessChain %40 %52 
                                         f32 %414 = OpLoad %413 
                                Uniform f32* %415 = OpAccessChain %27 %122 %52 
                                         f32 %416 = OpLoad %415 
                                         f32 %417 = OpFMul %414 %416 
                                Private f32* %418 = OpAccessChain %40 %52 
                                                      OpStore %418 %417 
                                Private f32* %419 = OpAccessChain %40 %81 
                                         f32 %420 = OpLoad %419 
                                Private f32* %421 = OpAccessChain %40 %52 
                                         f32 %422 = OpLoad %421 
                                         f32 %423 = OpFMul %420 %422 
                                Private f32* %424 = OpAccessChain %345 %69 
                                                      OpStore %424 %423 
                                         f32 %425 = OpLoad %298 
                                       f32_3 %426 = OpCompositeConstruct %425 %425 %425 
                                       f32_3 %427 = OpLoad %345 
                                       f32_3 %428 = OpFMul %426 %427 
                                                      OpStore %345 %428 
                                       f32_3 %429 = OpLoad %9 
                                       f32_3 %430 = OpLoad %345 
                                       f32_3 %431 = OpFMul %429 %430 
                                                      OpStore %345 %431 
                                       f32_3 %432 = OpLoad %345 
                              Uniform f32_4* %433 = OpAccessChain %27 %29 
                                       f32_4 %434 = OpLoad %433 
                                       f32_3 %435 = OpVectorShuffle %434 %434 0 0 0 
                                       f32_3 %436 = OpFMul %432 %435 
                                       f32_3 %437 = OpLoad %127 
                                       f32_3 %438 = OpFAdd %436 %437 
                                                      OpStore %127 %438 
                                       f32_2 %439 = OpLoad %96 
                                       f32_2 %442 = OpFMul %439 %441 
                                       f32_2 %443 = OpLoad vs_TEXCOORD0 
                                       f32_2 %444 = OpFAdd %442 %443 
                                       f32_4 %445 = OpLoad %40 
                                       f32_4 %446 = OpVectorShuffle %445 %444 4 1 2 5 
                                                      OpStore %40 %446 
                                       f32_2 %447 = OpLoad %96 
                                       f32_2 %450 = OpFMul %447 %449 
                                       f32_2 %451 = OpLoad vs_TEXCOORD0 
                                       f32_2 %452 = OpFAdd %450 %451 
                                       f32_4 %453 = OpLoad %40 
                                       f32_4 %454 = OpVectorShuffle %453 %452 0 4 5 3 
                                                      OpStore %40 %454 
                                       f32_4 %455 = OpLoad %40 
                                       f32_4 %456 = OpExtInst %1 10 %455 
                                                      OpStore %40 %456 
                                       f32_4 %457 = OpLoad %40 
                                       f32_2 %458 = OpVectorShuffle %457 %457 0 3 
                                       f32_2 %459 = OpFNegate %458 
                                       f32_2 %460 = OpFAdd %459 %16 
                                                      OpStore %188 %460 
                                       f32_2 %461 = OpLoad %188 
                                       f32_2 %462 = OpLoad %188 
                                         f32 %463 = OpDot %461 %462 
                                                      OpStore %298 %463 
                                         f32 %464 = OpLoad %298 
                                         f32 %465 = OpExtInst %1 31 %464 
                                                      OpStore %298 %465 
                                         f32 %466 = OpLoad %298 
                                         f32 %467 = OpFNegate %466 
                                         f32 %468 = OpFMul %467 %62 
                                         f32 %469 = OpFAdd %468 %64 
                                                      OpStore %298 %469 
                                         f32 %470 = OpLoad %298 
                                Uniform f32* %471 = OpAccessChain %27 %29 %69 
                                         f32 %472 = OpLoad %471 
                                         f32 %473 = OpFMul %470 %472 
                                                      OpStore %298 %473 
                                         f32 %474 = OpLoad %298 
                                         f32 %475 = OpExtInst %1 30 %474 
                                                      OpStore %298 %475 
                                         f32 %476 = OpLoad %298 
                                Uniform f32* %477 = OpAccessChain %27 %29 %81 
                                         f32 %478 = OpLoad %477 
                                         f32 %479 = OpFMul %476 %478 
                                                      OpStore %298 %479 
                                         f32 %480 = OpLoad %298 
                                         f32 %481 = OpExtInst %1 29 %480 
                                                      OpStore %298 %481 
                                         f32 %482 = OpLoad %298 
                                         f32 %483 = OpLoad %298 
                                         f32 %484 = OpFMul %482 %483 
                                                      OpStore %298 %484 
                                       f32_4 %485 = OpLoad %40 
                                       f32_2 %486 = OpVectorShuffle %485 %485 0 3 
                              Uniform f32_4* %487 = OpAccessChain %27 %98 
                                       f32_4 %488 = OpLoad %487 
                                       f32_2 %489 = OpVectorShuffle %488 %488 0 1 
                                       f32_2 %490 = OpFMul %486 %489 
                              Uniform f32_4* %491 = OpAccessChain %27 %98 
                                       f32_4 %492 = OpLoad %491 
                                       f32_2 %493 = OpVectorShuffle %492 %492 2 3 
                                       f32_2 %494 = OpFAdd %490 %493 
                                                      OpStore %188 %494 
                         read_only Texture2D %495 = OpLoad %109 
                                     sampler %496 = OpLoad %113 
                  read_only Texture2DSampled %497 = OpSampledImage %495 %496 
                                       f32_2 %498 = OpLoad %188 
                                       f32_4 %499 = OpImageSampleImplicitLod %497 %498 
                                       f32_2 %500 = OpVectorShuffle %499 %499 1 3 
                                                      OpStore %188 %500 
                                Private f32* %501 = OpAccessChain %188 %52 
                                         f32 %502 = OpLoad %501 
                                Uniform f32* %503 = OpAccessChain %27 %122 %52 
                                         f32 %504 = OpLoad %503 
                                         f32 %505 = OpFMul %502 %504 
                                                      OpStore %339 %505 
                                Private f32* %506 = OpAccessChain %188 %128 
                                         f32 %507 = OpLoad %506 
                                         f32 %508 = OpLoad %339 
                                         f32 %509 = OpFMul %507 %508 
                                Private f32* %510 = OpAccessChain %345 %128 
                                                      OpStore %510 %509 
                                       f32_2 %511 = OpLoad %165 
                                       f32_4 %512 = OpLoad %170 
                                       f32_2 %513 = OpVectorShuffle %512 %512 0 1 
                                       f32_2 %514 = OpFMul %511 %513 
                                       f32_4 %515 = OpLoad %40 
                                       f32_2 %516 = OpVectorShuffle %515 %515 0 3 
                                       f32_2 %517 = OpFAdd %514 %516 
                                                      OpStore %188 %517 
                                       f32_2 %518 = OpLoad %165 
                                       f32_4 %519 = OpLoad %220 
                                       f32_2 %520 = OpVectorShuffle %519 %519 0 1 
                                       f32_2 %521 = OpFMul %518 %520 
                                       f32_4 %522 = OpLoad %40 
                                       f32_2 %523 = OpVectorShuffle %522 %522 0 3 
                                       f32_2 %524 = OpFAdd %521 %523 
                                       f32_4 %525 = OpLoad %40 
                                       f32_4 %526 = OpVectorShuffle %525 %524 4 1 2 5 
                                                      OpStore %40 %526 
                                       f32_4 %527 = OpLoad %40 
                                       f32_2 %528 = OpVectorShuffle %527 %527 0 3 
                              Uniform f32_4* %529 = OpAccessChain %27 %98 
                                       f32_4 %530 = OpLoad %529 
                                       f32_2 %531 = OpVectorShuffle %530 %530 0 1 
                                       f32_2 %532 = OpFMul %528 %531 
                              Uniform f32_4* %533 = OpAccessChain %27 %98 
                                       f32_4 %534 = OpLoad %533 
                                       f32_2 %535 = OpVectorShuffle %534 %534 2 3 
                                       f32_2 %536 = OpFAdd %532 %535 
                                       f32_4 %537 = OpLoad %40 
                                       f32_4 %538 = OpVectorShuffle %537 %536 4 1 2 5 
                                                      OpStore %40 %538 
                         read_only Texture2D %539 = OpLoad %109 
                                     sampler %540 = OpLoad %113 
                  read_only Texture2DSampled %541 = OpSampledImage %539 %540 
                                       f32_4 %542 = OpLoad %40 
                                       f32_2 %543 = OpVectorShuffle %542 %542 0 3 
                                       f32_4 %544 = OpImageSampleImplicitLod %541 %543 
                                       f32_2 %545 = OpVectorShuffle %544 %544 2 3 
                                       f32_4 %546 = OpLoad %40 
                                       f32_4 %547 = OpVectorShuffle %546 %545 4 1 2 5 
                                                      OpStore %40 %547 
                                       f32_2 %548 = OpLoad %188 
                              Uniform f32_4* %549 = OpAccessChain %27 %98 
                                       f32_4 %550 = OpLoad %549 
                                       f32_2 %551 = OpVectorShuffle %550 %550 0 1 
                                       f32_2 %552 = OpFMul %548 %551 
                              Uniform f32_4* %553 = OpAccessChain %27 %98 
                                       f32_4 %554 = OpLoad %553 
                                       f32_2 %555 = OpVectorShuffle %554 %554 2 3 
                                       f32_2 %556 = OpFAdd %552 %555 
                                                      OpStore %188 %556 
                         read_only Texture2D %557 = OpLoad %109 
                                     sampler %558 = OpLoad %113 
                  read_only Texture2DSampled %559 = OpSampledImage %557 %558 
                                       f32_2 %560 = OpLoad %188 
                                       f32_4 %561 = OpImageSampleImplicitLod %559 %560 
                                       f32_2 %562 = OpVectorShuffle %561 %561 0 3 
                                                      OpStore %188 %562 
                                Private f32* %563 = OpAccessChain %188 %52 
                                         f32 %564 = OpLoad %563 
                                Uniform f32* %565 = OpAccessChain %27 %122 %52 
                                         f32 %566 = OpLoad %565 
                                         f32 %567 = OpFMul %564 %566 
                                                      OpStore %339 %567 
                                Private f32* %568 = OpAccessChain %188 %128 
                                         f32 %569 = OpLoad %568 
                                         f32 %570 = OpLoad %339 
                                         f32 %571 = OpFMul %569 %570 
                                Private f32* %572 = OpAccessChain %345 %52 
                                                      OpStore %572 %571 
                                Private f32* %573 = OpAccessChain %40 %52 
                                         f32 %574 = OpLoad %573 
                                Uniform f32* %575 = OpAccessChain %27 %122 %52 
                                         f32 %576 = OpLoad %575 
                                         f32 %577 = OpFMul %574 %576 
                                Private f32* %578 = OpAccessChain %40 %52 
                                                      OpStore %578 %577 
                                Private f32* %579 = OpAccessChain %40 %81 
                                         f32 %580 = OpLoad %579 
                                Private f32* %581 = OpAccessChain %40 %52 
                                         f32 %582 = OpLoad %581 
                                         f32 %583 = OpFMul %580 %582 
                                Private f32* %584 = OpAccessChain %345 %69 
                                                      OpStore %584 %583 
                                         f32 %585 = OpLoad %298 
                                       f32_3 %586 = OpCompositeConstruct %585 %585 %585 
                                       f32_3 %587 = OpLoad %345 
                                       f32_3 %588 = OpFMul %586 %587 
                                                      OpStore %345 %588 
                                       f32_3 %589 = OpLoad %9 
                                       f32_3 %590 = OpLoad %345 
                                       f32_3 %591 = OpFMul %589 %590 
                                                      OpStore %345 %591 
                                       f32_3 %592 = OpLoad %345 
                              Uniform f32_4* %593 = OpAccessChain %27 %29 
                                       f32_4 %594 = OpLoad %593 
                                       f32_3 %595 = OpVectorShuffle %594 %594 0 0 0 
                                       f32_3 %596 = OpFMul %592 %595 
                                       f32_3 %597 = OpLoad %127 
                                       f32_3 %598 = OpFAdd %596 %597 
                                                      OpStore %127 %598 
                                       f32_4 %599 = OpLoad %40 
                                       f32_2 %600 = OpVectorShuffle %599 %599 1 2 
                                       f32_2 %601 = OpFNegate %600 
                                       f32_2 %602 = OpFAdd %601 %16 
                                       f32_4 %603 = OpLoad %40 
                                       f32_4 %604 = OpVectorShuffle %603 %602 4 1 2 5 
                                                      OpStore %40 %604 
                                       f32_4 %605 = OpLoad %40 
                                       f32_2 %606 = OpVectorShuffle %605 %605 0 3 
                                       f32_4 %607 = OpLoad %40 
                                       f32_2 %608 = OpVectorShuffle %607 %607 0 3 
                                         f32 %609 = OpDot %606 %608 
                                                      OpStore %298 %609 
                                         f32 %610 = OpLoad %298 
                                         f32 %611 = OpExtInst %1 31 %610 
                                                      OpStore %298 %611 
                                         f32 %612 = OpLoad %298 
                                         f32 %613 = OpFNegate %612 
                                         f32 %614 = OpFMul %613 %62 
                                         f32 %615 = OpFAdd %614 %64 
                                                      OpStore %298 %615 
                                         f32 %616 = OpLoad %298 
                                Uniform f32* %617 = OpAccessChain %27 %29 %69 
                                         f32 %618 = OpLoad %617 
                                         f32 %619 = OpFMul %616 %618 
                                                      OpStore %298 %619 
                                         f32 %620 = OpLoad %298 
                                         f32 %621 = OpExtInst %1 30 %620 
                                                      OpStore %298 %621 
                                         f32 %622 = OpLoad %298 
                                Uniform f32* %623 = OpAccessChain %27 %29 %81 
                                         f32 %624 = OpLoad %623 
                                         f32 %625 = OpFMul %622 %624 
                                                      OpStore %298 %625 
                                         f32 %626 = OpLoad %298 
                                         f32 %627 = OpExtInst %1 29 %626 
                                                      OpStore %298 %627 
                                         f32 %628 = OpLoad %298 
                                         f32 %629 = OpLoad %298 
                                         f32 %630 = OpFMul %628 %629 
                                                      OpStore %298 %630 
                                       f32_4 %631 = OpLoad %40 
                                       f32_2 %632 = OpVectorShuffle %631 %631 1 2 
                              Uniform f32_4* %633 = OpAccessChain %27 %98 
                                       f32_4 %634 = OpLoad %633 
                                       f32_2 %635 = OpVectorShuffle %634 %634 0 1 
                                       f32_2 %636 = OpFMul %632 %635 
                              Uniform f32_4* %637 = OpAccessChain %27 %98 
                                       f32_4 %638 = OpLoad %637 
                                       f32_2 %639 = OpVectorShuffle %638 %638 2 3 
                                       f32_2 %640 = OpFAdd %636 %639 
                                       f32_4 %641 = OpLoad %40 
                                       f32_4 %642 = OpVectorShuffle %641 %640 4 1 2 5 
                                                      OpStore %40 %642 
                         read_only Texture2D %643 = OpLoad %109 
                                     sampler %644 = OpLoad %113 
                  read_only Texture2DSampled %645 = OpSampledImage %643 %644 
                                       f32_4 %646 = OpLoad %40 
                                       f32_2 %647 = OpVectorShuffle %646 %646 0 3 
                                       f32_4 %648 = OpImageSampleImplicitLod %645 %647 
                                       f32_2 %649 = OpVectorShuffle %648 %648 1 3 
                                       f32_4 %650 = OpLoad %40 
                                       f32_4 %651 = OpVectorShuffle %650 %649 4 1 2 5 
                                                      OpStore %40 %651 
                                Private f32* %652 = OpAccessChain %40 %52 
                                         f32 %653 = OpLoad %652 
                                Uniform f32* %654 = OpAccessChain %27 %122 %52 
                                         f32 %655 = OpLoad %654 
                                         f32 %656 = OpFMul %653 %655 
                                Private f32* %657 = OpAccessChain %40 %52 
                                                      OpStore %657 %656 
                                Private f32* %658 = OpAccessChain %40 %81 
                                         f32 %659 = OpLoad %658 
                                Private f32* %660 = OpAccessChain %40 %52 
                                         f32 %661 = OpLoad %660 
                                         f32 %662 = OpFMul %659 %661 
                                Private f32* %663 = OpAccessChain %345 %128 
                                                      OpStore %663 %662 
                                       f32_2 %664 = OpLoad %165 
                                       f32_4 %665 = OpLoad %170 
                                       f32_2 %666 = OpVectorShuffle %665 %665 0 1 
                                       f32_2 %667 = OpFMul %664 %666 
                                       f32_4 %668 = OpLoad %40 
                                       f32_2 %669 = OpVectorShuffle %668 %668 1 2 
                                       f32_2 %670 = OpFAdd %667 %669 
                                       f32_4 %671 = OpLoad %40 
                                       f32_4 %672 = OpVectorShuffle %671 %670 4 1 2 5 
                                                      OpStore %40 %672 
                                       f32_2 %673 = OpLoad %165 
                                       f32_4 %674 = OpLoad %220 
                                       f32_2 %675 = OpVectorShuffle %674 %674 0 1 
                                       f32_2 %676 = OpFMul %673 %675 
                                       f32_4 %677 = OpLoad %40 
                                       f32_2 %678 = OpVectorShuffle %677 %677 1 2 
                                       f32_2 %679 = OpFAdd %676 %678 
                                                      OpStore %96 %679 
                                       f32_2 %680 = OpLoad %96 
                              Uniform f32_4* %681 = OpAccessChain %27 %98 
                                       f32_4 %682 = OpLoad %681 
                                       f32_2 %683 = OpVectorShuffle %682 %682 0 1 
                                       f32_2 %684 = OpFMul %680 %683 
                              Uniform f32_4* %685 = OpAccessChain %27 %98 
                                       f32_4 %686 = OpLoad %685 
                                       f32_2 %687 = OpVectorShuffle %686 %686 2 3 
                                       f32_2 %688 = OpFAdd %684 %687 
                                                      OpStore %96 %688 
                         read_only Texture2D %689 = OpLoad %109 
                                     sampler %690 = OpLoad %113 
                  read_only Texture2DSampled %691 = OpSampledImage %689 %690 
                                       f32_2 %692 = OpLoad %96 
                                       f32_4 %693 = OpImageSampleImplicitLod %691 %692 
                                       f32_2 %694 = OpVectorShuffle %693 %693 2 3 
                                                      OpStore %96 %694 
                                       f32_4 %695 = OpLoad %40 
                                       f32_2 %696 = OpVectorShuffle %695 %695 0 3 
                              Uniform f32_4* %697 = OpAccessChain %27 %98 
                                       f32_4 %698 = OpLoad %697 
                                       f32_2 %699 = OpVectorShuffle %698 %698 0 1 
                                       f32_2 %700 = OpFMul %696 %699 
                              Uniform f32_4* %701 = OpAccessChain %27 %98 
                                       f32_4 %702 = OpLoad %701 
                                       f32_2 %703 = OpVectorShuffle %702 %702 2 3 
                                       f32_2 %704 = OpFAdd %700 %703 
                                       f32_4 %705 = OpLoad %40 
                                       f32_4 %706 = OpVectorShuffle %705 %704 4 1 2 5 
                                                      OpStore %40 %706 
                         read_only Texture2D %707 = OpLoad %109 
                                     sampler %708 = OpLoad %113 
                  read_only Texture2DSampled %709 = OpSampledImage %707 %708 
                                       f32_4 %710 = OpLoad %40 
                                       f32_2 %711 = OpVectorShuffle %710 %710 0 3 
                                       f32_4 %712 = OpImageSampleImplicitLod %709 %711 
                                       f32_2 %713 = OpVectorShuffle %712 %712 0 3 
                                       f32_4 %714 = OpLoad %40 
                                       f32_4 %715 = OpVectorShuffle %714 %713 4 1 2 5 
                                                      OpStore %40 %715 
                                Private f32* %716 = OpAccessChain %40 %52 
                                         f32 %717 = OpLoad %716 
                                Uniform f32* %718 = OpAccessChain %27 %122 %52 
                                         f32 %719 = OpLoad %718 
                                         f32 %720 = OpFMul %717 %719 
                                Private f32* %721 = OpAccessChain %40 %52 
                                                      OpStore %721 %720 
                                Private f32* %722 = OpAccessChain %40 %81 
                                         f32 %723 = OpLoad %722 
                                Private f32* %724 = OpAccessChain %40 %52 
                                         f32 %725 = OpLoad %724 
                                         f32 %726 = OpFMul %723 %725 
                                Private f32* %727 = OpAccessChain %345 %52 
                                                      OpStore %727 %726 
                                Private f32* %728 = OpAccessChain %96 %52 
                                         f32 %729 = OpLoad %728 
                                Uniform f32* %730 = OpAccessChain %27 %122 %52 
                                         f32 %731 = OpLoad %730 
                                         f32 %732 = OpFMul %729 %731 
                                Private f32* %733 = OpAccessChain %40 %52 
                                                      OpStore %733 %732 
                                Private f32* %734 = OpAccessChain %96 %128 
                                         f32 %735 = OpLoad %734 
                                Private f32* %736 = OpAccessChain %40 %52 
                                         f32 %737 = OpLoad %736 
                                         f32 %738 = OpFMul %735 %737 
                                Private f32* %739 = OpAccessChain %345 %69 
                                                      OpStore %739 %738 
                                         f32 %740 = OpLoad %298 
                                       f32_3 %741 = OpCompositeConstruct %740 %740 %740 
                                       f32_3 %742 = OpLoad %345 
                                       f32_3 %743 = OpFMul %741 %742 
                                       f32_4 %744 = OpLoad %40 
                                       f32_4 %745 = OpVectorShuffle %744 %743 4 5 6 3 
                                                      OpStore %40 %745 
                                       f32_3 %746 = OpLoad %9 
                                       f32_4 %747 = OpLoad %40 
                                       f32_3 %748 = OpVectorShuffle %747 %747 0 1 2 
                                       f32_3 %749 = OpFMul %746 %748 
                                       f32_4 %750 = OpLoad %40 
                                       f32_4 %751 = OpVectorShuffle %750 %749 4 5 6 3 
                                                      OpStore %40 %751 
                                       f32_4 %752 = OpLoad %40 
                                       f32_3 %753 = OpVectorShuffle %752 %752 0 1 2 
                              Uniform f32_4* %754 = OpAccessChain %27 %29 
                                       f32_4 %755 = OpLoad %754 
                                       f32_3 %756 = OpVectorShuffle %755 %755 0 0 0 
                                       f32_3 %757 = OpFMul %753 %756 
                                       f32_3 %758 = OpLoad %127 
                                       f32_3 %759 = OpFAdd %757 %758 
                                       f32_4 %760 = OpLoad %40 
                                       f32_4 %761 = OpVectorShuffle %760 %759 4 5 6 3 
                                                      OpStore %40 %761 
                                       f32_2 %762 = OpLoad %165 
                              Uniform f32_4* %764 = OpAccessChain %27 %763 
                                       f32_4 %765 = OpLoad %764 
                                       f32_2 %766 = OpVectorShuffle %765 %765 1 1 
                                       f32_2 %767 = OpFMul %762 %766 
                                       f32_2 %768 = OpLoad vs_TEXCOORD0 
                                       f32_2 %769 = OpFAdd %767 %768 
                                       f32_3 %770 = OpLoad %127 
                                       f32_3 %771 = OpVectorShuffle %770 %769 3 4 2 
                                                      OpStore %127 %771 
                                       f32_3 %772 = OpLoad %127 
                                       f32_2 %773 = OpVectorShuffle %772 %772 0 1 
                                       f32_2 %774 = OpExtInst %1 10 %773 
                                       f32_3 %775 = OpLoad %127 
                                       f32_3 %776 = OpVectorShuffle %775 %774 3 4 2 
                                                      OpStore %127 %776 
                                       f32_2 %778 = OpLoad %165 
                                       f32_4 %779 = OpLoad %170 
                                       f32_2 %780 = OpVectorShuffle %779 %779 2 3 
                                       f32_2 %781 = OpFMul %778 %780 
                                       f32_3 %782 = OpLoad %127 
                                       f32_2 %783 = OpVectorShuffle %782 %782 0 1 
                                       f32_2 %784 = OpFAdd %781 %783 
                                                      OpStore %777 %784 
                                       f32_2 %785 = OpLoad %165 
                                       f32_4 %786 = OpLoad %220 
                                       f32_2 %787 = OpVectorShuffle %786 %786 2 3 
                                       f32_2 %788 = OpFMul %785 %787 
                                       f32_3 %789 = OpLoad %127 
                                       f32_2 %790 = OpVectorShuffle %789 %789 0 1 
                                       f32_2 %791 = OpFAdd %788 %790 
                                                      OpStore %165 %791 
                                       f32_2 %792 = OpLoad %165 
                              Uniform f32_4* %793 = OpAccessChain %27 %98 
                                       f32_4 %794 = OpLoad %793 
                                       f32_2 %795 = OpVectorShuffle %794 %794 0 1 
                                       f32_2 %796 = OpFMul %792 %795 
                              Uniform f32_4* %797 = OpAccessChain %27 %98 
                                       f32_4 %798 = OpLoad %797 
                                       f32_2 %799 = OpVectorShuffle %798 %798 2 3 
                                       f32_2 %800 = OpFAdd %796 %799 
                                                      OpStore %165 %800 
                         read_only Texture2D %801 = OpLoad %109 
                                     sampler %802 = OpLoad %113 
                  read_only Texture2DSampled %803 = OpSampledImage %801 %802 
                                       f32_2 %804 = OpLoad %165 
                                       f32_4 %805 = OpImageSampleImplicitLod %803 %804 
                                       f32_2 %806 = OpVectorShuffle %805 %805 2 3 
                                                      OpStore %165 %806 
                                       f32_2 %807 = OpLoad %777 
                              Uniform f32_4* %808 = OpAccessChain %27 %98 
                                       f32_4 %809 = OpLoad %808 
                                       f32_2 %810 = OpVectorShuffle %809 %809 0 1 
                                       f32_2 %811 = OpFMul %807 %810 
                              Uniform f32_4* %812 = OpAccessChain %27 %98 
                                       f32_4 %813 = OpLoad %812 
                                       f32_2 %814 = OpVectorShuffle %813 %813 2 3 
                                       f32_2 %815 = OpFAdd %811 %814 
                                                      OpStore %777 %815 
                         read_only Texture2D %816 = OpLoad %109 
                                     sampler %817 = OpLoad %113 
                  read_only Texture2DSampled %818 = OpSampledImage %816 %817 
                                       f32_2 %819 = OpLoad %777 
                                       f32_4 %820 = OpImageSampleImplicitLod %818 %819 
                                       f32_2 %821 = OpVectorShuffle %820 %820 0 3 
                                                      OpStore %777 %821 
                                Private f32* %822 = OpAccessChain %777 %52 
                                         f32 %823 = OpLoad %822 
                                Uniform f32* %824 = OpAccessChain %27 %122 %52 
                                         f32 %825 = OpLoad %824 
                                         f32 %826 = OpFMul %823 %825 
                                                      OpStore %298 %826 
                                Private f32* %827 = OpAccessChain %777 %128 
                                         f32 %828 = OpLoad %827 
                                         f32 %829 = OpLoad %298 
                                         f32 %830 = OpFMul %828 %829 
                                Private f32* %831 = OpAccessChain %170 %52 
                                                      OpStore %831 %830 
                                Private f32* %832 = OpAccessChain %165 %52 
                                         f32 %833 = OpLoad %832 
                                Uniform f32* %834 = OpAccessChain %27 %122 %52 
                                         f32 %835 = OpLoad %834 
                                         f32 %836 = OpFMul %833 %835 
                                                      OpStore %298 %836 
                                Private f32* %837 = OpAccessChain %165 %128 
                                         f32 %838 = OpLoad %837 
                                         f32 %839 = OpLoad %298 
                                         f32 %840 = OpFMul %838 %839 
                                Private f32* %841 = OpAccessChain %170 %69 
                                                      OpStore %841 %840 
                                       f32_3 %842 = OpLoad %127 
                                       f32_2 %843 = OpVectorShuffle %842 %842 0 1 
                                       f32_2 %844 = OpFNegate %843 
                                       f32_2 %845 = OpFAdd %844 %16 
                                                      OpStore %777 %845 
                                       f32_3 %846 = OpLoad %127 
                                       f32_2 %847 = OpVectorShuffle %846 %846 0 1 
                              Uniform f32_4* %848 = OpAccessChain %27 %98 
                                       f32_4 %849 = OpLoad %848 
                                       f32_2 %850 = OpVectorShuffle %849 %849 0 1 
                                       f32_2 %851 = OpFMul %847 %850 
                              Uniform f32_4* %852 = OpAccessChain %27 %98 
                                       f32_4 %853 = OpLoad %852 
                                       f32_2 %854 = OpVectorShuffle %853 %853 2 3 
                                       f32_2 %855 = OpFAdd %851 %854 
                                       f32_3 %856 = OpLoad %127 
                                       f32_3 %857 = OpVectorShuffle %856 %855 3 4 2 
                                                      OpStore %127 %857 
                         read_only Texture2D %858 = OpLoad %109 
                                     sampler %859 = OpLoad %113 
                  read_only Texture2DSampled %860 = OpSampledImage %858 %859 
                                       f32_3 %861 = OpLoad %127 
                                       f32_2 %862 = OpVectorShuffle %861 %861 0 1 
                                       f32_4 %863 = OpImageSampleImplicitLod %860 %862 
                                       f32_2 %864 = OpVectorShuffle %863 %863 1 3 
                                       f32_3 %865 = OpLoad %127 
                                       f32_3 %866 = OpVectorShuffle %865 %864 3 4 2 
                                                      OpStore %127 %866 
                                       f32_2 %867 = OpLoad %777 
                                       f32_2 %868 = OpLoad %777 
                                         f32 %869 = OpDot %867 %868 
                                                      OpStore %298 %869 
                                         f32 %870 = OpLoad %298 
                                         f32 %871 = OpExtInst %1 31 %870 
                                                      OpStore %298 %871 
                                         f32 %872 = OpLoad %298 
                                         f32 %873 = OpFNegate %872 
                                         f32 %874 = OpFMul %873 %62 
                                         f32 %875 = OpFAdd %874 %64 
                                                      OpStore %298 %875 
                                         f32 %876 = OpLoad %298 
                                Uniform f32* %877 = OpAccessChain %27 %763 %69 
                                         f32 %878 = OpLoad %877 
                                         f32 %879 = OpFMul %876 %878 
                                                      OpStore %298 %879 
                                         f32 %880 = OpLoad %298 
                                         f32 %881 = OpExtInst %1 30 %880 
                                                      OpStore %298 %881 
                                         f32 %882 = OpLoad %298 
                                Uniform f32* %883 = OpAccessChain %27 %763 %81 
                                         f32 %884 = OpLoad %883 
                                         f32 %885 = OpFMul %882 %884 
                                                      OpStore %298 %885 
                                         f32 %886 = OpLoad %298 
                                         f32 %887 = OpExtInst %1 29 %886 
                                                      OpStore %298 %887 
                                Private f32* %888 = OpAccessChain %127 %52 
                                         f32 %889 = OpLoad %888 
                                Uniform f32* %890 = OpAccessChain %27 %122 %52 
                                         f32 %891 = OpLoad %890 
                                         f32 %892 = OpFMul %889 %891 
                                                      OpStore %159 %892 
                                Private f32* %893 = OpAccessChain %127 %128 
                                         f32 %894 = OpLoad %893 
                                         f32 %895 = OpLoad %159 
                                         f32 %896 = OpFMul %894 %895 
                                Private f32* %897 = OpAccessChain %170 %128 
                                                      OpStore %897 %896 
                                         f32 %898 = OpLoad %298 
                                       f32_3 %899 = OpCompositeConstruct %898 %898 %898 
                                       f32_4 %900 = OpLoad %170 
                                       f32_3 %901 = OpVectorShuffle %900 %900 0 1 2 
                                       f32_3 %902 = OpFMul %899 %901 
                                                      OpStore %127 %902 
                                       f32_3 %903 = OpLoad %127 
                              Uniform f32_4* %904 = OpAccessChain %27 %763 
                                       f32_4 %905 = OpLoad %904 
                                       f32_3 %906 = OpVectorShuffle %905 %905 0 0 0 
                                       f32_3 %907 = OpFMul %903 %906 
                                                      OpStore %127 %907 
                                       f32_3 %908 = OpLoad %127 
                                       f32_3 %909 = OpLoad %9 
                                       f32_3 %910 = OpFMul %908 %909 
                                       f32_4 %911 = OpLoad %40 
                                       f32_3 %912 = OpVectorShuffle %911 %911 0 1 2 
                                       f32_3 %913 = OpFAdd %910 %912 
                                                      OpStore %9 %913 
                                       f32_3 %914 = OpLoad %9 
                              Uniform f32_4* %915 = OpAccessChain %27 %122 
                                       f32_4 %916 = OpLoad %915 
                                       f32_3 %917 = OpVectorShuffle %916 %916 1 1 1 
                                       f32_3 %918 = OpFMul %914 %917 
                                                      OpStore %9 %918 
                                Private f32* %919 = OpAccessChain %9 %128 
                                         f32 %920 = OpLoad %919 
                                Private f32* %921 = OpAccessChain %9 %52 
                                         f32 %922 = OpLoad %921 
                                         f32 %923 = OpExtInst %1 40 %920 %922 
                                                      OpStore %298 %923 
                                Private f32* %924 = OpAccessChain %9 %69 
                                         f32 %925 = OpLoad %924 
                                         f32 %927 = OpExtInst %1 40 %925 %926 
                                Private f32* %928 = OpAccessChain %40 %52 
                                                      OpStore %928 %927 
                                         f32 %929 = OpLoad %298 
                                Private f32* %930 = OpAccessChain %40 %52 
                                         f32 %931 = OpLoad %930 
                                         f32 %932 = OpExtInst %1 40 %929 %931 
                                                      OpStore %298 %932 
                                         f32 %933 = OpLoad %298 
                                         f32 %934 = OpExtInst %1 37 %933 %64 
                                                      OpStore %298 %934 
                                         f32 %935 = OpLoad %298 
                                         f32 %937 = OpFMul %935 %936 
                                                      OpStore %298 %937 
                                         f32 %938 = OpLoad %298 
                                         f32 %939 = OpExtInst %1 9 %938 
                                                      OpStore %298 %939 
                                         f32 %940 = OpLoad %298 
                                         f32 %942 = OpFMul %940 %941 
                                                      OpStore %298 %942 
                                       f32_3 %945 = OpLoad %9 
                                         f32 %946 = OpLoad %298 
                                       f32_3 %947 = OpCompositeConstruct %946 %946 %946 
                                       f32_3 %948 = OpFDiv %945 %947 
                                       f32_4 %949 = OpLoad %944 
                                       f32_4 %950 = OpVectorShuffle %949 %948 4 5 6 3 
                                                      OpStore %944 %950 
                                         f32 %951 = OpLoad %298 
                                 Output f32* %953 = OpAccessChain %944 %81 
                                                      OpStore %953 %951 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "AB_HIGH_PRECISION" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "AB_HIGH_PRECISION" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in  vec4 in_POSITION0;
in  vec2 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _LensFlareGhostsParams;
uniform 	vec4 _LensFlareHaloParams;
uniform 	float _LensFlareGhostChrDistortion;
uniform 	float _LensFlareHaloChrDistortion;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _MainTex_TexelSize;
UNITY_LOCATION(0) uniform  sampler2D _LensFlareLUT;
UNITY_LOCATION(1) uniform  sampler2D _MainTex;
in  vec2 vs_TEXCOORD0;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
vec4 u_xlat6;
vec4 u_xlat7;
vec2 u_xlat9;
vec2 u_xlat16;
vec2 u_xlat18;
vec2 u_xlat19;
float u_xlat24;
float u_xlat25;
void main()
{
    u_xlat0.xy = (-vs_TEXCOORD0.xy) + vec2(0.5, 0.5);
    u_xlat16.xy = u_xlat0.xy * _LensFlareGhostsParams.yy + vs_TEXCOORD0.xy;
    u_xlat16.xy = fract(u_xlat16.xy);
    u_xlat1.xy = (-u_xlat16.xy) + vec2(0.5, 0.5);
    u_xlat1.x = dot(u_xlat1.xy, u_xlat1.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlat1.x = (-u_xlat1.x) * 1.41419995 + 1.0;
    u_xlat1.x = u_xlat1.x * _LensFlareGhostsParams.z;
    u_xlat1.x = log2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _LensFlareGhostsParams.w;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat9.xy = u_xlat16.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat2 = texture(_MainTex, u_xlat9.xy);
    u_xlat9.xy = u_xlat0.xy * _LensFlareGhostsParams.yy;
    u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * 1.41419995;
    u_xlat0.x = fract(u_xlat0.x);
    u_xlat25 = dot(u_xlat9.xy, u_xlat9.xy);
    u_xlat25 = inversesqrt(u_xlat25);
    u_xlat3.xy = vec2(u_xlat25) * u_xlat9.xy;
    u_xlat4 = vec4(_LensFlareGhostChrDistortion, _LensFlareGhostChrDistortion, _LensFlareHaloChrDistortion, _LensFlareHaloChrDistortion) * (-_MainTex_TexelSize.xxxx);
    u_xlat19.xy = u_xlat3.xy * u_xlat4.xy + u_xlat16.xy;
    u_xlat19.xy = u_xlat19.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat5 = texture(_MainTex, u_xlat19.xy);
    u_xlat2.x = u_xlat5.x;
    u_xlat5 = vec4(_LensFlareGhostChrDistortion, _LensFlareGhostChrDistortion, _LensFlareHaloChrDistortion, _LensFlareHaloChrDistortion) * _MainTex_TexelSize.xxxx;
    u_xlat16.xy = u_xlat3.xy * u_xlat5.xy + u_xlat16.xy;
    u_xlat16.xy = u_xlat16.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat6 = texture(_MainTex, u_xlat16.xy);
    u_xlat2.z = u_xlat6.z;
    u_xlat2.xyz = u_xlat1.xxx * u_xlat2.xyz;
    u_xlat0.y = 0.0;
    u_xlat0 = texture(_LensFlareLUT, u_xlat0.xy);
    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz * _LensFlareGhostsParams.xxx;
    u_xlat1.xw = fract(vs_TEXCOORD0.xy);
    u_xlat19.xy = (-u_xlat1.xw) + vec2(0.5, 0.5);
    u_xlat24 = dot(u_xlat19.xy, u_xlat19.xy);
    u_xlat24 = sqrt(u_xlat24);
    u_xlat24 = (-u_xlat24) * 1.41419995 + 1.0;
    u_xlat24 = u_xlat24 * _LensFlareGhostsParams.z;
    u_xlat24 = log2(u_xlat24);
    u_xlat24 = u_xlat24 * _LensFlareGhostsParams.w;
    u_xlat24 = exp2(u_xlat24);
    u_xlat24 = u_xlat24 * u_xlat24;
    u_xlat19.xy = u_xlat1.xw * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat6 = texture(_MainTex, u_xlat19.xy);
    u_xlat19.xy = u_xlat3.xy * u_xlat4.xy + u_xlat1.xw;
    u_xlat1.xw = u_xlat3.xy * u_xlat5.xy + u_xlat1.xw;
    u_xlat1.xw = u_xlat1.xw * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat7 = texture(_MainTex, u_xlat1.xw);
    u_xlat6.z = u_xlat7.z;
    u_xlat1.xw = u_xlat19.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat7 = texture(_MainTex, u_xlat1.xw);
    u_xlat6.x = u_xlat7.x;
    u_xlat6.xyz = vec3(u_xlat24) * u_xlat6.xyz;
    u_xlat6.xyz = u_xlat0.xyz * u_xlat6.xyz;
    u_xlat2.xyz = u_xlat6.xyz * _LensFlareGhostsParams.xxx + u_xlat2.xyz;
    u_xlat1.xw = u_xlat9.xy * vec2(2.0, 2.0) + vs_TEXCOORD0.xy;
    u_xlat1.yz = u_xlat9.xy * vec2(3.0, 3.0) + vs_TEXCOORD0.xy;
    u_xlat1 = fract(u_xlat1);
    u_xlat19.xy = (-u_xlat1.xw) + vec2(0.5, 0.5);
    u_xlat24 = dot(u_xlat19.xy, u_xlat19.xy);
    u_xlat24 = sqrt(u_xlat24);
    u_xlat24 = (-u_xlat24) * 1.41419995 + 1.0;
    u_xlat24 = u_xlat24 * _LensFlareGhostsParams.z;
    u_xlat24 = log2(u_xlat24);
    u_xlat24 = u_xlat24 * _LensFlareGhostsParams.w;
    u_xlat24 = exp2(u_xlat24);
    u_xlat24 = u_xlat24 * u_xlat24;
    u_xlat19.xy = u_xlat1.xw * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat6 = texture(_MainTex, u_xlat19.xy);
    u_xlat19.xy = u_xlat3.xy * u_xlat4.xy + u_xlat1.xw;
    u_xlat1.xw = u_xlat3.xy * u_xlat5.xy + u_xlat1.xw;
    u_xlat1.xw = u_xlat1.xw * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat7 = texture(_MainTex, u_xlat1.xw);
    u_xlat6.z = u_xlat7.z;
    u_xlat1.xw = u_xlat19.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat7 = texture(_MainTex, u_xlat1.xw);
    u_xlat6.x = u_xlat7.x;
    u_xlat6.xyz = vec3(u_xlat24) * u_xlat6.xyz;
    u_xlat6.xyz = u_xlat0.xyz * u_xlat6.xyz;
    u_xlat2.xyz = u_xlat6.xyz * _LensFlareGhostsParams.xxx + u_xlat2.xyz;
    u_xlat1.xw = (-u_xlat1.yz) + vec2(0.5, 0.5);
    u_xlat24 = dot(u_xlat1.xw, u_xlat1.xw);
    u_xlat24 = sqrt(u_xlat24);
    u_xlat24 = (-u_xlat24) * 1.41419995 + 1.0;
    u_xlat24 = u_xlat24 * _LensFlareGhostsParams.z;
    u_xlat24 = log2(u_xlat24);
    u_xlat24 = u_xlat24 * _LensFlareGhostsParams.w;
    u_xlat24 = exp2(u_xlat24);
    u_xlat24 = u_xlat24 * u_xlat24;
    u_xlat1.xw = u_xlat1.yz * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat6 = texture(_MainTex, u_xlat1.xw);
    u_xlat1.xw = u_xlat3.xy * u_xlat4.xy + u_xlat1.yz;
    u_xlat9.xy = u_xlat3.xy * u_xlat5.xy + u_xlat1.yz;
    u_xlat9.xy = u_xlat9.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat7 = texture(_MainTex, u_xlat9.xy);
    u_xlat6.z = u_xlat7.z;
    u_xlat1.xy = u_xlat1.xw * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1 = texture(_MainTex, u_xlat1.xy);
    u_xlat6.x = u_xlat1.x;
    u_xlat1.xyz = vec3(u_xlat24) * u_xlat6.xyz;
    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _LensFlareGhostsParams.xxx + u_xlat2.xyz;
    u_xlat2.xy = u_xlat3.xy * _LensFlareHaloParams.yy + vs_TEXCOORD0.xy;
    u_xlat2.xy = fract(u_xlat2.xy);
    u_xlat18.xy = u_xlat3.xy * u_xlat4.zw + u_xlat2.xy;
    u_xlat3.xy = u_xlat3.xy * u_xlat5.zw + u_xlat2.xy;
    u_xlat3.xy = u_xlat3.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat3 = texture(_MainTex, u_xlat3.xy);
    u_xlat18.xy = u_xlat18.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat4 = texture(_MainTex, u_xlat18.xy);
    u_xlat3.x = u_xlat4.x;
    u_xlat18.xy = (-u_xlat2.xy) + vec2(0.5, 0.5);
    u_xlat2.xy = u_xlat2.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat4 = texture(_MainTex, u_xlat2.xy);
    u_xlat3.y = u_xlat4.y;
    u_xlat24 = dot(u_xlat18.xy, u_xlat18.xy);
    u_xlat24 = sqrt(u_xlat24);
    u_xlat24 = (-u_xlat24) * 1.41419995 + 1.0;
    u_xlat24 = u_xlat24 * _LensFlareHaloParams.z;
    u_xlat24 = log2(u_xlat24);
    u_xlat24 = u_xlat24 * _LensFlareHaloParams.w;
    u_xlat24 = exp2(u_xlat24);
    u_xlat2.xyz = vec3(u_xlat24) * u_xlat3.xyz;
    u_xlat2.xyz = u_xlat2.xyz * _LensFlareHaloParams.xxx;
    SV_Target0.xyz = u_xlat2.xyz * u_xlat0.xyz + u_xlat1.xyz;
    SV_Target0.w = 0.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "AB_HIGH_PRECISION" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 94
; Schema: 0
                                              OpCapability Shader 
                                       %1 = OpExtInstImport "GLSL.std.450" 
                                              OpMemoryModel Logical GLSL450 
                                              OpEntryPoint Vertex %4 "main" %11 %72 %84 %86 
                                              OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                              OpDecorate %11 Location 11 
                                              OpDecorate %16 ArrayStride 16 
                                              OpDecorate %17 ArrayStride 17 
                                              OpMemberDecorate %18 0 Offset 18 
                                              OpMemberDecorate %18 1 Offset 18 
                                              OpDecorate %18 Block 
                                              OpDecorate %20 DescriptorSet 20 
                                              OpDecorate %20 Binding 20 
                                              OpMemberDecorate %70 0 BuiltIn 70 
                                              OpMemberDecorate %70 1 BuiltIn 70 
                                              OpMemberDecorate %70 2 BuiltIn 70 
                                              OpDecorate %70 Block 
                                              OpDecorate vs_TEXCOORD0 Location 84 
                                              OpDecorate %86 Location 86 
                                       %2 = OpTypeVoid 
                                       %3 = OpTypeFunction %2 
                                       %6 = OpTypeFloat 32 
                                       %7 = OpTypeVector %6 4 
                                       %8 = OpTypePointer Private %7 
                        Private f32_4* %9 = OpVariable Private 
                                      %10 = OpTypePointer Input %7 
                         Input f32_4* %11 = OpVariable Input 
                                      %14 = OpTypeInt 32 0 
                                  u32 %15 = OpConstant 4 
                                      %16 = OpTypeArray %7 %15 
                                      %17 = OpTypeArray %7 %15 
                                      %18 = OpTypeStruct %16 %17 
                                      %19 = OpTypePointer Uniform %18 
Uniform struct {f32_4[4]; f32_4[4];}* %20 = OpVariable Uniform 
                                      %21 = OpTypeInt 32 1 
                                  i32 %22 = OpConstant 0 
                                  i32 %23 = OpConstant 1 
                                      %24 = OpTypePointer Uniform %7 
                                  i32 %35 = OpConstant 2 
                                  i32 %44 = OpConstant 3 
                       Private f32_4* %48 = OpVariable Private 
                                  u32 %68 = OpConstant 1 
                                      %69 = OpTypeArray %6 %68 
                                      %70 = OpTypeStruct %7 %6 %69 
                                      %71 = OpTypePointer Output %70 
 Output struct {f32_4; f32; f32[1];}* %72 = OpVariable Output 
                                      %80 = OpTypePointer Output %7 
                                      %82 = OpTypeVector %6 2 
                                      %83 = OpTypePointer Output %82 
               Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                      %85 = OpTypePointer Input %82 
                         Input f32_2* %86 = OpVariable Input 
                                      %88 = OpTypePointer Output %6 
                                  void %4 = OpFunction None %3 
                                       %5 = OpLabel 
                                f32_4 %12 = OpLoad %11 
                                f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                       Uniform f32_4* %25 = OpAccessChain %20 %22 %23 
                                f32_4 %26 = OpLoad %25 
                                f32_4 %27 = OpFMul %13 %26 
                                              OpStore %9 %27 
                       Uniform f32_4* %28 = OpAccessChain %20 %22 %22 
                                f32_4 %29 = OpLoad %28 
                                f32_4 %30 = OpLoad %11 
                                f32_4 %31 = OpVectorShuffle %30 %30 0 0 0 0 
                                f32_4 %32 = OpFMul %29 %31 
                                f32_4 %33 = OpLoad %9 
                                f32_4 %34 = OpFAdd %32 %33 
                                              OpStore %9 %34 
                       Uniform f32_4* %36 = OpAccessChain %20 %22 %35 
                                f32_4 %37 = OpLoad %36 
                                f32_4 %38 = OpLoad %11 
                                f32_4 %39 = OpVectorShuffle %38 %38 2 2 2 2 
                                f32_4 %40 = OpFMul %37 %39 
                                f32_4 %41 = OpLoad %9 
                                f32_4 %42 = OpFAdd %40 %41 
                                              OpStore %9 %42 
                                f32_4 %43 = OpLoad %9 
                       Uniform f32_4* %45 = OpAccessChain %20 %22 %44 
                                f32_4 %46 = OpLoad %45 
                                f32_4 %47 = OpFAdd %43 %46 
                                              OpStore %9 %47 
                                f32_4 %49 = OpLoad %9 
                                f32_4 %50 = OpVectorShuffle %49 %49 1 1 1 1 
                       Uniform f32_4* %51 = OpAccessChain %20 %23 %23 
                                f32_4 %52 = OpLoad %51 
                                f32_4 %53 = OpFMul %50 %52 
                                              OpStore %48 %53 
                       Uniform f32_4* %54 = OpAccessChain %20 %23 %22 
                                f32_4 %55 = OpLoad %54 
                                f32_4 %56 = OpLoad %9 
                                f32_4 %57 = OpVectorShuffle %56 %56 0 0 0 0 
                                f32_4 %58 = OpFMul %55 %57 
                                f32_4 %59 = OpLoad %48 
                                f32_4 %60 = OpFAdd %58 %59 
                                              OpStore %48 %60 
                       Uniform f32_4* %61 = OpAccessChain %20 %23 %35 
                                f32_4 %62 = OpLoad %61 
                                f32_4 %63 = OpLoad %9 
                                f32_4 %64 = OpVectorShuffle %63 %63 2 2 2 2 
                                f32_4 %65 = OpFMul %62 %64 
                                f32_4 %66 = OpLoad %48 
                                f32_4 %67 = OpFAdd %65 %66 
                                              OpStore %48 %67 
                       Uniform f32_4* %73 = OpAccessChain %20 %23 %44 
                                f32_4 %74 = OpLoad %73 
                                f32_4 %75 = OpLoad %9 
                                f32_4 %76 = OpVectorShuffle %75 %75 3 3 3 3 
                                f32_4 %77 = OpFMul %74 %76 
                                f32_4 %78 = OpLoad %48 
                                f32_4 %79 = OpFAdd %77 %78 
                        Output f32_4* %81 = OpAccessChain %72 %22 
                                              OpStore %81 %79 
                                f32_2 %87 = OpLoad %86 
                                              OpStore vs_TEXCOORD0 %87 
                          Output f32* %89 = OpAccessChain %72 %22 %68 
                                  f32 %90 = OpLoad %89 
                                  f32 %91 = OpFNegate %90 
                          Output f32* %92 = OpAccessChain %72 %22 %68 
                                              OpStore %92 %91 
                                              OpReturn
                                              OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 792
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %12 %781 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpDecorate vs_TEXCOORD0 Location 12 
                                                      OpMemberDecorate %25 0 Offset 25 
                                                      OpMemberDecorate %25 1 Offset 25 
                                                      OpMemberDecorate %25 2 Offset 25 
                                                      OpMemberDecorate %25 3 Offset 25 
                                                      OpMemberDecorate %25 4 Offset 25 
                                                      OpMemberDecorate %25 5 Offset 25 
                                                      OpDecorate %25 Block 
                                                      OpDecorate %27 DescriptorSet 27 
                                                      OpDecorate %27 Binding 27 
                                                      OpDecorate %110 DescriptorSet 110 
                                                      OpDecorate %110 Binding 110 
                                                      OpDecorate %114 DescriptorSet 114 
                                                      OpDecorate %114 Binding 114 
                                                      OpDecorate %256 DescriptorSet 256 
                                                      OpDecorate %256 Binding 256 
                                                      OpDecorate %258 DescriptorSet 258 
                                                      OpDecorate %258 Binding 258 
                                                      OpDecorate %781 Location 781 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 3 
                                               %8 = OpTypePointer Private %7 
                                Private f32_3* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 2 
                                              %11 = OpTypePointer Input %10 
                        Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                          f32 %15 = OpConstant 3.674022E-40 
                                        f32_2 %16 = OpConstantComposite %15 %15 
                                              %20 = OpTypePointer Private %10 
                               Private f32_2* %21 = OpVariable Private 
                                              %24 = OpTypeVector %6 4 
                                              %25 = OpTypeStruct %24 %24 %6 %6 %24 %24 
                                              %26 = OpTypePointer Uniform %25 
Uniform struct {f32_4; f32_4; f32; f32; f32_4; f32_4;}* %27 = OpVariable Uniform 
                                              %28 = OpTypeInt 32 1 
                                          i32 %29 = OpConstant 0 
                                              %30 = OpTypePointer Uniform %24 
                               Private f32_3* %39 = OpVariable Private 
                                              %50 = OpTypeInt 32 0 
                                          u32 %51 = OpConstant 0 
                                              %52 = OpTypePointer Private %6 
                                          f32 %61 = OpConstant 3.674022E-40 
                                          f32 %63 = OpConstant 3.674022E-40 
                                          u32 %68 = OpConstant 2 
                                              %69 = OpTypePointer Uniform %6 
                                          u32 %80 = OpConstant 3 
                               Private f32_3* %95 = OpVariable Private 
                                          i32 %97 = OpConstant 4 
                                             %108 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                             %109 = OpTypePointer UniformConstant %108 
        UniformConstant read_only Texture2D* %110 = OpVariable UniformConstant 
                                             %112 = OpTypeSampler 
                                             %113 = OpTypePointer UniformConstant %112 
                    UniformConstant sampler* %114 = OpVariable UniformConstant 
                                             %116 = OpTypeSampledImage %108 
                                         u32 %121 = OpConstant 1 
                              Private f32_3* %124 = OpVariable Private 
                              Private f32_2* %151 = OpVariable Private 
                                             %167 = OpTypePointer Private %24 
                              Private f32_4* %168 = OpVariable Private 
                                         i32 %169 = OpConstant 2 
                                         i32 %174 = OpConstant 3 
                                         i32 %180 = OpConstant 5 
                              Private f32_4* %186 = OpVariable Private 
                                         f32 %254 = OpConstant 3.674022E-40 
        UniformConstant read_only Texture2D* %256 = OpVariable UniformConstant 
                    UniformConstant sampler* %258 = OpVariable UniformConstant 
                              Private f32_3* %273 = OpVariable Private 
                              Private f32_2* %278 = OpVariable Private 
                                Private f32* %283 = OpVariable Private 
                              Private f32_3* %318 = OpVariable Private 
                                         f32 %397 = OpConstant 3.674022E-40 
                                       f32_2 %398 = OpConstantComposite %397 %397 
                                         f32 %406 = OpConstant 3.674022E-40 
                                       f32_2 %407 = OpConstantComposite %406 %406 
                                         i32 %662 = OpConstant 1 
                                             %780 = OpTypePointer Output %24 
                               Output f32_4* %781 = OpVariable Output 
                                             %789 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_2 %13 = OpLoad vs_TEXCOORD0 
                                        f32_2 %14 = OpFNegate %13 
                                        f32_2 %17 = OpFAdd %14 %16 
                                        f32_3 %18 = OpLoad %9 
                                        f32_3 %19 = OpVectorShuffle %18 %17 3 4 2 
                                                      OpStore %9 %19 
                                        f32_3 %22 = OpLoad %9 
                                        f32_2 %23 = OpVectorShuffle %22 %22 0 1 
                               Uniform f32_4* %31 = OpAccessChain %27 %29 
                                        f32_4 %32 = OpLoad %31 
                                        f32_2 %33 = OpVectorShuffle %32 %32 1 1 
                                        f32_2 %34 = OpFMul %23 %33 
                                        f32_2 %35 = OpLoad vs_TEXCOORD0 
                                        f32_2 %36 = OpFAdd %34 %35 
                                                      OpStore %21 %36 
                                        f32_2 %37 = OpLoad %21 
                                        f32_2 %38 = OpExtInst %1 10 %37 
                                                      OpStore %21 %38 
                                        f32_2 %40 = OpLoad %21 
                                        f32_2 %41 = OpFNegate %40 
                                        f32_2 %42 = OpFAdd %41 %16 
                                        f32_3 %43 = OpLoad %39 
                                        f32_3 %44 = OpVectorShuffle %43 %42 3 4 2 
                                                      OpStore %39 %44 
                                        f32_3 %45 = OpLoad %39 
                                        f32_2 %46 = OpVectorShuffle %45 %45 0 1 
                                        f32_3 %47 = OpLoad %39 
                                        f32_2 %48 = OpVectorShuffle %47 %47 0 1 
                                          f32 %49 = OpDot %46 %48 
                                 Private f32* %53 = OpAccessChain %39 %51 
                                                      OpStore %53 %49 
                                 Private f32* %54 = OpAccessChain %39 %51 
                                          f32 %55 = OpLoad %54 
                                          f32 %56 = OpExtInst %1 31 %55 
                                 Private f32* %57 = OpAccessChain %39 %51 
                                                      OpStore %57 %56 
                                 Private f32* %58 = OpAccessChain %39 %51 
                                          f32 %59 = OpLoad %58 
                                          f32 %60 = OpFNegate %59 
                                          f32 %62 = OpFMul %60 %61 
                                          f32 %64 = OpFAdd %62 %63 
                                 Private f32* %65 = OpAccessChain %39 %51 
                                                      OpStore %65 %64 
                                 Private f32* %66 = OpAccessChain %39 %51 
                                          f32 %67 = OpLoad %66 
                                 Uniform f32* %70 = OpAccessChain %27 %29 %68 
                                          f32 %71 = OpLoad %70 
                                          f32 %72 = OpFMul %67 %71 
                                 Private f32* %73 = OpAccessChain %39 %51 
                                                      OpStore %73 %72 
                                 Private f32* %74 = OpAccessChain %39 %51 
                                          f32 %75 = OpLoad %74 
                                          f32 %76 = OpExtInst %1 30 %75 
                                 Private f32* %77 = OpAccessChain %39 %51 
                                                      OpStore %77 %76 
                                 Private f32* %78 = OpAccessChain %39 %51 
                                          f32 %79 = OpLoad %78 
                                 Uniform f32* %81 = OpAccessChain %27 %29 %80 
                                          f32 %82 = OpLoad %81 
                                          f32 %83 = OpFMul %79 %82 
                                 Private f32* %84 = OpAccessChain %39 %51 
                                                      OpStore %84 %83 
                                 Private f32* %85 = OpAccessChain %39 %51 
                                          f32 %86 = OpLoad %85 
                                          f32 %87 = OpExtInst %1 29 %86 
                                 Private f32* %88 = OpAccessChain %39 %51 
                                                      OpStore %88 %87 
                                 Private f32* %89 = OpAccessChain %39 %51 
                                          f32 %90 = OpLoad %89 
                                 Private f32* %91 = OpAccessChain %39 %51 
                                          f32 %92 = OpLoad %91 
                                          f32 %93 = OpFMul %90 %92 
                                 Private f32* %94 = OpAccessChain %39 %51 
                                                      OpStore %94 %93 
                                        f32_2 %96 = OpLoad %21 
                               Uniform f32_4* %98 = OpAccessChain %27 %97 
                                        f32_4 %99 = OpLoad %98 
                                       f32_2 %100 = OpVectorShuffle %99 %99 0 1 
                                       f32_2 %101 = OpFMul %96 %100 
                              Uniform f32_4* %102 = OpAccessChain %27 %97 
                                       f32_4 %103 = OpLoad %102 
                                       f32_2 %104 = OpVectorShuffle %103 %103 2 3 
                                       f32_2 %105 = OpFAdd %101 %104 
                                       f32_3 %106 = OpLoad %95 
                                       f32_3 %107 = OpVectorShuffle %106 %105 3 4 2 
                                                      OpStore %95 %107 
                         read_only Texture2D %111 = OpLoad %110 
                                     sampler %115 = OpLoad %114 
                  read_only Texture2DSampled %117 = OpSampledImage %111 %115 
                                       f32_3 %118 = OpLoad %95 
                                       f32_2 %119 = OpVectorShuffle %118 %118 0 1 
                                       f32_4 %120 = OpImageSampleImplicitLod %117 %119 
                                         f32 %122 = OpCompositeExtract %120 1 
                                Private f32* %123 = OpAccessChain %95 %121 
                                                      OpStore %123 %122 
                                       f32_3 %125 = OpLoad %9 
                                       f32_2 %126 = OpVectorShuffle %125 %125 0 1 
                              Uniform f32_4* %127 = OpAccessChain %27 %29 
                                       f32_4 %128 = OpLoad %127 
                                       f32_2 %129 = OpVectorShuffle %128 %128 1 1 
                                       f32_2 %130 = OpFMul %126 %129 
                                       f32_3 %131 = OpLoad %124 
                                       f32_3 %132 = OpVectorShuffle %131 %130 3 4 2 
                                                      OpStore %124 %132 
                                       f32_3 %133 = OpLoad %9 
                                       f32_2 %134 = OpVectorShuffle %133 %133 0 1 
                                       f32_3 %135 = OpLoad %9 
                                       f32_2 %136 = OpVectorShuffle %135 %135 0 1 
                                         f32 %137 = OpDot %134 %136 
                                Private f32* %138 = OpAccessChain %9 %51 
                                                      OpStore %138 %137 
                                Private f32* %139 = OpAccessChain %9 %51 
                                         f32 %140 = OpLoad %139 
                                         f32 %141 = OpExtInst %1 31 %140 
                                Private f32* %142 = OpAccessChain %9 %51 
                                                      OpStore %142 %141 
                                Private f32* %143 = OpAccessChain %9 %51 
                                         f32 %144 = OpLoad %143 
                                         f32 %145 = OpFMul %144 %61 
                                Private f32* %146 = OpAccessChain %9 %51 
                                                      OpStore %146 %145 
                                Private f32* %147 = OpAccessChain %9 %51 
                                         f32 %148 = OpLoad %147 
                                         f32 %149 = OpExtInst %1 10 %148 
                                Private f32* %150 = OpAccessChain %9 %51 
                                                      OpStore %150 %149 
                                       f32_3 %152 = OpLoad %124 
                                       f32_2 %153 = OpVectorShuffle %152 %152 0 1 
                                       f32_3 %154 = OpLoad %124 
                                       f32_2 %155 = OpVectorShuffle %154 %154 0 1 
                                         f32 %156 = OpDot %153 %155 
                                Private f32* %157 = OpAccessChain %151 %51 
                                                      OpStore %157 %156 
                                Private f32* %158 = OpAccessChain %151 %51 
                                         f32 %159 = OpLoad %158 
                                         f32 %160 = OpExtInst %1 32 %159 
                                Private f32* %161 = OpAccessChain %151 %51 
                                                      OpStore %161 %160 
                                       f32_2 %162 = OpLoad %151 
                                       f32_2 %163 = OpVectorShuffle %162 %162 0 0 
                                       f32_3 %164 = OpLoad %124 
                                       f32_2 %165 = OpVectorShuffle %164 %164 0 1 
                                       f32_2 %166 = OpFMul %163 %165 
                                                      OpStore %151 %166 
                                Uniform f32* %170 = OpAccessChain %27 %169 
                                         f32 %171 = OpLoad %170 
                                Uniform f32* %172 = OpAccessChain %27 %169 
                                         f32 %173 = OpLoad %172 
                                Uniform f32* %175 = OpAccessChain %27 %174 
                                         f32 %176 = OpLoad %175 
                                Uniform f32* %177 = OpAccessChain %27 %174 
                                         f32 %178 = OpLoad %177 
                                       f32_4 %179 = OpCompositeConstruct %171 %173 %176 %178 
                              Uniform f32_4* %181 = OpAccessChain %27 %180 
                                       f32_4 %182 = OpLoad %181 
                                       f32_4 %183 = OpVectorShuffle %182 %182 0 0 0 0 
                                       f32_4 %184 = OpFNegate %183 
                                       f32_4 %185 = OpFMul %179 %184 
                                                      OpStore %168 %185 
                                       f32_2 %187 = OpLoad %151 
                                       f32_4 %188 = OpLoad %168 
                                       f32_2 %189 = OpVectorShuffle %188 %188 0 1 
                                       f32_2 %190 = OpFMul %187 %189 
                                       f32_2 %191 = OpLoad %21 
                                       f32_2 %192 = OpFAdd %190 %191 
                                       f32_4 %193 = OpLoad %186 
                                       f32_4 %194 = OpVectorShuffle %193 %192 4 5 2 3 
                                                      OpStore %186 %194 
                                       f32_4 %195 = OpLoad %186 
                                       f32_2 %196 = OpVectorShuffle %195 %195 0 1 
                              Uniform f32_4* %197 = OpAccessChain %27 %97 
                                       f32_4 %198 = OpLoad %197 
                                       f32_2 %199 = OpVectorShuffle %198 %198 0 1 
                                       f32_2 %200 = OpFMul %196 %199 
                              Uniform f32_4* %201 = OpAccessChain %27 %97 
                                       f32_4 %202 = OpLoad %201 
                                       f32_2 %203 = OpVectorShuffle %202 %202 2 3 
                                       f32_2 %204 = OpFAdd %200 %203 
                                       f32_4 %205 = OpLoad %186 
                                       f32_4 %206 = OpVectorShuffle %205 %204 4 5 2 3 
                                                      OpStore %186 %206 
                         read_only Texture2D %207 = OpLoad %110 
                                     sampler %208 = OpLoad %114 
                  read_only Texture2DSampled %209 = OpSampledImage %207 %208 
                                       f32_4 %210 = OpLoad %186 
                                       f32_2 %211 = OpVectorShuffle %210 %210 0 1 
                                       f32_4 %212 = OpImageSampleImplicitLod %209 %211 
                                         f32 %213 = OpCompositeExtract %212 0 
                                Private f32* %214 = OpAccessChain %95 %51 
                                                      OpStore %214 %213 
                                Uniform f32* %215 = OpAccessChain %27 %169 
                                         f32 %216 = OpLoad %215 
                                Uniform f32* %217 = OpAccessChain %27 %169 
                                         f32 %218 = OpLoad %217 
                                Uniform f32* %219 = OpAccessChain %27 %174 
                                         f32 %220 = OpLoad %219 
                                Uniform f32* %221 = OpAccessChain %27 %174 
                                         f32 %222 = OpLoad %221 
                                       f32_4 %223 = OpCompositeConstruct %216 %218 %220 %222 
                              Uniform f32_4* %224 = OpAccessChain %27 %180 
                                       f32_4 %225 = OpLoad %224 
                                       f32_4 %226 = OpVectorShuffle %225 %225 0 0 0 0 
                                       f32_4 %227 = OpFMul %223 %226 
                                                      OpStore %186 %227 
                                       f32_2 %228 = OpLoad %151 
                                       f32_4 %229 = OpLoad %186 
                                       f32_2 %230 = OpVectorShuffle %229 %229 0 1 
                                       f32_2 %231 = OpFMul %228 %230 
                                       f32_2 %232 = OpLoad %21 
                                       f32_2 %233 = OpFAdd %231 %232 
                                                      OpStore %21 %233 
                                       f32_2 %234 = OpLoad %21 
                              Uniform f32_4* %235 = OpAccessChain %27 %97 
                                       f32_4 %236 = OpLoad %235 
                                       f32_2 %237 = OpVectorShuffle %236 %236 0 1 
                                       f32_2 %238 = OpFMul %234 %237 
                              Uniform f32_4* %239 = OpAccessChain %27 %97 
                                       f32_4 %240 = OpLoad %239 
                                       f32_2 %241 = OpVectorShuffle %240 %240 2 3 
                                       f32_2 %242 = OpFAdd %238 %241 
                                                      OpStore %21 %242 
                         read_only Texture2D %243 = OpLoad %110 
                                     sampler %244 = OpLoad %114 
                  read_only Texture2DSampled %245 = OpSampledImage %243 %244 
                                       f32_2 %246 = OpLoad %21 
                                       f32_4 %247 = OpImageSampleImplicitLod %245 %246 
                                         f32 %248 = OpCompositeExtract %247 2 
                                Private f32* %249 = OpAccessChain %95 %68 
                                                      OpStore %249 %248 
                                       f32_3 %250 = OpLoad %39 
                                       f32_3 %251 = OpVectorShuffle %250 %250 0 0 0 
                                       f32_3 %252 = OpLoad %95 
                                       f32_3 %253 = OpFMul %251 %252 
                                                      OpStore %39 %253 
                                Private f32* %255 = OpAccessChain %9 %121 
                                                      OpStore %255 %254 
                         read_only Texture2D %257 = OpLoad %256 
                                     sampler %259 = OpLoad %258 
                  read_only Texture2DSampled %260 = OpSampledImage %257 %259 
                                       f32_3 %261 = OpLoad %9 
                                       f32_2 %262 = OpVectorShuffle %261 %261 0 1 
                                       f32_4 %263 = OpImageSampleImplicitLod %260 %262 
                                       f32_3 %264 = OpVectorShuffle %263 %263 0 1 2 
                                                      OpStore %9 %264 
                                       f32_3 %265 = OpLoad %9 
                                       f32_3 %266 = OpLoad %39 
                                       f32_3 %267 = OpFMul %265 %266 
                                                      OpStore %39 %267 
                                       f32_3 %268 = OpLoad %39 
                              Uniform f32_4* %269 = OpAccessChain %27 %29 
                                       f32_4 %270 = OpLoad %269 
                                       f32_3 %271 = OpVectorShuffle %270 %270 0 0 0 
                                       f32_3 %272 = OpFMul %268 %271 
                                                      OpStore %39 %272 
                                       f32_2 %274 = OpLoad vs_TEXCOORD0 
                                       f32_2 %275 = OpExtInst %1 10 %274 
                                       f32_3 %276 = OpLoad %273 
                                       f32_3 %277 = OpVectorShuffle %276 %275 3 4 2 
                                                      OpStore %273 %277 
                                       f32_3 %279 = OpLoad %273 
                                       f32_2 %280 = OpVectorShuffle %279 %279 0 1 
                                       f32_2 %281 = OpFNegate %280 
                                       f32_2 %282 = OpFAdd %281 %16 
                                                      OpStore %278 %282 
                                       f32_2 %284 = OpLoad %278 
                                       f32_2 %285 = OpLoad %278 
                                         f32 %286 = OpDot %284 %285 
                                                      OpStore %283 %286 
                                         f32 %287 = OpLoad %283 
                                         f32 %288 = OpExtInst %1 31 %287 
                                                      OpStore %283 %288 
                                         f32 %289 = OpLoad %283 
                                         f32 %290 = OpFNegate %289 
                                         f32 %291 = OpFMul %290 %61 
                                         f32 %292 = OpFAdd %291 %63 
                                                      OpStore %283 %292 
                                         f32 %293 = OpLoad %283 
                                Uniform f32* %294 = OpAccessChain %27 %29 %68 
                                         f32 %295 = OpLoad %294 
                                         f32 %296 = OpFMul %293 %295 
                                                      OpStore %283 %296 
                                         f32 %297 = OpLoad %283 
                                         f32 %298 = OpExtInst %1 30 %297 
                                                      OpStore %283 %298 
                                         f32 %299 = OpLoad %283 
                                Uniform f32* %300 = OpAccessChain %27 %29 %80 
                                         f32 %301 = OpLoad %300 
                                         f32 %302 = OpFMul %299 %301 
                                                      OpStore %283 %302 
                                         f32 %303 = OpLoad %283 
                                         f32 %304 = OpExtInst %1 29 %303 
                                                      OpStore %283 %304 
                                         f32 %305 = OpLoad %283 
                                         f32 %306 = OpLoad %283 
                                         f32 %307 = OpFMul %305 %306 
                                                      OpStore %283 %307 
                                       f32_3 %308 = OpLoad %273 
                                       f32_2 %309 = OpVectorShuffle %308 %308 0 1 
                              Uniform f32_4* %310 = OpAccessChain %27 %97 
                                       f32_4 %311 = OpLoad %310 
                                       f32_2 %312 = OpVectorShuffle %311 %311 0 1 
                                       f32_2 %313 = OpFMul %309 %312 
                              Uniform f32_4* %314 = OpAccessChain %27 %97 
                                       f32_4 %315 = OpLoad %314 
                                       f32_2 %316 = OpVectorShuffle %315 %315 2 3 
                                       f32_2 %317 = OpFAdd %313 %316 
                                                      OpStore %278 %317 
                         read_only Texture2D %319 = OpLoad %110 
                                     sampler %320 = OpLoad %114 
                  read_only Texture2DSampled %321 = OpSampledImage %319 %320 
                                       f32_2 %322 = OpLoad %278 
                                       f32_4 %323 = OpImageSampleImplicitLod %321 %322 
                                         f32 %324 = OpCompositeExtract %323 1 
                                Private f32* %325 = OpAccessChain %318 %121 
                                                      OpStore %325 %324 
                                       f32_2 %326 = OpLoad %151 
                                       f32_4 %327 = OpLoad %168 
                                       f32_2 %328 = OpVectorShuffle %327 %327 0 1 
                                       f32_2 %329 = OpFMul %326 %328 
                                       f32_3 %330 = OpLoad %273 
                                       f32_2 %331 = OpVectorShuffle %330 %330 0 1 
                                       f32_2 %332 = OpFAdd %329 %331 
                                                      OpStore %278 %332 
                                       f32_2 %333 = OpLoad %151 
                                       f32_4 %334 = OpLoad %186 
                                       f32_2 %335 = OpVectorShuffle %334 %334 0 1 
                                       f32_2 %336 = OpFMul %333 %335 
                                       f32_3 %337 = OpLoad %273 
                                       f32_2 %338 = OpVectorShuffle %337 %337 0 1 
                                       f32_2 %339 = OpFAdd %336 %338 
                                       f32_3 %340 = OpLoad %273 
                                       f32_3 %341 = OpVectorShuffle %340 %339 3 4 2 
                                                      OpStore %273 %341 
                                       f32_3 %342 = OpLoad %273 
                                       f32_2 %343 = OpVectorShuffle %342 %342 0 1 
                              Uniform f32_4* %344 = OpAccessChain %27 %97 
                                       f32_4 %345 = OpLoad %344 
                                       f32_2 %346 = OpVectorShuffle %345 %345 0 1 
                                       f32_2 %347 = OpFMul %343 %346 
                              Uniform f32_4* %348 = OpAccessChain %27 %97 
                                       f32_4 %349 = OpLoad %348 
                                       f32_2 %350 = OpVectorShuffle %349 %349 2 3 
                                       f32_2 %351 = OpFAdd %347 %350 
                                       f32_3 %352 = OpLoad %273 
                                       f32_3 %353 = OpVectorShuffle %352 %351 3 4 2 
                                                      OpStore %273 %353 
                         read_only Texture2D %354 = OpLoad %110 
                                     sampler %355 = OpLoad %114 
                  read_only Texture2DSampled %356 = OpSampledImage %354 %355 
                                       f32_3 %357 = OpLoad %273 
                                       f32_2 %358 = OpVectorShuffle %357 %357 0 1 
                                       f32_4 %359 = OpImageSampleImplicitLod %356 %358 
                                         f32 %360 = OpCompositeExtract %359 2 
                                Private f32* %361 = OpAccessChain %318 %68 
                                                      OpStore %361 %360 
                                       f32_2 %362 = OpLoad %278 
                              Uniform f32_4* %363 = OpAccessChain %27 %97 
                                       f32_4 %364 = OpLoad %363 
                                       f32_2 %365 = OpVectorShuffle %364 %364 0 1 
                                       f32_2 %366 = OpFMul %362 %365 
                              Uniform f32_4* %367 = OpAccessChain %27 %97 
                                       f32_4 %368 = OpLoad %367 
                                       f32_2 %369 = OpVectorShuffle %368 %368 2 3 
                                       f32_2 %370 = OpFAdd %366 %369 
                                       f32_3 %371 = OpLoad %273 
                                       f32_3 %372 = OpVectorShuffle %371 %370 3 4 2 
                                                      OpStore %273 %372 
                         read_only Texture2D %373 = OpLoad %110 
                                     sampler %374 = OpLoad %114 
                  read_only Texture2DSampled %375 = OpSampledImage %373 %374 
                                       f32_3 %376 = OpLoad %273 
                                       f32_2 %377 = OpVectorShuffle %376 %376 0 1 
                                       f32_4 %378 = OpImageSampleImplicitLod %375 %377 
                                         f32 %379 = OpCompositeExtract %378 0 
                                Private f32* %380 = OpAccessChain %318 %51 
                                                      OpStore %380 %379 
                                         f32 %381 = OpLoad %283 
                                       f32_3 %382 = OpCompositeConstruct %381 %381 %381 
                                       f32_3 %383 = OpLoad %318 
                                       f32_3 %384 = OpFMul %382 %383 
                                                      OpStore %273 %384 
                                       f32_3 %385 = OpLoad %9 
                                       f32_3 %386 = OpLoad %273 
                                       f32_3 %387 = OpFMul %385 %386 
                                                      OpStore %273 %387 
                                       f32_3 %388 = OpLoad %273 
                              Uniform f32_4* %389 = OpAccessChain %27 %29 
                                       f32_4 %390 = OpLoad %389 
                                       f32_3 %391 = OpVectorShuffle %390 %390 0 0 0 
                                       f32_3 %392 = OpFMul %388 %391 
                                       f32_3 %393 = OpLoad %39 
                                       f32_3 %394 = OpFAdd %392 %393 
                                                      OpStore %39 %394 
                                       f32_3 %395 = OpLoad %124 
                                       f32_2 %396 = OpVectorShuffle %395 %395 0 1 
                                       f32_2 %399 = OpFMul %396 %398 
                                       f32_2 %400 = OpLoad vs_TEXCOORD0 
                                       f32_2 %401 = OpFAdd %399 %400 
                                       f32_3 %402 = OpLoad %273 
                                       f32_3 %403 = OpVectorShuffle %402 %401 3 4 2 
                                                      OpStore %273 %403 
                                       f32_3 %404 = OpLoad %124 
                                       f32_2 %405 = OpVectorShuffle %404 %404 0 1 
                                       f32_2 %408 = OpFMul %405 %407 
                                       f32_2 %409 = OpLoad vs_TEXCOORD0 
                                       f32_2 %410 = OpFAdd %408 %409 
                                       f32_3 %411 = OpLoad %124 
                                       f32_3 %412 = OpVectorShuffle %411 %410 3 4 2 
                                                      OpStore %124 %412 
                                       f32_3 %413 = OpLoad %124 
                                       f32_2 %414 = OpVectorShuffle %413 %413 0 1 
                                       f32_2 %415 = OpExtInst %1 10 %414 
                                       f32_3 %416 = OpLoad %124 
                                       f32_3 %417 = OpVectorShuffle %416 %415 3 4 2 
                                                      OpStore %124 %417 
                                       f32_3 %418 = OpLoad %273 
                                       f32_2 %419 = OpVectorShuffle %418 %418 0 1 
                                       f32_2 %420 = OpExtInst %1 10 %419 
                                       f32_3 %421 = OpLoad %273 
                                       f32_3 %422 = OpVectorShuffle %421 %420 3 4 2 
                                                      OpStore %273 %422 
                                       f32_3 %423 = OpLoad %273 
                                       f32_2 %424 = OpVectorShuffle %423 %423 0 1 
                                       f32_2 %425 = OpFNegate %424 
                                       f32_2 %426 = OpFAdd %425 %16 
                                                      OpStore %278 %426 
                                       f32_2 %427 = OpLoad %278 
                                       f32_2 %428 = OpLoad %278 
                                         f32 %429 = OpDot %427 %428 
                                                      OpStore %283 %429 
                                         f32 %430 = OpLoad %283 
                                         f32 %431 = OpExtInst %1 31 %430 
                                                      OpStore %283 %431 
                                         f32 %432 = OpLoad %283 
                                         f32 %433 = OpFNegate %432 
                                         f32 %434 = OpFMul %433 %61 
                                         f32 %435 = OpFAdd %434 %63 
                                                      OpStore %283 %435 
                                         f32 %436 = OpLoad %283 
                                Uniform f32* %437 = OpAccessChain %27 %29 %68 
                                         f32 %438 = OpLoad %437 
                                         f32 %439 = OpFMul %436 %438 
                                                      OpStore %283 %439 
                                         f32 %440 = OpLoad %283 
                                         f32 %441 = OpExtInst %1 30 %440 
                                                      OpStore %283 %441 
                                         f32 %442 = OpLoad %283 
                                Uniform f32* %443 = OpAccessChain %27 %29 %80 
                                         f32 %444 = OpLoad %443 
                                         f32 %445 = OpFMul %442 %444 
                                                      OpStore %283 %445 
                                         f32 %446 = OpLoad %283 
                                         f32 %447 = OpExtInst %1 29 %446 
                                                      OpStore %283 %447 
                                         f32 %448 = OpLoad %283 
                                         f32 %449 = OpLoad %283 
                                         f32 %450 = OpFMul %448 %449 
                                                      OpStore %283 %450 
                                       f32_3 %451 = OpLoad %273 
                                       f32_2 %452 = OpVectorShuffle %451 %451 0 1 
                              Uniform f32_4* %453 = OpAccessChain %27 %97 
                                       f32_4 %454 = OpLoad %453 
                                       f32_2 %455 = OpVectorShuffle %454 %454 0 1 
                                       f32_2 %456 = OpFMul %452 %455 
                              Uniform f32_4* %457 = OpAccessChain %27 %97 
                                       f32_4 %458 = OpLoad %457 
                                       f32_2 %459 = OpVectorShuffle %458 %458 2 3 
                                       f32_2 %460 = OpFAdd %456 %459 
                                                      OpStore %278 %460 
                         read_only Texture2D %461 = OpLoad %110 
                                     sampler %462 = OpLoad %114 
                  read_only Texture2DSampled %463 = OpSampledImage %461 %462 
                                       f32_2 %464 = OpLoad %278 
                                       f32_4 %465 = OpImageSampleImplicitLod %463 %464 
                                         f32 %466 = OpCompositeExtract %465 1 
                                Private f32* %467 = OpAccessChain %318 %121 
                                                      OpStore %467 %466 
                                       f32_2 %468 = OpLoad %151 
                                       f32_4 %469 = OpLoad %168 
                                       f32_2 %470 = OpVectorShuffle %469 %469 0 1 
                                       f32_2 %471 = OpFMul %468 %470 
                                       f32_3 %472 = OpLoad %273 
                                       f32_2 %473 = OpVectorShuffle %472 %472 0 1 
                                       f32_2 %474 = OpFAdd %471 %473 
                                                      OpStore %278 %474 
                                       f32_2 %475 = OpLoad %151 
                                       f32_4 %476 = OpLoad %186 
                                       f32_2 %477 = OpVectorShuffle %476 %476 0 1 
                                       f32_2 %478 = OpFMul %475 %477 
                                       f32_3 %479 = OpLoad %273 
                                       f32_2 %480 = OpVectorShuffle %479 %479 0 1 
                                       f32_2 %481 = OpFAdd %478 %480 
                                       f32_3 %482 = OpLoad %273 
                                       f32_3 %483 = OpVectorShuffle %482 %481 3 4 2 
                                                      OpStore %273 %483 
                                       f32_3 %484 = OpLoad %273 
                                       f32_2 %485 = OpVectorShuffle %484 %484 0 1 
                              Uniform f32_4* %486 = OpAccessChain %27 %97 
                                       f32_4 %487 = OpLoad %486 
                                       f32_2 %488 = OpVectorShuffle %487 %487 0 1 
                                       f32_2 %489 = OpFMul %485 %488 
                              Uniform f32_4* %490 = OpAccessChain %27 %97 
                                       f32_4 %491 = OpLoad %490 
                                       f32_2 %492 = OpVectorShuffle %491 %491 2 3 
                                       f32_2 %493 = OpFAdd %489 %492 
                                       f32_3 %494 = OpLoad %273 
                                       f32_3 %495 = OpVectorShuffle %494 %493 3 4 2 
                                                      OpStore %273 %495 
                         read_only Texture2D %496 = OpLoad %110 
                                     sampler %497 = OpLoad %114 
                  read_only Texture2DSampled %498 = OpSampledImage %496 %497 
                                       f32_3 %499 = OpLoad %273 
                                       f32_2 %500 = OpVectorShuffle %499 %499 0 1 
                                       f32_4 %501 = OpImageSampleImplicitLod %498 %500 
                                         f32 %502 = OpCompositeExtract %501 2 
                                Private f32* %503 = OpAccessChain %318 %68 
                                                      OpStore %503 %502 
                                       f32_2 %504 = OpLoad %278 
                              Uniform f32_4* %505 = OpAccessChain %27 %97 
                                       f32_4 %506 = OpLoad %505 
                                       f32_2 %507 = OpVectorShuffle %506 %506 0 1 
                                       f32_2 %508 = OpFMul %504 %507 
                              Uniform f32_4* %509 = OpAccessChain %27 %97 
                                       f32_4 %510 = OpLoad %509 
                                       f32_2 %511 = OpVectorShuffle %510 %510 2 3 
                                       f32_2 %512 = OpFAdd %508 %511 
                                       f32_3 %513 = OpLoad %273 
                                       f32_3 %514 = OpVectorShuffle %513 %512 3 4 2 
                                                      OpStore %273 %514 
                         read_only Texture2D %515 = OpLoad %110 
                                     sampler %516 = OpLoad %114 
                  read_only Texture2DSampled %517 = OpSampledImage %515 %516 
                                       f32_3 %518 = OpLoad %273 
                                       f32_2 %519 = OpVectorShuffle %518 %518 0 1 
                                       f32_4 %520 = OpImageSampleImplicitLod %517 %519 
                                         f32 %521 = OpCompositeExtract %520 0 
                                Private f32* %522 = OpAccessChain %318 %51 
                                                      OpStore %522 %521 
                                         f32 %523 = OpLoad %283 
                                       f32_3 %524 = OpCompositeConstruct %523 %523 %523 
                                       f32_3 %525 = OpLoad %318 
                                       f32_3 %526 = OpFMul %524 %525 
                                                      OpStore %273 %526 
                                       f32_3 %527 = OpLoad %9 
                                       f32_3 %528 = OpLoad %273 
                                       f32_3 %529 = OpFMul %527 %528 
                                                      OpStore %273 %529 
                                       f32_3 %530 = OpLoad %273 
                              Uniform f32_4* %531 = OpAccessChain %27 %29 
                                       f32_4 %532 = OpLoad %531 
                                       f32_3 %533 = OpVectorShuffle %532 %532 0 0 0 
                                       f32_3 %534 = OpFMul %530 %533 
                                       f32_3 %535 = OpLoad %39 
                                       f32_3 %536 = OpFAdd %534 %535 
                                                      OpStore %39 %536 
                                       f32_3 %537 = OpLoad %124 
                                       f32_2 %538 = OpVectorShuffle %537 %537 0 1 
                                       f32_2 %539 = OpFNegate %538 
                                       f32_2 %540 = OpFAdd %539 %16 
                                       f32_3 %541 = OpLoad %273 
                                       f32_3 %542 = OpVectorShuffle %541 %540 3 4 2 
                                                      OpStore %273 %542 
                                       f32_3 %543 = OpLoad %273 
                                       f32_2 %544 = OpVectorShuffle %543 %543 0 1 
                                       f32_3 %545 = OpLoad %273 
                                       f32_2 %546 = OpVectorShuffle %545 %545 0 1 
                                         f32 %547 = OpDot %544 %546 
                                                      OpStore %283 %547 
                                         f32 %548 = OpLoad %283 
                                         f32 %549 = OpExtInst %1 31 %548 
                                                      OpStore %283 %549 
                                         f32 %550 = OpLoad %283 
                                         f32 %551 = OpFNegate %550 
                                         f32 %552 = OpFMul %551 %61 
                                         f32 %553 = OpFAdd %552 %63 
                                                      OpStore %283 %553 
                                         f32 %554 = OpLoad %283 
                                Uniform f32* %555 = OpAccessChain %27 %29 %68 
                                         f32 %556 = OpLoad %555 
                                         f32 %557 = OpFMul %554 %556 
                                                      OpStore %283 %557 
                                         f32 %558 = OpLoad %283 
                                         f32 %559 = OpExtInst %1 30 %558 
                                                      OpStore %283 %559 
                                         f32 %560 = OpLoad %283 
                                Uniform f32* %561 = OpAccessChain %27 %29 %80 
                                         f32 %562 = OpLoad %561 
                                         f32 %563 = OpFMul %560 %562 
                                                      OpStore %283 %563 
                                         f32 %564 = OpLoad %283 
                                         f32 %565 = OpExtInst %1 29 %564 
                                                      OpStore %283 %565 
                                         f32 %566 = OpLoad %283 
                                         f32 %567 = OpLoad %283 
                                         f32 %568 = OpFMul %566 %567 
                                                      OpStore %283 %568 
                                       f32_3 %569 = OpLoad %124 
                                       f32_2 %570 = OpVectorShuffle %569 %569 0 1 
                              Uniform f32_4* %571 = OpAccessChain %27 %97 
                                       f32_4 %572 = OpLoad %571 
                                       f32_2 %573 = OpVectorShuffle %572 %572 0 1 
                                       f32_2 %574 = OpFMul %570 %573 
                              Uniform f32_4* %575 = OpAccessChain %27 %97 
                                       f32_4 %576 = OpLoad %575 
                                       f32_2 %577 = OpVectorShuffle %576 %576 2 3 
                                       f32_2 %578 = OpFAdd %574 %577 
                                       f32_3 %579 = OpLoad %273 
                                       f32_3 %580 = OpVectorShuffle %579 %578 3 4 2 
                                                      OpStore %273 %580 
                         read_only Texture2D %581 = OpLoad %110 
                                     sampler %582 = OpLoad %114 
                  read_only Texture2DSampled %583 = OpSampledImage %581 %582 
                                       f32_3 %584 = OpLoad %273 
                                       f32_2 %585 = OpVectorShuffle %584 %584 0 1 
                                       f32_4 %586 = OpImageSampleImplicitLod %583 %585 
                                         f32 %587 = OpCompositeExtract %586 1 
                                Private f32* %588 = OpAccessChain %273 %121 
                                                      OpStore %588 %587 
                                       f32_2 %589 = OpLoad %151 
                                       f32_4 %590 = OpLoad %168 
                                       f32_2 %591 = OpVectorShuffle %590 %590 0 1 
                                       f32_2 %592 = OpFMul %589 %591 
                                       f32_3 %593 = OpLoad %124 
                                       f32_2 %594 = OpVectorShuffle %593 %593 0 1 
                                       f32_2 %595 = OpFAdd %592 %594 
                                       f32_4 %596 = OpLoad %168 
                                       f32_4 %597 = OpVectorShuffle %596 %595 4 5 2 3 
                                                      OpStore %168 %597 
                                       f32_2 %598 = OpLoad %151 
                                       f32_4 %599 = OpLoad %186 
                                       f32_2 %600 = OpVectorShuffle %599 %599 0 1 
                                       f32_2 %601 = OpFMul %598 %600 
                                       f32_3 %602 = OpLoad %124 
                                       f32_2 %603 = OpVectorShuffle %602 %602 0 1 
                                       f32_2 %604 = OpFAdd %601 %603 
                                       f32_3 %605 = OpLoad %124 
                                       f32_3 %606 = OpVectorShuffle %605 %604 3 4 2 
                                                      OpStore %124 %606 
                                       f32_3 %607 = OpLoad %124 
                                       f32_2 %608 = OpVectorShuffle %607 %607 0 1 
                              Uniform f32_4* %609 = OpAccessChain %27 %97 
                                       f32_4 %610 = OpLoad %609 
                                       f32_2 %611 = OpVectorShuffle %610 %610 0 1 
                                       f32_2 %612 = OpFMul %608 %611 
                              Uniform f32_4* %613 = OpAccessChain %27 %97 
                                       f32_4 %614 = OpLoad %613 
                                       f32_2 %615 = OpVectorShuffle %614 %614 2 3 
                                       f32_2 %616 = OpFAdd %612 %615 
                                       f32_3 %617 = OpLoad %124 
                                       f32_3 %618 = OpVectorShuffle %617 %616 3 4 2 
                                                      OpStore %124 %618 
                         read_only Texture2D %619 = OpLoad %110 
                                     sampler %620 = OpLoad %114 
                  read_only Texture2DSampled %621 = OpSampledImage %619 %620 
                                       f32_3 %622 = OpLoad %124 
                                       f32_2 %623 = OpVectorShuffle %622 %622 0 1 
                                       f32_4 %624 = OpImageSampleImplicitLod %621 %623 
                                         f32 %625 = OpCompositeExtract %624 2 
                                Private f32* %626 = OpAccessChain %273 %68 
                                                      OpStore %626 %625 
                                       f32_4 %627 = OpLoad %168 
                                       f32_2 %628 = OpVectorShuffle %627 %627 0 1 
                              Uniform f32_4* %629 = OpAccessChain %27 %97 
                                       f32_4 %630 = OpLoad %629 
                                       f32_2 %631 = OpVectorShuffle %630 %630 0 1 
                                       f32_2 %632 = OpFMul %628 %631 
                              Uniform f32_4* %633 = OpAccessChain %27 %97 
                                       f32_4 %634 = OpLoad %633 
                                       f32_2 %635 = OpVectorShuffle %634 %634 2 3 
                                       f32_2 %636 = OpFAdd %632 %635 
                                       f32_3 %637 = OpLoad %124 
                                       f32_3 %638 = OpVectorShuffle %637 %636 3 4 2 
                                                      OpStore %124 %638 
                         read_only Texture2D %639 = OpLoad %110 
                                     sampler %640 = OpLoad %114 
                  read_only Texture2DSampled %641 = OpSampledImage %639 %640 
                                       f32_3 %642 = OpLoad %124 
                                       f32_2 %643 = OpVectorShuffle %642 %642 0 1 
                                       f32_4 %644 = OpImageSampleImplicitLod %641 %643 
                                         f32 %645 = OpCompositeExtract %644 0 
                                Private f32* %646 = OpAccessChain %273 %51 
                                                      OpStore %646 %645 
                                         f32 %647 = OpLoad %283 
                                       f32_3 %648 = OpCompositeConstruct %647 %647 %647 
                                       f32_3 %649 = OpLoad %273 
                                       f32_3 %650 = OpFMul %648 %649 
                                                      OpStore %273 %650 
                                       f32_3 %651 = OpLoad %9 
                                       f32_3 %652 = OpLoad %273 
                                       f32_3 %653 = OpFMul %651 %652 
                                                      OpStore %273 %653 
                                       f32_3 %654 = OpLoad %273 
                              Uniform f32_4* %655 = OpAccessChain %27 %29 
                                       f32_4 %656 = OpLoad %655 
                                       f32_3 %657 = OpVectorShuffle %656 %656 0 0 0 
                                       f32_3 %658 = OpFMul %654 %657 
                                       f32_3 %659 = OpLoad %39 
                                       f32_3 %660 = OpFAdd %658 %659 
                                                      OpStore %39 %660 
                                       f32_2 %661 = OpLoad %151 
                              Uniform f32_4* %663 = OpAccessChain %27 %662 
                                       f32_4 %664 = OpLoad %663 
                                       f32_2 %665 = OpVectorShuffle %664 %664 1 1 
                                       f32_2 %666 = OpFMul %661 %665 
                                       f32_2 %667 = OpLoad vs_TEXCOORD0 
                                       f32_2 %668 = OpFAdd %666 %667 
                                       f32_3 %669 = OpLoad %124 
                                       f32_3 %670 = OpVectorShuffle %669 %668 3 4 2 
                                                      OpStore %124 %670 
                                       f32_3 %671 = OpLoad %124 
                                       f32_2 %672 = OpVectorShuffle %671 %671 0 1 
                                       f32_2 %673 = OpExtInst %1 10 %672 
                                       f32_3 %674 = OpLoad %124 
                                       f32_3 %675 = OpVectorShuffle %674 %673 3 4 2 
                                                      OpStore %124 %675 
                                       f32_2 %676 = OpLoad %151 
                                       f32_4 %677 = OpLoad %168 
                                       f32_2 %678 = OpVectorShuffle %677 %677 2 3 
                                       f32_2 %679 = OpFMul %676 %678 
                                       f32_3 %680 = OpLoad %124 
                                       f32_2 %681 = OpVectorShuffle %680 %680 0 1 
                                       f32_2 %682 = OpFAdd %679 %681 
                                       f32_4 %683 = OpLoad %168 
                                       f32_4 %684 = OpVectorShuffle %683 %682 4 5 2 3 
                                                      OpStore %168 %684 
                                       f32_2 %685 = OpLoad %151 
                                       f32_4 %686 = OpLoad %186 
                                       f32_2 %687 = OpVectorShuffle %686 %686 2 3 
                                       f32_2 %688 = OpFMul %685 %687 
                                       f32_3 %689 = OpLoad %124 
                                       f32_2 %690 = OpVectorShuffle %689 %689 0 1 
                                       f32_2 %691 = OpFAdd %688 %690 
                                                      OpStore %151 %691 
                                       f32_2 %692 = OpLoad %151 
                              Uniform f32_4* %693 = OpAccessChain %27 %97 
                                       f32_4 %694 = OpLoad %693 
                                       f32_2 %695 = OpVectorShuffle %694 %694 0 1 
                                       f32_2 %696 = OpFMul %692 %695 
                              Uniform f32_4* %697 = OpAccessChain %27 %97 
                                       f32_4 %698 = OpLoad %697 
                                       f32_2 %699 = OpVectorShuffle %698 %698 2 3 
                                       f32_2 %700 = OpFAdd %696 %699 
                                                      OpStore %151 %700 
                         read_only Texture2D %701 = OpLoad %110 
                                     sampler %702 = OpLoad %114 
                  read_only Texture2DSampled %703 = OpSampledImage %701 %702 
                                       f32_2 %704 = OpLoad %151 
                                       f32_4 %705 = OpImageSampleImplicitLod %703 %704 
                                         f32 %706 = OpCompositeExtract %705 2 
                                Private f32* %707 = OpAccessChain %186 %68 
                                                      OpStore %707 %706 
                                       f32_4 %708 = OpLoad %168 
                                       f32_2 %709 = OpVectorShuffle %708 %708 0 1 
                              Uniform f32_4* %710 = OpAccessChain %27 %97 
                                       f32_4 %711 = OpLoad %710 
                                       f32_2 %712 = OpVectorShuffle %711 %711 0 1 
                                       f32_2 %713 = OpFMul %709 %712 
                              Uniform f32_4* %714 = OpAccessChain %27 %97 
                                       f32_4 %715 = OpLoad %714 
                                       f32_2 %716 = OpVectorShuffle %715 %715 2 3 
                                       f32_2 %717 = OpFAdd %713 %716 
                                                      OpStore %151 %717 
                         read_only Texture2D %718 = OpLoad %110 
                                     sampler %719 = OpLoad %114 
                  read_only Texture2DSampled %720 = OpSampledImage %718 %719 
                                       f32_2 %721 = OpLoad %151 
                                       f32_4 %722 = OpImageSampleImplicitLod %720 %721 
                                         f32 %723 = OpCompositeExtract %722 0 
                                Private f32* %724 = OpAccessChain %186 %51 
                                                      OpStore %724 %723 
                                       f32_3 %725 = OpLoad %124 
                                       f32_2 %726 = OpVectorShuffle %725 %725 0 1 
                                       f32_2 %727 = OpFNegate %726 
                                       f32_2 %728 = OpFAdd %727 %16 
                                                      OpStore %151 %728 
                                       f32_3 %729 = OpLoad %124 
                                       f32_2 %730 = OpVectorShuffle %729 %729 0 1 
                              Uniform f32_4* %731 = OpAccessChain %27 %97 
                                       f32_4 %732 = OpLoad %731 
                                       f32_2 %733 = OpVectorShuffle %732 %732 0 1 
                                       f32_2 %734 = OpFMul %730 %733 
                              Uniform f32_4* %735 = OpAccessChain %27 %97 
                                       f32_4 %736 = OpLoad %735 
                                       f32_2 %737 = OpVectorShuffle %736 %736 2 3 
                                       f32_2 %738 = OpFAdd %734 %737 
                                       f32_3 %739 = OpLoad %124 
                                       f32_3 %740 = OpVectorShuffle %739 %738 3 4 2 
                                                      OpStore %124 %740 
                         read_only Texture2D %741 = OpLoad %110 
                                     sampler %742 = OpLoad %114 
                  read_only Texture2DSampled %743 = OpSampledImage %741 %742 
                                       f32_3 %744 = OpLoad %124 
                                       f32_2 %745 = OpVectorShuffle %744 %744 0 1 
                                       f32_4 %746 = OpImageSampleImplicitLod %743 %745 
                                         f32 %747 = OpCompositeExtract %746 1 
                                Private f32* %748 = OpAccessChain %186 %121 
                                                      OpStore %748 %747 
                                       f32_2 %749 = OpLoad %151 
                                       f32_2 %750 = OpLoad %151 
                                         f32 %751 = OpDot %749 %750 
                                                      OpStore %283 %751 
                                         f32 %752 = OpLoad %283 
                                         f32 %753 = OpExtInst %1 31 %752 
                                                      OpStore %283 %753 
                                         f32 %754 = OpLoad %283 
                                         f32 %755 = OpFNegate %754 
                                         f32 %756 = OpFMul %755 %61 
                                         f32 %757 = OpFAdd %756 %63 
                                                      OpStore %283 %757 
                                         f32 %758 = OpLoad %283 
                                Uniform f32* %759 = OpAccessChain %27 %662 %68 
                                         f32 %760 = OpLoad %759 
                                         f32 %761 = OpFMul %758 %760 
                                                      OpStore %283 %761 
                                         f32 %762 = OpLoad %283 
                                         f32 %763 = OpExtInst %1 30 %762 
                                                      OpStore %283 %763 
                                         f32 %764 = OpLoad %283 
                                Uniform f32* %765 = OpAccessChain %27 %662 %80 
                                         f32 %766 = OpLoad %765 
                                         f32 %767 = OpFMul %764 %766 
                                                      OpStore %283 %767 
                                         f32 %768 = OpLoad %283 
                                         f32 %769 = OpExtInst %1 29 %768 
                                                      OpStore %283 %769 
                                         f32 %770 = OpLoad %283 
                                       f32_3 %771 = OpCompositeConstruct %770 %770 %770 
                                       f32_4 %772 = OpLoad %186 
                                       f32_3 %773 = OpVectorShuffle %772 %772 0 1 2 
                                       f32_3 %774 = OpFMul %771 %773 
                                                      OpStore %124 %774 
                                       f32_3 %775 = OpLoad %124 
                              Uniform f32_4* %776 = OpAccessChain %27 %662 
                                       f32_4 %777 = OpLoad %776 
                                       f32_3 %778 = OpVectorShuffle %777 %777 0 0 0 
                                       f32_3 %779 = OpFMul %775 %778 
                                                      OpStore %124 %779 
                                       f32_3 %782 = OpLoad %124 
                                       f32_3 %783 = OpLoad %9 
                                       f32_3 %784 = OpFMul %782 %783 
                                       f32_3 %785 = OpLoad %39 
                                       f32_3 %786 = OpFAdd %784 %785 
                                       f32_4 %787 = OpLoad %781 
                                       f32_4 %788 = OpVectorShuffle %787 %786 4 5 6 3 
                                                      OpStore %781 %788 
                                 Output f32* %790 = OpAccessChain %781 %80 
                                                      OpStore %790 %254 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
}
Program "fp" {
SubProgram "d3d11 " {
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
""
}
SubProgram "vulkan " {
""
}
SubProgram "d3d11 " {
Keywords { "AB_HIGH_PRECISION" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "AB_HIGH_PRECISION" }
""
}
SubProgram "vulkan " {
Keywords { "AB_HIGH_PRECISION" }
""
}
}
}
 Pass {
  Name "frag_lensFlare5"
  ZTest Always
  ZWrite Off
  Cull Off
  GpuProgramID 559949
Program "vp" {
SubProgram "d3d11 " {
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in  vec4 in_POSITION0;
in  vec2 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _LensFlareGhostsParams;
uniform 	vec4 _LensFlareHaloParams;
uniform 	float _LensFlareGhostChrDistortion;
uniform 	float _LensFlareHaloChrDistortion;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BloomRange;
uniform 	vec4 _MainTex_TexelSize;
UNITY_LOCATION(0) uniform  sampler2D _LensFlareLUT;
UNITY_LOCATION(1) uniform  sampler2D _MainTex;
in  vec2 vs_TEXCOORD0;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
vec4 u_xlat6;
vec4 u_xlat7;
vec4 u_xlat8;
vec4 u_xlat9;
vec2 u_xlat11;
vec2 u_xlat20;
float u_xlat30;
float u_xlat31;
float u_xlat32;
void main()
{
    u_xlat0.xy = (-vs_TEXCOORD0.xy) + vec2(0.5, 0.5);
    u_xlat20.xy = u_xlat0.xy * _LensFlareGhostsParams.yy + vs_TEXCOORD0.xy;
    u_xlat20.xy = fract(u_xlat20.xy);
    u_xlat1.xy = (-u_xlat20.xy) + vec2(0.5, 0.5);
    u_xlat1.x = dot(u_xlat1.xy, u_xlat1.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlat1.x = (-u_xlat1.x) * 1.41419995 + 1.0;
    u_xlat1.x = u_xlat1.x * _LensFlareGhostsParams.z;
    u_xlat1.x = log2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _LensFlareGhostsParams.w;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat11.xy = u_xlat20.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat2 = texture(_MainTex, u_xlat11.xy);
    u_xlat11.x = u_xlat2.y * _BloomRange.x;
    u_xlat2.y = u_xlat2.w * u_xlat11.x;
    u_xlat3 = u_xlat0.xyxy * _LensFlareGhostsParams.yyyy;
    u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * 1.41419995;
    u_xlat0.x = fract(u_xlat0.x);
    u_xlat11.x = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat11.x = inversesqrt(u_xlat11.x);
    u_xlat11.xy = u_xlat11.xx * u_xlat3.zw;
    u_xlat4 = vec4(_LensFlareGhostChrDistortion, _LensFlareGhostChrDistortion, _LensFlareHaloChrDistortion, _LensFlareHaloChrDistortion) * (-_MainTex_TexelSize.xxxx);
    u_xlat5.xy = u_xlat11.xy * u_xlat4.xy + u_xlat20.xy;
    u_xlat5.xy = u_xlat5.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat5 = texture(_MainTex, u_xlat5.xy);
    u_xlat31 = u_xlat5.x * _BloomRange.x;
    u_xlat2.x = u_xlat5.w * u_xlat31;
    u_xlat5 = vec4(_LensFlareGhostChrDistortion, _LensFlareGhostChrDistortion, _LensFlareHaloChrDistortion, _LensFlareHaloChrDistortion) * _MainTex_TexelSize.xxxx;
    u_xlat20.xy = u_xlat11.xy * u_xlat5.xy + u_xlat20.xy;
    u_xlat20.xy = u_xlat20.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat6 = texture(_MainTex, u_xlat20.xy);
    u_xlat20.x = u_xlat6.z * _BloomRange.x;
    u_xlat2.z = u_xlat6.w * u_xlat20.x;
    u_xlat2.xyz = u_xlat1.xxx * u_xlat2.xyz;
    u_xlat0.y = 0.0;
    u_xlat0 = texture(_LensFlareLUT, u_xlat0.xy);
    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz * _LensFlareGhostsParams.xxx;
    u_xlat1.xw = fract(vs_TEXCOORD0.xy);
    u_xlat6.xy = (-u_xlat1.xw) + vec2(0.5, 0.5);
    u_xlat30 = dot(u_xlat6.xy, u_xlat6.xy);
    u_xlat30 = sqrt(u_xlat30);
    u_xlat30 = (-u_xlat30) * 1.41419995 + 1.0;
    u_xlat30 = u_xlat30 * _LensFlareGhostsParams.z;
    u_xlat30 = log2(u_xlat30);
    u_xlat30 = u_xlat30 * _LensFlareGhostsParams.w;
    u_xlat30 = exp2(u_xlat30);
    u_xlat30 = u_xlat30 * u_xlat30;
    u_xlat6.xy = u_xlat1.xw * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat6 = texture(_MainTex, u_xlat6.xy);
    u_xlat32 = u_xlat6.y * _BloomRange.x;
    u_xlat6.y = u_xlat6.w * u_xlat32;
    u_xlat7.xy = u_xlat11.xy * u_xlat4.xy + u_xlat1.xw;
    u_xlat1.xw = u_xlat11.xy * u_xlat5.xy + u_xlat1.xw;
    u_xlat1.xw = u_xlat1.xw * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat8 = texture(_MainTex, u_xlat1.xw);
    u_xlat1.xw = u_xlat7.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat7 = texture(_MainTex, u_xlat1.xw);
    u_xlat1.x = u_xlat7.x * _BloomRange.x;
    u_xlat6.x = u_xlat7.w * u_xlat1.x;
    u_xlat1.x = u_xlat8.z * _BloomRange.x;
    u_xlat6.z = u_xlat8.w * u_xlat1.x;
    u_xlat6.xyz = vec3(u_xlat30) * u_xlat6.xyz;
    u_xlat6.xyz = u_xlat0.xyz * u_xlat6.xyz;
    u_xlat2.xyz = u_xlat6.xyz * _LensFlareGhostsParams.xxx + u_xlat2.xyz;
    u_xlat1.xw = u_xlat3.zw * vec2(2.0, 2.0) + vs_TEXCOORD0.xy;
    u_xlat3 = u_xlat3 * vec4(3.0, 3.0, 4.0, 4.0) + vs_TEXCOORD0.xyxy;
    u_xlat3 = fract(u_xlat3);
    u_xlat1.xw = fract(u_xlat1.xw);
    u_xlat6.xy = (-u_xlat1.xw) + vec2(0.5, 0.5);
    u_xlat30 = dot(u_xlat6.xy, u_xlat6.xy);
    u_xlat30 = sqrt(u_xlat30);
    u_xlat30 = (-u_xlat30) * 1.41419995 + 1.0;
    u_xlat30 = u_xlat30 * _LensFlareGhostsParams.z;
    u_xlat30 = log2(u_xlat30);
    u_xlat30 = u_xlat30 * _LensFlareGhostsParams.w;
    u_xlat30 = exp2(u_xlat30);
    u_xlat30 = u_xlat30 * u_xlat30;
    u_xlat6.xy = u_xlat1.xw * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat6 = texture(_MainTex, u_xlat6.xy);
    u_xlat32 = u_xlat6.y * _BloomRange.x;
    u_xlat6.y = u_xlat6.w * u_xlat32;
    u_xlat7.xy = u_xlat11.xy * u_xlat4.xy + u_xlat1.xw;
    u_xlat1.xw = u_xlat11.xy * u_xlat5.xy + u_xlat1.xw;
    u_xlat1.xw = u_xlat1.xw * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat8 = texture(_MainTex, u_xlat1.xw);
    u_xlat1.xw = u_xlat7.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat7 = texture(_MainTex, u_xlat1.xw);
    u_xlat1.x = u_xlat7.x * _BloomRange.x;
    u_xlat6.x = u_xlat7.w * u_xlat1.x;
    u_xlat1.x = u_xlat8.z * _BloomRange.x;
    u_xlat6.z = u_xlat8.w * u_xlat1.x;
    u_xlat6.xyz = vec3(u_xlat30) * u_xlat6.xyz;
    u_xlat6.xyz = u_xlat0.xyz * u_xlat6.xyz;
    u_xlat2.xyz = u_xlat6.xyz * _LensFlareGhostsParams.xxx + u_xlat2.xyz;
    u_xlat6 = (-u_xlat3) + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat30 = dot(u_xlat6.xy, u_xlat6.xy);
    u_xlat1.x = dot(u_xlat6.zw, u_xlat6.zw);
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlat1.x = (-u_xlat1.x) * 1.41419995 + 1.0;
    u_xlat1.x = u_xlat1.x * _LensFlareGhostsParams.z;
    u_xlat1.x = log2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _LensFlareGhostsParams.w;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat30 = sqrt(u_xlat30);
    u_xlat30 = (-u_xlat30) * 1.41419995 + 1.0;
    u_xlat30 = u_xlat30 * _LensFlareGhostsParams.z;
    u_xlat30 = log2(u_xlat30);
    u_xlat30 = u_xlat30 * _LensFlareGhostsParams.w;
    u_xlat30 = exp2(u_xlat30);
    u_xlat30 = u_xlat30 * u_xlat30;
    u_xlat6 = u_xlat3 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
    u_xlat7 = texture(_MainTex, u_xlat6.xy);
    u_xlat6 = texture(_MainTex, u_xlat6.zw);
    u_xlat31 = u_xlat7.y * _BloomRange.x;
    u_xlat7.y = u_xlat7.w * u_xlat31;
    u_xlat8 = u_xlat11.xyxy * u_xlat4.xyxy + u_xlat3;
    u_xlat3 = u_xlat11.xyxy * u_xlat5.xyxy + u_xlat3;
    u_xlat3 = u_xlat3 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
    u_xlat8 = u_xlat8 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
    u_xlat9 = texture(_MainTex, u_xlat8.xy);
    u_xlat8 = texture(_MainTex, u_xlat8.zw);
    u_xlat31 = u_xlat9.x * _BloomRange.x;
    u_xlat7.x = u_xlat9.w * u_xlat31;
    u_xlat9 = texture(_MainTex, u_xlat3.xy);
    u_xlat3 = texture(_MainTex, u_xlat3.zw);
    u_xlat31 = u_xlat9.z * _BloomRange.x;
    u_xlat7.z = u_xlat9.w * u_xlat31;
    u_xlat7.xyz = vec3(u_xlat30) * u_xlat7.xyz;
    u_xlat7.xyz = u_xlat0.xyz * u_xlat7.xyz;
    u_xlat2.xyz = u_xlat7.xyz * _LensFlareGhostsParams.xxx + u_xlat2.xyz;
    u_xlat30 = u_xlat6.y * _BloomRange.x;
    u_xlat6.y = u_xlat6.w * u_xlat30;
    u_xlat30 = u_xlat8.x * _BloomRange.x;
    u_xlat6.x = u_xlat8.w * u_xlat30;
    u_xlat30 = u_xlat3.z * _BloomRange.x;
    u_xlat6.z = u_xlat3.w * u_xlat30;
    u_xlat3.xyz = u_xlat1.xxx * u_xlat6.xyz;
    u_xlat3.xyz = u_xlat0.xyz * u_xlat3.xyz;
    u_xlat2.xyz = u_xlat3.xyz * _LensFlareGhostsParams.xxx + u_xlat2.xyz;
    u_xlat1.xw = u_xlat11.xy * _LensFlareHaloParams.yy + vs_TEXCOORD0.xy;
    u_xlat1.xw = fract(u_xlat1.xw);
    u_xlat3.xy = u_xlat11.xy * u_xlat4.zw + u_xlat1.xw;
    u_xlat11.xy = u_xlat11.xy * u_xlat5.zw + u_xlat1.xw;
    u_xlat11.xy = u_xlat11.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat4 = texture(_MainTex, u_xlat11.xy);
    u_xlat11.xy = u_xlat3.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat3 = texture(_MainTex, u_xlat11.xy);
    u_xlat30 = u_xlat3.x * _BloomRange.x;
    u_xlat3.x = u_xlat3.w * u_xlat30;
    u_xlat30 = u_xlat4.z * _BloomRange.x;
    u_xlat3.z = u_xlat4.w * u_xlat30;
    u_xlat11.xy = (-u_xlat1.xw) + vec2(0.5, 0.5);
    u_xlat1.xw = u_xlat1.xw * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat4 = texture(_MainTex, u_xlat1.xw);
    u_xlat30 = dot(u_xlat11.xy, u_xlat11.xy);
    u_xlat30 = sqrt(u_xlat30);
    u_xlat30 = (-u_xlat30) * 1.41419995 + 1.0;
    u_xlat30 = u_xlat30 * _LensFlareHaloParams.z;
    u_xlat30 = log2(u_xlat30);
    u_xlat30 = u_xlat30 * _LensFlareHaloParams.w;
    u_xlat30 = exp2(u_xlat30);
    u_xlat1.x = u_xlat4.y * _BloomRange.x;
    u_xlat3.y = u_xlat4.w * u_xlat1.x;
    u_xlat1.xyz = vec3(u_xlat30) * u_xlat3.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _LensFlareHaloParams.xxx;
    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xyz + u_xlat2.xyz;
    u_xlat0.xyz = u_xlat0.xyz * _BloomRange.yyy;
    u_xlat30 = max(u_xlat0.y, u_xlat0.x);
    u_xlat1.x = max(u_xlat0.z, 9.99999997e-07);
    u_xlat30 = max(u_xlat30, u_xlat1.x);
    u_xlat30 = min(u_xlat30, 1.0);
    u_xlat30 = u_xlat30 * 255.0;
    u_xlat30 = ceil(u_xlat30);
    u_xlat30 = u_xlat30 * 0.00392156886;
    SV_Target0.xyz = u_xlat0.xyz / vec3(u_xlat30);
    SV_Target0.w = u_xlat30;
    return;
}

#endif
"
}
SubProgram "vulkan " {
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 94
; Schema: 0
                                              OpCapability Shader 
                                       %1 = OpExtInstImport "GLSL.std.450" 
                                              OpMemoryModel Logical GLSL450 
                                              OpEntryPoint Vertex %4 "main" %11 %72 %84 %86 
                                              OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                              OpDecorate %11 Location 11 
                                              OpDecorate %16 ArrayStride 16 
                                              OpDecorate %17 ArrayStride 17 
                                              OpMemberDecorate %18 0 Offset 18 
                                              OpMemberDecorate %18 1 Offset 18 
                                              OpDecorate %18 Block 
                                              OpDecorate %20 DescriptorSet 20 
                                              OpDecorate %20 Binding 20 
                                              OpMemberDecorate %70 0 BuiltIn 70 
                                              OpMemberDecorate %70 1 BuiltIn 70 
                                              OpMemberDecorate %70 2 BuiltIn 70 
                                              OpDecorate %70 Block 
                                              OpDecorate vs_TEXCOORD0 Location 84 
                                              OpDecorate %86 Location 86 
                                       %2 = OpTypeVoid 
                                       %3 = OpTypeFunction %2 
                                       %6 = OpTypeFloat 32 
                                       %7 = OpTypeVector %6 4 
                                       %8 = OpTypePointer Private %7 
                        Private f32_4* %9 = OpVariable Private 
                                      %10 = OpTypePointer Input %7 
                         Input f32_4* %11 = OpVariable Input 
                                      %14 = OpTypeInt 32 0 
                                  u32 %15 = OpConstant 4 
                                      %16 = OpTypeArray %7 %15 
                                      %17 = OpTypeArray %7 %15 
                                      %18 = OpTypeStruct %16 %17 
                                      %19 = OpTypePointer Uniform %18 
Uniform struct {f32_4[4]; f32_4[4];}* %20 = OpVariable Uniform 
                                      %21 = OpTypeInt 32 1 
                                  i32 %22 = OpConstant 0 
                                  i32 %23 = OpConstant 1 
                                      %24 = OpTypePointer Uniform %7 
                                  i32 %35 = OpConstant 2 
                                  i32 %44 = OpConstant 3 
                       Private f32_4* %48 = OpVariable Private 
                                  u32 %68 = OpConstant 1 
                                      %69 = OpTypeArray %6 %68 
                                      %70 = OpTypeStruct %7 %6 %69 
                                      %71 = OpTypePointer Output %70 
 Output struct {f32_4; f32; f32[1];}* %72 = OpVariable Output 
                                      %80 = OpTypePointer Output %7 
                                      %82 = OpTypeVector %6 2 
                                      %83 = OpTypePointer Output %82 
               Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                      %85 = OpTypePointer Input %82 
                         Input f32_2* %86 = OpVariable Input 
                                      %88 = OpTypePointer Output %6 
                                  void %4 = OpFunction None %3 
                                       %5 = OpLabel 
                                f32_4 %12 = OpLoad %11 
                                f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                       Uniform f32_4* %25 = OpAccessChain %20 %22 %23 
                                f32_4 %26 = OpLoad %25 
                                f32_4 %27 = OpFMul %13 %26 
                                              OpStore %9 %27 
                       Uniform f32_4* %28 = OpAccessChain %20 %22 %22 
                                f32_4 %29 = OpLoad %28 
                                f32_4 %30 = OpLoad %11 
                                f32_4 %31 = OpVectorShuffle %30 %30 0 0 0 0 
                                f32_4 %32 = OpFMul %29 %31 
                                f32_4 %33 = OpLoad %9 
                                f32_4 %34 = OpFAdd %32 %33 
                                              OpStore %9 %34 
                       Uniform f32_4* %36 = OpAccessChain %20 %22 %35 
                                f32_4 %37 = OpLoad %36 
                                f32_4 %38 = OpLoad %11 
                                f32_4 %39 = OpVectorShuffle %38 %38 2 2 2 2 
                                f32_4 %40 = OpFMul %37 %39 
                                f32_4 %41 = OpLoad %9 
                                f32_4 %42 = OpFAdd %40 %41 
                                              OpStore %9 %42 
                                f32_4 %43 = OpLoad %9 
                       Uniform f32_4* %45 = OpAccessChain %20 %22 %44 
                                f32_4 %46 = OpLoad %45 
                                f32_4 %47 = OpFAdd %43 %46 
                                              OpStore %9 %47 
                                f32_4 %49 = OpLoad %9 
                                f32_4 %50 = OpVectorShuffle %49 %49 1 1 1 1 
                       Uniform f32_4* %51 = OpAccessChain %20 %23 %23 
                                f32_4 %52 = OpLoad %51 
                                f32_4 %53 = OpFMul %50 %52 
                                              OpStore %48 %53 
                       Uniform f32_4* %54 = OpAccessChain %20 %23 %22 
                                f32_4 %55 = OpLoad %54 
                                f32_4 %56 = OpLoad %9 
                                f32_4 %57 = OpVectorShuffle %56 %56 0 0 0 0 
                                f32_4 %58 = OpFMul %55 %57 
                                f32_4 %59 = OpLoad %48 
                                f32_4 %60 = OpFAdd %58 %59 
                                              OpStore %48 %60 
                       Uniform f32_4* %61 = OpAccessChain %20 %23 %35 
                                f32_4 %62 = OpLoad %61 
                                f32_4 %63 = OpLoad %9 
                                f32_4 %64 = OpVectorShuffle %63 %63 2 2 2 2 
                                f32_4 %65 = OpFMul %62 %64 
                                f32_4 %66 = OpLoad %48 
                                f32_4 %67 = OpFAdd %65 %66 
                                              OpStore %48 %67 
                       Uniform f32_4* %73 = OpAccessChain %20 %23 %44 
                                f32_4 %74 = OpLoad %73 
                                f32_4 %75 = OpLoad %9 
                                f32_4 %76 = OpVectorShuffle %75 %75 3 3 3 3 
                                f32_4 %77 = OpFMul %74 %76 
                                f32_4 %78 = OpLoad %48 
                                f32_4 %79 = OpFAdd %77 %78 
                        Output f32_4* %81 = OpAccessChain %72 %22 
                                              OpStore %81 %79 
                                f32_2 %87 = OpLoad %86 
                                              OpStore vs_TEXCOORD0 %87 
                          Output f32* %89 = OpAccessChain %72 %22 %68 
                                  f32 %90 = OpLoad %89 
                                  f32 %91 = OpFNegate %90 
                          Output f32* %92 = OpAccessChain %72 %22 %68 
                                              OpStore %92 %91 
                                              OpReturn
                                              OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 1135
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %12 %1124 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpDecorate vs_TEXCOORD0 Location 12 
                                                      OpMemberDecorate %25 0 Offset 25 
                                                      OpMemberDecorate %25 1 Offset 25 
                                                      OpMemberDecorate %25 2 Offset 25 
                                                      OpMemberDecorate %25 3 Offset 25 
                                                      OpMemberDecorate %25 4 Offset 25 
                                                      OpMemberDecorate %25 5 Offset 25 
                                                      OpMemberDecorate %25 6 Offset 25 
                                                      OpDecorate %25 Block 
                                                      OpDecorate %27 DescriptorSet 27 
                                                      OpDecorate %27 Binding 27 
                                                      OpDecorate %109 DescriptorSet 109 
                                                      OpDecorate %109 Binding 109 
                                                      OpDecorate %113 DescriptorSet 113 
                                                      OpDecorate %113 Binding 113 
                                                      OpDecorate %286 DescriptorSet 286 
                                                      OpDecorate %286 Binding 286 
                                                      OpDecorate %288 DescriptorSet 288 
                                                      OpDecorate %288 Binding 288 
                                                      OpDecorate %1124 Location 1124 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 3 
                                               %8 = OpTypePointer Private %7 
                                Private f32_3* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 2 
                                              %11 = OpTypePointer Input %10 
                        Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                          f32 %15 = OpConstant 3.674022E-40 
                                        f32_2 %16 = OpConstantComposite %15 %15 
                                              %20 = OpTypePointer Private %10 
                               Private f32_2* %21 = OpVariable Private 
                                              %24 = OpTypeVector %6 4 
                                              %25 = OpTypeStruct %24 %24 %6 %6 %24 %24 %24 
                                              %26 = OpTypePointer Uniform %25 
Uniform struct {f32_4; f32_4; f32; f32; f32_4; f32_4; f32_4;}* %27 = OpVariable Uniform 
                                              %28 = OpTypeInt 32 1 
                                          i32 %29 = OpConstant 0 
                                              %30 = OpTypePointer Uniform %24 
                                              %39 = OpTypePointer Private %24 
                               Private f32_4* %40 = OpVariable Private 
                                              %51 = OpTypeInt 32 0 
                                          u32 %52 = OpConstant 0 
                                              %53 = OpTypePointer Private %6 
                                          f32 %62 = OpConstant 3.674022E-40 
                                          f32 %64 = OpConstant 3.674022E-40 
                                          u32 %69 = OpConstant 2 
                                              %70 = OpTypePointer Uniform %6 
                                          u32 %81 = OpConstant 3 
                               Private f32_2* %96 = OpVariable Private 
                                          i32 %98 = OpConstant 4 
                                             %107 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                             %108 = OpTypePointer UniformConstant %107 
        UniformConstant read_only Texture2D* %109 = OpVariable UniformConstant 
                                             %111 = OpTypeSampler 
                                             %112 = OpTypePointer UniformConstant %111 
                    UniformConstant sampler* %113 = OpVariable UniformConstant 
                                             %115 = OpTypeSampledImage %107 
                                         i32 %122 = OpConstant 5 
                              Private f32_3* %127 = OpVariable Private 
                                         u32 %128 = OpConstant 1 
                              Private f32_4* %135 = OpVariable Private 
                              Private f32_4* %175 = OpVariable Private 
                                         i32 %176 = OpConstant 2 
                                         i32 %181 = OpConstant 3 
                                         i32 %187 = OpConstant 6 
                              Private f32_4* %193 = OpVariable Private 
                                Private f32* %223 = OpVariable Private 
                                         f32 %284 = OpConstant 3.674022E-40 
        UniformConstant read_only Texture2D* %286 = OpVariable UniformConstant 
                    UniformConstant sampler* %288 = OpVariable UniformConstant 
                              Private f32_4* %307 = OpVariable Private 
                                Private f32* %314 = OpVariable Private 
                                Private f32* %362 = OpVariable Private 
                              Private f32_3* %373 = OpVariable Private 
                                         f32 %479 = OpConstant 3.674022E-40 
                                       f32_2 %480 = OpConstantComposite %479 %479 
                                         f32 %487 = OpConstant 3.674022E-40 
                                         f32 %488 = OpConstant 3.674022E-40 
                                       f32_4 %489 = OpConstantComposite %487 %487 %488 %488 
                                       f32_4 %669 = OpConstantComposite %15 %15 %15 %15 
                              Private f32_2* %757 = OpVariable Private 
                              Private f32_4* %775 = OpVariable Private 
                              Private f32_2* %845 = OpVariable Private 
                                         i32 %929 = OpConstant 1 
                                        f32 %1106 = OpConstant 3.674022E-40 
                                        f32 %1116 = OpConstant 3.674022E-40 
                                        f32 %1121 = OpConstant 3.674022E-40 
                                            %1123 = OpTypePointer Output %24 
                              Output f32_4* %1124 = OpVariable Output 
                                            %1132 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_2 %13 = OpLoad vs_TEXCOORD0 
                                        f32_2 %14 = OpFNegate %13 
                                        f32_2 %17 = OpFAdd %14 %16 
                                        f32_3 %18 = OpLoad %9 
                                        f32_3 %19 = OpVectorShuffle %18 %17 3 4 2 
                                                      OpStore %9 %19 
                                        f32_3 %22 = OpLoad %9 
                                        f32_2 %23 = OpVectorShuffle %22 %22 0 1 
                               Uniform f32_4* %31 = OpAccessChain %27 %29 
                                        f32_4 %32 = OpLoad %31 
                                        f32_2 %33 = OpVectorShuffle %32 %32 1 1 
                                        f32_2 %34 = OpFMul %23 %33 
                                        f32_2 %35 = OpLoad vs_TEXCOORD0 
                                        f32_2 %36 = OpFAdd %34 %35 
                                                      OpStore %21 %36 
                                        f32_2 %37 = OpLoad %21 
                                        f32_2 %38 = OpExtInst %1 10 %37 
                                                      OpStore %21 %38 
                                        f32_2 %41 = OpLoad %21 
                                        f32_2 %42 = OpFNegate %41 
                                        f32_2 %43 = OpFAdd %42 %16 
                                        f32_4 %44 = OpLoad %40 
                                        f32_4 %45 = OpVectorShuffle %44 %43 4 5 2 3 
                                                      OpStore %40 %45 
                                        f32_4 %46 = OpLoad %40 
                                        f32_2 %47 = OpVectorShuffle %46 %46 0 1 
                                        f32_4 %48 = OpLoad %40 
                                        f32_2 %49 = OpVectorShuffle %48 %48 0 1 
                                          f32 %50 = OpDot %47 %49 
                                 Private f32* %54 = OpAccessChain %40 %52 
                                                      OpStore %54 %50 
                                 Private f32* %55 = OpAccessChain %40 %52 
                                          f32 %56 = OpLoad %55 
                                          f32 %57 = OpExtInst %1 31 %56 
                                 Private f32* %58 = OpAccessChain %40 %52 
                                                      OpStore %58 %57 
                                 Private f32* %59 = OpAccessChain %40 %52 
                                          f32 %60 = OpLoad %59 
                                          f32 %61 = OpFNegate %60 
                                          f32 %63 = OpFMul %61 %62 
                                          f32 %65 = OpFAdd %63 %64 
                                 Private f32* %66 = OpAccessChain %40 %52 
                                                      OpStore %66 %65 
                                 Private f32* %67 = OpAccessChain %40 %52 
                                          f32 %68 = OpLoad %67 
                                 Uniform f32* %71 = OpAccessChain %27 %29 %69 
                                          f32 %72 = OpLoad %71 
                                          f32 %73 = OpFMul %68 %72 
                                 Private f32* %74 = OpAccessChain %40 %52 
                                                      OpStore %74 %73 
                                 Private f32* %75 = OpAccessChain %40 %52 
                                          f32 %76 = OpLoad %75 
                                          f32 %77 = OpExtInst %1 30 %76 
                                 Private f32* %78 = OpAccessChain %40 %52 
                                                      OpStore %78 %77 
                                 Private f32* %79 = OpAccessChain %40 %52 
                                          f32 %80 = OpLoad %79 
                                 Uniform f32* %82 = OpAccessChain %27 %29 %81 
                                          f32 %83 = OpLoad %82 
                                          f32 %84 = OpFMul %80 %83 
                                 Private f32* %85 = OpAccessChain %40 %52 
                                                      OpStore %85 %84 
                                 Private f32* %86 = OpAccessChain %40 %52 
                                          f32 %87 = OpLoad %86 
                                          f32 %88 = OpExtInst %1 29 %87 
                                 Private f32* %89 = OpAccessChain %40 %52 
                                                      OpStore %89 %88 
                                 Private f32* %90 = OpAccessChain %40 %52 
                                          f32 %91 = OpLoad %90 
                                 Private f32* %92 = OpAccessChain %40 %52 
                                          f32 %93 = OpLoad %92 
                                          f32 %94 = OpFMul %91 %93 
                                 Private f32* %95 = OpAccessChain %40 %52 
                                                      OpStore %95 %94 
                                        f32_2 %97 = OpLoad %21 
                               Uniform f32_4* %99 = OpAccessChain %27 %98 
                                       f32_4 %100 = OpLoad %99 
                                       f32_2 %101 = OpVectorShuffle %100 %100 0 1 
                                       f32_2 %102 = OpFMul %97 %101 
                              Uniform f32_4* %103 = OpAccessChain %27 %98 
                                       f32_4 %104 = OpLoad %103 
                                       f32_2 %105 = OpVectorShuffle %104 %104 2 3 
                                       f32_2 %106 = OpFAdd %102 %105 
                                                      OpStore %96 %106 
                         read_only Texture2D %110 = OpLoad %109 
                                     sampler %114 = OpLoad %113 
                  read_only Texture2DSampled %116 = OpSampledImage %110 %114 
                                       f32_2 %117 = OpLoad %96 
                                       f32_4 %118 = OpImageSampleImplicitLod %116 %117 
                                       f32_2 %119 = OpVectorShuffle %118 %118 1 3 
                                                      OpStore %96 %119 
                                Private f32* %120 = OpAccessChain %96 %52 
                                         f32 %121 = OpLoad %120 
                                Uniform f32* %123 = OpAccessChain %27 %122 %52 
                                         f32 %124 = OpLoad %123 
                                         f32 %125 = OpFMul %121 %124 
                                Private f32* %126 = OpAccessChain %96 %52 
                                                      OpStore %126 %125 
                                Private f32* %129 = OpAccessChain %96 %128 
                                         f32 %130 = OpLoad %129 
                                Private f32* %131 = OpAccessChain %96 %52 
                                         f32 %132 = OpLoad %131 
                                         f32 %133 = OpFMul %130 %132 
                                Private f32* %134 = OpAccessChain %127 %128 
                                                      OpStore %134 %133 
                                       f32_3 %136 = OpLoad %9 
                                       f32_4 %137 = OpVectorShuffle %136 %136 0 1 0 1 
                              Uniform f32_4* %138 = OpAccessChain %27 %29 
                                       f32_4 %139 = OpLoad %138 
                                       f32_4 %140 = OpVectorShuffle %139 %139 1 1 1 1 
                                       f32_4 %141 = OpFMul %137 %140 
                                                      OpStore %135 %141 
                                       f32_3 %142 = OpLoad %9 
                                       f32_2 %143 = OpVectorShuffle %142 %142 0 1 
                                       f32_3 %144 = OpLoad %9 
                                       f32_2 %145 = OpVectorShuffle %144 %144 0 1 
                                         f32 %146 = OpDot %143 %145 
                                Private f32* %147 = OpAccessChain %9 %52 
                                                      OpStore %147 %146 
                                Private f32* %148 = OpAccessChain %9 %52 
                                         f32 %149 = OpLoad %148 
                                         f32 %150 = OpExtInst %1 31 %149 
                                Private f32* %151 = OpAccessChain %9 %52 
                                                      OpStore %151 %150 
                                Private f32* %152 = OpAccessChain %9 %52 
                                         f32 %153 = OpLoad %152 
                                         f32 %154 = OpFMul %153 %62 
                                Private f32* %155 = OpAccessChain %9 %52 
                                                      OpStore %155 %154 
                                Private f32* %156 = OpAccessChain %9 %52 
                                         f32 %157 = OpLoad %156 
                                         f32 %158 = OpExtInst %1 10 %157 
                                Private f32* %159 = OpAccessChain %9 %52 
                                                      OpStore %159 %158 
                                       f32_4 %160 = OpLoad %135 
                                       f32_2 %161 = OpVectorShuffle %160 %160 2 3 
                                       f32_4 %162 = OpLoad %135 
                                       f32_2 %163 = OpVectorShuffle %162 %162 2 3 
                                         f32 %164 = OpDot %161 %163 
                                Private f32* %165 = OpAccessChain %96 %52 
                                                      OpStore %165 %164 
                                Private f32* %166 = OpAccessChain %96 %52 
                                         f32 %167 = OpLoad %166 
                                         f32 %168 = OpExtInst %1 32 %167 
                                Private f32* %169 = OpAccessChain %96 %52 
                                                      OpStore %169 %168 
                                       f32_2 %170 = OpLoad %96 
                                       f32_2 %171 = OpVectorShuffle %170 %170 0 0 
                                       f32_4 %172 = OpLoad %135 
                                       f32_2 %173 = OpVectorShuffle %172 %172 2 3 
                                       f32_2 %174 = OpFMul %171 %173 
                                                      OpStore %96 %174 
                                Uniform f32* %177 = OpAccessChain %27 %176 
                                         f32 %178 = OpLoad %177 
                                Uniform f32* %179 = OpAccessChain %27 %176 
                                         f32 %180 = OpLoad %179 
                                Uniform f32* %182 = OpAccessChain %27 %181 
                                         f32 %183 = OpLoad %182 
                                Uniform f32* %184 = OpAccessChain %27 %181 
                                         f32 %185 = OpLoad %184 
                                       f32_4 %186 = OpCompositeConstruct %178 %180 %183 %185 
                              Uniform f32_4* %188 = OpAccessChain %27 %187 
                                       f32_4 %189 = OpLoad %188 
                                       f32_4 %190 = OpVectorShuffle %189 %189 0 0 0 0 
                                       f32_4 %191 = OpFNegate %190 
                                       f32_4 %192 = OpFMul %186 %191 
                                                      OpStore %175 %192 
                                       f32_2 %194 = OpLoad %96 
                                       f32_4 %195 = OpLoad %175 
                                       f32_2 %196 = OpVectorShuffle %195 %195 0 1 
                                       f32_2 %197 = OpFMul %194 %196 
                                       f32_2 %198 = OpLoad %21 
                                       f32_2 %199 = OpFAdd %197 %198 
                                       f32_4 %200 = OpLoad %193 
                                       f32_4 %201 = OpVectorShuffle %200 %199 4 5 2 3 
                                                      OpStore %193 %201 
                                       f32_4 %202 = OpLoad %193 
                                       f32_2 %203 = OpVectorShuffle %202 %202 0 1 
                              Uniform f32_4* %204 = OpAccessChain %27 %98 
                                       f32_4 %205 = OpLoad %204 
                                       f32_2 %206 = OpVectorShuffle %205 %205 0 1 
                                       f32_2 %207 = OpFMul %203 %206 
                              Uniform f32_4* %208 = OpAccessChain %27 %98 
                                       f32_4 %209 = OpLoad %208 
                                       f32_2 %210 = OpVectorShuffle %209 %209 2 3 
                                       f32_2 %211 = OpFAdd %207 %210 
                                       f32_4 %212 = OpLoad %193 
                                       f32_4 %213 = OpVectorShuffle %212 %211 4 5 2 3 
                                                      OpStore %193 %213 
                         read_only Texture2D %214 = OpLoad %109 
                                     sampler %215 = OpLoad %113 
                  read_only Texture2DSampled %216 = OpSampledImage %214 %215 
                                       f32_4 %217 = OpLoad %193 
                                       f32_2 %218 = OpVectorShuffle %217 %217 0 1 
                                       f32_4 %219 = OpImageSampleImplicitLod %216 %218 
                                       f32_2 %220 = OpVectorShuffle %219 %219 0 3 
                                       f32_4 %221 = OpLoad %193 
                                       f32_4 %222 = OpVectorShuffle %221 %220 4 5 2 3 
                                                      OpStore %193 %222 
                                Private f32* %224 = OpAccessChain %193 %52 
                                         f32 %225 = OpLoad %224 
                                Uniform f32* %226 = OpAccessChain %27 %122 %52 
                                         f32 %227 = OpLoad %226 
                                         f32 %228 = OpFMul %225 %227 
                                                      OpStore %223 %228 
                                Private f32* %229 = OpAccessChain %193 %128 
                                         f32 %230 = OpLoad %229 
                                         f32 %231 = OpLoad %223 
                                         f32 %232 = OpFMul %230 %231 
                                Private f32* %233 = OpAccessChain %127 %52 
                                                      OpStore %233 %232 
                                Uniform f32* %234 = OpAccessChain %27 %176 
                                         f32 %235 = OpLoad %234 
                                Uniform f32* %236 = OpAccessChain %27 %176 
                                         f32 %237 = OpLoad %236 
                                Uniform f32* %238 = OpAccessChain %27 %181 
                                         f32 %239 = OpLoad %238 
                                Uniform f32* %240 = OpAccessChain %27 %181 
                                         f32 %241 = OpLoad %240 
                                       f32_4 %242 = OpCompositeConstruct %235 %237 %239 %241 
                              Uniform f32_4* %243 = OpAccessChain %27 %187 
                                       f32_4 %244 = OpLoad %243 
                                       f32_4 %245 = OpVectorShuffle %244 %244 0 0 0 0 
                                       f32_4 %246 = OpFMul %242 %245 
                                                      OpStore %193 %246 
                                       f32_2 %247 = OpLoad %96 
                                       f32_4 %248 = OpLoad %193 
                                       f32_2 %249 = OpVectorShuffle %248 %248 0 1 
                                       f32_2 %250 = OpFMul %247 %249 
                                       f32_2 %251 = OpLoad %21 
                                       f32_2 %252 = OpFAdd %250 %251 
                                                      OpStore %21 %252 
                                       f32_2 %253 = OpLoad %21 
                              Uniform f32_4* %254 = OpAccessChain %27 %98 
                                       f32_4 %255 = OpLoad %254 
                                       f32_2 %256 = OpVectorShuffle %255 %255 0 1 
                                       f32_2 %257 = OpFMul %253 %256 
                              Uniform f32_4* %258 = OpAccessChain %27 %98 
                                       f32_4 %259 = OpLoad %258 
                                       f32_2 %260 = OpVectorShuffle %259 %259 2 3 
                                       f32_2 %261 = OpFAdd %257 %260 
                                                      OpStore %21 %261 
                         read_only Texture2D %262 = OpLoad %109 
                                     sampler %263 = OpLoad %113 
                  read_only Texture2DSampled %264 = OpSampledImage %262 %263 
                                       f32_2 %265 = OpLoad %21 
                                       f32_4 %266 = OpImageSampleImplicitLod %264 %265 
                                       f32_2 %267 = OpVectorShuffle %266 %266 2 3 
                                                      OpStore %21 %267 
                                Private f32* %268 = OpAccessChain %21 %52 
                                         f32 %269 = OpLoad %268 
                                Uniform f32* %270 = OpAccessChain %27 %122 %52 
                                         f32 %271 = OpLoad %270 
                                         f32 %272 = OpFMul %269 %271 
                                Private f32* %273 = OpAccessChain %21 %52 
                                                      OpStore %273 %272 
                                Private f32* %274 = OpAccessChain %21 %128 
                                         f32 %275 = OpLoad %274 
                                Private f32* %276 = OpAccessChain %21 %52 
                                         f32 %277 = OpLoad %276 
                                         f32 %278 = OpFMul %275 %277 
                                Private f32* %279 = OpAccessChain %127 %69 
                                                      OpStore %279 %278 
                                       f32_4 %280 = OpLoad %40 
                                       f32_3 %281 = OpVectorShuffle %280 %280 0 0 0 
                                       f32_3 %282 = OpLoad %127 
                                       f32_3 %283 = OpFMul %281 %282 
                                                      OpStore %127 %283 
                                Private f32* %285 = OpAccessChain %9 %128 
                                                      OpStore %285 %284 
                         read_only Texture2D %287 = OpLoad %286 
                                     sampler %289 = OpLoad %288 
                  read_only Texture2DSampled %290 = OpSampledImage %287 %289 
                                       f32_3 %291 = OpLoad %9 
                                       f32_2 %292 = OpVectorShuffle %291 %291 0 1 
                                       f32_4 %293 = OpImageSampleImplicitLod %290 %292 
                                       f32_3 %294 = OpVectorShuffle %293 %293 0 1 2 
                                                      OpStore %9 %294 
                                       f32_3 %295 = OpLoad %9 
                                       f32_3 %296 = OpLoad %127 
                                       f32_3 %297 = OpFMul %295 %296 
                                                      OpStore %127 %297 
                                       f32_3 %298 = OpLoad %127 
                              Uniform f32_4* %299 = OpAccessChain %27 %29 
                                       f32_4 %300 = OpLoad %299 
                                       f32_3 %301 = OpVectorShuffle %300 %300 0 0 0 
                                       f32_3 %302 = OpFMul %298 %301 
                                                      OpStore %127 %302 
                                       f32_2 %303 = OpLoad vs_TEXCOORD0 
                                       f32_2 %304 = OpExtInst %1 10 %303 
                                       f32_4 %305 = OpLoad %40 
                                       f32_4 %306 = OpVectorShuffle %305 %304 4 1 2 5 
                                                      OpStore %40 %306 
                                       f32_4 %308 = OpLoad %40 
                                       f32_2 %309 = OpVectorShuffle %308 %308 0 3 
                                       f32_2 %310 = OpFNegate %309 
                                       f32_2 %311 = OpFAdd %310 %16 
                                       f32_4 %312 = OpLoad %307 
                                       f32_4 %313 = OpVectorShuffle %312 %311 4 5 2 3 
                                                      OpStore %307 %313 
                                       f32_4 %315 = OpLoad %307 
                                       f32_2 %316 = OpVectorShuffle %315 %315 0 1 
                                       f32_4 %317 = OpLoad %307 
                                       f32_2 %318 = OpVectorShuffle %317 %317 0 1 
                                         f32 %319 = OpDot %316 %318 
                                                      OpStore %314 %319 
                                         f32 %320 = OpLoad %314 
                                         f32 %321 = OpExtInst %1 31 %320 
                                                      OpStore %314 %321 
                                         f32 %322 = OpLoad %314 
                                         f32 %323 = OpFNegate %322 
                                         f32 %324 = OpFMul %323 %62 
                                         f32 %325 = OpFAdd %324 %64 
                                                      OpStore %314 %325 
                                         f32 %326 = OpLoad %314 
                                Uniform f32* %327 = OpAccessChain %27 %29 %69 
                                         f32 %328 = OpLoad %327 
                                         f32 %329 = OpFMul %326 %328 
                                                      OpStore %314 %329 
                                         f32 %330 = OpLoad %314 
                                         f32 %331 = OpExtInst %1 30 %330 
                                                      OpStore %314 %331 
                                         f32 %332 = OpLoad %314 
                                Uniform f32* %333 = OpAccessChain %27 %29 %81 
                                         f32 %334 = OpLoad %333 
                                         f32 %335 = OpFMul %332 %334 
                                                      OpStore %314 %335 
                                         f32 %336 = OpLoad %314 
                                         f32 %337 = OpExtInst %1 29 %336 
                                                      OpStore %314 %337 
                                         f32 %338 = OpLoad %314 
                                         f32 %339 = OpLoad %314 
                                         f32 %340 = OpFMul %338 %339 
                                                      OpStore %314 %340 
                                       f32_4 %341 = OpLoad %40 
                                       f32_2 %342 = OpVectorShuffle %341 %341 0 3 
                              Uniform f32_4* %343 = OpAccessChain %27 %98 
                                       f32_4 %344 = OpLoad %343 
                                       f32_2 %345 = OpVectorShuffle %344 %344 0 1 
                                       f32_2 %346 = OpFMul %342 %345 
                              Uniform f32_4* %347 = OpAccessChain %27 %98 
                                       f32_4 %348 = OpLoad %347 
                                       f32_2 %349 = OpVectorShuffle %348 %348 2 3 
                                       f32_2 %350 = OpFAdd %346 %349 
                                       f32_4 %351 = OpLoad %307 
                                       f32_4 %352 = OpVectorShuffle %351 %350 4 5 2 3 
                                                      OpStore %307 %352 
                         read_only Texture2D %353 = OpLoad %109 
                                     sampler %354 = OpLoad %113 
                  read_only Texture2DSampled %355 = OpSampledImage %353 %354 
                                       f32_4 %356 = OpLoad %307 
                                       f32_2 %357 = OpVectorShuffle %356 %356 0 1 
                                       f32_4 %358 = OpImageSampleImplicitLod %355 %357 
                                       f32_2 %359 = OpVectorShuffle %358 %358 1 3 
                                       f32_4 %360 = OpLoad %307 
                                       f32_4 %361 = OpVectorShuffle %360 %359 4 5 2 3 
                                                      OpStore %307 %361 
                                Private f32* %363 = OpAccessChain %307 %52 
                                         f32 %364 = OpLoad %363 
                                Uniform f32* %365 = OpAccessChain %27 %122 %52 
                                         f32 %366 = OpLoad %365 
                                         f32 %367 = OpFMul %364 %366 
                                                      OpStore %362 %367 
                                Private f32* %368 = OpAccessChain %307 %128 
                                         f32 %369 = OpLoad %368 
                                         f32 %370 = OpLoad %362 
                                         f32 %371 = OpFMul %369 %370 
                                Private f32* %372 = OpAccessChain %307 %128 
                                                      OpStore %372 %371 
                                       f32_2 %374 = OpLoad %96 
                                       f32_4 %375 = OpLoad %175 
                                       f32_2 %376 = OpVectorShuffle %375 %375 0 1 
                                       f32_2 %377 = OpFMul %374 %376 
                                       f32_4 %378 = OpLoad %40 
                                       f32_2 %379 = OpVectorShuffle %378 %378 0 3 
                                       f32_2 %380 = OpFAdd %377 %379 
                                       f32_3 %381 = OpLoad %373 
                                       f32_3 %382 = OpVectorShuffle %381 %380 3 4 2 
                                                      OpStore %373 %382 
                                       f32_2 %383 = OpLoad %96 
                                       f32_4 %384 = OpLoad %193 
                                       f32_2 %385 = OpVectorShuffle %384 %384 0 1 
                                       f32_2 %386 = OpFMul %383 %385 
                                       f32_4 %387 = OpLoad %40 
                                       f32_2 %388 = OpVectorShuffle %387 %387 0 3 
                                       f32_2 %389 = OpFAdd %386 %388 
                                       f32_4 %390 = OpLoad %40 
                                       f32_4 %391 = OpVectorShuffle %390 %389 4 1 2 5 
                                                      OpStore %40 %391 
                                       f32_4 %392 = OpLoad %40 
                                       f32_2 %393 = OpVectorShuffle %392 %392 0 3 
                              Uniform f32_4* %394 = OpAccessChain %27 %98 
                                       f32_4 %395 = OpLoad %394 
                                       f32_2 %396 = OpVectorShuffle %395 %395 0 1 
                                       f32_2 %397 = OpFMul %393 %396 
                              Uniform f32_4* %398 = OpAccessChain %27 %98 
                                       f32_4 %399 = OpLoad %398 
                                       f32_2 %400 = OpVectorShuffle %399 %399 2 3 
                                       f32_2 %401 = OpFAdd %397 %400 
                                       f32_4 %402 = OpLoad %40 
                                       f32_4 %403 = OpVectorShuffle %402 %401 4 1 2 5 
                                                      OpStore %40 %403 
                         read_only Texture2D %404 = OpLoad %109 
                                     sampler %405 = OpLoad %113 
                  read_only Texture2DSampled %406 = OpSampledImage %404 %405 
                                       f32_4 %407 = OpLoad %40 
                                       f32_2 %408 = OpVectorShuffle %407 %407 0 3 
                                       f32_4 %409 = OpImageSampleImplicitLod %406 %408 
                                       f32_2 %410 = OpVectorShuffle %409 %409 2 3 
                                       f32_4 %411 = OpLoad %40 
                                       f32_4 %412 = OpVectorShuffle %411 %410 4 1 2 5 
                                                      OpStore %40 %412 
                                       f32_3 %413 = OpLoad %373 
                                       f32_2 %414 = OpVectorShuffle %413 %413 0 1 
                              Uniform f32_4* %415 = OpAccessChain %27 %98 
                                       f32_4 %416 = OpLoad %415 
                                       f32_2 %417 = OpVectorShuffle %416 %416 0 1 
                                       f32_2 %418 = OpFMul %414 %417 
                              Uniform f32_4* %419 = OpAccessChain %27 %98 
                                       f32_4 %420 = OpLoad %419 
                                       f32_2 %421 = OpVectorShuffle %420 %420 2 3 
                                       f32_2 %422 = OpFAdd %418 %421 
                                       f32_3 %423 = OpLoad %373 
                                       f32_3 %424 = OpVectorShuffle %423 %422 3 4 2 
                                                      OpStore %373 %424 
                         read_only Texture2D %425 = OpLoad %109 
                                     sampler %426 = OpLoad %113 
                  read_only Texture2DSampled %427 = OpSampledImage %425 %426 
                                       f32_3 %428 = OpLoad %373 
                                       f32_2 %429 = OpVectorShuffle %428 %428 0 1 
                                       f32_4 %430 = OpImageSampleImplicitLod %427 %429 
                                       f32_2 %431 = OpVectorShuffle %430 %430 0 3 
                                       f32_3 %432 = OpLoad %373 
                                       f32_3 %433 = OpVectorShuffle %432 %431 3 4 2 
                                                      OpStore %373 %433 
                                Private f32* %434 = OpAccessChain %373 %52 
                                         f32 %435 = OpLoad %434 
                                Uniform f32* %436 = OpAccessChain %27 %122 %52 
                                         f32 %437 = OpLoad %436 
                                         f32 %438 = OpFMul %435 %437 
                                                      OpStore %362 %438 
                                Private f32* %439 = OpAccessChain %373 %128 
                                         f32 %440 = OpLoad %439 
                                         f32 %441 = OpLoad %362 
                                         f32 %442 = OpFMul %440 %441 
                                Private f32* %443 = OpAccessChain %307 %52 
                                                      OpStore %443 %442 
                                Private f32* %444 = OpAccessChain %40 %52 
                                         f32 %445 = OpLoad %444 
                                Uniform f32* %446 = OpAccessChain %27 %122 %52 
                                         f32 %447 = OpLoad %446 
                                         f32 %448 = OpFMul %445 %447 
                                Private f32* %449 = OpAccessChain %40 %52 
                                                      OpStore %449 %448 
                                Private f32* %450 = OpAccessChain %40 %81 
                                         f32 %451 = OpLoad %450 
                                Private f32* %452 = OpAccessChain %40 %52 
                                         f32 %453 = OpLoad %452 
                                         f32 %454 = OpFMul %451 %453 
                                Private f32* %455 = OpAccessChain %307 %69 
                                                      OpStore %455 %454 
                                         f32 %456 = OpLoad %314 
                                       f32_3 %457 = OpCompositeConstruct %456 %456 %456 
                                       f32_4 %458 = OpLoad %307 
                                       f32_3 %459 = OpVectorShuffle %458 %458 0 1 2 
                                       f32_3 %460 = OpFMul %457 %459 
                                       f32_4 %461 = OpLoad %307 
                                       f32_4 %462 = OpVectorShuffle %461 %460 4 5 6 3 
                                                      OpStore %307 %462 
                                       f32_3 %463 = OpLoad %9 
                                       f32_4 %464 = OpLoad %307 
                                       f32_3 %465 = OpVectorShuffle %464 %464 0 1 2 
                                       f32_3 %466 = OpFMul %463 %465 
                                       f32_4 %467 = OpLoad %307 
                                       f32_4 %468 = OpVectorShuffle %467 %466 4 5 6 3 
                                                      OpStore %307 %468 
                                       f32_4 %469 = OpLoad %307 
                                       f32_3 %470 = OpVectorShuffle %469 %469 0 1 2 
                              Uniform f32_4* %471 = OpAccessChain %27 %29 
                                       f32_4 %472 = OpLoad %471 
                                       f32_3 %473 = OpVectorShuffle %472 %472 0 0 0 
                                       f32_3 %474 = OpFMul %470 %473 
                                       f32_3 %475 = OpLoad %127 
                                       f32_3 %476 = OpFAdd %474 %475 
                                                      OpStore %127 %476 
                                       f32_4 %477 = OpLoad %135 
                                       f32_2 %478 = OpVectorShuffle %477 %477 2 3 
                                       f32_2 %481 = OpFMul %478 %480 
                                       f32_2 %482 = OpLoad vs_TEXCOORD0 
                                       f32_2 %483 = OpFAdd %481 %482 
                                       f32_4 %484 = OpLoad %40 
                                       f32_4 %485 = OpVectorShuffle %484 %483 4 1 2 5 
                                                      OpStore %40 %485 
                                       f32_4 %486 = OpLoad %135 
                                       f32_4 %490 = OpFMul %486 %489 
                                       f32_2 %491 = OpLoad vs_TEXCOORD0 
                                       f32_4 %492 = OpVectorShuffle %491 %491 0 1 0 1 
                                       f32_4 %493 = OpFAdd %490 %492 
                                                      OpStore %135 %493 
                                       f32_4 %494 = OpLoad %135 
                                       f32_4 %495 = OpExtInst %1 10 %494 
                                                      OpStore %135 %495 
                                       f32_4 %496 = OpLoad %40 
                                       f32_2 %497 = OpVectorShuffle %496 %496 0 3 
                                       f32_2 %498 = OpExtInst %1 10 %497 
                                       f32_4 %499 = OpLoad %40 
                                       f32_4 %500 = OpVectorShuffle %499 %498 4 1 2 5 
                                                      OpStore %40 %500 
                                       f32_4 %501 = OpLoad %40 
                                       f32_2 %502 = OpVectorShuffle %501 %501 0 3 
                                       f32_2 %503 = OpFNegate %502 
                                       f32_2 %504 = OpFAdd %503 %16 
                                       f32_4 %505 = OpLoad %307 
                                       f32_4 %506 = OpVectorShuffle %505 %504 4 5 2 3 
                                                      OpStore %307 %506 
                                       f32_4 %507 = OpLoad %307 
                                       f32_2 %508 = OpVectorShuffle %507 %507 0 1 
                                       f32_4 %509 = OpLoad %307 
                                       f32_2 %510 = OpVectorShuffle %509 %509 0 1 
                                         f32 %511 = OpDot %508 %510 
                                                      OpStore %314 %511 
                                         f32 %512 = OpLoad %314 
                                         f32 %513 = OpExtInst %1 31 %512 
                                                      OpStore %314 %513 
                                         f32 %514 = OpLoad %314 
                                         f32 %515 = OpFNegate %514 
                                         f32 %516 = OpFMul %515 %62 
                                         f32 %517 = OpFAdd %516 %64 
                                                      OpStore %314 %517 
                                         f32 %518 = OpLoad %314 
                                Uniform f32* %519 = OpAccessChain %27 %29 %69 
                                         f32 %520 = OpLoad %519 
                                         f32 %521 = OpFMul %518 %520 
                                                      OpStore %314 %521 
                                         f32 %522 = OpLoad %314 
                                         f32 %523 = OpExtInst %1 30 %522 
                                                      OpStore %314 %523 
                                         f32 %524 = OpLoad %314 
                                Uniform f32* %525 = OpAccessChain %27 %29 %81 
                                         f32 %526 = OpLoad %525 
                                         f32 %527 = OpFMul %524 %526 
                                                      OpStore %314 %527 
                                         f32 %528 = OpLoad %314 
                                         f32 %529 = OpExtInst %1 29 %528 
                                                      OpStore %314 %529 
                                         f32 %530 = OpLoad %314 
                                         f32 %531 = OpLoad %314 
                                         f32 %532 = OpFMul %530 %531 
                                                      OpStore %314 %532 
                                       f32_4 %533 = OpLoad %40 
                                       f32_2 %534 = OpVectorShuffle %533 %533 0 3 
                              Uniform f32_4* %535 = OpAccessChain %27 %98 
                                       f32_4 %536 = OpLoad %535 
                                       f32_2 %537 = OpVectorShuffle %536 %536 0 1 
                                       f32_2 %538 = OpFMul %534 %537 
                              Uniform f32_4* %539 = OpAccessChain %27 %98 
                                       f32_4 %540 = OpLoad %539 
                                       f32_2 %541 = OpVectorShuffle %540 %540 2 3 
                                       f32_2 %542 = OpFAdd %538 %541 
                                       f32_4 %543 = OpLoad %307 
                                       f32_4 %544 = OpVectorShuffle %543 %542 4 5 2 3 
                                                      OpStore %307 %544 
                         read_only Texture2D %545 = OpLoad %109 
                                     sampler %546 = OpLoad %113 
                  read_only Texture2DSampled %547 = OpSampledImage %545 %546 
                                       f32_4 %548 = OpLoad %307 
                                       f32_2 %549 = OpVectorShuffle %548 %548 0 1 
                                       f32_4 %550 = OpImageSampleImplicitLod %547 %549 
                                       f32_2 %551 = OpVectorShuffle %550 %550 1 3 
                                       f32_4 %552 = OpLoad %307 
                                       f32_4 %553 = OpVectorShuffle %552 %551 4 5 2 3 
                                                      OpStore %307 %553 
                                Private f32* %554 = OpAccessChain %307 %52 
                                         f32 %555 = OpLoad %554 
                                Uniform f32* %556 = OpAccessChain %27 %122 %52 
                                         f32 %557 = OpLoad %556 
                                         f32 %558 = OpFMul %555 %557 
                                                      OpStore %362 %558 
                                Private f32* %559 = OpAccessChain %307 %128 
                                         f32 %560 = OpLoad %559 
                                         f32 %561 = OpLoad %362 
                                         f32 %562 = OpFMul %560 %561 
                                Private f32* %563 = OpAccessChain %307 %128 
                                                      OpStore %563 %562 
                                       f32_2 %564 = OpLoad %96 
                                       f32_4 %565 = OpLoad %175 
                                       f32_2 %566 = OpVectorShuffle %565 %565 0 1 
                                       f32_2 %567 = OpFMul %564 %566 
                                       f32_4 %568 = OpLoad %40 
                                       f32_2 %569 = OpVectorShuffle %568 %568 0 3 
                                       f32_2 %570 = OpFAdd %567 %569 
                                       f32_3 %571 = OpLoad %373 
                                       f32_3 %572 = OpVectorShuffle %571 %570 3 4 2 
                                                      OpStore %373 %572 
                                       f32_2 %573 = OpLoad %96 
                                       f32_4 %574 = OpLoad %193 
                                       f32_2 %575 = OpVectorShuffle %574 %574 0 1 
                                       f32_2 %576 = OpFMul %573 %575 
                                       f32_4 %577 = OpLoad %40 
                                       f32_2 %578 = OpVectorShuffle %577 %577 0 3 
                                       f32_2 %579 = OpFAdd %576 %578 
                                       f32_4 %580 = OpLoad %40 
                                       f32_4 %581 = OpVectorShuffle %580 %579 4 1 2 5 
                                                      OpStore %40 %581 
                                       f32_4 %582 = OpLoad %40 
                                       f32_2 %583 = OpVectorShuffle %582 %582 0 3 
                              Uniform f32_4* %584 = OpAccessChain %27 %98 
                                       f32_4 %585 = OpLoad %584 
                                       f32_2 %586 = OpVectorShuffle %585 %585 0 1 
                                       f32_2 %587 = OpFMul %583 %586 
                              Uniform f32_4* %588 = OpAccessChain %27 %98 
                                       f32_4 %589 = OpLoad %588 
                                       f32_2 %590 = OpVectorShuffle %589 %589 2 3 
                                       f32_2 %591 = OpFAdd %587 %590 
                                       f32_4 %592 = OpLoad %40 
                                       f32_4 %593 = OpVectorShuffle %592 %591 4 1 2 5 
                                                      OpStore %40 %593 
                         read_only Texture2D %594 = OpLoad %109 
                                     sampler %595 = OpLoad %113 
                  read_only Texture2DSampled %596 = OpSampledImage %594 %595 
                                       f32_4 %597 = OpLoad %40 
                                       f32_2 %598 = OpVectorShuffle %597 %597 0 3 
                                       f32_4 %599 = OpImageSampleImplicitLod %596 %598 
                                       f32_2 %600 = OpVectorShuffle %599 %599 2 3 
                                       f32_4 %601 = OpLoad %40 
                                       f32_4 %602 = OpVectorShuffle %601 %600 4 1 2 5 
                                                      OpStore %40 %602 
                                       f32_3 %603 = OpLoad %373 
                                       f32_2 %604 = OpVectorShuffle %603 %603 0 1 
                              Uniform f32_4* %605 = OpAccessChain %27 %98 
                                       f32_4 %606 = OpLoad %605 
                                       f32_2 %607 = OpVectorShuffle %606 %606 0 1 
                                       f32_2 %608 = OpFMul %604 %607 
                              Uniform f32_4* %609 = OpAccessChain %27 %98 
                                       f32_4 %610 = OpLoad %609 
                                       f32_2 %611 = OpVectorShuffle %610 %610 2 3 
                                       f32_2 %612 = OpFAdd %608 %611 
                                       f32_3 %613 = OpLoad %373 
                                       f32_3 %614 = OpVectorShuffle %613 %612 3 4 2 
                                                      OpStore %373 %614 
                         read_only Texture2D %615 = OpLoad %109 
                                     sampler %616 = OpLoad %113 
                  read_only Texture2DSampled %617 = OpSampledImage %615 %616 
                                       f32_3 %618 = OpLoad %373 
                                       f32_2 %619 = OpVectorShuffle %618 %618 0 1 
                                       f32_4 %620 = OpImageSampleImplicitLod %617 %619 
                                       f32_2 %621 = OpVectorShuffle %620 %620 0 3 
                                       f32_3 %622 = OpLoad %373 
                                       f32_3 %623 = OpVectorShuffle %622 %621 3 4 2 
                                                      OpStore %373 %623 
                                Private f32* %624 = OpAccessChain %373 %52 
                                         f32 %625 = OpLoad %624 
                                Uniform f32* %626 = OpAccessChain %27 %122 %52 
                                         f32 %627 = OpLoad %626 
                                         f32 %628 = OpFMul %625 %627 
                                                      OpStore %362 %628 
                                Private f32* %629 = OpAccessChain %373 %128 
                                         f32 %630 = OpLoad %629 
                                         f32 %631 = OpLoad %362 
                                         f32 %632 = OpFMul %630 %631 
                                Private f32* %633 = OpAccessChain %307 %52 
                                                      OpStore %633 %632 
                                Private f32* %634 = OpAccessChain %40 %52 
                                         f32 %635 = OpLoad %634 
                                Uniform f32* %636 = OpAccessChain %27 %122 %52 
                                         f32 %637 = OpLoad %636 
                                         f32 %638 = OpFMul %635 %637 
                                Private f32* %639 = OpAccessChain %40 %52 
                                                      OpStore %639 %638 
                                Private f32* %640 = OpAccessChain %40 %81 
                                         f32 %641 = OpLoad %640 
                                Private f32* %642 = OpAccessChain %40 %52 
                                         f32 %643 = OpLoad %642 
                                         f32 %644 = OpFMul %641 %643 
                                Private f32* %645 = OpAccessChain %307 %69 
                                                      OpStore %645 %644 
                                         f32 %646 = OpLoad %314 
                                       f32_3 %647 = OpCompositeConstruct %646 %646 %646 
                                       f32_4 %648 = OpLoad %307 
                                       f32_3 %649 = OpVectorShuffle %648 %648 0 1 2 
                                       f32_3 %650 = OpFMul %647 %649 
                                       f32_4 %651 = OpLoad %307 
                                       f32_4 %652 = OpVectorShuffle %651 %650 4 5 6 3 
                                                      OpStore %307 %652 
                                       f32_3 %653 = OpLoad %9 
                                       f32_4 %654 = OpLoad %307 
                                       f32_3 %655 = OpVectorShuffle %654 %654 0 1 2 
                                       f32_3 %656 = OpFMul %653 %655 
                                       f32_4 %657 = OpLoad %307 
                                       f32_4 %658 = OpVectorShuffle %657 %656 4 5 6 3 
                                                      OpStore %307 %658 
                                       f32_4 %659 = OpLoad %307 
                                       f32_3 %660 = OpVectorShuffle %659 %659 0 1 2 
                              Uniform f32_4* %661 = OpAccessChain %27 %29 
                                       f32_4 %662 = OpLoad %661 
                                       f32_3 %663 = OpVectorShuffle %662 %662 0 0 0 
                                       f32_3 %664 = OpFMul %660 %663 
                                       f32_3 %665 = OpLoad %127 
                                       f32_3 %666 = OpFAdd %664 %665 
                                                      OpStore %127 %666 
                                       f32_4 %667 = OpLoad %135 
                                       f32_4 %668 = OpFNegate %667 
                                       f32_4 %670 = OpFAdd %668 %669 
                                                      OpStore %307 %670 
                                       f32_4 %671 = OpLoad %307 
                                       f32_2 %672 = OpVectorShuffle %671 %671 0 1 
                                       f32_4 %673 = OpLoad %307 
                                       f32_2 %674 = OpVectorShuffle %673 %673 0 1 
                                         f32 %675 = OpDot %672 %674 
                                                      OpStore %314 %675 
                                       f32_4 %676 = OpLoad %307 
                                       f32_2 %677 = OpVectorShuffle %676 %676 2 3 
                                       f32_4 %678 = OpLoad %307 
                                       f32_2 %679 = OpVectorShuffle %678 %678 2 3 
                                         f32 %680 = OpDot %677 %679 
                                Private f32* %681 = OpAccessChain %40 %52 
                                                      OpStore %681 %680 
                                Private f32* %682 = OpAccessChain %40 %52 
                                         f32 %683 = OpLoad %682 
                                         f32 %684 = OpExtInst %1 31 %683 
                                Private f32* %685 = OpAccessChain %40 %52 
                                                      OpStore %685 %684 
                                Private f32* %686 = OpAccessChain %40 %52 
                                         f32 %687 = OpLoad %686 
                                         f32 %688 = OpFNegate %687 
                                         f32 %689 = OpFMul %688 %62 
                                         f32 %690 = OpFAdd %689 %64 
                                Private f32* %691 = OpAccessChain %40 %52 
                                                      OpStore %691 %690 
                                Private f32* %692 = OpAccessChain %40 %52 
                                         f32 %693 = OpLoad %692 
                                Uniform f32* %694 = OpAccessChain %27 %29 %69 
                                         f32 %695 = OpLoad %694 
                                         f32 %696 = OpFMul %693 %695 
                                Private f32* %697 = OpAccessChain %40 %52 
                                                      OpStore %697 %696 
                                Private f32* %698 = OpAccessChain %40 %52 
                                         f32 %699 = OpLoad %698 
                                         f32 %700 = OpExtInst %1 30 %699 
                                Private f32* %701 = OpAccessChain %40 %52 
                                                      OpStore %701 %700 
                                Private f32* %702 = OpAccessChain %40 %52 
                                         f32 %703 = OpLoad %702 
                                Uniform f32* %704 = OpAccessChain %27 %29 %81 
                                         f32 %705 = OpLoad %704 
                                         f32 %706 = OpFMul %703 %705 
                                Private f32* %707 = OpAccessChain %40 %52 
                                                      OpStore %707 %706 
                                Private f32* %708 = OpAccessChain %40 %52 
                                         f32 %709 = OpLoad %708 
                                         f32 %710 = OpExtInst %1 29 %709 
                                Private f32* %711 = OpAccessChain %40 %52 
                                                      OpStore %711 %710 
                                Private f32* %712 = OpAccessChain %40 %52 
                                         f32 %713 = OpLoad %712 
                                Private f32* %714 = OpAccessChain %40 %52 
                                         f32 %715 = OpLoad %714 
                                         f32 %716 = OpFMul %713 %715 
                                Private f32* %717 = OpAccessChain %40 %52 
                                                      OpStore %717 %716 
                                         f32 %718 = OpLoad %314 
                                         f32 %719 = OpExtInst %1 31 %718 
                                                      OpStore %314 %719 
                                         f32 %720 = OpLoad %314 
                                         f32 %721 = OpFNegate %720 
                                         f32 %722 = OpFMul %721 %62 
                                         f32 %723 = OpFAdd %722 %64 
                                                      OpStore %314 %723 
                                         f32 %724 = OpLoad %314 
                                Uniform f32* %725 = OpAccessChain %27 %29 %69 
                                         f32 %726 = OpLoad %725 
                                         f32 %727 = OpFMul %724 %726 
                                                      OpStore %314 %727 
                                         f32 %728 = OpLoad %314 
                                         f32 %729 = OpExtInst %1 30 %728 
                                                      OpStore %314 %729 
                                         f32 %730 = OpLoad %314 
                                Uniform f32* %731 = OpAccessChain %27 %29 %81 
                                         f32 %732 = OpLoad %731 
                                         f32 %733 = OpFMul %730 %732 
                                                      OpStore %314 %733 
                                         f32 %734 = OpLoad %314 
                                         f32 %735 = OpExtInst %1 29 %734 
                                                      OpStore %314 %735 
                                         f32 %736 = OpLoad %314 
                                         f32 %737 = OpLoad %314 
                                         f32 %738 = OpFMul %736 %737 
                                                      OpStore %314 %738 
                                       f32_4 %739 = OpLoad %135 
                              Uniform f32_4* %740 = OpAccessChain %27 %98 
                                       f32_4 %741 = OpLoad %740 
                                       f32_4 %742 = OpVectorShuffle %741 %741 0 1 0 1 
                                       f32_4 %743 = OpFMul %739 %742 
                              Uniform f32_4* %744 = OpAccessChain %27 %98 
                                       f32_4 %745 = OpLoad %744 
                                       f32_4 %746 = OpVectorShuffle %745 %745 2 3 2 3 
                                       f32_4 %747 = OpFAdd %743 %746 
                                                      OpStore %307 %747 
                         read_only Texture2D %748 = OpLoad %109 
                                     sampler %749 = OpLoad %113 
                  read_only Texture2DSampled %750 = OpSampledImage %748 %749 
                                       f32_4 %751 = OpLoad %307 
                                       f32_2 %752 = OpVectorShuffle %751 %751 0 1 
                                       f32_4 %753 = OpImageSampleImplicitLod %750 %752 
                                       f32_2 %754 = OpVectorShuffle %753 %753 1 3 
                                       f32_4 %755 = OpLoad %307 
                                       f32_4 %756 = OpVectorShuffle %755 %754 4 5 2 3 
                                                      OpStore %307 %756 
                         read_only Texture2D %758 = OpLoad %109 
                                     sampler %759 = OpLoad %113 
                  read_only Texture2DSampled %760 = OpSampledImage %758 %759 
                                       f32_4 %761 = OpLoad %307 
                                       f32_2 %762 = OpVectorShuffle %761 %761 2 3 
                                       f32_4 %763 = OpImageSampleImplicitLod %760 %762 
                                       f32_2 %764 = OpVectorShuffle %763 %763 1 3 
                                                      OpStore %757 %764 
                                Private f32* %765 = OpAccessChain %307 %52 
                                         f32 %766 = OpLoad %765 
                                Uniform f32* %767 = OpAccessChain %27 %122 %52 
                                         f32 %768 = OpLoad %767 
                                         f32 %769 = OpFMul %766 %768 
                                                      OpStore %223 %769 
                                Private f32* %770 = OpAccessChain %307 %128 
                                         f32 %771 = OpLoad %770 
                                         f32 %772 = OpLoad %223 
                                         f32 %773 = OpFMul %771 %772 
                                Private f32* %774 = OpAccessChain %373 %128 
                                                      OpStore %774 %773 
                                       f32_2 %776 = OpLoad %96 
                                       f32_4 %777 = OpVectorShuffle %776 %776 0 1 0 1 
                                       f32_4 %778 = OpLoad %175 
                                       f32_4 %779 = OpVectorShuffle %778 %778 0 1 0 1 
                                       f32_4 %780 = OpFMul %777 %779 
                                       f32_4 %781 = OpLoad %135 
                                       f32_4 %782 = OpFAdd %780 %781 
                                                      OpStore %775 %782 
                                       f32_2 %783 = OpLoad %96 
                                       f32_4 %784 = OpVectorShuffle %783 %783 0 1 0 1 
                                       f32_4 %785 = OpLoad %193 
                                       f32_4 %786 = OpVectorShuffle %785 %785 0 1 0 1 
                                       f32_4 %787 = OpFMul %784 %786 
                                       f32_4 %788 = OpLoad %135 
                                       f32_4 %789 = OpFAdd %787 %788 
                                                      OpStore %135 %789 
                                       f32_4 %790 = OpLoad %135 
                              Uniform f32_4* %791 = OpAccessChain %27 %98 
                                       f32_4 %792 = OpLoad %791 
                                       f32_4 %793 = OpVectorShuffle %792 %792 0 1 0 1 
                                       f32_4 %794 = OpFMul %790 %793 
                              Uniform f32_4* %795 = OpAccessChain %27 %98 
                                       f32_4 %796 = OpLoad %795 
                                       f32_4 %797 = OpVectorShuffle %796 %796 2 3 2 3 
                                       f32_4 %798 = OpFAdd %794 %797 
                                                      OpStore %135 %798 
                                       f32_4 %799 = OpLoad %775 
                              Uniform f32_4* %800 = OpAccessChain %27 %98 
                                       f32_4 %801 = OpLoad %800 
                                       f32_4 %802 = OpVectorShuffle %801 %801 0 1 0 1 
                                       f32_4 %803 = OpFMul %799 %802 
                              Uniform f32_4* %804 = OpAccessChain %27 %98 
                                       f32_4 %805 = OpLoad %804 
                                       f32_4 %806 = OpVectorShuffle %805 %805 2 3 2 3 
                                       f32_4 %807 = OpFAdd %803 %806 
                                                      OpStore %775 %807 
                         read_only Texture2D %808 = OpLoad %109 
                                     sampler %809 = OpLoad %113 
                  read_only Texture2DSampled %810 = OpSampledImage %808 %809 
                                       f32_4 %811 = OpLoad %775 
                                       f32_2 %812 = OpVectorShuffle %811 %811 0 1 
                                       f32_4 %813 = OpImageSampleImplicitLod %810 %812 
                                       f32_2 %814 = OpVectorShuffle %813 %813 0 3 
                                       f32_4 %815 = OpLoad %175 
                                       f32_4 %816 = OpVectorShuffle %815 %814 4 5 2 3 
                                                      OpStore %175 %816 
                         read_only Texture2D %817 = OpLoad %109 
                                     sampler %818 = OpLoad %113 
                  read_only Texture2DSampled %819 = OpSampledImage %817 %818 
                                       f32_4 %820 = OpLoad %775 
                                       f32_2 %821 = OpVectorShuffle %820 %820 2 3 
                                       f32_4 %822 = OpImageSampleImplicitLod %819 %821 
                                       f32_2 %823 = OpVectorShuffle %822 %822 0 3 
                                       f32_4 %824 = OpLoad %193 
                                       f32_4 %825 = OpVectorShuffle %824 %823 4 5 2 3 
                                                      OpStore %193 %825 
                                Private f32* %826 = OpAccessChain %175 %52 
                                         f32 %827 = OpLoad %826 
                                Uniform f32* %828 = OpAccessChain %27 %122 %52 
                                         f32 %829 = OpLoad %828 
                                         f32 %830 = OpFMul %827 %829 
                                                      OpStore %223 %830 
                                Private f32* %831 = OpAccessChain %175 %128 
                                         f32 %832 = OpLoad %831 
                                         f32 %833 = OpLoad %223 
                                         f32 %834 = OpFMul %832 %833 
                                Private f32* %835 = OpAccessChain %373 %52 
                                                      OpStore %835 %834 
                         read_only Texture2D %836 = OpLoad %109 
                                     sampler %837 = OpLoad %113 
                  read_only Texture2DSampled %838 = OpSampledImage %836 %837 
                                       f32_4 %839 = OpLoad %135 
                                       f32_2 %840 = OpVectorShuffle %839 %839 0 1 
                                       f32_4 %841 = OpImageSampleImplicitLod %838 %840 
                                       f32_2 %842 = OpVectorShuffle %841 %841 2 3 
                                       f32_4 %843 = OpLoad %135 
                                       f32_4 %844 = OpVectorShuffle %843 %842 4 5 2 3 
                                                      OpStore %135 %844 
                         read_only Texture2D %846 = OpLoad %109 
                                     sampler %847 = OpLoad %113 
                  read_only Texture2DSampled %848 = OpSampledImage %846 %847 
                                       f32_4 %849 = OpLoad %135 
                                       f32_2 %850 = OpVectorShuffle %849 %849 2 3 
                                       f32_4 %851 = OpImageSampleImplicitLod %848 %850 
                                       f32_2 %852 = OpVectorShuffle %851 %851 2 3 
                                                      OpStore %845 %852 
                                Private f32* %853 = OpAccessChain %135 %52 
                                         f32 %854 = OpLoad %853 
                                Uniform f32* %855 = OpAccessChain %27 %122 %52 
                                         f32 %856 = OpLoad %855 
                                         f32 %857 = OpFMul %854 %856 
                                                      OpStore %223 %857 
                                Private f32* %858 = OpAccessChain %135 %128 
                                         f32 %859 = OpLoad %858 
                                         f32 %860 = OpLoad %223 
                                         f32 %861 = OpFMul %859 %860 
                                Private f32* %862 = OpAccessChain %373 %69 
                                                      OpStore %862 %861 
                                         f32 %863 = OpLoad %314 
                                       f32_3 %864 = OpCompositeConstruct %863 %863 %863 
                                       f32_3 %865 = OpLoad %373 
                                       f32_3 %866 = OpFMul %864 %865 
                                                      OpStore %373 %866 
                                       f32_3 %867 = OpLoad %9 
                                       f32_3 %868 = OpLoad %373 
                                       f32_3 %869 = OpFMul %867 %868 
                                                      OpStore %373 %869 
                                       f32_3 %870 = OpLoad %373 
                              Uniform f32_4* %871 = OpAccessChain %27 %29 
                                       f32_4 %872 = OpLoad %871 
                                       f32_3 %873 = OpVectorShuffle %872 %872 0 0 0 
                                       f32_3 %874 = OpFMul %870 %873 
                                       f32_3 %875 = OpLoad %127 
                                       f32_3 %876 = OpFAdd %874 %875 
                                                      OpStore %127 %876 
                                Private f32* %877 = OpAccessChain %757 %52 
                                         f32 %878 = OpLoad %877 
                                Uniform f32* %879 = OpAccessChain %27 %122 %52 
                                         f32 %880 = OpLoad %879 
                                         f32 %881 = OpFMul %878 %880 
                                                      OpStore %314 %881 
                                Private f32* %882 = OpAccessChain %757 %128 
                                         f32 %883 = OpLoad %882 
                                         f32 %884 = OpLoad %314 
                                         f32 %885 = OpFMul %883 %884 
                                Private f32* %886 = OpAccessChain %307 %128 
                                                      OpStore %886 %885 
                                Private f32* %887 = OpAccessChain %193 %52 
                                         f32 %888 = OpLoad %887 
                                Uniform f32* %889 = OpAccessChain %27 %122 %52 
                                         f32 %890 = OpLoad %889 
                                         f32 %891 = OpFMul %888 %890 
                                                      OpStore %314 %891 
                                Private f32* %892 = OpAccessChain %193 %128 
                                         f32 %893 = OpLoad %892 
                                         f32 %894 = OpLoad %314 
                                         f32 %895 = OpFMul %893 %894 
                                Private f32* %896 = OpAccessChain %307 %52 
                                                      OpStore %896 %895 
                                Private f32* %897 = OpAccessChain %845 %52 
                                         f32 %898 = OpLoad %897 
                                Uniform f32* %899 = OpAccessChain %27 %122 %52 
                                         f32 %900 = OpLoad %899 
                                         f32 %901 = OpFMul %898 %900 
                                                      OpStore %314 %901 
                                Private f32* %902 = OpAccessChain %845 %128 
                                         f32 %903 = OpLoad %902 
                                         f32 %904 = OpLoad %314 
                                         f32 %905 = OpFMul %903 %904 
                                Private f32* %906 = OpAccessChain %307 %69 
                                                      OpStore %906 %905 
                                       f32_4 %907 = OpLoad %40 
                                       f32_3 %908 = OpVectorShuffle %907 %907 0 0 0 
                                       f32_4 %909 = OpLoad %307 
                                       f32_3 %910 = OpVectorShuffle %909 %909 0 1 2 
                                       f32_3 %911 = OpFMul %908 %910 
                                       f32_4 %912 = OpLoad %135 
                                       f32_4 %913 = OpVectorShuffle %912 %911 4 5 6 3 
                                                      OpStore %135 %913 
                                       f32_3 %914 = OpLoad %9 
                                       f32_4 %915 = OpLoad %135 
                                       f32_3 %916 = OpVectorShuffle %915 %915 0 1 2 
                                       f32_3 %917 = OpFMul %914 %916 
                                       f32_4 %918 = OpLoad %135 
                                       f32_4 %919 = OpVectorShuffle %918 %917 4 5 6 3 
                                                      OpStore %135 %919 
                                       f32_4 %920 = OpLoad %135 
                                       f32_3 %921 = OpVectorShuffle %920 %920 0 1 2 
                              Uniform f32_4* %922 = OpAccessChain %27 %29 
                                       f32_4 %923 = OpLoad %922 
                                       f32_3 %924 = OpVectorShuffle %923 %923 0 0 0 
                                       f32_3 %925 = OpFMul %921 %924 
                                       f32_3 %926 = OpLoad %127 
                                       f32_3 %927 = OpFAdd %925 %926 
                                                      OpStore %127 %927 
                                       f32_2 %928 = OpLoad %96 
                              Uniform f32_4* %930 = OpAccessChain %27 %929 
                                       f32_4 %931 = OpLoad %930 
                                       f32_2 %932 = OpVectorShuffle %931 %931 1 1 
                                       f32_2 %933 = OpFMul %928 %932 
                                       f32_2 %934 = OpLoad vs_TEXCOORD0 
                                       f32_2 %935 = OpFAdd %933 %934 
                                       f32_4 %936 = OpLoad %40 
                                       f32_4 %937 = OpVectorShuffle %936 %935 4 1 2 5 
                                                      OpStore %40 %937 
                                       f32_4 %938 = OpLoad %40 
                                       f32_2 %939 = OpVectorShuffle %938 %938 0 3 
                                       f32_2 %940 = OpExtInst %1 10 %939 
                                       f32_4 %941 = OpLoad %40 
                                       f32_4 %942 = OpVectorShuffle %941 %940 4 1 2 5 
                                                      OpStore %40 %942 
                                       f32_2 %943 = OpLoad %96 
                                       f32_4 %944 = OpLoad %175 
                                       f32_2 %945 = OpVectorShuffle %944 %944 2 3 
                                       f32_2 %946 = OpFMul %943 %945 
                                       f32_4 %947 = OpLoad %40 
                                       f32_2 %948 = OpVectorShuffle %947 %947 0 3 
                                       f32_2 %949 = OpFAdd %946 %948 
                                       f32_4 %950 = OpLoad %135 
                                       f32_4 %951 = OpVectorShuffle %950 %949 4 5 2 3 
                                                      OpStore %135 %951 
                                       f32_2 %952 = OpLoad %96 
                                       f32_4 %953 = OpLoad %193 
                                       f32_2 %954 = OpVectorShuffle %953 %953 2 3 
                                       f32_2 %955 = OpFMul %952 %954 
                                       f32_4 %956 = OpLoad %40 
                                       f32_2 %957 = OpVectorShuffle %956 %956 0 3 
                                       f32_2 %958 = OpFAdd %955 %957 
                                                      OpStore %96 %958 
                                       f32_2 %959 = OpLoad %96 
                              Uniform f32_4* %960 = OpAccessChain %27 %98 
                                       f32_4 %961 = OpLoad %960 
                                       f32_2 %962 = OpVectorShuffle %961 %961 0 1 
                                       f32_2 %963 = OpFMul %959 %962 
                              Uniform f32_4* %964 = OpAccessChain %27 %98 
                                       f32_4 %965 = OpLoad %964 
                                       f32_2 %966 = OpVectorShuffle %965 %965 2 3 
                                       f32_2 %967 = OpFAdd %963 %966 
                                                      OpStore %96 %967 
                         read_only Texture2D %968 = OpLoad %109 
                                     sampler %969 = OpLoad %113 
                  read_only Texture2DSampled %970 = OpSampledImage %968 %969 
                                       f32_2 %971 = OpLoad %96 
                                       f32_4 %972 = OpImageSampleImplicitLod %970 %971 
                                       f32_2 %973 = OpVectorShuffle %972 %972 2 3 
                                                      OpStore %96 %973 
                                       f32_4 %974 = OpLoad %135 
                                       f32_2 %975 = OpVectorShuffle %974 %974 0 1 
                              Uniform f32_4* %976 = OpAccessChain %27 %98 
                                       f32_4 %977 = OpLoad %976 
                                       f32_2 %978 = OpVectorShuffle %977 %977 0 1 
                                       f32_2 %979 = OpFMul %975 %978 
                              Uniform f32_4* %980 = OpAccessChain %27 %98 
                                       f32_4 %981 = OpLoad %980 
                                       f32_2 %982 = OpVectorShuffle %981 %981 2 3 
                                       f32_2 %983 = OpFAdd %979 %982 
                                       f32_4 %984 = OpLoad %135 
                                       f32_4 %985 = OpVectorShuffle %984 %983 4 5 2 3 
                                                      OpStore %135 %985 
                         read_only Texture2D %986 = OpLoad %109 
                                     sampler %987 = OpLoad %113 
                  read_only Texture2DSampled %988 = OpSampledImage %986 %987 
                                       f32_4 %989 = OpLoad %135 
                                       f32_2 %990 = OpVectorShuffle %989 %989 0 1 
                                       f32_4 %991 = OpImageSampleImplicitLod %988 %990 
                                       f32_2 %992 = OpVectorShuffle %991 %991 0 3 
                                       f32_4 %993 = OpLoad %135 
                                       f32_4 %994 = OpVectorShuffle %993 %992 4 5 2 3 
                                                      OpStore %135 %994 
                                Private f32* %995 = OpAccessChain %135 %52 
                                         f32 %996 = OpLoad %995 
                                Uniform f32* %997 = OpAccessChain %27 %122 %52 
                                         f32 %998 = OpLoad %997 
                                         f32 %999 = OpFMul %996 %998 
                                                      OpStore %314 %999 
                               Private f32* %1000 = OpAccessChain %135 %128 
                                        f32 %1001 = OpLoad %1000 
                                        f32 %1002 = OpLoad %314 
                                        f32 %1003 = OpFMul %1001 %1002 
                               Private f32* %1004 = OpAccessChain %135 %52 
                                                      OpStore %1004 %1003 
                               Private f32* %1005 = OpAccessChain %96 %52 
                                        f32 %1006 = OpLoad %1005 
                               Uniform f32* %1007 = OpAccessChain %27 %122 %52 
                                        f32 %1008 = OpLoad %1007 
                                        f32 %1009 = OpFMul %1006 %1008 
                                                      OpStore %314 %1009 
                               Private f32* %1010 = OpAccessChain %96 %128 
                                        f32 %1011 = OpLoad %1010 
                                        f32 %1012 = OpLoad %314 
                                        f32 %1013 = OpFMul %1011 %1012 
                               Private f32* %1014 = OpAccessChain %135 %69 
                                                      OpStore %1014 %1013 
                                      f32_4 %1015 = OpLoad %40 
                                      f32_2 %1016 = OpVectorShuffle %1015 %1015 0 3 
                                      f32_2 %1017 = OpFNegate %1016 
                                      f32_2 %1018 = OpFAdd %1017 %16 
                                                      OpStore %96 %1018 
                                      f32_4 %1019 = OpLoad %40 
                                      f32_2 %1020 = OpVectorShuffle %1019 %1019 0 3 
                             Uniform f32_4* %1021 = OpAccessChain %27 %98 
                                      f32_4 %1022 = OpLoad %1021 
                                      f32_2 %1023 = OpVectorShuffle %1022 %1022 0 1 
                                      f32_2 %1024 = OpFMul %1020 %1023 
                             Uniform f32_4* %1025 = OpAccessChain %27 %98 
                                      f32_4 %1026 = OpLoad %1025 
                                      f32_2 %1027 = OpVectorShuffle %1026 %1026 2 3 
                                      f32_2 %1028 = OpFAdd %1024 %1027 
                                      f32_4 %1029 = OpLoad %40 
                                      f32_4 %1030 = OpVectorShuffle %1029 %1028 4 1 2 5 
                                                      OpStore %40 %1030 
                        read_only Texture2D %1031 = OpLoad %109 
                                    sampler %1032 = OpLoad %113 
                 read_only Texture2DSampled %1033 = OpSampledImage %1031 %1032 
                                      f32_4 %1034 = OpLoad %40 
                                      f32_2 %1035 = OpVectorShuffle %1034 %1034 0 3 
                                      f32_4 %1036 = OpImageSampleImplicitLod %1033 %1035 
                                      f32_2 %1037 = OpVectorShuffle %1036 %1036 1 3 
                                      f32_4 %1038 = OpLoad %40 
                                      f32_4 %1039 = OpVectorShuffle %1038 %1037 4 1 2 5 
                                                      OpStore %40 %1039 
                                      f32_2 %1040 = OpLoad %96 
                                      f32_2 %1041 = OpLoad %96 
                                        f32 %1042 = OpDot %1040 %1041 
                                                      OpStore %314 %1042 
                                        f32 %1043 = OpLoad %314 
                                        f32 %1044 = OpExtInst %1 31 %1043 
                                                      OpStore %314 %1044 
                                        f32 %1045 = OpLoad %314 
                                        f32 %1046 = OpFNegate %1045 
                                        f32 %1047 = OpFMul %1046 %62 
                                        f32 %1048 = OpFAdd %1047 %64 
                                                      OpStore %314 %1048 
                                        f32 %1049 = OpLoad %314 
                               Uniform f32* %1050 = OpAccessChain %27 %929 %69 
                                        f32 %1051 = OpLoad %1050 
                                        f32 %1052 = OpFMul %1049 %1051 
                                                      OpStore %314 %1052 
                                        f32 %1053 = OpLoad %314 
                                        f32 %1054 = OpExtInst %1 30 %1053 
                                                      OpStore %314 %1054 
                                        f32 %1055 = OpLoad %314 
                               Uniform f32* %1056 = OpAccessChain %27 %929 %81 
                                        f32 %1057 = OpLoad %1056 
                                        f32 %1058 = OpFMul %1055 %1057 
                                                      OpStore %314 %1058 
                                        f32 %1059 = OpLoad %314 
                                        f32 %1060 = OpExtInst %1 29 %1059 
                                                      OpStore %314 %1060 
                               Private f32* %1061 = OpAccessChain %40 %52 
                                        f32 %1062 = OpLoad %1061 
                               Uniform f32* %1063 = OpAccessChain %27 %122 %52 
                                        f32 %1064 = OpLoad %1063 
                                        f32 %1065 = OpFMul %1062 %1064 
                               Private f32* %1066 = OpAccessChain %40 %52 
                                                      OpStore %1066 %1065 
                               Private f32* %1067 = OpAccessChain %40 %81 
                                        f32 %1068 = OpLoad %1067 
                               Private f32* %1069 = OpAccessChain %40 %52 
                                        f32 %1070 = OpLoad %1069 
                                        f32 %1071 = OpFMul %1068 %1070 
                               Private f32* %1072 = OpAccessChain %135 %128 
                                                      OpStore %1072 %1071 
                                        f32 %1073 = OpLoad %314 
                                      f32_3 %1074 = OpCompositeConstruct %1073 %1073 %1073 
                                      f32_4 %1075 = OpLoad %135 
                                      f32_3 %1076 = OpVectorShuffle %1075 %1075 0 1 2 
                                      f32_3 %1077 = OpFMul %1074 %1076 
                                      f32_4 %1078 = OpLoad %40 
                                      f32_4 %1079 = OpVectorShuffle %1078 %1077 4 5 6 3 
                                                      OpStore %40 %1079 
                                      f32_4 %1080 = OpLoad %40 
                                      f32_3 %1081 = OpVectorShuffle %1080 %1080 0 1 2 
                             Uniform f32_4* %1082 = OpAccessChain %27 %929 
                                      f32_4 %1083 = OpLoad %1082 
                                      f32_3 %1084 = OpVectorShuffle %1083 %1083 0 0 0 
                                      f32_3 %1085 = OpFMul %1081 %1084 
                                      f32_4 %1086 = OpLoad %40 
                                      f32_4 %1087 = OpVectorShuffle %1086 %1085 4 5 6 3 
                                                      OpStore %40 %1087 
                                      f32_4 %1088 = OpLoad %40 
                                      f32_3 %1089 = OpVectorShuffle %1088 %1088 0 1 2 
                                      f32_3 %1090 = OpLoad %9 
                                      f32_3 %1091 = OpFMul %1089 %1090 
                                      f32_3 %1092 = OpLoad %127 
                                      f32_3 %1093 = OpFAdd %1091 %1092 
                                                      OpStore %9 %1093 
                                      f32_3 %1094 = OpLoad %9 
                             Uniform f32_4* %1095 = OpAccessChain %27 %122 
                                      f32_4 %1096 = OpLoad %1095 
                                      f32_3 %1097 = OpVectorShuffle %1096 %1096 1 1 1 
                                      f32_3 %1098 = OpFMul %1094 %1097 
                                                      OpStore %9 %1098 
                               Private f32* %1099 = OpAccessChain %9 %128 
                                        f32 %1100 = OpLoad %1099 
                               Private f32* %1101 = OpAccessChain %9 %52 
                                        f32 %1102 = OpLoad %1101 
                                        f32 %1103 = OpExtInst %1 40 %1100 %1102 
                                                      OpStore %314 %1103 
                               Private f32* %1104 = OpAccessChain %9 %69 
                                        f32 %1105 = OpLoad %1104 
                                        f32 %1107 = OpExtInst %1 40 %1105 %1106 
                               Private f32* %1108 = OpAccessChain %40 %52 
                                                      OpStore %1108 %1107 
                                        f32 %1109 = OpLoad %314 
                               Private f32* %1110 = OpAccessChain %40 %52 
                                        f32 %1111 = OpLoad %1110 
                                        f32 %1112 = OpExtInst %1 40 %1109 %1111 
                                                      OpStore %314 %1112 
                                        f32 %1113 = OpLoad %314 
                                        f32 %1114 = OpExtInst %1 37 %1113 %64 
                                                      OpStore %314 %1114 
                                        f32 %1115 = OpLoad %314 
                                        f32 %1117 = OpFMul %1115 %1116 
                                                      OpStore %314 %1117 
                                        f32 %1118 = OpLoad %314 
                                        f32 %1119 = OpExtInst %1 9 %1118 
                                                      OpStore %314 %1119 
                                        f32 %1120 = OpLoad %314 
                                        f32 %1122 = OpFMul %1120 %1121 
                                                      OpStore %314 %1122 
                                      f32_3 %1125 = OpLoad %9 
                                        f32 %1126 = OpLoad %314 
                                      f32_3 %1127 = OpCompositeConstruct %1126 %1126 %1126 
                                      f32_3 %1128 = OpFDiv %1125 %1127 
                                      f32_4 %1129 = OpLoad %1124 
                                      f32_4 %1130 = OpVectorShuffle %1129 %1128 4 5 6 3 
                                                      OpStore %1124 %1130 
                                        f32 %1131 = OpLoad %314 
                                Output f32* %1133 = OpAccessChain %1124 %81 
                                                      OpStore %1133 %1131 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "AB_HIGH_PRECISION" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "AB_HIGH_PRECISION" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in  vec4 in_POSITION0;
in  vec2 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _LensFlareGhostsParams;
uniform 	vec4 _LensFlareHaloParams;
uniform 	float _LensFlareGhostChrDistortion;
uniform 	float _LensFlareHaloChrDistortion;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _MainTex_TexelSize;
UNITY_LOCATION(0) uniform  sampler2D _LensFlareLUT;
UNITY_LOCATION(1) uniform  sampler2D _MainTex;
in  vec2 vs_TEXCOORD0;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
vec4 u_xlat6;
vec4 u_xlat7;
vec4 u_xlat8;
vec4 u_xlat9;
vec2 u_xlat11;
vec2 u_xlat20;
float u_xlat30;
void main()
{
    u_xlat0.xy = (-vs_TEXCOORD0.xy) + vec2(0.5, 0.5);
    u_xlat20.xy = u_xlat0.xy * _LensFlareGhostsParams.yy + vs_TEXCOORD0.xy;
    u_xlat20.xy = fract(u_xlat20.xy);
    u_xlat1.xy = (-u_xlat20.xy) + vec2(0.5, 0.5);
    u_xlat1.x = dot(u_xlat1.xy, u_xlat1.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlat1.x = (-u_xlat1.x) * 1.41419995 + 1.0;
    u_xlat1.x = u_xlat1.x * _LensFlareGhostsParams.z;
    u_xlat1.x = log2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _LensFlareGhostsParams.w;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat11.xy = u_xlat20.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat2 = texture(_MainTex, u_xlat11.xy);
    u_xlat3 = u_xlat0.xyxy * _LensFlareGhostsParams.yyyy;
    u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * 1.41419995;
    u_xlat0.x = fract(u_xlat0.x);
    u_xlat11.x = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat11.x = inversesqrt(u_xlat11.x);
    u_xlat11.xy = u_xlat11.xx * u_xlat3.zw;
    u_xlat4 = vec4(_LensFlareGhostChrDistortion, _LensFlareGhostChrDistortion, _LensFlareHaloChrDistortion, _LensFlareHaloChrDistortion) * (-_MainTex_TexelSize.xxxx);
    u_xlat5.xy = u_xlat11.xy * u_xlat4.xy + u_xlat20.xy;
    u_xlat5.xy = u_xlat5.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat5 = texture(_MainTex, u_xlat5.xy);
    u_xlat2.x = u_xlat5.x;
    u_xlat5 = vec4(_LensFlareGhostChrDistortion, _LensFlareGhostChrDistortion, _LensFlareHaloChrDistortion, _LensFlareHaloChrDistortion) * _MainTex_TexelSize.xxxx;
    u_xlat20.xy = u_xlat11.xy * u_xlat5.xy + u_xlat20.xy;
    u_xlat20.xy = u_xlat20.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat6 = texture(_MainTex, u_xlat20.xy);
    u_xlat2.z = u_xlat6.z;
    u_xlat2.xyz = u_xlat1.xxx * u_xlat2.xyz;
    u_xlat0.y = 0.0;
    u_xlat0 = texture(_LensFlareLUT, u_xlat0.xy);
    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz * _LensFlareGhostsParams.xxx;
    u_xlat1.xw = fract(vs_TEXCOORD0.xy);
    u_xlat6.xy = (-u_xlat1.xw) + vec2(0.5, 0.5);
    u_xlat30 = dot(u_xlat6.xy, u_xlat6.xy);
    u_xlat30 = sqrt(u_xlat30);
    u_xlat30 = (-u_xlat30) * 1.41419995 + 1.0;
    u_xlat30 = u_xlat30 * _LensFlareGhostsParams.z;
    u_xlat30 = log2(u_xlat30);
    u_xlat30 = u_xlat30 * _LensFlareGhostsParams.w;
    u_xlat30 = exp2(u_xlat30);
    u_xlat30 = u_xlat30 * u_xlat30;
    u_xlat6.xy = u_xlat1.xw * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat6 = texture(_MainTex, u_xlat6.xy);
    u_xlat7.xy = u_xlat11.xy * u_xlat4.xy + u_xlat1.xw;
    u_xlat1.xw = u_xlat11.xy * u_xlat5.xy + u_xlat1.xw;
    u_xlat1.xw = u_xlat1.xw * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat8 = texture(_MainTex, u_xlat1.xw);
    u_xlat6.z = u_xlat8.z;
    u_xlat1.xw = u_xlat7.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat7 = texture(_MainTex, u_xlat1.xw);
    u_xlat6.x = u_xlat7.x;
    u_xlat6.xyz = vec3(u_xlat30) * u_xlat6.xyz;
    u_xlat6.xyz = u_xlat0.xyz * u_xlat6.xyz;
    u_xlat2.xyz = u_xlat6.xyz * _LensFlareGhostsParams.xxx + u_xlat2.xyz;
    u_xlat1.xw = u_xlat3.zw * vec2(2.0, 2.0) + vs_TEXCOORD0.xy;
    u_xlat3 = u_xlat3 * vec4(3.0, 3.0, 4.0, 4.0) + vs_TEXCOORD0.xyxy;
    u_xlat3 = fract(u_xlat3);
    u_xlat1.xw = fract(u_xlat1.xw);
    u_xlat6.xy = (-u_xlat1.xw) + vec2(0.5, 0.5);
    u_xlat30 = dot(u_xlat6.xy, u_xlat6.xy);
    u_xlat30 = sqrt(u_xlat30);
    u_xlat30 = (-u_xlat30) * 1.41419995 + 1.0;
    u_xlat30 = u_xlat30 * _LensFlareGhostsParams.z;
    u_xlat30 = log2(u_xlat30);
    u_xlat30 = u_xlat30 * _LensFlareGhostsParams.w;
    u_xlat30 = exp2(u_xlat30);
    u_xlat30 = u_xlat30 * u_xlat30;
    u_xlat6.xy = u_xlat1.xw * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat6 = texture(_MainTex, u_xlat6.xy);
    u_xlat7.xy = u_xlat11.xy * u_xlat4.xy + u_xlat1.xw;
    u_xlat1.xw = u_xlat11.xy * u_xlat5.xy + u_xlat1.xw;
    u_xlat1.xw = u_xlat1.xw * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat8 = texture(_MainTex, u_xlat1.xw);
    u_xlat6.z = u_xlat8.z;
    u_xlat1.xw = u_xlat7.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat7 = texture(_MainTex, u_xlat1.xw);
    u_xlat6.x = u_xlat7.x;
    u_xlat6.xyz = vec3(u_xlat30) * u_xlat6.xyz;
    u_xlat6.xyz = u_xlat0.xyz * u_xlat6.xyz;
    u_xlat2.xyz = u_xlat6.xyz * _LensFlareGhostsParams.xxx + u_xlat2.xyz;
    u_xlat6 = (-u_xlat3) + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat30 = dot(u_xlat6.xy, u_xlat6.xy);
    u_xlat1.x = dot(u_xlat6.zw, u_xlat6.zw);
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlat1.x = (-u_xlat1.x) * 1.41419995 + 1.0;
    u_xlat1.x = u_xlat1.x * _LensFlareGhostsParams.z;
    u_xlat1.x = log2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _LensFlareGhostsParams.w;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat30 = sqrt(u_xlat30);
    u_xlat30 = (-u_xlat30) * 1.41419995 + 1.0;
    u_xlat30 = u_xlat30 * _LensFlareGhostsParams.z;
    u_xlat30 = log2(u_xlat30);
    u_xlat30 = u_xlat30 * _LensFlareGhostsParams.w;
    u_xlat30 = exp2(u_xlat30);
    u_xlat30 = u_xlat30 * u_xlat30;
    u_xlat6 = u_xlat3 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
    u_xlat7 = texture(_MainTex, u_xlat6.xy);
    u_xlat6 = texture(_MainTex, u_xlat6.zw);
    u_xlat8 = u_xlat11.xyxy * u_xlat4.xyxy + u_xlat3;
    u_xlat3 = u_xlat11.xyxy * u_xlat5.xyxy + u_xlat3;
    u_xlat3 = u_xlat3 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
    u_xlat8 = u_xlat8 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
    u_xlat9 = texture(_MainTex, u_xlat8.xy);
    u_xlat8 = texture(_MainTex, u_xlat8.zw);
    u_xlat6.x = u_xlat8.x;
    u_xlat7.x = u_xlat9.x;
    u_xlat8 = texture(_MainTex, u_xlat3.xy);
    u_xlat3 = texture(_MainTex, u_xlat3.zw);
    u_xlat6.z = u_xlat3.z;
    u_xlat3.xyz = u_xlat1.xxx * u_xlat6.xyz;
    u_xlat3.xyz = u_xlat0.xyz * u_xlat3.xyz;
    u_xlat7.z = u_xlat8.z;
    u_xlat6.xyz = vec3(u_xlat30) * u_xlat7.xyz;
    u_xlat6.xyz = u_xlat0.xyz * u_xlat6.xyz;
    u_xlat2.xyz = u_xlat6.xyz * _LensFlareGhostsParams.xxx + u_xlat2.xyz;
    u_xlat2.xyz = u_xlat3.xyz * _LensFlareGhostsParams.xxx + u_xlat2.xyz;
    u_xlat1.xw = u_xlat11.xy * _LensFlareHaloParams.yy + vs_TEXCOORD0.xy;
    u_xlat1.xw = fract(u_xlat1.xw);
    u_xlat3.xy = u_xlat11.xy * u_xlat4.zw + u_xlat1.xw;
    u_xlat11.xy = u_xlat11.xy * u_xlat5.zw + u_xlat1.xw;
    u_xlat11.xy = u_xlat11.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat4 = texture(_MainTex, u_xlat11.xy);
    u_xlat11.xy = u_xlat3.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat3 = texture(_MainTex, u_xlat11.xy);
    u_xlat4.x = u_xlat3.x;
    u_xlat11.xy = (-u_xlat1.xw) + vec2(0.5, 0.5);
    u_xlat1.xw = u_xlat1.xw * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat3 = texture(_MainTex, u_xlat1.xw);
    u_xlat4.y = u_xlat3.y;
    u_xlat30 = dot(u_xlat11.xy, u_xlat11.xy);
    u_xlat30 = sqrt(u_xlat30);
    u_xlat30 = (-u_xlat30) * 1.41419995 + 1.0;
    u_xlat30 = u_xlat30 * _LensFlareHaloParams.z;
    u_xlat30 = log2(u_xlat30);
    u_xlat30 = u_xlat30 * _LensFlareHaloParams.w;
    u_xlat30 = exp2(u_xlat30);
    u_xlat1.xyz = vec3(u_xlat30) * u_xlat4.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _LensFlareHaloParams.xxx;
    SV_Target0.xyz = u_xlat1.xyz * u_xlat0.xyz + u_xlat2.xyz;
    SV_Target0.w = 0.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "AB_HIGH_PRECISION" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 94
; Schema: 0
                                              OpCapability Shader 
                                       %1 = OpExtInstImport "GLSL.std.450" 
                                              OpMemoryModel Logical GLSL450 
                                              OpEntryPoint Vertex %4 "main" %11 %72 %84 %86 
                                              OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                              OpDecorate %11 Location 11 
                                              OpDecorate %16 ArrayStride 16 
                                              OpDecorate %17 ArrayStride 17 
                                              OpMemberDecorate %18 0 Offset 18 
                                              OpMemberDecorate %18 1 Offset 18 
                                              OpDecorate %18 Block 
                                              OpDecorate %20 DescriptorSet 20 
                                              OpDecorate %20 Binding 20 
                                              OpMemberDecorate %70 0 BuiltIn 70 
                                              OpMemberDecorate %70 1 BuiltIn 70 
                                              OpMemberDecorate %70 2 BuiltIn 70 
                                              OpDecorate %70 Block 
                                              OpDecorate vs_TEXCOORD0 Location 84 
                                              OpDecorate %86 Location 86 
                                       %2 = OpTypeVoid 
                                       %3 = OpTypeFunction %2 
                                       %6 = OpTypeFloat 32 
                                       %7 = OpTypeVector %6 4 
                                       %8 = OpTypePointer Private %7 
                        Private f32_4* %9 = OpVariable Private 
                                      %10 = OpTypePointer Input %7 
                         Input f32_4* %11 = OpVariable Input 
                                      %14 = OpTypeInt 32 0 
                                  u32 %15 = OpConstant 4 
                                      %16 = OpTypeArray %7 %15 
                                      %17 = OpTypeArray %7 %15 
                                      %18 = OpTypeStruct %16 %17 
                                      %19 = OpTypePointer Uniform %18 
Uniform struct {f32_4[4]; f32_4[4];}* %20 = OpVariable Uniform 
                                      %21 = OpTypeInt 32 1 
                                  i32 %22 = OpConstant 0 
                                  i32 %23 = OpConstant 1 
                                      %24 = OpTypePointer Uniform %7 
                                  i32 %35 = OpConstant 2 
                                  i32 %44 = OpConstant 3 
                       Private f32_4* %48 = OpVariable Private 
                                  u32 %68 = OpConstant 1 
                                      %69 = OpTypeArray %6 %68 
                                      %70 = OpTypeStruct %7 %6 %69 
                                      %71 = OpTypePointer Output %70 
 Output struct {f32_4; f32; f32[1];}* %72 = OpVariable Output 
                                      %80 = OpTypePointer Output %7 
                                      %82 = OpTypeVector %6 2 
                                      %83 = OpTypePointer Output %82 
               Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                      %85 = OpTypePointer Input %82 
                         Input f32_2* %86 = OpVariable Input 
                                      %88 = OpTypePointer Output %6 
                                  void %4 = OpFunction None %3 
                                       %5 = OpLabel 
                                f32_4 %12 = OpLoad %11 
                                f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                       Uniform f32_4* %25 = OpAccessChain %20 %22 %23 
                                f32_4 %26 = OpLoad %25 
                                f32_4 %27 = OpFMul %13 %26 
                                              OpStore %9 %27 
                       Uniform f32_4* %28 = OpAccessChain %20 %22 %22 
                                f32_4 %29 = OpLoad %28 
                                f32_4 %30 = OpLoad %11 
                                f32_4 %31 = OpVectorShuffle %30 %30 0 0 0 0 
                                f32_4 %32 = OpFMul %29 %31 
                                f32_4 %33 = OpLoad %9 
                                f32_4 %34 = OpFAdd %32 %33 
                                              OpStore %9 %34 
                       Uniform f32_4* %36 = OpAccessChain %20 %22 %35 
                                f32_4 %37 = OpLoad %36 
                                f32_4 %38 = OpLoad %11 
                                f32_4 %39 = OpVectorShuffle %38 %38 2 2 2 2 
                                f32_4 %40 = OpFMul %37 %39 
                                f32_4 %41 = OpLoad %9 
                                f32_4 %42 = OpFAdd %40 %41 
                                              OpStore %9 %42 
                                f32_4 %43 = OpLoad %9 
                       Uniform f32_4* %45 = OpAccessChain %20 %22 %44 
                                f32_4 %46 = OpLoad %45 
                                f32_4 %47 = OpFAdd %43 %46 
                                              OpStore %9 %47 
                                f32_4 %49 = OpLoad %9 
                                f32_4 %50 = OpVectorShuffle %49 %49 1 1 1 1 
                       Uniform f32_4* %51 = OpAccessChain %20 %23 %23 
                                f32_4 %52 = OpLoad %51 
                                f32_4 %53 = OpFMul %50 %52 
                                              OpStore %48 %53 
                       Uniform f32_4* %54 = OpAccessChain %20 %23 %22 
                                f32_4 %55 = OpLoad %54 
                                f32_4 %56 = OpLoad %9 
                                f32_4 %57 = OpVectorShuffle %56 %56 0 0 0 0 
                                f32_4 %58 = OpFMul %55 %57 
                                f32_4 %59 = OpLoad %48 
                                f32_4 %60 = OpFAdd %58 %59 
                                              OpStore %48 %60 
                       Uniform f32_4* %61 = OpAccessChain %20 %23 %35 
                                f32_4 %62 = OpLoad %61 
                                f32_4 %63 = OpLoad %9 
                                f32_4 %64 = OpVectorShuffle %63 %63 2 2 2 2 
                                f32_4 %65 = OpFMul %62 %64 
                                f32_4 %66 = OpLoad %48 
                                f32_4 %67 = OpFAdd %65 %66 
                                              OpStore %48 %67 
                       Uniform f32_4* %73 = OpAccessChain %20 %23 %44 
                                f32_4 %74 = OpLoad %73 
                                f32_4 %75 = OpLoad %9 
                                f32_4 %76 = OpVectorShuffle %75 %75 3 3 3 3 
                                f32_4 %77 = OpFMul %74 %76 
                                f32_4 %78 = OpLoad %48 
                                f32_4 %79 = OpFAdd %77 %78 
                        Output f32_4* %81 = OpAccessChain %72 %22 
                                              OpStore %81 %79 
                                f32_2 %87 = OpLoad %86 
                                              OpStore vs_TEXCOORD0 %87 
                          Output f32* %89 = OpAccessChain %72 %22 %68 
                                  f32 %90 = OpLoad %89 
                                  f32 %91 = OpFNegate %90 
                          Output f32* %92 = OpAccessChain %72 %22 %68 
                                              OpStore %92 %91 
                                              OpReturn
                                              OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 865
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %12 %853 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpDecorate vs_TEXCOORD0 Location 12 
                                                      OpMemberDecorate %25 0 Offset 25 
                                                      OpMemberDecorate %25 1 Offset 25 
                                                      OpMemberDecorate %25 2 Offset 25 
                                                      OpMemberDecorate %25 3 Offset 25 
                                                      OpMemberDecorate %25 4 Offset 25 
                                                      OpMemberDecorate %25 5 Offset 25 
                                                      OpDecorate %25 Block 
                                                      OpDecorate %27 DescriptorSet 27 
                                                      OpDecorate %27 Binding 27 
                                                      OpDecorate %110 DescriptorSet 110 
                                                      OpDecorate %110 Binding 110 
                                                      OpDecorate %114 DescriptorSet 114 
                                                      OpDecorate %114 Binding 114 
                                                      OpDecorate %253 DescriptorSet 253 
                                                      OpDecorate %253 Binding 253 
                                                      OpDecorate %255 DescriptorSet 255 
                                                      OpDecorate %255 Binding 255 
                                                      OpDecorate %853 Location 853 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 3 
                                               %8 = OpTypePointer Private %7 
                                Private f32_3* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 2 
                                              %11 = OpTypePointer Input %10 
                        Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                          f32 %15 = OpConstant 3.674022E-40 
                                        f32_2 %16 = OpConstantComposite %15 %15 
                                              %20 = OpTypePointer Private %10 
                               Private f32_2* %21 = OpVariable Private 
                                              %24 = OpTypeVector %6 4 
                                              %25 = OpTypeStruct %24 %24 %6 %6 %24 %24 
                                              %26 = OpTypePointer Uniform %25 
Uniform struct {f32_4; f32_4; f32; f32; f32_4; f32_4;}* %27 = OpVariable Uniform 
                                              %28 = OpTypeInt 32 1 
                                          i32 %29 = OpConstant 0 
                                              %30 = OpTypePointer Uniform %24 
                               Private f32_3* %39 = OpVariable Private 
                                              %50 = OpTypeInt 32 0 
                                          u32 %51 = OpConstant 0 
                                              %52 = OpTypePointer Private %6 
                                          f32 %61 = OpConstant 3.674022E-40 
                                          f32 %63 = OpConstant 3.674022E-40 
                                          u32 %68 = OpConstant 2 
                                              %69 = OpTypePointer Uniform %6 
                                          u32 %80 = OpConstant 3 
                               Private f32_3* %95 = OpVariable Private 
                                          i32 %97 = OpConstant 4 
                                             %108 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                             %109 = OpTypePointer UniformConstant %108 
        UniformConstant read_only Texture2D* %110 = OpVariable UniformConstant 
                                             %112 = OpTypeSampler 
                                             %113 = OpTypePointer UniformConstant %112 
                    UniformConstant sampler* %114 = OpVariable UniformConstant 
                                             %116 = OpTypeSampledImage %108 
                                         u32 %121 = OpConstant 1 
                                             %124 = OpTypePointer Private %24 
                              Private f32_4* %125 = OpVariable Private 
                              Private f32_3* %150 = OpVariable Private 
                              Private f32_4* %168 = OpVariable Private 
                                         i32 %169 = OpConstant 2 
                                         i32 %174 = OpConstant 3 
                                         i32 %180 = OpConstant 5 
                              Private f32_2* %186 = OpVariable Private 
                              Private f32_4* %210 = OpVariable Private 
                                         f32 %251 = OpConstant 3.674022E-40 
        UniformConstant read_only Texture2D* %253 = OpVariable UniformConstant 
                    UniformConstant sampler* %255 = OpVariable UniformConstant 
                              Private f32_4* %272 = OpVariable Private 
                                Private f32* %278 = OpVariable Private 
                              Private f32_3* %324 = OpVariable Private 
                                         f32 %397 = OpConstant 3.674022E-40 
                                       f32_2 %398 = OpConstantComposite %397 %397 
                                         f32 %403 = OpConstant 3.674022E-40 
                                         f32 %404 = OpConstant 3.674022E-40 
                                       f32_4 %405 = OpConstantComposite %403 %403 %404 %404 
                                       f32_4 %536 = OpConstantComposite %15 %15 %15 %15 
                                Private f32* %543 = OpVariable Private 
                              Private f32_4* %616 = OpVariable Private 
                                         i32 %724 = OpConstant 1 
                              Private f32_2* %738 = OpVariable Private 
                                             %852 = OpTypePointer Output %24 
                               Output f32_4* %853 = OpVariable Output 
                                             %862 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_2 %13 = OpLoad vs_TEXCOORD0 
                                        f32_2 %14 = OpFNegate %13 
                                        f32_2 %17 = OpFAdd %14 %16 
                                        f32_3 %18 = OpLoad %9 
                                        f32_3 %19 = OpVectorShuffle %18 %17 3 4 2 
                                                      OpStore %9 %19 
                                        f32_3 %22 = OpLoad %9 
                                        f32_2 %23 = OpVectorShuffle %22 %22 0 1 
                               Uniform f32_4* %31 = OpAccessChain %27 %29 
                                        f32_4 %32 = OpLoad %31 
                                        f32_2 %33 = OpVectorShuffle %32 %32 1 1 
                                        f32_2 %34 = OpFMul %23 %33 
                                        f32_2 %35 = OpLoad vs_TEXCOORD0 
                                        f32_2 %36 = OpFAdd %34 %35 
                                                      OpStore %21 %36 
                                        f32_2 %37 = OpLoad %21 
                                        f32_2 %38 = OpExtInst %1 10 %37 
                                                      OpStore %21 %38 
                                        f32_2 %40 = OpLoad %21 
                                        f32_2 %41 = OpFNegate %40 
                                        f32_2 %42 = OpFAdd %41 %16 
                                        f32_3 %43 = OpLoad %39 
                                        f32_3 %44 = OpVectorShuffle %43 %42 3 4 2 
                                                      OpStore %39 %44 
                                        f32_3 %45 = OpLoad %39 
                                        f32_2 %46 = OpVectorShuffle %45 %45 0 1 
                                        f32_3 %47 = OpLoad %39 
                                        f32_2 %48 = OpVectorShuffle %47 %47 0 1 
                                          f32 %49 = OpDot %46 %48 
                                 Private f32* %53 = OpAccessChain %39 %51 
                                                      OpStore %53 %49 
                                 Private f32* %54 = OpAccessChain %39 %51 
                                          f32 %55 = OpLoad %54 
                                          f32 %56 = OpExtInst %1 31 %55 
                                 Private f32* %57 = OpAccessChain %39 %51 
                                                      OpStore %57 %56 
                                 Private f32* %58 = OpAccessChain %39 %51 
                                          f32 %59 = OpLoad %58 
                                          f32 %60 = OpFNegate %59 
                                          f32 %62 = OpFMul %60 %61 
                                          f32 %64 = OpFAdd %62 %63 
                                 Private f32* %65 = OpAccessChain %39 %51 
                                                      OpStore %65 %64 
                                 Private f32* %66 = OpAccessChain %39 %51 
                                          f32 %67 = OpLoad %66 
                                 Uniform f32* %70 = OpAccessChain %27 %29 %68 
                                          f32 %71 = OpLoad %70 
                                          f32 %72 = OpFMul %67 %71 
                                 Private f32* %73 = OpAccessChain %39 %51 
                                                      OpStore %73 %72 
                                 Private f32* %74 = OpAccessChain %39 %51 
                                          f32 %75 = OpLoad %74 
                                          f32 %76 = OpExtInst %1 30 %75 
                                 Private f32* %77 = OpAccessChain %39 %51 
                                                      OpStore %77 %76 
                                 Private f32* %78 = OpAccessChain %39 %51 
                                          f32 %79 = OpLoad %78 
                                 Uniform f32* %81 = OpAccessChain %27 %29 %80 
                                          f32 %82 = OpLoad %81 
                                          f32 %83 = OpFMul %79 %82 
                                 Private f32* %84 = OpAccessChain %39 %51 
                                                      OpStore %84 %83 
                                 Private f32* %85 = OpAccessChain %39 %51 
                                          f32 %86 = OpLoad %85 
                                          f32 %87 = OpExtInst %1 29 %86 
                                 Private f32* %88 = OpAccessChain %39 %51 
                                                      OpStore %88 %87 
                                 Private f32* %89 = OpAccessChain %39 %51 
                                          f32 %90 = OpLoad %89 
                                 Private f32* %91 = OpAccessChain %39 %51 
                                          f32 %92 = OpLoad %91 
                                          f32 %93 = OpFMul %90 %92 
                                 Private f32* %94 = OpAccessChain %39 %51 
                                                      OpStore %94 %93 
                                        f32_2 %96 = OpLoad %21 
                               Uniform f32_4* %98 = OpAccessChain %27 %97 
                                        f32_4 %99 = OpLoad %98 
                                       f32_2 %100 = OpVectorShuffle %99 %99 0 1 
                                       f32_2 %101 = OpFMul %96 %100 
                              Uniform f32_4* %102 = OpAccessChain %27 %97 
                                       f32_4 %103 = OpLoad %102 
                                       f32_2 %104 = OpVectorShuffle %103 %103 2 3 
                                       f32_2 %105 = OpFAdd %101 %104 
                                       f32_3 %106 = OpLoad %95 
                                       f32_3 %107 = OpVectorShuffle %106 %105 3 4 2 
                                                      OpStore %95 %107 
                         read_only Texture2D %111 = OpLoad %110 
                                     sampler %115 = OpLoad %114 
                  read_only Texture2DSampled %117 = OpSampledImage %111 %115 
                                       f32_3 %118 = OpLoad %95 
                                       f32_2 %119 = OpVectorShuffle %118 %118 0 1 
                                       f32_4 %120 = OpImageSampleImplicitLod %117 %119 
                                         f32 %122 = OpCompositeExtract %120 1 
                                Private f32* %123 = OpAccessChain %95 %121 
                                                      OpStore %123 %122 
                                       f32_3 %126 = OpLoad %9 
                                       f32_4 %127 = OpVectorShuffle %126 %126 0 1 0 1 
                              Uniform f32_4* %128 = OpAccessChain %27 %29 
                                       f32_4 %129 = OpLoad %128 
                                       f32_4 %130 = OpVectorShuffle %129 %129 1 1 1 1 
                                       f32_4 %131 = OpFMul %127 %130 
                                                      OpStore %125 %131 
                                       f32_3 %132 = OpLoad %9 
                                       f32_2 %133 = OpVectorShuffle %132 %132 0 1 
                                       f32_3 %134 = OpLoad %9 
                                       f32_2 %135 = OpVectorShuffle %134 %134 0 1 
                                         f32 %136 = OpDot %133 %135 
                                Private f32* %137 = OpAccessChain %9 %51 
                                                      OpStore %137 %136 
                                Private f32* %138 = OpAccessChain %9 %51 
                                         f32 %139 = OpLoad %138 
                                         f32 %140 = OpExtInst %1 31 %139 
                                Private f32* %141 = OpAccessChain %9 %51 
                                                      OpStore %141 %140 
                                Private f32* %142 = OpAccessChain %9 %51 
                                         f32 %143 = OpLoad %142 
                                         f32 %144 = OpFMul %143 %61 
                                Private f32* %145 = OpAccessChain %9 %51 
                                                      OpStore %145 %144 
                                Private f32* %146 = OpAccessChain %9 %51 
                                         f32 %147 = OpLoad %146 
                                         f32 %148 = OpExtInst %1 10 %147 
                                Private f32* %149 = OpAccessChain %9 %51 
                                                      OpStore %149 %148 
                                       f32_4 %151 = OpLoad %125 
                                       f32_2 %152 = OpVectorShuffle %151 %151 2 3 
                                       f32_4 %153 = OpLoad %125 
                                       f32_2 %154 = OpVectorShuffle %153 %153 2 3 
                                         f32 %155 = OpDot %152 %154 
                                Private f32* %156 = OpAccessChain %150 %51 
                                                      OpStore %156 %155 
                                Private f32* %157 = OpAccessChain %150 %51 
                                         f32 %158 = OpLoad %157 
                                         f32 %159 = OpExtInst %1 32 %158 
                                Private f32* %160 = OpAccessChain %150 %51 
                                                      OpStore %160 %159 
                                       f32_4 %161 = OpLoad %125 
                                       f32_2 %162 = OpVectorShuffle %161 %161 2 3 
                                       f32_3 %163 = OpLoad %150 
                                       f32_2 %164 = OpVectorShuffle %163 %163 0 0 
                                       f32_2 %165 = OpFMul %162 %164 
                                       f32_3 %166 = OpLoad %150 
                                       f32_3 %167 = OpVectorShuffle %166 %165 3 4 2 
                                                      OpStore %150 %167 
                                Uniform f32* %170 = OpAccessChain %27 %169 
                                         f32 %171 = OpLoad %170 
                                Uniform f32* %172 = OpAccessChain %27 %169 
                                         f32 %173 = OpLoad %172 
                                Uniform f32* %175 = OpAccessChain %27 %174 
                                         f32 %176 = OpLoad %175 
                                Uniform f32* %177 = OpAccessChain %27 %174 
                                         f32 %178 = OpLoad %177 
                                       f32_4 %179 = OpCompositeConstruct %171 %173 %176 %178 
                              Uniform f32_4* %181 = OpAccessChain %27 %180 
                                       f32_4 %182 = OpLoad %181 
                                       f32_4 %183 = OpVectorShuffle %182 %182 0 0 0 0 
                                       f32_4 %184 = OpFNegate %183 
                                       f32_4 %185 = OpFMul %179 %184 
                                                      OpStore %168 %185 
                                       f32_3 %187 = OpLoad %150 
                                       f32_2 %188 = OpVectorShuffle %187 %187 0 1 
                                       f32_4 %189 = OpLoad %168 
                                       f32_2 %190 = OpVectorShuffle %189 %189 0 1 
                                       f32_2 %191 = OpFMul %188 %190 
                                       f32_2 %192 = OpLoad %21 
                                       f32_2 %193 = OpFAdd %191 %192 
                                                      OpStore %186 %193 
                                       f32_2 %194 = OpLoad %186 
                              Uniform f32_4* %195 = OpAccessChain %27 %97 
                                       f32_4 %196 = OpLoad %195 
                                       f32_2 %197 = OpVectorShuffle %196 %196 0 1 
                                       f32_2 %198 = OpFMul %194 %197 
                              Uniform f32_4* %199 = OpAccessChain %27 %97 
                                       f32_4 %200 = OpLoad %199 
                                       f32_2 %201 = OpVectorShuffle %200 %200 2 3 
                                       f32_2 %202 = OpFAdd %198 %201 
                                                      OpStore %186 %202 
                         read_only Texture2D %203 = OpLoad %110 
                                     sampler %204 = OpLoad %114 
                  read_only Texture2DSampled %205 = OpSampledImage %203 %204 
                                       f32_2 %206 = OpLoad %186 
                                       f32_4 %207 = OpImageSampleImplicitLod %205 %206 
                                         f32 %208 = OpCompositeExtract %207 0 
                                Private f32* %209 = OpAccessChain %95 %51 
                                                      OpStore %209 %208 
                                Uniform f32* %211 = OpAccessChain %27 %169 
                                         f32 %212 = OpLoad %211 
                                Uniform f32* %213 = OpAccessChain %27 %169 
                                         f32 %214 = OpLoad %213 
                                Uniform f32* %215 = OpAccessChain %27 %174 
                                         f32 %216 = OpLoad %215 
                                Uniform f32* %217 = OpAccessChain %27 %174 
                                         f32 %218 = OpLoad %217 
                                       f32_4 %219 = OpCompositeConstruct %212 %214 %216 %218 
                              Uniform f32_4* %220 = OpAccessChain %27 %180 
                                       f32_4 %221 = OpLoad %220 
                                       f32_4 %222 = OpVectorShuffle %221 %221 0 0 0 0 
                                       f32_4 %223 = OpFMul %219 %222 
                                                      OpStore %210 %223 
                                       f32_3 %224 = OpLoad %150 
                                       f32_2 %225 = OpVectorShuffle %224 %224 0 1 
                                       f32_4 %226 = OpLoad %210 
                                       f32_2 %227 = OpVectorShuffle %226 %226 0 1 
                                       f32_2 %228 = OpFMul %225 %227 
                                       f32_2 %229 = OpLoad %21 
                                       f32_2 %230 = OpFAdd %228 %229 
                                                      OpStore %21 %230 
                                       f32_2 %231 = OpLoad %21 
                              Uniform f32_4* %232 = OpAccessChain %27 %97 
                                       f32_4 %233 = OpLoad %232 
                                       f32_2 %234 = OpVectorShuffle %233 %233 0 1 
                                       f32_2 %235 = OpFMul %231 %234 
                              Uniform f32_4* %236 = OpAccessChain %27 %97 
                                       f32_4 %237 = OpLoad %236 
                                       f32_2 %238 = OpVectorShuffle %237 %237 2 3 
                                       f32_2 %239 = OpFAdd %235 %238 
                                                      OpStore %21 %239 
                         read_only Texture2D %240 = OpLoad %110 
                                     sampler %241 = OpLoad %114 
                  read_only Texture2DSampled %242 = OpSampledImage %240 %241 
                                       f32_2 %243 = OpLoad %21 
                                       f32_4 %244 = OpImageSampleImplicitLod %242 %243 
                                         f32 %245 = OpCompositeExtract %244 2 
                                Private f32* %246 = OpAccessChain %95 %68 
                                                      OpStore %246 %245 
                                       f32_3 %247 = OpLoad %39 
                                       f32_3 %248 = OpVectorShuffle %247 %247 0 0 0 
                                       f32_3 %249 = OpLoad %95 
                                       f32_3 %250 = OpFMul %248 %249 
                                                      OpStore %39 %250 
                                Private f32* %252 = OpAccessChain %9 %121 
                                                      OpStore %252 %251 
                         read_only Texture2D %254 = OpLoad %253 
                                     sampler %256 = OpLoad %255 
                  read_only Texture2DSampled %257 = OpSampledImage %254 %256 
                                       f32_3 %258 = OpLoad %9 
                                       f32_2 %259 = OpVectorShuffle %258 %258 0 1 
                                       f32_4 %260 = OpImageSampleImplicitLod %257 %259 
                                       f32_3 %261 = OpVectorShuffle %260 %260 0 1 2 
                                                      OpStore %9 %261 
                                       f32_3 %262 = OpLoad %9 
                                       f32_3 %263 = OpLoad %39 
                                       f32_3 %264 = OpFMul %262 %263 
                                                      OpStore %39 %264 
                                       f32_3 %265 = OpLoad %39 
                              Uniform f32_4* %266 = OpAccessChain %27 %29 
                                       f32_4 %267 = OpLoad %266 
                                       f32_3 %268 = OpVectorShuffle %267 %267 0 0 0 
                                       f32_3 %269 = OpFMul %265 %268 
                                                      OpStore %39 %269 
                                       f32_2 %270 = OpLoad vs_TEXCOORD0 
                                       f32_2 %271 = OpExtInst %1 10 %270 
                                                      OpStore %186 %271 
                                       f32_2 %273 = OpLoad %186 
                                       f32_2 %274 = OpFNegate %273 
                                       f32_2 %275 = OpFAdd %274 %16 
                                       f32_4 %276 = OpLoad %272 
                                       f32_4 %277 = OpVectorShuffle %276 %275 4 5 2 3 
                                                      OpStore %272 %277 
                                       f32_4 %279 = OpLoad %272 
                                       f32_2 %280 = OpVectorShuffle %279 %279 0 1 
                                       f32_4 %281 = OpLoad %272 
                                       f32_2 %282 = OpVectorShuffle %281 %281 0 1 
                                         f32 %283 = OpDot %280 %282 
                                                      OpStore %278 %283 
                                         f32 %284 = OpLoad %278 
                                         f32 %285 = OpExtInst %1 31 %284 
                                                      OpStore %278 %285 
                                         f32 %286 = OpLoad %278 
                                         f32 %287 = OpFNegate %286 
                                         f32 %288 = OpFMul %287 %61 
                                         f32 %289 = OpFAdd %288 %63 
                                                      OpStore %278 %289 
                                         f32 %290 = OpLoad %278 
                                Uniform f32* %291 = OpAccessChain %27 %29 %68 
                                         f32 %292 = OpLoad %291 
                                         f32 %293 = OpFMul %290 %292 
                                                      OpStore %278 %293 
                                         f32 %294 = OpLoad %278 
                                         f32 %295 = OpExtInst %1 30 %294 
                                                      OpStore %278 %295 
                                         f32 %296 = OpLoad %278 
                                Uniform f32* %297 = OpAccessChain %27 %29 %80 
                                         f32 %298 = OpLoad %297 
                                         f32 %299 = OpFMul %296 %298 
                                                      OpStore %278 %299 
                                         f32 %300 = OpLoad %278 
                                         f32 %301 = OpExtInst %1 29 %300 
                                                      OpStore %278 %301 
                                         f32 %302 = OpLoad %278 
                                         f32 %303 = OpLoad %278 
                                         f32 %304 = OpFMul %302 %303 
                                                      OpStore %278 %304 
                                       f32_2 %305 = OpLoad %186 
                              Uniform f32_4* %306 = OpAccessChain %27 %97 
                                       f32_4 %307 = OpLoad %306 
                                       f32_2 %308 = OpVectorShuffle %307 %307 0 1 
                                       f32_2 %309 = OpFMul %305 %308 
                              Uniform f32_4* %310 = OpAccessChain %27 %97 
                                       f32_4 %311 = OpLoad %310 
                                       f32_2 %312 = OpVectorShuffle %311 %311 2 3 
                                       f32_2 %313 = OpFAdd %309 %312 
                                       f32_4 %314 = OpLoad %272 
                                       f32_4 %315 = OpVectorShuffle %314 %313 4 5 2 3 
                                                      OpStore %272 %315 
                         read_only Texture2D %316 = OpLoad %110 
                                     sampler %317 = OpLoad %114 
                  read_only Texture2DSampled %318 = OpSampledImage %316 %317 
                                       f32_4 %319 = OpLoad %272 
                                       f32_2 %320 = OpVectorShuffle %319 %319 0 1 
                                       f32_4 %321 = OpImageSampleImplicitLod %318 %320 
                                         f32 %322 = OpCompositeExtract %321 1 
                                Private f32* %323 = OpAccessChain %272 %121 
                                                      OpStore %323 %322 
                                       f32_3 %325 = OpLoad %150 
                                       f32_2 %326 = OpVectorShuffle %325 %325 0 1 
                                       f32_4 %327 = OpLoad %168 
                                       f32_2 %328 = OpVectorShuffle %327 %327 0 1 
                                       f32_2 %329 = OpFMul %326 %328 
                                       f32_2 %330 = OpLoad %186 
                                       f32_2 %331 = OpFAdd %329 %330 
                                       f32_3 %332 = OpLoad %324 
                                       f32_3 %333 = OpVectorShuffle %332 %331 3 4 2 
                                                      OpStore %324 %333 
                                       f32_3 %334 = OpLoad %150 
                                       f32_2 %335 = OpVectorShuffle %334 %334 0 1 
                                       f32_4 %336 = OpLoad %210 
                                       f32_2 %337 = OpVectorShuffle %336 %336 0 1 
                                       f32_2 %338 = OpFMul %335 %337 
                                       f32_2 %339 = OpLoad %186 
                                       f32_2 %340 = OpFAdd %338 %339 
                                                      OpStore %186 %340 
                                       f32_2 %341 = OpLoad %186 
                              Uniform f32_4* %342 = OpAccessChain %27 %97 
                                       f32_4 %343 = OpLoad %342 
                                       f32_2 %344 = OpVectorShuffle %343 %343 0 1 
                                       f32_2 %345 = OpFMul %341 %344 
                              Uniform f32_4* %346 = OpAccessChain %27 %97 
                                       f32_4 %347 = OpLoad %346 
                                       f32_2 %348 = OpVectorShuffle %347 %347 2 3 
                                       f32_2 %349 = OpFAdd %345 %348 
                                                      OpStore %186 %349 
                         read_only Texture2D %350 = OpLoad %110 
                                     sampler %351 = OpLoad %114 
                  read_only Texture2DSampled %352 = OpSampledImage %350 %351 
                                       f32_2 %353 = OpLoad %186 
                                       f32_4 %354 = OpImageSampleImplicitLod %352 %353 
                                         f32 %355 = OpCompositeExtract %354 2 
                                Private f32* %356 = OpAccessChain %272 %68 
                                                      OpStore %356 %355 
                                       f32_3 %357 = OpLoad %324 
                                       f32_2 %358 = OpVectorShuffle %357 %357 0 1 
                              Uniform f32_4* %359 = OpAccessChain %27 %97 
                                       f32_4 %360 = OpLoad %359 
                                       f32_2 %361 = OpVectorShuffle %360 %360 0 1 
                                       f32_2 %362 = OpFMul %358 %361 
                              Uniform f32_4* %363 = OpAccessChain %27 %97 
                                       f32_4 %364 = OpLoad %363 
                                       f32_2 %365 = OpVectorShuffle %364 %364 2 3 
                                       f32_2 %366 = OpFAdd %362 %365 
                                                      OpStore %186 %366 
                         read_only Texture2D %367 = OpLoad %110 
                                     sampler %368 = OpLoad %114 
                  read_only Texture2DSampled %369 = OpSampledImage %367 %368 
                                       f32_2 %370 = OpLoad %186 
                                       f32_4 %371 = OpImageSampleImplicitLod %369 %370 
                                         f32 %372 = OpCompositeExtract %371 0 
                                Private f32* %373 = OpAccessChain %272 %51 
                                                      OpStore %373 %372 
                                         f32 %374 = OpLoad %278 
                                       f32_3 %375 = OpCompositeConstruct %374 %374 %374 
                                       f32_4 %376 = OpLoad %272 
                                       f32_3 %377 = OpVectorShuffle %376 %376 0 1 2 
                                       f32_3 %378 = OpFMul %375 %377 
                                       f32_4 %379 = OpLoad %272 
                                       f32_4 %380 = OpVectorShuffle %379 %378 4 5 6 3 
                                                      OpStore %272 %380 
                                       f32_3 %381 = OpLoad %9 
                                       f32_4 %382 = OpLoad %272 
                                       f32_3 %383 = OpVectorShuffle %382 %382 0 1 2 
                                       f32_3 %384 = OpFMul %381 %383 
                                       f32_4 %385 = OpLoad %272 
                                       f32_4 %386 = OpVectorShuffle %385 %384 4 5 6 3 
                                                      OpStore %272 %386 
                                       f32_4 %387 = OpLoad %272 
                                       f32_3 %388 = OpVectorShuffle %387 %387 0 1 2 
                              Uniform f32_4* %389 = OpAccessChain %27 %29 
                                       f32_4 %390 = OpLoad %389 
                                       f32_3 %391 = OpVectorShuffle %390 %390 0 0 0 
                                       f32_3 %392 = OpFMul %388 %391 
                                       f32_3 %393 = OpLoad %39 
                                       f32_3 %394 = OpFAdd %392 %393 
                                                      OpStore %39 %394 
                                       f32_4 %395 = OpLoad %125 
                                       f32_2 %396 = OpVectorShuffle %395 %395 2 3 
                                       f32_2 %399 = OpFMul %396 %398 
                                       f32_2 %400 = OpLoad vs_TEXCOORD0 
                                       f32_2 %401 = OpFAdd %399 %400 
                                                      OpStore %186 %401 
                                       f32_4 %402 = OpLoad %125 
                                       f32_4 %406 = OpFMul %402 %405 
                                       f32_2 %407 = OpLoad vs_TEXCOORD0 
                                       f32_4 %408 = OpVectorShuffle %407 %407 0 1 0 1 
                                       f32_4 %409 = OpFAdd %406 %408 
                                                      OpStore %125 %409 
                                       f32_4 %410 = OpLoad %125 
                                       f32_4 %411 = OpExtInst %1 10 %410 
                                                      OpStore %125 %411 
                                       f32_2 %412 = OpLoad %186 
                                       f32_2 %413 = OpExtInst %1 10 %412 
                                                      OpStore %186 %413 
                                       f32_2 %414 = OpLoad %186 
                                       f32_2 %415 = OpFNegate %414 
                                       f32_2 %416 = OpFAdd %415 %16 
                                       f32_4 %417 = OpLoad %272 
                                       f32_4 %418 = OpVectorShuffle %417 %416 4 5 2 3 
                                                      OpStore %272 %418 
                                       f32_4 %419 = OpLoad %272 
                                       f32_2 %420 = OpVectorShuffle %419 %419 0 1 
                                       f32_4 %421 = OpLoad %272 
                                       f32_2 %422 = OpVectorShuffle %421 %421 0 1 
                                         f32 %423 = OpDot %420 %422 
                                                      OpStore %278 %423 
                                         f32 %424 = OpLoad %278 
                                         f32 %425 = OpExtInst %1 31 %424 
                                                      OpStore %278 %425 
                                         f32 %426 = OpLoad %278 
                                         f32 %427 = OpFNegate %426 
                                         f32 %428 = OpFMul %427 %61 
                                         f32 %429 = OpFAdd %428 %63 
                                                      OpStore %278 %429 
                                         f32 %430 = OpLoad %278 
                                Uniform f32* %431 = OpAccessChain %27 %29 %68 
                                         f32 %432 = OpLoad %431 
                                         f32 %433 = OpFMul %430 %432 
                                                      OpStore %278 %433 
                                         f32 %434 = OpLoad %278 
                                         f32 %435 = OpExtInst %1 30 %434 
                                                      OpStore %278 %435 
                                         f32 %436 = OpLoad %278 
                                Uniform f32* %437 = OpAccessChain %27 %29 %80 
                                         f32 %438 = OpLoad %437 
                                         f32 %439 = OpFMul %436 %438 
                                                      OpStore %278 %439 
                                         f32 %440 = OpLoad %278 
                                         f32 %441 = OpExtInst %1 29 %440 
                                                      OpStore %278 %441 
                                         f32 %442 = OpLoad %278 
                                         f32 %443 = OpLoad %278 
                                         f32 %444 = OpFMul %442 %443 
                                                      OpStore %278 %444 
                                       f32_2 %445 = OpLoad %186 
                              Uniform f32_4* %446 = OpAccessChain %27 %97 
                                       f32_4 %447 = OpLoad %446 
                                       f32_2 %448 = OpVectorShuffle %447 %447 0 1 
                                       f32_2 %449 = OpFMul %445 %448 
                              Uniform f32_4* %450 = OpAccessChain %27 %97 
                                       f32_4 %451 = OpLoad %450 
                                       f32_2 %452 = OpVectorShuffle %451 %451 2 3 
                                       f32_2 %453 = OpFAdd %449 %452 
                                       f32_4 %454 = OpLoad %272 
                                       f32_4 %455 = OpVectorShuffle %454 %453 4 5 2 3 
                                                      OpStore %272 %455 
                         read_only Texture2D %456 = OpLoad %110 
                                     sampler %457 = OpLoad %114 
                  read_only Texture2DSampled %458 = OpSampledImage %456 %457 
                                       f32_4 %459 = OpLoad %272 
                                       f32_2 %460 = OpVectorShuffle %459 %459 0 1 
                                       f32_4 %461 = OpImageSampleImplicitLod %458 %460 
                                         f32 %462 = OpCompositeExtract %461 1 
                                Private f32* %463 = OpAccessChain %272 %121 
                                                      OpStore %463 %462 
                                       f32_3 %464 = OpLoad %150 
                                       f32_2 %465 = OpVectorShuffle %464 %464 0 1 
                                       f32_4 %466 = OpLoad %168 
                                       f32_2 %467 = OpVectorShuffle %466 %466 0 1 
                                       f32_2 %468 = OpFMul %465 %467 
                                       f32_2 %469 = OpLoad %186 
                                       f32_2 %470 = OpFAdd %468 %469 
                                       f32_3 %471 = OpLoad %324 
                                       f32_3 %472 = OpVectorShuffle %471 %470 3 4 2 
                                                      OpStore %324 %472 
                                       f32_3 %473 = OpLoad %150 
                                       f32_2 %474 = OpVectorShuffle %473 %473 0 1 
                                       f32_4 %475 = OpLoad %210 
                                       f32_2 %476 = OpVectorShuffle %475 %475 0 1 
                                       f32_2 %477 = OpFMul %474 %476 
                                       f32_2 %478 = OpLoad %186 
                                       f32_2 %479 = OpFAdd %477 %478 
                                                      OpStore %186 %479 
                                       f32_2 %480 = OpLoad %186 
                              Uniform f32_4* %481 = OpAccessChain %27 %97 
                                       f32_4 %482 = OpLoad %481 
                                       f32_2 %483 = OpVectorShuffle %482 %482 0 1 
                                       f32_2 %484 = OpFMul %480 %483 
                              Uniform f32_4* %485 = OpAccessChain %27 %97 
                                       f32_4 %486 = OpLoad %485 
                                       f32_2 %487 = OpVectorShuffle %486 %486 2 3 
                                       f32_2 %488 = OpFAdd %484 %487 
                                                      OpStore %186 %488 
                         read_only Texture2D %489 = OpLoad %110 
                                     sampler %490 = OpLoad %114 
                  read_only Texture2DSampled %491 = OpSampledImage %489 %490 
                                       f32_2 %492 = OpLoad %186 
                                       f32_4 %493 = OpImageSampleImplicitLod %491 %492 
                                         f32 %494 = OpCompositeExtract %493 2 
                                Private f32* %495 = OpAccessChain %272 %68 
                                                      OpStore %495 %494 
                                       f32_3 %496 = OpLoad %324 
                                       f32_2 %497 = OpVectorShuffle %496 %496 0 1 
                              Uniform f32_4* %498 = OpAccessChain %27 %97 
                                       f32_4 %499 = OpLoad %498 
                                       f32_2 %500 = OpVectorShuffle %499 %499 0 1 
                                       f32_2 %501 = OpFMul %497 %500 
                              Uniform f32_4* %502 = OpAccessChain %27 %97 
                                       f32_4 %503 = OpLoad %502 
                                       f32_2 %504 = OpVectorShuffle %503 %503 2 3 
                                       f32_2 %505 = OpFAdd %501 %504 
                                                      OpStore %186 %505 
                         read_only Texture2D %506 = OpLoad %110 
                                     sampler %507 = OpLoad %114 
                  read_only Texture2DSampled %508 = OpSampledImage %506 %507 
                                       f32_2 %509 = OpLoad %186 
                                       f32_4 %510 = OpImageSampleImplicitLod %508 %509 
                                         f32 %511 = OpCompositeExtract %510 0 
                                Private f32* %512 = OpAccessChain %272 %51 
                                                      OpStore %512 %511 
                                         f32 %513 = OpLoad %278 
                                       f32_3 %514 = OpCompositeConstruct %513 %513 %513 
                                       f32_4 %515 = OpLoad %272 
                                       f32_3 %516 = OpVectorShuffle %515 %515 0 1 2 
                                       f32_3 %517 = OpFMul %514 %516 
                                       f32_4 %518 = OpLoad %272 
                                       f32_4 %519 = OpVectorShuffle %518 %517 4 5 6 3 
                                                      OpStore %272 %519 
                                       f32_3 %520 = OpLoad %9 
                                       f32_4 %521 = OpLoad %272 
                                       f32_3 %522 = OpVectorShuffle %521 %521 0 1 2 
                                       f32_3 %523 = OpFMul %520 %522 
                                       f32_4 %524 = OpLoad %272 
                                       f32_4 %525 = OpVectorShuffle %524 %523 4 5 6 3 
                                                      OpStore %272 %525 
                                       f32_4 %526 = OpLoad %272 
                                       f32_3 %527 = OpVectorShuffle %526 %526 0 1 2 
                              Uniform f32_4* %528 = OpAccessChain %27 %29 
                                       f32_4 %529 = OpLoad %528 
                                       f32_3 %530 = OpVectorShuffle %529 %529 0 0 0 
                                       f32_3 %531 = OpFMul %527 %530 
                                       f32_3 %532 = OpLoad %39 
                                       f32_3 %533 = OpFAdd %531 %532 
                                                      OpStore %39 %533 
                                       f32_4 %534 = OpLoad %125 
                                       f32_4 %535 = OpFNegate %534 
                                       f32_4 %537 = OpFAdd %535 %536 
                                                      OpStore %272 %537 
                                       f32_4 %538 = OpLoad %272 
                                       f32_2 %539 = OpVectorShuffle %538 %538 0 1 
                                       f32_4 %540 = OpLoad %272 
                                       f32_2 %541 = OpVectorShuffle %540 %540 0 1 
                                         f32 %542 = OpDot %539 %541 
                                                      OpStore %278 %542 
                                       f32_4 %544 = OpLoad %272 
                                       f32_2 %545 = OpVectorShuffle %544 %544 2 3 
                                       f32_4 %546 = OpLoad %272 
                                       f32_2 %547 = OpVectorShuffle %546 %546 2 3 
                                         f32 %548 = OpDot %545 %547 
                                                      OpStore %543 %548 
                                         f32 %549 = OpLoad %543 
                                         f32 %550 = OpExtInst %1 31 %549 
                                                      OpStore %543 %550 
                                         f32 %551 = OpLoad %543 
                                         f32 %552 = OpFNegate %551 
                                         f32 %553 = OpFMul %552 %61 
                                         f32 %554 = OpFAdd %553 %63 
                                                      OpStore %543 %554 
                                         f32 %555 = OpLoad %543 
                                Uniform f32* %556 = OpAccessChain %27 %29 %68 
                                         f32 %557 = OpLoad %556 
                                         f32 %558 = OpFMul %555 %557 
                                                      OpStore %543 %558 
                                         f32 %559 = OpLoad %543 
                                         f32 %560 = OpExtInst %1 30 %559 
                                                      OpStore %543 %560 
                                         f32 %561 = OpLoad %543 
                                Uniform f32* %562 = OpAccessChain %27 %29 %80 
                                         f32 %563 = OpLoad %562 
                                         f32 %564 = OpFMul %561 %563 
                                                      OpStore %543 %564 
                                         f32 %565 = OpLoad %543 
                                         f32 %566 = OpExtInst %1 29 %565 
                                                      OpStore %543 %566 
                                         f32 %567 = OpLoad %543 
                                         f32 %568 = OpLoad %543 
                                         f32 %569 = OpFMul %567 %568 
                                                      OpStore %543 %569 
                                         f32 %570 = OpLoad %278 
                                         f32 %571 = OpExtInst %1 31 %570 
                                                      OpStore %278 %571 
                                         f32 %572 = OpLoad %278 
                                         f32 %573 = OpFNegate %572 
                                         f32 %574 = OpFMul %573 %61 
                                         f32 %575 = OpFAdd %574 %63 
                                                      OpStore %278 %575 
                                         f32 %576 = OpLoad %278 
                                Uniform f32* %577 = OpAccessChain %27 %29 %68 
                                         f32 %578 = OpLoad %577 
                                         f32 %579 = OpFMul %576 %578 
                                                      OpStore %278 %579 
                                         f32 %580 = OpLoad %278 
                                         f32 %581 = OpExtInst %1 30 %580 
                                                      OpStore %278 %581 
                                         f32 %582 = OpLoad %278 
                                Uniform f32* %583 = OpAccessChain %27 %29 %80 
                                         f32 %584 = OpLoad %583 
                                         f32 %585 = OpFMul %582 %584 
                                                      OpStore %278 %585 
                                         f32 %586 = OpLoad %278 
                                         f32 %587 = OpExtInst %1 29 %586 
                                                      OpStore %278 %587 
                                         f32 %588 = OpLoad %278 
                                         f32 %589 = OpLoad %278 
                                         f32 %590 = OpFMul %588 %589 
                                                      OpStore %278 %590 
                                       f32_4 %591 = OpLoad %125 
                              Uniform f32_4* %592 = OpAccessChain %27 %97 
                                       f32_4 %593 = OpLoad %592 
                                       f32_4 %594 = OpVectorShuffle %593 %593 0 1 0 1 
                                       f32_4 %595 = OpFMul %591 %594 
                              Uniform f32_4* %596 = OpAccessChain %27 %97 
                                       f32_4 %597 = OpLoad %596 
                                       f32_4 %598 = OpVectorShuffle %597 %597 2 3 2 3 
                                       f32_4 %599 = OpFAdd %595 %598 
                                                      OpStore %272 %599 
                         read_only Texture2D %600 = OpLoad %110 
                                     sampler %601 = OpLoad %114 
                  read_only Texture2DSampled %602 = OpSampledImage %600 %601 
                                       f32_4 %603 = OpLoad %272 
                                       f32_2 %604 = OpVectorShuffle %603 %603 0 1 
                                       f32_4 %605 = OpImageSampleImplicitLod %602 %604 
                                         f32 %606 = OpCompositeExtract %605 1 
                                Private f32* %607 = OpAccessChain %324 %121 
                                                      OpStore %607 %606 
                         read_only Texture2D %608 = OpLoad %110 
                                     sampler %609 = OpLoad %114 
                  read_only Texture2DSampled %610 = OpSampledImage %608 %609 
                                       f32_4 %611 = OpLoad %272 
                                       f32_2 %612 = OpVectorShuffle %611 %611 2 3 
                                       f32_4 %613 = OpImageSampleImplicitLod %610 %612 
                                         f32 %614 = OpCompositeExtract %613 1 
                                Private f32* %615 = OpAccessChain %272 %121 
                                                      OpStore %615 %614 
                                       f32_3 %617 = OpLoad %150 
                                       f32_4 %618 = OpVectorShuffle %617 %617 0 1 0 1 
                                       f32_4 %619 = OpLoad %168 
                                       f32_4 %620 = OpVectorShuffle %619 %619 0 1 0 1 
                                       f32_4 %621 = OpFMul %618 %620 
                                       f32_4 %622 = OpLoad %125 
                                       f32_4 %623 = OpFAdd %621 %622 
                                                      OpStore %616 %623 
                                       f32_3 %624 = OpLoad %150 
                                       f32_4 %625 = OpVectorShuffle %624 %624 0 1 0 1 
                                       f32_4 %626 = OpLoad %210 
                                       f32_4 %627 = OpVectorShuffle %626 %626 0 1 0 1 
                                       f32_4 %628 = OpFMul %625 %627 
                                       f32_4 %629 = OpLoad %125 
                                       f32_4 %630 = OpFAdd %628 %629 
                                                      OpStore %125 %630 
                                       f32_4 %631 = OpLoad %125 
                              Uniform f32_4* %632 = OpAccessChain %27 %97 
                                       f32_4 %633 = OpLoad %632 
                                       f32_4 %634 = OpVectorShuffle %633 %633 0 1 0 1 
                                       f32_4 %635 = OpFMul %631 %634 
                              Uniform f32_4* %636 = OpAccessChain %27 %97 
                                       f32_4 %637 = OpLoad %636 
                                       f32_4 %638 = OpVectorShuffle %637 %637 2 3 2 3 
                                       f32_4 %639 = OpFAdd %635 %638 
                                                      OpStore %125 %639 
                                       f32_4 %640 = OpLoad %616 
                              Uniform f32_4* %641 = OpAccessChain %27 %97 
                                       f32_4 %642 = OpLoad %641 
                                       f32_4 %643 = OpVectorShuffle %642 %642 0 1 0 1 
                                       f32_4 %644 = OpFMul %640 %643 
                              Uniform f32_4* %645 = OpAccessChain %27 %97 
                                       f32_4 %646 = OpLoad %645 
                                       f32_4 %647 = OpVectorShuffle %646 %646 2 3 2 3 
                                       f32_4 %648 = OpFAdd %644 %647 
                                                      OpStore %616 %648 
                         read_only Texture2D %649 = OpLoad %110 
                                     sampler %650 = OpLoad %114 
                  read_only Texture2DSampled %651 = OpSampledImage %649 %650 
                                       f32_4 %652 = OpLoad %616 
                                       f32_2 %653 = OpVectorShuffle %652 %652 0 1 
                                       f32_4 %654 = OpImageSampleImplicitLod %651 %653 
                                         f32 %655 = OpCompositeExtract %654 0 
                                Private f32* %656 = OpAccessChain %324 %51 
                                                      OpStore %656 %655 
                         read_only Texture2D %657 = OpLoad %110 
                                     sampler %658 = OpLoad %114 
                  read_only Texture2DSampled %659 = OpSampledImage %657 %658 
                                       f32_4 %660 = OpLoad %616 
                                       f32_2 %661 = OpVectorShuffle %660 %660 2 3 
                                       f32_4 %662 = OpImageSampleImplicitLod %659 %661 
                                         f32 %663 = OpCompositeExtract %662 0 
                                Private f32* %664 = OpAccessChain %272 %51 
                                                      OpStore %664 %663 
                         read_only Texture2D %665 = OpLoad %110 
                                     sampler %666 = OpLoad %114 
                  read_only Texture2DSampled %667 = OpSampledImage %665 %666 
                                       f32_4 %668 = OpLoad %125 
                                       f32_2 %669 = OpVectorShuffle %668 %668 0 1 
                                       f32_4 %670 = OpImageSampleImplicitLod %667 %669 
                                         f32 %671 = OpCompositeExtract %670 2 
                                Private f32* %672 = OpAccessChain %324 %68 
                                                      OpStore %672 %671 
                         read_only Texture2D %673 = OpLoad %110 
                                     sampler %674 = OpLoad %114 
                  read_only Texture2DSampled %675 = OpSampledImage %673 %674 
                                       f32_4 %676 = OpLoad %125 
                                       f32_2 %677 = OpVectorShuffle %676 %676 2 3 
                                       f32_4 %678 = OpImageSampleImplicitLod %675 %677 
                                         f32 %679 = OpCompositeExtract %678 2 
                                Private f32* %680 = OpAccessChain %272 %68 
                                                      OpStore %680 %679 
                                         f32 %681 = OpLoad %543 
                                       f32_3 %682 = OpCompositeConstruct %681 %681 %681 
                                       f32_4 %683 = OpLoad %272 
                                       f32_3 %684 = OpVectorShuffle %683 %683 0 1 2 
                                       f32_3 %685 = OpFMul %682 %684 
                                       f32_4 %686 = OpLoad %125 
                                       f32_4 %687 = OpVectorShuffle %686 %685 4 5 6 3 
                                                      OpStore %125 %687 
                                       f32_3 %688 = OpLoad %9 
                                       f32_4 %689 = OpLoad %125 
                                       f32_3 %690 = OpVectorShuffle %689 %689 0 1 2 
                                       f32_3 %691 = OpFMul %688 %690 
                                       f32_4 %692 = OpLoad %125 
                                       f32_4 %693 = OpVectorShuffle %692 %691 4 5 6 3 
                                                      OpStore %125 %693 
                                         f32 %694 = OpLoad %278 
                                       f32_3 %695 = OpCompositeConstruct %694 %694 %694 
                                       f32_3 %696 = OpLoad %324 
                                       f32_3 %697 = OpFMul %695 %696 
                                       f32_4 %698 = OpLoad %272 
                                       f32_4 %699 = OpVectorShuffle %698 %697 4 5 6 3 
                                                      OpStore %272 %699 
                                       f32_3 %700 = OpLoad %9 
                                       f32_4 %701 = OpLoad %272 
                                       f32_3 %702 = OpVectorShuffle %701 %701 0 1 2 
                                       f32_3 %703 = OpFMul %700 %702 
                                       f32_4 %704 = OpLoad %272 
                                       f32_4 %705 = OpVectorShuffle %704 %703 4 5 6 3 
                                                      OpStore %272 %705 
                                       f32_4 %706 = OpLoad %272 
                                       f32_3 %707 = OpVectorShuffle %706 %706 0 1 2 
                              Uniform f32_4* %708 = OpAccessChain %27 %29 
                                       f32_4 %709 = OpLoad %708 
                                       f32_3 %710 = OpVectorShuffle %709 %709 0 0 0 
                                       f32_3 %711 = OpFMul %707 %710 
                                       f32_3 %712 = OpLoad %39 
                                       f32_3 %713 = OpFAdd %711 %712 
                                                      OpStore %39 %713 
                                       f32_4 %714 = OpLoad %125 
                                       f32_3 %715 = OpVectorShuffle %714 %714 0 1 2 
                              Uniform f32_4* %716 = OpAccessChain %27 %29 
                                       f32_4 %717 = OpLoad %716 
                                       f32_3 %718 = OpVectorShuffle %717 %717 0 0 0 
                                       f32_3 %719 = OpFMul %715 %718 
                                       f32_3 %720 = OpLoad %39 
                                       f32_3 %721 = OpFAdd %719 %720 
                                                      OpStore %39 %721 
                                       f32_3 %722 = OpLoad %150 
                                       f32_2 %723 = OpVectorShuffle %722 %722 0 1 
                              Uniform f32_4* %725 = OpAccessChain %27 %724 
                                       f32_4 %726 = OpLoad %725 
                                       f32_2 %727 = OpVectorShuffle %726 %726 1 1 
                                       f32_2 %728 = OpFMul %723 %727 
                                       f32_2 %729 = OpLoad vs_TEXCOORD0 
                                       f32_2 %730 = OpFAdd %728 %729 
                                       f32_4 %731 = OpLoad %125 
                                       f32_4 %732 = OpVectorShuffle %731 %730 4 5 2 3 
                                                      OpStore %125 %732 
                                       f32_4 %733 = OpLoad %125 
                                       f32_2 %734 = OpVectorShuffle %733 %733 0 1 
                                       f32_2 %735 = OpExtInst %1 10 %734 
                                       f32_4 %736 = OpLoad %125 
                                       f32_4 %737 = OpVectorShuffle %736 %735 4 5 2 3 
                                                      OpStore %125 %737 
                                       f32_3 %739 = OpLoad %150 
                                       f32_2 %740 = OpVectorShuffle %739 %739 0 1 
                                       f32_4 %741 = OpLoad %168 
                                       f32_2 %742 = OpVectorShuffle %741 %741 2 3 
                                       f32_2 %743 = OpFMul %740 %742 
                                       f32_4 %744 = OpLoad %125 
                                       f32_2 %745 = OpVectorShuffle %744 %744 0 1 
                                       f32_2 %746 = OpFAdd %743 %745 
                                                      OpStore %738 %746 
                                       f32_3 %747 = OpLoad %150 
                                       f32_2 %748 = OpVectorShuffle %747 %747 0 1 
                                       f32_4 %749 = OpLoad %210 
                                       f32_2 %750 = OpVectorShuffle %749 %749 2 3 
                                       f32_2 %751 = OpFMul %748 %750 
                                       f32_4 %752 = OpLoad %125 
                                       f32_2 %753 = OpVectorShuffle %752 %752 0 1 
                                       f32_2 %754 = OpFAdd %751 %753 
                                       f32_3 %755 = OpLoad %150 
                                       f32_3 %756 = OpVectorShuffle %755 %754 3 4 2 
                                                      OpStore %150 %756 
                                       f32_3 %757 = OpLoad %150 
                                       f32_2 %758 = OpVectorShuffle %757 %757 0 1 
                              Uniform f32_4* %759 = OpAccessChain %27 %97 
                                       f32_4 %760 = OpLoad %759 
                                       f32_2 %761 = OpVectorShuffle %760 %760 0 1 
                                       f32_2 %762 = OpFMul %758 %761 
                              Uniform f32_4* %763 = OpAccessChain %27 %97 
                                       f32_4 %764 = OpLoad %763 
                                       f32_2 %765 = OpVectorShuffle %764 %764 2 3 
                                       f32_2 %766 = OpFAdd %762 %765 
                                       f32_3 %767 = OpLoad %150 
                                       f32_3 %768 = OpVectorShuffle %767 %766 3 4 2 
                                                      OpStore %150 %768 
                         read_only Texture2D %769 = OpLoad %110 
                                     sampler %770 = OpLoad %114 
                  read_only Texture2DSampled %771 = OpSampledImage %769 %770 
                                       f32_3 %772 = OpLoad %150 
                                       f32_2 %773 = OpVectorShuffle %772 %772 0 1 
                                       f32_4 %774 = OpImageSampleImplicitLod %771 %773 
                                         f32 %775 = OpCompositeExtract %774 2 
                                Private f32* %776 = OpAccessChain %150 %68 
                                                      OpStore %776 %775 
                                       f32_2 %777 = OpLoad %738 
                              Uniform f32_4* %778 = OpAccessChain %27 %97 
                                       f32_4 %779 = OpLoad %778 
                                       f32_2 %780 = OpVectorShuffle %779 %779 0 1 
                                       f32_2 %781 = OpFMul %777 %780 
                              Uniform f32_4* %782 = OpAccessChain %27 %97 
                                       f32_4 %783 = OpLoad %782 
                                       f32_2 %784 = OpVectorShuffle %783 %783 2 3 
                                       f32_2 %785 = OpFAdd %781 %784 
                                                      OpStore %738 %785 
                         read_only Texture2D %786 = OpLoad %110 
                                     sampler %787 = OpLoad %114 
                  read_only Texture2DSampled %788 = OpSampledImage %786 %787 
                                       f32_2 %789 = OpLoad %738 
                                       f32_4 %790 = OpImageSampleImplicitLod %788 %789 
                                         f32 %791 = OpCompositeExtract %790 0 
                                Private f32* %792 = OpAccessChain %150 %51 
                                                      OpStore %792 %791 
                                       f32_4 %793 = OpLoad %125 
                                       f32_2 %794 = OpVectorShuffle %793 %793 0 1 
                                       f32_2 %795 = OpFNegate %794 
                                       f32_2 %796 = OpFAdd %795 %16 
                                                      OpStore %738 %796 
                                       f32_4 %797 = OpLoad %125 
                                       f32_2 %798 = OpVectorShuffle %797 %797 0 1 
                              Uniform f32_4* %799 = OpAccessChain %27 %97 
                                       f32_4 %800 = OpLoad %799 
                                       f32_2 %801 = OpVectorShuffle %800 %800 0 1 
                                       f32_2 %802 = OpFMul %798 %801 
                              Uniform f32_4* %803 = OpAccessChain %27 %97 
                                       f32_4 %804 = OpLoad %803 
                                       f32_2 %805 = OpVectorShuffle %804 %804 2 3 
                                       f32_2 %806 = OpFAdd %802 %805 
                                       f32_4 %807 = OpLoad %125 
                                       f32_4 %808 = OpVectorShuffle %807 %806 4 5 2 3 
                                                      OpStore %125 %808 
                         read_only Texture2D %809 = OpLoad %110 
                                     sampler %810 = OpLoad %114 
                  read_only Texture2DSampled %811 = OpSampledImage %809 %810 
                                       f32_4 %812 = OpLoad %125 
                                       f32_2 %813 = OpVectorShuffle %812 %812 0 1 
                                       f32_4 %814 = OpImageSampleImplicitLod %811 %813 
                                         f32 %815 = OpCompositeExtract %814 1 
                                Private f32* %816 = OpAccessChain %150 %121 
                                                      OpStore %816 %815 
                                       f32_2 %817 = OpLoad %738 
                                       f32_2 %818 = OpLoad %738 
                                         f32 %819 = OpDot %817 %818 
                                                      OpStore %278 %819 
                                         f32 %820 = OpLoad %278 
                                         f32 %821 = OpExtInst %1 31 %820 
                                                      OpStore %278 %821 
                                         f32 %822 = OpLoad %278 
                                         f32 %823 = OpFNegate %822 
                                         f32 %824 = OpFMul %823 %61 
                                         f32 %825 = OpFAdd %824 %63 
                                                      OpStore %278 %825 
                                         f32 %826 = OpLoad %278 
                                Uniform f32* %827 = OpAccessChain %27 %724 %68 
                                         f32 %828 = OpLoad %827 
                                         f32 %829 = OpFMul %826 %828 
                                                      OpStore %278 %829 
                                         f32 %830 = OpLoad %278 
                                         f32 %831 = OpExtInst %1 30 %830 
                                                      OpStore %278 %831 
                                         f32 %832 = OpLoad %278 
                                Uniform f32* %833 = OpAccessChain %27 %724 %80 
                                         f32 %834 = OpLoad %833 
                                         f32 %835 = OpFMul %832 %834 
                                                      OpStore %278 %835 
                                         f32 %836 = OpLoad %278 
                                         f32 %837 = OpExtInst %1 29 %836 
                                                      OpStore %278 %837 
                                         f32 %838 = OpLoad %278 
                                       f32_3 %839 = OpCompositeConstruct %838 %838 %838 
                                       f32_3 %840 = OpLoad %150 
                                       f32_3 %841 = OpFMul %839 %840 
                                       f32_4 %842 = OpLoad %125 
                                       f32_4 %843 = OpVectorShuffle %842 %841 4 5 6 3 
                                                      OpStore %125 %843 
                                       f32_4 %844 = OpLoad %125 
                                       f32_3 %845 = OpVectorShuffle %844 %844 0 1 2 
                              Uniform f32_4* %846 = OpAccessChain %27 %724 
                                       f32_4 %847 = OpLoad %846 
                                       f32_3 %848 = OpVectorShuffle %847 %847 0 0 0 
                                       f32_3 %849 = OpFMul %845 %848 
                                       f32_4 %850 = OpLoad %125 
                                       f32_4 %851 = OpVectorShuffle %850 %849 4 5 6 3 
                                                      OpStore %125 %851 
                                       f32_4 %854 = OpLoad %125 
                                       f32_3 %855 = OpVectorShuffle %854 %854 0 1 2 
                                       f32_3 %856 = OpLoad %9 
                                       f32_3 %857 = OpFMul %855 %856 
                                       f32_3 %858 = OpLoad %39 
                                       f32_3 %859 = OpFAdd %857 %858 
                                       f32_4 %860 = OpLoad %853 
                                       f32_4 %861 = OpVectorShuffle %860 %859 4 5 6 3 
                                                      OpStore %853 %861 
                                 Output f32* %863 = OpAccessChain %853 %80 
                                                      OpStore %863 %251 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
}
Program "fp" {
SubProgram "d3d11 " {
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
""
}
SubProgram "vulkan " {
""
}
SubProgram "d3d11 " {
Keywords { "AB_HIGH_PRECISION" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "AB_HIGH_PRECISION" }
""
}
SubProgram "vulkan " {
Keywords { "AB_HIGH_PRECISION" }
""
}
}
}
 Pass {
  Name "frag_downsamplerNoWeightedAvg"
  ZTest Always
  ZWrite Off
  Cull Off
  GpuProgramID 651075
Program "vp" {
SubProgram "d3d11 " {
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in  vec4 in_POSITION0;
in  vec2 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BloomRange;
uniform 	vec4 _MainTex_TexelSize;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
in  vec2 vs_TEXCOORD0;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
vec4 u_xlat6;
vec4 u_xlat7;
float u_xlat24;
void main()
{
    u_xlat0.xy = _MainTex_TexelSize.xy * vec2(2.0, 2.0) + vs_TEXCOORD0.xy;
    u_xlat0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0 = texture(_MainTex, u_xlat0.xy);
    u_xlat0.xyz = u_xlat0.xyz * _BloomRange.xxx;
    u_xlat1.xy = _MainTex_TexelSize.xy * vec2(0.0, 2.0) + vs_TEXCOORD0.xy;
    u_xlat1.xy = u_xlat1.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1 = texture(_MainTex, u_xlat1.xy);
    u_xlat1.xyz = u_xlat1.xyz * _BloomRange.xxx;
    u_xlat2 = _MainTex_TexelSize.xyxy * vec4(2.0, 0.0, -2.0, 2.0) + vs_TEXCOORD0.xyxy;
    u_xlat2 = u_xlat2 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
    u_xlat3 = texture(_MainTex, u_xlat2.xy);
    u_xlat2 = texture(_MainTex, u_xlat2.zw);
    u_xlat3.xyz = u_xlat3.xyz * _BloomRange.xxx;
    u_xlat4.xyz = u_xlat3.www * u_xlat3.xyz;
    u_xlat5.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat5 = texture(_MainTex, u_xlat5.xy);
    u_xlat5.xyz = u_xlat5.xyz * _BloomRange.xxx;
    u_xlat4.xyz = u_xlat5.xyz * u_xlat5.www + u_xlat4.xyz;
    u_xlat4.xyz = u_xlat1.xyz * u_xlat1.www + u_xlat4.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat0.www + u_xlat4.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(0.25, 0.25, 0.25);
    u_xlat2.xyz = u_xlat2.xyz * _BloomRange.xxx;
    u_xlat4.xyz = u_xlat5.www * u_xlat5.xyz;
    u_xlat6 = _MainTex_TexelSize.xyxy * vec4(2.0, -2.0, -2.0, 0.0) + vs_TEXCOORD0.xyxy;
    u_xlat6 = u_xlat6 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
    u_xlat7 = texture(_MainTex, u_xlat6.zw);
    u_xlat6 = texture(_MainTex, u_xlat6.xy);
    u_xlat7.xyz = u_xlat7.xyz * _BloomRange.xxx;
    u_xlat4.xyz = u_xlat7.xyz * u_xlat7.www + u_xlat4.xyz;
    u_xlat2.xyz = u_xlat2.xyz * u_xlat2.www + u_xlat4.xyz;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat1.www + u_xlat2.xyz;
    u_xlat0.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25) + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat6.xyz * _BloomRange.xxx;
    u_xlat2 = _MainTex_TexelSize.xyxy * vec4(-2.0, -2.0, 0.0, -2.0) + vs_TEXCOORD0.xyxy;
    u_xlat2 = u_xlat2 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
    u_xlat4 = texture(_MainTex, u_xlat2.zw);
    u_xlat2 = texture(_MainTex, u_xlat2.xy);
    u_xlat4.xyz = u_xlat4.xyz * _BloomRange.xxx;
    u_xlat4.xyz = u_xlat4.www * u_xlat4.xyz;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat6.www + u_xlat4.xyz;
    u_xlat1.xyz = u_xlat5.xyz * u_xlat5.www + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat3.xyz * u_xlat3.www + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25) + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat2.xyz * _BloomRange.xxx;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.www + u_xlat4.xyz;
    u_xlat1.xyz = u_xlat7.xyz * u_xlat7.www + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat5.xyz * u_xlat5.www + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25) + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(0.125, 0.125, 0.125);
    u_xlat1 = _MainTex_TexelSize.xyxy * vec4(1.0, -1.0, -1.0, 1.0) + vs_TEXCOORD0.xyxy;
    u_xlat1 = u_xlat1 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
    u_xlat2 = texture(_MainTex, u_xlat1.xy);
    u_xlat1 = texture(_MainTex, u_xlat1.zw);
    u_xlat2.xyz = u_xlat2.xyz * _BloomRange.xxx;
    u_xlat2.xyz = u_xlat2.www * u_xlat2.xyz;
    u_xlat3.xy = vs_TEXCOORD0.xy + (-_MainTex_TexelSize.xy);
    u_xlat3.xy = u_xlat3.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat3 = texture(_MainTex, u_xlat3.xy);
    u_xlat3.xyz = u_xlat3.xyz * _BloomRange.xxx;
    u_xlat2.xyz = u_xlat3.xyz * u_xlat3.www + u_xlat2.xyz;
    u_xlat3.xy = vs_TEXCOORD0.xy + _MainTex_TexelSize.xy;
    u_xlat3.xy = u_xlat3.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat3 = texture(_MainTex, u_xlat3.xy);
    u_xlat3.xyz = u_xlat3.xyz * _BloomRange.xxx;
    u_xlat2.xyz = u_xlat3.xyz * u_xlat3.www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _BloomRange.xxx;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat1.www + u_xlat2.xyz;
    u_xlat0.xyz = u_xlat1.xyz * vec3(0.125, 0.125, 0.125) + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * _BloomRange.yyy;
    u_xlat24 = max(u_xlat0.y, u_xlat0.x);
    u_xlat1.x = max(u_xlat0.z, 9.99999997e-07);
    u_xlat24 = max(u_xlat24, u_xlat1.x);
    u_xlat24 = min(u_xlat24, 1.0);
    u_xlat24 = u_xlat24 * 255.0;
    u_xlat24 = ceil(u_xlat24);
    u_xlat24 = u_xlat24 * 0.00392156886;
    SV_Target0.xyz = u_xlat0.xyz / vec3(u_xlat24);
    SV_Target0.w = u_xlat24;
    return;
}

#endif
"
}
SubProgram "vulkan " {
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 94
; Schema: 0
                                              OpCapability Shader 
                                       %1 = OpExtInstImport "GLSL.std.450" 
                                              OpMemoryModel Logical GLSL450 
                                              OpEntryPoint Vertex %4 "main" %11 %72 %84 %86 
                                              OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                              OpDecorate %11 Location 11 
                                              OpDecorate %16 ArrayStride 16 
                                              OpDecorate %17 ArrayStride 17 
                                              OpMemberDecorate %18 0 Offset 18 
                                              OpMemberDecorate %18 1 Offset 18 
                                              OpDecorate %18 Block 
                                              OpDecorate %20 DescriptorSet 20 
                                              OpDecorate %20 Binding 20 
                                              OpMemberDecorate %70 0 BuiltIn 70 
                                              OpMemberDecorate %70 1 BuiltIn 70 
                                              OpMemberDecorate %70 2 BuiltIn 70 
                                              OpDecorate %70 Block 
                                              OpDecorate vs_TEXCOORD0 Location 84 
                                              OpDecorate %86 Location 86 
                                       %2 = OpTypeVoid 
                                       %3 = OpTypeFunction %2 
                                       %6 = OpTypeFloat 32 
                                       %7 = OpTypeVector %6 4 
                                       %8 = OpTypePointer Private %7 
                        Private f32_4* %9 = OpVariable Private 
                                      %10 = OpTypePointer Input %7 
                         Input f32_4* %11 = OpVariable Input 
                                      %14 = OpTypeInt 32 0 
                                  u32 %15 = OpConstant 4 
                                      %16 = OpTypeArray %7 %15 
                                      %17 = OpTypeArray %7 %15 
                                      %18 = OpTypeStruct %16 %17 
                                      %19 = OpTypePointer Uniform %18 
Uniform struct {f32_4[4]; f32_4[4];}* %20 = OpVariable Uniform 
                                      %21 = OpTypeInt 32 1 
                                  i32 %22 = OpConstant 0 
                                  i32 %23 = OpConstant 1 
                                      %24 = OpTypePointer Uniform %7 
                                  i32 %35 = OpConstant 2 
                                  i32 %44 = OpConstant 3 
                       Private f32_4* %48 = OpVariable Private 
                                  u32 %68 = OpConstant 1 
                                      %69 = OpTypeArray %6 %68 
                                      %70 = OpTypeStruct %7 %6 %69 
                                      %71 = OpTypePointer Output %70 
 Output struct {f32_4; f32; f32[1];}* %72 = OpVariable Output 
                                      %80 = OpTypePointer Output %7 
                                      %82 = OpTypeVector %6 2 
                                      %83 = OpTypePointer Output %82 
               Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                      %85 = OpTypePointer Input %82 
                         Input f32_2* %86 = OpVariable Input 
                                      %88 = OpTypePointer Output %6 
                                  void %4 = OpFunction None %3 
                                       %5 = OpLabel 
                                f32_4 %12 = OpLoad %11 
                                f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                       Uniform f32_4* %25 = OpAccessChain %20 %22 %23 
                                f32_4 %26 = OpLoad %25 
                                f32_4 %27 = OpFMul %13 %26 
                                              OpStore %9 %27 
                       Uniform f32_4* %28 = OpAccessChain %20 %22 %22 
                                f32_4 %29 = OpLoad %28 
                                f32_4 %30 = OpLoad %11 
                                f32_4 %31 = OpVectorShuffle %30 %30 0 0 0 0 
                                f32_4 %32 = OpFMul %29 %31 
                                f32_4 %33 = OpLoad %9 
                                f32_4 %34 = OpFAdd %32 %33 
                                              OpStore %9 %34 
                       Uniform f32_4* %36 = OpAccessChain %20 %22 %35 
                                f32_4 %37 = OpLoad %36 
                                f32_4 %38 = OpLoad %11 
                                f32_4 %39 = OpVectorShuffle %38 %38 2 2 2 2 
                                f32_4 %40 = OpFMul %37 %39 
                                f32_4 %41 = OpLoad %9 
                                f32_4 %42 = OpFAdd %40 %41 
                                              OpStore %9 %42 
                                f32_4 %43 = OpLoad %9 
                       Uniform f32_4* %45 = OpAccessChain %20 %22 %44 
                                f32_4 %46 = OpLoad %45 
                                f32_4 %47 = OpFAdd %43 %46 
                                              OpStore %9 %47 
                                f32_4 %49 = OpLoad %9 
                                f32_4 %50 = OpVectorShuffle %49 %49 1 1 1 1 
                       Uniform f32_4* %51 = OpAccessChain %20 %23 %23 
                                f32_4 %52 = OpLoad %51 
                                f32_4 %53 = OpFMul %50 %52 
                                              OpStore %48 %53 
                       Uniform f32_4* %54 = OpAccessChain %20 %23 %22 
                                f32_4 %55 = OpLoad %54 
                                f32_4 %56 = OpLoad %9 
                                f32_4 %57 = OpVectorShuffle %56 %56 0 0 0 0 
                                f32_4 %58 = OpFMul %55 %57 
                                f32_4 %59 = OpLoad %48 
                                f32_4 %60 = OpFAdd %58 %59 
                                              OpStore %48 %60 
                       Uniform f32_4* %61 = OpAccessChain %20 %23 %35 
                                f32_4 %62 = OpLoad %61 
                                f32_4 %63 = OpLoad %9 
                                f32_4 %64 = OpVectorShuffle %63 %63 2 2 2 2 
                                f32_4 %65 = OpFMul %62 %64 
                                f32_4 %66 = OpLoad %48 
                                f32_4 %67 = OpFAdd %65 %66 
                                              OpStore %48 %67 
                       Uniform f32_4* %73 = OpAccessChain %20 %23 %44 
                                f32_4 %74 = OpLoad %73 
                                f32_4 %75 = OpLoad %9 
                                f32_4 %76 = OpVectorShuffle %75 %75 3 3 3 3 
                                f32_4 %77 = OpFMul %74 %76 
                                f32_4 %78 = OpLoad %48 
                                f32_4 %79 = OpFAdd %77 %78 
                        Output f32_4* %81 = OpAccessChain %72 %22 
                                              OpStore %81 %79 
                                f32_2 %87 = OpLoad %86 
                                              OpStore vs_TEXCOORD0 %87 
                          Output f32* %89 = OpAccessChain %72 %22 %68 
                                  f32 %90 = OpLoad %89 
                                  f32 %91 = OpFNegate %90 
                          Output f32* %92 = OpAccessChain %72 %22 %68 
                                              OpStore %92 %91 
                                              OpReturn
                                              OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 659
; Schema: 0
                                               OpCapability Shader 
                                        %1 = OpExtInstImport "GLSL.std.450" 
                                               OpMemoryModel Logical GLSL450 
                                               OpEntryPoint Fragment %4 "main" %24 %646 
                                               OpExecutionMode %4 OriginUpperLeft 
                                               OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                               OpMemberDecorate %10 0 Offset 10 
                                               OpMemberDecorate %10 1 Offset 10 
                                               OpMemberDecorate %10 2 Offset 10 
                                               OpDecorate %10 Block 
                                               OpDecorate %12 DescriptorSet 12 
                                               OpDecorate %12 Binding 12 
                                               OpDecorate vs_TEXCOORD0 Location 24 
                                               OpDecorate %44 DescriptorSet 44 
                                               OpDecorate %44 Binding 44 
                                               OpDecorate %48 DescriptorSet 48 
                                               OpDecorate %48 Binding 48 
                                               OpDecorate %646 Location 646 
                                        %2 = OpTypeVoid 
                                        %3 = OpTypeFunction %2 
                                        %6 = OpTypeFloat 32 
                                        %7 = OpTypeVector %6 4 
                                        %8 = OpTypePointer Private %7 
                         Private f32_4* %9 = OpVariable Private 
                                       %10 = OpTypeStruct %7 %7 %7 
                                       %11 = OpTypePointer Uniform %10 
Uniform struct {f32_4; f32_4; f32_4;}* %12 = OpVariable Uniform 
                                       %13 = OpTypeInt 32 1 
                                   i32 %14 = OpConstant 2 
                                       %15 = OpTypeVector %6 2 
                                       %16 = OpTypePointer Uniform %7 
                                   f32 %20 = OpConstant 3.674022E-40 
                                 f32_2 %21 = OpConstantComposite %20 %20 
                                       %23 = OpTypePointer Input %15 
                 Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                   i32 %31 = OpConstant 0 
                                       %42 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                       %43 = OpTypePointer UniformConstant %42 
  UniformConstant read_only Texture2D* %44 = OpVariable UniformConstant 
                                       %46 = OpTypeSampler 
                                       %47 = OpTypePointer UniformConstant %46 
              UniformConstant sampler* %48 = OpVariable UniformConstant 
                                       %50 = OpTypeSampledImage %42 
                                       %55 = OpTypeVector %6 3 
                                   i32 %58 = OpConstant 1 
                        Private f32_4* %65 = OpVariable Private 
                                   f32 %69 = OpConstant 3.674022E-40 
                                 f32_2 %70 = OpConstantComposite %69 %20 
                       Private f32_4* %102 = OpVariable Private 
                                  f32 %106 = OpConstant 3.674022E-40 
                                f32_4 %107 = OpConstantComposite %20 %69 %106 %20 
                       Private f32_4* %121 = OpVariable Private 
                       Private f32_4* %142 = OpVariable Private 
                       Private f32_4* %150 = OpVariable Private 
                                  f32 %208 = OpConstant 3.674022E-40 
                                f32_3 %209 = OpConstantComposite %208 %208 %208 
                       Private f32_4* %228 = OpVariable Private 
                                f32_4 %232 = OpConstantComposite %20 %106 %106 %69 
                       Private f32_4* %246 = OpVariable Private 
                                f32_4 %316 = OpConstantComposite %106 %106 %69 %106 
                                  f32 %443 = OpConstant 3.674022E-40 
                                f32_3 %444 = OpConstantComposite %443 %443 %443 
                                  f32 %451 = OpConstant 3.674022E-40 
                                  f32 %452 = OpConstant 3.674022E-40 
                                f32_4 %453 = OpConstantComposite %451 %452 %452 %451 
                                      %615 = OpTypePointer Private %6 
                         Private f32* %616 = OpVariable Private 
                                      %617 = OpTypeInt 32 0 
                                  u32 %618 = OpConstant 1 
                                  u32 %621 = OpConstant 0 
                                  u32 %625 = OpConstant 2 
                                  f32 %628 = OpConstant 3.674022E-40 
                                  f32 %638 = OpConstant 3.674022E-40 
                                  f32 %643 = OpConstant 3.674022E-40 
                                      %645 = OpTypePointer Output %7 
                        Output f32_4* %646 = OpVariable Output 
                                  u32 %655 = OpConstant 3 
                                      %656 = OpTypePointer Output %6 
                                   void %4 = OpFunction None %3 
                                        %5 = OpLabel 
                        Uniform f32_4* %17 = OpAccessChain %12 %14 
                                 f32_4 %18 = OpLoad %17 
                                 f32_2 %19 = OpVectorShuffle %18 %18 0 1 
                                 f32_2 %22 = OpFMul %19 %21 
                                 f32_2 %25 = OpLoad vs_TEXCOORD0 
                                 f32_2 %26 = OpFAdd %22 %25 
                                 f32_4 %27 = OpLoad %9 
                                 f32_4 %28 = OpVectorShuffle %27 %26 4 5 2 3 
                                               OpStore %9 %28 
                                 f32_4 %29 = OpLoad %9 
                                 f32_2 %30 = OpVectorShuffle %29 %29 0 1 
                        Uniform f32_4* %32 = OpAccessChain %12 %31 
                                 f32_4 %33 = OpLoad %32 
                                 f32_2 %34 = OpVectorShuffle %33 %33 0 1 
                                 f32_2 %35 = OpFMul %30 %34 
                        Uniform f32_4* %36 = OpAccessChain %12 %31 
                                 f32_4 %37 = OpLoad %36 
                                 f32_2 %38 = OpVectorShuffle %37 %37 2 3 
                                 f32_2 %39 = OpFAdd %35 %38 
                                 f32_4 %40 = OpLoad %9 
                                 f32_4 %41 = OpVectorShuffle %40 %39 4 5 2 3 
                                               OpStore %9 %41 
                   read_only Texture2D %45 = OpLoad %44 
                               sampler %49 = OpLoad %48 
            read_only Texture2DSampled %51 = OpSampledImage %45 %49 
                                 f32_4 %52 = OpLoad %9 
                                 f32_2 %53 = OpVectorShuffle %52 %52 0 1 
                                 f32_4 %54 = OpImageSampleImplicitLod %51 %53 
                                               OpStore %9 %54 
                                 f32_4 %56 = OpLoad %9 
                                 f32_3 %57 = OpVectorShuffle %56 %56 0 1 2 
                        Uniform f32_4* %59 = OpAccessChain %12 %58 
                                 f32_4 %60 = OpLoad %59 
                                 f32_3 %61 = OpVectorShuffle %60 %60 0 0 0 
                                 f32_3 %62 = OpFMul %57 %61 
                                 f32_4 %63 = OpLoad %9 
                                 f32_4 %64 = OpVectorShuffle %63 %62 4 5 6 3 
                                               OpStore %9 %64 
                        Uniform f32_4* %66 = OpAccessChain %12 %14 
                                 f32_4 %67 = OpLoad %66 
                                 f32_2 %68 = OpVectorShuffle %67 %67 0 1 
                                 f32_2 %71 = OpFMul %68 %70 
                                 f32_2 %72 = OpLoad vs_TEXCOORD0 
                                 f32_2 %73 = OpFAdd %71 %72 
                                 f32_4 %74 = OpLoad %65 
                                 f32_4 %75 = OpVectorShuffle %74 %73 4 5 2 3 
                                               OpStore %65 %75 
                                 f32_4 %76 = OpLoad %65 
                                 f32_2 %77 = OpVectorShuffle %76 %76 0 1 
                        Uniform f32_4* %78 = OpAccessChain %12 %31 
                                 f32_4 %79 = OpLoad %78 
                                 f32_2 %80 = OpVectorShuffle %79 %79 0 1 
                                 f32_2 %81 = OpFMul %77 %80 
                        Uniform f32_4* %82 = OpAccessChain %12 %31 
                                 f32_4 %83 = OpLoad %82 
                                 f32_2 %84 = OpVectorShuffle %83 %83 2 3 
                                 f32_2 %85 = OpFAdd %81 %84 
                                 f32_4 %86 = OpLoad %65 
                                 f32_4 %87 = OpVectorShuffle %86 %85 4 5 2 3 
                                               OpStore %65 %87 
                   read_only Texture2D %88 = OpLoad %44 
                               sampler %89 = OpLoad %48 
            read_only Texture2DSampled %90 = OpSampledImage %88 %89 
                                 f32_4 %91 = OpLoad %65 
                                 f32_2 %92 = OpVectorShuffle %91 %91 0 1 
                                 f32_4 %93 = OpImageSampleImplicitLod %90 %92 
                                               OpStore %65 %93 
                                 f32_4 %94 = OpLoad %65 
                                 f32_3 %95 = OpVectorShuffle %94 %94 0 1 2 
                        Uniform f32_4* %96 = OpAccessChain %12 %58 
                                 f32_4 %97 = OpLoad %96 
                                 f32_3 %98 = OpVectorShuffle %97 %97 0 0 0 
                                 f32_3 %99 = OpFMul %95 %98 
                                f32_4 %100 = OpLoad %65 
                                f32_4 %101 = OpVectorShuffle %100 %99 4 5 6 3 
                                               OpStore %65 %101 
                       Uniform f32_4* %103 = OpAccessChain %12 %14 
                                f32_4 %104 = OpLoad %103 
                                f32_4 %105 = OpVectorShuffle %104 %104 0 1 0 1 
                                f32_4 %108 = OpFMul %105 %107 
                                f32_2 %109 = OpLoad vs_TEXCOORD0 
                                f32_4 %110 = OpVectorShuffle %109 %109 0 1 0 1 
                                f32_4 %111 = OpFAdd %108 %110 
                                               OpStore %102 %111 
                                f32_4 %112 = OpLoad %102 
                       Uniform f32_4* %113 = OpAccessChain %12 %31 
                                f32_4 %114 = OpLoad %113 
                                f32_4 %115 = OpVectorShuffle %114 %114 0 1 0 1 
                                f32_4 %116 = OpFMul %112 %115 
                       Uniform f32_4* %117 = OpAccessChain %12 %31 
                                f32_4 %118 = OpLoad %117 
                                f32_4 %119 = OpVectorShuffle %118 %118 2 3 2 3 
                                f32_4 %120 = OpFAdd %116 %119 
                                               OpStore %102 %120 
                  read_only Texture2D %122 = OpLoad %44 
                              sampler %123 = OpLoad %48 
           read_only Texture2DSampled %124 = OpSampledImage %122 %123 
                                f32_4 %125 = OpLoad %102 
                                f32_2 %126 = OpVectorShuffle %125 %125 0 1 
                                f32_4 %127 = OpImageSampleImplicitLod %124 %126 
                                               OpStore %121 %127 
                  read_only Texture2D %128 = OpLoad %44 
                              sampler %129 = OpLoad %48 
           read_only Texture2DSampled %130 = OpSampledImage %128 %129 
                                f32_4 %131 = OpLoad %102 
                                f32_2 %132 = OpVectorShuffle %131 %131 2 3 
                                f32_4 %133 = OpImageSampleImplicitLod %130 %132 
                                               OpStore %102 %133 
                                f32_4 %134 = OpLoad %121 
                                f32_3 %135 = OpVectorShuffle %134 %134 0 1 2 
                       Uniform f32_4* %136 = OpAccessChain %12 %58 
                                f32_4 %137 = OpLoad %136 
                                f32_3 %138 = OpVectorShuffle %137 %137 0 0 0 
                                f32_3 %139 = OpFMul %135 %138 
                                f32_4 %140 = OpLoad %121 
                                f32_4 %141 = OpVectorShuffle %140 %139 4 5 6 3 
                                               OpStore %121 %141 
                                f32_4 %143 = OpLoad %121 
                                f32_3 %144 = OpVectorShuffle %143 %143 3 3 3 
                                f32_4 %145 = OpLoad %121 
                                f32_3 %146 = OpVectorShuffle %145 %145 0 1 2 
                                f32_3 %147 = OpFMul %144 %146 
                                f32_4 %148 = OpLoad %142 
                                f32_4 %149 = OpVectorShuffle %148 %147 4 5 6 3 
                                               OpStore %142 %149 
                                f32_2 %151 = OpLoad vs_TEXCOORD0 
                       Uniform f32_4* %152 = OpAccessChain %12 %31 
                                f32_4 %153 = OpLoad %152 
                                f32_2 %154 = OpVectorShuffle %153 %153 0 1 
                                f32_2 %155 = OpFMul %151 %154 
                       Uniform f32_4* %156 = OpAccessChain %12 %31 
                                f32_4 %157 = OpLoad %156 
                                f32_2 %158 = OpVectorShuffle %157 %157 2 3 
                                f32_2 %159 = OpFAdd %155 %158 
                                f32_4 %160 = OpLoad %150 
                                f32_4 %161 = OpVectorShuffle %160 %159 4 5 2 3 
                                               OpStore %150 %161 
                  read_only Texture2D %162 = OpLoad %44 
                              sampler %163 = OpLoad %48 
           read_only Texture2DSampled %164 = OpSampledImage %162 %163 
                                f32_4 %165 = OpLoad %150 
                                f32_2 %166 = OpVectorShuffle %165 %165 0 1 
                                f32_4 %167 = OpImageSampleImplicitLod %164 %166 
                                               OpStore %150 %167 
                                f32_4 %168 = OpLoad %150 
                                f32_3 %169 = OpVectorShuffle %168 %168 0 1 2 
                       Uniform f32_4* %170 = OpAccessChain %12 %58 
                                f32_4 %171 = OpLoad %170 
                                f32_3 %172 = OpVectorShuffle %171 %171 0 0 0 
                                f32_3 %173 = OpFMul %169 %172 
                                f32_4 %174 = OpLoad %150 
                                f32_4 %175 = OpVectorShuffle %174 %173 4 5 6 3 
                                               OpStore %150 %175 
                                f32_4 %176 = OpLoad %150 
                                f32_3 %177 = OpVectorShuffle %176 %176 0 1 2 
                                f32_4 %178 = OpLoad %150 
                                f32_3 %179 = OpVectorShuffle %178 %178 3 3 3 
                                f32_3 %180 = OpFMul %177 %179 
                                f32_4 %181 = OpLoad %142 
                                f32_3 %182 = OpVectorShuffle %181 %181 0 1 2 
                                f32_3 %183 = OpFAdd %180 %182 
                                f32_4 %184 = OpLoad %142 
                                f32_4 %185 = OpVectorShuffle %184 %183 4 5 6 3 
                                               OpStore %142 %185 
                                f32_4 %186 = OpLoad %65 
                                f32_3 %187 = OpVectorShuffle %186 %186 0 1 2 
                                f32_4 %188 = OpLoad %65 
                                f32_3 %189 = OpVectorShuffle %188 %188 3 3 3 
                                f32_3 %190 = OpFMul %187 %189 
                                f32_4 %191 = OpLoad %142 
                                f32_3 %192 = OpVectorShuffle %191 %191 0 1 2 
                                f32_3 %193 = OpFAdd %190 %192 
                                f32_4 %194 = OpLoad %142 
                                f32_4 %195 = OpVectorShuffle %194 %193 4 5 6 3 
                                               OpStore %142 %195 
                                f32_4 %196 = OpLoad %9 
                                f32_3 %197 = OpVectorShuffle %196 %196 0 1 2 
                                f32_4 %198 = OpLoad %9 
                                f32_3 %199 = OpVectorShuffle %198 %198 3 3 3 
                                f32_3 %200 = OpFMul %197 %199 
                                f32_4 %201 = OpLoad %142 
                                f32_3 %202 = OpVectorShuffle %201 %201 0 1 2 
                                f32_3 %203 = OpFAdd %200 %202 
                                f32_4 %204 = OpLoad %9 
                                f32_4 %205 = OpVectorShuffle %204 %203 4 5 6 3 
                                               OpStore %9 %205 
                                f32_4 %206 = OpLoad %9 
                                f32_3 %207 = OpVectorShuffle %206 %206 0 1 2 
                                f32_3 %210 = OpFMul %207 %209 
                                f32_4 %211 = OpLoad %9 
                                f32_4 %212 = OpVectorShuffle %211 %210 4 5 6 3 
                                               OpStore %9 %212 
                                f32_4 %213 = OpLoad %102 
                                f32_3 %214 = OpVectorShuffle %213 %213 0 1 2 
                       Uniform f32_4* %215 = OpAccessChain %12 %58 
                                f32_4 %216 = OpLoad %215 
                                f32_3 %217 = OpVectorShuffle %216 %216 0 0 0 
                                f32_3 %218 = OpFMul %214 %217 
                                f32_4 %219 = OpLoad %102 
                                f32_4 %220 = OpVectorShuffle %219 %218 4 5 6 3 
                                               OpStore %102 %220 
                                f32_4 %221 = OpLoad %150 
                                f32_3 %222 = OpVectorShuffle %221 %221 3 3 3 
                                f32_4 %223 = OpLoad %150 
                                f32_3 %224 = OpVectorShuffle %223 %223 0 1 2 
                                f32_3 %225 = OpFMul %222 %224 
                                f32_4 %226 = OpLoad %142 
                                f32_4 %227 = OpVectorShuffle %226 %225 4 5 6 3 
                                               OpStore %142 %227 
                       Uniform f32_4* %229 = OpAccessChain %12 %14 
                                f32_4 %230 = OpLoad %229 
                                f32_4 %231 = OpVectorShuffle %230 %230 0 1 0 1 
                                f32_4 %233 = OpFMul %231 %232 
                                f32_2 %234 = OpLoad vs_TEXCOORD0 
                                f32_4 %235 = OpVectorShuffle %234 %234 0 1 0 1 
                                f32_4 %236 = OpFAdd %233 %235 
                                               OpStore %228 %236 
                                f32_4 %237 = OpLoad %228 
                       Uniform f32_4* %238 = OpAccessChain %12 %31 
                                f32_4 %239 = OpLoad %238 
                                f32_4 %240 = OpVectorShuffle %239 %239 0 1 0 1 
                                f32_4 %241 = OpFMul %237 %240 
                       Uniform f32_4* %242 = OpAccessChain %12 %31 
                                f32_4 %243 = OpLoad %242 
                                f32_4 %244 = OpVectorShuffle %243 %243 2 3 2 3 
                                f32_4 %245 = OpFAdd %241 %244 
                                               OpStore %228 %245 
                  read_only Texture2D %247 = OpLoad %44 
                              sampler %248 = OpLoad %48 
           read_only Texture2DSampled %249 = OpSampledImage %247 %248 
                                f32_4 %250 = OpLoad %228 
                                f32_2 %251 = OpVectorShuffle %250 %250 2 3 
                                f32_4 %252 = OpImageSampleImplicitLod %249 %251 
                                               OpStore %246 %252 
                  read_only Texture2D %253 = OpLoad %44 
                              sampler %254 = OpLoad %48 
           read_only Texture2DSampled %255 = OpSampledImage %253 %254 
                                f32_4 %256 = OpLoad %228 
                                f32_2 %257 = OpVectorShuffle %256 %256 0 1 
                                f32_4 %258 = OpImageSampleImplicitLod %255 %257 
                                               OpStore %228 %258 
                                f32_4 %259 = OpLoad %246 
                                f32_3 %260 = OpVectorShuffle %259 %259 0 1 2 
                       Uniform f32_4* %261 = OpAccessChain %12 %58 
                                f32_4 %262 = OpLoad %261 
                                f32_3 %263 = OpVectorShuffle %262 %262 0 0 0 
                                f32_3 %264 = OpFMul %260 %263 
                                f32_4 %265 = OpLoad %246 
                                f32_4 %266 = OpVectorShuffle %265 %264 4 5 6 3 
                                               OpStore %246 %266 
                                f32_4 %267 = OpLoad %246 
                                f32_3 %268 = OpVectorShuffle %267 %267 0 1 2 
                                f32_4 %269 = OpLoad %246 
                                f32_3 %270 = OpVectorShuffle %269 %269 3 3 3 
                                f32_3 %271 = OpFMul %268 %270 
                                f32_4 %272 = OpLoad %142 
                                f32_3 %273 = OpVectorShuffle %272 %272 0 1 2 
                                f32_3 %274 = OpFAdd %271 %273 
                                f32_4 %275 = OpLoad %142 
                                f32_4 %276 = OpVectorShuffle %275 %274 4 5 6 3 
                                               OpStore %142 %276 
                                f32_4 %277 = OpLoad %102 
                                f32_3 %278 = OpVectorShuffle %277 %277 0 1 2 
                                f32_4 %279 = OpLoad %102 
                                f32_3 %280 = OpVectorShuffle %279 %279 3 3 3 
                                f32_3 %281 = OpFMul %278 %280 
                                f32_4 %282 = OpLoad %142 
                                f32_3 %283 = OpVectorShuffle %282 %282 0 1 2 
                                f32_3 %284 = OpFAdd %281 %283 
                                f32_4 %285 = OpLoad %102 
                                f32_4 %286 = OpVectorShuffle %285 %284 4 5 6 3 
                                               OpStore %102 %286 
                                f32_4 %287 = OpLoad %65 
                                f32_3 %288 = OpVectorShuffle %287 %287 0 1 2 
                                f32_4 %289 = OpLoad %65 
                                f32_3 %290 = OpVectorShuffle %289 %289 3 3 3 
                                f32_3 %291 = OpFMul %288 %290 
                                f32_4 %292 = OpLoad %102 
                                f32_3 %293 = OpVectorShuffle %292 %292 0 1 2 
                                f32_3 %294 = OpFAdd %291 %293 
                                f32_4 %295 = OpLoad %65 
                                f32_4 %296 = OpVectorShuffle %295 %294 4 5 6 3 
                                               OpStore %65 %296 
                                f32_4 %297 = OpLoad %65 
                                f32_3 %298 = OpVectorShuffle %297 %297 0 1 2 
                                f32_3 %299 = OpFMul %298 %209 
                                f32_4 %300 = OpLoad %9 
                                f32_3 %301 = OpVectorShuffle %300 %300 0 1 2 
                                f32_3 %302 = OpFAdd %299 %301 
                                f32_4 %303 = OpLoad %9 
                                f32_4 %304 = OpVectorShuffle %303 %302 4 5 6 3 
                                               OpStore %9 %304 
                                f32_4 %305 = OpLoad %228 
                                f32_3 %306 = OpVectorShuffle %305 %305 0 1 2 
                       Uniform f32_4* %307 = OpAccessChain %12 %58 
                                f32_4 %308 = OpLoad %307 
                                f32_3 %309 = OpVectorShuffle %308 %308 0 0 0 
                                f32_3 %310 = OpFMul %306 %309 
                                f32_4 %311 = OpLoad %65 
                                f32_4 %312 = OpVectorShuffle %311 %310 4 5 6 3 
                                               OpStore %65 %312 
                       Uniform f32_4* %313 = OpAccessChain %12 %14 
                                f32_4 %314 = OpLoad %313 
                                f32_4 %315 = OpVectorShuffle %314 %314 0 1 0 1 
                                f32_4 %317 = OpFMul %315 %316 
                                f32_2 %318 = OpLoad vs_TEXCOORD0 
                                f32_4 %319 = OpVectorShuffle %318 %318 0 1 0 1 
                                f32_4 %320 = OpFAdd %317 %319 
                                               OpStore %102 %320 
                                f32_4 %321 = OpLoad %102 
                       Uniform f32_4* %322 = OpAccessChain %12 %31 
                                f32_4 %323 = OpLoad %322 
                                f32_4 %324 = OpVectorShuffle %323 %323 0 1 0 1 
                                f32_4 %325 = OpFMul %321 %324 
                       Uniform f32_4* %326 = OpAccessChain %12 %31 
                                f32_4 %327 = OpLoad %326 
                                f32_4 %328 = OpVectorShuffle %327 %327 2 3 2 3 
                                f32_4 %329 = OpFAdd %325 %328 
                                               OpStore %102 %329 
                  read_only Texture2D %330 = OpLoad %44 
                              sampler %331 = OpLoad %48 
           read_only Texture2DSampled %332 = OpSampledImage %330 %331 
                                f32_4 %333 = OpLoad %102 
                                f32_2 %334 = OpVectorShuffle %333 %333 2 3 
                                f32_4 %335 = OpImageSampleImplicitLod %332 %334 
                                               OpStore %142 %335 
                  read_only Texture2D %336 = OpLoad %44 
                              sampler %337 = OpLoad %48 
           read_only Texture2DSampled %338 = OpSampledImage %336 %337 
                                f32_4 %339 = OpLoad %102 
                                f32_2 %340 = OpVectorShuffle %339 %339 0 1 
                                f32_4 %341 = OpImageSampleImplicitLod %338 %340 
                                               OpStore %102 %341 
                                f32_4 %342 = OpLoad %142 
                                f32_3 %343 = OpVectorShuffle %342 %342 0 1 2 
                       Uniform f32_4* %344 = OpAccessChain %12 %58 
                                f32_4 %345 = OpLoad %344 
                                f32_3 %346 = OpVectorShuffle %345 %345 0 0 0 
                                f32_3 %347 = OpFMul %343 %346 
                                f32_4 %348 = OpLoad %142 
                                f32_4 %349 = OpVectorShuffle %348 %347 4 5 6 3 
                                               OpStore %142 %349 
                                f32_4 %350 = OpLoad %142 
                                f32_3 %351 = OpVectorShuffle %350 %350 3 3 3 
                                f32_4 %352 = OpLoad %142 
                                f32_3 %353 = OpVectorShuffle %352 %352 0 1 2 
                                f32_3 %354 = OpFMul %351 %353 
                                f32_4 %355 = OpLoad %142 
                                f32_4 %356 = OpVectorShuffle %355 %354 4 5 6 3 
                                               OpStore %142 %356 
                                f32_4 %357 = OpLoad %65 
                                f32_3 %358 = OpVectorShuffle %357 %357 0 1 2 
                                f32_4 %359 = OpLoad %228 
                                f32_3 %360 = OpVectorShuffle %359 %359 3 3 3 
                                f32_3 %361 = OpFMul %358 %360 
                                f32_4 %362 = OpLoad %142 
                                f32_3 %363 = OpVectorShuffle %362 %362 0 1 2 
                                f32_3 %364 = OpFAdd %361 %363 
                                f32_4 %365 = OpLoad %65 
                                f32_4 %366 = OpVectorShuffle %365 %364 4 5 6 3 
                                               OpStore %65 %366 
                                f32_4 %367 = OpLoad %150 
                                f32_3 %368 = OpVectorShuffle %367 %367 0 1 2 
                                f32_4 %369 = OpLoad %150 
                                f32_3 %370 = OpVectorShuffle %369 %369 3 3 3 
                                f32_3 %371 = OpFMul %368 %370 
                                f32_4 %372 = OpLoad %65 
                                f32_3 %373 = OpVectorShuffle %372 %372 0 1 2 
                                f32_3 %374 = OpFAdd %371 %373 
                                f32_4 %375 = OpLoad %65 
                                f32_4 %376 = OpVectorShuffle %375 %374 4 5 6 3 
                                               OpStore %65 %376 
                                f32_4 %377 = OpLoad %121 
                                f32_3 %378 = OpVectorShuffle %377 %377 0 1 2 
                                f32_4 %379 = OpLoad %121 
                                f32_3 %380 = OpVectorShuffle %379 %379 3 3 3 
                                f32_3 %381 = OpFMul %378 %380 
                                f32_4 %382 = OpLoad %65 
                                f32_3 %383 = OpVectorShuffle %382 %382 0 1 2 
                                f32_3 %384 = OpFAdd %381 %383 
                                f32_4 %385 = OpLoad %65 
                                f32_4 %386 = OpVectorShuffle %385 %384 4 5 6 3 
                                               OpStore %65 %386 
                                f32_4 %387 = OpLoad %65 
                                f32_3 %388 = OpVectorShuffle %387 %387 0 1 2 
                                f32_3 %389 = OpFMul %388 %209 
                                f32_4 %390 = OpLoad %9 
                                f32_3 %391 = OpVectorShuffle %390 %390 0 1 2 
                                f32_3 %392 = OpFAdd %389 %391 
                                f32_4 %393 = OpLoad %9 
                                f32_4 %394 = OpVectorShuffle %393 %392 4 5 6 3 
                                               OpStore %9 %394 
                                f32_4 %395 = OpLoad %102 
                                f32_3 %396 = OpVectorShuffle %395 %395 0 1 2 
                       Uniform f32_4* %397 = OpAccessChain %12 %58 
                                f32_4 %398 = OpLoad %397 
                                f32_3 %399 = OpVectorShuffle %398 %398 0 0 0 
                                f32_3 %400 = OpFMul %396 %399 
                                f32_4 %401 = OpLoad %65 
                                f32_4 %402 = OpVectorShuffle %401 %400 4 5 6 3 
                                               OpStore %65 %402 
                                f32_4 %403 = OpLoad %65 
                                f32_3 %404 = OpVectorShuffle %403 %403 0 1 2 
                                f32_4 %405 = OpLoad %102 
                                f32_3 %406 = OpVectorShuffle %405 %405 3 3 3 
                                f32_3 %407 = OpFMul %404 %406 
                                f32_4 %408 = OpLoad %142 
                                f32_3 %409 = OpVectorShuffle %408 %408 0 1 2 
                                f32_3 %410 = OpFAdd %407 %409 
                                f32_4 %411 = OpLoad %65 
                                f32_4 %412 = OpVectorShuffle %411 %410 4 5 6 3 
                                               OpStore %65 %412 
                                f32_4 %413 = OpLoad %246 
                                f32_3 %414 = OpVectorShuffle %413 %413 0 1 2 
                                f32_4 %415 = OpLoad %246 
                                f32_3 %416 = OpVectorShuffle %415 %415 3 3 3 
                                f32_3 %417 = OpFMul %414 %416 
                                f32_4 %418 = OpLoad %65 
                                f32_3 %419 = OpVectorShuffle %418 %418 0 1 2 
                                f32_3 %420 = OpFAdd %417 %419 
                                f32_4 %421 = OpLoad %65 
                                f32_4 %422 = OpVectorShuffle %421 %420 4 5 6 3 
                                               OpStore %65 %422 
                                f32_4 %423 = OpLoad %150 
                                f32_3 %424 = OpVectorShuffle %423 %423 0 1 2 
                                f32_4 %425 = OpLoad %150 
                                f32_3 %426 = OpVectorShuffle %425 %425 3 3 3 
                                f32_3 %427 = OpFMul %424 %426 
                                f32_4 %428 = OpLoad %65 
                                f32_3 %429 = OpVectorShuffle %428 %428 0 1 2 
                                f32_3 %430 = OpFAdd %427 %429 
                                f32_4 %431 = OpLoad %65 
                                f32_4 %432 = OpVectorShuffle %431 %430 4 5 6 3 
                                               OpStore %65 %432 
                                f32_4 %433 = OpLoad %65 
                                f32_3 %434 = OpVectorShuffle %433 %433 0 1 2 
                                f32_3 %435 = OpFMul %434 %209 
                                f32_4 %436 = OpLoad %9 
                                f32_3 %437 = OpVectorShuffle %436 %436 0 1 2 
                                f32_3 %438 = OpFAdd %435 %437 
                                f32_4 %439 = OpLoad %9 
                                f32_4 %440 = OpVectorShuffle %439 %438 4 5 6 3 
                                               OpStore %9 %440 
                                f32_4 %441 = OpLoad %9 
                                f32_3 %442 = OpVectorShuffle %441 %441 0 1 2 
                                f32_3 %445 = OpFMul %442 %444 
                                f32_4 %446 = OpLoad %9 
                                f32_4 %447 = OpVectorShuffle %446 %445 4 5 6 3 
                                               OpStore %9 %447 
                       Uniform f32_4* %448 = OpAccessChain %12 %14 
                                f32_4 %449 = OpLoad %448 
                                f32_4 %450 = OpVectorShuffle %449 %449 0 1 0 1 
                                f32_4 %454 = OpFMul %450 %453 
                                f32_2 %455 = OpLoad vs_TEXCOORD0 
                                f32_4 %456 = OpVectorShuffle %455 %455 0 1 0 1 
                                f32_4 %457 = OpFAdd %454 %456 
                                               OpStore %65 %457 
                                f32_4 %458 = OpLoad %65 
                       Uniform f32_4* %459 = OpAccessChain %12 %31 
                                f32_4 %460 = OpLoad %459 
                                f32_4 %461 = OpVectorShuffle %460 %460 0 1 0 1 
                                f32_4 %462 = OpFMul %458 %461 
                       Uniform f32_4* %463 = OpAccessChain %12 %31 
                                f32_4 %464 = OpLoad %463 
                                f32_4 %465 = OpVectorShuffle %464 %464 2 3 2 3 
                                f32_4 %466 = OpFAdd %462 %465 
                                               OpStore %65 %466 
                  read_only Texture2D %467 = OpLoad %44 
                              sampler %468 = OpLoad %48 
           read_only Texture2DSampled %469 = OpSampledImage %467 %468 
                                f32_4 %470 = OpLoad %65 
                                f32_2 %471 = OpVectorShuffle %470 %470 0 1 
                                f32_4 %472 = OpImageSampleImplicitLod %469 %471 
                                               OpStore %102 %472 
                  read_only Texture2D %473 = OpLoad %44 
                              sampler %474 = OpLoad %48 
           read_only Texture2DSampled %475 = OpSampledImage %473 %474 
                                f32_4 %476 = OpLoad %65 
                                f32_2 %477 = OpVectorShuffle %476 %476 2 3 
                                f32_4 %478 = OpImageSampleImplicitLod %475 %477 
                                               OpStore %65 %478 
                                f32_4 %479 = OpLoad %102 
                                f32_3 %480 = OpVectorShuffle %479 %479 0 1 2 
                       Uniform f32_4* %481 = OpAccessChain %12 %58 
                                f32_4 %482 = OpLoad %481 
                                f32_3 %483 = OpVectorShuffle %482 %482 0 0 0 
                                f32_3 %484 = OpFMul %480 %483 
                                f32_4 %485 = OpLoad %102 
                                f32_4 %486 = OpVectorShuffle %485 %484 4 5 6 3 
                                               OpStore %102 %486 
                                f32_4 %487 = OpLoad %102 
                                f32_3 %488 = OpVectorShuffle %487 %487 3 3 3 
                                f32_4 %489 = OpLoad %102 
                                f32_3 %490 = OpVectorShuffle %489 %489 0 1 2 
                                f32_3 %491 = OpFMul %488 %490 
                                f32_4 %492 = OpLoad %102 
                                f32_4 %493 = OpVectorShuffle %492 %491 4 5 6 3 
                                               OpStore %102 %493 
                                f32_2 %494 = OpLoad vs_TEXCOORD0 
                       Uniform f32_4* %495 = OpAccessChain %12 %14 
                                f32_4 %496 = OpLoad %495 
                                f32_2 %497 = OpVectorShuffle %496 %496 0 1 
                                f32_2 %498 = OpFNegate %497 
                                f32_2 %499 = OpFAdd %494 %498 
                                f32_4 %500 = OpLoad %121 
                                f32_4 %501 = OpVectorShuffle %500 %499 4 5 2 3 
                                               OpStore %121 %501 
                                f32_4 %502 = OpLoad %121 
                                f32_2 %503 = OpVectorShuffle %502 %502 0 1 
                       Uniform f32_4* %504 = OpAccessChain %12 %31 
                                f32_4 %505 = OpLoad %504 
                                f32_2 %506 = OpVectorShuffle %505 %505 0 1 
                                f32_2 %507 = OpFMul %503 %506 
                       Uniform f32_4* %508 = OpAccessChain %12 %31 
                                f32_4 %509 = OpLoad %508 
                                f32_2 %510 = OpVectorShuffle %509 %509 2 3 
                                f32_2 %511 = OpFAdd %507 %510 
                                f32_4 %512 = OpLoad %121 
                                f32_4 %513 = OpVectorShuffle %512 %511 4 5 2 3 
                                               OpStore %121 %513 
                  read_only Texture2D %514 = OpLoad %44 
                              sampler %515 = OpLoad %48 
           read_only Texture2DSampled %516 = OpSampledImage %514 %515 
                                f32_4 %517 = OpLoad %121 
                                f32_2 %518 = OpVectorShuffle %517 %517 0 1 
                                f32_4 %519 = OpImageSampleImplicitLod %516 %518 
                                               OpStore %121 %519 
                                f32_4 %520 = OpLoad %121 
                                f32_3 %521 = OpVectorShuffle %520 %520 0 1 2 
                       Uniform f32_4* %522 = OpAccessChain %12 %58 
                                f32_4 %523 = OpLoad %522 
                                f32_3 %524 = OpVectorShuffle %523 %523 0 0 0 
                                f32_3 %525 = OpFMul %521 %524 
                                f32_4 %526 = OpLoad %121 
                                f32_4 %527 = OpVectorShuffle %526 %525 4 5 6 3 
                                               OpStore %121 %527 
                                f32_4 %528 = OpLoad %121 
                                f32_3 %529 = OpVectorShuffle %528 %528 0 1 2 
                                f32_4 %530 = OpLoad %121 
                                f32_3 %531 = OpVectorShuffle %530 %530 3 3 3 
                                f32_3 %532 = OpFMul %529 %531 
                                f32_4 %533 = OpLoad %102 
                                f32_3 %534 = OpVectorShuffle %533 %533 0 1 2 
                                f32_3 %535 = OpFAdd %532 %534 
                                f32_4 %536 = OpLoad %102 
                                f32_4 %537 = OpVectorShuffle %536 %535 4 5 6 3 
                                               OpStore %102 %537 
                                f32_2 %538 = OpLoad vs_TEXCOORD0 
                       Uniform f32_4* %539 = OpAccessChain %12 %14 
                                f32_4 %540 = OpLoad %539 
                                f32_2 %541 = OpVectorShuffle %540 %540 0 1 
                                f32_2 %542 = OpFAdd %538 %541 
                                f32_4 %543 = OpLoad %121 
                                f32_4 %544 = OpVectorShuffle %543 %542 4 5 2 3 
                                               OpStore %121 %544 
                                f32_4 %545 = OpLoad %121 
                                f32_2 %546 = OpVectorShuffle %545 %545 0 1 
                       Uniform f32_4* %547 = OpAccessChain %12 %31 
                                f32_4 %548 = OpLoad %547 
                                f32_2 %549 = OpVectorShuffle %548 %548 0 1 
                                f32_2 %550 = OpFMul %546 %549 
                       Uniform f32_4* %551 = OpAccessChain %12 %31 
                                f32_4 %552 = OpLoad %551 
                                f32_2 %553 = OpVectorShuffle %552 %552 2 3 
                                f32_2 %554 = OpFAdd %550 %553 
                                f32_4 %555 = OpLoad %121 
                                f32_4 %556 = OpVectorShuffle %555 %554 4 5 2 3 
                                               OpStore %121 %556 
                  read_only Texture2D %557 = OpLoad %44 
                              sampler %558 = OpLoad %48 
           read_only Texture2DSampled %559 = OpSampledImage %557 %558 
                                f32_4 %560 = OpLoad %121 
                                f32_2 %561 = OpVectorShuffle %560 %560 0 1 
                                f32_4 %562 = OpImageSampleImplicitLod %559 %561 
                                               OpStore %121 %562 
                                f32_4 %563 = OpLoad %121 
                                f32_3 %564 = OpVectorShuffle %563 %563 0 1 2 
                       Uniform f32_4* %565 = OpAccessChain %12 %58 
                                f32_4 %566 = OpLoad %565 
                                f32_3 %567 = OpVectorShuffle %566 %566 0 0 0 
                                f32_3 %568 = OpFMul %564 %567 
                                f32_4 %569 = OpLoad %121 
                                f32_4 %570 = OpVectorShuffle %569 %568 4 5 6 3 
                                               OpStore %121 %570 
                                f32_4 %571 = OpLoad %121 
                                f32_3 %572 = OpVectorShuffle %571 %571 0 1 2 
                                f32_4 %573 = OpLoad %121 
                                f32_3 %574 = OpVectorShuffle %573 %573 3 3 3 
                                f32_3 %575 = OpFMul %572 %574 
                                f32_4 %576 = OpLoad %102 
                                f32_3 %577 = OpVectorShuffle %576 %576 0 1 2 
                                f32_3 %578 = OpFAdd %575 %577 
                                f32_4 %579 = OpLoad %102 
                                f32_4 %580 = OpVectorShuffle %579 %578 4 5 6 3 
                                               OpStore %102 %580 
                                f32_4 %581 = OpLoad %65 
                                f32_3 %582 = OpVectorShuffle %581 %581 0 1 2 
                       Uniform f32_4* %583 = OpAccessChain %12 %58 
                                f32_4 %584 = OpLoad %583 
                                f32_3 %585 = OpVectorShuffle %584 %584 0 0 0 
                                f32_3 %586 = OpFMul %582 %585 
                                f32_4 %587 = OpLoad %65 
                                f32_4 %588 = OpVectorShuffle %587 %586 4 5 6 3 
                                               OpStore %65 %588 
                                f32_4 %589 = OpLoad %65 
                                f32_3 %590 = OpVectorShuffle %589 %589 0 1 2 
                                f32_4 %591 = OpLoad %65 
                                f32_3 %592 = OpVectorShuffle %591 %591 3 3 3 
                                f32_3 %593 = OpFMul %590 %592 
                                f32_4 %594 = OpLoad %102 
                                f32_3 %595 = OpVectorShuffle %594 %594 0 1 2 
                                f32_3 %596 = OpFAdd %593 %595 
                                f32_4 %597 = OpLoad %65 
                                f32_4 %598 = OpVectorShuffle %597 %596 4 5 6 3 
                                               OpStore %65 %598 
                                f32_4 %599 = OpLoad %65 
                                f32_3 %600 = OpVectorShuffle %599 %599 0 1 2 
                                f32_3 %601 = OpFMul %600 %444 
                                f32_4 %602 = OpLoad %9 
                                f32_3 %603 = OpVectorShuffle %602 %602 0 1 2 
                                f32_3 %604 = OpFAdd %601 %603 
                                f32_4 %605 = OpLoad %9 
                                f32_4 %606 = OpVectorShuffle %605 %604 4 5 6 3 
                                               OpStore %9 %606 
                                f32_4 %607 = OpLoad %9 
                                f32_3 %608 = OpVectorShuffle %607 %607 0 1 2 
                       Uniform f32_4* %609 = OpAccessChain %12 %58 
                                f32_4 %610 = OpLoad %609 
                                f32_3 %611 = OpVectorShuffle %610 %610 1 1 1 
                                f32_3 %612 = OpFMul %608 %611 
                                f32_4 %613 = OpLoad %9 
                                f32_4 %614 = OpVectorShuffle %613 %612 4 5 6 3 
                                               OpStore %9 %614 
                         Private f32* %619 = OpAccessChain %9 %618 
                                  f32 %620 = OpLoad %619 
                         Private f32* %622 = OpAccessChain %9 %621 
                                  f32 %623 = OpLoad %622 
                                  f32 %624 = OpExtInst %1 40 %620 %623 
                                               OpStore %616 %624 
                         Private f32* %626 = OpAccessChain %9 %625 
                                  f32 %627 = OpLoad %626 
                                  f32 %629 = OpExtInst %1 40 %627 %628 
                         Private f32* %630 = OpAccessChain %65 %621 
                                               OpStore %630 %629 
                                  f32 %631 = OpLoad %616 
                         Private f32* %632 = OpAccessChain %65 %621 
                                  f32 %633 = OpLoad %632 
                                  f32 %634 = OpExtInst %1 40 %631 %633 
                                               OpStore %616 %634 
                                  f32 %635 = OpLoad %616 
                                  f32 %636 = OpExtInst %1 37 %635 %451 
                                               OpStore %616 %636 
                                  f32 %637 = OpLoad %616 
                                  f32 %639 = OpFMul %637 %638 
                                               OpStore %616 %639 
                                  f32 %640 = OpLoad %616 
                                  f32 %641 = OpExtInst %1 9 %640 
                                               OpStore %616 %641 
                                  f32 %642 = OpLoad %616 
                                  f32 %644 = OpFMul %642 %643 
                                               OpStore %616 %644 
                                f32_4 %647 = OpLoad %9 
                                f32_3 %648 = OpVectorShuffle %647 %647 0 1 2 
                                  f32 %649 = OpLoad %616 
                                f32_3 %650 = OpCompositeConstruct %649 %649 %649 
                                f32_3 %651 = OpFDiv %648 %650 
                                f32_4 %652 = OpLoad %646 
                                f32_4 %653 = OpVectorShuffle %652 %651 4 5 6 3 
                                               OpStore %646 %653 
                                  f32 %654 = OpLoad %616 
                          Output f32* %657 = OpAccessChain %646 %655 
                                               OpStore %657 %654 
                                               OpReturn
                                               OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "AB_HIGH_PRECISION" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "AB_HIGH_PRECISION" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in  vec4 in_POSITION0;
in  vec2 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _MainTex_TexelSize;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
in  vec2 vs_TEXCOORD0;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
vec4 u_xlat6;
vec3 u_xlat7;
void main()
{
    u_xlat0.xy = _MainTex_TexelSize.xy * vec2(2.0, 2.0) + vs_TEXCOORD0.xy;
    u_xlat0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0 = texture(_MainTex, u_xlat0.xy);
    u_xlat1.xy = _MainTex_TexelSize.xy * vec2(0.0, 2.0) + vs_TEXCOORD0.xy;
    u_xlat1.xy = u_xlat1.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1 = texture(_MainTex, u_xlat1.xy);
    u_xlat2 = _MainTex_TexelSize.xyxy * vec4(2.0, 0.0, -2.0, 2.0) + vs_TEXCOORD0.xyxy;
    u_xlat2 = u_xlat2 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
    u_xlat3 = texture(_MainTex, u_xlat2.xy);
    u_xlat2 = texture(_MainTex, u_xlat2.zw);
    u_xlat4.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat4 = texture(_MainTex, u_xlat4.xy);
    u_xlat5.xyz = u_xlat3.xyz + u_xlat4.xyz;
    u_xlat5.xyz = u_xlat1.xyz + u_xlat5.xyz;
    u_xlat0.xyz = u_xlat0.xyz + u_xlat5.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(0.25, 0.25, 0.25);
    u_xlat5 = _MainTex_TexelSize.xyxy * vec4(2.0, -2.0, -2.0, 0.0) + vs_TEXCOORD0.xyxy;
    u_xlat5 = u_xlat5 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
    u_xlat6 = texture(_MainTex, u_xlat5.zw);
    u_xlat5 = texture(_MainTex, u_xlat5.xy);
    u_xlat7.xyz = u_xlat4.xyz + u_xlat6.xyz;
    u_xlat2.xyz = u_xlat2.xyz + u_xlat7.xyz;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
    u_xlat0.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25) + u_xlat0.xyz;
    u_xlat1 = _MainTex_TexelSize.xyxy * vec4(-2.0, -2.0, 0.0, -2.0) + vs_TEXCOORD0.xyxy;
    u_xlat1 = u_xlat1 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
    u_xlat2 = texture(_MainTex, u_xlat1.zw);
    u_xlat1 = texture(_MainTex, u_xlat1.xy);
    u_xlat1.xyz = u_xlat2.xyz + u_xlat1.xyz;
    u_xlat2.xyz = u_xlat5.xyz + u_xlat2.xyz;
    u_xlat2.xyz = u_xlat4.xyz + u_xlat2.xyz;
    u_xlat2.xyz = u_xlat3.xyz + u_xlat2.xyz;
    u_xlat0.xyz = u_xlat2.xyz * vec3(0.25, 0.25, 0.25) + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat6.xyz + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat4.xyz + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25) + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(0.125, 0.125, 0.125);
    u_xlat1.xy = vs_TEXCOORD0.xy + _MainTex_TexelSize.xy;
    u_xlat1.xy = u_xlat1.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1 = texture(_MainTex, u_xlat1.xy);
    u_xlat2.xy = vs_TEXCOORD0.xy + (-_MainTex_TexelSize.xy);
    u_xlat2.xy = u_xlat2.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat2 = texture(_MainTex, u_xlat2.xy);
    u_xlat3 = _MainTex_TexelSize.xyxy * vec4(1.0, -1.0, -1.0, 1.0) + vs_TEXCOORD0.xyxy;
    u_xlat3 = u_xlat3 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
    u_xlat4 = texture(_MainTex, u_xlat3.xy);
    u_xlat3 = texture(_MainTex, u_xlat3.zw);
    u_xlat2.xyz = u_xlat2.xyz + u_xlat4.xyz;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat3.xyz + u_xlat1.xyz;
    SV_Target0.xyz = u_xlat1.xyz * vec3(0.125, 0.125, 0.125) + u_xlat0.xyz;
    SV_Target0.w = 0.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "AB_HIGH_PRECISION" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 94
; Schema: 0
                                              OpCapability Shader 
                                       %1 = OpExtInstImport "GLSL.std.450" 
                                              OpMemoryModel Logical GLSL450 
                                              OpEntryPoint Vertex %4 "main" %11 %72 %84 %86 
                                              OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                              OpDecorate %11 Location 11 
                                              OpDecorate %16 ArrayStride 16 
                                              OpDecorate %17 ArrayStride 17 
                                              OpMemberDecorate %18 0 Offset 18 
                                              OpMemberDecorate %18 1 Offset 18 
                                              OpDecorate %18 Block 
                                              OpDecorate %20 DescriptorSet 20 
                                              OpDecorate %20 Binding 20 
                                              OpMemberDecorate %70 0 BuiltIn 70 
                                              OpMemberDecorate %70 1 BuiltIn 70 
                                              OpMemberDecorate %70 2 BuiltIn 70 
                                              OpDecorate %70 Block 
                                              OpDecorate vs_TEXCOORD0 Location 84 
                                              OpDecorate %86 Location 86 
                                       %2 = OpTypeVoid 
                                       %3 = OpTypeFunction %2 
                                       %6 = OpTypeFloat 32 
                                       %7 = OpTypeVector %6 4 
                                       %8 = OpTypePointer Private %7 
                        Private f32_4* %9 = OpVariable Private 
                                      %10 = OpTypePointer Input %7 
                         Input f32_4* %11 = OpVariable Input 
                                      %14 = OpTypeInt 32 0 
                                  u32 %15 = OpConstant 4 
                                      %16 = OpTypeArray %7 %15 
                                      %17 = OpTypeArray %7 %15 
                                      %18 = OpTypeStruct %16 %17 
                                      %19 = OpTypePointer Uniform %18 
Uniform struct {f32_4[4]; f32_4[4];}* %20 = OpVariable Uniform 
                                      %21 = OpTypeInt 32 1 
                                  i32 %22 = OpConstant 0 
                                  i32 %23 = OpConstant 1 
                                      %24 = OpTypePointer Uniform %7 
                                  i32 %35 = OpConstant 2 
                                  i32 %44 = OpConstant 3 
                       Private f32_4* %48 = OpVariable Private 
                                  u32 %68 = OpConstant 1 
                                      %69 = OpTypeArray %6 %68 
                                      %70 = OpTypeStruct %7 %6 %69 
                                      %71 = OpTypePointer Output %70 
 Output struct {f32_4; f32; f32[1];}* %72 = OpVariable Output 
                                      %80 = OpTypePointer Output %7 
                                      %82 = OpTypeVector %6 2 
                                      %83 = OpTypePointer Output %82 
               Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                      %85 = OpTypePointer Input %82 
                         Input f32_2* %86 = OpVariable Input 
                                      %88 = OpTypePointer Output %6 
                                  void %4 = OpFunction None %3 
                                       %5 = OpLabel 
                                f32_4 %12 = OpLoad %11 
                                f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                       Uniform f32_4* %25 = OpAccessChain %20 %22 %23 
                                f32_4 %26 = OpLoad %25 
                                f32_4 %27 = OpFMul %13 %26 
                                              OpStore %9 %27 
                       Uniform f32_4* %28 = OpAccessChain %20 %22 %22 
                                f32_4 %29 = OpLoad %28 
                                f32_4 %30 = OpLoad %11 
                                f32_4 %31 = OpVectorShuffle %30 %30 0 0 0 0 
                                f32_4 %32 = OpFMul %29 %31 
                                f32_4 %33 = OpLoad %9 
                                f32_4 %34 = OpFAdd %32 %33 
                                              OpStore %9 %34 
                       Uniform f32_4* %36 = OpAccessChain %20 %22 %35 
                                f32_4 %37 = OpLoad %36 
                                f32_4 %38 = OpLoad %11 
                                f32_4 %39 = OpVectorShuffle %38 %38 2 2 2 2 
                                f32_4 %40 = OpFMul %37 %39 
                                f32_4 %41 = OpLoad %9 
                                f32_4 %42 = OpFAdd %40 %41 
                                              OpStore %9 %42 
                                f32_4 %43 = OpLoad %9 
                       Uniform f32_4* %45 = OpAccessChain %20 %22 %44 
                                f32_4 %46 = OpLoad %45 
                                f32_4 %47 = OpFAdd %43 %46 
                                              OpStore %9 %47 
                                f32_4 %49 = OpLoad %9 
                                f32_4 %50 = OpVectorShuffle %49 %49 1 1 1 1 
                       Uniform f32_4* %51 = OpAccessChain %20 %23 %23 
                                f32_4 %52 = OpLoad %51 
                                f32_4 %53 = OpFMul %50 %52 
                                              OpStore %48 %53 
                       Uniform f32_4* %54 = OpAccessChain %20 %23 %22 
                                f32_4 %55 = OpLoad %54 
                                f32_4 %56 = OpLoad %9 
                                f32_4 %57 = OpVectorShuffle %56 %56 0 0 0 0 
                                f32_4 %58 = OpFMul %55 %57 
                                f32_4 %59 = OpLoad %48 
                                f32_4 %60 = OpFAdd %58 %59 
                                              OpStore %48 %60 
                       Uniform f32_4* %61 = OpAccessChain %20 %23 %35 
                                f32_4 %62 = OpLoad %61 
                                f32_4 %63 = OpLoad %9 
                                f32_4 %64 = OpVectorShuffle %63 %63 2 2 2 2 
                                f32_4 %65 = OpFMul %62 %64 
                                f32_4 %66 = OpLoad %48 
                                f32_4 %67 = OpFAdd %65 %66 
                                              OpStore %48 %67 
                       Uniform f32_4* %73 = OpAccessChain %20 %23 %44 
                                f32_4 %74 = OpLoad %73 
                                f32_4 %75 = OpLoad %9 
                                f32_4 %76 = OpVectorShuffle %75 %75 3 3 3 3 
                                f32_4 %77 = OpFMul %74 %76 
                                f32_4 %78 = OpLoad %48 
                                f32_4 %79 = OpFAdd %77 %78 
                        Output f32_4* %81 = OpAccessChain %72 %22 
                                              OpStore %81 %79 
                                f32_2 %87 = OpLoad %86 
                                              OpStore vs_TEXCOORD0 %87 
                          Output f32* %89 = OpAccessChain %72 %22 %68 
                                  f32 %90 = OpLoad %89 
                                  f32 %91 = OpFNegate %90 
                          Output f32* %92 = OpAccessChain %72 %22 %68 
                                              OpStore %92 %91 
                                              OpReturn
                                              OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 439
; Schema: 0
                                             OpCapability Shader 
                                      %1 = OpExtInstImport "GLSL.std.450" 
                                             OpMemoryModel Logical GLSL450 
                                             OpEntryPoint Fragment %4 "main" %25 %426 
                                             OpExecutionMode %4 OriginUpperLeft 
                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                             OpMemberDecorate %11 0 Offset 11 
                                             OpMemberDecorate %11 1 Offset 11 
                                             OpDecorate %11 Block 
                                             OpDecorate %13 DescriptorSet 13 
                                             OpDecorate %13 Binding 13 
                                             OpDecorate vs_TEXCOORD0 Location 25 
                                             OpDecorate %45 DescriptorSet 45 
                                             OpDecorate %45 Binding 45 
                                             OpDecorate %49 DescriptorSet 49 
                                             OpDecorate %49 Binding 49 
                                             OpDecorate %426 Location 426 
                                      %2 = OpTypeVoid 
                                      %3 = OpTypeFunction %2 
                                      %6 = OpTypeFloat 32 
                                      %7 = OpTypeVector %6 3 
                                      %8 = OpTypePointer Private %7 
                       Private f32_3* %9 = OpVariable Private 
                                     %10 = OpTypeVector %6 4 
                                     %11 = OpTypeStruct %10 %10 
                                     %12 = OpTypePointer Uniform %11 
     Uniform struct {f32_4; f32_4;}* %13 = OpVariable Uniform 
                                     %14 = OpTypeInt 32 1 
                                 i32 %15 = OpConstant 1 
                                     %16 = OpTypeVector %6 2 
                                     %17 = OpTypePointer Uniform %10 
                                 f32 %21 = OpConstant 3.674022E-40 
                               f32_2 %22 = OpConstantComposite %21 %21 
                                     %24 = OpTypePointer Input %16 
               Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                 i32 %32 = OpConstant 0 
                                     %43 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                     %44 = OpTypePointer UniformConstant %43 
UniformConstant read_only Texture2D* %45 = OpVariable UniformConstant 
                                     %47 = OpTypeSampler 
                                     %48 = OpTypePointer UniformConstant %47 
            UniformConstant sampler* %49 = OpVariable UniformConstant 
                                     %51 = OpTypeSampledImage %43 
                                     %57 = OpTypePointer Private %10 
                      Private f32_4* %58 = OpVariable Private 
                                 f32 %62 = OpConstant 3.674022E-40 
                               f32_2 %63 = OpConstantComposite %62 %21 
                      Private f32_4* %90 = OpVariable Private 
                                 f32 %94 = OpConstant 3.674022E-40 
                               f32_4 %95 = OpConstantComposite %21 %62 %94 %21 
                     Private f32_4* %109 = OpVariable Private 
                     Private f32_3* %128 = OpVariable Private 
                     Private f32_4* %147 = OpVariable Private 
                                f32 %166 = OpConstant 3.674022E-40 
                              f32_3 %167 = OpConstantComposite %166 %166 %166 
                              f32_4 %172 = OpConstantComposite %21 %94 %94 %62 
                     Private f32_3* %186 = OpVariable Private 
                     Private f32_3* %203 = OpVariable Private 
                              f32_4 %228 = OpConstantComposite %94 %94 %62 %94 
                                f32 %310 = OpConstant 3.674022E-40 
                              f32_3 %311 = OpConstantComposite %310 %310 %310 
                                f32 %373 = OpConstant 3.674022E-40 
                                f32 %374 = OpConstant 3.674022E-40 
                              f32_4 %375 = OpConstantComposite %373 %374 %374 %373 
                                    %425 = OpTypePointer Output %10 
                      Output f32_4* %426 = OpVariable Output 
                                    %434 = OpTypeInt 32 0 
                                u32 %435 = OpConstant 3 
                                    %436 = OpTypePointer Output %6 
                                 void %4 = OpFunction None %3 
                                      %5 = OpLabel 
                      Uniform f32_4* %18 = OpAccessChain %13 %15 
                               f32_4 %19 = OpLoad %18 
                               f32_2 %20 = OpVectorShuffle %19 %19 0 1 
                               f32_2 %23 = OpFMul %20 %22 
                               f32_2 %26 = OpLoad vs_TEXCOORD0 
                               f32_2 %27 = OpFAdd %23 %26 
                               f32_3 %28 = OpLoad %9 
                               f32_3 %29 = OpVectorShuffle %28 %27 3 4 2 
                                             OpStore %9 %29 
                               f32_3 %30 = OpLoad %9 
                               f32_2 %31 = OpVectorShuffle %30 %30 0 1 
                      Uniform f32_4* %33 = OpAccessChain %13 %32 
                               f32_4 %34 = OpLoad %33 
                               f32_2 %35 = OpVectorShuffle %34 %34 0 1 
                               f32_2 %36 = OpFMul %31 %35 
                      Uniform f32_4* %37 = OpAccessChain %13 %32 
                               f32_4 %38 = OpLoad %37 
                               f32_2 %39 = OpVectorShuffle %38 %38 2 3 
                               f32_2 %40 = OpFAdd %36 %39 
                               f32_3 %41 = OpLoad %9 
                               f32_3 %42 = OpVectorShuffle %41 %40 3 4 2 
                                             OpStore %9 %42 
                 read_only Texture2D %46 = OpLoad %45 
                             sampler %50 = OpLoad %49 
          read_only Texture2DSampled %52 = OpSampledImage %46 %50 
                               f32_3 %53 = OpLoad %9 
                               f32_2 %54 = OpVectorShuffle %53 %53 0 1 
                               f32_4 %55 = OpImageSampleImplicitLod %52 %54 
                               f32_3 %56 = OpVectorShuffle %55 %55 0 1 2 
                                             OpStore %9 %56 
                      Uniform f32_4* %59 = OpAccessChain %13 %15 
                               f32_4 %60 = OpLoad %59 
                               f32_2 %61 = OpVectorShuffle %60 %60 0 1 
                               f32_2 %64 = OpFMul %61 %63 
                               f32_2 %65 = OpLoad vs_TEXCOORD0 
                               f32_2 %66 = OpFAdd %64 %65 
                               f32_4 %67 = OpLoad %58 
                               f32_4 %68 = OpVectorShuffle %67 %66 4 5 2 3 
                                             OpStore %58 %68 
                               f32_4 %69 = OpLoad %58 
                               f32_2 %70 = OpVectorShuffle %69 %69 0 1 
                      Uniform f32_4* %71 = OpAccessChain %13 %32 
                               f32_4 %72 = OpLoad %71 
                               f32_2 %73 = OpVectorShuffle %72 %72 0 1 
                               f32_2 %74 = OpFMul %70 %73 
                      Uniform f32_4* %75 = OpAccessChain %13 %32 
                               f32_4 %76 = OpLoad %75 
                               f32_2 %77 = OpVectorShuffle %76 %76 2 3 
                               f32_2 %78 = OpFAdd %74 %77 
                               f32_4 %79 = OpLoad %58 
                               f32_4 %80 = OpVectorShuffle %79 %78 4 5 2 3 
                                             OpStore %58 %80 
                 read_only Texture2D %81 = OpLoad %45 
                             sampler %82 = OpLoad %49 
          read_only Texture2DSampled %83 = OpSampledImage %81 %82 
                               f32_4 %84 = OpLoad %58 
                               f32_2 %85 = OpVectorShuffle %84 %84 0 1 
                               f32_4 %86 = OpImageSampleImplicitLod %83 %85 
                               f32_3 %87 = OpVectorShuffle %86 %86 0 1 2 
                               f32_4 %88 = OpLoad %58 
                               f32_4 %89 = OpVectorShuffle %88 %87 4 5 6 3 
                                             OpStore %58 %89 
                      Uniform f32_4* %91 = OpAccessChain %13 %15 
                               f32_4 %92 = OpLoad %91 
                               f32_4 %93 = OpVectorShuffle %92 %92 0 1 0 1 
                               f32_4 %96 = OpFMul %93 %95 
                               f32_2 %97 = OpLoad vs_TEXCOORD0 
                               f32_4 %98 = OpVectorShuffle %97 %97 0 1 0 1 
                               f32_4 %99 = OpFAdd %96 %98 
                                             OpStore %90 %99 
                              f32_4 %100 = OpLoad %90 
                     Uniform f32_4* %101 = OpAccessChain %13 %32 
                              f32_4 %102 = OpLoad %101 
                              f32_4 %103 = OpVectorShuffle %102 %102 0 1 0 1 
                              f32_4 %104 = OpFMul %100 %103 
                     Uniform f32_4* %105 = OpAccessChain %13 %32 
                              f32_4 %106 = OpLoad %105 
                              f32_4 %107 = OpVectorShuffle %106 %106 2 3 2 3 
                              f32_4 %108 = OpFAdd %104 %107 
                                             OpStore %90 %108 
                read_only Texture2D %110 = OpLoad %45 
                            sampler %111 = OpLoad %49 
         read_only Texture2DSampled %112 = OpSampledImage %110 %111 
                              f32_4 %113 = OpLoad %90 
                              f32_2 %114 = OpVectorShuffle %113 %113 0 1 
                              f32_4 %115 = OpImageSampleImplicitLod %112 %114 
                              f32_3 %116 = OpVectorShuffle %115 %115 0 1 2 
                              f32_4 %117 = OpLoad %109 
                              f32_4 %118 = OpVectorShuffle %117 %116 4 5 6 3 
                                             OpStore %109 %118 
                read_only Texture2D %119 = OpLoad %45 
                            sampler %120 = OpLoad %49 
         read_only Texture2DSampled %121 = OpSampledImage %119 %120 
                              f32_4 %122 = OpLoad %90 
                              f32_2 %123 = OpVectorShuffle %122 %122 2 3 
                              f32_4 %124 = OpImageSampleImplicitLod %121 %123 
                              f32_3 %125 = OpVectorShuffle %124 %124 0 1 2 
                              f32_4 %126 = OpLoad %90 
                              f32_4 %127 = OpVectorShuffle %126 %125 4 5 6 3 
                                             OpStore %90 %127 
                              f32_2 %129 = OpLoad vs_TEXCOORD0 
                     Uniform f32_4* %130 = OpAccessChain %13 %32 
                              f32_4 %131 = OpLoad %130 
                              f32_2 %132 = OpVectorShuffle %131 %131 0 1 
                              f32_2 %133 = OpFMul %129 %132 
                     Uniform f32_4* %134 = OpAccessChain %13 %32 
                              f32_4 %135 = OpLoad %134 
                              f32_2 %136 = OpVectorShuffle %135 %135 2 3 
                              f32_2 %137 = OpFAdd %133 %136 
                              f32_3 %138 = OpLoad %128 
                              f32_3 %139 = OpVectorShuffle %138 %137 3 4 2 
                                             OpStore %128 %139 
                read_only Texture2D %140 = OpLoad %45 
                            sampler %141 = OpLoad %49 
         read_only Texture2DSampled %142 = OpSampledImage %140 %141 
                              f32_3 %143 = OpLoad %128 
                              f32_2 %144 = OpVectorShuffle %143 %143 0 1 
                              f32_4 %145 = OpImageSampleImplicitLod %142 %144 
                              f32_3 %146 = OpVectorShuffle %145 %145 0 1 2 
                                             OpStore %128 %146 
                              f32_4 %148 = OpLoad %109 
                              f32_3 %149 = OpVectorShuffle %148 %148 0 1 2 
                              f32_3 %150 = OpLoad %128 
                              f32_3 %151 = OpFAdd %149 %150 
                              f32_4 %152 = OpLoad %147 
                              f32_4 %153 = OpVectorShuffle %152 %151 4 5 6 3 
                                             OpStore %147 %153 
                              f32_4 %154 = OpLoad %58 
                              f32_3 %155 = OpVectorShuffle %154 %154 0 1 2 
                              f32_4 %156 = OpLoad %147 
                              f32_3 %157 = OpVectorShuffle %156 %156 0 1 2 
                              f32_3 %158 = OpFAdd %155 %157 
                              f32_4 %159 = OpLoad %147 
                              f32_4 %160 = OpVectorShuffle %159 %158 4 5 6 3 
                                             OpStore %147 %160 
                              f32_3 %161 = OpLoad %9 
                              f32_4 %162 = OpLoad %147 
                              f32_3 %163 = OpVectorShuffle %162 %162 0 1 2 
                              f32_3 %164 = OpFAdd %161 %163 
                                             OpStore %9 %164 
                              f32_3 %165 = OpLoad %9 
                              f32_3 %168 = OpFMul %165 %167 
                                             OpStore %9 %168 
                     Uniform f32_4* %169 = OpAccessChain %13 %15 
                              f32_4 %170 = OpLoad %169 
                              f32_4 %171 = OpVectorShuffle %170 %170 0 1 0 1 
                              f32_4 %173 = OpFMul %171 %172 
                              f32_2 %174 = OpLoad vs_TEXCOORD0 
                              f32_4 %175 = OpVectorShuffle %174 %174 0 1 0 1 
                              f32_4 %176 = OpFAdd %173 %175 
                                             OpStore %147 %176 
                              f32_4 %177 = OpLoad %147 
                     Uniform f32_4* %178 = OpAccessChain %13 %32 
                              f32_4 %179 = OpLoad %178 
                              f32_4 %180 = OpVectorShuffle %179 %179 0 1 0 1 
                              f32_4 %181 = OpFMul %177 %180 
                     Uniform f32_4* %182 = OpAccessChain %13 %32 
                              f32_4 %183 = OpLoad %182 
                              f32_4 %184 = OpVectorShuffle %183 %183 2 3 2 3 
                              f32_4 %185 = OpFAdd %181 %184 
                                             OpStore %147 %185 
                read_only Texture2D %187 = OpLoad %45 
                            sampler %188 = OpLoad %49 
         read_only Texture2DSampled %189 = OpSampledImage %187 %188 
                              f32_4 %190 = OpLoad %147 
                              f32_2 %191 = OpVectorShuffle %190 %190 2 3 
                              f32_4 %192 = OpImageSampleImplicitLod %189 %191 
                              f32_3 %193 = OpVectorShuffle %192 %192 0 1 2 
                                             OpStore %186 %193 
                read_only Texture2D %194 = OpLoad %45 
                            sampler %195 = OpLoad %49 
         read_only Texture2DSampled %196 = OpSampledImage %194 %195 
                              f32_4 %197 = OpLoad %147 
                              f32_2 %198 = OpVectorShuffle %197 %197 0 1 
                              f32_4 %199 = OpImageSampleImplicitLod %196 %198 
                              f32_3 %200 = OpVectorShuffle %199 %199 0 1 2 
                              f32_4 %201 = OpLoad %147 
                              f32_4 %202 = OpVectorShuffle %201 %200 4 5 6 3 
                                             OpStore %147 %202 
                              f32_3 %204 = OpLoad %128 
                              f32_3 %205 = OpLoad %186 
                              f32_3 %206 = OpFAdd %204 %205 
                                             OpStore %203 %206 
                              f32_4 %207 = OpLoad %90 
                              f32_3 %208 = OpVectorShuffle %207 %207 0 1 2 
                              f32_3 %209 = OpLoad %203 
                              f32_3 %210 = OpFAdd %208 %209 
                              f32_4 %211 = OpLoad %90 
                              f32_4 %212 = OpVectorShuffle %211 %210 4 5 6 3 
                                             OpStore %90 %212 
                              f32_4 %213 = OpLoad %58 
                              f32_3 %214 = OpVectorShuffle %213 %213 0 1 2 
                              f32_4 %215 = OpLoad %90 
                              f32_3 %216 = OpVectorShuffle %215 %215 0 1 2 
                              f32_3 %217 = OpFAdd %214 %216 
                              f32_4 %218 = OpLoad %58 
                              f32_4 %219 = OpVectorShuffle %218 %217 4 5 6 3 
                                             OpStore %58 %219 
                              f32_4 %220 = OpLoad %58 
                              f32_3 %221 = OpVectorShuffle %220 %220 0 1 2 
                              f32_3 %222 = OpFMul %221 %167 
                              f32_3 %223 = OpLoad %9 
                              f32_3 %224 = OpFAdd %222 %223 
                                             OpStore %9 %224 
                     Uniform f32_4* %225 = OpAccessChain %13 %15 
                              f32_4 %226 = OpLoad %225 
                              f32_4 %227 = OpVectorShuffle %226 %226 0 1 0 1 
                              f32_4 %229 = OpFMul %227 %228 
                              f32_2 %230 = OpLoad vs_TEXCOORD0 
                              f32_4 %231 = OpVectorShuffle %230 %230 0 1 0 1 
                              f32_4 %232 = OpFAdd %229 %231 
                                             OpStore %58 %232 
                              f32_4 %233 = OpLoad %58 
                     Uniform f32_4* %234 = OpAccessChain %13 %32 
                              f32_4 %235 = OpLoad %234 
                              f32_4 %236 = OpVectorShuffle %235 %235 0 1 0 1 
                              f32_4 %237 = OpFMul %233 %236 
                     Uniform f32_4* %238 = OpAccessChain %13 %32 
                              f32_4 %239 = OpLoad %238 
                              f32_4 %240 = OpVectorShuffle %239 %239 2 3 2 3 
                              f32_4 %241 = OpFAdd %237 %240 
                                             OpStore %58 %241 
                read_only Texture2D %242 = OpLoad %45 
                            sampler %243 = OpLoad %49 
         read_only Texture2DSampled %244 = OpSampledImage %242 %243 
                              f32_4 %245 = OpLoad %58 
                              f32_2 %246 = OpVectorShuffle %245 %245 2 3 
                              f32_4 %247 = OpImageSampleImplicitLod %244 %246 
                              f32_3 %248 = OpVectorShuffle %247 %247 0 1 2 
                              f32_4 %249 = OpLoad %90 
                              f32_4 %250 = OpVectorShuffle %249 %248 4 5 6 3 
                                             OpStore %90 %250 
                read_only Texture2D %251 = OpLoad %45 
                            sampler %252 = OpLoad %49 
         read_only Texture2DSampled %253 = OpSampledImage %251 %252 
                              f32_4 %254 = OpLoad %58 
                              f32_2 %255 = OpVectorShuffle %254 %254 0 1 
                              f32_4 %256 = OpImageSampleImplicitLod %253 %255 
                              f32_3 %257 = OpVectorShuffle %256 %256 0 1 2 
                              f32_4 %258 = OpLoad %58 
                              f32_4 %259 = OpVectorShuffle %258 %257 4 5 6 3 
                                             OpStore %58 %259 
                              f32_4 %260 = OpLoad %90 
                              f32_3 %261 = OpVectorShuffle %260 %260 0 1 2 
                              f32_4 %262 = OpLoad %58 
                              f32_3 %263 = OpVectorShuffle %262 %262 0 1 2 
                              f32_3 %264 = OpFAdd %261 %263 
                              f32_4 %265 = OpLoad %58 
                              f32_4 %266 = OpVectorShuffle %265 %264 4 5 6 3 
                                             OpStore %58 %266 
                              f32_4 %267 = OpLoad %147 
                              f32_3 %268 = OpVectorShuffle %267 %267 0 1 2 
                              f32_4 %269 = OpLoad %90 
                              f32_3 %270 = OpVectorShuffle %269 %269 0 1 2 
                              f32_3 %271 = OpFAdd %268 %270 
                              f32_4 %272 = OpLoad %90 
                              f32_4 %273 = OpVectorShuffle %272 %271 4 5 6 3 
                                             OpStore %90 %273 
                              f32_3 %274 = OpLoad %128 
                              f32_4 %275 = OpLoad %90 
                              f32_3 %276 = OpVectorShuffle %275 %275 0 1 2 
                              f32_3 %277 = OpFAdd %274 %276 
                              f32_4 %278 = OpLoad %90 
                              f32_4 %279 = OpVectorShuffle %278 %277 4 5 6 3 
                                             OpStore %90 %279 
                              f32_4 %280 = OpLoad %109 
                              f32_3 %281 = OpVectorShuffle %280 %280 0 1 2 
                              f32_4 %282 = OpLoad %90 
                              f32_3 %283 = OpVectorShuffle %282 %282 0 1 2 
                              f32_3 %284 = OpFAdd %281 %283 
                              f32_4 %285 = OpLoad %90 
                              f32_4 %286 = OpVectorShuffle %285 %284 4 5 6 3 
                                             OpStore %90 %286 
                              f32_4 %287 = OpLoad %90 
                              f32_3 %288 = OpVectorShuffle %287 %287 0 1 2 
                              f32_3 %289 = OpFMul %288 %167 
                              f32_3 %290 = OpLoad %9 
                              f32_3 %291 = OpFAdd %289 %290 
                                             OpStore %9 %291 
                              f32_3 %292 = OpLoad %186 
                              f32_4 %293 = OpLoad %58 
                              f32_3 %294 = OpVectorShuffle %293 %293 0 1 2 
                              f32_3 %295 = OpFAdd %292 %294 
                              f32_4 %296 = OpLoad %58 
                              f32_4 %297 = OpVectorShuffle %296 %295 4 5 6 3 
                                             OpStore %58 %297 
                              f32_3 %298 = OpLoad %128 
                              f32_4 %299 = OpLoad %58 
                              f32_3 %300 = OpVectorShuffle %299 %299 0 1 2 
                              f32_3 %301 = OpFAdd %298 %300 
                              f32_4 %302 = OpLoad %58 
                              f32_4 %303 = OpVectorShuffle %302 %301 4 5 6 3 
                                             OpStore %58 %303 
                              f32_4 %304 = OpLoad %58 
                              f32_3 %305 = OpVectorShuffle %304 %304 0 1 2 
                              f32_3 %306 = OpFMul %305 %167 
                              f32_3 %307 = OpLoad %9 
                              f32_3 %308 = OpFAdd %306 %307 
                                             OpStore %9 %308 
                              f32_3 %309 = OpLoad %9 
                              f32_3 %312 = OpFMul %309 %311 
                                             OpStore %9 %312 
                              f32_2 %313 = OpLoad vs_TEXCOORD0 
                     Uniform f32_4* %314 = OpAccessChain %13 %15 
                              f32_4 %315 = OpLoad %314 
                              f32_2 %316 = OpVectorShuffle %315 %315 0 1 
                              f32_2 %317 = OpFAdd %313 %316 
                              f32_4 %318 = OpLoad %58 
                              f32_4 %319 = OpVectorShuffle %318 %317 4 5 2 3 
                                             OpStore %58 %319 
                              f32_4 %320 = OpLoad %58 
                              f32_2 %321 = OpVectorShuffle %320 %320 0 1 
                     Uniform f32_4* %322 = OpAccessChain %13 %32 
                              f32_4 %323 = OpLoad %322 
                              f32_2 %324 = OpVectorShuffle %323 %323 0 1 
                              f32_2 %325 = OpFMul %321 %324 
                     Uniform f32_4* %326 = OpAccessChain %13 %32 
                              f32_4 %327 = OpLoad %326 
                              f32_2 %328 = OpVectorShuffle %327 %327 2 3 
                              f32_2 %329 = OpFAdd %325 %328 
                              f32_4 %330 = OpLoad %58 
                              f32_4 %331 = OpVectorShuffle %330 %329 4 5 2 3 
                                             OpStore %58 %331 
                read_only Texture2D %332 = OpLoad %45 
                            sampler %333 = OpLoad %49 
         read_only Texture2DSampled %334 = OpSampledImage %332 %333 
                              f32_4 %335 = OpLoad %58 
                              f32_2 %336 = OpVectorShuffle %335 %335 0 1 
                              f32_4 %337 = OpImageSampleImplicitLod %334 %336 
                              f32_3 %338 = OpVectorShuffle %337 %337 0 1 2 
                              f32_4 %339 = OpLoad %58 
                              f32_4 %340 = OpVectorShuffle %339 %338 4 5 6 3 
                                             OpStore %58 %340 
                              f32_2 %341 = OpLoad vs_TEXCOORD0 
                     Uniform f32_4* %342 = OpAccessChain %13 %15 
                              f32_4 %343 = OpLoad %342 
                              f32_2 %344 = OpVectorShuffle %343 %343 0 1 
                              f32_2 %345 = OpFNegate %344 
                              f32_2 %346 = OpFAdd %341 %345 
                              f32_4 %347 = OpLoad %90 
                              f32_4 %348 = OpVectorShuffle %347 %346 4 5 2 3 
                                             OpStore %90 %348 
                              f32_4 %349 = OpLoad %90 
                              f32_2 %350 = OpVectorShuffle %349 %349 0 1 
                     Uniform f32_4* %351 = OpAccessChain %13 %32 
                              f32_4 %352 = OpLoad %351 
                              f32_2 %353 = OpVectorShuffle %352 %352 0 1 
                              f32_2 %354 = OpFMul %350 %353 
                     Uniform f32_4* %355 = OpAccessChain %13 %32 
                              f32_4 %356 = OpLoad %355 
                              f32_2 %357 = OpVectorShuffle %356 %356 2 3 
                              f32_2 %358 = OpFAdd %354 %357 
                              f32_4 %359 = OpLoad %90 
                              f32_4 %360 = OpVectorShuffle %359 %358 4 5 2 3 
                                             OpStore %90 %360 
                read_only Texture2D %361 = OpLoad %45 
                            sampler %362 = OpLoad %49 
         read_only Texture2DSampled %363 = OpSampledImage %361 %362 
                              f32_4 %364 = OpLoad %90 
                              f32_2 %365 = OpVectorShuffle %364 %364 0 1 
                              f32_4 %366 = OpImageSampleImplicitLod %363 %365 
                              f32_3 %367 = OpVectorShuffle %366 %366 0 1 2 
                              f32_4 %368 = OpLoad %90 
                              f32_4 %369 = OpVectorShuffle %368 %367 4 5 6 3 
                                             OpStore %90 %369 
                     Uniform f32_4* %370 = OpAccessChain %13 %15 
                              f32_4 %371 = OpLoad %370 
                              f32_4 %372 = OpVectorShuffle %371 %371 0 1 0 1 
                              f32_4 %376 = OpFMul %372 %375 
                              f32_2 %377 = OpLoad vs_TEXCOORD0 
                              f32_4 %378 = OpVectorShuffle %377 %377 0 1 0 1 
                              f32_4 %379 = OpFAdd %376 %378 
                                             OpStore %109 %379 
                              f32_4 %380 = OpLoad %109 
                     Uniform f32_4* %381 = OpAccessChain %13 %32 
                              f32_4 %382 = OpLoad %381 
                              f32_4 %383 = OpVectorShuffle %382 %382 0 1 0 1 
                              f32_4 %384 = OpFMul %380 %383 
                     Uniform f32_4* %385 = OpAccessChain %13 %32 
                              f32_4 %386 = OpLoad %385 
                              f32_4 %387 = OpVectorShuffle %386 %386 2 3 2 3 
                              f32_4 %388 = OpFAdd %384 %387 
                                             OpStore %109 %388 
                read_only Texture2D %389 = OpLoad %45 
                            sampler %390 = OpLoad %49 
         read_only Texture2DSampled %391 = OpSampledImage %389 %390 
                              f32_4 %392 = OpLoad %109 
                              f32_2 %393 = OpVectorShuffle %392 %392 0 1 
                              f32_4 %394 = OpImageSampleImplicitLod %391 %393 
                              f32_3 %395 = OpVectorShuffle %394 %394 0 1 2 
                                             OpStore %128 %395 
                read_only Texture2D %396 = OpLoad %45 
                            sampler %397 = OpLoad %49 
         read_only Texture2DSampled %398 = OpSampledImage %396 %397 
                              f32_4 %399 = OpLoad %109 
                              f32_2 %400 = OpVectorShuffle %399 %399 2 3 
                              f32_4 %401 = OpImageSampleImplicitLod %398 %400 
                              f32_3 %402 = OpVectorShuffle %401 %401 0 1 2 
                              f32_4 %403 = OpLoad %109 
                              f32_4 %404 = OpVectorShuffle %403 %402 4 5 6 3 
                                             OpStore %109 %404 
                              f32_4 %405 = OpLoad %90 
                              f32_3 %406 = OpVectorShuffle %405 %405 0 1 2 
                              f32_3 %407 = OpLoad %128 
                              f32_3 %408 = OpFAdd %406 %407 
                              f32_4 %409 = OpLoad %90 
                              f32_4 %410 = OpVectorShuffle %409 %408 4 5 6 3 
                                             OpStore %90 %410 
                              f32_4 %411 = OpLoad %58 
                              f32_3 %412 = OpVectorShuffle %411 %411 0 1 2 
                              f32_4 %413 = OpLoad %90 
                              f32_3 %414 = OpVectorShuffle %413 %413 0 1 2 
                              f32_3 %415 = OpFAdd %412 %414 
                              f32_4 %416 = OpLoad %58 
                              f32_4 %417 = OpVectorShuffle %416 %415 4 5 6 3 
                                             OpStore %58 %417 
                              f32_4 %418 = OpLoad %109 
                              f32_3 %419 = OpVectorShuffle %418 %418 0 1 2 
                              f32_4 %420 = OpLoad %58 
                              f32_3 %421 = OpVectorShuffle %420 %420 0 1 2 
                              f32_3 %422 = OpFAdd %419 %421 
                              f32_4 %423 = OpLoad %58 
                              f32_4 %424 = OpVectorShuffle %423 %422 4 5 6 3 
                                             OpStore %58 %424 
                              f32_4 %427 = OpLoad %58 
                              f32_3 %428 = OpVectorShuffle %427 %427 0 1 2 
                              f32_3 %429 = OpFMul %428 %311 
                              f32_3 %430 = OpLoad %9 
                              f32_3 %431 = OpFAdd %429 %430 
                              f32_4 %432 = OpLoad %426 
                              f32_4 %433 = OpVectorShuffle %432 %431 4 5 6 3 
                                             OpStore %426 %433 
                        Output f32* %437 = OpAccessChain %426 %435 
                                             OpStore %437 %62 
                                             OpReturn
                                             OpFunctionEnd
"
}
}
Program "fp" {
SubProgram "d3d11 " {
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
""
}
SubProgram "vulkan " {
""
}
SubProgram "d3d11 " {
Keywords { "AB_HIGH_PRECISION" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "AB_HIGH_PRECISION" }
""
}
SubProgram "vulkan " {
Keywords { "AB_HIGH_PRECISION" }
""
}
}
}
 Pass {
  Name "frag_downsampler_with_karis"
  ZTest Always
  ZWrite Off
  Cull Off
  GpuProgramID 677097
Program "vp" {
SubProgram "d3d11 " {
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in  vec4 in_POSITION0;
in  vec2 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BloomRange;
uniform 	vec4 _MainTex_TexelSize;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
in  vec2 vs_TEXCOORD0;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
vec4 u_xlat6;
vec4 u_xlat7;
float u_xlat24;
void main()
{
    u_xlat0.xy = _MainTex_TexelSize.xy * vec2(2.0, 2.0) + vs_TEXCOORD0.xy;
    u_xlat0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0 = texture(_MainTex, u_xlat0.xy);
    u_xlat0.xyz = u_xlat0.xyz * _BloomRange.xxx;
    u_xlat1.xy = _MainTex_TexelSize.xy * vec2(0.0, 2.0) + vs_TEXCOORD0.xy;
    u_xlat1.xy = u_xlat1.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1 = texture(_MainTex, u_xlat1.xy);
    u_xlat1.xyz = u_xlat1.xyz * _BloomRange.xxx;
    u_xlat2 = _MainTex_TexelSize.xyxy * vec4(2.0, 0.0, -2.0, 2.0) + vs_TEXCOORD0.xyxy;
    u_xlat2 = u_xlat2 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
    u_xlat3 = texture(_MainTex, u_xlat2.xy);
    u_xlat2 = texture(_MainTex, u_xlat2.zw);
    u_xlat3.xyz = u_xlat3.xyz * _BloomRange.xxx;
    u_xlat4.xyz = u_xlat3.www * u_xlat3.xyz;
    u_xlat5.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat5 = texture(_MainTex, u_xlat5.xy);
    u_xlat5.xyz = u_xlat5.xyz * _BloomRange.xxx;
    u_xlat4.xyz = u_xlat5.xyz * u_xlat5.www + u_xlat4.xyz;
    u_xlat4.xyz = u_xlat1.xyz * u_xlat1.www + u_xlat4.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat0.www + u_xlat4.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(0.25, 0.25, 0.25);
    u_xlat24 = dot(u_xlat0.xyz, vec3(0.0396819152, 0.45802179, 0.00609653955));
    u_xlat24 = u_xlat24 + 1.0;
    u_xlat24 = float(1.0) / u_xlat24;
    u_xlat0.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    u_xlat2.xyz = u_xlat2.xyz * _BloomRange.xxx;
    u_xlat4.xyz = u_xlat5.www * u_xlat5.xyz;
    u_xlat6 = _MainTex_TexelSize.xyxy * vec4(2.0, -2.0, -2.0, 0.0) + vs_TEXCOORD0.xyxy;
    u_xlat6 = u_xlat6 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
    u_xlat7 = texture(_MainTex, u_xlat6.zw);
    u_xlat6 = texture(_MainTex, u_xlat6.xy);
    u_xlat7.xyz = u_xlat7.xyz * _BloomRange.xxx;
    u_xlat4.xyz = u_xlat7.xyz * u_xlat7.www + u_xlat4.xyz;
    u_xlat2.xyz = u_xlat2.xyz * u_xlat2.www + u_xlat4.xyz;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat1.www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25);
    u_xlat24 = dot(u_xlat1.xyz, vec3(0.0396819152, 0.45802179, 0.00609653955));
    u_xlat24 = u_xlat24 + 1.0;
    u_xlat24 = float(1.0) / u_xlat24;
    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat24) + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat6.xyz * _BloomRange.xxx;
    u_xlat2 = _MainTex_TexelSize.xyxy * vec4(-2.0, -2.0, 0.0, -2.0) + vs_TEXCOORD0.xyxy;
    u_xlat2 = u_xlat2 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
    u_xlat4 = texture(_MainTex, u_xlat2.zw);
    u_xlat2 = texture(_MainTex, u_xlat2.xy);
    u_xlat4.xyz = u_xlat4.xyz * _BloomRange.xxx;
    u_xlat4.xyz = u_xlat4.www * u_xlat4.xyz;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat6.www + u_xlat4.xyz;
    u_xlat1.xyz = u_xlat5.xyz * u_xlat5.www + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat3.xyz * u_xlat3.www + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25);
    u_xlat24 = dot(u_xlat1.xyz, vec3(0.0396819152, 0.45802179, 0.00609653955));
    u_xlat24 = u_xlat24 + 1.0;
    u_xlat24 = float(1.0) / u_xlat24;
    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat24) + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat2.xyz * _BloomRange.xxx;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.www + u_xlat4.xyz;
    u_xlat1.xyz = u_xlat7.xyz * u_xlat7.www + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat5.xyz * u_xlat5.www + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25);
    u_xlat24 = dot(u_xlat1.xyz, vec3(0.0396819152, 0.45802179, 0.00609653955));
    u_xlat24 = u_xlat24 + 1.0;
    u_xlat24 = float(1.0) / u_xlat24;
    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat24) + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(0.125, 0.125, 0.125);
    u_xlat1 = _MainTex_TexelSize.xyxy * vec4(1.0, -1.0, -1.0, 1.0) + vs_TEXCOORD0.xyxy;
    u_xlat1 = u_xlat1 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
    u_xlat2 = texture(_MainTex, u_xlat1.xy);
    u_xlat1 = texture(_MainTex, u_xlat1.zw);
    u_xlat2.xyz = u_xlat2.xyz * _BloomRange.xxx;
    u_xlat2.xyz = u_xlat2.www * u_xlat2.xyz;
    u_xlat3.xy = vs_TEXCOORD0.xy + (-_MainTex_TexelSize.xy);
    u_xlat3.xy = u_xlat3.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat3 = texture(_MainTex, u_xlat3.xy);
    u_xlat3.xyz = u_xlat3.xyz * _BloomRange.xxx;
    u_xlat2.xyz = u_xlat3.xyz * u_xlat3.www + u_xlat2.xyz;
    u_xlat3.xy = vs_TEXCOORD0.xy + _MainTex_TexelSize.xy;
    u_xlat3.xy = u_xlat3.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat3 = texture(_MainTex, u_xlat3.xy);
    u_xlat3.xyz = u_xlat3.xyz * _BloomRange.xxx;
    u_xlat2.xyz = u_xlat3.xyz * u_xlat3.www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _BloomRange.xxx;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat1.www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25);
    u_xlat24 = dot(u_xlat1.xyz, vec3(0.0396819152, 0.45802179, 0.00609653955));
    u_xlat24 = u_xlat24 + 1.0;
    u_xlat24 = float(1.0) / u_xlat24;
    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
    u_xlat0.xyz = u_xlat1.xyz * vec3(0.5, 0.5, 0.5) + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * _BloomRange.yyy;
    u_xlat24 = max(u_xlat0.y, u_xlat0.x);
    u_xlat1.x = max(u_xlat0.z, 9.99999997e-07);
    u_xlat24 = max(u_xlat24, u_xlat1.x);
    u_xlat24 = min(u_xlat24, 1.0);
    u_xlat24 = u_xlat24 * 255.0;
    u_xlat24 = ceil(u_xlat24);
    u_xlat24 = u_xlat24 * 0.00392156886;
    SV_Target0.xyz = u_xlat0.xyz / vec3(u_xlat24);
    SV_Target0.w = u_xlat24;
    return;
}

#endif
"
}
SubProgram "vulkan " {
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 94
; Schema: 0
                                              OpCapability Shader 
                                       %1 = OpExtInstImport "GLSL.std.450" 
                                              OpMemoryModel Logical GLSL450 
                                              OpEntryPoint Vertex %4 "main" %11 %72 %84 %86 
                                              OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                              OpDecorate %11 Location 11 
                                              OpDecorate %16 ArrayStride 16 
                                              OpDecorate %17 ArrayStride 17 
                                              OpMemberDecorate %18 0 Offset 18 
                                              OpMemberDecorate %18 1 Offset 18 
                                              OpDecorate %18 Block 
                                              OpDecorate %20 DescriptorSet 20 
                                              OpDecorate %20 Binding 20 
                                              OpMemberDecorate %70 0 BuiltIn 70 
                                              OpMemberDecorate %70 1 BuiltIn 70 
                                              OpMemberDecorate %70 2 BuiltIn 70 
                                              OpDecorate %70 Block 
                                              OpDecorate vs_TEXCOORD0 Location 84 
                                              OpDecorate %86 Location 86 
                                       %2 = OpTypeVoid 
                                       %3 = OpTypeFunction %2 
                                       %6 = OpTypeFloat 32 
                                       %7 = OpTypeVector %6 4 
                                       %8 = OpTypePointer Private %7 
                        Private f32_4* %9 = OpVariable Private 
                                      %10 = OpTypePointer Input %7 
                         Input f32_4* %11 = OpVariable Input 
                                      %14 = OpTypeInt 32 0 
                                  u32 %15 = OpConstant 4 
                                      %16 = OpTypeArray %7 %15 
                                      %17 = OpTypeArray %7 %15 
                                      %18 = OpTypeStruct %16 %17 
                                      %19 = OpTypePointer Uniform %18 
Uniform struct {f32_4[4]; f32_4[4];}* %20 = OpVariable Uniform 
                                      %21 = OpTypeInt 32 1 
                                  i32 %22 = OpConstant 0 
                                  i32 %23 = OpConstant 1 
                                      %24 = OpTypePointer Uniform %7 
                                  i32 %35 = OpConstant 2 
                                  i32 %44 = OpConstant 3 
                       Private f32_4* %48 = OpVariable Private 
                                  u32 %68 = OpConstant 1 
                                      %69 = OpTypeArray %6 %68 
                                      %70 = OpTypeStruct %7 %6 %69 
                                      %71 = OpTypePointer Output %70 
 Output struct {f32_4; f32; f32[1];}* %72 = OpVariable Output 
                                      %80 = OpTypePointer Output %7 
                                      %82 = OpTypeVector %6 2 
                                      %83 = OpTypePointer Output %82 
               Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                      %85 = OpTypePointer Input %82 
                         Input f32_2* %86 = OpVariable Input 
                                      %88 = OpTypePointer Output %6 
                                  void %4 = OpFunction None %3 
                                       %5 = OpLabel 
                                f32_4 %12 = OpLoad %11 
                                f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                       Uniform f32_4* %25 = OpAccessChain %20 %22 %23 
                                f32_4 %26 = OpLoad %25 
                                f32_4 %27 = OpFMul %13 %26 
                                              OpStore %9 %27 
                       Uniform f32_4* %28 = OpAccessChain %20 %22 %22 
                                f32_4 %29 = OpLoad %28 
                                f32_4 %30 = OpLoad %11 
                                f32_4 %31 = OpVectorShuffle %30 %30 0 0 0 0 
                                f32_4 %32 = OpFMul %29 %31 
                                f32_4 %33 = OpLoad %9 
                                f32_4 %34 = OpFAdd %32 %33 
                                              OpStore %9 %34 
                       Uniform f32_4* %36 = OpAccessChain %20 %22 %35 
                                f32_4 %37 = OpLoad %36 
                                f32_4 %38 = OpLoad %11 
                                f32_4 %39 = OpVectorShuffle %38 %38 2 2 2 2 
                                f32_4 %40 = OpFMul %37 %39 
                                f32_4 %41 = OpLoad %9 
                                f32_4 %42 = OpFAdd %40 %41 
                                              OpStore %9 %42 
                                f32_4 %43 = OpLoad %9 
                       Uniform f32_4* %45 = OpAccessChain %20 %22 %44 
                                f32_4 %46 = OpLoad %45 
                                f32_4 %47 = OpFAdd %43 %46 
                                              OpStore %9 %47 
                                f32_4 %49 = OpLoad %9 
                                f32_4 %50 = OpVectorShuffle %49 %49 1 1 1 1 
                       Uniform f32_4* %51 = OpAccessChain %20 %23 %23 
                                f32_4 %52 = OpLoad %51 
                                f32_4 %53 = OpFMul %50 %52 
                                              OpStore %48 %53 
                       Uniform f32_4* %54 = OpAccessChain %20 %23 %22 
                                f32_4 %55 = OpLoad %54 
                                f32_4 %56 = OpLoad %9 
                                f32_4 %57 = OpVectorShuffle %56 %56 0 0 0 0 
                                f32_4 %58 = OpFMul %55 %57 
                                f32_4 %59 = OpLoad %48 
                                f32_4 %60 = OpFAdd %58 %59 
                                              OpStore %48 %60 
                       Uniform f32_4* %61 = OpAccessChain %20 %23 %35 
                                f32_4 %62 = OpLoad %61 
                                f32_4 %63 = OpLoad %9 
                                f32_4 %64 = OpVectorShuffle %63 %63 2 2 2 2 
                                f32_4 %65 = OpFMul %62 %64 
                                f32_4 %66 = OpLoad %48 
                                f32_4 %67 = OpFAdd %65 %66 
                                              OpStore %48 %67 
                       Uniform f32_4* %73 = OpAccessChain %20 %23 %44 
                                f32_4 %74 = OpLoad %73 
                                f32_4 %75 = OpLoad %9 
                                f32_4 %76 = OpVectorShuffle %75 %75 3 3 3 3 
                                f32_4 %77 = OpFMul %74 %76 
                                f32_4 %78 = OpLoad %48 
                                f32_4 %79 = OpFAdd %77 %78 
                        Output f32_4* %81 = OpAccessChain %72 %22 
                                              OpStore %81 %79 
                                f32_2 %87 = OpLoad %86 
                                              OpStore vs_TEXCOORD0 %87 
                          Output f32* %89 = OpAccessChain %72 %22 %68 
                                  f32 %90 = OpLoad %89 
                                  f32 %91 = OpFNegate %90 
                          Output f32* %92 = OpAccessChain %72 %22 %68 
                                              OpStore %92 %91 
                                              OpReturn
                                              OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 740
; Schema: 0
                                               OpCapability Shader 
                                        %1 = OpExtInstImport "GLSL.std.450" 
                                               OpMemoryModel Logical GLSL450 
                                               OpEntryPoint Fragment %4 "main" %24 %727 
                                               OpExecutionMode %4 OriginUpperLeft 
                                               OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                               OpMemberDecorate %10 0 Offset 10 
                                               OpMemberDecorate %10 1 Offset 10 
                                               OpMemberDecorate %10 2 Offset 10 
                                               OpDecorate %10 Block 
                                               OpDecorate %12 DescriptorSet 12 
                                               OpDecorate %12 Binding 12 
                                               OpDecorate vs_TEXCOORD0 Location 24 
                                               OpDecorate %44 DescriptorSet 44 
                                               OpDecorate %44 Binding 44 
                                               OpDecorate %48 DescriptorSet 48 
                                               OpDecorate %48 Binding 48 
                                               OpDecorate %727 Location 727 
                                        %2 = OpTypeVoid 
                                        %3 = OpTypeFunction %2 
                                        %6 = OpTypeFloat 32 
                                        %7 = OpTypeVector %6 4 
                                        %8 = OpTypePointer Private %7 
                         Private f32_4* %9 = OpVariable Private 
                                       %10 = OpTypeStruct %7 %7 %7 
                                       %11 = OpTypePointer Uniform %10 
Uniform struct {f32_4; f32_4; f32_4;}* %12 = OpVariable Uniform 
                                       %13 = OpTypeInt 32 1 
                                   i32 %14 = OpConstant 2 
                                       %15 = OpTypeVector %6 2 
                                       %16 = OpTypePointer Uniform %7 
                                   f32 %20 = OpConstant 3.674022E-40 
                                 f32_2 %21 = OpConstantComposite %20 %20 
                                       %23 = OpTypePointer Input %15 
                 Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                   i32 %31 = OpConstant 0 
                                       %42 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                       %43 = OpTypePointer UniformConstant %42 
  UniformConstant read_only Texture2D* %44 = OpVariable UniformConstant 
                                       %46 = OpTypeSampler 
                                       %47 = OpTypePointer UniformConstant %46 
              UniformConstant sampler* %48 = OpVariable UniformConstant 
                                       %50 = OpTypeSampledImage %42 
                                       %55 = OpTypeVector %6 3 
                                   i32 %58 = OpConstant 1 
                        Private f32_4* %65 = OpVariable Private 
                                   f32 %69 = OpConstant 3.674022E-40 
                                 f32_2 %70 = OpConstantComposite %69 %20 
                       Private f32_4* %102 = OpVariable Private 
                                  f32 %106 = OpConstant 3.674022E-40 
                                f32_4 %107 = OpConstantComposite %20 %69 %106 %20 
                       Private f32_4* %121 = OpVariable Private 
                       Private f32_4* %142 = OpVariable Private 
                       Private f32_4* %150 = OpVariable Private 
                                  f32 %208 = OpConstant 3.674022E-40 
                                f32_3 %209 = OpConstantComposite %208 %208 %208 
                                      %213 = OpTypePointer Private %6 
                         Private f32* %214 = OpVariable Private 
                                  f32 %217 = OpConstant 3.674022E-40 
                                  f32 %218 = OpConstant 3.674022E-40 
                                  f32 %219 = OpConstant 3.674022E-40 
                                f32_3 %220 = OpConstantComposite %217 %218 %219 
                                  f32 %223 = OpConstant 3.674022E-40 
                       Private f32_4* %249 = OpVariable Private 
                                f32_4 %253 = OpConstantComposite %20 %106 %106 %69 
                       Private f32_4* %267 = OpVariable Private 
                                f32_4 %351 = OpConstantComposite %106 %106 %69 %106 
                                  f32 %506 = OpConstant 3.674022E-40 
                                f32_3 %507 = OpConstantComposite %506 %506 %506 
                                  f32 %514 = OpConstant 3.674022E-40 
                                f32_4 %515 = OpConstantComposite %223 %514 %514 %223 
                                  f32 %682 = OpConstant 3.674022E-40 
                                f32_3 %683 = OpConstantComposite %682 %682 %682 
                                      %698 = OpTypeInt 32 0 
                                  u32 %699 = OpConstant 1 
                                  u32 %702 = OpConstant 0 
                                  u32 %706 = OpConstant 2 
                                  f32 %709 = OpConstant 3.674022E-40 
                                  f32 %719 = OpConstant 3.674022E-40 
                                  f32 %724 = OpConstant 3.674022E-40 
                                      %726 = OpTypePointer Output %7 
                        Output f32_4* %727 = OpVariable Output 
                                  u32 %736 = OpConstant 3 
                                      %737 = OpTypePointer Output %6 
                                   void %4 = OpFunction None %3 
                                        %5 = OpLabel 
                        Uniform f32_4* %17 = OpAccessChain %12 %14 
                                 f32_4 %18 = OpLoad %17 
                                 f32_2 %19 = OpVectorShuffle %18 %18 0 1 
                                 f32_2 %22 = OpFMul %19 %21 
                                 f32_2 %25 = OpLoad vs_TEXCOORD0 
                                 f32_2 %26 = OpFAdd %22 %25 
                                 f32_4 %27 = OpLoad %9 
                                 f32_4 %28 = OpVectorShuffle %27 %26 4 5 2 3 
                                               OpStore %9 %28 
                                 f32_4 %29 = OpLoad %9 
                                 f32_2 %30 = OpVectorShuffle %29 %29 0 1 
                        Uniform f32_4* %32 = OpAccessChain %12 %31 
                                 f32_4 %33 = OpLoad %32 
                                 f32_2 %34 = OpVectorShuffle %33 %33 0 1 
                                 f32_2 %35 = OpFMul %30 %34 
                        Uniform f32_4* %36 = OpAccessChain %12 %31 
                                 f32_4 %37 = OpLoad %36 
                                 f32_2 %38 = OpVectorShuffle %37 %37 2 3 
                                 f32_2 %39 = OpFAdd %35 %38 
                                 f32_4 %40 = OpLoad %9 
                                 f32_4 %41 = OpVectorShuffle %40 %39 4 5 2 3 
                                               OpStore %9 %41 
                   read_only Texture2D %45 = OpLoad %44 
                               sampler %49 = OpLoad %48 
            read_only Texture2DSampled %51 = OpSampledImage %45 %49 
                                 f32_4 %52 = OpLoad %9 
                                 f32_2 %53 = OpVectorShuffle %52 %52 0 1 
                                 f32_4 %54 = OpImageSampleImplicitLod %51 %53 
                                               OpStore %9 %54 
                                 f32_4 %56 = OpLoad %9 
                                 f32_3 %57 = OpVectorShuffle %56 %56 0 1 2 
                        Uniform f32_4* %59 = OpAccessChain %12 %58 
                                 f32_4 %60 = OpLoad %59 
                                 f32_3 %61 = OpVectorShuffle %60 %60 0 0 0 
                                 f32_3 %62 = OpFMul %57 %61 
                                 f32_4 %63 = OpLoad %9 
                                 f32_4 %64 = OpVectorShuffle %63 %62 4 5 6 3 
                                               OpStore %9 %64 
                        Uniform f32_4* %66 = OpAccessChain %12 %14 
                                 f32_4 %67 = OpLoad %66 
                                 f32_2 %68 = OpVectorShuffle %67 %67 0 1 
                                 f32_2 %71 = OpFMul %68 %70 
                                 f32_2 %72 = OpLoad vs_TEXCOORD0 
                                 f32_2 %73 = OpFAdd %71 %72 
                                 f32_4 %74 = OpLoad %65 
                                 f32_4 %75 = OpVectorShuffle %74 %73 4 5 2 3 
                                               OpStore %65 %75 
                                 f32_4 %76 = OpLoad %65 
                                 f32_2 %77 = OpVectorShuffle %76 %76 0 1 
                        Uniform f32_4* %78 = OpAccessChain %12 %31 
                                 f32_4 %79 = OpLoad %78 
                                 f32_2 %80 = OpVectorShuffle %79 %79 0 1 
                                 f32_2 %81 = OpFMul %77 %80 
                        Uniform f32_4* %82 = OpAccessChain %12 %31 
                                 f32_4 %83 = OpLoad %82 
                                 f32_2 %84 = OpVectorShuffle %83 %83 2 3 
                                 f32_2 %85 = OpFAdd %81 %84 
                                 f32_4 %86 = OpLoad %65 
                                 f32_4 %87 = OpVectorShuffle %86 %85 4 5 2 3 
                                               OpStore %65 %87 
                   read_only Texture2D %88 = OpLoad %44 
                               sampler %89 = OpLoad %48 
            read_only Texture2DSampled %90 = OpSampledImage %88 %89 
                                 f32_4 %91 = OpLoad %65 
                                 f32_2 %92 = OpVectorShuffle %91 %91 0 1 
                                 f32_4 %93 = OpImageSampleImplicitLod %90 %92 
                                               OpStore %65 %93 
                                 f32_4 %94 = OpLoad %65 
                                 f32_3 %95 = OpVectorShuffle %94 %94 0 1 2 
                        Uniform f32_4* %96 = OpAccessChain %12 %58 
                                 f32_4 %97 = OpLoad %96 
                                 f32_3 %98 = OpVectorShuffle %97 %97 0 0 0 
                                 f32_3 %99 = OpFMul %95 %98 
                                f32_4 %100 = OpLoad %65 
                                f32_4 %101 = OpVectorShuffle %100 %99 4 5 6 3 
                                               OpStore %65 %101 
                       Uniform f32_4* %103 = OpAccessChain %12 %14 
                                f32_4 %104 = OpLoad %103 
                                f32_4 %105 = OpVectorShuffle %104 %104 0 1 0 1 
                                f32_4 %108 = OpFMul %105 %107 
                                f32_2 %109 = OpLoad vs_TEXCOORD0 
                                f32_4 %110 = OpVectorShuffle %109 %109 0 1 0 1 
                                f32_4 %111 = OpFAdd %108 %110 
                                               OpStore %102 %111 
                                f32_4 %112 = OpLoad %102 
                       Uniform f32_4* %113 = OpAccessChain %12 %31 
                                f32_4 %114 = OpLoad %113 
                                f32_4 %115 = OpVectorShuffle %114 %114 0 1 0 1 
                                f32_4 %116 = OpFMul %112 %115 
                       Uniform f32_4* %117 = OpAccessChain %12 %31 
                                f32_4 %118 = OpLoad %117 
                                f32_4 %119 = OpVectorShuffle %118 %118 2 3 2 3 
                                f32_4 %120 = OpFAdd %116 %119 
                                               OpStore %102 %120 
                  read_only Texture2D %122 = OpLoad %44 
                              sampler %123 = OpLoad %48 
           read_only Texture2DSampled %124 = OpSampledImage %122 %123 
                                f32_4 %125 = OpLoad %102 
                                f32_2 %126 = OpVectorShuffle %125 %125 0 1 
                                f32_4 %127 = OpImageSampleImplicitLod %124 %126 
                                               OpStore %121 %127 
                  read_only Texture2D %128 = OpLoad %44 
                              sampler %129 = OpLoad %48 
           read_only Texture2DSampled %130 = OpSampledImage %128 %129 
                                f32_4 %131 = OpLoad %102 
                                f32_2 %132 = OpVectorShuffle %131 %131 2 3 
                                f32_4 %133 = OpImageSampleImplicitLod %130 %132 
                                               OpStore %102 %133 
                                f32_4 %134 = OpLoad %121 
                                f32_3 %135 = OpVectorShuffle %134 %134 0 1 2 
                       Uniform f32_4* %136 = OpAccessChain %12 %58 
                                f32_4 %137 = OpLoad %136 
                                f32_3 %138 = OpVectorShuffle %137 %137 0 0 0 
                                f32_3 %139 = OpFMul %135 %138 
                                f32_4 %140 = OpLoad %121 
                                f32_4 %141 = OpVectorShuffle %140 %139 4 5 6 3 
                                               OpStore %121 %141 
                                f32_4 %143 = OpLoad %121 
                                f32_3 %144 = OpVectorShuffle %143 %143 3 3 3 
                                f32_4 %145 = OpLoad %121 
                                f32_3 %146 = OpVectorShuffle %145 %145 0 1 2 
                                f32_3 %147 = OpFMul %144 %146 
                                f32_4 %148 = OpLoad %142 
                                f32_4 %149 = OpVectorShuffle %148 %147 4 5 6 3 
                                               OpStore %142 %149 
                                f32_2 %151 = OpLoad vs_TEXCOORD0 
                       Uniform f32_4* %152 = OpAccessChain %12 %31 
                                f32_4 %153 = OpLoad %152 
                                f32_2 %154 = OpVectorShuffle %153 %153 0 1 
                                f32_2 %155 = OpFMul %151 %154 
                       Uniform f32_4* %156 = OpAccessChain %12 %31 
                                f32_4 %157 = OpLoad %156 
                                f32_2 %158 = OpVectorShuffle %157 %157 2 3 
                                f32_2 %159 = OpFAdd %155 %158 
                                f32_4 %160 = OpLoad %150 
                                f32_4 %161 = OpVectorShuffle %160 %159 4 5 2 3 
                                               OpStore %150 %161 
                  read_only Texture2D %162 = OpLoad %44 
                              sampler %163 = OpLoad %48 
           read_only Texture2DSampled %164 = OpSampledImage %162 %163 
                                f32_4 %165 = OpLoad %150 
                                f32_2 %166 = OpVectorShuffle %165 %165 0 1 
                                f32_4 %167 = OpImageSampleImplicitLod %164 %166 
                                               OpStore %150 %167 
                                f32_4 %168 = OpLoad %150 
                                f32_3 %169 = OpVectorShuffle %168 %168 0 1 2 
                       Uniform f32_4* %170 = OpAccessChain %12 %58 
                                f32_4 %171 = OpLoad %170 
                                f32_3 %172 = OpVectorShuffle %171 %171 0 0 0 
                                f32_3 %173 = OpFMul %169 %172 
                                f32_4 %174 = OpLoad %150 
                                f32_4 %175 = OpVectorShuffle %174 %173 4 5 6 3 
                                               OpStore %150 %175 
                                f32_4 %176 = OpLoad %150 
                                f32_3 %177 = OpVectorShuffle %176 %176 0 1 2 
                                f32_4 %178 = OpLoad %150 
                                f32_3 %179 = OpVectorShuffle %178 %178 3 3 3 
                                f32_3 %180 = OpFMul %177 %179 
                                f32_4 %181 = OpLoad %142 
                                f32_3 %182 = OpVectorShuffle %181 %181 0 1 2 
                                f32_3 %183 = OpFAdd %180 %182 
                                f32_4 %184 = OpLoad %142 
                                f32_4 %185 = OpVectorShuffle %184 %183 4 5 6 3 
                                               OpStore %142 %185 
                                f32_4 %186 = OpLoad %65 
                                f32_3 %187 = OpVectorShuffle %186 %186 0 1 2 
                                f32_4 %188 = OpLoad %65 
                                f32_3 %189 = OpVectorShuffle %188 %188 3 3 3 
                                f32_3 %190 = OpFMul %187 %189 
                                f32_4 %191 = OpLoad %142 
                                f32_3 %192 = OpVectorShuffle %191 %191 0 1 2 
                                f32_3 %193 = OpFAdd %190 %192 
                                f32_4 %194 = OpLoad %142 
                                f32_4 %195 = OpVectorShuffle %194 %193 4 5 6 3 
                                               OpStore %142 %195 
                                f32_4 %196 = OpLoad %9 
                                f32_3 %197 = OpVectorShuffle %196 %196 0 1 2 
                                f32_4 %198 = OpLoad %9 
                                f32_3 %199 = OpVectorShuffle %198 %198 3 3 3 
                                f32_3 %200 = OpFMul %197 %199 
                                f32_4 %201 = OpLoad %142 
                                f32_3 %202 = OpVectorShuffle %201 %201 0 1 2 
                                f32_3 %203 = OpFAdd %200 %202 
                                f32_4 %204 = OpLoad %9 
                                f32_4 %205 = OpVectorShuffle %204 %203 4 5 6 3 
                                               OpStore %9 %205 
                                f32_4 %206 = OpLoad %9 
                                f32_3 %207 = OpVectorShuffle %206 %206 0 1 2 
                                f32_3 %210 = OpFMul %207 %209 
                                f32_4 %211 = OpLoad %9 
                                f32_4 %212 = OpVectorShuffle %211 %210 4 5 6 3 
                                               OpStore %9 %212 
                                f32_4 %215 = OpLoad %9 
                                f32_3 %216 = OpVectorShuffle %215 %215 0 1 2 
                                  f32 %221 = OpDot %216 %220 
                                               OpStore %214 %221 
                                  f32 %222 = OpLoad %214 
                                  f32 %224 = OpFAdd %222 %223 
                                               OpStore %214 %224 
                                  f32 %225 = OpLoad %214 
                                  f32 %226 = OpFDiv %223 %225 
                                               OpStore %214 %226 
                                  f32 %227 = OpLoad %214 
                                f32_3 %228 = OpCompositeConstruct %227 %227 %227 
                                f32_4 %229 = OpLoad %9 
                                f32_3 %230 = OpVectorShuffle %229 %229 0 1 2 
                                f32_3 %231 = OpFMul %228 %230 
                                f32_4 %232 = OpLoad %9 
                                f32_4 %233 = OpVectorShuffle %232 %231 4 5 6 3 
                                               OpStore %9 %233 
                                f32_4 %234 = OpLoad %102 
                                f32_3 %235 = OpVectorShuffle %234 %234 0 1 2 
                       Uniform f32_4* %236 = OpAccessChain %12 %58 
                                f32_4 %237 = OpLoad %236 
                                f32_3 %238 = OpVectorShuffle %237 %237 0 0 0 
                                f32_3 %239 = OpFMul %235 %238 
                                f32_4 %240 = OpLoad %102 
                                f32_4 %241 = OpVectorShuffle %240 %239 4 5 6 3 
                                               OpStore %102 %241 
                                f32_4 %242 = OpLoad %150 
                                f32_3 %243 = OpVectorShuffle %242 %242 3 3 3 
                                f32_4 %244 = OpLoad %150 
                                f32_3 %245 = OpVectorShuffle %244 %244 0 1 2 
                                f32_3 %246 = OpFMul %243 %245 
                                f32_4 %247 = OpLoad %142 
                                f32_4 %248 = OpVectorShuffle %247 %246 4 5 6 3 
                                               OpStore %142 %248 
                       Uniform f32_4* %250 = OpAccessChain %12 %14 
                                f32_4 %251 = OpLoad %250 
                                f32_4 %252 = OpVectorShuffle %251 %251 0 1 0 1 
                                f32_4 %254 = OpFMul %252 %253 
                                f32_2 %255 = OpLoad vs_TEXCOORD0 
                                f32_4 %256 = OpVectorShuffle %255 %255 0 1 0 1 
                                f32_4 %257 = OpFAdd %254 %256 
                                               OpStore %249 %257 
                                f32_4 %258 = OpLoad %249 
                       Uniform f32_4* %259 = OpAccessChain %12 %31 
                                f32_4 %260 = OpLoad %259 
                                f32_4 %261 = OpVectorShuffle %260 %260 0 1 0 1 
                                f32_4 %262 = OpFMul %258 %261 
                       Uniform f32_4* %263 = OpAccessChain %12 %31 
                                f32_4 %264 = OpLoad %263 
                                f32_4 %265 = OpVectorShuffle %264 %264 2 3 2 3 
                                f32_4 %266 = OpFAdd %262 %265 
                                               OpStore %249 %266 
                  read_only Texture2D %268 = OpLoad %44 
                              sampler %269 = OpLoad %48 
           read_only Texture2DSampled %270 = OpSampledImage %268 %269 
                                f32_4 %271 = OpLoad %249 
                                f32_2 %272 = OpVectorShuffle %271 %271 2 3 
                                f32_4 %273 = OpImageSampleImplicitLod %270 %272 
                                               OpStore %267 %273 
                  read_only Texture2D %274 = OpLoad %44 
                              sampler %275 = OpLoad %48 
           read_only Texture2DSampled %276 = OpSampledImage %274 %275 
                                f32_4 %277 = OpLoad %249 
                                f32_2 %278 = OpVectorShuffle %277 %277 0 1 
                                f32_4 %279 = OpImageSampleImplicitLod %276 %278 
                                               OpStore %249 %279 
                                f32_4 %280 = OpLoad %267 
                                f32_3 %281 = OpVectorShuffle %280 %280 0 1 2 
                       Uniform f32_4* %282 = OpAccessChain %12 %58 
                                f32_4 %283 = OpLoad %282 
                                f32_3 %284 = OpVectorShuffle %283 %283 0 0 0 
                                f32_3 %285 = OpFMul %281 %284 
                                f32_4 %286 = OpLoad %267 
                                f32_4 %287 = OpVectorShuffle %286 %285 4 5 6 3 
                                               OpStore %267 %287 
                                f32_4 %288 = OpLoad %267 
                                f32_3 %289 = OpVectorShuffle %288 %288 0 1 2 
                                f32_4 %290 = OpLoad %267 
                                f32_3 %291 = OpVectorShuffle %290 %290 3 3 3 
                                f32_3 %292 = OpFMul %289 %291 
                                f32_4 %293 = OpLoad %142 
                                f32_3 %294 = OpVectorShuffle %293 %293 0 1 2 
                                f32_3 %295 = OpFAdd %292 %294 
                                f32_4 %296 = OpLoad %142 
                                f32_4 %297 = OpVectorShuffle %296 %295 4 5 6 3 
                                               OpStore %142 %297 
                                f32_4 %298 = OpLoad %102 
                                f32_3 %299 = OpVectorShuffle %298 %298 0 1 2 
                                f32_4 %300 = OpLoad %102 
                                f32_3 %301 = OpVectorShuffle %300 %300 3 3 3 
                                f32_3 %302 = OpFMul %299 %301 
                                f32_4 %303 = OpLoad %142 
                                f32_3 %304 = OpVectorShuffle %303 %303 0 1 2 
                                f32_3 %305 = OpFAdd %302 %304 
                                f32_4 %306 = OpLoad %102 
                                f32_4 %307 = OpVectorShuffle %306 %305 4 5 6 3 
                                               OpStore %102 %307 
                                f32_4 %308 = OpLoad %65 
                                f32_3 %309 = OpVectorShuffle %308 %308 0 1 2 
                                f32_4 %310 = OpLoad %65 
                                f32_3 %311 = OpVectorShuffle %310 %310 3 3 3 
                                f32_3 %312 = OpFMul %309 %311 
                                f32_4 %313 = OpLoad %102 
                                f32_3 %314 = OpVectorShuffle %313 %313 0 1 2 
                                f32_3 %315 = OpFAdd %312 %314 
                                f32_4 %316 = OpLoad %65 
                                f32_4 %317 = OpVectorShuffle %316 %315 4 5 6 3 
                                               OpStore %65 %317 
                                f32_4 %318 = OpLoad %65 
                                f32_3 %319 = OpVectorShuffle %318 %318 0 1 2 
                                f32_3 %320 = OpFMul %319 %209 
                                f32_4 %321 = OpLoad %65 
                                f32_4 %322 = OpVectorShuffle %321 %320 4 5 6 3 
                                               OpStore %65 %322 
                                f32_4 %323 = OpLoad %65 
                                f32_3 %324 = OpVectorShuffle %323 %323 0 1 2 
                                  f32 %325 = OpDot %324 %220 
                                               OpStore %214 %325 
                                  f32 %326 = OpLoad %214 
                                  f32 %327 = OpFAdd %326 %223 
                                               OpStore %214 %327 
                                  f32 %328 = OpLoad %214 
                                  f32 %329 = OpFDiv %223 %328 
                                               OpStore %214 %329 
                                f32_4 %330 = OpLoad %65 
                                f32_3 %331 = OpVectorShuffle %330 %330 0 1 2 
                                  f32 %332 = OpLoad %214 
                                f32_3 %333 = OpCompositeConstruct %332 %332 %332 
                                f32_3 %334 = OpFMul %331 %333 
                                f32_4 %335 = OpLoad %9 
                                f32_3 %336 = OpVectorShuffle %335 %335 0 1 2 
                                f32_3 %337 = OpFAdd %334 %336 
                                f32_4 %338 = OpLoad %9 
                                f32_4 %339 = OpVectorShuffle %338 %337 4 5 6 3 
                                               OpStore %9 %339 
                                f32_4 %340 = OpLoad %249 
                                f32_3 %341 = OpVectorShuffle %340 %340 0 1 2 
                       Uniform f32_4* %342 = OpAccessChain %12 %58 
                                f32_4 %343 = OpLoad %342 
                                f32_3 %344 = OpVectorShuffle %343 %343 0 0 0 
                                f32_3 %345 = OpFMul %341 %344 
                                f32_4 %346 = OpLoad %65 
                                f32_4 %347 = OpVectorShuffle %346 %345 4 5 6 3 
                                               OpStore %65 %347 
                       Uniform f32_4* %348 = OpAccessChain %12 %14 
                                f32_4 %349 = OpLoad %348 
                                f32_4 %350 = OpVectorShuffle %349 %349 0 1 0 1 
                                f32_4 %352 = OpFMul %350 %351 
                                f32_2 %353 = OpLoad vs_TEXCOORD0 
                                f32_4 %354 = OpVectorShuffle %353 %353 0 1 0 1 
                                f32_4 %355 = OpFAdd %352 %354 
                                               OpStore %102 %355 
                                f32_4 %356 = OpLoad %102 
                       Uniform f32_4* %357 = OpAccessChain %12 %31 
                                f32_4 %358 = OpLoad %357 
                                f32_4 %359 = OpVectorShuffle %358 %358 0 1 0 1 
                                f32_4 %360 = OpFMul %356 %359 
                       Uniform f32_4* %361 = OpAccessChain %12 %31 
                                f32_4 %362 = OpLoad %361 
                                f32_4 %363 = OpVectorShuffle %362 %362 2 3 2 3 
                                f32_4 %364 = OpFAdd %360 %363 
                                               OpStore %102 %364 
                  read_only Texture2D %365 = OpLoad %44 
                              sampler %366 = OpLoad %48 
           read_only Texture2DSampled %367 = OpSampledImage %365 %366 
                                f32_4 %368 = OpLoad %102 
                                f32_2 %369 = OpVectorShuffle %368 %368 2 3 
                                f32_4 %370 = OpImageSampleImplicitLod %367 %369 
                                               OpStore %142 %370 
                  read_only Texture2D %371 = OpLoad %44 
                              sampler %372 = OpLoad %48 
           read_only Texture2DSampled %373 = OpSampledImage %371 %372 
                                f32_4 %374 = OpLoad %102 
                                f32_2 %375 = OpVectorShuffle %374 %374 0 1 
                                f32_4 %376 = OpImageSampleImplicitLod %373 %375 
                                               OpStore %102 %376 
                                f32_4 %377 = OpLoad %142 
                                f32_3 %378 = OpVectorShuffle %377 %377 0 1 2 
                       Uniform f32_4* %379 = OpAccessChain %12 %58 
                                f32_4 %380 = OpLoad %379 
                                f32_3 %381 = OpVectorShuffle %380 %380 0 0 0 
                                f32_3 %382 = OpFMul %378 %381 
                                f32_4 %383 = OpLoad %142 
                                f32_4 %384 = OpVectorShuffle %383 %382 4 5 6 3 
                                               OpStore %142 %384 
                                f32_4 %385 = OpLoad %142 
                                f32_3 %386 = OpVectorShuffle %385 %385 3 3 3 
                                f32_4 %387 = OpLoad %142 
                                f32_3 %388 = OpVectorShuffle %387 %387 0 1 2 
                                f32_3 %389 = OpFMul %386 %388 
                                f32_4 %390 = OpLoad %142 
                                f32_4 %391 = OpVectorShuffle %390 %389 4 5 6 3 
                                               OpStore %142 %391 
                                f32_4 %392 = OpLoad %65 
                                f32_3 %393 = OpVectorShuffle %392 %392 0 1 2 
                                f32_4 %394 = OpLoad %249 
                                f32_3 %395 = OpVectorShuffle %394 %394 3 3 3 
                                f32_3 %396 = OpFMul %393 %395 
                                f32_4 %397 = OpLoad %142 
                                f32_3 %398 = OpVectorShuffle %397 %397 0 1 2 
                                f32_3 %399 = OpFAdd %396 %398 
                                f32_4 %400 = OpLoad %65 
                                f32_4 %401 = OpVectorShuffle %400 %399 4 5 6 3 
                                               OpStore %65 %401 
                                f32_4 %402 = OpLoad %150 
                                f32_3 %403 = OpVectorShuffle %402 %402 0 1 2 
                                f32_4 %404 = OpLoad %150 
                                f32_3 %405 = OpVectorShuffle %404 %404 3 3 3 
                                f32_3 %406 = OpFMul %403 %405 
                                f32_4 %407 = OpLoad %65 
                                f32_3 %408 = OpVectorShuffle %407 %407 0 1 2 
                                f32_3 %409 = OpFAdd %406 %408 
                                f32_4 %410 = OpLoad %65 
                                f32_4 %411 = OpVectorShuffle %410 %409 4 5 6 3 
                                               OpStore %65 %411 
                                f32_4 %412 = OpLoad %121 
                                f32_3 %413 = OpVectorShuffle %412 %412 0 1 2 
                                f32_4 %414 = OpLoad %121 
                                f32_3 %415 = OpVectorShuffle %414 %414 3 3 3 
                                f32_3 %416 = OpFMul %413 %415 
                                f32_4 %417 = OpLoad %65 
                                f32_3 %418 = OpVectorShuffle %417 %417 0 1 2 
                                f32_3 %419 = OpFAdd %416 %418 
                                f32_4 %420 = OpLoad %65 
                                f32_4 %421 = OpVectorShuffle %420 %419 4 5 6 3 
                                               OpStore %65 %421 
                                f32_4 %422 = OpLoad %65 
                                f32_3 %423 = OpVectorShuffle %422 %422 0 1 2 
                                f32_3 %424 = OpFMul %423 %209 
                                f32_4 %425 = OpLoad %65 
                                f32_4 %426 = OpVectorShuffle %425 %424 4 5 6 3 
                                               OpStore %65 %426 
                                f32_4 %427 = OpLoad %65 
                                f32_3 %428 = OpVectorShuffle %427 %427 0 1 2 
                                  f32 %429 = OpDot %428 %220 
                                               OpStore %214 %429 
                                  f32 %430 = OpLoad %214 
                                  f32 %431 = OpFAdd %430 %223 
                                               OpStore %214 %431 
                                  f32 %432 = OpLoad %214 
                                  f32 %433 = OpFDiv %223 %432 
                                               OpStore %214 %433 
                                f32_4 %434 = OpLoad %65 
                                f32_3 %435 = OpVectorShuffle %434 %434 0 1 2 
                                  f32 %436 = OpLoad %214 
                                f32_3 %437 = OpCompositeConstruct %436 %436 %436 
                                f32_3 %438 = OpFMul %435 %437 
                                f32_4 %439 = OpLoad %9 
                                f32_3 %440 = OpVectorShuffle %439 %439 0 1 2 
                                f32_3 %441 = OpFAdd %438 %440 
                                f32_4 %442 = OpLoad %9 
                                f32_4 %443 = OpVectorShuffle %442 %441 4 5 6 3 
                                               OpStore %9 %443 
                                f32_4 %444 = OpLoad %102 
                                f32_3 %445 = OpVectorShuffle %444 %444 0 1 2 
                       Uniform f32_4* %446 = OpAccessChain %12 %58 
                                f32_4 %447 = OpLoad %446 
                                f32_3 %448 = OpVectorShuffle %447 %447 0 0 0 
                                f32_3 %449 = OpFMul %445 %448 
                                f32_4 %450 = OpLoad %65 
                                f32_4 %451 = OpVectorShuffle %450 %449 4 5 6 3 
                                               OpStore %65 %451 
                                f32_4 %452 = OpLoad %65 
                                f32_3 %453 = OpVectorShuffle %452 %452 0 1 2 
                                f32_4 %454 = OpLoad %102 
                                f32_3 %455 = OpVectorShuffle %454 %454 3 3 3 
                                f32_3 %456 = OpFMul %453 %455 
                                f32_4 %457 = OpLoad %142 
                                f32_3 %458 = OpVectorShuffle %457 %457 0 1 2 
                                f32_3 %459 = OpFAdd %456 %458 
                                f32_4 %460 = OpLoad %65 
                                f32_4 %461 = OpVectorShuffle %460 %459 4 5 6 3 
                                               OpStore %65 %461 
                                f32_4 %462 = OpLoad %267 
                                f32_3 %463 = OpVectorShuffle %462 %462 0 1 2 
                                f32_4 %464 = OpLoad %267 
                                f32_3 %465 = OpVectorShuffle %464 %464 3 3 3 
                                f32_3 %466 = OpFMul %463 %465 
                                f32_4 %467 = OpLoad %65 
                                f32_3 %468 = OpVectorShuffle %467 %467 0 1 2 
                                f32_3 %469 = OpFAdd %466 %468 
                                f32_4 %470 = OpLoad %65 
                                f32_4 %471 = OpVectorShuffle %470 %469 4 5 6 3 
                                               OpStore %65 %471 
                                f32_4 %472 = OpLoad %150 
                                f32_3 %473 = OpVectorShuffle %472 %472 0 1 2 
                                f32_4 %474 = OpLoad %150 
                                f32_3 %475 = OpVectorShuffle %474 %474 3 3 3 
                                f32_3 %476 = OpFMul %473 %475 
                                f32_4 %477 = OpLoad %65 
                                f32_3 %478 = OpVectorShuffle %477 %477 0 1 2 
                                f32_3 %479 = OpFAdd %476 %478 
                                f32_4 %480 = OpLoad %65 
                                f32_4 %481 = OpVectorShuffle %480 %479 4 5 6 3 
                                               OpStore %65 %481 
                                f32_4 %482 = OpLoad %65 
                                f32_3 %483 = OpVectorShuffle %482 %482 0 1 2 
                                f32_3 %484 = OpFMul %483 %209 
                                f32_4 %485 = OpLoad %65 
                                f32_4 %486 = OpVectorShuffle %485 %484 4 5 6 3 
                                               OpStore %65 %486 
                                f32_4 %487 = OpLoad %65 
                                f32_3 %488 = OpVectorShuffle %487 %487 0 1 2 
                                  f32 %489 = OpDot %488 %220 
                                               OpStore %214 %489 
                                  f32 %490 = OpLoad %214 
                                  f32 %491 = OpFAdd %490 %223 
                                               OpStore %214 %491 
                                  f32 %492 = OpLoad %214 
                                  f32 %493 = OpFDiv %223 %492 
                                               OpStore %214 %493 
                                f32_4 %494 = OpLoad %65 
                                f32_3 %495 = OpVectorShuffle %494 %494 0 1 2 
                                  f32 %496 = OpLoad %214 
                                f32_3 %497 = OpCompositeConstruct %496 %496 %496 
                                f32_3 %498 = OpFMul %495 %497 
                                f32_4 %499 = OpLoad %9 
                                f32_3 %500 = OpVectorShuffle %499 %499 0 1 2 
                                f32_3 %501 = OpFAdd %498 %500 
                                f32_4 %502 = OpLoad %9 
                                f32_4 %503 = OpVectorShuffle %502 %501 4 5 6 3 
                                               OpStore %9 %503 
                                f32_4 %504 = OpLoad %9 
                                f32_3 %505 = OpVectorShuffle %504 %504 0 1 2 
                                f32_3 %508 = OpFMul %505 %507 
                                f32_4 %509 = OpLoad %9 
                                f32_4 %510 = OpVectorShuffle %509 %508 4 5 6 3 
                                               OpStore %9 %510 
                       Uniform f32_4* %511 = OpAccessChain %12 %14 
                                f32_4 %512 = OpLoad %511 
                                f32_4 %513 = OpVectorShuffle %512 %512 0 1 0 1 
                                f32_4 %516 = OpFMul %513 %515 
                                f32_2 %517 = OpLoad vs_TEXCOORD0 
                                f32_4 %518 = OpVectorShuffle %517 %517 0 1 0 1 
                                f32_4 %519 = OpFAdd %516 %518 
                                               OpStore %65 %519 
                                f32_4 %520 = OpLoad %65 
                       Uniform f32_4* %521 = OpAccessChain %12 %31 
                                f32_4 %522 = OpLoad %521 
                                f32_4 %523 = OpVectorShuffle %522 %522 0 1 0 1 
                                f32_4 %524 = OpFMul %520 %523 
                       Uniform f32_4* %525 = OpAccessChain %12 %31 
                                f32_4 %526 = OpLoad %525 
                                f32_4 %527 = OpVectorShuffle %526 %526 2 3 2 3 
                                f32_4 %528 = OpFAdd %524 %527 
                                               OpStore %65 %528 
                  read_only Texture2D %529 = OpLoad %44 
                              sampler %530 = OpLoad %48 
           read_only Texture2DSampled %531 = OpSampledImage %529 %530 
                                f32_4 %532 = OpLoad %65 
                                f32_2 %533 = OpVectorShuffle %532 %532 0 1 
                                f32_4 %534 = OpImageSampleImplicitLod %531 %533 
                                               OpStore %102 %534 
                  read_only Texture2D %535 = OpLoad %44 
                              sampler %536 = OpLoad %48 
           read_only Texture2DSampled %537 = OpSampledImage %535 %536 
                                f32_4 %538 = OpLoad %65 
                                f32_2 %539 = OpVectorShuffle %538 %538 2 3 
                                f32_4 %540 = OpImageSampleImplicitLod %537 %539 
                                               OpStore %65 %540 
                                f32_4 %541 = OpLoad %102 
                                f32_3 %542 = OpVectorShuffle %541 %541 0 1 2 
                       Uniform f32_4* %543 = OpAccessChain %12 %58 
                                f32_4 %544 = OpLoad %543 
                                f32_3 %545 = OpVectorShuffle %544 %544 0 0 0 
                                f32_3 %546 = OpFMul %542 %545 
                                f32_4 %547 = OpLoad %102 
                                f32_4 %548 = OpVectorShuffle %547 %546 4 5 6 3 
                                               OpStore %102 %548 
                                f32_4 %549 = OpLoad %102 
                                f32_3 %550 = OpVectorShuffle %549 %549 3 3 3 
                                f32_4 %551 = OpLoad %102 
                                f32_3 %552 = OpVectorShuffle %551 %551 0 1 2 
                                f32_3 %553 = OpFMul %550 %552 
                                f32_4 %554 = OpLoad %102 
                                f32_4 %555 = OpVectorShuffle %554 %553 4 5 6 3 
                                               OpStore %102 %555 
                                f32_2 %556 = OpLoad vs_TEXCOORD0 
                       Uniform f32_4* %557 = OpAccessChain %12 %14 
                                f32_4 %558 = OpLoad %557 
                                f32_2 %559 = OpVectorShuffle %558 %558 0 1 
                                f32_2 %560 = OpFNegate %559 
                                f32_2 %561 = OpFAdd %556 %560 
                                f32_4 %562 = OpLoad %121 
                                f32_4 %563 = OpVectorShuffle %562 %561 4 5 2 3 
                                               OpStore %121 %563 
                                f32_4 %564 = OpLoad %121 
                                f32_2 %565 = OpVectorShuffle %564 %564 0 1 
                       Uniform f32_4* %566 = OpAccessChain %12 %31 
                                f32_4 %567 = OpLoad %566 
                                f32_2 %568 = OpVectorShuffle %567 %567 0 1 
                                f32_2 %569 = OpFMul %565 %568 
                       Uniform f32_4* %570 = OpAccessChain %12 %31 
                                f32_4 %571 = OpLoad %570 
                                f32_2 %572 = OpVectorShuffle %571 %571 2 3 
                                f32_2 %573 = OpFAdd %569 %572 
                                f32_4 %574 = OpLoad %121 
                                f32_4 %575 = OpVectorShuffle %574 %573 4 5 2 3 
                                               OpStore %121 %575 
                  read_only Texture2D %576 = OpLoad %44 
                              sampler %577 = OpLoad %48 
           read_only Texture2DSampled %578 = OpSampledImage %576 %577 
                                f32_4 %579 = OpLoad %121 
                                f32_2 %580 = OpVectorShuffle %579 %579 0 1 
                                f32_4 %581 = OpImageSampleImplicitLod %578 %580 
                                               OpStore %121 %581 
                                f32_4 %582 = OpLoad %121 
                                f32_3 %583 = OpVectorShuffle %582 %582 0 1 2 
                       Uniform f32_4* %584 = OpAccessChain %12 %58 
                                f32_4 %585 = OpLoad %584 
                                f32_3 %586 = OpVectorShuffle %585 %585 0 0 0 
                                f32_3 %587 = OpFMul %583 %586 
                                f32_4 %588 = OpLoad %121 
                                f32_4 %589 = OpVectorShuffle %588 %587 4 5 6 3 
                                               OpStore %121 %589 
                                f32_4 %590 = OpLoad %121 
                                f32_3 %591 = OpVectorShuffle %590 %590 0 1 2 
                                f32_4 %592 = OpLoad %121 
                                f32_3 %593 = OpVectorShuffle %592 %592 3 3 3 
                                f32_3 %594 = OpFMul %591 %593 
                                f32_4 %595 = OpLoad %102 
                                f32_3 %596 = OpVectorShuffle %595 %595 0 1 2 
                                f32_3 %597 = OpFAdd %594 %596 
                                f32_4 %598 = OpLoad %102 
                                f32_4 %599 = OpVectorShuffle %598 %597 4 5 6 3 
                                               OpStore %102 %599 
                                f32_2 %600 = OpLoad vs_TEXCOORD0 
                       Uniform f32_4* %601 = OpAccessChain %12 %14 
                                f32_4 %602 = OpLoad %601 
                                f32_2 %603 = OpVectorShuffle %602 %602 0 1 
                                f32_2 %604 = OpFAdd %600 %603 
                                f32_4 %605 = OpLoad %121 
                                f32_4 %606 = OpVectorShuffle %605 %604 4 5 2 3 
                                               OpStore %121 %606 
                                f32_4 %607 = OpLoad %121 
                                f32_2 %608 = OpVectorShuffle %607 %607 0 1 
                       Uniform f32_4* %609 = OpAccessChain %12 %31 
                                f32_4 %610 = OpLoad %609 
                                f32_2 %611 = OpVectorShuffle %610 %610 0 1 
                                f32_2 %612 = OpFMul %608 %611 
                       Uniform f32_4* %613 = OpAccessChain %12 %31 
                                f32_4 %614 = OpLoad %613 
                                f32_2 %615 = OpVectorShuffle %614 %614 2 3 
                                f32_2 %616 = OpFAdd %612 %615 
                                f32_4 %617 = OpLoad %121 
                                f32_4 %618 = OpVectorShuffle %617 %616 4 5 2 3 
                                               OpStore %121 %618 
                  read_only Texture2D %619 = OpLoad %44 
                              sampler %620 = OpLoad %48 
           read_only Texture2DSampled %621 = OpSampledImage %619 %620 
                                f32_4 %622 = OpLoad %121 
                                f32_2 %623 = OpVectorShuffle %622 %622 0 1 
                                f32_4 %624 = OpImageSampleImplicitLod %621 %623 
                                               OpStore %121 %624 
                                f32_4 %625 = OpLoad %121 
                                f32_3 %626 = OpVectorShuffle %625 %625 0 1 2 
                       Uniform f32_4* %627 = OpAccessChain %12 %58 
                                f32_4 %628 = OpLoad %627 
                                f32_3 %629 = OpVectorShuffle %628 %628 0 0 0 
                                f32_3 %630 = OpFMul %626 %629 
                                f32_4 %631 = OpLoad %121 
                                f32_4 %632 = OpVectorShuffle %631 %630 4 5 6 3 
                                               OpStore %121 %632 
                                f32_4 %633 = OpLoad %121 
                                f32_3 %634 = OpVectorShuffle %633 %633 0 1 2 
                                f32_4 %635 = OpLoad %121 
                                f32_3 %636 = OpVectorShuffle %635 %635 3 3 3 
                                f32_3 %637 = OpFMul %634 %636 
                                f32_4 %638 = OpLoad %102 
                                f32_3 %639 = OpVectorShuffle %638 %638 0 1 2 
                                f32_3 %640 = OpFAdd %637 %639 
                                f32_4 %641 = OpLoad %102 
                                f32_4 %642 = OpVectorShuffle %641 %640 4 5 6 3 
                                               OpStore %102 %642 
                                f32_4 %643 = OpLoad %65 
                                f32_3 %644 = OpVectorShuffle %643 %643 0 1 2 
                       Uniform f32_4* %645 = OpAccessChain %12 %58 
                                f32_4 %646 = OpLoad %645 
                                f32_3 %647 = OpVectorShuffle %646 %646 0 0 0 
                                f32_3 %648 = OpFMul %644 %647 
                                f32_4 %649 = OpLoad %65 
                                f32_4 %650 = OpVectorShuffle %649 %648 4 5 6 3 
                                               OpStore %65 %650 
                                f32_4 %651 = OpLoad %65 
                                f32_3 %652 = OpVectorShuffle %651 %651 0 1 2 
                                f32_4 %653 = OpLoad %65 
                                f32_3 %654 = OpVectorShuffle %653 %653 3 3 3 
                                f32_3 %655 = OpFMul %652 %654 
                                f32_4 %656 = OpLoad %102 
                                f32_3 %657 = OpVectorShuffle %656 %656 0 1 2 
                                f32_3 %658 = OpFAdd %655 %657 
                                f32_4 %659 = OpLoad %65 
                                f32_4 %660 = OpVectorShuffle %659 %658 4 5 6 3 
                                               OpStore %65 %660 
                                f32_4 %661 = OpLoad %65 
                                f32_3 %662 = OpVectorShuffle %661 %661 0 1 2 
                                f32_3 %663 = OpFMul %662 %209 
                                f32_4 %664 = OpLoad %65 
                                f32_4 %665 = OpVectorShuffle %664 %663 4 5 6 3 
                                               OpStore %65 %665 
                                f32_4 %666 = OpLoad %65 
                                f32_3 %667 = OpVectorShuffle %666 %666 0 1 2 
                                  f32 %668 = OpDot %667 %220 
                                               OpStore %214 %668 
                                  f32 %669 = OpLoad %214 
                                  f32 %670 = OpFAdd %669 %223 
                                               OpStore %214 %670 
                                  f32 %671 = OpLoad %214 
                                  f32 %672 = OpFDiv %223 %671 
                                               OpStore %214 %672 
                                  f32 %673 = OpLoad %214 
                                f32_3 %674 = OpCompositeConstruct %673 %673 %673 
                                f32_4 %675 = OpLoad %65 
                                f32_3 %676 = OpVectorShuffle %675 %675 0 1 2 
                                f32_3 %677 = OpFMul %674 %676 
                                f32_4 %678 = OpLoad %65 
                                f32_4 %679 = OpVectorShuffle %678 %677 4 5 6 3 
                                               OpStore %65 %679 
                                f32_4 %680 = OpLoad %65 
                                f32_3 %681 = OpVectorShuffle %680 %680 0 1 2 
                                f32_3 %684 = OpFMul %681 %683 
                                f32_4 %685 = OpLoad %9 
                                f32_3 %686 = OpVectorShuffle %685 %685 0 1 2 
                                f32_3 %687 = OpFAdd %684 %686 
                                f32_4 %688 = OpLoad %9 
                                f32_4 %689 = OpVectorShuffle %688 %687 4 5 6 3 
                                               OpStore %9 %689 
                                f32_4 %690 = OpLoad %9 
                                f32_3 %691 = OpVectorShuffle %690 %690 0 1 2 
                       Uniform f32_4* %692 = OpAccessChain %12 %58 
                                f32_4 %693 = OpLoad %692 
                                f32_3 %694 = OpVectorShuffle %693 %693 1 1 1 
                                f32_3 %695 = OpFMul %691 %694 
                                f32_4 %696 = OpLoad %9 
                                f32_4 %697 = OpVectorShuffle %696 %695 4 5 6 3 
                                               OpStore %9 %697 
                         Private f32* %700 = OpAccessChain %9 %699 
                                  f32 %701 = OpLoad %700 
                         Private f32* %703 = OpAccessChain %9 %702 
                                  f32 %704 = OpLoad %703 
                                  f32 %705 = OpExtInst %1 40 %701 %704 
                                               OpStore %214 %705 
                         Private f32* %707 = OpAccessChain %9 %706 
                                  f32 %708 = OpLoad %707 
                                  f32 %710 = OpExtInst %1 40 %708 %709 
                         Private f32* %711 = OpAccessChain %65 %702 
                                               OpStore %711 %710 
                                  f32 %712 = OpLoad %214 
                         Private f32* %713 = OpAccessChain %65 %702 
                                  f32 %714 = OpLoad %713 
                                  f32 %715 = OpExtInst %1 40 %712 %714 
                                               OpStore %214 %715 
                                  f32 %716 = OpLoad %214 
                                  f32 %717 = OpExtInst %1 37 %716 %223 
                                               OpStore %214 %717 
                                  f32 %718 = OpLoad %214 
                                  f32 %720 = OpFMul %718 %719 
                                               OpStore %214 %720 
                                  f32 %721 = OpLoad %214 
                                  f32 %722 = OpExtInst %1 9 %721 
                                               OpStore %214 %722 
                                  f32 %723 = OpLoad %214 
                                  f32 %725 = OpFMul %723 %724 
                                               OpStore %214 %725 
                                f32_4 %728 = OpLoad %9 
                                f32_3 %729 = OpVectorShuffle %728 %728 0 1 2 
                                  f32 %730 = OpLoad %214 
                                f32_3 %731 = OpCompositeConstruct %730 %730 %730 
                                f32_3 %732 = OpFDiv %729 %731 
                                f32_4 %733 = OpLoad %727 
                                f32_4 %734 = OpVectorShuffle %733 %732 4 5 6 3 
                                               OpStore %727 %734 
                                  f32 %735 = OpLoad %214 
                          Output f32* %738 = OpAccessChain %727 %736 
                                               OpStore %738 %735 
                                               OpReturn
                                               OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "AB_HIGH_PRECISION" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "AB_HIGH_PRECISION" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in  vec4 in_POSITION0;
in  vec2 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _MainTex_TexelSize;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
in  vec2 vs_TEXCOORD0;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
vec4 u_xlat6;
vec3 u_xlat7;
float u_xlat24;
void main()
{
    u_xlat0.xy = _MainTex_TexelSize.xy * vec2(2.0, 2.0) + vs_TEXCOORD0.xy;
    u_xlat0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0 = texture(_MainTex, u_xlat0.xy);
    u_xlat1.xy = _MainTex_TexelSize.xy * vec2(0.0, 2.0) + vs_TEXCOORD0.xy;
    u_xlat1.xy = u_xlat1.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1 = texture(_MainTex, u_xlat1.xy);
    u_xlat2 = _MainTex_TexelSize.xyxy * vec4(2.0, 0.0, -2.0, 2.0) + vs_TEXCOORD0.xyxy;
    u_xlat2 = u_xlat2 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
    u_xlat3 = texture(_MainTex, u_xlat2.xy);
    u_xlat2 = texture(_MainTex, u_xlat2.zw);
    u_xlat4.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat4 = texture(_MainTex, u_xlat4.xy);
    u_xlat5.xyz = u_xlat3.xyz + u_xlat4.xyz;
    u_xlat5.xyz = u_xlat1.xyz + u_xlat5.xyz;
    u_xlat0.xyz = u_xlat0.xyz + u_xlat5.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(0.25, 0.25, 0.25);
    u_xlat24 = dot(u_xlat0.xyz, vec3(0.0396819152, 0.45802179, 0.00609653955));
    u_xlat24 = u_xlat24 + 1.0;
    u_xlat24 = float(1.0) / u_xlat24;
    u_xlat0.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    u_xlat5 = _MainTex_TexelSize.xyxy * vec4(2.0, -2.0, -2.0, 0.0) + vs_TEXCOORD0.xyxy;
    u_xlat5 = u_xlat5 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
    u_xlat6 = texture(_MainTex, u_xlat5.zw);
    u_xlat5 = texture(_MainTex, u_xlat5.xy);
    u_xlat7.xyz = u_xlat4.xyz + u_xlat6.xyz;
    u_xlat2.xyz = u_xlat2.xyz + u_xlat7.xyz;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25);
    u_xlat24 = dot(u_xlat1.xyz, vec3(0.0396819152, 0.45802179, 0.00609653955));
    u_xlat24 = u_xlat24 + 1.0;
    u_xlat24 = float(1.0) / u_xlat24;
    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat24) + u_xlat0.xyz;
    u_xlat1 = _MainTex_TexelSize.xyxy * vec4(-2.0, -2.0, 0.0, -2.0) + vs_TEXCOORD0.xyxy;
    u_xlat1 = u_xlat1 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
    u_xlat2 = texture(_MainTex, u_xlat1.zw);
    u_xlat1 = texture(_MainTex, u_xlat1.xy);
    u_xlat1.xyz = u_xlat2.xyz + u_xlat1.xyz;
    u_xlat2.xyz = u_xlat5.xyz + u_xlat2.xyz;
    u_xlat2.xyz = u_xlat4.xyz + u_xlat2.xyz;
    u_xlat2.xyz = u_xlat3.xyz + u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz * vec3(0.25, 0.25, 0.25);
    u_xlat1.xyz = u_xlat6.xyz + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat4.xyz + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25);
    u_xlat24 = dot(u_xlat2.xyz, vec3(0.0396819152, 0.45802179, 0.00609653955));
    u_xlat24 = u_xlat24 + 1.0;
    u_xlat24 = float(1.0) / u_xlat24;
    u_xlat0.xyz = u_xlat2.xyz * vec3(u_xlat24) + u_xlat0.xyz;
    u_xlat24 = dot(u_xlat1.xyz, vec3(0.0396819152, 0.45802179, 0.00609653955));
    u_xlat24 = u_xlat24 + 1.0;
    u_xlat24 = float(1.0) / u_xlat24;
    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat24) + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(0.125, 0.125, 0.125);
    u_xlat1.xy = vs_TEXCOORD0.xy + _MainTex_TexelSize.xy;
    u_xlat1.xy = u_xlat1.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1 = texture(_MainTex, u_xlat1.xy);
    u_xlat2.xy = vs_TEXCOORD0.xy + (-_MainTex_TexelSize.xy);
    u_xlat2.xy = u_xlat2.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat2 = texture(_MainTex, u_xlat2.xy);
    u_xlat3 = _MainTex_TexelSize.xyxy * vec4(1.0, -1.0, -1.0, 1.0) + vs_TEXCOORD0.xyxy;
    u_xlat3 = u_xlat3 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
    u_xlat4 = texture(_MainTex, u_xlat3.xy);
    u_xlat3 = texture(_MainTex, u_xlat3.zw);
    u_xlat2.xyz = u_xlat2.xyz + u_xlat4.xyz;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat3.xyz + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25);
    u_xlat24 = dot(u_xlat1.xyz, vec3(0.0396819152, 0.45802179, 0.00609653955));
    u_xlat24 = u_xlat24 + 1.0;
    u_xlat24 = float(1.0) / u_xlat24;
    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
    SV_Target0.xyz = u_xlat1.xyz * vec3(0.5, 0.5, 0.5) + u_xlat0.xyz;
    SV_Target0.w = 0.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "AB_HIGH_PRECISION" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 94
; Schema: 0
                                              OpCapability Shader 
                                       %1 = OpExtInstImport "GLSL.std.450" 
                                              OpMemoryModel Logical GLSL450 
                                              OpEntryPoint Vertex %4 "main" %11 %72 %84 %86 
                                              OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                              OpDecorate %11 Location 11 
                                              OpDecorate %16 ArrayStride 16 
                                              OpDecorate %17 ArrayStride 17 
                                              OpMemberDecorate %18 0 Offset 18 
                                              OpMemberDecorate %18 1 Offset 18 
                                              OpDecorate %18 Block 
                                              OpDecorate %20 DescriptorSet 20 
                                              OpDecorate %20 Binding 20 
                                              OpMemberDecorate %70 0 BuiltIn 70 
                                              OpMemberDecorate %70 1 BuiltIn 70 
                                              OpMemberDecorate %70 2 BuiltIn 70 
                                              OpDecorate %70 Block 
                                              OpDecorate vs_TEXCOORD0 Location 84 
                                              OpDecorate %86 Location 86 
                                       %2 = OpTypeVoid 
                                       %3 = OpTypeFunction %2 
                                       %6 = OpTypeFloat 32 
                                       %7 = OpTypeVector %6 4 
                                       %8 = OpTypePointer Private %7 
                        Private f32_4* %9 = OpVariable Private 
                                      %10 = OpTypePointer Input %7 
                         Input f32_4* %11 = OpVariable Input 
                                      %14 = OpTypeInt 32 0 
                                  u32 %15 = OpConstant 4 
                                      %16 = OpTypeArray %7 %15 
                                      %17 = OpTypeArray %7 %15 
                                      %18 = OpTypeStruct %16 %17 
                                      %19 = OpTypePointer Uniform %18 
Uniform struct {f32_4[4]; f32_4[4];}* %20 = OpVariable Uniform 
                                      %21 = OpTypeInt 32 1 
                                  i32 %22 = OpConstant 0 
                                  i32 %23 = OpConstant 1 
                                      %24 = OpTypePointer Uniform %7 
                                  i32 %35 = OpConstant 2 
                                  i32 %44 = OpConstant 3 
                       Private f32_4* %48 = OpVariable Private 
                                  u32 %68 = OpConstant 1 
                                      %69 = OpTypeArray %6 %68 
                                      %70 = OpTypeStruct %7 %6 %69 
                                      %71 = OpTypePointer Output %70 
 Output struct {f32_4; f32; f32[1];}* %72 = OpVariable Output 
                                      %80 = OpTypePointer Output %7 
                                      %82 = OpTypeVector %6 2 
                                      %83 = OpTypePointer Output %82 
               Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                      %85 = OpTypePointer Input %82 
                         Input f32_2* %86 = OpVariable Input 
                                      %88 = OpTypePointer Output %6 
                                  void %4 = OpFunction None %3 
                                       %5 = OpLabel 
                                f32_4 %12 = OpLoad %11 
                                f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                       Uniform f32_4* %25 = OpAccessChain %20 %22 %23 
                                f32_4 %26 = OpLoad %25 
                                f32_4 %27 = OpFMul %13 %26 
                                              OpStore %9 %27 
                       Uniform f32_4* %28 = OpAccessChain %20 %22 %22 
                                f32_4 %29 = OpLoad %28 
                                f32_4 %30 = OpLoad %11 
                                f32_4 %31 = OpVectorShuffle %30 %30 0 0 0 0 
                                f32_4 %32 = OpFMul %29 %31 
                                f32_4 %33 = OpLoad %9 
                                f32_4 %34 = OpFAdd %32 %33 
                                              OpStore %9 %34 
                       Uniform f32_4* %36 = OpAccessChain %20 %22 %35 
                                f32_4 %37 = OpLoad %36 
                                f32_4 %38 = OpLoad %11 
                                f32_4 %39 = OpVectorShuffle %38 %38 2 2 2 2 
                                f32_4 %40 = OpFMul %37 %39 
                                f32_4 %41 = OpLoad %9 
                                f32_4 %42 = OpFAdd %40 %41 
                                              OpStore %9 %42 
                                f32_4 %43 = OpLoad %9 
                       Uniform f32_4* %45 = OpAccessChain %20 %22 %44 
                                f32_4 %46 = OpLoad %45 
                                f32_4 %47 = OpFAdd %43 %46 
                                              OpStore %9 %47 
                                f32_4 %49 = OpLoad %9 
                                f32_4 %50 = OpVectorShuffle %49 %49 1 1 1 1 
                       Uniform f32_4* %51 = OpAccessChain %20 %23 %23 
                                f32_4 %52 = OpLoad %51 
                                f32_4 %53 = OpFMul %50 %52 
                                              OpStore %48 %53 
                       Uniform f32_4* %54 = OpAccessChain %20 %23 %22 
                                f32_4 %55 = OpLoad %54 
                                f32_4 %56 = OpLoad %9 
                                f32_4 %57 = OpVectorShuffle %56 %56 0 0 0 0 
                                f32_4 %58 = OpFMul %55 %57 
                                f32_4 %59 = OpLoad %48 
                                f32_4 %60 = OpFAdd %58 %59 
                                              OpStore %48 %60 
                       Uniform f32_4* %61 = OpAccessChain %20 %23 %35 
                                f32_4 %62 = OpLoad %61 
                                f32_4 %63 = OpLoad %9 
                                f32_4 %64 = OpVectorShuffle %63 %63 2 2 2 2 
                                f32_4 %65 = OpFMul %62 %64 
                                f32_4 %66 = OpLoad %48 
                                f32_4 %67 = OpFAdd %65 %66 
                                              OpStore %48 %67 
                       Uniform f32_4* %73 = OpAccessChain %20 %23 %44 
                                f32_4 %74 = OpLoad %73 
                                f32_4 %75 = OpLoad %9 
                                f32_4 %76 = OpVectorShuffle %75 %75 3 3 3 3 
                                f32_4 %77 = OpFMul %74 %76 
                                f32_4 %78 = OpLoad %48 
                                f32_4 %79 = OpFAdd %77 %78 
                        Output f32_4* %81 = OpAccessChain %72 %22 
                                              OpStore %81 %79 
                                f32_2 %87 = OpLoad %86 
                                              OpStore vs_TEXCOORD0 %87 
                          Output f32* %89 = OpAccessChain %72 %22 %68 
                                  f32 %90 = OpLoad %89 
                                  f32 %91 = OpFNegate %90 
                          Output f32* %92 = OpAccessChain %72 %22 %68 
                                              OpStore %92 %91 
                                              OpReturn
                                              OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 518
; Schema: 0
                                             OpCapability Shader 
                                      %1 = OpExtInstImport "GLSL.std.450" 
                                             OpMemoryModel Logical GLSL450 
                                             OpEntryPoint Fragment %4 "main" %25 %503 
                                             OpExecutionMode %4 OriginUpperLeft 
                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                             OpMemberDecorate %11 0 Offset 11 
                                             OpMemberDecorate %11 1 Offset 11 
                                             OpDecorate %11 Block 
                                             OpDecorate %13 DescriptorSet 13 
                                             OpDecorate %13 Binding 13 
                                             OpDecorate vs_TEXCOORD0 Location 25 
                                             OpDecorate %45 DescriptorSet 45 
                                             OpDecorate %45 Binding 45 
                                             OpDecorate %49 DescriptorSet 49 
                                             OpDecorate %49 Binding 49 
                                             OpDecorate %503 Location 503 
                                      %2 = OpTypeVoid 
                                      %3 = OpTypeFunction %2 
                                      %6 = OpTypeFloat 32 
                                      %7 = OpTypeVector %6 3 
                                      %8 = OpTypePointer Private %7 
                       Private f32_3* %9 = OpVariable Private 
                                     %10 = OpTypeVector %6 4 
                                     %11 = OpTypeStruct %10 %10 
                                     %12 = OpTypePointer Uniform %11 
     Uniform struct {f32_4; f32_4;}* %13 = OpVariable Uniform 
                                     %14 = OpTypeInt 32 1 
                                 i32 %15 = OpConstant 1 
                                     %16 = OpTypeVector %6 2 
                                     %17 = OpTypePointer Uniform %10 
                                 f32 %21 = OpConstant 3.674022E-40 
                               f32_2 %22 = OpConstantComposite %21 %21 
                                     %24 = OpTypePointer Input %16 
               Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                 i32 %32 = OpConstant 0 
                                     %43 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                     %44 = OpTypePointer UniformConstant %43 
UniformConstant read_only Texture2D* %45 = OpVariable UniformConstant 
                                     %47 = OpTypeSampler 
                                     %48 = OpTypePointer UniformConstant %47 
            UniformConstant sampler* %49 = OpVariable UniformConstant 
                                     %51 = OpTypeSampledImage %43 
                                     %57 = OpTypePointer Private %10 
                      Private f32_4* %58 = OpVariable Private 
                                 f32 %62 = OpConstant 3.674022E-40 
                               f32_2 %63 = OpConstantComposite %62 %21 
                      Private f32_4* %90 = OpVariable Private 
                                 f32 %94 = OpConstant 3.674022E-40 
                               f32_4 %95 = OpConstantComposite %21 %62 %94 %21 
                     Private f32_4* %109 = OpVariable Private 
                     Private f32_3* %128 = OpVariable Private 
                     Private f32_4* %147 = OpVariable Private 
                                f32 %166 = OpConstant 3.674022E-40 
                              f32_3 %167 = OpConstantComposite %166 %166 %166 
                                    %169 = OpTypePointer Private %6 
                       Private f32* %170 = OpVariable Private 
                                f32 %172 = OpConstant 3.674022E-40 
                                f32 %173 = OpConstant 3.674022E-40 
                                f32 %174 = OpConstant 3.674022E-40 
                              f32_3 %175 = OpConstantComposite %172 %173 %174 
                                f32 %178 = OpConstant 3.674022E-40 
                              f32_4 %189 = OpConstantComposite %21 %94 %94 %62 
                     Private f32_3* %203 = OpVariable Private 
                     Private f32_3* %220 = OpVariable Private 
                              f32_4 %259 = OpConstantComposite %94 %94 %62 %94 
                                f32 %369 = OpConstant 3.674022E-40 
                              f32_3 %370 = OpConstantComposite %369 %369 %369 
                                f32 %432 = OpConstant 3.674022E-40 
                              f32_4 %433 = OpConstantComposite %178 %432 %432 %178 
                                    %502 = OpTypePointer Output %10 
                      Output f32_4* %503 = OpVariable Output 
                                f32 %506 = OpConstant 3.674022E-40 
                              f32_3 %507 = OpConstantComposite %506 %506 %506 
                                    %513 = OpTypeInt 32 0 
                                u32 %514 = OpConstant 3 
                                    %515 = OpTypePointer Output %6 
                                 void %4 = OpFunction None %3 
                                      %5 = OpLabel 
                      Uniform f32_4* %18 = OpAccessChain %13 %15 
                               f32_4 %19 = OpLoad %18 
                               f32_2 %20 = OpVectorShuffle %19 %19 0 1 
                               f32_2 %23 = OpFMul %20 %22 
                               f32_2 %26 = OpLoad vs_TEXCOORD0 
                               f32_2 %27 = OpFAdd %23 %26 
                               f32_3 %28 = OpLoad %9 
                               f32_3 %29 = OpVectorShuffle %28 %27 3 4 2 
                                             OpStore %9 %29 
                               f32_3 %30 = OpLoad %9 
                               f32_2 %31 = OpVectorShuffle %30 %30 0 1 
                      Uniform f32_4* %33 = OpAccessChain %13 %32 
                               f32_4 %34 = OpLoad %33 
                               f32_2 %35 = OpVectorShuffle %34 %34 0 1 
                               f32_2 %36 = OpFMul %31 %35 
                      Uniform f32_4* %37 = OpAccessChain %13 %32 
                               f32_4 %38 = OpLoad %37 
                               f32_2 %39 = OpVectorShuffle %38 %38 2 3 
                               f32_2 %40 = OpFAdd %36 %39 
                               f32_3 %41 = OpLoad %9 
                               f32_3 %42 = OpVectorShuffle %41 %40 3 4 2 
                                             OpStore %9 %42 
                 read_only Texture2D %46 = OpLoad %45 
                             sampler %50 = OpLoad %49 
          read_only Texture2DSampled %52 = OpSampledImage %46 %50 
                               f32_3 %53 = OpLoad %9 
                               f32_2 %54 = OpVectorShuffle %53 %53 0 1 
                               f32_4 %55 = OpImageSampleImplicitLod %52 %54 
                               f32_3 %56 = OpVectorShuffle %55 %55 0 1 2 
                                             OpStore %9 %56 
                      Uniform f32_4* %59 = OpAccessChain %13 %15 
                               f32_4 %60 = OpLoad %59 
                               f32_2 %61 = OpVectorShuffle %60 %60 0 1 
                               f32_2 %64 = OpFMul %61 %63 
                               f32_2 %65 = OpLoad vs_TEXCOORD0 
                               f32_2 %66 = OpFAdd %64 %65 
                               f32_4 %67 = OpLoad %58 
                               f32_4 %68 = OpVectorShuffle %67 %66 4 5 2 3 
                                             OpStore %58 %68 
                               f32_4 %69 = OpLoad %58 
                               f32_2 %70 = OpVectorShuffle %69 %69 0 1 
                      Uniform f32_4* %71 = OpAccessChain %13 %32 
                               f32_4 %72 = OpLoad %71 
                               f32_2 %73 = OpVectorShuffle %72 %72 0 1 
                               f32_2 %74 = OpFMul %70 %73 
                      Uniform f32_4* %75 = OpAccessChain %13 %32 
                               f32_4 %76 = OpLoad %75 
                               f32_2 %77 = OpVectorShuffle %76 %76 2 3 
                               f32_2 %78 = OpFAdd %74 %77 
                               f32_4 %79 = OpLoad %58 
                               f32_4 %80 = OpVectorShuffle %79 %78 4 5 2 3 
                                             OpStore %58 %80 
                 read_only Texture2D %81 = OpLoad %45 
                             sampler %82 = OpLoad %49 
          read_only Texture2DSampled %83 = OpSampledImage %81 %82 
                               f32_4 %84 = OpLoad %58 
                               f32_2 %85 = OpVectorShuffle %84 %84 0 1 
                               f32_4 %86 = OpImageSampleImplicitLod %83 %85 
                               f32_3 %87 = OpVectorShuffle %86 %86 0 1 2 
                               f32_4 %88 = OpLoad %58 
                               f32_4 %89 = OpVectorShuffle %88 %87 4 5 6 3 
                                             OpStore %58 %89 
                      Uniform f32_4* %91 = OpAccessChain %13 %15 
                               f32_4 %92 = OpLoad %91 
                               f32_4 %93 = OpVectorShuffle %92 %92 0 1 0 1 
                               f32_4 %96 = OpFMul %93 %95 
                               f32_2 %97 = OpLoad vs_TEXCOORD0 
                               f32_4 %98 = OpVectorShuffle %97 %97 0 1 0 1 
                               f32_4 %99 = OpFAdd %96 %98 
                                             OpStore %90 %99 
                              f32_4 %100 = OpLoad %90 
                     Uniform f32_4* %101 = OpAccessChain %13 %32 
                              f32_4 %102 = OpLoad %101 
                              f32_4 %103 = OpVectorShuffle %102 %102 0 1 0 1 
                              f32_4 %104 = OpFMul %100 %103 
                     Uniform f32_4* %105 = OpAccessChain %13 %32 
                              f32_4 %106 = OpLoad %105 
                              f32_4 %107 = OpVectorShuffle %106 %106 2 3 2 3 
                              f32_4 %108 = OpFAdd %104 %107 
                                             OpStore %90 %108 
                read_only Texture2D %110 = OpLoad %45 
                            sampler %111 = OpLoad %49 
         read_only Texture2DSampled %112 = OpSampledImage %110 %111 
                              f32_4 %113 = OpLoad %90 
                              f32_2 %114 = OpVectorShuffle %113 %113 0 1 
                              f32_4 %115 = OpImageSampleImplicitLod %112 %114 
                              f32_3 %116 = OpVectorShuffle %115 %115 0 1 2 
                              f32_4 %117 = OpLoad %109 
                              f32_4 %118 = OpVectorShuffle %117 %116 4 5 6 3 
                                             OpStore %109 %118 
                read_only Texture2D %119 = OpLoad %45 
                            sampler %120 = OpLoad %49 
         read_only Texture2DSampled %121 = OpSampledImage %119 %120 
                              f32_4 %122 = OpLoad %90 
                              f32_2 %123 = OpVectorShuffle %122 %122 2 3 
                              f32_4 %124 = OpImageSampleImplicitLod %121 %123 
                              f32_3 %125 = OpVectorShuffle %124 %124 0 1 2 
                              f32_4 %126 = OpLoad %90 
                              f32_4 %127 = OpVectorShuffle %126 %125 4 5 6 3 
                                             OpStore %90 %127 
                              f32_2 %129 = OpLoad vs_TEXCOORD0 
                     Uniform f32_4* %130 = OpAccessChain %13 %32 
                              f32_4 %131 = OpLoad %130 
                              f32_2 %132 = OpVectorShuffle %131 %131 0 1 
                              f32_2 %133 = OpFMul %129 %132 
                     Uniform f32_4* %134 = OpAccessChain %13 %32 
                              f32_4 %135 = OpLoad %134 
                              f32_2 %136 = OpVectorShuffle %135 %135 2 3 
                              f32_2 %137 = OpFAdd %133 %136 
                              f32_3 %138 = OpLoad %128 
                              f32_3 %139 = OpVectorShuffle %138 %137 3 4 2 
                                             OpStore %128 %139 
                read_only Texture2D %140 = OpLoad %45 
                            sampler %141 = OpLoad %49 
         read_only Texture2DSampled %142 = OpSampledImage %140 %141 
                              f32_3 %143 = OpLoad %128 
                              f32_2 %144 = OpVectorShuffle %143 %143 0 1 
                              f32_4 %145 = OpImageSampleImplicitLod %142 %144 
                              f32_3 %146 = OpVectorShuffle %145 %145 0 1 2 
                                             OpStore %128 %146 
                              f32_4 %148 = OpLoad %109 
                              f32_3 %149 = OpVectorShuffle %148 %148 0 1 2 
                              f32_3 %150 = OpLoad %128 
                              f32_3 %151 = OpFAdd %149 %150 
                              f32_4 %152 = OpLoad %147 
                              f32_4 %153 = OpVectorShuffle %152 %151 4 5 6 3 
                                             OpStore %147 %153 
                              f32_4 %154 = OpLoad %58 
                              f32_3 %155 = OpVectorShuffle %154 %154 0 1 2 
                              f32_4 %156 = OpLoad %147 
                              f32_3 %157 = OpVectorShuffle %156 %156 0 1 2 
                              f32_3 %158 = OpFAdd %155 %157 
                              f32_4 %159 = OpLoad %147 
                              f32_4 %160 = OpVectorShuffle %159 %158 4 5 6 3 
                                             OpStore %147 %160 
                              f32_3 %161 = OpLoad %9 
                              f32_4 %162 = OpLoad %147 
                              f32_3 %163 = OpVectorShuffle %162 %162 0 1 2 
                              f32_3 %164 = OpFAdd %161 %163 
                                             OpStore %9 %164 
                              f32_3 %165 = OpLoad %9 
                              f32_3 %168 = OpFMul %165 %167 
                                             OpStore %9 %168 
                              f32_3 %171 = OpLoad %9 
                                f32 %176 = OpDot %171 %175 
                                             OpStore %170 %176 
                                f32 %177 = OpLoad %170 
                                f32 %179 = OpFAdd %177 %178 
                                             OpStore %170 %179 
                                f32 %180 = OpLoad %170 
                                f32 %181 = OpFDiv %178 %180 
                                             OpStore %170 %181 
                                f32 %182 = OpLoad %170 
                              f32_3 %183 = OpCompositeConstruct %182 %182 %182 
                              f32_3 %184 = OpLoad %9 
                              f32_3 %185 = OpFMul %183 %184 
                                             OpStore %9 %185 
                     Uniform f32_4* %186 = OpAccessChain %13 %15 
                              f32_4 %187 = OpLoad %186 
                              f32_4 %188 = OpVectorShuffle %187 %187 0 1 0 1 
                              f32_4 %190 = OpFMul %188 %189 
                              f32_2 %191 = OpLoad vs_TEXCOORD0 
                              f32_4 %192 = OpVectorShuffle %191 %191 0 1 0 1 
                              f32_4 %193 = OpFAdd %190 %192 
                                             OpStore %147 %193 
                              f32_4 %194 = OpLoad %147 
                     Uniform f32_4* %195 = OpAccessChain %13 %32 
                              f32_4 %196 = OpLoad %195 
                              f32_4 %197 = OpVectorShuffle %196 %196 0 1 0 1 
                              f32_4 %198 = OpFMul %194 %197 
                     Uniform f32_4* %199 = OpAccessChain %13 %32 
                              f32_4 %200 = OpLoad %199 
                              f32_4 %201 = OpVectorShuffle %200 %200 2 3 2 3 
                              f32_4 %202 = OpFAdd %198 %201 
                                             OpStore %147 %202 
                read_only Texture2D %204 = OpLoad %45 
                            sampler %205 = OpLoad %49 
         read_only Texture2DSampled %206 = OpSampledImage %204 %205 
                              f32_4 %207 = OpLoad %147 
                              f32_2 %208 = OpVectorShuffle %207 %207 2 3 
                              f32_4 %209 = OpImageSampleImplicitLod %206 %208 
                              f32_3 %210 = OpVectorShuffle %209 %209 0 1 2 
                                             OpStore %203 %210 
                read_only Texture2D %211 = OpLoad %45 
                            sampler %212 = OpLoad %49 
         read_only Texture2DSampled %213 = OpSampledImage %211 %212 
                              f32_4 %214 = OpLoad %147 
                              f32_2 %215 = OpVectorShuffle %214 %214 0 1 
                              f32_4 %216 = OpImageSampleImplicitLod %213 %215 
                              f32_3 %217 = OpVectorShuffle %216 %216 0 1 2 
                              f32_4 %218 = OpLoad %147 
                              f32_4 %219 = OpVectorShuffle %218 %217 4 5 6 3 
                                             OpStore %147 %219 
                              f32_3 %221 = OpLoad %128 
                              f32_3 %222 = OpLoad %203 
                              f32_3 %223 = OpFAdd %221 %222 
                                             OpStore %220 %223 
                              f32_4 %224 = OpLoad %90 
                              f32_3 %225 = OpVectorShuffle %224 %224 0 1 2 
                              f32_3 %226 = OpLoad %220 
                              f32_3 %227 = OpFAdd %225 %226 
                              f32_4 %228 = OpLoad %90 
                              f32_4 %229 = OpVectorShuffle %228 %227 4 5 6 3 
                                             OpStore %90 %229 
                              f32_4 %230 = OpLoad %58 
                              f32_3 %231 = OpVectorShuffle %230 %230 0 1 2 
                              f32_4 %232 = OpLoad %90 
                              f32_3 %233 = OpVectorShuffle %232 %232 0 1 2 
                              f32_3 %234 = OpFAdd %231 %233 
                              f32_4 %235 = OpLoad %58 
                              f32_4 %236 = OpVectorShuffle %235 %234 4 5 6 3 
                                             OpStore %58 %236 
                              f32_4 %237 = OpLoad %58 
                              f32_3 %238 = OpVectorShuffle %237 %237 0 1 2 
                              f32_3 %239 = OpFMul %238 %167 
                              f32_4 %240 = OpLoad %58 
                              f32_4 %241 = OpVectorShuffle %240 %239 4 5 6 3 
                                             OpStore %58 %241 
                              f32_4 %242 = OpLoad %58 
                              f32_3 %243 = OpVectorShuffle %242 %242 0 1 2 
                                f32 %244 = OpDot %243 %175 
                                             OpStore %170 %244 
                                f32 %245 = OpLoad %170 
                                f32 %246 = OpFAdd %245 %178 
                                             OpStore %170 %246 
                                f32 %247 = OpLoad %170 
                                f32 %248 = OpFDiv %178 %247 
                                             OpStore %170 %248 
                              f32_4 %249 = OpLoad %58 
                              f32_3 %250 = OpVectorShuffle %249 %249 0 1 2 
                                f32 %251 = OpLoad %170 
                              f32_3 %252 = OpCompositeConstruct %251 %251 %251 
                              f32_3 %253 = OpFMul %250 %252 
                              f32_3 %254 = OpLoad %9 
                              f32_3 %255 = OpFAdd %253 %254 
                                             OpStore %9 %255 
                     Uniform f32_4* %256 = OpAccessChain %13 %15 
                              f32_4 %257 = OpLoad %256 
                              f32_4 %258 = OpVectorShuffle %257 %257 0 1 0 1 
                              f32_4 %260 = OpFMul %258 %259 
                              f32_2 %261 = OpLoad vs_TEXCOORD0 
                              f32_4 %262 = OpVectorShuffle %261 %261 0 1 0 1 
                              f32_4 %263 = OpFAdd %260 %262 
                                             OpStore %58 %263 
                              f32_4 %264 = OpLoad %58 
                     Uniform f32_4* %265 = OpAccessChain %13 %32 
                              f32_4 %266 = OpLoad %265 
                              f32_4 %267 = OpVectorShuffle %266 %266 0 1 0 1 
                              f32_4 %268 = OpFMul %264 %267 
                     Uniform f32_4* %269 = OpAccessChain %13 %32 
                              f32_4 %270 = OpLoad %269 
                              f32_4 %271 = OpVectorShuffle %270 %270 2 3 2 3 
                              f32_4 %272 = OpFAdd %268 %271 
                                             OpStore %58 %272 
                read_only Texture2D %273 = OpLoad %45 
                            sampler %274 = OpLoad %49 
         read_only Texture2DSampled %275 = OpSampledImage %273 %274 
                              f32_4 %276 = OpLoad %58 
                              f32_2 %277 = OpVectorShuffle %276 %276 2 3 
                              f32_4 %278 = OpImageSampleImplicitLod %275 %277 
                              f32_3 %279 = OpVectorShuffle %278 %278 0 1 2 
                              f32_4 %280 = OpLoad %90 
                              f32_4 %281 = OpVectorShuffle %280 %279 4 5 6 3 
                                             OpStore %90 %281 
                read_only Texture2D %282 = OpLoad %45 
                            sampler %283 = OpLoad %49 
         read_only Texture2DSampled %284 = OpSampledImage %282 %283 
                              f32_4 %285 = OpLoad %58 
                              f32_2 %286 = OpVectorShuffle %285 %285 0 1 
                              f32_4 %287 = OpImageSampleImplicitLod %284 %286 
                              f32_3 %288 = OpVectorShuffle %287 %287 0 1 2 
                              f32_4 %289 = OpLoad %58 
                              f32_4 %290 = OpVectorShuffle %289 %288 4 5 6 3 
                                             OpStore %58 %290 
                              f32_4 %291 = OpLoad %90 
                              f32_3 %292 = OpVectorShuffle %291 %291 0 1 2 
                              f32_4 %293 = OpLoad %58 
                              f32_3 %294 = OpVectorShuffle %293 %293 0 1 2 
                              f32_3 %295 = OpFAdd %292 %294 
                              f32_4 %296 = OpLoad %58 
                              f32_4 %297 = OpVectorShuffle %296 %295 4 5 6 3 
                                             OpStore %58 %297 
                              f32_4 %298 = OpLoad %147 
                              f32_3 %299 = OpVectorShuffle %298 %298 0 1 2 
                              f32_4 %300 = OpLoad %90 
                              f32_3 %301 = OpVectorShuffle %300 %300 0 1 2 
                              f32_3 %302 = OpFAdd %299 %301 
                              f32_4 %303 = OpLoad %90 
                              f32_4 %304 = OpVectorShuffle %303 %302 4 5 6 3 
                                             OpStore %90 %304 
                              f32_3 %305 = OpLoad %128 
                              f32_4 %306 = OpLoad %90 
                              f32_3 %307 = OpVectorShuffle %306 %306 0 1 2 
                              f32_3 %308 = OpFAdd %305 %307 
                              f32_4 %309 = OpLoad %90 
                              f32_4 %310 = OpVectorShuffle %309 %308 4 5 6 3 
                                             OpStore %90 %310 
                              f32_4 %311 = OpLoad %109 
                              f32_3 %312 = OpVectorShuffle %311 %311 0 1 2 
                              f32_4 %313 = OpLoad %90 
                              f32_3 %314 = OpVectorShuffle %313 %313 0 1 2 
                              f32_3 %315 = OpFAdd %312 %314 
                              f32_4 %316 = OpLoad %90 
                              f32_4 %317 = OpVectorShuffle %316 %315 4 5 6 3 
                                             OpStore %90 %317 
                              f32_4 %318 = OpLoad %90 
                              f32_3 %319 = OpVectorShuffle %318 %318 0 1 2 
                              f32_3 %320 = OpFMul %319 %167 
                              f32_4 %321 = OpLoad %90 
                              f32_4 %322 = OpVectorShuffle %321 %320 4 5 6 3 
                                             OpStore %90 %322 
                              f32_3 %323 = OpLoad %203 
                              f32_4 %324 = OpLoad %58 
                              f32_3 %325 = OpVectorShuffle %324 %324 0 1 2 
                              f32_3 %326 = OpFAdd %323 %325 
                              f32_4 %327 = OpLoad %58 
                              f32_4 %328 = OpVectorShuffle %327 %326 4 5 6 3 
                                             OpStore %58 %328 
                              f32_3 %329 = OpLoad %128 
                              f32_4 %330 = OpLoad %58 
                              f32_3 %331 = OpVectorShuffle %330 %330 0 1 2 
                              f32_3 %332 = OpFAdd %329 %331 
                              f32_4 %333 = OpLoad %58 
                              f32_4 %334 = OpVectorShuffle %333 %332 4 5 6 3 
                                             OpStore %58 %334 
                              f32_4 %335 = OpLoad %58 
                              f32_3 %336 = OpVectorShuffle %335 %335 0 1 2 
                              f32_3 %337 = OpFMul %336 %167 
                              f32_4 %338 = OpLoad %58 
                              f32_4 %339 = OpVectorShuffle %338 %337 4 5 6 3 
                                             OpStore %58 %339 
                              f32_4 %340 = OpLoad %90 
                              f32_3 %341 = OpVectorShuffle %340 %340 0 1 2 
                                f32 %342 = OpDot %341 %175 
                                             OpStore %170 %342 
                                f32 %343 = OpLoad %170 
                                f32 %344 = OpFAdd %343 %178 
                                             OpStore %170 %344 
                                f32 %345 = OpLoad %170 
                                f32 %346 = OpFDiv %178 %345 
                                             OpStore %170 %346 
                              f32_4 %347 = OpLoad %90 
                              f32_3 %348 = OpVectorShuffle %347 %347 0 1 2 
                                f32 %349 = OpLoad %170 
                              f32_3 %350 = OpCompositeConstruct %349 %349 %349 
                              f32_3 %351 = OpFMul %348 %350 
                              f32_3 %352 = OpLoad %9 
                              f32_3 %353 = OpFAdd %351 %352 
                                             OpStore %9 %353 
                              f32_4 %354 = OpLoad %58 
                              f32_3 %355 = OpVectorShuffle %354 %354 0 1 2 
                                f32 %356 = OpDot %355 %175 
                                             OpStore %170 %356 
                                f32 %357 = OpLoad %170 
                                f32 %358 = OpFAdd %357 %178 
                                             OpStore %170 %358 
                                f32 %359 = OpLoad %170 
                                f32 %360 = OpFDiv %178 %359 
                                             OpStore %170 %360 
                              f32_4 %361 = OpLoad %58 
                              f32_3 %362 = OpVectorShuffle %361 %361 0 1 2 
                                f32 %363 = OpLoad %170 
                              f32_3 %364 = OpCompositeConstruct %363 %363 %363 
                              f32_3 %365 = OpFMul %362 %364 
                              f32_3 %366 = OpLoad %9 
                              f32_3 %367 = OpFAdd %365 %366 
                                             OpStore %9 %367 
                              f32_3 %368 = OpLoad %9 
                              f32_3 %371 = OpFMul %368 %370 
                                             OpStore %9 %371 
                              f32_2 %372 = OpLoad vs_TEXCOORD0 
                     Uniform f32_4* %373 = OpAccessChain %13 %15 
                              f32_4 %374 = OpLoad %373 
                              f32_2 %375 = OpVectorShuffle %374 %374 0 1 
                              f32_2 %376 = OpFAdd %372 %375 
                              f32_4 %377 = OpLoad %58 
                              f32_4 %378 = OpVectorShuffle %377 %376 4 5 2 3 
                                             OpStore %58 %378 
                              f32_4 %379 = OpLoad %58 
                              f32_2 %380 = OpVectorShuffle %379 %379 0 1 
                     Uniform f32_4* %381 = OpAccessChain %13 %32 
                              f32_4 %382 = OpLoad %381 
                              f32_2 %383 = OpVectorShuffle %382 %382 0 1 
                              f32_2 %384 = OpFMul %380 %383 
                     Uniform f32_4* %385 = OpAccessChain %13 %32 
                              f32_4 %386 = OpLoad %385 
                              f32_2 %387 = OpVectorShuffle %386 %386 2 3 
                              f32_2 %388 = OpFAdd %384 %387 
                              f32_4 %389 = OpLoad %58 
                              f32_4 %390 = OpVectorShuffle %389 %388 4 5 2 3 
                                             OpStore %58 %390 
                read_only Texture2D %391 = OpLoad %45 
                            sampler %392 = OpLoad %49 
         read_only Texture2DSampled %393 = OpSampledImage %391 %392 
                              f32_4 %394 = OpLoad %58 
                              f32_2 %395 = OpVectorShuffle %394 %394 0 1 
                              f32_4 %396 = OpImageSampleImplicitLod %393 %395 
                              f32_3 %397 = OpVectorShuffle %396 %396 0 1 2 
                              f32_4 %398 = OpLoad %58 
                              f32_4 %399 = OpVectorShuffle %398 %397 4 5 6 3 
                                             OpStore %58 %399 
                              f32_2 %400 = OpLoad vs_TEXCOORD0 
                     Uniform f32_4* %401 = OpAccessChain %13 %15 
                              f32_4 %402 = OpLoad %401 
                              f32_2 %403 = OpVectorShuffle %402 %402 0 1 
                              f32_2 %404 = OpFNegate %403 
                              f32_2 %405 = OpFAdd %400 %404 
                              f32_4 %406 = OpLoad %90 
                              f32_4 %407 = OpVectorShuffle %406 %405 4 5 2 3 
                                             OpStore %90 %407 
                              f32_4 %408 = OpLoad %90 
                              f32_2 %409 = OpVectorShuffle %408 %408 0 1 
                     Uniform f32_4* %410 = OpAccessChain %13 %32 
                              f32_4 %411 = OpLoad %410 
                              f32_2 %412 = OpVectorShuffle %411 %411 0 1 
                              f32_2 %413 = OpFMul %409 %412 
                     Uniform f32_4* %414 = OpAccessChain %13 %32 
                              f32_4 %415 = OpLoad %414 
                              f32_2 %416 = OpVectorShuffle %415 %415 2 3 
                              f32_2 %417 = OpFAdd %413 %416 
                              f32_4 %418 = OpLoad %90 
                              f32_4 %419 = OpVectorShuffle %418 %417 4 5 2 3 
                                             OpStore %90 %419 
                read_only Texture2D %420 = OpLoad %45 
                            sampler %421 = OpLoad %49 
         read_only Texture2DSampled %422 = OpSampledImage %420 %421 
                              f32_4 %423 = OpLoad %90 
                              f32_2 %424 = OpVectorShuffle %423 %423 0 1 
                              f32_4 %425 = OpImageSampleImplicitLod %422 %424 
                              f32_3 %426 = OpVectorShuffle %425 %425 0 1 2 
                              f32_4 %427 = OpLoad %90 
                              f32_4 %428 = OpVectorShuffle %427 %426 4 5 6 3 
                                             OpStore %90 %428 
                     Uniform f32_4* %429 = OpAccessChain %13 %15 
                              f32_4 %430 = OpLoad %429 
                              f32_4 %431 = OpVectorShuffle %430 %430 0 1 0 1 
                              f32_4 %434 = OpFMul %431 %433 
                              f32_2 %435 = OpLoad vs_TEXCOORD0 
                              f32_4 %436 = OpVectorShuffle %435 %435 0 1 0 1 
                              f32_4 %437 = OpFAdd %434 %436 
                                             OpStore %109 %437 
                              f32_4 %438 = OpLoad %109 
                     Uniform f32_4* %439 = OpAccessChain %13 %32 
                              f32_4 %440 = OpLoad %439 
                              f32_4 %441 = OpVectorShuffle %440 %440 0 1 0 1 
                              f32_4 %442 = OpFMul %438 %441 
                     Uniform f32_4* %443 = OpAccessChain %13 %32 
                              f32_4 %444 = OpLoad %443 
                              f32_4 %445 = OpVectorShuffle %444 %444 2 3 2 3 
                              f32_4 %446 = OpFAdd %442 %445 
                                             OpStore %109 %446 
                read_only Texture2D %447 = OpLoad %45 
                            sampler %448 = OpLoad %49 
         read_only Texture2DSampled %449 = OpSampledImage %447 %448 
                              f32_4 %450 = OpLoad %109 
                              f32_2 %451 = OpVectorShuffle %450 %450 0 1 
                              f32_4 %452 = OpImageSampleImplicitLod %449 %451 
                              f32_3 %453 = OpVectorShuffle %452 %452 0 1 2 
                                             OpStore %128 %453 
                read_only Texture2D %454 = OpLoad %45 
                            sampler %455 = OpLoad %49 
         read_only Texture2DSampled %456 = OpSampledImage %454 %455 
                              f32_4 %457 = OpLoad %109 
                              f32_2 %458 = OpVectorShuffle %457 %457 2 3 
                              f32_4 %459 = OpImageSampleImplicitLod %456 %458 
                              f32_3 %460 = OpVectorShuffle %459 %459 0 1 2 
                              f32_4 %461 = OpLoad %109 
                              f32_4 %462 = OpVectorShuffle %461 %460 4 5 6 3 
                                             OpStore %109 %462 
                              f32_4 %463 = OpLoad %90 
                              f32_3 %464 = OpVectorShuffle %463 %463 0 1 2 
                              f32_3 %465 = OpLoad %128 
                              f32_3 %466 = OpFAdd %464 %465 
                              f32_4 %467 = OpLoad %90 
                              f32_4 %468 = OpVectorShuffle %467 %466 4 5 6 3 
                                             OpStore %90 %468 
                              f32_4 %469 = OpLoad %58 
                              f32_3 %470 = OpVectorShuffle %469 %469 0 1 2 
                              f32_4 %471 = OpLoad %90 
                              f32_3 %472 = OpVectorShuffle %471 %471 0 1 2 
                              f32_3 %473 = OpFAdd %470 %472 
                              f32_4 %474 = OpLoad %58 
                              f32_4 %475 = OpVectorShuffle %474 %473 4 5 6 3 
                                             OpStore %58 %475 
                              f32_4 %476 = OpLoad %109 
                              f32_3 %477 = OpVectorShuffle %476 %476 0 1 2 
                              f32_4 %478 = OpLoad %58 
                              f32_3 %479 = OpVectorShuffle %478 %478 0 1 2 
                              f32_3 %480 = OpFAdd %477 %479 
                              f32_4 %481 = OpLoad %58 
                              f32_4 %482 = OpVectorShuffle %481 %480 4 5 6 3 
                                             OpStore %58 %482 
                              f32_4 %483 = OpLoad %58 
                              f32_3 %484 = OpVectorShuffle %483 %483 0 1 2 
                              f32_3 %485 = OpFMul %484 %167 
                              f32_4 %486 = OpLoad %58 
                              f32_4 %487 = OpVectorShuffle %486 %485 4 5 6 3 
                                             OpStore %58 %487 
                              f32_4 %488 = OpLoad %58 
                              f32_3 %489 = OpVectorShuffle %488 %488 0 1 2 
                                f32 %490 = OpDot %489 %175 
                                             OpStore %170 %490 
                                f32 %491 = OpLoad %170 
                                f32 %492 = OpFAdd %491 %178 
                                             OpStore %170 %492 
                                f32 %493 = OpLoad %170 
                                f32 %494 = OpFDiv %178 %493 
                                             OpStore %170 %494 
                                f32 %495 = OpLoad %170 
                              f32_3 %496 = OpCompositeConstruct %495 %495 %495 
                              f32_4 %497 = OpLoad %58 
                              f32_3 %498 = OpVectorShuffle %497 %497 0 1 2 
                              f32_3 %499 = OpFMul %496 %498 
                              f32_4 %500 = OpLoad %58 
                              f32_4 %501 = OpVectorShuffle %500 %499 4 5 6 3 
                                             OpStore %58 %501 
                              f32_4 %504 = OpLoad %58 
                              f32_3 %505 = OpVectorShuffle %504 %504 0 1 2 
                              f32_3 %508 = OpFMul %505 %507 
                              f32_3 %509 = OpLoad %9 
                              f32_3 %510 = OpFAdd %508 %509 
                              f32_4 %511 = OpLoad %503 
                              f32_4 %512 = OpVectorShuffle %511 %510 4 5 6 3 
                                             OpStore %503 %512 
                        Output f32* %516 = OpAccessChain %503 %514 
                                             OpStore %516 %62 
                                             OpReturn
                                             OpFunctionEnd
"
}
}
Program "fp" {
SubProgram "d3d11 " {
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
""
}
SubProgram "vulkan " {
""
}
SubProgram "d3d11 " {
Keywords { "AB_HIGH_PRECISION" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "AB_HIGH_PRECISION" }
""
}
SubProgram "vulkan " {
Keywords { "AB_HIGH_PRECISION" }
""
}
}
}
 Pass {
  Name "frag_downsampler_without_karis"
  ZTest Always
  ZWrite Off
  Cull Off
  GpuProgramID 774185
Program "vp" {
SubProgram "d3d11 " {
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in  vec4 in_POSITION0;
in  vec2 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BloomRange;
uniform 	vec4 _MainTex_TexelSize;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
in  vec2 vs_TEXCOORD0;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
vec4 u_xlat6;
vec4 u_xlat7;
float u_xlat24;
void main()
{
    u_xlat0.xy = _MainTex_TexelSize.xy * vec2(2.0, 2.0) + vs_TEXCOORD0.xy;
    u_xlat0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0 = texture(_MainTex, u_xlat0.xy);
    u_xlat0.xyz = u_xlat0.xyz * _BloomRange.xxx;
    u_xlat1.xy = _MainTex_TexelSize.xy * vec2(0.0, 2.0) + vs_TEXCOORD0.xy;
    u_xlat1.xy = u_xlat1.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1 = texture(_MainTex, u_xlat1.xy);
    u_xlat1.xyz = u_xlat1.xyz * _BloomRange.xxx;
    u_xlat2 = _MainTex_TexelSize.xyxy * vec4(2.0, 0.0, -2.0, 2.0) + vs_TEXCOORD0.xyxy;
    u_xlat2 = u_xlat2 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
    u_xlat3 = texture(_MainTex, u_xlat2.xy);
    u_xlat2 = texture(_MainTex, u_xlat2.zw);
    u_xlat3.xyz = u_xlat3.xyz * _BloomRange.xxx;
    u_xlat4.xyz = u_xlat3.www * u_xlat3.xyz;
    u_xlat5.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat5 = texture(_MainTex, u_xlat5.xy);
    u_xlat5.xyz = u_xlat5.xyz * _BloomRange.xxx;
    u_xlat4.xyz = u_xlat5.xyz * u_xlat5.www + u_xlat4.xyz;
    u_xlat4.xyz = u_xlat1.xyz * u_xlat1.www + u_xlat4.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat0.www + u_xlat4.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(0.25, 0.25, 0.25);
    u_xlat2.xyz = u_xlat2.xyz * _BloomRange.xxx;
    u_xlat4.xyz = u_xlat5.www * u_xlat5.xyz;
    u_xlat6 = _MainTex_TexelSize.xyxy * vec4(2.0, -2.0, -2.0, 0.0) + vs_TEXCOORD0.xyxy;
    u_xlat6 = u_xlat6 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
    u_xlat7 = texture(_MainTex, u_xlat6.zw);
    u_xlat6 = texture(_MainTex, u_xlat6.xy);
    u_xlat7.xyz = u_xlat7.xyz * _BloomRange.xxx;
    u_xlat4.xyz = u_xlat7.xyz * u_xlat7.www + u_xlat4.xyz;
    u_xlat2.xyz = u_xlat2.xyz * u_xlat2.www + u_xlat4.xyz;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat1.www + u_xlat2.xyz;
    u_xlat0.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25) + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat6.xyz * _BloomRange.xxx;
    u_xlat2 = _MainTex_TexelSize.xyxy * vec4(-2.0, -2.0, 0.0, -2.0) + vs_TEXCOORD0.xyxy;
    u_xlat2 = u_xlat2 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
    u_xlat4 = texture(_MainTex, u_xlat2.zw);
    u_xlat2 = texture(_MainTex, u_xlat2.xy);
    u_xlat4.xyz = u_xlat4.xyz * _BloomRange.xxx;
    u_xlat4.xyz = u_xlat4.www * u_xlat4.xyz;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat6.www + u_xlat4.xyz;
    u_xlat1.xyz = u_xlat5.xyz * u_xlat5.www + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat3.xyz * u_xlat3.www + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25) + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat2.xyz * _BloomRange.xxx;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.www + u_xlat4.xyz;
    u_xlat1.xyz = u_xlat7.xyz * u_xlat7.www + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat5.xyz * u_xlat5.www + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25) + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(0.125, 0.125, 0.125);
    u_xlat1 = _MainTex_TexelSize.xyxy * vec4(1.0, -1.0, -1.0, 1.0) + vs_TEXCOORD0.xyxy;
    u_xlat1 = u_xlat1 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
    u_xlat2 = texture(_MainTex, u_xlat1.xy);
    u_xlat1 = texture(_MainTex, u_xlat1.zw);
    u_xlat2.xyz = u_xlat2.xyz * _BloomRange.xxx;
    u_xlat2.xyz = u_xlat2.www * u_xlat2.xyz;
    u_xlat3.xy = vs_TEXCOORD0.xy + (-_MainTex_TexelSize.xy);
    u_xlat3.xy = u_xlat3.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat3 = texture(_MainTex, u_xlat3.xy);
    u_xlat3.xyz = u_xlat3.xyz * _BloomRange.xxx;
    u_xlat2.xyz = u_xlat3.xyz * u_xlat3.www + u_xlat2.xyz;
    u_xlat3.xy = vs_TEXCOORD0.xy + _MainTex_TexelSize.xy;
    u_xlat3.xy = u_xlat3.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat3 = texture(_MainTex, u_xlat3.xy);
    u_xlat3.xyz = u_xlat3.xyz * _BloomRange.xxx;
    u_xlat2.xyz = u_xlat3.xyz * u_xlat3.www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _BloomRange.xxx;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat1.www + u_xlat2.xyz;
    u_xlat0.xyz = u_xlat1.xyz * vec3(0.125, 0.125, 0.125) + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * _BloomRange.yyy;
    u_xlat24 = max(u_xlat0.y, u_xlat0.x);
    u_xlat1.x = max(u_xlat0.z, 9.99999997e-07);
    u_xlat24 = max(u_xlat24, u_xlat1.x);
    u_xlat24 = min(u_xlat24, 1.0);
    u_xlat24 = u_xlat24 * 255.0;
    u_xlat24 = ceil(u_xlat24);
    u_xlat24 = u_xlat24 * 0.00392156886;
    SV_Target0.xyz = u_xlat0.xyz / vec3(u_xlat24);
    SV_Target0.w = u_xlat24;
    return;
}

#endif
"
}
SubProgram "vulkan " {
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 94
; Schema: 0
                                              OpCapability Shader 
                                       %1 = OpExtInstImport "GLSL.std.450" 
                                              OpMemoryModel Logical GLSL450 
                                              OpEntryPoint Vertex %4 "main" %11 %72 %84 %86 
                                              OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                              OpDecorate %11 Location 11 
                                              OpDecorate %16 ArrayStride 16 
                                              OpDecorate %17 ArrayStride 17 
                                              OpMemberDecorate %18 0 Offset 18 
                                              OpMemberDecorate %18 1 Offset 18 
                                              OpDecorate %18 Block 
                                              OpDecorate %20 DescriptorSet 20 
                                              OpDecorate %20 Binding 20 
                                              OpMemberDecorate %70 0 BuiltIn 70 
                                              OpMemberDecorate %70 1 BuiltIn 70 
                                              OpMemberDecorate %70 2 BuiltIn 70 
                                              OpDecorate %70 Block 
                                              OpDecorate vs_TEXCOORD0 Location 84 
                                              OpDecorate %86 Location 86 
                                       %2 = OpTypeVoid 
                                       %3 = OpTypeFunction %2 
                                       %6 = OpTypeFloat 32 
                                       %7 = OpTypeVector %6 4 
                                       %8 = OpTypePointer Private %7 
                        Private f32_4* %9 = OpVariable Private 
                                      %10 = OpTypePointer Input %7 
                         Input f32_4* %11 = OpVariable Input 
                                      %14 = OpTypeInt 32 0 
                                  u32 %15 = OpConstant 4 
                                      %16 = OpTypeArray %7 %15 
                                      %17 = OpTypeArray %7 %15 
                                      %18 = OpTypeStruct %16 %17 
                                      %19 = OpTypePointer Uniform %18 
Uniform struct {f32_4[4]; f32_4[4];}* %20 = OpVariable Uniform 
                                      %21 = OpTypeInt 32 1 
                                  i32 %22 = OpConstant 0 
                                  i32 %23 = OpConstant 1 
                                      %24 = OpTypePointer Uniform %7 
                                  i32 %35 = OpConstant 2 
                                  i32 %44 = OpConstant 3 
                       Private f32_4* %48 = OpVariable Private 
                                  u32 %68 = OpConstant 1 
                                      %69 = OpTypeArray %6 %68 
                                      %70 = OpTypeStruct %7 %6 %69 
                                      %71 = OpTypePointer Output %70 
 Output struct {f32_4; f32; f32[1];}* %72 = OpVariable Output 
                                      %80 = OpTypePointer Output %7 
                                      %82 = OpTypeVector %6 2 
                                      %83 = OpTypePointer Output %82 
               Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                      %85 = OpTypePointer Input %82 
                         Input f32_2* %86 = OpVariable Input 
                                      %88 = OpTypePointer Output %6 
                                  void %4 = OpFunction None %3 
                                       %5 = OpLabel 
                                f32_4 %12 = OpLoad %11 
                                f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                       Uniform f32_4* %25 = OpAccessChain %20 %22 %23 
                                f32_4 %26 = OpLoad %25 
                                f32_4 %27 = OpFMul %13 %26 
                                              OpStore %9 %27 
                       Uniform f32_4* %28 = OpAccessChain %20 %22 %22 
                                f32_4 %29 = OpLoad %28 
                                f32_4 %30 = OpLoad %11 
                                f32_4 %31 = OpVectorShuffle %30 %30 0 0 0 0 
                                f32_4 %32 = OpFMul %29 %31 
                                f32_4 %33 = OpLoad %9 
                                f32_4 %34 = OpFAdd %32 %33 
                                              OpStore %9 %34 
                       Uniform f32_4* %36 = OpAccessChain %20 %22 %35 
                                f32_4 %37 = OpLoad %36 
                                f32_4 %38 = OpLoad %11 
                                f32_4 %39 = OpVectorShuffle %38 %38 2 2 2 2 
                                f32_4 %40 = OpFMul %37 %39 
                                f32_4 %41 = OpLoad %9 
                                f32_4 %42 = OpFAdd %40 %41 
                                              OpStore %9 %42 
                                f32_4 %43 = OpLoad %9 
                       Uniform f32_4* %45 = OpAccessChain %20 %22 %44 
                                f32_4 %46 = OpLoad %45 
                                f32_4 %47 = OpFAdd %43 %46 
                                              OpStore %9 %47 
                                f32_4 %49 = OpLoad %9 
                                f32_4 %50 = OpVectorShuffle %49 %49 1 1 1 1 
                       Uniform f32_4* %51 = OpAccessChain %20 %23 %23 
                                f32_4 %52 = OpLoad %51 
                                f32_4 %53 = OpFMul %50 %52 
                                              OpStore %48 %53 
                       Uniform f32_4* %54 = OpAccessChain %20 %23 %22 
                                f32_4 %55 = OpLoad %54 
                                f32_4 %56 = OpLoad %9 
                                f32_4 %57 = OpVectorShuffle %56 %56 0 0 0 0 
                                f32_4 %58 = OpFMul %55 %57 
                                f32_4 %59 = OpLoad %48 
                                f32_4 %60 = OpFAdd %58 %59 
                                              OpStore %48 %60 
                       Uniform f32_4* %61 = OpAccessChain %20 %23 %35 
                                f32_4 %62 = OpLoad %61 
                                f32_4 %63 = OpLoad %9 
                                f32_4 %64 = OpVectorShuffle %63 %63 2 2 2 2 
                                f32_4 %65 = OpFMul %62 %64 
                                f32_4 %66 = OpLoad %48 
                                f32_4 %67 = OpFAdd %65 %66 
                                              OpStore %48 %67 
                       Uniform f32_4* %73 = OpAccessChain %20 %23 %44 
                                f32_4 %74 = OpLoad %73 
                                f32_4 %75 = OpLoad %9 
                                f32_4 %76 = OpVectorShuffle %75 %75 3 3 3 3 
                                f32_4 %77 = OpFMul %74 %76 
                                f32_4 %78 = OpLoad %48 
                                f32_4 %79 = OpFAdd %77 %78 
                        Output f32_4* %81 = OpAccessChain %72 %22 
                                              OpStore %81 %79 
                                f32_2 %87 = OpLoad %86 
                                              OpStore vs_TEXCOORD0 %87 
                          Output f32* %89 = OpAccessChain %72 %22 %68 
                                  f32 %90 = OpLoad %89 
                                  f32 %91 = OpFNegate %90 
                          Output f32* %92 = OpAccessChain %72 %22 %68 
                                              OpStore %92 %91 
                                              OpReturn
                                              OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 659
; Schema: 0
                                               OpCapability Shader 
                                        %1 = OpExtInstImport "GLSL.std.450" 
                                               OpMemoryModel Logical GLSL450 
                                               OpEntryPoint Fragment %4 "main" %24 %646 
                                               OpExecutionMode %4 OriginUpperLeft 
                                               OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                               OpMemberDecorate %10 0 Offset 10 
                                               OpMemberDecorate %10 1 Offset 10 
                                               OpMemberDecorate %10 2 Offset 10 
                                               OpDecorate %10 Block 
                                               OpDecorate %12 DescriptorSet 12 
                                               OpDecorate %12 Binding 12 
                                               OpDecorate vs_TEXCOORD0 Location 24 
                                               OpDecorate %44 DescriptorSet 44 
                                               OpDecorate %44 Binding 44 
                                               OpDecorate %48 DescriptorSet 48 
                                               OpDecorate %48 Binding 48 
                                               OpDecorate %646 Location 646 
                                        %2 = OpTypeVoid 
                                        %3 = OpTypeFunction %2 
                                        %6 = OpTypeFloat 32 
                                        %7 = OpTypeVector %6 4 
                                        %8 = OpTypePointer Private %7 
                         Private f32_4* %9 = OpVariable Private 
                                       %10 = OpTypeStruct %7 %7 %7 
                                       %11 = OpTypePointer Uniform %10 
Uniform struct {f32_4; f32_4; f32_4;}* %12 = OpVariable Uniform 
                                       %13 = OpTypeInt 32 1 
                                   i32 %14 = OpConstant 2 
                                       %15 = OpTypeVector %6 2 
                                       %16 = OpTypePointer Uniform %7 
                                   f32 %20 = OpConstant 3.674022E-40 
                                 f32_2 %21 = OpConstantComposite %20 %20 
                                       %23 = OpTypePointer Input %15 
                 Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                   i32 %31 = OpConstant 0 
                                       %42 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                       %43 = OpTypePointer UniformConstant %42 
  UniformConstant read_only Texture2D* %44 = OpVariable UniformConstant 
                                       %46 = OpTypeSampler 
                                       %47 = OpTypePointer UniformConstant %46 
              UniformConstant sampler* %48 = OpVariable UniformConstant 
                                       %50 = OpTypeSampledImage %42 
                                       %55 = OpTypeVector %6 3 
                                   i32 %58 = OpConstant 1 
                        Private f32_4* %65 = OpVariable Private 
                                   f32 %69 = OpConstant 3.674022E-40 
                                 f32_2 %70 = OpConstantComposite %69 %20 
                       Private f32_4* %102 = OpVariable Private 
                                  f32 %106 = OpConstant 3.674022E-40 
                                f32_4 %107 = OpConstantComposite %20 %69 %106 %20 
                       Private f32_4* %121 = OpVariable Private 
                       Private f32_4* %142 = OpVariable Private 
                       Private f32_4* %150 = OpVariable Private 
                                  f32 %208 = OpConstant 3.674022E-40 
                                f32_3 %209 = OpConstantComposite %208 %208 %208 
                       Private f32_4* %228 = OpVariable Private 
                                f32_4 %232 = OpConstantComposite %20 %106 %106 %69 
                       Private f32_4* %246 = OpVariable Private 
                                f32_4 %316 = OpConstantComposite %106 %106 %69 %106 
                                  f32 %443 = OpConstant 3.674022E-40 
                                f32_3 %444 = OpConstantComposite %443 %443 %443 
                                  f32 %451 = OpConstant 3.674022E-40 
                                  f32 %452 = OpConstant 3.674022E-40 
                                f32_4 %453 = OpConstantComposite %451 %452 %452 %451 
                                      %615 = OpTypePointer Private %6 
                         Private f32* %616 = OpVariable Private 
                                      %617 = OpTypeInt 32 0 
                                  u32 %618 = OpConstant 1 
                                  u32 %621 = OpConstant 0 
                                  u32 %625 = OpConstant 2 
                                  f32 %628 = OpConstant 3.674022E-40 
                                  f32 %638 = OpConstant 3.674022E-40 
                                  f32 %643 = OpConstant 3.674022E-40 
                                      %645 = OpTypePointer Output %7 
                        Output f32_4* %646 = OpVariable Output 
                                  u32 %655 = OpConstant 3 
                                      %656 = OpTypePointer Output %6 
                                   void %4 = OpFunction None %3 
                                        %5 = OpLabel 
                        Uniform f32_4* %17 = OpAccessChain %12 %14 
                                 f32_4 %18 = OpLoad %17 
                                 f32_2 %19 = OpVectorShuffle %18 %18 0 1 
                                 f32_2 %22 = OpFMul %19 %21 
                                 f32_2 %25 = OpLoad vs_TEXCOORD0 
                                 f32_2 %26 = OpFAdd %22 %25 
                                 f32_4 %27 = OpLoad %9 
                                 f32_4 %28 = OpVectorShuffle %27 %26 4 5 2 3 
                                               OpStore %9 %28 
                                 f32_4 %29 = OpLoad %9 
                                 f32_2 %30 = OpVectorShuffle %29 %29 0 1 
                        Uniform f32_4* %32 = OpAccessChain %12 %31 
                                 f32_4 %33 = OpLoad %32 
                                 f32_2 %34 = OpVectorShuffle %33 %33 0 1 
                                 f32_2 %35 = OpFMul %30 %34 
                        Uniform f32_4* %36 = OpAccessChain %12 %31 
                                 f32_4 %37 = OpLoad %36 
                                 f32_2 %38 = OpVectorShuffle %37 %37 2 3 
                                 f32_2 %39 = OpFAdd %35 %38 
                                 f32_4 %40 = OpLoad %9 
                                 f32_4 %41 = OpVectorShuffle %40 %39 4 5 2 3 
                                               OpStore %9 %41 
                   read_only Texture2D %45 = OpLoad %44 
                               sampler %49 = OpLoad %48 
            read_only Texture2DSampled %51 = OpSampledImage %45 %49 
                                 f32_4 %52 = OpLoad %9 
                                 f32_2 %53 = OpVectorShuffle %52 %52 0 1 
                                 f32_4 %54 = OpImageSampleImplicitLod %51 %53 
                                               OpStore %9 %54 
                                 f32_4 %56 = OpLoad %9 
                                 f32_3 %57 = OpVectorShuffle %56 %56 0 1 2 
                        Uniform f32_4* %59 = OpAccessChain %12 %58 
                                 f32_4 %60 = OpLoad %59 
                                 f32_3 %61 = OpVectorShuffle %60 %60 0 0 0 
                                 f32_3 %62 = OpFMul %57 %61 
                                 f32_4 %63 = OpLoad %9 
                                 f32_4 %64 = OpVectorShuffle %63 %62 4 5 6 3 
                                               OpStore %9 %64 
                        Uniform f32_4* %66 = OpAccessChain %12 %14 
                                 f32_4 %67 = OpLoad %66 
                                 f32_2 %68 = OpVectorShuffle %67 %67 0 1 
                                 f32_2 %71 = OpFMul %68 %70 
                                 f32_2 %72 = OpLoad vs_TEXCOORD0 
                                 f32_2 %73 = OpFAdd %71 %72 
                                 f32_4 %74 = OpLoad %65 
                                 f32_4 %75 = OpVectorShuffle %74 %73 4 5 2 3 
                                               OpStore %65 %75 
                                 f32_4 %76 = OpLoad %65 
                                 f32_2 %77 = OpVectorShuffle %76 %76 0 1 
                        Uniform f32_4* %78 = OpAccessChain %12 %31 
                                 f32_4 %79 = OpLoad %78 
                                 f32_2 %80 = OpVectorShuffle %79 %79 0 1 
                                 f32_2 %81 = OpFMul %77 %80 
                        Uniform f32_4* %82 = OpAccessChain %12 %31 
                                 f32_4 %83 = OpLoad %82 
                                 f32_2 %84 = OpVectorShuffle %83 %83 2 3 
                                 f32_2 %85 = OpFAdd %81 %84 
                                 f32_4 %86 = OpLoad %65 
                                 f32_4 %87 = OpVectorShuffle %86 %85 4 5 2 3 
                                               OpStore %65 %87 
                   read_only Texture2D %88 = OpLoad %44 
                               sampler %89 = OpLoad %48 
            read_only Texture2DSampled %90 = OpSampledImage %88 %89 
                                 f32_4 %91 = OpLoad %65 
                                 f32_2 %92 = OpVectorShuffle %91 %91 0 1 
                                 f32_4 %93 = OpImageSampleImplicitLod %90 %92 
                                               OpStore %65 %93 
                                 f32_4 %94 = OpLoad %65 
                                 f32_3 %95 = OpVectorShuffle %94 %94 0 1 2 
                        Uniform f32_4* %96 = OpAccessChain %12 %58 
                                 f32_4 %97 = OpLoad %96 
                                 f32_3 %98 = OpVectorShuffle %97 %97 0 0 0 
                                 f32_3 %99 = OpFMul %95 %98 
                                f32_4 %100 = OpLoad %65 
                                f32_4 %101 = OpVectorShuffle %100 %99 4 5 6 3 
                                               OpStore %65 %101 
                       Uniform f32_4* %103 = OpAccessChain %12 %14 
                                f32_4 %104 = OpLoad %103 
                                f32_4 %105 = OpVectorShuffle %104 %104 0 1 0 1 
                                f32_4 %108 = OpFMul %105 %107 
                                f32_2 %109 = OpLoad vs_TEXCOORD0 
                                f32_4 %110 = OpVectorShuffle %109 %109 0 1 0 1 
                                f32_4 %111 = OpFAdd %108 %110 
                                               OpStore %102 %111 
                                f32_4 %112 = OpLoad %102 
                       Uniform f32_4* %113 = OpAccessChain %12 %31 
                                f32_4 %114 = OpLoad %113 
                                f32_4 %115 = OpVectorShuffle %114 %114 0 1 0 1 
                                f32_4 %116 = OpFMul %112 %115 
                       Uniform f32_4* %117 = OpAccessChain %12 %31 
                                f32_4 %118 = OpLoad %117 
                                f32_4 %119 = OpVectorShuffle %118 %118 2 3 2 3 
                                f32_4 %120 = OpFAdd %116 %119 
                                               OpStore %102 %120 
                  read_only Texture2D %122 = OpLoad %44 
                              sampler %123 = OpLoad %48 
           read_only Texture2DSampled %124 = OpSampledImage %122 %123 
                                f32_4 %125 = OpLoad %102 
                                f32_2 %126 = OpVectorShuffle %125 %125 0 1 
                                f32_4 %127 = OpImageSampleImplicitLod %124 %126 
                                               OpStore %121 %127 
                  read_only Texture2D %128 = OpLoad %44 
                              sampler %129 = OpLoad %48 
           read_only Texture2DSampled %130 = OpSampledImage %128 %129 
                                f32_4 %131 = OpLoad %102 
                                f32_2 %132 = OpVectorShuffle %131 %131 2 3 
                                f32_4 %133 = OpImageSampleImplicitLod %130 %132 
                                               OpStore %102 %133 
                                f32_4 %134 = OpLoad %121 
                                f32_3 %135 = OpVectorShuffle %134 %134 0 1 2 
                       Uniform f32_4* %136 = OpAccessChain %12 %58 
                                f32_4 %137 = OpLoad %136 
                                f32_3 %138 = OpVectorShuffle %137 %137 0 0 0 
                                f32_3 %139 = OpFMul %135 %138 
                                f32_4 %140 = OpLoad %121 
                                f32_4 %141 = OpVectorShuffle %140 %139 4 5 6 3 
                                               OpStore %121 %141 
                                f32_4 %143 = OpLoad %121 
                                f32_3 %144 = OpVectorShuffle %143 %143 3 3 3 
                                f32_4 %145 = OpLoad %121 
                                f32_3 %146 = OpVectorShuffle %145 %145 0 1 2 
                                f32_3 %147 = OpFMul %144 %146 
                                f32_4 %148 = OpLoad %142 
                                f32_4 %149 = OpVectorShuffle %148 %147 4 5 6 3 
                                               OpStore %142 %149 
                                f32_2 %151 = OpLoad vs_TEXCOORD0 
                       Uniform f32_4* %152 = OpAccessChain %12 %31 
                                f32_4 %153 = OpLoad %152 
                                f32_2 %154 = OpVectorShuffle %153 %153 0 1 
                                f32_2 %155 = OpFMul %151 %154 
                       Uniform f32_4* %156 = OpAccessChain %12 %31 
                                f32_4 %157 = OpLoad %156 
                                f32_2 %158 = OpVectorShuffle %157 %157 2 3 
                                f32_2 %159 = OpFAdd %155 %158 
                                f32_4 %160 = OpLoad %150 
                                f32_4 %161 = OpVectorShuffle %160 %159 4 5 2 3 
                                               OpStore %150 %161 
                  read_only Texture2D %162 = OpLoad %44 
                              sampler %163 = OpLoad %48 
           read_only Texture2DSampled %164 = OpSampledImage %162 %163 
                                f32_4 %165 = OpLoad %150 
                                f32_2 %166 = OpVectorShuffle %165 %165 0 1 
                                f32_4 %167 = OpImageSampleImplicitLod %164 %166 
                                               OpStore %150 %167 
                                f32_4 %168 = OpLoad %150 
                                f32_3 %169 = OpVectorShuffle %168 %168 0 1 2 
                       Uniform f32_4* %170 = OpAccessChain %12 %58 
                                f32_4 %171 = OpLoad %170 
                                f32_3 %172 = OpVectorShuffle %171 %171 0 0 0 
                                f32_3 %173 = OpFMul %169 %172 
                                f32_4 %174 = OpLoad %150 
                                f32_4 %175 = OpVectorShuffle %174 %173 4 5 6 3 
                                               OpStore %150 %175 
                                f32_4 %176 = OpLoad %150 
                                f32_3 %177 = OpVectorShuffle %176 %176 0 1 2 
                                f32_4 %178 = OpLoad %150 
                                f32_3 %179 = OpVectorShuffle %178 %178 3 3 3 
                                f32_3 %180 = OpFMul %177 %179 
                                f32_4 %181 = OpLoad %142 
                                f32_3 %182 = OpVectorShuffle %181 %181 0 1 2 
                                f32_3 %183 = OpFAdd %180 %182 
                                f32_4 %184 = OpLoad %142 
                                f32_4 %185 = OpVectorShuffle %184 %183 4 5 6 3 
                                               OpStore %142 %185 
                                f32_4 %186 = OpLoad %65 
                                f32_3 %187 = OpVectorShuffle %186 %186 0 1 2 
                                f32_4 %188 = OpLoad %65 
                                f32_3 %189 = OpVectorShuffle %188 %188 3 3 3 
                                f32_3 %190 = OpFMul %187 %189 
                                f32_4 %191 = OpLoad %142 
                                f32_3 %192 = OpVectorShuffle %191 %191 0 1 2 
                                f32_3 %193 = OpFAdd %190 %192 
                                f32_4 %194 = OpLoad %142 
                                f32_4 %195 = OpVectorShuffle %194 %193 4 5 6 3 
                                               OpStore %142 %195 
                                f32_4 %196 = OpLoad %9 
                                f32_3 %197 = OpVectorShuffle %196 %196 0 1 2 
                                f32_4 %198 = OpLoad %9 
                                f32_3 %199 = OpVectorShuffle %198 %198 3 3 3 
                                f32_3 %200 = OpFMul %197 %199 
                                f32_4 %201 = OpLoad %142 
                                f32_3 %202 = OpVectorShuffle %201 %201 0 1 2 
                                f32_3 %203 = OpFAdd %200 %202 
                                f32_4 %204 = OpLoad %9 
                                f32_4 %205 = OpVectorShuffle %204 %203 4 5 6 3 
                                               OpStore %9 %205 
                                f32_4 %206 = OpLoad %9 
                                f32_3 %207 = OpVectorShuffle %206 %206 0 1 2 
                                f32_3 %210 = OpFMul %207 %209 
                                f32_4 %211 = OpLoad %9 
                                f32_4 %212 = OpVectorShuffle %211 %210 4 5 6 3 
                                               OpStore %9 %212 
                                f32_4 %213 = OpLoad %102 
                                f32_3 %214 = OpVectorShuffle %213 %213 0 1 2 
                       Uniform f32_4* %215 = OpAccessChain %12 %58 
                                f32_4 %216 = OpLoad %215 
                                f32_3 %217 = OpVectorShuffle %216 %216 0 0 0 
                                f32_3 %218 = OpFMul %214 %217 
                                f32_4 %219 = OpLoad %102 
                                f32_4 %220 = OpVectorShuffle %219 %218 4 5 6 3 
                                               OpStore %102 %220 
                                f32_4 %221 = OpLoad %150 
                                f32_3 %222 = OpVectorShuffle %221 %221 3 3 3 
                                f32_4 %223 = OpLoad %150 
                                f32_3 %224 = OpVectorShuffle %223 %223 0 1 2 
                                f32_3 %225 = OpFMul %222 %224 
                                f32_4 %226 = OpLoad %142 
                                f32_4 %227 = OpVectorShuffle %226 %225 4 5 6 3 
                                               OpStore %142 %227 
                       Uniform f32_4* %229 = OpAccessChain %12 %14 
                                f32_4 %230 = OpLoad %229 
                                f32_4 %231 = OpVectorShuffle %230 %230 0 1 0 1 
                                f32_4 %233 = OpFMul %231 %232 
                                f32_2 %234 = OpLoad vs_TEXCOORD0 
                                f32_4 %235 = OpVectorShuffle %234 %234 0 1 0 1 
                                f32_4 %236 = OpFAdd %233 %235 
                                               OpStore %228 %236 
                                f32_4 %237 = OpLoad %228 
                       Uniform f32_4* %238 = OpAccessChain %12 %31 
                                f32_4 %239 = OpLoad %238 
                                f32_4 %240 = OpVectorShuffle %239 %239 0 1 0 1 
                                f32_4 %241 = OpFMul %237 %240 
                       Uniform f32_4* %242 = OpAccessChain %12 %31 
                                f32_4 %243 = OpLoad %242 
                                f32_4 %244 = OpVectorShuffle %243 %243 2 3 2 3 
                                f32_4 %245 = OpFAdd %241 %244 
                                               OpStore %228 %245 
                  read_only Texture2D %247 = OpLoad %44 
                              sampler %248 = OpLoad %48 
           read_only Texture2DSampled %249 = OpSampledImage %247 %248 
                                f32_4 %250 = OpLoad %228 
                                f32_2 %251 = OpVectorShuffle %250 %250 2 3 
                                f32_4 %252 = OpImageSampleImplicitLod %249 %251 
                                               OpStore %246 %252 
                  read_only Texture2D %253 = OpLoad %44 
                              sampler %254 = OpLoad %48 
           read_only Texture2DSampled %255 = OpSampledImage %253 %254 
                                f32_4 %256 = OpLoad %228 
                                f32_2 %257 = OpVectorShuffle %256 %256 0 1 
                                f32_4 %258 = OpImageSampleImplicitLod %255 %257 
                                               OpStore %228 %258 
                                f32_4 %259 = OpLoad %246 
                                f32_3 %260 = OpVectorShuffle %259 %259 0 1 2 
                       Uniform f32_4* %261 = OpAccessChain %12 %58 
                                f32_4 %262 = OpLoad %261 
                                f32_3 %263 = OpVectorShuffle %262 %262 0 0 0 
                                f32_3 %264 = OpFMul %260 %263 
                                f32_4 %265 = OpLoad %246 
                                f32_4 %266 = OpVectorShuffle %265 %264 4 5 6 3 
                                               OpStore %246 %266 
                                f32_4 %267 = OpLoad %246 
                                f32_3 %268 = OpVectorShuffle %267 %267 0 1 2 
                                f32_4 %269 = OpLoad %246 
                                f32_3 %270 = OpVectorShuffle %269 %269 3 3 3 
                                f32_3 %271 = OpFMul %268 %270 
                                f32_4 %272 = OpLoad %142 
                                f32_3 %273 = OpVectorShuffle %272 %272 0 1 2 
                                f32_3 %274 = OpFAdd %271 %273 
                                f32_4 %275 = OpLoad %142 
                                f32_4 %276 = OpVectorShuffle %275 %274 4 5 6 3 
                                               OpStore %142 %276 
                                f32_4 %277 = OpLoad %102 
                                f32_3 %278 = OpVectorShuffle %277 %277 0 1 2 
                                f32_4 %279 = OpLoad %102 
                                f32_3 %280 = OpVectorShuffle %279 %279 3 3 3 
                                f32_3 %281 = OpFMul %278 %280 
                                f32_4 %282 = OpLoad %142 
                                f32_3 %283 = OpVectorShuffle %282 %282 0 1 2 
                                f32_3 %284 = OpFAdd %281 %283 
                                f32_4 %285 = OpLoad %102 
                                f32_4 %286 = OpVectorShuffle %285 %284 4 5 6 3 
                                               OpStore %102 %286 
                                f32_4 %287 = OpLoad %65 
                                f32_3 %288 = OpVectorShuffle %287 %287 0 1 2 
                                f32_4 %289 = OpLoad %65 
                                f32_3 %290 = OpVectorShuffle %289 %289 3 3 3 
                                f32_3 %291 = OpFMul %288 %290 
                                f32_4 %292 = OpLoad %102 
                                f32_3 %293 = OpVectorShuffle %292 %292 0 1 2 
                                f32_3 %294 = OpFAdd %291 %293 
                                f32_4 %295 = OpLoad %65 
                                f32_4 %296 = OpVectorShuffle %295 %294 4 5 6 3 
                                               OpStore %65 %296 
                                f32_4 %297 = OpLoad %65 
                                f32_3 %298 = OpVectorShuffle %297 %297 0 1 2 
                                f32_3 %299 = OpFMul %298 %209 
                                f32_4 %300 = OpLoad %9 
                                f32_3 %301 = OpVectorShuffle %300 %300 0 1 2 
                                f32_3 %302 = OpFAdd %299 %301 
                                f32_4 %303 = OpLoad %9 
                                f32_4 %304 = OpVectorShuffle %303 %302 4 5 6 3 
                                               OpStore %9 %304 
                                f32_4 %305 = OpLoad %228 
                                f32_3 %306 = OpVectorShuffle %305 %305 0 1 2 
                       Uniform f32_4* %307 = OpAccessChain %12 %58 
                                f32_4 %308 = OpLoad %307 
                                f32_3 %309 = OpVectorShuffle %308 %308 0 0 0 
                                f32_3 %310 = OpFMul %306 %309 
                                f32_4 %311 = OpLoad %65 
                                f32_4 %312 = OpVectorShuffle %311 %310 4 5 6 3 
                                               OpStore %65 %312 
                       Uniform f32_4* %313 = OpAccessChain %12 %14 
                                f32_4 %314 = OpLoad %313 
                                f32_4 %315 = OpVectorShuffle %314 %314 0 1 0 1 
                                f32_4 %317 = OpFMul %315 %316 
                                f32_2 %318 = OpLoad vs_TEXCOORD0 
                                f32_4 %319 = OpVectorShuffle %318 %318 0 1 0 1 
                                f32_4 %320 = OpFAdd %317 %319 
                                               OpStore %102 %320 
                                f32_4 %321 = OpLoad %102 
                       Uniform f32_4* %322 = OpAccessChain %12 %31 
                                f32_4 %323 = OpLoad %322 
                                f32_4 %324 = OpVectorShuffle %323 %323 0 1 0 1 
                                f32_4 %325 = OpFMul %321 %324 
                       Uniform f32_4* %326 = OpAccessChain %12 %31 
                                f32_4 %327 = OpLoad %326 
                                f32_4 %328 = OpVectorShuffle %327 %327 2 3 2 3 
                                f32_4 %329 = OpFAdd %325 %328 
                                               OpStore %102 %329 
                  read_only Texture2D %330 = OpLoad %44 
                              sampler %331 = OpLoad %48 
           read_only Texture2DSampled %332 = OpSampledImage %330 %331 
                                f32_4 %333 = OpLoad %102 
                                f32_2 %334 = OpVectorShuffle %333 %333 2 3 
                                f32_4 %335 = OpImageSampleImplicitLod %332 %334 
                                               OpStore %142 %335 
                  read_only Texture2D %336 = OpLoad %44 
                              sampler %337 = OpLoad %48 
           read_only Texture2DSampled %338 = OpSampledImage %336 %337 
                                f32_4 %339 = OpLoad %102 
                                f32_2 %340 = OpVectorShuffle %339 %339 0 1 
                                f32_4 %341 = OpImageSampleImplicitLod %338 %340 
                                               OpStore %102 %341 
                                f32_4 %342 = OpLoad %142 
                                f32_3 %343 = OpVectorShuffle %342 %342 0 1 2 
                       Uniform f32_4* %344 = OpAccessChain %12 %58 
                                f32_4 %345 = OpLoad %344 
                                f32_3 %346 = OpVectorShuffle %345 %345 0 0 0 
                                f32_3 %347 = OpFMul %343 %346 
                                f32_4 %348 = OpLoad %142 
                                f32_4 %349 = OpVectorShuffle %348 %347 4 5 6 3 
                                               OpStore %142 %349 
                                f32_4 %350 = OpLoad %142 
                                f32_3 %351 = OpVectorShuffle %350 %350 3 3 3 
                                f32_4 %352 = OpLoad %142 
                                f32_3 %353 = OpVectorShuffle %352 %352 0 1 2 
                                f32_3 %354 = OpFMul %351 %353 
                                f32_4 %355 = OpLoad %142 
                                f32_4 %356 = OpVectorShuffle %355 %354 4 5 6 3 
                                               OpStore %142 %356 
                                f32_4 %357 = OpLoad %65 
                                f32_3 %358 = OpVectorShuffle %357 %357 0 1 2 
                                f32_4 %359 = OpLoad %228 
                                f32_3 %360 = OpVectorShuffle %359 %359 3 3 3 
                                f32_3 %361 = OpFMul %358 %360 
                                f32_4 %362 = OpLoad %142 
                                f32_3 %363 = OpVectorShuffle %362 %362 0 1 2 
                                f32_3 %364 = OpFAdd %361 %363 
                                f32_4 %365 = OpLoad %65 
                                f32_4 %366 = OpVectorShuffle %365 %364 4 5 6 3 
                                               OpStore %65 %366 
                                f32_4 %367 = OpLoad %150 
                                f32_3 %368 = OpVectorShuffle %367 %367 0 1 2 
                                f32_4 %369 = OpLoad %150 
                                f32_3 %370 = OpVectorShuffle %369 %369 3 3 3 
                                f32_3 %371 = OpFMul %368 %370 
                                f32_4 %372 = OpLoad %65 
                                f32_3 %373 = OpVectorShuffle %372 %372 0 1 2 
                                f32_3 %374 = OpFAdd %371 %373 
                                f32_4 %375 = OpLoad %65 
                                f32_4 %376 = OpVectorShuffle %375 %374 4 5 6 3 
                                               OpStore %65 %376 
                                f32_4 %377 = OpLoad %121 
                                f32_3 %378 = OpVectorShuffle %377 %377 0 1 2 
                                f32_4 %379 = OpLoad %121 
                                f32_3 %380 = OpVectorShuffle %379 %379 3 3 3 
                                f32_3 %381 = OpFMul %378 %380 
                                f32_4 %382 = OpLoad %65 
                                f32_3 %383 = OpVectorShuffle %382 %382 0 1 2 
                                f32_3 %384 = OpFAdd %381 %383 
                                f32_4 %385 = OpLoad %65 
                                f32_4 %386 = OpVectorShuffle %385 %384 4 5 6 3 
                                               OpStore %65 %386 
                                f32_4 %387 = OpLoad %65 
                                f32_3 %388 = OpVectorShuffle %387 %387 0 1 2 
                                f32_3 %389 = OpFMul %388 %209 
                                f32_4 %390 = OpLoad %9 
                                f32_3 %391 = OpVectorShuffle %390 %390 0 1 2 
                                f32_3 %392 = OpFAdd %389 %391 
                                f32_4 %393 = OpLoad %9 
                                f32_4 %394 = OpVectorShuffle %393 %392 4 5 6 3 
                                               OpStore %9 %394 
                                f32_4 %395 = OpLoad %102 
                                f32_3 %396 = OpVectorShuffle %395 %395 0 1 2 
                       Uniform f32_4* %397 = OpAccessChain %12 %58 
                                f32_4 %398 = OpLoad %397 
                                f32_3 %399 = OpVectorShuffle %398 %398 0 0 0 
                                f32_3 %400 = OpFMul %396 %399 
                                f32_4 %401 = OpLoad %65 
                                f32_4 %402 = OpVectorShuffle %401 %400 4 5 6 3 
                                               OpStore %65 %402 
                                f32_4 %403 = OpLoad %65 
                                f32_3 %404 = OpVectorShuffle %403 %403 0 1 2 
                                f32_4 %405 = OpLoad %102 
                                f32_3 %406 = OpVectorShuffle %405 %405 3 3 3 
                                f32_3 %407 = OpFMul %404 %406 
                                f32_4 %408 = OpLoad %142 
                                f32_3 %409 = OpVectorShuffle %408 %408 0 1 2 
                                f32_3 %410 = OpFAdd %407 %409 
                                f32_4 %411 = OpLoad %65 
                                f32_4 %412 = OpVectorShuffle %411 %410 4 5 6 3 
                                               OpStore %65 %412 
                                f32_4 %413 = OpLoad %246 
                                f32_3 %414 = OpVectorShuffle %413 %413 0 1 2 
                                f32_4 %415 = OpLoad %246 
                                f32_3 %416 = OpVectorShuffle %415 %415 3 3 3 
                                f32_3 %417 = OpFMul %414 %416 
                                f32_4 %418 = OpLoad %65 
                                f32_3 %419 = OpVectorShuffle %418 %418 0 1 2 
                                f32_3 %420 = OpFAdd %417 %419 
                                f32_4 %421 = OpLoad %65 
                                f32_4 %422 = OpVectorShuffle %421 %420 4 5 6 3 
                                               OpStore %65 %422 
                                f32_4 %423 = OpLoad %150 
                                f32_3 %424 = OpVectorShuffle %423 %423 0 1 2 
                                f32_4 %425 = OpLoad %150 
                                f32_3 %426 = OpVectorShuffle %425 %425 3 3 3 
                                f32_3 %427 = OpFMul %424 %426 
                                f32_4 %428 = OpLoad %65 
                                f32_3 %429 = OpVectorShuffle %428 %428 0 1 2 
                                f32_3 %430 = OpFAdd %427 %429 
                                f32_4 %431 = OpLoad %65 
                                f32_4 %432 = OpVectorShuffle %431 %430 4 5 6 3 
                                               OpStore %65 %432 
                                f32_4 %433 = OpLoad %65 
                                f32_3 %434 = OpVectorShuffle %433 %433 0 1 2 
                                f32_3 %435 = OpFMul %434 %209 
                                f32_4 %436 = OpLoad %9 
                                f32_3 %437 = OpVectorShuffle %436 %436 0 1 2 
                                f32_3 %438 = OpFAdd %435 %437 
                                f32_4 %439 = OpLoad %9 
                                f32_4 %440 = OpVectorShuffle %439 %438 4 5 6 3 
                                               OpStore %9 %440 
                                f32_4 %441 = OpLoad %9 
                                f32_3 %442 = OpVectorShuffle %441 %441 0 1 2 
                                f32_3 %445 = OpFMul %442 %444 
                                f32_4 %446 = OpLoad %9 
                                f32_4 %447 = OpVectorShuffle %446 %445 4 5 6 3 
                                               OpStore %9 %447 
                       Uniform f32_4* %448 = OpAccessChain %12 %14 
                                f32_4 %449 = OpLoad %448 
                                f32_4 %450 = OpVectorShuffle %449 %449 0 1 0 1 
                                f32_4 %454 = OpFMul %450 %453 
                                f32_2 %455 = OpLoad vs_TEXCOORD0 
                                f32_4 %456 = OpVectorShuffle %455 %455 0 1 0 1 
                                f32_4 %457 = OpFAdd %454 %456 
                                               OpStore %65 %457 
                                f32_4 %458 = OpLoad %65 
                       Uniform f32_4* %459 = OpAccessChain %12 %31 
                                f32_4 %460 = OpLoad %459 
                                f32_4 %461 = OpVectorShuffle %460 %460 0 1 0 1 
                                f32_4 %462 = OpFMul %458 %461 
                       Uniform f32_4* %463 = OpAccessChain %12 %31 
                                f32_4 %464 = OpLoad %463 
                                f32_4 %465 = OpVectorShuffle %464 %464 2 3 2 3 
                                f32_4 %466 = OpFAdd %462 %465 
                                               OpStore %65 %466 
                  read_only Texture2D %467 = OpLoad %44 
                              sampler %468 = OpLoad %48 
           read_only Texture2DSampled %469 = OpSampledImage %467 %468 
                                f32_4 %470 = OpLoad %65 
                                f32_2 %471 = OpVectorShuffle %470 %470 0 1 
                                f32_4 %472 = OpImageSampleImplicitLod %469 %471 
                                               OpStore %102 %472 
                  read_only Texture2D %473 = OpLoad %44 
                              sampler %474 = OpLoad %48 
           read_only Texture2DSampled %475 = OpSampledImage %473 %474 
                                f32_4 %476 = OpLoad %65 
                                f32_2 %477 = OpVectorShuffle %476 %476 2 3 
                                f32_4 %478 = OpImageSampleImplicitLod %475 %477 
                                               OpStore %65 %478 
                                f32_4 %479 = OpLoad %102 
                                f32_3 %480 = OpVectorShuffle %479 %479 0 1 2 
                       Uniform f32_4* %481 = OpAccessChain %12 %58 
                                f32_4 %482 = OpLoad %481 
                                f32_3 %483 = OpVectorShuffle %482 %482 0 0 0 
                                f32_3 %484 = OpFMul %480 %483 
                                f32_4 %485 = OpLoad %102 
                                f32_4 %486 = OpVectorShuffle %485 %484 4 5 6 3 
                                               OpStore %102 %486 
                                f32_4 %487 = OpLoad %102 
                                f32_3 %488 = OpVectorShuffle %487 %487 3 3 3 
                                f32_4 %489 = OpLoad %102 
                                f32_3 %490 = OpVectorShuffle %489 %489 0 1 2 
                                f32_3 %491 = OpFMul %488 %490 
                                f32_4 %492 = OpLoad %102 
                                f32_4 %493 = OpVectorShuffle %492 %491 4 5 6 3 
                                               OpStore %102 %493 
                                f32_2 %494 = OpLoad vs_TEXCOORD0 
                       Uniform f32_4* %495 = OpAccessChain %12 %14 
                                f32_4 %496 = OpLoad %495 
                                f32_2 %497 = OpVectorShuffle %496 %496 0 1 
                                f32_2 %498 = OpFNegate %497 
                                f32_2 %499 = OpFAdd %494 %498 
                                f32_4 %500 = OpLoad %121 
                                f32_4 %501 = OpVectorShuffle %500 %499 4 5 2 3 
                                               OpStore %121 %501 
                                f32_4 %502 = OpLoad %121 
                                f32_2 %503 = OpVectorShuffle %502 %502 0 1 
                       Uniform f32_4* %504 = OpAccessChain %12 %31 
                                f32_4 %505 = OpLoad %504 
                                f32_2 %506 = OpVectorShuffle %505 %505 0 1 
                                f32_2 %507 = OpFMul %503 %506 
                       Uniform f32_4* %508 = OpAccessChain %12 %31 
                                f32_4 %509 = OpLoad %508 
                                f32_2 %510 = OpVectorShuffle %509 %509 2 3 
                                f32_2 %511 = OpFAdd %507 %510 
                                f32_4 %512 = OpLoad %121 
                                f32_4 %513 = OpVectorShuffle %512 %511 4 5 2 3 
                                               OpStore %121 %513 
                  read_only Texture2D %514 = OpLoad %44 
                              sampler %515 = OpLoad %48 
           read_only Texture2DSampled %516 = OpSampledImage %514 %515 
                                f32_4 %517 = OpLoad %121 
                                f32_2 %518 = OpVectorShuffle %517 %517 0 1 
                                f32_4 %519 = OpImageSampleImplicitLod %516 %518 
                                               OpStore %121 %519 
                                f32_4 %520 = OpLoad %121 
                                f32_3 %521 = OpVectorShuffle %520 %520 0 1 2 
                       Uniform f32_4* %522 = OpAccessChain %12 %58 
                                f32_4 %523 = OpLoad %522 
                                f32_3 %524 = OpVectorShuffle %523 %523 0 0 0 
                                f32_3 %525 = OpFMul %521 %524 
                                f32_4 %526 = OpLoad %121 
                                f32_4 %527 = OpVectorShuffle %526 %525 4 5 6 3 
                                               OpStore %121 %527 
                                f32_4 %528 = OpLoad %121 
                                f32_3 %529 = OpVectorShuffle %528 %528 0 1 2 
                                f32_4 %530 = OpLoad %121 
                                f32_3 %531 = OpVectorShuffle %530 %530 3 3 3 
                                f32_3 %532 = OpFMul %529 %531 
                                f32_4 %533 = OpLoad %102 
                                f32_3 %534 = OpVectorShuffle %533 %533 0 1 2 
                                f32_3 %535 = OpFAdd %532 %534 
                                f32_4 %536 = OpLoad %102 
                                f32_4 %537 = OpVectorShuffle %536 %535 4 5 6 3 
                                               OpStore %102 %537 
                                f32_2 %538 = OpLoad vs_TEXCOORD0 
                       Uniform f32_4* %539 = OpAccessChain %12 %14 
                                f32_4 %540 = OpLoad %539 
                                f32_2 %541 = OpVectorShuffle %540 %540 0 1 
                                f32_2 %542 = OpFAdd %538 %541 
                                f32_4 %543 = OpLoad %121 
                                f32_4 %544 = OpVectorShuffle %543 %542 4 5 2 3 
                                               OpStore %121 %544 
                                f32_4 %545 = OpLoad %121 
                                f32_2 %546 = OpVectorShuffle %545 %545 0 1 
                       Uniform f32_4* %547 = OpAccessChain %12 %31 
                                f32_4 %548 = OpLoad %547 
                                f32_2 %549 = OpVectorShuffle %548 %548 0 1 
                                f32_2 %550 = OpFMul %546 %549 
                       Uniform f32_4* %551 = OpAccessChain %12 %31 
                                f32_4 %552 = OpLoad %551 
                                f32_2 %553 = OpVectorShuffle %552 %552 2 3 
                                f32_2 %554 = OpFAdd %550 %553 
                                f32_4 %555 = OpLoad %121 
                                f32_4 %556 = OpVectorShuffle %555 %554 4 5 2 3 
                                               OpStore %121 %556 
                  read_only Texture2D %557 = OpLoad %44 
                              sampler %558 = OpLoad %48 
           read_only Texture2DSampled %559 = OpSampledImage %557 %558 
                                f32_4 %560 = OpLoad %121 
                                f32_2 %561 = OpVectorShuffle %560 %560 0 1 
                                f32_4 %562 = OpImageSampleImplicitLod %559 %561 
                                               OpStore %121 %562 
                                f32_4 %563 = OpLoad %121 
                                f32_3 %564 = OpVectorShuffle %563 %563 0 1 2 
                       Uniform f32_4* %565 = OpAccessChain %12 %58 
                                f32_4 %566 = OpLoad %565 
                                f32_3 %567 = OpVectorShuffle %566 %566 0 0 0 
                                f32_3 %568 = OpFMul %564 %567 
                                f32_4 %569 = OpLoad %121 
                                f32_4 %570 = OpVectorShuffle %569 %568 4 5 6 3 
                                               OpStore %121 %570 
                                f32_4 %571 = OpLoad %121 
                                f32_3 %572 = OpVectorShuffle %571 %571 0 1 2 
                                f32_4 %573 = OpLoad %121 
                                f32_3 %574 = OpVectorShuffle %573 %573 3 3 3 
                                f32_3 %575 = OpFMul %572 %574 
                                f32_4 %576 = OpLoad %102 
                                f32_3 %577 = OpVectorShuffle %576 %576 0 1 2 
                                f32_3 %578 = OpFAdd %575 %577 
                                f32_4 %579 = OpLoad %102 
                                f32_4 %580 = OpVectorShuffle %579 %578 4 5 6 3 
                                               OpStore %102 %580 
                                f32_4 %581 = OpLoad %65 
                                f32_3 %582 = OpVectorShuffle %581 %581 0 1 2 
                       Uniform f32_4* %583 = OpAccessChain %12 %58 
                                f32_4 %584 = OpLoad %583 
                                f32_3 %585 = OpVectorShuffle %584 %584 0 0 0 
                                f32_3 %586 = OpFMul %582 %585 
                                f32_4 %587 = OpLoad %65 
                                f32_4 %588 = OpVectorShuffle %587 %586 4 5 6 3 
                                               OpStore %65 %588 
                                f32_4 %589 = OpLoad %65 
                                f32_3 %590 = OpVectorShuffle %589 %589 0 1 2 
                                f32_4 %591 = OpLoad %65 
                                f32_3 %592 = OpVectorShuffle %591 %591 3 3 3 
                                f32_3 %593 = OpFMul %590 %592 
                                f32_4 %594 = OpLoad %102 
                                f32_3 %595 = OpVectorShuffle %594 %594 0 1 2 
                                f32_3 %596 = OpFAdd %593 %595 
                                f32_4 %597 = OpLoad %65 
                                f32_4 %598 = OpVectorShuffle %597 %596 4 5 6 3 
                                               OpStore %65 %598 
                                f32_4 %599 = OpLoad %65 
                                f32_3 %600 = OpVectorShuffle %599 %599 0 1 2 
                                f32_3 %601 = OpFMul %600 %444 
                                f32_4 %602 = OpLoad %9 
                                f32_3 %603 = OpVectorShuffle %602 %602 0 1 2 
                                f32_3 %604 = OpFAdd %601 %603 
                                f32_4 %605 = OpLoad %9 
                                f32_4 %606 = OpVectorShuffle %605 %604 4 5 6 3 
                                               OpStore %9 %606 
                                f32_4 %607 = OpLoad %9 
                                f32_3 %608 = OpVectorShuffle %607 %607 0 1 2 
                       Uniform f32_4* %609 = OpAccessChain %12 %58 
                                f32_4 %610 = OpLoad %609 
                                f32_3 %611 = OpVectorShuffle %610 %610 1 1 1 
                                f32_3 %612 = OpFMul %608 %611 
                                f32_4 %613 = OpLoad %9 
                                f32_4 %614 = OpVectorShuffle %613 %612 4 5 6 3 
                                               OpStore %9 %614 
                         Private f32* %619 = OpAccessChain %9 %618 
                                  f32 %620 = OpLoad %619 
                         Private f32* %622 = OpAccessChain %9 %621 
                                  f32 %623 = OpLoad %622 
                                  f32 %624 = OpExtInst %1 40 %620 %623 
                                               OpStore %616 %624 
                         Private f32* %626 = OpAccessChain %9 %625 
                                  f32 %627 = OpLoad %626 
                                  f32 %629 = OpExtInst %1 40 %627 %628 
                         Private f32* %630 = OpAccessChain %65 %621 
                                               OpStore %630 %629 
                                  f32 %631 = OpLoad %616 
                         Private f32* %632 = OpAccessChain %65 %621 
                                  f32 %633 = OpLoad %632 
                                  f32 %634 = OpExtInst %1 40 %631 %633 
                                               OpStore %616 %634 
                                  f32 %635 = OpLoad %616 
                                  f32 %636 = OpExtInst %1 37 %635 %451 
                                               OpStore %616 %636 
                                  f32 %637 = OpLoad %616 
                                  f32 %639 = OpFMul %637 %638 
                                               OpStore %616 %639 
                                  f32 %640 = OpLoad %616 
                                  f32 %641 = OpExtInst %1 9 %640 
                                               OpStore %616 %641 
                                  f32 %642 = OpLoad %616 
                                  f32 %644 = OpFMul %642 %643 
                                               OpStore %616 %644 
                                f32_4 %647 = OpLoad %9 
                                f32_3 %648 = OpVectorShuffle %647 %647 0 1 2 
                                  f32 %649 = OpLoad %616 
                                f32_3 %650 = OpCompositeConstruct %649 %649 %649 
                                f32_3 %651 = OpFDiv %648 %650 
                                f32_4 %652 = OpLoad %646 
                                f32_4 %653 = OpVectorShuffle %652 %651 4 5 6 3 
                                               OpStore %646 %653 
                                  f32 %654 = OpLoad %616 
                          Output f32* %657 = OpAccessChain %646 %655 
                                               OpStore %657 %654 
                                               OpReturn
                                               OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "AB_HIGH_PRECISION" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "AB_HIGH_PRECISION" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in  vec4 in_POSITION0;
in  vec2 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _MainTex_TexelSize;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
in  vec2 vs_TEXCOORD0;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
vec4 u_xlat6;
vec3 u_xlat7;
void main()
{
    u_xlat0.xy = _MainTex_TexelSize.xy * vec2(2.0, 2.0) + vs_TEXCOORD0.xy;
    u_xlat0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0 = texture(_MainTex, u_xlat0.xy);
    u_xlat1.xy = _MainTex_TexelSize.xy * vec2(0.0, 2.0) + vs_TEXCOORD0.xy;
    u_xlat1.xy = u_xlat1.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1 = texture(_MainTex, u_xlat1.xy);
    u_xlat2 = _MainTex_TexelSize.xyxy * vec4(2.0, 0.0, -2.0, 2.0) + vs_TEXCOORD0.xyxy;
    u_xlat2 = u_xlat2 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
    u_xlat3 = texture(_MainTex, u_xlat2.xy);
    u_xlat2 = texture(_MainTex, u_xlat2.zw);
    u_xlat4.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat4 = texture(_MainTex, u_xlat4.xy);
    u_xlat5.xyz = u_xlat3.xyz + u_xlat4.xyz;
    u_xlat5.xyz = u_xlat1.xyz + u_xlat5.xyz;
    u_xlat0.xyz = u_xlat0.xyz + u_xlat5.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(0.25, 0.25, 0.25);
    u_xlat5 = _MainTex_TexelSize.xyxy * vec4(2.0, -2.0, -2.0, 0.0) + vs_TEXCOORD0.xyxy;
    u_xlat5 = u_xlat5 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
    u_xlat6 = texture(_MainTex, u_xlat5.zw);
    u_xlat5 = texture(_MainTex, u_xlat5.xy);
    u_xlat7.xyz = u_xlat4.xyz + u_xlat6.xyz;
    u_xlat2.xyz = u_xlat2.xyz + u_xlat7.xyz;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
    u_xlat0.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25) + u_xlat0.xyz;
    u_xlat1 = _MainTex_TexelSize.xyxy * vec4(-2.0, -2.0, 0.0, -2.0) + vs_TEXCOORD0.xyxy;
    u_xlat1 = u_xlat1 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
    u_xlat2 = texture(_MainTex, u_xlat1.zw);
    u_xlat1 = texture(_MainTex, u_xlat1.xy);
    u_xlat1.xyz = u_xlat2.xyz + u_xlat1.xyz;
    u_xlat2.xyz = u_xlat5.xyz + u_xlat2.xyz;
    u_xlat2.xyz = u_xlat4.xyz + u_xlat2.xyz;
    u_xlat2.xyz = u_xlat3.xyz + u_xlat2.xyz;
    u_xlat0.xyz = u_xlat2.xyz * vec3(0.25, 0.25, 0.25) + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat6.xyz + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat4.xyz + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25) + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(0.125, 0.125, 0.125);
    u_xlat1.xy = vs_TEXCOORD0.xy + _MainTex_TexelSize.xy;
    u_xlat1.xy = u_xlat1.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1 = texture(_MainTex, u_xlat1.xy);
    u_xlat2.xy = vs_TEXCOORD0.xy + (-_MainTex_TexelSize.xy);
    u_xlat2.xy = u_xlat2.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat2 = texture(_MainTex, u_xlat2.xy);
    u_xlat3 = _MainTex_TexelSize.xyxy * vec4(1.0, -1.0, -1.0, 1.0) + vs_TEXCOORD0.xyxy;
    u_xlat3 = u_xlat3 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
    u_xlat4 = texture(_MainTex, u_xlat3.xy);
    u_xlat3 = texture(_MainTex, u_xlat3.zw);
    u_xlat2.xyz = u_xlat2.xyz + u_xlat4.xyz;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat3.xyz + u_xlat1.xyz;
    SV_Target0.xyz = u_xlat1.xyz * vec3(0.125, 0.125, 0.125) + u_xlat0.xyz;
    SV_Target0.w = 0.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "AB_HIGH_PRECISION" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 94
; Schema: 0
                                              OpCapability Shader 
                                       %1 = OpExtInstImport "GLSL.std.450" 
                                              OpMemoryModel Logical GLSL450 
                                              OpEntryPoint Vertex %4 "main" %11 %72 %84 %86 
                                              OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                              OpDecorate %11 Location 11 
                                              OpDecorate %16 ArrayStride 16 
                                              OpDecorate %17 ArrayStride 17 
                                              OpMemberDecorate %18 0 Offset 18 
                                              OpMemberDecorate %18 1 Offset 18 
                                              OpDecorate %18 Block 
                                              OpDecorate %20 DescriptorSet 20 
                                              OpDecorate %20 Binding 20 
                                              OpMemberDecorate %70 0 BuiltIn 70 
                                              OpMemberDecorate %70 1 BuiltIn 70 
                                              OpMemberDecorate %70 2 BuiltIn 70 
                                              OpDecorate %70 Block 
                                              OpDecorate vs_TEXCOORD0 Location 84 
                                              OpDecorate %86 Location 86 
                                       %2 = OpTypeVoid 
                                       %3 = OpTypeFunction %2 
                                       %6 = OpTypeFloat 32 
                                       %7 = OpTypeVector %6 4 
                                       %8 = OpTypePointer Private %7 
                        Private f32_4* %9 = OpVariable Private 
                                      %10 = OpTypePointer Input %7 
                         Input f32_4* %11 = OpVariable Input 
                                      %14 = OpTypeInt 32 0 
                                  u32 %15 = OpConstant 4 
                                      %16 = OpTypeArray %7 %15 
                                      %17 = OpTypeArray %7 %15 
                                      %18 = OpTypeStruct %16 %17 
                                      %19 = OpTypePointer Uniform %18 
Uniform struct {f32_4[4]; f32_4[4];}* %20 = OpVariable Uniform 
                                      %21 = OpTypeInt 32 1 
                                  i32 %22 = OpConstant 0 
                                  i32 %23 = OpConstant 1 
                                      %24 = OpTypePointer Uniform %7 
                                  i32 %35 = OpConstant 2 
                                  i32 %44 = OpConstant 3 
                       Private f32_4* %48 = OpVariable Private 
                                  u32 %68 = OpConstant 1 
                                      %69 = OpTypeArray %6 %68 
                                      %70 = OpTypeStruct %7 %6 %69 
                                      %71 = OpTypePointer Output %70 
 Output struct {f32_4; f32; f32[1];}* %72 = OpVariable Output 
                                      %80 = OpTypePointer Output %7 
                                      %82 = OpTypeVector %6 2 
                                      %83 = OpTypePointer Output %82 
               Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                      %85 = OpTypePointer Input %82 
                         Input f32_2* %86 = OpVariable Input 
                                      %88 = OpTypePointer Output %6 
                                  void %4 = OpFunction None %3 
                                       %5 = OpLabel 
                                f32_4 %12 = OpLoad %11 
                                f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                       Uniform f32_4* %25 = OpAccessChain %20 %22 %23 
                                f32_4 %26 = OpLoad %25 
                                f32_4 %27 = OpFMul %13 %26 
                                              OpStore %9 %27 
                       Uniform f32_4* %28 = OpAccessChain %20 %22 %22 
                                f32_4 %29 = OpLoad %28 
                                f32_4 %30 = OpLoad %11 
                                f32_4 %31 = OpVectorShuffle %30 %30 0 0 0 0 
                                f32_4 %32 = OpFMul %29 %31 
                                f32_4 %33 = OpLoad %9 
                                f32_4 %34 = OpFAdd %32 %33 
                                              OpStore %9 %34 
                       Uniform f32_4* %36 = OpAccessChain %20 %22 %35 
                                f32_4 %37 = OpLoad %36 
                                f32_4 %38 = OpLoad %11 
                                f32_4 %39 = OpVectorShuffle %38 %38 2 2 2 2 
                                f32_4 %40 = OpFMul %37 %39 
                                f32_4 %41 = OpLoad %9 
                                f32_4 %42 = OpFAdd %40 %41 
                                              OpStore %9 %42 
                                f32_4 %43 = OpLoad %9 
                       Uniform f32_4* %45 = OpAccessChain %20 %22 %44 
                                f32_4 %46 = OpLoad %45 
                                f32_4 %47 = OpFAdd %43 %46 
                                              OpStore %9 %47 
                                f32_4 %49 = OpLoad %9 
                                f32_4 %50 = OpVectorShuffle %49 %49 1 1 1 1 
                       Uniform f32_4* %51 = OpAccessChain %20 %23 %23 
                                f32_4 %52 = OpLoad %51 
                                f32_4 %53 = OpFMul %50 %52 
                                              OpStore %48 %53 
                       Uniform f32_4* %54 = OpAccessChain %20 %23 %22 
                                f32_4 %55 = OpLoad %54 
                                f32_4 %56 = OpLoad %9 
                                f32_4 %57 = OpVectorShuffle %56 %56 0 0 0 0 
                                f32_4 %58 = OpFMul %55 %57 
                                f32_4 %59 = OpLoad %48 
                                f32_4 %60 = OpFAdd %58 %59 
                                              OpStore %48 %60 
                       Uniform f32_4* %61 = OpAccessChain %20 %23 %35 
                                f32_4 %62 = OpLoad %61 
                                f32_4 %63 = OpLoad %9 
                                f32_4 %64 = OpVectorShuffle %63 %63 2 2 2 2 
                                f32_4 %65 = OpFMul %62 %64 
                                f32_4 %66 = OpLoad %48 
                                f32_4 %67 = OpFAdd %65 %66 
                                              OpStore %48 %67 
                       Uniform f32_4* %73 = OpAccessChain %20 %23 %44 
                                f32_4 %74 = OpLoad %73 
                                f32_4 %75 = OpLoad %9 
                                f32_4 %76 = OpVectorShuffle %75 %75 3 3 3 3 
                                f32_4 %77 = OpFMul %74 %76 
                                f32_4 %78 = OpLoad %48 
                                f32_4 %79 = OpFAdd %77 %78 
                        Output f32_4* %81 = OpAccessChain %72 %22 
                                              OpStore %81 %79 
                                f32_2 %87 = OpLoad %86 
                                              OpStore vs_TEXCOORD0 %87 
                          Output f32* %89 = OpAccessChain %72 %22 %68 
                                  f32 %90 = OpLoad %89 
                                  f32 %91 = OpFNegate %90 
                          Output f32* %92 = OpAccessChain %72 %22 %68 
                                              OpStore %92 %91 
                                              OpReturn
                                              OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 439
; Schema: 0
                                             OpCapability Shader 
                                      %1 = OpExtInstImport "GLSL.std.450" 
                                             OpMemoryModel Logical GLSL450 
                                             OpEntryPoint Fragment %4 "main" %25 %426 
                                             OpExecutionMode %4 OriginUpperLeft 
                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                             OpMemberDecorate %11 0 Offset 11 
                                             OpMemberDecorate %11 1 Offset 11 
                                             OpDecorate %11 Block 
                                             OpDecorate %13 DescriptorSet 13 
                                             OpDecorate %13 Binding 13 
                                             OpDecorate vs_TEXCOORD0 Location 25 
                                             OpDecorate %45 DescriptorSet 45 
                                             OpDecorate %45 Binding 45 
                                             OpDecorate %49 DescriptorSet 49 
                                             OpDecorate %49 Binding 49 
                                             OpDecorate %426 Location 426 
                                      %2 = OpTypeVoid 
                                      %3 = OpTypeFunction %2 
                                      %6 = OpTypeFloat 32 
                                      %7 = OpTypeVector %6 3 
                                      %8 = OpTypePointer Private %7 
                       Private f32_3* %9 = OpVariable Private 
                                     %10 = OpTypeVector %6 4 
                                     %11 = OpTypeStruct %10 %10 
                                     %12 = OpTypePointer Uniform %11 
     Uniform struct {f32_4; f32_4;}* %13 = OpVariable Uniform 
                                     %14 = OpTypeInt 32 1 
                                 i32 %15 = OpConstant 1 
                                     %16 = OpTypeVector %6 2 
                                     %17 = OpTypePointer Uniform %10 
                                 f32 %21 = OpConstant 3.674022E-40 
                               f32_2 %22 = OpConstantComposite %21 %21 
                                     %24 = OpTypePointer Input %16 
               Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                 i32 %32 = OpConstant 0 
                                     %43 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                     %44 = OpTypePointer UniformConstant %43 
UniformConstant read_only Texture2D* %45 = OpVariable UniformConstant 
                                     %47 = OpTypeSampler 
                                     %48 = OpTypePointer UniformConstant %47 
            UniformConstant sampler* %49 = OpVariable UniformConstant 
                                     %51 = OpTypeSampledImage %43 
                                     %57 = OpTypePointer Private %10 
                      Private f32_4* %58 = OpVariable Private 
                                 f32 %62 = OpConstant 3.674022E-40 
                               f32_2 %63 = OpConstantComposite %62 %21 
                      Private f32_4* %90 = OpVariable Private 
                                 f32 %94 = OpConstant 3.674022E-40 
                               f32_4 %95 = OpConstantComposite %21 %62 %94 %21 
                     Private f32_4* %109 = OpVariable Private 
                     Private f32_3* %128 = OpVariable Private 
                     Private f32_4* %147 = OpVariable Private 
                                f32 %166 = OpConstant 3.674022E-40 
                              f32_3 %167 = OpConstantComposite %166 %166 %166 
                              f32_4 %172 = OpConstantComposite %21 %94 %94 %62 
                     Private f32_3* %186 = OpVariable Private 
                     Private f32_3* %203 = OpVariable Private 
                              f32_4 %228 = OpConstantComposite %94 %94 %62 %94 
                                f32 %310 = OpConstant 3.674022E-40 
                              f32_3 %311 = OpConstantComposite %310 %310 %310 
                                f32 %373 = OpConstant 3.674022E-40 
                                f32 %374 = OpConstant 3.674022E-40 
                              f32_4 %375 = OpConstantComposite %373 %374 %374 %373 
                                    %425 = OpTypePointer Output %10 
                      Output f32_4* %426 = OpVariable Output 
                                    %434 = OpTypeInt 32 0 
                                u32 %435 = OpConstant 3 
                                    %436 = OpTypePointer Output %6 
                                 void %4 = OpFunction None %3 
                                      %5 = OpLabel 
                      Uniform f32_4* %18 = OpAccessChain %13 %15 
                               f32_4 %19 = OpLoad %18 
                               f32_2 %20 = OpVectorShuffle %19 %19 0 1 
                               f32_2 %23 = OpFMul %20 %22 
                               f32_2 %26 = OpLoad vs_TEXCOORD0 
                               f32_2 %27 = OpFAdd %23 %26 
                               f32_3 %28 = OpLoad %9 
                               f32_3 %29 = OpVectorShuffle %28 %27 3 4 2 
                                             OpStore %9 %29 
                               f32_3 %30 = OpLoad %9 
                               f32_2 %31 = OpVectorShuffle %30 %30 0 1 
                      Uniform f32_4* %33 = OpAccessChain %13 %32 
                               f32_4 %34 = OpLoad %33 
                               f32_2 %35 = OpVectorShuffle %34 %34 0 1 
                               f32_2 %36 = OpFMul %31 %35 
                      Uniform f32_4* %37 = OpAccessChain %13 %32 
                               f32_4 %38 = OpLoad %37 
                               f32_2 %39 = OpVectorShuffle %38 %38 2 3 
                               f32_2 %40 = OpFAdd %36 %39 
                               f32_3 %41 = OpLoad %9 
                               f32_3 %42 = OpVectorShuffle %41 %40 3 4 2 
                                             OpStore %9 %42 
                 read_only Texture2D %46 = OpLoad %45 
                             sampler %50 = OpLoad %49 
          read_only Texture2DSampled %52 = OpSampledImage %46 %50 
                               f32_3 %53 = OpLoad %9 
                               f32_2 %54 = OpVectorShuffle %53 %53 0 1 
                               f32_4 %55 = OpImageSampleImplicitLod %52 %54 
                               f32_3 %56 = OpVectorShuffle %55 %55 0 1 2 
                                             OpStore %9 %56 
                      Uniform f32_4* %59 = OpAccessChain %13 %15 
                               f32_4 %60 = OpLoad %59 
                               f32_2 %61 = OpVectorShuffle %60 %60 0 1 
                               f32_2 %64 = OpFMul %61 %63 
                               f32_2 %65 = OpLoad vs_TEXCOORD0 
                               f32_2 %66 = OpFAdd %64 %65 
                               f32_4 %67 = OpLoad %58 
                               f32_4 %68 = OpVectorShuffle %67 %66 4 5 2 3 
                                             OpStore %58 %68 
                               f32_4 %69 = OpLoad %58 
                               f32_2 %70 = OpVectorShuffle %69 %69 0 1 
                      Uniform f32_4* %71 = OpAccessChain %13 %32 
                               f32_4 %72 = OpLoad %71 
                               f32_2 %73 = OpVectorShuffle %72 %72 0 1 
                               f32_2 %74 = OpFMul %70 %73 
                      Uniform f32_4* %75 = OpAccessChain %13 %32 
                               f32_4 %76 = OpLoad %75 
                               f32_2 %77 = OpVectorShuffle %76 %76 2 3 
                               f32_2 %78 = OpFAdd %74 %77 
                               f32_4 %79 = OpLoad %58 
                               f32_4 %80 = OpVectorShuffle %79 %78 4 5 2 3 
                                             OpStore %58 %80 
                 read_only Texture2D %81 = OpLoad %45 
                             sampler %82 = OpLoad %49 
          read_only Texture2DSampled %83 = OpSampledImage %81 %82 
                               f32_4 %84 = OpLoad %58 
                               f32_2 %85 = OpVectorShuffle %84 %84 0 1 
                               f32_4 %86 = OpImageSampleImplicitLod %83 %85 
                               f32_3 %87 = OpVectorShuffle %86 %86 0 1 2 
                               f32_4 %88 = OpLoad %58 
                               f32_4 %89 = OpVectorShuffle %88 %87 4 5 6 3 
                                             OpStore %58 %89 
                      Uniform f32_4* %91 = OpAccessChain %13 %15 
                               f32_4 %92 = OpLoad %91 
                               f32_4 %93 = OpVectorShuffle %92 %92 0 1 0 1 
                               f32_4 %96 = OpFMul %93 %95 
                               f32_2 %97 = OpLoad vs_TEXCOORD0 
                               f32_4 %98 = OpVectorShuffle %97 %97 0 1 0 1 
                               f32_4 %99 = OpFAdd %96 %98 
                                             OpStore %90 %99 
                              f32_4 %100 = OpLoad %90 
                     Uniform f32_4* %101 = OpAccessChain %13 %32 
                              f32_4 %102 = OpLoad %101 
                              f32_4 %103 = OpVectorShuffle %102 %102 0 1 0 1 
                              f32_4 %104 = OpFMul %100 %103 
                     Uniform f32_4* %105 = OpAccessChain %13 %32 
                              f32_4 %106 = OpLoad %105 
                              f32_4 %107 = OpVectorShuffle %106 %106 2 3 2 3 
                              f32_4 %108 = OpFAdd %104 %107 
                                             OpStore %90 %108 
                read_only Texture2D %110 = OpLoad %45 
                            sampler %111 = OpLoad %49 
         read_only Texture2DSampled %112 = OpSampledImage %110 %111 
                              f32_4 %113 = OpLoad %90 
                              f32_2 %114 = OpVectorShuffle %113 %113 0 1 
                              f32_4 %115 = OpImageSampleImplicitLod %112 %114 
                              f32_3 %116 = OpVectorShuffle %115 %115 0 1 2 
                              f32_4 %117 = OpLoad %109 
                              f32_4 %118 = OpVectorShuffle %117 %116 4 5 6 3 
                                             OpStore %109 %118 
                read_only Texture2D %119 = OpLoad %45 
                            sampler %120 = OpLoad %49 
         read_only Texture2DSampled %121 = OpSampledImage %119 %120 
                              f32_4 %122 = OpLoad %90 
                              f32_2 %123 = OpVectorShuffle %122 %122 2 3 
                              f32_4 %124 = OpImageSampleImplicitLod %121 %123 
                              f32_3 %125 = OpVectorShuffle %124 %124 0 1 2 
                              f32_4 %126 = OpLoad %90 
                              f32_4 %127 = OpVectorShuffle %126 %125 4 5 6 3 
                                             OpStore %90 %127 
                              f32_2 %129 = OpLoad vs_TEXCOORD0 
                     Uniform f32_4* %130 = OpAccessChain %13 %32 
                              f32_4 %131 = OpLoad %130 
                              f32_2 %132 = OpVectorShuffle %131 %131 0 1 
                              f32_2 %133 = OpFMul %129 %132 
                     Uniform f32_4* %134 = OpAccessChain %13 %32 
                              f32_4 %135 = OpLoad %134 
                              f32_2 %136 = OpVectorShuffle %135 %135 2 3 
                              f32_2 %137 = OpFAdd %133 %136 
                              f32_3 %138 = OpLoad %128 
                              f32_3 %139 = OpVectorShuffle %138 %137 3 4 2 
                                             OpStore %128 %139 
                read_only Texture2D %140 = OpLoad %45 
                            sampler %141 = OpLoad %49 
         read_only Texture2DSampled %142 = OpSampledImage %140 %141 
                              f32_3 %143 = OpLoad %128 
                              f32_2 %144 = OpVectorShuffle %143 %143 0 1 
                              f32_4 %145 = OpImageSampleImplicitLod %142 %144 
                              f32_3 %146 = OpVectorShuffle %145 %145 0 1 2 
                                             OpStore %128 %146 
                              f32_4 %148 = OpLoad %109 
                              f32_3 %149 = OpVectorShuffle %148 %148 0 1 2 
                              f32_3 %150 = OpLoad %128 
                              f32_3 %151 = OpFAdd %149 %150 
                              f32_4 %152 = OpLoad %147 
                              f32_4 %153 = OpVectorShuffle %152 %151 4 5 6 3 
                                             OpStore %147 %153 
                              f32_4 %154 = OpLoad %58 
                              f32_3 %155 = OpVectorShuffle %154 %154 0 1 2 
                              f32_4 %156 = OpLoad %147 
                              f32_3 %157 = OpVectorShuffle %156 %156 0 1 2 
                              f32_3 %158 = OpFAdd %155 %157 
                              f32_4 %159 = OpLoad %147 
                              f32_4 %160 = OpVectorShuffle %159 %158 4 5 6 3 
                                             OpStore %147 %160 
                              f32_3 %161 = OpLoad %9 
                              f32_4 %162 = OpLoad %147 
                              f32_3 %163 = OpVectorShuffle %162 %162 0 1 2 
                              f32_3 %164 = OpFAdd %161 %163 
                                             OpStore %9 %164 
                              f32_3 %165 = OpLoad %9 
                              f32_3 %168 = OpFMul %165 %167 
                                             OpStore %9 %168 
                     Uniform f32_4* %169 = OpAccessChain %13 %15 
                              f32_4 %170 = OpLoad %169 
                              f32_4 %171 = OpVectorShuffle %170 %170 0 1 0 1 
                              f32_4 %173 = OpFMul %171 %172 
                              f32_2 %174 = OpLoad vs_TEXCOORD0 
                              f32_4 %175 = OpVectorShuffle %174 %174 0 1 0 1 
                              f32_4 %176 = OpFAdd %173 %175 
                                             OpStore %147 %176 
                              f32_4 %177 = OpLoad %147 
                     Uniform f32_4* %178 = OpAccessChain %13 %32 
                              f32_4 %179 = OpLoad %178 
                              f32_4 %180 = OpVectorShuffle %179 %179 0 1 0 1 
                              f32_4 %181 = OpFMul %177 %180 
                     Uniform f32_4* %182 = OpAccessChain %13 %32 
                              f32_4 %183 = OpLoad %182 
                              f32_4 %184 = OpVectorShuffle %183 %183 2 3 2 3 
                              f32_4 %185 = OpFAdd %181 %184 
                                             OpStore %147 %185 
                read_only Texture2D %187 = OpLoad %45 
                            sampler %188 = OpLoad %49 
         read_only Texture2DSampled %189 = OpSampledImage %187 %188 
                              f32_4 %190 = OpLoad %147 
                              f32_2 %191 = OpVectorShuffle %190 %190 2 3 
                              f32_4 %192 = OpImageSampleImplicitLod %189 %191 
                              f32_3 %193 = OpVectorShuffle %192 %192 0 1 2 
                                             OpStore %186 %193 
                read_only Texture2D %194 = OpLoad %45 
                            sampler %195 = OpLoad %49 
         read_only Texture2DSampled %196 = OpSampledImage %194 %195 
                              f32_4 %197 = OpLoad %147 
                              f32_2 %198 = OpVectorShuffle %197 %197 0 1 
                              f32_4 %199 = OpImageSampleImplicitLod %196 %198 
                              f32_3 %200 = OpVectorShuffle %199 %199 0 1 2 
                              f32_4 %201 = OpLoad %147 
                              f32_4 %202 = OpVectorShuffle %201 %200 4 5 6 3 
                                             OpStore %147 %202 
                              f32_3 %204 = OpLoad %128 
                              f32_3 %205 = OpLoad %186 
                              f32_3 %206 = OpFAdd %204 %205 
                                             OpStore %203 %206 
                              f32_4 %207 = OpLoad %90 
                              f32_3 %208 = OpVectorShuffle %207 %207 0 1 2 
                              f32_3 %209 = OpLoad %203 
                              f32_3 %210 = OpFAdd %208 %209 
                              f32_4 %211 = OpLoad %90 
                              f32_4 %212 = OpVectorShuffle %211 %210 4 5 6 3 
                                             OpStore %90 %212 
                              f32_4 %213 = OpLoad %58 
                              f32_3 %214 = OpVectorShuffle %213 %213 0 1 2 
                              f32_4 %215 = OpLoad %90 
                              f32_3 %216 = OpVectorShuffle %215 %215 0 1 2 
                              f32_3 %217 = OpFAdd %214 %216 
                              f32_4 %218 = OpLoad %58 
                              f32_4 %219 = OpVectorShuffle %218 %217 4 5 6 3 
                                             OpStore %58 %219 
                              f32_4 %220 = OpLoad %58 
                              f32_3 %221 = OpVectorShuffle %220 %220 0 1 2 
                              f32_3 %222 = OpFMul %221 %167 
                              f32_3 %223 = OpLoad %9 
                              f32_3 %224 = OpFAdd %222 %223 
                                             OpStore %9 %224 
                     Uniform f32_4* %225 = OpAccessChain %13 %15 
                              f32_4 %226 = OpLoad %225 
                              f32_4 %227 = OpVectorShuffle %226 %226 0 1 0 1 
                              f32_4 %229 = OpFMul %227 %228 
                              f32_2 %230 = OpLoad vs_TEXCOORD0 
                              f32_4 %231 = OpVectorShuffle %230 %230 0 1 0 1 
                              f32_4 %232 = OpFAdd %229 %231 
                                             OpStore %58 %232 
                              f32_4 %233 = OpLoad %58 
                     Uniform f32_4* %234 = OpAccessChain %13 %32 
                              f32_4 %235 = OpLoad %234 
                              f32_4 %236 = OpVectorShuffle %235 %235 0 1 0 1 
                              f32_4 %237 = OpFMul %233 %236 
                     Uniform f32_4* %238 = OpAccessChain %13 %32 
                              f32_4 %239 = OpLoad %238 
                              f32_4 %240 = OpVectorShuffle %239 %239 2 3 2 3 
                              f32_4 %241 = OpFAdd %237 %240 
                                             OpStore %58 %241 
                read_only Texture2D %242 = OpLoad %45 
                            sampler %243 = OpLoad %49 
         read_only Texture2DSampled %244 = OpSampledImage %242 %243 
                              f32_4 %245 = OpLoad %58 
                              f32_2 %246 = OpVectorShuffle %245 %245 2 3 
                              f32_4 %247 = OpImageSampleImplicitLod %244 %246 
                              f32_3 %248 = OpVectorShuffle %247 %247 0 1 2 
                              f32_4 %249 = OpLoad %90 
                              f32_4 %250 = OpVectorShuffle %249 %248 4 5 6 3 
                                             OpStore %90 %250 
                read_only Texture2D %251 = OpLoad %45 
                            sampler %252 = OpLoad %49 
         read_only Texture2DSampled %253 = OpSampledImage %251 %252 
                              f32_4 %254 = OpLoad %58 
                              f32_2 %255 = OpVectorShuffle %254 %254 0 1 
                              f32_4 %256 = OpImageSampleImplicitLod %253 %255 
                              f32_3 %257 = OpVectorShuffle %256 %256 0 1 2 
                              f32_4 %258 = OpLoad %58 
                              f32_4 %259 = OpVectorShuffle %258 %257 4 5 6 3 
                                             OpStore %58 %259 
                              f32_4 %260 = OpLoad %90 
                              f32_3 %261 = OpVectorShuffle %260 %260 0 1 2 
                              f32_4 %262 = OpLoad %58 
                              f32_3 %263 = OpVectorShuffle %262 %262 0 1 2 
                              f32_3 %264 = OpFAdd %261 %263 
                              f32_4 %265 = OpLoad %58 
                              f32_4 %266 = OpVectorShuffle %265 %264 4 5 6 3 
                                             OpStore %58 %266 
                              f32_4 %267 = OpLoad %147 
                              f32_3 %268 = OpVectorShuffle %267 %267 0 1 2 
                              f32_4 %269 = OpLoad %90 
                              f32_3 %270 = OpVectorShuffle %269 %269 0 1 2 
                              f32_3 %271 = OpFAdd %268 %270 
                              f32_4 %272 = OpLoad %90 
                              f32_4 %273 = OpVectorShuffle %272 %271 4 5 6 3 
                                             OpStore %90 %273 
                              f32_3 %274 = OpLoad %128 
                              f32_4 %275 = OpLoad %90 
                              f32_3 %276 = OpVectorShuffle %275 %275 0 1 2 
                              f32_3 %277 = OpFAdd %274 %276 
                              f32_4 %278 = OpLoad %90 
                              f32_4 %279 = OpVectorShuffle %278 %277 4 5 6 3 
                                             OpStore %90 %279 
                              f32_4 %280 = OpLoad %109 
                              f32_3 %281 = OpVectorShuffle %280 %280 0 1 2 
                              f32_4 %282 = OpLoad %90 
                              f32_3 %283 = OpVectorShuffle %282 %282 0 1 2 
                              f32_3 %284 = OpFAdd %281 %283 
                              f32_4 %285 = OpLoad %90 
                              f32_4 %286 = OpVectorShuffle %285 %284 4 5 6 3 
                                             OpStore %90 %286 
                              f32_4 %287 = OpLoad %90 
                              f32_3 %288 = OpVectorShuffle %287 %287 0 1 2 
                              f32_3 %289 = OpFMul %288 %167 
                              f32_3 %290 = OpLoad %9 
                              f32_3 %291 = OpFAdd %289 %290 
                                             OpStore %9 %291 
                              f32_3 %292 = OpLoad %186 
                              f32_4 %293 = OpLoad %58 
                              f32_3 %294 = OpVectorShuffle %293 %293 0 1 2 
                              f32_3 %295 = OpFAdd %292 %294 
                              f32_4 %296 = OpLoad %58 
                              f32_4 %297 = OpVectorShuffle %296 %295 4 5 6 3 
                                             OpStore %58 %297 
                              f32_3 %298 = OpLoad %128 
                              f32_4 %299 = OpLoad %58 
                              f32_3 %300 = OpVectorShuffle %299 %299 0 1 2 
                              f32_3 %301 = OpFAdd %298 %300 
                              f32_4 %302 = OpLoad %58 
                              f32_4 %303 = OpVectorShuffle %302 %301 4 5 6 3 
                                             OpStore %58 %303 
                              f32_4 %304 = OpLoad %58 
                              f32_3 %305 = OpVectorShuffle %304 %304 0 1 2 
                              f32_3 %306 = OpFMul %305 %167 
                              f32_3 %307 = OpLoad %9 
                              f32_3 %308 = OpFAdd %306 %307 
                                             OpStore %9 %308 
                              f32_3 %309 = OpLoad %9 
                              f32_3 %312 = OpFMul %309 %311 
                                             OpStore %9 %312 
                              f32_2 %313 = OpLoad vs_TEXCOORD0 
                     Uniform f32_4* %314 = OpAccessChain %13 %15 
                              f32_4 %315 = OpLoad %314 
                              f32_2 %316 = OpVectorShuffle %315 %315 0 1 
                              f32_2 %317 = OpFAdd %313 %316 
                              f32_4 %318 = OpLoad %58 
                              f32_4 %319 = OpVectorShuffle %318 %317 4 5 2 3 
                                             OpStore %58 %319 
                              f32_4 %320 = OpLoad %58 
                              f32_2 %321 = OpVectorShuffle %320 %320 0 1 
                     Uniform f32_4* %322 = OpAccessChain %13 %32 
                              f32_4 %323 = OpLoad %322 
                              f32_2 %324 = OpVectorShuffle %323 %323 0 1 
                              f32_2 %325 = OpFMul %321 %324 
                     Uniform f32_4* %326 = OpAccessChain %13 %32 
                              f32_4 %327 = OpLoad %326 
                              f32_2 %328 = OpVectorShuffle %327 %327 2 3 
                              f32_2 %329 = OpFAdd %325 %328 
                              f32_4 %330 = OpLoad %58 
                              f32_4 %331 = OpVectorShuffle %330 %329 4 5 2 3 
                                             OpStore %58 %331 
                read_only Texture2D %332 = OpLoad %45 
                            sampler %333 = OpLoad %49 
         read_only Texture2DSampled %334 = OpSampledImage %332 %333 
                              f32_4 %335 = OpLoad %58 
                              f32_2 %336 = OpVectorShuffle %335 %335 0 1 
                              f32_4 %337 = OpImageSampleImplicitLod %334 %336 
                              f32_3 %338 = OpVectorShuffle %337 %337 0 1 2 
                              f32_4 %339 = OpLoad %58 
                              f32_4 %340 = OpVectorShuffle %339 %338 4 5 6 3 
                                             OpStore %58 %340 
                              f32_2 %341 = OpLoad vs_TEXCOORD0 
                     Uniform f32_4* %342 = OpAccessChain %13 %15 
                              f32_4 %343 = OpLoad %342 
                              f32_2 %344 = OpVectorShuffle %343 %343 0 1 
                              f32_2 %345 = OpFNegate %344 
                              f32_2 %346 = OpFAdd %341 %345 
                              f32_4 %347 = OpLoad %90 
                              f32_4 %348 = OpVectorShuffle %347 %346 4 5 2 3 
                                             OpStore %90 %348 
                              f32_4 %349 = OpLoad %90 
                              f32_2 %350 = OpVectorShuffle %349 %349 0 1 
                     Uniform f32_4* %351 = OpAccessChain %13 %32 
                              f32_4 %352 = OpLoad %351 
                              f32_2 %353 = OpVectorShuffle %352 %352 0 1 
                              f32_2 %354 = OpFMul %350 %353 
                     Uniform f32_4* %355 = OpAccessChain %13 %32 
                              f32_4 %356 = OpLoad %355 
                              f32_2 %357 = OpVectorShuffle %356 %356 2 3 
                              f32_2 %358 = OpFAdd %354 %357 
                              f32_4 %359 = OpLoad %90 
                              f32_4 %360 = OpVectorShuffle %359 %358 4 5 2 3 
                                             OpStore %90 %360 
                read_only Texture2D %361 = OpLoad %45 
                            sampler %362 = OpLoad %49 
         read_only Texture2DSampled %363 = OpSampledImage %361 %362 
                              f32_4 %364 = OpLoad %90 
                              f32_2 %365 = OpVectorShuffle %364 %364 0 1 
                              f32_4 %366 = OpImageSampleImplicitLod %363 %365 
                              f32_3 %367 = OpVectorShuffle %366 %366 0 1 2 
                              f32_4 %368 = OpLoad %90 
                              f32_4 %369 = OpVectorShuffle %368 %367 4 5 6 3 
                                             OpStore %90 %369 
                     Uniform f32_4* %370 = OpAccessChain %13 %15 
                              f32_4 %371 = OpLoad %370 
                              f32_4 %372 = OpVectorShuffle %371 %371 0 1 0 1 
                              f32_4 %376 = OpFMul %372 %375 
                              f32_2 %377 = OpLoad vs_TEXCOORD0 
                              f32_4 %378 = OpVectorShuffle %377 %377 0 1 0 1 
                              f32_4 %379 = OpFAdd %376 %378 
                                             OpStore %109 %379 
                              f32_4 %380 = OpLoad %109 
                     Uniform f32_4* %381 = OpAccessChain %13 %32 
                              f32_4 %382 = OpLoad %381 
                              f32_4 %383 = OpVectorShuffle %382 %382 0 1 0 1 
                              f32_4 %384 = OpFMul %380 %383 
                     Uniform f32_4* %385 = OpAccessChain %13 %32 
                              f32_4 %386 = OpLoad %385 
                              f32_4 %387 = OpVectorShuffle %386 %386 2 3 2 3 
                              f32_4 %388 = OpFAdd %384 %387 
                                             OpStore %109 %388 
                read_only Texture2D %389 = OpLoad %45 
                            sampler %390 = OpLoad %49 
         read_only Texture2DSampled %391 = OpSampledImage %389 %390 
                              f32_4 %392 = OpLoad %109 
                              f32_2 %393 = OpVectorShuffle %392 %392 0 1 
                              f32_4 %394 = OpImageSampleImplicitLod %391 %393 
                              f32_3 %395 = OpVectorShuffle %394 %394 0 1 2 
                                             OpStore %128 %395 
                read_only Texture2D %396 = OpLoad %45 
                            sampler %397 = OpLoad %49 
         read_only Texture2DSampled %398 = OpSampledImage %396 %397 
                              f32_4 %399 = OpLoad %109 
                              f32_2 %400 = OpVectorShuffle %399 %399 2 3 
                              f32_4 %401 = OpImageSampleImplicitLod %398 %400 
                              f32_3 %402 = OpVectorShuffle %401 %401 0 1 2 
                              f32_4 %403 = OpLoad %109 
                              f32_4 %404 = OpVectorShuffle %403 %402 4 5 6 3 
                                             OpStore %109 %404 
                              f32_4 %405 = OpLoad %90 
                              f32_3 %406 = OpVectorShuffle %405 %405 0 1 2 
                              f32_3 %407 = OpLoad %128 
                              f32_3 %408 = OpFAdd %406 %407 
                              f32_4 %409 = OpLoad %90 
                              f32_4 %410 = OpVectorShuffle %409 %408 4 5 6 3 
                                             OpStore %90 %410 
                              f32_4 %411 = OpLoad %58 
                              f32_3 %412 = OpVectorShuffle %411 %411 0 1 2 
                              f32_4 %413 = OpLoad %90 
                              f32_3 %414 = OpVectorShuffle %413 %413 0 1 2 
                              f32_3 %415 = OpFAdd %412 %414 
                              f32_4 %416 = OpLoad %58 
                              f32_4 %417 = OpVectorShuffle %416 %415 4 5 6 3 
                                             OpStore %58 %417 
                              f32_4 %418 = OpLoad %109 
                              f32_3 %419 = OpVectorShuffle %418 %418 0 1 2 
                              f32_4 %420 = OpLoad %58 
                              f32_3 %421 = OpVectorShuffle %420 %420 0 1 2 
                              f32_3 %422 = OpFAdd %419 %421 
                              f32_4 %423 = OpLoad %58 
                              f32_4 %424 = OpVectorShuffle %423 %422 4 5 6 3 
                                             OpStore %58 %424 
                              f32_4 %427 = OpLoad %58 
                              f32_3 %428 = OpVectorShuffle %427 %427 0 1 2 
                              f32_3 %429 = OpFMul %428 %311 
                              f32_3 %430 = OpLoad %9 
                              f32_3 %431 = OpFAdd %429 %430 
                              f32_4 %432 = OpLoad %426 
                              f32_4 %433 = OpVectorShuffle %432 %431 4 5 6 3 
                                             OpStore %426 %433 
                        Output f32* %437 = OpAccessChain %426 %435 
                                             OpStore %437 %62 
                                             OpReturn
                                             OpFunctionEnd
"
}
}
Program "fp" {
SubProgram "d3d11 " {
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
""
}
SubProgram "vulkan " {
""
}
SubProgram "d3d11 " {
Keywords { "AB_HIGH_PRECISION" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "AB_HIGH_PRECISION" }
""
}
SubProgram "vulkan " {
Keywords { "AB_HIGH_PRECISION" }
""
}
}
}
 Pass {
  Name "frag_downsampler_temp_filter_with_karis"
  ZTest Always
  ZWrite Off
  Cull Off
  GpuProgramID 849705
Program "vp" {
SubProgram "d3d11 " {
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in  vec4 in_POSITION0;
in  vec2 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BloomRange;
uniform 	vec4 _MainTex_TexelSize;
uniform 	float _TempFilterValue;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
UNITY_LOCATION(1) uniform  sampler2D _AnamorphicRTS0;
in  vec2 vs_TEXCOORD0;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
vec4 u_xlat6;
vec4 u_xlat7;
vec4 u_xlat8;
float u_xlat27;
void main()
{
    u_xlat0.xy = _MainTex_TexelSize.xy * vec2(2.0, 2.0) + vs_TEXCOORD0.xy;
    u_xlat0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0 = texture(_MainTex, u_xlat0.xy);
    u_xlat0.xyz = u_xlat0.xyz * _BloomRange.xxx;
    u_xlat1.xy = _MainTex_TexelSize.xy * vec2(0.0, 2.0) + vs_TEXCOORD0.xy;
    u_xlat1.xy = u_xlat1.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1 = texture(_MainTex, u_xlat1.xy);
    u_xlat1.xyz = u_xlat1.xyz * _BloomRange.xxx;
    u_xlat2 = _MainTex_TexelSize.xyxy * vec4(2.0, 0.0, -2.0, 2.0) + vs_TEXCOORD0.xyxy;
    u_xlat2 = u_xlat2 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
    u_xlat3 = texture(_MainTex, u_xlat2.xy);
    u_xlat2 = texture(_MainTex, u_xlat2.zw);
    u_xlat3.xyz = u_xlat3.xyz * _BloomRange.xxx;
    u_xlat4.xyz = u_xlat3.www * u_xlat3.xyz;
    u_xlat5.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat6 = texture(_MainTex, u_xlat5.xy);
    u_xlat5 = texture(_AnamorphicRTS0, u_xlat5.xy);
    u_xlat6.xyz = u_xlat6.xyz * _BloomRange.xxx;
    u_xlat4.xyz = u_xlat6.xyz * u_xlat6.www + u_xlat4.xyz;
    u_xlat4.xyz = u_xlat1.xyz * u_xlat1.www + u_xlat4.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat0.www + u_xlat4.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(0.25, 0.25, 0.25);
    u_xlat27 = dot(u_xlat0.xyz, vec3(0.0396819152, 0.45802179, 0.00609653955));
    u_xlat27 = u_xlat27 + 1.0;
    u_xlat27 = float(1.0) / u_xlat27;
    u_xlat0.xyz = vec3(u_xlat27) * u_xlat0.xyz;
    u_xlat2.xyz = u_xlat2.xyz * _BloomRange.xxx;
    u_xlat4.xyz = u_xlat6.www * u_xlat6.xyz;
    u_xlat7 = _MainTex_TexelSize.xyxy * vec4(2.0, -2.0, -2.0, 0.0) + vs_TEXCOORD0.xyxy;
    u_xlat7 = u_xlat7 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
    u_xlat8 = texture(_MainTex, u_xlat7.zw);
    u_xlat7 = texture(_MainTex, u_xlat7.xy);
    u_xlat8.xyz = u_xlat8.xyz * _BloomRange.xxx;
    u_xlat4.xyz = u_xlat8.xyz * u_xlat8.www + u_xlat4.xyz;
    u_xlat2.xyz = u_xlat2.xyz * u_xlat2.www + u_xlat4.xyz;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat1.www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25);
    u_xlat27 = dot(u_xlat1.xyz, vec3(0.0396819152, 0.45802179, 0.00609653955));
    u_xlat27 = u_xlat27 + 1.0;
    u_xlat27 = float(1.0) / u_xlat27;
    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat27) + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat7.xyz * _BloomRange.xxx;
    u_xlat2 = _MainTex_TexelSize.xyxy * vec4(-2.0, -2.0, 0.0, -2.0) + vs_TEXCOORD0.xyxy;
    u_xlat2 = u_xlat2 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
    u_xlat4 = texture(_MainTex, u_xlat2.zw);
    u_xlat2 = texture(_MainTex, u_xlat2.xy);
    u_xlat4.xyz = u_xlat4.xyz * _BloomRange.xxx;
    u_xlat4.xyz = u_xlat4.www * u_xlat4.xyz;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat7.www + u_xlat4.xyz;
    u_xlat1.xyz = u_xlat6.xyz * u_xlat6.www + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat3.xyz * u_xlat3.www + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25);
    u_xlat27 = dot(u_xlat1.xyz, vec3(0.0396819152, 0.45802179, 0.00609653955));
    u_xlat27 = u_xlat27 + 1.0;
    u_xlat27 = float(1.0) / u_xlat27;
    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat27) + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat2.xyz * _BloomRange.xxx;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.www + u_xlat4.xyz;
    u_xlat1.xyz = u_xlat8.xyz * u_xlat8.www + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat6.xyz * u_xlat6.www + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25);
    u_xlat27 = dot(u_xlat1.xyz, vec3(0.0396819152, 0.45802179, 0.00609653955));
    u_xlat27 = u_xlat27 + 1.0;
    u_xlat27 = float(1.0) / u_xlat27;
    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat27) + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(0.125, 0.125, 0.125);
    u_xlat1 = _MainTex_TexelSize.xyxy * vec4(1.0, -1.0, -1.0, 1.0) + vs_TEXCOORD0.xyxy;
    u_xlat1 = u_xlat1 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
    u_xlat2 = texture(_MainTex, u_xlat1.xy);
    u_xlat1 = texture(_MainTex, u_xlat1.zw);
    u_xlat2.xyz = u_xlat2.xyz * _BloomRange.xxx;
    u_xlat2.xyz = u_xlat2.www * u_xlat2.xyz;
    u_xlat3.xy = vs_TEXCOORD0.xy + (-_MainTex_TexelSize.xy);
    u_xlat3.xy = u_xlat3.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat3 = texture(_MainTex, u_xlat3.xy);
    u_xlat3.xyz = u_xlat3.xyz * _BloomRange.xxx;
    u_xlat2.xyz = u_xlat3.xyz * u_xlat3.www + u_xlat2.xyz;
    u_xlat3.xy = vs_TEXCOORD0.xy + _MainTex_TexelSize.xy;
    u_xlat3.xy = u_xlat3.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat3 = texture(_MainTex, u_xlat3.xy);
    u_xlat3.xyz = u_xlat3.xyz * _BloomRange.xxx;
    u_xlat2.xyz = u_xlat3.xyz * u_xlat3.www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _BloomRange.xxx;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat1.www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25);
    u_xlat27 = dot(u_xlat1.xyz, vec3(0.0396819152, 0.45802179, 0.00609653955));
    u_xlat27 = u_xlat27 + 1.0;
    u_xlat27 = float(1.0) / u_xlat27;
    u_xlat1.xyz = vec3(u_xlat27) * u_xlat1.xyz;
    u_xlat0.xyz = u_xlat1.xyz * vec3(0.5, 0.5, 0.5) + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * _BloomRange.yyy;
    u_xlat27 = max(u_xlat0.y, u_xlat0.x);
    u_xlat1.x = max(u_xlat0.z, 9.99999997e-07);
    u_xlat27 = max(u_xlat27, u_xlat1.x);
    u_xlat27 = min(u_xlat27, 1.0);
    u_xlat27 = u_xlat27 * 255.0;
    u_xlat27 = ceil(u_xlat27);
    u_xlat1.w = u_xlat27 * 0.00392156886;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat1.www;
    u_xlat0 = (-u_xlat1) + u_xlat5;
    SV_Target0 = vec4(_TempFilterValue) * u_xlat0 + u_xlat1;
    return;
}

#endif
"
}
SubProgram "vulkan " {
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 94
; Schema: 0
                                              OpCapability Shader 
                                       %1 = OpExtInstImport "GLSL.std.450" 
                                              OpMemoryModel Logical GLSL450 
                                              OpEntryPoint Vertex %4 "main" %11 %72 %84 %86 
                                              OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                              OpDecorate %11 Location 11 
                                              OpDecorate %16 ArrayStride 16 
                                              OpDecorate %17 ArrayStride 17 
                                              OpMemberDecorate %18 0 Offset 18 
                                              OpMemberDecorate %18 1 Offset 18 
                                              OpDecorate %18 Block 
                                              OpDecorate %20 DescriptorSet 20 
                                              OpDecorate %20 Binding 20 
                                              OpMemberDecorate %70 0 BuiltIn 70 
                                              OpMemberDecorate %70 1 BuiltIn 70 
                                              OpMemberDecorate %70 2 BuiltIn 70 
                                              OpDecorate %70 Block 
                                              OpDecorate vs_TEXCOORD0 Location 84 
                                              OpDecorate %86 Location 86 
                                       %2 = OpTypeVoid 
                                       %3 = OpTypeFunction %2 
                                       %6 = OpTypeFloat 32 
                                       %7 = OpTypeVector %6 4 
                                       %8 = OpTypePointer Private %7 
                        Private f32_4* %9 = OpVariable Private 
                                      %10 = OpTypePointer Input %7 
                         Input f32_4* %11 = OpVariable Input 
                                      %14 = OpTypeInt 32 0 
                                  u32 %15 = OpConstant 4 
                                      %16 = OpTypeArray %7 %15 
                                      %17 = OpTypeArray %7 %15 
                                      %18 = OpTypeStruct %16 %17 
                                      %19 = OpTypePointer Uniform %18 
Uniform struct {f32_4[4]; f32_4[4];}* %20 = OpVariable Uniform 
                                      %21 = OpTypeInt 32 1 
                                  i32 %22 = OpConstant 0 
                                  i32 %23 = OpConstant 1 
                                      %24 = OpTypePointer Uniform %7 
                                  i32 %35 = OpConstant 2 
                                  i32 %44 = OpConstant 3 
                       Private f32_4* %48 = OpVariable Private 
                                  u32 %68 = OpConstant 1 
                                      %69 = OpTypeArray %6 %68 
                                      %70 = OpTypeStruct %7 %6 %69 
                                      %71 = OpTypePointer Output %70 
 Output struct {f32_4; f32; f32[1];}* %72 = OpVariable Output 
                                      %80 = OpTypePointer Output %7 
                                      %82 = OpTypeVector %6 2 
                                      %83 = OpTypePointer Output %82 
               Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                      %85 = OpTypePointer Input %82 
                         Input f32_2* %86 = OpVariable Input 
                                      %88 = OpTypePointer Output %6 
                                  void %4 = OpFunction None %3 
                                       %5 = OpLabel 
                                f32_4 %12 = OpLoad %11 
                                f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                       Uniform f32_4* %25 = OpAccessChain %20 %22 %23 
                                f32_4 %26 = OpLoad %25 
                                f32_4 %27 = OpFMul %13 %26 
                                              OpStore %9 %27 
                       Uniform f32_4* %28 = OpAccessChain %20 %22 %22 
                                f32_4 %29 = OpLoad %28 
                                f32_4 %30 = OpLoad %11 
                                f32_4 %31 = OpVectorShuffle %30 %30 0 0 0 0 
                                f32_4 %32 = OpFMul %29 %31 
                                f32_4 %33 = OpLoad %9 
                                f32_4 %34 = OpFAdd %32 %33 
                                              OpStore %9 %34 
                       Uniform f32_4* %36 = OpAccessChain %20 %22 %35 
                                f32_4 %37 = OpLoad %36 
                                f32_4 %38 = OpLoad %11 
                                f32_4 %39 = OpVectorShuffle %38 %38 2 2 2 2 
                                f32_4 %40 = OpFMul %37 %39 
                                f32_4 %41 = OpLoad %9 
                                f32_4 %42 = OpFAdd %40 %41 
                                              OpStore %9 %42 
                                f32_4 %43 = OpLoad %9 
                       Uniform f32_4* %45 = OpAccessChain %20 %22 %44 
                                f32_4 %46 = OpLoad %45 
                                f32_4 %47 = OpFAdd %43 %46 
                                              OpStore %9 %47 
                                f32_4 %49 = OpLoad %9 
                                f32_4 %50 = OpVectorShuffle %49 %49 1 1 1 1 
                       Uniform f32_4* %51 = OpAccessChain %20 %23 %23 
                                f32_4 %52 = OpLoad %51 
                                f32_4 %53 = OpFMul %50 %52 
                                              OpStore %48 %53 
                       Uniform f32_4* %54 = OpAccessChain %20 %23 %22 
                                f32_4 %55 = OpLoad %54 
                                f32_4 %56 = OpLoad %9 
                                f32_4 %57 = OpVectorShuffle %56 %56 0 0 0 0 
                                f32_4 %58 = OpFMul %55 %57 
                                f32_4 %59 = OpLoad %48 
                                f32_4 %60 = OpFAdd %58 %59 
                                              OpStore %48 %60 
                       Uniform f32_4* %61 = OpAccessChain %20 %23 %35 
                                f32_4 %62 = OpLoad %61 
                                f32_4 %63 = OpLoad %9 
                                f32_4 %64 = OpVectorShuffle %63 %63 2 2 2 2 
                                f32_4 %65 = OpFMul %62 %64 
                                f32_4 %66 = OpLoad %48 
                                f32_4 %67 = OpFAdd %65 %66 
                                              OpStore %48 %67 
                       Uniform f32_4* %73 = OpAccessChain %20 %23 %44 
                                f32_4 %74 = OpLoad %73 
                                f32_4 %75 = OpLoad %9 
                                f32_4 %76 = OpVectorShuffle %75 %75 3 3 3 3 
                                f32_4 %77 = OpFMul %74 %76 
                                f32_4 %78 = OpLoad %48 
                                f32_4 %79 = OpFAdd %77 %78 
                        Output f32_4* %81 = OpAccessChain %72 %22 
                                              OpStore %81 %79 
                                f32_2 %87 = OpLoad %86 
                                              OpStore vs_TEXCOORD0 %87 
                          Output f32* %89 = OpAccessChain %72 %22 %68 
                                  f32 %90 = OpLoad %89 
                                  f32 %91 = OpFNegate %90 
                          Output f32* %92 = OpAccessChain %72 %22 %68 
                                              OpStore %92 %91 
                                              OpReturn
                                              OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 760
; Schema: 0
                                                    OpCapability Shader 
                                             %1 = OpExtInstImport "GLSL.std.450" 
                                                    OpMemoryModel Logical GLSL450 
                                                    OpEntryPoint Fragment %4 "main" %24 %749 
                                                    OpExecutionMode %4 OriginUpperLeft 
                                                    OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                    OpMemberDecorate %10 0 Offset 10 
                                                    OpMemberDecorate %10 1 Offset 10 
                                                    OpMemberDecorate %10 2 Offset 10 
                                                    OpMemberDecorate %10 3 Offset 10 
                                                    OpDecorate %10 Block 
                                                    OpDecorate %12 DescriptorSet 12 
                                                    OpDecorate %12 Binding 12 
                                                    OpDecorate vs_TEXCOORD0 Location 24 
                                                    OpDecorate %44 DescriptorSet 44 
                                                    OpDecorate %44 Binding 44 
                                                    OpDecorate %48 DescriptorSet 48 
                                                    OpDecorate %48 Binding 48 
                                                    OpDecorate %169 DescriptorSet 169 
                                                    OpDecorate %169 Binding 169 
                                                    OpDecorate %171 DescriptorSet 171 
                                                    OpDecorate %171 Binding 171 
                                                    OpDecorate %749 Location 749 
                                             %2 = OpTypeVoid 
                                             %3 = OpTypeFunction %2 
                                             %6 = OpTypeFloat 32 
                                             %7 = OpTypeVector %6 4 
                                             %8 = OpTypePointer Private %7 
                              Private f32_4* %9 = OpVariable Private 
                                            %10 = OpTypeStruct %7 %7 %7 %6 
                                            %11 = OpTypePointer Uniform %10 
Uniform struct {f32_4; f32_4; f32_4; f32;}* %12 = OpVariable Uniform 
                                            %13 = OpTypeInt 32 1 
                                        i32 %14 = OpConstant 2 
                                            %15 = OpTypeVector %6 2 
                                            %16 = OpTypePointer Uniform %7 
                                        f32 %20 = OpConstant 3.674022E-40 
                                      f32_2 %21 = OpConstantComposite %20 %20 
                                            %23 = OpTypePointer Input %15 
                      Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                        i32 %31 = OpConstant 0 
                                            %42 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                            %43 = OpTypePointer UniformConstant %42 
       UniformConstant read_only Texture2D* %44 = OpVariable UniformConstant 
                                            %46 = OpTypeSampler 
                                            %47 = OpTypePointer UniformConstant %46 
                   UniformConstant sampler* %48 = OpVariable UniformConstant 
                                            %50 = OpTypeSampledImage %42 
                                            %55 = OpTypeVector %6 3 
                                        i32 %58 = OpConstant 1 
                             Private f32_4* %65 = OpVariable Private 
                                        f32 %69 = OpConstant 3.674022E-40 
                                      f32_2 %70 = OpConstantComposite %69 %20 
                            Private f32_4* %102 = OpVariable Private 
                                       f32 %106 = OpConstant 3.674022E-40 
                                     f32_4 %107 = OpConstantComposite %20 %69 %106 %20 
                            Private f32_4* %121 = OpVariable Private 
                            Private f32_4* %142 = OpVariable Private 
                            Private f32_4* %150 = OpVariable Private 
                            Private f32_4* %162 = OpVariable Private 
      UniformConstant read_only Texture2D* %169 = OpVariable UniformConstant 
                  UniformConstant sampler* %171 = OpVariable UniformConstant 
                                       f32 %217 = OpConstant 3.674022E-40 
                                     f32_3 %218 = OpConstantComposite %217 %217 %217 
                                           %222 = OpTypePointer Private %6 
                              Private f32* %223 = OpVariable Private 
                                       f32 %226 = OpConstant 3.674022E-40 
                                       f32 %227 = OpConstant 3.674022E-40 
                                       f32 %228 = OpConstant 3.674022E-40 
                                     f32_3 %229 = OpConstantComposite %226 %227 %228 
                                       f32 %232 = OpConstant 3.674022E-40 
                            Private f32_4* %258 = OpVariable Private 
                                     f32_4 %262 = OpConstantComposite %20 %106 %106 %69 
                            Private f32_4* %276 = OpVariable Private 
                                     f32_4 %360 = OpConstantComposite %106 %106 %69 %106 
                                       f32 %515 = OpConstant 3.674022E-40 
                                     f32_3 %516 = OpConstantComposite %515 %515 %515 
                                       f32 %523 = OpConstant 3.674022E-40 
                                     f32_4 %524 = OpConstantComposite %232 %523 %523 %232 
                                       f32 %691 = OpConstant 3.674022E-40 
                                     f32_3 %692 = OpConstantComposite %691 %691 %691 
                                           %707 = OpTypeInt 32 0 
                                       u32 %708 = OpConstant 1 
                                       u32 %711 = OpConstant 0 
                                       u32 %715 = OpConstant 2 
                                       f32 %718 = OpConstant 3.674022E-40 
                                       f32 %728 = OpConstant 3.674022E-40 
                                       f32 %733 = OpConstant 3.674022E-40 
                                       u32 %735 = OpConstant 3 
                                           %748 = OpTypePointer Output %7 
                             Output f32_4* %749 = OpVariable Output 
                                       i32 %750 = OpConstant 3 
                                           %751 = OpTypePointer Uniform %6 
                                        void %4 = OpFunction None %3 
                                             %5 = OpLabel 
                             Uniform f32_4* %17 = OpAccessChain %12 %14 
                                      f32_4 %18 = OpLoad %17 
                                      f32_2 %19 = OpVectorShuffle %18 %18 0 1 
                                      f32_2 %22 = OpFMul %19 %21 
                                      f32_2 %25 = OpLoad vs_TEXCOORD0 
                                      f32_2 %26 = OpFAdd %22 %25 
                                      f32_4 %27 = OpLoad %9 
                                      f32_4 %28 = OpVectorShuffle %27 %26 4 5 2 3 
                                                    OpStore %9 %28 
                                      f32_4 %29 = OpLoad %9 
                                      f32_2 %30 = OpVectorShuffle %29 %29 0 1 
                             Uniform f32_4* %32 = OpAccessChain %12 %31 
                                      f32_4 %33 = OpLoad %32 
                                      f32_2 %34 = OpVectorShuffle %33 %33 0 1 
                                      f32_2 %35 = OpFMul %30 %34 
                             Uniform f32_4* %36 = OpAccessChain %12 %31 
                                      f32_4 %37 = OpLoad %36 
                                      f32_2 %38 = OpVectorShuffle %37 %37 2 3 
                                      f32_2 %39 = OpFAdd %35 %38 
                                      f32_4 %40 = OpLoad %9 
                                      f32_4 %41 = OpVectorShuffle %40 %39 4 5 2 3 
                                                    OpStore %9 %41 
                        read_only Texture2D %45 = OpLoad %44 
                                    sampler %49 = OpLoad %48 
                 read_only Texture2DSampled %51 = OpSampledImage %45 %49 
                                      f32_4 %52 = OpLoad %9 
                                      f32_2 %53 = OpVectorShuffle %52 %52 0 1 
                                      f32_4 %54 = OpImageSampleImplicitLod %51 %53 
                                                    OpStore %9 %54 
                                      f32_4 %56 = OpLoad %9 
                                      f32_3 %57 = OpVectorShuffle %56 %56 0 1 2 
                             Uniform f32_4* %59 = OpAccessChain %12 %58 
                                      f32_4 %60 = OpLoad %59 
                                      f32_3 %61 = OpVectorShuffle %60 %60 0 0 0 
                                      f32_3 %62 = OpFMul %57 %61 
                                      f32_4 %63 = OpLoad %9 
                                      f32_4 %64 = OpVectorShuffle %63 %62 4 5 6 3 
                                                    OpStore %9 %64 
                             Uniform f32_4* %66 = OpAccessChain %12 %14 
                                      f32_4 %67 = OpLoad %66 
                                      f32_2 %68 = OpVectorShuffle %67 %67 0 1 
                                      f32_2 %71 = OpFMul %68 %70 
                                      f32_2 %72 = OpLoad vs_TEXCOORD0 
                                      f32_2 %73 = OpFAdd %71 %72 
                                      f32_4 %74 = OpLoad %65 
                                      f32_4 %75 = OpVectorShuffle %74 %73 4 5 2 3 
                                                    OpStore %65 %75 
                                      f32_4 %76 = OpLoad %65 
                                      f32_2 %77 = OpVectorShuffle %76 %76 0 1 
                             Uniform f32_4* %78 = OpAccessChain %12 %31 
                                      f32_4 %79 = OpLoad %78 
                                      f32_2 %80 = OpVectorShuffle %79 %79 0 1 
                                      f32_2 %81 = OpFMul %77 %80 
                             Uniform f32_4* %82 = OpAccessChain %12 %31 
                                      f32_4 %83 = OpLoad %82 
                                      f32_2 %84 = OpVectorShuffle %83 %83 2 3 
                                      f32_2 %85 = OpFAdd %81 %84 
                                      f32_4 %86 = OpLoad %65 
                                      f32_4 %87 = OpVectorShuffle %86 %85 4 5 2 3 
                                                    OpStore %65 %87 
                        read_only Texture2D %88 = OpLoad %44 
                                    sampler %89 = OpLoad %48 
                 read_only Texture2DSampled %90 = OpSampledImage %88 %89 
                                      f32_4 %91 = OpLoad %65 
                                      f32_2 %92 = OpVectorShuffle %91 %91 0 1 
                                      f32_4 %93 = OpImageSampleImplicitLod %90 %92 
                                                    OpStore %65 %93 
                                      f32_4 %94 = OpLoad %65 
                                      f32_3 %95 = OpVectorShuffle %94 %94 0 1 2 
                             Uniform f32_4* %96 = OpAccessChain %12 %58 
                                      f32_4 %97 = OpLoad %96 
                                      f32_3 %98 = OpVectorShuffle %97 %97 0 0 0 
                                      f32_3 %99 = OpFMul %95 %98 
                                     f32_4 %100 = OpLoad %65 
                                     f32_4 %101 = OpVectorShuffle %100 %99 4 5 6 3 
                                                    OpStore %65 %101 
                            Uniform f32_4* %103 = OpAccessChain %12 %14 
                                     f32_4 %104 = OpLoad %103 
                                     f32_4 %105 = OpVectorShuffle %104 %104 0 1 0 1 
                                     f32_4 %108 = OpFMul %105 %107 
                                     f32_2 %109 = OpLoad vs_TEXCOORD0 
                                     f32_4 %110 = OpVectorShuffle %109 %109 0 1 0 1 
                                     f32_4 %111 = OpFAdd %108 %110 
                                                    OpStore %102 %111 
                                     f32_4 %112 = OpLoad %102 
                            Uniform f32_4* %113 = OpAccessChain %12 %31 
                                     f32_4 %114 = OpLoad %113 
                                     f32_4 %115 = OpVectorShuffle %114 %114 0 1 0 1 
                                     f32_4 %116 = OpFMul %112 %115 
                            Uniform f32_4* %117 = OpAccessChain %12 %31 
                                     f32_4 %118 = OpLoad %117 
                                     f32_4 %119 = OpVectorShuffle %118 %118 2 3 2 3 
                                     f32_4 %120 = OpFAdd %116 %119 
                                                    OpStore %102 %120 
                       read_only Texture2D %122 = OpLoad %44 
                                   sampler %123 = OpLoad %48 
                read_only Texture2DSampled %124 = OpSampledImage %122 %123 
                                     f32_4 %125 = OpLoad %102 
                                     f32_2 %126 = OpVectorShuffle %125 %125 0 1 
                                     f32_4 %127 = OpImageSampleImplicitLod %124 %126 
                                                    OpStore %121 %127 
                       read_only Texture2D %128 = OpLoad %44 
                                   sampler %129 = OpLoad %48 
                read_only Texture2DSampled %130 = OpSampledImage %128 %129 
                                     f32_4 %131 = OpLoad %102 
                                     f32_2 %132 = OpVectorShuffle %131 %131 2 3 
                                     f32_4 %133 = OpImageSampleImplicitLod %130 %132 
                                                    OpStore %102 %133 
                                     f32_4 %134 = OpLoad %121 
                                     f32_3 %135 = OpVectorShuffle %134 %134 0 1 2 
                            Uniform f32_4* %136 = OpAccessChain %12 %58 
                                     f32_4 %137 = OpLoad %136 
                                     f32_3 %138 = OpVectorShuffle %137 %137 0 0 0 
                                     f32_3 %139 = OpFMul %135 %138 
                                     f32_4 %140 = OpLoad %121 
                                     f32_4 %141 = OpVectorShuffle %140 %139 4 5 6 3 
                                                    OpStore %121 %141 
                                     f32_4 %143 = OpLoad %121 
                                     f32_3 %144 = OpVectorShuffle %143 %143 3 3 3 
                                     f32_4 %145 = OpLoad %121 
                                     f32_3 %146 = OpVectorShuffle %145 %145 0 1 2 
                                     f32_3 %147 = OpFMul %144 %146 
                                     f32_4 %148 = OpLoad %142 
                                     f32_4 %149 = OpVectorShuffle %148 %147 4 5 6 3 
                                                    OpStore %142 %149 
                                     f32_2 %151 = OpLoad vs_TEXCOORD0 
                            Uniform f32_4* %152 = OpAccessChain %12 %31 
                                     f32_4 %153 = OpLoad %152 
                                     f32_2 %154 = OpVectorShuffle %153 %153 0 1 
                                     f32_2 %155 = OpFMul %151 %154 
                            Uniform f32_4* %156 = OpAccessChain %12 %31 
                                     f32_4 %157 = OpLoad %156 
                                     f32_2 %158 = OpVectorShuffle %157 %157 2 3 
                                     f32_2 %159 = OpFAdd %155 %158 
                                     f32_4 %160 = OpLoad %150 
                                     f32_4 %161 = OpVectorShuffle %160 %159 4 5 2 3 
                                                    OpStore %150 %161 
                       read_only Texture2D %163 = OpLoad %44 
                                   sampler %164 = OpLoad %48 
                read_only Texture2DSampled %165 = OpSampledImage %163 %164 
                                     f32_4 %166 = OpLoad %150 
                                     f32_2 %167 = OpVectorShuffle %166 %166 0 1 
                                     f32_4 %168 = OpImageSampleImplicitLod %165 %167 
                                                    OpStore %162 %168 
                       read_only Texture2D %170 = OpLoad %169 
                                   sampler %172 = OpLoad %171 
                read_only Texture2DSampled %173 = OpSampledImage %170 %172 
                                     f32_4 %174 = OpLoad %150 
                                     f32_2 %175 = OpVectorShuffle %174 %174 0 1 
                                     f32_4 %176 = OpImageSampleImplicitLod %173 %175 
                                                    OpStore %150 %176 
                                     f32_4 %177 = OpLoad %162 
                                     f32_3 %178 = OpVectorShuffle %177 %177 0 1 2 
                            Uniform f32_4* %179 = OpAccessChain %12 %58 
                                     f32_4 %180 = OpLoad %179 
                                     f32_3 %181 = OpVectorShuffle %180 %180 0 0 0 
                                     f32_3 %182 = OpFMul %178 %181 
                                     f32_4 %183 = OpLoad %162 
                                     f32_4 %184 = OpVectorShuffle %183 %182 4 5 6 3 
                                                    OpStore %162 %184 
                                     f32_4 %185 = OpLoad %162 
                                     f32_3 %186 = OpVectorShuffle %185 %185 0 1 2 
                                     f32_4 %187 = OpLoad %162 
                                     f32_3 %188 = OpVectorShuffle %187 %187 3 3 3 
                                     f32_3 %189 = OpFMul %186 %188 
                                     f32_4 %190 = OpLoad %142 
                                     f32_3 %191 = OpVectorShuffle %190 %190 0 1 2 
                                     f32_3 %192 = OpFAdd %189 %191 
                                     f32_4 %193 = OpLoad %142 
                                     f32_4 %194 = OpVectorShuffle %193 %192 4 5 6 3 
                                                    OpStore %142 %194 
                                     f32_4 %195 = OpLoad %65 
                                     f32_3 %196 = OpVectorShuffle %195 %195 0 1 2 
                                     f32_4 %197 = OpLoad %65 
                                     f32_3 %198 = OpVectorShuffle %197 %197 3 3 3 
                                     f32_3 %199 = OpFMul %196 %198 
                                     f32_4 %200 = OpLoad %142 
                                     f32_3 %201 = OpVectorShuffle %200 %200 0 1 2 
                                     f32_3 %202 = OpFAdd %199 %201 
                                     f32_4 %203 = OpLoad %142 
                                     f32_4 %204 = OpVectorShuffle %203 %202 4 5 6 3 
                                                    OpStore %142 %204 
                                     f32_4 %205 = OpLoad %9 
                                     f32_3 %206 = OpVectorShuffle %205 %205 0 1 2 
                                     f32_4 %207 = OpLoad %9 
                                     f32_3 %208 = OpVectorShuffle %207 %207 3 3 3 
                                     f32_3 %209 = OpFMul %206 %208 
                                     f32_4 %210 = OpLoad %142 
                                     f32_3 %211 = OpVectorShuffle %210 %210 0 1 2 
                                     f32_3 %212 = OpFAdd %209 %211 
                                     f32_4 %213 = OpLoad %9 
                                     f32_4 %214 = OpVectorShuffle %213 %212 4 5 6 3 
                                                    OpStore %9 %214 
                                     f32_4 %215 = OpLoad %9 
                                     f32_3 %216 = OpVectorShuffle %215 %215 0 1 2 
                                     f32_3 %219 = OpFMul %216 %218 
                                     f32_4 %220 = OpLoad %9 
                                     f32_4 %221 = OpVectorShuffle %220 %219 4 5 6 3 
                                                    OpStore %9 %221 
                                     f32_4 %224 = OpLoad %9 
                                     f32_3 %225 = OpVectorShuffle %224 %224 0 1 2 
                                       f32 %230 = OpDot %225 %229 
                                                    OpStore %223 %230 
                                       f32 %231 = OpLoad %223 
                                       f32 %233 = OpFAdd %231 %232 
                                                    OpStore %223 %233 
                                       f32 %234 = OpLoad %223 
                                       f32 %235 = OpFDiv %232 %234 
                                                    OpStore %223 %235 
                                       f32 %236 = OpLoad %223 
                                     f32_3 %237 = OpCompositeConstruct %236 %236 %236 
                                     f32_4 %238 = OpLoad %9 
                                     f32_3 %239 = OpVectorShuffle %238 %238 0 1 2 
                                     f32_3 %240 = OpFMul %237 %239 
                                     f32_4 %241 = OpLoad %9 
                                     f32_4 %242 = OpVectorShuffle %241 %240 4 5 6 3 
                                                    OpStore %9 %242 
                                     f32_4 %243 = OpLoad %102 
                                     f32_3 %244 = OpVectorShuffle %243 %243 0 1 2 
                            Uniform f32_4* %245 = OpAccessChain %12 %58 
                                     f32_4 %246 = OpLoad %245 
                                     f32_3 %247 = OpVectorShuffle %246 %246 0 0 0 
                                     f32_3 %248 = OpFMul %244 %247 
                                     f32_4 %249 = OpLoad %102 
                                     f32_4 %250 = OpVectorShuffle %249 %248 4 5 6 3 
                                                    OpStore %102 %250 
                                     f32_4 %251 = OpLoad %162 
                                     f32_3 %252 = OpVectorShuffle %251 %251 3 3 3 
                                     f32_4 %253 = OpLoad %162 
                                     f32_3 %254 = OpVectorShuffle %253 %253 0 1 2 
                                     f32_3 %255 = OpFMul %252 %254 
                                     f32_4 %256 = OpLoad %142 
                                     f32_4 %257 = OpVectorShuffle %256 %255 4 5 6 3 
                                                    OpStore %142 %257 
                            Uniform f32_4* %259 = OpAccessChain %12 %14 
                                     f32_4 %260 = OpLoad %259 
                                     f32_4 %261 = OpVectorShuffle %260 %260 0 1 0 1 
                                     f32_4 %263 = OpFMul %261 %262 
                                     f32_2 %264 = OpLoad vs_TEXCOORD0 
                                     f32_4 %265 = OpVectorShuffle %264 %264 0 1 0 1 
                                     f32_4 %266 = OpFAdd %263 %265 
                                                    OpStore %258 %266 
                                     f32_4 %267 = OpLoad %258 
                            Uniform f32_4* %268 = OpAccessChain %12 %31 
                                     f32_4 %269 = OpLoad %268 
                                     f32_4 %270 = OpVectorShuffle %269 %269 0 1 0 1 
                                     f32_4 %271 = OpFMul %267 %270 
                            Uniform f32_4* %272 = OpAccessChain %12 %31 
                                     f32_4 %273 = OpLoad %272 
                                     f32_4 %274 = OpVectorShuffle %273 %273 2 3 2 3 
                                     f32_4 %275 = OpFAdd %271 %274 
                                                    OpStore %258 %275 
                       read_only Texture2D %277 = OpLoad %44 
                                   sampler %278 = OpLoad %48 
                read_only Texture2DSampled %279 = OpSampledImage %277 %278 
                                     f32_4 %280 = OpLoad %258 
                                     f32_2 %281 = OpVectorShuffle %280 %280 2 3 
                                     f32_4 %282 = OpImageSampleImplicitLod %279 %281 
                                                    OpStore %276 %282 
                       read_only Texture2D %283 = OpLoad %44 
                                   sampler %284 = OpLoad %48 
                read_only Texture2DSampled %285 = OpSampledImage %283 %284 
                                     f32_4 %286 = OpLoad %258 
                                     f32_2 %287 = OpVectorShuffle %286 %286 0 1 
                                     f32_4 %288 = OpImageSampleImplicitLod %285 %287 
                                                    OpStore %258 %288 
                                     f32_4 %289 = OpLoad %276 
                                     f32_3 %290 = OpVectorShuffle %289 %289 0 1 2 
                            Uniform f32_4* %291 = OpAccessChain %12 %58 
                                     f32_4 %292 = OpLoad %291 
                                     f32_3 %293 = OpVectorShuffle %292 %292 0 0 0 
                                     f32_3 %294 = OpFMul %290 %293 
                                     f32_4 %295 = OpLoad %276 
                                     f32_4 %296 = OpVectorShuffle %295 %294 4 5 6 3 
                                                    OpStore %276 %296 
                                     f32_4 %297 = OpLoad %276 
                                     f32_3 %298 = OpVectorShuffle %297 %297 0 1 2 
                                     f32_4 %299 = OpLoad %276 
                                     f32_3 %300 = OpVectorShuffle %299 %299 3 3 3 
                                     f32_3 %301 = OpFMul %298 %300 
                                     f32_4 %302 = OpLoad %142 
                                     f32_3 %303 = OpVectorShuffle %302 %302 0 1 2 
                                     f32_3 %304 = OpFAdd %301 %303 
                                     f32_4 %305 = OpLoad %142 
                                     f32_4 %306 = OpVectorShuffle %305 %304 4 5 6 3 
                                                    OpStore %142 %306 
                                     f32_4 %307 = OpLoad %102 
                                     f32_3 %308 = OpVectorShuffle %307 %307 0 1 2 
                                     f32_4 %309 = OpLoad %102 
                                     f32_3 %310 = OpVectorShuffle %309 %309 3 3 3 
                                     f32_3 %311 = OpFMul %308 %310 
                                     f32_4 %312 = OpLoad %142 
                                     f32_3 %313 = OpVectorShuffle %312 %312 0 1 2 
                                     f32_3 %314 = OpFAdd %311 %313 
                                     f32_4 %315 = OpLoad %102 
                                     f32_4 %316 = OpVectorShuffle %315 %314 4 5 6 3 
                                                    OpStore %102 %316 
                                     f32_4 %317 = OpLoad %65 
                                     f32_3 %318 = OpVectorShuffle %317 %317 0 1 2 
                                     f32_4 %319 = OpLoad %65 
                                     f32_3 %320 = OpVectorShuffle %319 %319 3 3 3 
                                     f32_3 %321 = OpFMul %318 %320 
                                     f32_4 %322 = OpLoad %102 
                                     f32_3 %323 = OpVectorShuffle %322 %322 0 1 2 
                                     f32_3 %324 = OpFAdd %321 %323 
                                     f32_4 %325 = OpLoad %65 
                                     f32_4 %326 = OpVectorShuffle %325 %324 4 5 6 3 
                                                    OpStore %65 %326 
                                     f32_4 %327 = OpLoad %65 
                                     f32_3 %328 = OpVectorShuffle %327 %327 0 1 2 
                                     f32_3 %329 = OpFMul %328 %218 
                                     f32_4 %330 = OpLoad %65 
                                     f32_4 %331 = OpVectorShuffle %330 %329 4 5 6 3 
                                                    OpStore %65 %331 
                                     f32_4 %332 = OpLoad %65 
                                     f32_3 %333 = OpVectorShuffle %332 %332 0 1 2 
                                       f32 %334 = OpDot %333 %229 
                                                    OpStore %223 %334 
                                       f32 %335 = OpLoad %223 
                                       f32 %336 = OpFAdd %335 %232 
                                                    OpStore %223 %336 
                                       f32 %337 = OpLoad %223 
                                       f32 %338 = OpFDiv %232 %337 
                                                    OpStore %223 %338 
                                     f32_4 %339 = OpLoad %65 
                                     f32_3 %340 = OpVectorShuffle %339 %339 0 1 2 
                                       f32 %341 = OpLoad %223 
                                     f32_3 %342 = OpCompositeConstruct %341 %341 %341 
                                     f32_3 %343 = OpFMul %340 %342 
                                     f32_4 %344 = OpLoad %9 
                                     f32_3 %345 = OpVectorShuffle %344 %344 0 1 2 
                                     f32_3 %346 = OpFAdd %343 %345 
                                     f32_4 %347 = OpLoad %9 
                                     f32_4 %348 = OpVectorShuffle %347 %346 4 5 6 3 
                                                    OpStore %9 %348 
                                     f32_4 %349 = OpLoad %258 
                                     f32_3 %350 = OpVectorShuffle %349 %349 0 1 2 
                            Uniform f32_4* %351 = OpAccessChain %12 %58 
                                     f32_4 %352 = OpLoad %351 
                                     f32_3 %353 = OpVectorShuffle %352 %352 0 0 0 
                                     f32_3 %354 = OpFMul %350 %353 
                                     f32_4 %355 = OpLoad %65 
                                     f32_4 %356 = OpVectorShuffle %355 %354 4 5 6 3 
                                                    OpStore %65 %356 
                            Uniform f32_4* %357 = OpAccessChain %12 %14 
                                     f32_4 %358 = OpLoad %357 
                                     f32_4 %359 = OpVectorShuffle %358 %358 0 1 0 1 
                                     f32_4 %361 = OpFMul %359 %360 
                                     f32_2 %362 = OpLoad vs_TEXCOORD0 
                                     f32_4 %363 = OpVectorShuffle %362 %362 0 1 0 1 
                                     f32_4 %364 = OpFAdd %361 %363 
                                                    OpStore %102 %364 
                                     f32_4 %365 = OpLoad %102 
                            Uniform f32_4* %366 = OpAccessChain %12 %31 
                                     f32_4 %367 = OpLoad %366 
                                     f32_4 %368 = OpVectorShuffle %367 %367 0 1 0 1 
                                     f32_4 %369 = OpFMul %365 %368 
                            Uniform f32_4* %370 = OpAccessChain %12 %31 
                                     f32_4 %371 = OpLoad %370 
                                     f32_4 %372 = OpVectorShuffle %371 %371 2 3 2 3 
                                     f32_4 %373 = OpFAdd %369 %372 
                                                    OpStore %102 %373 
                       read_only Texture2D %374 = OpLoad %44 
                                   sampler %375 = OpLoad %48 
                read_only Texture2DSampled %376 = OpSampledImage %374 %375 
                                     f32_4 %377 = OpLoad %102 
                                     f32_2 %378 = OpVectorShuffle %377 %377 2 3 
                                     f32_4 %379 = OpImageSampleImplicitLod %376 %378 
                                                    OpStore %142 %379 
                       read_only Texture2D %380 = OpLoad %44 
                                   sampler %381 = OpLoad %48 
                read_only Texture2DSampled %382 = OpSampledImage %380 %381 
                                     f32_4 %383 = OpLoad %102 
                                     f32_2 %384 = OpVectorShuffle %383 %383 0 1 
                                     f32_4 %385 = OpImageSampleImplicitLod %382 %384 
                                                    OpStore %102 %385 
                                     f32_4 %386 = OpLoad %142 
                                     f32_3 %387 = OpVectorShuffle %386 %386 0 1 2 
                            Uniform f32_4* %388 = OpAccessChain %12 %58 
                                     f32_4 %389 = OpLoad %388 
                                     f32_3 %390 = OpVectorShuffle %389 %389 0 0 0 
                                     f32_3 %391 = OpFMul %387 %390 
                                     f32_4 %392 = OpLoad %142 
                                     f32_4 %393 = OpVectorShuffle %392 %391 4 5 6 3 
                                                    OpStore %142 %393 
                                     f32_4 %394 = OpLoad %142 
                                     f32_3 %395 = OpVectorShuffle %394 %394 3 3 3 
                                     f32_4 %396 = OpLoad %142 
                                     f32_3 %397 = OpVectorShuffle %396 %396 0 1 2 
                                     f32_3 %398 = OpFMul %395 %397 
                                     f32_4 %399 = OpLoad %142 
                                     f32_4 %400 = OpVectorShuffle %399 %398 4 5 6 3 
                                                    OpStore %142 %400 
                                     f32_4 %401 = OpLoad %65 
                                     f32_3 %402 = OpVectorShuffle %401 %401 0 1 2 
                                     f32_4 %403 = OpLoad %258 
                                     f32_3 %404 = OpVectorShuffle %403 %403 3 3 3 
                                     f32_3 %405 = OpFMul %402 %404 
                                     f32_4 %406 = OpLoad %142 
                                     f32_3 %407 = OpVectorShuffle %406 %406 0 1 2 
                                     f32_3 %408 = OpFAdd %405 %407 
                                     f32_4 %409 = OpLoad %65 
                                     f32_4 %410 = OpVectorShuffle %409 %408 4 5 6 3 
                                                    OpStore %65 %410 
                                     f32_4 %411 = OpLoad %162 
                                     f32_3 %412 = OpVectorShuffle %411 %411 0 1 2 
                                     f32_4 %413 = OpLoad %162 
                                     f32_3 %414 = OpVectorShuffle %413 %413 3 3 3 
                                     f32_3 %415 = OpFMul %412 %414 
                                     f32_4 %416 = OpLoad %65 
                                     f32_3 %417 = OpVectorShuffle %416 %416 0 1 2 
                                     f32_3 %418 = OpFAdd %415 %417 
                                     f32_4 %419 = OpLoad %65 
                                     f32_4 %420 = OpVectorShuffle %419 %418 4 5 6 3 
                                                    OpStore %65 %420 
                                     f32_4 %421 = OpLoad %121 
                                     f32_3 %422 = OpVectorShuffle %421 %421 0 1 2 
                                     f32_4 %423 = OpLoad %121 
                                     f32_3 %424 = OpVectorShuffle %423 %423 3 3 3 
                                     f32_3 %425 = OpFMul %422 %424 
                                     f32_4 %426 = OpLoad %65 
                                     f32_3 %427 = OpVectorShuffle %426 %426 0 1 2 
                                     f32_3 %428 = OpFAdd %425 %427 
                                     f32_4 %429 = OpLoad %65 
                                     f32_4 %430 = OpVectorShuffle %429 %428 4 5 6 3 
                                                    OpStore %65 %430 
                                     f32_4 %431 = OpLoad %65 
                                     f32_3 %432 = OpVectorShuffle %431 %431 0 1 2 
                                     f32_3 %433 = OpFMul %432 %218 
                                     f32_4 %434 = OpLoad %65 
                                     f32_4 %435 = OpVectorShuffle %434 %433 4 5 6 3 
                                                    OpStore %65 %435 
                                     f32_4 %436 = OpLoad %65 
                                     f32_3 %437 = OpVectorShuffle %436 %436 0 1 2 
                                       f32 %438 = OpDot %437 %229 
                                                    OpStore %223 %438 
                                       f32 %439 = OpLoad %223 
                                       f32 %440 = OpFAdd %439 %232 
                                                    OpStore %223 %440 
                                       f32 %441 = OpLoad %223 
                                       f32 %442 = OpFDiv %232 %441 
                                                    OpStore %223 %442 
                                     f32_4 %443 = OpLoad %65 
                                     f32_3 %444 = OpVectorShuffle %443 %443 0 1 2 
                                       f32 %445 = OpLoad %223 
                                     f32_3 %446 = OpCompositeConstruct %445 %445 %445 
                                     f32_3 %447 = OpFMul %444 %446 
                                     f32_4 %448 = OpLoad %9 
                                     f32_3 %449 = OpVectorShuffle %448 %448 0 1 2 
                                     f32_3 %450 = OpFAdd %447 %449 
                                     f32_4 %451 = OpLoad %9 
                                     f32_4 %452 = OpVectorShuffle %451 %450 4 5 6 3 
                                                    OpStore %9 %452 
                                     f32_4 %453 = OpLoad %102 
                                     f32_3 %454 = OpVectorShuffle %453 %453 0 1 2 
                            Uniform f32_4* %455 = OpAccessChain %12 %58 
                                     f32_4 %456 = OpLoad %455 
                                     f32_3 %457 = OpVectorShuffle %456 %456 0 0 0 
                                     f32_3 %458 = OpFMul %454 %457 
                                     f32_4 %459 = OpLoad %65 
                                     f32_4 %460 = OpVectorShuffle %459 %458 4 5 6 3 
                                                    OpStore %65 %460 
                                     f32_4 %461 = OpLoad %65 
                                     f32_3 %462 = OpVectorShuffle %461 %461 0 1 2 
                                     f32_4 %463 = OpLoad %102 
                                     f32_3 %464 = OpVectorShuffle %463 %463 3 3 3 
                                     f32_3 %465 = OpFMul %462 %464 
                                     f32_4 %466 = OpLoad %142 
                                     f32_3 %467 = OpVectorShuffle %466 %466 0 1 2 
                                     f32_3 %468 = OpFAdd %465 %467 
                                     f32_4 %469 = OpLoad %65 
                                     f32_4 %470 = OpVectorShuffle %469 %468 4 5 6 3 
                                                    OpStore %65 %470 
                                     f32_4 %471 = OpLoad %276 
                                     f32_3 %472 = OpVectorShuffle %471 %471 0 1 2 
                                     f32_4 %473 = OpLoad %276 
                                     f32_3 %474 = OpVectorShuffle %473 %473 3 3 3 
                                     f32_3 %475 = OpFMul %472 %474 
                                     f32_4 %476 = OpLoad %65 
                                     f32_3 %477 = OpVectorShuffle %476 %476 0 1 2 
                                     f32_3 %478 = OpFAdd %475 %477 
                                     f32_4 %479 = OpLoad %65 
                                     f32_4 %480 = OpVectorShuffle %479 %478 4 5 6 3 
                                                    OpStore %65 %480 
                                     f32_4 %481 = OpLoad %162 
                                     f32_3 %482 = OpVectorShuffle %481 %481 0 1 2 
                                     f32_4 %483 = OpLoad %162 
                                     f32_3 %484 = OpVectorShuffle %483 %483 3 3 3 
                                     f32_3 %485 = OpFMul %482 %484 
                                     f32_4 %486 = OpLoad %65 
                                     f32_3 %487 = OpVectorShuffle %486 %486 0 1 2 
                                     f32_3 %488 = OpFAdd %485 %487 
                                     f32_4 %489 = OpLoad %65 
                                     f32_4 %490 = OpVectorShuffle %489 %488 4 5 6 3 
                                                    OpStore %65 %490 
                                     f32_4 %491 = OpLoad %65 
                                     f32_3 %492 = OpVectorShuffle %491 %491 0 1 2 
                                     f32_3 %493 = OpFMul %492 %218 
                                     f32_4 %494 = OpLoad %65 
                                     f32_4 %495 = OpVectorShuffle %494 %493 4 5 6 3 
                                                    OpStore %65 %495 
                                     f32_4 %496 = OpLoad %65 
                                     f32_3 %497 = OpVectorShuffle %496 %496 0 1 2 
                                       f32 %498 = OpDot %497 %229 
                                                    OpStore %223 %498 
                                       f32 %499 = OpLoad %223 
                                       f32 %500 = OpFAdd %499 %232 
                                                    OpStore %223 %500 
                                       f32 %501 = OpLoad %223 
                                       f32 %502 = OpFDiv %232 %501 
                                                    OpStore %223 %502 
                                     f32_4 %503 = OpLoad %65 
                                     f32_3 %504 = OpVectorShuffle %503 %503 0 1 2 
                                       f32 %505 = OpLoad %223 
                                     f32_3 %506 = OpCompositeConstruct %505 %505 %505 
                                     f32_3 %507 = OpFMul %504 %506 
                                     f32_4 %508 = OpLoad %9 
                                     f32_3 %509 = OpVectorShuffle %508 %508 0 1 2 
                                     f32_3 %510 = OpFAdd %507 %509 
                                     f32_4 %511 = OpLoad %9 
                                     f32_4 %512 = OpVectorShuffle %511 %510 4 5 6 3 
                                                    OpStore %9 %512 
                                     f32_4 %513 = OpLoad %9 
                                     f32_3 %514 = OpVectorShuffle %513 %513 0 1 2 
                                     f32_3 %517 = OpFMul %514 %516 
                                     f32_4 %518 = OpLoad %9 
                                     f32_4 %519 = OpVectorShuffle %518 %517 4 5 6 3 
                                                    OpStore %9 %519 
                            Uniform f32_4* %520 = OpAccessChain %12 %14 
                                     f32_4 %521 = OpLoad %520 
                                     f32_4 %522 = OpVectorShuffle %521 %521 0 1 0 1 
                                     f32_4 %525 = OpFMul %522 %524 
                                     f32_2 %526 = OpLoad vs_TEXCOORD0 
                                     f32_4 %527 = OpVectorShuffle %526 %526 0 1 0 1 
                                     f32_4 %528 = OpFAdd %525 %527 
                                                    OpStore %65 %528 
                                     f32_4 %529 = OpLoad %65 
                            Uniform f32_4* %530 = OpAccessChain %12 %31 
                                     f32_4 %531 = OpLoad %530 
                                     f32_4 %532 = OpVectorShuffle %531 %531 0 1 0 1 
                                     f32_4 %533 = OpFMul %529 %532 
                            Uniform f32_4* %534 = OpAccessChain %12 %31 
                                     f32_4 %535 = OpLoad %534 
                                     f32_4 %536 = OpVectorShuffle %535 %535 2 3 2 3 
                                     f32_4 %537 = OpFAdd %533 %536 
                                                    OpStore %65 %537 
                       read_only Texture2D %538 = OpLoad %44 
                                   sampler %539 = OpLoad %48 
                read_only Texture2DSampled %540 = OpSampledImage %538 %539 
                                     f32_4 %541 = OpLoad %65 
                                     f32_2 %542 = OpVectorShuffle %541 %541 0 1 
                                     f32_4 %543 = OpImageSampleImplicitLod %540 %542 
                                                    OpStore %102 %543 
                       read_only Texture2D %544 = OpLoad %44 
                                   sampler %545 = OpLoad %48 
                read_only Texture2DSampled %546 = OpSampledImage %544 %545 
                                     f32_4 %547 = OpLoad %65 
                                     f32_2 %548 = OpVectorShuffle %547 %547 2 3 
                                     f32_4 %549 = OpImageSampleImplicitLod %546 %548 
                                                    OpStore %65 %549 
                                     f32_4 %550 = OpLoad %102 
                                     f32_3 %551 = OpVectorShuffle %550 %550 0 1 2 
                            Uniform f32_4* %552 = OpAccessChain %12 %58 
                                     f32_4 %553 = OpLoad %552 
                                     f32_3 %554 = OpVectorShuffle %553 %553 0 0 0 
                                     f32_3 %555 = OpFMul %551 %554 
                                     f32_4 %556 = OpLoad %102 
                                     f32_4 %557 = OpVectorShuffle %556 %555 4 5 6 3 
                                                    OpStore %102 %557 
                                     f32_4 %558 = OpLoad %102 
                                     f32_3 %559 = OpVectorShuffle %558 %558 3 3 3 
                                     f32_4 %560 = OpLoad %102 
                                     f32_3 %561 = OpVectorShuffle %560 %560 0 1 2 
                                     f32_3 %562 = OpFMul %559 %561 
                                     f32_4 %563 = OpLoad %102 
                                     f32_4 %564 = OpVectorShuffle %563 %562 4 5 6 3 
                                                    OpStore %102 %564 
                                     f32_2 %565 = OpLoad vs_TEXCOORD0 
                            Uniform f32_4* %566 = OpAccessChain %12 %14 
                                     f32_4 %567 = OpLoad %566 
                                     f32_2 %568 = OpVectorShuffle %567 %567 0 1 
                                     f32_2 %569 = OpFNegate %568 
                                     f32_2 %570 = OpFAdd %565 %569 
                                     f32_4 %571 = OpLoad %121 
                                     f32_4 %572 = OpVectorShuffle %571 %570 4 5 2 3 
                                                    OpStore %121 %572 
                                     f32_4 %573 = OpLoad %121 
                                     f32_2 %574 = OpVectorShuffle %573 %573 0 1 
                            Uniform f32_4* %575 = OpAccessChain %12 %31 
                                     f32_4 %576 = OpLoad %575 
                                     f32_2 %577 = OpVectorShuffle %576 %576 0 1 
                                     f32_2 %578 = OpFMul %574 %577 
                            Uniform f32_4* %579 = OpAccessChain %12 %31 
                                     f32_4 %580 = OpLoad %579 
                                     f32_2 %581 = OpVectorShuffle %580 %580 2 3 
                                     f32_2 %582 = OpFAdd %578 %581 
                                     f32_4 %583 = OpLoad %121 
                                     f32_4 %584 = OpVectorShuffle %583 %582 4 5 2 3 
                                                    OpStore %121 %584 
                       read_only Texture2D %585 = OpLoad %44 
                                   sampler %586 = OpLoad %48 
                read_only Texture2DSampled %587 = OpSampledImage %585 %586 
                                     f32_4 %588 = OpLoad %121 
                                     f32_2 %589 = OpVectorShuffle %588 %588 0 1 
                                     f32_4 %590 = OpImageSampleImplicitLod %587 %589 
                                                    OpStore %121 %590 
                                     f32_4 %591 = OpLoad %121 
                                     f32_3 %592 = OpVectorShuffle %591 %591 0 1 2 
                            Uniform f32_4* %593 = OpAccessChain %12 %58 
                                     f32_4 %594 = OpLoad %593 
                                     f32_3 %595 = OpVectorShuffle %594 %594 0 0 0 
                                     f32_3 %596 = OpFMul %592 %595 
                                     f32_4 %597 = OpLoad %121 
                                     f32_4 %598 = OpVectorShuffle %597 %596 4 5 6 3 
                                                    OpStore %121 %598 
                                     f32_4 %599 = OpLoad %121 
                                     f32_3 %600 = OpVectorShuffle %599 %599 0 1 2 
                                     f32_4 %601 = OpLoad %121 
                                     f32_3 %602 = OpVectorShuffle %601 %601 3 3 3 
                                     f32_3 %603 = OpFMul %600 %602 
                                     f32_4 %604 = OpLoad %102 
                                     f32_3 %605 = OpVectorShuffle %604 %604 0 1 2 
                                     f32_3 %606 = OpFAdd %603 %605 
                                     f32_4 %607 = OpLoad %102 
                                     f32_4 %608 = OpVectorShuffle %607 %606 4 5 6 3 
                                                    OpStore %102 %608 
                                     f32_2 %609 = OpLoad vs_TEXCOORD0 
                            Uniform f32_4* %610 = OpAccessChain %12 %14 
                                     f32_4 %611 = OpLoad %610 
                                     f32_2 %612 = OpVectorShuffle %611 %611 0 1 
                                     f32_2 %613 = OpFAdd %609 %612 
                                     f32_4 %614 = OpLoad %121 
                                     f32_4 %615 = OpVectorShuffle %614 %613 4 5 2 3 
                                                    OpStore %121 %615 
                                     f32_4 %616 = OpLoad %121 
                                     f32_2 %617 = OpVectorShuffle %616 %616 0 1 
                            Uniform f32_4* %618 = OpAccessChain %12 %31 
                                     f32_4 %619 = OpLoad %618 
                                     f32_2 %620 = OpVectorShuffle %619 %619 0 1 
                                     f32_2 %621 = OpFMul %617 %620 
                            Uniform f32_4* %622 = OpAccessChain %12 %31 
                                     f32_4 %623 = OpLoad %622 
                                     f32_2 %624 = OpVectorShuffle %623 %623 2 3 
                                     f32_2 %625 = OpFAdd %621 %624 
                                     f32_4 %626 = OpLoad %121 
                                     f32_4 %627 = OpVectorShuffle %626 %625 4 5 2 3 
                                                    OpStore %121 %627 
                       read_only Texture2D %628 = OpLoad %44 
                                   sampler %629 = OpLoad %48 
                read_only Texture2DSampled %630 = OpSampledImage %628 %629 
                                     f32_4 %631 = OpLoad %121 
                                     f32_2 %632 = OpVectorShuffle %631 %631 0 1 
                                     f32_4 %633 = OpImageSampleImplicitLod %630 %632 
                                                    OpStore %121 %633 
                                     f32_4 %634 = OpLoad %121 
                                     f32_3 %635 = OpVectorShuffle %634 %634 0 1 2 
                            Uniform f32_4* %636 = OpAccessChain %12 %58 
                                     f32_4 %637 = OpLoad %636 
                                     f32_3 %638 = OpVectorShuffle %637 %637 0 0 0 
                                     f32_3 %639 = OpFMul %635 %638 
                                     f32_4 %640 = OpLoad %121 
                                     f32_4 %641 = OpVectorShuffle %640 %639 4 5 6 3 
                                                    OpStore %121 %641 
                                     f32_4 %642 = OpLoad %121 
                                     f32_3 %643 = OpVectorShuffle %642 %642 0 1 2 
                                     f32_4 %644 = OpLoad %121 
                                     f32_3 %645 = OpVectorShuffle %644 %644 3 3 3 
                                     f32_3 %646 = OpFMul %643 %645 
                                     f32_4 %647 = OpLoad %102 
                                     f32_3 %648 = OpVectorShuffle %647 %647 0 1 2 
                                     f32_3 %649 = OpFAdd %646 %648 
                                     f32_4 %650 = OpLoad %102 
                                     f32_4 %651 = OpVectorShuffle %650 %649 4 5 6 3 
                                                    OpStore %102 %651 
                                     f32_4 %652 = OpLoad %65 
                                     f32_3 %653 = OpVectorShuffle %652 %652 0 1 2 
                            Uniform f32_4* %654 = OpAccessChain %12 %58 
                                     f32_4 %655 = OpLoad %654 
                                     f32_3 %656 = OpVectorShuffle %655 %655 0 0 0 
                                     f32_3 %657 = OpFMul %653 %656 
                                     f32_4 %658 = OpLoad %65 
                                     f32_4 %659 = OpVectorShuffle %658 %657 4 5 6 3 
                                                    OpStore %65 %659 
                                     f32_4 %660 = OpLoad %65 
                                     f32_3 %661 = OpVectorShuffle %660 %660 0 1 2 
                                     f32_4 %662 = OpLoad %65 
                                     f32_3 %663 = OpVectorShuffle %662 %662 3 3 3 
                                     f32_3 %664 = OpFMul %661 %663 
                                     f32_4 %665 = OpLoad %102 
                                     f32_3 %666 = OpVectorShuffle %665 %665 0 1 2 
                                     f32_3 %667 = OpFAdd %664 %666 
                                     f32_4 %668 = OpLoad %65 
                                     f32_4 %669 = OpVectorShuffle %668 %667 4 5 6 3 
                                                    OpStore %65 %669 
                                     f32_4 %670 = OpLoad %65 
                                     f32_3 %671 = OpVectorShuffle %670 %670 0 1 2 
                                     f32_3 %672 = OpFMul %671 %218 
                                     f32_4 %673 = OpLoad %65 
                                     f32_4 %674 = OpVectorShuffle %673 %672 4 5 6 3 
                                                    OpStore %65 %674 
                                     f32_4 %675 = OpLoad %65 
                                     f32_3 %676 = OpVectorShuffle %675 %675 0 1 2 
                                       f32 %677 = OpDot %676 %229 
                                                    OpStore %223 %677 
                                       f32 %678 = OpLoad %223 
                                       f32 %679 = OpFAdd %678 %232 
                                                    OpStore %223 %679 
                                       f32 %680 = OpLoad %223 
                                       f32 %681 = OpFDiv %232 %680 
                                                    OpStore %223 %681 
                                       f32 %682 = OpLoad %223 
                                     f32_3 %683 = OpCompositeConstruct %682 %682 %682 
                                     f32_4 %684 = OpLoad %65 
                                     f32_3 %685 = OpVectorShuffle %684 %684 0 1 2 
                                     f32_3 %686 = OpFMul %683 %685 
                                     f32_4 %687 = OpLoad %65 
                                     f32_4 %688 = OpVectorShuffle %687 %686 4 5 6 3 
                                                    OpStore %65 %688 
                                     f32_4 %689 = OpLoad %65 
                                     f32_3 %690 = OpVectorShuffle %689 %689 0 1 2 
                                     f32_3 %693 = OpFMul %690 %692 
                                     f32_4 %694 = OpLoad %9 
                                     f32_3 %695 = OpVectorShuffle %694 %694 0 1 2 
                                     f32_3 %696 = OpFAdd %693 %695 
                                     f32_4 %697 = OpLoad %9 
                                     f32_4 %698 = OpVectorShuffle %697 %696 4 5 6 3 
                                                    OpStore %9 %698 
                                     f32_4 %699 = OpLoad %9 
                                     f32_3 %700 = OpVectorShuffle %699 %699 0 1 2 
                            Uniform f32_4* %701 = OpAccessChain %12 %58 
                                     f32_4 %702 = OpLoad %701 
                                     f32_3 %703 = OpVectorShuffle %702 %702 1 1 1 
                                     f32_3 %704 = OpFMul %700 %703 
                                     f32_4 %705 = OpLoad %9 
                                     f32_4 %706 = OpVectorShuffle %705 %704 4 5 6 3 
                                                    OpStore %9 %706 
                              Private f32* %709 = OpAccessChain %9 %708 
                                       f32 %710 = OpLoad %709 
                              Private f32* %712 = OpAccessChain %9 %711 
                                       f32 %713 = OpLoad %712 
                                       f32 %714 = OpExtInst %1 40 %710 %713 
                                                    OpStore %223 %714 
                              Private f32* %716 = OpAccessChain %9 %715 
                                       f32 %717 = OpLoad %716 
                                       f32 %719 = OpExtInst %1 40 %717 %718 
                              Private f32* %720 = OpAccessChain %65 %711 
                                                    OpStore %720 %719 
                                       f32 %721 = OpLoad %223 
                              Private f32* %722 = OpAccessChain %65 %711 
                                       f32 %723 = OpLoad %722 
                                       f32 %724 = OpExtInst %1 40 %721 %723 
                                                    OpStore %223 %724 
                                       f32 %725 = OpLoad %223 
                                       f32 %726 = OpExtInst %1 37 %725 %232 
                                                    OpStore %223 %726 
                                       f32 %727 = OpLoad %223 
                                       f32 %729 = OpFMul %727 %728 
                                                    OpStore %223 %729 
                                       f32 %730 = OpLoad %223 
                                       f32 %731 = OpExtInst %1 9 %730 
                                                    OpStore %223 %731 
                                       f32 %732 = OpLoad %223 
                                       f32 %734 = OpFMul %732 %733 
                              Private f32* %736 = OpAccessChain %65 %735 
                                                    OpStore %736 %734 
                                     f32_4 %737 = OpLoad %9 
                                     f32_3 %738 = OpVectorShuffle %737 %737 0 1 2 
                                     f32_4 %739 = OpLoad %65 
                                     f32_3 %740 = OpVectorShuffle %739 %739 3 3 3 
                                     f32_3 %741 = OpFDiv %738 %740 
                                     f32_4 %742 = OpLoad %65 
                                     f32_4 %743 = OpVectorShuffle %742 %741 4 5 6 3 
                                                    OpStore %65 %743 
                                     f32_4 %744 = OpLoad %65 
                                     f32_4 %745 = OpFNegate %744 
                                     f32_4 %746 = OpLoad %150 
                                     f32_4 %747 = OpFAdd %745 %746 
                                                    OpStore %9 %747 
                              Uniform f32* %752 = OpAccessChain %12 %750 
                                       f32 %753 = OpLoad %752 
                                     f32_4 %754 = OpCompositeConstruct %753 %753 %753 %753 
                                     f32_4 %755 = OpLoad %9 
                                     f32_4 %756 = OpFMul %754 %755 
                                     f32_4 %757 = OpLoad %65 
                                     f32_4 %758 = OpFAdd %756 %757 
                                                    OpStore %749 %758 
                                                    OpReturn
                                                    OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "AB_HIGH_PRECISION" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "AB_HIGH_PRECISION" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in  vec4 in_POSITION0;
in  vec2 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _MainTex_TexelSize;
uniform 	float _TempFilterValue;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
UNITY_LOCATION(1) uniform  sampler2D _AnamorphicRTS0;
in  vec2 vs_TEXCOORD0;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
vec4 u_xlat6;
vec4 u_xlat7;
vec3 u_xlat8;
float u_xlat27;
void main()
{
    u_xlat0.xy = _MainTex_TexelSize.xy * vec2(2.0, 2.0) + vs_TEXCOORD0.xy;
    u_xlat0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0 = texture(_MainTex, u_xlat0.xy);
    u_xlat1.xy = _MainTex_TexelSize.xy * vec2(0.0, 2.0) + vs_TEXCOORD0.xy;
    u_xlat1.xy = u_xlat1.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1 = texture(_MainTex, u_xlat1.xy);
    u_xlat2 = _MainTex_TexelSize.xyxy * vec4(2.0, 0.0, -2.0, 2.0) + vs_TEXCOORD0.xyxy;
    u_xlat2 = u_xlat2 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
    u_xlat3 = texture(_MainTex, u_xlat2.xy);
    u_xlat2 = texture(_MainTex, u_xlat2.zw);
    u_xlat4.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat5 = texture(_MainTex, u_xlat4.xy);
    u_xlat4 = texture(_AnamorphicRTS0, u_xlat4.xy);
    u_xlat6.xyz = u_xlat3.xyz + u_xlat5.xyz;
    u_xlat6.xyz = u_xlat1.xyz + u_xlat6.xyz;
    u_xlat0.xyz = u_xlat0.xyz + u_xlat6.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(0.25, 0.25, 0.25);
    u_xlat27 = dot(u_xlat0.xyz, vec3(0.0396819152, 0.45802179, 0.00609653955));
    u_xlat27 = u_xlat27 + 1.0;
    u_xlat27 = float(1.0) / u_xlat27;
    u_xlat0.xyz = vec3(u_xlat27) * u_xlat0.xyz;
    u_xlat6 = _MainTex_TexelSize.xyxy * vec4(2.0, -2.0, -2.0, 0.0) + vs_TEXCOORD0.xyxy;
    u_xlat6 = u_xlat6 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
    u_xlat7 = texture(_MainTex, u_xlat6.zw);
    u_xlat6 = texture(_MainTex, u_xlat6.xy);
    u_xlat8.xyz = u_xlat5.xyz + u_xlat7.xyz;
    u_xlat2.xyz = u_xlat2.xyz + u_xlat8.xyz;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25);
    u_xlat27 = dot(u_xlat1.xyz, vec3(0.0396819152, 0.45802179, 0.00609653955));
    u_xlat27 = u_xlat27 + 1.0;
    u_xlat27 = float(1.0) / u_xlat27;
    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat27) + u_xlat0.xyz;
    u_xlat1 = _MainTex_TexelSize.xyxy * vec4(-2.0, -2.0, 0.0, -2.0) + vs_TEXCOORD0.xyxy;
    u_xlat1 = u_xlat1 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
    u_xlat2 = texture(_MainTex, u_xlat1.zw);
    u_xlat1 = texture(_MainTex, u_xlat1.xy);
    u_xlat1.xyz = u_xlat2.xyz + u_xlat1.xyz;
    u_xlat2.xyz = u_xlat6.xyz + u_xlat2.xyz;
    u_xlat2.xyz = u_xlat5.xyz + u_xlat2.xyz;
    u_xlat2.xyz = u_xlat3.xyz + u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz * vec3(0.25, 0.25, 0.25);
    u_xlat1.xyz = u_xlat7.xyz + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat5.xyz + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25);
    u_xlat27 = dot(u_xlat2.xyz, vec3(0.0396819152, 0.45802179, 0.00609653955));
    u_xlat27 = u_xlat27 + 1.0;
    u_xlat27 = float(1.0) / u_xlat27;
    u_xlat0.xyz = u_xlat2.xyz * vec3(u_xlat27) + u_xlat0.xyz;
    u_xlat27 = dot(u_xlat1.xyz, vec3(0.0396819152, 0.45802179, 0.00609653955));
    u_xlat27 = u_xlat27 + 1.0;
    u_xlat27 = float(1.0) / u_xlat27;
    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat27) + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(0.125, 0.125, 0.125);
    u_xlat1.xy = vs_TEXCOORD0.xy + _MainTex_TexelSize.xy;
    u_xlat1.xy = u_xlat1.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1 = texture(_MainTex, u_xlat1.xy);
    u_xlat2.xy = vs_TEXCOORD0.xy + (-_MainTex_TexelSize.xy);
    u_xlat2.xy = u_xlat2.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat2 = texture(_MainTex, u_xlat2.xy);
    u_xlat3 = _MainTex_TexelSize.xyxy * vec4(1.0, -1.0, -1.0, 1.0) + vs_TEXCOORD0.xyxy;
    u_xlat3 = u_xlat3 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
    u_xlat5 = texture(_MainTex, u_xlat3.xy);
    u_xlat3 = texture(_MainTex, u_xlat3.zw);
    u_xlat2.xyz = u_xlat2.xyz + u_xlat5.xyz;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat3.xyz + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25);
    u_xlat27 = dot(u_xlat1.xyz, vec3(0.0396819152, 0.45802179, 0.00609653955));
    u_xlat27 = u_xlat27 + 1.0;
    u_xlat27 = float(1.0) / u_xlat27;
    u_xlat1.xyz = vec3(u_xlat27) * u_xlat1.xyz;
    u_xlat0.xyz = u_xlat1.xyz * vec3(0.5, 0.5, 0.5) + u_xlat0.xyz;
    u_xlat0.w = 0.0;
    u_xlat1 = (-u_xlat0) + u_xlat4;
    SV_Target0 = vec4(_TempFilterValue) * u_xlat1 + u_xlat0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "AB_HIGH_PRECISION" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 94
; Schema: 0
                                              OpCapability Shader 
                                       %1 = OpExtInstImport "GLSL.std.450" 
                                              OpMemoryModel Logical GLSL450 
                                              OpEntryPoint Vertex %4 "main" %11 %72 %84 %86 
                                              OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                              OpDecorate %11 Location 11 
                                              OpDecorate %16 ArrayStride 16 
                                              OpDecorate %17 ArrayStride 17 
                                              OpMemberDecorate %18 0 Offset 18 
                                              OpMemberDecorate %18 1 Offset 18 
                                              OpDecorate %18 Block 
                                              OpDecorate %20 DescriptorSet 20 
                                              OpDecorate %20 Binding 20 
                                              OpMemberDecorate %70 0 BuiltIn 70 
                                              OpMemberDecorate %70 1 BuiltIn 70 
                                              OpMemberDecorate %70 2 BuiltIn 70 
                                              OpDecorate %70 Block 
                                              OpDecorate vs_TEXCOORD0 Location 84 
                                              OpDecorate %86 Location 86 
                                       %2 = OpTypeVoid 
                                       %3 = OpTypeFunction %2 
                                       %6 = OpTypeFloat 32 
                                       %7 = OpTypeVector %6 4 
                                       %8 = OpTypePointer Private %7 
                        Private f32_4* %9 = OpVariable Private 
                                      %10 = OpTypePointer Input %7 
                         Input f32_4* %11 = OpVariable Input 
                                      %14 = OpTypeInt 32 0 
                                  u32 %15 = OpConstant 4 
                                      %16 = OpTypeArray %7 %15 
                                      %17 = OpTypeArray %7 %15 
                                      %18 = OpTypeStruct %16 %17 
                                      %19 = OpTypePointer Uniform %18 
Uniform struct {f32_4[4]; f32_4[4];}* %20 = OpVariable Uniform 
                                      %21 = OpTypeInt 32 1 
                                  i32 %22 = OpConstant 0 
                                  i32 %23 = OpConstant 1 
                                      %24 = OpTypePointer Uniform %7 
                                  i32 %35 = OpConstant 2 
                                  i32 %44 = OpConstant 3 
                       Private f32_4* %48 = OpVariable Private 
                                  u32 %68 = OpConstant 1 
                                      %69 = OpTypeArray %6 %68 
                                      %70 = OpTypeStruct %7 %6 %69 
                                      %71 = OpTypePointer Output %70 
 Output struct {f32_4; f32; f32[1];}* %72 = OpVariable Output 
                                      %80 = OpTypePointer Output %7 
                                      %82 = OpTypeVector %6 2 
                                      %83 = OpTypePointer Output %82 
               Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                      %85 = OpTypePointer Input %82 
                         Input f32_2* %86 = OpVariable Input 
                                      %88 = OpTypePointer Output %6 
                                  void %4 = OpFunction None %3 
                                       %5 = OpLabel 
                                f32_4 %12 = OpLoad %11 
                                f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                       Uniform f32_4* %25 = OpAccessChain %20 %22 %23 
                                f32_4 %26 = OpLoad %25 
                                f32_4 %27 = OpFMul %13 %26 
                                              OpStore %9 %27 
                       Uniform f32_4* %28 = OpAccessChain %20 %22 %22 
                                f32_4 %29 = OpLoad %28 
                                f32_4 %30 = OpLoad %11 
                                f32_4 %31 = OpVectorShuffle %30 %30 0 0 0 0 
                                f32_4 %32 = OpFMul %29 %31 
                                f32_4 %33 = OpLoad %9 
                                f32_4 %34 = OpFAdd %32 %33 
                                              OpStore %9 %34 
                       Uniform f32_4* %36 = OpAccessChain %20 %22 %35 
                                f32_4 %37 = OpLoad %36 
                                f32_4 %38 = OpLoad %11 
                                f32_4 %39 = OpVectorShuffle %38 %38 2 2 2 2 
                                f32_4 %40 = OpFMul %37 %39 
                                f32_4 %41 = OpLoad %9 
                                f32_4 %42 = OpFAdd %40 %41 
                                              OpStore %9 %42 
                                f32_4 %43 = OpLoad %9 
                       Uniform f32_4* %45 = OpAccessChain %20 %22 %44 
                                f32_4 %46 = OpLoad %45 
                                f32_4 %47 = OpFAdd %43 %46 
                                              OpStore %9 %47 
                                f32_4 %49 = OpLoad %9 
                                f32_4 %50 = OpVectorShuffle %49 %49 1 1 1 1 
                       Uniform f32_4* %51 = OpAccessChain %20 %23 %23 
                                f32_4 %52 = OpLoad %51 
                                f32_4 %53 = OpFMul %50 %52 
                                              OpStore %48 %53 
                       Uniform f32_4* %54 = OpAccessChain %20 %23 %22 
                                f32_4 %55 = OpLoad %54 
                                f32_4 %56 = OpLoad %9 
                                f32_4 %57 = OpVectorShuffle %56 %56 0 0 0 0 
                                f32_4 %58 = OpFMul %55 %57 
                                f32_4 %59 = OpLoad %48 
                                f32_4 %60 = OpFAdd %58 %59 
                                              OpStore %48 %60 
                       Uniform f32_4* %61 = OpAccessChain %20 %23 %35 
                                f32_4 %62 = OpLoad %61 
                                f32_4 %63 = OpLoad %9 
                                f32_4 %64 = OpVectorShuffle %63 %63 2 2 2 2 
                                f32_4 %65 = OpFMul %62 %64 
                                f32_4 %66 = OpLoad %48 
                                f32_4 %67 = OpFAdd %65 %66 
                                              OpStore %48 %67 
                       Uniform f32_4* %73 = OpAccessChain %20 %23 %44 
                                f32_4 %74 = OpLoad %73 
                                f32_4 %75 = OpLoad %9 
                                f32_4 %76 = OpVectorShuffle %75 %75 3 3 3 3 
                                f32_4 %77 = OpFMul %74 %76 
                                f32_4 %78 = OpLoad %48 
                                f32_4 %79 = OpFAdd %77 %78 
                        Output f32_4* %81 = OpAccessChain %72 %22 
                                              OpStore %81 %79 
                                f32_2 %87 = OpLoad %86 
                                              OpStore vs_TEXCOORD0 %87 
                          Output f32* %89 = OpAccessChain %72 %22 %68 
                                  f32 %90 = OpLoad %89 
                                  f32 %91 = OpFNegate %90 
                          Output f32* %92 = OpAccessChain %72 %22 %68 
                                              OpStore %92 %91 
                                              OpReturn
                                              OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 564
; Schema: 0
                                              OpCapability Shader 
                                       %1 = OpExtInstImport "GLSL.std.450" 
                                              OpMemoryModel Logical GLSL450 
                                              OpEntryPoint Fragment %4 "main" %24 %553 
                                              OpExecutionMode %4 OriginUpperLeft 
                                              OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                              OpMemberDecorate %10 0 Offset 10 
                                              OpMemberDecorate %10 1 Offset 10 
                                              OpMemberDecorate %10 2 Offset 10 
                                              OpDecorate %10 Block 
                                              OpDecorate %12 DescriptorSet 12 
                                              OpDecorate %12 Binding 12 
                                              OpDecorate vs_TEXCOORD0 Location 24 
                                              OpDecorate %44 DescriptorSet 44 
                                              OpDecorate %44 Binding 44 
                                              OpDecorate %48 DescriptorSet 48 
                                              OpDecorate %48 Binding 48 
                                              OpDecorate %150 DescriptorSet 150 
                                              OpDecorate %150 Binding 150 
                                              OpDecorate %152 DescriptorSet 152 
                                              OpDecorate %152 Binding 152 
                                              OpDecorate %553 Location 553 
                                       %2 = OpTypeVoid 
                                       %3 = OpTypeFunction %2 
                                       %6 = OpTypeFloat 32 
                                       %7 = OpTypeVector %6 4 
                                       %8 = OpTypePointer Private %7 
                        Private f32_4* %9 = OpVariable Private 
                                      %10 = OpTypeStruct %7 %7 %6 
                                      %11 = OpTypePointer Uniform %10 
 Uniform struct {f32_4; f32_4; f32;}* %12 = OpVariable Uniform 
                                      %13 = OpTypeInt 32 1 
                                  i32 %14 = OpConstant 1 
                                      %15 = OpTypeVector %6 2 
                                      %16 = OpTypePointer Uniform %7 
                                  f32 %20 = OpConstant 3.674022E-40 
                                f32_2 %21 = OpConstantComposite %20 %20 
                                      %23 = OpTypePointer Input %15 
                Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                  i32 %31 = OpConstant 0 
                                      %42 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                      %43 = OpTypePointer UniformConstant %42 
 UniformConstant read_only Texture2D* %44 = OpVariable UniformConstant 
                                      %46 = OpTypeSampler 
                                      %47 = OpTypePointer UniformConstant %46 
             UniformConstant sampler* %48 = OpVariable UniformConstant 
                                      %50 = OpTypeSampledImage %42 
                                      %55 = OpTypeVector %6 3 
                       Private f32_4* %59 = OpVariable Private 
                                  f32 %63 = OpConstant 3.674022E-40 
                                f32_2 %64 = OpConstantComposite %63 %20 
                       Private f32_4* %91 = OpVariable Private 
                                  f32 %95 = OpConstant 3.674022E-40 
                                f32_4 %96 = OpConstantComposite %20 %63 %95 %20 
                      Private f32_4* %110 = OpVariable Private 
                      Private f32_4* %129 = OpVariable Private 
                                     %141 = OpTypePointer Private %55 
                      Private f32_3* %142 = OpVariable Private 
UniformConstant read_only Texture2D* %150 = OpVariable UniformConstant 
            UniformConstant sampler* %152 = OpVariable UniformConstant 
                      Private f32_4* %158 = OpVariable Private 
                                 f32 %181 = OpConstant 3.674022E-40 
                               f32_3 %182 = OpConstantComposite %181 %181 %181 
                                     %186 = OpTypePointer Private %6 
                        Private f32* %187 = OpVariable Private 
                                 f32 %190 = OpConstant 3.674022E-40 
                                 f32 %191 = OpConstant 3.674022E-40 
                                 f32 %192 = OpConstant 3.674022E-40 
                               f32_3 %193 = OpConstantComposite %190 %191 %192 
                                 f32 %196 = OpConstant 3.674022E-40 
                               f32_4 %210 = OpConstantComposite %20 %95 %95 %63 
                      Private f32_3* %224 = OpVariable Private 
                      Private f32_3* %241 = OpVariable Private 
                               f32_4 %283 = OpConstantComposite %95 %95 %63 %95 
                                 f32 %400 = OpConstant 3.674022E-40 
                               f32_3 %401 = OpConstantComposite %400 %400 %400 
                                 f32 %465 = OpConstant 3.674022E-40 
                               f32_4 %466 = OpConstantComposite %196 %465 %465 %196 
                                 f32 %537 = OpConstant 3.674022E-40 
                               f32_3 %538 = OpConstantComposite %537 %537 %537 
                                     %545 = OpTypeInt 32 0 
                                 u32 %546 = OpConstant 3 
                                     %552 = OpTypePointer Output %7 
                       Output f32_4* %553 = OpVariable Output 
                                 i32 %554 = OpConstant 2 
                                     %555 = OpTypePointer Uniform %6 
                                  void %4 = OpFunction None %3 
                                       %5 = OpLabel 
                       Uniform f32_4* %17 = OpAccessChain %12 %14 
                                f32_4 %18 = OpLoad %17 
                                f32_2 %19 = OpVectorShuffle %18 %18 0 1 
                                f32_2 %22 = OpFMul %19 %21 
                                f32_2 %25 = OpLoad vs_TEXCOORD0 
                                f32_2 %26 = OpFAdd %22 %25 
                                f32_4 %27 = OpLoad %9 
                                f32_4 %28 = OpVectorShuffle %27 %26 4 5 2 3 
                                              OpStore %9 %28 
                                f32_4 %29 = OpLoad %9 
                                f32_2 %30 = OpVectorShuffle %29 %29 0 1 
                       Uniform f32_4* %32 = OpAccessChain %12 %31 
                                f32_4 %33 = OpLoad %32 
                                f32_2 %34 = OpVectorShuffle %33 %33 0 1 
                                f32_2 %35 = OpFMul %30 %34 
                       Uniform f32_4* %36 = OpAccessChain %12 %31 
                                f32_4 %37 = OpLoad %36 
                                f32_2 %38 = OpVectorShuffle %37 %37 2 3 
                                f32_2 %39 = OpFAdd %35 %38 
                                f32_4 %40 = OpLoad %9 
                                f32_4 %41 = OpVectorShuffle %40 %39 4 5 2 3 
                                              OpStore %9 %41 
                  read_only Texture2D %45 = OpLoad %44 
                              sampler %49 = OpLoad %48 
           read_only Texture2DSampled %51 = OpSampledImage %45 %49 
                                f32_4 %52 = OpLoad %9 
                                f32_2 %53 = OpVectorShuffle %52 %52 0 1 
                                f32_4 %54 = OpImageSampleImplicitLod %51 %53 
                                f32_3 %56 = OpVectorShuffle %54 %54 0 1 2 
                                f32_4 %57 = OpLoad %9 
                                f32_4 %58 = OpVectorShuffle %57 %56 4 5 6 3 
                                              OpStore %9 %58 
                       Uniform f32_4* %60 = OpAccessChain %12 %14 
                                f32_4 %61 = OpLoad %60 
                                f32_2 %62 = OpVectorShuffle %61 %61 0 1 
                                f32_2 %65 = OpFMul %62 %64 
                                f32_2 %66 = OpLoad vs_TEXCOORD0 
                                f32_2 %67 = OpFAdd %65 %66 
                                f32_4 %68 = OpLoad %59 
                                f32_4 %69 = OpVectorShuffle %68 %67 4 5 2 3 
                                              OpStore %59 %69 
                                f32_4 %70 = OpLoad %59 
                                f32_2 %71 = OpVectorShuffle %70 %70 0 1 
                       Uniform f32_4* %72 = OpAccessChain %12 %31 
                                f32_4 %73 = OpLoad %72 
                                f32_2 %74 = OpVectorShuffle %73 %73 0 1 
                                f32_2 %75 = OpFMul %71 %74 
                       Uniform f32_4* %76 = OpAccessChain %12 %31 
                                f32_4 %77 = OpLoad %76 
                                f32_2 %78 = OpVectorShuffle %77 %77 2 3 
                                f32_2 %79 = OpFAdd %75 %78 
                                f32_4 %80 = OpLoad %59 
                                f32_4 %81 = OpVectorShuffle %80 %79 4 5 2 3 
                                              OpStore %59 %81 
                  read_only Texture2D %82 = OpLoad %44 
                              sampler %83 = OpLoad %48 
           read_only Texture2DSampled %84 = OpSampledImage %82 %83 
                                f32_4 %85 = OpLoad %59 
                                f32_2 %86 = OpVectorShuffle %85 %85 0 1 
                                f32_4 %87 = OpImageSampleImplicitLod %84 %86 
                                f32_3 %88 = OpVectorShuffle %87 %87 0 1 2 
                                f32_4 %89 = OpLoad %59 
                                f32_4 %90 = OpVectorShuffle %89 %88 4 5 6 3 
                                              OpStore %59 %90 
                       Uniform f32_4* %92 = OpAccessChain %12 %14 
                                f32_4 %93 = OpLoad %92 
                                f32_4 %94 = OpVectorShuffle %93 %93 0 1 0 1 
                                f32_4 %97 = OpFMul %94 %96 
                                f32_2 %98 = OpLoad vs_TEXCOORD0 
                                f32_4 %99 = OpVectorShuffle %98 %98 0 1 0 1 
                               f32_4 %100 = OpFAdd %97 %99 
                                              OpStore %91 %100 
                               f32_4 %101 = OpLoad %91 
                      Uniform f32_4* %102 = OpAccessChain %12 %31 
                               f32_4 %103 = OpLoad %102 
                               f32_4 %104 = OpVectorShuffle %103 %103 0 1 0 1 
                               f32_4 %105 = OpFMul %101 %104 
                      Uniform f32_4* %106 = OpAccessChain %12 %31 
                               f32_4 %107 = OpLoad %106 
                               f32_4 %108 = OpVectorShuffle %107 %107 2 3 2 3 
                               f32_4 %109 = OpFAdd %105 %108 
                                              OpStore %91 %109 
                 read_only Texture2D %111 = OpLoad %44 
                             sampler %112 = OpLoad %48 
          read_only Texture2DSampled %113 = OpSampledImage %111 %112 
                               f32_4 %114 = OpLoad %91 
                               f32_2 %115 = OpVectorShuffle %114 %114 0 1 
                               f32_4 %116 = OpImageSampleImplicitLod %113 %115 
                               f32_3 %117 = OpVectorShuffle %116 %116 0 1 2 
                               f32_4 %118 = OpLoad %110 
                               f32_4 %119 = OpVectorShuffle %118 %117 4 5 6 3 
                                              OpStore %110 %119 
                 read_only Texture2D %120 = OpLoad %44 
                             sampler %121 = OpLoad %48 
          read_only Texture2DSampled %122 = OpSampledImage %120 %121 
                               f32_4 %123 = OpLoad %91 
                               f32_2 %124 = OpVectorShuffle %123 %123 2 3 
                               f32_4 %125 = OpImageSampleImplicitLod %122 %124 
                               f32_3 %126 = OpVectorShuffle %125 %125 0 1 2 
                               f32_4 %127 = OpLoad %91 
                               f32_4 %128 = OpVectorShuffle %127 %126 4 5 6 3 
                                              OpStore %91 %128 
                               f32_2 %130 = OpLoad vs_TEXCOORD0 
                      Uniform f32_4* %131 = OpAccessChain %12 %31 
                               f32_4 %132 = OpLoad %131 
                               f32_2 %133 = OpVectorShuffle %132 %132 0 1 
                               f32_2 %134 = OpFMul %130 %133 
                      Uniform f32_4* %135 = OpAccessChain %12 %31 
                               f32_4 %136 = OpLoad %135 
                               f32_2 %137 = OpVectorShuffle %136 %136 2 3 
                               f32_2 %138 = OpFAdd %134 %137 
                               f32_4 %139 = OpLoad %129 
                               f32_4 %140 = OpVectorShuffle %139 %138 4 5 2 3 
                                              OpStore %129 %140 
                 read_only Texture2D %143 = OpLoad %44 
                             sampler %144 = OpLoad %48 
          read_only Texture2DSampled %145 = OpSampledImage %143 %144 
                               f32_4 %146 = OpLoad %129 
                               f32_2 %147 = OpVectorShuffle %146 %146 0 1 
                               f32_4 %148 = OpImageSampleImplicitLod %145 %147 
                               f32_3 %149 = OpVectorShuffle %148 %148 0 1 2 
                                              OpStore %142 %149 
                 read_only Texture2D %151 = OpLoad %150 
                             sampler %153 = OpLoad %152 
          read_only Texture2DSampled %154 = OpSampledImage %151 %153 
                               f32_4 %155 = OpLoad %129 
                               f32_2 %156 = OpVectorShuffle %155 %155 0 1 
                               f32_4 %157 = OpImageSampleImplicitLod %154 %156 
                                              OpStore %129 %157 
                               f32_4 %159 = OpLoad %110 
                               f32_3 %160 = OpVectorShuffle %159 %159 0 1 2 
                               f32_3 %161 = OpLoad %142 
                               f32_3 %162 = OpFAdd %160 %161 
                               f32_4 %163 = OpLoad %158 
                               f32_4 %164 = OpVectorShuffle %163 %162 4 5 6 3 
                                              OpStore %158 %164 
                               f32_4 %165 = OpLoad %59 
                               f32_3 %166 = OpVectorShuffle %165 %165 0 1 2 
                               f32_4 %167 = OpLoad %158 
                               f32_3 %168 = OpVectorShuffle %167 %167 0 1 2 
                               f32_3 %169 = OpFAdd %166 %168 
                               f32_4 %170 = OpLoad %158 
                               f32_4 %171 = OpVectorShuffle %170 %169 4 5 6 3 
                                              OpStore %158 %171 
                               f32_4 %172 = OpLoad %9 
                               f32_3 %173 = OpVectorShuffle %172 %172 0 1 2 
                               f32_4 %174 = OpLoad %158 
                               f32_3 %175 = OpVectorShuffle %174 %174 0 1 2 
                               f32_3 %176 = OpFAdd %173 %175 
                               f32_4 %177 = OpLoad %9 
                               f32_4 %178 = OpVectorShuffle %177 %176 4 5 6 3 
                                              OpStore %9 %178 
                               f32_4 %179 = OpLoad %9 
                               f32_3 %180 = OpVectorShuffle %179 %179 0 1 2 
                               f32_3 %183 = OpFMul %180 %182 
                               f32_4 %184 = OpLoad %9 
                               f32_4 %185 = OpVectorShuffle %184 %183 4 5 6 3 
                                              OpStore %9 %185 
                               f32_4 %188 = OpLoad %9 
                               f32_3 %189 = OpVectorShuffle %188 %188 0 1 2 
                                 f32 %194 = OpDot %189 %193 
                                              OpStore %187 %194 
                                 f32 %195 = OpLoad %187 
                                 f32 %197 = OpFAdd %195 %196 
                                              OpStore %187 %197 
                                 f32 %198 = OpLoad %187 
                                 f32 %199 = OpFDiv %196 %198 
                                              OpStore %187 %199 
                                 f32 %200 = OpLoad %187 
                               f32_3 %201 = OpCompositeConstruct %200 %200 %200 
                               f32_4 %202 = OpLoad %9 
                               f32_3 %203 = OpVectorShuffle %202 %202 0 1 2 
                               f32_3 %204 = OpFMul %201 %203 
                               f32_4 %205 = OpLoad %9 
                               f32_4 %206 = OpVectorShuffle %205 %204 4 5 6 3 
                                              OpStore %9 %206 
                      Uniform f32_4* %207 = OpAccessChain %12 %14 
                               f32_4 %208 = OpLoad %207 
                               f32_4 %209 = OpVectorShuffle %208 %208 0 1 0 1 
                               f32_4 %211 = OpFMul %209 %210 
                               f32_2 %212 = OpLoad vs_TEXCOORD0 
                               f32_4 %213 = OpVectorShuffle %212 %212 0 1 0 1 
                               f32_4 %214 = OpFAdd %211 %213 
                                              OpStore %158 %214 
                               f32_4 %215 = OpLoad %158 
                      Uniform f32_4* %216 = OpAccessChain %12 %31 
                               f32_4 %217 = OpLoad %216 
                               f32_4 %218 = OpVectorShuffle %217 %217 0 1 0 1 
                               f32_4 %219 = OpFMul %215 %218 
                      Uniform f32_4* %220 = OpAccessChain %12 %31 
                               f32_4 %221 = OpLoad %220 
                               f32_4 %222 = OpVectorShuffle %221 %221 2 3 2 3 
                               f32_4 %223 = OpFAdd %219 %222 
                                              OpStore %158 %223 
                 read_only Texture2D %225 = OpLoad %44 
                             sampler %226 = OpLoad %48 
          read_only Texture2DSampled %227 = OpSampledImage %225 %226 
                               f32_4 %228 = OpLoad %158 
                               f32_2 %229 = OpVectorShuffle %228 %228 2 3 
                               f32_4 %230 = OpImageSampleImplicitLod %227 %229 
                               f32_3 %231 = OpVectorShuffle %230 %230 0 1 2 
                                              OpStore %224 %231 
                 read_only Texture2D %232 = OpLoad %44 
                             sampler %233 = OpLoad %48 
          read_only Texture2DSampled %234 = OpSampledImage %232 %233 
                               f32_4 %235 = OpLoad %158 
                               f32_2 %236 = OpVectorShuffle %235 %235 0 1 
                               f32_4 %237 = OpImageSampleImplicitLod %234 %236 
                               f32_3 %238 = OpVectorShuffle %237 %237 0 1 2 
                               f32_4 %239 = OpLoad %158 
                               f32_4 %240 = OpVectorShuffle %239 %238 4 5 6 3 
                                              OpStore %158 %240 
                               f32_3 %242 = OpLoad %142 
                               f32_3 %243 = OpLoad %224 
                               f32_3 %244 = OpFAdd %242 %243 
                                              OpStore %241 %244 
                               f32_4 %245 = OpLoad %91 
                               f32_3 %246 = OpVectorShuffle %245 %245 0 1 2 
                               f32_3 %247 = OpLoad %241 
                               f32_3 %248 = OpFAdd %246 %247 
                               f32_4 %249 = OpLoad %91 
                               f32_4 %250 = OpVectorShuffle %249 %248 4 5 6 3 
                                              OpStore %91 %250 
                               f32_4 %251 = OpLoad %59 
                               f32_3 %252 = OpVectorShuffle %251 %251 0 1 2 
                               f32_4 %253 = OpLoad %91 
                               f32_3 %254 = OpVectorShuffle %253 %253 0 1 2 
                               f32_3 %255 = OpFAdd %252 %254 
                               f32_4 %256 = OpLoad %59 
                               f32_4 %257 = OpVectorShuffle %256 %255 4 5 6 3 
                                              OpStore %59 %257 
                               f32_4 %258 = OpLoad %59 
                               f32_3 %259 = OpVectorShuffle %258 %258 0 1 2 
                               f32_3 %260 = OpFMul %259 %182 
                               f32_4 %261 = OpLoad %59 
                               f32_4 %262 = OpVectorShuffle %261 %260 4 5 6 3 
                                              OpStore %59 %262 
                               f32_4 %263 = OpLoad %59 
                               f32_3 %264 = OpVectorShuffle %263 %263 0 1 2 
                                 f32 %265 = OpDot %264 %193 
                                              OpStore %187 %265 
                                 f32 %266 = OpLoad %187 
                                 f32 %267 = OpFAdd %266 %196 
                                              OpStore %187 %267 
                                 f32 %268 = OpLoad %187 
                                 f32 %269 = OpFDiv %196 %268 
                                              OpStore %187 %269 
                               f32_4 %270 = OpLoad %59 
                               f32_3 %271 = OpVectorShuffle %270 %270 0 1 2 
                                 f32 %272 = OpLoad %187 
                               f32_3 %273 = OpCompositeConstruct %272 %272 %272 
                               f32_3 %274 = OpFMul %271 %273 
                               f32_4 %275 = OpLoad %9 
                               f32_3 %276 = OpVectorShuffle %275 %275 0 1 2 
                               f32_3 %277 = OpFAdd %274 %276 
                               f32_4 %278 = OpLoad %9 
                               f32_4 %279 = OpVectorShuffle %278 %277 4 5 6 3 
                                              OpStore %9 %279 
                      Uniform f32_4* %280 = OpAccessChain %12 %14 
                               f32_4 %281 = OpLoad %280 
                               f32_4 %282 = OpVectorShuffle %281 %281 0 1 0 1 
                               f32_4 %284 = OpFMul %282 %283 
                               f32_2 %285 = OpLoad vs_TEXCOORD0 
                               f32_4 %286 = OpVectorShuffle %285 %285 0 1 0 1 
                               f32_4 %287 = OpFAdd %284 %286 
                                              OpStore %59 %287 
                               f32_4 %288 = OpLoad %59 
                      Uniform f32_4* %289 = OpAccessChain %12 %31 
                               f32_4 %290 = OpLoad %289 
                               f32_4 %291 = OpVectorShuffle %290 %290 0 1 0 1 
                               f32_4 %292 = OpFMul %288 %291 
                      Uniform f32_4* %293 = OpAccessChain %12 %31 
                               f32_4 %294 = OpLoad %293 
                               f32_4 %295 = OpVectorShuffle %294 %294 2 3 2 3 
                               f32_4 %296 = OpFAdd %292 %295 
                                              OpStore %59 %296 
                 read_only Texture2D %297 = OpLoad %44 
                             sampler %298 = OpLoad %48 
          read_only Texture2DSampled %299 = OpSampledImage %297 %298 
                               f32_4 %300 = OpLoad %59 
                               f32_2 %301 = OpVectorShuffle %300 %300 2 3 
                               f32_4 %302 = OpImageSampleImplicitLod %299 %301 
                               f32_3 %303 = OpVectorShuffle %302 %302 0 1 2 
                               f32_4 %304 = OpLoad %91 
                               f32_4 %305 = OpVectorShuffle %304 %303 4 5 6 3 
                                              OpStore %91 %305 
                 read_only Texture2D %306 = OpLoad %44 
                             sampler %307 = OpLoad %48 
          read_only Texture2DSampled %308 = OpSampledImage %306 %307 
                               f32_4 %309 = OpLoad %59 
                               f32_2 %310 = OpVectorShuffle %309 %309 0 1 
                               f32_4 %311 = OpImageSampleImplicitLod %308 %310 
                               f32_3 %312 = OpVectorShuffle %311 %311 0 1 2 
                               f32_4 %313 = OpLoad %59 
                               f32_4 %314 = OpVectorShuffle %313 %312 4 5 6 3 
                                              OpStore %59 %314 
                               f32_4 %315 = OpLoad %91 
                               f32_3 %316 = OpVectorShuffle %315 %315 0 1 2 
                               f32_4 %317 = OpLoad %59 
                               f32_3 %318 = OpVectorShuffle %317 %317 0 1 2 
                               f32_3 %319 = OpFAdd %316 %318 
                               f32_4 %320 = OpLoad %59 
                               f32_4 %321 = OpVectorShuffle %320 %319 4 5 6 3 
                                              OpStore %59 %321 
                               f32_4 %322 = OpLoad %158 
                               f32_3 %323 = OpVectorShuffle %322 %322 0 1 2 
                               f32_4 %324 = OpLoad %91 
                               f32_3 %325 = OpVectorShuffle %324 %324 0 1 2 
                               f32_3 %326 = OpFAdd %323 %325 
                               f32_4 %327 = OpLoad %91 
                               f32_4 %328 = OpVectorShuffle %327 %326 4 5 6 3 
                                              OpStore %91 %328 
                               f32_3 %329 = OpLoad %142 
                               f32_4 %330 = OpLoad %91 
                               f32_3 %331 = OpVectorShuffle %330 %330 0 1 2 
                               f32_3 %332 = OpFAdd %329 %331 
                               f32_4 %333 = OpLoad %91 
                               f32_4 %334 = OpVectorShuffle %333 %332 4 5 6 3 
                                              OpStore %91 %334 
                               f32_4 %335 = OpLoad %110 
                               f32_3 %336 = OpVectorShuffle %335 %335 0 1 2 
                               f32_4 %337 = OpLoad %91 
                               f32_3 %338 = OpVectorShuffle %337 %337 0 1 2 
                               f32_3 %339 = OpFAdd %336 %338 
                               f32_4 %340 = OpLoad %91 
                               f32_4 %341 = OpVectorShuffle %340 %339 4 5 6 3 
                                              OpStore %91 %341 
                               f32_4 %342 = OpLoad %91 
                               f32_3 %343 = OpVectorShuffle %342 %342 0 1 2 
                               f32_3 %344 = OpFMul %343 %182 
                               f32_4 %345 = OpLoad %91 
                               f32_4 %346 = OpVectorShuffle %345 %344 4 5 6 3 
                                              OpStore %91 %346 
                               f32_3 %347 = OpLoad %224 
                               f32_4 %348 = OpLoad %59 
                               f32_3 %349 = OpVectorShuffle %348 %348 0 1 2 
                               f32_3 %350 = OpFAdd %347 %349 
                               f32_4 %351 = OpLoad %59 
                               f32_4 %352 = OpVectorShuffle %351 %350 4 5 6 3 
                                              OpStore %59 %352 
                               f32_3 %353 = OpLoad %142 
                               f32_4 %354 = OpLoad %59 
                               f32_3 %355 = OpVectorShuffle %354 %354 0 1 2 
                               f32_3 %356 = OpFAdd %353 %355 
                               f32_4 %357 = OpLoad %59 
                               f32_4 %358 = OpVectorShuffle %357 %356 4 5 6 3 
                                              OpStore %59 %358 
                               f32_4 %359 = OpLoad %59 
                               f32_3 %360 = OpVectorShuffle %359 %359 0 1 2 
                               f32_3 %361 = OpFMul %360 %182 
                               f32_4 %362 = OpLoad %59 
                               f32_4 %363 = OpVectorShuffle %362 %361 4 5 6 3 
                                              OpStore %59 %363 
                               f32_4 %364 = OpLoad %91 
                               f32_3 %365 = OpVectorShuffle %364 %364 0 1 2 
                                 f32 %366 = OpDot %365 %193 
                                              OpStore %187 %366 
                                 f32 %367 = OpLoad %187 
                                 f32 %368 = OpFAdd %367 %196 
                                              OpStore %187 %368 
                                 f32 %369 = OpLoad %187 
                                 f32 %370 = OpFDiv %196 %369 
                                              OpStore %187 %370 
                               f32_4 %371 = OpLoad %91 
                               f32_3 %372 = OpVectorShuffle %371 %371 0 1 2 
                                 f32 %373 = OpLoad %187 
                               f32_3 %374 = OpCompositeConstruct %373 %373 %373 
                               f32_3 %375 = OpFMul %372 %374 
                               f32_4 %376 = OpLoad %9 
                               f32_3 %377 = OpVectorShuffle %376 %376 0 1 2 
                               f32_3 %378 = OpFAdd %375 %377 
                               f32_4 %379 = OpLoad %9 
                               f32_4 %380 = OpVectorShuffle %379 %378 4 5 6 3 
                                              OpStore %9 %380 
                               f32_4 %381 = OpLoad %59 
                               f32_3 %382 = OpVectorShuffle %381 %381 0 1 2 
                                 f32 %383 = OpDot %382 %193 
                                              OpStore %187 %383 
                                 f32 %384 = OpLoad %187 
                                 f32 %385 = OpFAdd %384 %196 
                                              OpStore %187 %385 
                                 f32 %386 = OpLoad %187 
                                 f32 %387 = OpFDiv %196 %386 
                                              OpStore %187 %387 
                               f32_4 %388 = OpLoad %59 
                               f32_3 %389 = OpVectorShuffle %388 %388 0 1 2 
                                 f32 %390 = OpLoad %187 
                               f32_3 %391 = OpCompositeConstruct %390 %390 %390 
                               f32_3 %392 = OpFMul %389 %391 
                               f32_4 %393 = OpLoad %9 
                               f32_3 %394 = OpVectorShuffle %393 %393 0 1 2 
                               f32_3 %395 = OpFAdd %392 %394 
                               f32_4 %396 = OpLoad %9 
                               f32_4 %397 = OpVectorShuffle %396 %395 4 5 6 3 
                                              OpStore %9 %397 
                               f32_4 %398 = OpLoad %9 
                               f32_3 %399 = OpVectorShuffle %398 %398 0 1 2 
                               f32_3 %402 = OpFMul %399 %401 
                               f32_4 %403 = OpLoad %9 
                               f32_4 %404 = OpVectorShuffle %403 %402 4 5 6 3 
                                              OpStore %9 %404 
                               f32_2 %405 = OpLoad vs_TEXCOORD0 
                      Uniform f32_4* %406 = OpAccessChain %12 %14 
                               f32_4 %407 = OpLoad %406 
                               f32_2 %408 = OpVectorShuffle %407 %407 0 1 
                               f32_2 %409 = OpFAdd %405 %408 
                               f32_4 %410 = OpLoad %59 
                               f32_4 %411 = OpVectorShuffle %410 %409 4 5 2 3 
                                              OpStore %59 %411 
                               f32_4 %412 = OpLoad %59 
                               f32_2 %413 = OpVectorShuffle %412 %412 0 1 
                      Uniform f32_4* %414 = OpAccessChain %12 %31 
                               f32_4 %415 = OpLoad %414 
                               f32_2 %416 = OpVectorShuffle %415 %415 0 1 
                               f32_2 %417 = OpFMul %413 %416 
                      Uniform f32_4* %418 = OpAccessChain %12 %31 
                               f32_4 %419 = OpLoad %418 
                               f32_2 %420 = OpVectorShuffle %419 %419 2 3 
                               f32_2 %421 = OpFAdd %417 %420 
                               f32_4 %422 = OpLoad %59 
                               f32_4 %423 = OpVectorShuffle %422 %421 4 5 2 3 
                                              OpStore %59 %423 
                 read_only Texture2D %424 = OpLoad %44 
                             sampler %425 = OpLoad %48 
          read_only Texture2DSampled %426 = OpSampledImage %424 %425 
                               f32_4 %427 = OpLoad %59 
                               f32_2 %428 = OpVectorShuffle %427 %427 0 1 
                               f32_4 %429 = OpImageSampleImplicitLod %426 %428 
                               f32_3 %430 = OpVectorShuffle %429 %429 0 1 2 
                               f32_4 %431 = OpLoad %59 
                               f32_4 %432 = OpVectorShuffle %431 %430 4 5 6 3 
                                              OpStore %59 %432 
                               f32_2 %433 = OpLoad vs_TEXCOORD0 
                      Uniform f32_4* %434 = OpAccessChain %12 %14 
                               f32_4 %435 = OpLoad %434 
                               f32_2 %436 = OpVectorShuffle %435 %435 0 1 
                               f32_2 %437 = OpFNegate %436 
                               f32_2 %438 = OpFAdd %433 %437 
                               f32_4 %439 = OpLoad %91 
                               f32_4 %440 = OpVectorShuffle %439 %438 4 5 2 3 
                                              OpStore %91 %440 
                               f32_4 %441 = OpLoad %91 
                               f32_2 %442 = OpVectorShuffle %441 %441 0 1 
                      Uniform f32_4* %443 = OpAccessChain %12 %31 
                               f32_4 %444 = OpLoad %443 
                               f32_2 %445 = OpVectorShuffle %444 %444 0 1 
                               f32_2 %446 = OpFMul %442 %445 
                      Uniform f32_4* %447 = OpAccessChain %12 %31 
                               f32_4 %448 = OpLoad %447 
                               f32_2 %449 = OpVectorShuffle %448 %448 2 3 
                               f32_2 %450 = OpFAdd %446 %449 
                               f32_4 %451 = OpLoad %91 
                               f32_4 %452 = OpVectorShuffle %451 %450 4 5 2 3 
                                              OpStore %91 %452 
                 read_only Texture2D %453 = OpLoad %44 
                             sampler %454 = OpLoad %48 
          read_only Texture2DSampled %455 = OpSampledImage %453 %454 
                               f32_4 %456 = OpLoad %91 
                               f32_2 %457 = OpVectorShuffle %456 %456 0 1 
                               f32_4 %458 = OpImageSampleImplicitLod %455 %457 
                               f32_3 %459 = OpVectorShuffle %458 %458 0 1 2 
                               f32_4 %460 = OpLoad %91 
                               f32_4 %461 = OpVectorShuffle %460 %459 4 5 6 3 
                                              OpStore %91 %461 
                      Uniform f32_4* %462 = OpAccessChain %12 %14 
                               f32_4 %463 = OpLoad %462 
                               f32_4 %464 = OpVectorShuffle %463 %463 0 1 0 1 
                               f32_4 %467 = OpFMul %464 %466 
                               f32_2 %468 = OpLoad vs_TEXCOORD0 
                               f32_4 %469 = OpVectorShuffle %468 %468 0 1 0 1 
                               f32_4 %470 = OpFAdd %467 %469 
                                              OpStore %110 %470 
                               f32_4 %471 = OpLoad %110 
                      Uniform f32_4* %472 = OpAccessChain %12 %31 
                               f32_4 %473 = OpLoad %472 
                               f32_4 %474 = OpVectorShuffle %473 %473 0 1 0 1 
                               f32_4 %475 = OpFMul %471 %474 
                      Uniform f32_4* %476 = OpAccessChain %12 %31 
                               f32_4 %477 = OpLoad %476 
                               f32_4 %478 = OpVectorShuffle %477 %477 2 3 2 3 
                               f32_4 %479 = OpFAdd %475 %478 
                                              OpStore %110 %479 
                 read_only Texture2D %480 = OpLoad %44 
                             sampler %481 = OpLoad %48 
          read_only Texture2DSampled %482 = OpSampledImage %480 %481 
                               f32_4 %483 = OpLoad %110 
                               f32_2 %484 = OpVectorShuffle %483 %483 0 1 
                               f32_4 %485 = OpImageSampleImplicitLod %482 %484 
                               f32_3 %486 = OpVectorShuffle %485 %485 0 1 2 
                                              OpStore %142 %486 
                 read_only Texture2D %487 = OpLoad %44 
                             sampler %488 = OpLoad %48 
          read_only Texture2DSampled %489 = OpSampledImage %487 %488 
                               f32_4 %490 = OpLoad %110 
                               f32_2 %491 = OpVectorShuffle %490 %490 2 3 
                               f32_4 %492 = OpImageSampleImplicitLod %489 %491 
                               f32_3 %493 = OpVectorShuffle %492 %492 0 1 2 
                               f32_4 %494 = OpLoad %110 
                               f32_4 %495 = OpVectorShuffle %494 %493 4 5 6 3 
                                              OpStore %110 %495 
                               f32_4 %496 = OpLoad %91 
                               f32_3 %497 = OpVectorShuffle %496 %496 0 1 2 
                               f32_3 %498 = OpLoad %142 
                               f32_3 %499 = OpFAdd %497 %498 
                               f32_4 %500 = OpLoad %91 
                               f32_4 %501 = OpVectorShuffle %500 %499 4 5 6 3 
                                              OpStore %91 %501 
                               f32_4 %502 = OpLoad %59 
                               f32_3 %503 = OpVectorShuffle %502 %502 0 1 2 
                               f32_4 %504 = OpLoad %91 
                               f32_3 %505 = OpVectorShuffle %504 %504 0 1 2 
                               f32_3 %506 = OpFAdd %503 %505 
                               f32_4 %507 = OpLoad %59 
                               f32_4 %508 = OpVectorShuffle %507 %506 4 5 6 3 
                                              OpStore %59 %508 
                               f32_4 %509 = OpLoad %110 
                               f32_3 %510 = OpVectorShuffle %509 %509 0 1 2 
                               f32_4 %511 = OpLoad %59 
                               f32_3 %512 = OpVectorShuffle %511 %511 0 1 2 
                               f32_3 %513 = OpFAdd %510 %512 
                               f32_4 %514 = OpLoad %59 
                               f32_4 %515 = OpVectorShuffle %514 %513 4 5 6 3 
                                              OpStore %59 %515 
                               f32_4 %516 = OpLoad %59 
                               f32_3 %517 = OpVectorShuffle %516 %516 0 1 2 
                               f32_3 %518 = OpFMul %517 %182 
                               f32_4 %519 = OpLoad %59 
                               f32_4 %520 = OpVectorShuffle %519 %518 4 5 6 3 
                                              OpStore %59 %520 
                               f32_4 %521 = OpLoad %59 
                               f32_3 %522 = OpVectorShuffle %521 %521 0 1 2 
                                 f32 %523 = OpDot %522 %193 
                                              OpStore %187 %523 
                                 f32 %524 = OpLoad %187 
                                 f32 %525 = OpFAdd %524 %196 
                                              OpStore %187 %525 
                                 f32 %526 = OpLoad %187 
                                 f32 %527 = OpFDiv %196 %526 
                                              OpStore %187 %527 
                                 f32 %528 = OpLoad %187 
                               f32_3 %529 = OpCompositeConstruct %528 %528 %528 
                               f32_4 %530 = OpLoad %59 
                               f32_3 %531 = OpVectorShuffle %530 %530 0 1 2 
                               f32_3 %532 = OpFMul %529 %531 
                               f32_4 %533 = OpLoad %59 
                               f32_4 %534 = OpVectorShuffle %533 %532 4 5 6 3 
                                              OpStore %59 %534 
                               f32_4 %535 = OpLoad %59 
                               f32_3 %536 = OpVectorShuffle %535 %535 0 1 2 
                               f32_3 %539 = OpFMul %536 %538 
                               f32_4 %540 = OpLoad %9 
                               f32_3 %541 = OpVectorShuffle %540 %540 0 1 2 
                               f32_3 %542 = OpFAdd %539 %541 
                               f32_4 %543 = OpLoad %9 
                               f32_4 %544 = OpVectorShuffle %543 %542 4 5 6 3 
                                              OpStore %9 %544 
                        Private f32* %547 = OpAccessChain %9 %546 
                                              OpStore %547 %63 
                               f32_4 %548 = OpLoad %9 
                               f32_4 %549 = OpFNegate %548 
                               f32_4 %550 = OpLoad %129 
                               f32_4 %551 = OpFAdd %549 %550 
                                              OpStore %59 %551 
                        Uniform f32* %556 = OpAccessChain %12 %554 
                                 f32 %557 = OpLoad %556 
                               f32_4 %558 = OpCompositeConstruct %557 %557 %557 %557 
                               f32_4 %559 = OpLoad %59 
                               f32_4 %560 = OpFMul %558 %559 
                               f32_4 %561 = OpLoad %9 
                               f32_4 %562 = OpFAdd %560 %561 
                                              OpStore %553 %562 
                                              OpReturn
                                              OpFunctionEnd
"
}
}
Program "fp" {
SubProgram "d3d11 " {
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
""
}
SubProgram "vulkan " {
""
}
SubProgram "d3d11 " {
Keywords { "AB_HIGH_PRECISION" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "AB_HIGH_PRECISION" }
""
}
SubProgram "vulkan " {
Keywords { "AB_HIGH_PRECISION" }
""
}
}
}
 Pass {
  Name "frag_downsampler_temp_filter_without_karis"
  ZTest Always
  ZWrite Off
  Cull Off
  GpuProgramID 895189
Program "vp" {
SubProgram "d3d11 " {
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in  vec4 in_POSITION0;
in  vec2 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BloomRange;
uniform 	vec4 _MainTex_TexelSize;
uniform 	float _TempFilterValue;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
UNITY_LOCATION(1) uniform  sampler2D _AnamorphicRTS0;
in  vec2 vs_TEXCOORD0;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
vec4 u_xlat6;
vec4 u_xlat7;
vec4 u_xlat8;
float u_xlat27;
void main()
{
    u_xlat0.xy = _MainTex_TexelSize.xy * vec2(2.0, 2.0) + vs_TEXCOORD0.xy;
    u_xlat0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0 = texture(_MainTex, u_xlat0.xy);
    u_xlat0.xyz = u_xlat0.xyz * _BloomRange.xxx;
    u_xlat1.xy = _MainTex_TexelSize.xy * vec2(0.0, 2.0) + vs_TEXCOORD0.xy;
    u_xlat1.xy = u_xlat1.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1 = texture(_MainTex, u_xlat1.xy);
    u_xlat1.xyz = u_xlat1.xyz * _BloomRange.xxx;
    u_xlat2 = _MainTex_TexelSize.xyxy * vec4(2.0, 0.0, -2.0, 2.0) + vs_TEXCOORD0.xyxy;
    u_xlat2 = u_xlat2 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
    u_xlat3 = texture(_MainTex, u_xlat2.xy);
    u_xlat2 = texture(_MainTex, u_xlat2.zw);
    u_xlat3.xyz = u_xlat3.xyz * _BloomRange.xxx;
    u_xlat4.xyz = u_xlat3.www * u_xlat3.xyz;
    u_xlat5.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat6 = texture(_MainTex, u_xlat5.xy);
    u_xlat5 = texture(_AnamorphicRTS0, u_xlat5.xy);
    u_xlat6.xyz = u_xlat6.xyz * _BloomRange.xxx;
    u_xlat4.xyz = u_xlat6.xyz * u_xlat6.www + u_xlat4.xyz;
    u_xlat4.xyz = u_xlat1.xyz * u_xlat1.www + u_xlat4.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat0.www + u_xlat4.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(0.25, 0.25, 0.25);
    u_xlat2.xyz = u_xlat2.xyz * _BloomRange.xxx;
    u_xlat4.xyz = u_xlat6.www * u_xlat6.xyz;
    u_xlat7 = _MainTex_TexelSize.xyxy * vec4(2.0, -2.0, -2.0, 0.0) + vs_TEXCOORD0.xyxy;
    u_xlat7 = u_xlat7 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
    u_xlat8 = texture(_MainTex, u_xlat7.zw);
    u_xlat7 = texture(_MainTex, u_xlat7.xy);
    u_xlat8.xyz = u_xlat8.xyz * _BloomRange.xxx;
    u_xlat4.xyz = u_xlat8.xyz * u_xlat8.www + u_xlat4.xyz;
    u_xlat2.xyz = u_xlat2.xyz * u_xlat2.www + u_xlat4.xyz;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat1.www + u_xlat2.xyz;
    u_xlat0.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25) + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat7.xyz * _BloomRange.xxx;
    u_xlat2 = _MainTex_TexelSize.xyxy * vec4(-2.0, -2.0, 0.0, -2.0) + vs_TEXCOORD0.xyxy;
    u_xlat2 = u_xlat2 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
    u_xlat4 = texture(_MainTex, u_xlat2.zw);
    u_xlat2 = texture(_MainTex, u_xlat2.xy);
    u_xlat4.xyz = u_xlat4.xyz * _BloomRange.xxx;
    u_xlat4.xyz = u_xlat4.www * u_xlat4.xyz;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat7.www + u_xlat4.xyz;
    u_xlat1.xyz = u_xlat6.xyz * u_xlat6.www + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat3.xyz * u_xlat3.www + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25) + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat2.xyz * _BloomRange.xxx;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.www + u_xlat4.xyz;
    u_xlat1.xyz = u_xlat8.xyz * u_xlat8.www + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat6.xyz * u_xlat6.www + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25) + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(0.125, 0.125, 0.125);
    u_xlat1 = _MainTex_TexelSize.xyxy * vec4(1.0, -1.0, -1.0, 1.0) + vs_TEXCOORD0.xyxy;
    u_xlat1 = u_xlat1 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
    u_xlat2 = texture(_MainTex, u_xlat1.xy);
    u_xlat1 = texture(_MainTex, u_xlat1.zw);
    u_xlat2.xyz = u_xlat2.xyz * _BloomRange.xxx;
    u_xlat2.xyz = u_xlat2.www * u_xlat2.xyz;
    u_xlat3.xy = vs_TEXCOORD0.xy + (-_MainTex_TexelSize.xy);
    u_xlat3.xy = u_xlat3.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat3 = texture(_MainTex, u_xlat3.xy);
    u_xlat3.xyz = u_xlat3.xyz * _BloomRange.xxx;
    u_xlat2.xyz = u_xlat3.xyz * u_xlat3.www + u_xlat2.xyz;
    u_xlat3.xy = vs_TEXCOORD0.xy + _MainTex_TexelSize.xy;
    u_xlat3.xy = u_xlat3.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat3 = texture(_MainTex, u_xlat3.xy);
    u_xlat3.xyz = u_xlat3.xyz * _BloomRange.xxx;
    u_xlat2.xyz = u_xlat3.xyz * u_xlat3.www + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _BloomRange.xxx;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat1.www + u_xlat2.xyz;
    u_xlat0.xyz = u_xlat1.xyz * vec3(0.125, 0.125, 0.125) + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * _BloomRange.yyy;
    u_xlat27 = max(u_xlat0.y, u_xlat0.x);
    u_xlat1.x = max(u_xlat0.z, 9.99999997e-07);
    u_xlat27 = max(u_xlat27, u_xlat1.x);
    u_xlat27 = min(u_xlat27, 1.0);
    u_xlat27 = u_xlat27 * 255.0;
    u_xlat27 = ceil(u_xlat27);
    u_xlat1.w = u_xlat27 * 0.00392156886;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat1.www;
    u_xlat0 = (-u_xlat1) + u_xlat5;
    SV_Target0 = vec4(_TempFilterValue) * u_xlat0 + u_xlat1;
    return;
}

#endif
"
}
SubProgram "vulkan " {
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 94
; Schema: 0
                                              OpCapability Shader 
                                       %1 = OpExtInstImport "GLSL.std.450" 
                                              OpMemoryModel Logical GLSL450 
                                              OpEntryPoint Vertex %4 "main" %11 %72 %84 %86 
                                              OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                              OpDecorate %11 Location 11 
                                              OpDecorate %16 ArrayStride 16 
                                              OpDecorate %17 ArrayStride 17 
                                              OpMemberDecorate %18 0 Offset 18 
                                              OpMemberDecorate %18 1 Offset 18 
                                              OpDecorate %18 Block 
                                              OpDecorate %20 DescriptorSet 20 
                                              OpDecorate %20 Binding 20 
                                              OpMemberDecorate %70 0 BuiltIn 70 
                                              OpMemberDecorate %70 1 BuiltIn 70 
                                              OpMemberDecorate %70 2 BuiltIn 70 
                                              OpDecorate %70 Block 
                                              OpDecorate vs_TEXCOORD0 Location 84 
                                              OpDecorate %86 Location 86 
                                       %2 = OpTypeVoid 
                                       %3 = OpTypeFunction %2 
                                       %6 = OpTypeFloat 32 
                                       %7 = OpTypeVector %6 4 
                                       %8 = OpTypePointer Private %7 
                        Private f32_4* %9 = OpVariable Private 
                                      %10 = OpTypePointer Input %7 
                         Input f32_4* %11 = OpVariable Input 
                                      %14 = OpTypeInt 32 0 
                                  u32 %15 = OpConstant 4 
                                      %16 = OpTypeArray %7 %15 
                                      %17 = OpTypeArray %7 %15 
                                      %18 = OpTypeStruct %16 %17 
                                      %19 = OpTypePointer Uniform %18 
Uniform struct {f32_4[4]; f32_4[4];}* %20 = OpVariable Uniform 
                                      %21 = OpTypeInt 32 1 
                                  i32 %22 = OpConstant 0 
                                  i32 %23 = OpConstant 1 
                                      %24 = OpTypePointer Uniform %7 
                                  i32 %35 = OpConstant 2 
                                  i32 %44 = OpConstant 3 
                       Private f32_4* %48 = OpVariable Private 
                                  u32 %68 = OpConstant 1 
                                      %69 = OpTypeArray %6 %68 
                                      %70 = OpTypeStruct %7 %6 %69 
                                      %71 = OpTypePointer Output %70 
 Output struct {f32_4; f32; f32[1];}* %72 = OpVariable Output 
                                      %80 = OpTypePointer Output %7 
                                      %82 = OpTypeVector %6 2 
                                      %83 = OpTypePointer Output %82 
               Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                      %85 = OpTypePointer Input %82 
                         Input f32_2* %86 = OpVariable Input 
                                      %88 = OpTypePointer Output %6 
                                  void %4 = OpFunction None %3 
                                       %5 = OpLabel 
                                f32_4 %12 = OpLoad %11 
                                f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                       Uniform f32_4* %25 = OpAccessChain %20 %22 %23 
                                f32_4 %26 = OpLoad %25 
                                f32_4 %27 = OpFMul %13 %26 
                                              OpStore %9 %27 
                       Uniform f32_4* %28 = OpAccessChain %20 %22 %22 
                                f32_4 %29 = OpLoad %28 
                                f32_4 %30 = OpLoad %11 
                                f32_4 %31 = OpVectorShuffle %30 %30 0 0 0 0 
                                f32_4 %32 = OpFMul %29 %31 
                                f32_4 %33 = OpLoad %9 
                                f32_4 %34 = OpFAdd %32 %33 
                                              OpStore %9 %34 
                       Uniform f32_4* %36 = OpAccessChain %20 %22 %35 
                                f32_4 %37 = OpLoad %36 
                                f32_4 %38 = OpLoad %11 
                                f32_4 %39 = OpVectorShuffle %38 %38 2 2 2 2 
                                f32_4 %40 = OpFMul %37 %39 
                                f32_4 %41 = OpLoad %9 
                                f32_4 %42 = OpFAdd %40 %41 
                                              OpStore %9 %42 
                                f32_4 %43 = OpLoad %9 
                       Uniform f32_4* %45 = OpAccessChain %20 %22 %44 
                                f32_4 %46 = OpLoad %45 
                                f32_4 %47 = OpFAdd %43 %46 
                                              OpStore %9 %47 
                                f32_4 %49 = OpLoad %9 
                                f32_4 %50 = OpVectorShuffle %49 %49 1 1 1 1 
                       Uniform f32_4* %51 = OpAccessChain %20 %23 %23 
                                f32_4 %52 = OpLoad %51 
                                f32_4 %53 = OpFMul %50 %52 
                                              OpStore %48 %53 
                       Uniform f32_4* %54 = OpAccessChain %20 %23 %22 
                                f32_4 %55 = OpLoad %54 
                                f32_4 %56 = OpLoad %9 
                                f32_4 %57 = OpVectorShuffle %56 %56 0 0 0 0 
                                f32_4 %58 = OpFMul %55 %57 
                                f32_4 %59 = OpLoad %48 
                                f32_4 %60 = OpFAdd %58 %59 
                                              OpStore %48 %60 
                       Uniform f32_4* %61 = OpAccessChain %20 %23 %35 
                                f32_4 %62 = OpLoad %61 
                                f32_4 %63 = OpLoad %9 
                                f32_4 %64 = OpVectorShuffle %63 %63 2 2 2 2 
                                f32_4 %65 = OpFMul %62 %64 
                                f32_4 %66 = OpLoad %48 
                                f32_4 %67 = OpFAdd %65 %66 
                                              OpStore %48 %67 
                       Uniform f32_4* %73 = OpAccessChain %20 %23 %44 
                                f32_4 %74 = OpLoad %73 
                                f32_4 %75 = OpLoad %9 
                                f32_4 %76 = OpVectorShuffle %75 %75 3 3 3 3 
                                f32_4 %77 = OpFMul %74 %76 
                                f32_4 %78 = OpLoad %48 
                                f32_4 %79 = OpFAdd %77 %78 
                        Output f32_4* %81 = OpAccessChain %72 %22 
                                              OpStore %81 %79 
                                f32_2 %87 = OpLoad %86 
                                              OpStore vs_TEXCOORD0 %87 
                          Output f32* %89 = OpAccessChain %72 %22 %68 
                                  f32 %90 = OpLoad %89 
                                  f32 %91 = OpFNegate %90 
                          Output f32* %92 = OpAccessChain %72 %22 %68 
                                              OpStore %92 %91 
                                              OpReturn
                                              OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 679
; Schema: 0
                                                    OpCapability Shader 
                                             %1 = OpExtInstImport "GLSL.std.450" 
                                                    OpMemoryModel Logical GLSL450 
                                                    OpEntryPoint Fragment %4 "main" %24 %668 
                                                    OpExecutionMode %4 OriginUpperLeft 
                                                    OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                    OpMemberDecorate %10 0 Offset 10 
                                                    OpMemberDecorate %10 1 Offset 10 
                                                    OpMemberDecorate %10 2 Offset 10 
                                                    OpMemberDecorate %10 3 Offset 10 
                                                    OpDecorate %10 Block 
                                                    OpDecorate %12 DescriptorSet 12 
                                                    OpDecorate %12 Binding 12 
                                                    OpDecorate vs_TEXCOORD0 Location 24 
                                                    OpDecorate %44 DescriptorSet 44 
                                                    OpDecorate %44 Binding 44 
                                                    OpDecorate %48 DescriptorSet 48 
                                                    OpDecorate %48 Binding 48 
                                                    OpDecorate %169 DescriptorSet 169 
                                                    OpDecorate %169 Binding 169 
                                                    OpDecorate %171 DescriptorSet 171 
                                                    OpDecorate %171 Binding 171 
                                                    OpDecorate %668 Location 668 
                                             %2 = OpTypeVoid 
                                             %3 = OpTypeFunction %2 
                                             %6 = OpTypeFloat 32 
                                             %7 = OpTypeVector %6 4 
                                             %8 = OpTypePointer Private %7 
                              Private f32_4* %9 = OpVariable Private 
                                            %10 = OpTypeStruct %7 %7 %7 %6 
                                            %11 = OpTypePointer Uniform %10 
Uniform struct {f32_4; f32_4; f32_4; f32;}* %12 = OpVariable Uniform 
                                            %13 = OpTypeInt 32 1 
                                        i32 %14 = OpConstant 2 
                                            %15 = OpTypeVector %6 2 
                                            %16 = OpTypePointer Uniform %7 
                                        f32 %20 = OpConstant 3.674022E-40 
                                      f32_2 %21 = OpConstantComposite %20 %20 
                                            %23 = OpTypePointer Input %15 
                      Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                        i32 %31 = OpConstant 0 
                                            %42 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                            %43 = OpTypePointer UniformConstant %42 
       UniformConstant read_only Texture2D* %44 = OpVariable UniformConstant 
                                            %46 = OpTypeSampler 
                                            %47 = OpTypePointer UniformConstant %46 
                   UniformConstant sampler* %48 = OpVariable UniformConstant 
                                            %50 = OpTypeSampledImage %42 
                                            %55 = OpTypeVector %6 3 
                                        i32 %58 = OpConstant 1 
                             Private f32_4* %65 = OpVariable Private 
                                        f32 %69 = OpConstant 3.674022E-40 
                                      f32_2 %70 = OpConstantComposite %69 %20 
                            Private f32_4* %102 = OpVariable Private 
                                       f32 %106 = OpConstant 3.674022E-40 
                                     f32_4 %107 = OpConstantComposite %20 %69 %106 %20 
                            Private f32_4* %121 = OpVariable Private 
                            Private f32_4* %142 = OpVariable Private 
                            Private f32_4* %150 = OpVariable Private 
                            Private f32_4* %162 = OpVariable Private 
      UniformConstant read_only Texture2D* %169 = OpVariable UniformConstant 
                  UniformConstant sampler* %171 = OpVariable UniformConstant 
                                       f32 %217 = OpConstant 3.674022E-40 
                                     f32_3 %218 = OpConstantComposite %217 %217 %217 
                            Private f32_4* %237 = OpVariable Private 
                                     f32_4 %241 = OpConstantComposite %20 %106 %106 %69 
                            Private f32_4* %255 = OpVariable Private 
                                     f32_4 %325 = OpConstantComposite %106 %106 %69 %106 
                                       f32 %452 = OpConstant 3.674022E-40 
                                     f32_3 %453 = OpConstantComposite %452 %452 %452 
                                       f32 %460 = OpConstant 3.674022E-40 
                                       f32 %461 = OpConstant 3.674022E-40 
                                     f32_4 %462 = OpConstantComposite %460 %461 %461 %460 
                                           %624 = OpTypePointer Private %6 
                              Private f32* %625 = OpVariable Private 
                                           %626 = OpTypeInt 32 0 
                                       u32 %627 = OpConstant 1 
                                       u32 %630 = OpConstant 0 
                                       u32 %634 = OpConstant 2 
                                       f32 %637 = OpConstant 3.674022E-40 
                                       f32 %647 = OpConstant 3.674022E-40 
                                       f32 %652 = OpConstant 3.674022E-40 
                                       u32 %654 = OpConstant 3 
                                           %667 = OpTypePointer Output %7 
                             Output f32_4* %668 = OpVariable Output 
                                       i32 %669 = OpConstant 3 
                                           %670 = OpTypePointer Uniform %6 
                                        void %4 = OpFunction None %3 
                                             %5 = OpLabel 
                             Uniform f32_4* %17 = OpAccessChain %12 %14 
                                      f32_4 %18 = OpLoad %17 
                                      f32_2 %19 = OpVectorShuffle %18 %18 0 1 
                                      f32_2 %22 = OpFMul %19 %21 
                                      f32_2 %25 = OpLoad vs_TEXCOORD0 
                                      f32_2 %26 = OpFAdd %22 %25 
                                      f32_4 %27 = OpLoad %9 
                                      f32_4 %28 = OpVectorShuffle %27 %26 4 5 2 3 
                                                    OpStore %9 %28 
                                      f32_4 %29 = OpLoad %9 
                                      f32_2 %30 = OpVectorShuffle %29 %29 0 1 
                             Uniform f32_4* %32 = OpAccessChain %12 %31 
                                      f32_4 %33 = OpLoad %32 
                                      f32_2 %34 = OpVectorShuffle %33 %33 0 1 
                                      f32_2 %35 = OpFMul %30 %34 
                             Uniform f32_4* %36 = OpAccessChain %12 %31 
                                      f32_4 %37 = OpLoad %36 
                                      f32_2 %38 = OpVectorShuffle %37 %37 2 3 
                                      f32_2 %39 = OpFAdd %35 %38 
                                      f32_4 %40 = OpLoad %9 
                                      f32_4 %41 = OpVectorShuffle %40 %39 4 5 2 3 
                                                    OpStore %9 %41 
                        read_only Texture2D %45 = OpLoad %44 
                                    sampler %49 = OpLoad %48 
                 read_only Texture2DSampled %51 = OpSampledImage %45 %49 
                                      f32_4 %52 = OpLoad %9 
                                      f32_2 %53 = OpVectorShuffle %52 %52 0 1 
                                      f32_4 %54 = OpImageSampleImplicitLod %51 %53 
                                                    OpStore %9 %54 
                                      f32_4 %56 = OpLoad %9 
                                      f32_3 %57 = OpVectorShuffle %56 %56 0 1 2 
                             Uniform f32_4* %59 = OpAccessChain %12 %58 
                                      f32_4 %60 = OpLoad %59 
                                      f32_3 %61 = OpVectorShuffle %60 %60 0 0 0 
                                      f32_3 %62 = OpFMul %57 %61 
                                      f32_4 %63 = OpLoad %9 
                                      f32_4 %64 = OpVectorShuffle %63 %62 4 5 6 3 
                                                    OpStore %9 %64 
                             Uniform f32_4* %66 = OpAccessChain %12 %14 
                                      f32_4 %67 = OpLoad %66 
                                      f32_2 %68 = OpVectorShuffle %67 %67 0 1 
                                      f32_2 %71 = OpFMul %68 %70 
                                      f32_2 %72 = OpLoad vs_TEXCOORD0 
                                      f32_2 %73 = OpFAdd %71 %72 
                                      f32_4 %74 = OpLoad %65 
                                      f32_4 %75 = OpVectorShuffle %74 %73 4 5 2 3 
                                                    OpStore %65 %75 
                                      f32_4 %76 = OpLoad %65 
                                      f32_2 %77 = OpVectorShuffle %76 %76 0 1 
                             Uniform f32_4* %78 = OpAccessChain %12 %31 
                                      f32_4 %79 = OpLoad %78 
                                      f32_2 %80 = OpVectorShuffle %79 %79 0 1 
                                      f32_2 %81 = OpFMul %77 %80 
                             Uniform f32_4* %82 = OpAccessChain %12 %31 
                                      f32_4 %83 = OpLoad %82 
                                      f32_2 %84 = OpVectorShuffle %83 %83 2 3 
                                      f32_2 %85 = OpFAdd %81 %84 
                                      f32_4 %86 = OpLoad %65 
                                      f32_4 %87 = OpVectorShuffle %86 %85 4 5 2 3 
                                                    OpStore %65 %87 
                        read_only Texture2D %88 = OpLoad %44 
                                    sampler %89 = OpLoad %48 
                 read_only Texture2DSampled %90 = OpSampledImage %88 %89 
                                      f32_4 %91 = OpLoad %65 
                                      f32_2 %92 = OpVectorShuffle %91 %91 0 1 
                                      f32_4 %93 = OpImageSampleImplicitLod %90 %92 
                                                    OpStore %65 %93 
                                      f32_4 %94 = OpLoad %65 
                                      f32_3 %95 = OpVectorShuffle %94 %94 0 1 2 
                             Uniform f32_4* %96 = OpAccessChain %12 %58 
                                      f32_4 %97 = OpLoad %96 
                                      f32_3 %98 = OpVectorShuffle %97 %97 0 0 0 
                                      f32_3 %99 = OpFMul %95 %98 
                                     f32_4 %100 = OpLoad %65 
                                     f32_4 %101 = OpVectorShuffle %100 %99 4 5 6 3 
                                                    OpStore %65 %101 
                            Uniform f32_4* %103 = OpAccessChain %12 %14 
                                     f32_4 %104 = OpLoad %103 
                                     f32_4 %105 = OpVectorShuffle %104 %104 0 1 0 1 
                                     f32_4 %108 = OpFMul %105 %107 
                                     f32_2 %109 = OpLoad vs_TEXCOORD0 
                                     f32_4 %110 = OpVectorShuffle %109 %109 0 1 0 1 
                                     f32_4 %111 = OpFAdd %108 %110 
                                                    OpStore %102 %111 
                                     f32_4 %112 = OpLoad %102 
                            Uniform f32_4* %113 = OpAccessChain %12 %31 
                                     f32_4 %114 = OpLoad %113 
                                     f32_4 %115 = OpVectorShuffle %114 %114 0 1 0 1 
                                     f32_4 %116 = OpFMul %112 %115 
                            Uniform f32_4* %117 = OpAccessChain %12 %31 
                                     f32_4 %118 = OpLoad %117 
                                     f32_4 %119 = OpVectorShuffle %118 %118 2 3 2 3 
                                     f32_4 %120 = OpFAdd %116 %119 
                                                    OpStore %102 %120 
                       read_only Texture2D %122 = OpLoad %44 
                                   sampler %123 = OpLoad %48 
                read_only Texture2DSampled %124 = OpSampledImage %122 %123 
                                     f32_4 %125 = OpLoad %102 
                                     f32_2 %126 = OpVectorShuffle %125 %125 0 1 
                                     f32_4 %127 = OpImageSampleImplicitLod %124 %126 
                                                    OpStore %121 %127 
                       read_only Texture2D %128 = OpLoad %44 
                                   sampler %129 = OpLoad %48 
                read_only Texture2DSampled %130 = OpSampledImage %128 %129 
                                     f32_4 %131 = OpLoad %102 
                                     f32_2 %132 = OpVectorShuffle %131 %131 2 3 
                                     f32_4 %133 = OpImageSampleImplicitLod %130 %132 
                                                    OpStore %102 %133 
                                     f32_4 %134 = OpLoad %121 
                                     f32_3 %135 = OpVectorShuffle %134 %134 0 1 2 
                            Uniform f32_4* %136 = OpAccessChain %12 %58 
                                     f32_4 %137 = OpLoad %136 
                                     f32_3 %138 = OpVectorShuffle %137 %137 0 0 0 
                                     f32_3 %139 = OpFMul %135 %138 
                                     f32_4 %140 = OpLoad %121 
                                     f32_4 %141 = OpVectorShuffle %140 %139 4 5 6 3 
                                                    OpStore %121 %141 
                                     f32_4 %143 = OpLoad %121 
                                     f32_3 %144 = OpVectorShuffle %143 %143 3 3 3 
                                     f32_4 %145 = OpLoad %121 
                                     f32_3 %146 = OpVectorShuffle %145 %145 0 1 2 
                                     f32_3 %147 = OpFMul %144 %146 
                                     f32_4 %148 = OpLoad %142 
                                     f32_4 %149 = OpVectorShuffle %148 %147 4 5 6 3 
                                                    OpStore %142 %149 
                                     f32_2 %151 = OpLoad vs_TEXCOORD0 
                            Uniform f32_4* %152 = OpAccessChain %12 %31 
                                     f32_4 %153 = OpLoad %152 
                                     f32_2 %154 = OpVectorShuffle %153 %153 0 1 
                                     f32_2 %155 = OpFMul %151 %154 
                            Uniform f32_4* %156 = OpAccessChain %12 %31 
                                     f32_4 %157 = OpLoad %156 
                                     f32_2 %158 = OpVectorShuffle %157 %157 2 3 
                                     f32_2 %159 = OpFAdd %155 %158 
                                     f32_4 %160 = OpLoad %150 
                                     f32_4 %161 = OpVectorShuffle %160 %159 4 5 2 3 
                                                    OpStore %150 %161 
                       read_only Texture2D %163 = OpLoad %44 
                                   sampler %164 = OpLoad %48 
                read_only Texture2DSampled %165 = OpSampledImage %163 %164 
                                     f32_4 %166 = OpLoad %150 
                                     f32_2 %167 = OpVectorShuffle %166 %166 0 1 
                                     f32_4 %168 = OpImageSampleImplicitLod %165 %167 
                                                    OpStore %162 %168 
                       read_only Texture2D %170 = OpLoad %169 
                                   sampler %172 = OpLoad %171 
                read_only Texture2DSampled %173 = OpSampledImage %170 %172 
                                     f32_4 %174 = OpLoad %150 
                                     f32_2 %175 = OpVectorShuffle %174 %174 0 1 
                                     f32_4 %176 = OpImageSampleImplicitLod %173 %175 
                                                    OpStore %150 %176 
                                     f32_4 %177 = OpLoad %162 
                                     f32_3 %178 = OpVectorShuffle %177 %177 0 1 2 
                            Uniform f32_4* %179 = OpAccessChain %12 %58 
                                     f32_4 %180 = OpLoad %179 
                                     f32_3 %181 = OpVectorShuffle %180 %180 0 0 0 
                                     f32_3 %182 = OpFMul %178 %181 
                                     f32_4 %183 = OpLoad %162 
                                     f32_4 %184 = OpVectorShuffle %183 %182 4 5 6 3 
                                                    OpStore %162 %184 
                                     f32_4 %185 = OpLoad %162 
                                     f32_3 %186 = OpVectorShuffle %185 %185 0 1 2 
                                     f32_4 %187 = OpLoad %162 
                                     f32_3 %188 = OpVectorShuffle %187 %187 3 3 3 
                                     f32_3 %189 = OpFMul %186 %188 
                                     f32_4 %190 = OpLoad %142 
                                     f32_3 %191 = OpVectorShuffle %190 %190 0 1 2 
                                     f32_3 %192 = OpFAdd %189 %191 
                                     f32_4 %193 = OpLoad %142 
                                     f32_4 %194 = OpVectorShuffle %193 %192 4 5 6 3 
                                                    OpStore %142 %194 
                                     f32_4 %195 = OpLoad %65 
                                     f32_3 %196 = OpVectorShuffle %195 %195 0 1 2 
                                     f32_4 %197 = OpLoad %65 
                                     f32_3 %198 = OpVectorShuffle %197 %197 3 3 3 
                                     f32_3 %199 = OpFMul %196 %198 
                                     f32_4 %200 = OpLoad %142 
                                     f32_3 %201 = OpVectorShuffle %200 %200 0 1 2 
                                     f32_3 %202 = OpFAdd %199 %201 
                                     f32_4 %203 = OpLoad %142 
                                     f32_4 %204 = OpVectorShuffle %203 %202 4 5 6 3 
                                                    OpStore %142 %204 
                                     f32_4 %205 = OpLoad %9 
                                     f32_3 %206 = OpVectorShuffle %205 %205 0 1 2 
                                     f32_4 %207 = OpLoad %9 
                                     f32_3 %208 = OpVectorShuffle %207 %207 3 3 3 
                                     f32_3 %209 = OpFMul %206 %208 
                                     f32_4 %210 = OpLoad %142 
                                     f32_3 %211 = OpVectorShuffle %210 %210 0 1 2 
                                     f32_3 %212 = OpFAdd %209 %211 
                                     f32_4 %213 = OpLoad %9 
                                     f32_4 %214 = OpVectorShuffle %213 %212 4 5 6 3 
                                                    OpStore %9 %214 
                                     f32_4 %215 = OpLoad %9 
                                     f32_3 %216 = OpVectorShuffle %215 %215 0 1 2 
                                     f32_3 %219 = OpFMul %216 %218 
                                     f32_4 %220 = OpLoad %9 
                                     f32_4 %221 = OpVectorShuffle %220 %219 4 5 6 3 
                                                    OpStore %9 %221 
                                     f32_4 %222 = OpLoad %102 
                                     f32_3 %223 = OpVectorShuffle %222 %222 0 1 2 
                            Uniform f32_4* %224 = OpAccessChain %12 %58 
                                     f32_4 %225 = OpLoad %224 
                                     f32_3 %226 = OpVectorShuffle %225 %225 0 0 0 
                                     f32_3 %227 = OpFMul %223 %226 
                                     f32_4 %228 = OpLoad %102 
                                     f32_4 %229 = OpVectorShuffle %228 %227 4 5 6 3 
                                                    OpStore %102 %229 
                                     f32_4 %230 = OpLoad %162 
                                     f32_3 %231 = OpVectorShuffle %230 %230 3 3 3 
                                     f32_4 %232 = OpLoad %162 
                                     f32_3 %233 = OpVectorShuffle %232 %232 0 1 2 
                                     f32_3 %234 = OpFMul %231 %233 
                                     f32_4 %235 = OpLoad %142 
                                     f32_4 %236 = OpVectorShuffle %235 %234 4 5 6 3 
                                                    OpStore %142 %236 
                            Uniform f32_4* %238 = OpAccessChain %12 %14 
                                     f32_4 %239 = OpLoad %238 
                                     f32_4 %240 = OpVectorShuffle %239 %239 0 1 0 1 
                                     f32_4 %242 = OpFMul %240 %241 
                                     f32_2 %243 = OpLoad vs_TEXCOORD0 
                                     f32_4 %244 = OpVectorShuffle %243 %243 0 1 0 1 
                                     f32_4 %245 = OpFAdd %242 %244 
                                                    OpStore %237 %245 
                                     f32_4 %246 = OpLoad %237 
                            Uniform f32_4* %247 = OpAccessChain %12 %31 
                                     f32_4 %248 = OpLoad %247 
                                     f32_4 %249 = OpVectorShuffle %248 %248 0 1 0 1 
                                     f32_4 %250 = OpFMul %246 %249 
                            Uniform f32_4* %251 = OpAccessChain %12 %31 
                                     f32_4 %252 = OpLoad %251 
                                     f32_4 %253 = OpVectorShuffle %252 %252 2 3 2 3 
                                     f32_4 %254 = OpFAdd %250 %253 
                                                    OpStore %237 %254 
                       read_only Texture2D %256 = OpLoad %44 
                                   sampler %257 = OpLoad %48 
                read_only Texture2DSampled %258 = OpSampledImage %256 %257 
                                     f32_4 %259 = OpLoad %237 
                                     f32_2 %260 = OpVectorShuffle %259 %259 2 3 
                                     f32_4 %261 = OpImageSampleImplicitLod %258 %260 
                                                    OpStore %255 %261 
                       read_only Texture2D %262 = OpLoad %44 
                                   sampler %263 = OpLoad %48 
                read_only Texture2DSampled %264 = OpSampledImage %262 %263 
                                     f32_4 %265 = OpLoad %237 
                                     f32_2 %266 = OpVectorShuffle %265 %265 0 1 
                                     f32_4 %267 = OpImageSampleImplicitLod %264 %266 
                                                    OpStore %237 %267 
                                     f32_4 %268 = OpLoad %255 
                                     f32_3 %269 = OpVectorShuffle %268 %268 0 1 2 
                            Uniform f32_4* %270 = OpAccessChain %12 %58 
                                     f32_4 %271 = OpLoad %270 
                                     f32_3 %272 = OpVectorShuffle %271 %271 0 0 0 
                                     f32_3 %273 = OpFMul %269 %272 
                                     f32_4 %274 = OpLoad %255 
                                     f32_4 %275 = OpVectorShuffle %274 %273 4 5 6 3 
                                                    OpStore %255 %275 
                                     f32_4 %276 = OpLoad %255 
                                     f32_3 %277 = OpVectorShuffle %276 %276 0 1 2 
                                     f32_4 %278 = OpLoad %255 
                                     f32_3 %279 = OpVectorShuffle %278 %278 3 3 3 
                                     f32_3 %280 = OpFMul %277 %279 
                                     f32_4 %281 = OpLoad %142 
                                     f32_3 %282 = OpVectorShuffle %281 %281 0 1 2 
                                     f32_3 %283 = OpFAdd %280 %282 
                                     f32_4 %284 = OpLoad %142 
                                     f32_4 %285 = OpVectorShuffle %284 %283 4 5 6 3 
                                                    OpStore %142 %285 
                                     f32_4 %286 = OpLoad %102 
                                     f32_3 %287 = OpVectorShuffle %286 %286 0 1 2 
                                     f32_4 %288 = OpLoad %102 
                                     f32_3 %289 = OpVectorShuffle %288 %288 3 3 3 
                                     f32_3 %290 = OpFMul %287 %289 
                                     f32_4 %291 = OpLoad %142 
                                     f32_3 %292 = OpVectorShuffle %291 %291 0 1 2 
                                     f32_3 %293 = OpFAdd %290 %292 
                                     f32_4 %294 = OpLoad %102 
                                     f32_4 %295 = OpVectorShuffle %294 %293 4 5 6 3 
                                                    OpStore %102 %295 
                                     f32_4 %296 = OpLoad %65 
                                     f32_3 %297 = OpVectorShuffle %296 %296 0 1 2 
                                     f32_4 %298 = OpLoad %65 
                                     f32_3 %299 = OpVectorShuffle %298 %298 3 3 3 
                                     f32_3 %300 = OpFMul %297 %299 
                                     f32_4 %301 = OpLoad %102 
                                     f32_3 %302 = OpVectorShuffle %301 %301 0 1 2 
                                     f32_3 %303 = OpFAdd %300 %302 
                                     f32_4 %304 = OpLoad %65 
                                     f32_4 %305 = OpVectorShuffle %304 %303 4 5 6 3 
                                                    OpStore %65 %305 
                                     f32_4 %306 = OpLoad %65 
                                     f32_3 %307 = OpVectorShuffle %306 %306 0 1 2 
                                     f32_3 %308 = OpFMul %307 %218 
                                     f32_4 %309 = OpLoad %9 
                                     f32_3 %310 = OpVectorShuffle %309 %309 0 1 2 
                                     f32_3 %311 = OpFAdd %308 %310 
                                     f32_4 %312 = OpLoad %9 
                                     f32_4 %313 = OpVectorShuffle %312 %311 4 5 6 3 
                                                    OpStore %9 %313 
                                     f32_4 %314 = OpLoad %237 
                                     f32_3 %315 = OpVectorShuffle %314 %314 0 1 2 
                            Uniform f32_4* %316 = OpAccessChain %12 %58 
                                     f32_4 %317 = OpLoad %316 
                                     f32_3 %318 = OpVectorShuffle %317 %317 0 0 0 
                                     f32_3 %319 = OpFMul %315 %318 
                                     f32_4 %320 = OpLoad %65 
                                     f32_4 %321 = OpVectorShuffle %320 %319 4 5 6 3 
                                                    OpStore %65 %321 
                            Uniform f32_4* %322 = OpAccessChain %12 %14 
                                     f32_4 %323 = OpLoad %322 
                                     f32_4 %324 = OpVectorShuffle %323 %323 0 1 0 1 
                                     f32_4 %326 = OpFMul %324 %325 
                                     f32_2 %327 = OpLoad vs_TEXCOORD0 
                                     f32_4 %328 = OpVectorShuffle %327 %327 0 1 0 1 
                                     f32_4 %329 = OpFAdd %326 %328 
                                                    OpStore %102 %329 
                                     f32_4 %330 = OpLoad %102 
                            Uniform f32_4* %331 = OpAccessChain %12 %31 
                                     f32_4 %332 = OpLoad %331 
                                     f32_4 %333 = OpVectorShuffle %332 %332 0 1 0 1 
                                     f32_4 %334 = OpFMul %330 %333 
                            Uniform f32_4* %335 = OpAccessChain %12 %31 
                                     f32_4 %336 = OpLoad %335 
                                     f32_4 %337 = OpVectorShuffle %336 %336 2 3 2 3 
                                     f32_4 %338 = OpFAdd %334 %337 
                                                    OpStore %102 %338 
                       read_only Texture2D %339 = OpLoad %44 
                                   sampler %340 = OpLoad %48 
                read_only Texture2DSampled %341 = OpSampledImage %339 %340 
                                     f32_4 %342 = OpLoad %102 
                                     f32_2 %343 = OpVectorShuffle %342 %342 2 3 
                                     f32_4 %344 = OpImageSampleImplicitLod %341 %343 
                                                    OpStore %142 %344 
                       read_only Texture2D %345 = OpLoad %44 
                                   sampler %346 = OpLoad %48 
                read_only Texture2DSampled %347 = OpSampledImage %345 %346 
                                     f32_4 %348 = OpLoad %102 
                                     f32_2 %349 = OpVectorShuffle %348 %348 0 1 
                                     f32_4 %350 = OpImageSampleImplicitLod %347 %349 
                                                    OpStore %102 %350 
                                     f32_4 %351 = OpLoad %142 
                                     f32_3 %352 = OpVectorShuffle %351 %351 0 1 2 
                            Uniform f32_4* %353 = OpAccessChain %12 %58 
                                     f32_4 %354 = OpLoad %353 
                                     f32_3 %355 = OpVectorShuffle %354 %354 0 0 0 
                                     f32_3 %356 = OpFMul %352 %355 
                                     f32_4 %357 = OpLoad %142 
                                     f32_4 %358 = OpVectorShuffle %357 %356 4 5 6 3 
                                                    OpStore %142 %358 
                                     f32_4 %359 = OpLoad %142 
                                     f32_3 %360 = OpVectorShuffle %359 %359 3 3 3 
                                     f32_4 %361 = OpLoad %142 
                                     f32_3 %362 = OpVectorShuffle %361 %361 0 1 2 
                                     f32_3 %363 = OpFMul %360 %362 
                                     f32_4 %364 = OpLoad %142 
                                     f32_4 %365 = OpVectorShuffle %364 %363 4 5 6 3 
                                                    OpStore %142 %365 
                                     f32_4 %366 = OpLoad %65 
                                     f32_3 %367 = OpVectorShuffle %366 %366 0 1 2 
                                     f32_4 %368 = OpLoad %237 
                                     f32_3 %369 = OpVectorShuffle %368 %368 3 3 3 
                                     f32_3 %370 = OpFMul %367 %369 
                                     f32_4 %371 = OpLoad %142 
                                     f32_3 %372 = OpVectorShuffle %371 %371 0 1 2 
                                     f32_3 %373 = OpFAdd %370 %372 
                                     f32_4 %374 = OpLoad %65 
                                     f32_4 %375 = OpVectorShuffle %374 %373 4 5 6 3 
                                                    OpStore %65 %375 
                                     f32_4 %376 = OpLoad %162 
                                     f32_3 %377 = OpVectorShuffle %376 %376 0 1 2 
                                     f32_4 %378 = OpLoad %162 
                                     f32_3 %379 = OpVectorShuffle %378 %378 3 3 3 
                                     f32_3 %380 = OpFMul %377 %379 
                                     f32_4 %381 = OpLoad %65 
                                     f32_3 %382 = OpVectorShuffle %381 %381 0 1 2 
                                     f32_3 %383 = OpFAdd %380 %382 
                                     f32_4 %384 = OpLoad %65 
                                     f32_4 %385 = OpVectorShuffle %384 %383 4 5 6 3 
                                                    OpStore %65 %385 
                                     f32_4 %386 = OpLoad %121 
                                     f32_3 %387 = OpVectorShuffle %386 %386 0 1 2 
                                     f32_4 %388 = OpLoad %121 
                                     f32_3 %389 = OpVectorShuffle %388 %388 3 3 3 
                                     f32_3 %390 = OpFMul %387 %389 
                                     f32_4 %391 = OpLoad %65 
                                     f32_3 %392 = OpVectorShuffle %391 %391 0 1 2 
                                     f32_3 %393 = OpFAdd %390 %392 
                                     f32_4 %394 = OpLoad %65 
                                     f32_4 %395 = OpVectorShuffle %394 %393 4 5 6 3 
                                                    OpStore %65 %395 
                                     f32_4 %396 = OpLoad %65 
                                     f32_3 %397 = OpVectorShuffle %396 %396 0 1 2 
                                     f32_3 %398 = OpFMul %397 %218 
                                     f32_4 %399 = OpLoad %9 
                                     f32_3 %400 = OpVectorShuffle %399 %399 0 1 2 
                                     f32_3 %401 = OpFAdd %398 %400 
                                     f32_4 %402 = OpLoad %9 
                                     f32_4 %403 = OpVectorShuffle %402 %401 4 5 6 3 
                                                    OpStore %9 %403 
                                     f32_4 %404 = OpLoad %102 
                                     f32_3 %405 = OpVectorShuffle %404 %404 0 1 2 
                            Uniform f32_4* %406 = OpAccessChain %12 %58 
                                     f32_4 %407 = OpLoad %406 
                                     f32_3 %408 = OpVectorShuffle %407 %407 0 0 0 
                                     f32_3 %409 = OpFMul %405 %408 
                                     f32_4 %410 = OpLoad %65 
                                     f32_4 %411 = OpVectorShuffle %410 %409 4 5 6 3 
                                                    OpStore %65 %411 
                                     f32_4 %412 = OpLoad %65 
                                     f32_3 %413 = OpVectorShuffle %412 %412 0 1 2 
                                     f32_4 %414 = OpLoad %102 
                                     f32_3 %415 = OpVectorShuffle %414 %414 3 3 3 
                                     f32_3 %416 = OpFMul %413 %415 
                                     f32_4 %417 = OpLoad %142 
                                     f32_3 %418 = OpVectorShuffle %417 %417 0 1 2 
                                     f32_3 %419 = OpFAdd %416 %418 
                                     f32_4 %420 = OpLoad %65 
                                     f32_4 %421 = OpVectorShuffle %420 %419 4 5 6 3 
                                                    OpStore %65 %421 
                                     f32_4 %422 = OpLoad %255 
                                     f32_3 %423 = OpVectorShuffle %422 %422 0 1 2 
                                     f32_4 %424 = OpLoad %255 
                                     f32_3 %425 = OpVectorShuffle %424 %424 3 3 3 
                                     f32_3 %426 = OpFMul %423 %425 
                                     f32_4 %427 = OpLoad %65 
                                     f32_3 %428 = OpVectorShuffle %427 %427 0 1 2 
                                     f32_3 %429 = OpFAdd %426 %428 
                                     f32_4 %430 = OpLoad %65 
                                     f32_4 %431 = OpVectorShuffle %430 %429 4 5 6 3 
                                                    OpStore %65 %431 
                                     f32_4 %432 = OpLoad %162 
                                     f32_3 %433 = OpVectorShuffle %432 %432 0 1 2 
                                     f32_4 %434 = OpLoad %162 
                                     f32_3 %435 = OpVectorShuffle %434 %434 3 3 3 
                                     f32_3 %436 = OpFMul %433 %435 
                                     f32_4 %437 = OpLoad %65 
                                     f32_3 %438 = OpVectorShuffle %437 %437 0 1 2 
                                     f32_3 %439 = OpFAdd %436 %438 
                                     f32_4 %440 = OpLoad %65 
                                     f32_4 %441 = OpVectorShuffle %440 %439 4 5 6 3 
                                                    OpStore %65 %441 
                                     f32_4 %442 = OpLoad %65 
                                     f32_3 %443 = OpVectorShuffle %442 %442 0 1 2 
                                     f32_3 %444 = OpFMul %443 %218 
                                     f32_4 %445 = OpLoad %9 
                                     f32_3 %446 = OpVectorShuffle %445 %445 0 1 2 
                                     f32_3 %447 = OpFAdd %444 %446 
                                     f32_4 %448 = OpLoad %9 
                                     f32_4 %449 = OpVectorShuffle %448 %447 4 5 6 3 
                                                    OpStore %9 %449 
                                     f32_4 %450 = OpLoad %9 
                                     f32_3 %451 = OpVectorShuffle %450 %450 0 1 2 
                                     f32_3 %454 = OpFMul %451 %453 
                                     f32_4 %455 = OpLoad %9 
                                     f32_4 %456 = OpVectorShuffle %455 %454 4 5 6 3 
                                                    OpStore %9 %456 
                            Uniform f32_4* %457 = OpAccessChain %12 %14 
                                     f32_4 %458 = OpLoad %457 
                                     f32_4 %459 = OpVectorShuffle %458 %458 0 1 0 1 
                                     f32_4 %463 = OpFMul %459 %462 
                                     f32_2 %464 = OpLoad vs_TEXCOORD0 
                                     f32_4 %465 = OpVectorShuffle %464 %464 0 1 0 1 
                                     f32_4 %466 = OpFAdd %463 %465 
                                                    OpStore %65 %466 
                                     f32_4 %467 = OpLoad %65 
                            Uniform f32_4* %468 = OpAccessChain %12 %31 
                                     f32_4 %469 = OpLoad %468 
                                     f32_4 %470 = OpVectorShuffle %469 %469 0 1 0 1 
                                     f32_4 %471 = OpFMul %467 %470 
                            Uniform f32_4* %472 = OpAccessChain %12 %31 
                                     f32_4 %473 = OpLoad %472 
                                     f32_4 %474 = OpVectorShuffle %473 %473 2 3 2 3 
                                     f32_4 %475 = OpFAdd %471 %474 
                                                    OpStore %65 %475 
                       read_only Texture2D %476 = OpLoad %44 
                                   sampler %477 = OpLoad %48 
                read_only Texture2DSampled %478 = OpSampledImage %476 %477 
                                     f32_4 %479 = OpLoad %65 
                                     f32_2 %480 = OpVectorShuffle %479 %479 0 1 
                                     f32_4 %481 = OpImageSampleImplicitLod %478 %480 
                                                    OpStore %102 %481 
                       read_only Texture2D %482 = OpLoad %44 
                                   sampler %483 = OpLoad %48 
                read_only Texture2DSampled %484 = OpSampledImage %482 %483 
                                     f32_4 %485 = OpLoad %65 
                                     f32_2 %486 = OpVectorShuffle %485 %485 2 3 
                                     f32_4 %487 = OpImageSampleImplicitLod %484 %486 
                                                    OpStore %65 %487 
                                     f32_4 %488 = OpLoad %102 
                                     f32_3 %489 = OpVectorShuffle %488 %488 0 1 2 
                            Uniform f32_4* %490 = OpAccessChain %12 %58 
                                     f32_4 %491 = OpLoad %490 
                                     f32_3 %492 = OpVectorShuffle %491 %491 0 0 0 
                                     f32_3 %493 = OpFMul %489 %492 
                                     f32_4 %494 = OpLoad %102 
                                     f32_4 %495 = OpVectorShuffle %494 %493 4 5 6 3 
                                                    OpStore %102 %495 
                                     f32_4 %496 = OpLoad %102 
                                     f32_3 %497 = OpVectorShuffle %496 %496 3 3 3 
                                     f32_4 %498 = OpLoad %102 
                                     f32_3 %499 = OpVectorShuffle %498 %498 0 1 2 
                                     f32_3 %500 = OpFMul %497 %499 
                                     f32_4 %501 = OpLoad %102 
                                     f32_4 %502 = OpVectorShuffle %501 %500 4 5 6 3 
                                                    OpStore %102 %502 
                                     f32_2 %503 = OpLoad vs_TEXCOORD0 
                            Uniform f32_4* %504 = OpAccessChain %12 %14 
                                     f32_4 %505 = OpLoad %504 
                                     f32_2 %506 = OpVectorShuffle %505 %505 0 1 
                                     f32_2 %507 = OpFNegate %506 
                                     f32_2 %508 = OpFAdd %503 %507 
                                     f32_4 %509 = OpLoad %121 
                                     f32_4 %510 = OpVectorShuffle %509 %508 4 5 2 3 
                                                    OpStore %121 %510 
                                     f32_4 %511 = OpLoad %121 
                                     f32_2 %512 = OpVectorShuffle %511 %511 0 1 
                            Uniform f32_4* %513 = OpAccessChain %12 %31 
                                     f32_4 %514 = OpLoad %513 
                                     f32_2 %515 = OpVectorShuffle %514 %514 0 1 
                                     f32_2 %516 = OpFMul %512 %515 
                            Uniform f32_4* %517 = OpAccessChain %12 %31 
                                     f32_4 %518 = OpLoad %517 
                                     f32_2 %519 = OpVectorShuffle %518 %518 2 3 
                                     f32_2 %520 = OpFAdd %516 %519 
                                     f32_4 %521 = OpLoad %121 
                                     f32_4 %522 = OpVectorShuffle %521 %520 4 5 2 3 
                                                    OpStore %121 %522 
                       read_only Texture2D %523 = OpLoad %44 
                                   sampler %524 = OpLoad %48 
                read_only Texture2DSampled %525 = OpSampledImage %523 %524 
                                     f32_4 %526 = OpLoad %121 
                                     f32_2 %527 = OpVectorShuffle %526 %526 0 1 
                                     f32_4 %528 = OpImageSampleImplicitLod %525 %527 
                                                    OpStore %121 %528 
                                     f32_4 %529 = OpLoad %121 
                                     f32_3 %530 = OpVectorShuffle %529 %529 0 1 2 
                            Uniform f32_4* %531 = OpAccessChain %12 %58 
                                     f32_4 %532 = OpLoad %531 
                                     f32_3 %533 = OpVectorShuffle %532 %532 0 0 0 
                                     f32_3 %534 = OpFMul %530 %533 
                                     f32_4 %535 = OpLoad %121 
                                     f32_4 %536 = OpVectorShuffle %535 %534 4 5 6 3 
                                                    OpStore %121 %536 
                                     f32_4 %537 = OpLoad %121 
                                     f32_3 %538 = OpVectorShuffle %537 %537 0 1 2 
                                     f32_4 %539 = OpLoad %121 
                                     f32_3 %540 = OpVectorShuffle %539 %539 3 3 3 
                                     f32_3 %541 = OpFMul %538 %540 
                                     f32_4 %542 = OpLoad %102 
                                     f32_3 %543 = OpVectorShuffle %542 %542 0 1 2 
                                     f32_3 %544 = OpFAdd %541 %543 
                                     f32_4 %545 = OpLoad %102 
                                     f32_4 %546 = OpVectorShuffle %545 %544 4 5 6 3 
                                                    OpStore %102 %546 
                                     f32_2 %547 = OpLoad vs_TEXCOORD0 
                            Uniform f32_4* %548 = OpAccessChain %12 %14 
                                     f32_4 %549 = OpLoad %548 
                                     f32_2 %550 = OpVectorShuffle %549 %549 0 1 
                                     f32_2 %551 = OpFAdd %547 %550 
                                     f32_4 %552 = OpLoad %121 
                                     f32_4 %553 = OpVectorShuffle %552 %551 4 5 2 3 
                                                    OpStore %121 %553 
                                     f32_4 %554 = OpLoad %121 
                                     f32_2 %555 = OpVectorShuffle %554 %554 0 1 
                            Uniform f32_4* %556 = OpAccessChain %12 %31 
                                     f32_4 %557 = OpLoad %556 
                                     f32_2 %558 = OpVectorShuffle %557 %557 0 1 
                                     f32_2 %559 = OpFMul %555 %558 
                            Uniform f32_4* %560 = OpAccessChain %12 %31 
                                     f32_4 %561 = OpLoad %560 
                                     f32_2 %562 = OpVectorShuffle %561 %561 2 3 
                                     f32_2 %563 = OpFAdd %559 %562 
                                     f32_4 %564 = OpLoad %121 
                                     f32_4 %565 = OpVectorShuffle %564 %563 4 5 2 3 
                                                    OpStore %121 %565 
                       read_only Texture2D %566 = OpLoad %44 
                                   sampler %567 = OpLoad %48 
                read_only Texture2DSampled %568 = OpSampledImage %566 %567 
                                     f32_4 %569 = OpLoad %121 
                                     f32_2 %570 = OpVectorShuffle %569 %569 0 1 
                                     f32_4 %571 = OpImageSampleImplicitLod %568 %570 
                                                    OpStore %121 %571 
                                     f32_4 %572 = OpLoad %121 
                                     f32_3 %573 = OpVectorShuffle %572 %572 0 1 2 
                            Uniform f32_4* %574 = OpAccessChain %12 %58 
                                     f32_4 %575 = OpLoad %574 
                                     f32_3 %576 = OpVectorShuffle %575 %575 0 0 0 
                                     f32_3 %577 = OpFMul %573 %576 
                                     f32_4 %578 = OpLoad %121 
                                     f32_4 %579 = OpVectorShuffle %578 %577 4 5 6 3 
                                                    OpStore %121 %579 
                                     f32_4 %580 = OpLoad %121 
                                     f32_3 %581 = OpVectorShuffle %580 %580 0 1 2 
                                     f32_4 %582 = OpLoad %121 
                                     f32_3 %583 = OpVectorShuffle %582 %582 3 3 3 
                                     f32_3 %584 = OpFMul %581 %583 
                                     f32_4 %585 = OpLoad %102 
                                     f32_3 %586 = OpVectorShuffle %585 %585 0 1 2 
                                     f32_3 %587 = OpFAdd %584 %586 
                                     f32_4 %588 = OpLoad %102 
                                     f32_4 %589 = OpVectorShuffle %588 %587 4 5 6 3 
                                                    OpStore %102 %589 
                                     f32_4 %590 = OpLoad %65 
                                     f32_3 %591 = OpVectorShuffle %590 %590 0 1 2 
                            Uniform f32_4* %592 = OpAccessChain %12 %58 
                                     f32_4 %593 = OpLoad %592 
                                     f32_3 %594 = OpVectorShuffle %593 %593 0 0 0 
                                     f32_3 %595 = OpFMul %591 %594 
                                     f32_4 %596 = OpLoad %65 
                                     f32_4 %597 = OpVectorShuffle %596 %595 4 5 6 3 
                                                    OpStore %65 %597 
                                     f32_4 %598 = OpLoad %65 
                                     f32_3 %599 = OpVectorShuffle %598 %598 0 1 2 
                                     f32_4 %600 = OpLoad %65 
                                     f32_3 %601 = OpVectorShuffle %600 %600 3 3 3 
                                     f32_3 %602 = OpFMul %599 %601 
                                     f32_4 %603 = OpLoad %102 
                                     f32_3 %604 = OpVectorShuffle %603 %603 0 1 2 
                                     f32_3 %605 = OpFAdd %602 %604 
                                     f32_4 %606 = OpLoad %65 
                                     f32_4 %607 = OpVectorShuffle %606 %605 4 5 6 3 
                                                    OpStore %65 %607 
                                     f32_4 %608 = OpLoad %65 
                                     f32_3 %609 = OpVectorShuffle %608 %608 0 1 2 
                                     f32_3 %610 = OpFMul %609 %453 
                                     f32_4 %611 = OpLoad %9 
                                     f32_3 %612 = OpVectorShuffle %611 %611 0 1 2 
                                     f32_3 %613 = OpFAdd %610 %612 
                                     f32_4 %614 = OpLoad %9 
                                     f32_4 %615 = OpVectorShuffle %614 %613 4 5 6 3 
                                                    OpStore %9 %615 
                                     f32_4 %616 = OpLoad %9 
                                     f32_3 %617 = OpVectorShuffle %616 %616 0 1 2 
                            Uniform f32_4* %618 = OpAccessChain %12 %58 
                                     f32_4 %619 = OpLoad %618 
                                     f32_3 %620 = OpVectorShuffle %619 %619 1 1 1 
                                     f32_3 %621 = OpFMul %617 %620 
                                     f32_4 %622 = OpLoad %9 
                                     f32_4 %623 = OpVectorShuffle %622 %621 4 5 6 3 
                                                    OpStore %9 %623 
                              Private f32* %628 = OpAccessChain %9 %627 
                                       f32 %629 = OpLoad %628 
                              Private f32* %631 = OpAccessChain %9 %630 
                                       f32 %632 = OpLoad %631 
                                       f32 %633 = OpExtInst %1 40 %629 %632 
                                                    OpStore %625 %633 
                              Private f32* %635 = OpAccessChain %9 %634 
                                       f32 %636 = OpLoad %635 
                                       f32 %638 = OpExtInst %1 40 %636 %637 
                              Private f32* %639 = OpAccessChain %65 %630 
                                                    OpStore %639 %638 
                                       f32 %640 = OpLoad %625 
                              Private f32* %641 = OpAccessChain %65 %630 
                                       f32 %642 = OpLoad %641 
                                       f32 %643 = OpExtInst %1 40 %640 %642 
                                                    OpStore %625 %643 
                                       f32 %644 = OpLoad %625 
                                       f32 %645 = OpExtInst %1 37 %644 %460 
                                                    OpStore %625 %645 
                                       f32 %646 = OpLoad %625 
                                       f32 %648 = OpFMul %646 %647 
                                                    OpStore %625 %648 
                                       f32 %649 = OpLoad %625 
                                       f32 %650 = OpExtInst %1 9 %649 
                                                    OpStore %625 %650 
                                       f32 %651 = OpLoad %625 
                                       f32 %653 = OpFMul %651 %652 
                              Private f32* %655 = OpAccessChain %65 %654 
                                                    OpStore %655 %653 
                                     f32_4 %656 = OpLoad %9 
                                     f32_3 %657 = OpVectorShuffle %656 %656 0 1 2 
                                     f32_4 %658 = OpLoad %65 
                                     f32_3 %659 = OpVectorShuffle %658 %658 3 3 3 
                                     f32_3 %660 = OpFDiv %657 %659 
                                     f32_4 %661 = OpLoad %65 
                                     f32_4 %662 = OpVectorShuffle %661 %660 4 5 6 3 
                                                    OpStore %65 %662 
                                     f32_4 %663 = OpLoad %65 
                                     f32_4 %664 = OpFNegate %663 
                                     f32_4 %665 = OpLoad %150 
                                     f32_4 %666 = OpFAdd %664 %665 
                                                    OpStore %9 %666 
                              Uniform f32* %671 = OpAccessChain %12 %669 
                                       f32 %672 = OpLoad %671 
                                     f32_4 %673 = OpCompositeConstruct %672 %672 %672 %672 
                                     f32_4 %674 = OpLoad %9 
                                     f32_4 %675 = OpFMul %673 %674 
                                     f32_4 %676 = OpLoad %65 
                                     f32_4 %677 = OpFAdd %675 %676 
                                                    OpStore %668 %677 
                                                    OpReturn
                                                    OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "AB_HIGH_PRECISION" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "AB_HIGH_PRECISION" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in  vec4 in_POSITION0;
in  vec2 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _MainTex_TexelSize;
uniform 	float _TempFilterValue;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
UNITY_LOCATION(1) uniform  sampler2D _AnamorphicRTS0;
in  vec2 vs_TEXCOORD0;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
vec4 u_xlat6;
vec4 u_xlat7;
vec3 u_xlat8;
void main()
{
    u_xlat0.xy = _MainTex_TexelSize.xy * vec2(2.0, 2.0) + vs_TEXCOORD0.xy;
    u_xlat0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0 = texture(_MainTex, u_xlat0.xy);
    u_xlat1.xy = _MainTex_TexelSize.xy * vec2(0.0, 2.0) + vs_TEXCOORD0.xy;
    u_xlat1.xy = u_xlat1.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1 = texture(_MainTex, u_xlat1.xy);
    u_xlat2 = _MainTex_TexelSize.xyxy * vec4(2.0, 0.0, -2.0, 2.0) + vs_TEXCOORD0.xyxy;
    u_xlat2 = u_xlat2 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
    u_xlat3 = texture(_MainTex, u_xlat2.xy);
    u_xlat2 = texture(_MainTex, u_xlat2.zw);
    u_xlat4.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat5 = texture(_MainTex, u_xlat4.xy);
    u_xlat4 = texture(_AnamorphicRTS0, u_xlat4.xy);
    u_xlat6.xyz = u_xlat3.xyz + u_xlat5.xyz;
    u_xlat6.xyz = u_xlat1.xyz + u_xlat6.xyz;
    u_xlat0.xyz = u_xlat0.xyz + u_xlat6.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(0.25, 0.25, 0.25);
    u_xlat6 = _MainTex_TexelSize.xyxy * vec4(2.0, -2.0, -2.0, 0.0) + vs_TEXCOORD0.xyxy;
    u_xlat6 = u_xlat6 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
    u_xlat7 = texture(_MainTex, u_xlat6.zw);
    u_xlat6 = texture(_MainTex, u_xlat6.xy);
    u_xlat8.xyz = u_xlat5.xyz + u_xlat7.xyz;
    u_xlat2.xyz = u_xlat2.xyz + u_xlat8.xyz;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
    u_xlat0.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25) + u_xlat0.xyz;
    u_xlat1 = _MainTex_TexelSize.xyxy * vec4(-2.0, -2.0, 0.0, -2.0) + vs_TEXCOORD0.xyxy;
    u_xlat1 = u_xlat1 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
    u_xlat2 = texture(_MainTex, u_xlat1.zw);
    u_xlat1 = texture(_MainTex, u_xlat1.xy);
    u_xlat1.xyz = u_xlat2.xyz + u_xlat1.xyz;
    u_xlat2.xyz = u_xlat6.xyz + u_xlat2.xyz;
    u_xlat2.xyz = u_xlat5.xyz + u_xlat2.xyz;
    u_xlat2.xyz = u_xlat3.xyz + u_xlat2.xyz;
    u_xlat0.xyz = u_xlat2.xyz * vec3(0.25, 0.25, 0.25) + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat7.xyz + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat5.xyz + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25) + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(0.125, 0.125, 0.125);
    u_xlat1.xy = vs_TEXCOORD0.xy + _MainTex_TexelSize.xy;
    u_xlat1.xy = u_xlat1.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1 = texture(_MainTex, u_xlat1.xy);
    u_xlat2.xy = vs_TEXCOORD0.xy + (-_MainTex_TexelSize.xy);
    u_xlat2.xy = u_xlat2.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat2 = texture(_MainTex, u_xlat2.xy);
    u_xlat3 = _MainTex_TexelSize.xyxy * vec4(1.0, -1.0, -1.0, 1.0) + vs_TEXCOORD0.xyxy;
    u_xlat3 = u_xlat3 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
    u_xlat5 = texture(_MainTex, u_xlat3.xy);
    u_xlat3 = texture(_MainTex, u_xlat3.zw);
    u_xlat2.xyz = u_xlat2.xyz + u_xlat5.xyz;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat3.xyz + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat1.xyz * vec3(0.125, 0.125, 0.125) + u_xlat0.xyz;
    u_xlat0.w = 0.0;
    u_xlat1 = (-u_xlat0) + u_xlat4;
    SV_Target0 = vec4(_TempFilterValue) * u_xlat1 + u_xlat0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "AB_HIGH_PRECISION" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 94
; Schema: 0
                                              OpCapability Shader 
                                       %1 = OpExtInstImport "GLSL.std.450" 
                                              OpMemoryModel Logical GLSL450 
                                              OpEntryPoint Vertex %4 "main" %11 %72 %84 %86 
                                              OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                              OpDecorate %11 Location 11 
                                              OpDecorate %16 ArrayStride 16 
                                              OpDecorate %17 ArrayStride 17 
                                              OpMemberDecorate %18 0 Offset 18 
                                              OpMemberDecorate %18 1 Offset 18 
                                              OpDecorate %18 Block 
                                              OpDecorate %20 DescriptorSet 20 
                                              OpDecorate %20 Binding 20 
                                              OpMemberDecorate %70 0 BuiltIn 70 
                                              OpMemberDecorate %70 1 BuiltIn 70 
                                              OpMemberDecorate %70 2 BuiltIn 70 
                                              OpDecorate %70 Block 
                                              OpDecorate vs_TEXCOORD0 Location 84 
                                              OpDecorate %86 Location 86 
                                       %2 = OpTypeVoid 
                                       %3 = OpTypeFunction %2 
                                       %6 = OpTypeFloat 32 
                                       %7 = OpTypeVector %6 4 
                                       %8 = OpTypePointer Private %7 
                        Private f32_4* %9 = OpVariable Private 
                                      %10 = OpTypePointer Input %7 
                         Input f32_4* %11 = OpVariable Input 
                                      %14 = OpTypeInt 32 0 
                                  u32 %15 = OpConstant 4 
                                      %16 = OpTypeArray %7 %15 
                                      %17 = OpTypeArray %7 %15 
                                      %18 = OpTypeStruct %16 %17 
                                      %19 = OpTypePointer Uniform %18 
Uniform struct {f32_4[4]; f32_4[4];}* %20 = OpVariable Uniform 
                                      %21 = OpTypeInt 32 1 
                                  i32 %22 = OpConstant 0 
                                  i32 %23 = OpConstant 1 
                                      %24 = OpTypePointer Uniform %7 
                                  i32 %35 = OpConstant 2 
                                  i32 %44 = OpConstant 3 
                       Private f32_4* %48 = OpVariable Private 
                                  u32 %68 = OpConstant 1 
                                      %69 = OpTypeArray %6 %68 
                                      %70 = OpTypeStruct %7 %6 %69 
                                      %71 = OpTypePointer Output %70 
 Output struct {f32_4; f32; f32[1];}* %72 = OpVariable Output 
                                      %80 = OpTypePointer Output %7 
                                      %82 = OpTypeVector %6 2 
                                      %83 = OpTypePointer Output %82 
               Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                      %85 = OpTypePointer Input %82 
                         Input f32_2* %86 = OpVariable Input 
                                      %88 = OpTypePointer Output %6 
                                  void %4 = OpFunction None %3 
                                       %5 = OpLabel 
                                f32_4 %12 = OpLoad %11 
                                f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                       Uniform f32_4* %25 = OpAccessChain %20 %22 %23 
                                f32_4 %26 = OpLoad %25 
                                f32_4 %27 = OpFMul %13 %26 
                                              OpStore %9 %27 
                       Uniform f32_4* %28 = OpAccessChain %20 %22 %22 
                                f32_4 %29 = OpLoad %28 
                                f32_4 %30 = OpLoad %11 
                                f32_4 %31 = OpVectorShuffle %30 %30 0 0 0 0 
                                f32_4 %32 = OpFMul %29 %31 
                                f32_4 %33 = OpLoad %9 
                                f32_4 %34 = OpFAdd %32 %33 
                                              OpStore %9 %34 
                       Uniform f32_4* %36 = OpAccessChain %20 %22 %35 
                                f32_4 %37 = OpLoad %36 
                                f32_4 %38 = OpLoad %11 
                                f32_4 %39 = OpVectorShuffle %38 %38 2 2 2 2 
                                f32_4 %40 = OpFMul %37 %39 
                                f32_4 %41 = OpLoad %9 
                                f32_4 %42 = OpFAdd %40 %41 
                                              OpStore %9 %42 
                                f32_4 %43 = OpLoad %9 
                       Uniform f32_4* %45 = OpAccessChain %20 %22 %44 
                                f32_4 %46 = OpLoad %45 
                                f32_4 %47 = OpFAdd %43 %46 
                                              OpStore %9 %47 
                                f32_4 %49 = OpLoad %9 
                                f32_4 %50 = OpVectorShuffle %49 %49 1 1 1 1 
                       Uniform f32_4* %51 = OpAccessChain %20 %23 %23 
                                f32_4 %52 = OpLoad %51 
                                f32_4 %53 = OpFMul %50 %52 
                                              OpStore %48 %53 
                       Uniform f32_4* %54 = OpAccessChain %20 %23 %22 
                                f32_4 %55 = OpLoad %54 
                                f32_4 %56 = OpLoad %9 
                                f32_4 %57 = OpVectorShuffle %56 %56 0 0 0 0 
                                f32_4 %58 = OpFMul %55 %57 
                                f32_4 %59 = OpLoad %48 
                                f32_4 %60 = OpFAdd %58 %59 
                                              OpStore %48 %60 
                       Uniform f32_4* %61 = OpAccessChain %20 %23 %35 
                                f32_4 %62 = OpLoad %61 
                                f32_4 %63 = OpLoad %9 
                                f32_4 %64 = OpVectorShuffle %63 %63 2 2 2 2 
                                f32_4 %65 = OpFMul %62 %64 
                                f32_4 %66 = OpLoad %48 
                                f32_4 %67 = OpFAdd %65 %66 
                                              OpStore %48 %67 
                       Uniform f32_4* %73 = OpAccessChain %20 %23 %44 
                                f32_4 %74 = OpLoad %73 
                                f32_4 %75 = OpLoad %9 
                                f32_4 %76 = OpVectorShuffle %75 %75 3 3 3 3 
                                f32_4 %77 = OpFMul %74 %76 
                                f32_4 %78 = OpLoad %48 
                                f32_4 %79 = OpFAdd %77 %78 
                        Output f32_4* %81 = OpAccessChain %72 %22 
                                              OpStore %81 %79 
                                f32_2 %87 = OpLoad %86 
                                              OpStore vs_TEXCOORD0 %87 
                          Output f32* %89 = OpAccessChain %72 %22 %68 
                                  f32 %90 = OpLoad %89 
                                  f32 %91 = OpFNegate %90 
                          Output f32* %92 = OpAccessChain %72 %22 %68 
                                              OpStore %92 %91 
                                              OpReturn
                                              OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 482
; Schema: 0
                                              OpCapability Shader 
                                       %1 = OpExtInstImport "GLSL.std.450" 
                                              OpMemoryModel Logical GLSL450 
                                              OpEntryPoint Fragment %4 "main" %24 %471 
                                              OpExecutionMode %4 OriginUpperLeft 
                                              OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                              OpMemberDecorate %10 0 Offset 10 
                                              OpMemberDecorate %10 1 Offset 10 
                                              OpMemberDecorate %10 2 Offset 10 
                                              OpDecorate %10 Block 
                                              OpDecorate %12 DescriptorSet 12 
                                              OpDecorate %12 Binding 12 
                                              OpDecorate vs_TEXCOORD0 Location 24 
                                              OpDecorate %44 DescriptorSet 44 
                                              OpDecorate %44 Binding 44 
                                              OpDecorate %48 DescriptorSet 48 
                                              OpDecorate %48 Binding 48 
                                              OpDecorate %150 DescriptorSet 150 
                                              OpDecorate %150 Binding 150 
                                              OpDecorate %152 DescriptorSet 152 
                                              OpDecorate %152 Binding 152 
                                              OpDecorate %471 Location 471 
                                       %2 = OpTypeVoid 
                                       %3 = OpTypeFunction %2 
                                       %6 = OpTypeFloat 32 
                                       %7 = OpTypeVector %6 4 
                                       %8 = OpTypePointer Private %7 
                        Private f32_4* %9 = OpVariable Private 
                                      %10 = OpTypeStruct %7 %7 %6 
                                      %11 = OpTypePointer Uniform %10 
 Uniform struct {f32_4; f32_4; f32;}* %12 = OpVariable Uniform 
                                      %13 = OpTypeInt 32 1 
                                  i32 %14 = OpConstant 1 
                                      %15 = OpTypeVector %6 2 
                                      %16 = OpTypePointer Uniform %7 
                                  f32 %20 = OpConstant 3.674022E-40 
                                f32_2 %21 = OpConstantComposite %20 %20 
                                      %23 = OpTypePointer Input %15 
                Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                  i32 %31 = OpConstant 0 
                                      %42 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                      %43 = OpTypePointer UniformConstant %42 
 UniformConstant read_only Texture2D* %44 = OpVariable UniformConstant 
                                      %46 = OpTypeSampler 
                                      %47 = OpTypePointer UniformConstant %46 
             UniformConstant sampler* %48 = OpVariable UniformConstant 
                                      %50 = OpTypeSampledImage %42 
                                      %55 = OpTypeVector %6 3 
                       Private f32_4* %59 = OpVariable Private 
                                  f32 %63 = OpConstant 3.674022E-40 
                                f32_2 %64 = OpConstantComposite %63 %20 
                       Private f32_4* %91 = OpVariable Private 
                                  f32 %95 = OpConstant 3.674022E-40 
                                f32_4 %96 = OpConstantComposite %20 %63 %95 %20 
                      Private f32_4* %110 = OpVariable Private 
                      Private f32_4* %129 = OpVariable Private 
                                     %141 = OpTypePointer Private %55 
                      Private f32_3* %142 = OpVariable Private 
UniformConstant read_only Texture2D* %150 = OpVariable UniformConstant 
            UniformConstant sampler* %152 = OpVariable UniformConstant 
                      Private f32_4* %158 = OpVariable Private 
                                 f32 %181 = OpConstant 3.674022E-40 
                               f32_3 %182 = OpConstantComposite %181 %181 %181 
                               f32_4 %189 = OpConstantComposite %20 %95 %95 %63 
                      Private f32_3* %203 = OpVariable Private 
                      Private f32_3* %220 = OpVariable Private 
                               f32_4 %248 = OpConstantComposite %95 %95 %63 %95 
                                 f32 %337 = OpConstant 3.674022E-40 
                               f32_3 %338 = OpConstantComposite %337 %337 %337 
                                 f32 %402 = OpConstant 3.674022E-40 
                                 f32 %403 = OpConstant 3.674022E-40 
                               f32_4 %404 = OpConstantComposite %402 %403 %403 %402 
                                     %462 = OpTypeInt 32 0 
                                 u32 %463 = OpConstant 3 
                                     %464 = OpTypePointer Private %6 
                                     %470 = OpTypePointer Output %7 
                       Output f32_4* %471 = OpVariable Output 
                                 i32 %472 = OpConstant 2 
                                     %473 = OpTypePointer Uniform %6 
                                  void %4 = OpFunction None %3 
                                       %5 = OpLabel 
                       Uniform f32_4* %17 = OpAccessChain %12 %14 
                                f32_4 %18 = OpLoad %17 
                                f32_2 %19 = OpVectorShuffle %18 %18 0 1 
                                f32_2 %22 = OpFMul %19 %21 
                                f32_2 %25 = OpLoad vs_TEXCOORD0 
                                f32_2 %26 = OpFAdd %22 %25 
                                f32_4 %27 = OpLoad %9 
                                f32_4 %28 = OpVectorShuffle %27 %26 4 5 2 3 
                                              OpStore %9 %28 
                                f32_4 %29 = OpLoad %9 
                                f32_2 %30 = OpVectorShuffle %29 %29 0 1 
                       Uniform f32_4* %32 = OpAccessChain %12 %31 
                                f32_4 %33 = OpLoad %32 
                                f32_2 %34 = OpVectorShuffle %33 %33 0 1 
                                f32_2 %35 = OpFMul %30 %34 
                       Uniform f32_4* %36 = OpAccessChain %12 %31 
                                f32_4 %37 = OpLoad %36 
                                f32_2 %38 = OpVectorShuffle %37 %37 2 3 
                                f32_2 %39 = OpFAdd %35 %38 
                                f32_4 %40 = OpLoad %9 
                                f32_4 %41 = OpVectorShuffle %40 %39 4 5 2 3 
                                              OpStore %9 %41 
                  read_only Texture2D %45 = OpLoad %44 
                              sampler %49 = OpLoad %48 
           read_only Texture2DSampled %51 = OpSampledImage %45 %49 
                                f32_4 %52 = OpLoad %9 
                                f32_2 %53 = OpVectorShuffle %52 %52 0 1 
                                f32_4 %54 = OpImageSampleImplicitLod %51 %53 
                                f32_3 %56 = OpVectorShuffle %54 %54 0 1 2 
                                f32_4 %57 = OpLoad %9 
                                f32_4 %58 = OpVectorShuffle %57 %56 4 5 6 3 
                                              OpStore %9 %58 
                       Uniform f32_4* %60 = OpAccessChain %12 %14 
                                f32_4 %61 = OpLoad %60 
                                f32_2 %62 = OpVectorShuffle %61 %61 0 1 
                                f32_2 %65 = OpFMul %62 %64 
                                f32_2 %66 = OpLoad vs_TEXCOORD0 
                                f32_2 %67 = OpFAdd %65 %66 
                                f32_4 %68 = OpLoad %59 
                                f32_4 %69 = OpVectorShuffle %68 %67 4 5 2 3 
                                              OpStore %59 %69 
                                f32_4 %70 = OpLoad %59 
                                f32_2 %71 = OpVectorShuffle %70 %70 0 1 
                       Uniform f32_4* %72 = OpAccessChain %12 %31 
                                f32_4 %73 = OpLoad %72 
                                f32_2 %74 = OpVectorShuffle %73 %73 0 1 
                                f32_2 %75 = OpFMul %71 %74 
                       Uniform f32_4* %76 = OpAccessChain %12 %31 
                                f32_4 %77 = OpLoad %76 
                                f32_2 %78 = OpVectorShuffle %77 %77 2 3 
                                f32_2 %79 = OpFAdd %75 %78 
                                f32_4 %80 = OpLoad %59 
                                f32_4 %81 = OpVectorShuffle %80 %79 4 5 2 3 
                                              OpStore %59 %81 
                  read_only Texture2D %82 = OpLoad %44 
                              sampler %83 = OpLoad %48 
           read_only Texture2DSampled %84 = OpSampledImage %82 %83 
                                f32_4 %85 = OpLoad %59 
                                f32_2 %86 = OpVectorShuffle %85 %85 0 1 
                                f32_4 %87 = OpImageSampleImplicitLod %84 %86 
                                f32_3 %88 = OpVectorShuffle %87 %87 0 1 2 
                                f32_4 %89 = OpLoad %59 
                                f32_4 %90 = OpVectorShuffle %89 %88 4 5 6 3 
                                              OpStore %59 %90 
                       Uniform f32_4* %92 = OpAccessChain %12 %14 
                                f32_4 %93 = OpLoad %92 
                                f32_4 %94 = OpVectorShuffle %93 %93 0 1 0 1 
                                f32_4 %97 = OpFMul %94 %96 
                                f32_2 %98 = OpLoad vs_TEXCOORD0 
                                f32_4 %99 = OpVectorShuffle %98 %98 0 1 0 1 
                               f32_4 %100 = OpFAdd %97 %99 
                                              OpStore %91 %100 
                               f32_4 %101 = OpLoad %91 
                      Uniform f32_4* %102 = OpAccessChain %12 %31 
                               f32_4 %103 = OpLoad %102 
                               f32_4 %104 = OpVectorShuffle %103 %103 0 1 0 1 
                               f32_4 %105 = OpFMul %101 %104 
                      Uniform f32_4* %106 = OpAccessChain %12 %31 
                               f32_4 %107 = OpLoad %106 
                               f32_4 %108 = OpVectorShuffle %107 %107 2 3 2 3 
                               f32_4 %109 = OpFAdd %105 %108 
                                              OpStore %91 %109 
                 read_only Texture2D %111 = OpLoad %44 
                             sampler %112 = OpLoad %48 
          read_only Texture2DSampled %113 = OpSampledImage %111 %112 
                               f32_4 %114 = OpLoad %91 
                               f32_2 %115 = OpVectorShuffle %114 %114 0 1 
                               f32_4 %116 = OpImageSampleImplicitLod %113 %115 
                               f32_3 %117 = OpVectorShuffle %116 %116 0 1 2 
                               f32_4 %118 = OpLoad %110 
                               f32_4 %119 = OpVectorShuffle %118 %117 4 5 6 3 
                                              OpStore %110 %119 
                 read_only Texture2D %120 = OpLoad %44 
                             sampler %121 = OpLoad %48 
          read_only Texture2DSampled %122 = OpSampledImage %120 %121 
                               f32_4 %123 = OpLoad %91 
                               f32_2 %124 = OpVectorShuffle %123 %123 2 3 
                               f32_4 %125 = OpImageSampleImplicitLod %122 %124 
                               f32_3 %126 = OpVectorShuffle %125 %125 0 1 2 
                               f32_4 %127 = OpLoad %91 
                               f32_4 %128 = OpVectorShuffle %127 %126 4 5 6 3 
                                              OpStore %91 %128 
                               f32_2 %130 = OpLoad vs_TEXCOORD0 
                      Uniform f32_4* %131 = OpAccessChain %12 %31 
                               f32_4 %132 = OpLoad %131 
                               f32_2 %133 = OpVectorShuffle %132 %132 0 1 
                               f32_2 %134 = OpFMul %130 %133 
                      Uniform f32_4* %135 = OpAccessChain %12 %31 
                               f32_4 %136 = OpLoad %135 
                               f32_2 %137 = OpVectorShuffle %136 %136 2 3 
                               f32_2 %138 = OpFAdd %134 %137 
                               f32_4 %139 = OpLoad %129 
                               f32_4 %140 = OpVectorShuffle %139 %138 4 5 2 3 
                                              OpStore %129 %140 
                 read_only Texture2D %143 = OpLoad %44 
                             sampler %144 = OpLoad %48 
          read_only Texture2DSampled %145 = OpSampledImage %143 %144 
                               f32_4 %146 = OpLoad %129 
                               f32_2 %147 = OpVectorShuffle %146 %146 0 1 
                               f32_4 %148 = OpImageSampleImplicitLod %145 %147 
                               f32_3 %149 = OpVectorShuffle %148 %148 0 1 2 
                                              OpStore %142 %149 
                 read_only Texture2D %151 = OpLoad %150 
                             sampler %153 = OpLoad %152 
          read_only Texture2DSampled %154 = OpSampledImage %151 %153 
                               f32_4 %155 = OpLoad %129 
                               f32_2 %156 = OpVectorShuffle %155 %155 0 1 
                               f32_4 %157 = OpImageSampleImplicitLod %154 %156 
                                              OpStore %129 %157 
                               f32_4 %159 = OpLoad %110 
                               f32_3 %160 = OpVectorShuffle %159 %159 0 1 2 
                               f32_3 %161 = OpLoad %142 
                               f32_3 %162 = OpFAdd %160 %161 
                               f32_4 %163 = OpLoad %158 
                               f32_4 %164 = OpVectorShuffle %163 %162 4 5 6 3 
                                              OpStore %158 %164 
                               f32_4 %165 = OpLoad %59 
                               f32_3 %166 = OpVectorShuffle %165 %165 0 1 2 
                               f32_4 %167 = OpLoad %158 
                               f32_3 %168 = OpVectorShuffle %167 %167 0 1 2 
                               f32_3 %169 = OpFAdd %166 %168 
                               f32_4 %170 = OpLoad %158 
                               f32_4 %171 = OpVectorShuffle %170 %169 4 5 6 3 
                                              OpStore %158 %171 
                               f32_4 %172 = OpLoad %9 
                               f32_3 %173 = OpVectorShuffle %172 %172 0 1 2 
                               f32_4 %174 = OpLoad %158 
                               f32_3 %175 = OpVectorShuffle %174 %174 0 1 2 
                               f32_3 %176 = OpFAdd %173 %175 
                               f32_4 %177 = OpLoad %9 
                               f32_4 %178 = OpVectorShuffle %177 %176 4 5 6 3 
                                              OpStore %9 %178 
                               f32_4 %179 = OpLoad %9 
                               f32_3 %180 = OpVectorShuffle %179 %179 0 1 2 
                               f32_3 %183 = OpFMul %180 %182 
                               f32_4 %184 = OpLoad %9 
                               f32_4 %185 = OpVectorShuffle %184 %183 4 5 6 3 
                                              OpStore %9 %185 
                      Uniform f32_4* %186 = OpAccessChain %12 %14 
                               f32_4 %187 = OpLoad %186 
                               f32_4 %188 = OpVectorShuffle %187 %187 0 1 0 1 
                               f32_4 %190 = OpFMul %188 %189 
                               f32_2 %191 = OpLoad vs_TEXCOORD0 
                               f32_4 %192 = OpVectorShuffle %191 %191 0 1 0 1 
                               f32_4 %193 = OpFAdd %190 %192 
                                              OpStore %158 %193 
                               f32_4 %194 = OpLoad %158 
                      Uniform f32_4* %195 = OpAccessChain %12 %31 
                               f32_4 %196 = OpLoad %195 
                               f32_4 %197 = OpVectorShuffle %196 %196 0 1 0 1 
                               f32_4 %198 = OpFMul %194 %197 
                      Uniform f32_4* %199 = OpAccessChain %12 %31 
                               f32_4 %200 = OpLoad %199 
                               f32_4 %201 = OpVectorShuffle %200 %200 2 3 2 3 
                               f32_4 %202 = OpFAdd %198 %201 
                                              OpStore %158 %202 
                 read_only Texture2D %204 = OpLoad %44 
                             sampler %205 = OpLoad %48 
          read_only Texture2DSampled %206 = OpSampledImage %204 %205 
                               f32_4 %207 = OpLoad %158 
                               f32_2 %208 = OpVectorShuffle %207 %207 2 3 
                               f32_4 %209 = OpImageSampleImplicitLod %206 %208 
                               f32_3 %210 = OpVectorShuffle %209 %209 0 1 2 
                                              OpStore %203 %210 
                 read_only Texture2D %211 = OpLoad %44 
                             sampler %212 = OpLoad %48 
          read_only Texture2DSampled %213 = OpSampledImage %211 %212 
                               f32_4 %214 = OpLoad %158 
                               f32_2 %215 = OpVectorShuffle %214 %214 0 1 
                               f32_4 %216 = OpImageSampleImplicitLod %213 %215 
                               f32_3 %217 = OpVectorShuffle %216 %216 0 1 2 
                               f32_4 %218 = OpLoad %158 
                               f32_4 %219 = OpVectorShuffle %218 %217 4 5 6 3 
                                              OpStore %158 %219 
                               f32_3 %221 = OpLoad %142 
                               f32_3 %222 = OpLoad %203 
                               f32_3 %223 = OpFAdd %221 %222 
                                              OpStore %220 %223 
                               f32_4 %224 = OpLoad %91 
                               f32_3 %225 = OpVectorShuffle %224 %224 0 1 2 
                               f32_3 %226 = OpLoad %220 
                               f32_3 %227 = OpFAdd %225 %226 
                               f32_4 %228 = OpLoad %91 
                               f32_4 %229 = OpVectorShuffle %228 %227 4 5 6 3 
                                              OpStore %91 %229 
                               f32_4 %230 = OpLoad %59 
                               f32_3 %231 = OpVectorShuffle %230 %230 0 1 2 
                               f32_4 %232 = OpLoad %91 
                               f32_3 %233 = OpVectorShuffle %232 %232 0 1 2 
                               f32_3 %234 = OpFAdd %231 %233 
                               f32_4 %235 = OpLoad %59 
                               f32_4 %236 = OpVectorShuffle %235 %234 4 5 6 3 
                                              OpStore %59 %236 
                               f32_4 %237 = OpLoad %59 
                               f32_3 %238 = OpVectorShuffle %237 %237 0 1 2 
                               f32_3 %239 = OpFMul %238 %182 
                               f32_4 %240 = OpLoad %9 
                               f32_3 %241 = OpVectorShuffle %240 %240 0 1 2 
                               f32_3 %242 = OpFAdd %239 %241 
                               f32_4 %243 = OpLoad %9 
                               f32_4 %244 = OpVectorShuffle %243 %242 4 5 6 3 
                                              OpStore %9 %244 
                      Uniform f32_4* %245 = OpAccessChain %12 %14 
                               f32_4 %246 = OpLoad %245 
                               f32_4 %247 = OpVectorShuffle %246 %246 0 1 0 1 
                               f32_4 %249 = OpFMul %247 %248 
                               f32_2 %250 = OpLoad vs_TEXCOORD0 
                               f32_4 %251 = OpVectorShuffle %250 %250 0 1 0 1 
                               f32_4 %252 = OpFAdd %249 %251 
                                              OpStore %59 %252 
                               f32_4 %253 = OpLoad %59 
                      Uniform f32_4* %254 = OpAccessChain %12 %31 
                               f32_4 %255 = OpLoad %254 
                               f32_4 %256 = OpVectorShuffle %255 %255 0 1 0 1 
                               f32_4 %257 = OpFMul %253 %256 
                      Uniform f32_4* %258 = OpAccessChain %12 %31 
                               f32_4 %259 = OpLoad %258 
                               f32_4 %260 = OpVectorShuffle %259 %259 2 3 2 3 
                               f32_4 %261 = OpFAdd %257 %260 
                                              OpStore %59 %261 
                 read_only Texture2D %262 = OpLoad %44 
                             sampler %263 = OpLoad %48 
          read_only Texture2DSampled %264 = OpSampledImage %262 %263 
                               f32_4 %265 = OpLoad %59 
                               f32_2 %266 = OpVectorShuffle %265 %265 2 3 
                               f32_4 %267 = OpImageSampleImplicitLod %264 %266 
                               f32_3 %268 = OpVectorShuffle %267 %267 0 1 2 
                               f32_4 %269 = OpLoad %91 
                               f32_4 %270 = OpVectorShuffle %269 %268 4 5 6 3 
                                              OpStore %91 %270 
                 read_only Texture2D %271 = OpLoad %44 
                             sampler %272 = OpLoad %48 
          read_only Texture2DSampled %273 = OpSampledImage %271 %272 
                               f32_4 %274 = OpLoad %59 
                               f32_2 %275 = OpVectorShuffle %274 %274 0 1 
                               f32_4 %276 = OpImageSampleImplicitLod %273 %275 
                               f32_3 %277 = OpVectorShuffle %276 %276 0 1 2 
                               f32_4 %278 = OpLoad %59 
                               f32_4 %279 = OpVectorShuffle %278 %277 4 5 6 3 
                                              OpStore %59 %279 
                               f32_4 %280 = OpLoad %91 
                               f32_3 %281 = OpVectorShuffle %280 %280 0 1 2 
                               f32_4 %282 = OpLoad %59 
                               f32_3 %283 = OpVectorShuffle %282 %282 0 1 2 
                               f32_3 %284 = OpFAdd %281 %283 
                               f32_4 %285 = OpLoad %59 
                               f32_4 %286 = OpVectorShuffle %285 %284 4 5 6 3 
                                              OpStore %59 %286 
                               f32_4 %287 = OpLoad %158 
                               f32_3 %288 = OpVectorShuffle %287 %287 0 1 2 
                               f32_4 %289 = OpLoad %91 
                               f32_3 %290 = OpVectorShuffle %289 %289 0 1 2 
                               f32_3 %291 = OpFAdd %288 %290 
                               f32_4 %292 = OpLoad %91 
                               f32_4 %293 = OpVectorShuffle %292 %291 4 5 6 3 
                                              OpStore %91 %293 
                               f32_3 %294 = OpLoad %142 
                               f32_4 %295 = OpLoad %91 
                               f32_3 %296 = OpVectorShuffle %295 %295 0 1 2 
                               f32_3 %297 = OpFAdd %294 %296 
                               f32_4 %298 = OpLoad %91 
                               f32_4 %299 = OpVectorShuffle %298 %297 4 5 6 3 
                                              OpStore %91 %299 
                               f32_4 %300 = OpLoad %110 
                               f32_3 %301 = OpVectorShuffle %300 %300 0 1 2 
                               f32_4 %302 = OpLoad %91 
                               f32_3 %303 = OpVectorShuffle %302 %302 0 1 2 
                               f32_3 %304 = OpFAdd %301 %303 
                               f32_4 %305 = OpLoad %91 
                               f32_4 %306 = OpVectorShuffle %305 %304 4 5 6 3 
                                              OpStore %91 %306 
                               f32_4 %307 = OpLoad %91 
                               f32_3 %308 = OpVectorShuffle %307 %307 0 1 2 
                               f32_3 %309 = OpFMul %308 %182 
                               f32_4 %310 = OpLoad %9 
                               f32_3 %311 = OpVectorShuffle %310 %310 0 1 2 
                               f32_3 %312 = OpFAdd %309 %311 
                               f32_4 %313 = OpLoad %9 
                               f32_4 %314 = OpVectorShuffle %313 %312 4 5 6 3 
                                              OpStore %9 %314 
                               f32_3 %315 = OpLoad %203 
                               f32_4 %316 = OpLoad %59 
                               f32_3 %317 = OpVectorShuffle %316 %316 0 1 2 
                               f32_3 %318 = OpFAdd %315 %317 
                               f32_4 %319 = OpLoad %59 
                               f32_4 %320 = OpVectorShuffle %319 %318 4 5 6 3 
                                              OpStore %59 %320 
                               f32_3 %321 = OpLoad %142 
                               f32_4 %322 = OpLoad %59 
                               f32_3 %323 = OpVectorShuffle %322 %322 0 1 2 
                               f32_3 %324 = OpFAdd %321 %323 
                               f32_4 %325 = OpLoad %59 
                               f32_4 %326 = OpVectorShuffle %325 %324 4 5 6 3 
                                              OpStore %59 %326 
                               f32_4 %327 = OpLoad %59 
                               f32_3 %328 = OpVectorShuffle %327 %327 0 1 2 
                               f32_3 %329 = OpFMul %328 %182 
                               f32_4 %330 = OpLoad %9 
                               f32_3 %331 = OpVectorShuffle %330 %330 0 1 2 
                               f32_3 %332 = OpFAdd %329 %331 
                               f32_4 %333 = OpLoad %9 
                               f32_4 %334 = OpVectorShuffle %333 %332 4 5 6 3 
                                              OpStore %9 %334 
                               f32_4 %335 = OpLoad %9 
                               f32_3 %336 = OpVectorShuffle %335 %335 0 1 2 
                               f32_3 %339 = OpFMul %336 %338 
                               f32_4 %340 = OpLoad %9 
                               f32_4 %341 = OpVectorShuffle %340 %339 4 5 6 3 
                                              OpStore %9 %341 
                               f32_2 %342 = OpLoad vs_TEXCOORD0 
                      Uniform f32_4* %343 = OpAccessChain %12 %14 
                               f32_4 %344 = OpLoad %343 
                               f32_2 %345 = OpVectorShuffle %344 %344 0 1 
                               f32_2 %346 = OpFAdd %342 %345 
                               f32_4 %347 = OpLoad %59 
                               f32_4 %348 = OpVectorShuffle %347 %346 4 5 2 3 
                                              OpStore %59 %348 
                               f32_4 %349 = OpLoad %59 
                               f32_2 %350 = OpVectorShuffle %349 %349 0 1 
                      Uniform f32_4* %351 = OpAccessChain %12 %31 
                               f32_4 %352 = OpLoad %351 
                               f32_2 %353 = OpVectorShuffle %352 %352 0 1 
                               f32_2 %354 = OpFMul %350 %353 
                      Uniform f32_4* %355 = OpAccessChain %12 %31 
                               f32_4 %356 = OpLoad %355 
                               f32_2 %357 = OpVectorShuffle %356 %356 2 3 
                               f32_2 %358 = OpFAdd %354 %357 
                               f32_4 %359 = OpLoad %59 
                               f32_4 %360 = OpVectorShuffle %359 %358 4 5 2 3 
                                              OpStore %59 %360 
                 read_only Texture2D %361 = OpLoad %44 
                             sampler %362 = OpLoad %48 
          read_only Texture2DSampled %363 = OpSampledImage %361 %362 
                               f32_4 %364 = OpLoad %59 
                               f32_2 %365 = OpVectorShuffle %364 %364 0 1 
                               f32_4 %366 = OpImageSampleImplicitLod %363 %365 
                               f32_3 %367 = OpVectorShuffle %366 %366 0 1 2 
                               f32_4 %368 = OpLoad %59 
                               f32_4 %369 = OpVectorShuffle %368 %367 4 5 6 3 
                                              OpStore %59 %369 
                               f32_2 %370 = OpLoad vs_TEXCOORD0 
                      Uniform f32_4* %371 = OpAccessChain %12 %14 
                               f32_4 %372 = OpLoad %371 
                               f32_2 %373 = OpVectorShuffle %372 %372 0 1 
                               f32_2 %374 = OpFNegate %373 
                               f32_2 %375 = OpFAdd %370 %374 
                               f32_4 %376 = OpLoad %91 
                               f32_4 %377 = OpVectorShuffle %376 %375 4 5 2 3 
                                              OpStore %91 %377 
                               f32_4 %378 = OpLoad %91 
                               f32_2 %379 = OpVectorShuffle %378 %378 0 1 
                      Uniform f32_4* %380 = OpAccessChain %12 %31 
                               f32_4 %381 = OpLoad %380 
                               f32_2 %382 = OpVectorShuffle %381 %381 0 1 
                               f32_2 %383 = OpFMul %379 %382 
                      Uniform f32_4* %384 = OpAccessChain %12 %31 
                               f32_4 %385 = OpLoad %384 
                               f32_2 %386 = OpVectorShuffle %385 %385 2 3 
                               f32_2 %387 = OpFAdd %383 %386 
                               f32_4 %388 = OpLoad %91 
                               f32_4 %389 = OpVectorShuffle %388 %387 4 5 2 3 
                                              OpStore %91 %389 
                 read_only Texture2D %390 = OpLoad %44 
                             sampler %391 = OpLoad %48 
          read_only Texture2DSampled %392 = OpSampledImage %390 %391 
                               f32_4 %393 = OpLoad %91 
                               f32_2 %394 = OpVectorShuffle %393 %393 0 1 
                               f32_4 %395 = OpImageSampleImplicitLod %392 %394 
                               f32_3 %396 = OpVectorShuffle %395 %395 0 1 2 
                               f32_4 %397 = OpLoad %91 
                               f32_4 %398 = OpVectorShuffle %397 %396 4 5 6 3 
                                              OpStore %91 %398 
                      Uniform f32_4* %399 = OpAccessChain %12 %14 
                               f32_4 %400 = OpLoad %399 
                               f32_4 %401 = OpVectorShuffle %400 %400 0 1 0 1 
                               f32_4 %405 = OpFMul %401 %404 
                               f32_2 %406 = OpLoad vs_TEXCOORD0 
                               f32_4 %407 = OpVectorShuffle %406 %406 0 1 0 1 
                               f32_4 %408 = OpFAdd %405 %407 
                                              OpStore %110 %408 
                               f32_4 %409 = OpLoad %110 
                      Uniform f32_4* %410 = OpAccessChain %12 %31 
                               f32_4 %411 = OpLoad %410 
                               f32_4 %412 = OpVectorShuffle %411 %411 0 1 0 1 
                               f32_4 %413 = OpFMul %409 %412 
                      Uniform f32_4* %414 = OpAccessChain %12 %31 
                               f32_4 %415 = OpLoad %414 
                               f32_4 %416 = OpVectorShuffle %415 %415 2 3 2 3 
                               f32_4 %417 = OpFAdd %413 %416 
                                              OpStore %110 %417 
                 read_only Texture2D %418 = OpLoad %44 
                             sampler %419 = OpLoad %48 
          read_only Texture2DSampled %420 = OpSampledImage %418 %419 
                               f32_4 %421 = OpLoad %110 
                               f32_2 %422 = OpVectorShuffle %421 %421 0 1 
                               f32_4 %423 = OpImageSampleImplicitLod %420 %422 
                               f32_3 %424 = OpVectorShuffle %423 %423 0 1 2 
                                              OpStore %142 %424 
                 read_only Texture2D %425 = OpLoad %44 
                             sampler %426 = OpLoad %48 
          read_only Texture2DSampled %427 = OpSampledImage %425 %426 
                               f32_4 %428 = OpLoad %110 
                               f32_2 %429 = OpVectorShuffle %428 %428 2 3 
                               f32_4 %430 = OpImageSampleImplicitLod %427 %429 
                               f32_3 %431 = OpVectorShuffle %430 %430 0 1 2 
                               f32_4 %432 = OpLoad %110 
                               f32_4 %433 = OpVectorShuffle %432 %431 4 5 6 3 
                                              OpStore %110 %433 
                               f32_4 %434 = OpLoad %91 
                               f32_3 %435 = OpVectorShuffle %434 %434 0 1 2 
                               f32_3 %436 = OpLoad %142 
                               f32_3 %437 = OpFAdd %435 %436 
                               f32_4 %438 = OpLoad %91 
                               f32_4 %439 = OpVectorShuffle %438 %437 4 5 6 3 
                                              OpStore %91 %439 
                               f32_4 %440 = OpLoad %59 
                               f32_3 %441 = OpVectorShuffle %440 %440 0 1 2 
                               f32_4 %442 = OpLoad %91 
                               f32_3 %443 = OpVectorShuffle %442 %442 0 1 2 
                               f32_3 %444 = OpFAdd %441 %443 
                               f32_4 %445 = OpLoad %59 
                               f32_4 %446 = OpVectorShuffle %445 %444 4 5 6 3 
                                              OpStore %59 %446 
                               f32_4 %447 = OpLoad %110 
                               f32_3 %448 = OpVectorShuffle %447 %447 0 1 2 
                               f32_4 %449 = OpLoad %59 
                               f32_3 %450 = OpVectorShuffle %449 %449 0 1 2 
                               f32_3 %451 = OpFAdd %448 %450 
                               f32_4 %452 = OpLoad %59 
                               f32_4 %453 = OpVectorShuffle %452 %451 4 5 6 3 
                                              OpStore %59 %453 
                               f32_4 %454 = OpLoad %59 
                               f32_3 %455 = OpVectorShuffle %454 %454 0 1 2 
                               f32_3 %456 = OpFMul %455 %338 
                               f32_4 %457 = OpLoad %9 
                               f32_3 %458 = OpVectorShuffle %457 %457 0 1 2 
                               f32_3 %459 = OpFAdd %456 %458 
                               f32_4 %460 = OpLoad %9 
                               f32_4 %461 = OpVectorShuffle %460 %459 4 5 6 3 
                                              OpStore %9 %461 
                        Private f32* %465 = OpAccessChain %9 %463 
                                              OpStore %465 %63 
                               f32_4 %466 = OpLoad %9 
                               f32_4 %467 = OpFNegate %466 
                               f32_4 %468 = OpLoad %129 
                               f32_4 %469 = OpFAdd %467 %468 
                                              OpStore %59 %469 
                        Uniform f32* %474 = OpAccessChain %12 %472 
                                 f32 %475 = OpLoad %474 
                               f32_4 %476 = OpCompositeConstruct %475 %475 %475 %475 
                               f32_4 %477 = OpLoad %59 
                               f32_4 %478 = OpFMul %476 %477 
                               f32_4 %479 = OpLoad %9 
                               f32_4 %480 = OpFAdd %478 %479 
                                              OpStore %471 %480 
                                              OpReturn
                                              OpFunctionEnd
"
}
}
Program "fp" {
SubProgram "d3d11 " {
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
""
}
SubProgram "vulkan " {
""
}
SubProgram "d3d11 " {
Keywords { "AB_HIGH_PRECISION" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "AB_HIGH_PRECISION" }
""
}
SubProgram "vulkan " {
Keywords { "AB_HIGH_PRECISION" }
""
}
}
}
 Pass {
  Name "frag_horizontal_gaussian_blur"
  ZTest Always
  ZWrite Off
  Cull Off
  GpuProgramID 927839
Program "vp" {
SubProgram "d3d11 " {
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in  vec4 in_POSITION0;
in  vec2 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BloomRange;
uniform 	vec4 _MainTex_TexelSize;
uniform 	float _BlurRadius;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
in  vec2 vs_TEXCOORD0;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
float u_xlat12;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0 = texture(_MainTex, u_xlat0.xy);
    u_xlat0.xyz = u_xlat0.xyz * _BloomRange.xxx;
    u_xlat0.xyz = u_xlat0.www * u_xlat0.xyz;
    u_xlat12 = _MainTex_TexelSize.x * _BlurRadius;
    u_xlat1.xz = vec2(u_xlat12) * vec2(1.38461542, 3.23076916);
    u_xlat1.y = float(0.0);
    u_xlat1.w = float(0.0);
    u_xlat2 = u_xlat1 + vs_TEXCOORD0.xyxy;
    u_xlat1 = (-u_xlat1) + vs_TEXCOORD0.xyxy;
    u_xlat1 = u_xlat1 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
    u_xlat2 = u_xlat2 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
    u_xlat3 = texture(_MainTex, u_xlat2.xy);
    u_xlat2 = texture(_MainTex, u_xlat2.zw);
    u_xlat3.xyz = u_xlat3.xyz * _BloomRange.xxx;
    u_xlat3.xyz = u_xlat3.www * u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz * vec3(0.31621623, 0.31621623, 0.31621623);
    u_xlat0.xyz = u_xlat0.xyz * vec3(0.227027029, 0.227027029, 0.227027029) + u_xlat3.xyz;
    u_xlat3 = texture(_MainTex, u_xlat1.xy);
    u_xlat1 = texture(_MainTex, u_xlat1.zw);
    u_xlat3.xyz = u_xlat3.xyz * _BloomRange.xxx;
    u_xlat3.xyz = u_xlat3.www * u_xlat3.xyz;
    u_xlat0.xyz = u_xlat3.xyz * vec3(0.31621623, 0.31621623, 0.31621623) + u_xlat0.xyz;
    u_xlat2.xyz = u_xlat2.xyz * _BloomRange.xxx;
    u_xlat2.xyz = u_xlat2.www * u_xlat2.xyz;
    u_xlat0.xyz = u_xlat2.xyz * vec3(0.0702702701, 0.0702702701, 0.0702702701) + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _BloomRange.xxx;
    u_xlat1.xyz = u_xlat1.www * u_xlat1.xyz;
    u_xlat0.xyz = u_xlat1.xyz * vec3(0.0702702701, 0.0702702701, 0.0702702701) + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * _BloomRange.yyy;
    u_xlat12 = max(u_xlat0.y, u_xlat0.x);
    u_xlat1.x = max(u_xlat0.z, 9.99999997e-07);
    u_xlat12 = max(u_xlat12, u_xlat1.x);
    u_xlat12 = min(u_xlat12, 1.0);
    u_xlat12 = u_xlat12 * 255.0;
    u_xlat12 = ceil(u_xlat12);
    u_xlat12 = u_xlat12 * 0.00392156886;
    SV_Target0.xyz = u_xlat0.xyz / vec3(u_xlat12);
    SV_Target0.w = u_xlat12;
    return;
}

#endif
"
}
SubProgram "vulkan " {
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 94
; Schema: 0
                                              OpCapability Shader 
                                       %1 = OpExtInstImport "GLSL.std.450" 
                                              OpMemoryModel Logical GLSL450 
                                              OpEntryPoint Vertex %4 "main" %11 %72 %84 %86 
                                              OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                              OpDecorate %11 Location 11 
                                              OpDecorate %16 ArrayStride 16 
                                              OpDecorate %17 ArrayStride 17 
                                              OpMemberDecorate %18 0 Offset 18 
                                              OpMemberDecorate %18 1 Offset 18 
                                              OpDecorate %18 Block 
                                              OpDecorate %20 DescriptorSet 20 
                                              OpDecorate %20 Binding 20 
                                              OpMemberDecorate %70 0 BuiltIn 70 
                                              OpMemberDecorate %70 1 BuiltIn 70 
                                              OpMemberDecorate %70 2 BuiltIn 70 
                                              OpDecorate %70 Block 
                                              OpDecorate vs_TEXCOORD0 Location 84 
                                              OpDecorate %86 Location 86 
                                       %2 = OpTypeVoid 
                                       %3 = OpTypeFunction %2 
                                       %6 = OpTypeFloat 32 
                                       %7 = OpTypeVector %6 4 
                                       %8 = OpTypePointer Private %7 
                        Private f32_4* %9 = OpVariable Private 
                                      %10 = OpTypePointer Input %7 
                         Input f32_4* %11 = OpVariable Input 
                                      %14 = OpTypeInt 32 0 
                                  u32 %15 = OpConstant 4 
                                      %16 = OpTypeArray %7 %15 
                                      %17 = OpTypeArray %7 %15 
                                      %18 = OpTypeStruct %16 %17 
                                      %19 = OpTypePointer Uniform %18 
Uniform struct {f32_4[4]; f32_4[4];}* %20 = OpVariable Uniform 
                                      %21 = OpTypeInt 32 1 
                                  i32 %22 = OpConstant 0 
                                  i32 %23 = OpConstant 1 
                                      %24 = OpTypePointer Uniform %7 
                                  i32 %35 = OpConstant 2 
                                  i32 %44 = OpConstant 3 
                       Private f32_4* %48 = OpVariable Private 
                                  u32 %68 = OpConstant 1 
                                      %69 = OpTypeArray %6 %68 
                                      %70 = OpTypeStruct %7 %6 %69 
                                      %71 = OpTypePointer Output %70 
 Output struct {f32_4; f32; f32[1];}* %72 = OpVariable Output 
                                      %80 = OpTypePointer Output %7 
                                      %82 = OpTypeVector %6 2 
                                      %83 = OpTypePointer Output %82 
               Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                      %85 = OpTypePointer Input %82 
                         Input f32_2* %86 = OpVariable Input 
                                      %88 = OpTypePointer Output %6 
                                  void %4 = OpFunction None %3 
                                       %5 = OpLabel 
                                f32_4 %12 = OpLoad %11 
                                f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                       Uniform f32_4* %25 = OpAccessChain %20 %22 %23 
                                f32_4 %26 = OpLoad %25 
                                f32_4 %27 = OpFMul %13 %26 
                                              OpStore %9 %27 
                       Uniform f32_4* %28 = OpAccessChain %20 %22 %22 
                                f32_4 %29 = OpLoad %28 
                                f32_4 %30 = OpLoad %11 
                                f32_4 %31 = OpVectorShuffle %30 %30 0 0 0 0 
                                f32_4 %32 = OpFMul %29 %31 
                                f32_4 %33 = OpLoad %9 
                                f32_4 %34 = OpFAdd %32 %33 
                                              OpStore %9 %34 
                       Uniform f32_4* %36 = OpAccessChain %20 %22 %35 
                                f32_4 %37 = OpLoad %36 
                                f32_4 %38 = OpLoad %11 
                                f32_4 %39 = OpVectorShuffle %38 %38 2 2 2 2 
                                f32_4 %40 = OpFMul %37 %39 
                                f32_4 %41 = OpLoad %9 
                                f32_4 %42 = OpFAdd %40 %41 
                                              OpStore %9 %42 
                                f32_4 %43 = OpLoad %9 
                       Uniform f32_4* %45 = OpAccessChain %20 %22 %44 
                                f32_4 %46 = OpLoad %45 
                                f32_4 %47 = OpFAdd %43 %46 
                                              OpStore %9 %47 
                                f32_4 %49 = OpLoad %9 
                                f32_4 %50 = OpVectorShuffle %49 %49 1 1 1 1 
                       Uniform f32_4* %51 = OpAccessChain %20 %23 %23 
                                f32_4 %52 = OpLoad %51 
                                f32_4 %53 = OpFMul %50 %52 
                                              OpStore %48 %53 
                       Uniform f32_4* %54 = OpAccessChain %20 %23 %22 
                                f32_4 %55 = OpLoad %54 
                                f32_4 %56 = OpLoad %9 
                                f32_4 %57 = OpVectorShuffle %56 %56 0 0 0 0 
                                f32_4 %58 = OpFMul %55 %57 
                                f32_4 %59 = OpLoad %48 
                                f32_4 %60 = OpFAdd %58 %59 
                                              OpStore %48 %60 
                       Uniform f32_4* %61 = OpAccessChain %20 %23 %35 
                                f32_4 %62 = OpLoad %61 
                                f32_4 %63 = OpLoad %9 
                                f32_4 %64 = OpVectorShuffle %63 %63 2 2 2 2 
                                f32_4 %65 = OpFMul %62 %64 
                                f32_4 %66 = OpLoad %48 
                                f32_4 %67 = OpFAdd %65 %66 
                                              OpStore %48 %67 
                       Uniform f32_4* %73 = OpAccessChain %20 %23 %44 
                                f32_4 %74 = OpLoad %73 
                                f32_4 %75 = OpLoad %9 
                                f32_4 %76 = OpVectorShuffle %75 %75 3 3 3 3 
                                f32_4 %77 = OpFMul %74 %76 
                                f32_4 %78 = OpLoad %48 
                                f32_4 %79 = OpFAdd %77 %78 
                        Output f32_4* %81 = OpAccessChain %72 %22 
                                              OpStore %81 %79 
                                f32_2 %87 = OpLoad %86 
                                              OpStore vs_TEXCOORD0 %87 
                          Output f32* %89 = OpAccessChain %72 %22 %68 
                                  f32 %90 = OpLoad %89 
                                  f32 %91 = OpFNegate %90 
                          Output f32* %92 = OpAccessChain %72 %22 %68 
                                              OpStore %92 %91 
                                              OpReturn
                                              OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 289
; Schema: 0
                                                    OpCapability Shader 
                                             %1 = OpExtInstImport "GLSL.std.450" 
                                                    OpMemoryModel Logical GLSL450 
                                                    OpEntryPoint Fragment %4 "main" %12 %277 
                                                    OpExecutionMode %4 OriginUpperLeft 
                                                    OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                    OpDecorate vs_TEXCOORD0 Location 12 
                                                    OpMemberDecorate %14 0 Offset 14 
                                                    OpMemberDecorate %14 1 Offset 14 
                                                    OpMemberDecorate %14 2 Offset 14 
                                                    OpMemberDecorate %14 3 Offset 14 
                                                    OpDecorate %14 Block 
                                                    OpDecorate %16 DescriptorSet 16 
                                                    OpDecorate %16 Binding 16 
                                                    OpDecorate %32 DescriptorSet 32 
                                                    OpDecorate %32 Binding 32 
                                                    OpDecorate %36 DescriptorSet 36 
                                                    OpDecorate %36 Binding 36 
                                                    OpDecorate %277 Location 277 
                                             %2 = OpTypeVoid 
                                             %3 = OpTypeFunction %2 
                                             %6 = OpTypeFloat 32 
                                             %7 = OpTypeVector %6 4 
                                             %8 = OpTypePointer Private %7 
                              Private f32_4* %9 = OpVariable Private 
                                            %10 = OpTypeVector %6 2 
                                            %11 = OpTypePointer Input %10 
                      Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                            %14 = OpTypeStruct %7 %7 %7 %6 
                                            %15 = OpTypePointer Uniform %14 
Uniform struct {f32_4; f32_4; f32_4; f32;}* %16 = OpVariable Uniform 
                                            %17 = OpTypeInt 32 1 
                                        i32 %18 = OpConstant 0 
                                            %19 = OpTypePointer Uniform %7 
                                            %30 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                            %31 = OpTypePointer UniformConstant %30 
       UniformConstant read_only Texture2D* %32 = OpVariable UniformConstant 
                                            %34 = OpTypeSampler 
                                            %35 = OpTypePointer UniformConstant %34 
                   UniformConstant sampler* %36 = OpVariable UniformConstant 
                                            %38 = OpTypeSampledImage %30 
                                            %43 = OpTypeVector %6 3 
                                        i32 %46 = OpConstant 1 
                                            %60 = OpTypePointer Private %6 
                               Private f32* %61 = OpVariable Private 
                                        i32 %62 = OpConstant 2 
                                            %63 = OpTypeInt 32 0 
                                        u32 %64 = OpConstant 0 
                                            %65 = OpTypePointer Uniform %6 
                                        i32 %68 = OpConstant 3 
                             Private f32_4* %72 = OpVariable Private 
                                        f32 %75 = OpConstant 3.674022E-40 
                                        f32 %76 = OpConstant 3.674022E-40 
                                      f32_2 %77 = OpConstantComposite %75 %76 
                                        f32 %81 = OpConstant 3.674022E-40 
                                        u32 %82 = OpConstant 1 
                                        u32 %84 = OpConstant 3 
                             Private f32_4* %86 = OpVariable Private 
                            Private f32_4* %114 = OpVariable Private 
                                       f32 %144 = OpConstant 3.674022E-40 
                                     f32_3 %145 = OpConstantComposite %144 %144 %144 
                                       f32 %151 = OpConstant 3.674022E-40 
                                     f32_3 %152 = OpConstantComposite %151 %151 %151 
                                       f32 %211 = OpConstant 3.674022E-40 
                                     f32_3 %212 = OpConstantComposite %211 %211 %211 
                                       u32 %255 = OpConstant 2 
                                       f32 %258 = OpConstant 3.674022E-40 
                                       f32 %266 = OpConstant 3.674022E-40 
                                       f32 %269 = OpConstant 3.674022E-40 
                                       f32 %274 = OpConstant 3.674022E-40 
                                           %276 = OpTypePointer Output %7 
                             Output f32_4* %277 = OpVariable Output 
                                           %286 = OpTypePointer Output %6 
                                        void %4 = OpFunction None %3 
                                             %5 = OpLabel 
                                      f32_2 %13 = OpLoad vs_TEXCOORD0 
                             Uniform f32_4* %20 = OpAccessChain %16 %18 
                                      f32_4 %21 = OpLoad %20 
                                      f32_2 %22 = OpVectorShuffle %21 %21 0 1 
                                      f32_2 %23 = OpFMul %13 %22 
                             Uniform f32_4* %24 = OpAccessChain %16 %18 
                                      f32_4 %25 = OpLoad %24 
                                      f32_2 %26 = OpVectorShuffle %25 %25 2 3 
                                      f32_2 %27 = OpFAdd %23 %26 
                                      f32_4 %28 = OpLoad %9 
                                      f32_4 %29 = OpVectorShuffle %28 %27 4 5 2 3 
                                                    OpStore %9 %29 
                        read_only Texture2D %33 = OpLoad %32 
                                    sampler %37 = OpLoad %36 
                 read_only Texture2DSampled %39 = OpSampledImage %33 %37 
                                      f32_4 %40 = OpLoad %9 
                                      f32_2 %41 = OpVectorShuffle %40 %40 0 1 
                                      f32_4 %42 = OpImageSampleImplicitLod %39 %41 
                                                    OpStore %9 %42 
                                      f32_4 %44 = OpLoad %9 
                                      f32_3 %45 = OpVectorShuffle %44 %44 0 1 2 
                             Uniform f32_4* %47 = OpAccessChain %16 %46 
                                      f32_4 %48 = OpLoad %47 
                                      f32_3 %49 = OpVectorShuffle %48 %48 0 0 0 
                                      f32_3 %50 = OpFMul %45 %49 
                                      f32_4 %51 = OpLoad %9 
                                      f32_4 %52 = OpVectorShuffle %51 %50 4 5 6 3 
                                                    OpStore %9 %52 
                                      f32_4 %53 = OpLoad %9 
                                      f32_3 %54 = OpVectorShuffle %53 %53 3 3 3 
                                      f32_4 %55 = OpLoad %9 
                                      f32_3 %56 = OpVectorShuffle %55 %55 0 1 2 
                                      f32_3 %57 = OpFMul %54 %56 
                                      f32_4 %58 = OpLoad %9 
                                      f32_4 %59 = OpVectorShuffle %58 %57 4 5 6 3 
                                                    OpStore %9 %59 
                               Uniform f32* %66 = OpAccessChain %16 %62 %64 
                                        f32 %67 = OpLoad %66 
                               Uniform f32* %69 = OpAccessChain %16 %68 
                                        f32 %70 = OpLoad %69 
                                        f32 %71 = OpFMul %67 %70 
                                                    OpStore %61 %71 
                                        f32 %73 = OpLoad %61 
                                      f32_2 %74 = OpCompositeConstruct %73 %73 
                                      f32_2 %78 = OpFMul %74 %77 
                                      f32_4 %79 = OpLoad %72 
                                      f32_4 %80 = OpVectorShuffle %79 %78 4 1 5 3 
                                                    OpStore %72 %80 
                               Private f32* %83 = OpAccessChain %72 %82 
                                                    OpStore %83 %81 
                               Private f32* %85 = OpAccessChain %72 %84 
                                                    OpStore %85 %81 
                                      f32_4 %87 = OpLoad %72 
                                      f32_2 %88 = OpLoad vs_TEXCOORD0 
                                      f32_4 %89 = OpVectorShuffle %88 %88 0 1 0 1 
                                      f32_4 %90 = OpFAdd %87 %89 
                                                    OpStore %86 %90 
                                      f32_4 %91 = OpLoad %72 
                                      f32_4 %92 = OpFNegate %91 
                                      f32_2 %93 = OpLoad vs_TEXCOORD0 
                                      f32_4 %94 = OpVectorShuffle %93 %93 0 1 0 1 
                                      f32_4 %95 = OpFAdd %92 %94 
                                                    OpStore %72 %95 
                                      f32_4 %96 = OpLoad %72 
                             Uniform f32_4* %97 = OpAccessChain %16 %18 
                                      f32_4 %98 = OpLoad %97 
                                      f32_4 %99 = OpVectorShuffle %98 %98 0 1 0 1 
                                     f32_4 %100 = OpFMul %96 %99 
                            Uniform f32_4* %101 = OpAccessChain %16 %18 
                                     f32_4 %102 = OpLoad %101 
                                     f32_4 %103 = OpVectorShuffle %102 %102 2 3 2 3 
                                     f32_4 %104 = OpFAdd %100 %103 
                                                    OpStore %72 %104 
                                     f32_4 %105 = OpLoad %86 
                            Uniform f32_4* %106 = OpAccessChain %16 %18 
                                     f32_4 %107 = OpLoad %106 
                                     f32_4 %108 = OpVectorShuffle %107 %107 0 1 0 1 
                                     f32_4 %109 = OpFMul %105 %108 
                            Uniform f32_4* %110 = OpAccessChain %16 %18 
                                     f32_4 %111 = OpLoad %110 
                                     f32_4 %112 = OpVectorShuffle %111 %111 2 3 2 3 
                                     f32_4 %113 = OpFAdd %109 %112 
                                                    OpStore %86 %113 
                       read_only Texture2D %115 = OpLoad %32 
                                   sampler %116 = OpLoad %36 
                read_only Texture2DSampled %117 = OpSampledImage %115 %116 
                                     f32_4 %118 = OpLoad %86 
                                     f32_2 %119 = OpVectorShuffle %118 %118 0 1 
                                     f32_4 %120 = OpImageSampleImplicitLod %117 %119 
                                                    OpStore %114 %120 
                       read_only Texture2D %121 = OpLoad %32 
                                   sampler %122 = OpLoad %36 
                read_only Texture2DSampled %123 = OpSampledImage %121 %122 
                                     f32_4 %124 = OpLoad %86 
                                     f32_2 %125 = OpVectorShuffle %124 %124 2 3 
                                     f32_4 %126 = OpImageSampleImplicitLod %123 %125 
                                                    OpStore %86 %126 
                                     f32_4 %127 = OpLoad %114 
                                     f32_3 %128 = OpVectorShuffle %127 %127 0 1 2 
                            Uniform f32_4* %129 = OpAccessChain %16 %46 
                                     f32_4 %130 = OpLoad %129 
                                     f32_3 %131 = OpVectorShuffle %130 %130 0 0 0 
                                     f32_3 %132 = OpFMul %128 %131 
                                     f32_4 %133 = OpLoad %114 
                                     f32_4 %134 = OpVectorShuffle %133 %132 4 5 6 3 
                                                    OpStore %114 %134 
                                     f32_4 %135 = OpLoad %114 
                                     f32_3 %136 = OpVectorShuffle %135 %135 3 3 3 
                                     f32_4 %137 = OpLoad %114 
                                     f32_3 %138 = OpVectorShuffle %137 %137 0 1 2 
                                     f32_3 %139 = OpFMul %136 %138 
                                     f32_4 %140 = OpLoad %114 
                                     f32_4 %141 = OpVectorShuffle %140 %139 4 5 6 3 
                                                    OpStore %114 %141 
                                     f32_4 %142 = OpLoad %114 
                                     f32_3 %143 = OpVectorShuffle %142 %142 0 1 2 
                                     f32_3 %146 = OpFMul %143 %145 
                                     f32_4 %147 = OpLoad %114 
                                     f32_4 %148 = OpVectorShuffle %147 %146 4 5 6 3 
                                                    OpStore %114 %148 
                                     f32_4 %149 = OpLoad %9 
                                     f32_3 %150 = OpVectorShuffle %149 %149 0 1 2 
                                     f32_3 %153 = OpFMul %150 %152 
                                     f32_4 %154 = OpLoad %114 
                                     f32_3 %155 = OpVectorShuffle %154 %154 0 1 2 
                                     f32_3 %156 = OpFAdd %153 %155 
                                     f32_4 %157 = OpLoad %9 
                                     f32_4 %158 = OpVectorShuffle %157 %156 4 5 6 3 
                                                    OpStore %9 %158 
                       read_only Texture2D %159 = OpLoad %32 
                                   sampler %160 = OpLoad %36 
                read_only Texture2DSampled %161 = OpSampledImage %159 %160 
                                     f32_4 %162 = OpLoad %72 
                                     f32_2 %163 = OpVectorShuffle %162 %162 0 1 
                                     f32_4 %164 = OpImageSampleImplicitLod %161 %163 
                                                    OpStore %114 %164 
                       read_only Texture2D %165 = OpLoad %32 
                                   sampler %166 = OpLoad %36 
                read_only Texture2DSampled %167 = OpSampledImage %165 %166 
                                     f32_4 %168 = OpLoad %72 
                                     f32_2 %169 = OpVectorShuffle %168 %168 2 3 
                                     f32_4 %170 = OpImageSampleImplicitLod %167 %169 
                                                    OpStore %72 %170 
                                     f32_4 %171 = OpLoad %114 
                                     f32_3 %172 = OpVectorShuffle %171 %171 0 1 2 
                            Uniform f32_4* %173 = OpAccessChain %16 %46 
                                     f32_4 %174 = OpLoad %173 
                                     f32_3 %175 = OpVectorShuffle %174 %174 0 0 0 
                                     f32_3 %176 = OpFMul %172 %175 
                                     f32_4 %177 = OpLoad %114 
                                     f32_4 %178 = OpVectorShuffle %177 %176 4 5 6 3 
                                                    OpStore %114 %178 
                                     f32_4 %179 = OpLoad %114 
                                     f32_3 %180 = OpVectorShuffle %179 %179 3 3 3 
                                     f32_4 %181 = OpLoad %114 
                                     f32_3 %182 = OpVectorShuffle %181 %181 0 1 2 
                                     f32_3 %183 = OpFMul %180 %182 
                                     f32_4 %184 = OpLoad %114 
                                     f32_4 %185 = OpVectorShuffle %184 %183 4 5 6 3 
                                                    OpStore %114 %185 
                                     f32_4 %186 = OpLoad %114 
                                     f32_3 %187 = OpVectorShuffle %186 %186 0 1 2 
                                     f32_3 %188 = OpFMul %187 %145 
                                     f32_4 %189 = OpLoad %9 
                                     f32_3 %190 = OpVectorShuffle %189 %189 0 1 2 
                                     f32_3 %191 = OpFAdd %188 %190 
                                     f32_4 %192 = OpLoad %9 
                                     f32_4 %193 = OpVectorShuffle %192 %191 4 5 6 3 
                                                    OpStore %9 %193 
                                     f32_4 %194 = OpLoad %86 
                                     f32_3 %195 = OpVectorShuffle %194 %194 0 1 2 
                            Uniform f32_4* %196 = OpAccessChain %16 %46 
                                     f32_4 %197 = OpLoad %196 
                                     f32_3 %198 = OpVectorShuffle %197 %197 0 0 0 
                                     f32_3 %199 = OpFMul %195 %198 
                                     f32_4 %200 = OpLoad %86 
                                     f32_4 %201 = OpVectorShuffle %200 %199 4 5 6 3 
                                                    OpStore %86 %201 
                                     f32_4 %202 = OpLoad %86 
                                     f32_3 %203 = OpVectorShuffle %202 %202 3 3 3 
                                     f32_4 %204 = OpLoad %86 
                                     f32_3 %205 = OpVectorShuffle %204 %204 0 1 2 
                                     f32_3 %206 = OpFMul %203 %205 
                                     f32_4 %207 = OpLoad %86 
                                     f32_4 %208 = OpVectorShuffle %207 %206 4 5 6 3 
                                                    OpStore %86 %208 
                                     f32_4 %209 = OpLoad %86 
                                     f32_3 %210 = OpVectorShuffle %209 %209 0 1 2 
                                     f32_3 %213 = OpFMul %210 %212 
                                     f32_4 %214 = OpLoad %9 
                                     f32_3 %215 = OpVectorShuffle %214 %214 0 1 2 
                                     f32_3 %216 = OpFAdd %213 %215 
                                     f32_4 %217 = OpLoad %9 
                                     f32_4 %218 = OpVectorShuffle %217 %216 4 5 6 3 
                                                    OpStore %9 %218 
                                     f32_4 %219 = OpLoad %72 
                                     f32_3 %220 = OpVectorShuffle %219 %219 0 1 2 
                            Uniform f32_4* %221 = OpAccessChain %16 %46 
                                     f32_4 %222 = OpLoad %221 
                                     f32_3 %223 = OpVectorShuffle %222 %222 0 0 0 
                                     f32_3 %224 = OpFMul %220 %223 
                                     f32_4 %225 = OpLoad %72 
                                     f32_4 %226 = OpVectorShuffle %225 %224 4 5 6 3 
                                                    OpStore %72 %226 
                                     f32_4 %227 = OpLoad %72 
                                     f32_3 %228 = OpVectorShuffle %227 %227 3 3 3 
                                     f32_4 %229 = OpLoad %72 
                                     f32_3 %230 = OpVectorShuffle %229 %229 0 1 2 
                                     f32_3 %231 = OpFMul %228 %230 
                                     f32_4 %232 = OpLoad %72 
                                     f32_4 %233 = OpVectorShuffle %232 %231 4 5 6 3 
                                                    OpStore %72 %233 
                                     f32_4 %234 = OpLoad %72 
                                     f32_3 %235 = OpVectorShuffle %234 %234 0 1 2 
                                     f32_3 %236 = OpFMul %235 %212 
                                     f32_4 %237 = OpLoad %9 
                                     f32_3 %238 = OpVectorShuffle %237 %237 0 1 2 
                                     f32_3 %239 = OpFAdd %236 %238 
                                     f32_4 %240 = OpLoad %9 
                                     f32_4 %241 = OpVectorShuffle %240 %239 4 5 6 3 
                                                    OpStore %9 %241 
                                     f32_4 %242 = OpLoad %9 
                                     f32_3 %243 = OpVectorShuffle %242 %242 0 1 2 
                            Uniform f32_4* %244 = OpAccessChain %16 %46 
                                     f32_4 %245 = OpLoad %244 
                                     f32_3 %246 = OpVectorShuffle %245 %245 1 1 1 
                                     f32_3 %247 = OpFMul %243 %246 
                                     f32_4 %248 = OpLoad %9 
                                     f32_4 %249 = OpVectorShuffle %248 %247 4 5 6 3 
                                                    OpStore %9 %249 
                              Private f32* %250 = OpAccessChain %9 %82 
                                       f32 %251 = OpLoad %250 
                              Private f32* %252 = OpAccessChain %9 %64 
                                       f32 %253 = OpLoad %252 
                                       f32 %254 = OpExtInst %1 40 %251 %253 
                                                    OpStore %61 %254 
                              Private f32* %256 = OpAccessChain %9 %255 
                                       f32 %257 = OpLoad %256 
                                       f32 %259 = OpExtInst %1 40 %257 %258 
                              Private f32* %260 = OpAccessChain %72 %64 
                                                    OpStore %260 %259 
                                       f32 %261 = OpLoad %61 
                              Private f32* %262 = OpAccessChain %72 %64 
                                       f32 %263 = OpLoad %262 
                                       f32 %264 = OpExtInst %1 40 %261 %263 
                                                    OpStore %61 %264 
                                       f32 %265 = OpLoad %61 
                                       f32 %267 = OpExtInst %1 37 %265 %266 
                                                    OpStore %61 %267 
                                       f32 %268 = OpLoad %61 
                                       f32 %270 = OpFMul %268 %269 
                                                    OpStore %61 %270 
                                       f32 %271 = OpLoad %61 
                                       f32 %272 = OpExtInst %1 9 %271 
                                                    OpStore %61 %272 
                                       f32 %273 = OpLoad %61 
                                       f32 %275 = OpFMul %273 %274 
                                                    OpStore %61 %275 
                                     f32_4 %278 = OpLoad %9 
                                     f32_3 %279 = OpVectorShuffle %278 %278 0 1 2 
                                       f32 %280 = OpLoad %61 
                                     f32_3 %281 = OpCompositeConstruct %280 %280 %280 
                                     f32_3 %282 = OpFDiv %279 %281 
                                     f32_4 %283 = OpLoad %277 
                                     f32_4 %284 = OpVectorShuffle %283 %282 4 5 6 3 
                                                    OpStore %277 %284 
                                       f32 %285 = OpLoad %61 
                               Output f32* %287 = OpAccessChain %277 %84 
                                                    OpStore %287 %285 
                                                    OpReturn
                                                    OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "AB_HIGH_PRECISION" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "AB_HIGH_PRECISION" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in  vec4 in_POSITION0;
in  vec2 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _MainTex_TexelSize;
uniform 	float _BlurRadius;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
in  vec2 vs_TEXCOORD0;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
float u_xlat12;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0 = texture(_MainTex, u_xlat0.xy);
    u_xlat12 = _MainTex_TexelSize.x * _BlurRadius;
    u_xlat1.xz = vec2(u_xlat12) * vec2(1.38461542, 3.23076916);
    u_xlat1.y = float(0.0);
    u_xlat1.w = float(0.0);
    u_xlat2 = u_xlat1 + vs_TEXCOORD0.xyxy;
    u_xlat1 = (-u_xlat1) + vs_TEXCOORD0.xyxy;
    u_xlat1 = u_xlat1 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
    u_xlat2 = u_xlat2 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
    u_xlat3 = texture(_MainTex, u_xlat2.xy);
    u_xlat2 = texture(_MainTex, u_xlat2.zw);
    u_xlat3.xyz = u_xlat3.xyz * vec3(0.31621623, 0.31621623, 0.31621623);
    u_xlat0.xyz = u_xlat0.xyz * vec3(0.227027029, 0.227027029, 0.227027029) + u_xlat3.xyz;
    u_xlat3 = texture(_MainTex, u_xlat1.xy);
    u_xlat1 = texture(_MainTex, u_xlat1.zw);
    u_xlat0.xyz = u_xlat3.xyz * vec3(0.31621623, 0.31621623, 0.31621623) + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat2.xyz * vec3(0.0702702701, 0.0702702701, 0.0702702701) + u_xlat0.xyz;
    SV_Target0.xyz = u_xlat1.xyz * vec3(0.0702702701, 0.0702702701, 0.0702702701) + u_xlat0.xyz;
    SV_Target0.w = 0.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "AB_HIGH_PRECISION" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 94
; Schema: 0
                                              OpCapability Shader 
                                       %1 = OpExtInstImport "GLSL.std.450" 
                                              OpMemoryModel Logical GLSL450 
                                              OpEntryPoint Vertex %4 "main" %11 %72 %84 %86 
                                              OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                              OpDecorate %11 Location 11 
                                              OpDecorate %16 ArrayStride 16 
                                              OpDecorate %17 ArrayStride 17 
                                              OpMemberDecorate %18 0 Offset 18 
                                              OpMemberDecorate %18 1 Offset 18 
                                              OpDecorate %18 Block 
                                              OpDecorate %20 DescriptorSet 20 
                                              OpDecorate %20 Binding 20 
                                              OpMemberDecorate %70 0 BuiltIn 70 
                                              OpMemberDecorate %70 1 BuiltIn 70 
                                              OpMemberDecorate %70 2 BuiltIn 70 
                                              OpDecorate %70 Block 
                                              OpDecorate vs_TEXCOORD0 Location 84 
                                              OpDecorate %86 Location 86 
                                       %2 = OpTypeVoid 
                                       %3 = OpTypeFunction %2 
                                       %6 = OpTypeFloat 32 
                                       %7 = OpTypeVector %6 4 
                                       %8 = OpTypePointer Private %7 
                        Private f32_4* %9 = OpVariable Private 
                                      %10 = OpTypePointer Input %7 
                         Input f32_4* %11 = OpVariable Input 
                                      %14 = OpTypeInt 32 0 
                                  u32 %15 = OpConstant 4 
                                      %16 = OpTypeArray %7 %15 
                                      %17 = OpTypeArray %7 %15 
                                      %18 = OpTypeStruct %16 %17 
                                      %19 = OpTypePointer Uniform %18 
Uniform struct {f32_4[4]; f32_4[4];}* %20 = OpVariable Uniform 
                                      %21 = OpTypeInt 32 1 
                                  i32 %22 = OpConstant 0 
                                  i32 %23 = OpConstant 1 
                                      %24 = OpTypePointer Uniform %7 
                                  i32 %35 = OpConstant 2 
                                  i32 %44 = OpConstant 3 
                       Private f32_4* %48 = OpVariable Private 
                                  u32 %68 = OpConstant 1 
                                      %69 = OpTypeArray %6 %68 
                                      %70 = OpTypeStruct %7 %6 %69 
                                      %71 = OpTypePointer Output %70 
 Output struct {f32_4; f32; f32[1];}* %72 = OpVariable Output 
                                      %80 = OpTypePointer Output %7 
                                      %82 = OpTypeVector %6 2 
                                      %83 = OpTypePointer Output %82 
               Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                      %85 = OpTypePointer Input %82 
                         Input f32_2* %86 = OpVariable Input 
                                      %88 = OpTypePointer Output %6 
                                  void %4 = OpFunction None %3 
                                       %5 = OpLabel 
                                f32_4 %12 = OpLoad %11 
                                f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                       Uniform f32_4* %25 = OpAccessChain %20 %22 %23 
                                f32_4 %26 = OpLoad %25 
                                f32_4 %27 = OpFMul %13 %26 
                                              OpStore %9 %27 
                       Uniform f32_4* %28 = OpAccessChain %20 %22 %22 
                                f32_4 %29 = OpLoad %28 
                                f32_4 %30 = OpLoad %11 
                                f32_4 %31 = OpVectorShuffle %30 %30 0 0 0 0 
                                f32_4 %32 = OpFMul %29 %31 
                                f32_4 %33 = OpLoad %9 
                                f32_4 %34 = OpFAdd %32 %33 
                                              OpStore %9 %34 
                       Uniform f32_4* %36 = OpAccessChain %20 %22 %35 
                                f32_4 %37 = OpLoad %36 
                                f32_4 %38 = OpLoad %11 
                                f32_4 %39 = OpVectorShuffle %38 %38 2 2 2 2 
                                f32_4 %40 = OpFMul %37 %39 
                                f32_4 %41 = OpLoad %9 
                                f32_4 %42 = OpFAdd %40 %41 
                                              OpStore %9 %42 
                                f32_4 %43 = OpLoad %9 
                       Uniform f32_4* %45 = OpAccessChain %20 %22 %44 
                                f32_4 %46 = OpLoad %45 
                                f32_4 %47 = OpFAdd %43 %46 
                                              OpStore %9 %47 
                                f32_4 %49 = OpLoad %9 
                                f32_4 %50 = OpVectorShuffle %49 %49 1 1 1 1 
                       Uniform f32_4* %51 = OpAccessChain %20 %23 %23 
                                f32_4 %52 = OpLoad %51 
                                f32_4 %53 = OpFMul %50 %52 
                                              OpStore %48 %53 
                       Uniform f32_4* %54 = OpAccessChain %20 %23 %22 
                                f32_4 %55 = OpLoad %54 
                                f32_4 %56 = OpLoad %9 
                                f32_4 %57 = OpVectorShuffle %56 %56 0 0 0 0 
                                f32_4 %58 = OpFMul %55 %57 
                                f32_4 %59 = OpLoad %48 
                                f32_4 %60 = OpFAdd %58 %59 
                                              OpStore %48 %60 
                       Uniform f32_4* %61 = OpAccessChain %20 %23 %35 
                                f32_4 %62 = OpLoad %61 
                                f32_4 %63 = OpLoad %9 
                                f32_4 %64 = OpVectorShuffle %63 %63 2 2 2 2 
                                f32_4 %65 = OpFMul %62 %64 
                                f32_4 %66 = OpLoad %48 
                                f32_4 %67 = OpFAdd %65 %66 
                                              OpStore %48 %67 
                       Uniform f32_4* %73 = OpAccessChain %20 %23 %44 
                                f32_4 %74 = OpLoad %73 
                                f32_4 %75 = OpLoad %9 
                                f32_4 %76 = OpVectorShuffle %75 %75 3 3 3 3 
                                f32_4 %77 = OpFMul %74 %76 
                                f32_4 %78 = OpLoad %48 
                                f32_4 %79 = OpFAdd %77 %78 
                        Output f32_4* %81 = OpAccessChain %72 %22 
                                              OpStore %81 %79 
                                f32_2 %87 = OpLoad %86 
                                              OpStore vs_TEXCOORD0 %87 
                          Output f32* %89 = OpAccessChain %72 %22 %68 
                                  f32 %90 = OpLoad %89 
                                  f32 %91 = OpFNegate %90 
                          Output f32* %92 = OpAccessChain %72 %22 %68 
                                              OpStore %92 %91 
                                              OpReturn
                                              OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 166
; Schema: 0
                                             OpCapability Shader 
                                      %1 = OpExtInstImport "GLSL.std.450" 
                                             OpMemoryModel Logical GLSL450 
                                             OpEntryPoint Fragment %4 "main" %12 %155 
                                             OpExecutionMode %4 OriginUpperLeft 
                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                             OpDecorate vs_TEXCOORD0 Location 12 
                                             OpMemberDecorate %15 0 Offset 15 
                                             OpMemberDecorate %15 1 Offset 15 
                                             OpMemberDecorate %15 2 Offset 15 
                                             OpDecorate %15 Block 
                                             OpDecorate %17 DescriptorSet 17 
                                             OpDecorate %17 Binding 17 
                                             OpDecorate %33 DescriptorSet 33 
                                             OpDecorate %33 Binding 33 
                                             OpDecorate %37 DescriptorSet 37 
                                             OpDecorate %37 Binding 37 
                                             OpDecorate %155 Location 155 
                                      %2 = OpTypeVoid 
                                      %3 = OpTypeFunction %2 
                                      %6 = OpTypeFloat 32 
                                      %7 = OpTypeVector %6 3 
                                      %8 = OpTypePointer Private %7 
                       Private f32_3* %9 = OpVariable Private 
                                     %10 = OpTypeVector %6 2 
                                     %11 = OpTypePointer Input %10 
               Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                     %14 = OpTypeVector %6 4 
                                     %15 = OpTypeStruct %14 %14 %6 
                                     %16 = OpTypePointer Uniform %15 
Uniform struct {f32_4; f32_4; f32;}* %17 = OpVariable Uniform 
                                     %18 = OpTypeInt 32 1 
                                 i32 %19 = OpConstant 0 
                                     %20 = OpTypePointer Uniform %14 
                                     %31 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                     %32 = OpTypePointer UniformConstant %31 
UniformConstant read_only Texture2D* %33 = OpVariable UniformConstant 
                                     %35 = OpTypeSampler 
                                     %36 = OpTypePointer UniformConstant %35 
            UniformConstant sampler* %37 = OpVariable UniformConstant 
                                     %39 = OpTypeSampledImage %31 
                                     %45 = OpTypePointer Private %6 
                        Private f32* %46 = OpVariable Private 
                                 i32 %47 = OpConstant 1 
                                     %48 = OpTypeInt 32 0 
                                 u32 %49 = OpConstant 0 
                                     %50 = OpTypePointer Uniform %6 
                                 i32 %53 = OpConstant 2 
                                     %57 = OpTypePointer Private %14 
                      Private f32_4* %58 = OpVariable Private 
                                 f32 %61 = OpConstant 3.674022E-40 
                                 f32 %62 = OpConstant 3.674022E-40 
                               f32_2 %63 = OpConstantComposite %61 %62 
                                 f32 %67 = OpConstant 3.674022E-40 
                                 u32 %68 = OpConstant 1 
                                 u32 %70 = OpConstant 3 
                      Private f32_4* %72 = OpVariable Private 
                     Private f32_3* %100 = OpVariable Private 
                                f32 %118 = OpConstant 3.674022E-40 
                              f32_3 %119 = OpConstantComposite %118 %118 %118 
                                f32 %122 = OpConstant 3.674022E-40 
                              f32_3 %123 = OpConstantComposite %122 %122 %122 
                                f32 %149 = OpConstant 3.674022E-40 
                              f32_3 %150 = OpConstantComposite %149 %149 %149 
                                    %154 = OpTypePointer Output %14 
                      Output f32_4* %155 = OpVariable Output 
                                    %163 = OpTypePointer Output %6 
                                 void %4 = OpFunction None %3 
                                      %5 = OpLabel 
                               f32_2 %13 = OpLoad vs_TEXCOORD0 
                      Uniform f32_4* %21 = OpAccessChain %17 %19 
                               f32_4 %22 = OpLoad %21 
                               f32_2 %23 = OpVectorShuffle %22 %22 0 1 
                               f32_2 %24 = OpFMul %13 %23 
                      Uniform f32_4* %25 = OpAccessChain %17 %19 
                               f32_4 %26 = OpLoad %25 
                               f32_2 %27 = OpVectorShuffle %26 %26 2 3 
                               f32_2 %28 = OpFAdd %24 %27 
                               f32_3 %29 = OpLoad %9 
                               f32_3 %30 = OpVectorShuffle %29 %28 3 4 2 
                                             OpStore %9 %30 
                 read_only Texture2D %34 = OpLoad %33 
                             sampler %38 = OpLoad %37 
          read_only Texture2DSampled %40 = OpSampledImage %34 %38 
                               f32_3 %41 = OpLoad %9 
                               f32_2 %42 = OpVectorShuffle %41 %41 0 1 
                               f32_4 %43 = OpImageSampleImplicitLod %40 %42 
                               f32_3 %44 = OpVectorShuffle %43 %43 0 1 2 
                                             OpStore %9 %44 
                        Uniform f32* %51 = OpAccessChain %17 %47 %49 
                                 f32 %52 = OpLoad %51 
                        Uniform f32* %54 = OpAccessChain %17 %53 
                                 f32 %55 = OpLoad %54 
                                 f32 %56 = OpFMul %52 %55 
                                             OpStore %46 %56 
                                 f32 %59 = OpLoad %46 
                               f32_2 %60 = OpCompositeConstruct %59 %59 
                               f32_2 %64 = OpFMul %60 %63 
                               f32_4 %65 = OpLoad %58 
                               f32_4 %66 = OpVectorShuffle %65 %64 4 1 5 3 
                                             OpStore %58 %66 
                        Private f32* %69 = OpAccessChain %58 %68 
                                             OpStore %69 %67 
                        Private f32* %71 = OpAccessChain %58 %70 
                                             OpStore %71 %67 
                               f32_4 %73 = OpLoad %58 
                               f32_2 %74 = OpLoad vs_TEXCOORD0 
                               f32_4 %75 = OpVectorShuffle %74 %74 0 1 0 1 
                               f32_4 %76 = OpFAdd %73 %75 
                                             OpStore %72 %76 
                               f32_4 %77 = OpLoad %58 
                               f32_4 %78 = OpFNegate %77 
                               f32_2 %79 = OpLoad vs_TEXCOORD0 
                               f32_4 %80 = OpVectorShuffle %79 %79 0 1 0 1 
                               f32_4 %81 = OpFAdd %78 %80 
                                             OpStore %58 %81 
                               f32_4 %82 = OpLoad %58 
                      Uniform f32_4* %83 = OpAccessChain %17 %19 
                               f32_4 %84 = OpLoad %83 
                               f32_4 %85 = OpVectorShuffle %84 %84 0 1 0 1 
                               f32_4 %86 = OpFMul %82 %85 
                      Uniform f32_4* %87 = OpAccessChain %17 %19 
                               f32_4 %88 = OpLoad %87 
                               f32_4 %89 = OpVectorShuffle %88 %88 2 3 2 3 
                               f32_4 %90 = OpFAdd %86 %89 
                                             OpStore %58 %90 
                               f32_4 %91 = OpLoad %72 
                      Uniform f32_4* %92 = OpAccessChain %17 %19 
                               f32_4 %93 = OpLoad %92 
                               f32_4 %94 = OpVectorShuffle %93 %93 0 1 0 1 
                               f32_4 %95 = OpFMul %91 %94 
                      Uniform f32_4* %96 = OpAccessChain %17 %19 
                               f32_4 %97 = OpLoad %96 
                               f32_4 %98 = OpVectorShuffle %97 %97 2 3 2 3 
                               f32_4 %99 = OpFAdd %95 %98 
                                             OpStore %72 %99 
                read_only Texture2D %101 = OpLoad %33 
                            sampler %102 = OpLoad %37 
         read_only Texture2DSampled %103 = OpSampledImage %101 %102 
                              f32_4 %104 = OpLoad %72 
                              f32_2 %105 = OpVectorShuffle %104 %104 0 1 
                              f32_4 %106 = OpImageSampleImplicitLod %103 %105 
                              f32_3 %107 = OpVectorShuffle %106 %106 0 1 2 
                                             OpStore %100 %107 
                read_only Texture2D %108 = OpLoad %33 
                            sampler %109 = OpLoad %37 
         read_only Texture2DSampled %110 = OpSampledImage %108 %109 
                              f32_4 %111 = OpLoad %72 
                              f32_2 %112 = OpVectorShuffle %111 %111 2 3 
                              f32_4 %113 = OpImageSampleImplicitLod %110 %112 
                              f32_3 %114 = OpVectorShuffle %113 %113 0 1 2 
                              f32_4 %115 = OpLoad %72 
                              f32_4 %116 = OpVectorShuffle %115 %114 4 5 6 3 
                                             OpStore %72 %116 
                              f32_3 %117 = OpLoad %100 
                              f32_3 %120 = OpFMul %117 %119 
                                             OpStore %100 %120 
                              f32_3 %121 = OpLoad %9 
                              f32_3 %124 = OpFMul %121 %123 
                              f32_3 %125 = OpLoad %100 
                              f32_3 %126 = OpFAdd %124 %125 
                                             OpStore %9 %126 
                read_only Texture2D %127 = OpLoad %33 
                            sampler %128 = OpLoad %37 
         read_only Texture2DSampled %129 = OpSampledImage %127 %128 
                              f32_4 %130 = OpLoad %58 
                              f32_2 %131 = OpVectorShuffle %130 %130 0 1 
                              f32_4 %132 = OpImageSampleImplicitLod %129 %131 
                              f32_3 %133 = OpVectorShuffle %132 %132 0 1 2 
                                             OpStore %100 %133 
                read_only Texture2D %134 = OpLoad %33 
                            sampler %135 = OpLoad %37 
         read_only Texture2DSampled %136 = OpSampledImage %134 %135 
                              f32_4 %137 = OpLoad %58 
                              f32_2 %138 = OpVectorShuffle %137 %137 2 3 
                              f32_4 %139 = OpImageSampleImplicitLod %136 %138 
                              f32_3 %140 = OpVectorShuffle %139 %139 0 1 2 
                              f32_4 %141 = OpLoad %58 
                              f32_4 %142 = OpVectorShuffle %141 %140 4 5 6 3 
                                             OpStore %58 %142 
                              f32_3 %143 = OpLoad %100 
                              f32_3 %144 = OpFMul %143 %119 
                              f32_3 %145 = OpLoad %9 
                              f32_3 %146 = OpFAdd %144 %145 
                                             OpStore %9 %146 
                              f32_4 %147 = OpLoad %72 
                              f32_3 %148 = OpVectorShuffle %147 %147 0 1 2 
                              f32_3 %151 = OpFMul %148 %150 
                              f32_3 %152 = OpLoad %9 
                              f32_3 %153 = OpFAdd %151 %152 
                                             OpStore %9 %153 
                              f32_4 %156 = OpLoad %58 
                              f32_3 %157 = OpVectorShuffle %156 %156 0 1 2 
                              f32_3 %158 = OpFMul %157 %150 
                              f32_3 %159 = OpLoad %9 
                              f32_3 %160 = OpFAdd %158 %159 
                              f32_4 %161 = OpLoad %155 
                              f32_4 %162 = OpVectorShuffle %161 %160 4 5 6 3 
                                             OpStore %155 %162 
                        Output f32* %164 = OpAccessChain %155 %70 
                                             OpStore %164 %67 
                                             OpReturn
                                             OpFunctionEnd
"
}
}
Program "fp" {
SubProgram "d3d11 " {
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
""
}
SubProgram "vulkan " {
""
}
SubProgram "d3d11 " {
Keywords { "AB_HIGH_PRECISION" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "AB_HIGH_PRECISION" }
""
}
SubProgram "vulkan " {
Keywords { "AB_HIGH_PRECISION" }
""
}
}
}
 Pass {
  Name "frag_vertical_gaussian_blur"
  ZTest Always
  ZWrite Off
  Cull Off
  GpuProgramID 1007810
Program "vp" {
SubProgram "d3d11 " {
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in  vec4 in_POSITION0;
in  vec2 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BloomRange;
uniform 	vec4 _MainTex_TexelSize;
uniform 	float _BlurRadius;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
in  vec2 vs_TEXCOORD0;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
float u_xlat12;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0 = texture(_MainTex, u_xlat0.xy);
    u_xlat0.xyz = u_xlat0.xyz * _BloomRange.xxx;
    u_xlat0.xyz = u_xlat0.www * u_xlat0.xyz;
    u_xlat1.x = _MainTex_TexelSize.y * _BlurRadius;
    u_xlat1.y = float(1.38461542);
    u_xlat1.z = float(3.23076916);
    u_xlat2 = vec4(0.0, 1.38461542, 0.0, 3.23076916) * u_xlat1.yxzx + vs_TEXCOORD0.xyxy;
    u_xlat1 = vec4(-0.0, -1.38461542, -0.0, -3.23076916) * u_xlat1.yxzx + vs_TEXCOORD0.xyxy;
    u_xlat1 = u_xlat1 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
    u_xlat2 = u_xlat2 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
    u_xlat3 = texture(_MainTex, u_xlat2.xy);
    u_xlat2 = texture(_MainTex, u_xlat2.zw);
    u_xlat3.xyz = u_xlat3.xyz * _BloomRange.xxx;
    u_xlat3.xyz = u_xlat3.www * u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz * vec3(0.31621623, 0.31621623, 0.31621623);
    u_xlat0.xyz = u_xlat0.xyz * vec3(0.227027029, 0.227027029, 0.227027029) + u_xlat3.xyz;
    u_xlat3 = texture(_MainTex, u_xlat1.xy);
    u_xlat1 = texture(_MainTex, u_xlat1.zw);
    u_xlat3.xyz = u_xlat3.xyz * _BloomRange.xxx;
    u_xlat3.xyz = u_xlat3.www * u_xlat3.xyz;
    u_xlat0.xyz = u_xlat3.xyz * vec3(0.31621623, 0.31621623, 0.31621623) + u_xlat0.xyz;
    u_xlat2.xyz = u_xlat2.xyz * _BloomRange.xxx;
    u_xlat2.xyz = u_xlat2.www * u_xlat2.xyz;
    u_xlat0.xyz = u_xlat2.xyz * vec3(0.0702702701, 0.0702702701, 0.0702702701) + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _BloomRange.xxx;
    u_xlat1.xyz = u_xlat1.www * u_xlat1.xyz;
    u_xlat0.xyz = u_xlat1.xyz * vec3(0.0702702701, 0.0702702701, 0.0702702701) + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * _BloomRange.yyy;
    u_xlat12 = max(u_xlat0.y, u_xlat0.x);
    u_xlat1.x = max(u_xlat0.z, 9.99999997e-07);
    u_xlat12 = max(u_xlat12, u_xlat1.x);
    u_xlat12 = min(u_xlat12, 1.0);
    u_xlat12 = u_xlat12 * 255.0;
    u_xlat12 = ceil(u_xlat12);
    u_xlat12 = u_xlat12 * 0.00392156886;
    SV_Target0.xyz = u_xlat0.xyz / vec3(u_xlat12);
    SV_Target0.w = u_xlat12;
    return;
}

#endif
"
}
SubProgram "vulkan " {
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 94
; Schema: 0
                                              OpCapability Shader 
                                       %1 = OpExtInstImport "GLSL.std.450" 
                                              OpMemoryModel Logical GLSL450 
                                              OpEntryPoint Vertex %4 "main" %11 %72 %84 %86 
                                              OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                              OpDecorate %11 Location 11 
                                              OpDecorate %16 ArrayStride 16 
                                              OpDecorate %17 ArrayStride 17 
                                              OpMemberDecorate %18 0 Offset 18 
                                              OpMemberDecorate %18 1 Offset 18 
                                              OpDecorate %18 Block 
                                              OpDecorate %20 DescriptorSet 20 
                                              OpDecorate %20 Binding 20 
                                              OpMemberDecorate %70 0 BuiltIn 70 
                                              OpMemberDecorate %70 1 BuiltIn 70 
                                              OpMemberDecorate %70 2 BuiltIn 70 
                                              OpDecorate %70 Block 
                                              OpDecorate vs_TEXCOORD0 Location 84 
                                              OpDecorate %86 Location 86 
                                       %2 = OpTypeVoid 
                                       %3 = OpTypeFunction %2 
                                       %6 = OpTypeFloat 32 
                                       %7 = OpTypeVector %6 4 
                                       %8 = OpTypePointer Private %7 
                        Private f32_4* %9 = OpVariable Private 
                                      %10 = OpTypePointer Input %7 
                         Input f32_4* %11 = OpVariable Input 
                                      %14 = OpTypeInt 32 0 
                                  u32 %15 = OpConstant 4 
                                      %16 = OpTypeArray %7 %15 
                                      %17 = OpTypeArray %7 %15 
                                      %18 = OpTypeStruct %16 %17 
                                      %19 = OpTypePointer Uniform %18 
Uniform struct {f32_4[4]; f32_4[4];}* %20 = OpVariable Uniform 
                                      %21 = OpTypeInt 32 1 
                                  i32 %22 = OpConstant 0 
                                  i32 %23 = OpConstant 1 
                                      %24 = OpTypePointer Uniform %7 
                                  i32 %35 = OpConstant 2 
                                  i32 %44 = OpConstant 3 
                       Private f32_4* %48 = OpVariable Private 
                                  u32 %68 = OpConstant 1 
                                      %69 = OpTypeArray %6 %68 
                                      %70 = OpTypeStruct %7 %6 %69 
                                      %71 = OpTypePointer Output %70 
 Output struct {f32_4; f32; f32[1];}* %72 = OpVariable Output 
                                      %80 = OpTypePointer Output %7 
                                      %82 = OpTypeVector %6 2 
                                      %83 = OpTypePointer Output %82 
               Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                      %85 = OpTypePointer Input %82 
                         Input f32_2* %86 = OpVariable Input 
                                      %88 = OpTypePointer Output %6 
                                  void %4 = OpFunction None %3 
                                       %5 = OpLabel 
                                f32_4 %12 = OpLoad %11 
                                f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                       Uniform f32_4* %25 = OpAccessChain %20 %22 %23 
                                f32_4 %26 = OpLoad %25 
                                f32_4 %27 = OpFMul %13 %26 
                                              OpStore %9 %27 
                       Uniform f32_4* %28 = OpAccessChain %20 %22 %22 
                                f32_4 %29 = OpLoad %28 
                                f32_4 %30 = OpLoad %11 
                                f32_4 %31 = OpVectorShuffle %30 %30 0 0 0 0 
                                f32_4 %32 = OpFMul %29 %31 
                                f32_4 %33 = OpLoad %9 
                                f32_4 %34 = OpFAdd %32 %33 
                                              OpStore %9 %34 
                       Uniform f32_4* %36 = OpAccessChain %20 %22 %35 
                                f32_4 %37 = OpLoad %36 
                                f32_4 %38 = OpLoad %11 
                                f32_4 %39 = OpVectorShuffle %38 %38 2 2 2 2 
                                f32_4 %40 = OpFMul %37 %39 
                                f32_4 %41 = OpLoad %9 
                                f32_4 %42 = OpFAdd %40 %41 
                                              OpStore %9 %42 
                                f32_4 %43 = OpLoad %9 
                       Uniform f32_4* %45 = OpAccessChain %20 %22 %44 
                                f32_4 %46 = OpLoad %45 
                                f32_4 %47 = OpFAdd %43 %46 
                                              OpStore %9 %47 
                                f32_4 %49 = OpLoad %9 
                                f32_4 %50 = OpVectorShuffle %49 %49 1 1 1 1 
                       Uniform f32_4* %51 = OpAccessChain %20 %23 %23 
                                f32_4 %52 = OpLoad %51 
                                f32_4 %53 = OpFMul %50 %52 
                                              OpStore %48 %53 
                       Uniform f32_4* %54 = OpAccessChain %20 %23 %22 
                                f32_4 %55 = OpLoad %54 
                                f32_4 %56 = OpLoad %9 
                                f32_4 %57 = OpVectorShuffle %56 %56 0 0 0 0 
                                f32_4 %58 = OpFMul %55 %57 
                                f32_4 %59 = OpLoad %48 
                                f32_4 %60 = OpFAdd %58 %59 
                                              OpStore %48 %60 
                       Uniform f32_4* %61 = OpAccessChain %20 %23 %35 
                                f32_4 %62 = OpLoad %61 
                                f32_4 %63 = OpLoad %9 
                                f32_4 %64 = OpVectorShuffle %63 %63 2 2 2 2 
                                f32_4 %65 = OpFMul %62 %64 
                                f32_4 %66 = OpLoad %48 
                                f32_4 %67 = OpFAdd %65 %66 
                                              OpStore %48 %67 
                       Uniform f32_4* %73 = OpAccessChain %20 %23 %44 
                                f32_4 %74 = OpLoad %73 
                                f32_4 %75 = OpLoad %9 
                                f32_4 %76 = OpVectorShuffle %75 %75 3 3 3 3 
                                f32_4 %77 = OpFMul %74 %76 
                                f32_4 %78 = OpLoad %48 
                                f32_4 %79 = OpFAdd %77 %78 
                        Output f32_4* %81 = OpAccessChain %72 %22 
                                              OpStore %81 %79 
                                f32_2 %87 = OpLoad %86 
                                              OpStore vs_TEXCOORD0 %87 
                          Output f32* %89 = OpAccessChain %72 %22 %68 
                                  f32 %90 = OpLoad %89 
                                  f32 %91 = OpFNegate %90 
                          Output f32* %92 = OpAccessChain %72 %22 %68 
                                              OpStore %92 %91 
                                              OpReturn
                                              OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 292
; Schema: 0
                                                    OpCapability Shader 
                                             %1 = OpExtInstImport "GLSL.std.450" 
                                                    OpMemoryModel Logical GLSL450 
                                                    OpEntryPoint Fragment %4 "main" %12 %279 
                                                    OpExecutionMode %4 OriginUpperLeft 
                                                    OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                    OpDecorate vs_TEXCOORD0 Location 12 
                                                    OpMemberDecorate %14 0 Offset 14 
                                                    OpMemberDecorate %14 1 Offset 14 
                                                    OpMemberDecorate %14 2 Offset 14 
                                                    OpMemberDecorate %14 3 Offset 14 
                                                    OpDecorate %14 Block 
                                                    OpDecorate %16 DescriptorSet 16 
                                                    OpDecorate %16 Binding 16 
                                                    OpDecorate %32 DescriptorSet 32 
                                                    OpDecorate %32 Binding 32 
                                                    OpDecorate %36 DescriptorSet 36 
                                                    OpDecorate %36 Binding 36 
                                                    OpDecorate %279 Location 279 
                                             %2 = OpTypeVoid 
                                             %3 = OpTypeFunction %2 
                                             %6 = OpTypeFloat 32 
                                             %7 = OpTypeVector %6 4 
                                             %8 = OpTypePointer Private %7 
                              Private f32_4* %9 = OpVariable Private 
                                            %10 = OpTypeVector %6 2 
                                            %11 = OpTypePointer Input %10 
                      Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                            %14 = OpTypeStruct %7 %7 %7 %6 
                                            %15 = OpTypePointer Uniform %14 
Uniform struct {f32_4; f32_4; f32_4; f32;}* %16 = OpVariable Uniform 
                                            %17 = OpTypeInt 32 1 
                                        i32 %18 = OpConstant 0 
                                            %19 = OpTypePointer Uniform %7 
                                            %30 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                            %31 = OpTypePointer UniformConstant %30 
       UniformConstant read_only Texture2D* %32 = OpVariable UniformConstant 
                                            %34 = OpTypeSampler 
                                            %35 = OpTypePointer UniformConstant %34 
                   UniformConstant sampler* %36 = OpVariable UniformConstant 
                                            %38 = OpTypeSampledImage %30 
                                            %43 = OpTypeVector %6 3 
                                        i32 %46 = OpConstant 1 
                             Private f32_4* %60 = OpVariable Private 
                                        i32 %61 = OpConstant 2 
                                            %62 = OpTypeInt 32 0 
                                        u32 %63 = OpConstant 1 
                                            %64 = OpTypePointer Uniform %6 
                                        i32 %67 = OpConstant 3 
                                        u32 %71 = OpConstant 0 
                                            %72 = OpTypePointer Private %6 
                                        f32 %74 = OpConstant 3.674022E-40 
                                        f32 %76 = OpConstant 3.674022E-40 
                                        u32 %77 = OpConstant 2 
                             Private f32_4* %79 = OpVariable Private 
                                        f32 %80 = OpConstant 3.674022E-40 
                                      f32_4 %81 = OpConstantComposite %80 %74 %80 %76 
                                        f32 %88 = OpConstant 3.674022E-40 
                                        f32 %89 = OpConstant 3.674022E-40 
                                        f32 %90 = OpConstant 3.674022E-40 
                                      f32_4 %91 = OpConstantComposite %88 %89 %88 %90 
                            Private f32_4* %116 = OpVariable Private 
                                       f32 %146 = OpConstant 3.674022E-40 
                                     f32_3 %147 = OpConstantComposite %146 %146 %146 
                                       f32 %153 = OpConstant 3.674022E-40 
                                     f32_3 %154 = OpConstantComposite %153 %153 %153 
                                       f32 %213 = OpConstant 3.674022E-40 
                                     f32_3 %214 = OpConstantComposite %213 %213 %213 
                              Private f32* %252 = OpVariable Private 
                                       f32 %260 = OpConstant 3.674022E-40 
                                       f32 %268 = OpConstant 3.674022E-40 
                                       f32 %271 = OpConstant 3.674022E-40 
                                       f32 %276 = OpConstant 3.674022E-40 
                                           %278 = OpTypePointer Output %7 
                             Output f32_4* %279 = OpVariable Output 
                                       u32 %288 = OpConstant 3 
                                           %289 = OpTypePointer Output %6 
                                        void %4 = OpFunction None %3 
                                             %5 = OpLabel 
                                      f32_2 %13 = OpLoad vs_TEXCOORD0 
                             Uniform f32_4* %20 = OpAccessChain %16 %18 
                                      f32_4 %21 = OpLoad %20 
                                      f32_2 %22 = OpVectorShuffle %21 %21 0 1 
                                      f32_2 %23 = OpFMul %13 %22 
                             Uniform f32_4* %24 = OpAccessChain %16 %18 
                                      f32_4 %25 = OpLoad %24 
                                      f32_2 %26 = OpVectorShuffle %25 %25 2 3 
                                      f32_2 %27 = OpFAdd %23 %26 
                                      f32_4 %28 = OpLoad %9 
                                      f32_4 %29 = OpVectorShuffle %28 %27 4 5 2 3 
                                                    OpStore %9 %29 
                        read_only Texture2D %33 = OpLoad %32 
                                    sampler %37 = OpLoad %36 
                 read_only Texture2DSampled %39 = OpSampledImage %33 %37 
                                      f32_4 %40 = OpLoad %9 
                                      f32_2 %41 = OpVectorShuffle %40 %40 0 1 
                                      f32_4 %42 = OpImageSampleImplicitLod %39 %41 
                                                    OpStore %9 %42 
                                      f32_4 %44 = OpLoad %9 
                                      f32_3 %45 = OpVectorShuffle %44 %44 0 1 2 
                             Uniform f32_4* %47 = OpAccessChain %16 %46 
                                      f32_4 %48 = OpLoad %47 
                                      f32_3 %49 = OpVectorShuffle %48 %48 0 0 0 
                                      f32_3 %50 = OpFMul %45 %49 
                                      f32_4 %51 = OpLoad %9 
                                      f32_4 %52 = OpVectorShuffle %51 %50 4 5 6 3 
                                                    OpStore %9 %52 
                                      f32_4 %53 = OpLoad %9 
                                      f32_3 %54 = OpVectorShuffle %53 %53 3 3 3 
                                      f32_4 %55 = OpLoad %9 
                                      f32_3 %56 = OpVectorShuffle %55 %55 0 1 2 
                                      f32_3 %57 = OpFMul %54 %56 
                                      f32_4 %58 = OpLoad %9 
                                      f32_4 %59 = OpVectorShuffle %58 %57 4 5 6 3 
                                                    OpStore %9 %59 
                               Uniform f32* %65 = OpAccessChain %16 %61 %63 
                                        f32 %66 = OpLoad %65 
                               Uniform f32* %68 = OpAccessChain %16 %67 
                                        f32 %69 = OpLoad %68 
                                        f32 %70 = OpFMul %66 %69 
                               Private f32* %73 = OpAccessChain %60 %71 
                                                    OpStore %73 %70 
                               Private f32* %75 = OpAccessChain %60 %63 
                                                    OpStore %75 %74 
                               Private f32* %78 = OpAccessChain %60 %77 
                                                    OpStore %78 %76 
                                      f32_4 %82 = OpLoad %60 
                                      f32_4 %83 = OpVectorShuffle %82 %82 1 0 2 0 
                                      f32_4 %84 = OpFMul %81 %83 
                                      f32_2 %85 = OpLoad vs_TEXCOORD0 
                                      f32_4 %86 = OpVectorShuffle %85 %85 0 1 0 1 
                                      f32_4 %87 = OpFAdd %84 %86 
                                                    OpStore %79 %87 
                                      f32_4 %92 = OpLoad %60 
                                      f32_4 %93 = OpVectorShuffle %92 %92 1 0 2 0 
                                      f32_4 %94 = OpFMul %91 %93 
                                      f32_2 %95 = OpLoad vs_TEXCOORD0 
                                      f32_4 %96 = OpVectorShuffle %95 %95 0 1 0 1 
                                      f32_4 %97 = OpFAdd %94 %96 
                                                    OpStore %60 %97 
                                      f32_4 %98 = OpLoad %60 
                             Uniform f32_4* %99 = OpAccessChain %16 %18 
                                     f32_4 %100 = OpLoad %99 
                                     f32_4 %101 = OpVectorShuffle %100 %100 0 1 0 1 
                                     f32_4 %102 = OpFMul %98 %101 
                            Uniform f32_4* %103 = OpAccessChain %16 %18 
                                     f32_4 %104 = OpLoad %103 
                                     f32_4 %105 = OpVectorShuffle %104 %104 2 3 2 3 
                                     f32_4 %106 = OpFAdd %102 %105 
                                                    OpStore %60 %106 
                                     f32_4 %107 = OpLoad %79 
                            Uniform f32_4* %108 = OpAccessChain %16 %18 
                                     f32_4 %109 = OpLoad %108 
                                     f32_4 %110 = OpVectorShuffle %109 %109 0 1 0 1 
                                     f32_4 %111 = OpFMul %107 %110 
                            Uniform f32_4* %112 = OpAccessChain %16 %18 
                                     f32_4 %113 = OpLoad %112 
                                     f32_4 %114 = OpVectorShuffle %113 %113 2 3 2 3 
                                     f32_4 %115 = OpFAdd %111 %114 
                                                    OpStore %79 %115 
                       read_only Texture2D %117 = OpLoad %32 
                                   sampler %118 = OpLoad %36 
                read_only Texture2DSampled %119 = OpSampledImage %117 %118 
                                     f32_4 %120 = OpLoad %79 
                                     f32_2 %121 = OpVectorShuffle %120 %120 0 1 
                                     f32_4 %122 = OpImageSampleImplicitLod %119 %121 
                                                    OpStore %116 %122 
                       read_only Texture2D %123 = OpLoad %32 
                                   sampler %124 = OpLoad %36 
                read_only Texture2DSampled %125 = OpSampledImage %123 %124 
                                     f32_4 %126 = OpLoad %79 
                                     f32_2 %127 = OpVectorShuffle %126 %126 2 3 
                                     f32_4 %128 = OpImageSampleImplicitLod %125 %127 
                                                    OpStore %79 %128 
                                     f32_4 %129 = OpLoad %116 
                                     f32_3 %130 = OpVectorShuffle %129 %129 0 1 2 
                            Uniform f32_4* %131 = OpAccessChain %16 %46 
                                     f32_4 %132 = OpLoad %131 
                                     f32_3 %133 = OpVectorShuffle %132 %132 0 0 0 
                                     f32_3 %134 = OpFMul %130 %133 
                                     f32_4 %135 = OpLoad %116 
                                     f32_4 %136 = OpVectorShuffle %135 %134 4 5 6 3 
                                                    OpStore %116 %136 
                                     f32_4 %137 = OpLoad %116 
                                     f32_3 %138 = OpVectorShuffle %137 %137 3 3 3 
                                     f32_4 %139 = OpLoad %116 
                                     f32_3 %140 = OpVectorShuffle %139 %139 0 1 2 
                                     f32_3 %141 = OpFMul %138 %140 
                                     f32_4 %142 = OpLoad %116 
                                     f32_4 %143 = OpVectorShuffle %142 %141 4 5 6 3 
                                                    OpStore %116 %143 
                                     f32_4 %144 = OpLoad %116 
                                     f32_3 %145 = OpVectorShuffle %144 %144 0 1 2 
                                     f32_3 %148 = OpFMul %145 %147 
                                     f32_4 %149 = OpLoad %116 
                                     f32_4 %150 = OpVectorShuffle %149 %148 4 5 6 3 
                                                    OpStore %116 %150 
                                     f32_4 %151 = OpLoad %9 
                                     f32_3 %152 = OpVectorShuffle %151 %151 0 1 2 
                                     f32_3 %155 = OpFMul %152 %154 
                                     f32_4 %156 = OpLoad %116 
                                     f32_3 %157 = OpVectorShuffle %156 %156 0 1 2 
                                     f32_3 %158 = OpFAdd %155 %157 
                                     f32_4 %159 = OpLoad %9 
                                     f32_4 %160 = OpVectorShuffle %159 %158 4 5 6 3 
                                                    OpStore %9 %160 
                       read_only Texture2D %161 = OpLoad %32 
                                   sampler %162 = OpLoad %36 
                read_only Texture2DSampled %163 = OpSampledImage %161 %162 
                                     f32_4 %164 = OpLoad %60 
                                     f32_2 %165 = OpVectorShuffle %164 %164 0 1 
                                     f32_4 %166 = OpImageSampleImplicitLod %163 %165 
                                                    OpStore %116 %166 
                       read_only Texture2D %167 = OpLoad %32 
                                   sampler %168 = OpLoad %36 
                read_only Texture2DSampled %169 = OpSampledImage %167 %168 
                                     f32_4 %170 = OpLoad %60 
                                     f32_2 %171 = OpVectorShuffle %170 %170 2 3 
                                     f32_4 %172 = OpImageSampleImplicitLod %169 %171 
                                                    OpStore %60 %172 
                                     f32_4 %173 = OpLoad %116 
                                     f32_3 %174 = OpVectorShuffle %173 %173 0 1 2 
                            Uniform f32_4* %175 = OpAccessChain %16 %46 
                                     f32_4 %176 = OpLoad %175 
                                     f32_3 %177 = OpVectorShuffle %176 %176 0 0 0 
                                     f32_3 %178 = OpFMul %174 %177 
                                     f32_4 %179 = OpLoad %116 
                                     f32_4 %180 = OpVectorShuffle %179 %178 4 5 6 3 
                                                    OpStore %116 %180 
                                     f32_4 %181 = OpLoad %116 
                                     f32_3 %182 = OpVectorShuffle %181 %181 3 3 3 
                                     f32_4 %183 = OpLoad %116 
                                     f32_3 %184 = OpVectorShuffle %183 %183 0 1 2 
                                     f32_3 %185 = OpFMul %182 %184 
                                     f32_4 %186 = OpLoad %116 
                                     f32_4 %187 = OpVectorShuffle %186 %185 4 5 6 3 
                                                    OpStore %116 %187 
                                     f32_4 %188 = OpLoad %116 
                                     f32_3 %189 = OpVectorShuffle %188 %188 0 1 2 
                                     f32_3 %190 = OpFMul %189 %147 
                                     f32_4 %191 = OpLoad %9 
                                     f32_3 %192 = OpVectorShuffle %191 %191 0 1 2 
                                     f32_3 %193 = OpFAdd %190 %192 
                                     f32_4 %194 = OpLoad %9 
                                     f32_4 %195 = OpVectorShuffle %194 %193 4 5 6 3 
                                                    OpStore %9 %195 
                                     f32_4 %196 = OpLoad %79 
                                     f32_3 %197 = OpVectorShuffle %196 %196 0 1 2 
                            Uniform f32_4* %198 = OpAccessChain %16 %46 
                                     f32_4 %199 = OpLoad %198 
                                     f32_3 %200 = OpVectorShuffle %199 %199 0 0 0 
                                     f32_3 %201 = OpFMul %197 %200 
                                     f32_4 %202 = OpLoad %79 
                                     f32_4 %203 = OpVectorShuffle %202 %201 4 5 6 3 
                                                    OpStore %79 %203 
                                     f32_4 %204 = OpLoad %79 
                                     f32_3 %205 = OpVectorShuffle %204 %204 3 3 3 
                                     f32_4 %206 = OpLoad %79 
                                     f32_3 %207 = OpVectorShuffle %206 %206 0 1 2 
                                     f32_3 %208 = OpFMul %205 %207 
                                     f32_4 %209 = OpLoad %79 
                                     f32_4 %210 = OpVectorShuffle %209 %208 4 5 6 3 
                                                    OpStore %79 %210 
                                     f32_4 %211 = OpLoad %79 
                                     f32_3 %212 = OpVectorShuffle %211 %211 0 1 2 
                                     f32_3 %215 = OpFMul %212 %214 
                                     f32_4 %216 = OpLoad %9 
                                     f32_3 %217 = OpVectorShuffle %216 %216 0 1 2 
                                     f32_3 %218 = OpFAdd %215 %217 
                                     f32_4 %219 = OpLoad %9 
                                     f32_4 %220 = OpVectorShuffle %219 %218 4 5 6 3 
                                                    OpStore %9 %220 
                                     f32_4 %221 = OpLoad %60 
                                     f32_3 %222 = OpVectorShuffle %221 %221 0 1 2 
                            Uniform f32_4* %223 = OpAccessChain %16 %46 
                                     f32_4 %224 = OpLoad %223 
                                     f32_3 %225 = OpVectorShuffle %224 %224 0 0 0 
                                     f32_3 %226 = OpFMul %222 %225 
                                     f32_4 %227 = OpLoad %60 
                                     f32_4 %228 = OpVectorShuffle %227 %226 4 5 6 3 
                                                    OpStore %60 %228 
                                     f32_4 %229 = OpLoad %60 
                                     f32_3 %230 = OpVectorShuffle %229 %229 3 3 3 
                                     f32_4 %231 = OpLoad %60 
                                     f32_3 %232 = OpVectorShuffle %231 %231 0 1 2 
                                     f32_3 %233 = OpFMul %230 %232 
                                     f32_4 %234 = OpLoad %60 
                                     f32_4 %235 = OpVectorShuffle %234 %233 4 5 6 3 
                                                    OpStore %60 %235 
                                     f32_4 %236 = OpLoad %60 
                                     f32_3 %237 = OpVectorShuffle %236 %236 0 1 2 
                                     f32_3 %238 = OpFMul %237 %214 
                                     f32_4 %239 = OpLoad %9 
                                     f32_3 %240 = OpVectorShuffle %239 %239 0 1 2 
                                     f32_3 %241 = OpFAdd %238 %240 
                                     f32_4 %242 = OpLoad %9 
                                     f32_4 %243 = OpVectorShuffle %242 %241 4 5 6 3 
                                                    OpStore %9 %243 
                                     f32_4 %244 = OpLoad %9 
                                     f32_3 %245 = OpVectorShuffle %244 %244 0 1 2 
                            Uniform f32_4* %246 = OpAccessChain %16 %46 
                                     f32_4 %247 = OpLoad %246 
                                     f32_3 %248 = OpVectorShuffle %247 %247 1 1 1 
                                     f32_3 %249 = OpFMul %245 %248 
                                     f32_4 %250 = OpLoad %9 
                                     f32_4 %251 = OpVectorShuffle %250 %249 4 5 6 3 
                                                    OpStore %9 %251 
                              Private f32* %253 = OpAccessChain %9 %63 
                                       f32 %254 = OpLoad %253 
                              Private f32* %255 = OpAccessChain %9 %71 
                                       f32 %256 = OpLoad %255 
                                       f32 %257 = OpExtInst %1 40 %254 %256 
                                                    OpStore %252 %257 
                              Private f32* %258 = OpAccessChain %9 %77 
                                       f32 %259 = OpLoad %258 
                                       f32 %261 = OpExtInst %1 40 %259 %260 
                              Private f32* %262 = OpAccessChain %60 %71 
                                                    OpStore %262 %261 
                                       f32 %263 = OpLoad %252 
                              Private f32* %264 = OpAccessChain %60 %71 
                                       f32 %265 = OpLoad %264 
                                       f32 %266 = OpExtInst %1 40 %263 %265 
                                                    OpStore %252 %266 
                                       f32 %267 = OpLoad %252 
                                       f32 %269 = OpExtInst %1 37 %267 %268 
                                                    OpStore %252 %269 
                                       f32 %270 = OpLoad %252 
                                       f32 %272 = OpFMul %270 %271 
                                                    OpStore %252 %272 
                                       f32 %273 = OpLoad %252 
                                       f32 %274 = OpExtInst %1 9 %273 
                                                    OpStore %252 %274 
                                       f32 %275 = OpLoad %252 
                                       f32 %277 = OpFMul %275 %276 
                                                    OpStore %252 %277 
                                     f32_4 %280 = OpLoad %9 
                                     f32_3 %281 = OpVectorShuffle %280 %280 0 1 2 
                                       f32 %282 = OpLoad %252 
                                     f32_3 %283 = OpCompositeConstruct %282 %282 %282 
                                     f32_3 %284 = OpFDiv %281 %283 
                                     f32_4 %285 = OpLoad %279 
                                     f32_4 %286 = OpVectorShuffle %285 %284 4 5 6 3 
                                                    OpStore %279 %286 
                                       f32 %287 = OpLoad %252 
                               Output f32* %290 = OpAccessChain %279 %288 
                                                    OpStore %290 %287 
                                                    OpReturn
                                                    OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "AB_HIGH_PRECISION" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "AB_HIGH_PRECISION" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in  vec4 in_POSITION0;
in  vec2 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _MainTex_TexelSize;
uniform 	float _BlurRadius;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
in  vec2 vs_TEXCOORD0;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0 = texture(_MainTex, u_xlat0.xy);
    u_xlat1.x = _MainTex_TexelSize.y * _BlurRadius;
    u_xlat1.y = float(1.38461542);
    u_xlat1.z = float(3.23076916);
    u_xlat2 = vec4(0.0, 1.38461542, 0.0, 3.23076916) * u_xlat1.yxzx + vs_TEXCOORD0.xyxy;
    u_xlat1 = vec4(-0.0, -1.38461542, -0.0, -3.23076916) * u_xlat1.yxzx + vs_TEXCOORD0.xyxy;
    u_xlat1 = u_xlat1 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
    u_xlat2 = u_xlat2 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
    u_xlat3 = texture(_MainTex, u_xlat2.xy);
    u_xlat2 = texture(_MainTex, u_xlat2.zw);
    u_xlat3.xyz = u_xlat3.xyz * vec3(0.31621623, 0.31621623, 0.31621623);
    u_xlat0.xyz = u_xlat0.xyz * vec3(0.227027029, 0.227027029, 0.227027029) + u_xlat3.xyz;
    u_xlat3 = texture(_MainTex, u_xlat1.xy);
    u_xlat1 = texture(_MainTex, u_xlat1.zw);
    u_xlat0.xyz = u_xlat3.xyz * vec3(0.31621623, 0.31621623, 0.31621623) + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat2.xyz * vec3(0.0702702701, 0.0702702701, 0.0702702701) + u_xlat0.xyz;
    SV_Target0.xyz = u_xlat1.xyz * vec3(0.0702702701, 0.0702702701, 0.0702702701) + u_xlat0.xyz;
    SV_Target0.w = 0.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "AB_HIGH_PRECISION" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 94
; Schema: 0
                                              OpCapability Shader 
                                       %1 = OpExtInstImport "GLSL.std.450" 
                                              OpMemoryModel Logical GLSL450 
                                              OpEntryPoint Vertex %4 "main" %11 %72 %84 %86 
                                              OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                              OpDecorate %11 Location 11 
                                              OpDecorate %16 ArrayStride 16 
                                              OpDecorate %17 ArrayStride 17 
                                              OpMemberDecorate %18 0 Offset 18 
                                              OpMemberDecorate %18 1 Offset 18 
                                              OpDecorate %18 Block 
                                              OpDecorate %20 DescriptorSet 20 
                                              OpDecorate %20 Binding 20 
                                              OpMemberDecorate %70 0 BuiltIn 70 
                                              OpMemberDecorate %70 1 BuiltIn 70 
                                              OpMemberDecorate %70 2 BuiltIn 70 
                                              OpDecorate %70 Block 
                                              OpDecorate vs_TEXCOORD0 Location 84 
                                              OpDecorate %86 Location 86 
                                       %2 = OpTypeVoid 
                                       %3 = OpTypeFunction %2 
                                       %6 = OpTypeFloat 32 
                                       %7 = OpTypeVector %6 4 
                                       %8 = OpTypePointer Private %7 
                        Private f32_4* %9 = OpVariable Private 
                                      %10 = OpTypePointer Input %7 
                         Input f32_4* %11 = OpVariable Input 
                                      %14 = OpTypeInt 32 0 
                                  u32 %15 = OpConstant 4 
                                      %16 = OpTypeArray %7 %15 
                                      %17 = OpTypeArray %7 %15 
                                      %18 = OpTypeStruct %16 %17 
                                      %19 = OpTypePointer Uniform %18 
Uniform struct {f32_4[4]; f32_4[4];}* %20 = OpVariable Uniform 
                                      %21 = OpTypeInt 32 1 
                                  i32 %22 = OpConstant 0 
                                  i32 %23 = OpConstant 1 
                                      %24 = OpTypePointer Uniform %7 
                                  i32 %35 = OpConstant 2 
                                  i32 %44 = OpConstant 3 
                       Private f32_4* %48 = OpVariable Private 
                                  u32 %68 = OpConstant 1 
                                      %69 = OpTypeArray %6 %68 
                                      %70 = OpTypeStruct %7 %6 %69 
                                      %71 = OpTypePointer Output %70 
 Output struct {f32_4; f32; f32[1];}* %72 = OpVariable Output 
                                      %80 = OpTypePointer Output %7 
                                      %82 = OpTypeVector %6 2 
                                      %83 = OpTypePointer Output %82 
               Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                      %85 = OpTypePointer Input %82 
                         Input f32_2* %86 = OpVariable Input 
                                      %88 = OpTypePointer Output %6 
                                  void %4 = OpFunction None %3 
                                       %5 = OpLabel 
                                f32_4 %12 = OpLoad %11 
                                f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                       Uniform f32_4* %25 = OpAccessChain %20 %22 %23 
                                f32_4 %26 = OpLoad %25 
                                f32_4 %27 = OpFMul %13 %26 
                                              OpStore %9 %27 
                       Uniform f32_4* %28 = OpAccessChain %20 %22 %22 
                                f32_4 %29 = OpLoad %28 
                                f32_4 %30 = OpLoad %11 
                                f32_4 %31 = OpVectorShuffle %30 %30 0 0 0 0 
                                f32_4 %32 = OpFMul %29 %31 
                                f32_4 %33 = OpLoad %9 
                                f32_4 %34 = OpFAdd %32 %33 
                                              OpStore %9 %34 
                       Uniform f32_4* %36 = OpAccessChain %20 %22 %35 
                                f32_4 %37 = OpLoad %36 
                                f32_4 %38 = OpLoad %11 
                                f32_4 %39 = OpVectorShuffle %38 %38 2 2 2 2 
                                f32_4 %40 = OpFMul %37 %39 
                                f32_4 %41 = OpLoad %9 
                                f32_4 %42 = OpFAdd %40 %41 
                                              OpStore %9 %42 
                                f32_4 %43 = OpLoad %9 
                       Uniform f32_4* %45 = OpAccessChain %20 %22 %44 
                                f32_4 %46 = OpLoad %45 
                                f32_4 %47 = OpFAdd %43 %46 
                                              OpStore %9 %47 
                                f32_4 %49 = OpLoad %9 
                                f32_4 %50 = OpVectorShuffle %49 %49 1 1 1 1 
                       Uniform f32_4* %51 = OpAccessChain %20 %23 %23 
                                f32_4 %52 = OpLoad %51 
                                f32_4 %53 = OpFMul %50 %52 
                                              OpStore %48 %53 
                       Uniform f32_4* %54 = OpAccessChain %20 %23 %22 
                                f32_4 %55 = OpLoad %54 
                                f32_4 %56 = OpLoad %9 
                                f32_4 %57 = OpVectorShuffle %56 %56 0 0 0 0 
                                f32_4 %58 = OpFMul %55 %57 
                                f32_4 %59 = OpLoad %48 
                                f32_4 %60 = OpFAdd %58 %59 
                                              OpStore %48 %60 
                       Uniform f32_4* %61 = OpAccessChain %20 %23 %35 
                                f32_4 %62 = OpLoad %61 
                                f32_4 %63 = OpLoad %9 
                                f32_4 %64 = OpVectorShuffle %63 %63 2 2 2 2 
                                f32_4 %65 = OpFMul %62 %64 
                                f32_4 %66 = OpLoad %48 
                                f32_4 %67 = OpFAdd %65 %66 
                                              OpStore %48 %67 
                       Uniform f32_4* %73 = OpAccessChain %20 %23 %44 
                                f32_4 %74 = OpLoad %73 
                                f32_4 %75 = OpLoad %9 
                                f32_4 %76 = OpVectorShuffle %75 %75 3 3 3 3 
                                f32_4 %77 = OpFMul %74 %76 
                                f32_4 %78 = OpLoad %48 
                                f32_4 %79 = OpFAdd %77 %78 
                        Output f32_4* %81 = OpAccessChain %72 %22 
                                              OpStore %81 %79 
                                f32_2 %87 = OpLoad %86 
                                              OpStore vs_TEXCOORD0 %87 
                          Output f32* %89 = OpAccessChain %72 %22 %68 
                                  f32 %90 = OpLoad %89 
                                  f32 %91 = OpFNegate %90 
                          Output f32* %92 = OpAccessChain %72 %22 %68 
                                              OpStore %92 %91 
                                              OpReturn
                                              OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 169
; Schema: 0
                                             OpCapability Shader 
                                      %1 = OpExtInstImport "GLSL.std.450" 
                                             OpMemoryModel Logical GLSL450 
                                             OpEntryPoint Fragment %4 "main" %12 %157 
                                             OpExecutionMode %4 OriginUpperLeft 
                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                             OpDecorate vs_TEXCOORD0 Location 12 
                                             OpMemberDecorate %15 0 Offset 15 
                                             OpMemberDecorate %15 1 Offset 15 
                                             OpMemberDecorate %15 2 Offset 15 
                                             OpDecorate %15 Block 
                                             OpDecorate %17 DescriptorSet 17 
                                             OpDecorate %17 Binding 17 
                                             OpDecorate %33 DescriptorSet 33 
                                             OpDecorate %33 Binding 33 
                                             OpDecorate %37 DescriptorSet 37 
                                             OpDecorate %37 Binding 37 
                                             OpDecorate %157 Location 157 
                                      %2 = OpTypeVoid 
                                      %3 = OpTypeFunction %2 
                                      %6 = OpTypeFloat 32 
                                      %7 = OpTypeVector %6 3 
                                      %8 = OpTypePointer Private %7 
                       Private f32_3* %9 = OpVariable Private 
                                     %10 = OpTypeVector %6 2 
                                     %11 = OpTypePointer Input %10 
               Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                     %14 = OpTypeVector %6 4 
                                     %15 = OpTypeStruct %14 %14 %6 
                                     %16 = OpTypePointer Uniform %15 
Uniform struct {f32_4; f32_4; f32;}* %17 = OpVariable Uniform 
                                     %18 = OpTypeInt 32 1 
                                 i32 %19 = OpConstant 0 
                                     %20 = OpTypePointer Uniform %14 
                                     %31 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                     %32 = OpTypePointer UniformConstant %31 
UniformConstant read_only Texture2D* %33 = OpVariable UniformConstant 
                                     %35 = OpTypeSampler 
                                     %36 = OpTypePointer UniformConstant %35 
            UniformConstant sampler* %37 = OpVariable UniformConstant 
                                     %39 = OpTypeSampledImage %31 
                                     %45 = OpTypePointer Private %14 
                      Private f32_4* %46 = OpVariable Private 
                                 i32 %47 = OpConstant 1 
                                     %48 = OpTypeInt 32 0 
                                 u32 %49 = OpConstant 1 
                                     %50 = OpTypePointer Uniform %6 
                                 i32 %53 = OpConstant 2 
                                 u32 %57 = OpConstant 0 
                                     %58 = OpTypePointer Private %6 
                                 f32 %60 = OpConstant 3.674022E-40 
                                 f32 %62 = OpConstant 3.674022E-40 
                                 u32 %63 = OpConstant 2 
                      Private f32_4* %65 = OpVariable Private 
                                 f32 %66 = OpConstant 3.674022E-40 
                               f32_4 %67 = OpConstantComposite %66 %60 %66 %62 
                                 f32 %74 = OpConstant 3.674022E-40 
                                 f32 %75 = OpConstant 3.674022E-40 
                                 f32 %76 = OpConstant 3.674022E-40 
                               f32_4 %77 = OpConstantComposite %74 %75 %74 %76 
                     Private f32_3* %102 = OpVariable Private 
                                f32 %120 = OpConstant 3.674022E-40 
                              f32_3 %121 = OpConstantComposite %120 %120 %120 
                                f32 %124 = OpConstant 3.674022E-40 
                              f32_3 %125 = OpConstantComposite %124 %124 %124 
                                f32 %151 = OpConstant 3.674022E-40 
                              f32_3 %152 = OpConstantComposite %151 %151 %151 
                                    %156 = OpTypePointer Output %14 
                      Output f32_4* %157 = OpVariable Output 
                                u32 %165 = OpConstant 3 
                                    %166 = OpTypePointer Output %6 
                                 void %4 = OpFunction None %3 
                                      %5 = OpLabel 
                               f32_2 %13 = OpLoad vs_TEXCOORD0 
                      Uniform f32_4* %21 = OpAccessChain %17 %19 
                               f32_4 %22 = OpLoad %21 
                               f32_2 %23 = OpVectorShuffle %22 %22 0 1 
                               f32_2 %24 = OpFMul %13 %23 
                      Uniform f32_4* %25 = OpAccessChain %17 %19 
                               f32_4 %26 = OpLoad %25 
                               f32_2 %27 = OpVectorShuffle %26 %26 2 3 
                               f32_2 %28 = OpFAdd %24 %27 
                               f32_3 %29 = OpLoad %9 
                               f32_3 %30 = OpVectorShuffle %29 %28 3 4 2 
                                             OpStore %9 %30 
                 read_only Texture2D %34 = OpLoad %33 
                             sampler %38 = OpLoad %37 
          read_only Texture2DSampled %40 = OpSampledImage %34 %38 
                               f32_3 %41 = OpLoad %9 
                               f32_2 %42 = OpVectorShuffle %41 %41 0 1 
                               f32_4 %43 = OpImageSampleImplicitLod %40 %42 
                               f32_3 %44 = OpVectorShuffle %43 %43 0 1 2 
                                             OpStore %9 %44 
                        Uniform f32* %51 = OpAccessChain %17 %47 %49 
                                 f32 %52 = OpLoad %51 
                        Uniform f32* %54 = OpAccessChain %17 %53 
                                 f32 %55 = OpLoad %54 
                                 f32 %56 = OpFMul %52 %55 
                        Private f32* %59 = OpAccessChain %46 %57 
                                             OpStore %59 %56 
                        Private f32* %61 = OpAccessChain %46 %49 
                                             OpStore %61 %60 
                        Private f32* %64 = OpAccessChain %46 %63 
                                             OpStore %64 %62 
                               f32_4 %68 = OpLoad %46 
                               f32_4 %69 = OpVectorShuffle %68 %68 1 0 2 0 
                               f32_4 %70 = OpFMul %67 %69 
                               f32_2 %71 = OpLoad vs_TEXCOORD0 
                               f32_4 %72 = OpVectorShuffle %71 %71 0 1 0 1 
                               f32_4 %73 = OpFAdd %70 %72 
                                             OpStore %65 %73 
                               f32_4 %78 = OpLoad %46 
                               f32_4 %79 = OpVectorShuffle %78 %78 1 0 2 0 
                               f32_4 %80 = OpFMul %77 %79 
                               f32_2 %81 = OpLoad vs_TEXCOORD0 
                               f32_4 %82 = OpVectorShuffle %81 %81 0 1 0 1 
                               f32_4 %83 = OpFAdd %80 %82 
                                             OpStore %46 %83 
                               f32_4 %84 = OpLoad %46 
                      Uniform f32_4* %85 = OpAccessChain %17 %19 
                               f32_4 %86 = OpLoad %85 
                               f32_4 %87 = OpVectorShuffle %86 %86 0 1 0 1 
                               f32_4 %88 = OpFMul %84 %87 
                      Uniform f32_4* %89 = OpAccessChain %17 %19 
                               f32_4 %90 = OpLoad %89 
                               f32_4 %91 = OpVectorShuffle %90 %90 2 3 2 3 
                               f32_4 %92 = OpFAdd %88 %91 
                                             OpStore %46 %92 
                               f32_4 %93 = OpLoad %65 
                      Uniform f32_4* %94 = OpAccessChain %17 %19 
                               f32_4 %95 = OpLoad %94 
                               f32_4 %96 = OpVectorShuffle %95 %95 0 1 0 1 
                               f32_4 %97 = OpFMul %93 %96 
                      Uniform f32_4* %98 = OpAccessChain %17 %19 
                               f32_4 %99 = OpLoad %98 
                              f32_4 %100 = OpVectorShuffle %99 %99 2 3 2 3 
                              f32_4 %101 = OpFAdd %97 %100 
                                             OpStore %65 %101 
                read_only Texture2D %103 = OpLoad %33 
                            sampler %104 = OpLoad %37 
         read_only Texture2DSampled %105 = OpSampledImage %103 %104 
                              f32_4 %106 = OpLoad %65 
                              f32_2 %107 = OpVectorShuffle %106 %106 0 1 
                              f32_4 %108 = OpImageSampleImplicitLod %105 %107 
                              f32_3 %109 = OpVectorShuffle %108 %108 0 1 2 
                                             OpStore %102 %109 
                read_only Texture2D %110 = OpLoad %33 
                            sampler %111 = OpLoad %37 
         read_only Texture2DSampled %112 = OpSampledImage %110 %111 
                              f32_4 %113 = OpLoad %65 
                              f32_2 %114 = OpVectorShuffle %113 %113 2 3 
                              f32_4 %115 = OpImageSampleImplicitLod %112 %114 
                              f32_3 %116 = OpVectorShuffle %115 %115 0 1 2 
                              f32_4 %117 = OpLoad %65 
                              f32_4 %118 = OpVectorShuffle %117 %116 4 5 6 3 
                                             OpStore %65 %118 
                              f32_3 %119 = OpLoad %102 
                              f32_3 %122 = OpFMul %119 %121 
                                             OpStore %102 %122 
                              f32_3 %123 = OpLoad %9 
                              f32_3 %126 = OpFMul %123 %125 
                              f32_3 %127 = OpLoad %102 
                              f32_3 %128 = OpFAdd %126 %127 
                                             OpStore %9 %128 
                read_only Texture2D %129 = OpLoad %33 
                            sampler %130 = OpLoad %37 
         read_only Texture2DSampled %131 = OpSampledImage %129 %130 
                              f32_4 %132 = OpLoad %46 
                              f32_2 %133 = OpVectorShuffle %132 %132 0 1 
                              f32_4 %134 = OpImageSampleImplicitLod %131 %133 
                              f32_3 %135 = OpVectorShuffle %134 %134 0 1 2 
                                             OpStore %102 %135 
                read_only Texture2D %136 = OpLoad %33 
                            sampler %137 = OpLoad %37 
         read_only Texture2DSampled %138 = OpSampledImage %136 %137 
                              f32_4 %139 = OpLoad %46 
                              f32_2 %140 = OpVectorShuffle %139 %139 2 3 
                              f32_4 %141 = OpImageSampleImplicitLod %138 %140 
                              f32_3 %142 = OpVectorShuffle %141 %141 0 1 2 
                              f32_4 %143 = OpLoad %46 
                              f32_4 %144 = OpVectorShuffle %143 %142 4 5 6 3 
                                             OpStore %46 %144 
                              f32_3 %145 = OpLoad %102 
                              f32_3 %146 = OpFMul %145 %121 
                              f32_3 %147 = OpLoad %9 
                              f32_3 %148 = OpFAdd %146 %147 
                                             OpStore %9 %148 
                              f32_4 %149 = OpLoad %65 
                              f32_3 %150 = OpVectorShuffle %149 %149 0 1 2 
                              f32_3 %153 = OpFMul %150 %152 
                              f32_3 %154 = OpLoad %9 
                              f32_3 %155 = OpFAdd %153 %154 
                                             OpStore %9 %155 
                              f32_4 %158 = OpLoad %46 
                              f32_3 %159 = OpVectorShuffle %158 %158 0 1 2 
                              f32_3 %160 = OpFMul %159 %152 
                              f32_3 %161 = OpLoad %9 
                              f32_3 %162 = OpFAdd %160 %161 
                              f32_4 %163 = OpLoad %157 
                              f32_4 %164 = OpVectorShuffle %163 %162 4 5 6 3 
                                             OpStore %157 %164 
                        Output f32* %167 = OpAccessChain %157 %165 
                                             OpStore %167 %66 
                                             OpReturn
                                             OpFunctionEnd
"
}
}
Program "fp" {
SubProgram "d3d11 " {
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
""
}
SubProgram "vulkan " {
""
}
SubProgram "d3d11 " {
Keywords { "AB_HIGH_PRECISION" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "AB_HIGH_PRECISION" }
""
}
SubProgram "vulkan " {
Keywords { "AB_HIGH_PRECISION" }
""
}
}
}
 Pass {
  Name "frag_vertical_gaussian_blur_temp_filter"
  ZTest Always
  ZWrite Off
  Cull Off
  GpuProgramID 1075355
Program "vp" {
SubProgram "d3d11 " {
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in  vec4 in_POSITION0;
in  vec2 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BloomRange;
uniform 	vec4 _MainTex_TexelSize;
uniform 	float _BlurRadius;
uniform 	float _TempFilterValue;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
UNITY_LOCATION(1) uniform  sampler2D _AnamorphicRTS0;
in  vec2 vs_TEXCOORD0;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
float u_xlat16;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1 = texture(_MainTex, u_xlat0.xy);
    u_xlat0 = texture(_AnamorphicRTS0, u_xlat0.xy);
    u_xlat1.xyz = u_xlat1.xyz * _BloomRange.xxx;
    u_xlat1.xyz = u_xlat1.www * u_xlat1.xyz;
    u_xlat2.x = _MainTex_TexelSize.y * _BlurRadius;
    u_xlat2.y = float(1.38461542);
    u_xlat2.z = float(3.23076916);
    u_xlat3 = vec4(0.0, 1.38461542, 0.0, 3.23076916) * u_xlat2.yxzx + vs_TEXCOORD0.xyxy;
    u_xlat2 = vec4(-0.0, -1.38461542, -0.0, -3.23076916) * u_xlat2.yxzx + vs_TEXCOORD0.xyxy;
    u_xlat2 = u_xlat2 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
    u_xlat3 = u_xlat3 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
    u_xlat4 = texture(_MainTex, u_xlat3.xy);
    u_xlat3 = texture(_MainTex, u_xlat3.zw);
    u_xlat4.xyz = u_xlat4.xyz * _BloomRange.xxx;
    u_xlat4.xyz = u_xlat4.www * u_xlat4.xyz;
    u_xlat4.xyz = u_xlat4.xyz * vec3(0.31621623, 0.31621623, 0.31621623);
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.227027029, 0.227027029, 0.227027029) + u_xlat4.xyz;
    u_xlat4 = texture(_MainTex, u_xlat2.xy);
    u_xlat2 = texture(_MainTex, u_xlat2.zw);
    u_xlat4.xyz = u_xlat4.xyz * _BloomRange.xxx;
    u_xlat4.xyz = u_xlat4.www * u_xlat4.xyz;
    u_xlat1.xyz = u_xlat4.xyz * vec3(0.31621623, 0.31621623, 0.31621623) + u_xlat1.xyz;
    u_xlat3.xyz = u_xlat3.xyz * _BloomRange.xxx;
    u_xlat3.xyz = u_xlat3.www * u_xlat3.xyz;
    u_xlat1.xyz = u_xlat3.xyz * vec3(0.0702702701, 0.0702702701, 0.0702702701) + u_xlat1.xyz;
    u_xlat2.xyz = u_xlat2.xyz * _BloomRange.xxx;
    u_xlat2.xyz = u_xlat2.www * u_xlat2.xyz;
    u_xlat1.xyz = u_xlat2.xyz * vec3(0.0702702701, 0.0702702701, 0.0702702701) + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _BloomRange.yyy;
    u_xlat16 = max(u_xlat1.y, u_xlat1.x);
    u_xlat2.x = max(u_xlat1.z, 9.99999997e-07);
    u_xlat16 = max(u_xlat16, u_xlat2.x);
    u_xlat16 = min(u_xlat16, 1.0);
    u_xlat16 = u_xlat16 * 255.0;
    u_xlat16 = ceil(u_xlat16);
    u_xlat2.w = u_xlat16 * 0.00392156886;
    u_xlat2.xyz = u_xlat1.xyz / u_xlat2.www;
    u_xlat0 = u_xlat0 + (-u_xlat2);
    SV_Target0 = vec4(_TempFilterValue) * u_xlat0 + u_xlat2;
    return;
}

#endif
"
}
SubProgram "vulkan " {
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 94
; Schema: 0
                                              OpCapability Shader 
                                       %1 = OpExtInstImport "GLSL.std.450" 
                                              OpMemoryModel Logical GLSL450 
                                              OpEntryPoint Vertex %4 "main" %11 %72 %84 %86 
                                              OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                              OpDecorate %11 Location 11 
                                              OpDecorate %16 ArrayStride 16 
                                              OpDecorate %17 ArrayStride 17 
                                              OpMemberDecorate %18 0 Offset 18 
                                              OpMemberDecorate %18 1 Offset 18 
                                              OpDecorate %18 Block 
                                              OpDecorate %20 DescriptorSet 20 
                                              OpDecorate %20 Binding 20 
                                              OpMemberDecorate %70 0 BuiltIn 70 
                                              OpMemberDecorate %70 1 BuiltIn 70 
                                              OpMemberDecorate %70 2 BuiltIn 70 
                                              OpDecorate %70 Block 
                                              OpDecorate vs_TEXCOORD0 Location 84 
                                              OpDecorate %86 Location 86 
                                       %2 = OpTypeVoid 
                                       %3 = OpTypeFunction %2 
                                       %6 = OpTypeFloat 32 
                                       %7 = OpTypeVector %6 4 
                                       %8 = OpTypePointer Private %7 
                        Private f32_4* %9 = OpVariable Private 
                                      %10 = OpTypePointer Input %7 
                         Input f32_4* %11 = OpVariable Input 
                                      %14 = OpTypeInt 32 0 
                                  u32 %15 = OpConstant 4 
                                      %16 = OpTypeArray %7 %15 
                                      %17 = OpTypeArray %7 %15 
                                      %18 = OpTypeStruct %16 %17 
                                      %19 = OpTypePointer Uniform %18 
Uniform struct {f32_4[4]; f32_4[4];}* %20 = OpVariable Uniform 
                                      %21 = OpTypeInt 32 1 
                                  i32 %22 = OpConstant 0 
                                  i32 %23 = OpConstant 1 
                                      %24 = OpTypePointer Uniform %7 
                                  i32 %35 = OpConstant 2 
                                  i32 %44 = OpConstant 3 
                       Private f32_4* %48 = OpVariable Private 
                                  u32 %68 = OpConstant 1 
                                      %69 = OpTypeArray %6 %68 
                                      %70 = OpTypeStruct %7 %6 %69 
                                      %71 = OpTypePointer Output %70 
 Output struct {f32_4; f32; f32[1];}* %72 = OpVariable Output 
                                      %80 = OpTypePointer Output %7 
                                      %82 = OpTypeVector %6 2 
                                      %83 = OpTypePointer Output %82 
               Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                      %85 = OpTypePointer Input %82 
                         Input f32_2* %86 = OpVariable Input 
                                      %88 = OpTypePointer Output %6 
                                  void %4 = OpFunction None %3 
                                       %5 = OpLabel 
                                f32_4 %12 = OpLoad %11 
                                f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                       Uniform f32_4* %25 = OpAccessChain %20 %22 %23 
                                f32_4 %26 = OpLoad %25 
                                f32_4 %27 = OpFMul %13 %26 
                                              OpStore %9 %27 
                       Uniform f32_4* %28 = OpAccessChain %20 %22 %22 
                                f32_4 %29 = OpLoad %28 
                                f32_4 %30 = OpLoad %11 
                                f32_4 %31 = OpVectorShuffle %30 %30 0 0 0 0 
                                f32_4 %32 = OpFMul %29 %31 
                                f32_4 %33 = OpLoad %9 
                                f32_4 %34 = OpFAdd %32 %33 
                                              OpStore %9 %34 
                       Uniform f32_4* %36 = OpAccessChain %20 %22 %35 
                                f32_4 %37 = OpLoad %36 
                                f32_4 %38 = OpLoad %11 
                                f32_4 %39 = OpVectorShuffle %38 %38 2 2 2 2 
                                f32_4 %40 = OpFMul %37 %39 
                                f32_4 %41 = OpLoad %9 
                                f32_4 %42 = OpFAdd %40 %41 
                                              OpStore %9 %42 
                                f32_4 %43 = OpLoad %9 
                       Uniform f32_4* %45 = OpAccessChain %20 %22 %44 
                                f32_4 %46 = OpLoad %45 
                                f32_4 %47 = OpFAdd %43 %46 
                                              OpStore %9 %47 
                                f32_4 %49 = OpLoad %9 
                                f32_4 %50 = OpVectorShuffle %49 %49 1 1 1 1 
                       Uniform f32_4* %51 = OpAccessChain %20 %23 %23 
                                f32_4 %52 = OpLoad %51 
                                f32_4 %53 = OpFMul %50 %52 
                                              OpStore %48 %53 
                       Uniform f32_4* %54 = OpAccessChain %20 %23 %22 
                                f32_4 %55 = OpLoad %54 
                                f32_4 %56 = OpLoad %9 
                                f32_4 %57 = OpVectorShuffle %56 %56 0 0 0 0 
                                f32_4 %58 = OpFMul %55 %57 
                                f32_4 %59 = OpLoad %48 
                                f32_4 %60 = OpFAdd %58 %59 
                                              OpStore %48 %60 
                       Uniform f32_4* %61 = OpAccessChain %20 %23 %35 
                                f32_4 %62 = OpLoad %61 
                                f32_4 %63 = OpLoad %9 
                                f32_4 %64 = OpVectorShuffle %63 %63 2 2 2 2 
                                f32_4 %65 = OpFMul %62 %64 
                                f32_4 %66 = OpLoad %48 
                                f32_4 %67 = OpFAdd %65 %66 
                                              OpStore %48 %67 
                       Uniform f32_4* %73 = OpAccessChain %20 %23 %44 
                                f32_4 %74 = OpLoad %73 
                                f32_4 %75 = OpLoad %9 
                                f32_4 %76 = OpVectorShuffle %75 %75 3 3 3 3 
                                f32_4 %77 = OpFMul %74 %76 
                                f32_4 %78 = OpLoad %48 
                                f32_4 %79 = OpFAdd %77 %78 
                        Output f32_4* %81 = OpAccessChain %72 %22 
                                              OpStore %81 %79 
                                f32_2 %87 = OpLoad %86 
                                              OpStore vs_TEXCOORD0 %87 
                          Output f32* %89 = OpAccessChain %72 %22 %68 
                                  f32 %90 = OpLoad %89 
                                  f32 %91 = OpFNegate %90 
                          Output f32* %92 = OpAccessChain %72 %22 %68 
                                              OpStore %92 %91 
                                              OpReturn
                                              OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 311
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %12 %301 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpDecorate vs_TEXCOORD0 Location 12 
                                                      OpMemberDecorate %14 0 Offset 14 
                                                      OpMemberDecorate %14 1 Offset 14 
                                                      OpMemberDecorate %14 2 Offset 14 
                                                      OpMemberDecorate %14 3 Offset 14 
                                                      OpMemberDecorate %14 4 Offset 14 
                                                      OpDecorate %14 Block 
                                                      OpDecorate %16 DescriptorSet 16 
                                                      OpDecorate %16 Binding 16 
                                                      OpDecorate %33 DescriptorSet 33 
                                                      OpDecorate %33 Binding 33 
                                                      OpDecorate %37 DescriptorSet 37 
                                                      OpDecorate %37 Binding 37 
                                                      OpDecorate %44 DescriptorSet 44 
                                                      OpDecorate %44 Binding 44 
                                                      OpDecorate %46 DescriptorSet 46 
                                                      OpDecorate %46 Binding 46 
                                                      OpDecorate %301 Location 301 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 2 
                                              %11 = OpTypePointer Input %10 
                        Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                              %14 = OpTypeStruct %7 %7 %7 %6 %6 
                                              %15 = OpTypePointer Uniform %14 
Uniform struct {f32_4; f32_4; f32_4; f32; f32;}* %16 = OpVariable Uniform 
                                              %17 = OpTypeInt 32 1 
                                          i32 %18 = OpConstant 0 
                                              %19 = OpTypePointer Uniform %7 
                               Private f32_4* %30 = OpVariable Private 
                                              %31 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %32 = OpTypePointer UniformConstant %31 
         UniformConstant read_only Texture2D* %33 = OpVariable UniformConstant 
                                              %35 = OpTypeSampler 
                                              %36 = OpTypePointer UniformConstant %35 
                     UniformConstant sampler* %37 = OpVariable UniformConstant 
                                              %39 = OpTypeSampledImage %31 
         UniformConstant read_only Texture2D* %44 = OpVariable UniformConstant 
                     UniformConstant sampler* %46 = OpVariable UniformConstant 
                                              %52 = OpTypeVector %6 3 
                                          i32 %55 = OpConstant 1 
                               Private f32_4* %69 = OpVariable Private 
                                          i32 %70 = OpConstant 2 
                                              %71 = OpTypeInt 32 0 
                                          u32 %72 = OpConstant 1 
                                              %73 = OpTypePointer Uniform %6 
                                          i32 %76 = OpConstant 3 
                                          u32 %80 = OpConstant 0 
                                              %81 = OpTypePointer Private %6 
                                          f32 %83 = OpConstant 3.674022E-40 
                                          f32 %85 = OpConstant 3.674022E-40 
                                          u32 %86 = OpConstant 2 
                               Private f32_4* %88 = OpVariable Private 
                                          f32 %89 = OpConstant 3.674022E-40 
                                        f32_4 %90 = OpConstantComposite %89 %83 %89 %85 
                                          f32 %97 = OpConstant 3.674022E-40 
                                          f32 %98 = OpConstant 3.674022E-40 
                                          f32 %99 = OpConstant 3.674022E-40 
                                       f32_4 %100 = OpConstantComposite %97 %98 %97 %99 
                              Private f32_4* %125 = OpVariable Private 
                                         f32 %155 = OpConstant 3.674022E-40 
                                       f32_3 %156 = OpConstantComposite %155 %155 %155 
                                         f32 %162 = OpConstant 3.674022E-40 
                                       f32_3 %163 = OpConstantComposite %162 %162 %162 
                                         f32 %222 = OpConstant 3.674022E-40 
                                       f32_3 %223 = OpConstantComposite %222 %222 %222 
                                Private f32* %261 = OpVariable Private 
                                         f32 %269 = OpConstant 3.674022E-40 
                                         f32 %277 = OpConstant 3.674022E-40 
                                         f32 %280 = OpConstant 3.674022E-40 
                                         f32 %285 = OpConstant 3.674022E-40 
                                         u32 %287 = OpConstant 3 
                                             %300 = OpTypePointer Output %7 
                               Output f32_4* %301 = OpVariable Output 
                                         i32 %302 = OpConstant 4 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_2 %13 = OpLoad vs_TEXCOORD0 
                               Uniform f32_4* %20 = OpAccessChain %16 %18 
                                        f32_4 %21 = OpLoad %20 
                                        f32_2 %22 = OpVectorShuffle %21 %21 0 1 
                                        f32_2 %23 = OpFMul %13 %22 
                               Uniform f32_4* %24 = OpAccessChain %16 %18 
                                        f32_4 %25 = OpLoad %24 
                                        f32_2 %26 = OpVectorShuffle %25 %25 2 3 
                                        f32_2 %27 = OpFAdd %23 %26 
                                        f32_4 %28 = OpLoad %9 
                                        f32_4 %29 = OpVectorShuffle %28 %27 4 5 2 3 
                                                      OpStore %9 %29 
                          read_only Texture2D %34 = OpLoad %33 
                                      sampler %38 = OpLoad %37 
                   read_only Texture2DSampled %40 = OpSampledImage %34 %38 
                                        f32_4 %41 = OpLoad %9 
                                        f32_2 %42 = OpVectorShuffle %41 %41 0 1 
                                        f32_4 %43 = OpImageSampleImplicitLod %40 %42 
                                                      OpStore %30 %43 
                          read_only Texture2D %45 = OpLoad %44 
                                      sampler %47 = OpLoad %46 
                   read_only Texture2DSampled %48 = OpSampledImage %45 %47 
                                        f32_4 %49 = OpLoad %9 
                                        f32_2 %50 = OpVectorShuffle %49 %49 0 1 
                                        f32_4 %51 = OpImageSampleImplicitLod %48 %50 
                                                      OpStore %9 %51 
                                        f32_4 %53 = OpLoad %30 
                                        f32_3 %54 = OpVectorShuffle %53 %53 0 1 2 
                               Uniform f32_4* %56 = OpAccessChain %16 %55 
                                        f32_4 %57 = OpLoad %56 
                                        f32_3 %58 = OpVectorShuffle %57 %57 0 0 0 
                                        f32_3 %59 = OpFMul %54 %58 
                                        f32_4 %60 = OpLoad %30 
                                        f32_4 %61 = OpVectorShuffle %60 %59 4 5 6 3 
                                                      OpStore %30 %61 
                                        f32_4 %62 = OpLoad %30 
                                        f32_3 %63 = OpVectorShuffle %62 %62 3 3 3 
                                        f32_4 %64 = OpLoad %30 
                                        f32_3 %65 = OpVectorShuffle %64 %64 0 1 2 
                                        f32_3 %66 = OpFMul %63 %65 
                                        f32_4 %67 = OpLoad %30 
                                        f32_4 %68 = OpVectorShuffle %67 %66 4 5 6 3 
                                                      OpStore %30 %68 
                                 Uniform f32* %74 = OpAccessChain %16 %70 %72 
                                          f32 %75 = OpLoad %74 
                                 Uniform f32* %77 = OpAccessChain %16 %76 
                                          f32 %78 = OpLoad %77 
                                          f32 %79 = OpFMul %75 %78 
                                 Private f32* %82 = OpAccessChain %69 %80 
                                                      OpStore %82 %79 
                                 Private f32* %84 = OpAccessChain %69 %72 
                                                      OpStore %84 %83 
                                 Private f32* %87 = OpAccessChain %69 %86 
                                                      OpStore %87 %85 
                                        f32_4 %91 = OpLoad %69 
                                        f32_4 %92 = OpVectorShuffle %91 %91 1 0 2 0 
                                        f32_4 %93 = OpFMul %90 %92 
                                        f32_2 %94 = OpLoad vs_TEXCOORD0 
                                        f32_4 %95 = OpVectorShuffle %94 %94 0 1 0 1 
                                        f32_4 %96 = OpFAdd %93 %95 
                                                      OpStore %88 %96 
                                       f32_4 %101 = OpLoad %69 
                                       f32_4 %102 = OpVectorShuffle %101 %101 1 0 2 0 
                                       f32_4 %103 = OpFMul %100 %102 
                                       f32_2 %104 = OpLoad vs_TEXCOORD0 
                                       f32_4 %105 = OpVectorShuffle %104 %104 0 1 0 1 
                                       f32_4 %106 = OpFAdd %103 %105 
                                                      OpStore %69 %106 
                                       f32_4 %107 = OpLoad %69 
                              Uniform f32_4* %108 = OpAccessChain %16 %18 
                                       f32_4 %109 = OpLoad %108 
                                       f32_4 %110 = OpVectorShuffle %109 %109 0 1 0 1 
                                       f32_4 %111 = OpFMul %107 %110 
                              Uniform f32_4* %112 = OpAccessChain %16 %18 
                                       f32_4 %113 = OpLoad %112 
                                       f32_4 %114 = OpVectorShuffle %113 %113 2 3 2 3 
                                       f32_4 %115 = OpFAdd %111 %114 
                                                      OpStore %69 %115 
                                       f32_4 %116 = OpLoad %88 
                              Uniform f32_4* %117 = OpAccessChain %16 %18 
                                       f32_4 %118 = OpLoad %117 
                                       f32_4 %119 = OpVectorShuffle %118 %118 0 1 0 1 
                                       f32_4 %120 = OpFMul %116 %119 
                              Uniform f32_4* %121 = OpAccessChain %16 %18 
                                       f32_4 %122 = OpLoad %121 
                                       f32_4 %123 = OpVectorShuffle %122 %122 2 3 2 3 
                                       f32_4 %124 = OpFAdd %120 %123 
                                                      OpStore %88 %124 
                         read_only Texture2D %126 = OpLoad %33 
                                     sampler %127 = OpLoad %37 
                  read_only Texture2DSampled %128 = OpSampledImage %126 %127 
                                       f32_4 %129 = OpLoad %88 
                                       f32_2 %130 = OpVectorShuffle %129 %129 0 1 
                                       f32_4 %131 = OpImageSampleImplicitLod %128 %130 
                                                      OpStore %125 %131 
                         read_only Texture2D %132 = OpLoad %33 
                                     sampler %133 = OpLoad %37 
                  read_only Texture2DSampled %134 = OpSampledImage %132 %133 
                                       f32_4 %135 = OpLoad %88 
                                       f32_2 %136 = OpVectorShuffle %135 %135 2 3 
                                       f32_4 %137 = OpImageSampleImplicitLod %134 %136 
                                                      OpStore %88 %137 
                                       f32_4 %138 = OpLoad %125 
                                       f32_3 %139 = OpVectorShuffle %138 %138 0 1 2 
                              Uniform f32_4* %140 = OpAccessChain %16 %55 
                                       f32_4 %141 = OpLoad %140 
                                       f32_3 %142 = OpVectorShuffle %141 %141 0 0 0 
                                       f32_3 %143 = OpFMul %139 %142 
                                       f32_4 %144 = OpLoad %125 
                                       f32_4 %145 = OpVectorShuffle %144 %143 4 5 6 3 
                                                      OpStore %125 %145 
                                       f32_4 %146 = OpLoad %125 
                                       f32_3 %147 = OpVectorShuffle %146 %146 3 3 3 
                                       f32_4 %148 = OpLoad %125 
                                       f32_3 %149 = OpVectorShuffle %148 %148 0 1 2 
                                       f32_3 %150 = OpFMul %147 %149 
                                       f32_4 %151 = OpLoad %125 
                                       f32_4 %152 = OpVectorShuffle %151 %150 4 5 6 3 
                                                      OpStore %125 %152 
                                       f32_4 %153 = OpLoad %125 
                                       f32_3 %154 = OpVectorShuffle %153 %153 0 1 2 
                                       f32_3 %157 = OpFMul %154 %156 
                                       f32_4 %158 = OpLoad %125 
                                       f32_4 %159 = OpVectorShuffle %158 %157 4 5 6 3 
                                                      OpStore %125 %159 
                                       f32_4 %160 = OpLoad %30 
                                       f32_3 %161 = OpVectorShuffle %160 %160 0 1 2 
                                       f32_3 %164 = OpFMul %161 %163 
                                       f32_4 %165 = OpLoad %125 
                                       f32_3 %166 = OpVectorShuffle %165 %165 0 1 2 
                                       f32_3 %167 = OpFAdd %164 %166 
                                       f32_4 %168 = OpLoad %30 
                                       f32_4 %169 = OpVectorShuffle %168 %167 4 5 6 3 
                                                      OpStore %30 %169 
                         read_only Texture2D %170 = OpLoad %33 
                                     sampler %171 = OpLoad %37 
                  read_only Texture2DSampled %172 = OpSampledImage %170 %171 
                                       f32_4 %173 = OpLoad %69 
                                       f32_2 %174 = OpVectorShuffle %173 %173 0 1 
                                       f32_4 %175 = OpImageSampleImplicitLod %172 %174 
                                                      OpStore %125 %175 
                         read_only Texture2D %176 = OpLoad %33 
                                     sampler %177 = OpLoad %37 
                  read_only Texture2DSampled %178 = OpSampledImage %176 %177 
                                       f32_4 %179 = OpLoad %69 
                                       f32_2 %180 = OpVectorShuffle %179 %179 2 3 
                                       f32_4 %181 = OpImageSampleImplicitLod %178 %180 
                                                      OpStore %69 %181 
                                       f32_4 %182 = OpLoad %125 
                                       f32_3 %183 = OpVectorShuffle %182 %182 0 1 2 
                              Uniform f32_4* %184 = OpAccessChain %16 %55 
                                       f32_4 %185 = OpLoad %184 
                                       f32_3 %186 = OpVectorShuffle %185 %185 0 0 0 
                                       f32_3 %187 = OpFMul %183 %186 
                                       f32_4 %188 = OpLoad %125 
                                       f32_4 %189 = OpVectorShuffle %188 %187 4 5 6 3 
                                                      OpStore %125 %189 
                                       f32_4 %190 = OpLoad %125 
                                       f32_3 %191 = OpVectorShuffle %190 %190 3 3 3 
                                       f32_4 %192 = OpLoad %125 
                                       f32_3 %193 = OpVectorShuffle %192 %192 0 1 2 
                                       f32_3 %194 = OpFMul %191 %193 
                                       f32_4 %195 = OpLoad %125 
                                       f32_4 %196 = OpVectorShuffle %195 %194 4 5 6 3 
                                                      OpStore %125 %196 
                                       f32_4 %197 = OpLoad %125 
                                       f32_3 %198 = OpVectorShuffle %197 %197 0 1 2 
                                       f32_3 %199 = OpFMul %198 %156 
                                       f32_4 %200 = OpLoad %30 
                                       f32_3 %201 = OpVectorShuffle %200 %200 0 1 2 
                                       f32_3 %202 = OpFAdd %199 %201 
                                       f32_4 %203 = OpLoad %30 
                                       f32_4 %204 = OpVectorShuffle %203 %202 4 5 6 3 
                                                      OpStore %30 %204 
                                       f32_4 %205 = OpLoad %88 
                                       f32_3 %206 = OpVectorShuffle %205 %205 0 1 2 
                              Uniform f32_4* %207 = OpAccessChain %16 %55 
                                       f32_4 %208 = OpLoad %207 
                                       f32_3 %209 = OpVectorShuffle %208 %208 0 0 0 
                                       f32_3 %210 = OpFMul %206 %209 
                                       f32_4 %211 = OpLoad %88 
                                       f32_4 %212 = OpVectorShuffle %211 %210 4 5 6 3 
                                                      OpStore %88 %212 
                                       f32_4 %213 = OpLoad %88 
                                       f32_3 %214 = OpVectorShuffle %213 %213 3 3 3 
                                       f32_4 %215 = OpLoad %88 
                                       f32_3 %216 = OpVectorShuffle %215 %215 0 1 2 
                                       f32_3 %217 = OpFMul %214 %216 
                                       f32_4 %218 = OpLoad %88 
                                       f32_4 %219 = OpVectorShuffle %218 %217 4 5 6 3 
                                                      OpStore %88 %219 
                                       f32_4 %220 = OpLoad %88 
                                       f32_3 %221 = OpVectorShuffle %220 %220 0 1 2 
                                       f32_3 %224 = OpFMul %221 %223 
                                       f32_4 %225 = OpLoad %30 
                                       f32_3 %226 = OpVectorShuffle %225 %225 0 1 2 
                                       f32_3 %227 = OpFAdd %224 %226 
                                       f32_4 %228 = OpLoad %30 
                                       f32_4 %229 = OpVectorShuffle %228 %227 4 5 6 3 
                                                      OpStore %30 %229 
                                       f32_4 %230 = OpLoad %69 
                                       f32_3 %231 = OpVectorShuffle %230 %230 0 1 2 
                              Uniform f32_4* %232 = OpAccessChain %16 %55 
                                       f32_4 %233 = OpLoad %232 
                                       f32_3 %234 = OpVectorShuffle %233 %233 0 0 0 
                                       f32_3 %235 = OpFMul %231 %234 
                                       f32_4 %236 = OpLoad %69 
                                       f32_4 %237 = OpVectorShuffle %236 %235 4 5 6 3 
                                                      OpStore %69 %237 
                                       f32_4 %238 = OpLoad %69 
                                       f32_3 %239 = OpVectorShuffle %238 %238 3 3 3 
                                       f32_4 %240 = OpLoad %69 
                                       f32_3 %241 = OpVectorShuffle %240 %240 0 1 2 
                                       f32_3 %242 = OpFMul %239 %241 
                                       f32_4 %243 = OpLoad %69 
                                       f32_4 %244 = OpVectorShuffle %243 %242 4 5 6 3 
                                                      OpStore %69 %244 
                                       f32_4 %245 = OpLoad %69 
                                       f32_3 %246 = OpVectorShuffle %245 %245 0 1 2 
                                       f32_3 %247 = OpFMul %246 %223 
                                       f32_4 %248 = OpLoad %30 
                                       f32_3 %249 = OpVectorShuffle %248 %248 0 1 2 
                                       f32_3 %250 = OpFAdd %247 %249 
                                       f32_4 %251 = OpLoad %30 
                                       f32_4 %252 = OpVectorShuffle %251 %250 4 5 6 3 
                                                      OpStore %30 %252 
                                       f32_4 %253 = OpLoad %30 
                                       f32_3 %254 = OpVectorShuffle %253 %253 0 1 2 
                              Uniform f32_4* %255 = OpAccessChain %16 %55 
                                       f32_4 %256 = OpLoad %255 
                                       f32_3 %257 = OpVectorShuffle %256 %256 1 1 1 
                                       f32_3 %258 = OpFMul %254 %257 
                                       f32_4 %259 = OpLoad %30 
                                       f32_4 %260 = OpVectorShuffle %259 %258 4 5 6 3 
                                                      OpStore %30 %260 
                                Private f32* %262 = OpAccessChain %30 %72 
                                         f32 %263 = OpLoad %262 
                                Private f32* %264 = OpAccessChain %30 %80 
                                         f32 %265 = OpLoad %264 
                                         f32 %266 = OpExtInst %1 40 %263 %265 
                                                      OpStore %261 %266 
                                Private f32* %267 = OpAccessChain %30 %86 
                                         f32 %268 = OpLoad %267 
                                         f32 %270 = OpExtInst %1 40 %268 %269 
                                Private f32* %271 = OpAccessChain %69 %80 
                                                      OpStore %271 %270 
                                         f32 %272 = OpLoad %261 
                                Private f32* %273 = OpAccessChain %69 %80 
                                         f32 %274 = OpLoad %273 
                                         f32 %275 = OpExtInst %1 40 %272 %274 
                                                      OpStore %261 %275 
                                         f32 %276 = OpLoad %261 
                                         f32 %278 = OpExtInst %1 37 %276 %277 
                                                      OpStore %261 %278 
                                         f32 %279 = OpLoad %261 
                                         f32 %281 = OpFMul %279 %280 
                                                      OpStore %261 %281 
                                         f32 %282 = OpLoad %261 
                                         f32 %283 = OpExtInst %1 9 %282 
                                                      OpStore %261 %283 
                                         f32 %284 = OpLoad %261 
                                         f32 %286 = OpFMul %284 %285 
                                Private f32* %288 = OpAccessChain %69 %287 
                                                      OpStore %288 %286 
                                       f32_4 %289 = OpLoad %30 
                                       f32_3 %290 = OpVectorShuffle %289 %289 0 1 2 
                                       f32_4 %291 = OpLoad %69 
                                       f32_3 %292 = OpVectorShuffle %291 %291 3 3 3 
                                       f32_3 %293 = OpFDiv %290 %292 
                                       f32_4 %294 = OpLoad %69 
                                       f32_4 %295 = OpVectorShuffle %294 %293 4 5 6 3 
                                                      OpStore %69 %295 
                                       f32_4 %296 = OpLoad %9 
                                       f32_4 %297 = OpLoad %69 
                                       f32_4 %298 = OpFNegate %297 
                                       f32_4 %299 = OpFAdd %296 %298 
                                                      OpStore %9 %299 
                                Uniform f32* %303 = OpAccessChain %16 %302 
                                         f32 %304 = OpLoad %303 
                                       f32_4 %305 = OpCompositeConstruct %304 %304 %304 %304 
                                       f32_4 %306 = OpLoad %9 
                                       f32_4 %307 = OpFMul %305 %306 
                                       f32_4 %308 = OpLoad %69 
                                       f32_4 %309 = OpFAdd %307 %308 
                                                      OpStore %301 %309 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "AB_HIGH_PRECISION" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "AB_HIGH_PRECISION" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in  vec4 in_POSITION0;
in  vec2 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _MainTex_TexelSize;
uniform 	float _BlurRadius;
uniform 	float _TempFilterValue;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
UNITY_LOCATION(1) uniform  sampler2D _AnamorphicRTS0;
in  vec2 vs_TEXCOORD0;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
void main()
{
    u_xlat0.x = _MainTex_TexelSize.y * _BlurRadius;
    u_xlat0.y = float(1.38461542);
    u_xlat0.z = float(3.23076916);
    u_xlat1 = vec4(0.0, 1.38461542, 0.0, 3.23076916) * u_xlat0.yxzx + vs_TEXCOORD0.xyxy;
    u_xlat0 = vec4(-0.0, -1.38461542, -0.0, -3.23076916) * u_xlat0.yxzx + vs_TEXCOORD0.xyxy;
    u_xlat0 = u_xlat0 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
    u_xlat1 = u_xlat1 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
    u_xlat2 = texture(_MainTex, u_xlat1.xy);
    u_xlat1 = texture(_MainTex, u_xlat1.zw);
    u_xlat2.xyz = u_xlat2.xyz * vec3(0.31621623, 0.31621623, 0.31621623);
    u_xlat3.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat4 = texture(_MainTex, u_xlat3.xy);
    u_xlat3 = texture(_AnamorphicRTS0, u_xlat3.xy);
    u_xlat2.xyz = u_xlat4.xyz * vec3(0.227027029, 0.227027029, 0.227027029) + u_xlat2.xyz;
    u_xlat4 = texture(_MainTex, u_xlat0.xy);
    u_xlat0 = texture(_MainTex, u_xlat0.zw);
    u_xlat2.xyz = u_xlat4.xyz * vec3(0.31621623, 0.31621623, 0.31621623) + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.0702702701, 0.0702702701, 0.0702702701) + u_xlat2.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(0.0702702701, 0.0702702701, 0.0702702701) + u_xlat1.xyz;
    u_xlat0.w = 0.0;
    u_xlat1 = (-u_xlat0) + u_xlat3;
    SV_Target0 = vec4(_TempFilterValue) * u_xlat1 + u_xlat0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "AB_HIGH_PRECISION" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 94
; Schema: 0
                                              OpCapability Shader 
                                       %1 = OpExtInstImport "GLSL.std.450" 
                                              OpMemoryModel Logical GLSL450 
                                              OpEntryPoint Vertex %4 "main" %11 %72 %84 %86 
                                              OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                              OpDecorate %11 Location 11 
                                              OpDecorate %16 ArrayStride 16 
                                              OpDecorate %17 ArrayStride 17 
                                              OpMemberDecorate %18 0 Offset 18 
                                              OpMemberDecorate %18 1 Offset 18 
                                              OpDecorate %18 Block 
                                              OpDecorate %20 DescriptorSet 20 
                                              OpDecorate %20 Binding 20 
                                              OpMemberDecorate %70 0 BuiltIn 70 
                                              OpMemberDecorate %70 1 BuiltIn 70 
                                              OpMemberDecorate %70 2 BuiltIn 70 
                                              OpDecorate %70 Block 
                                              OpDecorate vs_TEXCOORD0 Location 84 
                                              OpDecorate %86 Location 86 
                                       %2 = OpTypeVoid 
                                       %3 = OpTypeFunction %2 
                                       %6 = OpTypeFloat 32 
                                       %7 = OpTypeVector %6 4 
                                       %8 = OpTypePointer Private %7 
                        Private f32_4* %9 = OpVariable Private 
                                      %10 = OpTypePointer Input %7 
                         Input f32_4* %11 = OpVariable Input 
                                      %14 = OpTypeInt 32 0 
                                  u32 %15 = OpConstant 4 
                                      %16 = OpTypeArray %7 %15 
                                      %17 = OpTypeArray %7 %15 
                                      %18 = OpTypeStruct %16 %17 
                                      %19 = OpTypePointer Uniform %18 
Uniform struct {f32_4[4]; f32_4[4];}* %20 = OpVariable Uniform 
                                      %21 = OpTypeInt 32 1 
                                  i32 %22 = OpConstant 0 
                                  i32 %23 = OpConstant 1 
                                      %24 = OpTypePointer Uniform %7 
                                  i32 %35 = OpConstant 2 
                                  i32 %44 = OpConstant 3 
                       Private f32_4* %48 = OpVariable Private 
                                  u32 %68 = OpConstant 1 
                                      %69 = OpTypeArray %6 %68 
                                      %70 = OpTypeStruct %7 %6 %69 
                                      %71 = OpTypePointer Output %70 
 Output struct {f32_4; f32; f32[1];}* %72 = OpVariable Output 
                                      %80 = OpTypePointer Output %7 
                                      %82 = OpTypeVector %6 2 
                                      %83 = OpTypePointer Output %82 
               Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                      %85 = OpTypePointer Input %82 
                         Input f32_2* %86 = OpVariable Input 
                                      %88 = OpTypePointer Output %6 
                                  void %4 = OpFunction None %3 
                                       %5 = OpLabel 
                                f32_4 %12 = OpLoad %11 
                                f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                       Uniform f32_4* %25 = OpAccessChain %20 %22 %23 
                                f32_4 %26 = OpLoad %25 
                                f32_4 %27 = OpFMul %13 %26 
                                              OpStore %9 %27 
                       Uniform f32_4* %28 = OpAccessChain %20 %22 %22 
                                f32_4 %29 = OpLoad %28 
                                f32_4 %30 = OpLoad %11 
                                f32_4 %31 = OpVectorShuffle %30 %30 0 0 0 0 
                                f32_4 %32 = OpFMul %29 %31 
                                f32_4 %33 = OpLoad %9 
                                f32_4 %34 = OpFAdd %32 %33 
                                              OpStore %9 %34 
                       Uniform f32_4* %36 = OpAccessChain %20 %22 %35 
                                f32_4 %37 = OpLoad %36 
                                f32_4 %38 = OpLoad %11 
                                f32_4 %39 = OpVectorShuffle %38 %38 2 2 2 2 
                                f32_4 %40 = OpFMul %37 %39 
                                f32_4 %41 = OpLoad %9 
                                f32_4 %42 = OpFAdd %40 %41 
                                              OpStore %9 %42 
                                f32_4 %43 = OpLoad %9 
                       Uniform f32_4* %45 = OpAccessChain %20 %22 %44 
                                f32_4 %46 = OpLoad %45 
                                f32_4 %47 = OpFAdd %43 %46 
                                              OpStore %9 %47 
                                f32_4 %49 = OpLoad %9 
                                f32_4 %50 = OpVectorShuffle %49 %49 1 1 1 1 
                       Uniform f32_4* %51 = OpAccessChain %20 %23 %23 
                                f32_4 %52 = OpLoad %51 
                                f32_4 %53 = OpFMul %50 %52 
                                              OpStore %48 %53 
                       Uniform f32_4* %54 = OpAccessChain %20 %23 %22 
                                f32_4 %55 = OpLoad %54 
                                f32_4 %56 = OpLoad %9 
                                f32_4 %57 = OpVectorShuffle %56 %56 0 0 0 0 
                                f32_4 %58 = OpFMul %55 %57 
                                f32_4 %59 = OpLoad %48 
                                f32_4 %60 = OpFAdd %58 %59 
                                              OpStore %48 %60 
                       Uniform f32_4* %61 = OpAccessChain %20 %23 %35 
                                f32_4 %62 = OpLoad %61 
                                f32_4 %63 = OpLoad %9 
                                f32_4 %64 = OpVectorShuffle %63 %63 2 2 2 2 
                                f32_4 %65 = OpFMul %62 %64 
                                f32_4 %66 = OpLoad %48 
                                f32_4 %67 = OpFAdd %65 %66 
                                              OpStore %48 %67 
                       Uniform f32_4* %73 = OpAccessChain %20 %23 %44 
                                f32_4 %74 = OpLoad %73 
                                f32_4 %75 = OpLoad %9 
                                f32_4 %76 = OpVectorShuffle %75 %75 3 3 3 3 
                                f32_4 %77 = OpFMul %74 %76 
                                f32_4 %78 = OpLoad %48 
                                f32_4 %79 = OpFAdd %77 %78 
                        Output f32_4* %81 = OpAccessChain %72 %22 
                                              OpStore %81 %79 
                                f32_2 %87 = OpLoad %86 
                                              OpStore vs_TEXCOORD0 %87 
                          Output f32* %89 = OpAccessChain %72 %22 %68 
                                  f32 %90 = OpLoad %89 
                                  f32 %91 = OpFNegate %90 
                          Output f32* %92 = OpAccessChain %72 %22 %68 
                                              OpStore %92 %91 
                                              OpReturn
                                              OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 192
; Schema: 0
                                                  OpCapability Shader 
                                           %1 = OpExtInstImport "GLSL.std.450" 
                                                  OpMemoryModel Logical GLSL450 
                                                  OpEntryPoint Fragment %4 "main" %40 %182 
                                                  OpExecutionMode %4 OriginUpperLeft 
                                                  OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                  OpMemberDecorate %10 0 Offset 10 
                                                  OpMemberDecorate %10 1 Offset 10 
                                                  OpMemberDecorate %10 2 Offset 10 
                                                  OpMemberDecorate %10 3 Offset 10 
                                                  OpDecorate %10 Block 
                                                  OpDecorate %12 DescriptorSet 12 
                                                  OpDecorate %12 Binding 12 
                                                  OpDecorate vs_TEXCOORD0 Location 40 
                                                  OpDecorate %79 DescriptorSet 79 
                                                  OpDecorate %79 Binding 79 
                                                  OpDecorate %83 DescriptorSet 83 
                                                  OpDecorate %83 Binding 83 
                                                  OpDecorate %124 DescriptorSet 124 
                                                  OpDecorate %124 Binding 124 
                                                  OpDecorate %126 DescriptorSet 126 
                                                  OpDecorate %126 Binding 126 
                                                  OpDecorate %182 Location 182 
                                           %2 = OpTypeVoid 
                                           %3 = OpTypeFunction %2 
                                           %6 = OpTypeFloat 32 
                                           %7 = OpTypeVector %6 4 
                                           %8 = OpTypePointer Private %7 
                            Private f32_4* %9 = OpVariable Private 
                                          %10 = OpTypeStruct %7 %7 %6 %6 
                                          %11 = OpTypePointer Uniform %10 
Uniform struct {f32_4; f32_4; f32; f32;}* %12 = OpVariable Uniform 
                                          %13 = OpTypeInt 32 1 
                                      i32 %14 = OpConstant 1 
                                          %15 = OpTypeInt 32 0 
                                      u32 %16 = OpConstant 1 
                                          %17 = OpTypePointer Uniform %6 
                                      i32 %20 = OpConstant 2 
                                      u32 %24 = OpConstant 0 
                                          %25 = OpTypePointer Private %6 
                                      f32 %27 = OpConstant 3.674022E-40 
                                      f32 %29 = OpConstant 3.674022E-40 
                                      u32 %30 = OpConstant 2 
                           Private f32_4* %32 = OpVariable Private 
                                      f32 %33 = OpConstant 3.674022E-40 
                                    f32_4 %34 = OpConstantComposite %33 %27 %33 %29 
                                          %38 = OpTypeVector %6 2 
                                          %39 = OpTypePointer Input %38 
                    Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                      f32 %44 = OpConstant 3.674022E-40 
                                      f32 %45 = OpConstant 3.674022E-40 
                                      f32 %46 = OpConstant 3.674022E-40 
                                    f32_4 %47 = OpConstantComposite %44 %45 %44 %46 
                                      i32 %55 = OpConstant 0 
                                          %56 = OpTypePointer Uniform %7 
                                          %74 = OpTypeVector %6 3 
                                          %75 = OpTypePointer Private %74 
                           Private f32_3* %76 = OpVariable Private 
                                          %77 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                          %78 = OpTypePointer UniformConstant %77 
     UniformConstant read_only Texture2D* %79 = OpVariable UniformConstant 
                                          %81 = OpTypeSampler 
                                          %82 = OpTypePointer UniformConstant %81 
                 UniformConstant sampler* %83 = OpVariable UniformConstant 
                                          %85 = OpTypeSampledImage %77 
                                     f32 %101 = OpConstant 3.674022E-40 
                                   f32_3 %102 = OpConstantComposite %101 %101 %101 
                          Private f32_4* %104 = OpVariable Private 
                          Private f32_3* %116 = OpVariable Private 
    UniformConstant read_only Texture2D* %124 = OpVariable UniformConstant 
                UniformConstant sampler* %126 = OpVariable UniformConstant 
                                     f32 %133 = OpConstant 3.674022E-40 
                                   f32_3 %134 = OpConstantComposite %133 %133 %133 
                                     f32 %160 = OpConstant 3.674022E-40 
                                   f32_3 %161 = OpConstantComposite %160 %160 %160 
                                     u32 %175 = OpConstant 3 
                                         %181 = OpTypePointer Output %7 
                           Output f32_4* %182 = OpVariable Output 
                                     i32 %183 = OpConstant 3 
                                      void %4 = OpFunction None %3 
                                           %5 = OpLabel 
                             Uniform f32* %18 = OpAccessChain %12 %14 %16 
                                      f32 %19 = OpLoad %18 
                             Uniform f32* %21 = OpAccessChain %12 %20 
                                      f32 %22 = OpLoad %21 
                                      f32 %23 = OpFMul %19 %22 
                             Private f32* %26 = OpAccessChain %9 %24 
                                                  OpStore %26 %23 
                             Private f32* %28 = OpAccessChain %9 %16 
                                                  OpStore %28 %27 
                             Private f32* %31 = OpAccessChain %9 %30 
                                                  OpStore %31 %29 
                                    f32_4 %35 = OpLoad %9 
                                    f32_4 %36 = OpVectorShuffle %35 %35 1 0 2 0 
                                    f32_4 %37 = OpFMul %34 %36 
                                    f32_2 %41 = OpLoad vs_TEXCOORD0 
                                    f32_4 %42 = OpVectorShuffle %41 %41 0 1 0 1 
                                    f32_4 %43 = OpFAdd %37 %42 
                                                  OpStore %32 %43 
                                    f32_4 %48 = OpLoad %9 
                                    f32_4 %49 = OpVectorShuffle %48 %48 1 0 2 0 
                                    f32_4 %50 = OpFMul %47 %49 
                                    f32_2 %51 = OpLoad vs_TEXCOORD0 
                                    f32_4 %52 = OpVectorShuffle %51 %51 0 1 0 1 
                                    f32_4 %53 = OpFAdd %50 %52 
                                                  OpStore %9 %53 
                                    f32_4 %54 = OpLoad %9 
                           Uniform f32_4* %57 = OpAccessChain %12 %55 
                                    f32_4 %58 = OpLoad %57 
                                    f32_4 %59 = OpVectorShuffle %58 %58 0 1 0 1 
                                    f32_4 %60 = OpFMul %54 %59 
                           Uniform f32_4* %61 = OpAccessChain %12 %55 
                                    f32_4 %62 = OpLoad %61 
                                    f32_4 %63 = OpVectorShuffle %62 %62 2 3 2 3 
                                    f32_4 %64 = OpFAdd %60 %63 
                                                  OpStore %9 %64 
                                    f32_4 %65 = OpLoad %32 
                           Uniform f32_4* %66 = OpAccessChain %12 %55 
                                    f32_4 %67 = OpLoad %66 
                                    f32_4 %68 = OpVectorShuffle %67 %67 0 1 0 1 
                                    f32_4 %69 = OpFMul %65 %68 
                           Uniform f32_4* %70 = OpAccessChain %12 %55 
                                    f32_4 %71 = OpLoad %70 
                                    f32_4 %72 = OpVectorShuffle %71 %71 2 3 2 3 
                                    f32_4 %73 = OpFAdd %69 %72 
                                                  OpStore %32 %73 
                      read_only Texture2D %80 = OpLoad %79 
                                  sampler %84 = OpLoad %83 
               read_only Texture2DSampled %86 = OpSampledImage %80 %84 
                                    f32_4 %87 = OpLoad %32 
                                    f32_2 %88 = OpVectorShuffle %87 %87 0 1 
                                    f32_4 %89 = OpImageSampleImplicitLod %86 %88 
                                    f32_3 %90 = OpVectorShuffle %89 %89 0 1 2 
                                                  OpStore %76 %90 
                      read_only Texture2D %91 = OpLoad %79 
                                  sampler %92 = OpLoad %83 
               read_only Texture2DSampled %93 = OpSampledImage %91 %92 
                                    f32_4 %94 = OpLoad %32 
                                    f32_2 %95 = OpVectorShuffle %94 %94 2 3 
                                    f32_4 %96 = OpImageSampleImplicitLod %93 %95 
                                    f32_3 %97 = OpVectorShuffle %96 %96 0 1 2 
                                    f32_4 %98 = OpLoad %32 
                                    f32_4 %99 = OpVectorShuffle %98 %97 4 5 6 3 
                                                  OpStore %32 %99 
                                   f32_3 %100 = OpLoad %76 
                                   f32_3 %103 = OpFMul %100 %102 
                                                  OpStore %76 %103 
                                   f32_2 %105 = OpLoad vs_TEXCOORD0 
                          Uniform f32_4* %106 = OpAccessChain %12 %55 
                                   f32_4 %107 = OpLoad %106 
                                   f32_2 %108 = OpVectorShuffle %107 %107 0 1 
                                   f32_2 %109 = OpFMul %105 %108 
                          Uniform f32_4* %110 = OpAccessChain %12 %55 
                                   f32_4 %111 = OpLoad %110 
                                   f32_2 %112 = OpVectorShuffle %111 %111 2 3 
                                   f32_2 %113 = OpFAdd %109 %112 
                                   f32_4 %114 = OpLoad %104 
                                   f32_4 %115 = OpVectorShuffle %114 %113 4 5 2 3 
                                                  OpStore %104 %115 
                     read_only Texture2D %117 = OpLoad %79 
                                 sampler %118 = OpLoad %83 
              read_only Texture2DSampled %119 = OpSampledImage %117 %118 
                                   f32_4 %120 = OpLoad %104 
                                   f32_2 %121 = OpVectorShuffle %120 %120 0 1 
                                   f32_4 %122 = OpImageSampleImplicitLod %119 %121 
                                   f32_3 %123 = OpVectorShuffle %122 %122 0 1 2 
                                                  OpStore %116 %123 
                     read_only Texture2D %125 = OpLoad %124 
                                 sampler %127 = OpLoad %126 
              read_only Texture2DSampled %128 = OpSampledImage %125 %127 
                                   f32_4 %129 = OpLoad %104 
                                   f32_2 %130 = OpVectorShuffle %129 %129 0 1 
                                   f32_4 %131 = OpImageSampleImplicitLod %128 %130 
                                                  OpStore %104 %131 
                                   f32_3 %132 = OpLoad %116 
                                   f32_3 %135 = OpFMul %132 %134 
                                   f32_3 %136 = OpLoad %76 
                                   f32_3 %137 = OpFAdd %135 %136 
                                                  OpStore %76 %137 
                     read_only Texture2D %138 = OpLoad %79 
                                 sampler %139 = OpLoad %83 
              read_only Texture2DSampled %140 = OpSampledImage %138 %139 
                                   f32_4 %141 = OpLoad %9 
                                   f32_2 %142 = OpVectorShuffle %141 %141 0 1 
                                   f32_4 %143 = OpImageSampleImplicitLod %140 %142 
                                   f32_3 %144 = OpVectorShuffle %143 %143 0 1 2 
                                                  OpStore %116 %144 
                     read_only Texture2D %145 = OpLoad %79 
                                 sampler %146 = OpLoad %83 
              read_only Texture2DSampled %147 = OpSampledImage %145 %146 
                                   f32_4 %148 = OpLoad %9 
                                   f32_2 %149 = OpVectorShuffle %148 %148 2 3 
                                   f32_4 %150 = OpImageSampleImplicitLod %147 %149 
                                   f32_3 %151 = OpVectorShuffle %150 %150 0 1 2 
                                   f32_4 %152 = OpLoad %9 
                                   f32_4 %153 = OpVectorShuffle %152 %151 4 5 6 3 
                                                  OpStore %9 %153 
                                   f32_3 %154 = OpLoad %116 
                                   f32_3 %155 = OpFMul %154 %102 
                                   f32_3 %156 = OpLoad %76 
                                   f32_3 %157 = OpFAdd %155 %156 
                                                  OpStore %76 %157 
                                   f32_4 %158 = OpLoad %32 
                                   f32_3 %159 = OpVectorShuffle %158 %158 0 1 2 
                                   f32_3 %162 = OpFMul %159 %161 
                                   f32_3 %163 = OpLoad %76 
                                   f32_3 %164 = OpFAdd %162 %163 
                                   f32_4 %165 = OpLoad %32 
                                   f32_4 %166 = OpVectorShuffle %165 %164 4 5 6 3 
                                                  OpStore %32 %166 
                                   f32_4 %167 = OpLoad %9 
                                   f32_3 %168 = OpVectorShuffle %167 %167 0 1 2 
                                   f32_3 %169 = OpFMul %168 %161 
                                   f32_4 %170 = OpLoad %32 
                                   f32_3 %171 = OpVectorShuffle %170 %170 0 1 2 
                                   f32_3 %172 = OpFAdd %169 %171 
                                   f32_4 %173 = OpLoad %9 
                                   f32_4 %174 = OpVectorShuffle %173 %172 4 5 6 3 
                                                  OpStore %9 %174 
                            Private f32* %176 = OpAccessChain %9 %175 
                                                  OpStore %176 %33 
                                   f32_4 %177 = OpLoad %9 
                                   f32_4 %178 = OpFNegate %177 
                                   f32_4 %179 = OpLoad %104 
                                   f32_4 %180 = OpFAdd %178 %179 
                                                  OpStore %32 %180 
                            Uniform f32* %184 = OpAccessChain %12 %183 
                                     f32 %185 = OpLoad %184 
                                   f32_4 %186 = OpCompositeConstruct %185 %185 %185 %185 
                                   f32_4 %187 = OpLoad %32 
                                   f32_4 %188 = OpFMul %186 %187 
                                   f32_4 %189 = OpLoad %9 
                                   f32_4 %190 = OpFAdd %188 %189 
                                                  OpStore %182 %190 
                                                  OpReturn
                                                  OpFunctionEnd
"
}
}
Program "fp" {
SubProgram "d3d11 " {
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
""
}
SubProgram "vulkan " {
""
}
SubProgram "d3d11 " {
Keywords { "AB_HIGH_PRECISION" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "AB_HIGH_PRECISION" }
""
}
SubProgram "vulkan " {
Keywords { "AB_HIGH_PRECISION" }
""
}
}
}
 Pass {
  Name "frag_upscaleTentFirstPass"
  ZTest Always
  ZWrite Off
  Cull Off
  GpuProgramID 1157886
Program "vp" {
SubProgram "d3d11 " {
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in  vec4 in_POSITION0;
in  vec2 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BloomRange;
uniform 	vec4 _MainTex_TexelSize;
uniform 	vec4 _BloomParams;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
in  vec2 vs_TEXCOORD0;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat9;
void main()
{
    u_xlat0.xy = (-_MainTex_TexelSize.xy) * _BloomParams.zz + vs_TEXCOORD0.xy;
    u_xlat0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0 = texture(_MainTex, u_xlat0.xy);
    u_xlat0.xyz = u_xlat0.xyz * _BloomRange.xxx;
    u_xlat0.xyz = u_xlat0.www * u_xlat0.xyz;
    u_xlat1 = _MainTex_TexelSize.xyxy * vec4(0.0, -1.0, 1.0, -1.0);
    u_xlat1 = u_xlat1 * _BloomParams.zzzz + vs_TEXCOORD0.xyxy;
    u_xlat1 = u_xlat1 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
    u_xlat2 = texture(_MainTex, u_xlat1.xy);
    u_xlat1 = texture(_MainTex, u_xlat1.zw);
    u_xlat2.xyz = u_xlat2.xyz * _BloomRange.xxx;
    u_xlat2.xyz = u_xlat2.www * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz * vec3(0.125, 0.125, 0.125);
    u_xlat0.xyz = u_xlat0.xyz * vec3(0.0625, 0.0625, 0.0625) + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _BloomRange.xxx;
    u_xlat1.xyz = u_xlat1.www * u_xlat1.xyz;
    u_xlat0.xyz = u_xlat1.xyz * vec3(0.0625, 0.0625, 0.0625) + u_xlat0.xyz;
    u_xlat1 = _MainTex_TexelSize.xyxy * vec4(-1.0, 0.0, 1.0, 0.0);
    u_xlat1 = u_xlat1 * _BloomParams.zzzz + vs_TEXCOORD0.xyxy;
    u_xlat1 = u_xlat1 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
    u_xlat2 = texture(_MainTex, u_xlat1.xy);
    u_xlat1 = texture(_MainTex, u_xlat1.zw);
    u_xlat2.xyz = u_xlat2.xyz * _BloomRange.xxx;
    u_xlat2.xyz = u_xlat2.www * u_xlat2.xyz;
    u_xlat0.xyz = u_xlat2.xyz * vec3(0.125, 0.125, 0.125) + u_xlat0.xyz;
    u_xlat2.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat2 = texture(_MainTex, u_xlat2.xy);
    u_xlat2.xyz = u_xlat2.xyz * _BloomRange.xxx;
    u_xlat2.xyz = u_xlat2.www * u_xlat2.xyz;
    u_xlat0.xyz = u_xlat2.xyz * vec3(0.25, 0.25, 0.25) + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _BloomRange.xxx;
    u_xlat1.xyz = u_xlat1.www * u_xlat1.xyz;
    u_xlat0.xyz = u_xlat1.xyz * vec3(0.125, 0.125, 0.125) + u_xlat0.xyz;
    u_xlat1 = _MainTex_TexelSize.xyxy * vec4(-1.0, 1.0, 0.0, 1.0);
    u_xlat1 = u_xlat1 * _BloomParams.zzzz + vs_TEXCOORD0.xyxy;
    u_xlat1 = u_xlat1 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
    u_xlat2 = texture(_MainTex, u_xlat1.xy);
    u_xlat1 = texture(_MainTex, u_xlat1.zw);
    u_xlat2.xyz = u_xlat2.xyz * _BloomRange.xxx;
    u_xlat2.xyz = u_xlat2.www * u_xlat2.xyz;
    u_xlat0.xyz = u_xlat2.xyz * vec3(0.0625, 0.0625, 0.0625) + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _BloomRange.xxx;
    u_xlat1.xyz = u_xlat1.www * u_xlat1.xyz;
    u_xlat0.xyz = u_xlat1.xyz * vec3(0.125, 0.125, 0.125) + u_xlat0.xyz;
    u_xlat1.xy = _MainTex_TexelSize.xy * _BloomParams.zz + vs_TEXCOORD0.xy;
    u_xlat1.xy = u_xlat1.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1 = texture(_MainTex, u_xlat1.xy);
    u_xlat1.xyz = u_xlat1.xyz * _BloomRange.xxx;
    u_xlat1.xyz = u_xlat1.www * u_xlat1.xyz;
    u_xlat0.xyz = u_xlat1.xyz * vec3(0.0625, 0.0625, 0.0625) + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * _BloomRange.yyy;
    u_xlat9 = max(u_xlat0.y, u_xlat0.x);
    u_xlat1.x = max(u_xlat0.z, 9.99999997e-07);
    u_xlat9 = max(u_xlat9, u_xlat1.x);
    u_xlat9 = min(u_xlat9, 1.0);
    u_xlat9 = u_xlat9 * 255.0;
    u_xlat9 = ceil(u_xlat9);
    u_xlat9 = u_xlat9 * 0.00392156886;
    SV_Target0.xyz = u_xlat0.xyz / vec3(u_xlat9);
    SV_Target0.w = u_xlat9;
    return;
}

#endif
"
}
SubProgram "vulkan " {
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 94
; Schema: 0
                                              OpCapability Shader 
                                       %1 = OpExtInstImport "GLSL.std.450" 
                                              OpMemoryModel Logical GLSL450 
                                              OpEntryPoint Vertex %4 "main" %11 %72 %84 %86 
                                              OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                              OpDecorate %11 Location 11 
                                              OpDecorate %16 ArrayStride 16 
                                              OpDecorate %17 ArrayStride 17 
                                              OpMemberDecorate %18 0 Offset 18 
                                              OpMemberDecorate %18 1 Offset 18 
                                              OpDecorate %18 Block 
                                              OpDecorate %20 DescriptorSet 20 
                                              OpDecorate %20 Binding 20 
                                              OpMemberDecorate %70 0 BuiltIn 70 
                                              OpMemberDecorate %70 1 BuiltIn 70 
                                              OpMemberDecorate %70 2 BuiltIn 70 
                                              OpDecorate %70 Block 
                                              OpDecorate vs_TEXCOORD0 Location 84 
                                              OpDecorate %86 Location 86 
                                       %2 = OpTypeVoid 
                                       %3 = OpTypeFunction %2 
                                       %6 = OpTypeFloat 32 
                                       %7 = OpTypeVector %6 4 
                                       %8 = OpTypePointer Private %7 
                        Private f32_4* %9 = OpVariable Private 
                                      %10 = OpTypePointer Input %7 
                         Input f32_4* %11 = OpVariable Input 
                                      %14 = OpTypeInt 32 0 
                                  u32 %15 = OpConstant 4 
                                      %16 = OpTypeArray %7 %15 
                                      %17 = OpTypeArray %7 %15 
                                      %18 = OpTypeStruct %16 %17 
                                      %19 = OpTypePointer Uniform %18 
Uniform struct {f32_4[4]; f32_4[4];}* %20 = OpVariable Uniform 
                                      %21 = OpTypeInt 32 1 
                                  i32 %22 = OpConstant 0 
                                  i32 %23 = OpConstant 1 
                                      %24 = OpTypePointer Uniform %7 
                                  i32 %35 = OpConstant 2 
                                  i32 %44 = OpConstant 3 
                       Private f32_4* %48 = OpVariable Private 
                                  u32 %68 = OpConstant 1 
                                      %69 = OpTypeArray %6 %68 
                                      %70 = OpTypeStruct %7 %6 %69 
                                      %71 = OpTypePointer Output %70 
 Output struct {f32_4; f32; f32[1];}* %72 = OpVariable Output 
                                      %80 = OpTypePointer Output %7 
                                      %82 = OpTypeVector %6 2 
                                      %83 = OpTypePointer Output %82 
               Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                      %85 = OpTypePointer Input %82 
                         Input f32_2* %86 = OpVariable Input 
                                      %88 = OpTypePointer Output %6 
                                  void %4 = OpFunction None %3 
                                       %5 = OpLabel 
                                f32_4 %12 = OpLoad %11 
                                f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                       Uniform f32_4* %25 = OpAccessChain %20 %22 %23 
                                f32_4 %26 = OpLoad %25 
                                f32_4 %27 = OpFMul %13 %26 
                                              OpStore %9 %27 
                       Uniform f32_4* %28 = OpAccessChain %20 %22 %22 
                                f32_4 %29 = OpLoad %28 
                                f32_4 %30 = OpLoad %11 
                                f32_4 %31 = OpVectorShuffle %30 %30 0 0 0 0 
                                f32_4 %32 = OpFMul %29 %31 
                                f32_4 %33 = OpLoad %9 
                                f32_4 %34 = OpFAdd %32 %33 
                                              OpStore %9 %34 
                       Uniform f32_4* %36 = OpAccessChain %20 %22 %35 
                                f32_4 %37 = OpLoad %36 
                                f32_4 %38 = OpLoad %11 
                                f32_4 %39 = OpVectorShuffle %38 %38 2 2 2 2 
                                f32_4 %40 = OpFMul %37 %39 
                                f32_4 %41 = OpLoad %9 
                                f32_4 %42 = OpFAdd %40 %41 
                                              OpStore %9 %42 
                                f32_4 %43 = OpLoad %9 
                       Uniform f32_4* %45 = OpAccessChain %20 %22 %44 
                                f32_4 %46 = OpLoad %45 
                                f32_4 %47 = OpFAdd %43 %46 
                                              OpStore %9 %47 
                                f32_4 %49 = OpLoad %9 
                                f32_4 %50 = OpVectorShuffle %49 %49 1 1 1 1 
                       Uniform f32_4* %51 = OpAccessChain %20 %23 %23 
                                f32_4 %52 = OpLoad %51 
                                f32_4 %53 = OpFMul %50 %52 
                                              OpStore %48 %53 
                       Uniform f32_4* %54 = OpAccessChain %20 %23 %22 
                                f32_4 %55 = OpLoad %54 
                                f32_4 %56 = OpLoad %9 
                                f32_4 %57 = OpVectorShuffle %56 %56 0 0 0 0 
                                f32_4 %58 = OpFMul %55 %57 
                                f32_4 %59 = OpLoad %48 
                                f32_4 %60 = OpFAdd %58 %59 
                                              OpStore %48 %60 
                       Uniform f32_4* %61 = OpAccessChain %20 %23 %35 
                                f32_4 %62 = OpLoad %61 
                                f32_4 %63 = OpLoad %9 
                                f32_4 %64 = OpVectorShuffle %63 %63 2 2 2 2 
                                f32_4 %65 = OpFMul %62 %64 
                                f32_4 %66 = OpLoad %48 
                                f32_4 %67 = OpFAdd %65 %66 
                                              OpStore %48 %67 
                       Uniform f32_4* %73 = OpAccessChain %20 %23 %44 
                                f32_4 %74 = OpLoad %73 
                                f32_4 %75 = OpLoad %9 
                                f32_4 %76 = OpVectorShuffle %75 %75 3 3 3 3 
                                f32_4 %77 = OpFMul %74 %76 
                                f32_4 %78 = OpLoad %48 
                                f32_4 %79 = OpFAdd %77 %78 
                        Output f32_4* %81 = OpAccessChain %72 %22 
                                              OpStore %81 %79 
                                f32_2 %87 = OpLoad %86 
                                              OpStore vs_TEXCOORD0 %87 
                          Output f32* %89 = OpAccessChain %72 %22 %68 
                                  f32 %90 = OpLoad %89 
                                  f32 %91 = OpFNegate %90 
                          Output f32* %92 = OpAccessChain %72 %22 %68 
                                              OpStore %92 %91 
                                              OpReturn
                                              OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 486
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %27 %473 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpMemberDecorate %10 0 Offset 10 
                                                      OpMemberDecorate %10 1 Offset 10 
                                                      OpMemberDecorate %10 2 Offset 10 
                                                      OpMemberDecorate %10 3 Offset 10 
                                                      OpDecorate %10 Block 
                                                      OpDecorate %12 DescriptorSet 12 
                                                      OpDecorate %12 Binding 12 
                                                      OpDecorate vs_TEXCOORD0 Location 27 
                                                      OpDecorate %47 DescriptorSet 47 
                                                      OpDecorate %47 Binding 47 
                                                      OpDecorate %51 DescriptorSet 51 
                                                      OpDecorate %51 Binding 51 
                                                      OpDecorate %473 Location 473 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeStruct %7 %7 %7 %7 
                                              %11 = OpTypePointer Uniform %10 
Uniform struct {f32_4; f32_4; f32_4; f32_4;}* %12 = OpVariable Uniform 
                                              %13 = OpTypeInt 32 1 
                                          i32 %14 = OpConstant 3 
                                              %15 = OpTypeVector %6 2 
                                              %16 = OpTypePointer Uniform %7 
                                          i32 %21 = OpConstant 2 
                                              %26 = OpTypePointer Input %15 
                        Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                          i32 %34 = OpConstant 0 
                                              %45 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %46 = OpTypePointer UniformConstant %45 
         UniformConstant read_only Texture2D* %47 = OpVariable UniformConstant 
                                              %49 = OpTypeSampler 
                                              %50 = OpTypePointer UniformConstant %49 
                     UniformConstant sampler* %51 = OpVariable UniformConstant 
                                              %53 = OpTypeSampledImage %45 
                                              %58 = OpTypeVector %6 3 
                                          i32 %61 = OpConstant 1 
                               Private f32_4* %75 = OpVariable Private 
                                          f32 %87 = OpConstant 3.674022E-40 
                                          f32 %88 = OpConstant 3.674022E-40 
                                        f32_4 %89 = OpConstantComposite %87 %88 %88 %87 
                              Private f32_4* %103 = OpVariable Private 
                                         f32 %133 = OpConstant 3.674022E-40 
                                       f32_3 %134 = OpConstantComposite %133 %133 %133 
                                         f32 %140 = OpConstant 3.674022E-40 
                                       f32_3 %141 = OpConstantComposite %140 %140 %140 
                                         f32 %148 = OpConstant 3.674022E-40 
                                             %149 = OpTypeInt 32 0 
                                         u32 %150 = OpConstant 1 
                                             %151 = OpTypePointer Private %6 
                                         u32 %153 = OpConstant 2 
                              Private f32_4* %160 = OpVariable Private 
                              Private f32_4* %183 = OpVariable Private 
                                         f32 %276 = OpConstant 3.674022E-40 
                                       f32_3 %277 = OpConstantComposite %276 %276 %276 
                                             %284 = OpTypePointer Uniform %6 
                                         u32 %288 = OpConstant 0 
                                Private f32* %447 = OpVariable Private 
                                         f32 %455 = OpConstant 3.674022E-40 
                                         f32 %465 = OpConstant 3.674022E-40 
                                         f32 %470 = OpConstant 3.674022E-40 
                                             %472 = OpTypePointer Output %7 
                               Output f32_4* %473 = OpVariable Output 
                                         u32 %482 = OpConstant 3 
                                             %483 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                               Uniform f32_4* %17 = OpAccessChain %12 %14 
                                        f32_4 %18 = OpLoad %17 
                                        f32_2 %19 = OpVectorShuffle %18 %18 2 2 
                                        f32_2 %20 = OpFNegate %19 
                               Uniform f32_4* %22 = OpAccessChain %12 %21 
                                        f32_4 %23 = OpLoad %22 
                                        f32_2 %24 = OpVectorShuffle %23 %23 0 1 
                                        f32_2 %25 = OpFMul %20 %24 
                                        f32_2 %28 = OpLoad vs_TEXCOORD0 
                                        f32_2 %29 = OpFAdd %25 %28 
                                        f32_4 %30 = OpLoad %9 
                                        f32_4 %31 = OpVectorShuffle %30 %29 4 5 2 3 
                                                      OpStore %9 %31 
                                        f32_4 %32 = OpLoad %9 
                                        f32_2 %33 = OpVectorShuffle %32 %32 0 1 
                               Uniform f32_4* %35 = OpAccessChain %12 %34 
                                        f32_4 %36 = OpLoad %35 
                                        f32_2 %37 = OpVectorShuffle %36 %36 0 1 
                                        f32_2 %38 = OpFMul %33 %37 
                               Uniform f32_4* %39 = OpAccessChain %12 %34 
                                        f32_4 %40 = OpLoad %39 
                                        f32_2 %41 = OpVectorShuffle %40 %40 2 3 
                                        f32_2 %42 = OpFAdd %38 %41 
                                        f32_4 %43 = OpLoad %9 
                                        f32_4 %44 = OpVectorShuffle %43 %42 4 5 2 3 
                                                      OpStore %9 %44 
                          read_only Texture2D %48 = OpLoad %47 
                                      sampler %52 = OpLoad %51 
                   read_only Texture2DSampled %54 = OpSampledImage %48 %52 
                                        f32_4 %55 = OpLoad %9 
                                        f32_2 %56 = OpVectorShuffle %55 %55 0 1 
                                        f32_4 %57 = OpImageSampleImplicitLod %54 %56 
                                                      OpStore %9 %57 
                                        f32_4 %59 = OpLoad %9 
                                        f32_3 %60 = OpVectorShuffle %59 %59 0 1 2 
                               Uniform f32_4* %62 = OpAccessChain %12 %61 
                                        f32_4 %63 = OpLoad %62 
                                        f32_3 %64 = OpVectorShuffle %63 %63 0 0 0 
                                        f32_3 %65 = OpFMul %60 %64 
                                        f32_4 %66 = OpLoad %9 
                                        f32_4 %67 = OpVectorShuffle %66 %65 4 5 6 3 
                                                      OpStore %9 %67 
                                        f32_4 %68 = OpLoad %9 
                                        f32_3 %69 = OpVectorShuffle %68 %68 3 3 3 
                                        f32_4 %70 = OpLoad %9 
                                        f32_3 %71 = OpVectorShuffle %70 %70 0 1 2 
                                        f32_3 %72 = OpFMul %69 %71 
                                        f32_4 %73 = OpLoad %9 
                                        f32_4 %74 = OpVectorShuffle %73 %72 4 5 6 3 
                                                      OpStore %9 %74 
                               Uniform f32_4* %76 = OpAccessChain %12 %21 
                                        f32_4 %77 = OpLoad %76 
                                        f32_2 %78 = OpVectorShuffle %77 %77 0 1 
                               Uniform f32_4* %79 = OpAccessChain %12 %14 
                                        f32_4 %80 = OpLoad %79 
                                        f32_2 %81 = OpVectorShuffle %80 %80 2 2 
                                        f32_2 %82 = OpFMul %78 %81 
                                        f32_4 %83 = OpLoad %75 
                                        f32_4 %84 = OpVectorShuffle %83 %82 4 5 2 3 
                                                      OpStore %75 %84 
                                        f32_4 %85 = OpLoad %75 
                                        f32_4 %86 = OpVectorShuffle %85 %85 0 1 0 1 
                                        f32_4 %90 = OpFMul %86 %89 
                                        f32_2 %91 = OpLoad vs_TEXCOORD0 
                                        f32_4 %92 = OpVectorShuffle %91 %91 0 1 0 1 
                                        f32_4 %93 = OpFAdd %90 %92 
                                                      OpStore %75 %93 
                                        f32_4 %94 = OpLoad %75 
                               Uniform f32_4* %95 = OpAccessChain %12 %34 
                                        f32_4 %96 = OpLoad %95 
                                        f32_4 %97 = OpVectorShuffle %96 %96 0 1 0 1 
                                        f32_4 %98 = OpFMul %94 %97 
                               Uniform f32_4* %99 = OpAccessChain %12 %34 
                                       f32_4 %100 = OpLoad %99 
                                       f32_4 %101 = OpVectorShuffle %100 %100 2 3 2 3 
                                       f32_4 %102 = OpFAdd %98 %101 
                                                      OpStore %75 %102 
                         read_only Texture2D %104 = OpLoad %47 
                                     sampler %105 = OpLoad %51 
                  read_only Texture2DSampled %106 = OpSampledImage %104 %105 
                                       f32_4 %107 = OpLoad %75 
                                       f32_2 %108 = OpVectorShuffle %107 %107 0 1 
                                       f32_4 %109 = OpImageSampleImplicitLod %106 %108 
                                                      OpStore %103 %109 
                         read_only Texture2D %110 = OpLoad %47 
                                     sampler %111 = OpLoad %51 
                  read_only Texture2DSampled %112 = OpSampledImage %110 %111 
                                       f32_4 %113 = OpLoad %75 
                                       f32_2 %114 = OpVectorShuffle %113 %113 2 3 
                                       f32_4 %115 = OpImageSampleImplicitLod %112 %114 
                                                      OpStore %75 %115 
                                       f32_4 %116 = OpLoad %103 
                                       f32_3 %117 = OpVectorShuffle %116 %116 0 1 2 
                              Uniform f32_4* %118 = OpAccessChain %12 %61 
                                       f32_4 %119 = OpLoad %118 
                                       f32_3 %120 = OpVectorShuffle %119 %119 0 0 0 
                                       f32_3 %121 = OpFMul %117 %120 
                                       f32_4 %122 = OpLoad %103 
                                       f32_4 %123 = OpVectorShuffle %122 %121 4 5 6 3 
                                                      OpStore %103 %123 
                                       f32_4 %124 = OpLoad %103 
                                       f32_3 %125 = OpVectorShuffle %124 %124 3 3 3 
                                       f32_4 %126 = OpLoad %103 
                                       f32_3 %127 = OpVectorShuffle %126 %126 0 1 2 
                                       f32_3 %128 = OpFMul %125 %127 
                                       f32_4 %129 = OpLoad %103 
                                       f32_4 %130 = OpVectorShuffle %129 %128 4 5 6 3 
                                                      OpStore %103 %130 
                                       f32_4 %131 = OpLoad %103 
                                       f32_3 %132 = OpVectorShuffle %131 %131 0 1 2 
                                       f32_3 %135 = OpFMul %132 %134 
                                       f32_4 %136 = OpLoad %103 
                                       f32_4 %137 = OpVectorShuffle %136 %135 4 5 6 3 
                                                      OpStore %103 %137 
                                       f32_4 %138 = OpLoad %9 
                                       f32_3 %139 = OpVectorShuffle %138 %138 0 1 2 
                                       f32_3 %142 = OpFMul %139 %141 
                                       f32_4 %143 = OpLoad %103 
                                       f32_3 %144 = OpVectorShuffle %143 %143 0 1 2 
                                       f32_3 %145 = OpFAdd %142 %144 
                                       f32_4 %146 = OpLoad %9 
                                       f32_4 %147 = OpVectorShuffle %146 %145 4 5 6 3 
                                                      OpStore %9 %147 
                                Private f32* %152 = OpAccessChain %103 %150 
                                                      OpStore %152 %148 
                                Private f32* %154 = OpAccessChain %103 %153 
                                                      OpStore %154 %88 
                              Uniform f32_4* %155 = OpAccessChain %12 %14 
                                       f32_4 %156 = OpLoad %155 
                                       f32_2 %157 = OpVectorShuffle %156 %156 2 2 
                                       f32_4 %158 = OpLoad %103 
                                       f32_4 %159 = OpVectorShuffle %158 %157 4 1 2 5 
                                                      OpStore %103 %159 
                                       f32_4 %161 = OpLoad %103 
                                       f32_4 %162 = OpVectorShuffle %161 %161 1 0 0 1 
                              Uniform f32_4* %163 = OpAccessChain %12 %21 
                                       f32_4 %164 = OpLoad %163 
                                       f32_4 %165 = OpVectorShuffle %164 %164 0 1 0 1 
                                       f32_4 %166 = OpFMul %162 %165 
                                                      OpStore %160 %166 
                                       f32_4 %167 = OpLoad %160 
                                       f32_4 %168 = OpLoad %103 
                                       f32_4 %169 = OpVectorShuffle %168 %168 3 2 2 3 
                                       f32_4 %170 = OpFMul %167 %169 
                                       f32_2 %171 = OpLoad vs_TEXCOORD0 
                                       f32_4 %172 = OpVectorShuffle %171 %171 0 1 0 1 
                                       f32_4 %173 = OpFAdd %170 %172 
                                                      OpStore %103 %173 
                                       f32_4 %174 = OpLoad %103 
                              Uniform f32_4* %175 = OpAccessChain %12 %34 
                                       f32_4 %176 = OpLoad %175 
                                       f32_4 %177 = OpVectorShuffle %176 %176 0 1 0 1 
                                       f32_4 %178 = OpFMul %174 %177 
                              Uniform f32_4* %179 = OpAccessChain %12 %34 
                                       f32_4 %180 = OpLoad %179 
                                       f32_4 %181 = OpVectorShuffle %180 %180 2 3 2 3 
                                       f32_4 %182 = OpFAdd %178 %181 
                                                      OpStore %103 %182 
                         read_only Texture2D %184 = OpLoad %47 
                                     sampler %185 = OpLoad %51 
                  read_only Texture2DSampled %186 = OpSampledImage %184 %185 
                                       f32_4 %187 = OpLoad %103 
                                       f32_2 %188 = OpVectorShuffle %187 %187 0 1 
                                       f32_4 %189 = OpImageSampleImplicitLod %186 %188 
                                                      OpStore %183 %189 
                         read_only Texture2D %190 = OpLoad %47 
                                     sampler %191 = OpLoad %51 
                  read_only Texture2DSampled %192 = OpSampledImage %190 %191 
                                       f32_4 %193 = OpLoad %103 
                                       f32_2 %194 = OpVectorShuffle %193 %193 2 3 
                                       f32_4 %195 = OpImageSampleImplicitLod %192 %194 
                                                      OpStore %103 %195 
                                       f32_4 %196 = OpLoad %183 
                                       f32_3 %197 = OpVectorShuffle %196 %196 0 1 2 
                              Uniform f32_4* %198 = OpAccessChain %12 %61 
                                       f32_4 %199 = OpLoad %198 
                                       f32_3 %200 = OpVectorShuffle %199 %199 0 0 0 
                                       f32_3 %201 = OpFMul %197 %200 
                                       f32_4 %202 = OpLoad %183 
                                       f32_4 %203 = OpVectorShuffle %202 %201 4 5 6 3 
                                                      OpStore %183 %203 
                                       f32_4 %204 = OpLoad %183 
                                       f32_3 %205 = OpVectorShuffle %204 %204 3 3 3 
                                       f32_4 %206 = OpLoad %183 
                                       f32_3 %207 = OpVectorShuffle %206 %206 0 1 2 
                                       f32_3 %208 = OpFMul %205 %207 
                                       f32_4 %209 = OpLoad %183 
                                       f32_4 %210 = OpVectorShuffle %209 %208 4 5 6 3 
                                                      OpStore %183 %210 
                                       f32_4 %211 = OpLoad %183 
                                       f32_3 %212 = OpVectorShuffle %211 %211 0 1 2 
                                       f32_3 %213 = OpFMul %212 %141 
                                       f32_4 %214 = OpLoad %9 
                                       f32_3 %215 = OpVectorShuffle %214 %214 0 1 2 
                                       f32_3 %216 = OpFAdd %213 %215 
                                       f32_4 %217 = OpLoad %9 
                                       f32_4 %218 = OpVectorShuffle %217 %216 4 5 6 3 
                                                      OpStore %9 %218 
                                       f32_4 %219 = OpLoad %75 
                                       f32_3 %220 = OpVectorShuffle %219 %219 0 1 2 
                              Uniform f32_4* %221 = OpAccessChain %12 %61 
                                       f32_4 %222 = OpLoad %221 
                                       f32_3 %223 = OpVectorShuffle %222 %222 0 0 0 
                                       f32_3 %224 = OpFMul %220 %223 
                                       f32_4 %225 = OpLoad %75 
                                       f32_4 %226 = OpVectorShuffle %225 %224 4 5 6 3 
                                                      OpStore %75 %226 
                                       f32_4 %227 = OpLoad %75 
                                       f32_3 %228 = OpVectorShuffle %227 %227 3 3 3 
                                       f32_4 %229 = OpLoad %75 
                                       f32_3 %230 = OpVectorShuffle %229 %229 0 1 2 
                                       f32_3 %231 = OpFMul %228 %230 
                                       f32_4 %232 = OpLoad %75 
                                       f32_4 %233 = OpVectorShuffle %232 %231 4 5 6 3 
                                                      OpStore %75 %233 
                                       f32_4 %234 = OpLoad %75 
                                       f32_3 %235 = OpVectorShuffle %234 %234 0 1 2 
                                       f32_3 %236 = OpFMul %235 %134 
                                       f32_4 %237 = OpLoad %9 
                                       f32_3 %238 = OpVectorShuffle %237 %237 0 1 2 
                                       f32_3 %239 = OpFAdd %236 %238 
                                       f32_4 %240 = OpLoad %9 
                                       f32_4 %241 = OpVectorShuffle %240 %239 4 5 6 3 
                                                      OpStore %9 %241 
                                       f32_2 %242 = OpLoad vs_TEXCOORD0 
                              Uniform f32_4* %243 = OpAccessChain %12 %34 
                                       f32_4 %244 = OpLoad %243 
                                       f32_2 %245 = OpVectorShuffle %244 %244 0 1 
                                       f32_2 %246 = OpFMul %242 %245 
                              Uniform f32_4* %247 = OpAccessChain %12 %34 
                                       f32_4 %248 = OpLoad %247 
                                       f32_2 %249 = OpVectorShuffle %248 %248 2 3 
                                       f32_2 %250 = OpFAdd %246 %249 
                                       f32_4 %251 = OpLoad %75 
                                       f32_4 %252 = OpVectorShuffle %251 %250 4 5 2 3 
                                                      OpStore %75 %252 
                         read_only Texture2D %253 = OpLoad %47 
                                     sampler %254 = OpLoad %51 
                  read_only Texture2DSampled %255 = OpSampledImage %253 %254 
                                       f32_4 %256 = OpLoad %75 
                                       f32_2 %257 = OpVectorShuffle %256 %256 0 1 
                                       f32_4 %258 = OpImageSampleImplicitLod %255 %257 
                                                      OpStore %75 %258 
                                       f32_4 %259 = OpLoad %75 
                                       f32_3 %260 = OpVectorShuffle %259 %259 0 1 2 
                              Uniform f32_4* %261 = OpAccessChain %12 %61 
                                       f32_4 %262 = OpLoad %261 
                                       f32_3 %263 = OpVectorShuffle %262 %262 0 0 0 
                                       f32_3 %264 = OpFMul %260 %263 
                                       f32_4 %265 = OpLoad %75 
                                       f32_4 %266 = OpVectorShuffle %265 %264 4 5 6 3 
                                                      OpStore %75 %266 
                                       f32_4 %267 = OpLoad %75 
                                       f32_3 %268 = OpVectorShuffle %267 %267 3 3 3 
                                       f32_4 %269 = OpLoad %75 
                                       f32_3 %270 = OpVectorShuffle %269 %269 0 1 2 
                                       f32_3 %271 = OpFMul %268 %270 
                                       f32_4 %272 = OpLoad %75 
                                       f32_4 %273 = OpVectorShuffle %272 %271 4 5 6 3 
                                                      OpStore %75 %273 
                                       f32_4 %274 = OpLoad %75 
                                       f32_3 %275 = OpVectorShuffle %274 %274 0 1 2 
                                       f32_3 %278 = OpFMul %275 %277 
                                       f32_4 %279 = OpLoad %9 
                                       f32_3 %280 = OpVectorShuffle %279 %279 0 1 2 
                                       f32_3 %281 = OpFAdd %278 %280 
                                       f32_4 %282 = OpLoad %9 
                                       f32_4 %283 = OpVectorShuffle %282 %281 4 5 6 3 
                                                      OpStore %9 %283 
                                Uniform f32* %285 = OpAccessChain %12 %14 %153 
                                         f32 %286 = OpLoad %285 
                                Private f32* %287 = OpAccessChain %75 %150 
                                                      OpStore %287 %286 
                                Private f32* %289 = OpAccessChain %75 %288 
                                                      OpStore %289 %87 
                                       f32_4 %290 = OpLoad %160 
                                       f32_4 %291 = OpLoad %75 
                                       f32_4 %292 = OpVectorShuffle %291 %291 1 0 0 1 
                                       f32_4 %293 = OpFMul %290 %292 
                                       f32_2 %294 = OpLoad vs_TEXCOORD0 
                                       f32_4 %295 = OpVectorShuffle %294 %294 0 1 0 1 
                                       f32_4 %296 = OpFAdd %293 %295 
                                                      OpStore %75 %296 
                                       f32_4 %297 = OpLoad %75 
                              Uniform f32_4* %298 = OpAccessChain %12 %34 
                                       f32_4 %299 = OpLoad %298 
                                       f32_4 %300 = OpVectorShuffle %299 %299 0 1 0 1 
                                       f32_4 %301 = OpFMul %297 %300 
                              Uniform f32_4* %302 = OpAccessChain %12 %34 
                                       f32_4 %303 = OpLoad %302 
                                       f32_4 %304 = OpVectorShuffle %303 %303 2 3 2 3 
                                       f32_4 %305 = OpFAdd %301 %304 
                                                      OpStore %75 %305 
                         read_only Texture2D %306 = OpLoad %47 
                                     sampler %307 = OpLoad %51 
                  read_only Texture2DSampled %308 = OpSampledImage %306 %307 
                                       f32_4 %309 = OpLoad %75 
                                       f32_2 %310 = OpVectorShuffle %309 %309 0 1 
                                       f32_4 %311 = OpImageSampleImplicitLod %308 %310 
                                                      OpStore %160 %311 
                         read_only Texture2D %312 = OpLoad %47 
                                     sampler %313 = OpLoad %51 
                  read_only Texture2DSampled %314 = OpSampledImage %312 %313 
                                       f32_4 %315 = OpLoad %75 
                                       f32_2 %316 = OpVectorShuffle %315 %315 2 3 
                                       f32_4 %317 = OpImageSampleImplicitLod %314 %316 
                                                      OpStore %75 %317 
                                       f32_4 %318 = OpLoad %160 
                                       f32_3 %319 = OpVectorShuffle %318 %318 0 1 2 
                              Uniform f32_4* %320 = OpAccessChain %12 %61 
                                       f32_4 %321 = OpLoad %320 
                                       f32_3 %322 = OpVectorShuffle %321 %321 0 0 0 
                                       f32_3 %323 = OpFMul %319 %322 
                                       f32_4 %324 = OpLoad %160 
                                       f32_4 %325 = OpVectorShuffle %324 %323 4 5 6 3 
                                                      OpStore %160 %325 
                                       f32_4 %326 = OpLoad %160 
                                       f32_3 %327 = OpVectorShuffle %326 %326 3 3 3 
                                       f32_4 %328 = OpLoad %160 
                                       f32_3 %329 = OpVectorShuffle %328 %328 0 1 2 
                                       f32_3 %330 = OpFMul %327 %329 
                                       f32_4 %331 = OpLoad %160 
                                       f32_4 %332 = OpVectorShuffle %331 %330 4 5 6 3 
                                                      OpStore %160 %332 
                                       f32_4 %333 = OpLoad %160 
                                       f32_3 %334 = OpVectorShuffle %333 %333 0 1 2 
                                       f32_3 %335 = OpFMul %334 %134 
                                       f32_4 %336 = OpLoad %9 
                                       f32_3 %337 = OpVectorShuffle %336 %336 0 1 2 
                                       f32_3 %338 = OpFAdd %335 %337 
                                       f32_4 %339 = OpLoad %9 
                                       f32_4 %340 = OpVectorShuffle %339 %338 4 5 6 3 
                                                      OpStore %9 %340 
                                       f32_4 %341 = OpLoad %103 
                                       f32_3 %342 = OpVectorShuffle %341 %341 0 1 2 
                              Uniform f32_4* %343 = OpAccessChain %12 %61 
                                       f32_4 %344 = OpLoad %343 
                                       f32_3 %345 = OpVectorShuffle %344 %344 0 0 0 
                                       f32_3 %346 = OpFMul %342 %345 
                                       f32_4 %347 = OpLoad %103 
                                       f32_4 %348 = OpVectorShuffle %347 %346 4 5 6 3 
                                                      OpStore %103 %348 
                                       f32_4 %349 = OpLoad %103 
                                       f32_3 %350 = OpVectorShuffle %349 %349 3 3 3 
                                       f32_4 %351 = OpLoad %103 
                                       f32_3 %352 = OpVectorShuffle %351 %351 0 1 2 
                                       f32_3 %353 = OpFMul %350 %352 
                                       f32_4 %354 = OpLoad %103 
                                       f32_4 %355 = OpVectorShuffle %354 %353 4 5 6 3 
                                                      OpStore %103 %355 
                                       f32_4 %356 = OpLoad %103 
                                       f32_3 %357 = OpVectorShuffle %356 %356 0 1 2 
                                       f32_3 %358 = OpFMul %357 %141 
                                       f32_4 %359 = OpLoad %9 
                                       f32_3 %360 = OpVectorShuffle %359 %359 0 1 2 
                                       f32_3 %361 = OpFAdd %358 %360 
                                       f32_4 %362 = OpLoad %9 
                                       f32_4 %363 = OpVectorShuffle %362 %361 4 5 6 3 
                                                      OpStore %9 %363 
                                       f32_4 %364 = OpLoad %75 
                                       f32_3 %365 = OpVectorShuffle %364 %364 0 1 2 
                              Uniform f32_4* %366 = OpAccessChain %12 %61 
                                       f32_4 %367 = OpLoad %366 
                                       f32_3 %368 = OpVectorShuffle %367 %367 0 0 0 
                                       f32_3 %369 = OpFMul %365 %368 
                                       f32_4 %370 = OpLoad %75 
                                       f32_4 %371 = OpVectorShuffle %370 %369 4 5 6 3 
                                                      OpStore %75 %371 
                                       f32_4 %372 = OpLoad %75 
                                       f32_3 %373 = OpVectorShuffle %372 %372 3 3 3 
                                       f32_4 %374 = OpLoad %75 
                                       f32_3 %375 = OpVectorShuffle %374 %374 0 1 2 
                                       f32_3 %376 = OpFMul %373 %375 
                                       f32_4 %377 = OpLoad %75 
                                       f32_4 %378 = OpVectorShuffle %377 %376 4 5 6 3 
                                                      OpStore %75 %378 
                                       f32_4 %379 = OpLoad %75 
                                       f32_3 %380 = OpVectorShuffle %379 %379 0 1 2 
                                       f32_3 %381 = OpFMul %380 %134 
                                       f32_4 %382 = OpLoad %9 
                                       f32_3 %383 = OpVectorShuffle %382 %382 0 1 2 
                                       f32_3 %384 = OpFAdd %381 %383 
                                       f32_4 %385 = OpLoad %9 
                                       f32_4 %386 = OpVectorShuffle %385 %384 4 5 6 3 
                                                      OpStore %9 %386 
                              Uniform f32_4* %387 = OpAccessChain %12 %14 
                                       f32_4 %388 = OpLoad %387 
                                       f32_2 %389 = OpVectorShuffle %388 %388 2 2 
                              Uniform f32_4* %390 = OpAccessChain %12 %21 
                                       f32_4 %391 = OpLoad %390 
                                       f32_2 %392 = OpVectorShuffle %391 %391 0 1 
                                       f32_2 %393 = OpFMul %389 %392 
                                       f32_2 %394 = OpLoad vs_TEXCOORD0 
                                       f32_2 %395 = OpFAdd %393 %394 
                                       f32_4 %396 = OpLoad %75 
                                       f32_4 %397 = OpVectorShuffle %396 %395 4 5 2 3 
                                                      OpStore %75 %397 
                                       f32_4 %398 = OpLoad %75 
                                       f32_2 %399 = OpVectorShuffle %398 %398 0 1 
                              Uniform f32_4* %400 = OpAccessChain %12 %34 
                                       f32_4 %401 = OpLoad %400 
                                       f32_2 %402 = OpVectorShuffle %401 %401 0 1 
                                       f32_2 %403 = OpFMul %399 %402 
                              Uniform f32_4* %404 = OpAccessChain %12 %34 
                                       f32_4 %405 = OpLoad %404 
                                       f32_2 %406 = OpVectorShuffle %405 %405 2 3 
                                       f32_2 %407 = OpFAdd %403 %406 
                                       f32_4 %408 = OpLoad %75 
                                       f32_4 %409 = OpVectorShuffle %408 %407 4 5 2 3 
                                                      OpStore %75 %409 
                         read_only Texture2D %410 = OpLoad %47 
                                     sampler %411 = OpLoad %51 
                  read_only Texture2DSampled %412 = OpSampledImage %410 %411 
                                       f32_4 %413 = OpLoad %75 
                                       f32_2 %414 = OpVectorShuffle %413 %413 0 1 
                                       f32_4 %415 = OpImageSampleImplicitLod %412 %414 
                                                      OpStore %75 %415 
                                       f32_4 %416 = OpLoad %75 
                                       f32_3 %417 = OpVectorShuffle %416 %416 0 1 2 
                              Uniform f32_4* %418 = OpAccessChain %12 %61 
                                       f32_4 %419 = OpLoad %418 
                                       f32_3 %420 = OpVectorShuffle %419 %419 0 0 0 
                                       f32_3 %421 = OpFMul %417 %420 
                                       f32_4 %422 = OpLoad %75 
                                       f32_4 %423 = OpVectorShuffle %422 %421 4 5 6 3 
                                                      OpStore %75 %423 
                                       f32_4 %424 = OpLoad %75 
                                       f32_3 %425 = OpVectorShuffle %424 %424 3 3 3 
                                       f32_4 %426 = OpLoad %75 
                                       f32_3 %427 = OpVectorShuffle %426 %426 0 1 2 
                                       f32_3 %428 = OpFMul %425 %427 
                                       f32_4 %429 = OpLoad %75 
                                       f32_4 %430 = OpVectorShuffle %429 %428 4 5 6 3 
                                                      OpStore %75 %430 
                                       f32_4 %431 = OpLoad %75 
                                       f32_3 %432 = OpVectorShuffle %431 %431 0 1 2 
                                       f32_3 %433 = OpFMul %432 %141 
                                       f32_4 %434 = OpLoad %9 
                                       f32_3 %435 = OpVectorShuffle %434 %434 0 1 2 
                                       f32_3 %436 = OpFAdd %433 %435 
                                       f32_4 %437 = OpLoad %9 
                                       f32_4 %438 = OpVectorShuffle %437 %436 4 5 6 3 
                                                      OpStore %9 %438 
                                       f32_4 %439 = OpLoad %9 
                                       f32_3 %440 = OpVectorShuffle %439 %439 0 1 2 
                              Uniform f32_4* %441 = OpAccessChain %12 %61 
                                       f32_4 %442 = OpLoad %441 
                                       f32_3 %443 = OpVectorShuffle %442 %442 1 1 1 
                                       f32_3 %444 = OpFMul %440 %443 
                                       f32_4 %445 = OpLoad %9 
                                       f32_4 %446 = OpVectorShuffle %445 %444 4 5 6 3 
                                                      OpStore %9 %446 
                                Private f32* %448 = OpAccessChain %9 %150 
                                         f32 %449 = OpLoad %448 
                                Private f32* %450 = OpAccessChain %9 %288 
                                         f32 %451 = OpLoad %450 
                                         f32 %452 = OpExtInst %1 40 %449 %451 
                                                      OpStore %447 %452 
                                Private f32* %453 = OpAccessChain %9 %153 
                                         f32 %454 = OpLoad %453 
                                         f32 %456 = OpExtInst %1 40 %454 %455 
                                Private f32* %457 = OpAccessChain %75 %288 
                                                      OpStore %457 %456 
                                         f32 %458 = OpLoad %447 
                                Private f32* %459 = OpAccessChain %75 %288 
                                         f32 %460 = OpLoad %459 
                                         f32 %461 = OpExtInst %1 40 %458 %460 
                                                      OpStore %447 %461 
                                         f32 %462 = OpLoad %447 
                                         f32 %463 = OpExtInst %1 37 %462 %148 
                                                      OpStore %447 %463 
                                         f32 %464 = OpLoad %447 
                                         f32 %466 = OpFMul %464 %465 
                                                      OpStore %447 %466 
                                         f32 %467 = OpLoad %447 
                                         f32 %468 = OpExtInst %1 9 %467 
                                                      OpStore %447 %468 
                                         f32 %469 = OpLoad %447 
                                         f32 %471 = OpFMul %469 %470 
                                                      OpStore %447 %471 
                                       f32_4 %474 = OpLoad %9 
                                       f32_3 %475 = OpVectorShuffle %474 %474 0 1 2 
                                         f32 %476 = OpLoad %447 
                                       f32_3 %477 = OpCompositeConstruct %476 %476 %476 
                                       f32_3 %478 = OpFDiv %475 %477 
                                       f32_4 %479 = OpLoad %473 
                                       f32_4 %480 = OpVectorShuffle %479 %478 4 5 6 3 
                                                      OpStore %473 %480 
                                         f32 %481 = OpLoad %447 
                                 Output f32* %484 = OpAccessChain %473 %482 
                                                      OpStore %484 %481 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "AB_HIGH_PRECISION" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "AB_HIGH_PRECISION" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in  vec4 in_POSITION0;
in  vec2 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _MainTex_TexelSize;
uniform 	vec4 _BloomParams;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
in  vec2 vs_TEXCOORD0;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0.xy = (-_MainTex_TexelSize.xy) * _BloomParams.zz + vs_TEXCOORD0.xy;
    u_xlat0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0 = texture(_MainTex, u_xlat0.xy);
    u_xlat1 = _MainTex_TexelSize.xyxy * vec4(0.0, -1.0, 1.0, -1.0);
    u_xlat1 = u_xlat1 * _BloomParams.zzzz + vs_TEXCOORD0.xyxy;
    u_xlat1 = u_xlat1 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
    u_xlat2 = texture(_MainTex, u_xlat1.xy);
    u_xlat1 = texture(_MainTex, u_xlat1.zw);
    u_xlat2.xyz = u_xlat2.xyz * vec3(0.125, 0.125, 0.125);
    u_xlat0.xyz = u_xlat0.xyz * vec3(0.0625, 0.0625, 0.0625) + u_xlat2.xyz;
    u_xlat0.xyz = u_xlat1.xyz * vec3(0.0625, 0.0625, 0.0625) + u_xlat0.xyz;
    u_xlat1 = _MainTex_TexelSize.xyxy * vec4(-1.0, 0.0, 1.0, 0.0);
    u_xlat1 = u_xlat1 * _BloomParams.zzzz + vs_TEXCOORD0.xyxy;
    u_xlat1 = u_xlat1 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
    u_xlat2 = texture(_MainTex, u_xlat1.xy);
    u_xlat1 = texture(_MainTex, u_xlat1.zw);
    u_xlat0.xyz = u_xlat2.xyz * vec3(0.125, 0.125, 0.125) + u_xlat0.xyz;
    u_xlat2.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat2 = texture(_MainTex, u_xlat2.xy);
    u_xlat0.xyz = u_xlat2.xyz * vec3(0.25, 0.25, 0.25) + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat1.xyz * vec3(0.125, 0.125, 0.125) + u_xlat0.xyz;
    u_xlat1 = _MainTex_TexelSize.xyxy * vec4(-1.0, 1.0, 0.0, 1.0);
    u_xlat1 = u_xlat1 * _BloomParams.zzzz + vs_TEXCOORD0.xyxy;
    u_xlat1 = u_xlat1 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
    u_xlat2 = texture(_MainTex, u_xlat1.xy);
    u_xlat1 = texture(_MainTex, u_xlat1.zw);
    u_xlat0.xyz = u_xlat2.xyz * vec3(0.0625, 0.0625, 0.0625) + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat1.xyz * vec3(0.125, 0.125, 0.125) + u_xlat0.xyz;
    u_xlat1.xy = _MainTex_TexelSize.xy * _BloomParams.zz + vs_TEXCOORD0.xy;
    u_xlat1.xy = u_xlat1.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1 = texture(_MainTex, u_xlat1.xy);
    SV_Target0.xyz = u_xlat1.xyz * vec3(0.0625, 0.0625, 0.0625) + u_xlat0.xyz;
    SV_Target0.w = 0.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "AB_HIGH_PRECISION" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 94
; Schema: 0
                                              OpCapability Shader 
                                       %1 = OpExtInstImport "GLSL.std.450" 
                                              OpMemoryModel Logical GLSL450 
                                              OpEntryPoint Vertex %4 "main" %11 %72 %84 %86 
                                              OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                              OpDecorate %11 Location 11 
                                              OpDecorate %16 ArrayStride 16 
                                              OpDecorate %17 ArrayStride 17 
                                              OpMemberDecorate %18 0 Offset 18 
                                              OpMemberDecorate %18 1 Offset 18 
                                              OpDecorate %18 Block 
                                              OpDecorate %20 DescriptorSet 20 
                                              OpDecorate %20 Binding 20 
                                              OpMemberDecorate %70 0 BuiltIn 70 
                                              OpMemberDecorate %70 1 BuiltIn 70 
                                              OpMemberDecorate %70 2 BuiltIn 70 
                                              OpDecorate %70 Block 
                                              OpDecorate vs_TEXCOORD0 Location 84 
                                              OpDecorate %86 Location 86 
                                       %2 = OpTypeVoid 
                                       %3 = OpTypeFunction %2 
                                       %6 = OpTypeFloat 32 
                                       %7 = OpTypeVector %6 4 
                                       %8 = OpTypePointer Private %7 
                        Private f32_4* %9 = OpVariable Private 
                                      %10 = OpTypePointer Input %7 
                         Input f32_4* %11 = OpVariable Input 
                                      %14 = OpTypeInt 32 0 
                                  u32 %15 = OpConstant 4 
                                      %16 = OpTypeArray %7 %15 
                                      %17 = OpTypeArray %7 %15 
                                      %18 = OpTypeStruct %16 %17 
                                      %19 = OpTypePointer Uniform %18 
Uniform struct {f32_4[4]; f32_4[4];}* %20 = OpVariable Uniform 
                                      %21 = OpTypeInt 32 1 
                                  i32 %22 = OpConstant 0 
                                  i32 %23 = OpConstant 1 
                                      %24 = OpTypePointer Uniform %7 
                                  i32 %35 = OpConstant 2 
                                  i32 %44 = OpConstant 3 
                       Private f32_4* %48 = OpVariable Private 
                                  u32 %68 = OpConstant 1 
                                      %69 = OpTypeArray %6 %68 
                                      %70 = OpTypeStruct %7 %6 %69 
                                      %71 = OpTypePointer Output %70 
 Output struct {f32_4; f32; f32[1];}* %72 = OpVariable Output 
                                      %80 = OpTypePointer Output %7 
                                      %82 = OpTypeVector %6 2 
                                      %83 = OpTypePointer Output %82 
               Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                      %85 = OpTypePointer Input %82 
                         Input f32_2* %86 = OpVariable Input 
                                      %88 = OpTypePointer Output %6 
                                  void %4 = OpFunction None %3 
                                       %5 = OpLabel 
                                f32_4 %12 = OpLoad %11 
                                f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                       Uniform f32_4* %25 = OpAccessChain %20 %22 %23 
                                f32_4 %26 = OpLoad %25 
                                f32_4 %27 = OpFMul %13 %26 
                                              OpStore %9 %27 
                       Uniform f32_4* %28 = OpAccessChain %20 %22 %22 
                                f32_4 %29 = OpLoad %28 
                                f32_4 %30 = OpLoad %11 
                                f32_4 %31 = OpVectorShuffle %30 %30 0 0 0 0 
                                f32_4 %32 = OpFMul %29 %31 
                                f32_4 %33 = OpLoad %9 
                                f32_4 %34 = OpFAdd %32 %33 
                                              OpStore %9 %34 
                       Uniform f32_4* %36 = OpAccessChain %20 %22 %35 
                                f32_4 %37 = OpLoad %36 
                                f32_4 %38 = OpLoad %11 
                                f32_4 %39 = OpVectorShuffle %38 %38 2 2 2 2 
                                f32_4 %40 = OpFMul %37 %39 
                                f32_4 %41 = OpLoad %9 
                                f32_4 %42 = OpFAdd %40 %41 
                                              OpStore %9 %42 
                                f32_4 %43 = OpLoad %9 
                       Uniform f32_4* %45 = OpAccessChain %20 %22 %44 
                                f32_4 %46 = OpLoad %45 
                                f32_4 %47 = OpFAdd %43 %46 
                                              OpStore %9 %47 
                                f32_4 %49 = OpLoad %9 
                                f32_4 %50 = OpVectorShuffle %49 %49 1 1 1 1 
                       Uniform f32_4* %51 = OpAccessChain %20 %23 %23 
                                f32_4 %52 = OpLoad %51 
                                f32_4 %53 = OpFMul %50 %52 
                                              OpStore %48 %53 
                       Uniform f32_4* %54 = OpAccessChain %20 %23 %22 
                                f32_4 %55 = OpLoad %54 
                                f32_4 %56 = OpLoad %9 
                                f32_4 %57 = OpVectorShuffle %56 %56 0 0 0 0 
                                f32_4 %58 = OpFMul %55 %57 
                                f32_4 %59 = OpLoad %48 
                                f32_4 %60 = OpFAdd %58 %59 
                                              OpStore %48 %60 
                       Uniform f32_4* %61 = OpAccessChain %20 %23 %35 
                                f32_4 %62 = OpLoad %61 
                                f32_4 %63 = OpLoad %9 
                                f32_4 %64 = OpVectorShuffle %63 %63 2 2 2 2 
                                f32_4 %65 = OpFMul %62 %64 
                                f32_4 %66 = OpLoad %48 
                                f32_4 %67 = OpFAdd %65 %66 
                                              OpStore %48 %67 
                       Uniform f32_4* %73 = OpAccessChain %20 %23 %44 
                                f32_4 %74 = OpLoad %73 
                                f32_4 %75 = OpLoad %9 
                                f32_4 %76 = OpVectorShuffle %75 %75 3 3 3 3 
                                f32_4 %77 = OpFMul %74 %76 
                                f32_4 %78 = OpLoad %48 
                                f32_4 %79 = OpFAdd %77 %78 
                        Output f32_4* %81 = OpAccessChain %72 %22 
                                              OpStore %81 %79 
                                f32_2 %87 = OpLoad %86 
                                              OpStore vs_TEXCOORD0 %87 
                          Output f32* %89 = OpAccessChain %72 %22 %68 
                                  f32 %90 = OpLoad %89 
                                  f32 %91 = OpFNegate %90 
                          Output f32* %92 = OpAccessChain %72 %22 %68 
                                              OpStore %92 %91 
                                              OpReturn
                                              OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 310
; Schema: 0
                                               OpCapability Shader 
                                        %1 = OpExtInstImport "GLSL.std.450" 
                                               OpMemoryModel Logical GLSL450 
                                               OpEntryPoint Fragment %4 "main" %28 %298 
                                               OpExecutionMode %4 OriginUpperLeft 
                                               OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                               OpMemberDecorate %11 0 Offset 11 
                                               OpMemberDecorate %11 1 Offset 11 
                                               OpMemberDecorate %11 2 Offset 11 
                                               OpDecorate %11 Block 
                                               OpDecorate %13 DescriptorSet 13 
                                               OpDecorate %13 Binding 13 
                                               OpDecorate vs_TEXCOORD0 Location 28 
                                               OpDecorate %48 DescriptorSet 48 
                                               OpDecorate %48 Binding 48 
                                               OpDecorate %52 DescriptorSet 52 
                                               OpDecorate %52 Binding 52 
                                               OpDecorate %298 Location 298 
                                        %2 = OpTypeVoid 
                                        %3 = OpTypeFunction %2 
                                        %6 = OpTypeFloat 32 
                                        %7 = OpTypeVector %6 3 
                                        %8 = OpTypePointer Private %7 
                         Private f32_3* %9 = OpVariable Private 
                                       %10 = OpTypeVector %6 4 
                                       %11 = OpTypeStruct %10 %10 %10 
                                       %12 = OpTypePointer Uniform %11 
Uniform struct {f32_4; f32_4; f32_4;}* %13 = OpVariable Uniform 
                                       %14 = OpTypeInt 32 1 
                                   i32 %15 = OpConstant 2 
                                       %16 = OpTypeVector %6 2 
                                       %17 = OpTypePointer Uniform %10 
                                   i32 %22 = OpConstant 1 
                                       %27 = OpTypePointer Input %16 
                 Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                   i32 %35 = OpConstant 0 
                                       %46 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                       %47 = OpTypePointer UniformConstant %46 
  UniformConstant read_only Texture2D* %48 = OpVariable UniformConstant 
                                       %50 = OpTypeSampler 
                                       %51 = OpTypePointer UniformConstant %50 
              UniformConstant sampler* %52 = OpVariable UniformConstant 
                                       %54 = OpTypeSampledImage %46 
                                       %60 = OpTypePointer Private %10 
                        Private f32_4* %61 = OpVariable Private 
                                   f32 %73 = OpConstant 3.674022E-40 
                                   f32 %74 = OpConstant 3.674022E-40 
                                 f32_4 %75 = OpConstantComposite %73 %74 %74 %73 
                        Private f32_4* %89 = OpVariable Private 
                                  f32 %110 = OpConstant 3.674022E-40 
                                f32_3 %111 = OpConstantComposite %110 %110 %110 
                                  f32 %116 = OpConstant 3.674022E-40 
                                f32_3 %117 = OpConstantComposite %116 %116 %116 
                                  f32 %122 = OpConstant 3.674022E-40 
                                      %123 = OpTypeInt 32 0 
                                  u32 %124 = OpConstant 1 
                                      %125 = OpTypePointer Private %6 
                                  u32 %127 = OpConstant 2 
                       Private f32_4* %134 = OpVariable Private 
                       Private f32_3* %157 = OpVariable Private 
                                  f32 %205 = OpConstant 3.674022E-40 
                                f32_3 %206 = OpConstantComposite %205 %205 %205 
                                      %210 = OpTypePointer Uniform %6 
                                  u32 %214 = OpConstant 0 
                                      %297 = OpTypePointer Output %10 
                        Output f32_4* %298 = OpVariable Output 
                                  u32 %306 = OpConstant 3 
                                      %307 = OpTypePointer Output %6 
                                   void %4 = OpFunction None %3 
                                        %5 = OpLabel 
                        Uniform f32_4* %18 = OpAccessChain %13 %15 
                                 f32_4 %19 = OpLoad %18 
                                 f32_2 %20 = OpVectorShuffle %19 %19 2 2 
                                 f32_2 %21 = OpFNegate %20 
                        Uniform f32_4* %23 = OpAccessChain %13 %22 
                                 f32_4 %24 = OpLoad %23 
                                 f32_2 %25 = OpVectorShuffle %24 %24 0 1 
                                 f32_2 %26 = OpFMul %21 %25 
                                 f32_2 %29 = OpLoad vs_TEXCOORD0 
                                 f32_2 %30 = OpFAdd %26 %29 
                                 f32_3 %31 = OpLoad %9 
                                 f32_3 %32 = OpVectorShuffle %31 %30 3 4 2 
                                               OpStore %9 %32 
                                 f32_3 %33 = OpLoad %9 
                                 f32_2 %34 = OpVectorShuffle %33 %33 0 1 
                        Uniform f32_4* %36 = OpAccessChain %13 %35 
                                 f32_4 %37 = OpLoad %36 
                                 f32_2 %38 = OpVectorShuffle %37 %37 0 1 
                                 f32_2 %39 = OpFMul %34 %38 
                        Uniform f32_4* %40 = OpAccessChain %13 %35 
                                 f32_4 %41 = OpLoad %40 
                                 f32_2 %42 = OpVectorShuffle %41 %41 2 3 
                                 f32_2 %43 = OpFAdd %39 %42 
                                 f32_3 %44 = OpLoad %9 
                                 f32_3 %45 = OpVectorShuffle %44 %43 3 4 2 
                                               OpStore %9 %45 
                   read_only Texture2D %49 = OpLoad %48 
                               sampler %53 = OpLoad %52 
            read_only Texture2DSampled %55 = OpSampledImage %49 %53 
                                 f32_3 %56 = OpLoad %9 
                                 f32_2 %57 = OpVectorShuffle %56 %56 0 1 
                                 f32_4 %58 = OpImageSampleImplicitLod %55 %57 
                                 f32_3 %59 = OpVectorShuffle %58 %58 0 1 2 
                                               OpStore %9 %59 
                        Uniform f32_4* %62 = OpAccessChain %13 %22 
                                 f32_4 %63 = OpLoad %62 
                                 f32_2 %64 = OpVectorShuffle %63 %63 0 1 
                        Uniform f32_4* %65 = OpAccessChain %13 %15 
                                 f32_4 %66 = OpLoad %65 
                                 f32_2 %67 = OpVectorShuffle %66 %66 2 2 
                                 f32_2 %68 = OpFMul %64 %67 
                                 f32_4 %69 = OpLoad %61 
                                 f32_4 %70 = OpVectorShuffle %69 %68 4 5 2 3 
                                               OpStore %61 %70 
                                 f32_4 %71 = OpLoad %61 
                                 f32_4 %72 = OpVectorShuffle %71 %71 0 1 0 1 
                                 f32_4 %76 = OpFMul %72 %75 
                                 f32_2 %77 = OpLoad vs_TEXCOORD0 
                                 f32_4 %78 = OpVectorShuffle %77 %77 0 1 0 1 
                                 f32_4 %79 = OpFAdd %76 %78 
                                               OpStore %61 %79 
                                 f32_4 %80 = OpLoad %61 
                        Uniform f32_4* %81 = OpAccessChain %13 %35 
                                 f32_4 %82 = OpLoad %81 
                                 f32_4 %83 = OpVectorShuffle %82 %82 0 1 0 1 
                                 f32_4 %84 = OpFMul %80 %83 
                        Uniform f32_4* %85 = OpAccessChain %13 %35 
                                 f32_4 %86 = OpLoad %85 
                                 f32_4 %87 = OpVectorShuffle %86 %86 2 3 2 3 
                                 f32_4 %88 = OpFAdd %84 %87 
                                               OpStore %61 %88 
                   read_only Texture2D %90 = OpLoad %48 
                               sampler %91 = OpLoad %52 
            read_only Texture2DSampled %92 = OpSampledImage %90 %91 
                                 f32_4 %93 = OpLoad %61 
                                 f32_2 %94 = OpVectorShuffle %93 %93 0 1 
                                 f32_4 %95 = OpImageSampleImplicitLod %92 %94 
                                 f32_3 %96 = OpVectorShuffle %95 %95 0 1 2 
                                 f32_4 %97 = OpLoad %89 
                                 f32_4 %98 = OpVectorShuffle %97 %96 4 5 6 3 
                                               OpStore %89 %98 
                   read_only Texture2D %99 = OpLoad %48 
                              sampler %100 = OpLoad %52 
           read_only Texture2DSampled %101 = OpSampledImage %99 %100 
                                f32_4 %102 = OpLoad %61 
                                f32_2 %103 = OpVectorShuffle %102 %102 2 3 
                                f32_4 %104 = OpImageSampleImplicitLod %101 %103 
                                f32_3 %105 = OpVectorShuffle %104 %104 0 1 2 
                                f32_4 %106 = OpLoad %61 
                                f32_4 %107 = OpVectorShuffle %106 %105 4 5 6 3 
                                               OpStore %61 %107 
                                f32_4 %108 = OpLoad %89 
                                f32_3 %109 = OpVectorShuffle %108 %108 0 1 2 
                                f32_3 %112 = OpFMul %109 %111 
                                f32_4 %113 = OpLoad %89 
                                f32_4 %114 = OpVectorShuffle %113 %112 4 5 6 3 
                                               OpStore %89 %114 
                                f32_3 %115 = OpLoad %9 
                                f32_3 %118 = OpFMul %115 %117 
                                f32_4 %119 = OpLoad %89 
                                f32_3 %120 = OpVectorShuffle %119 %119 0 1 2 
                                f32_3 %121 = OpFAdd %118 %120 
                                               OpStore %9 %121 
                         Private f32* %126 = OpAccessChain %89 %124 
                                               OpStore %126 %122 
                         Private f32* %128 = OpAccessChain %89 %127 
                                               OpStore %128 %74 
                       Uniform f32_4* %129 = OpAccessChain %13 %15 
                                f32_4 %130 = OpLoad %129 
                                f32_2 %131 = OpVectorShuffle %130 %130 2 2 
                                f32_4 %132 = OpLoad %89 
                                f32_4 %133 = OpVectorShuffle %132 %131 4 1 2 5 
                                               OpStore %89 %133 
                                f32_4 %135 = OpLoad %89 
                                f32_4 %136 = OpVectorShuffle %135 %135 1 0 0 1 
                       Uniform f32_4* %137 = OpAccessChain %13 %22 
                                f32_4 %138 = OpLoad %137 
                                f32_4 %139 = OpVectorShuffle %138 %138 0 1 0 1 
                                f32_4 %140 = OpFMul %136 %139 
                                               OpStore %134 %140 
                                f32_4 %141 = OpLoad %134 
                                f32_4 %142 = OpLoad %89 
                                f32_4 %143 = OpVectorShuffle %142 %142 3 2 2 3 
                                f32_4 %144 = OpFMul %141 %143 
                                f32_2 %145 = OpLoad vs_TEXCOORD0 
                                f32_4 %146 = OpVectorShuffle %145 %145 0 1 0 1 
                                f32_4 %147 = OpFAdd %144 %146 
                                               OpStore %89 %147 
                                f32_4 %148 = OpLoad %89 
                       Uniform f32_4* %149 = OpAccessChain %13 %35 
                                f32_4 %150 = OpLoad %149 
                                f32_4 %151 = OpVectorShuffle %150 %150 0 1 0 1 
                                f32_4 %152 = OpFMul %148 %151 
                       Uniform f32_4* %153 = OpAccessChain %13 %35 
                                f32_4 %154 = OpLoad %153 
                                f32_4 %155 = OpVectorShuffle %154 %154 2 3 2 3 
                                f32_4 %156 = OpFAdd %152 %155 
                                               OpStore %89 %156 
                  read_only Texture2D %158 = OpLoad %48 
                              sampler %159 = OpLoad %52 
           read_only Texture2DSampled %160 = OpSampledImage %158 %159 
                                f32_4 %161 = OpLoad %89 
                                f32_2 %162 = OpVectorShuffle %161 %161 0 1 
                                f32_4 %163 = OpImageSampleImplicitLod %160 %162 
                                f32_3 %164 = OpVectorShuffle %163 %163 0 1 2 
                                               OpStore %157 %164 
                  read_only Texture2D %165 = OpLoad %48 
                              sampler %166 = OpLoad %52 
           read_only Texture2DSampled %167 = OpSampledImage %165 %166 
                                f32_4 %168 = OpLoad %89 
                                f32_2 %169 = OpVectorShuffle %168 %168 2 3 
                                f32_4 %170 = OpImageSampleImplicitLod %167 %169 
                                f32_3 %171 = OpVectorShuffle %170 %170 0 1 2 
                                f32_4 %172 = OpLoad %89 
                                f32_4 %173 = OpVectorShuffle %172 %171 4 5 6 3 
                                               OpStore %89 %173 
                                f32_3 %174 = OpLoad %157 
                                f32_3 %175 = OpFMul %174 %117 
                                f32_3 %176 = OpLoad %9 
                                f32_3 %177 = OpFAdd %175 %176 
                                               OpStore %9 %177 
                                f32_4 %178 = OpLoad %61 
                                f32_3 %179 = OpVectorShuffle %178 %178 0 1 2 
                                f32_3 %180 = OpFMul %179 %111 
                                f32_3 %181 = OpLoad %9 
                                f32_3 %182 = OpFAdd %180 %181 
                                               OpStore %9 %182 
                                f32_2 %183 = OpLoad vs_TEXCOORD0 
                       Uniform f32_4* %184 = OpAccessChain %13 %35 
                                f32_4 %185 = OpLoad %184 
                                f32_2 %186 = OpVectorShuffle %185 %185 0 1 
                                f32_2 %187 = OpFMul %183 %186 
                       Uniform f32_4* %188 = OpAccessChain %13 %35 
                                f32_4 %189 = OpLoad %188 
                                f32_2 %190 = OpVectorShuffle %189 %189 2 3 
                                f32_2 %191 = OpFAdd %187 %190 
                                f32_4 %192 = OpLoad %61 
                                f32_4 %193 = OpVectorShuffle %192 %191 4 5 2 3 
                                               OpStore %61 %193 
                  read_only Texture2D %194 = OpLoad %48 
                              sampler %195 = OpLoad %52 
           read_only Texture2DSampled %196 = OpSampledImage %194 %195 
                                f32_4 %197 = OpLoad %61 
                                f32_2 %198 = OpVectorShuffle %197 %197 0 1 
                                f32_4 %199 = OpImageSampleImplicitLod %196 %198 
                                f32_3 %200 = OpVectorShuffle %199 %199 0 1 2 
                                f32_4 %201 = OpLoad %61 
                                f32_4 %202 = OpVectorShuffle %201 %200 4 5 6 3 
                                               OpStore %61 %202 
                                f32_4 %203 = OpLoad %61 
                                f32_3 %204 = OpVectorShuffle %203 %203 0 1 2 
                                f32_3 %207 = OpFMul %204 %206 
                                f32_3 %208 = OpLoad %9 
                                f32_3 %209 = OpFAdd %207 %208 
                                               OpStore %9 %209 
                         Uniform f32* %211 = OpAccessChain %13 %15 %127 
                                  f32 %212 = OpLoad %211 
                         Private f32* %213 = OpAccessChain %61 %124 
                                               OpStore %213 %212 
                         Private f32* %215 = OpAccessChain %61 %214 
                                               OpStore %215 %73 
                                f32_4 %216 = OpLoad %134 
                                f32_4 %217 = OpLoad %61 
                                f32_4 %218 = OpVectorShuffle %217 %217 1 0 0 1 
                                f32_4 %219 = OpFMul %216 %218 
                                f32_2 %220 = OpLoad vs_TEXCOORD0 
                                f32_4 %221 = OpVectorShuffle %220 %220 0 1 0 1 
                                f32_4 %222 = OpFAdd %219 %221 
                                               OpStore %61 %222 
                                f32_4 %223 = OpLoad %61 
                       Uniform f32_4* %224 = OpAccessChain %13 %35 
                                f32_4 %225 = OpLoad %224 
                                f32_4 %226 = OpVectorShuffle %225 %225 0 1 0 1 
                                f32_4 %227 = OpFMul %223 %226 
                       Uniform f32_4* %228 = OpAccessChain %13 %35 
                                f32_4 %229 = OpLoad %228 
                                f32_4 %230 = OpVectorShuffle %229 %229 2 3 2 3 
                                f32_4 %231 = OpFAdd %227 %230 
                                               OpStore %61 %231 
                  read_only Texture2D %232 = OpLoad %48 
                              sampler %233 = OpLoad %52 
           read_only Texture2DSampled %234 = OpSampledImage %232 %233 
                                f32_4 %235 = OpLoad %61 
                                f32_2 %236 = OpVectorShuffle %235 %235 0 1 
                                f32_4 %237 = OpImageSampleImplicitLod %234 %236 
                                f32_3 %238 = OpVectorShuffle %237 %237 0 1 2 
                                f32_4 %239 = OpLoad %134 
                                f32_4 %240 = OpVectorShuffle %239 %238 4 5 6 3 
                                               OpStore %134 %240 
                  read_only Texture2D %241 = OpLoad %48 
                              sampler %242 = OpLoad %52 
           read_only Texture2DSampled %243 = OpSampledImage %241 %242 
                                f32_4 %244 = OpLoad %61 
                                f32_2 %245 = OpVectorShuffle %244 %244 2 3 
                                f32_4 %246 = OpImageSampleImplicitLod %243 %245 
                                f32_3 %247 = OpVectorShuffle %246 %246 0 1 2 
                                f32_4 %248 = OpLoad %61 
                                f32_4 %249 = OpVectorShuffle %248 %247 4 5 6 3 
                                               OpStore %61 %249 
                                f32_4 %250 = OpLoad %134 
                                f32_3 %251 = OpVectorShuffle %250 %250 0 1 2 
                                f32_3 %252 = OpFMul %251 %111 
                                f32_3 %253 = OpLoad %9 
                                f32_3 %254 = OpFAdd %252 %253 
                                               OpStore %9 %254 
                                f32_4 %255 = OpLoad %89 
                                f32_3 %256 = OpVectorShuffle %255 %255 0 1 2 
                                f32_3 %257 = OpFMul %256 %117 
                                f32_3 %258 = OpLoad %9 
                                f32_3 %259 = OpFAdd %257 %258 
                                               OpStore %9 %259 
                                f32_4 %260 = OpLoad %61 
                                f32_3 %261 = OpVectorShuffle %260 %260 0 1 2 
                                f32_3 %262 = OpFMul %261 %111 
                                f32_3 %263 = OpLoad %9 
                                f32_3 %264 = OpFAdd %262 %263 
                                               OpStore %9 %264 
                       Uniform f32_4* %265 = OpAccessChain %13 %15 
                                f32_4 %266 = OpLoad %265 
                                f32_2 %267 = OpVectorShuffle %266 %266 2 2 
                       Uniform f32_4* %268 = OpAccessChain %13 %22 
                                f32_4 %269 = OpLoad %268 
                                f32_2 %270 = OpVectorShuffle %269 %269 0 1 
                                f32_2 %271 = OpFMul %267 %270 
                                f32_2 %272 = OpLoad vs_TEXCOORD0 
                                f32_2 %273 = OpFAdd %271 %272 
                                f32_4 %274 = OpLoad %61 
                                f32_4 %275 = OpVectorShuffle %274 %273 4 5 2 3 
                                               OpStore %61 %275 
                                f32_4 %276 = OpLoad %61 
                                f32_2 %277 = OpVectorShuffle %276 %276 0 1 
                       Uniform f32_4* %278 = OpAccessChain %13 %35 
                                f32_4 %279 = OpLoad %278 
                                f32_2 %280 = OpVectorShuffle %279 %279 0 1 
                                f32_2 %281 = OpFMul %277 %280 
                       Uniform f32_4* %282 = OpAccessChain %13 %35 
                                f32_4 %283 = OpLoad %282 
                                f32_2 %284 = OpVectorShuffle %283 %283 2 3 
                                f32_2 %285 = OpFAdd %281 %284 
                                f32_4 %286 = OpLoad %61 
                                f32_4 %287 = OpVectorShuffle %286 %285 4 5 2 3 
                                               OpStore %61 %287 
                  read_only Texture2D %288 = OpLoad %48 
                              sampler %289 = OpLoad %52 
           read_only Texture2DSampled %290 = OpSampledImage %288 %289 
                                f32_4 %291 = OpLoad %61 
                                f32_2 %292 = OpVectorShuffle %291 %291 0 1 
                                f32_4 %293 = OpImageSampleImplicitLod %290 %292 
                                f32_3 %294 = OpVectorShuffle %293 %293 0 1 2 
                                f32_4 %295 = OpLoad %61 
                                f32_4 %296 = OpVectorShuffle %295 %294 4 5 6 3 
                                               OpStore %61 %296 
                                f32_4 %299 = OpLoad %61 
                                f32_3 %300 = OpVectorShuffle %299 %299 0 1 2 
                                f32_3 %301 = OpFMul %300 %117 
                                f32_3 %302 = OpLoad %9 
                                f32_3 %303 = OpFAdd %301 %302 
                                f32_4 %304 = OpLoad %298 
                                f32_4 %305 = OpVectorShuffle %304 %303 4 5 6 3 
                                               OpStore %298 %305 
                          Output f32* %308 = OpAccessChain %298 %306 
                                               OpStore %308 %73 
                                               OpReturn
                                               OpFunctionEnd
"
}
}
Program "fp" {
SubProgram "d3d11 " {
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
""
}
SubProgram "vulkan " {
""
}
SubProgram "d3d11 " {
Keywords { "AB_HIGH_PRECISION" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "AB_HIGH_PRECISION" }
""
}
SubProgram "vulkan " {
Keywords { "AB_HIGH_PRECISION" }
""
}
}
}
 Pass {
  Name "frag_upscaleTent"
  ZTest Always
  ZWrite Off
  Cull Off
  GpuProgramID 1184029
Program "vp" {
SubProgram "d3d11 " {
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in  vec4 in_POSITION0;
in  vec2 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BloomRange;
uniform 	vec4 _MainTex_TexelSize;
uniform 	vec4 _BloomParams;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
UNITY_LOCATION(1) uniform  sampler2D _AnamorphicRTS0;
in  vec2 vs_TEXCOORD0;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
float u_xlat12;
void main()
{
    u_xlat0.xy = (-_MainTex_TexelSize.xy) * _BloomParams.zz + vs_TEXCOORD0.xy;
    u_xlat0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0 = texture(_MainTex, u_xlat0.xy);
    u_xlat0.xyz = u_xlat0.xyz * _BloomRange.xxx;
    u_xlat0.xyz = u_xlat0.www * u_xlat0.xyz;
    u_xlat1 = _MainTex_TexelSize.xyxy * vec4(0.0, -1.0, 1.0, -1.0);
    u_xlat1 = u_xlat1 * _BloomParams.zzzz + vs_TEXCOORD0.xyxy;
    u_xlat1 = u_xlat1 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
    u_xlat2 = texture(_MainTex, u_xlat1.xy);
    u_xlat1 = texture(_MainTex, u_xlat1.zw);
    u_xlat2.xyz = u_xlat2.xyz * _BloomRange.xxx;
    u_xlat2.xyz = u_xlat2.www * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz * vec3(0.125, 0.125, 0.125);
    u_xlat0.xyz = u_xlat0.xyz * vec3(0.0625, 0.0625, 0.0625) + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _BloomRange.xxx;
    u_xlat1.xyz = u_xlat1.www * u_xlat1.xyz;
    u_xlat0.xyz = u_xlat1.xyz * vec3(0.0625, 0.0625, 0.0625) + u_xlat0.xyz;
    u_xlat1 = _MainTex_TexelSize.xyxy * vec4(-1.0, 0.0, 1.0, 0.0);
    u_xlat1 = u_xlat1 * _BloomParams.zzzz + vs_TEXCOORD0.xyxy;
    u_xlat1 = u_xlat1 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
    u_xlat2 = texture(_MainTex, u_xlat1.xy);
    u_xlat1 = texture(_MainTex, u_xlat1.zw);
    u_xlat2.xyz = u_xlat2.xyz * _BloomRange.xxx;
    u_xlat2.xyz = u_xlat2.www * u_xlat2.xyz;
    u_xlat0.xyz = u_xlat2.xyz * vec3(0.125, 0.125, 0.125) + u_xlat0.xyz;
    u_xlat2.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat3 = texture(_MainTex, u_xlat2.xy);
    u_xlat2 = texture(_AnamorphicRTS0, u_xlat2.xy);
    u_xlat3.xyz = u_xlat3.xyz * _BloomRange.xxx;
    u_xlat3.xyz = u_xlat3.www * u_xlat3.xyz;
    u_xlat0.xyz = u_xlat3.xyz * vec3(0.25, 0.25, 0.25) + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _BloomRange.xxx;
    u_xlat1.xyz = u_xlat1.www * u_xlat1.xyz;
    u_xlat0.xyz = u_xlat1.xyz * vec3(0.125, 0.125, 0.125) + u_xlat0.xyz;
    u_xlat1 = _MainTex_TexelSize.xyxy * vec4(-1.0, 1.0, 0.0, 1.0);
    u_xlat1 = u_xlat1 * _BloomParams.zzzz + vs_TEXCOORD0.xyxy;
    u_xlat1 = u_xlat1 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
    u_xlat3 = texture(_MainTex, u_xlat1.xy);
    u_xlat1 = texture(_MainTex, u_xlat1.zw);
    u_xlat3.xyz = u_xlat3.xyz * _BloomRange.xxx;
    u_xlat3.xyz = u_xlat3.www * u_xlat3.xyz;
    u_xlat0.xyz = u_xlat3.xyz * vec3(0.0625, 0.0625, 0.0625) + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _BloomRange.xxx;
    u_xlat1.xyz = u_xlat1.www * u_xlat1.xyz;
    u_xlat0.xyz = u_xlat1.xyz * vec3(0.125, 0.125, 0.125) + u_xlat0.xyz;
    u_xlat1.xy = _MainTex_TexelSize.xy * _BloomParams.zz + vs_TEXCOORD0.xy;
    u_xlat1.xy = u_xlat1.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1 = texture(_MainTex, u_xlat1.xy);
    u_xlat1.xyz = u_xlat1.xyz * _BloomRange.xxx;
    u_xlat1.xyz = u_xlat1.www * u_xlat1.xyz;
    u_xlat0.xyz = u_xlat1.xyz * vec3(0.0625, 0.0625, 0.0625) + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat2.xyz * _BloomRange.xxx;
    u_xlat0.xyz = u_xlat1.xyz * u_xlat2.www + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * _BloomRange.yyy;
    u_xlat12 = max(u_xlat0.y, u_xlat0.x);
    u_xlat1.x = max(u_xlat0.z, 9.99999997e-07);
    u_xlat12 = max(u_xlat12, u_xlat1.x);
    u_xlat12 = min(u_xlat12, 1.0);
    u_xlat12 = u_xlat12 * 255.0;
    u_xlat12 = ceil(u_xlat12);
    u_xlat12 = u_xlat12 * 0.00392156886;
    SV_Target0.xyz = u_xlat0.xyz / vec3(u_xlat12);
    SV_Target0.w = u_xlat12;
    return;
}

#endif
"
}
SubProgram "vulkan " {
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 94
; Schema: 0
                                              OpCapability Shader 
                                       %1 = OpExtInstImport "GLSL.std.450" 
                                              OpMemoryModel Logical GLSL450 
                                              OpEntryPoint Vertex %4 "main" %11 %72 %84 %86 
                                              OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                              OpDecorate %11 Location 11 
                                              OpDecorate %16 ArrayStride 16 
                                              OpDecorate %17 ArrayStride 17 
                                              OpMemberDecorate %18 0 Offset 18 
                                              OpMemberDecorate %18 1 Offset 18 
                                              OpDecorate %18 Block 
                                              OpDecorate %20 DescriptorSet 20 
                                              OpDecorate %20 Binding 20 
                                              OpMemberDecorate %70 0 BuiltIn 70 
                                              OpMemberDecorate %70 1 BuiltIn 70 
                                              OpMemberDecorate %70 2 BuiltIn 70 
                                              OpDecorate %70 Block 
                                              OpDecorate vs_TEXCOORD0 Location 84 
                                              OpDecorate %86 Location 86 
                                       %2 = OpTypeVoid 
                                       %3 = OpTypeFunction %2 
                                       %6 = OpTypeFloat 32 
                                       %7 = OpTypeVector %6 4 
                                       %8 = OpTypePointer Private %7 
                        Private f32_4* %9 = OpVariable Private 
                                      %10 = OpTypePointer Input %7 
                         Input f32_4* %11 = OpVariable Input 
                                      %14 = OpTypeInt 32 0 
                                  u32 %15 = OpConstant 4 
                                      %16 = OpTypeArray %7 %15 
                                      %17 = OpTypeArray %7 %15 
                                      %18 = OpTypeStruct %16 %17 
                                      %19 = OpTypePointer Uniform %18 
Uniform struct {f32_4[4]; f32_4[4];}* %20 = OpVariable Uniform 
                                      %21 = OpTypeInt 32 1 
                                  i32 %22 = OpConstant 0 
                                  i32 %23 = OpConstant 1 
                                      %24 = OpTypePointer Uniform %7 
                                  i32 %35 = OpConstant 2 
                                  i32 %44 = OpConstant 3 
                       Private f32_4* %48 = OpVariable Private 
                                  u32 %68 = OpConstant 1 
                                      %69 = OpTypeArray %6 %68 
                                      %70 = OpTypeStruct %7 %6 %69 
                                      %71 = OpTypePointer Output %70 
 Output struct {f32_4; f32; f32[1];}* %72 = OpVariable Output 
                                      %80 = OpTypePointer Output %7 
                                      %82 = OpTypeVector %6 2 
                                      %83 = OpTypePointer Output %82 
               Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                      %85 = OpTypePointer Input %82 
                         Input f32_2* %86 = OpVariable Input 
                                      %88 = OpTypePointer Output %6 
                                  void %4 = OpFunction None %3 
                                       %5 = OpLabel 
                                f32_4 %12 = OpLoad %11 
                                f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                       Uniform f32_4* %25 = OpAccessChain %20 %22 %23 
                                f32_4 %26 = OpLoad %25 
                                f32_4 %27 = OpFMul %13 %26 
                                              OpStore %9 %27 
                       Uniform f32_4* %28 = OpAccessChain %20 %22 %22 
                                f32_4 %29 = OpLoad %28 
                                f32_4 %30 = OpLoad %11 
                                f32_4 %31 = OpVectorShuffle %30 %30 0 0 0 0 
                                f32_4 %32 = OpFMul %29 %31 
                                f32_4 %33 = OpLoad %9 
                                f32_4 %34 = OpFAdd %32 %33 
                                              OpStore %9 %34 
                       Uniform f32_4* %36 = OpAccessChain %20 %22 %35 
                                f32_4 %37 = OpLoad %36 
                                f32_4 %38 = OpLoad %11 
                                f32_4 %39 = OpVectorShuffle %38 %38 2 2 2 2 
                                f32_4 %40 = OpFMul %37 %39 
                                f32_4 %41 = OpLoad %9 
                                f32_4 %42 = OpFAdd %40 %41 
                                              OpStore %9 %42 
                                f32_4 %43 = OpLoad %9 
                       Uniform f32_4* %45 = OpAccessChain %20 %22 %44 
                                f32_4 %46 = OpLoad %45 
                                f32_4 %47 = OpFAdd %43 %46 
                                              OpStore %9 %47 
                                f32_4 %49 = OpLoad %9 
                                f32_4 %50 = OpVectorShuffle %49 %49 1 1 1 1 
                       Uniform f32_4* %51 = OpAccessChain %20 %23 %23 
                                f32_4 %52 = OpLoad %51 
                                f32_4 %53 = OpFMul %50 %52 
                                              OpStore %48 %53 
                       Uniform f32_4* %54 = OpAccessChain %20 %23 %22 
                                f32_4 %55 = OpLoad %54 
                                f32_4 %56 = OpLoad %9 
                                f32_4 %57 = OpVectorShuffle %56 %56 0 0 0 0 
                                f32_4 %58 = OpFMul %55 %57 
                                f32_4 %59 = OpLoad %48 
                                f32_4 %60 = OpFAdd %58 %59 
                                              OpStore %48 %60 
                       Uniform f32_4* %61 = OpAccessChain %20 %23 %35 
                                f32_4 %62 = OpLoad %61 
                                f32_4 %63 = OpLoad %9 
                                f32_4 %64 = OpVectorShuffle %63 %63 2 2 2 2 
                                f32_4 %65 = OpFMul %62 %64 
                                f32_4 %66 = OpLoad %48 
                                f32_4 %67 = OpFAdd %65 %66 
                                              OpStore %48 %67 
                       Uniform f32_4* %73 = OpAccessChain %20 %23 %44 
                                f32_4 %74 = OpLoad %73 
                                f32_4 %75 = OpLoad %9 
                                f32_4 %76 = OpVectorShuffle %75 %75 3 3 3 3 
                                f32_4 %77 = OpFMul %74 %76 
                                f32_4 %78 = OpLoad %48 
                                f32_4 %79 = OpFAdd %77 %78 
                        Output f32_4* %81 = OpAccessChain %72 %22 
                                              OpStore %81 %79 
                                f32_2 %87 = OpLoad %86 
                                              OpStore vs_TEXCOORD0 %87 
                          Output f32* %89 = OpAccessChain %72 %22 %68 
                                  f32 %90 = OpLoad %89 
                                  f32 %91 = OpFNegate %90 
                          Output f32* %92 = OpAccessChain %72 %22 %68 
                                              OpStore %92 %91 
                                              OpReturn
                                              OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 512
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %27 %499 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpMemberDecorate %10 0 Offset 10 
                                                      OpMemberDecorate %10 1 Offset 10 
                                                      OpMemberDecorate %10 2 Offset 10 
                                                      OpMemberDecorate %10 3 Offset 10 
                                                      OpDecorate %10 Block 
                                                      OpDecorate %12 DescriptorSet 12 
                                                      OpDecorate %12 Binding 12 
                                                      OpDecorate vs_TEXCOORD0 Location 27 
                                                      OpDecorate %47 DescriptorSet 47 
                                                      OpDecorate %47 Binding 47 
                                                      OpDecorate %51 DescriptorSet 51 
                                                      OpDecorate %51 Binding 51 
                                                      OpDecorate %259 DescriptorSet 259 
                                                      OpDecorate %259 Binding 259 
                                                      OpDecorate %261 DescriptorSet 261 
                                                      OpDecorate %261 Binding 261 
                                                      OpDecorate %499 Location 499 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeStruct %7 %7 %7 %7 
                                              %11 = OpTypePointer Uniform %10 
Uniform struct {f32_4; f32_4; f32_4; f32_4;}* %12 = OpVariable Uniform 
                                              %13 = OpTypeInt 32 1 
                                          i32 %14 = OpConstant 3 
                                              %15 = OpTypeVector %6 2 
                                              %16 = OpTypePointer Uniform %7 
                                          i32 %21 = OpConstant 2 
                                              %26 = OpTypePointer Input %15 
                        Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                          i32 %34 = OpConstant 0 
                                              %45 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %46 = OpTypePointer UniformConstant %45 
         UniformConstant read_only Texture2D* %47 = OpVariable UniformConstant 
                                              %49 = OpTypeSampler 
                                              %50 = OpTypePointer UniformConstant %49 
                     UniformConstant sampler* %51 = OpVariable UniformConstant 
                                              %53 = OpTypeSampledImage %45 
                                              %58 = OpTypeVector %6 3 
                                          i32 %61 = OpConstant 1 
                               Private f32_4* %75 = OpVariable Private 
                                          f32 %87 = OpConstant 3.674022E-40 
                                          f32 %88 = OpConstant 3.674022E-40 
                                        f32_4 %89 = OpConstantComposite %87 %88 %88 %87 
                              Private f32_4* %103 = OpVariable Private 
                                         f32 %133 = OpConstant 3.674022E-40 
                                       f32_3 %134 = OpConstantComposite %133 %133 %133 
                                         f32 %140 = OpConstant 3.674022E-40 
                                       f32_3 %141 = OpConstantComposite %140 %140 %140 
                                         f32 %148 = OpConstant 3.674022E-40 
                                             %149 = OpTypeInt 32 0 
                                         u32 %150 = OpConstant 1 
                                             %151 = OpTypePointer Private %6 
                                         u32 %153 = OpConstant 2 
                              Private f32_4* %160 = OpVariable Private 
                              Private f32_4* %183 = OpVariable Private 
        UniformConstant read_only Texture2D* %259 = OpVariable UniformConstant 
                    UniformConstant sampler* %261 = OpVariable UniformConstant 
                                         f32 %284 = OpConstant 3.674022E-40 
                                       f32_3 %285 = OpConstantComposite %284 %284 %284 
                                             %292 = OpTypePointer Uniform %6 
                                         u32 %296 = OpConstant 0 
                                Private f32* %473 = OpVariable Private 
                                         f32 %481 = OpConstant 3.674022E-40 
                                         f32 %491 = OpConstant 3.674022E-40 
                                         f32 %496 = OpConstant 3.674022E-40 
                                             %498 = OpTypePointer Output %7 
                               Output f32_4* %499 = OpVariable Output 
                                         u32 %508 = OpConstant 3 
                                             %509 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                               Uniform f32_4* %17 = OpAccessChain %12 %14 
                                        f32_4 %18 = OpLoad %17 
                                        f32_2 %19 = OpVectorShuffle %18 %18 2 2 
                                        f32_2 %20 = OpFNegate %19 
                               Uniform f32_4* %22 = OpAccessChain %12 %21 
                                        f32_4 %23 = OpLoad %22 
                                        f32_2 %24 = OpVectorShuffle %23 %23 0 1 
                                        f32_2 %25 = OpFMul %20 %24 
                                        f32_2 %28 = OpLoad vs_TEXCOORD0 
                                        f32_2 %29 = OpFAdd %25 %28 
                                        f32_4 %30 = OpLoad %9 
                                        f32_4 %31 = OpVectorShuffle %30 %29 4 5 2 3 
                                                      OpStore %9 %31 
                                        f32_4 %32 = OpLoad %9 
                                        f32_2 %33 = OpVectorShuffle %32 %32 0 1 
                               Uniform f32_4* %35 = OpAccessChain %12 %34 
                                        f32_4 %36 = OpLoad %35 
                                        f32_2 %37 = OpVectorShuffle %36 %36 0 1 
                                        f32_2 %38 = OpFMul %33 %37 
                               Uniform f32_4* %39 = OpAccessChain %12 %34 
                                        f32_4 %40 = OpLoad %39 
                                        f32_2 %41 = OpVectorShuffle %40 %40 2 3 
                                        f32_2 %42 = OpFAdd %38 %41 
                                        f32_4 %43 = OpLoad %9 
                                        f32_4 %44 = OpVectorShuffle %43 %42 4 5 2 3 
                                                      OpStore %9 %44 
                          read_only Texture2D %48 = OpLoad %47 
                                      sampler %52 = OpLoad %51 
                   read_only Texture2DSampled %54 = OpSampledImage %48 %52 
                                        f32_4 %55 = OpLoad %9 
                                        f32_2 %56 = OpVectorShuffle %55 %55 0 1 
                                        f32_4 %57 = OpImageSampleImplicitLod %54 %56 
                                                      OpStore %9 %57 
                                        f32_4 %59 = OpLoad %9 
                                        f32_3 %60 = OpVectorShuffle %59 %59 0 1 2 
                               Uniform f32_4* %62 = OpAccessChain %12 %61 
                                        f32_4 %63 = OpLoad %62 
                                        f32_3 %64 = OpVectorShuffle %63 %63 0 0 0 
                                        f32_3 %65 = OpFMul %60 %64 
                                        f32_4 %66 = OpLoad %9 
                                        f32_4 %67 = OpVectorShuffle %66 %65 4 5 6 3 
                                                      OpStore %9 %67 
                                        f32_4 %68 = OpLoad %9 
                                        f32_3 %69 = OpVectorShuffle %68 %68 3 3 3 
                                        f32_4 %70 = OpLoad %9 
                                        f32_3 %71 = OpVectorShuffle %70 %70 0 1 2 
                                        f32_3 %72 = OpFMul %69 %71 
                                        f32_4 %73 = OpLoad %9 
                                        f32_4 %74 = OpVectorShuffle %73 %72 4 5 6 3 
                                                      OpStore %9 %74 
                               Uniform f32_4* %76 = OpAccessChain %12 %21 
                                        f32_4 %77 = OpLoad %76 
                                        f32_2 %78 = OpVectorShuffle %77 %77 0 1 
                               Uniform f32_4* %79 = OpAccessChain %12 %14 
                                        f32_4 %80 = OpLoad %79 
                                        f32_2 %81 = OpVectorShuffle %80 %80 2 2 
                                        f32_2 %82 = OpFMul %78 %81 
                                        f32_4 %83 = OpLoad %75 
                                        f32_4 %84 = OpVectorShuffle %83 %82 4 5 2 3 
                                                      OpStore %75 %84 
                                        f32_4 %85 = OpLoad %75 
                                        f32_4 %86 = OpVectorShuffle %85 %85 0 1 0 1 
                                        f32_4 %90 = OpFMul %86 %89 
                                        f32_2 %91 = OpLoad vs_TEXCOORD0 
                                        f32_4 %92 = OpVectorShuffle %91 %91 0 1 0 1 
                                        f32_4 %93 = OpFAdd %90 %92 
                                                      OpStore %75 %93 
                                        f32_4 %94 = OpLoad %75 
                               Uniform f32_4* %95 = OpAccessChain %12 %34 
                                        f32_4 %96 = OpLoad %95 
                                        f32_4 %97 = OpVectorShuffle %96 %96 0 1 0 1 
                                        f32_4 %98 = OpFMul %94 %97 
                               Uniform f32_4* %99 = OpAccessChain %12 %34 
                                       f32_4 %100 = OpLoad %99 
                                       f32_4 %101 = OpVectorShuffle %100 %100 2 3 2 3 
                                       f32_4 %102 = OpFAdd %98 %101 
                                                      OpStore %75 %102 
                         read_only Texture2D %104 = OpLoad %47 
                                     sampler %105 = OpLoad %51 
                  read_only Texture2DSampled %106 = OpSampledImage %104 %105 
                                       f32_4 %107 = OpLoad %75 
                                       f32_2 %108 = OpVectorShuffle %107 %107 0 1 
                                       f32_4 %109 = OpImageSampleImplicitLod %106 %108 
                                                      OpStore %103 %109 
                         read_only Texture2D %110 = OpLoad %47 
                                     sampler %111 = OpLoad %51 
                  read_only Texture2DSampled %112 = OpSampledImage %110 %111 
                                       f32_4 %113 = OpLoad %75 
                                       f32_2 %114 = OpVectorShuffle %113 %113 2 3 
                                       f32_4 %115 = OpImageSampleImplicitLod %112 %114 
                                                      OpStore %75 %115 
                                       f32_4 %116 = OpLoad %103 
                                       f32_3 %117 = OpVectorShuffle %116 %116 0 1 2 
                              Uniform f32_4* %118 = OpAccessChain %12 %61 
                                       f32_4 %119 = OpLoad %118 
                                       f32_3 %120 = OpVectorShuffle %119 %119 0 0 0 
                                       f32_3 %121 = OpFMul %117 %120 
                                       f32_4 %122 = OpLoad %103 
                                       f32_4 %123 = OpVectorShuffle %122 %121 4 5 6 3 
                                                      OpStore %103 %123 
                                       f32_4 %124 = OpLoad %103 
                                       f32_3 %125 = OpVectorShuffle %124 %124 3 3 3 
                                       f32_4 %126 = OpLoad %103 
                                       f32_3 %127 = OpVectorShuffle %126 %126 0 1 2 
                                       f32_3 %128 = OpFMul %125 %127 
                                       f32_4 %129 = OpLoad %103 
                                       f32_4 %130 = OpVectorShuffle %129 %128 4 5 6 3 
                                                      OpStore %103 %130 
                                       f32_4 %131 = OpLoad %103 
                                       f32_3 %132 = OpVectorShuffle %131 %131 0 1 2 
                                       f32_3 %135 = OpFMul %132 %134 
                                       f32_4 %136 = OpLoad %103 
                                       f32_4 %137 = OpVectorShuffle %136 %135 4 5 6 3 
                                                      OpStore %103 %137 
                                       f32_4 %138 = OpLoad %9 
                                       f32_3 %139 = OpVectorShuffle %138 %138 0 1 2 
                                       f32_3 %142 = OpFMul %139 %141 
                                       f32_4 %143 = OpLoad %103 
                                       f32_3 %144 = OpVectorShuffle %143 %143 0 1 2 
                                       f32_3 %145 = OpFAdd %142 %144 
                                       f32_4 %146 = OpLoad %9 
                                       f32_4 %147 = OpVectorShuffle %146 %145 4 5 6 3 
                                                      OpStore %9 %147 
                                Private f32* %152 = OpAccessChain %103 %150 
                                                      OpStore %152 %148 
                                Private f32* %154 = OpAccessChain %103 %153 
                                                      OpStore %154 %88 
                              Uniform f32_4* %155 = OpAccessChain %12 %14 
                                       f32_4 %156 = OpLoad %155 
                                       f32_2 %157 = OpVectorShuffle %156 %156 2 2 
                                       f32_4 %158 = OpLoad %103 
                                       f32_4 %159 = OpVectorShuffle %158 %157 4 1 2 5 
                                                      OpStore %103 %159 
                                       f32_4 %161 = OpLoad %103 
                                       f32_4 %162 = OpVectorShuffle %161 %161 1 0 0 1 
                              Uniform f32_4* %163 = OpAccessChain %12 %21 
                                       f32_4 %164 = OpLoad %163 
                                       f32_4 %165 = OpVectorShuffle %164 %164 0 1 0 1 
                                       f32_4 %166 = OpFMul %162 %165 
                                                      OpStore %160 %166 
                                       f32_4 %167 = OpLoad %160 
                                       f32_4 %168 = OpLoad %103 
                                       f32_4 %169 = OpVectorShuffle %168 %168 3 2 2 3 
                                       f32_4 %170 = OpFMul %167 %169 
                                       f32_2 %171 = OpLoad vs_TEXCOORD0 
                                       f32_4 %172 = OpVectorShuffle %171 %171 0 1 0 1 
                                       f32_4 %173 = OpFAdd %170 %172 
                                                      OpStore %103 %173 
                                       f32_4 %174 = OpLoad %103 
                              Uniform f32_4* %175 = OpAccessChain %12 %34 
                                       f32_4 %176 = OpLoad %175 
                                       f32_4 %177 = OpVectorShuffle %176 %176 0 1 0 1 
                                       f32_4 %178 = OpFMul %174 %177 
                              Uniform f32_4* %179 = OpAccessChain %12 %34 
                                       f32_4 %180 = OpLoad %179 
                                       f32_4 %181 = OpVectorShuffle %180 %180 2 3 2 3 
                                       f32_4 %182 = OpFAdd %178 %181 
                                                      OpStore %103 %182 
                         read_only Texture2D %184 = OpLoad %47 
                                     sampler %185 = OpLoad %51 
                  read_only Texture2DSampled %186 = OpSampledImage %184 %185 
                                       f32_4 %187 = OpLoad %103 
                                       f32_2 %188 = OpVectorShuffle %187 %187 0 1 
                                       f32_4 %189 = OpImageSampleImplicitLod %186 %188 
                                                      OpStore %183 %189 
                         read_only Texture2D %190 = OpLoad %47 
                                     sampler %191 = OpLoad %51 
                  read_only Texture2DSampled %192 = OpSampledImage %190 %191 
                                       f32_4 %193 = OpLoad %103 
                                       f32_2 %194 = OpVectorShuffle %193 %193 2 3 
                                       f32_4 %195 = OpImageSampleImplicitLod %192 %194 
                                                      OpStore %103 %195 
                                       f32_4 %196 = OpLoad %183 
                                       f32_3 %197 = OpVectorShuffle %196 %196 0 1 2 
                              Uniform f32_4* %198 = OpAccessChain %12 %61 
                                       f32_4 %199 = OpLoad %198 
                                       f32_3 %200 = OpVectorShuffle %199 %199 0 0 0 
                                       f32_3 %201 = OpFMul %197 %200 
                                       f32_4 %202 = OpLoad %183 
                                       f32_4 %203 = OpVectorShuffle %202 %201 4 5 6 3 
                                                      OpStore %183 %203 
                                       f32_4 %204 = OpLoad %183 
                                       f32_3 %205 = OpVectorShuffle %204 %204 3 3 3 
                                       f32_4 %206 = OpLoad %183 
                                       f32_3 %207 = OpVectorShuffle %206 %206 0 1 2 
                                       f32_3 %208 = OpFMul %205 %207 
                                       f32_4 %209 = OpLoad %183 
                                       f32_4 %210 = OpVectorShuffle %209 %208 4 5 6 3 
                                                      OpStore %183 %210 
                                       f32_4 %211 = OpLoad %183 
                                       f32_3 %212 = OpVectorShuffle %211 %211 0 1 2 
                                       f32_3 %213 = OpFMul %212 %141 
                                       f32_4 %214 = OpLoad %9 
                                       f32_3 %215 = OpVectorShuffle %214 %214 0 1 2 
                                       f32_3 %216 = OpFAdd %213 %215 
                                       f32_4 %217 = OpLoad %9 
                                       f32_4 %218 = OpVectorShuffle %217 %216 4 5 6 3 
                                                      OpStore %9 %218 
                                       f32_4 %219 = OpLoad %75 
                                       f32_3 %220 = OpVectorShuffle %219 %219 0 1 2 
                              Uniform f32_4* %221 = OpAccessChain %12 %61 
                                       f32_4 %222 = OpLoad %221 
                                       f32_3 %223 = OpVectorShuffle %222 %222 0 0 0 
                                       f32_3 %224 = OpFMul %220 %223 
                                       f32_4 %225 = OpLoad %75 
                                       f32_4 %226 = OpVectorShuffle %225 %224 4 5 6 3 
                                                      OpStore %75 %226 
                                       f32_4 %227 = OpLoad %75 
                                       f32_3 %228 = OpVectorShuffle %227 %227 3 3 3 
                                       f32_4 %229 = OpLoad %75 
                                       f32_3 %230 = OpVectorShuffle %229 %229 0 1 2 
                                       f32_3 %231 = OpFMul %228 %230 
                                       f32_4 %232 = OpLoad %75 
                                       f32_4 %233 = OpVectorShuffle %232 %231 4 5 6 3 
                                                      OpStore %75 %233 
                                       f32_4 %234 = OpLoad %75 
                                       f32_3 %235 = OpVectorShuffle %234 %234 0 1 2 
                                       f32_3 %236 = OpFMul %235 %134 
                                       f32_4 %237 = OpLoad %9 
                                       f32_3 %238 = OpVectorShuffle %237 %237 0 1 2 
                                       f32_3 %239 = OpFAdd %236 %238 
                                       f32_4 %240 = OpLoad %9 
                                       f32_4 %241 = OpVectorShuffle %240 %239 4 5 6 3 
                                                      OpStore %9 %241 
                                       f32_2 %242 = OpLoad vs_TEXCOORD0 
                              Uniform f32_4* %243 = OpAccessChain %12 %34 
                                       f32_4 %244 = OpLoad %243 
                                       f32_2 %245 = OpVectorShuffle %244 %244 0 1 
                                       f32_2 %246 = OpFMul %242 %245 
                              Uniform f32_4* %247 = OpAccessChain %12 %34 
                                       f32_4 %248 = OpLoad %247 
                                       f32_2 %249 = OpVectorShuffle %248 %248 2 3 
                                       f32_2 %250 = OpFAdd %246 %249 
                                       f32_4 %251 = OpLoad %75 
                                       f32_4 %252 = OpVectorShuffle %251 %250 4 5 2 3 
                                                      OpStore %75 %252 
                         read_only Texture2D %253 = OpLoad %47 
                                     sampler %254 = OpLoad %51 
                  read_only Texture2DSampled %255 = OpSampledImage %253 %254 
                                       f32_4 %256 = OpLoad %75 
                                       f32_2 %257 = OpVectorShuffle %256 %256 0 1 
                                       f32_4 %258 = OpImageSampleImplicitLod %255 %257 
                                                      OpStore %183 %258 
                         read_only Texture2D %260 = OpLoad %259 
                                     sampler %262 = OpLoad %261 
                  read_only Texture2DSampled %263 = OpSampledImage %260 %262 
                                       f32_4 %264 = OpLoad %75 
                                       f32_2 %265 = OpVectorShuffle %264 %264 0 1 
                                       f32_4 %266 = OpImageSampleImplicitLod %263 %265 
                                                      OpStore %75 %266 
                                       f32_4 %267 = OpLoad %183 
                                       f32_3 %268 = OpVectorShuffle %267 %267 0 1 2 
                              Uniform f32_4* %269 = OpAccessChain %12 %61 
                                       f32_4 %270 = OpLoad %269 
                                       f32_3 %271 = OpVectorShuffle %270 %270 0 0 0 
                                       f32_3 %272 = OpFMul %268 %271 
                                       f32_4 %273 = OpLoad %183 
                                       f32_4 %274 = OpVectorShuffle %273 %272 4 5 6 3 
                                                      OpStore %183 %274 
                                       f32_4 %275 = OpLoad %183 
                                       f32_3 %276 = OpVectorShuffle %275 %275 3 3 3 
                                       f32_4 %277 = OpLoad %183 
                                       f32_3 %278 = OpVectorShuffle %277 %277 0 1 2 
                                       f32_3 %279 = OpFMul %276 %278 
                                       f32_4 %280 = OpLoad %183 
                                       f32_4 %281 = OpVectorShuffle %280 %279 4 5 6 3 
                                                      OpStore %183 %281 
                                       f32_4 %282 = OpLoad %183 
                                       f32_3 %283 = OpVectorShuffle %282 %282 0 1 2 
                                       f32_3 %286 = OpFMul %283 %285 
                                       f32_4 %287 = OpLoad %9 
                                       f32_3 %288 = OpVectorShuffle %287 %287 0 1 2 
                                       f32_3 %289 = OpFAdd %286 %288 
                                       f32_4 %290 = OpLoad %9 
                                       f32_4 %291 = OpVectorShuffle %290 %289 4 5 6 3 
                                                      OpStore %9 %291 
                                Uniform f32* %293 = OpAccessChain %12 %14 %153 
                                         f32 %294 = OpLoad %293 
                                Private f32* %295 = OpAccessChain %183 %150 
                                                      OpStore %295 %294 
                                Private f32* %297 = OpAccessChain %183 %296 
                                                      OpStore %297 %87 
                                       f32_4 %298 = OpLoad %160 
                                       f32_4 %299 = OpLoad %183 
                                       f32_4 %300 = OpVectorShuffle %299 %299 1 0 0 1 
                                       f32_4 %301 = OpFMul %298 %300 
                                       f32_2 %302 = OpLoad vs_TEXCOORD0 
                                       f32_4 %303 = OpVectorShuffle %302 %302 0 1 0 1 
                                       f32_4 %304 = OpFAdd %301 %303 
                                                      OpStore %160 %304 
                                       f32_4 %305 = OpLoad %160 
                              Uniform f32_4* %306 = OpAccessChain %12 %34 
                                       f32_4 %307 = OpLoad %306 
                                       f32_4 %308 = OpVectorShuffle %307 %307 0 1 0 1 
                                       f32_4 %309 = OpFMul %305 %308 
                              Uniform f32_4* %310 = OpAccessChain %12 %34 
                                       f32_4 %311 = OpLoad %310 
                                       f32_4 %312 = OpVectorShuffle %311 %311 2 3 2 3 
                                       f32_4 %313 = OpFAdd %309 %312 
                                                      OpStore %160 %313 
                         read_only Texture2D %314 = OpLoad %47 
                                     sampler %315 = OpLoad %51 
                  read_only Texture2DSampled %316 = OpSampledImage %314 %315 
                                       f32_4 %317 = OpLoad %160 
                                       f32_2 %318 = OpVectorShuffle %317 %317 0 1 
                                       f32_4 %319 = OpImageSampleImplicitLod %316 %318 
                                                      OpStore %183 %319 
                         read_only Texture2D %320 = OpLoad %47 
                                     sampler %321 = OpLoad %51 
                  read_only Texture2DSampled %322 = OpSampledImage %320 %321 
                                       f32_4 %323 = OpLoad %160 
                                       f32_2 %324 = OpVectorShuffle %323 %323 2 3 
                                       f32_4 %325 = OpImageSampleImplicitLod %322 %324 
                                                      OpStore %160 %325 
                                       f32_4 %326 = OpLoad %183 
                                       f32_3 %327 = OpVectorShuffle %326 %326 0 1 2 
                              Uniform f32_4* %328 = OpAccessChain %12 %61 
                                       f32_4 %329 = OpLoad %328 
                                       f32_3 %330 = OpVectorShuffle %329 %329 0 0 0 
                                       f32_3 %331 = OpFMul %327 %330 
                                       f32_4 %332 = OpLoad %183 
                                       f32_4 %333 = OpVectorShuffle %332 %331 4 5 6 3 
                                                      OpStore %183 %333 
                                       f32_4 %334 = OpLoad %183 
                                       f32_3 %335 = OpVectorShuffle %334 %334 3 3 3 
                                       f32_4 %336 = OpLoad %183 
                                       f32_3 %337 = OpVectorShuffle %336 %336 0 1 2 
                                       f32_3 %338 = OpFMul %335 %337 
                                       f32_4 %339 = OpLoad %183 
                                       f32_4 %340 = OpVectorShuffle %339 %338 4 5 6 3 
                                                      OpStore %183 %340 
                                       f32_4 %341 = OpLoad %183 
                                       f32_3 %342 = OpVectorShuffle %341 %341 0 1 2 
                                       f32_3 %343 = OpFMul %342 %134 
                                       f32_4 %344 = OpLoad %9 
                                       f32_3 %345 = OpVectorShuffle %344 %344 0 1 2 
                                       f32_3 %346 = OpFAdd %343 %345 
                                       f32_4 %347 = OpLoad %9 
                                       f32_4 %348 = OpVectorShuffle %347 %346 4 5 6 3 
                                                      OpStore %9 %348 
                                       f32_4 %349 = OpLoad %103 
                                       f32_3 %350 = OpVectorShuffle %349 %349 0 1 2 
                              Uniform f32_4* %351 = OpAccessChain %12 %61 
                                       f32_4 %352 = OpLoad %351 
                                       f32_3 %353 = OpVectorShuffle %352 %352 0 0 0 
                                       f32_3 %354 = OpFMul %350 %353 
                                       f32_4 %355 = OpLoad %103 
                                       f32_4 %356 = OpVectorShuffle %355 %354 4 5 6 3 
                                                      OpStore %103 %356 
                                       f32_4 %357 = OpLoad %103 
                                       f32_3 %358 = OpVectorShuffle %357 %357 3 3 3 
                                       f32_4 %359 = OpLoad %103 
                                       f32_3 %360 = OpVectorShuffle %359 %359 0 1 2 
                                       f32_3 %361 = OpFMul %358 %360 
                                       f32_4 %362 = OpLoad %103 
                                       f32_4 %363 = OpVectorShuffle %362 %361 4 5 6 3 
                                                      OpStore %103 %363 
                                       f32_4 %364 = OpLoad %103 
                                       f32_3 %365 = OpVectorShuffle %364 %364 0 1 2 
                                       f32_3 %366 = OpFMul %365 %141 
                                       f32_4 %367 = OpLoad %9 
                                       f32_3 %368 = OpVectorShuffle %367 %367 0 1 2 
                                       f32_3 %369 = OpFAdd %366 %368 
                                       f32_4 %370 = OpLoad %9 
                                       f32_4 %371 = OpVectorShuffle %370 %369 4 5 6 3 
                                                      OpStore %9 %371 
                                       f32_4 %372 = OpLoad %160 
                                       f32_3 %373 = OpVectorShuffle %372 %372 0 1 2 
                              Uniform f32_4* %374 = OpAccessChain %12 %61 
                                       f32_4 %375 = OpLoad %374 
                                       f32_3 %376 = OpVectorShuffle %375 %375 0 0 0 
                                       f32_3 %377 = OpFMul %373 %376 
                                       f32_4 %378 = OpLoad %103 
                                       f32_4 %379 = OpVectorShuffle %378 %377 4 5 6 3 
                                                      OpStore %103 %379 
                                       f32_4 %380 = OpLoad %160 
                                       f32_3 %381 = OpVectorShuffle %380 %380 3 3 3 
                                       f32_4 %382 = OpLoad %103 
                                       f32_3 %383 = OpVectorShuffle %382 %382 0 1 2 
                                       f32_3 %384 = OpFMul %381 %383 
                                       f32_4 %385 = OpLoad %103 
                                       f32_4 %386 = OpVectorShuffle %385 %384 4 5 6 3 
                                                      OpStore %103 %386 
                                       f32_4 %387 = OpLoad %103 
                                       f32_3 %388 = OpVectorShuffle %387 %387 0 1 2 
                                       f32_3 %389 = OpFMul %388 %134 
                                       f32_4 %390 = OpLoad %9 
                                       f32_3 %391 = OpVectorShuffle %390 %390 0 1 2 
                                       f32_3 %392 = OpFAdd %389 %391 
                                       f32_4 %393 = OpLoad %9 
                                       f32_4 %394 = OpVectorShuffle %393 %392 4 5 6 3 
                                                      OpStore %9 %394 
                              Uniform f32_4* %395 = OpAccessChain %12 %14 
                                       f32_4 %396 = OpLoad %395 
                                       f32_2 %397 = OpVectorShuffle %396 %396 2 2 
                              Uniform f32_4* %398 = OpAccessChain %12 %21 
                                       f32_4 %399 = OpLoad %398 
                                       f32_2 %400 = OpVectorShuffle %399 %399 0 1 
                                       f32_2 %401 = OpFMul %397 %400 
                                       f32_2 %402 = OpLoad vs_TEXCOORD0 
                                       f32_2 %403 = OpFAdd %401 %402 
                                       f32_4 %404 = OpLoad %103 
                                       f32_4 %405 = OpVectorShuffle %404 %403 4 5 2 3 
                                                      OpStore %103 %405 
                                       f32_4 %406 = OpLoad %103 
                                       f32_2 %407 = OpVectorShuffle %406 %406 0 1 
                              Uniform f32_4* %408 = OpAccessChain %12 %34 
                                       f32_4 %409 = OpLoad %408 
                                       f32_2 %410 = OpVectorShuffle %409 %409 0 1 
                                       f32_2 %411 = OpFMul %407 %410 
                              Uniform f32_4* %412 = OpAccessChain %12 %34 
                                       f32_4 %413 = OpLoad %412 
                                       f32_2 %414 = OpVectorShuffle %413 %413 2 3 
                                       f32_2 %415 = OpFAdd %411 %414 
                                       f32_4 %416 = OpLoad %103 
                                       f32_4 %417 = OpVectorShuffle %416 %415 4 5 2 3 
                                                      OpStore %103 %417 
                         read_only Texture2D %418 = OpLoad %47 
                                     sampler %419 = OpLoad %51 
                  read_only Texture2DSampled %420 = OpSampledImage %418 %419 
                                       f32_4 %421 = OpLoad %103 
                                       f32_2 %422 = OpVectorShuffle %421 %421 0 1 
                                       f32_4 %423 = OpImageSampleImplicitLod %420 %422 
                                                      OpStore %103 %423 
                                       f32_4 %424 = OpLoad %103 
                                       f32_3 %425 = OpVectorShuffle %424 %424 0 1 2 
                              Uniform f32_4* %426 = OpAccessChain %12 %61 
                                       f32_4 %427 = OpLoad %426 
                                       f32_3 %428 = OpVectorShuffle %427 %427 0 0 0 
                                       f32_3 %429 = OpFMul %425 %428 
                                       f32_4 %430 = OpLoad %103 
                                       f32_4 %431 = OpVectorShuffle %430 %429 4 5 6 3 
                                                      OpStore %103 %431 
                                       f32_4 %432 = OpLoad %103 
                                       f32_3 %433 = OpVectorShuffle %432 %432 3 3 3 
                                       f32_4 %434 = OpLoad %103 
                                       f32_3 %435 = OpVectorShuffle %434 %434 0 1 2 
                                       f32_3 %436 = OpFMul %433 %435 
                                       f32_4 %437 = OpLoad %103 
                                       f32_4 %438 = OpVectorShuffle %437 %436 4 5 6 3 
                                                      OpStore %103 %438 
                                       f32_4 %439 = OpLoad %103 
                                       f32_3 %440 = OpVectorShuffle %439 %439 0 1 2 
                                       f32_3 %441 = OpFMul %440 %141 
                                       f32_4 %442 = OpLoad %9 
                                       f32_3 %443 = OpVectorShuffle %442 %442 0 1 2 
                                       f32_3 %444 = OpFAdd %441 %443 
                                       f32_4 %445 = OpLoad %9 
                                       f32_4 %446 = OpVectorShuffle %445 %444 4 5 6 3 
                                                      OpStore %9 %446 
                                       f32_4 %447 = OpLoad %75 
                                       f32_3 %448 = OpVectorShuffle %447 %447 0 1 2 
                              Uniform f32_4* %449 = OpAccessChain %12 %61 
                                       f32_4 %450 = OpLoad %449 
                                       f32_3 %451 = OpVectorShuffle %450 %450 0 0 0 
                                       f32_3 %452 = OpFMul %448 %451 
                                       f32_4 %453 = OpLoad %75 
                                       f32_4 %454 = OpVectorShuffle %453 %452 4 5 6 3 
                                                      OpStore %75 %454 
                                       f32_4 %455 = OpLoad %75 
                                       f32_3 %456 = OpVectorShuffle %455 %455 0 1 2 
                                       f32_4 %457 = OpLoad %75 
                                       f32_3 %458 = OpVectorShuffle %457 %457 3 3 3 
                                       f32_3 %459 = OpFMul %456 %458 
                                       f32_4 %460 = OpLoad %9 
                                       f32_3 %461 = OpVectorShuffle %460 %460 0 1 2 
                                       f32_3 %462 = OpFAdd %459 %461 
                                       f32_4 %463 = OpLoad %9 
                                       f32_4 %464 = OpVectorShuffle %463 %462 4 5 6 3 
                                                      OpStore %9 %464 
                                       f32_4 %465 = OpLoad %9 
                                       f32_3 %466 = OpVectorShuffle %465 %465 0 1 2 
                              Uniform f32_4* %467 = OpAccessChain %12 %61 
                                       f32_4 %468 = OpLoad %467 
                                       f32_3 %469 = OpVectorShuffle %468 %468 1 1 1 
                                       f32_3 %470 = OpFMul %466 %469 
                                       f32_4 %471 = OpLoad %9 
                                       f32_4 %472 = OpVectorShuffle %471 %470 4 5 6 3 
                                                      OpStore %9 %472 
                                Private f32* %474 = OpAccessChain %9 %150 
                                         f32 %475 = OpLoad %474 
                                Private f32* %476 = OpAccessChain %9 %296 
                                         f32 %477 = OpLoad %476 
                                         f32 %478 = OpExtInst %1 40 %475 %477 
                                                      OpStore %473 %478 
                                Private f32* %479 = OpAccessChain %9 %153 
                                         f32 %480 = OpLoad %479 
                                         f32 %482 = OpExtInst %1 40 %480 %481 
                                Private f32* %483 = OpAccessChain %75 %296 
                                                      OpStore %483 %482 
                                         f32 %484 = OpLoad %473 
                                Private f32* %485 = OpAccessChain %75 %296 
                                         f32 %486 = OpLoad %485 
                                         f32 %487 = OpExtInst %1 40 %484 %486 
                                                      OpStore %473 %487 
                                         f32 %488 = OpLoad %473 
                                         f32 %489 = OpExtInst %1 37 %488 %148 
                                                      OpStore %473 %489 
                                         f32 %490 = OpLoad %473 
                                         f32 %492 = OpFMul %490 %491 
                                                      OpStore %473 %492 
                                         f32 %493 = OpLoad %473 
                                         f32 %494 = OpExtInst %1 9 %493 
                                                      OpStore %473 %494 
                                         f32 %495 = OpLoad %473 
                                         f32 %497 = OpFMul %495 %496 
                                                      OpStore %473 %497 
                                       f32_4 %500 = OpLoad %9 
                                       f32_3 %501 = OpVectorShuffle %500 %500 0 1 2 
                                         f32 %502 = OpLoad %473 
                                       f32_3 %503 = OpCompositeConstruct %502 %502 %502 
                                       f32_3 %504 = OpFDiv %501 %503 
                                       f32_4 %505 = OpLoad %499 
                                       f32_4 %506 = OpVectorShuffle %505 %504 4 5 6 3 
                                                      OpStore %499 %506 
                                         f32 %507 = OpLoad %473 
                                 Output f32* %510 = OpAccessChain %499 %508 
                                                      OpStore %510 %507 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "AB_HIGH_PRECISION" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "AB_HIGH_PRECISION" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in  vec4 in_POSITION0;
in  vec2 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _MainTex_TexelSize;
uniform 	vec4 _BloomParams;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
UNITY_LOCATION(1) uniform  sampler2D _AnamorphicRTS0;
in  vec2 vs_TEXCOORD0;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
void main()
{
    u_xlat0.xy = (-_MainTex_TexelSize.xy) * _BloomParams.zz + vs_TEXCOORD0.xy;
    u_xlat0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0 = texture(_MainTex, u_xlat0.xy);
    u_xlat1 = _MainTex_TexelSize.xyxy * vec4(0.0, -1.0, 1.0, -1.0);
    u_xlat1 = u_xlat1 * _BloomParams.zzzz + vs_TEXCOORD0.xyxy;
    u_xlat1 = u_xlat1 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
    u_xlat2 = texture(_MainTex, u_xlat1.xy);
    u_xlat1 = texture(_MainTex, u_xlat1.zw);
    u_xlat2.xyz = u_xlat2.xyz * vec3(0.125, 0.125, 0.125);
    u_xlat0.xyz = u_xlat0.xyz * vec3(0.0625, 0.0625, 0.0625) + u_xlat2.xyz;
    u_xlat0.xyz = u_xlat1.xyz * vec3(0.0625, 0.0625, 0.0625) + u_xlat0.xyz;
    u_xlat1 = _MainTex_TexelSize.xyxy * vec4(-1.0, 0.0, 1.0, 0.0);
    u_xlat1 = u_xlat1 * _BloomParams.zzzz + vs_TEXCOORD0.xyxy;
    u_xlat1 = u_xlat1 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
    u_xlat2 = texture(_MainTex, u_xlat1.xy);
    u_xlat1 = texture(_MainTex, u_xlat1.zw);
    u_xlat0.xyz = u_xlat2.xyz * vec3(0.125, 0.125, 0.125) + u_xlat0.xyz;
    u_xlat2.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat3 = texture(_MainTex, u_xlat2.xy);
    u_xlat2 = texture(_AnamorphicRTS0, u_xlat2.xy);
    u_xlat0.xyz = u_xlat3.xyz * vec3(0.25, 0.25, 0.25) + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat1.xyz * vec3(0.125, 0.125, 0.125) + u_xlat0.xyz;
    u_xlat1 = _MainTex_TexelSize.xyxy * vec4(-1.0, 1.0, 0.0, 1.0);
    u_xlat1 = u_xlat1 * _BloomParams.zzzz + vs_TEXCOORD0.xyxy;
    u_xlat1 = u_xlat1 * _MainTex_ST.xyxy + _MainTex_ST.zwzw;
    u_xlat3 = texture(_MainTex, u_xlat1.xy);
    u_xlat1 = texture(_MainTex, u_xlat1.zw);
    u_xlat0.xyz = u_xlat3.xyz * vec3(0.0625, 0.0625, 0.0625) + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat1.xyz * vec3(0.125, 0.125, 0.125) + u_xlat0.xyz;
    u_xlat1.xy = _MainTex_TexelSize.xy * _BloomParams.zz + vs_TEXCOORD0.xy;
    u_xlat1.xy = u_xlat1.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1 = texture(_MainTex, u_xlat1.xy);
    u_xlat0.xyz = u_xlat1.xyz * vec3(0.0625, 0.0625, 0.0625) + u_xlat0.xyz;
    SV_Target0.xyz = u_xlat2.xyz + u_xlat0.xyz;
    SV_Target0.w = 0.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "AB_HIGH_PRECISION" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 94
; Schema: 0
                                              OpCapability Shader 
                                       %1 = OpExtInstImport "GLSL.std.450" 
                                              OpMemoryModel Logical GLSL450 
                                              OpEntryPoint Vertex %4 "main" %11 %72 %84 %86 
                                              OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                              OpDecorate %11 Location 11 
                                              OpDecorate %16 ArrayStride 16 
                                              OpDecorate %17 ArrayStride 17 
                                              OpMemberDecorate %18 0 Offset 18 
                                              OpMemberDecorate %18 1 Offset 18 
                                              OpDecorate %18 Block 
                                              OpDecorate %20 DescriptorSet 20 
                                              OpDecorate %20 Binding 20 
                                              OpMemberDecorate %70 0 BuiltIn 70 
                                              OpMemberDecorate %70 1 BuiltIn 70 
                                              OpMemberDecorate %70 2 BuiltIn 70 
                                              OpDecorate %70 Block 
                                              OpDecorate vs_TEXCOORD0 Location 84 
                                              OpDecorate %86 Location 86 
                                       %2 = OpTypeVoid 
                                       %3 = OpTypeFunction %2 
                                       %6 = OpTypeFloat 32 
                                       %7 = OpTypeVector %6 4 
                                       %8 = OpTypePointer Private %7 
                        Private f32_4* %9 = OpVariable Private 
                                      %10 = OpTypePointer Input %7 
                         Input f32_4* %11 = OpVariable Input 
                                      %14 = OpTypeInt 32 0 
                                  u32 %15 = OpConstant 4 
                                      %16 = OpTypeArray %7 %15 
                                      %17 = OpTypeArray %7 %15 
                                      %18 = OpTypeStruct %16 %17 
                                      %19 = OpTypePointer Uniform %18 
Uniform struct {f32_4[4]; f32_4[4];}* %20 = OpVariable Uniform 
                                      %21 = OpTypeInt 32 1 
                                  i32 %22 = OpConstant 0 
                                  i32 %23 = OpConstant 1 
                                      %24 = OpTypePointer Uniform %7 
                                  i32 %35 = OpConstant 2 
                                  i32 %44 = OpConstant 3 
                       Private f32_4* %48 = OpVariable Private 
                                  u32 %68 = OpConstant 1 
                                      %69 = OpTypeArray %6 %68 
                                      %70 = OpTypeStruct %7 %6 %69 
                                      %71 = OpTypePointer Output %70 
 Output struct {f32_4; f32; f32[1];}* %72 = OpVariable Output 
                                      %80 = OpTypePointer Output %7 
                                      %82 = OpTypeVector %6 2 
                                      %83 = OpTypePointer Output %82 
               Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                      %85 = OpTypePointer Input %82 
                         Input f32_2* %86 = OpVariable Input 
                                      %88 = OpTypePointer Output %6 
                                  void %4 = OpFunction None %3 
                                       %5 = OpLabel 
                                f32_4 %12 = OpLoad %11 
                                f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                       Uniform f32_4* %25 = OpAccessChain %20 %22 %23 
                                f32_4 %26 = OpLoad %25 
                                f32_4 %27 = OpFMul %13 %26 
                                              OpStore %9 %27 
                       Uniform f32_4* %28 = OpAccessChain %20 %22 %22 
                                f32_4 %29 = OpLoad %28 
                                f32_4 %30 = OpLoad %11 
                                f32_4 %31 = OpVectorShuffle %30 %30 0 0 0 0 
                                f32_4 %32 = OpFMul %29 %31 
                                f32_4 %33 = OpLoad %9 
                                f32_4 %34 = OpFAdd %32 %33 
                                              OpStore %9 %34 
                       Uniform f32_4* %36 = OpAccessChain %20 %22 %35 
                                f32_4 %37 = OpLoad %36 
                                f32_4 %38 = OpLoad %11 
                                f32_4 %39 = OpVectorShuffle %38 %38 2 2 2 2 
                                f32_4 %40 = OpFMul %37 %39 
                                f32_4 %41 = OpLoad %9 
                                f32_4 %42 = OpFAdd %40 %41 
                                              OpStore %9 %42 
                                f32_4 %43 = OpLoad %9 
                       Uniform f32_4* %45 = OpAccessChain %20 %22 %44 
                                f32_4 %46 = OpLoad %45 
                                f32_4 %47 = OpFAdd %43 %46 
                                              OpStore %9 %47 
                                f32_4 %49 = OpLoad %9 
                                f32_4 %50 = OpVectorShuffle %49 %49 1 1 1 1 
                       Uniform f32_4* %51 = OpAccessChain %20 %23 %23 
                                f32_4 %52 = OpLoad %51 
                                f32_4 %53 = OpFMul %50 %52 
                                              OpStore %48 %53 
                       Uniform f32_4* %54 = OpAccessChain %20 %23 %22 
                                f32_4 %55 = OpLoad %54 
                                f32_4 %56 = OpLoad %9 
                                f32_4 %57 = OpVectorShuffle %56 %56 0 0 0 0 
                                f32_4 %58 = OpFMul %55 %57 
                                f32_4 %59 = OpLoad %48 
                                f32_4 %60 = OpFAdd %58 %59 
                                              OpStore %48 %60 
                       Uniform f32_4* %61 = OpAccessChain %20 %23 %35 
                                f32_4 %62 = OpLoad %61 
                                f32_4 %63 = OpLoad %9 
                                f32_4 %64 = OpVectorShuffle %63 %63 2 2 2 2 
                                f32_4 %65 = OpFMul %62 %64 
                                f32_4 %66 = OpLoad %48 
                                f32_4 %67 = OpFAdd %65 %66 
                                              OpStore %48 %67 
                       Uniform f32_4* %73 = OpAccessChain %20 %23 %44 
                                f32_4 %74 = OpLoad %73 
                                f32_4 %75 = OpLoad %9 
                                f32_4 %76 = OpVectorShuffle %75 %75 3 3 3 3 
                                f32_4 %77 = OpFMul %74 %76 
                                f32_4 %78 = OpLoad %48 
                                f32_4 %79 = OpFAdd %77 %78 
                        Output f32_4* %81 = OpAccessChain %72 %22 
                                              OpStore %81 %79 
                                f32_2 %87 = OpLoad %86 
                                              OpStore vs_TEXCOORD0 %87 
                          Output f32* %89 = OpAccessChain %72 %22 %68 
                                  f32 %90 = OpLoad %89 
                                  f32 %91 = OpFNegate %90 
                          Output f32* %92 = OpAccessChain %72 %22 %68 
                                              OpStore %92 %91 
                                              OpReturn
                                              OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 319
; Schema: 0
                                               OpCapability Shader 
                                        %1 = OpExtInstImport "GLSL.std.450" 
                                               OpMemoryModel Logical GLSL450 
                                               OpEntryPoint Fragment %4 "main" %28 %308 
                                               OpExecutionMode %4 OriginUpperLeft 
                                               OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                               OpMemberDecorate %11 0 Offset 11 
                                               OpMemberDecorate %11 1 Offset 11 
                                               OpMemberDecorate %11 2 Offset 11 
                                               OpDecorate %11 Block 
                                               OpDecorate %13 DescriptorSet 13 
                                               OpDecorate %13 Binding 13 
                                               OpDecorate vs_TEXCOORD0 Location 28 
                                               OpDecorate %48 DescriptorSet 48 
                                               OpDecorate %48 Binding 48 
                                               OpDecorate %52 DescriptorSet 52 
                                               OpDecorate %52 Binding 52 
                                               OpDecorate %201 DescriptorSet 201 
                                               OpDecorate %201 Binding 201 
                                               OpDecorate %203 DescriptorSet 203 
                                               OpDecorate %203 Binding 203 
                                               OpDecorate %308 Location 308 
                                        %2 = OpTypeVoid 
                                        %3 = OpTypeFunction %2 
                                        %6 = OpTypeFloat 32 
                                        %7 = OpTypeVector %6 3 
                                        %8 = OpTypePointer Private %7 
                         Private f32_3* %9 = OpVariable Private 
                                       %10 = OpTypeVector %6 4 
                                       %11 = OpTypeStruct %10 %10 %10 
                                       %12 = OpTypePointer Uniform %11 
Uniform struct {f32_4; f32_4; f32_4;}* %13 = OpVariable Uniform 
                                       %14 = OpTypeInt 32 1 
                                   i32 %15 = OpConstant 2 
                                       %16 = OpTypeVector %6 2 
                                       %17 = OpTypePointer Uniform %10 
                                   i32 %22 = OpConstant 1 
                                       %27 = OpTypePointer Input %16 
                 Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                   i32 %35 = OpConstant 0 
                                       %46 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                       %47 = OpTypePointer UniformConstant %46 
  UniformConstant read_only Texture2D* %48 = OpVariable UniformConstant 
                                       %50 = OpTypeSampler 
                                       %51 = OpTypePointer UniformConstant %50 
              UniformConstant sampler* %52 = OpVariable UniformConstant 
                                       %54 = OpTypeSampledImage %46 
                                       %60 = OpTypePointer Private %10 
                        Private f32_4* %61 = OpVariable Private 
                                   f32 %73 = OpConstant 3.674022E-40 
                                   f32 %74 = OpConstant 3.674022E-40 
                                 f32_4 %75 = OpConstantComposite %73 %74 %74 %73 
                        Private f32_4* %89 = OpVariable Private 
                                  f32 %110 = OpConstant 3.674022E-40 
                                f32_3 %111 = OpConstantComposite %110 %110 %110 
                                  f32 %116 = OpConstant 3.674022E-40 
                                f32_3 %117 = OpConstantComposite %116 %116 %116 
                                  f32 %122 = OpConstant 3.674022E-40 
                                      %123 = OpTypeInt 32 0 
                                  u32 %124 = OpConstant 1 
                                      %125 = OpTypePointer Private %6 
                                  u32 %127 = OpConstant 2 
                       Private f32_4* %134 = OpVariable Private 
                       Private f32_3* %157 = OpVariable Private 
 UniformConstant read_only Texture2D* %201 = OpVariable UniformConstant 
             UniformConstant sampler* %203 = OpVariable UniformConstant 
                                  f32 %213 = OpConstant 3.674022E-40 
                                f32_3 %214 = OpConstantComposite %213 %213 %213 
                                      %218 = OpTypePointer Uniform %6 
                                  u32 %222 = OpConstant 0 
                                      %307 = OpTypePointer Output %10 
                        Output f32_4* %308 = OpVariable Output 
                                  u32 %315 = OpConstant 3 
                                      %316 = OpTypePointer Output %6 
                                   void %4 = OpFunction None %3 
                                        %5 = OpLabel 
                        Uniform f32_4* %18 = OpAccessChain %13 %15 
                                 f32_4 %19 = OpLoad %18 
                                 f32_2 %20 = OpVectorShuffle %19 %19 2 2 
                                 f32_2 %21 = OpFNegate %20 
                        Uniform f32_4* %23 = OpAccessChain %13 %22 
                                 f32_4 %24 = OpLoad %23 
                                 f32_2 %25 = OpVectorShuffle %24 %24 0 1 
                                 f32_2 %26 = OpFMul %21 %25 
                                 f32_2 %29 = OpLoad vs_TEXCOORD0 
                                 f32_2 %30 = OpFAdd %26 %29 
                                 f32_3 %31 = OpLoad %9 
                                 f32_3 %32 = OpVectorShuffle %31 %30 3 4 2 
                                               OpStore %9 %32 
                                 f32_3 %33 = OpLoad %9 
                                 f32_2 %34 = OpVectorShuffle %33 %33 0 1 
                        Uniform f32_4* %36 = OpAccessChain %13 %35 
                                 f32_4 %37 = OpLoad %36 
                                 f32_2 %38 = OpVectorShuffle %37 %37 0 1 
                                 f32_2 %39 = OpFMul %34 %38 
                        Uniform f32_4* %40 = OpAccessChain %13 %35 
                                 f32_4 %41 = OpLoad %40 
                                 f32_2 %42 = OpVectorShuffle %41 %41 2 3 
                                 f32_2 %43 = OpFAdd %39 %42 
                                 f32_3 %44 = OpLoad %9 
                                 f32_3 %45 = OpVectorShuffle %44 %43 3 4 2 
                                               OpStore %9 %45 
                   read_only Texture2D %49 = OpLoad %48 
                               sampler %53 = OpLoad %52 
            read_only Texture2DSampled %55 = OpSampledImage %49 %53 
                                 f32_3 %56 = OpLoad %9 
                                 f32_2 %57 = OpVectorShuffle %56 %56 0 1 
                                 f32_4 %58 = OpImageSampleImplicitLod %55 %57 
                                 f32_3 %59 = OpVectorShuffle %58 %58 0 1 2 
                                               OpStore %9 %59 
                        Uniform f32_4* %62 = OpAccessChain %13 %22 
                                 f32_4 %63 = OpLoad %62 
                                 f32_2 %64 = OpVectorShuffle %63 %63 0 1 
                        Uniform f32_4* %65 = OpAccessChain %13 %15 
                                 f32_4 %66 = OpLoad %65 
                                 f32_2 %67 = OpVectorShuffle %66 %66 2 2 
                                 f32_2 %68 = OpFMul %64 %67 
                                 f32_4 %69 = OpLoad %61 
                                 f32_4 %70 = OpVectorShuffle %69 %68 4 5 2 3 
                                               OpStore %61 %70 
                                 f32_4 %71 = OpLoad %61 
                                 f32_4 %72 = OpVectorShuffle %71 %71 0 1 0 1 
                                 f32_4 %76 = OpFMul %72 %75 
                                 f32_2 %77 = OpLoad vs_TEXCOORD0 
                                 f32_4 %78 = OpVectorShuffle %77 %77 0 1 0 1 
                                 f32_4 %79 = OpFAdd %76 %78 
                                               OpStore %61 %79 
                                 f32_4 %80 = OpLoad %61 
                        Uniform f32_4* %81 = OpAccessChain %13 %35 
                                 f32_4 %82 = OpLoad %81 
                                 f32_4 %83 = OpVectorShuffle %82 %82 0 1 0 1 
                                 f32_4 %84 = OpFMul %80 %83 
                        Uniform f32_4* %85 = OpAccessChain %13 %35 
                                 f32_4 %86 = OpLoad %85 
                                 f32_4 %87 = OpVectorShuffle %86 %86 2 3 2 3 
                                 f32_4 %88 = OpFAdd %84 %87 
                                               OpStore %61 %88 
                   read_only Texture2D %90 = OpLoad %48 
                               sampler %91 = OpLoad %52 
            read_only Texture2DSampled %92 = OpSampledImage %90 %91 
                                 f32_4 %93 = OpLoad %61 
                                 f32_2 %94 = OpVectorShuffle %93 %93 0 1 
                                 f32_4 %95 = OpImageSampleImplicitLod %92 %94 
                                 f32_3 %96 = OpVectorShuffle %95 %95 0 1 2 
                                 f32_4 %97 = OpLoad %89 
                                 f32_4 %98 = OpVectorShuffle %97 %96 4 5 6 3 
                                               OpStore %89 %98 
                   read_only Texture2D %99 = OpLoad %48 
                              sampler %100 = OpLoad %52 
           read_only Texture2DSampled %101 = OpSampledImage %99 %100 
                                f32_4 %102 = OpLoad %61 
                                f32_2 %103 = OpVectorShuffle %102 %102 2 3 
                                f32_4 %104 = OpImageSampleImplicitLod %101 %103 
                                f32_3 %105 = OpVectorShuffle %104 %104 0 1 2 
                                f32_4 %106 = OpLoad %61 
                                f32_4 %107 = OpVectorShuffle %106 %105 4 5 6 3 
                                               OpStore %61 %107 
                                f32_4 %108 = OpLoad %89 
                                f32_3 %109 = OpVectorShuffle %108 %108 0 1 2 
                                f32_3 %112 = OpFMul %109 %111 
                                f32_4 %113 = OpLoad %89 
                                f32_4 %114 = OpVectorShuffle %113 %112 4 5 6 3 
                                               OpStore %89 %114 
                                f32_3 %115 = OpLoad %9 
                                f32_3 %118 = OpFMul %115 %117 
                                f32_4 %119 = OpLoad %89 
                                f32_3 %120 = OpVectorShuffle %119 %119 0 1 2 
                                f32_3 %121 = OpFAdd %118 %120 
                                               OpStore %9 %121 
                         Private f32* %126 = OpAccessChain %89 %124 
                                               OpStore %126 %122 
                         Private f32* %128 = OpAccessChain %89 %127 
                                               OpStore %128 %74 
                       Uniform f32_4* %129 = OpAccessChain %13 %15 
                                f32_4 %130 = OpLoad %129 
                                f32_2 %131 = OpVectorShuffle %130 %130 2 2 
                                f32_4 %132 = OpLoad %89 
                                f32_4 %133 = OpVectorShuffle %132 %131 4 1 2 5 
                                               OpStore %89 %133 
                                f32_4 %135 = OpLoad %89 
                                f32_4 %136 = OpVectorShuffle %135 %135 1 0 0 1 
                       Uniform f32_4* %137 = OpAccessChain %13 %22 
                                f32_4 %138 = OpLoad %137 
                                f32_4 %139 = OpVectorShuffle %138 %138 0 1 0 1 
                                f32_4 %140 = OpFMul %136 %139 
                                               OpStore %134 %140 
                                f32_4 %141 = OpLoad %134 
                                f32_4 %142 = OpLoad %89 
                                f32_4 %143 = OpVectorShuffle %142 %142 3 2 2 3 
                                f32_4 %144 = OpFMul %141 %143 
                                f32_2 %145 = OpLoad vs_TEXCOORD0 
                                f32_4 %146 = OpVectorShuffle %145 %145 0 1 0 1 
                                f32_4 %147 = OpFAdd %144 %146 
                                               OpStore %89 %147 
                                f32_4 %148 = OpLoad %89 
                       Uniform f32_4* %149 = OpAccessChain %13 %35 
                                f32_4 %150 = OpLoad %149 
                                f32_4 %151 = OpVectorShuffle %150 %150 0 1 0 1 
                                f32_4 %152 = OpFMul %148 %151 
                       Uniform f32_4* %153 = OpAccessChain %13 %35 
                                f32_4 %154 = OpLoad %153 
                                f32_4 %155 = OpVectorShuffle %154 %154 2 3 2 3 
                                f32_4 %156 = OpFAdd %152 %155 
                                               OpStore %89 %156 
                  read_only Texture2D %158 = OpLoad %48 
                              sampler %159 = OpLoad %52 
           read_only Texture2DSampled %160 = OpSampledImage %158 %159 
                                f32_4 %161 = OpLoad %89 
                                f32_2 %162 = OpVectorShuffle %161 %161 0 1 
                                f32_4 %163 = OpImageSampleImplicitLod %160 %162 
                                f32_3 %164 = OpVectorShuffle %163 %163 0 1 2 
                                               OpStore %157 %164 
                  read_only Texture2D %165 = OpLoad %48 
                              sampler %166 = OpLoad %52 
           read_only Texture2DSampled %167 = OpSampledImage %165 %166 
                                f32_4 %168 = OpLoad %89 
                                f32_2 %169 = OpVectorShuffle %168 %168 2 3 
                                f32_4 %170 = OpImageSampleImplicitLod %167 %169 
                                f32_3 %171 = OpVectorShuffle %170 %170 0 1 2 
                                f32_4 %172 = OpLoad %89 
                                f32_4 %173 = OpVectorShuffle %172 %171 4 5 6 3 
                                               OpStore %89 %173 
                                f32_3 %174 = OpLoad %157 
                                f32_3 %175 = OpFMul %174 %117 
                                f32_3 %176 = OpLoad %9 
                                f32_3 %177 = OpFAdd %175 %176 
                                               OpStore %9 %177 
                                f32_4 %178 = OpLoad %61 
                                f32_3 %179 = OpVectorShuffle %178 %178 0 1 2 
                                f32_3 %180 = OpFMul %179 %111 
                                f32_3 %181 = OpLoad %9 
                                f32_3 %182 = OpFAdd %180 %181 
                                               OpStore %9 %182 
                                f32_2 %183 = OpLoad vs_TEXCOORD0 
                       Uniform f32_4* %184 = OpAccessChain %13 %35 
                                f32_4 %185 = OpLoad %184 
                                f32_2 %186 = OpVectorShuffle %185 %185 0 1 
                                f32_2 %187 = OpFMul %183 %186 
                       Uniform f32_4* %188 = OpAccessChain %13 %35 
                                f32_4 %189 = OpLoad %188 
                                f32_2 %190 = OpVectorShuffle %189 %189 2 3 
                                f32_2 %191 = OpFAdd %187 %190 
                                f32_4 %192 = OpLoad %61 
                                f32_4 %193 = OpVectorShuffle %192 %191 4 5 2 3 
                                               OpStore %61 %193 
                  read_only Texture2D %194 = OpLoad %48 
                              sampler %195 = OpLoad %52 
           read_only Texture2DSampled %196 = OpSampledImage %194 %195 
                                f32_4 %197 = OpLoad %61 
                                f32_2 %198 = OpVectorShuffle %197 %197 0 1 
                                f32_4 %199 = OpImageSampleImplicitLod %196 %198 
                                f32_3 %200 = OpVectorShuffle %199 %199 0 1 2 
                                               OpStore %157 %200 
                  read_only Texture2D %202 = OpLoad %201 
                              sampler %204 = OpLoad %203 
           read_only Texture2DSampled %205 = OpSampledImage %202 %204 
                                f32_4 %206 = OpLoad %61 
                                f32_2 %207 = OpVectorShuffle %206 %206 0 1 
                                f32_4 %208 = OpImageSampleImplicitLod %205 %207 
                                f32_3 %209 = OpVectorShuffle %208 %208 0 1 2 
                                f32_4 %210 = OpLoad %61 
                                f32_4 %211 = OpVectorShuffle %210 %209 4 5 6 3 
                                               OpStore %61 %211 
                                f32_3 %212 = OpLoad %157 
                                f32_3 %215 = OpFMul %212 %214 
                                f32_3 %216 = OpLoad %9 
                                f32_3 %217 = OpFAdd %215 %216 
                                               OpStore %9 %217 
                         Uniform f32* %219 = OpAccessChain %13 %15 %127 
                                  f32 %220 = OpLoad %219 
                         Private f32* %221 = OpAccessChain %157 %124 
                                               OpStore %221 %220 
                         Private f32* %223 = OpAccessChain %157 %222 
                                               OpStore %223 %73 
                                f32_4 %224 = OpLoad %134 
                                f32_3 %225 = OpLoad %157 
                                f32_4 %226 = OpVectorShuffle %225 %225 1 0 0 1 
                                f32_4 %227 = OpFMul %224 %226 
                                f32_2 %228 = OpLoad vs_TEXCOORD0 
                                f32_4 %229 = OpVectorShuffle %228 %228 0 1 0 1 
                                f32_4 %230 = OpFAdd %227 %229 
                                               OpStore %134 %230 
                                f32_4 %231 = OpLoad %134 
                       Uniform f32_4* %232 = OpAccessChain %13 %35 
                                f32_4 %233 = OpLoad %232 
                                f32_4 %234 = OpVectorShuffle %233 %233 0 1 0 1 
                                f32_4 %235 = OpFMul %231 %234 
                       Uniform f32_4* %236 = OpAccessChain %13 %35 
                                f32_4 %237 = OpLoad %236 
                                f32_4 %238 = OpVectorShuffle %237 %237 2 3 2 3 
                                f32_4 %239 = OpFAdd %235 %238 
                                               OpStore %134 %239 
                  read_only Texture2D %240 = OpLoad %48 
                              sampler %241 = OpLoad %52 
           read_only Texture2DSampled %242 = OpSampledImage %240 %241 
                                f32_4 %243 = OpLoad %134 
                                f32_2 %244 = OpVectorShuffle %243 %243 0 1 
                                f32_4 %245 = OpImageSampleImplicitLod %242 %244 
                                f32_3 %246 = OpVectorShuffle %245 %245 0 1 2 
                                               OpStore %157 %246 
                  read_only Texture2D %247 = OpLoad %48 
                              sampler %248 = OpLoad %52 
           read_only Texture2DSampled %249 = OpSampledImage %247 %248 
                                f32_4 %250 = OpLoad %134 
                                f32_2 %251 = OpVectorShuffle %250 %250 2 3 
                                f32_4 %252 = OpImageSampleImplicitLod %249 %251 
                                f32_3 %253 = OpVectorShuffle %252 %252 0 1 2 
                                f32_4 %254 = OpLoad %134 
                                f32_4 %255 = OpVectorShuffle %254 %253 4 5 6 3 
                                               OpStore %134 %255 
                                f32_3 %256 = OpLoad %157 
                                f32_3 %257 = OpFMul %256 %111 
                                f32_3 %258 = OpLoad %9 
                                f32_3 %259 = OpFAdd %257 %258 
                                               OpStore %9 %259 
                                f32_4 %260 = OpLoad %89 
                                f32_3 %261 = OpVectorShuffle %260 %260 0 1 2 
                                f32_3 %262 = OpFMul %261 %117 
                                f32_3 %263 = OpLoad %9 
                                f32_3 %264 = OpFAdd %262 %263 
                                               OpStore %9 %264 
                                f32_4 %265 = OpLoad %134 
                                f32_3 %266 = OpVectorShuffle %265 %265 0 1 2 
                                f32_3 %267 = OpFMul %266 %111 
                                f32_3 %268 = OpLoad %9 
                                f32_3 %269 = OpFAdd %267 %268 
                                               OpStore %9 %269 
                       Uniform f32_4* %270 = OpAccessChain %13 %15 
                                f32_4 %271 = OpLoad %270 
                                f32_2 %272 = OpVectorShuffle %271 %271 2 2 
                       Uniform f32_4* %273 = OpAccessChain %13 %22 
                                f32_4 %274 = OpLoad %273 
                                f32_2 %275 = OpVectorShuffle %274 %274 0 1 
                                f32_2 %276 = OpFMul %272 %275 
                                f32_2 %277 = OpLoad vs_TEXCOORD0 
                                f32_2 %278 = OpFAdd %276 %277 
                                f32_4 %279 = OpLoad %89 
                                f32_4 %280 = OpVectorShuffle %279 %278 4 5 2 3 
                                               OpStore %89 %280 
                                f32_4 %281 = OpLoad %89 
                                f32_2 %282 = OpVectorShuffle %281 %281 0 1 
                       Uniform f32_4* %283 = OpAccessChain %13 %35 
                                f32_4 %284 = OpLoad %283 
                                f32_2 %285 = OpVectorShuffle %284 %284 0 1 
                                f32_2 %286 = OpFMul %282 %285 
                       Uniform f32_4* %287 = OpAccessChain %13 %35 
                                f32_4 %288 = OpLoad %287 
                                f32_2 %289 = OpVectorShuffle %288 %288 2 3 
                                f32_2 %290 = OpFAdd %286 %289 
                                f32_4 %291 = OpLoad %89 
                                f32_4 %292 = OpVectorShuffle %291 %290 4 5 2 3 
                                               OpStore %89 %292 
                  read_only Texture2D %293 = OpLoad %48 
                              sampler %294 = OpLoad %52 
           read_only Texture2DSampled %295 = OpSampledImage %293 %294 
                                f32_4 %296 = OpLoad %89 
                                f32_2 %297 = OpVectorShuffle %296 %296 0 1 
                                f32_4 %298 = OpImageSampleImplicitLod %295 %297 
                                f32_3 %299 = OpVectorShuffle %298 %298 0 1 2 
                                f32_4 %300 = OpLoad %89 
                                f32_4 %301 = OpVectorShuffle %300 %299 4 5 6 3 
                                               OpStore %89 %301 
                                f32_4 %302 = OpLoad %89 
                                f32_3 %303 = OpVectorShuffle %302 %302 0 1 2 
                                f32_3 %304 = OpFMul %303 %117 
                                f32_3 %305 = OpLoad %9 
                                f32_3 %306 = OpFAdd %304 %305 
                                               OpStore %9 %306 
                                f32_4 %309 = OpLoad %61 
                                f32_3 %310 = OpVectorShuffle %309 %309 0 1 2 
                                f32_3 %311 = OpLoad %9 
                                f32_3 %312 = OpFAdd %310 %311 
                                f32_4 %313 = OpLoad %308 
                                f32_4 %314 = OpVectorShuffle %313 %312 4 5 6 3 
                                               OpStore %308 %314 
                          Output f32* %317 = OpAccessChain %308 %315 
                                               OpStore %317 %73 
                                               OpReturn
                                               OpFunctionEnd
"
}
}
Program "fp" {
SubProgram "d3d11 " {
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
""
}
SubProgram "vulkan " {
""
}
SubProgram "d3d11 " {
Keywords { "AB_HIGH_PRECISION" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "AB_HIGH_PRECISION" }
""
}
SubProgram "vulkan " {
Keywords { "AB_HIGH_PRECISION" }
""
}
}
}
 Pass {
  Name "frag_weightedAddPS1"
  ZTest Always
  ZWrite Off
  Cull Off
  GpuProgramID 1290203
Program "vp" {
SubProgram "d3d11 " {
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in  vec4 in_POSITION0;
in  vec2 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _AnamorphicGlareWeights0;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BloomRange;
UNITY_LOCATION(0) uniform  sampler2D _AnamorphicRTS0;
in  vec2 vs_TEXCOORD0;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
float u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0 = texture(_AnamorphicRTS0, u_xlat0.xy);
    u_xlat0.xyz = u_xlat0.xyz * _BloomRange.xxx;
    u_xlat0.xyz = u_xlat0.www * u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * _AnamorphicGlareWeights0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * _BloomRange.yyy;
    u_xlat6 = max(u_xlat0.y, u_xlat0.x);
    u_xlat1 = max(u_xlat0.z, 9.99999997e-07);
    u_xlat6 = max(u_xlat6, u_xlat1);
    u_xlat6 = min(u_xlat6, 1.0);
    u_xlat6 = u_xlat6 * 255.0;
    u_xlat6 = ceil(u_xlat6);
    u_xlat6 = u_xlat6 * 0.00392156886;
    SV_Target0.xyz = u_xlat0.xyz / vec3(u_xlat6);
    SV_Target0.w = u_xlat6;
    return;
}

#endif
"
}
SubProgram "vulkan " {
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 94
; Schema: 0
                                              OpCapability Shader 
                                       %1 = OpExtInstImport "GLSL.std.450" 
                                              OpMemoryModel Logical GLSL450 
                                              OpEntryPoint Vertex %4 "main" %11 %72 %84 %86 
                                              OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                              OpDecorate %11 Location 11 
                                              OpDecorate %16 ArrayStride 16 
                                              OpDecorate %17 ArrayStride 17 
                                              OpMemberDecorate %18 0 Offset 18 
                                              OpMemberDecorate %18 1 Offset 18 
                                              OpDecorate %18 Block 
                                              OpDecorate %20 DescriptorSet 20 
                                              OpDecorate %20 Binding 20 
                                              OpMemberDecorate %70 0 BuiltIn 70 
                                              OpMemberDecorate %70 1 BuiltIn 70 
                                              OpMemberDecorate %70 2 BuiltIn 70 
                                              OpDecorate %70 Block 
                                              OpDecorate vs_TEXCOORD0 Location 84 
                                              OpDecorate %86 Location 86 
                                       %2 = OpTypeVoid 
                                       %3 = OpTypeFunction %2 
                                       %6 = OpTypeFloat 32 
                                       %7 = OpTypeVector %6 4 
                                       %8 = OpTypePointer Private %7 
                        Private f32_4* %9 = OpVariable Private 
                                      %10 = OpTypePointer Input %7 
                         Input f32_4* %11 = OpVariable Input 
                                      %14 = OpTypeInt 32 0 
                                  u32 %15 = OpConstant 4 
                                      %16 = OpTypeArray %7 %15 
                                      %17 = OpTypeArray %7 %15 
                                      %18 = OpTypeStruct %16 %17 
                                      %19 = OpTypePointer Uniform %18 
Uniform struct {f32_4[4]; f32_4[4];}* %20 = OpVariable Uniform 
                                      %21 = OpTypeInt 32 1 
                                  i32 %22 = OpConstant 0 
                                  i32 %23 = OpConstant 1 
                                      %24 = OpTypePointer Uniform %7 
                                  i32 %35 = OpConstant 2 
                                  i32 %44 = OpConstant 3 
                       Private f32_4* %48 = OpVariable Private 
                                  u32 %68 = OpConstant 1 
                                      %69 = OpTypeArray %6 %68 
                                      %70 = OpTypeStruct %7 %6 %69 
                                      %71 = OpTypePointer Output %70 
 Output struct {f32_4; f32; f32[1];}* %72 = OpVariable Output 
                                      %80 = OpTypePointer Output %7 
                                      %82 = OpTypeVector %6 2 
                                      %83 = OpTypePointer Output %82 
               Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                      %85 = OpTypePointer Input %82 
                         Input f32_2* %86 = OpVariable Input 
                                      %88 = OpTypePointer Output %6 
                                  void %4 = OpFunction None %3 
                                       %5 = OpLabel 
                                f32_4 %12 = OpLoad %11 
                                f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                       Uniform f32_4* %25 = OpAccessChain %20 %22 %23 
                                f32_4 %26 = OpLoad %25 
                                f32_4 %27 = OpFMul %13 %26 
                                              OpStore %9 %27 
                       Uniform f32_4* %28 = OpAccessChain %20 %22 %22 
                                f32_4 %29 = OpLoad %28 
                                f32_4 %30 = OpLoad %11 
                                f32_4 %31 = OpVectorShuffle %30 %30 0 0 0 0 
                                f32_4 %32 = OpFMul %29 %31 
                                f32_4 %33 = OpLoad %9 
                                f32_4 %34 = OpFAdd %32 %33 
                                              OpStore %9 %34 
                       Uniform f32_4* %36 = OpAccessChain %20 %22 %35 
                                f32_4 %37 = OpLoad %36 
                                f32_4 %38 = OpLoad %11 
                                f32_4 %39 = OpVectorShuffle %38 %38 2 2 2 2 
                                f32_4 %40 = OpFMul %37 %39 
                                f32_4 %41 = OpLoad %9 
                                f32_4 %42 = OpFAdd %40 %41 
                                              OpStore %9 %42 
                                f32_4 %43 = OpLoad %9 
                       Uniform f32_4* %45 = OpAccessChain %20 %22 %44 
                                f32_4 %46 = OpLoad %45 
                                f32_4 %47 = OpFAdd %43 %46 
                                              OpStore %9 %47 
                                f32_4 %49 = OpLoad %9 
                                f32_4 %50 = OpVectorShuffle %49 %49 1 1 1 1 
                       Uniform f32_4* %51 = OpAccessChain %20 %23 %23 
                                f32_4 %52 = OpLoad %51 
                                f32_4 %53 = OpFMul %50 %52 
                                              OpStore %48 %53 
                       Uniform f32_4* %54 = OpAccessChain %20 %23 %22 
                                f32_4 %55 = OpLoad %54 
                                f32_4 %56 = OpLoad %9 
                                f32_4 %57 = OpVectorShuffle %56 %56 0 0 0 0 
                                f32_4 %58 = OpFMul %55 %57 
                                f32_4 %59 = OpLoad %48 
                                f32_4 %60 = OpFAdd %58 %59 
                                              OpStore %48 %60 
                       Uniform f32_4* %61 = OpAccessChain %20 %23 %35 
                                f32_4 %62 = OpLoad %61 
                                f32_4 %63 = OpLoad %9 
                                f32_4 %64 = OpVectorShuffle %63 %63 2 2 2 2 
                                f32_4 %65 = OpFMul %62 %64 
                                f32_4 %66 = OpLoad %48 
                                f32_4 %67 = OpFAdd %65 %66 
                                              OpStore %48 %67 
                       Uniform f32_4* %73 = OpAccessChain %20 %23 %44 
                                f32_4 %74 = OpLoad %73 
                                f32_4 %75 = OpLoad %9 
                                f32_4 %76 = OpVectorShuffle %75 %75 3 3 3 3 
                                f32_4 %77 = OpFMul %74 %76 
                                f32_4 %78 = OpLoad %48 
                                f32_4 %79 = OpFAdd %77 %78 
                        Output f32_4* %81 = OpAccessChain %72 %22 
                                              OpStore %81 %79 
                                f32_2 %87 = OpLoad %86 
                                              OpStore vs_TEXCOORD0 %87 
                          Output f32* %89 = OpAccessChain %72 %22 %68 
                                  f32 %90 = OpLoad %89 
                                  f32 %91 = OpFNegate %90 
                          Output f32* %92 = OpAccessChain %72 %22 %68 
                                              OpStore %92 %91 
                                              OpReturn
                                              OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 121
; Schema: 0
                                               OpCapability Shader 
                                        %1 = OpExtInstImport "GLSL.std.450" 
                                               OpMemoryModel Logical GLSL450 
                                               OpEntryPoint Fragment %4 "main" %12 %108 
                                               OpExecutionMode %4 OriginUpperLeft 
                                               OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                               OpDecorate vs_TEXCOORD0 Location 12 
                                               OpMemberDecorate %14 0 Offset 14 
                                               OpMemberDecorate %14 1 Offset 14 
                                               OpMemberDecorate %14 2 Offset 14 
                                               OpDecorate %14 Block 
                                               OpDecorate %16 DescriptorSet 16 
                                               OpDecorate %16 Binding 16 
                                               OpDecorate %32 DescriptorSet 32 
                                               OpDecorate %32 Binding 32 
                                               OpDecorate %36 DescriptorSet 36 
                                               OpDecorate %36 Binding 36 
                                               OpDecorate %108 Location 108 
                                        %2 = OpTypeVoid 
                                        %3 = OpTypeFunction %2 
                                        %6 = OpTypeFloat 32 
                                        %7 = OpTypeVector %6 4 
                                        %8 = OpTypePointer Private %7 
                         Private f32_4* %9 = OpVariable Private 
                                       %10 = OpTypeVector %6 2 
                                       %11 = OpTypePointer Input %10 
                 Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                       %14 = OpTypeStruct %7 %7 %7 
                                       %15 = OpTypePointer Uniform %14 
Uniform struct {f32_4; f32_4; f32_4;}* %16 = OpVariable Uniform 
                                       %17 = OpTypeInt 32 1 
                                   i32 %18 = OpConstant 1 
                                       %19 = OpTypePointer Uniform %7 
                                       %30 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                       %31 = OpTypePointer UniformConstant %30 
  UniformConstant read_only Texture2D* %32 = OpVariable UniformConstant 
                                       %34 = OpTypeSampler 
                                       %35 = OpTypePointer UniformConstant %34 
              UniformConstant sampler* %36 = OpVariable UniformConstant 
                                       %38 = OpTypeSampledImage %30 
                                       %43 = OpTypeVector %6 3 
                                   i32 %46 = OpConstant 2 
                                   i32 %62 = OpConstant 0 
                                       %77 = OpTypePointer Private %6 
                          Private f32* %78 = OpVariable Private 
                                       %79 = OpTypeInt 32 0 
                                   u32 %80 = OpConstant 1 
                                   u32 %83 = OpConstant 0 
                          Private f32* %87 = OpVariable Private 
                                   u32 %88 = OpConstant 2 
                                   f32 %91 = OpConstant 3.674022E-40 
                                   f32 %97 = OpConstant 3.674022E-40 
                                  f32 %100 = OpConstant 3.674022E-40 
                                  f32 %105 = OpConstant 3.674022E-40 
                                      %107 = OpTypePointer Output %7 
                        Output f32_4* %108 = OpVariable Output 
                                  u32 %117 = OpConstant 3 
                                      %118 = OpTypePointer Output %6 
                                   void %4 = OpFunction None %3 
                                        %5 = OpLabel 
                                 f32_2 %13 = OpLoad vs_TEXCOORD0 
                        Uniform f32_4* %20 = OpAccessChain %16 %18 
                                 f32_4 %21 = OpLoad %20 
                                 f32_2 %22 = OpVectorShuffle %21 %21 0 1 
                                 f32_2 %23 = OpFMul %13 %22 
                        Uniform f32_4* %24 = OpAccessChain %16 %18 
                                 f32_4 %25 = OpLoad %24 
                                 f32_2 %26 = OpVectorShuffle %25 %25 2 3 
                                 f32_2 %27 = OpFAdd %23 %26 
                                 f32_4 %28 = OpLoad %9 
                                 f32_4 %29 = OpVectorShuffle %28 %27 4 5 2 3 
                                               OpStore %9 %29 
                   read_only Texture2D %33 = OpLoad %32 
                               sampler %37 = OpLoad %36 
            read_only Texture2DSampled %39 = OpSampledImage %33 %37 
                                 f32_4 %40 = OpLoad %9 
                                 f32_2 %41 = OpVectorShuffle %40 %40 0 1 
                                 f32_4 %42 = OpImageSampleImplicitLod %39 %41 
                                               OpStore %9 %42 
                                 f32_4 %44 = OpLoad %9 
                                 f32_3 %45 = OpVectorShuffle %44 %44 0 1 2 
                        Uniform f32_4* %47 = OpAccessChain %16 %46 
                                 f32_4 %48 = OpLoad %47 
                                 f32_3 %49 = OpVectorShuffle %48 %48 0 0 0 
                                 f32_3 %50 = OpFMul %45 %49 
                                 f32_4 %51 = OpLoad %9 
                                 f32_4 %52 = OpVectorShuffle %51 %50 4 5 6 3 
                                               OpStore %9 %52 
                                 f32_4 %53 = OpLoad %9 
                                 f32_3 %54 = OpVectorShuffle %53 %53 3 3 3 
                                 f32_4 %55 = OpLoad %9 
                                 f32_3 %56 = OpVectorShuffle %55 %55 0 1 2 
                                 f32_3 %57 = OpFMul %54 %56 
                                 f32_4 %58 = OpLoad %9 
                                 f32_4 %59 = OpVectorShuffle %58 %57 4 5 6 3 
                                               OpStore %9 %59 
                                 f32_4 %60 = OpLoad %9 
                                 f32_3 %61 = OpVectorShuffle %60 %60 0 1 2 
                        Uniform f32_4* %63 = OpAccessChain %16 %62 
                                 f32_4 %64 = OpLoad %63 
                                 f32_3 %65 = OpVectorShuffle %64 %64 0 1 2 
                                 f32_3 %66 = OpFMul %61 %65 
                                 f32_4 %67 = OpLoad %9 
                                 f32_4 %68 = OpVectorShuffle %67 %66 4 5 6 3 
                                               OpStore %9 %68 
                                 f32_4 %69 = OpLoad %9 
                                 f32_3 %70 = OpVectorShuffle %69 %69 0 1 2 
                        Uniform f32_4* %71 = OpAccessChain %16 %46 
                                 f32_4 %72 = OpLoad %71 
                                 f32_3 %73 = OpVectorShuffle %72 %72 1 1 1 
                                 f32_3 %74 = OpFMul %70 %73 
                                 f32_4 %75 = OpLoad %9 
                                 f32_4 %76 = OpVectorShuffle %75 %74 4 5 6 3 
                                               OpStore %9 %76 
                          Private f32* %81 = OpAccessChain %9 %80 
                                   f32 %82 = OpLoad %81 
                          Private f32* %84 = OpAccessChain %9 %83 
                                   f32 %85 = OpLoad %84 
                                   f32 %86 = OpExtInst %1 40 %82 %85 
                                               OpStore %78 %86 
                          Private f32* %89 = OpAccessChain %9 %88 
                                   f32 %90 = OpLoad %89 
                                   f32 %92 = OpExtInst %1 40 %90 %91 
                                               OpStore %87 %92 
                                   f32 %93 = OpLoad %78 
                                   f32 %94 = OpLoad %87 
                                   f32 %95 = OpExtInst %1 40 %93 %94 
                                               OpStore %78 %95 
                                   f32 %96 = OpLoad %78 
                                   f32 %98 = OpExtInst %1 37 %96 %97 
                                               OpStore %78 %98 
                                   f32 %99 = OpLoad %78 
                                  f32 %101 = OpFMul %99 %100 
                                               OpStore %78 %101 
                                  f32 %102 = OpLoad %78 
                                  f32 %103 = OpExtInst %1 9 %102 
                                               OpStore %78 %103 
                                  f32 %104 = OpLoad %78 
                                  f32 %106 = OpFMul %104 %105 
                                               OpStore %78 %106 
                                f32_4 %109 = OpLoad %9 
                                f32_3 %110 = OpVectorShuffle %109 %109 0 1 2 
                                  f32 %111 = OpLoad %78 
                                f32_3 %112 = OpCompositeConstruct %111 %111 %111 
                                f32_3 %113 = OpFDiv %110 %112 
                                f32_4 %114 = OpLoad %108 
                                f32_4 %115 = OpVectorShuffle %114 %113 4 5 6 3 
                                               OpStore %108 %115 
                                  f32 %116 = OpLoad %78 
                          Output f32* %119 = OpAccessChain %108 %117 
                                               OpStore %119 %116 
                                               OpReturn
                                               OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "AB_HIGH_PRECISION" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "AB_HIGH_PRECISION" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in  vec4 in_POSITION0;
in  vec2 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _AnamorphicGlareWeights0;
uniform 	vec4 _MainTex_ST;
UNITY_LOCATION(0) uniform  sampler2D _AnamorphicRTS0;
in  vec2 vs_TEXCOORD0;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0 = texture(_AnamorphicRTS0, u_xlat0.xy);
    SV_Target0.xyz = u_xlat0.xyz * _AnamorphicGlareWeights0.xyz;
    SV_Target0.w = 0.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "AB_HIGH_PRECISION" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 94
; Schema: 0
                                              OpCapability Shader 
                                       %1 = OpExtInstImport "GLSL.std.450" 
                                              OpMemoryModel Logical GLSL450 
                                              OpEntryPoint Vertex %4 "main" %11 %72 %84 %86 
                                              OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                              OpDecorate %11 Location 11 
                                              OpDecorate %16 ArrayStride 16 
                                              OpDecorate %17 ArrayStride 17 
                                              OpMemberDecorate %18 0 Offset 18 
                                              OpMemberDecorate %18 1 Offset 18 
                                              OpDecorate %18 Block 
                                              OpDecorate %20 DescriptorSet 20 
                                              OpDecorate %20 Binding 20 
                                              OpMemberDecorate %70 0 BuiltIn 70 
                                              OpMemberDecorate %70 1 BuiltIn 70 
                                              OpMemberDecorate %70 2 BuiltIn 70 
                                              OpDecorate %70 Block 
                                              OpDecorate vs_TEXCOORD0 Location 84 
                                              OpDecorate %86 Location 86 
                                       %2 = OpTypeVoid 
                                       %3 = OpTypeFunction %2 
                                       %6 = OpTypeFloat 32 
                                       %7 = OpTypeVector %6 4 
                                       %8 = OpTypePointer Private %7 
                        Private f32_4* %9 = OpVariable Private 
                                      %10 = OpTypePointer Input %7 
                         Input f32_4* %11 = OpVariable Input 
                                      %14 = OpTypeInt 32 0 
                                  u32 %15 = OpConstant 4 
                                      %16 = OpTypeArray %7 %15 
                                      %17 = OpTypeArray %7 %15 
                                      %18 = OpTypeStruct %16 %17 
                                      %19 = OpTypePointer Uniform %18 
Uniform struct {f32_4[4]; f32_4[4];}* %20 = OpVariable Uniform 
                                      %21 = OpTypeInt 32 1 
                                  i32 %22 = OpConstant 0 
                                  i32 %23 = OpConstant 1 
                                      %24 = OpTypePointer Uniform %7 
                                  i32 %35 = OpConstant 2 
                                  i32 %44 = OpConstant 3 
                       Private f32_4* %48 = OpVariable Private 
                                  u32 %68 = OpConstant 1 
                                      %69 = OpTypeArray %6 %68 
                                      %70 = OpTypeStruct %7 %6 %69 
                                      %71 = OpTypePointer Output %70 
 Output struct {f32_4; f32; f32[1];}* %72 = OpVariable Output 
                                      %80 = OpTypePointer Output %7 
                                      %82 = OpTypeVector %6 2 
                                      %83 = OpTypePointer Output %82 
               Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                      %85 = OpTypePointer Input %82 
                         Input f32_2* %86 = OpVariable Input 
                                      %88 = OpTypePointer Output %6 
                                  void %4 = OpFunction None %3 
                                       %5 = OpLabel 
                                f32_4 %12 = OpLoad %11 
                                f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                       Uniform f32_4* %25 = OpAccessChain %20 %22 %23 
                                f32_4 %26 = OpLoad %25 
                                f32_4 %27 = OpFMul %13 %26 
                                              OpStore %9 %27 
                       Uniform f32_4* %28 = OpAccessChain %20 %22 %22 
                                f32_4 %29 = OpLoad %28 
                                f32_4 %30 = OpLoad %11 
                                f32_4 %31 = OpVectorShuffle %30 %30 0 0 0 0 
                                f32_4 %32 = OpFMul %29 %31 
                                f32_4 %33 = OpLoad %9 
                                f32_4 %34 = OpFAdd %32 %33 
                                              OpStore %9 %34 
                       Uniform f32_4* %36 = OpAccessChain %20 %22 %35 
                                f32_4 %37 = OpLoad %36 
                                f32_4 %38 = OpLoad %11 
                                f32_4 %39 = OpVectorShuffle %38 %38 2 2 2 2 
                                f32_4 %40 = OpFMul %37 %39 
                                f32_4 %41 = OpLoad %9 
                                f32_4 %42 = OpFAdd %40 %41 
                                              OpStore %9 %42 
                                f32_4 %43 = OpLoad %9 
                       Uniform f32_4* %45 = OpAccessChain %20 %22 %44 
                                f32_4 %46 = OpLoad %45 
                                f32_4 %47 = OpFAdd %43 %46 
                                              OpStore %9 %47 
                                f32_4 %49 = OpLoad %9 
                                f32_4 %50 = OpVectorShuffle %49 %49 1 1 1 1 
                       Uniform f32_4* %51 = OpAccessChain %20 %23 %23 
                                f32_4 %52 = OpLoad %51 
                                f32_4 %53 = OpFMul %50 %52 
                                              OpStore %48 %53 
                       Uniform f32_4* %54 = OpAccessChain %20 %23 %22 
                                f32_4 %55 = OpLoad %54 
                                f32_4 %56 = OpLoad %9 
                                f32_4 %57 = OpVectorShuffle %56 %56 0 0 0 0 
                                f32_4 %58 = OpFMul %55 %57 
                                f32_4 %59 = OpLoad %48 
                                f32_4 %60 = OpFAdd %58 %59 
                                              OpStore %48 %60 
                       Uniform f32_4* %61 = OpAccessChain %20 %23 %35 
                                f32_4 %62 = OpLoad %61 
                                f32_4 %63 = OpLoad %9 
                                f32_4 %64 = OpVectorShuffle %63 %63 2 2 2 2 
                                f32_4 %65 = OpFMul %62 %64 
                                f32_4 %66 = OpLoad %48 
                                f32_4 %67 = OpFAdd %65 %66 
                                              OpStore %48 %67 
                       Uniform f32_4* %73 = OpAccessChain %20 %23 %44 
                                f32_4 %74 = OpLoad %73 
                                f32_4 %75 = OpLoad %9 
                                f32_4 %76 = OpVectorShuffle %75 %75 3 3 3 3 
                                f32_4 %77 = OpFMul %74 %76 
                                f32_4 %78 = OpLoad %48 
                                f32_4 %79 = OpFAdd %77 %78 
                        Output f32_4* %81 = OpAccessChain %72 %22 
                                              OpStore %81 %79 
                                f32_2 %87 = OpLoad %86 
                                              OpStore vs_TEXCOORD0 %87 
                          Output f32* %89 = OpAccessChain %72 %22 %68 
                                  f32 %90 = OpLoad %89 
                                  f32 %91 = OpFNegate %90 
                          Output f32* %92 = OpAccessChain %72 %22 %68 
                                              OpStore %92 %91 
                                              OpReturn
                                              OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 61
; Schema: 0
                                             OpCapability Shader 
                                      %1 = OpExtInstImport "GLSL.std.450" 
                                             OpMemoryModel Logical GLSL450 
                                             OpEntryPoint Fragment %4 "main" %12 %46 
                                             OpExecutionMode %4 OriginUpperLeft 
                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                             OpDecorate vs_TEXCOORD0 Location 12 
                                             OpMemberDecorate %15 0 Offset 15 
                                             OpMemberDecorate %15 1 Offset 15 
                                             OpDecorate %15 Block 
                                             OpDecorate %17 DescriptorSet 17 
                                             OpDecorate %17 Binding 17 
                                             OpDecorate %33 DescriptorSet 33 
                                             OpDecorate %33 Binding 33 
                                             OpDecorate %37 DescriptorSet 37 
                                             OpDecorate %37 Binding 37 
                                             OpDecorate %46 Location 46 
                                      %2 = OpTypeVoid 
                                      %3 = OpTypeFunction %2 
                                      %6 = OpTypeFloat 32 
                                      %7 = OpTypeVector %6 3 
                                      %8 = OpTypePointer Private %7 
                       Private f32_3* %9 = OpVariable Private 
                                     %10 = OpTypeVector %6 2 
                                     %11 = OpTypePointer Input %10 
               Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                     %14 = OpTypeVector %6 4 
                                     %15 = OpTypeStruct %14 %14 
                                     %16 = OpTypePointer Uniform %15 
     Uniform struct {f32_4; f32_4;}* %17 = OpVariable Uniform 
                                     %18 = OpTypeInt 32 1 
                                 i32 %19 = OpConstant 1 
                                     %20 = OpTypePointer Uniform %14 
                                     %31 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                     %32 = OpTypePointer UniformConstant %31 
UniformConstant read_only Texture2D* %33 = OpVariable UniformConstant 
                                     %35 = OpTypeSampler 
                                     %36 = OpTypePointer UniformConstant %35 
            UniformConstant sampler* %37 = OpVariable UniformConstant 
                                     %39 = OpTypeSampledImage %31 
                                     %45 = OpTypePointer Output %14 
                       Output f32_4* %46 = OpVariable Output 
                                 i32 %48 = OpConstant 0 
                                 f32 %55 = OpConstant 3.674022E-40 
                                     %56 = OpTypeInt 32 0 
                                 u32 %57 = OpConstant 3 
                                     %58 = OpTypePointer Output %6 
                                 void %4 = OpFunction None %3 
                                      %5 = OpLabel 
                               f32_2 %13 = OpLoad vs_TEXCOORD0 
                      Uniform f32_4* %21 = OpAccessChain %17 %19 
                               f32_4 %22 = OpLoad %21 
                               f32_2 %23 = OpVectorShuffle %22 %22 0 1 
                               f32_2 %24 = OpFMul %13 %23 
                      Uniform f32_4* %25 = OpAccessChain %17 %19 
                               f32_4 %26 = OpLoad %25 
                               f32_2 %27 = OpVectorShuffle %26 %26 2 3 
                               f32_2 %28 = OpFAdd %24 %27 
                               f32_3 %29 = OpLoad %9 
                               f32_3 %30 = OpVectorShuffle %29 %28 3 4 2 
                                             OpStore %9 %30 
                 read_only Texture2D %34 = OpLoad %33 
                             sampler %38 = OpLoad %37 
          read_only Texture2DSampled %40 = OpSampledImage %34 %38 
                               f32_3 %41 = OpLoad %9 
                               f32_2 %42 = OpVectorShuffle %41 %41 0 1 
                               f32_4 %43 = OpImageSampleImplicitLod %40 %42 
                               f32_3 %44 = OpVectorShuffle %43 %43 0 1 2 
                                             OpStore %9 %44 
                               f32_3 %47 = OpLoad %9 
                      Uniform f32_4* %49 = OpAccessChain %17 %48 
                               f32_4 %50 = OpLoad %49 
                               f32_3 %51 = OpVectorShuffle %50 %50 0 1 2 
                               f32_3 %52 = OpFMul %47 %51 
                               f32_4 %53 = OpLoad %46 
                               f32_4 %54 = OpVectorShuffle %53 %52 4 5 6 3 
                                             OpStore %46 %54 
                         Output f32* %59 = OpAccessChain %46 %57 
                                             OpStore %59 %55 
                                             OpReturn
                                             OpFunctionEnd
"
}
}
Program "fp" {
SubProgram "d3d11 " {
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
""
}
SubProgram "vulkan " {
""
}
SubProgram "d3d11 " {
Keywords { "AB_HIGH_PRECISION" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "AB_HIGH_PRECISION" }
""
}
SubProgram "vulkan " {
Keywords { "AB_HIGH_PRECISION" }
""
}
}
}
 Pass {
  Name "frag_weightedAddPS2"
  ZTest Always
  ZWrite Off
  Cull Off
  GpuProgramID 1342618
Program "vp" {
SubProgram "d3d11 " {
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in  vec4 in_POSITION0;
in  vec2 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _AnamorphicGlareWeights0;
uniform 	vec4 _AnamorphicGlareWeights1;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BloomRange;
UNITY_LOCATION(0) uniform  sampler2D _AnamorphicRTS0;
UNITY_LOCATION(1) uniform  sampler2D _AnamorphicRTS1;
in  vec2 vs_TEXCOORD0;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1 = texture(_AnamorphicRTS1, u_xlat0.xy);
    u_xlat0 = texture(_AnamorphicRTS0, u_xlat0.xy);
    u_xlat1.xyz = u_xlat1.xyz * _BloomRange.xxx;
    u_xlat1.xyz = u_xlat1.www * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _AnamorphicGlareWeights1.xyz;
    u_xlat0.xyz = u_xlat0.xyz * _BloomRange.xxx;
    u_xlat0.xyz = u_xlat0.www * u_xlat0.xyz;
    u_xlat0.xyz = _AnamorphicGlareWeights0.xyz * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.xyz * _BloomRange.yyy;
    u_xlat6 = max(u_xlat0.y, u_xlat0.x);
    u_xlat1.x = max(u_xlat0.z, 9.99999997e-07);
    u_xlat6 = max(u_xlat6, u_xlat1.x);
    u_xlat6 = min(u_xlat6, 1.0);
    u_xlat6 = u_xlat6 * 255.0;
    u_xlat6 = ceil(u_xlat6);
    u_xlat6 = u_xlat6 * 0.00392156886;
    SV_Target0.xyz = u_xlat0.xyz / vec3(u_xlat6);
    SV_Target0.w = u_xlat6;
    return;
}

#endif
"
}
SubProgram "vulkan " {
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 94
; Schema: 0
                                              OpCapability Shader 
                                       %1 = OpExtInstImport "GLSL.std.450" 
                                              OpMemoryModel Logical GLSL450 
                                              OpEntryPoint Vertex %4 "main" %11 %72 %84 %86 
                                              OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                              OpDecorate %11 Location 11 
                                              OpDecorate %16 ArrayStride 16 
                                              OpDecorate %17 ArrayStride 17 
                                              OpMemberDecorate %18 0 Offset 18 
                                              OpMemberDecorate %18 1 Offset 18 
                                              OpDecorate %18 Block 
                                              OpDecorate %20 DescriptorSet 20 
                                              OpDecorate %20 Binding 20 
                                              OpMemberDecorate %70 0 BuiltIn 70 
                                              OpMemberDecorate %70 1 BuiltIn 70 
                                              OpMemberDecorate %70 2 BuiltIn 70 
                                              OpDecorate %70 Block 
                                              OpDecorate vs_TEXCOORD0 Location 84 
                                              OpDecorate %86 Location 86 
                                       %2 = OpTypeVoid 
                                       %3 = OpTypeFunction %2 
                                       %6 = OpTypeFloat 32 
                                       %7 = OpTypeVector %6 4 
                                       %8 = OpTypePointer Private %7 
                        Private f32_4* %9 = OpVariable Private 
                                      %10 = OpTypePointer Input %7 
                         Input f32_4* %11 = OpVariable Input 
                                      %14 = OpTypeInt 32 0 
                                  u32 %15 = OpConstant 4 
                                      %16 = OpTypeArray %7 %15 
                                      %17 = OpTypeArray %7 %15 
                                      %18 = OpTypeStruct %16 %17 
                                      %19 = OpTypePointer Uniform %18 
Uniform struct {f32_4[4]; f32_4[4];}* %20 = OpVariable Uniform 
                                      %21 = OpTypeInt 32 1 
                                  i32 %22 = OpConstant 0 
                                  i32 %23 = OpConstant 1 
                                      %24 = OpTypePointer Uniform %7 
                                  i32 %35 = OpConstant 2 
                                  i32 %44 = OpConstant 3 
                       Private f32_4* %48 = OpVariable Private 
                                  u32 %68 = OpConstant 1 
                                      %69 = OpTypeArray %6 %68 
                                      %70 = OpTypeStruct %7 %6 %69 
                                      %71 = OpTypePointer Output %70 
 Output struct {f32_4; f32; f32[1];}* %72 = OpVariable Output 
                                      %80 = OpTypePointer Output %7 
                                      %82 = OpTypeVector %6 2 
                                      %83 = OpTypePointer Output %82 
               Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                      %85 = OpTypePointer Input %82 
                         Input f32_2* %86 = OpVariable Input 
                                      %88 = OpTypePointer Output %6 
                                  void %4 = OpFunction None %3 
                                       %5 = OpLabel 
                                f32_4 %12 = OpLoad %11 
                                f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                       Uniform f32_4* %25 = OpAccessChain %20 %22 %23 
                                f32_4 %26 = OpLoad %25 
                                f32_4 %27 = OpFMul %13 %26 
                                              OpStore %9 %27 
                       Uniform f32_4* %28 = OpAccessChain %20 %22 %22 
                                f32_4 %29 = OpLoad %28 
                                f32_4 %30 = OpLoad %11 
                                f32_4 %31 = OpVectorShuffle %30 %30 0 0 0 0 
                                f32_4 %32 = OpFMul %29 %31 
                                f32_4 %33 = OpLoad %9 
                                f32_4 %34 = OpFAdd %32 %33 
                                              OpStore %9 %34 
                       Uniform f32_4* %36 = OpAccessChain %20 %22 %35 
                                f32_4 %37 = OpLoad %36 
                                f32_4 %38 = OpLoad %11 
                                f32_4 %39 = OpVectorShuffle %38 %38 2 2 2 2 
                                f32_4 %40 = OpFMul %37 %39 
                                f32_4 %41 = OpLoad %9 
                                f32_4 %42 = OpFAdd %40 %41 
                                              OpStore %9 %42 
                                f32_4 %43 = OpLoad %9 
                       Uniform f32_4* %45 = OpAccessChain %20 %22 %44 
                                f32_4 %46 = OpLoad %45 
                                f32_4 %47 = OpFAdd %43 %46 
                                              OpStore %9 %47 
                                f32_4 %49 = OpLoad %9 
                                f32_4 %50 = OpVectorShuffle %49 %49 1 1 1 1 
                       Uniform f32_4* %51 = OpAccessChain %20 %23 %23 
                                f32_4 %52 = OpLoad %51 
                                f32_4 %53 = OpFMul %50 %52 
                                              OpStore %48 %53 
                       Uniform f32_4* %54 = OpAccessChain %20 %23 %22 
                                f32_4 %55 = OpLoad %54 
                                f32_4 %56 = OpLoad %9 
                                f32_4 %57 = OpVectorShuffle %56 %56 0 0 0 0 
                                f32_4 %58 = OpFMul %55 %57 
                                f32_4 %59 = OpLoad %48 
                                f32_4 %60 = OpFAdd %58 %59 
                                              OpStore %48 %60 
                       Uniform f32_4* %61 = OpAccessChain %20 %23 %35 
                                f32_4 %62 = OpLoad %61 
                                f32_4 %63 = OpLoad %9 
                                f32_4 %64 = OpVectorShuffle %63 %63 2 2 2 2 
                                f32_4 %65 = OpFMul %62 %64 
                                f32_4 %66 = OpLoad %48 
                                f32_4 %67 = OpFAdd %65 %66 
                                              OpStore %48 %67 
                       Uniform f32_4* %73 = OpAccessChain %20 %23 %44 
                                f32_4 %74 = OpLoad %73 
                                f32_4 %75 = OpLoad %9 
                                f32_4 %76 = OpVectorShuffle %75 %75 3 3 3 3 
                                f32_4 %77 = OpFMul %74 %76 
                                f32_4 %78 = OpLoad %48 
                                f32_4 %79 = OpFAdd %77 %78 
                        Output f32_4* %81 = OpAccessChain %72 %22 
                                              OpStore %81 %79 
                                f32_2 %87 = OpLoad %86 
                                              OpStore vs_TEXCOORD0 %87 
                          Output f32* %89 = OpAccessChain %72 %22 %68 
                                  f32 %90 = OpLoad %89 
                                  f32 %91 = OpFNegate %90 
                          Output f32* %92 = OpAccessChain %72 %22 %68 
                                              OpStore %92 %91 
                                              OpReturn
                                              OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 158
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %12 %145 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpDecorate vs_TEXCOORD0 Location 12 
                                                      OpMemberDecorate %14 0 Offset 14 
                                                      OpMemberDecorate %14 1 Offset 14 
                                                      OpMemberDecorate %14 2 Offset 14 
                                                      OpMemberDecorate %14 3 Offset 14 
                                                      OpDecorate %14 Block 
                                                      OpDecorate %16 DescriptorSet 16 
                                                      OpDecorate %16 Binding 16 
                                                      OpDecorate %33 DescriptorSet 33 
                                                      OpDecorate %33 Binding 33 
                                                      OpDecorate %37 DescriptorSet 37 
                                                      OpDecorate %37 Binding 37 
                                                      OpDecorate %44 DescriptorSet 44 
                                                      OpDecorate %44 Binding 44 
                                                      OpDecorate %46 DescriptorSet 46 
                                                      OpDecorate %46 Binding 46 
                                                      OpDecorate %145 Location 145 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 2 
                                              %11 = OpTypePointer Input %10 
                        Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                              %14 = OpTypeStruct %7 %7 %7 %7 
                                              %15 = OpTypePointer Uniform %14 
Uniform struct {f32_4; f32_4; f32_4; f32_4;}* %16 = OpVariable Uniform 
                                              %17 = OpTypeInt 32 1 
                                          i32 %18 = OpConstant 2 
                                              %19 = OpTypePointer Uniform %7 
                               Private f32_4* %30 = OpVariable Private 
                                              %31 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %32 = OpTypePointer UniformConstant %31 
         UniformConstant read_only Texture2D* %33 = OpVariable UniformConstant 
                                              %35 = OpTypeSampler 
                                              %36 = OpTypePointer UniformConstant %35 
                     UniformConstant sampler* %37 = OpVariable UniformConstant 
                                              %39 = OpTypeSampledImage %31 
         UniformConstant read_only Texture2D* %44 = OpVariable UniformConstant 
                     UniformConstant sampler* %46 = OpVariable UniformConstant 
                                              %52 = OpTypeVector %6 3 
                                          i32 %55 = OpConstant 3 
                                          i32 %71 = OpConstant 1 
                                          i32 %93 = OpConstant 0 
                                             %113 = OpTypePointer Private %6 
                                Private f32* %114 = OpVariable Private 
                                             %115 = OpTypeInt 32 0 
                                         u32 %116 = OpConstant 1 
                                         u32 %119 = OpConstant 0 
                                         u32 %123 = OpConstant 2 
                                         f32 %126 = OpConstant 3.674022E-40 
                                         f32 %134 = OpConstant 3.674022E-40 
                                         f32 %137 = OpConstant 3.674022E-40 
                                         f32 %142 = OpConstant 3.674022E-40 
                                             %144 = OpTypePointer Output %7 
                               Output f32_4* %145 = OpVariable Output 
                                         u32 %154 = OpConstant 3 
                                             %155 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_2 %13 = OpLoad vs_TEXCOORD0 
                               Uniform f32_4* %20 = OpAccessChain %16 %18 
                                        f32_4 %21 = OpLoad %20 
                                        f32_2 %22 = OpVectorShuffle %21 %21 0 1 
                                        f32_2 %23 = OpFMul %13 %22 
                               Uniform f32_4* %24 = OpAccessChain %16 %18 
                                        f32_4 %25 = OpLoad %24 
                                        f32_2 %26 = OpVectorShuffle %25 %25 2 3 
                                        f32_2 %27 = OpFAdd %23 %26 
                                        f32_4 %28 = OpLoad %9 
                                        f32_4 %29 = OpVectorShuffle %28 %27 4 5 2 3 
                                                      OpStore %9 %29 
                          read_only Texture2D %34 = OpLoad %33 
                                      sampler %38 = OpLoad %37 
                   read_only Texture2DSampled %40 = OpSampledImage %34 %38 
                                        f32_4 %41 = OpLoad %9 
                                        f32_2 %42 = OpVectorShuffle %41 %41 0 1 
                                        f32_4 %43 = OpImageSampleImplicitLod %40 %42 
                                                      OpStore %30 %43 
                          read_only Texture2D %45 = OpLoad %44 
                                      sampler %47 = OpLoad %46 
                   read_only Texture2DSampled %48 = OpSampledImage %45 %47 
                                        f32_4 %49 = OpLoad %9 
                                        f32_2 %50 = OpVectorShuffle %49 %49 0 1 
                                        f32_4 %51 = OpImageSampleImplicitLod %48 %50 
                                                      OpStore %9 %51 
                                        f32_4 %53 = OpLoad %30 
                                        f32_3 %54 = OpVectorShuffle %53 %53 0 1 2 
                               Uniform f32_4* %56 = OpAccessChain %16 %55 
                                        f32_4 %57 = OpLoad %56 
                                        f32_3 %58 = OpVectorShuffle %57 %57 0 0 0 
                                        f32_3 %59 = OpFMul %54 %58 
                                        f32_4 %60 = OpLoad %30 
                                        f32_4 %61 = OpVectorShuffle %60 %59 4 5 6 3 
                                                      OpStore %30 %61 
                                        f32_4 %62 = OpLoad %30 
                                        f32_3 %63 = OpVectorShuffle %62 %62 3 3 3 
                                        f32_4 %64 = OpLoad %30 
                                        f32_3 %65 = OpVectorShuffle %64 %64 0 1 2 
                                        f32_3 %66 = OpFMul %63 %65 
                                        f32_4 %67 = OpLoad %30 
                                        f32_4 %68 = OpVectorShuffle %67 %66 4 5 6 3 
                                                      OpStore %30 %68 
                                        f32_4 %69 = OpLoad %30 
                                        f32_3 %70 = OpVectorShuffle %69 %69 0 1 2 
                               Uniform f32_4* %72 = OpAccessChain %16 %71 
                                        f32_4 %73 = OpLoad %72 
                                        f32_3 %74 = OpVectorShuffle %73 %73 0 1 2 
                                        f32_3 %75 = OpFMul %70 %74 
                                        f32_4 %76 = OpLoad %30 
                                        f32_4 %77 = OpVectorShuffle %76 %75 4 5 6 3 
                                                      OpStore %30 %77 
                                        f32_4 %78 = OpLoad %9 
                                        f32_3 %79 = OpVectorShuffle %78 %78 0 1 2 
                               Uniform f32_4* %80 = OpAccessChain %16 %55 
                                        f32_4 %81 = OpLoad %80 
                                        f32_3 %82 = OpVectorShuffle %81 %81 0 0 0 
                                        f32_3 %83 = OpFMul %79 %82 
                                        f32_4 %84 = OpLoad %9 
                                        f32_4 %85 = OpVectorShuffle %84 %83 4 5 6 3 
                                                      OpStore %9 %85 
                                        f32_4 %86 = OpLoad %9 
                                        f32_3 %87 = OpVectorShuffle %86 %86 3 3 3 
                                        f32_4 %88 = OpLoad %9 
                                        f32_3 %89 = OpVectorShuffle %88 %88 0 1 2 
                                        f32_3 %90 = OpFMul %87 %89 
                                        f32_4 %91 = OpLoad %9 
                                        f32_4 %92 = OpVectorShuffle %91 %90 4 5 6 3 
                                                      OpStore %9 %92 
                               Uniform f32_4* %94 = OpAccessChain %16 %93 
                                        f32_4 %95 = OpLoad %94 
                                        f32_3 %96 = OpVectorShuffle %95 %95 0 1 2 
                                        f32_4 %97 = OpLoad %9 
                                        f32_3 %98 = OpVectorShuffle %97 %97 0 1 2 
                                        f32_3 %99 = OpFMul %96 %98 
                                       f32_4 %100 = OpLoad %30 
                                       f32_3 %101 = OpVectorShuffle %100 %100 0 1 2 
                                       f32_3 %102 = OpFAdd %99 %101 
                                       f32_4 %103 = OpLoad %9 
                                       f32_4 %104 = OpVectorShuffle %103 %102 4 5 6 3 
                                                      OpStore %9 %104 
                                       f32_4 %105 = OpLoad %9 
                                       f32_3 %106 = OpVectorShuffle %105 %105 0 1 2 
                              Uniform f32_4* %107 = OpAccessChain %16 %55 
                                       f32_4 %108 = OpLoad %107 
                                       f32_3 %109 = OpVectorShuffle %108 %108 1 1 1 
                                       f32_3 %110 = OpFMul %106 %109 
                                       f32_4 %111 = OpLoad %9 
                                       f32_4 %112 = OpVectorShuffle %111 %110 4 5 6 3 
                                                      OpStore %9 %112 
                                Private f32* %117 = OpAccessChain %9 %116 
                                         f32 %118 = OpLoad %117 
                                Private f32* %120 = OpAccessChain %9 %119 
                                         f32 %121 = OpLoad %120 
                                         f32 %122 = OpExtInst %1 40 %118 %121 
                                                      OpStore %114 %122 
                                Private f32* %124 = OpAccessChain %9 %123 
                                         f32 %125 = OpLoad %124 
                                         f32 %127 = OpExtInst %1 40 %125 %126 
                                Private f32* %128 = OpAccessChain %30 %119 
                                                      OpStore %128 %127 
                                         f32 %129 = OpLoad %114 
                                Private f32* %130 = OpAccessChain %30 %119 
                                         f32 %131 = OpLoad %130 
                                         f32 %132 = OpExtInst %1 40 %129 %131 
                                                      OpStore %114 %132 
                                         f32 %133 = OpLoad %114 
                                         f32 %135 = OpExtInst %1 37 %133 %134 
                                                      OpStore %114 %135 
                                         f32 %136 = OpLoad %114 
                                         f32 %138 = OpFMul %136 %137 
                                                      OpStore %114 %138 
                                         f32 %139 = OpLoad %114 
                                         f32 %140 = OpExtInst %1 9 %139 
                                                      OpStore %114 %140 
                                         f32 %141 = OpLoad %114 
                                         f32 %143 = OpFMul %141 %142 
                                                      OpStore %114 %143 
                                       f32_4 %146 = OpLoad %9 
                                       f32_3 %147 = OpVectorShuffle %146 %146 0 1 2 
                                         f32 %148 = OpLoad %114 
                                       f32_3 %149 = OpCompositeConstruct %148 %148 %148 
                                       f32_3 %150 = OpFDiv %147 %149 
                                       f32_4 %151 = OpLoad %145 
                                       f32_4 %152 = OpVectorShuffle %151 %150 4 5 6 3 
                                                      OpStore %145 %152 
                                         f32 %153 = OpLoad %114 
                                 Output f32* %156 = OpAccessChain %145 %154 
                                                      OpStore %156 %153 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "AB_HIGH_PRECISION" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "AB_HIGH_PRECISION" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in  vec4 in_POSITION0;
in  vec2 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _AnamorphicGlareWeights0;
uniform 	vec4 _AnamorphicGlareWeights1;
uniform 	vec4 _MainTex_ST;
UNITY_LOCATION(0) uniform  sampler2D _AnamorphicRTS0;
UNITY_LOCATION(1) uniform  sampler2D _AnamorphicRTS1;
in  vec2 vs_TEXCOORD0;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1 = texture(_AnamorphicRTS1, u_xlat0.xy);
    u_xlat0 = texture(_AnamorphicRTS0, u_xlat0.xy);
    u_xlat1.xyz = u_xlat1.xyz * _AnamorphicGlareWeights1.xyz;
    SV_Target0.xyz = _AnamorphicGlareWeights0.xyz * u_xlat0.xyz + u_xlat1.xyz;
    SV_Target0.w = 0.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "AB_HIGH_PRECISION" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 94
; Schema: 0
                                              OpCapability Shader 
                                       %1 = OpExtInstImport "GLSL.std.450" 
                                              OpMemoryModel Logical GLSL450 
                                              OpEntryPoint Vertex %4 "main" %11 %72 %84 %86 
                                              OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                              OpDecorate %11 Location 11 
                                              OpDecorate %16 ArrayStride 16 
                                              OpDecorate %17 ArrayStride 17 
                                              OpMemberDecorate %18 0 Offset 18 
                                              OpMemberDecorate %18 1 Offset 18 
                                              OpDecorate %18 Block 
                                              OpDecorate %20 DescriptorSet 20 
                                              OpDecorate %20 Binding 20 
                                              OpMemberDecorate %70 0 BuiltIn 70 
                                              OpMemberDecorate %70 1 BuiltIn 70 
                                              OpMemberDecorate %70 2 BuiltIn 70 
                                              OpDecorate %70 Block 
                                              OpDecorate vs_TEXCOORD0 Location 84 
                                              OpDecorate %86 Location 86 
                                       %2 = OpTypeVoid 
                                       %3 = OpTypeFunction %2 
                                       %6 = OpTypeFloat 32 
                                       %7 = OpTypeVector %6 4 
                                       %8 = OpTypePointer Private %7 
                        Private f32_4* %9 = OpVariable Private 
                                      %10 = OpTypePointer Input %7 
                         Input f32_4* %11 = OpVariable Input 
                                      %14 = OpTypeInt 32 0 
                                  u32 %15 = OpConstant 4 
                                      %16 = OpTypeArray %7 %15 
                                      %17 = OpTypeArray %7 %15 
                                      %18 = OpTypeStruct %16 %17 
                                      %19 = OpTypePointer Uniform %18 
Uniform struct {f32_4[4]; f32_4[4];}* %20 = OpVariable Uniform 
                                      %21 = OpTypeInt 32 1 
                                  i32 %22 = OpConstant 0 
                                  i32 %23 = OpConstant 1 
                                      %24 = OpTypePointer Uniform %7 
                                  i32 %35 = OpConstant 2 
                                  i32 %44 = OpConstant 3 
                       Private f32_4* %48 = OpVariable Private 
                                  u32 %68 = OpConstant 1 
                                      %69 = OpTypeArray %6 %68 
                                      %70 = OpTypeStruct %7 %6 %69 
                                      %71 = OpTypePointer Output %70 
 Output struct {f32_4; f32; f32[1];}* %72 = OpVariable Output 
                                      %80 = OpTypePointer Output %7 
                                      %82 = OpTypeVector %6 2 
                                      %83 = OpTypePointer Output %82 
               Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                      %85 = OpTypePointer Input %82 
                         Input f32_2* %86 = OpVariable Input 
                                      %88 = OpTypePointer Output %6 
                                  void %4 = OpFunction None %3 
                                       %5 = OpLabel 
                                f32_4 %12 = OpLoad %11 
                                f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                       Uniform f32_4* %25 = OpAccessChain %20 %22 %23 
                                f32_4 %26 = OpLoad %25 
                                f32_4 %27 = OpFMul %13 %26 
                                              OpStore %9 %27 
                       Uniform f32_4* %28 = OpAccessChain %20 %22 %22 
                                f32_4 %29 = OpLoad %28 
                                f32_4 %30 = OpLoad %11 
                                f32_4 %31 = OpVectorShuffle %30 %30 0 0 0 0 
                                f32_4 %32 = OpFMul %29 %31 
                                f32_4 %33 = OpLoad %9 
                                f32_4 %34 = OpFAdd %32 %33 
                                              OpStore %9 %34 
                       Uniform f32_4* %36 = OpAccessChain %20 %22 %35 
                                f32_4 %37 = OpLoad %36 
                                f32_4 %38 = OpLoad %11 
                                f32_4 %39 = OpVectorShuffle %38 %38 2 2 2 2 
                                f32_4 %40 = OpFMul %37 %39 
                                f32_4 %41 = OpLoad %9 
                                f32_4 %42 = OpFAdd %40 %41 
                                              OpStore %9 %42 
                                f32_4 %43 = OpLoad %9 
                       Uniform f32_4* %45 = OpAccessChain %20 %22 %44 
                                f32_4 %46 = OpLoad %45 
                                f32_4 %47 = OpFAdd %43 %46 
                                              OpStore %9 %47 
                                f32_4 %49 = OpLoad %9 
                                f32_4 %50 = OpVectorShuffle %49 %49 1 1 1 1 
                       Uniform f32_4* %51 = OpAccessChain %20 %23 %23 
                                f32_4 %52 = OpLoad %51 
                                f32_4 %53 = OpFMul %50 %52 
                                              OpStore %48 %53 
                       Uniform f32_4* %54 = OpAccessChain %20 %23 %22 
                                f32_4 %55 = OpLoad %54 
                                f32_4 %56 = OpLoad %9 
                                f32_4 %57 = OpVectorShuffle %56 %56 0 0 0 0 
                                f32_4 %58 = OpFMul %55 %57 
                                f32_4 %59 = OpLoad %48 
                                f32_4 %60 = OpFAdd %58 %59 
                                              OpStore %48 %60 
                       Uniform f32_4* %61 = OpAccessChain %20 %23 %35 
                                f32_4 %62 = OpLoad %61 
                                f32_4 %63 = OpLoad %9 
                                f32_4 %64 = OpVectorShuffle %63 %63 2 2 2 2 
                                f32_4 %65 = OpFMul %62 %64 
                                f32_4 %66 = OpLoad %48 
                                f32_4 %67 = OpFAdd %65 %66 
                                              OpStore %48 %67 
                       Uniform f32_4* %73 = OpAccessChain %20 %23 %44 
                                f32_4 %74 = OpLoad %73 
                                f32_4 %75 = OpLoad %9 
                                f32_4 %76 = OpVectorShuffle %75 %75 3 3 3 3 
                                f32_4 %77 = OpFMul %74 %76 
                                f32_4 %78 = OpLoad %48 
                                f32_4 %79 = OpFAdd %77 %78 
                        Output f32_4* %81 = OpAccessChain %72 %22 
                                              OpStore %81 %79 
                                f32_2 %87 = OpLoad %86 
                                              OpStore vs_TEXCOORD0 %87 
                          Output f32* %89 = OpAccessChain %72 %22 %68 
                                  f32 %90 = OpLoad %89 
                                  f32 %91 = OpFNegate %90 
                          Output f32* %92 = OpAccessChain %72 %22 %68 
                                              OpStore %92 %91 
                                              OpReturn
                                              OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 79
; Schema: 0
                                               OpCapability Shader 
                                        %1 = OpExtInstImport "GLSL.std.450" 
                                               OpMemoryModel Logical GLSL450 
                                               OpEntryPoint Fragment %4 "main" %12 %62 
                                               OpExecutionMode %4 OriginUpperLeft 
                                               OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                               OpDecorate vs_TEXCOORD0 Location 12 
                                               OpMemberDecorate %15 0 Offset 15 
                                               OpMemberDecorate %15 1 Offset 15 
                                               OpMemberDecorate %15 2 Offset 15 
                                               OpDecorate %15 Block 
                                               OpDecorate %17 DescriptorSet 17 
                                               OpDecorate %17 Binding 17 
                                               OpDecorate %34 DescriptorSet 34 
                                               OpDecorate %34 Binding 34 
                                               OpDecorate %38 DescriptorSet 38 
                                               OpDecorate %38 Binding 38 
                                               OpDecorate %46 DescriptorSet 46 
                                               OpDecorate %46 Binding 46 
                                               OpDecorate %48 DescriptorSet 48 
                                               OpDecorate %48 Binding 48 
                                               OpDecorate %62 Location 62 
                                        %2 = OpTypeVoid 
                                        %3 = OpTypeFunction %2 
                                        %6 = OpTypeFloat 32 
                                        %7 = OpTypeVector %6 3 
                                        %8 = OpTypePointer Private %7 
                         Private f32_3* %9 = OpVariable Private 
                                       %10 = OpTypeVector %6 2 
                                       %11 = OpTypePointer Input %10 
                 Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                       %14 = OpTypeVector %6 4 
                                       %15 = OpTypeStruct %14 %14 %14 
                                       %16 = OpTypePointer Uniform %15 
Uniform struct {f32_4; f32_4; f32_4;}* %17 = OpVariable Uniform 
                                       %18 = OpTypeInt 32 1 
                                   i32 %19 = OpConstant 2 
                                       %20 = OpTypePointer Uniform %14 
                        Private f32_3* %31 = OpVariable Private 
                                       %32 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                       %33 = OpTypePointer UniformConstant %32 
  UniformConstant read_only Texture2D* %34 = OpVariable UniformConstant 
                                       %36 = OpTypeSampler 
                                       %37 = OpTypePointer UniformConstant %36 
              UniformConstant sampler* %38 = OpVariable UniformConstant 
                                       %40 = OpTypeSampledImage %32 
  UniformConstant read_only Texture2D* %46 = OpVariable UniformConstant 
              UniformConstant sampler* %48 = OpVariable UniformConstant 
                                   i32 %56 = OpConstant 1 
                                       %61 = OpTypePointer Output %14 
                         Output f32_4* %62 = OpVariable Output 
                                   i32 %63 = OpConstant 0 
                                   f32 %73 = OpConstant 3.674022E-40 
                                       %74 = OpTypeInt 32 0 
                                   u32 %75 = OpConstant 3 
                                       %76 = OpTypePointer Output %6 
                                   void %4 = OpFunction None %3 
                                        %5 = OpLabel 
                                 f32_2 %13 = OpLoad vs_TEXCOORD0 
                        Uniform f32_4* %21 = OpAccessChain %17 %19 
                                 f32_4 %22 = OpLoad %21 
                                 f32_2 %23 = OpVectorShuffle %22 %22 0 1 
                                 f32_2 %24 = OpFMul %13 %23 
                        Uniform f32_4* %25 = OpAccessChain %17 %19 
                                 f32_4 %26 = OpLoad %25 
                                 f32_2 %27 = OpVectorShuffle %26 %26 2 3 
                                 f32_2 %28 = OpFAdd %24 %27 
                                 f32_3 %29 = OpLoad %9 
                                 f32_3 %30 = OpVectorShuffle %29 %28 3 4 2 
                                               OpStore %9 %30 
                   read_only Texture2D %35 = OpLoad %34 
                               sampler %39 = OpLoad %38 
            read_only Texture2DSampled %41 = OpSampledImage %35 %39 
                                 f32_3 %42 = OpLoad %9 
                                 f32_2 %43 = OpVectorShuffle %42 %42 0 1 
                                 f32_4 %44 = OpImageSampleImplicitLod %41 %43 
                                 f32_3 %45 = OpVectorShuffle %44 %44 0 1 2 
                                               OpStore %31 %45 
                   read_only Texture2D %47 = OpLoad %46 
                               sampler %49 = OpLoad %48 
            read_only Texture2DSampled %50 = OpSampledImage %47 %49 
                                 f32_3 %51 = OpLoad %9 
                                 f32_2 %52 = OpVectorShuffle %51 %51 0 1 
                                 f32_4 %53 = OpImageSampleImplicitLod %50 %52 
                                 f32_3 %54 = OpVectorShuffle %53 %53 0 1 2 
                                               OpStore %9 %54 
                                 f32_3 %55 = OpLoad %31 
                        Uniform f32_4* %57 = OpAccessChain %17 %56 
                                 f32_4 %58 = OpLoad %57 
                                 f32_3 %59 = OpVectorShuffle %58 %58 0 1 2 
                                 f32_3 %60 = OpFMul %55 %59 
                                               OpStore %31 %60 
                        Uniform f32_4* %64 = OpAccessChain %17 %63 
                                 f32_4 %65 = OpLoad %64 
                                 f32_3 %66 = OpVectorShuffle %65 %65 0 1 2 
                                 f32_3 %67 = OpLoad %9 
                                 f32_3 %68 = OpFMul %66 %67 
                                 f32_3 %69 = OpLoad %31 
                                 f32_3 %70 = OpFAdd %68 %69 
                                 f32_4 %71 = OpLoad %62 
                                 f32_4 %72 = OpVectorShuffle %71 %70 4 5 6 3 
                                               OpStore %62 %72 
                           Output f32* %77 = OpAccessChain %62 %75 
                                               OpStore %77 %73 
                                               OpReturn
                                               OpFunctionEnd
"
}
}
Program "fp" {
SubProgram "d3d11 " {
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
""
}
SubProgram "vulkan " {
""
}
SubProgram "d3d11 " {
Keywords { "AB_HIGH_PRECISION" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "AB_HIGH_PRECISION" }
""
}
SubProgram "vulkan " {
Keywords { "AB_HIGH_PRECISION" }
""
}
}
}
 Pass {
  Name "frag_weightedAddPS3"
  ZTest Always
  ZWrite Off
  Cull Off
  GpuProgramID 1403201
Program "vp" {
SubProgram "d3d11 " {
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in  vec4 in_POSITION0;
in  vec2 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _AnamorphicGlareWeights0;
uniform 	vec4 _AnamorphicGlareWeights1;
uniform 	vec4 _AnamorphicGlareWeights2;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BloomRange;
UNITY_LOCATION(0) uniform  sampler2D _AnamorphicRTS0;
UNITY_LOCATION(1) uniform  sampler2D _AnamorphicRTS1;
UNITY_LOCATION(2) uniform  sampler2D _AnamorphicRTS2;
in  vec2 vs_TEXCOORD0;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat9;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1 = texture(_AnamorphicRTS1, u_xlat0.xy);
    u_xlat1.xyz = u_xlat1.xyz * _BloomRange.xxx;
    u_xlat1.xyz = u_xlat1.www * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _AnamorphicGlareWeights1.xyz;
    u_xlat2 = texture(_AnamorphicRTS0, u_xlat0.xy);
    u_xlat0 = texture(_AnamorphicRTS2, u_xlat0.xy);
    u_xlat2.xyz = u_xlat2.xyz * _BloomRange.xxx;
    u_xlat2.xyz = u_xlat2.www * u_xlat2.xyz;
    u_xlat1.xyz = _AnamorphicGlareWeights0.xyz * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.xyz * _BloomRange.xxx;
    u_xlat0.xyz = u_xlat0.www * u_xlat0.xyz;
    u_xlat0.xyz = _AnamorphicGlareWeights2.xyz * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.xyz * _BloomRange.yyy;
    u_xlat9 = max(u_xlat0.y, u_xlat0.x);
    u_xlat1.x = max(u_xlat0.z, 9.99999997e-07);
    u_xlat9 = max(u_xlat9, u_xlat1.x);
    u_xlat9 = min(u_xlat9, 1.0);
    u_xlat9 = u_xlat9 * 255.0;
    u_xlat9 = ceil(u_xlat9);
    u_xlat9 = u_xlat9 * 0.00392156886;
    SV_Target0.xyz = u_xlat0.xyz / vec3(u_xlat9);
    SV_Target0.w = u_xlat9;
    return;
}

#endif
"
}
SubProgram "vulkan " {
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 94
; Schema: 0
                                              OpCapability Shader 
                                       %1 = OpExtInstImport "GLSL.std.450" 
                                              OpMemoryModel Logical GLSL450 
                                              OpEntryPoint Vertex %4 "main" %11 %72 %84 %86 
                                              OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                              OpDecorate %11 Location 11 
                                              OpDecorate %16 ArrayStride 16 
                                              OpDecorate %17 ArrayStride 17 
                                              OpMemberDecorate %18 0 Offset 18 
                                              OpMemberDecorate %18 1 Offset 18 
                                              OpDecorate %18 Block 
                                              OpDecorate %20 DescriptorSet 20 
                                              OpDecorate %20 Binding 20 
                                              OpMemberDecorate %70 0 BuiltIn 70 
                                              OpMemberDecorate %70 1 BuiltIn 70 
                                              OpMemberDecorate %70 2 BuiltIn 70 
                                              OpDecorate %70 Block 
                                              OpDecorate vs_TEXCOORD0 Location 84 
                                              OpDecorate %86 Location 86 
                                       %2 = OpTypeVoid 
                                       %3 = OpTypeFunction %2 
                                       %6 = OpTypeFloat 32 
                                       %7 = OpTypeVector %6 4 
                                       %8 = OpTypePointer Private %7 
                        Private f32_4* %9 = OpVariable Private 
                                      %10 = OpTypePointer Input %7 
                         Input f32_4* %11 = OpVariable Input 
                                      %14 = OpTypeInt 32 0 
                                  u32 %15 = OpConstant 4 
                                      %16 = OpTypeArray %7 %15 
                                      %17 = OpTypeArray %7 %15 
                                      %18 = OpTypeStruct %16 %17 
                                      %19 = OpTypePointer Uniform %18 
Uniform struct {f32_4[4]; f32_4[4];}* %20 = OpVariable Uniform 
                                      %21 = OpTypeInt 32 1 
                                  i32 %22 = OpConstant 0 
                                  i32 %23 = OpConstant 1 
                                      %24 = OpTypePointer Uniform %7 
                                  i32 %35 = OpConstant 2 
                                  i32 %44 = OpConstant 3 
                       Private f32_4* %48 = OpVariable Private 
                                  u32 %68 = OpConstant 1 
                                      %69 = OpTypeArray %6 %68 
                                      %70 = OpTypeStruct %7 %6 %69 
                                      %71 = OpTypePointer Output %70 
 Output struct {f32_4; f32; f32[1];}* %72 = OpVariable Output 
                                      %80 = OpTypePointer Output %7 
                                      %82 = OpTypeVector %6 2 
                                      %83 = OpTypePointer Output %82 
               Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                      %85 = OpTypePointer Input %82 
                         Input f32_2* %86 = OpVariable Input 
                                      %88 = OpTypePointer Output %6 
                                  void %4 = OpFunction None %3 
                                       %5 = OpLabel 
                                f32_4 %12 = OpLoad %11 
                                f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                       Uniform f32_4* %25 = OpAccessChain %20 %22 %23 
                                f32_4 %26 = OpLoad %25 
                                f32_4 %27 = OpFMul %13 %26 
                                              OpStore %9 %27 
                       Uniform f32_4* %28 = OpAccessChain %20 %22 %22 
                                f32_4 %29 = OpLoad %28 
                                f32_4 %30 = OpLoad %11 
                                f32_4 %31 = OpVectorShuffle %30 %30 0 0 0 0 
                                f32_4 %32 = OpFMul %29 %31 
                                f32_4 %33 = OpLoad %9 
                                f32_4 %34 = OpFAdd %32 %33 
                                              OpStore %9 %34 
                       Uniform f32_4* %36 = OpAccessChain %20 %22 %35 
                                f32_4 %37 = OpLoad %36 
                                f32_4 %38 = OpLoad %11 
                                f32_4 %39 = OpVectorShuffle %38 %38 2 2 2 2 
                                f32_4 %40 = OpFMul %37 %39 
                                f32_4 %41 = OpLoad %9 
                                f32_4 %42 = OpFAdd %40 %41 
                                              OpStore %9 %42 
                                f32_4 %43 = OpLoad %9 
                       Uniform f32_4* %45 = OpAccessChain %20 %22 %44 
                                f32_4 %46 = OpLoad %45 
                                f32_4 %47 = OpFAdd %43 %46 
                                              OpStore %9 %47 
                                f32_4 %49 = OpLoad %9 
                                f32_4 %50 = OpVectorShuffle %49 %49 1 1 1 1 
                       Uniform f32_4* %51 = OpAccessChain %20 %23 %23 
                                f32_4 %52 = OpLoad %51 
                                f32_4 %53 = OpFMul %50 %52 
                                              OpStore %48 %53 
                       Uniform f32_4* %54 = OpAccessChain %20 %23 %22 
                                f32_4 %55 = OpLoad %54 
                                f32_4 %56 = OpLoad %9 
                                f32_4 %57 = OpVectorShuffle %56 %56 0 0 0 0 
                                f32_4 %58 = OpFMul %55 %57 
                                f32_4 %59 = OpLoad %48 
                                f32_4 %60 = OpFAdd %58 %59 
                                              OpStore %48 %60 
                       Uniform f32_4* %61 = OpAccessChain %20 %23 %35 
                                f32_4 %62 = OpLoad %61 
                                f32_4 %63 = OpLoad %9 
                                f32_4 %64 = OpVectorShuffle %63 %63 2 2 2 2 
                                f32_4 %65 = OpFMul %62 %64 
                                f32_4 %66 = OpLoad %48 
                                f32_4 %67 = OpFAdd %65 %66 
                                              OpStore %48 %67 
                       Uniform f32_4* %73 = OpAccessChain %20 %23 %44 
                                f32_4 %74 = OpLoad %73 
                                f32_4 %75 = OpLoad %9 
                                f32_4 %76 = OpVectorShuffle %75 %75 3 3 3 3 
                                f32_4 %77 = OpFMul %74 %76 
                                f32_4 %78 = OpLoad %48 
                                f32_4 %79 = OpFAdd %77 %78 
                        Output f32_4* %81 = OpAccessChain %72 %22 
                                              OpStore %81 %79 
                                f32_2 %87 = OpLoad %86 
                                              OpStore vs_TEXCOORD0 %87 
                          Output f32* %89 = OpAccessChain %72 %22 %68 
                                  f32 %90 = OpLoad %89 
                                  f32 %91 = OpFNegate %90 
                          Output f32* %92 = OpAccessChain %72 %22 %68 
                                              OpStore %92 %91 
                                              OpReturn
                                              OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 194
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %12 %181 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpDecorate vs_TEXCOORD0 Location 12 
                                                      OpMemberDecorate %14 0 Offset 14 
                                                      OpMemberDecorate %14 1 Offset 14 
                                                      OpMemberDecorate %14 2 Offset 14 
                                                      OpMemberDecorate %14 3 Offset 14 
                                                      OpMemberDecorate %14 4 Offset 14 
                                                      OpDecorate %14 Block 
                                                      OpDecorate %16 DescriptorSet 16 
                                                      OpDecorate %16 Binding 16 
                                                      OpDecorate %33 DescriptorSet 33 
                                                      OpDecorate %33 Binding 33 
                                                      OpDecorate %37 DescriptorSet 37 
                                                      OpDecorate %37 Binding 37 
                                                      OpDecorate %71 DescriptorSet 71 
                                                      OpDecorate %71 Binding 71 
                                                      OpDecorate %73 DescriptorSet 73 
                                                      OpDecorate %73 Binding 73 
                                                      OpDecorate %79 DescriptorSet 79 
                                                      OpDecorate %79 Binding 79 
                                                      OpDecorate %81 DescriptorSet 81 
                                                      OpDecorate %81 Binding 81 
                                                      OpDecorate %181 Location 181 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 2 
                                              %11 = OpTypePointer Input %10 
                        Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                              %14 = OpTypeStruct %7 %7 %7 %7 %7 
                                              %15 = OpTypePointer Uniform %14 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4;}* %16 = OpVariable Uniform 
                                              %17 = OpTypeInt 32 1 
                                          i32 %18 = OpConstant 3 
                                              %19 = OpTypePointer Uniform %7 
                               Private f32_4* %30 = OpVariable Private 
                                              %31 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %32 = OpTypePointer UniformConstant %31 
         UniformConstant read_only Texture2D* %33 = OpVariable UniformConstant 
                                              %35 = OpTypeSampler 
                                              %36 = OpTypePointer UniformConstant %35 
                     UniformConstant sampler* %37 = OpVariable UniformConstant 
                                              %39 = OpTypeSampledImage %31 
                                              %44 = OpTypeVector %6 3 
                                          i32 %47 = OpConstant 4 
                                          i32 %63 = OpConstant 1 
                               Private f32_4* %70 = OpVariable Private 
         UniformConstant read_only Texture2D* %71 = OpVariable UniformConstant 
                     UniformConstant sampler* %73 = OpVariable UniformConstant 
         UniformConstant read_only Texture2D* %79 = OpVariable UniformConstant 
                     UniformConstant sampler* %81 = OpVariable UniformConstant 
                                         i32 %102 = OpConstant 0 
                                         i32 %129 = OpConstant 2 
                                             %149 = OpTypePointer Private %6 
                                Private f32* %150 = OpVariable Private 
                                             %151 = OpTypeInt 32 0 
                                         u32 %152 = OpConstant 1 
                                         u32 %155 = OpConstant 0 
                                         u32 %159 = OpConstant 2 
                                         f32 %162 = OpConstant 3.674022E-40 
                                         f32 %170 = OpConstant 3.674022E-40 
                                         f32 %173 = OpConstant 3.674022E-40 
                                         f32 %178 = OpConstant 3.674022E-40 
                                             %180 = OpTypePointer Output %7 
                               Output f32_4* %181 = OpVariable Output 
                                         u32 %190 = OpConstant 3 
                                             %191 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_2 %13 = OpLoad vs_TEXCOORD0 
                               Uniform f32_4* %20 = OpAccessChain %16 %18 
                                        f32_4 %21 = OpLoad %20 
                                        f32_2 %22 = OpVectorShuffle %21 %21 0 1 
                                        f32_2 %23 = OpFMul %13 %22 
                               Uniform f32_4* %24 = OpAccessChain %16 %18 
                                        f32_4 %25 = OpLoad %24 
                                        f32_2 %26 = OpVectorShuffle %25 %25 2 3 
                                        f32_2 %27 = OpFAdd %23 %26 
                                        f32_4 %28 = OpLoad %9 
                                        f32_4 %29 = OpVectorShuffle %28 %27 4 5 2 3 
                                                      OpStore %9 %29 
                          read_only Texture2D %34 = OpLoad %33 
                                      sampler %38 = OpLoad %37 
                   read_only Texture2DSampled %40 = OpSampledImage %34 %38 
                                        f32_4 %41 = OpLoad %9 
                                        f32_2 %42 = OpVectorShuffle %41 %41 0 1 
                                        f32_4 %43 = OpImageSampleImplicitLod %40 %42 
                                                      OpStore %30 %43 
                                        f32_4 %45 = OpLoad %30 
                                        f32_3 %46 = OpVectorShuffle %45 %45 0 1 2 
                               Uniform f32_4* %48 = OpAccessChain %16 %47 
                                        f32_4 %49 = OpLoad %48 
                                        f32_3 %50 = OpVectorShuffle %49 %49 0 0 0 
                                        f32_3 %51 = OpFMul %46 %50 
                                        f32_4 %52 = OpLoad %30 
                                        f32_4 %53 = OpVectorShuffle %52 %51 4 5 6 3 
                                                      OpStore %30 %53 
                                        f32_4 %54 = OpLoad %30 
                                        f32_3 %55 = OpVectorShuffle %54 %54 3 3 3 
                                        f32_4 %56 = OpLoad %30 
                                        f32_3 %57 = OpVectorShuffle %56 %56 0 1 2 
                                        f32_3 %58 = OpFMul %55 %57 
                                        f32_4 %59 = OpLoad %30 
                                        f32_4 %60 = OpVectorShuffle %59 %58 4 5 6 3 
                                                      OpStore %30 %60 
                                        f32_4 %61 = OpLoad %30 
                                        f32_3 %62 = OpVectorShuffle %61 %61 0 1 2 
                               Uniform f32_4* %64 = OpAccessChain %16 %63 
                                        f32_4 %65 = OpLoad %64 
                                        f32_3 %66 = OpVectorShuffle %65 %65 0 1 2 
                                        f32_3 %67 = OpFMul %62 %66 
                                        f32_4 %68 = OpLoad %30 
                                        f32_4 %69 = OpVectorShuffle %68 %67 4 5 6 3 
                                                      OpStore %30 %69 
                          read_only Texture2D %72 = OpLoad %71 
                                      sampler %74 = OpLoad %73 
                   read_only Texture2DSampled %75 = OpSampledImage %72 %74 
                                        f32_4 %76 = OpLoad %9 
                                        f32_2 %77 = OpVectorShuffle %76 %76 0 1 
                                        f32_4 %78 = OpImageSampleImplicitLod %75 %77 
                                                      OpStore %70 %78 
                          read_only Texture2D %80 = OpLoad %79 
                                      sampler %82 = OpLoad %81 
                   read_only Texture2DSampled %83 = OpSampledImage %80 %82 
                                        f32_4 %84 = OpLoad %9 
                                        f32_2 %85 = OpVectorShuffle %84 %84 0 1 
                                        f32_4 %86 = OpImageSampleImplicitLod %83 %85 
                                                      OpStore %9 %86 
                                        f32_4 %87 = OpLoad %70 
                                        f32_3 %88 = OpVectorShuffle %87 %87 0 1 2 
                               Uniform f32_4* %89 = OpAccessChain %16 %47 
                                        f32_4 %90 = OpLoad %89 
                                        f32_3 %91 = OpVectorShuffle %90 %90 0 0 0 
                                        f32_3 %92 = OpFMul %88 %91 
                                        f32_4 %93 = OpLoad %70 
                                        f32_4 %94 = OpVectorShuffle %93 %92 4 5 6 3 
                                                      OpStore %70 %94 
                                        f32_4 %95 = OpLoad %70 
                                        f32_3 %96 = OpVectorShuffle %95 %95 3 3 3 
                                        f32_4 %97 = OpLoad %70 
                                        f32_3 %98 = OpVectorShuffle %97 %97 0 1 2 
                                        f32_3 %99 = OpFMul %96 %98 
                                       f32_4 %100 = OpLoad %70 
                                       f32_4 %101 = OpVectorShuffle %100 %99 4 5 6 3 
                                                      OpStore %70 %101 
                              Uniform f32_4* %103 = OpAccessChain %16 %102 
                                       f32_4 %104 = OpLoad %103 
                                       f32_3 %105 = OpVectorShuffle %104 %104 0 1 2 
                                       f32_4 %106 = OpLoad %70 
                                       f32_3 %107 = OpVectorShuffle %106 %106 0 1 2 
                                       f32_3 %108 = OpFMul %105 %107 
                                       f32_4 %109 = OpLoad %30 
                                       f32_3 %110 = OpVectorShuffle %109 %109 0 1 2 
                                       f32_3 %111 = OpFAdd %108 %110 
                                       f32_4 %112 = OpLoad %30 
                                       f32_4 %113 = OpVectorShuffle %112 %111 4 5 6 3 
                                                      OpStore %30 %113 
                                       f32_4 %114 = OpLoad %9 
                                       f32_3 %115 = OpVectorShuffle %114 %114 0 1 2 
                              Uniform f32_4* %116 = OpAccessChain %16 %47 
                                       f32_4 %117 = OpLoad %116 
                                       f32_3 %118 = OpVectorShuffle %117 %117 0 0 0 
                                       f32_3 %119 = OpFMul %115 %118 
                                       f32_4 %120 = OpLoad %9 
                                       f32_4 %121 = OpVectorShuffle %120 %119 4 5 6 3 
                                                      OpStore %9 %121 
                                       f32_4 %122 = OpLoad %9 
                                       f32_3 %123 = OpVectorShuffle %122 %122 3 3 3 
                                       f32_4 %124 = OpLoad %9 
                                       f32_3 %125 = OpVectorShuffle %124 %124 0 1 2 
                                       f32_3 %126 = OpFMul %123 %125 
                                       f32_4 %127 = OpLoad %9 
                                       f32_4 %128 = OpVectorShuffle %127 %126 4 5 6 3 
                                                      OpStore %9 %128 
                              Uniform f32_4* %130 = OpAccessChain %16 %129 
                                       f32_4 %131 = OpLoad %130 
                                       f32_3 %132 = OpVectorShuffle %131 %131 0 1 2 
                                       f32_4 %133 = OpLoad %9 
                                       f32_3 %134 = OpVectorShuffle %133 %133 0 1 2 
                                       f32_3 %135 = OpFMul %132 %134 
                                       f32_4 %136 = OpLoad %30 
                                       f32_3 %137 = OpVectorShuffle %136 %136 0 1 2 
                                       f32_3 %138 = OpFAdd %135 %137 
                                       f32_4 %139 = OpLoad %9 
                                       f32_4 %140 = OpVectorShuffle %139 %138 4 5 6 3 
                                                      OpStore %9 %140 
                                       f32_4 %141 = OpLoad %9 
                                       f32_3 %142 = OpVectorShuffle %141 %141 0 1 2 
                              Uniform f32_4* %143 = OpAccessChain %16 %47 
                                       f32_4 %144 = OpLoad %143 
                                       f32_3 %145 = OpVectorShuffle %144 %144 1 1 1 
                                       f32_3 %146 = OpFMul %142 %145 
                                       f32_4 %147 = OpLoad %9 
                                       f32_4 %148 = OpVectorShuffle %147 %146 4 5 6 3 
                                                      OpStore %9 %148 
                                Private f32* %153 = OpAccessChain %9 %152 
                                         f32 %154 = OpLoad %153 
                                Private f32* %156 = OpAccessChain %9 %155 
                                         f32 %157 = OpLoad %156 
                                         f32 %158 = OpExtInst %1 40 %154 %157 
                                                      OpStore %150 %158 
                                Private f32* %160 = OpAccessChain %9 %159 
                                         f32 %161 = OpLoad %160 
                                         f32 %163 = OpExtInst %1 40 %161 %162 
                                Private f32* %164 = OpAccessChain %30 %155 
                                                      OpStore %164 %163 
                                         f32 %165 = OpLoad %150 
                                Private f32* %166 = OpAccessChain %30 %155 
                                         f32 %167 = OpLoad %166 
                                         f32 %168 = OpExtInst %1 40 %165 %167 
                                                      OpStore %150 %168 
                                         f32 %169 = OpLoad %150 
                                         f32 %171 = OpExtInst %1 37 %169 %170 
                                                      OpStore %150 %171 
                                         f32 %172 = OpLoad %150 
                                         f32 %174 = OpFMul %172 %173 
                                                      OpStore %150 %174 
                                         f32 %175 = OpLoad %150 
                                         f32 %176 = OpExtInst %1 9 %175 
                                                      OpStore %150 %176 
                                         f32 %177 = OpLoad %150 
                                         f32 %179 = OpFMul %177 %178 
                                                      OpStore %150 %179 
                                       f32_4 %182 = OpLoad %9 
                                       f32_3 %183 = OpVectorShuffle %182 %182 0 1 2 
                                         f32 %184 = OpLoad %150 
                                       f32_3 %185 = OpCompositeConstruct %184 %184 %184 
                                       f32_3 %186 = OpFDiv %183 %185 
                                       f32_4 %187 = OpLoad %181 
                                       f32_4 %188 = OpVectorShuffle %187 %186 4 5 6 3 
                                                      OpStore %181 %188 
                                         f32 %189 = OpLoad %150 
                                 Output f32* %192 = OpAccessChain %181 %190 
                                                      OpStore %192 %189 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "AB_HIGH_PRECISION" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "AB_HIGH_PRECISION" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in  vec4 in_POSITION0;
in  vec2 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _AnamorphicGlareWeights0;
uniform 	vec4 _AnamorphicGlareWeights1;
uniform 	vec4 _AnamorphicGlareWeights2;
uniform 	vec4 _MainTex_ST;
UNITY_LOCATION(0) uniform  sampler2D _AnamorphicRTS0;
UNITY_LOCATION(1) uniform  sampler2D _AnamorphicRTS1;
UNITY_LOCATION(2) uniform  sampler2D _AnamorphicRTS2;
in  vec2 vs_TEXCOORD0;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1 = texture(_AnamorphicRTS1, u_xlat0.xy);
    u_xlat1.xyz = u_xlat1.xyz * _AnamorphicGlareWeights1.xyz;
    u_xlat2 = texture(_AnamorphicRTS0, u_xlat0.xy);
    u_xlat0 = texture(_AnamorphicRTS2, u_xlat0.xy);
    u_xlat1.xyz = _AnamorphicGlareWeights0.xyz * u_xlat2.xyz + u_xlat1.xyz;
    SV_Target0.xyz = _AnamorphicGlareWeights2.xyz * u_xlat0.xyz + u_xlat1.xyz;
    SV_Target0.w = 0.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "AB_HIGH_PRECISION" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 94
; Schema: 0
                                              OpCapability Shader 
                                       %1 = OpExtInstImport "GLSL.std.450" 
                                              OpMemoryModel Logical GLSL450 
                                              OpEntryPoint Vertex %4 "main" %11 %72 %84 %86 
                                              OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                              OpDecorate %11 Location 11 
                                              OpDecorate %16 ArrayStride 16 
                                              OpDecorate %17 ArrayStride 17 
                                              OpMemberDecorate %18 0 Offset 18 
                                              OpMemberDecorate %18 1 Offset 18 
                                              OpDecorate %18 Block 
                                              OpDecorate %20 DescriptorSet 20 
                                              OpDecorate %20 Binding 20 
                                              OpMemberDecorate %70 0 BuiltIn 70 
                                              OpMemberDecorate %70 1 BuiltIn 70 
                                              OpMemberDecorate %70 2 BuiltIn 70 
                                              OpDecorate %70 Block 
                                              OpDecorate vs_TEXCOORD0 Location 84 
                                              OpDecorate %86 Location 86 
                                       %2 = OpTypeVoid 
                                       %3 = OpTypeFunction %2 
                                       %6 = OpTypeFloat 32 
                                       %7 = OpTypeVector %6 4 
                                       %8 = OpTypePointer Private %7 
                        Private f32_4* %9 = OpVariable Private 
                                      %10 = OpTypePointer Input %7 
                         Input f32_4* %11 = OpVariable Input 
                                      %14 = OpTypeInt 32 0 
                                  u32 %15 = OpConstant 4 
                                      %16 = OpTypeArray %7 %15 
                                      %17 = OpTypeArray %7 %15 
                                      %18 = OpTypeStruct %16 %17 
                                      %19 = OpTypePointer Uniform %18 
Uniform struct {f32_4[4]; f32_4[4];}* %20 = OpVariable Uniform 
                                      %21 = OpTypeInt 32 1 
                                  i32 %22 = OpConstant 0 
                                  i32 %23 = OpConstant 1 
                                      %24 = OpTypePointer Uniform %7 
                                  i32 %35 = OpConstant 2 
                                  i32 %44 = OpConstant 3 
                       Private f32_4* %48 = OpVariable Private 
                                  u32 %68 = OpConstant 1 
                                      %69 = OpTypeArray %6 %68 
                                      %70 = OpTypeStruct %7 %6 %69 
                                      %71 = OpTypePointer Output %70 
 Output struct {f32_4; f32; f32[1];}* %72 = OpVariable Output 
                                      %80 = OpTypePointer Output %7 
                                      %82 = OpTypeVector %6 2 
                                      %83 = OpTypePointer Output %82 
               Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                      %85 = OpTypePointer Input %82 
                         Input f32_2* %86 = OpVariable Input 
                                      %88 = OpTypePointer Output %6 
                                  void %4 = OpFunction None %3 
                                       %5 = OpLabel 
                                f32_4 %12 = OpLoad %11 
                                f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                       Uniform f32_4* %25 = OpAccessChain %20 %22 %23 
                                f32_4 %26 = OpLoad %25 
                                f32_4 %27 = OpFMul %13 %26 
                                              OpStore %9 %27 
                       Uniform f32_4* %28 = OpAccessChain %20 %22 %22 
                                f32_4 %29 = OpLoad %28 
                                f32_4 %30 = OpLoad %11 
                                f32_4 %31 = OpVectorShuffle %30 %30 0 0 0 0 
                                f32_4 %32 = OpFMul %29 %31 
                                f32_4 %33 = OpLoad %9 
                                f32_4 %34 = OpFAdd %32 %33 
                                              OpStore %9 %34 
                       Uniform f32_4* %36 = OpAccessChain %20 %22 %35 
                                f32_4 %37 = OpLoad %36 
                                f32_4 %38 = OpLoad %11 
                                f32_4 %39 = OpVectorShuffle %38 %38 2 2 2 2 
                                f32_4 %40 = OpFMul %37 %39 
                                f32_4 %41 = OpLoad %9 
                                f32_4 %42 = OpFAdd %40 %41 
                                              OpStore %9 %42 
                                f32_4 %43 = OpLoad %9 
                       Uniform f32_4* %45 = OpAccessChain %20 %22 %44 
                                f32_4 %46 = OpLoad %45 
                                f32_4 %47 = OpFAdd %43 %46 
                                              OpStore %9 %47 
                                f32_4 %49 = OpLoad %9 
                                f32_4 %50 = OpVectorShuffle %49 %49 1 1 1 1 
                       Uniform f32_4* %51 = OpAccessChain %20 %23 %23 
                                f32_4 %52 = OpLoad %51 
                                f32_4 %53 = OpFMul %50 %52 
                                              OpStore %48 %53 
                       Uniform f32_4* %54 = OpAccessChain %20 %23 %22 
                                f32_4 %55 = OpLoad %54 
                                f32_4 %56 = OpLoad %9 
                                f32_4 %57 = OpVectorShuffle %56 %56 0 0 0 0 
                                f32_4 %58 = OpFMul %55 %57 
                                f32_4 %59 = OpLoad %48 
                                f32_4 %60 = OpFAdd %58 %59 
                                              OpStore %48 %60 
                       Uniform f32_4* %61 = OpAccessChain %20 %23 %35 
                                f32_4 %62 = OpLoad %61 
                                f32_4 %63 = OpLoad %9 
                                f32_4 %64 = OpVectorShuffle %63 %63 2 2 2 2 
                                f32_4 %65 = OpFMul %62 %64 
                                f32_4 %66 = OpLoad %48 
                                f32_4 %67 = OpFAdd %65 %66 
                                              OpStore %48 %67 
                       Uniform f32_4* %73 = OpAccessChain %20 %23 %44 
                                f32_4 %74 = OpLoad %73 
                                f32_4 %75 = OpLoad %9 
                                f32_4 %76 = OpVectorShuffle %75 %75 3 3 3 3 
                                f32_4 %77 = OpFMul %74 %76 
                                f32_4 %78 = OpLoad %48 
                                f32_4 %79 = OpFAdd %77 %78 
                        Output f32_4* %81 = OpAccessChain %72 %22 
                                              OpStore %81 %79 
                                f32_2 %87 = OpLoad %86 
                                              OpStore vs_TEXCOORD0 %87 
                          Output f32* %89 = OpAccessChain %72 %22 %68 
                                  f32 %90 = OpLoad %89 
                                  f32 %91 = OpFNegate %90 
                          Output f32* %92 = OpAccessChain %72 %22 %68 
                                              OpStore %92 %91 
                                              OpReturn
                                              OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 97
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %12 %80 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpDecorate vs_TEXCOORD0 Location 12 
                                                      OpMemberDecorate %15 0 Offset 15 
                                                      OpMemberDecorate %15 1 Offset 15 
                                                      OpMemberDecorate %15 2 Offset 15 
                                                      OpMemberDecorate %15 3 Offset 15 
                                                      OpDecorate %15 Block 
                                                      OpDecorate %17 DescriptorSet 17 
                                                      OpDecorate %17 Binding 17 
                                                      OpDecorate %34 DescriptorSet 34 
                                                      OpDecorate %34 Binding 34 
                                                      OpDecorate %38 DescriptorSet 38 
                                                      OpDecorate %38 Binding 38 
                                                      OpDecorate %53 DescriptorSet 53 
                                                      OpDecorate %53 Binding 53 
                                                      OpDecorate %55 DescriptorSet 55 
                                                      OpDecorate %55 Binding 55 
                                                      OpDecorate %62 DescriptorSet 62 
                                                      OpDecorate %62 Binding 62 
                                                      OpDecorate %64 DescriptorSet 64 
                                                      OpDecorate %64 Binding 64 
                                                      OpDecorate %80 Location 80 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 3 
                                               %8 = OpTypePointer Private %7 
                                Private f32_3* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 2 
                                              %11 = OpTypePointer Input %10 
                        Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                              %14 = OpTypeVector %6 4 
                                              %15 = OpTypeStruct %14 %14 %14 %14 
                                              %16 = OpTypePointer Uniform %15 
Uniform struct {f32_4; f32_4; f32_4; f32_4;}* %17 = OpVariable Uniform 
                                              %18 = OpTypeInt 32 1 
                                          i32 %19 = OpConstant 3 
                                              %20 = OpTypePointer Uniform %14 
                               Private f32_3* %31 = OpVariable Private 
                                              %32 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %33 = OpTypePointer UniformConstant %32 
         UniformConstant read_only Texture2D* %34 = OpVariable UniformConstant 
                                              %36 = OpTypeSampler 
                                              %37 = OpTypePointer UniformConstant %36 
                     UniformConstant sampler* %38 = OpVariable UniformConstant 
                                              %40 = OpTypeSampledImage %32 
                                          i32 %47 = OpConstant 1 
                               Private f32_3* %52 = OpVariable Private 
         UniformConstant read_only Texture2D* %53 = OpVariable UniformConstant 
                     UniformConstant sampler* %55 = OpVariable UniformConstant 
         UniformConstant read_only Texture2D* %62 = OpVariable UniformConstant 
                     UniformConstant sampler* %64 = OpVariable UniformConstant 
                                          i32 %71 = OpConstant 0 
                                              %79 = OpTypePointer Output %14 
                                Output f32_4* %80 = OpVariable Output 
                                          i32 %81 = OpConstant 2 
                                          f32 %91 = OpConstant 3.674022E-40 
                                              %92 = OpTypeInt 32 0 
                                          u32 %93 = OpConstant 3 
                                              %94 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_2 %13 = OpLoad vs_TEXCOORD0 
                               Uniform f32_4* %21 = OpAccessChain %17 %19 
                                        f32_4 %22 = OpLoad %21 
                                        f32_2 %23 = OpVectorShuffle %22 %22 0 1 
                                        f32_2 %24 = OpFMul %13 %23 
                               Uniform f32_4* %25 = OpAccessChain %17 %19 
                                        f32_4 %26 = OpLoad %25 
                                        f32_2 %27 = OpVectorShuffle %26 %26 2 3 
                                        f32_2 %28 = OpFAdd %24 %27 
                                        f32_3 %29 = OpLoad %9 
                                        f32_3 %30 = OpVectorShuffle %29 %28 3 4 2 
                                                      OpStore %9 %30 
                          read_only Texture2D %35 = OpLoad %34 
                                      sampler %39 = OpLoad %38 
                   read_only Texture2DSampled %41 = OpSampledImage %35 %39 
                                        f32_3 %42 = OpLoad %9 
                                        f32_2 %43 = OpVectorShuffle %42 %42 0 1 
                                        f32_4 %44 = OpImageSampleImplicitLod %41 %43 
                                        f32_3 %45 = OpVectorShuffle %44 %44 0 1 2 
                                                      OpStore %31 %45 
                                        f32_3 %46 = OpLoad %31 
                               Uniform f32_4* %48 = OpAccessChain %17 %47 
                                        f32_4 %49 = OpLoad %48 
                                        f32_3 %50 = OpVectorShuffle %49 %49 0 1 2 
                                        f32_3 %51 = OpFMul %46 %50 
                                                      OpStore %31 %51 
                          read_only Texture2D %54 = OpLoad %53 
                                      sampler %56 = OpLoad %55 
                   read_only Texture2DSampled %57 = OpSampledImage %54 %56 
                                        f32_3 %58 = OpLoad %9 
                                        f32_2 %59 = OpVectorShuffle %58 %58 0 1 
                                        f32_4 %60 = OpImageSampleImplicitLod %57 %59 
                                        f32_3 %61 = OpVectorShuffle %60 %60 0 1 2 
                                                      OpStore %52 %61 
                          read_only Texture2D %63 = OpLoad %62 
                                      sampler %65 = OpLoad %64 
                   read_only Texture2DSampled %66 = OpSampledImage %63 %65 
                                        f32_3 %67 = OpLoad %9 
                                        f32_2 %68 = OpVectorShuffle %67 %67 0 1 
                                        f32_4 %69 = OpImageSampleImplicitLod %66 %68 
                                        f32_3 %70 = OpVectorShuffle %69 %69 0 1 2 
                                                      OpStore %9 %70 
                               Uniform f32_4* %72 = OpAccessChain %17 %71 
                                        f32_4 %73 = OpLoad %72 
                                        f32_3 %74 = OpVectorShuffle %73 %73 0 1 2 
                                        f32_3 %75 = OpLoad %52 
                                        f32_3 %76 = OpFMul %74 %75 
                                        f32_3 %77 = OpLoad %31 
                                        f32_3 %78 = OpFAdd %76 %77 
                                                      OpStore %31 %78 
                               Uniform f32_4* %82 = OpAccessChain %17 %81 
                                        f32_4 %83 = OpLoad %82 
                                        f32_3 %84 = OpVectorShuffle %83 %83 0 1 2 
                                        f32_3 %85 = OpLoad %9 
                                        f32_3 %86 = OpFMul %84 %85 
                                        f32_3 %87 = OpLoad %31 
                                        f32_3 %88 = OpFAdd %86 %87 
                                        f32_4 %89 = OpLoad %80 
                                        f32_4 %90 = OpVectorShuffle %89 %88 4 5 6 3 
                                                      OpStore %80 %90 
                                  Output f32* %95 = OpAccessChain %80 %93 
                                                      OpStore %95 %91 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
}
Program "fp" {
SubProgram "d3d11 " {
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
""
}
SubProgram "vulkan " {
""
}
SubProgram "d3d11 " {
Keywords { "AB_HIGH_PRECISION" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "AB_HIGH_PRECISION" }
""
}
SubProgram "vulkan " {
Keywords { "AB_HIGH_PRECISION" }
""
}
}
}
 Pass {
  Name "frag_weightedAddPS4"
  ZTest Always
  ZWrite Off
  Cull Off
  GpuProgramID 1443195
Program "vp" {
SubProgram "d3d11 " {
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in  vec4 in_POSITION0;
in  vec2 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _AnamorphicGlareWeights0;
uniform 	vec4 _AnamorphicGlareWeights1;
uniform 	vec4 _AnamorphicGlareWeights2;
uniform 	vec4 _AnamorphicGlareWeights3;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BloomRange;
UNITY_LOCATION(0) uniform  sampler2D _AnamorphicRTS0;
UNITY_LOCATION(1) uniform  sampler2D _AnamorphicRTS1;
UNITY_LOCATION(2) uniform  sampler2D _AnamorphicRTS2;
UNITY_LOCATION(3) uniform  sampler2D _AnamorphicRTS3;
in  vec2 vs_TEXCOORD0;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat9;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1 = texture(_AnamorphicRTS1, u_xlat0.xy);
    u_xlat1.xyz = u_xlat1.xyz * _BloomRange.xxx;
    u_xlat1.xyz = u_xlat1.www * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _AnamorphicGlareWeights1.xyz;
    u_xlat2 = texture(_AnamorphicRTS0, u_xlat0.xy);
    u_xlat2.xyz = u_xlat2.xyz * _BloomRange.xxx;
    u_xlat2.xyz = u_xlat2.www * u_xlat2.xyz;
    u_xlat1.xyz = _AnamorphicGlareWeights0.xyz * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat2 = texture(_AnamorphicRTS2, u_xlat0.xy);
    u_xlat0 = texture(_AnamorphicRTS3, u_xlat0.xy);
    u_xlat2.xyz = u_xlat2.xyz * _BloomRange.xxx;
    u_xlat2.xyz = u_xlat2.www * u_xlat2.xyz;
    u_xlat1.xyz = _AnamorphicGlareWeights2.xyz * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.xyz * _BloomRange.xxx;
    u_xlat0.xyz = u_xlat0.www * u_xlat0.xyz;
    u_xlat0.xyz = _AnamorphicGlareWeights3.xyz * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.xyz * _BloomRange.yyy;
    u_xlat9 = max(u_xlat0.y, u_xlat0.x);
    u_xlat1.x = max(u_xlat0.z, 9.99999997e-07);
    u_xlat9 = max(u_xlat9, u_xlat1.x);
    u_xlat9 = min(u_xlat9, 1.0);
    u_xlat9 = u_xlat9 * 255.0;
    u_xlat9 = ceil(u_xlat9);
    u_xlat9 = u_xlat9 * 0.00392156886;
    SV_Target0.xyz = u_xlat0.xyz / vec3(u_xlat9);
    SV_Target0.w = u_xlat9;
    return;
}

#endif
"
}
SubProgram "vulkan " {
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 94
; Schema: 0
                                              OpCapability Shader 
                                       %1 = OpExtInstImport "GLSL.std.450" 
                                              OpMemoryModel Logical GLSL450 
                                              OpEntryPoint Vertex %4 "main" %11 %72 %84 %86 
                                              OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                              OpDecorate %11 Location 11 
                                              OpDecorate %16 ArrayStride 16 
                                              OpDecorate %17 ArrayStride 17 
                                              OpMemberDecorate %18 0 Offset 18 
                                              OpMemberDecorate %18 1 Offset 18 
                                              OpDecorate %18 Block 
                                              OpDecorate %20 DescriptorSet 20 
                                              OpDecorate %20 Binding 20 
                                              OpMemberDecorate %70 0 BuiltIn 70 
                                              OpMemberDecorate %70 1 BuiltIn 70 
                                              OpMemberDecorate %70 2 BuiltIn 70 
                                              OpDecorate %70 Block 
                                              OpDecorate vs_TEXCOORD0 Location 84 
                                              OpDecorate %86 Location 86 
                                       %2 = OpTypeVoid 
                                       %3 = OpTypeFunction %2 
                                       %6 = OpTypeFloat 32 
                                       %7 = OpTypeVector %6 4 
                                       %8 = OpTypePointer Private %7 
                        Private f32_4* %9 = OpVariable Private 
                                      %10 = OpTypePointer Input %7 
                         Input f32_4* %11 = OpVariable Input 
                                      %14 = OpTypeInt 32 0 
                                  u32 %15 = OpConstant 4 
                                      %16 = OpTypeArray %7 %15 
                                      %17 = OpTypeArray %7 %15 
                                      %18 = OpTypeStruct %16 %17 
                                      %19 = OpTypePointer Uniform %18 
Uniform struct {f32_4[4]; f32_4[4];}* %20 = OpVariable Uniform 
                                      %21 = OpTypeInt 32 1 
                                  i32 %22 = OpConstant 0 
                                  i32 %23 = OpConstant 1 
                                      %24 = OpTypePointer Uniform %7 
                                  i32 %35 = OpConstant 2 
                                  i32 %44 = OpConstant 3 
                       Private f32_4* %48 = OpVariable Private 
                                  u32 %68 = OpConstant 1 
                                      %69 = OpTypeArray %6 %68 
                                      %70 = OpTypeStruct %7 %6 %69 
                                      %71 = OpTypePointer Output %70 
 Output struct {f32_4; f32; f32[1];}* %72 = OpVariable Output 
                                      %80 = OpTypePointer Output %7 
                                      %82 = OpTypeVector %6 2 
                                      %83 = OpTypePointer Output %82 
               Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                      %85 = OpTypePointer Input %82 
                         Input f32_2* %86 = OpVariable Input 
                                      %88 = OpTypePointer Output %6 
                                  void %4 = OpFunction None %3 
                                       %5 = OpLabel 
                                f32_4 %12 = OpLoad %11 
                                f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                       Uniform f32_4* %25 = OpAccessChain %20 %22 %23 
                                f32_4 %26 = OpLoad %25 
                                f32_4 %27 = OpFMul %13 %26 
                                              OpStore %9 %27 
                       Uniform f32_4* %28 = OpAccessChain %20 %22 %22 
                                f32_4 %29 = OpLoad %28 
                                f32_4 %30 = OpLoad %11 
                                f32_4 %31 = OpVectorShuffle %30 %30 0 0 0 0 
                                f32_4 %32 = OpFMul %29 %31 
                                f32_4 %33 = OpLoad %9 
                                f32_4 %34 = OpFAdd %32 %33 
                                              OpStore %9 %34 
                       Uniform f32_4* %36 = OpAccessChain %20 %22 %35 
                                f32_4 %37 = OpLoad %36 
                                f32_4 %38 = OpLoad %11 
                                f32_4 %39 = OpVectorShuffle %38 %38 2 2 2 2 
                                f32_4 %40 = OpFMul %37 %39 
                                f32_4 %41 = OpLoad %9 
                                f32_4 %42 = OpFAdd %40 %41 
                                              OpStore %9 %42 
                                f32_4 %43 = OpLoad %9 
                       Uniform f32_4* %45 = OpAccessChain %20 %22 %44 
                                f32_4 %46 = OpLoad %45 
                                f32_4 %47 = OpFAdd %43 %46 
                                              OpStore %9 %47 
                                f32_4 %49 = OpLoad %9 
                                f32_4 %50 = OpVectorShuffle %49 %49 1 1 1 1 
                       Uniform f32_4* %51 = OpAccessChain %20 %23 %23 
                                f32_4 %52 = OpLoad %51 
                                f32_4 %53 = OpFMul %50 %52 
                                              OpStore %48 %53 
                       Uniform f32_4* %54 = OpAccessChain %20 %23 %22 
                                f32_4 %55 = OpLoad %54 
                                f32_4 %56 = OpLoad %9 
                                f32_4 %57 = OpVectorShuffle %56 %56 0 0 0 0 
                                f32_4 %58 = OpFMul %55 %57 
                                f32_4 %59 = OpLoad %48 
                                f32_4 %60 = OpFAdd %58 %59 
                                              OpStore %48 %60 
                       Uniform f32_4* %61 = OpAccessChain %20 %23 %35 
                                f32_4 %62 = OpLoad %61 
                                f32_4 %63 = OpLoad %9 
                                f32_4 %64 = OpVectorShuffle %63 %63 2 2 2 2 
                                f32_4 %65 = OpFMul %62 %64 
                                f32_4 %66 = OpLoad %48 
                                f32_4 %67 = OpFAdd %65 %66 
                                              OpStore %48 %67 
                       Uniform f32_4* %73 = OpAccessChain %20 %23 %44 
                                f32_4 %74 = OpLoad %73 
                                f32_4 %75 = OpLoad %9 
                                f32_4 %76 = OpVectorShuffle %75 %75 3 3 3 3 
                                f32_4 %77 = OpFMul %74 %76 
                                f32_4 %78 = OpLoad %48 
                                f32_4 %79 = OpFAdd %77 %78 
                        Output f32_4* %81 = OpAccessChain %72 %22 
                                              OpStore %81 %79 
                                f32_2 %87 = OpLoad %86 
                                              OpStore vs_TEXCOORD0 %87 
                          Output f32* %89 = OpAccessChain %72 %22 %68 
                                  f32 %90 = OpLoad %89 
                                  f32 %91 = OpFNegate %90 
                          Output f32* %92 = OpAccessChain %72 %22 %68 
                                              OpStore %92 %91 
                                              OpReturn
                                              OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 229
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %12 %216 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpDecorate vs_TEXCOORD0 Location 12 
                                                      OpMemberDecorate %14 0 Offset 14 
                                                      OpMemberDecorate %14 1 Offset 14 
                                                      OpMemberDecorate %14 2 Offset 14 
                                                      OpMemberDecorate %14 3 Offset 14 
                                                      OpMemberDecorate %14 4 Offset 14 
                                                      OpMemberDecorate %14 5 Offset 14 
                                                      OpDecorate %14 Block 
                                                      OpDecorate %16 DescriptorSet 16 
                                                      OpDecorate %16 Binding 16 
                                                      OpDecorate %33 DescriptorSet 33 
                                                      OpDecorate %33 Binding 33 
                                                      OpDecorate %37 DescriptorSet 37 
                                                      OpDecorate %37 Binding 37 
                                                      OpDecorate %71 DescriptorSet 71 
                                                      OpDecorate %71 Binding 71 
                                                      OpDecorate %73 DescriptorSet 73 
                                                      OpDecorate %73 Binding 73 
                                                      OpDecorate %106 DescriptorSet 106 
                                                      OpDecorate %106 Binding 106 
                                                      OpDecorate %108 DescriptorSet 108 
                                                      OpDecorate %108 Binding 108 
                                                      OpDecorate %114 DescriptorSet 114 
                                                      OpDecorate %114 Binding 114 
                                                      OpDecorate %116 DescriptorSet 116 
                                                      OpDecorate %116 Binding 116 
                                                      OpDecorate %216 Location 216 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 2 
                                              %11 = OpTypePointer Input %10 
                        Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                              %14 = OpTypeStruct %7 %7 %7 %7 %7 %7 
                                              %15 = OpTypePointer Uniform %14 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4;}* %16 = OpVariable Uniform 
                                              %17 = OpTypeInt 32 1 
                                          i32 %18 = OpConstant 4 
                                              %19 = OpTypePointer Uniform %7 
                               Private f32_4* %30 = OpVariable Private 
                                              %31 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %32 = OpTypePointer UniformConstant %31 
         UniformConstant read_only Texture2D* %33 = OpVariable UniformConstant 
                                              %35 = OpTypeSampler 
                                              %36 = OpTypePointer UniformConstant %35 
                     UniformConstant sampler* %37 = OpVariable UniformConstant 
                                              %39 = OpTypeSampledImage %31 
                                              %44 = OpTypeVector %6 3 
                                          i32 %47 = OpConstant 5 
                                          i32 %63 = OpConstant 1 
                               Private f32_4* %70 = OpVariable Private 
         UniformConstant read_only Texture2D* %71 = OpVariable UniformConstant 
                     UniformConstant sampler* %73 = OpVariable UniformConstant 
                                          i32 %94 = OpConstant 0 
        UniformConstant read_only Texture2D* %106 = OpVariable UniformConstant 
                    UniformConstant sampler* %108 = OpVariable UniformConstant 
        UniformConstant read_only Texture2D* %114 = OpVariable UniformConstant 
                    UniformConstant sampler* %116 = OpVariable UniformConstant 
                                         i32 %137 = OpConstant 2 
                                         i32 %164 = OpConstant 3 
                                             %184 = OpTypePointer Private %6 
                                Private f32* %185 = OpVariable Private 
                                             %186 = OpTypeInt 32 0 
                                         u32 %187 = OpConstant 1 
                                         u32 %190 = OpConstant 0 
                                         u32 %194 = OpConstant 2 
                                         f32 %197 = OpConstant 3.674022E-40 
                                         f32 %205 = OpConstant 3.674022E-40 
                                         f32 %208 = OpConstant 3.674022E-40 
                                         f32 %213 = OpConstant 3.674022E-40 
                                             %215 = OpTypePointer Output %7 
                               Output f32_4* %216 = OpVariable Output 
                                         u32 %225 = OpConstant 3 
                                             %226 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_2 %13 = OpLoad vs_TEXCOORD0 
                               Uniform f32_4* %20 = OpAccessChain %16 %18 
                                        f32_4 %21 = OpLoad %20 
                                        f32_2 %22 = OpVectorShuffle %21 %21 0 1 
                                        f32_2 %23 = OpFMul %13 %22 
                               Uniform f32_4* %24 = OpAccessChain %16 %18 
                                        f32_4 %25 = OpLoad %24 
                                        f32_2 %26 = OpVectorShuffle %25 %25 2 3 
                                        f32_2 %27 = OpFAdd %23 %26 
                                        f32_4 %28 = OpLoad %9 
                                        f32_4 %29 = OpVectorShuffle %28 %27 4 5 2 3 
                                                      OpStore %9 %29 
                          read_only Texture2D %34 = OpLoad %33 
                                      sampler %38 = OpLoad %37 
                   read_only Texture2DSampled %40 = OpSampledImage %34 %38 
                                        f32_4 %41 = OpLoad %9 
                                        f32_2 %42 = OpVectorShuffle %41 %41 0 1 
                                        f32_4 %43 = OpImageSampleImplicitLod %40 %42 
                                                      OpStore %30 %43 
                                        f32_4 %45 = OpLoad %30 
                                        f32_3 %46 = OpVectorShuffle %45 %45 0 1 2 
                               Uniform f32_4* %48 = OpAccessChain %16 %47 
                                        f32_4 %49 = OpLoad %48 
                                        f32_3 %50 = OpVectorShuffle %49 %49 0 0 0 
                                        f32_3 %51 = OpFMul %46 %50 
                                        f32_4 %52 = OpLoad %30 
                                        f32_4 %53 = OpVectorShuffle %52 %51 4 5 6 3 
                                                      OpStore %30 %53 
                                        f32_4 %54 = OpLoad %30 
                                        f32_3 %55 = OpVectorShuffle %54 %54 3 3 3 
                                        f32_4 %56 = OpLoad %30 
                                        f32_3 %57 = OpVectorShuffle %56 %56 0 1 2 
                                        f32_3 %58 = OpFMul %55 %57 
                                        f32_4 %59 = OpLoad %30 
                                        f32_4 %60 = OpVectorShuffle %59 %58 4 5 6 3 
                                                      OpStore %30 %60 
                                        f32_4 %61 = OpLoad %30 
                                        f32_3 %62 = OpVectorShuffle %61 %61 0 1 2 
                               Uniform f32_4* %64 = OpAccessChain %16 %63 
                                        f32_4 %65 = OpLoad %64 
                                        f32_3 %66 = OpVectorShuffle %65 %65 0 1 2 
                                        f32_3 %67 = OpFMul %62 %66 
                                        f32_4 %68 = OpLoad %30 
                                        f32_4 %69 = OpVectorShuffle %68 %67 4 5 6 3 
                                                      OpStore %30 %69 
                          read_only Texture2D %72 = OpLoad %71 
                                      sampler %74 = OpLoad %73 
                   read_only Texture2DSampled %75 = OpSampledImage %72 %74 
                                        f32_4 %76 = OpLoad %9 
                                        f32_2 %77 = OpVectorShuffle %76 %76 0 1 
                                        f32_4 %78 = OpImageSampleImplicitLod %75 %77 
                                                      OpStore %70 %78 
                                        f32_4 %79 = OpLoad %70 
                                        f32_3 %80 = OpVectorShuffle %79 %79 0 1 2 
                               Uniform f32_4* %81 = OpAccessChain %16 %47 
                                        f32_4 %82 = OpLoad %81 
                                        f32_3 %83 = OpVectorShuffle %82 %82 0 0 0 
                                        f32_3 %84 = OpFMul %80 %83 
                                        f32_4 %85 = OpLoad %70 
                                        f32_4 %86 = OpVectorShuffle %85 %84 4 5 6 3 
                                                      OpStore %70 %86 
                                        f32_4 %87 = OpLoad %70 
                                        f32_3 %88 = OpVectorShuffle %87 %87 3 3 3 
                                        f32_4 %89 = OpLoad %70 
                                        f32_3 %90 = OpVectorShuffle %89 %89 0 1 2 
                                        f32_3 %91 = OpFMul %88 %90 
                                        f32_4 %92 = OpLoad %70 
                                        f32_4 %93 = OpVectorShuffle %92 %91 4 5 6 3 
                                                      OpStore %70 %93 
                               Uniform f32_4* %95 = OpAccessChain %16 %94 
                                        f32_4 %96 = OpLoad %95 
                                        f32_3 %97 = OpVectorShuffle %96 %96 0 1 2 
                                        f32_4 %98 = OpLoad %70 
                                        f32_3 %99 = OpVectorShuffle %98 %98 0 1 2 
                                       f32_3 %100 = OpFMul %97 %99 
                                       f32_4 %101 = OpLoad %30 
                                       f32_3 %102 = OpVectorShuffle %101 %101 0 1 2 
                                       f32_3 %103 = OpFAdd %100 %102 
                                       f32_4 %104 = OpLoad %30 
                                       f32_4 %105 = OpVectorShuffle %104 %103 4 5 6 3 
                                                      OpStore %30 %105 
                         read_only Texture2D %107 = OpLoad %106 
                                     sampler %109 = OpLoad %108 
                  read_only Texture2DSampled %110 = OpSampledImage %107 %109 
                                       f32_4 %111 = OpLoad %9 
                                       f32_2 %112 = OpVectorShuffle %111 %111 0 1 
                                       f32_4 %113 = OpImageSampleImplicitLod %110 %112 
                                                      OpStore %70 %113 
                         read_only Texture2D %115 = OpLoad %114 
                                     sampler %117 = OpLoad %116 
                  read_only Texture2DSampled %118 = OpSampledImage %115 %117 
                                       f32_4 %119 = OpLoad %9 
                                       f32_2 %120 = OpVectorShuffle %119 %119 0 1 
                                       f32_4 %121 = OpImageSampleImplicitLod %118 %120 
                                                      OpStore %9 %121 
                                       f32_4 %122 = OpLoad %70 
                                       f32_3 %123 = OpVectorShuffle %122 %122 0 1 2 
                              Uniform f32_4* %124 = OpAccessChain %16 %47 
                                       f32_4 %125 = OpLoad %124 
                                       f32_3 %126 = OpVectorShuffle %125 %125 0 0 0 
                                       f32_3 %127 = OpFMul %123 %126 
                                       f32_4 %128 = OpLoad %70 
                                       f32_4 %129 = OpVectorShuffle %128 %127 4 5 6 3 
                                                      OpStore %70 %129 
                                       f32_4 %130 = OpLoad %70 
                                       f32_3 %131 = OpVectorShuffle %130 %130 3 3 3 
                                       f32_4 %132 = OpLoad %70 
                                       f32_3 %133 = OpVectorShuffle %132 %132 0 1 2 
                                       f32_3 %134 = OpFMul %131 %133 
                                       f32_4 %135 = OpLoad %70 
                                       f32_4 %136 = OpVectorShuffle %135 %134 4 5 6 3 
                                                      OpStore %70 %136 
                              Uniform f32_4* %138 = OpAccessChain %16 %137 
                                       f32_4 %139 = OpLoad %138 
                                       f32_3 %140 = OpVectorShuffle %139 %139 0 1 2 
                                       f32_4 %141 = OpLoad %70 
                                       f32_3 %142 = OpVectorShuffle %141 %141 0 1 2 
                                       f32_3 %143 = OpFMul %140 %142 
                                       f32_4 %144 = OpLoad %30 
                                       f32_3 %145 = OpVectorShuffle %144 %144 0 1 2 
                                       f32_3 %146 = OpFAdd %143 %145 
                                       f32_4 %147 = OpLoad %30 
                                       f32_4 %148 = OpVectorShuffle %147 %146 4 5 6 3 
                                                      OpStore %30 %148 
                                       f32_4 %149 = OpLoad %9 
                                       f32_3 %150 = OpVectorShuffle %149 %149 0 1 2 
                              Uniform f32_4* %151 = OpAccessChain %16 %47 
                                       f32_4 %152 = OpLoad %151 
                                       f32_3 %153 = OpVectorShuffle %152 %152 0 0 0 
                                       f32_3 %154 = OpFMul %150 %153 
                                       f32_4 %155 = OpLoad %9 
                                       f32_4 %156 = OpVectorShuffle %155 %154 4 5 6 3 
                                                      OpStore %9 %156 
                                       f32_4 %157 = OpLoad %9 
                                       f32_3 %158 = OpVectorShuffle %157 %157 3 3 3 
                                       f32_4 %159 = OpLoad %9 
                                       f32_3 %160 = OpVectorShuffle %159 %159 0 1 2 
                                       f32_3 %161 = OpFMul %158 %160 
                                       f32_4 %162 = OpLoad %9 
                                       f32_4 %163 = OpVectorShuffle %162 %161 4 5 6 3 
                                                      OpStore %9 %163 
                              Uniform f32_4* %165 = OpAccessChain %16 %164 
                                       f32_4 %166 = OpLoad %165 
                                       f32_3 %167 = OpVectorShuffle %166 %166 0 1 2 
                                       f32_4 %168 = OpLoad %9 
                                       f32_3 %169 = OpVectorShuffle %168 %168 0 1 2 
                                       f32_3 %170 = OpFMul %167 %169 
                                       f32_4 %171 = OpLoad %30 
                                       f32_3 %172 = OpVectorShuffle %171 %171 0 1 2 
                                       f32_3 %173 = OpFAdd %170 %172 
                                       f32_4 %174 = OpLoad %9 
                                       f32_4 %175 = OpVectorShuffle %174 %173 4 5 6 3 
                                                      OpStore %9 %175 
                                       f32_4 %176 = OpLoad %9 
                                       f32_3 %177 = OpVectorShuffle %176 %176 0 1 2 
                              Uniform f32_4* %178 = OpAccessChain %16 %47 
                                       f32_4 %179 = OpLoad %178 
                                       f32_3 %180 = OpVectorShuffle %179 %179 1 1 1 
                                       f32_3 %181 = OpFMul %177 %180 
                                       f32_4 %182 = OpLoad %9 
                                       f32_4 %183 = OpVectorShuffle %182 %181 4 5 6 3 
                                                      OpStore %9 %183 
                                Private f32* %188 = OpAccessChain %9 %187 
                                         f32 %189 = OpLoad %188 
                                Private f32* %191 = OpAccessChain %9 %190 
                                         f32 %192 = OpLoad %191 
                                         f32 %193 = OpExtInst %1 40 %189 %192 
                                                      OpStore %185 %193 
                                Private f32* %195 = OpAccessChain %9 %194 
                                         f32 %196 = OpLoad %195 
                                         f32 %198 = OpExtInst %1 40 %196 %197 
                                Private f32* %199 = OpAccessChain %30 %190 
                                                      OpStore %199 %198 
                                         f32 %200 = OpLoad %185 
                                Private f32* %201 = OpAccessChain %30 %190 
                                         f32 %202 = OpLoad %201 
                                         f32 %203 = OpExtInst %1 40 %200 %202 
                                                      OpStore %185 %203 
                                         f32 %204 = OpLoad %185 
                                         f32 %206 = OpExtInst %1 37 %204 %205 
                                                      OpStore %185 %206 
                                         f32 %207 = OpLoad %185 
                                         f32 %209 = OpFMul %207 %208 
                                                      OpStore %185 %209 
                                         f32 %210 = OpLoad %185 
                                         f32 %211 = OpExtInst %1 9 %210 
                                                      OpStore %185 %211 
                                         f32 %212 = OpLoad %185 
                                         f32 %214 = OpFMul %212 %213 
                                                      OpStore %185 %214 
                                       f32_4 %217 = OpLoad %9 
                                       f32_3 %218 = OpVectorShuffle %217 %217 0 1 2 
                                         f32 %219 = OpLoad %185 
                                       f32_3 %220 = OpCompositeConstruct %219 %219 %219 
                                       f32_3 %221 = OpFDiv %218 %220 
                                       f32_4 %222 = OpLoad %216 
                                       f32_4 %223 = OpVectorShuffle %222 %221 4 5 6 3 
                                                      OpStore %216 %223 
                                         f32 %224 = OpLoad %185 
                                 Output f32* %227 = OpAccessChain %216 %225 
                                                      OpStore %227 %224 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "AB_HIGH_PRECISION" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "AB_HIGH_PRECISION" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in  vec4 in_POSITION0;
in  vec2 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _AnamorphicGlareWeights0;
uniform 	vec4 _AnamorphicGlareWeights1;
uniform 	vec4 _AnamorphicGlareWeights2;
uniform 	vec4 _AnamorphicGlareWeights3;
uniform 	vec4 _MainTex_ST;
UNITY_LOCATION(0) uniform  sampler2D _AnamorphicRTS0;
UNITY_LOCATION(1) uniform  sampler2D _AnamorphicRTS1;
UNITY_LOCATION(2) uniform  sampler2D _AnamorphicRTS2;
UNITY_LOCATION(3) uniform  sampler2D _AnamorphicRTS3;
in  vec2 vs_TEXCOORD0;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1 = texture(_AnamorphicRTS1, u_xlat0.xy);
    u_xlat1.xyz = u_xlat1.xyz * _AnamorphicGlareWeights1.xyz;
    u_xlat2 = texture(_AnamorphicRTS0, u_xlat0.xy);
    u_xlat1.xyz = _AnamorphicGlareWeights0.xyz * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat2 = texture(_AnamorphicRTS2, u_xlat0.xy);
    u_xlat0 = texture(_AnamorphicRTS3, u_xlat0.xy);
    u_xlat1.xyz = _AnamorphicGlareWeights2.xyz * u_xlat2.xyz + u_xlat1.xyz;
    SV_Target0.xyz = _AnamorphicGlareWeights3.xyz * u_xlat0.xyz + u_xlat1.xyz;
    SV_Target0.w = 0.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "AB_HIGH_PRECISION" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 94
; Schema: 0
                                              OpCapability Shader 
                                       %1 = OpExtInstImport "GLSL.std.450" 
                                              OpMemoryModel Logical GLSL450 
                                              OpEntryPoint Vertex %4 "main" %11 %72 %84 %86 
                                              OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                              OpDecorate %11 Location 11 
                                              OpDecorate %16 ArrayStride 16 
                                              OpDecorate %17 ArrayStride 17 
                                              OpMemberDecorate %18 0 Offset 18 
                                              OpMemberDecorate %18 1 Offset 18 
                                              OpDecorate %18 Block 
                                              OpDecorate %20 DescriptorSet 20 
                                              OpDecorate %20 Binding 20 
                                              OpMemberDecorate %70 0 BuiltIn 70 
                                              OpMemberDecorate %70 1 BuiltIn 70 
                                              OpMemberDecorate %70 2 BuiltIn 70 
                                              OpDecorate %70 Block 
                                              OpDecorate vs_TEXCOORD0 Location 84 
                                              OpDecorate %86 Location 86 
                                       %2 = OpTypeVoid 
                                       %3 = OpTypeFunction %2 
                                       %6 = OpTypeFloat 32 
                                       %7 = OpTypeVector %6 4 
                                       %8 = OpTypePointer Private %7 
                        Private f32_4* %9 = OpVariable Private 
                                      %10 = OpTypePointer Input %7 
                         Input f32_4* %11 = OpVariable Input 
                                      %14 = OpTypeInt 32 0 
                                  u32 %15 = OpConstant 4 
                                      %16 = OpTypeArray %7 %15 
                                      %17 = OpTypeArray %7 %15 
                                      %18 = OpTypeStruct %16 %17 
                                      %19 = OpTypePointer Uniform %18 
Uniform struct {f32_4[4]; f32_4[4];}* %20 = OpVariable Uniform 
                                      %21 = OpTypeInt 32 1 
                                  i32 %22 = OpConstant 0 
                                  i32 %23 = OpConstant 1 
                                      %24 = OpTypePointer Uniform %7 
                                  i32 %35 = OpConstant 2 
                                  i32 %44 = OpConstant 3 
                       Private f32_4* %48 = OpVariable Private 
                                  u32 %68 = OpConstant 1 
                                      %69 = OpTypeArray %6 %68 
                                      %70 = OpTypeStruct %7 %6 %69 
                                      %71 = OpTypePointer Output %70 
 Output struct {f32_4; f32; f32[1];}* %72 = OpVariable Output 
                                      %80 = OpTypePointer Output %7 
                                      %82 = OpTypeVector %6 2 
                                      %83 = OpTypePointer Output %82 
               Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                      %85 = OpTypePointer Input %82 
                         Input f32_2* %86 = OpVariable Input 
                                      %88 = OpTypePointer Output %6 
                                  void %4 = OpFunction None %3 
                                       %5 = OpLabel 
                                f32_4 %12 = OpLoad %11 
                                f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                       Uniform f32_4* %25 = OpAccessChain %20 %22 %23 
                                f32_4 %26 = OpLoad %25 
                                f32_4 %27 = OpFMul %13 %26 
                                              OpStore %9 %27 
                       Uniform f32_4* %28 = OpAccessChain %20 %22 %22 
                                f32_4 %29 = OpLoad %28 
                                f32_4 %30 = OpLoad %11 
                                f32_4 %31 = OpVectorShuffle %30 %30 0 0 0 0 
                                f32_4 %32 = OpFMul %29 %31 
                                f32_4 %33 = OpLoad %9 
                                f32_4 %34 = OpFAdd %32 %33 
                                              OpStore %9 %34 
                       Uniform f32_4* %36 = OpAccessChain %20 %22 %35 
                                f32_4 %37 = OpLoad %36 
                                f32_4 %38 = OpLoad %11 
                                f32_4 %39 = OpVectorShuffle %38 %38 2 2 2 2 
                                f32_4 %40 = OpFMul %37 %39 
                                f32_4 %41 = OpLoad %9 
                                f32_4 %42 = OpFAdd %40 %41 
                                              OpStore %9 %42 
                                f32_4 %43 = OpLoad %9 
                       Uniform f32_4* %45 = OpAccessChain %20 %22 %44 
                                f32_4 %46 = OpLoad %45 
                                f32_4 %47 = OpFAdd %43 %46 
                                              OpStore %9 %47 
                                f32_4 %49 = OpLoad %9 
                                f32_4 %50 = OpVectorShuffle %49 %49 1 1 1 1 
                       Uniform f32_4* %51 = OpAccessChain %20 %23 %23 
                                f32_4 %52 = OpLoad %51 
                                f32_4 %53 = OpFMul %50 %52 
                                              OpStore %48 %53 
                       Uniform f32_4* %54 = OpAccessChain %20 %23 %22 
                                f32_4 %55 = OpLoad %54 
                                f32_4 %56 = OpLoad %9 
                                f32_4 %57 = OpVectorShuffle %56 %56 0 0 0 0 
                                f32_4 %58 = OpFMul %55 %57 
                                f32_4 %59 = OpLoad %48 
                                f32_4 %60 = OpFAdd %58 %59 
                                              OpStore %48 %60 
                       Uniform f32_4* %61 = OpAccessChain %20 %23 %35 
                                f32_4 %62 = OpLoad %61 
                                f32_4 %63 = OpLoad %9 
                                f32_4 %64 = OpVectorShuffle %63 %63 2 2 2 2 
                                f32_4 %65 = OpFMul %62 %64 
                                f32_4 %66 = OpLoad %48 
                                f32_4 %67 = OpFAdd %65 %66 
                                              OpStore %48 %67 
                       Uniform f32_4* %73 = OpAccessChain %20 %23 %44 
                                f32_4 %74 = OpLoad %73 
                                f32_4 %75 = OpLoad %9 
                                f32_4 %76 = OpVectorShuffle %75 %75 3 3 3 3 
                                f32_4 %77 = OpFMul %74 %76 
                                f32_4 %78 = OpLoad %48 
                                f32_4 %79 = OpFAdd %77 %78 
                        Output f32_4* %81 = OpAccessChain %72 %22 
                                              OpStore %81 %79 
                                f32_2 %87 = OpLoad %86 
                                              OpStore vs_TEXCOORD0 %87 
                          Output f32* %89 = OpAccessChain %72 %22 %68 
                                  f32 %90 = OpLoad %89 
                                  f32 %91 = OpFNegate %90 
                          Output f32* %92 = OpAccessChain %72 %22 %68 
                                              OpStore %92 %91 
                                              OpReturn
                                              OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 114
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %12 %97 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpDecorate vs_TEXCOORD0 Location 12 
                                                      OpMemberDecorate %15 0 Offset 15 
                                                      OpMemberDecorate %15 1 Offset 15 
                                                      OpMemberDecorate %15 2 Offset 15 
                                                      OpMemberDecorate %15 3 Offset 15 
                                                      OpMemberDecorate %15 4 Offset 15 
                                                      OpDecorate %15 Block 
                                                      OpDecorate %17 DescriptorSet 17 
                                                      OpDecorate %17 Binding 17 
                                                      OpDecorate %34 DescriptorSet 34 
                                                      OpDecorate %34 Binding 34 
                                                      OpDecorate %38 DescriptorSet 38 
                                                      OpDecorate %38 Binding 38 
                                                      OpDecorate %53 DescriptorSet 53 
                                                      OpDecorate %53 Binding 53 
                                                      OpDecorate %55 DescriptorSet 55 
                                                      OpDecorate %55 Binding 55 
                                                      OpDecorate %70 DescriptorSet 70 
                                                      OpDecorate %70 Binding 70 
                                                      OpDecorate %72 DescriptorSet 72 
                                                      OpDecorate %72 Binding 72 
                                                      OpDecorate %79 DescriptorSet 79 
                                                      OpDecorate %79 Binding 79 
                                                      OpDecorate %81 DescriptorSet 81 
                                                      OpDecorate %81 Binding 81 
                                                      OpDecorate %97 Location 97 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 3 
                                               %8 = OpTypePointer Private %7 
                                Private f32_3* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 2 
                                              %11 = OpTypePointer Input %10 
                        Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                              %14 = OpTypeVector %6 4 
                                              %15 = OpTypeStruct %14 %14 %14 %14 %14 
                                              %16 = OpTypePointer Uniform %15 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4;}* %17 = OpVariable Uniform 
                                              %18 = OpTypeInt 32 1 
                                          i32 %19 = OpConstant 4 
                                              %20 = OpTypePointer Uniform %14 
                               Private f32_3* %31 = OpVariable Private 
                                              %32 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %33 = OpTypePointer UniformConstant %32 
         UniformConstant read_only Texture2D* %34 = OpVariable UniformConstant 
                                              %36 = OpTypeSampler 
                                              %37 = OpTypePointer UniformConstant %36 
                     UniformConstant sampler* %38 = OpVariable UniformConstant 
                                              %40 = OpTypeSampledImage %32 
                                          i32 %47 = OpConstant 1 
                               Private f32_3* %52 = OpVariable Private 
         UniformConstant read_only Texture2D* %53 = OpVariable UniformConstant 
                     UniformConstant sampler* %55 = OpVariable UniformConstant 
                                          i32 %62 = OpConstant 0 
         UniformConstant read_only Texture2D* %70 = OpVariable UniformConstant 
                     UniformConstant sampler* %72 = OpVariable UniformConstant 
         UniformConstant read_only Texture2D* %79 = OpVariable UniformConstant 
                     UniformConstant sampler* %81 = OpVariable UniformConstant 
                                          i32 %88 = OpConstant 2 
                                              %96 = OpTypePointer Output %14 
                                Output f32_4* %97 = OpVariable Output 
                                          i32 %98 = OpConstant 3 
                                         f32 %108 = OpConstant 3.674022E-40 
                                             %109 = OpTypeInt 32 0 
                                         u32 %110 = OpConstant 3 
                                             %111 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_2 %13 = OpLoad vs_TEXCOORD0 
                               Uniform f32_4* %21 = OpAccessChain %17 %19 
                                        f32_4 %22 = OpLoad %21 
                                        f32_2 %23 = OpVectorShuffle %22 %22 0 1 
                                        f32_2 %24 = OpFMul %13 %23 
                               Uniform f32_4* %25 = OpAccessChain %17 %19 
                                        f32_4 %26 = OpLoad %25 
                                        f32_2 %27 = OpVectorShuffle %26 %26 2 3 
                                        f32_2 %28 = OpFAdd %24 %27 
                                        f32_3 %29 = OpLoad %9 
                                        f32_3 %30 = OpVectorShuffle %29 %28 3 4 2 
                                                      OpStore %9 %30 
                          read_only Texture2D %35 = OpLoad %34 
                                      sampler %39 = OpLoad %38 
                   read_only Texture2DSampled %41 = OpSampledImage %35 %39 
                                        f32_3 %42 = OpLoad %9 
                                        f32_2 %43 = OpVectorShuffle %42 %42 0 1 
                                        f32_4 %44 = OpImageSampleImplicitLod %41 %43 
                                        f32_3 %45 = OpVectorShuffle %44 %44 0 1 2 
                                                      OpStore %31 %45 
                                        f32_3 %46 = OpLoad %31 
                               Uniform f32_4* %48 = OpAccessChain %17 %47 
                                        f32_4 %49 = OpLoad %48 
                                        f32_3 %50 = OpVectorShuffle %49 %49 0 1 2 
                                        f32_3 %51 = OpFMul %46 %50 
                                                      OpStore %31 %51 
                          read_only Texture2D %54 = OpLoad %53 
                                      sampler %56 = OpLoad %55 
                   read_only Texture2DSampled %57 = OpSampledImage %54 %56 
                                        f32_3 %58 = OpLoad %9 
                                        f32_2 %59 = OpVectorShuffle %58 %58 0 1 
                                        f32_4 %60 = OpImageSampleImplicitLod %57 %59 
                                        f32_3 %61 = OpVectorShuffle %60 %60 0 1 2 
                                                      OpStore %52 %61 
                               Uniform f32_4* %63 = OpAccessChain %17 %62 
                                        f32_4 %64 = OpLoad %63 
                                        f32_3 %65 = OpVectorShuffle %64 %64 0 1 2 
                                        f32_3 %66 = OpLoad %52 
                                        f32_3 %67 = OpFMul %65 %66 
                                        f32_3 %68 = OpLoad %31 
                                        f32_3 %69 = OpFAdd %67 %68 
                                                      OpStore %31 %69 
                          read_only Texture2D %71 = OpLoad %70 
                                      sampler %73 = OpLoad %72 
                   read_only Texture2DSampled %74 = OpSampledImage %71 %73 
                                        f32_3 %75 = OpLoad %9 
                                        f32_2 %76 = OpVectorShuffle %75 %75 0 1 
                                        f32_4 %77 = OpImageSampleImplicitLod %74 %76 
                                        f32_3 %78 = OpVectorShuffle %77 %77 0 1 2 
                                                      OpStore %52 %78 
                          read_only Texture2D %80 = OpLoad %79 
                                      sampler %82 = OpLoad %81 
                   read_only Texture2DSampled %83 = OpSampledImage %80 %82 
                                        f32_3 %84 = OpLoad %9 
                                        f32_2 %85 = OpVectorShuffle %84 %84 0 1 
                                        f32_4 %86 = OpImageSampleImplicitLod %83 %85 
                                        f32_3 %87 = OpVectorShuffle %86 %86 0 1 2 
                                                      OpStore %9 %87 
                               Uniform f32_4* %89 = OpAccessChain %17 %88 
                                        f32_4 %90 = OpLoad %89 
                                        f32_3 %91 = OpVectorShuffle %90 %90 0 1 2 
                                        f32_3 %92 = OpLoad %52 
                                        f32_3 %93 = OpFMul %91 %92 
                                        f32_3 %94 = OpLoad %31 
                                        f32_3 %95 = OpFAdd %93 %94 
                                                      OpStore %31 %95 
                               Uniform f32_4* %99 = OpAccessChain %17 %98 
                                       f32_4 %100 = OpLoad %99 
                                       f32_3 %101 = OpVectorShuffle %100 %100 0 1 2 
                                       f32_3 %102 = OpLoad %9 
                                       f32_3 %103 = OpFMul %101 %102 
                                       f32_3 %104 = OpLoad %31 
                                       f32_3 %105 = OpFAdd %103 %104 
                                       f32_4 %106 = OpLoad %97 
                                       f32_4 %107 = OpVectorShuffle %106 %105 4 5 6 3 
                                                      OpStore %97 %107 
                                 Output f32* %112 = OpAccessChain %97 %110 
                                                      OpStore %112 %108 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
}
Program "fp" {
SubProgram "d3d11 " {
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
""
}
SubProgram "vulkan " {
""
}
SubProgram "d3d11 " {
Keywords { "AB_HIGH_PRECISION" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "AB_HIGH_PRECISION" }
""
}
SubProgram "vulkan " {
Keywords { "AB_HIGH_PRECISION" }
""
}
}
}
 Pass {
  Name "frag_weightedAddPS5"
  ZTest Always
  ZWrite Off
  Cull Off
  GpuProgramID 1543796
Program "vp" {
SubProgram "d3d11 " {
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in  vec4 in_POSITION0;
in  vec2 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _AnamorphicGlareWeights0;
uniform 	vec4 _AnamorphicGlareWeights1;
uniform 	vec4 _AnamorphicGlareWeights2;
uniform 	vec4 _AnamorphicGlareWeights3;
uniform 	vec4 _AnamorphicGlareWeights4;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BloomRange;
UNITY_LOCATION(0) uniform  sampler2D _AnamorphicRTS0;
UNITY_LOCATION(1) uniform  sampler2D _AnamorphicRTS1;
UNITY_LOCATION(2) uniform  sampler2D _AnamorphicRTS2;
UNITY_LOCATION(3) uniform  sampler2D _AnamorphicRTS3;
UNITY_LOCATION(4) uniform  sampler2D _AnamorphicRTS4;
in  vec2 vs_TEXCOORD0;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat9;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1 = texture(_AnamorphicRTS1, u_xlat0.xy);
    u_xlat1.xyz = u_xlat1.xyz * _BloomRange.xxx;
    u_xlat1.xyz = u_xlat1.www * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _AnamorphicGlareWeights1.xyz;
    u_xlat2 = texture(_AnamorphicRTS0, u_xlat0.xy);
    u_xlat2.xyz = u_xlat2.xyz * _BloomRange.xxx;
    u_xlat2.xyz = u_xlat2.www * u_xlat2.xyz;
    u_xlat1.xyz = _AnamorphicGlareWeights0.xyz * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat2 = texture(_AnamorphicRTS2, u_xlat0.xy);
    u_xlat2.xyz = u_xlat2.xyz * _BloomRange.xxx;
    u_xlat2.xyz = u_xlat2.www * u_xlat2.xyz;
    u_xlat1.xyz = _AnamorphicGlareWeights2.xyz * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat2 = texture(_AnamorphicRTS3, u_xlat0.xy);
    u_xlat0 = texture(_AnamorphicRTS4, u_xlat0.xy);
    u_xlat2.xyz = u_xlat2.xyz * _BloomRange.xxx;
    u_xlat2.xyz = u_xlat2.www * u_xlat2.xyz;
    u_xlat1.xyz = _AnamorphicGlareWeights3.xyz * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.xyz * _BloomRange.xxx;
    u_xlat0.xyz = u_xlat0.www * u_xlat0.xyz;
    u_xlat0.xyz = _AnamorphicGlareWeights4.xyz * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.xyz * _BloomRange.yyy;
    u_xlat9 = max(u_xlat0.y, u_xlat0.x);
    u_xlat1.x = max(u_xlat0.z, 9.99999997e-07);
    u_xlat9 = max(u_xlat9, u_xlat1.x);
    u_xlat9 = min(u_xlat9, 1.0);
    u_xlat9 = u_xlat9 * 255.0;
    u_xlat9 = ceil(u_xlat9);
    u_xlat9 = u_xlat9 * 0.00392156886;
    SV_Target0.xyz = u_xlat0.xyz / vec3(u_xlat9);
    SV_Target0.w = u_xlat9;
    return;
}

#endif
"
}
SubProgram "vulkan " {
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 94
; Schema: 0
                                              OpCapability Shader 
                                       %1 = OpExtInstImport "GLSL.std.450" 
                                              OpMemoryModel Logical GLSL450 
                                              OpEntryPoint Vertex %4 "main" %11 %72 %84 %86 
                                              OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                              OpDecorate %11 Location 11 
                                              OpDecorate %16 ArrayStride 16 
                                              OpDecorate %17 ArrayStride 17 
                                              OpMemberDecorate %18 0 Offset 18 
                                              OpMemberDecorate %18 1 Offset 18 
                                              OpDecorate %18 Block 
                                              OpDecorate %20 DescriptorSet 20 
                                              OpDecorate %20 Binding 20 
                                              OpMemberDecorate %70 0 BuiltIn 70 
                                              OpMemberDecorate %70 1 BuiltIn 70 
                                              OpMemberDecorate %70 2 BuiltIn 70 
                                              OpDecorate %70 Block 
                                              OpDecorate vs_TEXCOORD0 Location 84 
                                              OpDecorate %86 Location 86 
                                       %2 = OpTypeVoid 
                                       %3 = OpTypeFunction %2 
                                       %6 = OpTypeFloat 32 
                                       %7 = OpTypeVector %6 4 
                                       %8 = OpTypePointer Private %7 
                        Private f32_4* %9 = OpVariable Private 
                                      %10 = OpTypePointer Input %7 
                         Input f32_4* %11 = OpVariable Input 
                                      %14 = OpTypeInt 32 0 
                                  u32 %15 = OpConstant 4 
                                      %16 = OpTypeArray %7 %15 
                                      %17 = OpTypeArray %7 %15 
                                      %18 = OpTypeStruct %16 %17 
                                      %19 = OpTypePointer Uniform %18 
Uniform struct {f32_4[4]; f32_4[4];}* %20 = OpVariable Uniform 
                                      %21 = OpTypeInt 32 1 
                                  i32 %22 = OpConstant 0 
                                  i32 %23 = OpConstant 1 
                                      %24 = OpTypePointer Uniform %7 
                                  i32 %35 = OpConstant 2 
                                  i32 %44 = OpConstant 3 
                       Private f32_4* %48 = OpVariable Private 
                                  u32 %68 = OpConstant 1 
                                      %69 = OpTypeArray %6 %68 
                                      %70 = OpTypeStruct %7 %6 %69 
                                      %71 = OpTypePointer Output %70 
 Output struct {f32_4; f32; f32[1];}* %72 = OpVariable Output 
                                      %80 = OpTypePointer Output %7 
                                      %82 = OpTypeVector %6 2 
                                      %83 = OpTypePointer Output %82 
               Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                      %85 = OpTypePointer Input %82 
                         Input f32_2* %86 = OpVariable Input 
                                      %88 = OpTypePointer Output %6 
                                  void %4 = OpFunction None %3 
                                       %5 = OpLabel 
                                f32_4 %12 = OpLoad %11 
                                f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                       Uniform f32_4* %25 = OpAccessChain %20 %22 %23 
                                f32_4 %26 = OpLoad %25 
                                f32_4 %27 = OpFMul %13 %26 
                                              OpStore %9 %27 
                       Uniform f32_4* %28 = OpAccessChain %20 %22 %22 
                                f32_4 %29 = OpLoad %28 
                                f32_4 %30 = OpLoad %11 
                                f32_4 %31 = OpVectorShuffle %30 %30 0 0 0 0 
                                f32_4 %32 = OpFMul %29 %31 
                                f32_4 %33 = OpLoad %9 
                                f32_4 %34 = OpFAdd %32 %33 
                                              OpStore %9 %34 
                       Uniform f32_4* %36 = OpAccessChain %20 %22 %35 
                                f32_4 %37 = OpLoad %36 
                                f32_4 %38 = OpLoad %11 
                                f32_4 %39 = OpVectorShuffle %38 %38 2 2 2 2 
                                f32_4 %40 = OpFMul %37 %39 
                                f32_4 %41 = OpLoad %9 
                                f32_4 %42 = OpFAdd %40 %41 
                                              OpStore %9 %42 
                                f32_4 %43 = OpLoad %9 
                       Uniform f32_4* %45 = OpAccessChain %20 %22 %44 
                                f32_4 %46 = OpLoad %45 
                                f32_4 %47 = OpFAdd %43 %46 
                                              OpStore %9 %47 
                                f32_4 %49 = OpLoad %9 
                                f32_4 %50 = OpVectorShuffle %49 %49 1 1 1 1 
                       Uniform f32_4* %51 = OpAccessChain %20 %23 %23 
                                f32_4 %52 = OpLoad %51 
                                f32_4 %53 = OpFMul %50 %52 
                                              OpStore %48 %53 
                       Uniform f32_4* %54 = OpAccessChain %20 %23 %22 
                                f32_4 %55 = OpLoad %54 
                                f32_4 %56 = OpLoad %9 
                                f32_4 %57 = OpVectorShuffle %56 %56 0 0 0 0 
                                f32_4 %58 = OpFMul %55 %57 
                                f32_4 %59 = OpLoad %48 
                                f32_4 %60 = OpFAdd %58 %59 
                                              OpStore %48 %60 
                       Uniform f32_4* %61 = OpAccessChain %20 %23 %35 
                                f32_4 %62 = OpLoad %61 
                                f32_4 %63 = OpLoad %9 
                                f32_4 %64 = OpVectorShuffle %63 %63 2 2 2 2 
                                f32_4 %65 = OpFMul %62 %64 
                                f32_4 %66 = OpLoad %48 
                                f32_4 %67 = OpFAdd %65 %66 
                                              OpStore %48 %67 
                       Uniform f32_4* %73 = OpAccessChain %20 %23 %44 
                                f32_4 %74 = OpLoad %73 
                                f32_4 %75 = OpLoad %9 
                                f32_4 %76 = OpVectorShuffle %75 %75 3 3 3 3 
                                f32_4 %77 = OpFMul %74 %76 
                                f32_4 %78 = OpLoad %48 
                                f32_4 %79 = OpFAdd %77 %78 
                        Output f32_4* %81 = OpAccessChain %72 %22 
                                              OpStore %81 %79 
                                f32_2 %87 = OpLoad %86 
                                              OpStore vs_TEXCOORD0 %87 
                          Output f32* %89 = OpAccessChain %72 %22 %68 
                                  f32 %90 = OpLoad %89 
                                  f32 %91 = OpFNegate %90 
                          Output f32* %92 = OpAccessChain %72 %22 %68 
                                              OpStore %92 %91 
                                              OpReturn
                                              OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 264
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %12 %251 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpDecorate vs_TEXCOORD0 Location 12 
                                                      OpMemberDecorate %14 0 Offset 14 
                                                      OpMemberDecorate %14 1 Offset 14 
                                                      OpMemberDecorate %14 2 Offset 14 
                                                      OpMemberDecorate %14 3 Offset 14 
                                                      OpMemberDecorate %14 4 Offset 14 
                                                      OpMemberDecorate %14 5 Offset 14 
                                                      OpMemberDecorate %14 6 Offset 14 
                                                      OpDecorate %14 Block 
                                                      OpDecorate %16 DescriptorSet 16 
                                                      OpDecorate %16 Binding 16 
                                                      OpDecorate %33 DescriptorSet 33 
                                                      OpDecorate %33 Binding 33 
                                                      OpDecorate %37 DescriptorSet 37 
                                                      OpDecorate %37 Binding 37 
                                                      OpDecorate %71 DescriptorSet 71 
                                                      OpDecorate %71 Binding 71 
                                                      OpDecorate %73 DescriptorSet 73 
                                                      OpDecorate %73 Binding 73 
                                                      OpDecorate %106 DescriptorSet 106 
                                                      OpDecorate %106 Binding 106 
                                                      OpDecorate %108 DescriptorSet 108 
                                                      OpDecorate %108 Binding 108 
                                                      OpDecorate %141 DescriptorSet 141 
                                                      OpDecorate %141 Binding 141 
                                                      OpDecorate %143 DescriptorSet 143 
                                                      OpDecorate %143 Binding 143 
                                                      OpDecorate %149 DescriptorSet 149 
                                                      OpDecorate %149 Binding 149 
                                                      OpDecorate %151 DescriptorSet 151 
                                                      OpDecorate %151 Binding 151 
                                                      OpDecorate %251 Location 251 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 2 
                                              %11 = OpTypePointer Input %10 
                        Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                              %14 = OpTypeStruct %7 %7 %7 %7 %7 %7 %7 
                                              %15 = OpTypePointer Uniform %14 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4;}* %16 = OpVariable Uniform 
                                              %17 = OpTypeInt 32 1 
                                          i32 %18 = OpConstant 5 
                                              %19 = OpTypePointer Uniform %7 
                               Private f32_4* %30 = OpVariable Private 
                                              %31 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %32 = OpTypePointer UniformConstant %31 
         UniformConstant read_only Texture2D* %33 = OpVariable UniformConstant 
                                              %35 = OpTypeSampler 
                                              %36 = OpTypePointer UniformConstant %35 
                     UniformConstant sampler* %37 = OpVariable UniformConstant 
                                              %39 = OpTypeSampledImage %31 
                                              %44 = OpTypeVector %6 3 
                                          i32 %47 = OpConstant 6 
                                          i32 %63 = OpConstant 1 
                               Private f32_4* %70 = OpVariable Private 
         UniformConstant read_only Texture2D* %71 = OpVariable UniformConstant 
                     UniformConstant sampler* %73 = OpVariable UniformConstant 
                                          i32 %94 = OpConstant 0 
        UniformConstant read_only Texture2D* %106 = OpVariable UniformConstant 
                    UniformConstant sampler* %108 = OpVariable UniformConstant 
                                         i32 %129 = OpConstant 2 
        UniformConstant read_only Texture2D* %141 = OpVariable UniformConstant 
                    UniformConstant sampler* %143 = OpVariable UniformConstant 
        UniformConstant read_only Texture2D* %149 = OpVariable UniformConstant 
                    UniformConstant sampler* %151 = OpVariable UniformConstant 
                                         i32 %172 = OpConstant 3 
                                         i32 %199 = OpConstant 4 
                                             %219 = OpTypePointer Private %6 
                                Private f32* %220 = OpVariable Private 
                                             %221 = OpTypeInt 32 0 
                                         u32 %222 = OpConstant 1 
                                         u32 %225 = OpConstant 0 
                                         u32 %229 = OpConstant 2 
                                         f32 %232 = OpConstant 3.674022E-40 
                                         f32 %240 = OpConstant 3.674022E-40 
                                         f32 %243 = OpConstant 3.674022E-40 
                                         f32 %248 = OpConstant 3.674022E-40 
                                             %250 = OpTypePointer Output %7 
                               Output f32_4* %251 = OpVariable Output 
                                         u32 %260 = OpConstant 3 
                                             %261 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_2 %13 = OpLoad vs_TEXCOORD0 
                               Uniform f32_4* %20 = OpAccessChain %16 %18 
                                        f32_4 %21 = OpLoad %20 
                                        f32_2 %22 = OpVectorShuffle %21 %21 0 1 
                                        f32_2 %23 = OpFMul %13 %22 
                               Uniform f32_4* %24 = OpAccessChain %16 %18 
                                        f32_4 %25 = OpLoad %24 
                                        f32_2 %26 = OpVectorShuffle %25 %25 2 3 
                                        f32_2 %27 = OpFAdd %23 %26 
                                        f32_4 %28 = OpLoad %9 
                                        f32_4 %29 = OpVectorShuffle %28 %27 4 5 2 3 
                                                      OpStore %9 %29 
                          read_only Texture2D %34 = OpLoad %33 
                                      sampler %38 = OpLoad %37 
                   read_only Texture2DSampled %40 = OpSampledImage %34 %38 
                                        f32_4 %41 = OpLoad %9 
                                        f32_2 %42 = OpVectorShuffle %41 %41 0 1 
                                        f32_4 %43 = OpImageSampleImplicitLod %40 %42 
                                                      OpStore %30 %43 
                                        f32_4 %45 = OpLoad %30 
                                        f32_3 %46 = OpVectorShuffle %45 %45 0 1 2 
                               Uniform f32_4* %48 = OpAccessChain %16 %47 
                                        f32_4 %49 = OpLoad %48 
                                        f32_3 %50 = OpVectorShuffle %49 %49 0 0 0 
                                        f32_3 %51 = OpFMul %46 %50 
                                        f32_4 %52 = OpLoad %30 
                                        f32_4 %53 = OpVectorShuffle %52 %51 4 5 6 3 
                                                      OpStore %30 %53 
                                        f32_4 %54 = OpLoad %30 
                                        f32_3 %55 = OpVectorShuffle %54 %54 3 3 3 
                                        f32_4 %56 = OpLoad %30 
                                        f32_3 %57 = OpVectorShuffle %56 %56 0 1 2 
                                        f32_3 %58 = OpFMul %55 %57 
                                        f32_4 %59 = OpLoad %30 
                                        f32_4 %60 = OpVectorShuffle %59 %58 4 5 6 3 
                                                      OpStore %30 %60 
                                        f32_4 %61 = OpLoad %30 
                                        f32_3 %62 = OpVectorShuffle %61 %61 0 1 2 
                               Uniform f32_4* %64 = OpAccessChain %16 %63 
                                        f32_4 %65 = OpLoad %64 
                                        f32_3 %66 = OpVectorShuffle %65 %65 0 1 2 
                                        f32_3 %67 = OpFMul %62 %66 
                                        f32_4 %68 = OpLoad %30 
                                        f32_4 %69 = OpVectorShuffle %68 %67 4 5 6 3 
                                                      OpStore %30 %69 
                          read_only Texture2D %72 = OpLoad %71 
                                      sampler %74 = OpLoad %73 
                   read_only Texture2DSampled %75 = OpSampledImage %72 %74 
                                        f32_4 %76 = OpLoad %9 
                                        f32_2 %77 = OpVectorShuffle %76 %76 0 1 
                                        f32_4 %78 = OpImageSampleImplicitLod %75 %77 
                                                      OpStore %70 %78 
                                        f32_4 %79 = OpLoad %70 
                                        f32_3 %80 = OpVectorShuffle %79 %79 0 1 2 
                               Uniform f32_4* %81 = OpAccessChain %16 %47 
                                        f32_4 %82 = OpLoad %81 
                                        f32_3 %83 = OpVectorShuffle %82 %82 0 0 0 
                                        f32_3 %84 = OpFMul %80 %83 
                                        f32_4 %85 = OpLoad %70 
                                        f32_4 %86 = OpVectorShuffle %85 %84 4 5 6 3 
                                                      OpStore %70 %86 
                                        f32_4 %87 = OpLoad %70 
                                        f32_3 %88 = OpVectorShuffle %87 %87 3 3 3 
                                        f32_4 %89 = OpLoad %70 
                                        f32_3 %90 = OpVectorShuffle %89 %89 0 1 2 
                                        f32_3 %91 = OpFMul %88 %90 
                                        f32_4 %92 = OpLoad %70 
                                        f32_4 %93 = OpVectorShuffle %92 %91 4 5 6 3 
                                                      OpStore %70 %93 
                               Uniform f32_4* %95 = OpAccessChain %16 %94 
                                        f32_4 %96 = OpLoad %95 
                                        f32_3 %97 = OpVectorShuffle %96 %96 0 1 2 
                                        f32_4 %98 = OpLoad %70 
                                        f32_3 %99 = OpVectorShuffle %98 %98 0 1 2 
                                       f32_3 %100 = OpFMul %97 %99 
                                       f32_4 %101 = OpLoad %30 
                                       f32_3 %102 = OpVectorShuffle %101 %101 0 1 2 
                                       f32_3 %103 = OpFAdd %100 %102 
                                       f32_4 %104 = OpLoad %30 
                                       f32_4 %105 = OpVectorShuffle %104 %103 4 5 6 3 
                                                      OpStore %30 %105 
                         read_only Texture2D %107 = OpLoad %106 
                                     sampler %109 = OpLoad %108 
                  read_only Texture2DSampled %110 = OpSampledImage %107 %109 
                                       f32_4 %111 = OpLoad %9 
                                       f32_2 %112 = OpVectorShuffle %111 %111 0 1 
                                       f32_4 %113 = OpImageSampleImplicitLod %110 %112 
                                                      OpStore %70 %113 
                                       f32_4 %114 = OpLoad %70 
                                       f32_3 %115 = OpVectorShuffle %114 %114 0 1 2 
                              Uniform f32_4* %116 = OpAccessChain %16 %47 
                                       f32_4 %117 = OpLoad %116 
                                       f32_3 %118 = OpVectorShuffle %117 %117 0 0 0 
                                       f32_3 %119 = OpFMul %115 %118 
                                       f32_4 %120 = OpLoad %70 
                                       f32_4 %121 = OpVectorShuffle %120 %119 4 5 6 3 
                                                      OpStore %70 %121 
                                       f32_4 %122 = OpLoad %70 
                                       f32_3 %123 = OpVectorShuffle %122 %122 3 3 3 
                                       f32_4 %124 = OpLoad %70 
                                       f32_3 %125 = OpVectorShuffle %124 %124 0 1 2 
                                       f32_3 %126 = OpFMul %123 %125 
                                       f32_4 %127 = OpLoad %70 
                                       f32_4 %128 = OpVectorShuffle %127 %126 4 5 6 3 
                                                      OpStore %70 %128 
                              Uniform f32_4* %130 = OpAccessChain %16 %129 
                                       f32_4 %131 = OpLoad %130 
                                       f32_3 %132 = OpVectorShuffle %131 %131 0 1 2 
                                       f32_4 %133 = OpLoad %70 
                                       f32_3 %134 = OpVectorShuffle %133 %133 0 1 2 
                                       f32_3 %135 = OpFMul %132 %134 
                                       f32_4 %136 = OpLoad %30 
                                       f32_3 %137 = OpVectorShuffle %136 %136 0 1 2 
                                       f32_3 %138 = OpFAdd %135 %137 
                                       f32_4 %139 = OpLoad %30 
                                       f32_4 %140 = OpVectorShuffle %139 %138 4 5 6 3 
                                                      OpStore %30 %140 
                         read_only Texture2D %142 = OpLoad %141 
                                     sampler %144 = OpLoad %143 
                  read_only Texture2DSampled %145 = OpSampledImage %142 %144 
                                       f32_4 %146 = OpLoad %9 
                                       f32_2 %147 = OpVectorShuffle %146 %146 0 1 
                                       f32_4 %148 = OpImageSampleImplicitLod %145 %147 
                                                      OpStore %70 %148 
                         read_only Texture2D %150 = OpLoad %149 
                                     sampler %152 = OpLoad %151 
                  read_only Texture2DSampled %153 = OpSampledImage %150 %152 
                                       f32_4 %154 = OpLoad %9 
                                       f32_2 %155 = OpVectorShuffle %154 %154 0 1 
                                       f32_4 %156 = OpImageSampleImplicitLod %153 %155 
                                                      OpStore %9 %156 
                                       f32_4 %157 = OpLoad %70 
                                       f32_3 %158 = OpVectorShuffle %157 %157 0 1 2 
                              Uniform f32_4* %159 = OpAccessChain %16 %47 
                                       f32_4 %160 = OpLoad %159 
                                       f32_3 %161 = OpVectorShuffle %160 %160 0 0 0 
                                       f32_3 %162 = OpFMul %158 %161 
                                       f32_4 %163 = OpLoad %70 
                                       f32_4 %164 = OpVectorShuffle %163 %162 4 5 6 3 
                                                      OpStore %70 %164 
                                       f32_4 %165 = OpLoad %70 
                                       f32_3 %166 = OpVectorShuffle %165 %165 3 3 3 
                                       f32_4 %167 = OpLoad %70 
                                       f32_3 %168 = OpVectorShuffle %167 %167 0 1 2 
                                       f32_3 %169 = OpFMul %166 %168 
                                       f32_4 %170 = OpLoad %70 
                                       f32_4 %171 = OpVectorShuffle %170 %169 4 5 6 3 
                                                      OpStore %70 %171 
                              Uniform f32_4* %173 = OpAccessChain %16 %172 
                                       f32_4 %174 = OpLoad %173 
                                       f32_3 %175 = OpVectorShuffle %174 %174 0 1 2 
                                       f32_4 %176 = OpLoad %70 
                                       f32_3 %177 = OpVectorShuffle %176 %176 0 1 2 
                                       f32_3 %178 = OpFMul %175 %177 
                                       f32_4 %179 = OpLoad %30 
                                       f32_3 %180 = OpVectorShuffle %179 %179 0 1 2 
                                       f32_3 %181 = OpFAdd %178 %180 
                                       f32_4 %182 = OpLoad %30 
                                       f32_4 %183 = OpVectorShuffle %182 %181 4 5 6 3 
                                                      OpStore %30 %183 
                                       f32_4 %184 = OpLoad %9 
                                       f32_3 %185 = OpVectorShuffle %184 %184 0 1 2 
                              Uniform f32_4* %186 = OpAccessChain %16 %47 
                                       f32_4 %187 = OpLoad %186 
                                       f32_3 %188 = OpVectorShuffle %187 %187 0 0 0 
                                       f32_3 %189 = OpFMul %185 %188 
                                       f32_4 %190 = OpLoad %9 
                                       f32_4 %191 = OpVectorShuffle %190 %189 4 5 6 3 
                                                      OpStore %9 %191 
                                       f32_4 %192 = OpLoad %9 
                                       f32_3 %193 = OpVectorShuffle %192 %192 3 3 3 
                                       f32_4 %194 = OpLoad %9 
                                       f32_3 %195 = OpVectorShuffle %194 %194 0 1 2 
                                       f32_3 %196 = OpFMul %193 %195 
                                       f32_4 %197 = OpLoad %9 
                                       f32_4 %198 = OpVectorShuffle %197 %196 4 5 6 3 
                                                      OpStore %9 %198 
                              Uniform f32_4* %200 = OpAccessChain %16 %199 
                                       f32_4 %201 = OpLoad %200 
                                       f32_3 %202 = OpVectorShuffle %201 %201 0 1 2 
                                       f32_4 %203 = OpLoad %9 
                                       f32_3 %204 = OpVectorShuffle %203 %203 0 1 2 
                                       f32_3 %205 = OpFMul %202 %204 
                                       f32_4 %206 = OpLoad %30 
                                       f32_3 %207 = OpVectorShuffle %206 %206 0 1 2 
                                       f32_3 %208 = OpFAdd %205 %207 
                                       f32_4 %209 = OpLoad %9 
                                       f32_4 %210 = OpVectorShuffle %209 %208 4 5 6 3 
                                                      OpStore %9 %210 
                                       f32_4 %211 = OpLoad %9 
                                       f32_3 %212 = OpVectorShuffle %211 %211 0 1 2 
                              Uniform f32_4* %213 = OpAccessChain %16 %47 
                                       f32_4 %214 = OpLoad %213 
                                       f32_3 %215 = OpVectorShuffle %214 %214 1 1 1 
                                       f32_3 %216 = OpFMul %212 %215 
                                       f32_4 %217 = OpLoad %9 
                                       f32_4 %218 = OpVectorShuffle %217 %216 4 5 6 3 
                                                      OpStore %9 %218 
                                Private f32* %223 = OpAccessChain %9 %222 
                                         f32 %224 = OpLoad %223 
                                Private f32* %226 = OpAccessChain %9 %225 
                                         f32 %227 = OpLoad %226 
                                         f32 %228 = OpExtInst %1 40 %224 %227 
                                                      OpStore %220 %228 
                                Private f32* %230 = OpAccessChain %9 %229 
                                         f32 %231 = OpLoad %230 
                                         f32 %233 = OpExtInst %1 40 %231 %232 
                                Private f32* %234 = OpAccessChain %30 %225 
                                                      OpStore %234 %233 
                                         f32 %235 = OpLoad %220 
                                Private f32* %236 = OpAccessChain %30 %225 
                                         f32 %237 = OpLoad %236 
                                         f32 %238 = OpExtInst %1 40 %235 %237 
                                                      OpStore %220 %238 
                                         f32 %239 = OpLoad %220 
                                         f32 %241 = OpExtInst %1 37 %239 %240 
                                                      OpStore %220 %241 
                                         f32 %242 = OpLoad %220 
                                         f32 %244 = OpFMul %242 %243 
                                                      OpStore %220 %244 
                                         f32 %245 = OpLoad %220 
                                         f32 %246 = OpExtInst %1 9 %245 
                                                      OpStore %220 %246 
                                         f32 %247 = OpLoad %220 
                                         f32 %249 = OpFMul %247 %248 
                                                      OpStore %220 %249 
                                       f32_4 %252 = OpLoad %9 
                                       f32_3 %253 = OpVectorShuffle %252 %252 0 1 2 
                                         f32 %254 = OpLoad %220 
                                       f32_3 %255 = OpCompositeConstruct %254 %254 %254 
                                       f32_3 %256 = OpFDiv %253 %255 
                                       f32_4 %257 = OpLoad %251 
                                       f32_4 %258 = OpVectorShuffle %257 %256 4 5 6 3 
                                                      OpStore %251 %258 
                                         f32 %259 = OpLoad %220 
                                 Output f32* %262 = OpAccessChain %251 %260 
                                                      OpStore %262 %259 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "AB_HIGH_PRECISION" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "AB_HIGH_PRECISION" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in  vec4 in_POSITION0;
in  vec2 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _AnamorphicGlareWeights0;
uniform 	vec4 _AnamorphicGlareWeights1;
uniform 	vec4 _AnamorphicGlareWeights2;
uniform 	vec4 _AnamorphicGlareWeights3;
uniform 	vec4 _AnamorphicGlareWeights4;
uniform 	vec4 _MainTex_ST;
UNITY_LOCATION(0) uniform  sampler2D _AnamorphicRTS0;
UNITY_LOCATION(1) uniform  sampler2D _AnamorphicRTS1;
UNITY_LOCATION(2) uniform  sampler2D _AnamorphicRTS2;
UNITY_LOCATION(3) uniform  sampler2D _AnamorphicRTS3;
UNITY_LOCATION(4) uniform  sampler2D _AnamorphicRTS4;
in  vec2 vs_TEXCOORD0;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1 = texture(_AnamorphicRTS1, u_xlat0.xy);
    u_xlat1.xyz = u_xlat1.xyz * _AnamorphicGlareWeights1.xyz;
    u_xlat2 = texture(_AnamorphicRTS0, u_xlat0.xy);
    u_xlat1.xyz = _AnamorphicGlareWeights0.xyz * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat2 = texture(_AnamorphicRTS2, u_xlat0.xy);
    u_xlat1.xyz = _AnamorphicGlareWeights2.xyz * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat2 = texture(_AnamorphicRTS3, u_xlat0.xy);
    u_xlat0 = texture(_AnamorphicRTS4, u_xlat0.xy);
    u_xlat1.xyz = _AnamorphicGlareWeights3.xyz * u_xlat2.xyz + u_xlat1.xyz;
    SV_Target0.xyz = _AnamorphicGlareWeights4.xyz * u_xlat0.xyz + u_xlat1.xyz;
    SV_Target0.w = 0.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "AB_HIGH_PRECISION" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 94
; Schema: 0
                                              OpCapability Shader 
                                       %1 = OpExtInstImport "GLSL.std.450" 
                                              OpMemoryModel Logical GLSL450 
                                              OpEntryPoint Vertex %4 "main" %11 %72 %84 %86 
                                              OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                              OpDecorate %11 Location 11 
                                              OpDecorate %16 ArrayStride 16 
                                              OpDecorate %17 ArrayStride 17 
                                              OpMemberDecorate %18 0 Offset 18 
                                              OpMemberDecorate %18 1 Offset 18 
                                              OpDecorate %18 Block 
                                              OpDecorate %20 DescriptorSet 20 
                                              OpDecorate %20 Binding 20 
                                              OpMemberDecorate %70 0 BuiltIn 70 
                                              OpMemberDecorate %70 1 BuiltIn 70 
                                              OpMemberDecorate %70 2 BuiltIn 70 
                                              OpDecorate %70 Block 
                                              OpDecorate vs_TEXCOORD0 Location 84 
                                              OpDecorate %86 Location 86 
                                       %2 = OpTypeVoid 
                                       %3 = OpTypeFunction %2 
                                       %6 = OpTypeFloat 32 
                                       %7 = OpTypeVector %6 4 
                                       %8 = OpTypePointer Private %7 
                        Private f32_4* %9 = OpVariable Private 
                                      %10 = OpTypePointer Input %7 
                         Input f32_4* %11 = OpVariable Input 
                                      %14 = OpTypeInt 32 0 
                                  u32 %15 = OpConstant 4 
                                      %16 = OpTypeArray %7 %15 
                                      %17 = OpTypeArray %7 %15 
                                      %18 = OpTypeStruct %16 %17 
                                      %19 = OpTypePointer Uniform %18 
Uniform struct {f32_4[4]; f32_4[4];}* %20 = OpVariable Uniform 
                                      %21 = OpTypeInt 32 1 
                                  i32 %22 = OpConstant 0 
                                  i32 %23 = OpConstant 1 
                                      %24 = OpTypePointer Uniform %7 
                                  i32 %35 = OpConstant 2 
                                  i32 %44 = OpConstant 3 
                       Private f32_4* %48 = OpVariable Private 
                                  u32 %68 = OpConstant 1 
                                      %69 = OpTypeArray %6 %68 
                                      %70 = OpTypeStruct %7 %6 %69 
                                      %71 = OpTypePointer Output %70 
 Output struct {f32_4; f32; f32[1];}* %72 = OpVariable Output 
                                      %80 = OpTypePointer Output %7 
                                      %82 = OpTypeVector %6 2 
                                      %83 = OpTypePointer Output %82 
               Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                      %85 = OpTypePointer Input %82 
                         Input f32_2* %86 = OpVariable Input 
                                      %88 = OpTypePointer Output %6 
                                  void %4 = OpFunction None %3 
                                       %5 = OpLabel 
                                f32_4 %12 = OpLoad %11 
                                f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                       Uniform f32_4* %25 = OpAccessChain %20 %22 %23 
                                f32_4 %26 = OpLoad %25 
                                f32_4 %27 = OpFMul %13 %26 
                                              OpStore %9 %27 
                       Uniform f32_4* %28 = OpAccessChain %20 %22 %22 
                                f32_4 %29 = OpLoad %28 
                                f32_4 %30 = OpLoad %11 
                                f32_4 %31 = OpVectorShuffle %30 %30 0 0 0 0 
                                f32_4 %32 = OpFMul %29 %31 
                                f32_4 %33 = OpLoad %9 
                                f32_4 %34 = OpFAdd %32 %33 
                                              OpStore %9 %34 
                       Uniform f32_4* %36 = OpAccessChain %20 %22 %35 
                                f32_4 %37 = OpLoad %36 
                                f32_4 %38 = OpLoad %11 
                                f32_4 %39 = OpVectorShuffle %38 %38 2 2 2 2 
                                f32_4 %40 = OpFMul %37 %39 
                                f32_4 %41 = OpLoad %9 
                                f32_4 %42 = OpFAdd %40 %41 
                                              OpStore %9 %42 
                                f32_4 %43 = OpLoad %9 
                       Uniform f32_4* %45 = OpAccessChain %20 %22 %44 
                                f32_4 %46 = OpLoad %45 
                                f32_4 %47 = OpFAdd %43 %46 
                                              OpStore %9 %47 
                                f32_4 %49 = OpLoad %9 
                                f32_4 %50 = OpVectorShuffle %49 %49 1 1 1 1 
                       Uniform f32_4* %51 = OpAccessChain %20 %23 %23 
                                f32_4 %52 = OpLoad %51 
                                f32_4 %53 = OpFMul %50 %52 
                                              OpStore %48 %53 
                       Uniform f32_4* %54 = OpAccessChain %20 %23 %22 
                                f32_4 %55 = OpLoad %54 
                                f32_4 %56 = OpLoad %9 
                                f32_4 %57 = OpVectorShuffle %56 %56 0 0 0 0 
                                f32_4 %58 = OpFMul %55 %57 
                                f32_4 %59 = OpLoad %48 
                                f32_4 %60 = OpFAdd %58 %59 
                                              OpStore %48 %60 
                       Uniform f32_4* %61 = OpAccessChain %20 %23 %35 
                                f32_4 %62 = OpLoad %61 
                                f32_4 %63 = OpLoad %9 
                                f32_4 %64 = OpVectorShuffle %63 %63 2 2 2 2 
                                f32_4 %65 = OpFMul %62 %64 
                                f32_4 %66 = OpLoad %48 
                                f32_4 %67 = OpFAdd %65 %66 
                                              OpStore %48 %67 
                       Uniform f32_4* %73 = OpAccessChain %20 %23 %44 
                                f32_4 %74 = OpLoad %73 
                                f32_4 %75 = OpLoad %9 
                                f32_4 %76 = OpVectorShuffle %75 %75 3 3 3 3 
                                f32_4 %77 = OpFMul %74 %76 
                                f32_4 %78 = OpLoad %48 
                                f32_4 %79 = OpFAdd %77 %78 
                        Output f32_4* %81 = OpAccessChain %72 %22 
                                              OpStore %81 %79 
                                f32_2 %87 = OpLoad %86 
                                              OpStore vs_TEXCOORD0 %87 
                          Output f32* %89 = OpAccessChain %72 %22 %68 
                                  f32 %90 = OpLoad %89 
                                  f32 %91 = OpFNegate %90 
                          Output f32* %92 = OpAccessChain %72 %22 %68 
                                              OpStore %92 %91 
                                              OpReturn
                                              OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 131
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %12 %114 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpDecorate vs_TEXCOORD0 Location 12 
                                                      OpMemberDecorate %15 0 Offset 15 
                                                      OpMemberDecorate %15 1 Offset 15 
                                                      OpMemberDecorate %15 2 Offset 15 
                                                      OpMemberDecorate %15 3 Offset 15 
                                                      OpMemberDecorate %15 4 Offset 15 
                                                      OpMemberDecorate %15 5 Offset 15 
                                                      OpDecorate %15 Block 
                                                      OpDecorate %17 DescriptorSet 17 
                                                      OpDecorate %17 Binding 17 
                                                      OpDecorate %34 DescriptorSet 34 
                                                      OpDecorate %34 Binding 34 
                                                      OpDecorate %38 DescriptorSet 38 
                                                      OpDecorate %38 Binding 38 
                                                      OpDecorate %53 DescriptorSet 53 
                                                      OpDecorate %53 Binding 53 
                                                      OpDecorate %55 DescriptorSet 55 
                                                      OpDecorate %55 Binding 55 
                                                      OpDecorate %70 DescriptorSet 70 
                                                      OpDecorate %70 Binding 70 
                                                      OpDecorate %72 DescriptorSet 72 
                                                      OpDecorate %72 Binding 72 
                                                      OpDecorate %87 DescriptorSet 87 
                                                      OpDecorate %87 Binding 87 
                                                      OpDecorate %89 DescriptorSet 89 
                                                      OpDecorate %89 Binding 89 
                                                      OpDecorate %96 DescriptorSet 96 
                                                      OpDecorate %96 Binding 96 
                                                      OpDecorate %98 DescriptorSet 98 
                                                      OpDecorate %98 Binding 98 
                                                      OpDecorate %114 Location 114 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 3 
                                               %8 = OpTypePointer Private %7 
                                Private f32_3* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 2 
                                              %11 = OpTypePointer Input %10 
                        Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                              %14 = OpTypeVector %6 4 
                                              %15 = OpTypeStruct %14 %14 %14 %14 %14 %14 
                                              %16 = OpTypePointer Uniform %15 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4;}* %17 = OpVariable Uniform 
                                              %18 = OpTypeInt 32 1 
                                          i32 %19 = OpConstant 5 
                                              %20 = OpTypePointer Uniform %14 
                               Private f32_3* %31 = OpVariable Private 
                                              %32 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %33 = OpTypePointer UniformConstant %32 
         UniformConstant read_only Texture2D* %34 = OpVariable UniformConstant 
                                              %36 = OpTypeSampler 
                                              %37 = OpTypePointer UniformConstant %36 
                     UniformConstant sampler* %38 = OpVariable UniformConstant 
                                              %40 = OpTypeSampledImage %32 
                                          i32 %47 = OpConstant 1 
                               Private f32_3* %52 = OpVariable Private 
         UniformConstant read_only Texture2D* %53 = OpVariable UniformConstant 
                     UniformConstant sampler* %55 = OpVariable UniformConstant 
                                          i32 %62 = OpConstant 0 
         UniformConstant read_only Texture2D* %70 = OpVariable UniformConstant 
                     UniformConstant sampler* %72 = OpVariable UniformConstant 
                                          i32 %79 = OpConstant 2 
         UniformConstant read_only Texture2D* %87 = OpVariable UniformConstant 
                     UniformConstant sampler* %89 = OpVariable UniformConstant 
         UniformConstant read_only Texture2D* %96 = OpVariable UniformConstant 
                     UniformConstant sampler* %98 = OpVariable UniformConstant 
                                         i32 %105 = OpConstant 3 
                                             %113 = OpTypePointer Output %14 
                               Output f32_4* %114 = OpVariable Output 
                                         i32 %115 = OpConstant 4 
                                         f32 %125 = OpConstant 3.674022E-40 
                                             %126 = OpTypeInt 32 0 
                                         u32 %127 = OpConstant 3 
                                             %128 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_2 %13 = OpLoad vs_TEXCOORD0 
                               Uniform f32_4* %21 = OpAccessChain %17 %19 
                                        f32_4 %22 = OpLoad %21 
                                        f32_2 %23 = OpVectorShuffle %22 %22 0 1 
                                        f32_2 %24 = OpFMul %13 %23 
                               Uniform f32_4* %25 = OpAccessChain %17 %19 
                                        f32_4 %26 = OpLoad %25 
                                        f32_2 %27 = OpVectorShuffle %26 %26 2 3 
                                        f32_2 %28 = OpFAdd %24 %27 
                                        f32_3 %29 = OpLoad %9 
                                        f32_3 %30 = OpVectorShuffle %29 %28 3 4 2 
                                                      OpStore %9 %30 
                          read_only Texture2D %35 = OpLoad %34 
                                      sampler %39 = OpLoad %38 
                   read_only Texture2DSampled %41 = OpSampledImage %35 %39 
                                        f32_3 %42 = OpLoad %9 
                                        f32_2 %43 = OpVectorShuffle %42 %42 0 1 
                                        f32_4 %44 = OpImageSampleImplicitLod %41 %43 
                                        f32_3 %45 = OpVectorShuffle %44 %44 0 1 2 
                                                      OpStore %31 %45 
                                        f32_3 %46 = OpLoad %31 
                               Uniform f32_4* %48 = OpAccessChain %17 %47 
                                        f32_4 %49 = OpLoad %48 
                                        f32_3 %50 = OpVectorShuffle %49 %49 0 1 2 
                                        f32_3 %51 = OpFMul %46 %50 
                                                      OpStore %31 %51 
                          read_only Texture2D %54 = OpLoad %53 
                                      sampler %56 = OpLoad %55 
                   read_only Texture2DSampled %57 = OpSampledImage %54 %56 
                                        f32_3 %58 = OpLoad %9 
                                        f32_2 %59 = OpVectorShuffle %58 %58 0 1 
                                        f32_4 %60 = OpImageSampleImplicitLod %57 %59 
                                        f32_3 %61 = OpVectorShuffle %60 %60 0 1 2 
                                                      OpStore %52 %61 
                               Uniform f32_4* %63 = OpAccessChain %17 %62 
                                        f32_4 %64 = OpLoad %63 
                                        f32_3 %65 = OpVectorShuffle %64 %64 0 1 2 
                                        f32_3 %66 = OpLoad %52 
                                        f32_3 %67 = OpFMul %65 %66 
                                        f32_3 %68 = OpLoad %31 
                                        f32_3 %69 = OpFAdd %67 %68 
                                                      OpStore %31 %69 
                          read_only Texture2D %71 = OpLoad %70 
                                      sampler %73 = OpLoad %72 
                   read_only Texture2DSampled %74 = OpSampledImage %71 %73 
                                        f32_3 %75 = OpLoad %9 
                                        f32_2 %76 = OpVectorShuffle %75 %75 0 1 
                                        f32_4 %77 = OpImageSampleImplicitLod %74 %76 
                                        f32_3 %78 = OpVectorShuffle %77 %77 0 1 2 
                                                      OpStore %52 %78 
                               Uniform f32_4* %80 = OpAccessChain %17 %79 
                                        f32_4 %81 = OpLoad %80 
                                        f32_3 %82 = OpVectorShuffle %81 %81 0 1 2 
                                        f32_3 %83 = OpLoad %52 
                                        f32_3 %84 = OpFMul %82 %83 
                                        f32_3 %85 = OpLoad %31 
                                        f32_3 %86 = OpFAdd %84 %85 
                                                      OpStore %31 %86 
                          read_only Texture2D %88 = OpLoad %87 
                                      sampler %90 = OpLoad %89 
                   read_only Texture2DSampled %91 = OpSampledImage %88 %90 
                                        f32_3 %92 = OpLoad %9 
                                        f32_2 %93 = OpVectorShuffle %92 %92 0 1 
                                        f32_4 %94 = OpImageSampleImplicitLod %91 %93 
                                        f32_3 %95 = OpVectorShuffle %94 %94 0 1 2 
                                                      OpStore %52 %95 
                          read_only Texture2D %97 = OpLoad %96 
                                      sampler %99 = OpLoad %98 
                  read_only Texture2DSampled %100 = OpSampledImage %97 %99 
                                       f32_3 %101 = OpLoad %9 
                                       f32_2 %102 = OpVectorShuffle %101 %101 0 1 
                                       f32_4 %103 = OpImageSampleImplicitLod %100 %102 
                                       f32_3 %104 = OpVectorShuffle %103 %103 0 1 2 
                                                      OpStore %9 %104 
                              Uniform f32_4* %106 = OpAccessChain %17 %105 
                                       f32_4 %107 = OpLoad %106 
                                       f32_3 %108 = OpVectorShuffle %107 %107 0 1 2 
                                       f32_3 %109 = OpLoad %52 
                                       f32_3 %110 = OpFMul %108 %109 
                                       f32_3 %111 = OpLoad %31 
                                       f32_3 %112 = OpFAdd %110 %111 
                                                      OpStore %31 %112 
                              Uniform f32_4* %116 = OpAccessChain %17 %115 
                                       f32_4 %117 = OpLoad %116 
                                       f32_3 %118 = OpVectorShuffle %117 %117 0 1 2 
                                       f32_3 %119 = OpLoad %9 
                                       f32_3 %120 = OpFMul %118 %119 
                                       f32_3 %121 = OpLoad %31 
                                       f32_3 %122 = OpFAdd %120 %121 
                                       f32_4 %123 = OpLoad %114 
                                       f32_4 %124 = OpVectorShuffle %123 %122 4 5 6 3 
                                                      OpStore %114 %124 
                                 Output f32* %129 = OpAccessChain %114 %127 
                                                      OpStore %129 %125 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
}
Program "fp" {
SubProgram "d3d11 " {
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
""
}
SubProgram "vulkan " {
""
}
SubProgram "d3d11 " {
Keywords { "AB_HIGH_PRECISION" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "AB_HIGH_PRECISION" }
""
}
SubProgram "vulkan " {
Keywords { "AB_HIGH_PRECISION" }
""
}
}
}
 Pass {
  Name "frag_weightedAddPS6"
  ZTest Always
  ZWrite Off
  Cull Off
  GpuProgramID 1606474
Program "vp" {
SubProgram "d3d11 " {
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in  vec4 in_POSITION0;
in  vec2 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _AnamorphicGlareWeights0;
uniform 	vec4 _AnamorphicGlareWeights1;
uniform 	vec4 _AnamorphicGlareWeights2;
uniform 	vec4 _AnamorphicGlareWeights3;
uniform 	vec4 _AnamorphicGlareWeights4;
uniform 	vec4 _AnamorphicGlareWeights5;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BloomRange;
UNITY_LOCATION(0) uniform  sampler2D _AnamorphicRTS0;
UNITY_LOCATION(1) uniform  sampler2D _AnamorphicRTS1;
UNITY_LOCATION(2) uniform  sampler2D _AnamorphicRTS2;
UNITY_LOCATION(3) uniform  sampler2D _AnamorphicRTS3;
UNITY_LOCATION(4) uniform  sampler2D _AnamorphicRTS4;
UNITY_LOCATION(5) uniform  sampler2D _AnamorphicRTS5;
in  vec2 vs_TEXCOORD0;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat9;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1 = texture(_AnamorphicRTS1, u_xlat0.xy);
    u_xlat1.xyz = u_xlat1.xyz * _BloomRange.xxx;
    u_xlat1.xyz = u_xlat1.www * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _AnamorphicGlareWeights1.xyz;
    u_xlat2 = texture(_AnamorphicRTS0, u_xlat0.xy);
    u_xlat2.xyz = u_xlat2.xyz * _BloomRange.xxx;
    u_xlat2.xyz = u_xlat2.www * u_xlat2.xyz;
    u_xlat1.xyz = _AnamorphicGlareWeights0.xyz * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat2 = texture(_AnamorphicRTS2, u_xlat0.xy);
    u_xlat2.xyz = u_xlat2.xyz * _BloomRange.xxx;
    u_xlat2.xyz = u_xlat2.www * u_xlat2.xyz;
    u_xlat1.xyz = _AnamorphicGlareWeights2.xyz * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat2 = texture(_AnamorphicRTS3, u_xlat0.xy);
    u_xlat2.xyz = u_xlat2.xyz * _BloomRange.xxx;
    u_xlat2.xyz = u_xlat2.www * u_xlat2.xyz;
    u_xlat1.xyz = _AnamorphicGlareWeights3.xyz * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat2 = texture(_AnamorphicRTS4, u_xlat0.xy);
    u_xlat0 = texture(_AnamorphicRTS5, u_xlat0.xy);
    u_xlat2.xyz = u_xlat2.xyz * _BloomRange.xxx;
    u_xlat2.xyz = u_xlat2.www * u_xlat2.xyz;
    u_xlat1.xyz = _AnamorphicGlareWeights4.xyz * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.xyz * _BloomRange.xxx;
    u_xlat0.xyz = u_xlat0.www * u_xlat0.xyz;
    u_xlat0.xyz = _AnamorphicGlareWeights5.xyz * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.xyz * _BloomRange.yyy;
    u_xlat9 = max(u_xlat0.y, u_xlat0.x);
    u_xlat1.x = max(u_xlat0.z, 9.99999997e-07);
    u_xlat9 = max(u_xlat9, u_xlat1.x);
    u_xlat9 = min(u_xlat9, 1.0);
    u_xlat9 = u_xlat9 * 255.0;
    u_xlat9 = ceil(u_xlat9);
    u_xlat9 = u_xlat9 * 0.00392156886;
    SV_Target0.xyz = u_xlat0.xyz / vec3(u_xlat9);
    SV_Target0.w = u_xlat9;
    return;
}

#endif
"
}
SubProgram "vulkan " {
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 94
; Schema: 0
                                              OpCapability Shader 
                                       %1 = OpExtInstImport "GLSL.std.450" 
                                              OpMemoryModel Logical GLSL450 
                                              OpEntryPoint Vertex %4 "main" %11 %72 %84 %86 
                                              OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                              OpDecorate %11 Location 11 
                                              OpDecorate %16 ArrayStride 16 
                                              OpDecorate %17 ArrayStride 17 
                                              OpMemberDecorate %18 0 Offset 18 
                                              OpMemberDecorate %18 1 Offset 18 
                                              OpDecorate %18 Block 
                                              OpDecorate %20 DescriptorSet 20 
                                              OpDecorate %20 Binding 20 
                                              OpMemberDecorate %70 0 BuiltIn 70 
                                              OpMemberDecorate %70 1 BuiltIn 70 
                                              OpMemberDecorate %70 2 BuiltIn 70 
                                              OpDecorate %70 Block 
                                              OpDecorate vs_TEXCOORD0 Location 84 
                                              OpDecorate %86 Location 86 
                                       %2 = OpTypeVoid 
                                       %3 = OpTypeFunction %2 
                                       %6 = OpTypeFloat 32 
                                       %7 = OpTypeVector %6 4 
                                       %8 = OpTypePointer Private %7 
                        Private f32_4* %9 = OpVariable Private 
                                      %10 = OpTypePointer Input %7 
                         Input f32_4* %11 = OpVariable Input 
                                      %14 = OpTypeInt 32 0 
                                  u32 %15 = OpConstant 4 
                                      %16 = OpTypeArray %7 %15 
                                      %17 = OpTypeArray %7 %15 
                                      %18 = OpTypeStruct %16 %17 
                                      %19 = OpTypePointer Uniform %18 
Uniform struct {f32_4[4]; f32_4[4];}* %20 = OpVariable Uniform 
                                      %21 = OpTypeInt 32 1 
                                  i32 %22 = OpConstant 0 
                                  i32 %23 = OpConstant 1 
                                      %24 = OpTypePointer Uniform %7 
                                  i32 %35 = OpConstant 2 
                                  i32 %44 = OpConstant 3 
                       Private f32_4* %48 = OpVariable Private 
                                  u32 %68 = OpConstant 1 
                                      %69 = OpTypeArray %6 %68 
                                      %70 = OpTypeStruct %7 %6 %69 
                                      %71 = OpTypePointer Output %70 
 Output struct {f32_4; f32; f32[1];}* %72 = OpVariable Output 
                                      %80 = OpTypePointer Output %7 
                                      %82 = OpTypeVector %6 2 
                                      %83 = OpTypePointer Output %82 
               Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                      %85 = OpTypePointer Input %82 
                         Input f32_2* %86 = OpVariable Input 
                                      %88 = OpTypePointer Output %6 
                                  void %4 = OpFunction None %3 
                                       %5 = OpLabel 
                                f32_4 %12 = OpLoad %11 
                                f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                       Uniform f32_4* %25 = OpAccessChain %20 %22 %23 
                                f32_4 %26 = OpLoad %25 
                                f32_4 %27 = OpFMul %13 %26 
                                              OpStore %9 %27 
                       Uniform f32_4* %28 = OpAccessChain %20 %22 %22 
                                f32_4 %29 = OpLoad %28 
                                f32_4 %30 = OpLoad %11 
                                f32_4 %31 = OpVectorShuffle %30 %30 0 0 0 0 
                                f32_4 %32 = OpFMul %29 %31 
                                f32_4 %33 = OpLoad %9 
                                f32_4 %34 = OpFAdd %32 %33 
                                              OpStore %9 %34 
                       Uniform f32_4* %36 = OpAccessChain %20 %22 %35 
                                f32_4 %37 = OpLoad %36 
                                f32_4 %38 = OpLoad %11 
                                f32_4 %39 = OpVectorShuffle %38 %38 2 2 2 2 
                                f32_4 %40 = OpFMul %37 %39 
                                f32_4 %41 = OpLoad %9 
                                f32_4 %42 = OpFAdd %40 %41 
                                              OpStore %9 %42 
                                f32_4 %43 = OpLoad %9 
                       Uniform f32_4* %45 = OpAccessChain %20 %22 %44 
                                f32_4 %46 = OpLoad %45 
                                f32_4 %47 = OpFAdd %43 %46 
                                              OpStore %9 %47 
                                f32_4 %49 = OpLoad %9 
                                f32_4 %50 = OpVectorShuffle %49 %49 1 1 1 1 
                       Uniform f32_4* %51 = OpAccessChain %20 %23 %23 
                                f32_4 %52 = OpLoad %51 
                                f32_4 %53 = OpFMul %50 %52 
                                              OpStore %48 %53 
                       Uniform f32_4* %54 = OpAccessChain %20 %23 %22 
                                f32_4 %55 = OpLoad %54 
                                f32_4 %56 = OpLoad %9 
                                f32_4 %57 = OpVectorShuffle %56 %56 0 0 0 0 
                                f32_4 %58 = OpFMul %55 %57 
                                f32_4 %59 = OpLoad %48 
                                f32_4 %60 = OpFAdd %58 %59 
                                              OpStore %48 %60 
                       Uniform f32_4* %61 = OpAccessChain %20 %23 %35 
                                f32_4 %62 = OpLoad %61 
                                f32_4 %63 = OpLoad %9 
                                f32_4 %64 = OpVectorShuffle %63 %63 2 2 2 2 
                                f32_4 %65 = OpFMul %62 %64 
                                f32_4 %66 = OpLoad %48 
                                f32_4 %67 = OpFAdd %65 %66 
                                              OpStore %48 %67 
                       Uniform f32_4* %73 = OpAccessChain %20 %23 %44 
                                f32_4 %74 = OpLoad %73 
                                f32_4 %75 = OpLoad %9 
                                f32_4 %76 = OpVectorShuffle %75 %75 3 3 3 3 
                                f32_4 %77 = OpFMul %74 %76 
                                f32_4 %78 = OpLoad %48 
                                f32_4 %79 = OpFAdd %77 %78 
                        Output f32_4* %81 = OpAccessChain %72 %22 
                                              OpStore %81 %79 
                                f32_2 %87 = OpLoad %86 
                                              OpStore vs_TEXCOORD0 %87 
                          Output f32* %89 = OpAccessChain %72 %22 %68 
                                  f32 %90 = OpLoad %89 
                                  f32 %91 = OpFNegate %90 
                          Output f32* %92 = OpAccessChain %72 %22 %68 
                                              OpStore %92 %91 
                                              OpReturn
                                              OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 299
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %12 %286 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpDecorate vs_TEXCOORD0 Location 12 
                                                      OpMemberDecorate %14 0 Offset 14 
                                                      OpMemberDecorate %14 1 Offset 14 
                                                      OpMemberDecorate %14 2 Offset 14 
                                                      OpMemberDecorate %14 3 Offset 14 
                                                      OpMemberDecorate %14 4 Offset 14 
                                                      OpMemberDecorate %14 5 Offset 14 
                                                      OpMemberDecorate %14 6 Offset 14 
                                                      OpMemberDecorate %14 7 Offset 14 
                                                      OpDecorate %14 Block 
                                                      OpDecorate %16 DescriptorSet 16 
                                                      OpDecorate %16 Binding 16 
                                                      OpDecorate %33 DescriptorSet 33 
                                                      OpDecorate %33 Binding 33 
                                                      OpDecorate %37 DescriptorSet 37 
                                                      OpDecorate %37 Binding 37 
                                                      OpDecorate %71 DescriptorSet 71 
                                                      OpDecorate %71 Binding 71 
                                                      OpDecorate %73 DescriptorSet 73 
                                                      OpDecorate %73 Binding 73 
                                                      OpDecorate %106 DescriptorSet 106 
                                                      OpDecorate %106 Binding 106 
                                                      OpDecorate %108 DescriptorSet 108 
                                                      OpDecorate %108 Binding 108 
                                                      OpDecorate %141 DescriptorSet 141 
                                                      OpDecorate %141 Binding 141 
                                                      OpDecorate %143 DescriptorSet 143 
                                                      OpDecorate %143 Binding 143 
                                                      OpDecorate %176 DescriptorSet 176 
                                                      OpDecorate %176 Binding 176 
                                                      OpDecorate %178 DescriptorSet 178 
                                                      OpDecorate %178 Binding 178 
                                                      OpDecorate %184 DescriptorSet 184 
                                                      OpDecorate %184 Binding 184 
                                                      OpDecorate %186 DescriptorSet 186 
                                                      OpDecorate %186 Binding 186 
                                                      OpDecorate %286 Location 286 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 2 
                                              %11 = OpTypePointer Input %10 
                        Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                              %14 = OpTypeStruct %7 %7 %7 %7 %7 %7 %7 %7 
                                              %15 = OpTypePointer Uniform %14 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4;}* %16 = OpVariable Uniform 
                                              %17 = OpTypeInt 32 1 
                                          i32 %18 = OpConstant 6 
                                              %19 = OpTypePointer Uniform %7 
                               Private f32_4* %30 = OpVariable Private 
                                              %31 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %32 = OpTypePointer UniformConstant %31 
         UniformConstant read_only Texture2D* %33 = OpVariable UniformConstant 
                                              %35 = OpTypeSampler 
                                              %36 = OpTypePointer UniformConstant %35 
                     UniformConstant sampler* %37 = OpVariable UniformConstant 
                                              %39 = OpTypeSampledImage %31 
                                              %44 = OpTypeVector %6 3 
                                          i32 %47 = OpConstant 7 
                                          i32 %63 = OpConstant 1 
                               Private f32_4* %70 = OpVariable Private 
         UniformConstant read_only Texture2D* %71 = OpVariable UniformConstant 
                     UniformConstant sampler* %73 = OpVariable UniformConstant 
                                          i32 %94 = OpConstant 0 
        UniformConstant read_only Texture2D* %106 = OpVariable UniformConstant 
                    UniformConstant sampler* %108 = OpVariable UniformConstant 
                                         i32 %129 = OpConstant 2 
        UniformConstant read_only Texture2D* %141 = OpVariable UniformConstant 
                    UniformConstant sampler* %143 = OpVariable UniformConstant 
                                         i32 %164 = OpConstant 3 
        UniformConstant read_only Texture2D* %176 = OpVariable UniformConstant 
                    UniformConstant sampler* %178 = OpVariable UniformConstant 
        UniformConstant read_only Texture2D* %184 = OpVariable UniformConstant 
                    UniformConstant sampler* %186 = OpVariable UniformConstant 
                                         i32 %207 = OpConstant 4 
                                         i32 %234 = OpConstant 5 
                                             %254 = OpTypePointer Private %6 
                                Private f32* %255 = OpVariable Private 
                                             %256 = OpTypeInt 32 0 
                                         u32 %257 = OpConstant 1 
                                         u32 %260 = OpConstant 0 
                                         u32 %264 = OpConstant 2 
                                         f32 %267 = OpConstant 3.674022E-40 
                                         f32 %275 = OpConstant 3.674022E-40 
                                         f32 %278 = OpConstant 3.674022E-40 
                                         f32 %283 = OpConstant 3.674022E-40 
                                             %285 = OpTypePointer Output %7 
                               Output f32_4* %286 = OpVariable Output 
                                         u32 %295 = OpConstant 3 
                                             %296 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_2 %13 = OpLoad vs_TEXCOORD0 
                               Uniform f32_4* %20 = OpAccessChain %16 %18 
                                        f32_4 %21 = OpLoad %20 
                                        f32_2 %22 = OpVectorShuffle %21 %21 0 1 
                                        f32_2 %23 = OpFMul %13 %22 
                               Uniform f32_4* %24 = OpAccessChain %16 %18 
                                        f32_4 %25 = OpLoad %24 
                                        f32_2 %26 = OpVectorShuffle %25 %25 2 3 
                                        f32_2 %27 = OpFAdd %23 %26 
                                        f32_4 %28 = OpLoad %9 
                                        f32_4 %29 = OpVectorShuffle %28 %27 4 5 2 3 
                                                      OpStore %9 %29 
                          read_only Texture2D %34 = OpLoad %33 
                                      sampler %38 = OpLoad %37 
                   read_only Texture2DSampled %40 = OpSampledImage %34 %38 
                                        f32_4 %41 = OpLoad %9 
                                        f32_2 %42 = OpVectorShuffle %41 %41 0 1 
                                        f32_4 %43 = OpImageSampleImplicitLod %40 %42 
                                                      OpStore %30 %43 
                                        f32_4 %45 = OpLoad %30 
                                        f32_3 %46 = OpVectorShuffle %45 %45 0 1 2 
                               Uniform f32_4* %48 = OpAccessChain %16 %47 
                                        f32_4 %49 = OpLoad %48 
                                        f32_3 %50 = OpVectorShuffle %49 %49 0 0 0 
                                        f32_3 %51 = OpFMul %46 %50 
                                        f32_4 %52 = OpLoad %30 
                                        f32_4 %53 = OpVectorShuffle %52 %51 4 5 6 3 
                                                      OpStore %30 %53 
                                        f32_4 %54 = OpLoad %30 
                                        f32_3 %55 = OpVectorShuffle %54 %54 3 3 3 
                                        f32_4 %56 = OpLoad %30 
                                        f32_3 %57 = OpVectorShuffle %56 %56 0 1 2 
                                        f32_3 %58 = OpFMul %55 %57 
                                        f32_4 %59 = OpLoad %30 
                                        f32_4 %60 = OpVectorShuffle %59 %58 4 5 6 3 
                                                      OpStore %30 %60 
                                        f32_4 %61 = OpLoad %30 
                                        f32_3 %62 = OpVectorShuffle %61 %61 0 1 2 
                               Uniform f32_4* %64 = OpAccessChain %16 %63 
                                        f32_4 %65 = OpLoad %64 
                                        f32_3 %66 = OpVectorShuffle %65 %65 0 1 2 
                                        f32_3 %67 = OpFMul %62 %66 
                                        f32_4 %68 = OpLoad %30 
                                        f32_4 %69 = OpVectorShuffle %68 %67 4 5 6 3 
                                                      OpStore %30 %69 
                          read_only Texture2D %72 = OpLoad %71 
                                      sampler %74 = OpLoad %73 
                   read_only Texture2DSampled %75 = OpSampledImage %72 %74 
                                        f32_4 %76 = OpLoad %9 
                                        f32_2 %77 = OpVectorShuffle %76 %76 0 1 
                                        f32_4 %78 = OpImageSampleImplicitLod %75 %77 
                                                      OpStore %70 %78 
                                        f32_4 %79 = OpLoad %70 
                                        f32_3 %80 = OpVectorShuffle %79 %79 0 1 2 
                               Uniform f32_4* %81 = OpAccessChain %16 %47 
                                        f32_4 %82 = OpLoad %81 
                                        f32_3 %83 = OpVectorShuffle %82 %82 0 0 0 
                                        f32_3 %84 = OpFMul %80 %83 
                                        f32_4 %85 = OpLoad %70 
                                        f32_4 %86 = OpVectorShuffle %85 %84 4 5 6 3 
                                                      OpStore %70 %86 
                                        f32_4 %87 = OpLoad %70 
                                        f32_3 %88 = OpVectorShuffle %87 %87 3 3 3 
                                        f32_4 %89 = OpLoad %70 
                                        f32_3 %90 = OpVectorShuffle %89 %89 0 1 2 
                                        f32_3 %91 = OpFMul %88 %90 
                                        f32_4 %92 = OpLoad %70 
                                        f32_4 %93 = OpVectorShuffle %92 %91 4 5 6 3 
                                                      OpStore %70 %93 
                               Uniform f32_4* %95 = OpAccessChain %16 %94 
                                        f32_4 %96 = OpLoad %95 
                                        f32_3 %97 = OpVectorShuffle %96 %96 0 1 2 
                                        f32_4 %98 = OpLoad %70 
                                        f32_3 %99 = OpVectorShuffle %98 %98 0 1 2 
                                       f32_3 %100 = OpFMul %97 %99 
                                       f32_4 %101 = OpLoad %30 
                                       f32_3 %102 = OpVectorShuffle %101 %101 0 1 2 
                                       f32_3 %103 = OpFAdd %100 %102 
                                       f32_4 %104 = OpLoad %30 
                                       f32_4 %105 = OpVectorShuffle %104 %103 4 5 6 3 
                                                      OpStore %30 %105 
                         read_only Texture2D %107 = OpLoad %106 
                                     sampler %109 = OpLoad %108 
                  read_only Texture2DSampled %110 = OpSampledImage %107 %109 
                                       f32_4 %111 = OpLoad %9 
                                       f32_2 %112 = OpVectorShuffle %111 %111 0 1 
                                       f32_4 %113 = OpImageSampleImplicitLod %110 %112 
                                                      OpStore %70 %113 
                                       f32_4 %114 = OpLoad %70 
                                       f32_3 %115 = OpVectorShuffle %114 %114 0 1 2 
                              Uniform f32_4* %116 = OpAccessChain %16 %47 
                                       f32_4 %117 = OpLoad %116 
                                       f32_3 %118 = OpVectorShuffle %117 %117 0 0 0 
                                       f32_3 %119 = OpFMul %115 %118 
                                       f32_4 %120 = OpLoad %70 
                                       f32_4 %121 = OpVectorShuffle %120 %119 4 5 6 3 
                                                      OpStore %70 %121 
                                       f32_4 %122 = OpLoad %70 
                                       f32_3 %123 = OpVectorShuffle %122 %122 3 3 3 
                                       f32_4 %124 = OpLoad %70 
                                       f32_3 %125 = OpVectorShuffle %124 %124 0 1 2 
                                       f32_3 %126 = OpFMul %123 %125 
                                       f32_4 %127 = OpLoad %70 
                                       f32_4 %128 = OpVectorShuffle %127 %126 4 5 6 3 
                                                      OpStore %70 %128 
                              Uniform f32_4* %130 = OpAccessChain %16 %129 
                                       f32_4 %131 = OpLoad %130 
                                       f32_3 %132 = OpVectorShuffle %131 %131 0 1 2 
                                       f32_4 %133 = OpLoad %70 
                                       f32_3 %134 = OpVectorShuffle %133 %133 0 1 2 
                                       f32_3 %135 = OpFMul %132 %134 
                                       f32_4 %136 = OpLoad %30 
                                       f32_3 %137 = OpVectorShuffle %136 %136 0 1 2 
                                       f32_3 %138 = OpFAdd %135 %137 
                                       f32_4 %139 = OpLoad %30 
                                       f32_4 %140 = OpVectorShuffle %139 %138 4 5 6 3 
                                                      OpStore %30 %140 
                         read_only Texture2D %142 = OpLoad %141 
                                     sampler %144 = OpLoad %143 
                  read_only Texture2DSampled %145 = OpSampledImage %142 %144 
                                       f32_4 %146 = OpLoad %9 
                                       f32_2 %147 = OpVectorShuffle %146 %146 0 1 
                                       f32_4 %148 = OpImageSampleImplicitLod %145 %147 
                                                      OpStore %70 %148 
                                       f32_4 %149 = OpLoad %70 
                                       f32_3 %150 = OpVectorShuffle %149 %149 0 1 2 
                              Uniform f32_4* %151 = OpAccessChain %16 %47 
                                       f32_4 %152 = OpLoad %151 
                                       f32_3 %153 = OpVectorShuffle %152 %152 0 0 0 
                                       f32_3 %154 = OpFMul %150 %153 
                                       f32_4 %155 = OpLoad %70 
                                       f32_4 %156 = OpVectorShuffle %155 %154 4 5 6 3 
                                                      OpStore %70 %156 
                                       f32_4 %157 = OpLoad %70 
                                       f32_3 %158 = OpVectorShuffle %157 %157 3 3 3 
                                       f32_4 %159 = OpLoad %70 
                                       f32_3 %160 = OpVectorShuffle %159 %159 0 1 2 
                                       f32_3 %161 = OpFMul %158 %160 
                                       f32_4 %162 = OpLoad %70 
                                       f32_4 %163 = OpVectorShuffle %162 %161 4 5 6 3 
                                                      OpStore %70 %163 
                              Uniform f32_4* %165 = OpAccessChain %16 %164 
                                       f32_4 %166 = OpLoad %165 
                                       f32_3 %167 = OpVectorShuffle %166 %166 0 1 2 
                                       f32_4 %168 = OpLoad %70 
                                       f32_3 %169 = OpVectorShuffle %168 %168 0 1 2 
                                       f32_3 %170 = OpFMul %167 %169 
                                       f32_4 %171 = OpLoad %30 
                                       f32_3 %172 = OpVectorShuffle %171 %171 0 1 2 
                                       f32_3 %173 = OpFAdd %170 %172 
                                       f32_4 %174 = OpLoad %30 
                                       f32_4 %175 = OpVectorShuffle %174 %173 4 5 6 3 
                                                      OpStore %30 %175 
                         read_only Texture2D %177 = OpLoad %176 
                                     sampler %179 = OpLoad %178 
                  read_only Texture2DSampled %180 = OpSampledImage %177 %179 
                                       f32_4 %181 = OpLoad %9 
                                       f32_2 %182 = OpVectorShuffle %181 %181 0 1 
                                       f32_4 %183 = OpImageSampleImplicitLod %180 %182 
                                                      OpStore %70 %183 
                         read_only Texture2D %185 = OpLoad %184 
                                     sampler %187 = OpLoad %186 
                  read_only Texture2DSampled %188 = OpSampledImage %185 %187 
                                       f32_4 %189 = OpLoad %9 
                                       f32_2 %190 = OpVectorShuffle %189 %189 0 1 
                                       f32_4 %191 = OpImageSampleImplicitLod %188 %190 
                                                      OpStore %9 %191 
                                       f32_4 %192 = OpLoad %70 
                                       f32_3 %193 = OpVectorShuffle %192 %192 0 1 2 
                              Uniform f32_4* %194 = OpAccessChain %16 %47 
                                       f32_4 %195 = OpLoad %194 
                                       f32_3 %196 = OpVectorShuffle %195 %195 0 0 0 
                                       f32_3 %197 = OpFMul %193 %196 
                                       f32_4 %198 = OpLoad %70 
                                       f32_4 %199 = OpVectorShuffle %198 %197 4 5 6 3 
                                                      OpStore %70 %199 
                                       f32_4 %200 = OpLoad %70 
                                       f32_3 %201 = OpVectorShuffle %200 %200 3 3 3 
                                       f32_4 %202 = OpLoad %70 
                                       f32_3 %203 = OpVectorShuffle %202 %202 0 1 2 
                                       f32_3 %204 = OpFMul %201 %203 
                                       f32_4 %205 = OpLoad %70 
                                       f32_4 %206 = OpVectorShuffle %205 %204 4 5 6 3 
                                                      OpStore %70 %206 
                              Uniform f32_4* %208 = OpAccessChain %16 %207 
                                       f32_4 %209 = OpLoad %208 
                                       f32_3 %210 = OpVectorShuffle %209 %209 0 1 2 
                                       f32_4 %211 = OpLoad %70 
                                       f32_3 %212 = OpVectorShuffle %211 %211 0 1 2 
                                       f32_3 %213 = OpFMul %210 %212 
                                       f32_4 %214 = OpLoad %30 
                                       f32_3 %215 = OpVectorShuffle %214 %214 0 1 2 
                                       f32_3 %216 = OpFAdd %213 %215 
                                       f32_4 %217 = OpLoad %30 
                                       f32_4 %218 = OpVectorShuffle %217 %216 4 5 6 3 
                                                      OpStore %30 %218 
                                       f32_4 %219 = OpLoad %9 
                                       f32_3 %220 = OpVectorShuffle %219 %219 0 1 2 
                              Uniform f32_4* %221 = OpAccessChain %16 %47 
                                       f32_4 %222 = OpLoad %221 
                                       f32_3 %223 = OpVectorShuffle %222 %222 0 0 0 
                                       f32_3 %224 = OpFMul %220 %223 
                                       f32_4 %225 = OpLoad %9 
                                       f32_4 %226 = OpVectorShuffle %225 %224 4 5 6 3 
                                                      OpStore %9 %226 
                                       f32_4 %227 = OpLoad %9 
                                       f32_3 %228 = OpVectorShuffle %227 %227 3 3 3 
                                       f32_4 %229 = OpLoad %9 
                                       f32_3 %230 = OpVectorShuffle %229 %229 0 1 2 
                                       f32_3 %231 = OpFMul %228 %230 
                                       f32_4 %232 = OpLoad %9 
                                       f32_4 %233 = OpVectorShuffle %232 %231 4 5 6 3 
                                                      OpStore %9 %233 
                              Uniform f32_4* %235 = OpAccessChain %16 %234 
                                       f32_4 %236 = OpLoad %235 
                                       f32_3 %237 = OpVectorShuffle %236 %236 0 1 2 
                                       f32_4 %238 = OpLoad %9 
                                       f32_3 %239 = OpVectorShuffle %238 %238 0 1 2 
                                       f32_3 %240 = OpFMul %237 %239 
                                       f32_4 %241 = OpLoad %30 
                                       f32_3 %242 = OpVectorShuffle %241 %241 0 1 2 
                                       f32_3 %243 = OpFAdd %240 %242 
                                       f32_4 %244 = OpLoad %9 
                                       f32_4 %245 = OpVectorShuffle %244 %243 4 5 6 3 
                                                      OpStore %9 %245 
                                       f32_4 %246 = OpLoad %9 
                                       f32_3 %247 = OpVectorShuffle %246 %246 0 1 2 
                              Uniform f32_4* %248 = OpAccessChain %16 %47 
                                       f32_4 %249 = OpLoad %248 
                                       f32_3 %250 = OpVectorShuffle %249 %249 1 1 1 
                                       f32_3 %251 = OpFMul %247 %250 
                                       f32_4 %252 = OpLoad %9 
                                       f32_4 %253 = OpVectorShuffle %252 %251 4 5 6 3 
                                                      OpStore %9 %253 
                                Private f32* %258 = OpAccessChain %9 %257 
                                         f32 %259 = OpLoad %258 
                                Private f32* %261 = OpAccessChain %9 %260 
                                         f32 %262 = OpLoad %261 
                                         f32 %263 = OpExtInst %1 40 %259 %262 
                                                      OpStore %255 %263 
                                Private f32* %265 = OpAccessChain %9 %264 
                                         f32 %266 = OpLoad %265 
                                         f32 %268 = OpExtInst %1 40 %266 %267 
                                Private f32* %269 = OpAccessChain %30 %260 
                                                      OpStore %269 %268 
                                         f32 %270 = OpLoad %255 
                                Private f32* %271 = OpAccessChain %30 %260 
                                         f32 %272 = OpLoad %271 
                                         f32 %273 = OpExtInst %1 40 %270 %272 
                                                      OpStore %255 %273 
                                         f32 %274 = OpLoad %255 
                                         f32 %276 = OpExtInst %1 37 %274 %275 
                                                      OpStore %255 %276 
                                         f32 %277 = OpLoad %255 
                                         f32 %279 = OpFMul %277 %278 
                                                      OpStore %255 %279 
                                         f32 %280 = OpLoad %255 
                                         f32 %281 = OpExtInst %1 9 %280 
                                                      OpStore %255 %281 
                                         f32 %282 = OpLoad %255 
                                         f32 %284 = OpFMul %282 %283 
                                                      OpStore %255 %284 
                                       f32_4 %287 = OpLoad %9 
                                       f32_3 %288 = OpVectorShuffle %287 %287 0 1 2 
                                         f32 %289 = OpLoad %255 
                                       f32_3 %290 = OpCompositeConstruct %289 %289 %289 
                                       f32_3 %291 = OpFDiv %288 %290 
                                       f32_4 %292 = OpLoad %286 
                                       f32_4 %293 = OpVectorShuffle %292 %291 4 5 6 3 
                                                      OpStore %286 %293 
                                         f32 %294 = OpLoad %255 
                                 Output f32* %297 = OpAccessChain %286 %295 
                                                      OpStore %297 %294 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "AB_HIGH_PRECISION" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "AB_HIGH_PRECISION" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in  vec4 in_POSITION0;
in  vec2 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _AnamorphicGlareWeights0;
uniform 	vec4 _AnamorphicGlareWeights1;
uniform 	vec4 _AnamorphicGlareWeights2;
uniform 	vec4 _AnamorphicGlareWeights3;
uniform 	vec4 _AnamorphicGlareWeights4;
uniform 	vec4 _AnamorphicGlareWeights5;
uniform 	vec4 _MainTex_ST;
UNITY_LOCATION(0) uniform  sampler2D _AnamorphicRTS0;
UNITY_LOCATION(1) uniform  sampler2D _AnamorphicRTS1;
UNITY_LOCATION(2) uniform  sampler2D _AnamorphicRTS2;
UNITY_LOCATION(3) uniform  sampler2D _AnamorphicRTS3;
UNITY_LOCATION(4) uniform  sampler2D _AnamorphicRTS4;
UNITY_LOCATION(5) uniform  sampler2D _AnamorphicRTS5;
in  vec2 vs_TEXCOORD0;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1 = texture(_AnamorphicRTS1, u_xlat0.xy);
    u_xlat1.xyz = u_xlat1.xyz * _AnamorphicGlareWeights1.xyz;
    u_xlat2 = texture(_AnamorphicRTS0, u_xlat0.xy);
    u_xlat1.xyz = _AnamorphicGlareWeights0.xyz * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat2 = texture(_AnamorphicRTS2, u_xlat0.xy);
    u_xlat1.xyz = _AnamorphicGlareWeights2.xyz * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat2 = texture(_AnamorphicRTS3, u_xlat0.xy);
    u_xlat1.xyz = _AnamorphicGlareWeights3.xyz * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat2 = texture(_AnamorphicRTS4, u_xlat0.xy);
    u_xlat0 = texture(_AnamorphicRTS5, u_xlat0.xy);
    u_xlat1.xyz = _AnamorphicGlareWeights4.xyz * u_xlat2.xyz + u_xlat1.xyz;
    SV_Target0.xyz = _AnamorphicGlareWeights5.xyz * u_xlat0.xyz + u_xlat1.xyz;
    SV_Target0.w = 0.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "AB_HIGH_PRECISION" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 94
; Schema: 0
                                              OpCapability Shader 
                                       %1 = OpExtInstImport "GLSL.std.450" 
                                              OpMemoryModel Logical GLSL450 
                                              OpEntryPoint Vertex %4 "main" %11 %72 %84 %86 
                                              OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                              OpDecorate %11 Location 11 
                                              OpDecorate %16 ArrayStride 16 
                                              OpDecorate %17 ArrayStride 17 
                                              OpMemberDecorate %18 0 Offset 18 
                                              OpMemberDecorate %18 1 Offset 18 
                                              OpDecorate %18 Block 
                                              OpDecorate %20 DescriptorSet 20 
                                              OpDecorate %20 Binding 20 
                                              OpMemberDecorate %70 0 BuiltIn 70 
                                              OpMemberDecorate %70 1 BuiltIn 70 
                                              OpMemberDecorate %70 2 BuiltIn 70 
                                              OpDecorate %70 Block 
                                              OpDecorate vs_TEXCOORD0 Location 84 
                                              OpDecorate %86 Location 86 
                                       %2 = OpTypeVoid 
                                       %3 = OpTypeFunction %2 
                                       %6 = OpTypeFloat 32 
                                       %7 = OpTypeVector %6 4 
                                       %8 = OpTypePointer Private %7 
                        Private f32_4* %9 = OpVariable Private 
                                      %10 = OpTypePointer Input %7 
                         Input f32_4* %11 = OpVariable Input 
                                      %14 = OpTypeInt 32 0 
                                  u32 %15 = OpConstant 4 
                                      %16 = OpTypeArray %7 %15 
                                      %17 = OpTypeArray %7 %15 
                                      %18 = OpTypeStruct %16 %17 
                                      %19 = OpTypePointer Uniform %18 
Uniform struct {f32_4[4]; f32_4[4];}* %20 = OpVariable Uniform 
                                      %21 = OpTypeInt 32 1 
                                  i32 %22 = OpConstant 0 
                                  i32 %23 = OpConstant 1 
                                      %24 = OpTypePointer Uniform %7 
                                  i32 %35 = OpConstant 2 
                                  i32 %44 = OpConstant 3 
                       Private f32_4* %48 = OpVariable Private 
                                  u32 %68 = OpConstant 1 
                                      %69 = OpTypeArray %6 %68 
                                      %70 = OpTypeStruct %7 %6 %69 
                                      %71 = OpTypePointer Output %70 
 Output struct {f32_4; f32; f32[1];}* %72 = OpVariable Output 
                                      %80 = OpTypePointer Output %7 
                                      %82 = OpTypeVector %6 2 
                                      %83 = OpTypePointer Output %82 
               Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                      %85 = OpTypePointer Input %82 
                         Input f32_2* %86 = OpVariable Input 
                                      %88 = OpTypePointer Output %6 
                                  void %4 = OpFunction None %3 
                                       %5 = OpLabel 
                                f32_4 %12 = OpLoad %11 
                                f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                       Uniform f32_4* %25 = OpAccessChain %20 %22 %23 
                                f32_4 %26 = OpLoad %25 
                                f32_4 %27 = OpFMul %13 %26 
                                              OpStore %9 %27 
                       Uniform f32_4* %28 = OpAccessChain %20 %22 %22 
                                f32_4 %29 = OpLoad %28 
                                f32_4 %30 = OpLoad %11 
                                f32_4 %31 = OpVectorShuffle %30 %30 0 0 0 0 
                                f32_4 %32 = OpFMul %29 %31 
                                f32_4 %33 = OpLoad %9 
                                f32_4 %34 = OpFAdd %32 %33 
                                              OpStore %9 %34 
                       Uniform f32_4* %36 = OpAccessChain %20 %22 %35 
                                f32_4 %37 = OpLoad %36 
                                f32_4 %38 = OpLoad %11 
                                f32_4 %39 = OpVectorShuffle %38 %38 2 2 2 2 
                                f32_4 %40 = OpFMul %37 %39 
                                f32_4 %41 = OpLoad %9 
                                f32_4 %42 = OpFAdd %40 %41 
                                              OpStore %9 %42 
                                f32_4 %43 = OpLoad %9 
                       Uniform f32_4* %45 = OpAccessChain %20 %22 %44 
                                f32_4 %46 = OpLoad %45 
                                f32_4 %47 = OpFAdd %43 %46 
                                              OpStore %9 %47 
                                f32_4 %49 = OpLoad %9 
                                f32_4 %50 = OpVectorShuffle %49 %49 1 1 1 1 
                       Uniform f32_4* %51 = OpAccessChain %20 %23 %23 
                                f32_4 %52 = OpLoad %51 
                                f32_4 %53 = OpFMul %50 %52 
                                              OpStore %48 %53 
                       Uniform f32_4* %54 = OpAccessChain %20 %23 %22 
                                f32_4 %55 = OpLoad %54 
                                f32_4 %56 = OpLoad %9 
                                f32_4 %57 = OpVectorShuffle %56 %56 0 0 0 0 
                                f32_4 %58 = OpFMul %55 %57 
                                f32_4 %59 = OpLoad %48 
                                f32_4 %60 = OpFAdd %58 %59 
                                              OpStore %48 %60 
                       Uniform f32_4* %61 = OpAccessChain %20 %23 %35 
                                f32_4 %62 = OpLoad %61 
                                f32_4 %63 = OpLoad %9 
                                f32_4 %64 = OpVectorShuffle %63 %63 2 2 2 2 
                                f32_4 %65 = OpFMul %62 %64 
                                f32_4 %66 = OpLoad %48 
                                f32_4 %67 = OpFAdd %65 %66 
                                              OpStore %48 %67 
                       Uniform f32_4* %73 = OpAccessChain %20 %23 %44 
                                f32_4 %74 = OpLoad %73 
                                f32_4 %75 = OpLoad %9 
                                f32_4 %76 = OpVectorShuffle %75 %75 3 3 3 3 
                                f32_4 %77 = OpFMul %74 %76 
                                f32_4 %78 = OpLoad %48 
                                f32_4 %79 = OpFAdd %77 %78 
                        Output f32_4* %81 = OpAccessChain %72 %22 
                                              OpStore %81 %79 
                                f32_2 %87 = OpLoad %86 
                                              OpStore vs_TEXCOORD0 %87 
                          Output f32* %89 = OpAccessChain %72 %22 %68 
                                  f32 %90 = OpLoad %89 
                                  f32 %91 = OpFNegate %90 
                          Output f32* %92 = OpAccessChain %72 %22 %68 
                                              OpStore %92 %91 
                                              OpReturn
                                              OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 148
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %12 %131 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpDecorate vs_TEXCOORD0 Location 12 
                                                      OpMemberDecorate %15 0 Offset 15 
                                                      OpMemberDecorate %15 1 Offset 15 
                                                      OpMemberDecorate %15 2 Offset 15 
                                                      OpMemberDecorate %15 3 Offset 15 
                                                      OpMemberDecorate %15 4 Offset 15 
                                                      OpMemberDecorate %15 5 Offset 15 
                                                      OpMemberDecorate %15 6 Offset 15 
                                                      OpDecorate %15 Block 
                                                      OpDecorate %17 DescriptorSet 17 
                                                      OpDecorate %17 Binding 17 
                                                      OpDecorate %34 DescriptorSet 34 
                                                      OpDecorate %34 Binding 34 
                                                      OpDecorate %38 DescriptorSet 38 
                                                      OpDecorate %38 Binding 38 
                                                      OpDecorate %53 DescriptorSet 53 
                                                      OpDecorate %53 Binding 53 
                                                      OpDecorate %55 DescriptorSet 55 
                                                      OpDecorate %55 Binding 55 
                                                      OpDecorate %70 DescriptorSet 70 
                                                      OpDecorate %70 Binding 70 
                                                      OpDecorate %72 DescriptorSet 72 
                                                      OpDecorate %72 Binding 72 
                                                      OpDecorate %87 DescriptorSet 87 
                                                      OpDecorate %87 Binding 87 
                                                      OpDecorate %89 DescriptorSet 89 
                                                      OpDecorate %89 Binding 89 
                                                      OpDecorate %104 DescriptorSet 104 
                                                      OpDecorate %104 Binding 104 
                                                      OpDecorate %106 DescriptorSet 106 
                                                      OpDecorate %106 Binding 106 
                                                      OpDecorate %113 DescriptorSet 113 
                                                      OpDecorate %113 Binding 113 
                                                      OpDecorate %115 DescriptorSet 115 
                                                      OpDecorate %115 Binding 115 
                                                      OpDecorate %131 Location 131 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 3 
                                               %8 = OpTypePointer Private %7 
                                Private f32_3* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 2 
                                              %11 = OpTypePointer Input %10 
                        Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                              %14 = OpTypeVector %6 4 
                                              %15 = OpTypeStruct %14 %14 %14 %14 %14 %14 %14 
                                              %16 = OpTypePointer Uniform %15 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4;}* %17 = OpVariable Uniform 
                                              %18 = OpTypeInt 32 1 
                                          i32 %19 = OpConstant 6 
                                              %20 = OpTypePointer Uniform %14 
                               Private f32_3* %31 = OpVariable Private 
                                              %32 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %33 = OpTypePointer UniformConstant %32 
         UniformConstant read_only Texture2D* %34 = OpVariable UniformConstant 
                                              %36 = OpTypeSampler 
                                              %37 = OpTypePointer UniformConstant %36 
                     UniformConstant sampler* %38 = OpVariable UniformConstant 
                                              %40 = OpTypeSampledImage %32 
                                          i32 %47 = OpConstant 1 
                               Private f32_3* %52 = OpVariable Private 
         UniformConstant read_only Texture2D* %53 = OpVariable UniformConstant 
                     UniformConstant sampler* %55 = OpVariable UniformConstant 
                                          i32 %62 = OpConstant 0 
         UniformConstant read_only Texture2D* %70 = OpVariable UniformConstant 
                     UniformConstant sampler* %72 = OpVariable UniformConstant 
                                          i32 %79 = OpConstant 2 
         UniformConstant read_only Texture2D* %87 = OpVariable UniformConstant 
                     UniformConstant sampler* %89 = OpVariable UniformConstant 
                                          i32 %96 = OpConstant 3 
        UniformConstant read_only Texture2D* %104 = OpVariable UniformConstant 
                    UniformConstant sampler* %106 = OpVariable UniformConstant 
        UniformConstant read_only Texture2D* %113 = OpVariable UniformConstant 
                    UniformConstant sampler* %115 = OpVariable UniformConstant 
                                         i32 %122 = OpConstant 4 
                                             %130 = OpTypePointer Output %14 
                               Output f32_4* %131 = OpVariable Output 
                                         i32 %132 = OpConstant 5 
                                         f32 %142 = OpConstant 3.674022E-40 
                                             %143 = OpTypeInt 32 0 
                                         u32 %144 = OpConstant 3 
                                             %145 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_2 %13 = OpLoad vs_TEXCOORD0 
                               Uniform f32_4* %21 = OpAccessChain %17 %19 
                                        f32_4 %22 = OpLoad %21 
                                        f32_2 %23 = OpVectorShuffle %22 %22 0 1 
                                        f32_2 %24 = OpFMul %13 %23 
                               Uniform f32_4* %25 = OpAccessChain %17 %19 
                                        f32_4 %26 = OpLoad %25 
                                        f32_2 %27 = OpVectorShuffle %26 %26 2 3 
                                        f32_2 %28 = OpFAdd %24 %27 
                                        f32_3 %29 = OpLoad %9 
                                        f32_3 %30 = OpVectorShuffle %29 %28 3 4 2 
                                                      OpStore %9 %30 
                          read_only Texture2D %35 = OpLoad %34 
                                      sampler %39 = OpLoad %38 
                   read_only Texture2DSampled %41 = OpSampledImage %35 %39 
                                        f32_3 %42 = OpLoad %9 
                                        f32_2 %43 = OpVectorShuffle %42 %42 0 1 
                                        f32_4 %44 = OpImageSampleImplicitLod %41 %43 
                                        f32_3 %45 = OpVectorShuffle %44 %44 0 1 2 
                                                      OpStore %31 %45 
                                        f32_3 %46 = OpLoad %31 
                               Uniform f32_4* %48 = OpAccessChain %17 %47 
                                        f32_4 %49 = OpLoad %48 
                                        f32_3 %50 = OpVectorShuffle %49 %49 0 1 2 
                                        f32_3 %51 = OpFMul %46 %50 
                                                      OpStore %31 %51 
                          read_only Texture2D %54 = OpLoad %53 
                                      sampler %56 = OpLoad %55 
                   read_only Texture2DSampled %57 = OpSampledImage %54 %56 
                                        f32_3 %58 = OpLoad %9 
                                        f32_2 %59 = OpVectorShuffle %58 %58 0 1 
                                        f32_4 %60 = OpImageSampleImplicitLod %57 %59 
                                        f32_3 %61 = OpVectorShuffle %60 %60 0 1 2 
                                                      OpStore %52 %61 
                               Uniform f32_4* %63 = OpAccessChain %17 %62 
                                        f32_4 %64 = OpLoad %63 
                                        f32_3 %65 = OpVectorShuffle %64 %64 0 1 2 
                                        f32_3 %66 = OpLoad %52 
                                        f32_3 %67 = OpFMul %65 %66 
                                        f32_3 %68 = OpLoad %31 
                                        f32_3 %69 = OpFAdd %67 %68 
                                                      OpStore %31 %69 
                          read_only Texture2D %71 = OpLoad %70 
                                      sampler %73 = OpLoad %72 
                   read_only Texture2DSampled %74 = OpSampledImage %71 %73 
                                        f32_3 %75 = OpLoad %9 
                                        f32_2 %76 = OpVectorShuffle %75 %75 0 1 
                                        f32_4 %77 = OpImageSampleImplicitLod %74 %76 
                                        f32_3 %78 = OpVectorShuffle %77 %77 0 1 2 
                                                      OpStore %52 %78 
                               Uniform f32_4* %80 = OpAccessChain %17 %79 
                                        f32_4 %81 = OpLoad %80 
                                        f32_3 %82 = OpVectorShuffle %81 %81 0 1 2 
                                        f32_3 %83 = OpLoad %52 
                                        f32_3 %84 = OpFMul %82 %83 
                                        f32_3 %85 = OpLoad %31 
                                        f32_3 %86 = OpFAdd %84 %85 
                                                      OpStore %31 %86 
                          read_only Texture2D %88 = OpLoad %87 
                                      sampler %90 = OpLoad %89 
                   read_only Texture2DSampled %91 = OpSampledImage %88 %90 
                                        f32_3 %92 = OpLoad %9 
                                        f32_2 %93 = OpVectorShuffle %92 %92 0 1 
                                        f32_4 %94 = OpImageSampleImplicitLod %91 %93 
                                        f32_3 %95 = OpVectorShuffle %94 %94 0 1 2 
                                                      OpStore %52 %95 
                               Uniform f32_4* %97 = OpAccessChain %17 %96 
                                        f32_4 %98 = OpLoad %97 
                                        f32_3 %99 = OpVectorShuffle %98 %98 0 1 2 
                                       f32_3 %100 = OpLoad %52 
                                       f32_3 %101 = OpFMul %99 %100 
                                       f32_3 %102 = OpLoad %31 
                                       f32_3 %103 = OpFAdd %101 %102 
                                                      OpStore %31 %103 
                         read_only Texture2D %105 = OpLoad %104 
                                     sampler %107 = OpLoad %106 
                  read_only Texture2DSampled %108 = OpSampledImage %105 %107 
                                       f32_3 %109 = OpLoad %9 
                                       f32_2 %110 = OpVectorShuffle %109 %109 0 1 
                                       f32_4 %111 = OpImageSampleImplicitLod %108 %110 
                                       f32_3 %112 = OpVectorShuffle %111 %111 0 1 2 
                                                      OpStore %52 %112 
                         read_only Texture2D %114 = OpLoad %113 
                                     sampler %116 = OpLoad %115 
                  read_only Texture2DSampled %117 = OpSampledImage %114 %116 
                                       f32_3 %118 = OpLoad %9 
                                       f32_2 %119 = OpVectorShuffle %118 %118 0 1 
                                       f32_4 %120 = OpImageSampleImplicitLod %117 %119 
                                       f32_3 %121 = OpVectorShuffle %120 %120 0 1 2 
                                                      OpStore %9 %121 
                              Uniform f32_4* %123 = OpAccessChain %17 %122 
                                       f32_4 %124 = OpLoad %123 
                                       f32_3 %125 = OpVectorShuffle %124 %124 0 1 2 
                                       f32_3 %126 = OpLoad %52 
                                       f32_3 %127 = OpFMul %125 %126 
                                       f32_3 %128 = OpLoad %31 
                                       f32_3 %129 = OpFAdd %127 %128 
                                                      OpStore %31 %129 
                              Uniform f32_4* %133 = OpAccessChain %17 %132 
                                       f32_4 %134 = OpLoad %133 
                                       f32_3 %135 = OpVectorShuffle %134 %134 0 1 2 
                                       f32_3 %136 = OpLoad %9 
                                       f32_3 %137 = OpFMul %135 %136 
                                       f32_3 %138 = OpLoad %31 
                                       f32_3 %139 = OpFAdd %137 %138 
                                       f32_4 %140 = OpLoad %131 
                                       f32_4 %141 = OpVectorShuffle %140 %139 4 5 6 3 
                                                      OpStore %131 %141 
                                 Output f32* %146 = OpAccessChain %131 %144 
                                                      OpStore %146 %142 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
}
Program "fp" {
SubProgram "d3d11 " {
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
""
}
SubProgram "vulkan " {
""
}
SubProgram "d3d11 " {
Keywords { "AB_HIGH_PRECISION" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "AB_HIGH_PRECISION" }
""
}
SubProgram "vulkan " {
Keywords { "AB_HIGH_PRECISION" }
""
}
}
}
 Pass {
  Name "frag_weightedAddPS7"
  ZTest Always
  ZWrite Off
  Cull Off
  GpuProgramID 1698184
Program "vp" {
SubProgram "d3d11 " {
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in  vec4 in_POSITION0;
in  vec2 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _AnamorphicGlareWeights0;
uniform 	vec4 _AnamorphicGlareWeights1;
uniform 	vec4 _AnamorphicGlareWeights2;
uniform 	vec4 _AnamorphicGlareWeights3;
uniform 	vec4 _AnamorphicGlareWeights4;
uniform 	vec4 _AnamorphicGlareWeights5;
uniform 	vec4 _AnamorphicGlareWeights6;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BloomRange;
UNITY_LOCATION(0) uniform  sampler2D _AnamorphicRTS0;
UNITY_LOCATION(1) uniform  sampler2D _AnamorphicRTS1;
UNITY_LOCATION(2) uniform  sampler2D _AnamorphicRTS2;
UNITY_LOCATION(3) uniform  sampler2D _AnamorphicRTS3;
UNITY_LOCATION(4) uniform  sampler2D _AnamorphicRTS4;
UNITY_LOCATION(5) uniform  sampler2D _AnamorphicRTS5;
UNITY_LOCATION(6) uniform  sampler2D _AnamorphicRTS6;
in  vec2 vs_TEXCOORD0;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat9;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1 = texture(_AnamorphicRTS1, u_xlat0.xy);
    u_xlat1.xyz = u_xlat1.xyz * _BloomRange.xxx;
    u_xlat1.xyz = u_xlat1.www * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _AnamorphicGlareWeights1.xyz;
    u_xlat2 = texture(_AnamorphicRTS0, u_xlat0.xy);
    u_xlat2.xyz = u_xlat2.xyz * _BloomRange.xxx;
    u_xlat2.xyz = u_xlat2.www * u_xlat2.xyz;
    u_xlat1.xyz = _AnamorphicGlareWeights0.xyz * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat2 = texture(_AnamorphicRTS2, u_xlat0.xy);
    u_xlat2.xyz = u_xlat2.xyz * _BloomRange.xxx;
    u_xlat2.xyz = u_xlat2.www * u_xlat2.xyz;
    u_xlat1.xyz = _AnamorphicGlareWeights2.xyz * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat2 = texture(_AnamorphicRTS3, u_xlat0.xy);
    u_xlat2.xyz = u_xlat2.xyz * _BloomRange.xxx;
    u_xlat2.xyz = u_xlat2.www * u_xlat2.xyz;
    u_xlat1.xyz = _AnamorphicGlareWeights3.xyz * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat2 = texture(_AnamorphicRTS4, u_xlat0.xy);
    u_xlat2.xyz = u_xlat2.xyz * _BloomRange.xxx;
    u_xlat2.xyz = u_xlat2.www * u_xlat2.xyz;
    u_xlat1.xyz = _AnamorphicGlareWeights4.xyz * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat2 = texture(_AnamorphicRTS5, u_xlat0.xy);
    u_xlat0 = texture(_AnamorphicRTS6, u_xlat0.xy);
    u_xlat2.xyz = u_xlat2.xyz * _BloomRange.xxx;
    u_xlat2.xyz = u_xlat2.www * u_xlat2.xyz;
    u_xlat1.xyz = _AnamorphicGlareWeights5.xyz * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.xyz * _BloomRange.xxx;
    u_xlat0.xyz = u_xlat0.www * u_xlat0.xyz;
    u_xlat0.xyz = _AnamorphicGlareWeights6.xyz * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.xyz * _BloomRange.yyy;
    u_xlat9 = max(u_xlat0.y, u_xlat0.x);
    u_xlat1.x = max(u_xlat0.z, 9.99999997e-07);
    u_xlat9 = max(u_xlat9, u_xlat1.x);
    u_xlat9 = min(u_xlat9, 1.0);
    u_xlat9 = u_xlat9 * 255.0;
    u_xlat9 = ceil(u_xlat9);
    u_xlat9 = u_xlat9 * 0.00392156886;
    SV_Target0.xyz = u_xlat0.xyz / vec3(u_xlat9);
    SV_Target0.w = u_xlat9;
    return;
}

#endif
"
}
SubProgram "vulkan " {
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 94
; Schema: 0
                                              OpCapability Shader 
                                       %1 = OpExtInstImport "GLSL.std.450" 
                                              OpMemoryModel Logical GLSL450 
                                              OpEntryPoint Vertex %4 "main" %11 %72 %84 %86 
                                              OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                              OpDecorate %11 Location 11 
                                              OpDecorate %16 ArrayStride 16 
                                              OpDecorate %17 ArrayStride 17 
                                              OpMemberDecorate %18 0 Offset 18 
                                              OpMemberDecorate %18 1 Offset 18 
                                              OpDecorate %18 Block 
                                              OpDecorate %20 DescriptorSet 20 
                                              OpDecorate %20 Binding 20 
                                              OpMemberDecorate %70 0 BuiltIn 70 
                                              OpMemberDecorate %70 1 BuiltIn 70 
                                              OpMemberDecorate %70 2 BuiltIn 70 
                                              OpDecorate %70 Block 
                                              OpDecorate vs_TEXCOORD0 Location 84 
                                              OpDecorate %86 Location 86 
                                       %2 = OpTypeVoid 
                                       %3 = OpTypeFunction %2 
                                       %6 = OpTypeFloat 32 
                                       %7 = OpTypeVector %6 4 
                                       %8 = OpTypePointer Private %7 
                        Private f32_4* %9 = OpVariable Private 
                                      %10 = OpTypePointer Input %7 
                         Input f32_4* %11 = OpVariable Input 
                                      %14 = OpTypeInt 32 0 
                                  u32 %15 = OpConstant 4 
                                      %16 = OpTypeArray %7 %15 
                                      %17 = OpTypeArray %7 %15 
                                      %18 = OpTypeStruct %16 %17 
                                      %19 = OpTypePointer Uniform %18 
Uniform struct {f32_4[4]; f32_4[4];}* %20 = OpVariable Uniform 
                                      %21 = OpTypeInt 32 1 
                                  i32 %22 = OpConstant 0 
                                  i32 %23 = OpConstant 1 
                                      %24 = OpTypePointer Uniform %7 
                                  i32 %35 = OpConstant 2 
                                  i32 %44 = OpConstant 3 
                       Private f32_4* %48 = OpVariable Private 
                                  u32 %68 = OpConstant 1 
                                      %69 = OpTypeArray %6 %68 
                                      %70 = OpTypeStruct %7 %6 %69 
                                      %71 = OpTypePointer Output %70 
 Output struct {f32_4; f32; f32[1];}* %72 = OpVariable Output 
                                      %80 = OpTypePointer Output %7 
                                      %82 = OpTypeVector %6 2 
                                      %83 = OpTypePointer Output %82 
               Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                      %85 = OpTypePointer Input %82 
                         Input f32_2* %86 = OpVariable Input 
                                      %88 = OpTypePointer Output %6 
                                  void %4 = OpFunction None %3 
                                       %5 = OpLabel 
                                f32_4 %12 = OpLoad %11 
                                f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                       Uniform f32_4* %25 = OpAccessChain %20 %22 %23 
                                f32_4 %26 = OpLoad %25 
                                f32_4 %27 = OpFMul %13 %26 
                                              OpStore %9 %27 
                       Uniform f32_4* %28 = OpAccessChain %20 %22 %22 
                                f32_4 %29 = OpLoad %28 
                                f32_4 %30 = OpLoad %11 
                                f32_4 %31 = OpVectorShuffle %30 %30 0 0 0 0 
                                f32_4 %32 = OpFMul %29 %31 
                                f32_4 %33 = OpLoad %9 
                                f32_4 %34 = OpFAdd %32 %33 
                                              OpStore %9 %34 
                       Uniform f32_4* %36 = OpAccessChain %20 %22 %35 
                                f32_4 %37 = OpLoad %36 
                                f32_4 %38 = OpLoad %11 
                                f32_4 %39 = OpVectorShuffle %38 %38 2 2 2 2 
                                f32_4 %40 = OpFMul %37 %39 
                                f32_4 %41 = OpLoad %9 
                                f32_4 %42 = OpFAdd %40 %41 
                                              OpStore %9 %42 
                                f32_4 %43 = OpLoad %9 
                       Uniform f32_4* %45 = OpAccessChain %20 %22 %44 
                                f32_4 %46 = OpLoad %45 
                                f32_4 %47 = OpFAdd %43 %46 
                                              OpStore %9 %47 
                                f32_4 %49 = OpLoad %9 
                                f32_4 %50 = OpVectorShuffle %49 %49 1 1 1 1 
                       Uniform f32_4* %51 = OpAccessChain %20 %23 %23 
                                f32_4 %52 = OpLoad %51 
                                f32_4 %53 = OpFMul %50 %52 
                                              OpStore %48 %53 
                       Uniform f32_4* %54 = OpAccessChain %20 %23 %22 
                                f32_4 %55 = OpLoad %54 
                                f32_4 %56 = OpLoad %9 
                                f32_4 %57 = OpVectorShuffle %56 %56 0 0 0 0 
                                f32_4 %58 = OpFMul %55 %57 
                                f32_4 %59 = OpLoad %48 
                                f32_4 %60 = OpFAdd %58 %59 
                                              OpStore %48 %60 
                       Uniform f32_4* %61 = OpAccessChain %20 %23 %35 
                                f32_4 %62 = OpLoad %61 
                                f32_4 %63 = OpLoad %9 
                                f32_4 %64 = OpVectorShuffle %63 %63 2 2 2 2 
                                f32_4 %65 = OpFMul %62 %64 
                                f32_4 %66 = OpLoad %48 
                                f32_4 %67 = OpFAdd %65 %66 
                                              OpStore %48 %67 
                       Uniform f32_4* %73 = OpAccessChain %20 %23 %44 
                                f32_4 %74 = OpLoad %73 
                                f32_4 %75 = OpLoad %9 
                                f32_4 %76 = OpVectorShuffle %75 %75 3 3 3 3 
                                f32_4 %77 = OpFMul %74 %76 
                                f32_4 %78 = OpLoad %48 
                                f32_4 %79 = OpFAdd %77 %78 
                        Output f32_4* %81 = OpAccessChain %72 %22 
                                              OpStore %81 %79 
                                f32_2 %87 = OpLoad %86 
                                              OpStore vs_TEXCOORD0 %87 
                          Output f32* %89 = OpAccessChain %72 %22 %68 
                                  f32 %90 = OpLoad %89 
                                  f32 %91 = OpFNegate %90 
                          Output f32* %92 = OpAccessChain %72 %22 %68 
                                              OpStore %92 %91 
                                              OpReturn
                                              OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 334
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %12 %321 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpDecorate vs_TEXCOORD0 Location 12 
                                                      OpMemberDecorate %14 0 Offset 14 
                                                      OpMemberDecorate %14 1 Offset 14 
                                                      OpMemberDecorate %14 2 Offset 14 
                                                      OpMemberDecorate %14 3 Offset 14 
                                                      OpMemberDecorate %14 4 Offset 14 
                                                      OpMemberDecorate %14 5 Offset 14 
                                                      OpMemberDecorate %14 6 Offset 14 
                                                      OpMemberDecorate %14 7 Offset 14 
                                                      OpMemberDecorate %14 8 Offset 14 
                                                      OpDecorate %14 Block 
                                                      OpDecorate %16 DescriptorSet 16 
                                                      OpDecorate %16 Binding 16 
                                                      OpDecorate %33 DescriptorSet 33 
                                                      OpDecorate %33 Binding 33 
                                                      OpDecorate %37 DescriptorSet 37 
                                                      OpDecorate %37 Binding 37 
                                                      OpDecorate %71 DescriptorSet 71 
                                                      OpDecorate %71 Binding 71 
                                                      OpDecorate %73 DescriptorSet 73 
                                                      OpDecorate %73 Binding 73 
                                                      OpDecorate %106 DescriptorSet 106 
                                                      OpDecorate %106 Binding 106 
                                                      OpDecorate %108 DescriptorSet 108 
                                                      OpDecorate %108 Binding 108 
                                                      OpDecorate %141 DescriptorSet 141 
                                                      OpDecorate %141 Binding 141 
                                                      OpDecorate %143 DescriptorSet 143 
                                                      OpDecorate %143 Binding 143 
                                                      OpDecorate %176 DescriptorSet 176 
                                                      OpDecorate %176 Binding 176 
                                                      OpDecorate %178 DescriptorSet 178 
                                                      OpDecorate %178 Binding 178 
                                                      OpDecorate %211 DescriptorSet 211 
                                                      OpDecorate %211 Binding 211 
                                                      OpDecorate %213 DescriptorSet 213 
                                                      OpDecorate %213 Binding 213 
                                                      OpDecorate %219 DescriptorSet 219 
                                                      OpDecorate %219 Binding 219 
                                                      OpDecorate %221 DescriptorSet 221 
                                                      OpDecorate %221 Binding 221 
                                                      OpDecorate %321 Location 321 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 2 
                                              %11 = OpTypePointer Input %10 
                        Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                              %14 = OpTypeStruct %7 %7 %7 %7 %7 %7 %7 %7 %7 
                                              %15 = OpTypePointer Uniform %14 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4;}* %16 = OpVariable Uniform 
                                              %17 = OpTypeInt 32 1 
                                          i32 %18 = OpConstant 7 
                                              %19 = OpTypePointer Uniform %7 
                               Private f32_4* %30 = OpVariable Private 
                                              %31 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %32 = OpTypePointer UniformConstant %31 
         UniformConstant read_only Texture2D* %33 = OpVariable UniformConstant 
                                              %35 = OpTypeSampler 
                                              %36 = OpTypePointer UniformConstant %35 
                     UniformConstant sampler* %37 = OpVariable UniformConstant 
                                              %39 = OpTypeSampledImage %31 
                                              %44 = OpTypeVector %6 3 
                                          i32 %47 = OpConstant 8 
                                          i32 %63 = OpConstant 1 
                               Private f32_4* %70 = OpVariable Private 
         UniformConstant read_only Texture2D* %71 = OpVariable UniformConstant 
                     UniformConstant sampler* %73 = OpVariable UniformConstant 
                                          i32 %94 = OpConstant 0 
        UniformConstant read_only Texture2D* %106 = OpVariable UniformConstant 
                    UniformConstant sampler* %108 = OpVariable UniformConstant 
                                         i32 %129 = OpConstant 2 
        UniformConstant read_only Texture2D* %141 = OpVariable UniformConstant 
                    UniformConstant sampler* %143 = OpVariable UniformConstant 
                                         i32 %164 = OpConstant 3 
        UniformConstant read_only Texture2D* %176 = OpVariable UniformConstant 
                    UniformConstant sampler* %178 = OpVariable UniformConstant 
                                         i32 %199 = OpConstant 4 
        UniformConstant read_only Texture2D* %211 = OpVariable UniformConstant 
                    UniformConstant sampler* %213 = OpVariable UniformConstant 
        UniformConstant read_only Texture2D* %219 = OpVariable UniformConstant 
                    UniformConstant sampler* %221 = OpVariable UniformConstant 
                                         i32 %242 = OpConstant 5 
                                         i32 %269 = OpConstant 6 
                                             %289 = OpTypePointer Private %6 
                                Private f32* %290 = OpVariable Private 
                                             %291 = OpTypeInt 32 0 
                                         u32 %292 = OpConstant 1 
                                         u32 %295 = OpConstant 0 
                                         u32 %299 = OpConstant 2 
                                         f32 %302 = OpConstant 3.674022E-40 
                                         f32 %310 = OpConstant 3.674022E-40 
                                         f32 %313 = OpConstant 3.674022E-40 
                                         f32 %318 = OpConstant 3.674022E-40 
                                             %320 = OpTypePointer Output %7 
                               Output f32_4* %321 = OpVariable Output 
                                         u32 %330 = OpConstant 3 
                                             %331 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_2 %13 = OpLoad vs_TEXCOORD0 
                               Uniform f32_4* %20 = OpAccessChain %16 %18 
                                        f32_4 %21 = OpLoad %20 
                                        f32_2 %22 = OpVectorShuffle %21 %21 0 1 
                                        f32_2 %23 = OpFMul %13 %22 
                               Uniform f32_4* %24 = OpAccessChain %16 %18 
                                        f32_4 %25 = OpLoad %24 
                                        f32_2 %26 = OpVectorShuffle %25 %25 2 3 
                                        f32_2 %27 = OpFAdd %23 %26 
                                        f32_4 %28 = OpLoad %9 
                                        f32_4 %29 = OpVectorShuffle %28 %27 4 5 2 3 
                                                      OpStore %9 %29 
                          read_only Texture2D %34 = OpLoad %33 
                                      sampler %38 = OpLoad %37 
                   read_only Texture2DSampled %40 = OpSampledImage %34 %38 
                                        f32_4 %41 = OpLoad %9 
                                        f32_2 %42 = OpVectorShuffle %41 %41 0 1 
                                        f32_4 %43 = OpImageSampleImplicitLod %40 %42 
                                                      OpStore %30 %43 
                                        f32_4 %45 = OpLoad %30 
                                        f32_3 %46 = OpVectorShuffle %45 %45 0 1 2 
                               Uniform f32_4* %48 = OpAccessChain %16 %47 
                                        f32_4 %49 = OpLoad %48 
                                        f32_3 %50 = OpVectorShuffle %49 %49 0 0 0 
                                        f32_3 %51 = OpFMul %46 %50 
                                        f32_4 %52 = OpLoad %30 
                                        f32_4 %53 = OpVectorShuffle %52 %51 4 5 6 3 
                                                      OpStore %30 %53 
                                        f32_4 %54 = OpLoad %30 
                                        f32_3 %55 = OpVectorShuffle %54 %54 3 3 3 
                                        f32_4 %56 = OpLoad %30 
                                        f32_3 %57 = OpVectorShuffle %56 %56 0 1 2 
                                        f32_3 %58 = OpFMul %55 %57 
                                        f32_4 %59 = OpLoad %30 
                                        f32_4 %60 = OpVectorShuffle %59 %58 4 5 6 3 
                                                      OpStore %30 %60 
                                        f32_4 %61 = OpLoad %30 
                                        f32_3 %62 = OpVectorShuffle %61 %61 0 1 2 
                               Uniform f32_4* %64 = OpAccessChain %16 %63 
                                        f32_4 %65 = OpLoad %64 
                                        f32_3 %66 = OpVectorShuffle %65 %65 0 1 2 
                                        f32_3 %67 = OpFMul %62 %66 
                                        f32_4 %68 = OpLoad %30 
                                        f32_4 %69 = OpVectorShuffle %68 %67 4 5 6 3 
                                                      OpStore %30 %69 
                          read_only Texture2D %72 = OpLoad %71 
                                      sampler %74 = OpLoad %73 
                   read_only Texture2DSampled %75 = OpSampledImage %72 %74 
                                        f32_4 %76 = OpLoad %9 
                                        f32_2 %77 = OpVectorShuffle %76 %76 0 1 
                                        f32_4 %78 = OpImageSampleImplicitLod %75 %77 
                                                      OpStore %70 %78 
                                        f32_4 %79 = OpLoad %70 
                                        f32_3 %80 = OpVectorShuffle %79 %79 0 1 2 
                               Uniform f32_4* %81 = OpAccessChain %16 %47 
                                        f32_4 %82 = OpLoad %81 
                                        f32_3 %83 = OpVectorShuffle %82 %82 0 0 0 
                                        f32_3 %84 = OpFMul %80 %83 
                                        f32_4 %85 = OpLoad %70 
                                        f32_4 %86 = OpVectorShuffle %85 %84 4 5 6 3 
                                                      OpStore %70 %86 
                                        f32_4 %87 = OpLoad %70 
                                        f32_3 %88 = OpVectorShuffle %87 %87 3 3 3 
                                        f32_4 %89 = OpLoad %70 
                                        f32_3 %90 = OpVectorShuffle %89 %89 0 1 2 
                                        f32_3 %91 = OpFMul %88 %90 
                                        f32_4 %92 = OpLoad %70 
                                        f32_4 %93 = OpVectorShuffle %92 %91 4 5 6 3 
                                                      OpStore %70 %93 
                               Uniform f32_4* %95 = OpAccessChain %16 %94 
                                        f32_4 %96 = OpLoad %95 
                                        f32_3 %97 = OpVectorShuffle %96 %96 0 1 2 
                                        f32_4 %98 = OpLoad %70 
                                        f32_3 %99 = OpVectorShuffle %98 %98 0 1 2 
                                       f32_3 %100 = OpFMul %97 %99 
                                       f32_4 %101 = OpLoad %30 
                                       f32_3 %102 = OpVectorShuffle %101 %101 0 1 2 
                                       f32_3 %103 = OpFAdd %100 %102 
                                       f32_4 %104 = OpLoad %30 
                                       f32_4 %105 = OpVectorShuffle %104 %103 4 5 6 3 
                                                      OpStore %30 %105 
                         read_only Texture2D %107 = OpLoad %106 
                                     sampler %109 = OpLoad %108 
                  read_only Texture2DSampled %110 = OpSampledImage %107 %109 
                                       f32_4 %111 = OpLoad %9 
                                       f32_2 %112 = OpVectorShuffle %111 %111 0 1 
                                       f32_4 %113 = OpImageSampleImplicitLod %110 %112 
                                                      OpStore %70 %113 
                                       f32_4 %114 = OpLoad %70 
                                       f32_3 %115 = OpVectorShuffle %114 %114 0 1 2 
                              Uniform f32_4* %116 = OpAccessChain %16 %47 
                                       f32_4 %117 = OpLoad %116 
                                       f32_3 %118 = OpVectorShuffle %117 %117 0 0 0 
                                       f32_3 %119 = OpFMul %115 %118 
                                       f32_4 %120 = OpLoad %70 
                                       f32_4 %121 = OpVectorShuffle %120 %119 4 5 6 3 
                                                      OpStore %70 %121 
                                       f32_4 %122 = OpLoad %70 
                                       f32_3 %123 = OpVectorShuffle %122 %122 3 3 3 
                                       f32_4 %124 = OpLoad %70 
                                       f32_3 %125 = OpVectorShuffle %124 %124 0 1 2 
                                       f32_3 %126 = OpFMul %123 %125 
                                       f32_4 %127 = OpLoad %70 
                                       f32_4 %128 = OpVectorShuffle %127 %126 4 5 6 3 
                                                      OpStore %70 %128 
                              Uniform f32_4* %130 = OpAccessChain %16 %129 
                                       f32_4 %131 = OpLoad %130 
                                       f32_3 %132 = OpVectorShuffle %131 %131 0 1 2 
                                       f32_4 %133 = OpLoad %70 
                                       f32_3 %134 = OpVectorShuffle %133 %133 0 1 2 
                                       f32_3 %135 = OpFMul %132 %134 
                                       f32_4 %136 = OpLoad %30 
                                       f32_3 %137 = OpVectorShuffle %136 %136 0 1 2 
                                       f32_3 %138 = OpFAdd %135 %137 
                                       f32_4 %139 = OpLoad %30 
                                       f32_4 %140 = OpVectorShuffle %139 %138 4 5 6 3 
                                                      OpStore %30 %140 
                         read_only Texture2D %142 = OpLoad %141 
                                     sampler %144 = OpLoad %143 
                  read_only Texture2DSampled %145 = OpSampledImage %142 %144 
                                       f32_4 %146 = OpLoad %9 
                                       f32_2 %147 = OpVectorShuffle %146 %146 0 1 
                                       f32_4 %148 = OpImageSampleImplicitLod %145 %147 
                                                      OpStore %70 %148 
                                       f32_4 %149 = OpLoad %70 
                                       f32_3 %150 = OpVectorShuffle %149 %149 0 1 2 
                              Uniform f32_4* %151 = OpAccessChain %16 %47 
                                       f32_4 %152 = OpLoad %151 
                                       f32_3 %153 = OpVectorShuffle %152 %152 0 0 0 
                                       f32_3 %154 = OpFMul %150 %153 
                                       f32_4 %155 = OpLoad %70 
                                       f32_4 %156 = OpVectorShuffle %155 %154 4 5 6 3 
                                                      OpStore %70 %156 
                                       f32_4 %157 = OpLoad %70 
                                       f32_3 %158 = OpVectorShuffle %157 %157 3 3 3 
                                       f32_4 %159 = OpLoad %70 
                                       f32_3 %160 = OpVectorShuffle %159 %159 0 1 2 
                                       f32_3 %161 = OpFMul %158 %160 
                                       f32_4 %162 = OpLoad %70 
                                       f32_4 %163 = OpVectorShuffle %162 %161 4 5 6 3 
                                                      OpStore %70 %163 
                              Uniform f32_4* %165 = OpAccessChain %16 %164 
                                       f32_4 %166 = OpLoad %165 
                                       f32_3 %167 = OpVectorShuffle %166 %166 0 1 2 
                                       f32_4 %168 = OpLoad %70 
                                       f32_3 %169 = OpVectorShuffle %168 %168 0 1 2 
                                       f32_3 %170 = OpFMul %167 %169 
                                       f32_4 %171 = OpLoad %30 
                                       f32_3 %172 = OpVectorShuffle %171 %171 0 1 2 
                                       f32_3 %173 = OpFAdd %170 %172 
                                       f32_4 %174 = OpLoad %30 
                                       f32_4 %175 = OpVectorShuffle %174 %173 4 5 6 3 
                                                      OpStore %30 %175 
                         read_only Texture2D %177 = OpLoad %176 
                                     sampler %179 = OpLoad %178 
                  read_only Texture2DSampled %180 = OpSampledImage %177 %179 
                                       f32_4 %181 = OpLoad %9 
                                       f32_2 %182 = OpVectorShuffle %181 %181 0 1 
                                       f32_4 %183 = OpImageSampleImplicitLod %180 %182 
                                                      OpStore %70 %183 
                                       f32_4 %184 = OpLoad %70 
                                       f32_3 %185 = OpVectorShuffle %184 %184 0 1 2 
                              Uniform f32_4* %186 = OpAccessChain %16 %47 
                                       f32_4 %187 = OpLoad %186 
                                       f32_3 %188 = OpVectorShuffle %187 %187 0 0 0 
                                       f32_3 %189 = OpFMul %185 %188 
                                       f32_4 %190 = OpLoad %70 
                                       f32_4 %191 = OpVectorShuffle %190 %189 4 5 6 3 
                                                      OpStore %70 %191 
                                       f32_4 %192 = OpLoad %70 
                                       f32_3 %193 = OpVectorShuffle %192 %192 3 3 3 
                                       f32_4 %194 = OpLoad %70 
                                       f32_3 %195 = OpVectorShuffle %194 %194 0 1 2 
                                       f32_3 %196 = OpFMul %193 %195 
                                       f32_4 %197 = OpLoad %70 
                                       f32_4 %198 = OpVectorShuffle %197 %196 4 5 6 3 
                                                      OpStore %70 %198 
                              Uniform f32_4* %200 = OpAccessChain %16 %199 
                                       f32_4 %201 = OpLoad %200 
                                       f32_3 %202 = OpVectorShuffle %201 %201 0 1 2 
                                       f32_4 %203 = OpLoad %70 
                                       f32_3 %204 = OpVectorShuffle %203 %203 0 1 2 
                                       f32_3 %205 = OpFMul %202 %204 
                                       f32_4 %206 = OpLoad %30 
                                       f32_3 %207 = OpVectorShuffle %206 %206 0 1 2 
                                       f32_3 %208 = OpFAdd %205 %207 
                                       f32_4 %209 = OpLoad %30 
                                       f32_4 %210 = OpVectorShuffle %209 %208 4 5 6 3 
                                                      OpStore %30 %210 
                         read_only Texture2D %212 = OpLoad %211 
                                     sampler %214 = OpLoad %213 
                  read_only Texture2DSampled %215 = OpSampledImage %212 %214 
                                       f32_4 %216 = OpLoad %9 
                                       f32_2 %217 = OpVectorShuffle %216 %216 0 1 
                                       f32_4 %218 = OpImageSampleImplicitLod %215 %217 
                                                      OpStore %70 %218 
                         read_only Texture2D %220 = OpLoad %219 
                                     sampler %222 = OpLoad %221 
                  read_only Texture2DSampled %223 = OpSampledImage %220 %222 
                                       f32_4 %224 = OpLoad %9 
                                       f32_2 %225 = OpVectorShuffle %224 %224 0 1 
                                       f32_4 %226 = OpImageSampleImplicitLod %223 %225 
                                                      OpStore %9 %226 
                                       f32_4 %227 = OpLoad %70 
                                       f32_3 %228 = OpVectorShuffle %227 %227 0 1 2 
                              Uniform f32_4* %229 = OpAccessChain %16 %47 
                                       f32_4 %230 = OpLoad %229 
                                       f32_3 %231 = OpVectorShuffle %230 %230 0 0 0 
                                       f32_3 %232 = OpFMul %228 %231 
                                       f32_4 %233 = OpLoad %70 
                                       f32_4 %234 = OpVectorShuffle %233 %232 4 5 6 3 
                                                      OpStore %70 %234 
                                       f32_4 %235 = OpLoad %70 
                                       f32_3 %236 = OpVectorShuffle %235 %235 3 3 3 
                                       f32_4 %237 = OpLoad %70 
                                       f32_3 %238 = OpVectorShuffle %237 %237 0 1 2 
                                       f32_3 %239 = OpFMul %236 %238 
                                       f32_4 %240 = OpLoad %70 
                                       f32_4 %241 = OpVectorShuffle %240 %239 4 5 6 3 
                                                      OpStore %70 %241 
                              Uniform f32_4* %243 = OpAccessChain %16 %242 
                                       f32_4 %244 = OpLoad %243 
                                       f32_3 %245 = OpVectorShuffle %244 %244 0 1 2 
                                       f32_4 %246 = OpLoad %70 
                                       f32_3 %247 = OpVectorShuffle %246 %246 0 1 2 
                                       f32_3 %248 = OpFMul %245 %247 
                                       f32_4 %249 = OpLoad %30 
                                       f32_3 %250 = OpVectorShuffle %249 %249 0 1 2 
                                       f32_3 %251 = OpFAdd %248 %250 
                                       f32_4 %252 = OpLoad %30 
                                       f32_4 %253 = OpVectorShuffle %252 %251 4 5 6 3 
                                                      OpStore %30 %253 
                                       f32_4 %254 = OpLoad %9 
                                       f32_3 %255 = OpVectorShuffle %254 %254 0 1 2 
                              Uniform f32_4* %256 = OpAccessChain %16 %47 
                                       f32_4 %257 = OpLoad %256 
                                       f32_3 %258 = OpVectorShuffle %257 %257 0 0 0 
                                       f32_3 %259 = OpFMul %255 %258 
                                       f32_4 %260 = OpLoad %9 
                                       f32_4 %261 = OpVectorShuffle %260 %259 4 5 6 3 
                                                      OpStore %9 %261 
                                       f32_4 %262 = OpLoad %9 
                                       f32_3 %263 = OpVectorShuffle %262 %262 3 3 3 
                                       f32_4 %264 = OpLoad %9 
                                       f32_3 %265 = OpVectorShuffle %264 %264 0 1 2 
                                       f32_3 %266 = OpFMul %263 %265 
                                       f32_4 %267 = OpLoad %9 
                                       f32_4 %268 = OpVectorShuffle %267 %266 4 5 6 3 
                                                      OpStore %9 %268 
                              Uniform f32_4* %270 = OpAccessChain %16 %269 
                                       f32_4 %271 = OpLoad %270 
                                       f32_3 %272 = OpVectorShuffle %271 %271 0 1 2 
                                       f32_4 %273 = OpLoad %9 
                                       f32_3 %274 = OpVectorShuffle %273 %273 0 1 2 
                                       f32_3 %275 = OpFMul %272 %274 
                                       f32_4 %276 = OpLoad %30 
                                       f32_3 %277 = OpVectorShuffle %276 %276 0 1 2 
                                       f32_3 %278 = OpFAdd %275 %277 
                                       f32_4 %279 = OpLoad %9 
                                       f32_4 %280 = OpVectorShuffle %279 %278 4 5 6 3 
                                                      OpStore %9 %280 
                                       f32_4 %281 = OpLoad %9 
                                       f32_3 %282 = OpVectorShuffle %281 %281 0 1 2 
                              Uniform f32_4* %283 = OpAccessChain %16 %47 
                                       f32_4 %284 = OpLoad %283 
                                       f32_3 %285 = OpVectorShuffle %284 %284 1 1 1 
                                       f32_3 %286 = OpFMul %282 %285 
                                       f32_4 %287 = OpLoad %9 
                                       f32_4 %288 = OpVectorShuffle %287 %286 4 5 6 3 
                                                      OpStore %9 %288 
                                Private f32* %293 = OpAccessChain %9 %292 
                                         f32 %294 = OpLoad %293 
                                Private f32* %296 = OpAccessChain %9 %295 
                                         f32 %297 = OpLoad %296 
                                         f32 %298 = OpExtInst %1 40 %294 %297 
                                                      OpStore %290 %298 
                                Private f32* %300 = OpAccessChain %9 %299 
                                         f32 %301 = OpLoad %300 
                                         f32 %303 = OpExtInst %1 40 %301 %302 
                                Private f32* %304 = OpAccessChain %30 %295 
                                                      OpStore %304 %303 
                                         f32 %305 = OpLoad %290 
                                Private f32* %306 = OpAccessChain %30 %295 
                                         f32 %307 = OpLoad %306 
                                         f32 %308 = OpExtInst %1 40 %305 %307 
                                                      OpStore %290 %308 
                                         f32 %309 = OpLoad %290 
                                         f32 %311 = OpExtInst %1 37 %309 %310 
                                                      OpStore %290 %311 
                                         f32 %312 = OpLoad %290 
                                         f32 %314 = OpFMul %312 %313 
                                                      OpStore %290 %314 
                                         f32 %315 = OpLoad %290 
                                         f32 %316 = OpExtInst %1 9 %315 
                                                      OpStore %290 %316 
                                         f32 %317 = OpLoad %290 
                                         f32 %319 = OpFMul %317 %318 
                                                      OpStore %290 %319 
                                       f32_4 %322 = OpLoad %9 
                                       f32_3 %323 = OpVectorShuffle %322 %322 0 1 2 
                                         f32 %324 = OpLoad %290 
                                       f32_3 %325 = OpCompositeConstruct %324 %324 %324 
                                       f32_3 %326 = OpFDiv %323 %325 
                                       f32_4 %327 = OpLoad %321 
                                       f32_4 %328 = OpVectorShuffle %327 %326 4 5 6 3 
                                                      OpStore %321 %328 
                                         f32 %329 = OpLoad %290 
                                 Output f32* %332 = OpAccessChain %321 %330 
                                                      OpStore %332 %329 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "AB_HIGH_PRECISION" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "AB_HIGH_PRECISION" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in  vec4 in_POSITION0;
in  vec2 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _AnamorphicGlareWeights0;
uniform 	vec4 _AnamorphicGlareWeights1;
uniform 	vec4 _AnamorphicGlareWeights2;
uniform 	vec4 _AnamorphicGlareWeights3;
uniform 	vec4 _AnamorphicGlareWeights4;
uniform 	vec4 _AnamorphicGlareWeights5;
uniform 	vec4 _AnamorphicGlareWeights6;
uniform 	vec4 _MainTex_ST;
UNITY_LOCATION(0) uniform  sampler2D _AnamorphicRTS0;
UNITY_LOCATION(1) uniform  sampler2D _AnamorphicRTS1;
UNITY_LOCATION(2) uniform  sampler2D _AnamorphicRTS2;
UNITY_LOCATION(3) uniform  sampler2D _AnamorphicRTS3;
UNITY_LOCATION(4) uniform  sampler2D _AnamorphicRTS4;
UNITY_LOCATION(5) uniform  sampler2D _AnamorphicRTS5;
UNITY_LOCATION(6) uniform  sampler2D _AnamorphicRTS6;
in  vec2 vs_TEXCOORD0;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1 = texture(_AnamorphicRTS1, u_xlat0.xy);
    u_xlat1.xyz = u_xlat1.xyz * _AnamorphicGlareWeights1.xyz;
    u_xlat2 = texture(_AnamorphicRTS0, u_xlat0.xy);
    u_xlat1.xyz = _AnamorphicGlareWeights0.xyz * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat2 = texture(_AnamorphicRTS2, u_xlat0.xy);
    u_xlat1.xyz = _AnamorphicGlareWeights2.xyz * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat2 = texture(_AnamorphicRTS3, u_xlat0.xy);
    u_xlat1.xyz = _AnamorphicGlareWeights3.xyz * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat2 = texture(_AnamorphicRTS4, u_xlat0.xy);
    u_xlat1.xyz = _AnamorphicGlareWeights4.xyz * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat2 = texture(_AnamorphicRTS5, u_xlat0.xy);
    u_xlat0 = texture(_AnamorphicRTS6, u_xlat0.xy);
    u_xlat1.xyz = _AnamorphicGlareWeights5.xyz * u_xlat2.xyz + u_xlat1.xyz;
    SV_Target0.xyz = _AnamorphicGlareWeights6.xyz * u_xlat0.xyz + u_xlat1.xyz;
    SV_Target0.w = 0.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "AB_HIGH_PRECISION" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 94
; Schema: 0
                                              OpCapability Shader 
                                       %1 = OpExtInstImport "GLSL.std.450" 
                                              OpMemoryModel Logical GLSL450 
                                              OpEntryPoint Vertex %4 "main" %11 %72 %84 %86 
                                              OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                              OpDecorate %11 Location 11 
                                              OpDecorate %16 ArrayStride 16 
                                              OpDecorate %17 ArrayStride 17 
                                              OpMemberDecorate %18 0 Offset 18 
                                              OpMemberDecorate %18 1 Offset 18 
                                              OpDecorate %18 Block 
                                              OpDecorate %20 DescriptorSet 20 
                                              OpDecorate %20 Binding 20 
                                              OpMemberDecorate %70 0 BuiltIn 70 
                                              OpMemberDecorate %70 1 BuiltIn 70 
                                              OpMemberDecorate %70 2 BuiltIn 70 
                                              OpDecorate %70 Block 
                                              OpDecorate vs_TEXCOORD0 Location 84 
                                              OpDecorate %86 Location 86 
                                       %2 = OpTypeVoid 
                                       %3 = OpTypeFunction %2 
                                       %6 = OpTypeFloat 32 
                                       %7 = OpTypeVector %6 4 
                                       %8 = OpTypePointer Private %7 
                        Private f32_4* %9 = OpVariable Private 
                                      %10 = OpTypePointer Input %7 
                         Input f32_4* %11 = OpVariable Input 
                                      %14 = OpTypeInt 32 0 
                                  u32 %15 = OpConstant 4 
                                      %16 = OpTypeArray %7 %15 
                                      %17 = OpTypeArray %7 %15 
                                      %18 = OpTypeStruct %16 %17 
                                      %19 = OpTypePointer Uniform %18 
Uniform struct {f32_4[4]; f32_4[4];}* %20 = OpVariable Uniform 
                                      %21 = OpTypeInt 32 1 
                                  i32 %22 = OpConstant 0 
                                  i32 %23 = OpConstant 1 
                                      %24 = OpTypePointer Uniform %7 
                                  i32 %35 = OpConstant 2 
                                  i32 %44 = OpConstant 3 
                       Private f32_4* %48 = OpVariable Private 
                                  u32 %68 = OpConstant 1 
                                      %69 = OpTypeArray %6 %68 
                                      %70 = OpTypeStruct %7 %6 %69 
                                      %71 = OpTypePointer Output %70 
 Output struct {f32_4; f32; f32[1];}* %72 = OpVariable Output 
                                      %80 = OpTypePointer Output %7 
                                      %82 = OpTypeVector %6 2 
                                      %83 = OpTypePointer Output %82 
               Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                      %85 = OpTypePointer Input %82 
                         Input f32_2* %86 = OpVariable Input 
                                      %88 = OpTypePointer Output %6 
                                  void %4 = OpFunction None %3 
                                       %5 = OpLabel 
                                f32_4 %12 = OpLoad %11 
                                f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                       Uniform f32_4* %25 = OpAccessChain %20 %22 %23 
                                f32_4 %26 = OpLoad %25 
                                f32_4 %27 = OpFMul %13 %26 
                                              OpStore %9 %27 
                       Uniform f32_4* %28 = OpAccessChain %20 %22 %22 
                                f32_4 %29 = OpLoad %28 
                                f32_4 %30 = OpLoad %11 
                                f32_4 %31 = OpVectorShuffle %30 %30 0 0 0 0 
                                f32_4 %32 = OpFMul %29 %31 
                                f32_4 %33 = OpLoad %9 
                                f32_4 %34 = OpFAdd %32 %33 
                                              OpStore %9 %34 
                       Uniform f32_4* %36 = OpAccessChain %20 %22 %35 
                                f32_4 %37 = OpLoad %36 
                                f32_4 %38 = OpLoad %11 
                                f32_4 %39 = OpVectorShuffle %38 %38 2 2 2 2 
                                f32_4 %40 = OpFMul %37 %39 
                                f32_4 %41 = OpLoad %9 
                                f32_4 %42 = OpFAdd %40 %41 
                                              OpStore %9 %42 
                                f32_4 %43 = OpLoad %9 
                       Uniform f32_4* %45 = OpAccessChain %20 %22 %44 
                                f32_4 %46 = OpLoad %45 
                                f32_4 %47 = OpFAdd %43 %46 
                                              OpStore %9 %47 
                                f32_4 %49 = OpLoad %9 
                                f32_4 %50 = OpVectorShuffle %49 %49 1 1 1 1 
                       Uniform f32_4* %51 = OpAccessChain %20 %23 %23 
                                f32_4 %52 = OpLoad %51 
                                f32_4 %53 = OpFMul %50 %52 
                                              OpStore %48 %53 
                       Uniform f32_4* %54 = OpAccessChain %20 %23 %22 
                                f32_4 %55 = OpLoad %54 
                                f32_4 %56 = OpLoad %9 
                                f32_4 %57 = OpVectorShuffle %56 %56 0 0 0 0 
                                f32_4 %58 = OpFMul %55 %57 
                                f32_4 %59 = OpLoad %48 
                                f32_4 %60 = OpFAdd %58 %59 
                                              OpStore %48 %60 
                       Uniform f32_4* %61 = OpAccessChain %20 %23 %35 
                                f32_4 %62 = OpLoad %61 
                                f32_4 %63 = OpLoad %9 
                                f32_4 %64 = OpVectorShuffle %63 %63 2 2 2 2 
                                f32_4 %65 = OpFMul %62 %64 
                                f32_4 %66 = OpLoad %48 
                                f32_4 %67 = OpFAdd %65 %66 
                                              OpStore %48 %67 
                       Uniform f32_4* %73 = OpAccessChain %20 %23 %44 
                                f32_4 %74 = OpLoad %73 
                                f32_4 %75 = OpLoad %9 
                                f32_4 %76 = OpVectorShuffle %75 %75 3 3 3 3 
                                f32_4 %77 = OpFMul %74 %76 
                                f32_4 %78 = OpLoad %48 
                                f32_4 %79 = OpFAdd %77 %78 
                        Output f32_4* %81 = OpAccessChain %72 %22 
                                              OpStore %81 %79 
                                f32_2 %87 = OpLoad %86 
                                              OpStore vs_TEXCOORD0 %87 
                          Output f32* %89 = OpAccessChain %72 %22 %68 
                                  f32 %90 = OpLoad %89 
                                  f32 %91 = OpFNegate %90 
                          Output f32* %92 = OpAccessChain %72 %22 %68 
                                              OpStore %92 %91 
                                              OpReturn
                                              OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 165
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %12 %148 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpDecorate vs_TEXCOORD0 Location 12 
                                                      OpMemberDecorate %15 0 Offset 15 
                                                      OpMemberDecorate %15 1 Offset 15 
                                                      OpMemberDecorate %15 2 Offset 15 
                                                      OpMemberDecorate %15 3 Offset 15 
                                                      OpMemberDecorate %15 4 Offset 15 
                                                      OpMemberDecorate %15 5 Offset 15 
                                                      OpMemberDecorate %15 6 Offset 15 
                                                      OpMemberDecorate %15 7 Offset 15 
                                                      OpDecorate %15 Block 
                                                      OpDecorate %17 DescriptorSet 17 
                                                      OpDecorate %17 Binding 17 
                                                      OpDecorate %34 DescriptorSet 34 
                                                      OpDecorate %34 Binding 34 
                                                      OpDecorate %38 DescriptorSet 38 
                                                      OpDecorate %38 Binding 38 
                                                      OpDecorate %53 DescriptorSet 53 
                                                      OpDecorate %53 Binding 53 
                                                      OpDecorate %55 DescriptorSet 55 
                                                      OpDecorate %55 Binding 55 
                                                      OpDecorate %70 DescriptorSet 70 
                                                      OpDecorate %70 Binding 70 
                                                      OpDecorate %72 DescriptorSet 72 
                                                      OpDecorate %72 Binding 72 
                                                      OpDecorate %87 DescriptorSet 87 
                                                      OpDecorate %87 Binding 87 
                                                      OpDecorate %89 DescriptorSet 89 
                                                      OpDecorate %89 Binding 89 
                                                      OpDecorate %104 DescriptorSet 104 
                                                      OpDecorate %104 Binding 104 
                                                      OpDecorate %106 DescriptorSet 106 
                                                      OpDecorate %106 Binding 106 
                                                      OpDecorate %121 DescriptorSet 121 
                                                      OpDecorate %121 Binding 121 
                                                      OpDecorate %123 DescriptorSet 123 
                                                      OpDecorate %123 Binding 123 
                                                      OpDecorate %130 DescriptorSet 130 
                                                      OpDecorate %130 Binding 130 
                                                      OpDecorate %132 DescriptorSet 132 
                                                      OpDecorate %132 Binding 132 
                                                      OpDecorate %148 Location 148 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 3 
                                               %8 = OpTypePointer Private %7 
                                Private f32_3* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 2 
                                              %11 = OpTypePointer Input %10 
                        Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                              %14 = OpTypeVector %6 4 
                                              %15 = OpTypeStruct %14 %14 %14 %14 %14 %14 %14 %14 
                                              %16 = OpTypePointer Uniform %15 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4;}* %17 = OpVariable Uniform 
                                              %18 = OpTypeInt 32 1 
                                          i32 %19 = OpConstant 7 
                                              %20 = OpTypePointer Uniform %14 
                               Private f32_3* %31 = OpVariable Private 
                                              %32 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %33 = OpTypePointer UniformConstant %32 
         UniformConstant read_only Texture2D* %34 = OpVariable UniformConstant 
                                              %36 = OpTypeSampler 
                                              %37 = OpTypePointer UniformConstant %36 
                     UniformConstant sampler* %38 = OpVariable UniformConstant 
                                              %40 = OpTypeSampledImage %32 
                                          i32 %47 = OpConstant 1 
                               Private f32_3* %52 = OpVariable Private 
         UniformConstant read_only Texture2D* %53 = OpVariable UniformConstant 
                     UniformConstant sampler* %55 = OpVariable UniformConstant 
                                          i32 %62 = OpConstant 0 
         UniformConstant read_only Texture2D* %70 = OpVariable UniformConstant 
                     UniformConstant sampler* %72 = OpVariable UniformConstant 
                                          i32 %79 = OpConstant 2 
         UniformConstant read_only Texture2D* %87 = OpVariable UniformConstant 
                     UniformConstant sampler* %89 = OpVariable UniformConstant 
                                          i32 %96 = OpConstant 3 
        UniformConstant read_only Texture2D* %104 = OpVariable UniformConstant 
                    UniformConstant sampler* %106 = OpVariable UniformConstant 
                                         i32 %113 = OpConstant 4 
        UniformConstant read_only Texture2D* %121 = OpVariable UniformConstant 
                    UniformConstant sampler* %123 = OpVariable UniformConstant 
        UniformConstant read_only Texture2D* %130 = OpVariable UniformConstant 
                    UniformConstant sampler* %132 = OpVariable UniformConstant 
                                         i32 %139 = OpConstant 5 
                                             %147 = OpTypePointer Output %14 
                               Output f32_4* %148 = OpVariable Output 
                                         i32 %149 = OpConstant 6 
                                         f32 %159 = OpConstant 3.674022E-40 
                                             %160 = OpTypeInt 32 0 
                                         u32 %161 = OpConstant 3 
                                             %162 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_2 %13 = OpLoad vs_TEXCOORD0 
                               Uniform f32_4* %21 = OpAccessChain %17 %19 
                                        f32_4 %22 = OpLoad %21 
                                        f32_2 %23 = OpVectorShuffle %22 %22 0 1 
                                        f32_2 %24 = OpFMul %13 %23 
                               Uniform f32_4* %25 = OpAccessChain %17 %19 
                                        f32_4 %26 = OpLoad %25 
                                        f32_2 %27 = OpVectorShuffle %26 %26 2 3 
                                        f32_2 %28 = OpFAdd %24 %27 
                                        f32_3 %29 = OpLoad %9 
                                        f32_3 %30 = OpVectorShuffle %29 %28 3 4 2 
                                                      OpStore %9 %30 
                          read_only Texture2D %35 = OpLoad %34 
                                      sampler %39 = OpLoad %38 
                   read_only Texture2DSampled %41 = OpSampledImage %35 %39 
                                        f32_3 %42 = OpLoad %9 
                                        f32_2 %43 = OpVectorShuffle %42 %42 0 1 
                                        f32_4 %44 = OpImageSampleImplicitLod %41 %43 
                                        f32_3 %45 = OpVectorShuffle %44 %44 0 1 2 
                                                      OpStore %31 %45 
                                        f32_3 %46 = OpLoad %31 
                               Uniform f32_4* %48 = OpAccessChain %17 %47 
                                        f32_4 %49 = OpLoad %48 
                                        f32_3 %50 = OpVectorShuffle %49 %49 0 1 2 
                                        f32_3 %51 = OpFMul %46 %50 
                                                      OpStore %31 %51 
                          read_only Texture2D %54 = OpLoad %53 
                                      sampler %56 = OpLoad %55 
                   read_only Texture2DSampled %57 = OpSampledImage %54 %56 
                                        f32_3 %58 = OpLoad %9 
                                        f32_2 %59 = OpVectorShuffle %58 %58 0 1 
                                        f32_4 %60 = OpImageSampleImplicitLod %57 %59 
                                        f32_3 %61 = OpVectorShuffle %60 %60 0 1 2 
                                                      OpStore %52 %61 
                               Uniform f32_4* %63 = OpAccessChain %17 %62 
                                        f32_4 %64 = OpLoad %63 
                                        f32_3 %65 = OpVectorShuffle %64 %64 0 1 2 
                                        f32_3 %66 = OpLoad %52 
                                        f32_3 %67 = OpFMul %65 %66 
                                        f32_3 %68 = OpLoad %31 
                                        f32_3 %69 = OpFAdd %67 %68 
                                                      OpStore %31 %69 
                          read_only Texture2D %71 = OpLoad %70 
                                      sampler %73 = OpLoad %72 
                   read_only Texture2DSampled %74 = OpSampledImage %71 %73 
                                        f32_3 %75 = OpLoad %9 
                                        f32_2 %76 = OpVectorShuffle %75 %75 0 1 
                                        f32_4 %77 = OpImageSampleImplicitLod %74 %76 
                                        f32_3 %78 = OpVectorShuffle %77 %77 0 1 2 
                                                      OpStore %52 %78 
                               Uniform f32_4* %80 = OpAccessChain %17 %79 
                                        f32_4 %81 = OpLoad %80 
                                        f32_3 %82 = OpVectorShuffle %81 %81 0 1 2 
                                        f32_3 %83 = OpLoad %52 
                                        f32_3 %84 = OpFMul %82 %83 
                                        f32_3 %85 = OpLoad %31 
                                        f32_3 %86 = OpFAdd %84 %85 
                                                      OpStore %31 %86 
                          read_only Texture2D %88 = OpLoad %87 
                                      sampler %90 = OpLoad %89 
                   read_only Texture2DSampled %91 = OpSampledImage %88 %90 
                                        f32_3 %92 = OpLoad %9 
                                        f32_2 %93 = OpVectorShuffle %92 %92 0 1 
                                        f32_4 %94 = OpImageSampleImplicitLod %91 %93 
                                        f32_3 %95 = OpVectorShuffle %94 %94 0 1 2 
                                                      OpStore %52 %95 
                               Uniform f32_4* %97 = OpAccessChain %17 %96 
                                        f32_4 %98 = OpLoad %97 
                                        f32_3 %99 = OpVectorShuffle %98 %98 0 1 2 
                                       f32_3 %100 = OpLoad %52 
                                       f32_3 %101 = OpFMul %99 %100 
                                       f32_3 %102 = OpLoad %31 
                                       f32_3 %103 = OpFAdd %101 %102 
                                                      OpStore %31 %103 
                         read_only Texture2D %105 = OpLoad %104 
                                     sampler %107 = OpLoad %106 
                  read_only Texture2DSampled %108 = OpSampledImage %105 %107 
                                       f32_3 %109 = OpLoad %9 
                                       f32_2 %110 = OpVectorShuffle %109 %109 0 1 
                                       f32_4 %111 = OpImageSampleImplicitLod %108 %110 
                                       f32_3 %112 = OpVectorShuffle %111 %111 0 1 2 
                                                      OpStore %52 %112 
                              Uniform f32_4* %114 = OpAccessChain %17 %113 
                                       f32_4 %115 = OpLoad %114 
                                       f32_3 %116 = OpVectorShuffle %115 %115 0 1 2 
                                       f32_3 %117 = OpLoad %52 
                                       f32_3 %118 = OpFMul %116 %117 
                                       f32_3 %119 = OpLoad %31 
                                       f32_3 %120 = OpFAdd %118 %119 
                                                      OpStore %31 %120 
                         read_only Texture2D %122 = OpLoad %121 
                                     sampler %124 = OpLoad %123 
                  read_only Texture2DSampled %125 = OpSampledImage %122 %124 
                                       f32_3 %126 = OpLoad %9 
                                       f32_2 %127 = OpVectorShuffle %126 %126 0 1 
                                       f32_4 %128 = OpImageSampleImplicitLod %125 %127 
                                       f32_3 %129 = OpVectorShuffle %128 %128 0 1 2 
                                                      OpStore %52 %129 
                         read_only Texture2D %131 = OpLoad %130 
                                     sampler %133 = OpLoad %132 
                  read_only Texture2DSampled %134 = OpSampledImage %131 %133 
                                       f32_3 %135 = OpLoad %9 
                                       f32_2 %136 = OpVectorShuffle %135 %135 0 1 
                                       f32_4 %137 = OpImageSampleImplicitLod %134 %136 
                                       f32_3 %138 = OpVectorShuffle %137 %137 0 1 2 
                                                      OpStore %9 %138 
                              Uniform f32_4* %140 = OpAccessChain %17 %139 
                                       f32_4 %141 = OpLoad %140 
                                       f32_3 %142 = OpVectorShuffle %141 %141 0 1 2 
                                       f32_3 %143 = OpLoad %52 
                                       f32_3 %144 = OpFMul %142 %143 
                                       f32_3 %145 = OpLoad %31 
                                       f32_3 %146 = OpFAdd %144 %145 
                                                      OpStore %31 %146 
                              Uniform f32_4* %150 = OpAccessChain %17 %149 
                                       f32_4 %151 = OpLoad %150 
                                       f32_3 %152 = OpVectorShuffle %151 %151 0 1 2 
                                       f32_3 %153 = OpLoad %9 
                                       f32_3 %154 = OpFMul %152 %153 
                                       f32_3 %155 = OpLoad %31 
                                       f32_3 %156 = OpFAdd %154 %155 
                                       f32_4 %157 = OpLoad %148 
                                       f32_4 %158 = OpVectorShuffle %157 %156 4 5 6 3 
                                                      OpStore %148 %158 
                                 Output f32* %163 = OpAccessChain %148 %161 
                                                      OpStore %163 %159 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
}
Program "fp" {
SubProgram "d3d11 " {
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
""
}
SubProgram "vulkan " {
""
}
SubProgram "d3d11 " {
Keywords { "AB_HIGH_PRECISION" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "AB_HIGH_PRECISION" }
""
}
SubProgram "vulkan " {
Keywords { "AB_HIGH_PRECISION" }
""
}
}
}
 Pass {
  Name "frag_weightedAddPS8"
  ZTest Always
  ZWrite Off
  Cull Off
  GpuProgramID 1713268
Program "vp" {
SubProgram "d3d11 " {
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in  vec4 in_POSITION0;
in  vec2 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _AnamorphicGlareWeights0;
uniform 	vec4 _AnamorphicGlareWeights1;
uniform 	vec4 _AnamorphicGlareWeights2;
uniform 	vec4 _AnamorphicGlareWeights3;
uniform 	vec4 _AnamorphicGlareWeights4;
uniform 	vec4 _AnamorphicGlareWeights5;
uniform 	vec4 _AnamorphicGlareWeights6;
uniform 	vec4 _AnamorphicGlareWeights7;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BloomRange;
UNITY_LOCATION(0) uniform  sampler2D _AnamorphicRTS0;
UNITY_LOCATION(1) uniform  sampler2D _AnamorphicRTS1;
UNITY_LOCATION(2) uniform  sampler2D _AnamorphicRTS2;
UNITY_LOCATION(3) uniform  sampler2D _AnamorphicRTS3;
UNITY_LOCATION(4) uniform  sampler2D _AnamorphicRTS4;
UNITY_LOCATION(5) uniform  sampler2D _AnamorphicRTS5;
UNITY_LOCATION(6) uniform  sampler2D _AnamorphicRTS6;
UNITY_LOCATION(7) uniform  sampler2D _AnamorphicRTS7;
in  vec2 vs_TEXCOORD0;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat9;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1 = texture(_AnamorphicRTS1, u_xlat0.xy);
    u_xlat1.xyz = u_xlat1.xyz * _BloomRange.xxx;
    u_xlat1.xyz = u_xlat1.www * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * _AnamorphicGlareWeights1.xyz;
    u_xlat2 = texture(_AnamorphicRTS0, u_xlat0.xy);
    u_xlat2.xyz = u_xlat2.xyz * _BloomRange.xxx;
    u_xlat2.xyz = u_xlat2.www * u_xlat2.xyz;
    u_xlat1.xyz = _AnamorphicGlareWeights0.xyz * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat2 = texture(_AnamorphicRTS2, u_xlat0.xy);
    u_xlat2.xyz = u_xlat2.xyz * _BloomRange.xxx;
    u_xlat2.xyz = u_xlat2.www * u_xlat2.xyz;
    u_xlat1.xyz = _AnamorphicGlareWeights2.xyz * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat2 = texture(_AnamorphicRTS3, u_xlat0.xy);
    u_xlat2.xyz = u_xlat2.xyz * _BloomRange.xxx;
    u_xlat2.xyz = u_xlat2.www * u_xlat2.xyz;
    u_xlat1.xyz = _AnamorphicGlareWeights3.xyz * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat2 = texture(_AnamorphicRTS4, u_xlat0.xy);
    u_xlat2.xyz = u_xlat2.xyz * _BloomRange.xxx;
    u_xlat2.xyz = u_xlat2.www * u_xlat2.xyz;
    u_xlat1.xyz = _AnamorphicGlareWeights4.xyz * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat2 = texture(_AnamorphicRTS5, u_xlat0.xy);
    u_xlat2.xyz = u_xlat2.xyz * _BloomRange.xxx;
    u_xlat2.xyz = u_xlat2.www * u_xlat2.xyz;
    u_xlat1.xyz = _AnamorphicGlareWeights5.xyz * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat2 = texture(_AnamorphicRTS6, u_xlat0.xy);
    u_xlat0 = texture(_AnamorphicRTS7, u_xlat0.xy);
    u_xlat2.xyz = u_xlat2.xyz * _BloomRange.xxx;
    u_xlat2.xyz = u_xlat2.www * u_xlat2.xyz;
    u_xlat1.xyz = _AnamorphicGlareWeights6.xyz * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.xyz * _BloomRange.xxx;
    u_xlat0.xyz = u_xlat0.www * u_xlat0.xyz;
    u_xlat0.xyz = _AnamorphicGlareWeights7.xyz * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.xyz * _BloomRange.yyy;
    u_xlat9 = max(u_xlat0.y, u_xlat0.x);
    u_xlat1.x = max(u_xlat0.z, 9.99999997e-07);
    u_xlat9 = max(u_xlat9, u_xlat1.x);
    u_xlat9 = min(u_xlat9, 1.0);
    u_xlat9 = u_xlat9 * 255.0;
    u_xlat9 = ceil(u_xlat9);
    u_xlat9 = u_xlat9 * 0.00392156886;
    SV_Target0.xyz = u_xlat0.xyz / vec3(u_xlat9);
    SV_Target0.w = u_xlat9;
    return;
}

#endif
"
}
SubProgram "vulkan " {
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 94
; Schema: 0
                                              OpCapability Shader 
                                       %1 = OpExtInstImport "GLSL.std.450" 
                                              OpMemoryModel Logical GLSL450 
                                              OpEntryPoint Vertex %4 "main" %11 %72 %84 %86 
                                              OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                              OpDecorate %11 Location 11 
                                              OpDecorate %16 ArrayStride 16 
                                              OpDecorate %17 ArrayStride 17 
                                              OpMemberDecorate %18 0 Offset 18 
                                              OpMemberDecorate %18 1 Offset 18 
                                              OpDecorate %18 Block 
                                              OpDecorate %20 DescriptorSet 20 
                                              OpDecorate %20 Binding 20 
                                              OpMemberDecorate %70 0 BuiltIn 70 
                                              OpMemberDecorate %70 1 BuiltIn 70 
                                              OpMemberDecorate %70 2 BuiltIn 70 
                                              OpDecorate %70 Block 
                                              OpDecorate vs_TEXCOORD0 Location 84 
                                              OpDecorate %86 Location 86 
                                       %2 = OpTypeVoid 
                                       %3 = OpTypeFunction %2 
                                       %6 = OpTypeFloat 32 
                                       %7 = OpTypeVector %6 4 
                                       %8 = OpTypePointer Private %7 
                        Private f32_4* %9 = OpVariable Private 
                                      %10 = OpTypePointer Input %7 
                         Input f32_4* %11 = OpVariable Input 
                                      %14 = OpTypeInt 32 0 
                                  u32 %15 = OpConstant 4 
                                      %16 = OpTypeArray %7 %15 
                                      %17 = OpTypeArray %7 %15 
                                      %18 = OpTypeStruct %16 %17 
                                      %19 = OpTypePointer Uniform %18 
Uniform struct {f32_4[4]; f32_4[4];}* %20 = OpVariable Uniform 
                                      %21 = OpTypeInt 32 1 
                                  i32 %22 = OpConstant 0 
                                  i32 %23 = OpConstant 1 
                                      %24 = OpTypePointer Uniform %7 
                                  i32 %35 = OpConstant 2 
                                  i32 %44 = OpConstant 3 
                       Private f32_4* %48 = OpVariable Private 
                                  u32 %68 = OpConstant 1 
                                      %69 = OpTypeArray %6 %68 
                                      %70 = OpTypeStruct %7 %6 %69 
                                      %71 = OpTypePointer Output %70 
 Output struct {f32_4; f32; f32[1];}* %72 = OpVariable Output 
                                      %80 = OpTypePointer Output %7 
                                      %82 = OpTypeVector %6 2 
                                      %83 = OpTypePointer Output %82 
               Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                      %85 = OpTypePointer Input %82 
                         Input f32_2* %86 = OpVariable Input 
                                      %88 = OpTypePointer Output %6 
                                  void %4 = OpFunction None %3 
                                       %5 = OpLabel 
                                f32_4 %12 = OpLoad %11 
                                f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                       Uniform f32_4* %25 = OpAccessChain %20 %22 %23 
                                f32_4 %26 = OpLoad %25 
                                f32_4 %27 = OpFMul %13 %26 
                                              OpStore %9 %27 
                       Uniform f32_4* %28 = OpAccessChain %20 %22 %22 
                                f32_4 %29 = OpLoad %28 
                                f32_4 %30 = OpLoad %11 
                                f32_4 %31 = OpVectorShuffle %30 %30 0 0 0 0 
                                f32_4 %32 = OpFMul %29 %31 
                                f32_4 %33 = OpLoad %9 
                                f32_4 %34 = OpFAdd %32 %33 
                                              OpStore %9 %34 
                       Uniform f32_4* %36 = OpAccessChain %20 %22 %35 
                                f32_4 %37 = OpLoad %36 
                                f32_4 %38 = OpLoad %11 
                                f32_4 %39 = OpVectorShuffle %38 %38 2 2 2 2 
                                f32_4 %40 = OpFMul %37 %39 
                                f32_4 %41 = OpLoad %9 
                                f32_4 %42 = OpFAdd %40 %41 
                                              OpStore %9 %42 
                                f32_4 %43 = OpLoad %9 
                       Uniform f32_4* %45 = OpAccessChain %20 %22 %44 
                                f32_4 %46 = OpLoad %45 
                                f32_4 %47 = OpFAdd %43 %46 
                                              OpStore %9 %47 
                                f32_4 %49 = OpLoad %9 
                                f32_4 %50 = OpVectorShuffle %49 %49 1 1 1 1 
                       Uniform f32_4* %51 = OpAccessChain %20 %23 %23 
                                f32_4 %52 = OpLoad %51 
                                f32_4 %53 = OpFMul %50 %52 
                                              OpStore %48 %53 
                       Uniform f32_4* %54 = OpAccessChain %20 %23 %22 
                                f32_4 %55 = OpLoad %54 
                                f32_4 %56 = OpLoad %9 
                                f32_4 %57 = OpVectorShuffle %56 %56 0 0 0 0 
                                f32_4 %58 = OpFMul %55 %57 
                                f32_4 %59 = OpLoad %48 
                                f32_4 %60 = OpFAdd %58 %59 
                                              OpStore %48 %60 
                       Uniform f32_4* %61 = OpAccessChain %20 %23 %35 
                                f32_4 %62 = OpLoad %61 
                                f32_4 %63 = OpLoad %9 
                                f32_4 %64 = OpVectorShuffle %63 %63 2 2 2 2 
                                f32_4 %65 = OpFMul %62 %64 
                                f32_4 %66 = OpLoad %48 
                                f32_4 %67 = OpFAdd %65 %66 
                                              OpStore %48 %67 
                       Uniform f32_4* %73 = OpAccessChain %20 %23 %44 
                                f32_4 %74 = OpLoad %73 
                                f32_4 %75 = OpLoad %9 
                                f32_4 %76 = OpVectorShuffle %75 %75 3 3 3 3 
                                f32_4 %77 = OpFMul %74 %76 
                                f32_4 %78 = OpLoad %48 
                                f32_4 %79 = OpFAdd %77 %78 
                        Output f32_4* %81 = OpAccessChain %72 %22 
                                              OpStore %81 %79 
                                f32_2 %87 = OpLoad %86 
                                              OpStore vs_TEXCOORD0 %87 
                          Output f32* %89 = OpAccessChain %72 %22 %68 
                                  f32 %90 = OpLoad %89 
                                  f32 %91 = OpFNegate %90 
                          Output f32* %92 = OpAccessChain %72 %22 %68 
                                              OpStore %92 %91 
                                              OpReturn
                                              OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 369
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %12 %356 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpDecorate vs_TEXCOORD0 Location 12 
                                                      OpMemberDecorate %14 0 Offset 14 
                                                      OpMemberDecorate %14 1 Offset 14 
                                                      OpMemberDecorate %14 2 Offset 14 
                                                      OpMemberDecorate %14 3 Offset 14 
                                                      OpMemberDecorate %14 4 Offset 14 
                                                      OpMemberDecorate %14 5 Offset 14 
                                                      OpMemberDecorate %14 6 Offset 14 
                                                      OpMemberDecorate %14 7 Offset 14 
                                                      OpMemberDecorate %14 8 Offset 14 
                                                      OpMemberDecorate %14 9 Offset 14 
                                                      OpDecorate %14 Block 
                                                      OpDecorate %16 DescriptorSet 16 
                                                      OpDecorate %16 Binding 16 
                                                      OpDecorate %33 DescriptorSet 33 
                                                      OpDecorate %33 Binding 33 
                                                      OpDecorate %37 DescriptorSet 37 
                                                      OpDecorate %37 Binding 37 
                                                      OpDecorate %71 DescriptorSet 71 
                                                      OpDecorate %71 Binding 71 
                                                      OpDecorate %73 DescriptorSet 73 
                                                      OpDecorate %73 Binding 73 
                                                      OpDecorate %106 DescriptorSet 106 
                                                      OpDecorate %106 Binding 106 
                                                      OpDecorate %108 DescriptorSet 108 
                                                      OpDecorate %108 Binding 108 
                                                      OpDecorate %141 DescriptorSet 141 
                                                      OpDecorate %141 Binding 141 
                                                      OpDecorate %143 DescriptorSet 143 
                                                      OpDecorate %143 Binding 143 
                                                      OpDecorate %176 DescriptorSet 176 
                                                      OpDecorate %176 Binding 176 
                                                      OpDecorate %178 DescriptorSet 178 
                                                      OpDecorate %178 Binding 178 
                                                      OpDecorate %211 DescriptorSet 211 
                                                      OpDecorate %211 Binding 211 
                                                      OpDecorate %213 DescriptorSet 213 
                                                      OpDecorate %213 Binding 213 
                                                      OpDecorate %246 DescriptorSet 246 
                                                      OpDecorate %246 Binding 246 
                                                      OpDecorate %248 DescriptorSet 248 
                                                      OpDecorate %248 Binding 248 
                                                      OpDecorate %254 DescriptorSet 254 
                                                      OpDecorate %254 Binding 254 
                                                      OpDecorate %256 DescriptorSet 256 
                                                      OpDecorate %256 Binding 256 
                                                      OpDecorate %356 Location 356 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 2 
                                              %11 = OpTypePointer Input %10 
                        Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                              %14 = OpTypeStruct %7 %7 %7 %7 %7 %7 %7 %7 %7 %7 
                                              %15 = OpTypePointer Uniform %14 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4;}* %16 = OpVariable Uniform 
                                              %17 = OpTypeInt 32 1 
                                          i32 %18 = OpConstant 8 
                                              %19 = OpTypePointer Uniform %7 
                               Private f32_4* %30 = OpVariable Private 
                                              %31 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %32 = OpTypePointer UniformConstant %31 
         UniformConstant read_only Texture2D* %33 = OpVariable UniformConstant 
                                              %35 = OpTypeSampler 
                                              %36 = OpTypePointer UniformConstant %35 
                     UniformConstant sampler* %37 = OpVariable UniformConstant 
                                              %39 = OpTypeSampledImage %31 
                                              %44 = OpTypeVector %6 3 
                                          i32 %47 = OpConstant 9 
                                          i32 %63 = OpConstant 1 
                               Private f32_4* %70 = OpVariable Private 
         UniformConstant read_only Texture2D* %71 = OpVariable UniformConstant 
                     UniformConstant sampler* %73 = OpVariable UniformConstant 
                                          i32 %94 = OpConstant 0 
        UniformConstant read_only Texture2D* %106 = OpVariable UniformConstant 
                    UniformConstant sampler* %108 = OpVariable UniformConstant 
                                         i32 %129 = OpConstant 2 
        UniformConstant read_only Texture2D* %141 = OpVariable UniformConstant 
                    UniformConstant sampler* %143 = OpVariable UniformConstant 
                                         i32 %164 = OpConstant 3 
        UniformConstant read_only Texture2D* %176 = OpVariable UniformConstant 
                    UniformConstant sampler* %178 = OpVariable UniformConstant 
                                         i32 %199 = OpConstant 4 
        UniformConstant read_only Texture2D* %211 = OpVariable UniformConstant 
                    UniformConstant sampler* %213 = OpVariable UniformConstant 
                                         i32 %234 = OpConstant 5 
        UniformConstant read_only Texture2D* %246 = OpVariable UniformConstant 
                    UniformConstant sampler* %248 = OpVariable UniformConstant 
        UniformConstant read_only Texture2D* %254 = OpVariable UniformConstant 
                    UniformConstant sampler* %256 = OpVariable UniformConstant 
                                         i32 %277 = OpConstant 6 
                                         i32 %304 = OpConstant 7 
                                             %324 = OpTypePointer Private %6 
                                Private f32* %325 = OpVariable Private 
                                             %326 = OpTypeInt 32 0 
                                         u32 %327 = OpConstant 1 
                                         u32 %330 = OpConstant 0 
                                         u32 %334 = OpConstant 2 
                                         f32 %337 = OpConstant 3.674022E-40 
                                         f32 %345 = OpConstant 3.674022E-40 
                                         f32 %348 = OpConstant 3.674022E-40 
                                         f32 %353 = OpConstant 3.674022E-40 
                                             %355 = OpTypePointer Output %7 
                               Output f32_4* %356 = OpVariable Output 
                                         u32 %365 = OpConstant 3 
                                             %366 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_2 %13 = OpLoad vs_TEXCOORD0 
                               Uniform f32_4* %20 = OpAccessChain %16 %18 
                                        f32_4 %21 = OpLoad %20 
                                        f32_2 %22 = OpVectorShuffle %21 %21 0 1 
                                        f32_2 %23 = OpFMul %13 %22 
                               Uniform f32_4* %24 = OpAccessChain %16 %18 
                                        f32_4 %25 = OpLoad %24 
                                        f32_2 %26 = OpVectorShuffle %25 %25 2 3 
                                        f32_2 %27 = OpFAdd %23 %26 
                                        f32_4 %28 = OpLoad %9 
                                        f32_4 %29 = OpVectorShuffle %28 %27 4 5 2 3 
                                                      OpStore %9 %29 
                          read_only Texture2D %34 = OpLoad %33 
                                      sampler %38 = OpLoad %37 
                   read_only Texture2DSampled %40 = OpSampledImage %34 %38 
                                        f32_4 %41 = OpLoad %9 
                                        f32_2 %42 = OpVectorShuffle %41 %41 0 1 
                                        f32_4 %43 = OpImageSampleImplicitLod %40 %42 
                                                      OpStore %30 %43 
                                        f32_4 %45 = OpLoad %30 
                                        f32_3 %46 = OpVectorShuffle %45 %45 0 1 2 
                               Uniform f32_4* %48 = OpAccessChain %16 %47 
                                        f32_4 %49 = OpLoad %48 
                                        f32_3 %50 = OpVectorShuffle %49 %49 0 0 0 
                                        f32_3 %51 = OpFMul %46 %50 
                                        f32_4 %52 = OpLoad %30 
                                        f32_4 %53 = OpVectorShuffle %52 %51 4 5 6 3 
                                                      OpStore %30 %53 
                                        f32_4 %54 = OpLoad %30 
                                        f32_3 %55 = OpVectorShuffle %54 %54 3 3 3 
                                        f32_4 %56 = OpLoad %30 
                                        f32_3 %57 = OpVectorShuffle %56 %56 0 1 2 
                                        f32_3 %58 = OpFMul %55 %57 
                                        f32_4 %59 = OpLoad %30 
                                        f32_4 %60 = OpVectorShuffle %59 %58 4 5 6 3 
                                                      OpStore %30 %60 
                                        f32_4 %61 = OpLoad %30 
                                        f32_3 %62 = OpVectorShuffle %61 %61 0 1 2 
                               Uniform f32_4* %64 = OpAccessChain %16 %63 
                                        f32_4 %65 = OpLoad %64 
                                        f32_3 %66 = OpVectorShuffle %65 %65 0 1 2 
                                        f32_3 %67 = OpFMul %62 %66 
                                        f32_4 %68 = OpLoad %30 
                                        f32_4 %69 = OpVectorShuffle %68 %67 4 5 6 3 
                                                      OpStore %30 %69 
                          read_only Texture2D %72 = OpLoad %71 
                                      sampler %74 = OpLoad %73 
                   read_only Texture2DSampled %75 = OpSampledImage %72 %74 
                                        f32_4 %76 = OpLoad %9 
                                        f32_2 %77 = OpVectorShuffle %76 %76 0 1 
                                        f32_4 %78 = OpImageSampleImplicitLod %75 %77 
                                                      OpStore %70 %78 
                                        f32_4 %79 = OpLoad %70 
                                        f32_3 %80 = OpVectorShuffle %79 %79 0 1 2 
                               Uniform f32_4* %81 = OpAccessChain %16 %47 
                                        f32_4 %82 = OpLoad %81 
                                        f32_3 %83 = OpVectorShuffle %82 %82 0 0 0 
                                        f32_3 %84 = OpFMul %80 %83 
                                        f32_4 %85 = OpLoad %70 
                                        f32_4 %86 = OpVectorShuffle %85 %84 4 5 6 3 
                                                      OpStore %70 %86 
                                        f32_4 %87 = OpLoad %70 
                                        f32_3 %88 = OpVectorShuffle %87 %87 3 3 3 
                                        f32_4 %89 = OpLoad %70 
                                        f32_3 %90 = OpVectorShuffle %89 %89 0 1 2 
                                        f32_3 %91 = OpFMul %88 %90 
                                        f32_4 %92 = OpLoad %70 
                                        f32_4 %93 = OpVectorShuffle %92 %91 4 5 6 3 
                                                      OpStore %70 %93 
                               Uniform f32_4* %95 = OpAccessChain %16 %94 
                                        f32_4 %96 = OpLoad %95 
                                        f32_3 %97 = OpVectorShuffle %96 %96 0 1 2 
                                        f32_4 %98 = OpLoad %70 
                                        f32_3 %99 = OpVectorShuffle %98 %98 0 1 2 
                                       f32_3 %100 = OpFMul %97 %99 
                                       f32_4 %101 = OpLoad %30 
                                       f32_3 %102 = OpVectorShuffle %101 %101 0 1 2 
                                       f32_3 %103 = OpFAdd %100 %102 
                                       f32_4 %104 = OpLoad %30 
                                       f32_4 %105 = OpVectorShuffle %104 %103 4 5 6 3 
                                                      OpStore %30 %105 
                         read_only Texture2D %107 = OpLoad %106 
                                     sampler %109 = OpLoad %108 
                  read_only Texture2DSampled %110 = OpSampledImage %107 %109 
                                       f32_4 %111 = OpLoad %9 
                                       f32_2 %112 = OpVectorShuffle %111 %111 0 1 
                                       f32_4 %113 = OpImageSampleImplicitLod %110 %112 
                                                      OpStore %70 %113 
                                       f32_4 %114 = OpLoad %70 
                                       f32_3 %115 = OpVectorShuffle %114 %114 0 1 2 
                              Uniform f32_4* %116 = OpAccessChain %16 %47 
                                       f32_4 %117 = OpLoad %116 
                                       f32_3 %118 = OpVectorShuffle %117 %117 0 0 0 
                                       f32_3 %119 = OpFMul %115 %118 
                                       f32_4 %120 = OpLoad %70 
                                       f32_4 %121 = OpVectorShuffle %120 %119 4 5 6 3 
                                                      OpStore %70 %121 
                                       f32_4 %122 = OpLoad %70 
                                       f32_3 %123 = OpVectorShuffle %122 %122 3 3 3 
                                       f32_4 %124 = OpLoad %70 
                                       f32_3 %125 = OpVectorShuffle %124 %124 0 1 2 
                                       f32_3 %126 = OpFMul %123 %125 
                                       f32_4 %127 = OpLoad %70 
                                       f32_4 %128 = OpVectorShuffle %127 %126 4 5 6 3 
                                                      OpStore %70 %128 
                              Uniform f32_4* %130 = OpAccessChain %16 %129 
                                       f32_4 %131 = OpLoad %130 
                                       f32_3 %132 = OpVectorShuffle %131 %131 0 1 2 
                                       f32_4 %133 = OpLoad %70 
                                       f32_3 %134 = OpVectorShuffle %133 %133 0 1 2 
                                       f32_3 %135 = OpFMul %132 %134 
                                       f32_4 %136 = OpLoad %30 
                                       f32_3 %137 = OpVectorShuffle %136 %136 0 1 2 
                                       f32_3 %138 = OpFAdd %135 %137 
                                       f32_4 %139 = OpLoad %30 
                                       f32_4 %140 = OpVectorShuffle %139 %138 4 5 6 3 
                                                      OpStore %30 %140 
                         read_only Texture2D %142 = OpLoad %141 
                                     sampler %144 = OpLoad %143 
                  read_only Texture2DSampled %145 = OpSampledImage %142 %144 
                                       f32_4 %146 = OpLoad %9 
                                       f32_2 %147 = OpVectorShuffle %146 %146 0 1 
                                       f32_4 %148 = OpImageSampleImplicitLod %145 %147 
                                                      OpStore %70 %148 
                                       f32_4 %149 = OpLoad %70 
                                       f32_3 %150 = OpVectorShuffle %149 %149 0 1 2 
                              Uniform f32_4* %151 = OpAccessChain %16 %47 
                                       f32_4 %152 = OpLoad %151 
                                       f32_3 %153 = OpVectorShuffle %152 %152 0 0 0 
                                       f32_3 %154 = OpFMul %150 %153 
                                       f32_4 %155 = OpLoad %70 
                                       f32_4 %156 = OpVectorShuffle %155 %154 4 5 6 3 
                                                      OpStore %70 %156 
                                       f32_4 %157 = OpLoad %70 
                                       f32_3 %158 = OpVectorShuffle %157 %157 3 3 3 
                                       f32_4 %159 = OpLoad %70 
                                       f32_3 %160 = OpVectorShuffle %159 %159 0 1 2 
                                       f32_3 %161 = OpFMul %158 %160 
                                       f32_4 %162 = OpLoad %70 
                                       f32_4 %163 = OpVectorShuffle %162 %161 4 5 6 3 
                                                      OpStore %70 %163 
                              Uniform f32_4* %165 = OpAccessChain %16 %164 
                                       f32_4 %166 = OpLoad %165 
                                       f32_3 %167 = OpVectorShuffle %166 %166 0 1 2 
                                       f32_4 %168 = OpLoad %70 
                                       f32_3 %169 = OpVectorShuffle %168 %168 0 1 2 
                                       f32_3 %170 = OpFMul %167 %169 
                                       f32_4 %171 = OpLoad %30 
                                       f32_3 %172 = OpVectorShuffle %171 %171 0 1 2 
                                       f32_3 %173 = OpFAdd %170 %172 
                                       f32_4 %174 = OpLoad %30 
                                       f32_4 %175 = OpVectorShuffle %174 %173 4 5 6 3 
                                                      OpStore %30 %175 
                         read_only Texture2D %177 = OpLoad %176 
                                     sampler %179 = OpLoad %178 
                  read_only Texture2DSampled %180 = OpSampledImage %177 %179 
                                       f32_4 %181 = OpLoad %9 
                                       f32_2 %182 = OpVectorShuffle %181 %181 0 1 
                                       f32_4 %183 = OpImageSampleImplicitLod %180 %182 
                                                      OpStore %70 %183 
                                       f32_4 %184 = OpLoad %70 
                                       f32_3 %185 = OpVectorShuffle %184 %184 0 1 2 
                              Uniform f32_4* %186 = OpAccessChain %16 %47 
                                       f32_4 %187 = OpLoad %186 
                                       f32_3 %188 = OpVectorShuffle %187 %187 0 0 0 
                                       f32_3 %189 = OpFMul %185 %188 
                                       f32_4 %190 = OpLoad %70 
                                       f32_4 %191 = OpVectorShuffle %190 %189 4 5 6 3 
                                                      OpStore %70 %191 
                                       f32_4 %192 = OpLoad %70 
                                       f32_3 %193 = OpVectorShuffle %192 %192 3 3 3 
                                       f32_4 %194 = OpLoad %70 
                                       f32_3 %195 = OpVectorShuffle %194 %194 0 1 2 
                                       f32_3 %196 = OpFMul %193 %195 
                                       f32_4 %197 = OpLoad %70 
                                       f32_4 %198 = OpVectorShuffle %197 %196 4 5 6 3 
                                                      OpStore %70 %198 
                              Uniform f32_4* %200 = OpAccessChain %16 %199 
                                       f32_4 %201 = OpLoad %200 
                                       f32_3 %202 = OpVectorShuffle %201 %201 0 1 2 
                                       f32_4 %203 = OpLoad %70 
                                       f32_3 %204 = OpVectorShuffle %203 %203 0 1 2 
                                       f32_3 %205 = OpFMul %202 %204 
                                       f32_4 %206 = OpLoad %30 
                                       f32_3 %207 = OpVectorShuffle %206 %206 0 1 2 
                                       f32_3 %208 = OpFAdd %205 %207 
                                       f32_4 %209 = OpLoad %30 
                                       f32_4 %210 = OpVectorShuffle %209 %208 4 5 6 3 
                                                      OpStore %30 %210 
                         read_only Texture2D %212 = OpLoad %211 
                                     sampler %214 = OpLoad %213 
                  read_only Texture2DSampled %215 = OpSampledImage %212 %214 
                                       f32_4 %216 = OpLoad %9 
                                       f32_2 %217 = OpVectorShuffle %216 %216 0 1 
                                       f32_4 %218 = OpImageSampleImplicitLod %215 %217 
                                                      OpStore %70 %218 
                                       f32_4 %219 = OpLoad %70 
                                       f32_3 %220 = OpVectorShuffle %219 %219 0 1 2 
                              Uniform f32_4* %221 = OpAccessChain %16 %47 
                                       f32_4 %222 = OpLoad %221 
                                       f32_3 %223 = OpVectorShuffle %222 %222 0 0 0 
                                       f32_3 %224 = OpFMul %220 %223 
                                       f32_4 %225 = OpLoad %70 
                                       f32_4 %226 = OpVectorShuffle %225 %224 4 5 6 3 
                                                      OpStore %70 %226 
                                       f32_4 %227 = OpLoad %70 
                                       f32_3 %228 = OpVectorShuffle %227 %227 3 3 3 
                                       f32_4 %229 = OpLoad %70 
                                       f32_3 %230 = OpVectorShuffle %229 %229 0 1 2 
                                       f32_3 %231 = OpFMul %228 %230 
                                       f32_4 %232 = OpLoad %70 
                                       f32_4 %233 = OpVectorShuffle %232 %231 4 5 6 3 
                                                      OpStore %70 %233 
                              Uniform f32_4* %235 = OpAccessChain %16 %234 
                                       f32_4 %236 = OpLoad %235 
                                       f32_3 %237 = OpVectorShuffle %236 %236 0 1 2 
                                       f32_4 %238 = OpLoad %70 
                                       f32_3 %239 = OpVectorShuffle %238 %238 0 1 2 
                                       f32_3 %240 = OpFMul %237 %239 
                                       f32_4 %241 = OpLoad %30 
                                       f32_3 %242 = OpVectorShuffle %241 %241 0 1 2 
                                       f32_3 %243 = OpFAdd %240 %242 
                                       f32_4 %244 = OpLoad %30 
                                       f32_4 %245 = OpVectorShuffle %244 %243 4 5 6 3 
                                                      OpStore %30 %245 
                         read_only Texture2D %247 = OpLoad %246 
                                     sampler %249 = OpLoad %248 
                  read_only Texture2DSampled %250 = OpSampledImage %247 %249 
                                       f32_4 %251 = OpLoad %9 
                                       f32_2 %252 = OpVectorShuffle %251 %251 0 1 
                                       f32_4 %253 = OpImageSampleImplicitLod %250 %252 
                                                      OpStore %70 %253 
                         read_only Texture2D %255 = OpLoad %254 
                                     sampler %257 = OpLoad %256 
                  read_only Texture2DSampled %258 = OpSampledImage %255 %257 
                                       f32_4 %259 = OpLoad %9 
                                       f32_2 %260 = OpVectorShuffle %259 %259 0 1 
                                       f32_4 %261 = OpImageSampleImplicitLod %258 %260 
                                                      OpStore %9 %261 
                                       f32_4 %262 = OpLoad %70 
                                       f32_3 %263 = OpVectorShuffle %262 %262 0 1 2 
                              Uniform f32_4* %264 = OpAccessChain %16 %47 
                                       f32_4 %265 = OpLoad %264 
                                       f32_3 %266 = OpVectorShuffle %265 %265 0 0 0 
                                       f32_3 %267 = OpFMul %263 %266 
                                       f32_4 %268 = OpLoad %70 
                                       f32_4 %269 = OpVectorShuffle %268 %267 4 5 6 3 
                                                      OpStore %70 %269 
                                       f32_4 %270 = OpLoad %70 
                                       f32_3 %271 = OpVectorShuffle %270 %270 3 3 3 
                                       f32_4 %272 = OpLoad %70 
                                       f32_3 %273 = OpVectorShuffle %272 %272 0 1 2 
                                       f32_3 %274 = OpFMul %271 %273 
                                       f32_4 %275 = OpLoad %70 
                                       f32_4 %276 = OpVectorShuffle %275 %274 4 5 6 3 
                                                      OpStore %70 %276 
                              Uniform f32_4* %278 = OpAccessChain %16 %277 
                                       f32_4 %279 = OpLoad %278 
                                       f32_3 %280 = OpVectorShuffle %279 %279 0 1 2 
                                       f32_4 %281 = OpLoad %70 
                                       f32_3 %282 = OpVectorShuffle %281 %281 0 1 2 
                                       f32_3 %283 = OpFMul %280 %282 
                                       f32_4 %284 = OpLoad %30 
                                       f32_3 %285 = OpVectorShuffle %284 %284 0 1 2 
                                       f32_3 %286 = OpFAdd %283 %285 
                                       f32_4 %287 = OpLoad %30 
                                       f32_4 %288 = OpVectorShuffle %287 %286 4 5 6 3 
                                                      OpStore %30 %288 
                                       f32_4 %289 = OpLoad %9 
                                       f32_3 %290 = OpVectorShuffle %289 %289 0 1 2 
                              Uniform f32_4* %291 = OpAccessChain %16 %47 
                                       f32_4 %292 = OpLoad %291 
                                       f32_3 %293 = OpVectorShuffle %292 %292 0 0 0 
                                       f32_3 %294 = OpFMul %290 %293 
                                       f32_4 %295 = OpLoad %9 
                                       f32_4 %296 = OpVectorShuffle %295 %294 4 5 6 3 
                                                      OpStore %9 %296 
                                       f32_4 %297 = OpLoad %9 
                                       f32_3 %298 = OpVectorShuffle %297 %297 3 3 3 
                                       f32_4 %299 = OpLoad %9 
                                       f32_3 %300 = OpVectorShuffle %299 %299 0 1 2 
                                       f32_3 %301 = OpFMul %298 %300 
                                       f32_4 %302 = OpLoad %9 
                                       f32_4 %303 = OpVectorShuffle %302 %301 4 5 6 3 
                                                      OpStore %9 %303 
                              Uniform f32_4* %305 = OpAccessChain %16 %304 
                                       f32_4 %306 = OpLoad %305 
                                       f32_3 %307 = OpVectorShuffle %306 %306 0 1 2 
                                       f32_4 %308 = OpLoad %9 
                                       f32_3 %309 = OpVectorShuffle %308 %308 0 1 2 
                                       f32_3 %310 = OpFMul %307 %309 
                                       f32_4 %311 = OpLoad %30 
                                       f32_3 %312 = OpVectorShuffle %311 %311 0 1 2 
                                       f32_3 %313 = OpFAdd %310 %312 
                                       f32_4 %314 = OpLoad %9 
                                       f32_4 %315 = OpVectorShuffle %314 %313 4 5 6 3 
                                                      OpStore %9 %315 
                                       f32_4 %316 = OpLoad %9 
                                       f32_3 %317 = OpVectorShuffle %316 %316 0 1 2 
                              Uniform f32_4* %318 = OpAccessChain %16 %47 
                                       f32_4 %319 = OpLoad %318 
                                       f32_3 %320 = OpVectorShuffle %319 %319 1 1 1 
                                       f32_3 %321 = OpFMul %317 %320 
                                       f32_4 %322 = OpLoad %9 
                                       f32_4 %323 = OpVectorShuffle %322 %321 4 5 6 3 
                                                      OpStore %9 %323 
                                Private f32* %328 = OpAccessChain %9 %327 
                                         f32 %329 = OpLoad %328 
                                Private f32* %331 = OpAccessChain %9 %330 
                                         f32 %332 = OpLoad %331 
                                         f32 %333 = OpExtInst %1 40 %329 %332 
                                                      OpStore %325 %333 
                                Private f32* %335 = OpAccessChain %9 %334 
                                         f32 %336 = OpLoad %335 
                                         f32 %338 = OpExtInst %1 40 %336 %337 
                                Private f32* %339 = OpAccessChain %30 %330 
                                                      OpStore %339 %338 
                                         f32 %340 = OpLoad %325 
                                Private f32* %341 = OpAccessChain %30 %330 
                                         f32 %342 = OpLoad %341 
                                         f32 %343 = OpExtInst %1 40 %340 %342 
                                                      OpStore %325 %343 
                                         f32 %344 = OpLoad %325 
                                         f32 %346 = OpExtInst %1 37 %344 %345 
                                                      OpStore %325 %346 
                                         f32 %347 = OpLoad %325 
                                         f32 %349 = OpFMul %347 %348 
                                                      OpStore %325 %349 
                                         f32 %350 = OpLoad %325 
                                         f32 %351 = OpExtInst %1 9 %350 
                                                      OpStore %325 %351 
                                         f32 %352 = OpLoad %325 
                                         f32 %354 = OpFMul %352 %353 
                                                      OpStore %325 %354 
                                       f32_4 %357 = OpLoad %9 
                                       f32_3 %358 = OpVectorShuffle %357 %357 0 1 2 
                                         f32 %359 = OpLoad %325 
                                       f32_3 %360 = OpCompositeConstruct %359 %359 %359 
                                       f32_3 %361 = OpFDiv %358 %360 
                                       f32_4 %362 = OpLoad %356 
                                       f32_4 %363 = OpVectorShuffle %362 %361 4 5 6 3 
                                                      OpStore %356 %363 
                                         f32 %364 = OpLoad %325 
                                 Output f32* %367 = OpAccessChain %356 %365 
                                                      OpStore %367 %364 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "AB_HIGH_PRECISION" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "AB_HIGH_PRECISION" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in  vec4 in_POSITION0;
in  vec2 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _AnamorphicGlareWeights0;
uniform 	vec4 _AnamorphicGlareWeights1;
uniform 	vec4 _AnamorphicGlareWeights2;
uniform 	vec4 _AnamorphicGlareWeights3;
uniform 	vec4 _AnamorphicGlareWeights4;
uniform 	vec4 _AnamorphicGlareWeights5;
uniform 	vec4 _AnamorphicGlareWeights6;
uniform 	vec4 _AnamorphicGlareWeights7;
uniform 	vec4 _MainTex_ST;
UNITY_LOCATION(0) uniform  sampler2D _AnamorphicRTS0;
UNITY_LOCATION(1) uniform  sampler2D _AnamorphicRTS1;
UNITY_LOCATION(2) uniform  sampler2D _AnamorphicRTS2;
UNITY_LOCATION(3) uniform  sampler2D _AnamorphicRTS3;
UNITY_LOCATION(4) uniform  sampler2D _AnamorphicRTS4;
UNITY_LOCATION(5) uniform  sampler2D _AnamorphicRTS5;
UNITY_LOCATION(6) uniform  sampler2D _AnamorphicRTS6;
UNITY_LOCATION(7) uniform  sampler2D _AnamorphicRTS7;
in  vec2 vs_TEXCOORD0;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1 = texture(_AnamorphicRTS1, u_xlat0.xy);
    u_xlat1.xyz = u_xlat1.xyz * _AnamorphicGlareWeights1.xyz;
    u_xlat2 = texture(_AnamorphicRTS0, u_xlat0.xy);
    u_xlat1.xyz = _AnamorphicGlareWeights0.xyz * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat2 = texture(_AnamorphicRTS2, u_xlat0.xy);
    u_xlat1.xyz = _AnamorphicGlareWeights2.xyz * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat2 = texture(_AnamorphicRTS3, u_xlat0.xy);
    u_xlat1.xyz = _AnamorphicGlareWeights3.xyz * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat2 = texture(_AnamorphicRTS4, u_xlat0.xy);
    u_xlat1.xyz = _AnamorphicGlareWeights4.xyz * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat2 = texture(_AnamorphicRTS5, u_xlat0.xy);
    u_xlat1.xyz = _AnamorphicGlareWeights5.xyz * u_xlat2.xyz + u_xlat1.xyz;
    u_xlat2 = texture(_AnamorphicRTS6, u_xlat0.xy);
    u_xlat0 = texture(_AnamorphicRTS7, u_xlat0.xy);
    u_xlat1.xyz = _AnamorphicGlareWeights6.xyz * u_xlat2.xyz + u_xlat1.xyz;
    SV_Target0.xyz = _AnamorphicGlareWeights7.xyz * u_xlat0.xyz + u_xlat1.xyz;
    SV_Target0.w = 0.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "AB_HIGH_PRECISION" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 94
; Schema: 0
                                              OpCapability Shader 
                                       %1 = OpExtInstImport "GLSL.std.450" 
                                              OpMemoryModel Logical GLSL450 
                                              OpEntryPoint Vertex %4 "main" %11 %72 %84 %86 
                                              OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                              OpDecorate %11 Location 11 
                                              OpDecorate %16 ArrayStride 16 
                                              OpDecorate %17 ArrayStride 17 
                                              OpMemberDecorate %18 0 Offset 18 
                                              OpMemberDecorate %18 1 Offset 18 
                                              OpDecorate %18 Block 
                                              OpDecorate %20 DescriptorSet 20 
                                              OpDecorate %20 Binding 20 
                                              OpMemberDecorate %70 0 BuiltIn 70 
                                              OpMemberDecorate %70 1 BuiltIn 70 
                                              OpMemberDecorate %70 2 BuiltIn 70 
                                              OpDecorate %70 Block 
                                              OpDecorate vs_TEXCOORD0 Location 84 
                                              OpDecorate %86 Location 86 
                                       %2 = OpTypeVoid 
                                       %3 = OpTypeFunction %2 
                                       %6 = OpTypeFloat 32 
                                       %7 = OpTypeVector %6 4 
                                       %8 = OpTypePointer Private %7 
                        Private f32_4* %9 = OpVariable Private 
                                      %10 = OpTypePointer Input %7 
                         Input f32_4* %11 = OpVariable Input 
                                      %14 = OpTypeInt 32 0 
                                  u32 %15 = OpConstant 4 
                                      %16 = OpTypeArray %7 %15 
                                      %17 = OpTypeArray %7 %15 
                                      %18 = OpTypeStruct %16 %17 
                                      %19 = OpTypePointer Uniform %18 
Uniform struct {f32_4[4]; f32_4[4];}* %20 = OpVariable Uniform 
                                      %21 = OpTypeInt 32 1 
                                  i32 %22 = OpConstant 0 
                                  i32 %23 = OpConstant 1 
                                      %24 = OpTypePointer Uniform %7 
                                  i32 %35 = OpConstant 2 
                                  i32 %44 = OpConstant 3 
                       Private f32_4* %48 = OpVariable Private 
                                  u32 %68 = OpConstant 1 
                                      %69 = OpTypeArray %6 %68 
                                      %70 = OpTypeStruct %7 %6 %69 
                                      %71 = OpTypePointer Output %70 
 Output struct {f32_4; f32; f32[1];}* %72 = OpVariable Output 
                                      %80 = OpTypePointer Output %7 
                                      %82 = OpTypeVector %6 2 
                                      %83 = OpTypePointer Output %82 
               Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                      %85 = OpTypePointer Input %82 
                         Input f32_2* %86 = OpVariable Input 
                                      %88 = OpTypePointer Output %6 
                                  void %4 = OpFunction None %3 
                                       %5 = OpLabel 
                                f32_4 %12 = OpLoad %11 
                                f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                       Uniform f32_4* %25 = OpAccessChain %20 %22 %23 
                                f32_4 %26 = OpLoad %25 
                                f32_4 %27 = OpFMul %13 %26 
                                              OpStore %9 %27 
                       Uniform f32_4* %28 = OpAccessChain %20 %22 %22 
                                f32_4 %29 = OpLoad %28 
                                f32_4 %30 = OpLoad %11 
                                f32_4 %31 = OpVectorShuffle %30 %30 0 0 0 0 
                                f32_4 %32 = OpFMul %29 %31 
                                f32_4 %33 = OpLoad %9 
                                f32_4 %34 = OpFAdd %32 %33 
                                              OpStore %9 %34 
                       Uniform f32_4* %36 = OpAccessChain %20 %22 %35 
                                f32_4 %37 = OpLoad %36 
                                f32_4 %38 = OpLoad %11 
                                f32_4 %39 = OpVectorShuffle %38 %38 2 2 2 2 
                                f32_4 %40 = OpFMul %37 %39 
                                f32_4 %41 = OpLoad %9 
                                f32_4 %42 = OpFAdd %40 %41 
                                              OpStore %9 %42 
                                f32_4 %43 = OpLoad %9 
                       Uniform f32_4* %45 = OpAccessChain %20 %22 %44 
                                f32_4 %46 = OpLoad %45 
                                f32_4 %47 = OpFAdd %43 %46 
                                              OpStore %9 %47 
                                f32_4 %49 = OpLoad %9 
                                f32_4 %50 = OpVectorShuffle %49 %49 1 1 1 1 
                       Uniform f32_4* %51 = OpAccessChain %20 %23 %23 
                                f32_4 %52 = OpLoad %51 
                                f32_4 %53 = OpFMul %50 %52 
                                              OpStore %48 %53 
                       Uniform f32_4* %54 = OpAccessChain %20 %23 %22 
                                f32_4 %55 = OpLoad %54 
                                f32_4 %56 = OpLoad %9 
                                f32_4 %57 = OpVectorShuffle %56 %56 0 0 0 0 
                                f32_4 %58 = OpFMul %55 %57 
                                f32_4 %59 = OpLoad %48 
                                f32_4 %60 = OpFAdd %58 %59 
                                              OpStore %48 %60 
                       Uniform f32_4* %61 = OpAccessChain %20 %23 %35 
                                f32_4 %62 = OpLoad %61 
                                f32_4 %63 = OpLoad %9 
                                f32_4 %64 = OpVectorShuffle %63 %63 2 2 2 2 
                                f32_4 %65 = OpFMul %62 %64 
                                f32_4 %66 = OpLoad %48 
                                f32_4 %67 = OpFAdd %65 %66 
                                              OpStore %48 %67 
                       Uniform f32_4* %73 = OpAccessChain %20 %23 %44 
                                f32_4 %74 = OpLoad %73 
                                f32_4 %75 = OpLoad %9 
                                f32_4 %76 = OpVectorShuffle %75 %75 3 3 3 3 
                                f32_4 %77 = OpFMul %74 %76 
                                f32_4 %78 = OpLoad %48 
                                f32_4 %79 = OpFAdd %77 %78 
                        Output f32_4* %81 = OpAccessChain %72 %22 
                                              OpStore %81 %79 
                                f32_2 %87 = OpLoad %86 
                                              OpStore vs_TEXCOORD0 %87 
                          Output f32* %89 = OpAccessChain %72 %22 %68 
                                  f32 %90 = OpLoad %89 
                                  f32 %91 = OpFNegate %90 
                          Output f32* %92 = OpAccessChain %72 %22 %68 
                                              OpStore %92 %91 
                                              OpReturn
                                              OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 182
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %12 %165 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpDecorate vs_TEXCOORD0 Location 12 
                                                      OpMemberDecorate %15 0 Offset 15 
                                                      OpMemberDecorate %15 1 Offset 15 
                                                      OpMemberDecorate %15 2 Offset 15 
                                                      OpMemberDecorate %15 3 Offset 15 
                                                      OpMemberDecorate %15 4 Offset 15 
                                                      OpMemberDecorate %15 5 Offset 15 
                                                      OpMemberDecorate %15 6 Offset 15 
                                                      OpMemberDecorate %15 7 Offset 15 
                                                      OpMemberDecorate %15 8 Offset 15 
                                                      OpDecorate %15 Block 
                                                      OpDecorate %17 DescriptorSet 17 
                                                      OpDecorate %17 Binding 17 
                                                      OpDecorate %34 DescriptorSet 34 
                                                      OpDecorate %34 Binding 34 
                                                      OpDecorate %38 DescriptorSet 38 
                                                      OpDecorate %38 Binding 38 
                                                      OpDecorate %53 DescriptorSet 53 
                                                      OpDecorate %53 Binding 53 
                                                      OpDecorate %55 DescriptorSet 55 
                                                      OpDecorate %55 Binding 55 
                                                      OpDecorate %70 DescriptorSet 70 
                                                      OpDecorate %70 Binding 70 
                                                      OpDecorate %72 DescriptorSet 72 
                                                      OpDecorate %72 Binding 72 
                                                      OpDecorate %87 DescriptorSet 87 
                                                      OpDecorate %87 Binding 87 
                                                      OpDecorate %89 DescriptorSet 89 
                                                      OpDecorate %89 Binding 89 
                                                      OpDecorate %104 DescriptorSet 104 
                                                      OpDecorate %104 Binding 104 
                                                      OpDecorate %106 DescriptorSet 106 
                                                      OpDecorate %106 Binding 106 
                                                      OpDecorate %121 DescriptorSet 121 
                                                      OpDecorate %121 Binding 121 
                                                      OpDecorate %123 DescriptorSet 123 
                                                      OpDecorate %123 Binding 123 
                                                      OpDecorate %138 DescriptorSet 138 
                                                      OpDecorate %138 Binding 138 
                                                      OpDecorate %140 DescriptorSet 140 
                                                      OpDecorate %140 Binding 140 
                                                      OpDecorate %147 DescriptorSet 147 
                                                      OpDecorate %147 Binding 147 
                                                      OpDecorate %149 DescriptorSet 149 
                                                      OpDecorate %149 Binding 149 
                                                      OpDecorate %165 Location 165 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 3 
                                               %8 = OpTypePointer Private %7 
                                Private f32_3* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 2 
                                              %11 = OpTypePointer Input %10 
                        Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                              %14 = OpTypeVector %6 4 
                                              %15 = OpTypeStruct %14 %14 %14 %14 %14 %14 %14 %14 %14 
                                              %16 = OpTypePointer Uniform %15 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4;}* %17 = OpVariable Uniform 
                                              %18 = OpTypeInt 32 1 
                                          i32 %19 = OpConstant 8 
                                              %20 = OpTypePointer Uniform %14 
                               Private f32_3* %31 = OpVariable Private 
                                              %32 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %33 = OpTypePointer UniformConstant %32 
         UniformConstant read_only Texture2D* %34 = OpVariable UniformConstant 
                                              %36 = OpTypeSampler 
                                              %37 = OpTypePointer UniformConstant %36 
                     UniformConstant sampler* %38 = OpVariable UniformConstant 
                                              %40 = OpTypeSampledImage %32 
                                          i32 %47 = OpConstant 1 
                               Private f32_3* %52 = OpVariable Private 
         UniformConstant read_only Texture2D* %53 = OpVariable UniformConstant 
                     UniformConstant sampler* %55 = OpVariable UniformConstant 
                                          i32 %62 = OpConstant 0 
         UniformConstant read_only Texture2D* %70 = OpVariable UniformConstant 
                     UniformConstant sampler* %72 = OpVariable UniformConstant 
                                          i32 %79 = OpConstant 2 
         UniformConstant read_only Texture2D* %87 = OpVariable UniformConstant 
                     UniformConstant sampler* %89 = OpVariable UniformConstant 
                                          i32 %96 = OpConstant 3 
        UniformConstant read_only Texture2D* %104 = OpVariable UniformConstant 
                    UniformConstant sampler* %106 = OpVariable UniformConstant 
                                         i32 %113 = OpConstant 4 
        UniformConstant read_only Texture2D* %121 = OpVariable UniformConstant 
                    UniformConstant sampler* %123 = OpVariable UniformConstant 
                                         i32 %130 = OpConstant 5 
        UniformConstant read_only Texture2D* %138 = OpVariable UniformConstant 
                    UniformConstant sampler* %140 = OpVariable UniformConstant 
        UniformConstant read_only Texture2D* %147 = OpVariable UniformConstant 
                    UniformConstant sampler* %149 = OpVariable UniformConstant 
                                         i32 %156 = OpConstant 6 
                                             %164 = OpTypePointer Output %14 
                               Output f32_4* %165 = OpVariable Output 
                                         i32 %166 = OpConstant 7 
                                         f32 %176 = OpConstant 3.674022E-40 
                                             %177 = OpTypeInt 32 0 
                                         u32 %178 = OpConstant 3 
                                             %179 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_2 %13 = OpLoad vs_TEXCOORD0 
                               Uniform f32_4* %21 = OpAccessChain %17 %19 
                                        f32_4 %22 = OpLoad %21 
                                        f32_2 %23 = OpVectorShuffle %22 %22 0 1 
                                        f32_2 %24 = OpFMul %13 %23 
                               Uniform f32_4* %25 = OpAccessChain %17 %19 
                                        f32_4 %26 = OpLoad %25 
                                        f32_2 %27 = OpVectorShuffle %26 %26 2 3 
                                        f32_2 %28 = OpFAdd %24 %27 
                                        f32_3 %29 = OpLoad %9 
                                        f32_3 %30 = OpVectorShuffle %29 %28 3 4 2 
                                                      OpStore %9 %30 
                          read_only Texture2D %35 = OpLoad %34 
                                      sampler %39 = OpLoad %38 
                   read_only Texture2DSampled %41 = OpSampledImage %35 %39 
                                        f32_3 %42 = OpLoad %9 
                                        f32_2 %43 = OpVectorShuffle %42 %42 0 1 
                                        f32_4 %44 = OpImageSampleImplicitLod %41 %43 
                                        f32_3 %45 = OpVectorShuffle %44 %44 0 1 2 
                                                      OpStore %31 %45 
                                        f32_3 %46 = OpLoad %31 
                               Uniform f32_4* %48 = OpAccessChain %17 %47 
                                        f32_4 %49 = OpLoad %48 
                                        f32_3 %50 = OpVectorShuffle %49 %49 0 1 2 
                                        f32_3 %51 = OpFMul %46 %50 
                                                      OpStore %31 %51 
                          read_only Texture2D %54 = OpLoad %53 
                                      sampler %56 = OpLoad %55 
                   read_only Texture2DSampled %57 = OpSampledImage %54 %56 
                                        f32_3 %58 = OpLoad %9 
                                        f32_2 %59 = OpVectorShuffle %58 %58 0 1 
                                        f32_4 %60 = OpImageSampleImplicitLod %57 %59 
                                        f32_3 %61 = OpVectorShuffle %60 %60 0 1 2 
                                                      OpStore %52 %61 
                               Uniform f32_4* %63 = OpAccessChain %17 %62 
                                        f32_4 %64 = OpLoad %63 
                                        f32_3 %65 = OpVectorShuffle %64 %64 0 1 2 
                                        f32_3 %66 = OpLoad %52 
                                        f32_3 %67 = OpFMul %65 %66 
                                        f32_3 %68 = OpLoad %31 
                                        f32_3 %69 = OpFAdd %67 %68 
                                                      OpStore %31 %69 
                          read_only Texture2D %71 = OpLoad %70 
                                      sampler %73 = OpLoad %72 
                   read_only Texture2DSampled %74 = OpSampledImage %71 %73 
                                        f32_3 %75 = OpLoad %9 
                                        f32_2 %76 = OpVectorShuffle %75 %75 0 1 
                                        f32_4 %77 = OpImageSampleImplicitLod %74 %76 
                                        f32_3 %78 = OpVectorShuffle %77 %77 0 1 2 
                                                      OpStore %52 %78 
                               Uniform f32_4* %80 = OpAccessChain %17 %79 
                                        f32_4 %81 = OpLoad %80 
                                        f32_3 %82 = OpVectorShuffle %81 %81 0 1 2 
                                        f32_3 %83 = OpLoad %52 
                                        f32_3 %84 = OpFMul %82 %83 
                                        f32_3 %85 = OpLoad %31 
                                        f32_3 %86 = OpFAdd %84 %85 
                                                      OpStore %31 %86 
                          read_only Texture2D %88 = OpLoad %87 
                                      sampler %90 = OpLoad %89 
                   read_only Texture2DSampled %91 = OpSampledImage %88 %90 
                                        f32_3 %92 = OpLoad %9 
                                        f32_2 %93 = OpVectorShuffle %92 %92 0 1 
                                        f32_4 %94 = OpImageSampleImplicitLod %91 %93 
                                        f32_3 %95 = OpVectorShuffle %94 %94 0 1 2 
                                                      OpStore %52 %95 
                               Uniform f32_4* %97 = OpAccessChain %17 %96 
                                        f32_4 %98 = OpLoad %97 
                                        f32_3 %99 = OpVectorShuffle %98 %98 0 1 2 
                                       f32_3 %100 = OpLoad %52 
                                       f32_3 %101 = OpFMul %99 %100 
                                       f32_3 %102 = OpLoad %31 
                                       f32_3 %103 = OpFAdd %101 %102 
                                                      OpStore %31 %103 
                         read_only Texture2D %105 = OpLoad %104 
                                     sampler %107 = OpLoad %106 
                  read_only Texture2DSampled %108 = OpSampledImage %105 %107 
                                       f32_3 %109 = OpLoad %9 
                                       f32_2 %110 = OpVectorShuffle %109 %109 0 1 
                                       f32_4 %111 = OpImageSampleImplicitLod %108 %110 
                                       f32_3 %112 = OpVectorShuffle %111 %111 0 1 2 
                                                      OpStore %52 %112 
                              Uniform f32_4* %114 = OpAccessChain %17 %113 
                                       f32_4 %115 = OpLoad %114 
                                       f32_3 %116 = OpVectorShuffle %115 %115 0 1 2 
                                       f32_3 %117 = OpLoad %52 
                                       f32_3 %118 = OpFMul %116 %117 
                                       f32_3 %119 = OpLoad %31 
                                       f32_3 %120 = OpFAdd %118 %119 
                                                      OpStore %31 %120 
                         read_only Texture2D %122 = OpLoad %121 
                                     sampler %124 = OpLoad %123 
                  read_only Texture2DSampled %125 = OpSampledImage %122 %124 
                                       f32_3 %126 = OpLoad %9 
                                       f32_2 %127 = OpVectorShuffle %126 %126 0 1 
                                       f32_4 %128 = OpImageSampleImplicitLod %125 %127 
                                       f32_3 %129 = OpVectorShuffle %128 %128 0 1 2 
                                                      OpStore %52 %129 
                              Uniform f32_4* %131 = OpAccessChain %17 %130 
                                       f32_4 %132 = OpLoad %131 
                                       f32_3 %133 = OpVectorShuffle %132 %132 0 1 2 
                                       f32_3 %134 = OpLoad %52 
                                       f32_3 %135 = OpFMul %133 %134 
                                       f32_3 %136 = OpLoad %31 
                                       f32_3 %137 = OpFAdd %135 %136 
                                                      OpStore %31 %137 
                         read_only Texture2D %139 = OpLoad %138 
                                     sampler %141 = OpLoad %140 
                  read_only Texture2DSampled %142 = OpSampledImage %139 %141 
                                       f32_3 %143 = OpLoad %9 
                                       f32_2 %144 = OpVectorShuffle %143 %143 0 1 
                                       f32_4 %145 = OpImageSampleImplicitLod %142 %144 
                                       f32_3 %146 = OpVectorShuffle %145 %145 0 1 2 
                                                      OpStore %52 %146 
                         read_only Texture2D %148 = OpLoad %147 
                                     sampler %150 = OpLoad %149 
                  read_only Texture2DSampled %151 = OpSampledImage %148 %150 
                                       f32_3 %152 = OpLoad %9 
                                       f32_2 %153 = OpVectorShuffle %152 %152 0 1 
                                       f32_4 %154 = OpImageSampleImplicitLod %151 %153 
                                       f32_3 %155 = OpVectorShuffle %154 %154 0 1 2 
                                                      OpStore %9 %155 
                              Uniform f32_4* %157 = OpAccessChain %17 %156 
                                       f32_4 %158 = OpLoad %157 
                                       f32_3 %159 = OpVectorShuffle %158 %158 0 1 2 
                                       f32_3 %160 = OpLoad %52 
                                       f32_3 %161 = OpFMul %159 %160 
                                       f32_3 %162 = OpLoad %31 
                                       f32_3 %163 = OpFAdd %161 %162 
                                                      OpStore %31 %163 
                              Uniform f32_4* %167 = OpAccessChain %17 %166 
                                       f32_4 %168 = OpLoad %167 
                                       f32_3 %169 = OpVectorShuffle %168 %168 0 1 2 
                                       f32_3 %170 = OpLoad %9 
                                       f32_3 %171 = OpFMul %169 %170 
                                       f32_3 %172 = OpLoad %31 
                                       f32_3 %173 = OpFAdd %171 %172 
                                       f32_4 %174 = OpLoad %165 
                                       f32_4 %175 = OpVectorShuffle %174 %173 4 5 6 3 
                                                      OpStore %165 %175 
                                 Output f32* %180 = OpAccessChain %165 %178 
                                                      OpStore %180 %176 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
}
Program "fp" {
SubProgram "d3d11 " {
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
""
}
SubProgram "vulkan " {
""
}
SubProgram "d3d11 " {
Keywords { "AB_HIGH_PRECISION" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "AB_HIGH_PRECISION" }
""
}
SubProgram "vulkan " {
Keywords { "AB_HIGH_PRECISION" }
""
}
}
}
 Pass {
  Name "frag_BokehFiltering"
  ZTest Always
  ZWrite Off
  Cull Off
  GpuProgramID 1781751
Program "vp" {
SubProgram "d3d11 " {
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in  vec4 in_POSITION0;
in  vec2 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _AnamorphicGlareWeights0;
uniform 	vec4 _AnamorphicGlareWeights1;
uniform 	vec4 _AnamorphicGlareWeights2;
uniform 	vec4 _AnamorphicGlareWeights3;
uniform 	vec4 _AnamorphicGlareWeights4;
uniform 	vec4 _AnamorphicGlareWeights5;
uniform 	vec4 _AnamorphicGlareWeights6;
uniform 	vec4 _AnamorphicGlareWeights7;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BokehParams;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
UNITY_LOCATION(1) uniform  sampler2D _CameraDepthTexture;
in  vec2 vs_TEXCOORD0;
layout(location = 0) out vec4 SV_Target0;
float u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
vec2 u_xlat5;
bool u_xlatb5;
vec2 u_xlat6;
bool u_xlatb6;
float u_xlat10;
bool u_xlatb10;
float u_xlat15;
void main()
{
    u_xlat0 = (-_BokehParams.y) + _BokehParams.z;
    u_xlat0 = _BokehParams.y / u_xlat0;
    u_xlat5.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1 = texture(_CameraDepthTexture, u_xlat5.xy);
    u_xlat5.x = u_xlat1.x * _ProjectionParams.z;
    u_xlat10 = u_xlat1.x * _ProjectionParams.z + (-_BokehParams.z);
    u_xlat5.x = abs(u_xlat10) / u_xlat5.x;
    u_xlat5.x = u_xlat5.x * _BokehParams.x;
    u_xlat0 = u_xlat0 * u_xlat5.x;
    u_xlat0 = u_xlat0 * 41.6669998;
    u_xlat0 = max(u_xlat0, 0.0);
    u_xlat0 = min(u_xlat0, _BokehParams.w);
    u_xlat5.xy = _AnamorphicGlareWeights1.xy * vec2(u_xlat0) + vs_TEXCOORD0.xy;
    u_xlat6.xy = u_xlat5.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat2 = texture(_CameraDepthTexture, u_xlat5.xy);
    u_xlatb5 = u_xlat2.x<u_xlat1.x;
    u_xlat2 = texture(_MainTex, u_xlat6.xy);
    u_xlat10 = u_xlat2.w + 0.0199999996;
    u_xlatb10 = u_xlat10<u_xlat0;
    u_xlat15 = u_xlat0 * 30.0;
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
    u_xlat5.x = (u_xlatb5) ? u_xlat15 : 1.0;
    u_xlat5.x = (u_xlatb10) ? u_xlat5.x : 1.0;
    u_xlat2 = u_xlat5.xxxx * u_xlat2;
    u_xlat6.xy = _AnamorphicGlareWeights0.xy * vec2(u_xlat0) + vs_TEXCOORD0.xy;
    u_xlat3.xy = u_xlat6.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat4 = texture(_CameraDepthTexture, u_xlat6.xy);
    u_xlatb10 = u_xlat4.x<u_xlat1.x;
    u_xlat10 = (u_xlatb10) ? u_xlat15 : 1.0;
    u_xlat3 = texture(_MainTex, u_xlat3.xy);
    u_xlat6.x = u_xlat3.w + 0.0199999996;
    u_xlatb6 = u_xlat6.x<u_xlat0;
    u_xlat10 = (u_xlatb6) ? u_xlat10 : 1.0;
    u_xlat2 = u_xlat3 * vec4(u_xlat10) + u_xlat2;
    u_xlat5.x = u_xlat5.x + u_xlat10;
    u_xlat6.xy = _AnamorphicGlareWeights2.xy * vec2(u_xlat0) + vs_TEXCOORD0.xy;
    u_xlat3.xy = u_xlat6.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat4 = texture(_CameraDepthTexture, u_xlat6.xy);
    u_xlatb10 = u_xlat4.x<u_xlat1.x;
    u_xlat10 = (u_xlatb10) ? u_xlat15 : 1.0;
    u_xlat3 = texture(_MainTex, u_xlat3.xy);
    u_xlat6.x = u_xlat3.w + 0.0199999996;
    u_xlatb6 = u_xlat6.x<u_xlat0;
    u_xlat10 = (u_xlatb6) ? u_xlat10 : 1.0;
    u_xlat2 = u_xlat3 * vec4(u_xlat10) + u_xlat2;
    u_xlat5.x = u_xlat10 + u_xlat5.x;
    u_xlat6.xy = _AnamorphicGlareWeights3.xy * vec2(u_xlat0) + vs_TEXCOORD0.xy;
    u_xlat3.xy = u_xlat6.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat4 = texture(_CameraDepthTexture, u_xlat6.xy);
    u_xlatb10 = u_xlat4.x<u_xlat1.x;
    u_xlat10 = (u_xlatb10) ? u_xlat15 : 1.0;
    u_xlat3 = texture(_MainTex, u_xlat3.xy);
    u_xlat6.x = u_xlat3.w + 0.0199999996;
    u_xlatb6 = u_xlat6.x<u_xlat0;
    u_xlat10 = (u_xlatb6) ? u_xlat10 : 1.0;
    u_xlat2 = u_xlat3 * vec4(u_xlat10) + u_xlat2;
    u_xlat5.x = u_xlat10 + u_xlat5.x;
    u_xlat6.xy = _AnamorphicGlareWeights4.xy * vec2(u_xlat0) + vs_TEXCOORD0.xy;
    u_xlat3.xy = u_xlat6.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat4 = texture(_CameraDepthTexture, u_xlat6.xy);
    u_xlatb10 = u_xlat4.x<u_xlat1.x;
    u_xlat10 = (u_xlatb10) ? u_xlat15 : 1.0;
    u_xlat3 = texture(_MainTex, u_xlat3.xy);
    u_xlat6.x = u_xlat3.w + 0.0199999996;
    u_xlatb6 = u_xlat6.x<u_xlat0;
    u_xlat10 = (u_xlatb6) ? u_xlat10 : 1.0;
    u_xlat2 = u_xlat3 * vec4(u_xlat10) + u_xlat2;
    u_xlat5.x = u_xlat10 + u_xlat5.x;
    u_xlat6.xy = _AnamorphicGlareWeights5.xy * vec2(u_xlat0) + vs_TEXCOORD0.xy;
    u_xlat3.xy = u_xlat6.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat4 = texture(_CameraDepthTexture, u_xlat6.xy);
    u_xlatb10 = u_xlat4.x<u_xlat1.x;
    u_xlat10 = (u_xlatb10) ? u_xlat15 : 1.0;
    u_xlat3 = texture(_MainTex, u_xlat3.xy);
    u_xlat6.x = u_xlat3.w + 0.0199999996;
    u_xlatb6 = u_xlat6.x<u_xlat0;
    u_xlat10 = (u_xlatb6) ? u_xlat10 : 1.0;
    u_xlat2 = u_xlat3 * vec4(u_xlat10) + u_xlat2;
    u_xlat5.x = u_xlat10 + u_xlat5.x;
    u_xlat6.xy = _AnamorphicGlareWeights6.xy * vec2(u_xlat0) + vs_TEXCOORD0.xy;
    u_xlat3 = texture(_CameraDepthTexture, u_xlat6.xy);
    u_xlat6.xy = u_xlat6.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat4 = texture(_MainTex, u_xlat6.xy);
    u_xlatb10 = u_xlat3.x<u_xlat1.x;
    u_xlat10 = (u_xlatb10) ? u_xlat15 : 1.0;
    u_xlat6.x = u_xlat4.w + 0.0199999996;
    u_xlatb6 = u_xlat6.x<u_xlat0;
    u_xlat10 = (u_xlatb6) ? u_xlat10 : 1.0;
    u_xlat2 = u_xlat4 * vec4(u_xlat10) + u_xlat2;
    u_xlat5.x = u_xlat10 + u_xlat5.x;
    u_xlat6.xy = _AnamorphicGlareWeights7.xy * vec2(u_xlat0) + vs_TEXCOORD0.xy;
    u_xlat3 = texture(_CameraDepthTexture, u_xlat6.xy);
    u_xlat6.xy = u_xlat6.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat4 = texture(_MainTex, u_xlat6.xy);
    u_xlatb10 = u_xlat3.x<u_xlat1.x;
    u_xlat10 = (u_xlatb10) ? u_xlat15 : 1.0;
    u_xlat15 = u_xlat4.w + 0.0199999996;
    u_xlatb0 = u_xlat15<u_xlat0;
    u_xlat0 = (u_xlatb0) ? u_xlat10 : 1.0;
    u_xlat1 = u_xlat4 * vec4(u_xlat0) + u_xlat2;
    u_xlat0 = u_xlat0 + u_xlat5.x;
    SV_Target0 = u_xlat1 / vec4(u_xlat0);
    return;
}

#endif
"
}
SubProgram "vulkan " {
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 94
; Schema: 0
                                              OpCapability Shader 
                                       %1 = OpExtInstImport "GLSL.std.450" 
                                              OpMemoryModel Logical GLSL450 
                                              OpEntryPoint Vertex %4 "main" %11 %72 %84 %86 
                                              OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                              OpDecorate %11 Location 11 
                                              OpDecorate %16 ArrayStride 16 
                                              OpDecorate %17 ArrayStride 17 
                                              OpMemberDecorate %18 0 Offset 18 
                                              OpMemberDecorate %18 1 Offset 18 
                                              OpDecorate %18 Block 
                                              OpDecorate %20 DescriptorSet 20 
                                              OpDecorate %20 Binding 20 
                                              OpMemberDecorate %70 0 BuiltIn 70 
                                              OpMemberDecorate %70 1 BuiltIn 70 
                                              OpMemberDecorate %70 2 BuiltIn 70 
                                              OpDecorate %70 Block 
                                              OpDecorate vs_TEXCOORD0 Location 84 
                                              OpDecorate %86 Location 86 
                                       %2 = OpTypeVoid 
                                       %3 = OpTypeFunction %2 
                                       %6 = OpTypeFloat 32 
                                       %7 = OpTypeVector %6 4 
                                       %8 = OpTypePointer Private %7 
                        Private f32_4* %9 = OpVariable Private 
                                      %10 = OpTypePointer Input %7 
                         Input f32_4* %11 = OpVariable Input 
                                      %14 = OpTypeInt 32 0 
                                  u32 %15 = OpConstant 4 
                                      %16 = OpTypeArray %7 %15 
                                      %17 = OpTypeArray %7 %15 
                                      %18 = OpTypeStruct %16 %17 
                                      %19 = OpTypePointer Uniform %18 
Uniform struct {f32_4[4]; f32_4[4];}* %20 = OpVariable Uniform 
                                      %21 = OpTypeInt 32 1 
                                  i32 %22 = OpConstant 0 
                                  i32 %23 = OpConstant 1 
                                      %24 = OpTypePointer Uniform %7 
                                  i32 %35 = OpConstant 2 
                                  i32 %44 = OpConstant 3 
                       Private f32_4* %48 = OpVariable Private 
                                  u32 %68 = OpConstant 1 
                                      %69 = OpTypeArray %6 %68 
                                      %70 = OpTypeStruct %7 %6 %69 
                                      %71 = OpTypePointer Output %70 
 Output struct {f32_4; f32; f32[1];}* %72 = OpVariable Output 
                                      %80 = OpTypePointer Output %7 
                                      %82 = OpTypeVector %6 2 
                                      %83 = OpTypePointer Output %82 
               Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                      %85 = OpTypePointer Input %82 
                         Input f32_2* %86 = OpVariable Input 
                                      %88 = OpTypePointer Output %6 
                                  void %4 = OpFunction None %3 
                                       %5 = OpLabel 
                                f32_4 %12 = OpLoad %11 
                                f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                       Uniform f32_4* %25 = OpAccessChain %20 %22 %23 
                                f32_4 %26 = OpLoad %25 
                                f32_4 %27 = OpFMul %13 %26 
                                              OpStore %9 %27 
                       Uniform f32_4* %28 = OpAccessChain %20 %22 %22 
                                f32_4 %29 = OpLoad %28 
                                f32_4 %30 = OpLoad %11 
                                f32_4 %31 = OpVectorShuffle %30 %30 0 0 0 0 
                                f32_4 %32 = OpFMul %29 %31 
                                f32_4 %33 = OpLoad %9 
                                f32_4 %34 = OpFAdd %32 %33 
                                              OpStore %9 %34 
                       Uniform f32_4* %36 = OpAccessChain %20 %22 %35 
                                f32_4 %37 = OpLoad %36 
                                f32_4 %38 = OpLoad %11 
                                f32_4 %39 = OpVectorShuffle %38 %38 2 2 2 2 
                                f32_4 %40 = OpFMul %37 %39 
                                f32_4 %41 = OpLoad %9 
                                f32_4 %42 = OpFAdd %40 %41 
                                              OpStore %9 %42 
                                f32_4 %43 = OpLoad %9 
                       Uniform f32_4* %45 = OpAccessChain %20 %22 %44 
                                f32_4 %46 = OpLoad %45 
                                f32_4 %47 = OpFAdd %43 %46 
                                              OpStore %9 %47 
                                f32_4 %49 = OpLoad %9 
                                f32_4 %50 = OpVectorShuffle %49 %49 1 1 1 1 
                       Uniform f32_4* %51 = OpAccessChain %20 %23 %23 
                                f32_4 %52 = OpLoad %51 
                                f32_4 %53 = OpFMul %50 %52 
                                              OpStore %48 %53 
                       Uniform f32_4* %54 = OpAccessChain %20 %23 %22 
                                f32_4 %55 = OpLoad %54 
                                f32_4 %56 = OpLoad %9 
                                f32_4 %57 = OpVectorShuffle %56 %56 0 0 0 0 
                                f32_4 %58 = OpFMul %55 %57 
                                f32_4 %59 = OpLoad %48 
                                f32_4 %60 = OpFAdd %58 %59 
                                              OpStore %48 %60 
                       Uniform f32_4* %61 = OpAccessChain %20 %23 %35 
                                f32_4 %62 = OpLoad %61 
                                f32_4 %63 = OpLoad %9 
                                f32_4 %64 = OpVectorShuffle %63 %63 2 2 2 2 
                                f32_4 %65 = OpFMul %62 %64 
                                f32_4 %66 = OpLoad %48 
                                f32_4 %67 = OpFAdd %65 %66 
                                              OpStore %48 %67 
                       Uniform f32_4* %73 = OpAccessChain %20 %23 %44 
                                f32_4 %74 = OpLoad %73 
                                f32_4 %75 = OpLoad %9 
                                f32_4 %76 = OpVectorShuffle %75 %75 3 3 3 3 
                                f32_4 %77 = OpFMul %74 %76 
                                f32_4 %78 = OpLoad %48 
                                f32_4 %79 = OpFAdd %77 %78 
                        Output f32_4* %81 = OpAccessChain %72 %22 
                                              OpStore %81 %79 
                                f32_2 %87 = OpLoad %86 
                                              OpStore vs_TEXCOORD0 %87 
                          Output f32* %89 = OpAccessChain %72 %22 %68 
                                  f32 %90 = OpLoad %89 
                                  f32 %91 = OpFNegate %90 
                          Output f32* %92 = OpAccessChain %72 %22 %68 
                                              OpStore %92 %91 
                                              OpReturn
                                              OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 645
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %37 %639 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpMemberDecorate %11 0 Offset 11 
                                                      OpMemberDecorate %11 1 Offset 11 
                                                      OpMemberDecorate %11 2 Offset 11 
                                                      OpMemberDecorate %11 3 Offset 11 
                                                      OpMemberDecorate %11 4 Offset 11 
                                                      OpMemberDecorate %11 5 Offset 11 
                                                      OpMemberDecorate %11 6 Offset 11 
                                                      OpMemberDecorate %11 7 Offset 11 
                                                      OpMemberDecorate %11 8 Offset 11 
                                                      OpMemberDecorate %11 9 Offset 11 
                                                      OpMemberDecorate %11 10 Offset 11 
                                                      OpDecorate %11 Block 
                                                      OpDecorate %13 DescriptorSet 13 
                                                      OpDecorate %13 Binding 13 
                                                      OpDecorate vs_TEXCOORD0 Location 37 
                                                      OpDecorate %51 DescriptorSet 51 
                                                      OpDecorate %51 Binding 51 
                                                      OpDecorate %55 DescriptorSet 55 
                                                      OpDecorate %55 Binding 55 
                                                      OpDecorate %145 DescriptorSet 145 
                                                      OpDecorate %145 Binding 145 
                                                      OpDecorate %147 DescriptorSet 147 
                                                      OpDecorate %147 Binding 147 
                                                      OpDecorate %639 Location 639 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 2 
                                               %8 = OpTypePointer Private %7 
                                Private f32_2* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 4 
                                              %11 = OpTypeStruct %10 %10 %10 %10 %10 %10 %10 %10 %10 %10 %10 
                                              %12 = OpTypePointer Uniform %11 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4;}* %13 = OpVariable Uniform 
                                              %14 = OpTypeInt 32 1 
                                          i32 %15 = OpConstant 10 
                                              %16 = OpTypeInt 32 0 
                                          u32 %17 = OpConstant 1 
                                              %18 = OpTypePointer Uniform %6 
                                          u32 %22 = OpConstant 2 
                                          u32 %26 = OpConstant 0 
                                              %27 = OpTypePointer Private %6 
                               Private f32_2* %35 = OpVariable Private 
                                              %36 = OpTypePointer Input %7 
                        Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                          i32 %39 = OpConstant 9 
                                              %40 = OpTypePointer Uniform %10 
                                              %49 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %50 = OpTypePointer UniformConstant %49 
         UniformConstant read_only Texture2D* %51 = OpVariable UniformConstant 
                                              %53 = OpTypeSampler 
                                              %54 = OpTypePointer UniformConstant %53 
                     UniformConstant sampler* %55 = OpVariable UniformConstant 
                                              %57 = OpTypeSampledImage %49 
                               Private f32_2* %63 = OpVariable Private 
                                          i32 %66 = OpConstant 0 
                                 Private f32* %71 = OpVariable Private 
                                         f32 %101 = OpConstant 3.674022E-40 
                                         f32 %106 = OpConstant 3.674022E-40 
                                         u32 %111 = OpConstant 3 
                                         i32 %116 = OpConstant 2 
                                             %125 = OpTypePointer Private %10 
                              Private f32_4* %126 = OpVariable Private 
        UniformConstant read_only Texture2D* %145 = OpVariable UniformConstant 
                    UniformConstant sampler* %147 = OpVariable UniformConstant 
                                         f32 %155 = OpConstant 3.674022E-40 
                                             %158 = OpTypeBool 
                                             %159 = OpTypeVector %158 2 
                                             %160 = OpTypePointer Private %159 
                             Private bool_2* %161 = OpVariable Private 
                                             %166 = OpTypeVector %158 4 
                                Private f32* %169 = OpVariable Private 
                                         f32 %172 = OpConstant 3.674022E-40 
                                         f32 %175 = OpConstant 3.674022E-40 
                                             %177 = OpTypePointer Private %158 
                                             %185 = OpTypePointer Function %6 
                              Private f32_2* %198 = OpVariable Private 
                                         i32 %199 = OpConstant 1 
                              Private f32_4* %208 = OpVariable Private 
                               Private bool* %226 = OpVariable Private 
                               Private bool* %244 = OpVariable Private 
                                         i32 %264 = OpConstant 3 
                                         i32 %326 = OpConstant 4 
                                         i32 %388 = OpConstant 5 
                                         i32 %450 = OpConstant 6 
                                         i32 %512 = OpConstant 7 
                                         i32 %571 = OpConstant 8 
                               Private bool* %600 = OpVariable Private 
                               Private bool* %612 = OpVariable Private 
                                             %638 = OpTypePointer Output %10 
                               Output f32_4* %639 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                               Function f32* %186 = OpVariable Function 
                               Function f32* %618 = OpVariable Function 
                                 Uniform f32* %19 = OpAccessChain %13 %15 %17 
                                          f32 %20 = OpLoad %19 
                                          f32 %21 = OpFNegate %20 
                                 Uniform f32* %23 = OpAccessChain %13 %15 %22 
                                          f32 %24 = OpLoad %23 
                                          f32 %25 = OpFAdd %21 %24 
                                 Private f32* %28 = OpAccessChain %9 %26 
                                                      OpStore %28 %25 
                                 Uniform f32* %29 = OpAccessChain %13 %15 %17 
                                          f32 %30 = OpLoad %29 
                                 Private f32* %31 = OpAccessChain %9 %26 
                                          f32 %32 = OpLoad %31 
                                          f32 %33 = OpFDiv %30 %32 
                                 Private f32* %34 = OpAccessChain %9 %26 
                                                      OpStore %34 %33 
                                        f32_2 %38 = OpLoad vs_TEXCOORD0 
                               Uniform f32_4* %41 = OpAccessChain %13 %39 
                                        f32_4 %42 = OpLoad %41 
                                        f32_2 %43 = OpVectorShuffle %42 %42 0 1 
                                        f32_2 %44 = OpFMul %38 %43 
                               Uniform f32_4* %45 = OpAccessChain %13 %39 
                                        f32_4 %46 = OpLoad %45 
                                        f32_2 %47 = OpVectorShuffle %46 %46 2 3 
                                        f32_2 %48 = OpFAdd %44 %47 
                                                      OpStore %35 %48 
                          read_only Texture2D %52 = OpLoad %51 
                                      sampler %56 = OpLoad %55 
                   read_only Texture2DSampled %58 = OpSampledImage %52 %56 
                                        f32_2 %59 = OpLoad %35 
                                        f32_4 %60 = OpImageSampleImplicitLod %58 %59 
                                          f32 %61 = OpCompositeExtract %60 0 
                                 Private f32* %62 = OpAccessChain %9 %17 
                                                      OpStore %62 %61 
                                 Private f32* %64 = OpAccessChain %9 %17 
                                          f32 %65 = OpLoad %64 
                                 Uniform f32* %67 = OpAccessChain %13 %66 %22 
                                          f32 %68 = OpLoad %67 
                                          f32 %69 = OpFMul %65 %68 
                                 Private f32* %70 = OpAccessChain %63 %26 
                                                      OpStore %70 %69 
                                 Private f32* %72 = OpAccessChain %9 %17 
                                          f32 %73 = OpLoad %72 
                                 Uniform f32* %74 = OpAccessChain %13 %66 %22 
                                          f32 %75 = OpLoad %74 
                                          f32 %76 = OpFMul %73 %75 
                                 Uniform f32* %77 = OpAccessChain %13 %15 %22 
                                          f32 %78 = OpLoad %77 
                                          f32 %79 = OpFNegate %78 
                                          f32 %80 = OpFAdd %76 %79 
                                                      OpStore %71 %80 
                                          f32 %81 = OpLoad %71 
                                          f32 %82 = OpExtInst %1 4 %81 
                                 Private f32* %83 = OpAccessChain %63 %26 
                                          f32 %84 = OpLoad %83 
                                          f32 %85 = OpFDiv %82 %84 
                                 Private f32* %86 = OpAccessChain %63 %26 
                                                      OpStore %86 %85 
                                 Private f32* %87 = OpAccessChain %63 %26 
                                          f32 %88 = OpLoad %87 
                                 Uniform f32* %89 = OpAccessChain %13 %15 %26 
                                          f32 %90 = OpLoad %89 
                                          f32 %91 = OpFMul %88 %90 
                                 Private f32* %92 = OpAccessChain %63 %26 
                                                      OpStore %92 %91 
                                 Private f32* %93 = OpAccessChain %9 %26 
                                          f32 %94 = OpLoad %93 
                                 Private f32* %95 = OpAccessChain %63 %26 
                                          f32 %96 = OpLoad %95 
                                          f32 %97 = OpFMul %94 %96 
                                 Private f32* %98 = OpAccessChain %9 %26 
                                                      OpStore %98 %97 
                                 Private f32* %99 = OpAccessChain %9 %26 
                                         f32 %100 = OpLoad %99 
                                         f32 %102 = OpFMul %100 %101 
                                Private f32* %103 = OpAccessChain %9 %26 
                                                      OpStore %103 %102 
                                Private f32* %104 = OpAccessChain %9 %26 
                                         f32 %105 = OpLoad %104 
                                         f32 %107 = OpExtInst %1 40 %105 %106 
                                Private f32* %108 = OpAccessChain %9 %26 
                                                      OpStore %108 %107 
                                Private f32* %109 = OpAccessChain %9 %26 
                                         f32 %110 = OpLoad %109 
                                Uniform f32* %112 = OpAccessChain %13 %15 %111 
                                         f32 %113 = OpLoad %112 
                                         f32 %114 = OpExtInst %1 37 %110 %113 
                                Private f32* %115 = OpAccessChain %9 %26 
                                                      OpStore %115 %114 
                              Uniform f32_4* %117 = OpAccessChain %13 %116 
                                       f32_4 %118 = OpLoad %117 
                                       f32_2 %119 = OpVectorShuffle %118 %118 0 1 
                                       f32_2 %120 = OpLoad %9 
                                       f32_2 %121 = OpVectorShuffle %120 %120 0 0 
                                       f32_2 %122 = OpFMul %119 %121 
                                       f32_2 %123 = OpLoad vs_TEXCOORD0 
                                       f32_2 %124 = OpFAdd %122 %123 
                                                      OpStore %63 %124 
                                       f32_2 %127 = OpLoad %63 
                              Uniform f32_4* %128 = OpAccessChain %13 %39 
                                       f32_4 %129 = OpLoad %128 
                                       f32_2 %130 = OpVectorShuffle %129 %129 0 1 
                                       f32_2 %131 = OpFMul %127 %130 
                              Uniform f32_4* %132 = OpAccessChain %13 %39 
                                       f32_4 %133 = OpLoad %132 
                                       f32_2 %134 = OpVectorShuffle %133 %133 2 3 
                                       f32_2 %135 = OpFAdd %131 %134 
                                       f32_4 %136 = OpLoad %126 
                                       f32_4 %137 = OpVectorShuffle %136 %135 4 5 2 3 
                                                      OpStore %126 %137 
                         read_only Texture2D %138 = OpLoad %51 
                                     sampler %139 = OpLoad %55 
                  read_only Texture2DSampled %140 = OpSampledImage %138 %139 
                                       f32_2 %141 = OpLoad %63 
                                       f32_4 %142 = OpImageSampleImplicitLod %140 %141 
                                         f32 %143 = OpCompositeExtract %142 0 
                                Private f32* %144 = OpAccessChain %63 %26 
                                                      OpStore %144 %143 
                         read_only Texture2D %146 = OpLoad %145 
                                     sampler %148 = OpLoad %147 
                  read_only Texture2DSampled %149 = OpSampledImage %146 %148 
                                       f32_4 %150 = OpLoad %126 
                                       f32_2 %151 = OpVectorShuffle %150 %150 0 1 
                                       f32_4 %152 = OpImageSampleImplicitLod %149 %151 
                                                      OpStore %126 %152 
                                Private f32* %153 = OpAccessChain %126 %111 
                                         f32 %154 = OpLoad %153 
                                         f32 %156 = OpFAdd %154 %155 
                                Private f32* %157 = OpAccessChain %63 %17 
                                                      OpStore %157 %156 
                                       f32_2 %162 = OpLoad %63 
                                       f32_4 %163 = OpVectorShuffle %162 %162 0 1 0 1 
                                       f32_2 %164 = OpLoad %9 
                                       f32_4 %165 = OpVectorShuffle %164 %164 1 0 1 0 
                                      bool_4 %167 = OpFOrdLessThan %163 %165 
                                      bool_2 %168 = OpVectorShuffle %167 %167 0 1 
                                                      OpStore %161 %168 
                                Private f32* %170 = OpAccessChain %9 %26 
                                         f32 %171 = OpLoad %170 
                                         f32 %173 = OpFMul %171 %172 
                                                      OpStore %169 %173 
                                         f32 %174 = OpLoad %169 
                                         f32 %176 = OpExtInst %1 43 %174 %106 %175 
                                                      OpStore %169 %176 
                               Private bool* %178 = OpAccessChain %161 %26 
                                        bool %179 = OpLoad %178 
                                         f32 %180 = OpLoad %169 
                                         f32 %181 = OpSelect %179 %180 %175 
                                Private f32* %182 = OpAccessChain %63 %26 
                                                      OpStore %182 %181 
                               Private bool* %183 = OpAccessChain %161 %17 
                                        bool %184 = OpLoad %183 
                                                      OpSelectionMerge %188 None 
                                                      OpBranchConditional %184 %187 %191 
                                             %187 = OpLabel 
                                Private f32* %189 = OpAccessChain %63 %26 
                                         f32 %190 = OpLoad %189 
                                                      OpStore %186 %190 
                                                      OpBranch %188 
                                             %191 = OpLabel 
                                                      OpStore %186 %175 
                                                      OpBranch %188 
                                             %188 = OpLabel 
                                         f32 %192 = OpLoad %186 
                                Private f32* %193 = OpAccessChain %63 %26 
                                                      OpStore %193 %192 
                                       f32_2 %194 = OpLoad %63 
                                       f32_4 %195 = OpVectorShuffle %194 %194 0 0 0 0 
                                       f32_4 %196 = OpLoad %126 
                                       f32_4 %197 = OpFMul %195 %196 
                                                      OpStore %126 %197 
                              Uniform f32_4* %200 = OpAccessChain %13 %199 
                                       f32_4 %201 = OpLoad %200 
                                       f32_2 %202 = OpVectorShuffle %201 %201 0 1 
                                       f32_2 %203 = OpLoad %9 
                                       f32_2 %204 = OpVectorShuffle %203 %203 0 0 
                                       f32_2 %205 = OpFMul %202 %204 
                                       f32_2 %206 = OpLoad vs_TEXCOORD0 
                                       f32_2 %207 = OpFAdd %205 %206 
                                                      OpStore %198 %207 
                                       f32_2 %209 = OpLoad %198 
                              Uniform f32_4* %210 = OpAccessChain %13 %39 
                                       f32_4 %211 = OpLoad %210 
                                       f32_2 %212 = OpVectorShuffle %211 %211 0 1 
                                       f32_2 %213 = OpFMul %209 %212 
                              Uniform f32_4* %214 = OpAccessChain %13 %39 
                                       f32_4 %215 = OpLoad %214 
                                       f32_2 %216 = OpVectorShuffle %215 %215 2 3 
                                       f32_2 %217 = OpFAdd %213 %216 
                                       f32_4 %218 = OpLoad %208 
                                       f32_4 %219 = OpVectorShuffle %218 %217 4 5 2 3 
                                                      OpStore %208 %219 
                         read_only Texture2D %220 = OpLoad %51 
                                     sampler %221 = OpLoad %55 
                  read_only Texture2DSampled %222 = OpSampledImage %220 %221 
                                       f32_2 %223 = OpLoad %198 
                                       f32_4 %224 = OpImageSampleImplicitLod %222 %223 
                                         f32 %225 = OpCompositeExtract %224 0 
                                                      OpStore %71 %225 
                                         f32 %227 = OpLoad %71 
                                Private f32* %228 = OpAccessChain %9 %17 
                                         f32 %229 = OpLoad %228 
                                        bool %230 = OpFOrdLessThan %227 %229 
                                                      OpStore %226 %230 
                                        bool %231 = OpLoad %226 
                                         f32 %232 = OpLoad %169 
                                         f32 %233 = OpSelect %231 %232 %175 
                                                      OpStore %71 %233 
                         read_only Texture2D %234 = OpLoad %145 
                                     sampler %235 = OpLoad %147 
                  read_only Texture2DSampled %236 = OpSampledImage %234 %235 
                                       f32_4 %237 = OpLoad %208 
                                       f32_2 %238 = OpVectorShuffle %237 %237 0 1 
                                       f32_4 %239 = OpImageSampleImplicitLod %236 %238 
                                                      OpStore %208 %239 
                                Private f32* %240 = OpAccessChain %208 %111 
                                         f32 %241 = OpLoad %240 
                                         f32 %242 = OpFAdd %241 %155 
                                Private f32* %243 = OpAccessChain %198 %26 
                                                      OpStore %243 %242 
                                Private f32* %245 = OpAccessChain %198 %26 
                                         f32 %246 = OpLoad %245 
                                Private f32* %247 = OpAccessChain %9 %26 
                                         f32 %248 = OpLoad %247 
                                        bool %249 = OpFOrdLessThan %246 %248 
                                                      OpStore %244 %249 
                                        bool %250 = OpLoad %244 
                                         f32 %251 = OpLoad %71 
                                         f32 %252 = OpSelect %250 %251 %175 
                                                      OpStore %71 %252 
                                       f32_4 %253 = OpLoad %208 
                                         f32 %254 = OpLoad %71 
                                       f32_4 %255 = OpCompositeConstruct %254 %254 %254 %254 
                                       f32_4 %256 = OpFMul %253 %255 
                                       f32_4 %257 = OpLoad %126 
                                       f32_4 %258 = OpFAdd %256 %257 
                                                      OpStore %126 %258 
                                Private f32* %259 = OpAccessChain %63 %26 
                                         f32 %260 = OpLoad %259 
                                         f32 %261 = OpLoad %71 
                                         f32 %262 = OpFAdd %260 %261 
                                Private f32* %263 = OpAccessChain %63 %26 
                                                      OpStore %263 %262 
                              Uniform f32_4* %265 = OpAccessChain %13 %264 
                                       f32_4 %266 = OpLoad %265 
                                       f32_2 %267 = OpVectorShuffle %266 %266 0 1 
                                       f32_2 %268 = OpLoad %9 
                                       f32_2 %269 = OpVectorShuffle %268 %268 0 0 
                                       f32_2 %270 = OpFMul %267 %269 
                                       f32_2 %271 = OpLoad vs_TEXCOORD0 
                                       f32_2 %272 = OpFAdd %270 %271 
                                                      OpStore %198 %272 
                                       f32_2 %273 = OpLoad %198 
                              Uniform f32_4* %274 = OpAccessChain %13 %39 
                                       f32_4 %275 = OpLoad %274 
                                       f32_2 %276 = OpVectorShuffle %275 %275 0 1 
                                       f32_2 %277 = OpFMul %273 %276 
                              Uniform f32_4* %278 = OpAccessChain %13 %39 
                                       f32_4 %279 = OpLoad %278 
                                       f32_2 %280 = OpVectorShuffle %279 %279 2 3 
                                       f32_2 %281 = OpFAdd %277 %280 
                                       f32_4 %282 = OpLoad %208 
                                       f32_4 %283 = OpVectorShuffle %282 %281 4 5 2 3 
                                                      OpStore %208 %283 
                         read_only Texture2D %284 = OpLoad %51 
                                     sampler %285 = OpLoad %55 
                  read_only Texture2DSampled %286 = OpSampledImage %284 %285 
                                       f32_2 %287 = OpLoad %198 
                                       f32_4 %288 = OpImageSampleImplicitLod %286 %287 
                                         f32 %289 = OpCompositeExtract %288 0 
                                                      OpStore %71 %289 
                                         f32 %290 = OpLoad %71 
                                Private f32* %291 = OpAccessChain %9 %17 
                                         f32 %292 = OpLoad %291 
                                        bool %293 = OpFOrdLessThan %290 %292 
                                                      OpStore %226 %293 
                                        bool %294 = OpLoad %226 
                                         f32 %295 = OpLoad %169 
                                         f32 %296 = OpSelect %294 %295 %175 
                                                      OpStore %71 %296 
                         read_only Texture2D %297 = OpLoad %145 
                                     sampler %298 = OpLoad %147 
                  read_only Texture2DSampled %299 = OpSampledImage %297 %298 
                                       f32_4 %300 = OpLoad %208 
                                       f32_2 %301 = OpVectorShuffle %300 %300 0 1 
                                       f32_4 %302 = OpImageSampleImplicitLod %299 %301 
                                                      OpStore %208 %302 
                                Private f32* %303 = OpAccessChain %208 %111 
                                         f32 %304 = OpLoad %303 
                                         f32 %305 = OpFAdd %304 %155 
                                Private f32* %306 = OpAccessChain %198 %26 
                                                      OpStore %306 %305 
                                Private f32* %307 = OpAccessChain %198 %26 
                                         f32 %308 = OpLoad %307 
                                Private f32* %309 = OpAccessChain %9 %26 
                                         f32 %310 = OpLoad %309 
                                        bool %311 = OpFOrdLessThan %308 %310 
                                                      OpStore %244 %311 
                                        bool %312 = OpLoad %244 
                                         f32 %313 = OpLoad %71 
                                         f32 %314 = OpSelect %312 %313 %175 
                                                      OpStore %71 %314 
                                       f32_4 %315 = OpLoad %208 
                                         f32 %316 = OpLoad %71 
                                       f32_4 %317 = OpCompositeConstruct %316 %316 %316 %316 
                                       f32_4 %318 = OpFMul %315 %317 
                                       f32_4 %319 = OpLoad %126 
                                       f32_4 %320 = OpFAdd %318 %319 
                                                      OpStore %126 %320 
                                         f32 %321 = OpLoad %71 
                                Private f32* %322 = OpAccessChain %63 %26 
                                         f32 %323 = OpLoad %322 
                                         f32 %324 = OpFAdd %321 %323 
                                Private f32* %325 = OpAccessChain %63 %26 
                                                      OpStore %325 %324 
                              Uniform f32_4* %327 = OpAccessChain %13 %326 
                                       f32_4 %328 = OpLoad %327 
                                       f32_2 %329 = OpVectorShuffle %328 %328 0 1 
                                       f32_2 %330 = OpLoad %9 
                                       f32_2 %331 = OpVectorShuffle %330 %330 0 0 
                                       f32_2 %332 = OpFMul %329 %331 
                                       f32_2 %333 = OpLoad vs_TEXCOORD0 
                                       f32_2 %334 = OpFAdd %332 %333 
                                                      OpStore %198 %334 
                                       f32_2 %335 = OpLoad %198 
                              Uniform f32_4* %336 = OpAccessChain %13 %39 
                                       f32_4 %337 = OpLoad %336 
                                       f32_2 %338 = OpVectorShuffle %337 %337 0 1 
                                       f32_2 %339 = OpFMul %335 %338 
                              Uniform f32_4* %340 = OpAccessChain %13 %39 
                                       f32_4 %341 = OpLoad %340 
                                       f32_2 %342 = OpVectorShuffle %341 %341 2 3 
                                       f32_2 %343 = OpFAdd %339 %342 
                                       f32_4 %344 = OpLoad %208 
                                       f32_4 %345 = OpVectorShuffle %344 %343 4 5 2 3 
                                                      OpStore %208 %345 
                         read_only Texture2D %346 = OpLoad %51 
                                     sampler %347 = OpLoad %55 
                  read_only Texture2DSampled %348 = OpSampledImage %346 %347 
                                       f32_2 %349 = OpLoad %198 
                                       f32_4 %350 = OpImageSampleImplicitLod %348 %349 
                                         f32 %351 = OpCompositeExtract %350 0 
                                                      OpStore %71 %351 
                                         f32 %352 = OpLoad %71 
                                Private f32* %353 = OpAccessChain %9 %17 
                                         f32 %354 = OpLoad %353 
                                        bool %355 = OpFOrdLessThan %352 %354 
                                                      OpStore %226 %355 
                                        bool %356 = OpLoad %226 
                                         f32 %357 = OpLoad %169 
                                         f32 %358 = OpSelect %356 %357 %175 
                                                      OpStore %71 %358 
                         read_only Texture2D %359 = OpLoad %145 
                                     sampler %360 = OpLoad %147 
                  read_only Texture2DSampled %361 = OpSampledImage %359 %360 
                                       f32_4 %362 = OpLoad %208 
                                       f32_2 %363 = OpVectorShuffle %362 %362 0 1 
                                       f32_4 %364 = OpImageSampleImplicitLod %361 %363 
                                                      OpStore %208 %364 
                                Private f32* %365 = OpAccessChain %208 %111 
                                         f32 %366 = OpLoad %365 
                                         f32 %367 = OpFAdd %366 %155 
                                Private f32* %368 = OpAccessChain %198 %26 
                                                      OpStore %368 %367 
                                Private f32* %369 = OpAccessChain %198 %26 
                                         f32 %370 = OpLoad %369 
                                Private f32* %371 = OpAccessChain %9 %26 
                                         f32 %372 = OpLoad %371 
                                        bool %373 = OpFOrdLessThan %370 %372 
                                                      OpStore %244 %373 
                                        bool %374 = OpLoad %244 
                                         f32 %375 = OpLoad %71 
                                         f32 %376 = OpSelect %374 %375 %175 
                                                      OpStore %71 %376 
                                       f32_4 %377 = OpLoad %208 
                                         f32 %378 = OpLoad %71 
                                       f32_4 %379 = OpCompositeConstruct %378 %378 %378 %378 
                                       f32_4 %380 = OpFMul %377 %379 
                                       f32_4 %381 = OpLoad %126 
                                       f32_4 %382 = OpFAdd %380 %381 
                                                      OpStore %126 %382 
                                         f32 %383 = OpLoad %71 
                                Private f32* %384 = OpAccessChain %63 %26 
                                         f32 %385 = OpLoad %384 
                                         f32 %386 = OpFAdd %383 %385 
                                Private f32* %387 = OpAccessChain %63 %26 
                                                      OpStore %387 %386 
                              Uniform f32_4* %389 = OpAccessChain %13 %388 
                                       f32_4 %390 = OpLoad %389 
                                       f32_2 %391 = OpVectorShuffle %390 %390 0 1 
                                       f32_2 %392 = OpLoad %9 
                                       f32_2 %393 = OpVectorShuffle %392 %392 0 0 
                                       f32_2 %394 = OpFMul %391 %393 
                                       f32_2 %395 = OpLoad vs_TEXCOORD0 
                                       f32_2 %396 = OpFAdd %394 %395 
                                                      OpStore %198 %396 
                                       f32_2 %397 = OpLoad %198 
                              Uniform f32_4* %398 = OpAccessChain %13 %39 
                                       f32_4 %399 = OpLoad %398 
                                       f32_2 %400 = OpVectorShuffle %399 %399 0 1 
                                       f32_2 %401 = OpFMul %397 %400 
                              Uniform f32_4* %402 = OpAccessChain %13 %39 
                                       f32_4 %403 = OpLoad %402 
                                       f32_2 %404 = OpVectorShuffle %403 %403 2 3 
                                       f32_2 %405 = OpFAdd %401 %404 
                                       f32_4 %406 = OpLoad %208 
                                       f32_4 %407 = OpVectorShuffle %406 %405 4 5 2 3 
                                                      OpStore %208 %407 
                         read_only Texture2D %408 = OpLoad %51 
                                     sampler %409 = OpLoad %55 
                  read_only Texture2DSampled %410 = OpSampledImage %408 %409 
                                       f32_2 %411 = OpLoad %198 
                                       f32_4 %412 = OpImageSampleImplicitLod %410 %411 
                                         f32 %413 = OpCompositeExtract %412 0 
                                                      OpStore %71 %413 
                                         f32 %414 = OpLoad %71 
                                Private f32* %415 = OpAccessChain %9 %17 
                                         f32 %416 = OpLoad %415 
                                        bool %417 = OpFOrdLessThan %414 %416 
                                                      OpStore %226 %417 
                                        bool %418 = OpLoad %226 
                                         f32 %419 = OpLoad %169 
                                         f32 %420 = OpSelect %418 %419 %175 
                                                      OpStore %71 %420 
                         read_only Texture2D %421 = OpLoad %145 
                                     sampler %422 = OpLoad %147 
                  read_only Texture2DSampled %423 = OpSampledImage %421 %422 
                                       f32_4 %424 = OpLoad %208 
                                       f32_2 %425 = OpVectorShuffle %424 %424 0 1 
                                       f32_4 %426 = OpImageSampleImplicitLod %423 %425 
                                                      OpStore %208 %426 
                                Private f32* %427 = OpAccessChain %208 %111 
                                         f32 %428 = OpLoad %427 
                                         f32 %429 = OpFAdd %428 %155 
                                Private f32* %430 = OpAccessChain %198 %26 
                                                      OpStore %430 %429 
                                Private f32* %431 = OpAccessChain %198 %26 
                                         f32 %432 = OpLoad %431 
                                Private f32* %433 = OpAccessChain %9 %26 
                                         f32 %434 = OpLoad %433 
                                        bool %435 = OpFOrdLessThan %432 %434 
                                                      OpStore %244 %435 
                                        bool %436 = OpLoad %244 
                                         f32 %437 = OpLoad %71 
                                         f32 %438 = OpSelect %436 %437 %175 
                                                      OpStore %71 %438 
                                       f32_4 %439 = OpLoad %208 
                                         f32 %440 = OpLoad %71 
                                       f32_4 %441 = OpCompositeConstruct %440 %440 %440 %440 
                                       f32_4 %442 = OpFMul %439 %441 
                                       f32_4 %443 = OpLoad %126 
                                       f32_4 %444 = OpFAdd %442 %443 
                                                      OpStore %126 %444 
                                         f32 %445 = OpLoad %71 
                                Private f32* %446 = OpAccessChain %63 %26 
                                         f32 %447 = OpLoad %446 
                                         f32 %448 = OpFAdd %445 %447 
                                Private f32* %449 = OpAccessChain %63 %26 
                                                      OpStore %449 %448 
                              Uniform f32_4* %451 = OpAccessChain %13 %450 
                                       f32_4 %452 = OpLoad %451 
                                       f32_2 %453 = OpVectorShuffle %452 %452 0 1 
                                       f32_2 %454 = OpLoad %9 
                                       f32_2 %455 = OpVectorShuffle %454 %454 0 0 
                                       f32_2 %456 = OpFMul %453 %455 
                                       f32_2 %457 = OpLoad vs_TEXCOORD0 
                                       f32_2 %458 = OpFAdd %456 %457 
                                                      OpStore %198 %458 
                                       f32_2 %459 = OpLoad %198 
                              Uniform f32_4* %460 = OpAccessChain %13 %39 
                                       f32_4 %461 = OpLoad %460 
                                       f32_2 %462 = OpVectorShuffle %461 %461 0 1 
                                       f32_2 %463 = OpFMul %459 %462 
                              Uniform f32_4* %464 = OpAccessChain %13 %39 
                                       f32_4 %465 = OpLoad %464 
                                       f32_2 %466 = OpVectorShuffle %465 %465 2 3 
                                       f32_2 %467 = OpFAdd %463 %466 
                                       f32_4 %468 = OpLoad %208 
                                       f32_4 %469 = OpVectorShuffle %468 %467 4 5 2 3 
                                                      OpStore %208 %469 
                         read_only Texture2D %470 = OpLoad %51 
                                     sampler %471 = OpLoad %55 
                  read_only Texture2DSampled %472 = OpSampledImage %470 %471 
                                       f32_2 %473 = OpLoad %198 
                                       f32_4 %474 = OpImageSampleImplicitLod %472 %473 
                                         f32 %475 = OpCompositeExtract %474 0 
                                                      OpStore %71 %475 
                                         f32 %476 = OpLoad %71 
                                Private f32* %477 = OpAccessChain %9 %17 
                                         f32 %478 = OpLoad %477 
                                        bool %479 = OpFOrdLessThan %476 %478 
                                                      OpStore %226 %479 
                                        bool %480 = OpLoad %226 
                                         f32 %481 = OpLoad %169 
                                         f32 %482 = OpSelect %480 %481 %175 
                                                      OpStore %71 %482 
                         read_only Texture2D %483 = OpLoad %145 
                                     sampler %484 = OpLoad %147 
                  read_only Texture2DSampled %485 = OpSampledImage %483 %484 
                                       f32_4 %486 = OpLoad %208 
                                       f32_2 %487 = OpVectorShuffle %486 %486 0 1 
                                       f32_4 %488 = OpImageSampleImplicitLod %485 %487 
                                                      OpStore %208 %488 
                                Private f32* %489 = OpAccessChain %208 %111 
                                         f32 %490 = OpLoad %489 
                                         f32 %491 = OpFAdd %490 %155 
                                Private f32* %492 = OpAccessChain %198 %26 
                                                      OpStore %492 %491 
                                Private f32* %493 = OpAccessChain %198 %26 
                                         f32 %494 = OpLoad %493 
                                Private f32* %495 = OpAccessChain %9 %26 
                                         f32 %496 = OpLoad %495 
                                        bool %497 = OpFOrdLessThan %494 %496 
                                                      OpStore %244 %497 
                                        bool %498 = OpLoad %244 
                                         f32 %499 = OpLoad %71 
                                         f32 %500 = OpSelect %498 %499 %175 
                                                      OpStore %71 %500 
                                       f32_4 %501 = OpLoad %208 
                                         f32 %502 = OpLoad %71 
                                       f32_4 %503 = OpCompositeConstruct %502 %502 %502 %502 
                                       f32_4 %504 = OpFMul %501 %503 
                                       f32_4 %505 = OpLoad %126 
                                       f32_4 %506 = OpFAdd %504 %505 
                                                      OpStore %126 %506 
                                         f32 %507 = OpLoad %71 
                                Private f32* %508 = OpAccessChain %63 %26 
                                         f32 %509 = OpLoad %508 
                                         f32 %510 = OpFAdd %507 %509 
                                Private f32* %511 = OpAccessChain %63 %26 
                                                      OpStore %511 %510 
                              Uniform f32_4* %513 = OpAccessChain %13 %512 
                                       f32_4 %514 = OpLoad %513 
                                       f32_2 %515 = OpVectorShuffle %514 %514 0 1 
                                       f32_2 %516 = OpLoad %9 
                                       f32_2 %517 = OpVectorShuffle %516 %516 0 0 
                                       f32_2 %518 = OpFMul %515 %517 
                                       f32_2 %519 = OpLoad vs_TEXCOORD0 
                                       f32_2 %520 = OpFAdd %518 %519 
                                                      OpStore %198 %520 
                         read_only Texture2D %521 = OpLoad %51 
                                     sampler %522 = OpLoad %55 
                  read_only Texture2DSampled %523 = OpSampledImage %521 %522 
                                       f32_2 %524 = OpLoad %198 
                                       f32_4 %525 = OpImageSampleImplicitLod %523 %524 
                                         f32 %526 = OpCompositeExtract %525 0 
                                                      OpStore %71 %526 
                                       f32_2 %527 = OpLoad %198 
                              Uniform f32_4* %528 = OpAccessChain %13 %39 
                                       f32_4 %529 = OpLoad %528 
                                       f32_2 %530 = OpVectorShuffle %529 %529 0 1 
                                       f32_2 %531 = OpFMul %527 %530 
                              Uniform f32_4* %532 = OpAccessChain %13 %39 
                                       f32_4 %533 = OpLoad %532 
                                       f32_2 %534 = OpVectorShuffle %533 %533 2 3 
                                       f32_2 %535 = OpFAdd %531 %534 
                                                      OpStore %198 %535 
                         read_only Texture2D %536 = OpLoad %145 
                                     sampler %537 = OpLoad %147 
                  read_only Texture2DSampled %538 = OpSampledImage %536 %537 
                                       f32_2 %539 = OpLoad %198 
                                       f32_4 %540 = OpImageSampleImplicitLod %538 %539 
                                                      OpStore %208 %540 
                                         f32 %541 = OpLoad %71 
                                Private f32* %542 = OpAccessChain %9 %17 
                                         f32 %543 = OpLoad %542 
                                        bool %544 = OpFOrdLessThan %541 %543 
                                                      OpStore %226 %544 
                                        bool %545 = OpLoad %226 
                                         f32 %546 = OpLoad %169 
                                         f32 %547 = OpSelect %545 %546 %175 
                                                      OpStore %71 %547 
                                Private f32* %548 = OpAccessChain %208 %111 
                                         f32 %549 = OpLoad %548 
                                         f32 %550 = OpFAdd %549 %155 
                                Private f32* %551 = OpAccessChain %198 %26 
                                                      OpStore %551 %550 
                                Private f32* %552 = OpAccessChain %198 %26 
                                         f32 %553 = OpLoad %552 
                                Private f32* %554 = OpAccessChain %9 %26 
                                         f32 %555 = OpLoad %554 
                                        bool %556 = OpFOrdLessThan %553 %555 
                                                      OpStore %244 %556 
                                        bool %557 = OpLoad %244 
                                         f32 %558 = OpLoad %71 
                                         f32 %559 = OpSelect %557 %558 %175 
                                                      OpStore %71 %559 
                                       f32_4 %560 = OpLoad %208 
                                         f32 %561 = OpLoad %71 
                                       f32_4 %562 = OpCompositeConstruct %561 %561 %561 %561 
                                       f32_4 %563 = OpFMul %560 %562 
                                       f32_4 %564 = OpLoad %126 
                                       f32_4 %565 = OpFAdd %563 %564 
                                                      OpStore %126 %565 
                                         f32 %566 = OpLoad %71 
                                Private f32* %567 = OpAccessChain %63 %26 
                                         f32 %568 = OpLoad %567 
                                         f32 %569 = OpFAdd %566 %568 
                                Private f32* %570 = OpAccessChain %63 %26 
                                                      OpStore %570 %569 
                              Uniform f32_4* %572 = OpAccessChain %13 %571 
                                       f32_4 %573 = OpLoad %572 
                                       f32_2 %574 = OpVectorShuffle %573 %573 0 1 
                                       f32_2 %575 = OpLoad %9 
                                       f32_2 %576 = OpVectorShuffle %575 %575 0 0 
                                       f32_2 %577 = OpFMul %574 %576 
                                       f32_2 %578 = OpLoad vs_TEXCOORD0 
                                       f32_2 %579 = OpFAdd %577 %578 
                                                      OpStore %198 %579 
                         read_only Texture2D %580 = OpLoad %51 
                                     sampler %581 = OpLoad %55 
                  read_only Texture2DSampled %582 = OpSampledImage %580 %581 
                                       f32_2 %583 = OpLoad %198 
                                       f32_4 %584 = OpImageSampleImplicitLod %582 %583 
                                         f32 %585 = OpCompositeExtract %584 0 
                                                      OpStore %71 %585 
                                       f32_2 %586 = OpLoad %198 
                              Uniform f32_4* %587 = OpAccessChain %13 %39 
                                       f32_4 %588 = OpLoad %587 
                                       f32_2 %589 = OpVectorShuffle %588 %588 0 1 
                                       f32_2 %590 = OpFMul %586 %589 
                              Uniform f32_4* %591 = OpAccessChain %13 %39 
                                       f32_4 %592 = OpLoad %591 
                                       f32_2 %593 = OpVectorShuffle %592 %592 2 3 
                                       f32_2 %594 = OpFAdd %590 %593 
                                                      OpStore %198 %594 
                         read_only Texture2D %595 = OpLoad %145 
                                     sampler %596 = OpLoad %147 
                  read_only Texture2DSampled %597 = OpSampledImage %595 %596 
                                       f32_2 %598 = OpLoad %198 
                                       f32_4 %599 = OpImageSampleImplicitLod %597 %598 
                                                      OpStore %208 %599 
                                         f32 %601 = OpLoad %71 
                                Private f32* %602 = OpAccessChain %9 %17 
                                         f32 %603 = OpLoad %602 
                                        bool %604 = OpFOrdLessThan %601 %603 
                                                      OpStore %600 %604 
                                        bool %605 = OpLoad %600 
                                         f32 %606 = OpLoad %169 
                                         f32 %607 = OpSelect %605 %606 %175 
                                Private f32* %608 = OpAccessChain %35 %26 
                                                      OpStore %608 %607 
                                Private f32* %609 = OpAccessChain %208 %111 
                                         f32 %610 = OpLoad %609 
                                         f32 %611 = OpFAdd %610 %155 
                                                      OpStore %71 %611 
                                         f32 %613 = OpLoad %71 
                                Private f32* %614 = OpAccessChain %9 %26 
                                         f32 %615 = OpLoad %614 
                                        bool %616 = OpFOrdLessThan %613 %615 
                                                      OpStore %612 %616 
                                        bool %617 = OpLoad %612 
                                                      OpSelectionMerge %620 None 
                                                      OpBranchConditional %617 %619 %623 
                                             %619 = OpLabel 
                                Private f32* %621 = OpAccessChain %35 %26 
                                         f32 %622 = OpLoad %621 
                                                      OpStore %618 %622 
                                                      OpBranch %620 
                                             %623 = OpLabel 
                                                      OpStore %618 %175 
                                                      OpBranch %620 
                                             %620 = OpLabel 
                                         f32 %624 = OpLoad %618 
                                Private f32* %625 = OpAccessChain %9 %26 
                                                      OpStore %625 %624 
                                       f32_4 %626 = OpLoad %208 
                                       f32_2 %627 = OpLoad %9 
                                       f32_4 %628 = OpVectorShuffle %627 %627 0 0 0 0 
                                       f32_4 %629 = OpFMul %626 %628 
                                       f32_4 %630 = OpLoad %126 
                                       f32_4 %631 = OpFAdd %629 %630 
                                                      OpStore %126 %631 
                                Private f32* %632 = OpAccessChain %9 %26 
                                         f32 %633 = OpLoad %632 
                                Private f32* %634 = OpAccessChain %63 %26 
                                         f32 %635 = OpLoad %634 
                                         f32 %636 = OpFAdd %633 %635 
                                Private f32* %637 = OpAccessChain %9 %26 
                                                      OpStore %637 %636 
                                       f32_4 %640 = OpLoad %126 
                                       f32_2 %641 = OpLoad %9 
                                       f32_4 %642 = OpVectorShuffle %641 %641 0 0 0 0 
                                       f32_4 %643 = OpFDiv %640 %642 
                                                      OpStore %639 %643 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "AB_HIGH_PRECISION" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "AB_HIGH_PRECISION" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in  vec4 in_POSITION0;
in  vec2 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _AnamorphicGlareWeights0;
uniform 	vec4 _AnamorphicGlareWeights1;
uniform 	vec4 _AnamorphicGlareWeights2;
uniform 	vec4 _AnamorphicGlareWeights3;
uniform 	vec4 _AnamorphicGlareWeights4;
uniform 	vec4 _AnamorphicGlareWeights5;
uniform 	vec4 _AnamorphicGlareWeights6;
uniform 	vec4 _AnamorphicGlareWeights7;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BokehParams;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
UNITY_LOCATION(1) uniform  sampler2D _CameraDepthTexture;
in  vec2 vs_TEXCOORD0;
layout(location = 0) out vec4 SV_Target0;
float u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
vec2 u_xlat5;
bool u_xlatb5;
vec2 u_xlat6;
bool u_xlatb6;
float u_xlat10;
bool u_xlatb10;
float u_xlat15;
void main()
{
    u_xlat0 = (-_BokehParams.y) + _BokehParams.z;
    u_xlat0 = _BokehParams.y / u_xlat0;
    u_xlat5.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1 = texture(_CameraDepthTexture, u_xlat5.xy);
    u_xlat5.x = u_xlat1.x * _ProjectionParams.z;
    u_xlat10 = u_xlat1.x * _ProjectionParams.z + (-_BokehParams.z);
    u_xlat5.x = abs(u_xlat10) / u_xlat5.x;
    u_xlat5.x = u_xlat5.x * _BokehParams.x;
    u_xlat0 = u_xlat0 * u_xlat5.x;
    u_xlat0 = u_xlat0 * 41.6669998;
    u_xlat0 = max(u_xlat0, 0.0);
    u_xlat0 = min(u_xlat0, _BokehParams.w);
    u_xlat5.xy = _AnamorphicGlareWeights1.xy * vec2(u_xlat0) + vs_TEXCOORD0.xy;
    u_xlat6.xy = u_xlat5.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat2 = texture(_CameraDepthTexture, u_xlat5.xy);
    u_xlatb5 = u_xlat2.x<u_xlat1.x;
    u_xlat2 = texture(_MainTex, u_xlat6.xy);
    u_xlat10 = u_xlat2.w + 0.0199999996;
    u_xlatb10 = u_xlat10<u_xlat0;
    u_xlat15 = u_xlat0 * 30.0;
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
    u_xlat5.x = (u_xlatb5) ? u_xlat15 : 1.0;
    u_xlat5.x = (u_xlatb10) ? u_xlat5.x : 1.0;
    u_xlat2 = u_xlat5.xxxx * u_xlat2;
    u_xlat6.xy = _AnamorphicGlareWeights0.xy * vec2(u_xlat0) + vs_TEXCOORD0.xy;
    u_xlat3.xy = u_xlat6.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat4 = texture(_CameraDepthTexture, u_xlat6.xy);
    u_xlatb10 = u_xlat4.x<u_xlat1.x;
    u_xlat10 = (u_xlatb10) ? u_xlat15 : 1.0;
    u_xlat3 = texture(_MainTex, u_xlat3.xy);
    u_xlat6.x = u_xlat3.w + 0.0199999996;
    u_xlatb6 = u_xlat6.x<u_xlat0;
    u_xlat10 = (u_xlatb6) ? u_xlat10 : 1.0;
    u_xlat2 = u_xlat3 * vec4(u_xlat10) + u_xlat2;
    u_xlat5.x = u_xlat5.x + u_xlat10;
    u_xlat6.xy = _AnamorphicGlareWeights2.xy * vec2(u_xlat0) + vs_TEXCOORD0.xy;
    u_xlat3.xy = u_xlat6.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat4 = texture(_CameraDepthTexture, u_xlat6.xy);
    u_xlatb10 = u_xlat4.x<u_xlat1.x;
    u_xlat10 = (u_xlatb10) ? u_xlat15 : 1.0;
    u_xlat3 = texture(_MainTex, u_xlat3.xy);
    u_xlat6.x = u_xlat3.w + 0.0199999996;
    u_xlatb6 = u_xlat6.x<u_xlat0;
    u_xlat10 = (u_xlatb6) ? u_xlat10 : 1.0;
    u_xlat2 = u_xlat3 * vec4(u_xlat10) + u_xlat2;
    u_xlat5.x = u_xlat10 + u_xlat5.x;
    u_xlat6.xy = _AnamorphicGlareWeights3.xy * vec2(u_xlat0) + vs_TEXCOORD0.xy;
    u_xlat3.xy = u_xlat6.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat4 = texture(_CameraDepthTexture, u_xlat6.xy);
    u_xlatb10 = u_xlat4.x<u_xlat1.x;
    u_xlat10 = (u_xlatb10) ? u_xlat15 : 1.0;
    u_xlat3 = texture(_MainTex, u_xlat3.xy);
    u_xlat6.x = u_xlat3.w + 0.0199999996;
    u_xlatb6 = u_xlat6.x<u_xlat0;
    u_xlat10 = (u_xlatb6) ? u_xlat10 : 1.0;
    u_xlat2 = u_xlat3 * vec4(u_xlat10) + u_xlat2;
    u_xlat5.x = u_xlat10 + u_xlat5.x;
    u_xlat6.xy = _AnamorphicGlareWeights4.xy * vec2(u_xlat0) + vs_TEXCOORD0.xy;
    u_xlat3.xy = u_xlat6.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat4 = texture(_CameraDepthTexture, u_xlat6.xy);
    u_xlatb10 = u_xlat4.x<u_xlat1.x;
    u_xlat10 = (u_xlatb10) ? u_xlat15 : 1.0;
    u_xlat3 = texture(_MainTex, u_xlat3.xy);
    u_xlat6.x = u_xlat3.w + 0.0199999996;
    u_xlatb6 = u_xlat6.x<u_xlat0;
    u_xlat10 = (u_xlatb6) ? u_xlat10 : 1.0;
    u_xlat2 = u_xlat3 * vec4(u_xlat10) + u_xlat2;
    u_xlat5.x = u_xlat10 + u_xlat5.x;
    u_xlat6.xy = _AnamorphicGlareWeights5.xy * vec2(u_xlat0) + vs_TEXCOORD0.xy;
    u_xlat3.xy = u_xlat6.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat4 = texture(_CameraDepthTexture, u_xlat6.xy);
    u_xlatb10 = u_xlat4.x<u_xlat1.x;
    u_xlat10 = (u_xlatb10) ? u_xlat15 : 1.0;
    u_xlat3 = texture(_MainTex, u_xlat3.xy);
    u_xlat6.x = u_xlat3.w + 0.0199999996;
    u_xlatb6 = u_xlat6.x<u_xlat0;
    u_xlat10 = (u_xlatb6) ? u_xlat10 : 1.0;
    u_xlat2 = u_xlat3 * vec4(u_xlat10) + u_xlat2;
    u_xlat5.x = u_xlat10 + u_xlat5.x;
    u_xlat6.xy = _AnamorphicGlareWeights6.xy * vec2(u_xlat0) + vs_TEXCOORD0.xy;
    u_xlat3 = texture(_CameraDepthTexture, u_xlat6.xy);
    u_xlat6.xy = u_xlat6.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat4 = texture(_MainTex, u_xlat6.xy);
    u_xlatb10 = u_xlat3.x<u_xlat1.x;
    u_xlat10 = (u_xlatb10) ? u_xlat15 : 1.0;
    u_xlat6.x = u_xlat4.w + 0.0199999996;
    u_xlatb6 = u_xlat6.x<u_xlat0;
    u_xlat10 = (u_xlatb6) ? u_xlat10 : 1.0;
    u_xlat2 = u_xlat4 * vec4(u_xlat10) + u_xlat2;
    u_xlat5.x = u_xlat10 + u_xlat5.x;
    u_xlat6.xy = _AnamorphicGlareWeights7.xy * vec2(u_xlat0) + vs_TEXCOORD0.xy;
    u_xlat3 = texture(_CameraDepthTexture, u_xlat6.xy);
    u_xlat6.xy = u_xlat6.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat4 = texture(_MainTex, u_xlat6.xy);
    u_xlatb10 = u_xlat3.x<u_xlat1.x;
    u_xlat10 = (u_xlatb10) ? u_xlat15 : 1.0;
    u_xlat15 = u_xlat4.w + 0.0199999996;
    u_xlatb0 = u_xlat15<u_xlat0;
    u_xlat0 = (u_xlatb0) ? u_xlat10 : 1.0;
    u_xlat1 = u_xlat4 * vec4(u_xlat0) + u_xlat2;
    u_xlat0 = u_xlat0 + u_xlat5.x;
    SV_Target0 = u_xlat1 / vec4(u_xlat0);
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "AB_HIGH_PRECISION" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 94
; Schema: 0
                                              OpCapability Shader 
                                       %1 = OpExtInstImport "GLSL.std.450" 
                                              OpMemoryModel Logical GLSL450 
                                              OpEntryPoint Vertex %4 "main" %11 %72 %84 %86 
                                              OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                              OpDecorate %11 Location 11 
                                              OpDecorate %16 ArrayStride 16 
                                              OpDecorate %17 ArrayStride 17 
                                              OpMemberDecorate %18 0 Offset 18 
                                              OpMemberDecorate %18 1 Offset 18 
                                              OpDecorate %18 Block 
                                              OpDecorate %20 DescriptorSet 20 
                                              OpDecorate %20 Binding 20 
                                              OpMemberDecorate %70 0 BuiltIn 70 
                                              OpMemberDecorate %70 1 BuiltIn 70 
                                              OpMemberDecorate %70 2 BuiltIn 70 
                                              OpDecorate %70 Block 
                                              OpDecorate vs_TEXCOORD0 Location 84 
                                              OpDecorate %86 Location 86 
                                       %2 = OpTypeVoid 
                                       %3 = OpTypeFunction %2 
                                       %6 = OpTypeFloat 32 
                                       %7 = OpTypeVector %6 4 
                                       %8 = OpTypePointer Private %7 
                        Private f32_4* %9 = OpVariable Private 
                                      %10 = OpTypePointer Input %7 
                         Input f32_4* %11 = OpVariable Input 
                                      %14 = OpTypeInt 32 0 
                                  u32 %15 = OpConstant 4 
                                      %16 = OpTypeArray %7 %15 
                                      %17 = OpTypeArray %7 %15 
                                      %18 = OpTypeStruct %16 %17 
                                      %19 = OpTypePointer Uniform %18 
Uniform struct {f32_4[4]; f32_4[4];}* %20 = OpVariable Uniform 
                                      %21 = OpTypeInt 32 1 
                                  i32 %22 = OpConstant 0 
                                  i32 %23 = OpConstant 1 
                                      %24 = OpTypePointer Uniform %7 
                                  i32 %35 = OpConstant 2 
                                  i32 %44 = OpConstant 3 
                       Private f32_4* %48 = OpVariable Private 
                                  u32 %68 = OpConstant 1 
                                      %69 = OpTypeArray %6 %68 
                                      %70 = OpTypeStruct %7 %6 %69 
                                      %71 = OpTypePointer Output %70 
 Output struct {f32_4; f32; f32[1];}* %72 = OpVariable Output 
                                      %80 = OpTypePointer Output %7 
                                      %82 = OpTypeVector %6 2 
                                      %83 = OpTypePointer Output %82 
               Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                      %85 = OpTypePointer Input %82 
                         Input f32_2* %86 = OpVariable Input 
                                      %88 = OpTypePointer Output %6 
                                  void %4 = OpFunction None %3 
                                       %5 = OpLabel 
                                f32_4 %12 = OpLoad %11 
                                f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                       Uniform f32_4* %25 = OpAccessChain %20 %22 %23 
                                f32_4 %26 = OpLoad %25 
                                f32_4 %27 = OpFMul %13 %26 
                                              OpStore %9 %27 
                       Uniform f32_4* %28 = OpAccessChain %20 %22 %22 
                                f32_4 %29 = OpLoad %28 
                                f32_4 %30 = OpLoad %11 
                                f32_4 %31 = OpVectorShuffle %30 %30 0 0 0 0 
                                f32_4 %32 = OpFMul %29 %31 
                                f32_4 %33 = OpLoad %9 
                                f32_4 %34 = OpFAdd %32 %33 
                                              OpStore %9 %34 
                       Uniform f32_4* %36 = OpAccessChain %20 %22 %35 
                                f32_4 %37 = OpLoad %36 
                                f32_4 %38 = OpLoad %11 
                                f32_4 %39 = OpVectorShuffle %38 %38 2 2 2 2 
                                f32_4 %40 = OpFMul %37 %39 
                                f32_4 %41 = OpLoad %9 
                                f32_4 %42 = OpFAdd %40 %41 
                                              OpStore %9 %42 
                                f32_4 %43 = OpLoad %9 
                       Uniform f32_4* %45 = OpAccessChain %20 %22 %44 
                                f32_4 %46 = OpLoad %45 
                                f32_4 %47 = OpFAdd %43 %46 
                                              OpStore %9 %47 
                                f32_4 %49 = OpLoad %9 
                                f32_4 %50 = OpVectorShuffle %49 %49 1 1 1 1 
                       Uniform f32_4* %51 = OpAccessChain %20 %23 %23 
                                f32_4 %52 = OpLoad %51 
                                f32_4 %53 = OpFMul %50 %52 
                                              OpStore %48 %53 
                       Uniform f32_4* %54 = OpAccessChain %20 %23 %22 
                                f32_4 %55 = OpLoad %54 
                                f32_4 %56 = OpLoad %9 
                                f32_4 %57 = OpVectorShuffle %56 %56 0 0 0 0 
                                f32_4 %58 = OpFMul %55 %57 
                                f32_4 %59 = OpLoad %48 
                                f32_4 %60 = OpFAdd %58 %59 
                                              OpStore %48 %60 
                       Uniform f32_4* %61 = OpAccessChain %20 %23 %35 
                                f32_4 %62 = OpLoad %61 
                                f32_4 %63 = OpLoad %9 
                                f32_4 %64 = OpVectorShuffle %63 %63 2 2 2 2 
                                f32_4 %65 = OpFMul %62 %64 
                                f32_4 %66 = OpLoad %48 
                                f32_4 %67 = OpFAdd %65 %66 
                                              OpStore %48 %67 
                       Uniform f32_4* %73 = OpAccessChain %20 %23 %44 
                                f32_4 %74 = OpLoad %73 
                                f32_4 %75 = OpLoad %9 
                                f32_4 %76 = OpVectorShuffle %75 %75 3 3 3 3 
                                f32_4 %77 = OpFMul %74 %76 
                                f32_4 %78 = OpLoad %48 
                                f32_4 %79 = OpFAdd %77 %78 
                        Output f32_4* %81 = OpAccessChain %72 %22 
                                              OpStore %81 %79 
                                f32_2 %87 = OpLoad %86 
                                              OpStore vs_TEXCOORD0 %87 
                          Output f32* %89 = OpAccessChain %72 %22 %68 
                                  f32 %90 = OpLoad %89 
                                  f32 %91 = OpFNegate %90 
                          Output f32* %92 = OpAccessChain %72 %22 %68 
                                              OpStore %92 %91 
                                              OpReturn
                                              OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 645
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %37 %639 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpMemberDecorate %11 0 Offset 11 
                                                      OpMemberDecorate %11 1 Offset 11 
                                                      OpMemberDecorate %11 2 Offset 11 
                                                      OpMemberDecorate %11 3 Offset 11 
                                                      OpMemberDecorate %11 4 Offset 11 
                                                      OpMemberDecorate %11 5 Offset 11 
                                                      OpMemberDecorate %11 6 Offset 11 
                                                      OpMemberDecorate %11 7 Offset 11 
                                                      OpMemberDecorate %11 8 Offset 11 
                                                      OpMemberDecorate %11 9 Offset 11 
                                                      OpMemberDecorate %11 10 Offset 11 
                                                      OpDecorate %11 Block 
                                                      OpDecorate %13 DescriptorSet 13 
                                                      OpDecorate %13 Binding 13 
                                                      OpDecorate vs_TEXCOORD0 Location 37 
                                                      OpDecorate %51 DescriptorSet 51 
                                                      OpDecorate %51 Binding 51 
                                                      OpDecorate %55 DescriptorSet 55 
                                                      OpDecorate %55 Binding 55 
                                                      OpDecorate %145 DescriptorSet 145 
                                                      OpDecorate %145 Binding 145 
                                                      OpDecorate %147 DescriptorSet 147 
                                                      OpDecorate %147 Binding 147 
                                                      OpDecorate %639 Location 639 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 2 
                                               %8 = OpTypePointer Private %7 
                                Private f32_2* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 4 
                                              %11 = OpTypeStruct %10 %10 %10 %10 %10 %10 %10 %10 %10 %10 %10 
                                              %12 = OpTypePointer Uniform %11 
Uniform struct {f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4;}* %13 = OpVariable Uniform 
                                              %14 = OpTypeInt 32 1 
                                          i32 %15 = OpConstant 10 
                                              %16 = OpTypeInt 32 0 
                                          u32 %17 = OpConstant 1 
                                              %18 = OpTypePointer Uniform %6 
                                          u32 %22 = OpConstant 2 
                                          u32 %26 = OpConstant 0 
                                              %27 = OpTypePointer Private %6 
                               Private f32_2* %35 = OpVariable Private 
                                              %36 = OpTypePointer Input %7 
                        Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                          i32 %39 = OpConstant 9 
                                              %40 = OpTypePointer Uniform %10 
                                              %49 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %50 = OpTypePointer UniformConstant %49 
         UniformConstant read_only Texture2D* %51 = OpVariable UniformConstant 
                                              %53 = OpTypeSampler 
                                              %54 = OpTypePointer UniformConstant %53 
                     UniformConstant sampler* %55 = OpVariable UniformConstant 
                                              %57 = OpTypeSampledImage %49 
                               Private f32_2* %63 = OpVariable Private 
                                          i32 %66 = OpConstant 0 
                                 Private f32* %71 = OpVariable Private 
                                         f32 %101 = OpConstant 3.674022E-40 
                                         f32 %106 = OpConstant 3.674022E-40 
                                         u32 %111 = OpConstant 3 
                                         i32 %116 = OpConstant 2 
                                             %125 = OpTypePointer Private %10 
                              Private f32_4* %126 = OpVariable Private 
        UniformConstant read_only Texture2D* %145 = OpVariable UniformConstant 
                    UniformConstant sampler* %147 = OpVariable UniformConstant 
                                         f32 %155 = OpConstant 3.674022E-40 
                                             %158 = OpTypeBool 
                                             %159 = OpTypeVector %158 2 
                                             %160 = OpTypePointer Private %159 
                             Private bool_2* %161 = OpVariable Private 
                                             %166 = OpTypeVector %158 4 
                                Private f32* %169 = OpVariable Private 
                                         f32 %172 = OpConstant 3.674022E-40 
                                         f32 %175 = OpConstant 3.674022E-40 
                                             %177 = OpTypePointer Private %158 
                                             %185 = OpTypePointer Function %6 
                              Private f32_2* %198 = OpVariable Private 
                                         i32 %199 = OpConstant 1 
                              Private f32_4* %208 = OpVariable Private 
                               Private bool* %226 = OpVariable Private 
                               Private bool* %244 = OpVariable Private 
                                         i32 %264 = OpConstant 3 
                                         i32 %326 = OpConstant 4 
                                         i32 %388 = OpConstant 5 
                                         i32 %450 = OpConstant 6 
                                         i32 %512 = OpConstant 7 
                                         i32 %571 = OpConstant 8 
                               Private bool* %600 = OpVariable Private 
                               Private bool* %612 = OpVariable Private 
                                             %638 = OpTypePointer Output %10 
                               Output f32_4* %639 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                               Function f32* %186 = OpVariable Function 
                               Function f32* %618 = OpVariable Function 
                                 Uniform f32* %19 = OpAccessChain %13 %15 %17 
                                          f32 %20 = OpLoad %19 
                                          f32 %21 = OpFNegate %20 
                                 Uniform f32* %23 = OpAccessChain %13 %15 %22 
                                          f32 %24 = OpLoad %23 
                                          f32 %25 = OpFAdd %21 %24 
                                 Private f32* %28 = OpAccessChain %9 %26 
                                                      OpStore %28 %25 
                                 Uniform f32* %29 = OpAccessChain %13 %15 %17 
                                          f32 %30 = OpLoad %29 
                                 Private f32* %31 = OpAccessChain %9 %26 
                                          f32 %32 = OpLoad %31 
                                          f32 %33 = OpFDiv %30 %32 
                                 Private f32* %34 = OpAccessChain %9 %26 
                                                      OpStore %34 %33 
                                        f32_2 %38 = OpLoad vs_TEXCOORD0 
                               Uniform f32_4* %41 = OpAccessChain %13 %39 
                                        f32_4 %42 = OpLoad %41 
                                        f32_2 %43 = OpVectorShuffle %42 %42 0 1 
                                        f32_2 %44 = OpFMul %38 %43 
                               Uniform f32_4* %45 = OpAccessChain %13 %39 
                                        f32_4 %46 = OpLoad %45 
                                        f32_2 %47 = OpVectorShuffle %46 %46 2 3 
                                        f32_2 %48 = OpFAdd %44 %47 
                                                      OpStore %35 %48 
                          read_only Texture2D %52 = OpLoad %51 
                                      sampler %56 = OpLoad %55 
                   read_only Texture2DSampled %58 = OpSampledImage %52 %56 
                                        f32_2 %59 = OpLoad %35 
                                        f32_4 %60 = OpImageSampleImplicitLod %58 %59 
                                          f32 %61 = OpCompositeExtract %60 0 
                                 Private f32* %62 = OpAccessChain %9 %17 
                                                      OpStore %62 %61 
                                 Private f32* %64 = OpAccessChain %9 %17 
                                          f32 %65 = OpLoad %64 
                                 Uniform f32* %67 = OpAccessChain %13 %66 %22 
                                          f32 %68 = OpLoad %67 
                                          f32 %69 = OpFMul %65 %68 
                                 Private f32* %70 = OpAccessChain %63 %26 
                                                      OpStore %70 %69 
                                 Private f32* %72 = OpAccessChain %9 %17 
                                          f32 %73 = OpLoad %72 
                                 Uniform f32* %74 = OpAccessChain %13 %66 %22 
                                          f32 %75 = OpLoad %74 
                                          f32 %76 = OpFMul %73 %75 
                                 Uniform f32* %77 = OpAccessChain %13 %15 %22 
                                          f32 %78 = OpLoad %77 
                                          f32 %79 = OpFNegate %78 
                                          f32 %80 = OpFAdd %76 %79 
                                                      OpStore %71 %80 
                                          f32 %81 = OpLoad %71 
                                          f32 %82 = OpExtInst %1 4 %81 
                                 Private f32* %83 = OpAccessChain %63 %26 
                                          f32 %84 = OpLoad %83 
                                          f32 %85 = OpFDiv %82 %84 
                                 Private f32* %86 = OpAccessChain %63 %26 
                                                      OpStore %86 %85 
                                 Private f32* %87 = OpAccessChain %63 %26 
                                          f32 %88 = OpLoad %87 
                                 Uniform f32* %89 = OpAccessChain %13 %15 %26 
                                          f32 %90 = OpLoad %89 
                                          f32 %91 = OpFMul %88 %90 
                                 Private f32* %92 = OpAccessChain %63 %26 
                                                      OpStore %92 %91 
                                 Private f32* %93 = OpAccessChain %9 %26 
                                          f32 %94 = OpLoad %93 
                                 Private f32* %95 = OpAccessChain %63 %26 
                                          f32 %96 = OpLoad %95 
                                          f32 %97 = OpFMul %94 %96 
                                 Private f32* %98 = OpAccessChain %9 %26 
                                                      OpStore %98 %97 
                                 Private f32* %99 = OpAccessChain %9 %26 
                                         f32 %100 = OpLoad %99 
                                         f32 %102 = OpFMul %100 %101 
                                Private f32* %103 = OpAccessChain %9 %26 
                                                      OpStore %103 %102 
                                Private f32* %104 = OpAccessChain %9 %26 
                                         f32 %105 = OpLoad %104 
                                         f32 %107 = OpExtInst %1 40 %105 %106 
                                Private f32* %108 = OpAccessChain %9 %26 
                                                      OpStore %108 %107 
                                Private f32* %109 = OpAccessChain %9 %26 
                                         f32 %110 = OpLoad %109 
                                Uniform f32* %112 = OpAccessChain %13 %15 %111 
                                         f32 %113 = OpLoad %112 
                                         f32 %114 = OpExtInst %1 37 %110 %113 
                                Private f32* %115 = OpAccessChain %9 %26 
                                                      OpStore %115 %114 
                              Uniform f32_4* %117 = OpAccessChain %13 %116 
                                       f32_4 %118 = OpLoad %117 
                                       f32_2 %119 = OpVectorShuffle %118 %118 0 1 
                                       f32_2 %120 = OpLoad %9 
                                       f32_2 %121 = OpVectorShuffle %120 %120 0 0 
                                       f32_2 %122 = OpFMul %119 %121 
                                       f32_2 %123 = OpLoad vs_TEXCOORD0 
                                       f32_2 %124 = OpFAdd %122 %123 
                                                      OpStore %63 %124 
                                       f32_2 %127 = OpLoad %63 
                              Uniform f32_4* %128 = OpAccessChain %13 %39 
                                       f32_4 %129 = OpLoad %128 
                                       f32_2 %130 = OpVectorShuffle %129 %129 0 1 
                                       f32_2 %131 = OpFMul %127 %130 
                              Uniform f32_4* %132 = OpAccessChain %13 %39 
                                       f32_4 %133 = OpLoad %132 
                                       f32_2 %134 = OpVectorShuffle %133 %133 2 3 
                                       f32_2 %135 = OpFAdd %131 %134 
                                       f32_4 %136 = OpLoad %126 
                                       f32_4 %137 = OpVectorShuffle %136 %135 4 5 2 3 
                                                      OpStore %126 %137 
                         read_only Texture2D %138 = OpLoad %51 
                                     sampler %139 = OpLoad %55 
                  read_only Texture2DSampled %140 = OpSampledImage %138 %139 
                                       f32_2 %141 = OpLoad %63 
                                       f32_4 %142 = OpImageSampleImplicitLod %140 %141 
                                         f32 %143 = OpCompositeExtract %142 0 
                                Private f32* %144 = OpAccessChain %63 %26 
                                                      OpStore %144 %143 
                         read_only Texture2D %146 = OpLoad %145 
                                     sampler %148 = OpLoad %147 
                  read_only Texture2DSampled %149 = OpSampledImage %146 %148 
                                       f32_4 %150 = OpLoad %126 
                                       f32_2 %151 = OpVectorShuffle %150 %150 0 1 
                                       f32_4 %152 = OpImageSampleImplicitLod %149 %151 
                                                      OpStore %126 %152 
                                Private f32* %153 = OpAccessChain %126 %111 
                                         f32 %154 = OpLoad %153 
                                         f32 %156 = OpFAdd %154 %155 
                                Private f32* %157 = OpAccessChain %63 %17 
                                                      OpStore %157 %156 
                                       f32_2 %162 = OpLoad %63 
                                       f32_4 %163 = OpVectorShuffle %162 %162 0 1 0 1 
                                       f32_2 %164 = OpLoad %9 
                                       f32_4 %165 = OpVectorShuffle %164 %164 1 0 1 0 
                                      bool_4 %167 = OpFOrdLessThan %163 %165 
                                      bool_2 %168 = OpVectorShuffle %167 %167 0 1 
                                                      OpStore %161 %168 
                                Private f32* %170 = OpAccessChain %9 %26 
                                         f32 %171 = OpLoad %170 
                                         f32 %173 = OpFMul %171 %172 
                                                      OpStore %169 %173 
                                         f32 %174 = OpLoad %169 
                                         f32 %176 = OpExtInst %1 43 %174 %106 %175 
                                                      OpStore %169 %176 
                               Private bool* %178 = OpAccessChain %161 %26 
                                        bool %179 = OpLoad %178 
                                         f32 %180 = OpLoad %169 
                                         f32 %181 = OpSelect %179 %180 %175 
                                Private f32* %182 = OpAccessChain %63 %26 
                                                      OpStore %182 %181 
                               Private bool* %183 = OpAccessChain %161 %17 
                                        bool %184 = OpLoad %183 
                                                      OpSelectionMerge %188 None 
                                                      OpBranchConditional %184 %187 %191 
                                             %187 = OpLabel 
                                Private f32* %189 = OpAccessChain %63 %26 
                                         f32 %190 = OpLoad %189 
                                                      OpStore %186 %190 
                                                      OpBranch %188 
                                             %191 = OpLabel 
                                                      OpStore %186 %175 
                                                      OpBranch %188 
                                             %188 = OpLabel 
                                         f32 %192 = OpLoad %186 
                                Private f32* %193 = OpAccessChain %63 %26 
                                                      OpStore %193 %192 
                                       f32_2 %194 = OpLoad %63 
                                       f32_4 %195 = OpVectorShuffle %194 %194 0 0 0 0 
                                       f32_4 %196 = OpLoad %126 
                                       f32_4 %197 = OpFMul %195 %196 
                                                      OpStore %126 %197 
                              Uniform f32_4* %200 = OpAccessChain %13 %199 
                                       f32_4 %201 = OpLoad %200 
                                       f32_2 %202 = OpVectorShuffle %201 %201 0 1 
                                       f32_2 %203 = OpLoad %9 
                                       f32_2 %204 = OpVectorShuffle %203 %203 0 0 
                                       f32_2 %205 = OpFMul %202 %204 
                                       f32_2 %206 = OpLoad vs_TEXCOORD0 
                                       f32_2 %207 = OpFAdd %205 %206 
                                                      OpStore %198 %207 
                                       f32_2 %209 = OpLoad %198 
                              Uniform f32_4* %210 = OpAccessChain %13 %39 
                                       f32_4 %211 = OpLoad %210 
                                       f32_2 %212 = OpVectorShuffle %211 %211 0 1 
                                       f32_2 %213 = OpFMul %209 %212 
                              Uniform f32_4* %214 = OpAccessChain %13 %39 
                                       f32_4 %215 = OpLoad %214 
                                       f32_2 %216 = OpVectorShuffle %215 %215 2 3 
                                       f32_2 %217 = OpFAdd %213 %216 
                                       f32_4 %218 = OpLoad %208 
                                       f32_4 %219 = OpVectorShuffle %218 %217 4 5 2 3 
                                                      OpStore %208 %219 
                         read_only Texture2D %220 = OpLoad %51 
                                     sampler %221 = OpLoad %55 
                  read_only Texture2DSampled %222 = OpSampledImage %220 %221 
                                       f32_2 %223 = OpLoad %198 
                                       f32_4 %224 = OpImageSampleImplicitLod %222 %223 
                                         f32 %225 = OpCompositeExtract %224 0 
                                                      OpStore %71 %225 
                                         f32 %227 = OpLoad %71 
                                Private f32* %228 = OpAccessChain %9 %17 
                                         f32 %229 = OpLoad %228 
                                        bool %230 = OpFOrdLessThan %227 %229 
                                                      OpStore %226 %230 
                                        bool %231 = OpLoad %226 
                                         f32 %232 = OpLoad %169 
                                         f32 %233 = OpSelect %231 %232 %175 
                                                      OpStore %71 %233 
                         read_only Texture2D %234 = OpLoad %145 
                                     sampler %235 = OpLoad %147 
                  read_only Texture2DSampled %236 = OpSampledImage %234 %235 
                                       f32_4 %237 = OpLoad %208 
                                       f32_2 %238 = OpVectorShuffle %237 %237 0 1 
                                       f32_4 %239 = OpImageSampleImplicitLod %236 %238 
                                                      OpStore %208 %239 
                                Private f32* %240 = OpAccessChain %208 %111 
                                         f32 %241 = OpLoad %240 
                                         f32 %242 = OpFAdd %241 %155 
                                Private f32* %243 = OpAccessChain %198 %26 
                                                      OpStore %243 %242 
                                Private f32* %245 = OpAccessChain %198 %26 
                                         f32 %246 = OpLoad %245 
                                Private f32* %247 = OpAccessChain %9 %26 
                                         f32 %248 = OpLoad %247 
                                        bool %249 = OpFOrdLessThan %246 %248 
                                                      OpStore %244 %249 
                                        bool %250 = OpLoad %244 
                                         f32 %251 = OpLoad %71 
                                         f32 %252 = OpSelect %250 %251 %175 
                                                      OpStore %71 %252 
                                       f32_4 %253 = OpLoad %208 
                                         f32 %254 = OpLoad %71 
                                       f32_4 %255 = OpCompositeConstruct %254 %254 %254 %254 
                                       f32_4 %256 = OpFMul %253 %255 
                                       f32_4 %257 = OpLoad %126 
                                       f32_4 %258 = OpFAdd %256 %257 
                                                      OpStore %126 %258 
                                Private f32* %259 = OpAccessChain %63 %26 
                                         f32 %260 = OpLoad %259 
                                         f32 %261 = OpLoad %71 
                                         f32 %262 = OpFAdd %260 %261 
                                Private f32* %263 = OpAccessChain %63 %26 
                                                      OpStore %263 %262 
                              Uniform f32_4* %265 = OpAccessChain %13 %264 
                                       f32_4 %266 = OpLoad %265 
                                       f32_2 %267 = OpVectorShuffle %266 %266 0 1 
                                       f32_2 %268 = OpLoad %9 
                                       f32_2 %269 = OpVectorShuffle %268 %268 0 0 
                                       f32_2 %270 = OpFMul %267 %269 
                                       f32_2 %271 = OpLoad vs_TEXCOORD0 
                                       f32_2 %272 = OpFAdd %270 %271 
                                                      OpStore %198 %272 
                                       f32_2 %273 = OpLoad %198 
                              Uniform f32_4* %274 = OpAccessChain %13 %39 
                                       f32_4 %275 = OpLoad %274 
                                       f32_2 %276 = OpVectorShuffle %275 %275 0 1 
                                       f32_2 %277 = OpFMul %273 %276 
                              Uniform f32_4* %278 = OpAccessChain %13 %39 
                                       f32_4 %279 = OpLoad %278 
                                       f32_2 %280 = OpVectorShuffle %279 %279 2 3 
                                       f32_2 %281 = OpFAdd %277 %280 
                                       f32_4 %282 = OpLoad %208 
                                       f32_4 %283 = OpVectorShuffle %282 %281 4 5 2 3 
                                                      OpStore %208 %283 
                         read_only Texture2D %284 = OpLoad %51 
                                     sampler %285 = OpLoad %55 
                  read_only Texture2DSampled %286 = OpSampledImage %284 %285 
                                       f32_2 %287 = OpLoad %198 
                                       f32_4 %288 = OpImageSampleImplicitLod %286 %287 
                                         f32 %289 = OpCompositeExtract %288 0 
                                                      OpStore %71 %289 
                                         f32 %290 = OpLoad %71 
                                Private f32* %291 = OpAccessChain %9 %17 
                                         f32 %292 = OpLoad %291 
                                        bool %293 = OpFOrdLessThan %290 %292 
                                                      OpStore %226 %293 
                                        bool %294 = OpLoad %226 
                                         f32 %295 = OpLoad %169 
                                         f32 %296 = OpSelect %294 %295 %175 
                                                      OpStore %71 %296 
                         read_only Texture2D %297 = OpLoad %145 
                                     sampler %298 = OpLoad %147 
                  read_only Texture2DSampled %299 = OpSampledImage %297 %298 
                                       f32_4 %300 = OpLoad %208 
                                       f32_2 %301 = OpVectorShuffle %300 %300 0 1 
                                       f32_4 %302 = OpImageSampleImplicitLod %299 %301 
                                                      OpStore %208 %302 
                                Private f32* %303 = OpAccessChain %208 %111 
                                         f32 %304 = OpLoad %303 
                                         f32 %305 = OpFAdd %304 %155 
                                Private f32* %306 = OpAccessChain %198 %26 
                                                      OpStore %306 %305 
                                Private f32* %307 = OpAccessChain %198 %26 
                                         f32 %308 = OpLoad %307 
                                Private f32* %309 = OpAccessChain %9 %26 
                                         f32 %310 = OpLoad %309 
                                        bool %311 = OpFOrdLessThan %308 %310 
                                                      OpStore %244 %311 
                                        bool %312 = OpLoad %244 
                                         f32 %313 = OpLoad %71 
                                         f32 %314 = OpSelect %312 %313 %175 
                                                      OpStore %71 %314 
                                       f32_4 %315 = OpLoad %208 
                                         f32 %316 = OpLoad %71 
                                       f32_4 %317 = OpCompositeConstruct %316 %316 %316 %316 
                                       f32_4 %318 = OpFMul %315 %317 
                                       f32_4 %319 = OpLoad %126 
                                       f32_4 %320 = OpFAdd %318 %319 
                                                      OpStore %126 %320 
                                         f32 %321 = OpLoad %71 
                                Private f32* %322 = OpAccessChain %63 %26 
                                         f32 %323 = OpLoad %322 
                                         f32 %324 = OpFAdd %321 %323 
                                Private f32* %325 = OpAccessChain %63 %26 
                                                      OpStore %325 %324 
                              Uniform f32_4* %327 = OpAccessChain %13 %326 
                                       f32_4 %328 = OpLoad %327 
                                       f32_2 %329 = OpVectorShuffle %328 %328 0 1 
                                       f32_2 %330 = OpLoad %9 
                                       f32_2 %331 = OpVectorShuffle %330 %330 0 0 
                                       f32_2 %332 = OpFMul %329 %331 
                                       f32_2 %333 = OpLoad vs_TEXCOORD0 
                                       f32_2 %334 = OpFAdd %332 %333 
                                                      OpStore %198 %334 
                                       f32_2 %335 = OpLoad %198 
                              Uniform f32_4* %336 = OpAccessChain %13 %39 
                                       f32_4 %337 = OpLoad %336 
                                       f32_2 %338 = OpVectorShuffle %337 %337 0 1 
                                       f32_2 %339 = OpFMul %335 %338 
                              Uniform f32_4* %340 = OpAccessChain %13 %39 
                                       f32_4 %341 = OpLoad %340 
                                       f32_2 %342 = OpVectorShuffle %341 %341 2 3 
                                       f32_2 %343 = OpFAdd %339 %342 
                                       f32_4 %344 = OpLoad %208 
                                       f32_4 %345 = OpVectorShuffle %344 %343 4 5 2 3 
                                                      OpStore %208 %345 
                         read_only Texture2D %346 = OpLoad %51 
                                     sampler %347 = OpLoad %55 
                  read_only Texture2DSampled %348 = OpSampledImage %346 %347 
                                       f32_2 %349 = OpLoad %198 
                                       f32_4 %350 = OpImageSampleImplicitLod %348 %349 
                                         f32 %351 = OpCompositeExtract %350 0 
                                                      OpStore %71 %351 
                                         f32 %352 = OpLoad %71 
                                Private f32* %353 = OpAccessChain %9 %17 
                                         f32 %354 = OpLoad %353 
                                        bool %355 = OpFOrdLessThan %352 %354 
                                                      OpStore %226 %355 
                                        bool %356 = OpLoad %226 
                                         f32 %357 = OpLoad %169 
                                         f32 %358 = OpSelect %356 %357 %175 
                                                      OpStore %71 %358 
                         read_only Texture2D %359 = OpLoad %145 
                                     sampler %360 = OpLoad %147 
                  read_only Texture2DSampled %361 = OpSampledImage %359 %360 
                                       f32_4 %362 = OpLoad %208 
                                       f32_2 %363 = OpVectorShuffle %362 %362 0 1 
                                       f32_4 %364 = OpImageSampleImplicitLod %361 %363 
                                                      OpStore %208 %364 
                                Private f32* %365 = OpAccessChain %208 %111 
                                         f32 %366 = OpLoad %365 
                                         f32 %367 = OpFAdd %366 %155 
                                Private f32* %368 = OpAccessChain %198 %26 
                                                      OpStore %368 %367 
                                Private f32* %369 = OpAccessChain %198 %26 
                                         f32 %370 = OpLoad %369 
                                Private f32* %371 = OpAccessChain %9 %26 
                                         f32 %372 = OpLoad %371 
                                        bool %373 = OpFOrdLessThan %370 %372 
                                                      OpStore %244 %373 
                                        bool %374 = OpLoad %244 
                                         f32 %375 = OpLoad %71 
                                         f32 %376 = OpSelect %374 %375 %175 
                                                      OpStore %71 %376 
                                       f32_4 %377 = OpLoad %208 
                                         f32 %378 = OpLoad %71 
                                       f32_4 %379 = OpCompositeConstruct %378 %378 %378 %378 
                                       f32_4 %380 = OpFMul %377 %379 
                                       f32_4 %381 = OpLoad %126 
                                       f32_4 %382 = OpFAdd %380 %381 
                                                      OpStore %126 %382 
                                         f32 %383 = OpLoad %71 
                                Private f32* %384 = OpAccessChain %63 %26 
                                         f32 %385 = OpLoad %384 
                                         f32 %386 = OpFAdd %383 %385 
                                Private f32* %387 = OpAccessChain %63 %26 
                                                      OpStore %387 %386 
                              Uniform f32_4* %389 = OpAccessChain %13 %388 
                                       f32_4 %390 = OpLoad %389 
                                       f32_2 %391 = OpVectorShuffle %390 %390 0 1 
                                       f32_2 %392 = OpLoad %9 
                                       f32_2 %393 = OpVectorShuffle %392 %392 0 0 
                                       f32_2 %394 = OpFMul %391 %393 
                                       f32_2 %395 = OpLoad vs_TEXCOORD0 
                                       f32_2 %396 = OpFAdd %394 %395 
                                                      OpStore %198 %396 
                                       f32_2 %397 = OpLoad %198 
                              Uniform f32_4* %398 = OpAccessChain %13 %39 
                                       f32_4 %399 = OpLoad %398 
                                       f32_2 %400 = OpVectorShuffle %399 %399 0 1 
                                       f32_2 %401 = OpFMul %397 %400 
                              Uniform f32_4* %402 = OpAccessChain %13 %39 
                                       f32_4 %403 = OpLoad %402 
                                       f32_2 %404 = OpVectorShuffle %403 %403 2 3 
                                       f32_2 %405 = OpFAdd %401 %404 
                                       f32_4 %406 = OpLoad %208 
                                       f32_4 %407 = OpVectorShuffle %406 %405 4 5 2 3 
                                                      OpStore %208 %407 
                         read_only Texture2D %408 = OpLoad %51 
                                     sampler %409 = OpLoad %55 
                  read_only Texture2DSampled %410 = OpSampledImage %408 %409 
                                       f32_2 %411 = OpLoad %198 
                                       f32_4 %412 = OpImageSampleImplicitLod %410 %411 
                                         f32 %413 = OpCompositeExtract %412 0 
                                                      OpStore %71 %413 
                                         f32 %414 = OpLoad %71 
                                Private f32* %415 = OpAccessChain %9 %17 
                                         f32 %416 = OpLoad %415 
                                        bool %417 = OpFOrdLessThan %414 %416 
                                                      OpStore %226 %417 
                                        bool %418 = OpLoad %226 
                                         f32 %419 = OpLoad %169 
                                         f32 %420 = OpSelect %418 %419 %175 
                                                      OpStore %71 %420 
                         read_only Texture2D %421 = OpLoad %145 
                                     sampler %422 = OpLoad %147 
                  read_only Texture2DSampled %423 = OpSampledImage %421 %422 
                                       f32_4 %424 = OpLoad %208 
                                       f32_2 %425 = OpVectorShuffle %424 %424 0 1 
                                       f32_4 %426 = OpImageSampleImplicitLod %423 %425 
                                                      OpStore %208 %426 
                                Private f32* %427 = OpAccessChain %208 %111 
                                         f32 %428 = OpLoad %427 
                                         f32 %429 = OpFAdd %428 %155 
                                Private f32* %430 = OpAccessChain %198 %26 
                                                      OpStore %430 %429 
                                Private f32* %431 = OpAccessChain %198 %26 
                                         f32 %432 = OpLoad %431 
                                Private f32* %433 = OpAccessChain %9 %26 
                                         f32 %434 = OpLoad %433 
                                        bool %435 = OpFOrdLessThan %432 %434 
                                                      OpStore %244 %435 
                                        bool %436 = OpLoad %244 
                                         f32 %437 = OpLoad %71 
                                         f32 %438 = OpSelect %436 %437 %175 
                                                      OpStore %71 %438 
                                       f32_4 %439 = OpLoad %208 
                                         f32 %440 = OpLoad %71 
                                       f32_4 %441 = OpCompositeConstruct %440 %440 %440 %440 
                                       f32_4 %442 = OpFMul %439 %441 
                                       f32_4 %443 = OpLoad %126 
                                       f32_4 %444 = OpFAdd %442 %443 
                                                      OpStore %126 %444 
                                         f32 %445 = OpLoad %71 
                                Private f32* %446 = OpAccessChain %63 %26 
                                         f32 %447 = OpLoad %446 
                                         f32 %448 = OpFAdd %445 %447 
                                Private f32* %449 = OpAccessChain %63 %26 
                                                      OpStore %449 %448 
                              Uniform f32_4* %451 = OpAccessChain %13 %450 
                                       f32_4 %452 = OpLoad %451 
                                       f32_2 %453 = OpVectorShuffle %452 %452 0 1 
                                       f32_2 %454 = OpLoad %9 
                                       f32_2 %455 = OpVectorShuffle %454 %454 0 0 
                                       f32_2 %456 = OpFMul %453 %455 
                                       f32_2 %457 = OpLoad vs_TEXCOORD0 
                                       f32_2 %458 = OpFAdd %456 %457 
                                                      OpStore %198 %458 
                                       f32_2 %459 = OpLoad %198 
                              Uniform f32_4* %460 = OpAccessChain %13 %39 
                                       f32_4 %461 = OpLoad %460 
                                       f32_2 %462 = OpVectorShuffle %461 %461 0 1 
                                       f32_2 %463 = OpFMul %459 %462 
                              Uniform f32_4* %464 = OpAccessChain %13 %39 
                                       f32_4 %465 = OpLoad %464 
                                       f32_2 %466 = OpVectorShuffle %465 %465 2 3 
                                       f32_2 %467 = OpFAdd %463 %466 
                                       f32_4 %468 = OpLoad %208 
                                       f32_4 %469 = OpVectorShuffle %468 %467 4 5 2 3 
                                                      OpStore %208 %469 
                         read_only Texture2D %470 = OpLoad %51 
                                     sampler %471 = OpLoad %55 
                  read_only Texture2DSampled %472 = OpSampledImage %470 %471 
                                       f32_2 %473 = OpLoad %198 
                                       f32_4 %474 = OpImageSampleImplicitLod %472 %473 
                                         f32 %475 = OpCompositeExtract %474 0 
                                                      OpStore %71 %475 
                                         f32 %476 = OpLoad %71 
                                Private f32* %477 = OpAccessChain %9 %17 
                                         f32 %478 = OpLoad %477 
                                        bool %479 = OpFOrdLessThan %476 %478 
                                                      OpStore %226 %479 
                                        bool %480 = OpLoad %226 
                                         f32 %481 = OpLoad %169 
                                         f32 %482 = OpSelect %480 %481 %175 
                                                      OpStore %71 %482 
                         read_only Texture2D %483 = OpLoad %145 
                                     sampler %484 = OpLoad %147 
                  read_only Texture2DSampled %485 = OpSampledImage %483 %484 
                                       f32_4 %486 = OpLoad %208 
                                       f32_2 %487 = OpVectorShuffle %486 %486 0 1 
                                       f32_4 %488 = OpImageSampleImplicitLod %485 %487 
                                                      OpStore %208 %488 
                                Private f32* %489 = OpAccessChain %208 %111 
                                         f32 %490 = OpLoad %489 
                                         f32 %491 = OpFAdd %490 %155 
                                Private f32* %492 = OpAccessChain %198 %26 
                                                      OpStore %492 %491 
                                Private f32* %493 = OpAccessChain %198 %26 
                                         f32 %494 = OpLoad %493 
                                Private f32* %495 = OpAccessChain %9 %26 
                                         f32 %496 = OpLoad %495 
                                        bool %497 = OpFOrdLessThan %494 %496 
                                                      OpStore %244 %497 
                                        bool %498 = OpLoad %244 
                                         f32 %499 = OpLoad %71 
                                         f32 %500 = OpSelect %498 %499 %175 
                                                      OpStore %71 %500 
                                       f32_4 %501 = OpLoad %208 
                                         f32 %502 = OpLoad %71 
                                       f32_4 %503 = OpCompositeConstruct %502 %502 %502 %502 
                                       f32_4 %504 = OpFMul %501 %503 
                                       f32_4 %505 = OpLoad %126 
                                       f32_4 %506 = OpFAdd %504 %505 
                                                      OpStore %126 %506 
                                         f32 %507 = OpLoad %71 
                                Private f32* %508 = OpAccessChain %63 %26 
                                         f32 %509 = OpLoad %508 
                                         f32 %510 = OpFAdd %507 %509 
                                Private f32* %511 = OpAccessChain %63 %26 
                                                      OpStore %511 %510 
                              Uniform f32_4* %513 = OpAccessChain %13 %512 
                                       f32_4 %514 = OpLoad %513 
                                       f32_2 %515 = OpVectorShuffle %514 %514 0 1 
                                       f32_2 %516 = OpLoad %9 
                                       f32_2 %517 = OpVectorShuffle %516 %516 0 0 
                                       f32_2 %518 = OpFMul %515 %517 
                                       f32_2 %519 = OpLoad vs_TEXCOORD0 
                                       f32_2 %520 = OpFAdd %518 %519 
                                                      OpStore %198 %520 
                         read_only Texture2D %521 = OpLoad %51 
                                     sampler %522 = OpLoad %55 
                  read_only Texture2DSampled %523 = OpSampledImage %521 %522 
                                       f32_2 %524 = OpLoad %198 
                                       f32_4 %525 = OpImageSampleImplicitLod %523 %524 
                                         f32 %526 = OpCompositeExtract %525 0 
                                                      OpStore %71 %526 
                                       f32_2 %527 = OpLoad %198 
                              Uniform f32_4* %528 = OpAccessChain %13 %39 
                                       f32_4 %529 = OpLoad %528 
                                       f32_2 %530 = OpVectorShuffle %529 %529 0 1 
                                       f32_2 %531 = OpFMul %527 %530 
                              Uniform f32_4* %532 = OpAccessChain %13 %39 
                                       f32_4 %533 = OpLoad %532 
                                       f32_2 %534 = OpVectorShuffle %533 %533 2 3 
                                       f32_2 %535 = OpFAdd %531 %534 
                                                      OpStore %198 %535 
                         read_only Texture2D %536 = OpLoad %145 
                                     sampler %537 = OpLoad %147 
                  read_only Texture2DSampled %538 = OpSampledImage %536 %537 
                                       f32_2 %539 = OpLoad %198 
                                       f32_4 %540 = OpImageSampleImplicitLod %538 %539 
                                                      OpStore %208 %540 
                                         f32 %541 = OpLoad %71 
                                Private f32* %542 = OpAccessChain %9 %17 
                                         f32 %543 = OpLoad %542 
                                        bool %544 = OpFOrdLessThan %541 %543 
                                                      OpStore %226 %544 
                                        bool %545 = OpLoad %226 
                                         f32 %546 = OpLoad %169 
                                         f32 %547 = OpSelect %545 %546 %175 
                                                      OpStore %71 %547 
                                Private f32* %548 = OpAccessChain %208 %111 
                                         f32 %549 = OpLoad %548 
                                         f32 %550 = OpFAdd %549 %155 
                                Private f32* %551 = OpAccessChain %198 %26 
                                                      OpStore %551 %550 
                                Private f32* %552 = OpAccessChain %198 %26 
                                         f32 %553 = OpLoad %552 
                                Private f32* %554 = OpAccessChain %9 %26 
                                         f32 %555 = OpLoad %554 
                                        bool %556 = OpFOrdLessThan %553 %555 
                                                      OpStore %244 %556 
                                        bool %557 = OpLoad %244 
                                         f32 %558 = OpLoad %71 
                                         f32 %559 = OpSelect %557 %558 %175 
                                                      OpStore %71 %559 
                                       f32_4 %560 = OpLoad %208 
                                         f32 %561 = OpLoad %71 
                                       f32_4 %562 = OpCompositeConstruct %561 %561 %561 %561 
                                       f32_4 %563 = OpFMul %560 %562 
                                       f32_4 %564 = OpLoad %126 
                                       f32_4 %565 = OpFAdd %563 %564 
                                                      OpStore %126 %565 
                                         f32 %566 = OpLoad %71 
                                Private f32* %567 = OpAccessChain %63 %26 
                                         f32 %568 = OpLoad %567 
                                         f32 %569 = OpFAdd %566 %568 
                                Private f32* %570 = OpAccessChain %63 %26 
                                                      OpStore %570 %569 
                              Uniform f32_4* %572 = OpAccessChain %13 %571 
                                       f32_4 %573 = OpLoad %572 
                                       f32_2 %574 = OpVectorShuffle %573 %573 0 1 
                                       f32_2 %575 = OpLoad %9 
                                       f32_2 %576 = OpVectorShuffle %575 %575 0 0 
                                       f32_2 %577 = OpFMul %574 %576 
                                       f32_2 %578 = OpLoad vs_TEXCOORD0 
                                       f32_2 %579 = OpFAdd %577 %578 
                                                      OpStore %198 %579 
                         read_only Texture2D %580 = OpLoad %51 
                                     sampler %581 = OpLoad %55 
                  read_only Texture2DSampled %582 = OpSampledImage %580 %581 
                                       f32_2 %583 = OpLoad %198 
                                       f32_4 %584 = OpImageSampleImplicitLod %582 %583 
                                         f32 %585 = OpCompositeExtract %584 0 
                                                      OpStore %71 %585 
                                       f32_2 %586 = OpLoad %198 
                              Uniform f32_4* %587 = OpAccessChain %13 %39 
                                       f32_4 %588 = OpLoad %587 
                                       f32_2 %589 = OpVectorShuffle %588 %588 0 1 
                                       f32_2 %590 = OpFMul %586 %589 
                              Uniform f32_4* %591 = OpAccessChain %13 %39 
                                       f32_4 %592 = OpLoad %591 
                                       f32_2 %593 = OpVectorShuffle %592 %592 2 3 
                                       f32_2 %594 = OpFAdd %590 %593 
                                                      OpStore %198 %594 
                         read_only Texture2D %595 = OpLoad %145 
                                     sampler %596 = OpLoad %147 
                  read_only Texture2DSampled %597 = OpSampledImage %595 %596 
                                       f32_2 %598 = OpLoad %198 
                                       f32_4 %599 = OpImageSampleImplicitLod %597 %598 
                                                      OpStore %208 %599 
                                         f32 %601 = OpLoad %71 
                                Private f32* %602 = OpAccessChain %9 %17 
                                         f32 %603 = OpLoad %602 
                                        bool %604 = OpFOrdLessThan %601 %603 
                                                      OpStore %600 %604 
                                        bool %605 = OpLoad %600 
                                         f32 %606 = OpLoad %169 
                                         f32 %607 = OpSelect %605 %606 %175 
                                Private f32* %608 = OpAccessChain %35 %26 
                                                      OpStore %608 %607 
                                Private f32* %609 = OpAccessChain %208 %111 
                                         f32 %610 = OpLoad %609 
                                         f32 %611 = OpFAdd %610 %155 
                                                      OpStore %71 %611 
                                         f32 %613 = OpLoad %71 
                                Private f32* %614 = OpAccessChain %9 %26 
                                         f32 %615 = OpLoad %614 
                                        bool %616 = OpFOrdLessThan %613 %615 
                                                      OpStore %612 %616 
                                        bool %617 = OpLoad %612 
                                                      OpSelectionMerge %620 None 
                                                      OpBranchConditional %617 %619 %623 
                                             %619 = OpLabel 
                                Private f32* %621 = OpAccessChain %35 %26 
                                         f32 %622 = OpLoad %621 
                                                      OpStore %618 %622 
                                                      OpBranch %620 
                                             %623 = OpLabel 
                                                      OpStore %618 %175 
                                                      OpBranch %620 
                                             %620 = OpLabel 
                                         f32 %624 = OpLoad %618 
                                Private f32* %625 = OpAccessChain %9 %26 
                                                      OpStore %625 %624 
                                       f32_4 %626 = OpLoad %208 
                                       f32_2 %627 = OpLoad %9 
                                       f32_4 %628 = OpVectorShuffle %627 %627 0 0 0 0 
                                       f32_4 %629 = OpFMul %626 %628 
                                       f32_4 %630 = OpLoad %126 
                                       f32_4 %631 = OpFAdd %629 %630 
                                                      OpStore %126 %631 
                                Private f32* %632 = OpAccessChain %9 %26 
                                         f32 %633 = OpLoad %632 
                                Private f32* %634 = OpAccessChain %63 %26 
                                         f32 %635 = OpLoad %634 
                                         f32 %636 = OpFAdd %633 %635 
                                Private f32* %637 = OpAccessChain %9 %26 
                                                      OpStore %637 %636 
                                       f32_4 %640 = OpLoad %126 
                                       f32_2 %641 = OpLoad %9 
                                       f32_4 %642 = OpVectorShuffle %641 %641 0 0 0 0 
                                       f32_4 %643 = OpFDiv %640 %642 
                                                      OpStore %639 %643 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
}
Program "fp" {
SubProgram "d3d11 " {
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
""
}
SubProgram "vulkan " {
""
}
SubProgram "d3d11 " {
Keywords { "AB_HIGH_PRECISION" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "AB_HIGH_PRECISION" }
""
}
SubProgram "vulkan " {
Keywords { "AB_HIGH_PRECISION" }
""
}
}
}
 Pass {
  Name "frag_BokehComposition2S"
  ZTest Always
  ZWrite Off
  Cull Off
  GpuProgramID 1887392
Program "vp" {
SubProgram "d3d11 " {
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in  vec4 in_POSITION0;
in  vec2 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _MainTex_ST;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
UNITY_LOCATION(1) uniform  sampler2D _AnamorphicRTS0;
in  vec2 vs_TEXCOORD0;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1 = texture(_MainTex, u_xlat0.xy);
    u_xlat0 = texture(_AnamorphicRTS0, u_xlat0.xy);
    SV_Target0 = min(u_xlat0, u_xlat1);
    return;
}

#endif
"
}
SubProgram "vulkan " {
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 94
; Schema: 0
                                              OpCapability Shader 
                                       %1 = OpExtInstImport "GLSL.std.450" 
                                              OpMemoryModel Logical GLSL450 
                                              OpEntryPoint Vertex %4 "main" %11 %72 %84 %86 
                                              OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                              OpDecorate %11 Location 11 
                                              OpDecorate %16 ArrayStride 16 
                                              OpDecorate %17 ArrayStride 17 
                                              OpMemberDecorate %18 0 Offset 18 
                                              OpMemberDecorate %18 1 Offset 18 
                                              OpDecorate %18 Block 
                                              OpDecorate %20 DescriptorSet 20 
                                              OpDecorate %20 Binding 20 
                                              OpMemberDecorate %70 0 BuiltIn 70 
                                              OpMemberDecorate %70 1 BuiltIn 70 
                                              OpMemberDecorate %70 2 BuiltIn 70 
                                              OpDecorate %70 Block 
                                              OpDecorate vs_TEXCOORD0 Location 84 
                                              OpDecorate %86 Location 86 
                                       %2 = OpTypeVoid 
                                       %3 = OpTypeFunction %2 
                                       %6 = OpTypeFloat 32 
                                       %7 = OpTypeVector %6 4 
                                       %8 = OpTypePointer Private %7 
                        Private f32_4* %9 = OpVariable Private 
                                      %10 = OpTypePointer Input %7 
                         Input f32_4* %11 = OpVariable Input 
                                      %14 = OpTypeInt 32 0 
                                  u32 %15 = OpConstant 4 
                                      %16 = OpTypeArray %7 %15 
                                      %17 = OpTypeArray %7 %15 
                                      %18 = OpTypeStruct %16 %17 
                                      %19 = OpTypePointer Uniform %18 
Uniform struct {f32_4[4]; f32_4[4];}* %20 = OpVariable Uniform 
                                      %21 = OpTypeInt 32 1 
                                  i32 %22 = OpConstant 0 
                                  i32 %23 = OpConstant 1 
                                      %24 = OpTypePointer Uniform %7 
                                  i32 %35 = OpConstant 2 
                                  i32 %44 = OpConstant 3 
                       Private f32_4* %48 = OpVariable Private 
                                  u32 %68 = OpConstant 1 
                                      %69 = OpTypeArray %6 %68 
                                      %70 = OpTypeStruct %7 %6 %69 
                                      %71 = OpTypePointer Output %70 
 Output struct {f32_4; f32; f32[1];}* %72 = OpVariable Output 
                                      %80 = OpTypePointer Output %7 
                                      %82 = OpTypeVector %6 2 
                                      %83 = OpTypePointer Output %82 
               Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                      %85 = OpTypePointer Input %82 
                         Input f32_2* %86 = OpVariable Input 
                                      %88 = OpTypePointer Output %6 
                                  void %4 = OpFunction None %3 
                                       %5 = OpLabel 
                                f32_4 %12 = OpLoad %11 
                                f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                       Uniform f32_4* %25 = OpAccessChain %20 %22 %23 
                                f32_4 %26 = OpLoad %25 
                                f32_4 %27 = OpFMul %13 %26 
                                              OpStore %9 %27 
                       Uniform f32_4* %28 = OpAccessChain %20 %22 %22 
                                f32_4 %29 = OpLoad %28 
                                f32_4 %30 = OpLoad %11 
                                f32_4 %31 = OpVectorShuffle %30 %30 0 0 0 0 
                                f32_4 %32 = OpFMul %29 %31 
                                f32_4 %33 = OpLoad %9 
                                f32_4 %34 = OpFAdd %32 %33 
                                              OpStore %9 %34 
                       Uniform f32_4* %36 = OpAccessChain %20 %22 %35 
                                f32_4 %37 = OpLoad %36 
                                f32_4 %38 = OpLoad %11 
                                f32_4 %39 = OpVectorShuffle %38 %38 2 2 2 2 
                                f32_4 %40 = OpFMul %37 %39 
                                f32_4 %41 = OpLoad %9 
                                f32_4 %42 = OpFAdd %40 %41 
                                              OpStore %9 %42 
                                f32_4 %43 = OpLoad %9 
                       Uniform f32_4* %45 = OpAccessChain %20 %22 %44 
                                f32_4 %46 = OpLoad %45 
                                f32_4 %47 = OpFAdd %43 %46 
                                              OpStore %9 %47 
                                f32_4 %49 = OpLoad %9 
                                f32_4 %50 = OpVectorShuffle %49 %49 1 1 1 1 
                       Uniform f32_4* %51 = OpAccessChain %20 %23 %23 
                                f32_4 %52 = OpLoad %51 
                                f32_4 %53 = OpFMul %50 %52 
                                              OpStore %48 %53 
                       Uniform f32_4* %54 = OpAccessChain %20 %23 %22 
                                f32_4 %55 = OpLoad %54 
                                f32_4 %56 = OpLoad %9 
                                f32_4 %57 = OpVectorShuffle %56 %56 0 0 0 0 
                                f32_4 %58 = OpFMul %55 %57 
                                f32_4 %59 = OpLoad %48 
                                f32_4 %60 = OpFAdd %58 %59 
                                              OpStore %48 %60 
                       Uniform f32_4* %61 = OpAccessChain %20 %23 %35 
                                f32_4 %62 = OpLoad %61 
                                f32_4 %63 = OpLoad %9 
                                f32_4 %64 = OpVectorShuffle %63 %63 2 2 2 2 
                                f32_4 %65 = OpFMul %62 %64 
                                f32_4 %66 = OpLoad %48 
                                f32_4 %67 = OpFAdd %65 %66 
                                              OpStore %48 %67 
                       Uniform f32_4* %73 = OpAccessChain %20 %23 %44 
                                f32_4 %74 = OpLoad %73 
                                f32_4 %75 = OpLoad %9 
                                f32_4 %76 = OpVectorShuffle %75 %75 3 3 3 3 
                                f32_4 %77 = OpFMul %74 %76 
                                f32_4 %78 = OpLoad %48 
                                f32_4 %79 = OpFAdd %77 %78 
                        Output f32_4* %81 = OpAccessChain %72 %22 
                                              OpStore %81 %79 
                                f32_2 %87 = OpLoad %86 
                                              OpStore vs_TEXCOORD0 %87 
                          Output f32* %89 = OpAccessChain %72 %22 %68 
                                  f32 %90 = OpLoad %89 
                                  f32 %91 = OpFNegate %90 
                          Output f32* %92 = OpAccessChain %72 %22 %68 
                                              OpStore %92 %91 
                                              OpReturn
                                              OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 58
; Schema: 0
                                             OpCapability Shader 
                                      %1 = OpExtInstImport "GLSL.std.450" 
                                             OpMemoryModel Logical GLSL450 
                                             OpEntryPoint Fragment %4 "main" %12 %53 
                                             OpExecutionMode %4 OriginUpperLeft 
                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                             OpDecorate vs_TEXCOORD0 Location 12 
                                             OpMemberDecorate %14 0 Offset 14 
                                             OpDecorate %14 Block 
                                             OpDecorate %16 DescriptorSet 16 
                                             OpDecorate %16 Binding 16 
                                             OpDecorate %33 DescriptorSet 33 
                                             OpDecorate %33 Binding 33 
                                             OpDecorate %37 DescriptorSet 37 
                                             OpDecorate %37 Binding 37 
                                             OpDecorate %44 DescriptorSet 44 
                                             OpDecorate %44 Binding 44 
                                             OpDecorate %46 DescriptorSet 46 
                                             OpDecorate %46 Binding 46 
                                             OpDecorate %53 Location 53 
                                      %2 = OpTypeVoid 
                                      %3 = OpTypeFunction %2 
                                      %6 = OpTypeFloat 32 
                                      %7 = OpTypeVector %6 4 
                                      %8 = OpTypePointer Private %7 
                       Private f32_4* %9 = OpVariable Private 
                                     %10 = OpTypeVector %6 2 
                                     %11 = OpTypePointer Input %10 
               Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                     %14 = OpTypeStruct %7 
                                     %15 = OpTypePointer Uniform %14 
            Uniform struct {f32_4;}* %16 = OpVariable Uniform 
                                     %17 = OpTypeInt 32 1 
                                 i32 %18 = OpConstant 0 
                                     %19 = OpTypePointer Uniform %7 
                      Private f32_4* %30 = OpVariable Private 
                                     %31 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                     %32 = OpTypePointer UniformConstant %31 
UniformConstant read_only Texture2D* %33 = OpVariable UniformConstant 
                                     %35 = OpTypeSampler 
                                     %36 = OpTypePointer UniformConstant %35 
            UniformConstant sampler* %37 = OpVariable UniformConstant 
                                     %39 = OpTypeSampledImage %31 
UniformConstant read_only Texture2D* %44 = OpVariable UniformConstant 
            UniformConstant sampler* %46 = OpVariable UniformConstant 
                                     %52 = OpTypePointer Output %7 
                       Output f32_4* %53 = OpVariable Output 
                                 void %4 = OpFunction None %3 
                                      %5 = OpLabel 
                               f32_2 %13 = OpLoad vs_TEXCOORD0 
                      Uniform f32_4* %20 = OpAccessChain %16 %18 
                               f32_4 %21 = OpLoad %20 
                               f32_2 %22 = OpVectorShuffle %21 %21 0 1 
                               f32_2 %23 = OpFMul %13 %22 
                      Uniform f32_4* %24 = OpAccessChain %16 %18 
                               f32_4 %25 = OpLoad %24 
                               f32_2 %26 = OpVectorShuffle %25 %25 2 3 
                               f32_2 %27 = OpFAdd %23 %26 
                               f32_4 %28 = OpLoad %9 
                               f32_4 %29 = OpVectorShuffle %28 %27 4 5 2 3 
                                             OpStore %9 %29 
                 read_only Texture2D %34 = OpLoad %33 
                             sampler %38 = OpLoad %37 
          read_only Texture2DSampled %40 = OpSampledImage %34 %38 
                               f32_4 %41 = OpLoad %9 
                               f32_2 %42 = OpVectorShuffle %41 %41 0 1 
                               f32_4 %43 = OpImageSampleImplicitLod %40 %42 
                                             OpStore %30 %43 
                 read_only Texture2D %45 = OpLoad %44 
                             sampler %47 = OpLoad %46 
          read_only Texture2DSampled %48 = OpSampledImage %45 %47 
                               f32_4 %49 = OpLoad %9 
                               f32_2 %50 = OpVectorShuffle %49 %49 0 1 
                               f32_4 %51 = OpImageSampleImplicitLod %48 %50 
                                             OpStore %9 %51 
                               f32_4 %54 = OpLoad %9 
                               f32_4 %55 = OpLoad %30 
                               f32_4 %56 = OpExtInst %1 37 %54 %55 
                                             OpStore %53 %56 
                                             OpReturn
                                             OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "AB_HIGH_PRECISION" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "AB_HIGH_PRECISION" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in  vec4 in_POSITION0;
in  vec2 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _MainTex_ST;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
UNITY_LOCATION(1) uniform  sampler2D _AnamorphicRTS0;
in  vec2 vs_TEXCOORD0;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1 = texture(_MainTex, u_xlat0.xy);
    u_xlat0 = texture(_AnamorphicRTS0, u_xlat0.xy);
    SV_Target0 = min(u_xlat0, u_xlat1);
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "AB_HIGH_PRECISION" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 94
; Schema: 0
                                              OpCapability Shader 
                                       %1 = OpExtInstImport "GLSL.std.450" 
                                              OpMemoryModel Logical GLSL450 
                                              OpEntryPoint Vertex %4 "main" %11 %72 %84 %86 
                                              OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                              OpDecorate %11 Location 11 
                                              OpDecorate %16 ArrayStride 16 
                                              OpDecorate %17 ArrayStride 17 
                                              OpMemberDecorate %18 0 Offset 18 
                                              OpMemberDecorate %18 1 Offset 18 
                                              OpDecorate %18 Block 
                                              OpDecorate %20 DescriptorSet 20 
                                              OpDecorate %20 Binding 20 
                                              OpMemberDecorate %70 0 BuiltIn 70 
                                              OpMemberDecorate %70 1 BuiltIn 70 
                                              OpMemberDecorate %70 2 BuiltIn 70 
                                              OpDecorate %70 Block 
                                              OpDecorate vs_TEXCOORD0 Location 84 
                                              OpDecorate %86 Location 86 
                                       %2 = OpTypeVoid 
                                       %3 = OpTypeFunction %2 
                                       %6 = OpTypeFloat 32 
                                       %7 = OpTypeVector %6 4 
                                       %8 = OpTypePointer Private %7 
                        Private f32_4* %9 = OpVariable Private 
                                      %10 = OpTypePointer Input %7 
                         Input f32_4* %11 = OpVariable Input 
                                      %14 = OpTypeInt 32 0 
                                  u32 %15 = OpConstant 4 
                                      %16 = OpTypeArray %7 %15 
                                      %17 = OpTypeArray %7 %15 
                                      %18 = OpTypeStruct %16 %17 
                                      %19 = OpTypePointer Uniform %18 
Uniform struct {f32_4[4]; f32_4[4];}* %20 = OpVariable Uniform 
                                      %21 = OpTypeInt 32 1 
                                  i32 %22 = OpConstant 0 
                                  i32 %23 = OpConstant 1 
                                      %24 = OpTypePointer Uniform %7 
                                  i32 %35 = OpConstant 2 
                                  i32 %44 = OpConstant 3 
                       Private f32_4* %48 = OpVariable Private 
                                  u32 %68 = OpConstant 1 
                                      %69 = OpTypeArray %6 %68 
                                      %70 = OpTypeStruct %7 %6 %69 
                                      %71 = OpTypePointer Output %70 
 Output struct {f32_4; f32; f32[1];}* %72 = OpVariable Output 
                                      %80 = OpTypePointer Output %7 
                                      %82 = OpTypeVector %6 2 
                                      %83 = OpTypePointer Output %82 
               Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                      %85 = OpTypePointer Input %82 
                         Input f32_2* %86 = OpVariable Input 
                                      %88 = OpTypePointer Output %6 
                                  void %4 = OpFunction None %3 
                                       %5 = OpLabel 
                                f32_4 %12 = OpLoad %11 
                                f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                       Uniform f32_4* %25 = OpAccessChain %20 %22 %23 
                                f32_4 %26 = OpLoad %25 
                                f32_4 %27 = OpFMul %13 %26 
                                              OpStore %9 %27 
                       Uniform f32_4* %28 = OpAccessChain %20 %22 %22 
                                f32_4 %29 = OpLoad %28 
                                f32_4 %30 = OpLoad %11 
                                f32_4 %31 = OpVectorShuffle %30 %30 0 0 0 0 
                                f32_4 %32 = OpFMul %29 %31 
                                f32_4 %33 = OpLoad %9 
                                f32_4 %34 = OpFAdd %32 %33 
                                              OpStore %9 %34 
                       Uniform f32_4* %36 = OpAccessChain %20 %22 %35 
                                f32_4 %37 = OpLoad %36 
                                f32_4 %38 = OpLoad %11 
                                f32_4 %39 = OpVectorShuffle %38 %38 2 2 2 2 
                                f32_4 %40 = OpFMul %37 %39 
                                f32_4 %41 = OpLoad %9 
                                f32_4 %42 = OpFAdd %40 %41 
                                              OpStore %9 %42 
                                f32_4 %43 = OpLoad %9 
                       Uniform f32_4* %45 = OpAccessChain %20 %22 %44 
                                f32_4 %46 = OpLoad %45 
                                f32_4 %47 = OpFAdd %43 %46 
                                              OpStore %9 %47 
                                f32_4 %49 = OpLoad %9 
                                f32_4 %50 = OpVectorShuffle %49 %49 1 1 1 1 
                       Uniform f32_4* %51 = OpAccessChain %20 %23 %23 
                                f32_4 %52 = OpLoad %51 
                                f32_4 %53 = OpFMul %50 %52 
                                              OpStore %48 %53 
                       Uniform f32_4* %54 = OpAccessChain %20 %23 %22 
                                f32_4 %55 = OpLoad %54 
                                f32_4 %56 = OpLoad %9 
                                f32_4 %57 = OpVectorShuffle %56 %56 0 0 0 0 
                                f32_4 %58 = OpFMul %55 %57 
                                f32_4 %59 = OpLoad %48 
                                f32_4 %60 = OpFAdd %58 %59 
                                              OpStore %48 %60 
                       Uniform f32_4* %61 = OpAccessChain %20 %23 %35 
                                f32_4 %62 = OpLoad %61 
                                f32_4 %63 = OpLoad %9 
                                f32_4 %64 = OpVectorShuffle %63 %63 2 2 2 2 
                                f32_4 %65 = OpFMul %62 %64 
                                f32_4 %66 = OpLoad %48 
                                f32_4 %67 = OpFAdd %65 %66 
                                              OpStore %48 %67 
                       Uniform f32_4* %73 = OpAccessChain %20 %23 %44 
                                f32_4 %74 = OpLoad %73 
                                f32_4 %75 = OpLoad %9 
                                f32_4 %76 = OpVectorShuffle %75 %75 3 3 3 3 
                                f32_4 %77 = OpFMul %74 %76 
                                f32_4 %78 = OpLoad %48 
                                f32_4 %79 = OpFAdd %77 %78 
                        Output f32_4* %81 = OpAccessChain %72 %22 
                                              OpStore %81 %79 
                                f32_2 %87 = OpLoad %86 
                                              OpStore vs_TEXCOORD0 %87 
                          Output f32* %89 = OpAccessChain %72 %22 %68 
                                  f32 %90 = OpLoad %89 
                                  f32 %91 = OpFNegate %90 
                          Output f32* %92 = OpAccessChain %72 %22 %68 
                                              OpStore %92 %91 
                                              OpReturn
                                              OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 58
; Schema: 0
                                             OpCapability Shader 
                                      %1 = OpExtInstImport "GLSL.std.450" 
                                             OpMemoryModel Logical GLSL450 
                                             OpEntryPoint Fragment %4 "main" %12 %53 
                                             OpExecutionMode %4 OriginUpperLeft 
                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                             OpDecorate vs_TEXCOORD0 Location 12 
                                             OpMemberDecorate %14 0 Offset 14 
                                             OpDecorate %14 Block 
                                             OpDecorate %16 DescriptorSet 16 
                                             OpDecorate %16 Binding 16 
                                             OpDecorate %33 DescriptorSet 33 
                                             OpDecorate %33 Binding 33 
                                             OpDecorate %37 DescriptorSet 37 
                                             OpDecorate %37 Binding 37 
                                             OpDecorate %44 DescriptorSet 44 
                                             OpDecorate %44 Binding 44 
                                             OpDecorate %46 DescriptorSet 46 
                                             OpDecorate %46 Binding 46 
                                             OpDecorate %53 Location 53 
                                      %2 = OpTypeVoid 
                                      %3 = OpTypeFunction %2 
                                      %6 = OpTypeFloat 32 
                                      %7 = OpTypeVector %6 4 
                                      %8 = OpTypePointer Private %7 
                       Private f32_4* %9 = OpVariable Private 
                                     %10 = OpTypeVector %6 2 
                                     %11 = OpTypePointer Input %10 
               Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                     %14 = OpTypeStruct %7 
                                     %15 = OpTypePointer Uniform %14 
            Uniform struct {f32_4;}* %16 = OpVariable Uniform 
                                     %17 = OpTypeInt 32 1 
                                 i32 %18 = OpConstant 0 
                                     %19 = OpTypePointer Uniform %7 
                      Private f32_4* %30 = OpVariable Private 
                                     %31 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                     %32 = OpTypePointer UniformConstant %31 
UniformConstant read_only Texture2D* %33 = OpVariable UniformConstant 
                                     %35 = OpTypeSampler 
                                     %36 = OpTypePointer UniformConstant %35 
            UniformConstant sampler* %37 = OpVariable UniformConstant 
                                     %39 = OpTypeSampledImage %31 
UniformConstant read_only Texture2D* %44 = OpVariable UniformConstant 
            UniformConstant sampler* %46 = OpVariable UniformConstant 
                                     %52 = OpTypePointer Output %7 
                       Output f32_4* %53 = OpVariable Output 
                                 void %4 = OpFunction None %3 
                                      %5 = OpLabel 
                               f32_2 %13 = OpLoad vs_TEXCOORD0 
                      Uniform f32_4* %20 = OpAccessChain %16 %18 
                               f32_4 %21 = OpLoad %20 
                               f32_2 %22 = OpVectorShuffle %21 %21 0 1 
                               f32_2 %23 = OpFMul %13 %22 
                      Uniform f32_4* %24 = OpAccessChain %16 %18 
                               f32_4 %25 = OpLoad %24 
                               f32_2 %26 = OpVectorShuffle %25 %25 2 3 
                               f32_2 %27 = OpFAdd %23 %26 
                               f32_4 %28 = OpLoad %9 
                               f32_4 %29 = OpVectorShuffle %28 %27 4 5 2 3 
                                             OpStore %9 %29 
                 read_only Texture2D %34 = OpLoad %33 
                             sampler %38 = OpLoad %37 
          read_only Texture2DSampled %40 = OpSampledImage %34 %38 
                               f32_4 %41 = OpLoad %9 
                               f32_2 %42 = OpVectorShuffle %41 %41 0 1 
                               f32_4 %43 = OpImageSampleImplicitLod %40 %42 
                                             OpStore %30 %43 
                 read_only Texture2D %45 = OpLoad %44 
                             sampler %47 = OpLoad %46 
          read_only Texture2DSampled %48 = OpSampledImage %45 %47 
                               f32_4 %49 = OpLoad %9 
                               f32_2 %50 = OpVectorShuffle %49 %49 0 1 
                               f32_4 %51 = OpImageSampleImplicitLod %48 %50 
                                             OpStore %9 %51 
                               f32_4 %54 = OpLoad %9 
                               f32_4 %55 = OpLoad %30 
                               f32_4 %56 = OpExtInst %1 37 %54 %55 
                                             OpStore %53 %56 
                                             OpReturn
                                             OpFunctionEnd
"
}
}
Program "fp" {
SubProgram "d3d11 " {
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
""
}
SubProgram "vulkan " {
""
}
SubProgram "d3d11 " {
Keywords { "AB_HIGH_PRECISION" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "AB_HIGH_PRECISION" }
""
}
SubProgram "vulkan " {
Keywords { "AB_HIGH_PRECISION" }
""
}
}
}
 Pass {
  Name "frag_BokehComposition3S"
  ZTest Always
  ZWrite Off
  Cull Off
  GpuProgramID 1962584
Program "vp" {
SubProgram "d3d11 " {
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in  vec4 in_POSITION0;
in  vec2 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _MainTex_ST;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
UNITY_LOCATION(1) uniform  sampler2D _AnamorphicRTS0;
UNITY_LOCATION(2) uniform  sampler2D _AnamorphicRTS1;
in  vec2 vs_TEXCOORD0;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1 = texture(_MainTex, u_xlat0.xy);
    u_xlat2 = texture(_AnamorphicRTS0, u_xlat0.xy);
    u_xlat0 = texture(_AnamorphicRTS1, u_xlat0.xy);
    u_xlat1 = min(u_xlat1, u_xlat2);
    SV_Target0 = min(u_xlat0, u_xlat1);
    return;
}

#endif
"
}
SubProgram "vulkan " {
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 94
; Schema: 0
                                              OpCapability Shader 
                                       %1 = OpExtInstImport "GLSL.std.450" 
                                              OpMemoryModel Logical GLSL450 
                                              OpEntryPoint Vertex %4 "main" %11 %72 %84 %86 
                                              OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                              OpDecorate %11 Location 11 
                                              OpDecorate %16 ArrayStride 16 
                                              OpDecorate %17 ArrayStride 17 
                                              OpMemberDecorate %18 0 Offset 18 
                                              OpMemberDecorate %18 1 Offset 18 
                                              OpDecorate %18 Block 
                                              OpDecorate %20 DescriptorSet 20 
                                              OpDecorate %20 Binding 20 
                                              OpMemberDecorate %70 0 BuiltIn 70 
                                              OpMemberDecorate %70 1 BuiltIn 70 
                                              OpMemberDecorate %70 2 BuiltIn 70 
                                              OpDecorate %70 Block 
                                              OpDecorate vs_TEXCOORD0 Location 84 
                                              OpDecorate %86 Location 86 
                                       %2 = OpTypeVoid 
                                       %3 = OpTypeFunction %2 
                                       %6 = OpTypeFloat 32 
                                       %7 = OpTypeVector %6 4 
                                       %8 = OpTypePointer Private %7 
                        Private f32_4* %9 = OpVariable Private 
                                      %10 = OpTypePointer Input %7 
                         Input f32_4* %11 = OpVariable Input 
                                      %14 = OpTypeInt 32 0 
                                  u32 %15 = OpConstant 4 
                                      %16 = OpTypeArray %7 %15 
                                      %17 = OpTypeArray %7 %15 
                                      %18 = OpTypeStruct %16 %17 
                                      %19 = OpTypePointer Uniform %18 
Uniform struct {f32_4[4]; f32_4[4];}* %20 = OpVariable Uniform 
                                      %21 = OpTypeInt 32 1 
                                  i32 %22 = OpConstant 0 
                                  i32 %23 = OpConstant 1 
                                      %24 = OpTypePointer Uniform %7 
                                  i32 %35 = OpConstant 2 
                                  i32 %44 = OpConstant 3 
                       Private f32_4* %48 = OpVariable Private 
                                  u32 %68 = OpConstant 1 
                                      %69 = OpTypeArray %6 %68 
                                      %70 = OpTypeStruct %7 %6 %69 
                                      %71 = OpTypePointer Output %70 
 Output struct {f32_4; f32; f32[1];}* %72 = OpVariable Output 
                                      %80 = OpTypePointer Output %7 
                                      %82 = OpTypeVector %6 2 
                                      %83 = OpTypePointer Output %82 
               Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                      %85 = OpTypePointer Input %82 
                         Input f32_2* %86 = OpVariable Input 
                                      %88 = OpTypePointer Output %6 
                                  void %4 = OpFunction None %3 
                                       %5 = OpLabel 
                                f32_4 %12 = OpLoad %11 
                                f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                       Uniform f32_4* %25 = OpAccessChain %20 %22 %23 
                                f32_4 %26 = OpLoad %25 
                                f32_4 %27 = OpFMul %13 %26 
                                              OpStore %9 %27 
                       Uniform f32_4* %28 = OpAccessChain %20 %22 %22 
                                f32_4 %29 = OpLoad %28 
                                f32_4 %30 = OpLoad %11 
                                f32_4 %31 = OpVectorShuffle %30 %30 0 0 0 0 
                                f32_4 %32 = OpFMul %29 %31 
                                f32_4 %33 = OpLoad %9 
                                f32_4 %34 = OpFAdd %32 %33 
                                              OpStore %9 %34 
                       Uniform f32_4* %36 = OpAccessChain %20 %22 %35 
                                f32_4 %37 = OpLoad %36 
                                f32_4 %38 = OpLoad %11 
                                f32_4 %39 = OpVectorShuffle %38 %38 2 2 2 2 
                                f32_4 %40 = OpFMul %37 %39 
                                f32_4 %41 = OpLoad %9 
                                f32_4 %42 = OpFAdd %40 %41 
                                              OpStore %9 %42 
                                f32_4 %43 = OpLoad %9 
                       Uniform f32_4* %45 = OpAccessChain %20 %22 %44 
                                f32_4 %46 = OpLoad %45 
                                f32_4 %47 = OpFAdd %43 %46 
                                              OpStore %9 %47 
                                f32_4 %49 = OpLoad %9 
                                f32_4 %50 = OpVectorShuffle %49 %49 1 1 1 1 
                       Uniform f32_4* %51 = OpAccessChain %20 %23 %23 
                                f32_4 %52 = OpLoad %51 
                                f32_4 %53 = OpFMul %50 %52 
                                              OpStore %48 %53 
                       Uniform f32_4* %54 = OpAccessChain %20 %23 %22 
                                f32_4 %55 = OpLoad %54 
                                f32_4 %56 = OpLoad %9 
                                f32_4 %57 = OpVectorShuffle %56 %56 0 0 0 0 
                                f32_4 %58 = OpFMul %55 %57 
                                f32_4 %59 = OpLoad %48 
                                f32_4 %60 = OpFAdd %58 %59 
                                              OpStore %48 %60 
                       Uniform f32_4* %61 = OpAccessChain %20 %23 %35 
                                f32_4 %62 = OpLoad %61 
                                f32_4 %63 = OpLoad %9 
                                f32_4 %64 = OpVectorShuffle %63 %63 2 2 2 2 
                                f32_4 %65 = OpFMul %62 %64 
                                f32_4 %66 = OpLoad %48 
                                f32_4 %67 = OpFAdd %65 %66 
                                              OpStore %48 %67 
                       Uniform f32_4* %73 = OpAccessChain %20 %23 %44 
                                f32_4 %74 = OpLoad %73 
                                f32_4 %75 = OpLoad %9 
                                f32_4 %76 = OpVectorShuffle %75 %75 3 3 3 3 
                                f32_4 %77 = OpFMul %74 %76 
                                f32_4 %78 = OpLoad %48 
                                f32_4 %79 = OpFAdd %77 %78 
                        Output f32_4* %81 = OpAccessChain %72 %22 
                                              OpStore %81 %79 
                                f32_2 %87 = OpLoad %86 
                                              OpStore vs_TEXCOORD0 %87 
                          Output f32* %89 = OpAccessChain %72 %22 %68 
                                  f32 %90 = OpLoad %89 
                                  f32 %91 = OpFNegate %90 
                          Output f32* %92 = OpAccessChain %72 %22 %68 
                                              OpStore %92 %91 
                                              OpReturn
                                              OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 70
; Schema: 0
                                             OpCapability Shader 
                                      %1 = OpExtInstImport "GLSL.std.450" 
                                             OpMemoryModel Logical GLSL450 
                                             OpEntryPoint Fragment %4 "main" %12 %65 
                                             OpExecutionMode %4 OriginUpperLeft 
                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                             OpDecorate vs_TEXCOORD0 Location 12 
                                             OpMemberDecorate %14 0 Offset 14 
                                             OpDecorate %14 Block 
                                             OpDecorate %16 DescriptorSet 16 
                                             OpDecorate %16 Binding 16 
                                             OpDecorate %33 DescriptorSet 33 
                                             OpDecorate %33 Binding 33 
                                             OpDecorate %37 DescriptorSet 37 
                                             OpDecorate %37 Binding 37 
                                             OpDecorate %45 DescriptorSet 45 
                                             OpDecorate %45 Binding 45 
                                             OpDecorate %47 DescriptorSet 47 
                                             OpDecorate %47 Binding 47 
                                             OpDecorate %53 DescriptorSet 53 
                                             OpDecorate %53 Binding 53 
                                             OpDecorate %55 DescriptorSet 55 
                                             OpDecorate %55 Binding 55 
                                             OpDecorate %65 Location 65 
                                      %2 = OpTypeVoid 
                                      %3 = OpTypeFunction %2 
                                      %6 = OpTypeFloat 32 
                                      %7 = OpTypeVector %6 4 
                                      %8 = OpTypePointer Private %7 
                       Private f32_4* %9 = OpVariable Private 
                                     %10 = OpTypeVector %6 2 
                                     %11 = OpTypePointer Input %10 
               Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                     %14 = OpTypeStruct %7 
                                     %15 = OpTypePointer Uniform %14 
            Uniform struct {f32_4;}* %16 = OpVariable Uniform 
                                     %17 = OpTypeInt 32 1 
                                 i32 %18 = OpConstant 0 
                                     %19 = OpTypePointer Uniform %7 
                      Private f32_4* %30 = OpVariable Private 
                                     %31 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                     %32 = OpTypePointer UniformConstant %31 
UniformConstant read_only Texture2D* %33 = OpVariable UniformConstant 
                                     %35 = OpTypeSampler 
                                     %36 = OpTypePointer UniformConstant %35 
            UniformConstant sampler* %37 = OpVariable UniformConstant 
                                     %39 = OpTypeSampledImage %31 
                      Private f32_4* %44 = OpVariable Private 
UniformConstant read_only Texture2D* %45 = OpVariable UniformConstant 
            UniformConstant sampler* %47 = OpVariable UniformConstant 
UniformConstant read_only Texture2D* %53 = OpVariable UniformConstant 
            UniformConstant sampler* %55 = OpVariable UniformConstant 
                                     %64 = OpTypePointer Output %7 
                       Output f32_4* %65 = OpVariable Output 
                                 void %4 = OpFunction None %3 
                                      %5 = OpLabel 
                               f32_2 %13 = OpLoad vs_TEXCOORD0 
                      Uniform f32_4* %20 = OpAccessChain %16 %18 
                               f32_4 %21 = OpLoad %20 
                               f32_2 %22 = OpVectorShuffle %21 %21 0 1 
                               f32_2 %23 = OpFMul %13 %22 
                      Uniform f32_4* %24 = OpAccessChain %16 %18 
                               f32_4 %25 = OpLoad %24 
                               f32_2 %26 = OpVectorShuffle %25 %25 2 3 
                               f32_2 %27 = OpFAdd %23 %26 
                               f32_4 %28 = OpLoad %9 
                               f32_4 %29 = OpVectorShuffle %28 %27 4 5 2 3 
                                             OpStore %9 %29 
                 read_only Texture2D %34 = OpLoad %33 
                             sampler %38 = OpLoad %37 
          read_only Texture2DSampled %40 = OpSampledImage %34 %38 
                               f32_4 %41 = OpLoad %9 
                               f32_2 %42 = OpVectorShuffle %41 %41 0 1 
                               f32_4 %43 = OpImageSampleImplicitLod %40 %42 
                                             OpStore %30 %43 
                 read_only Texture2D %46 = OpLoad %45 
                             sampler %48 = OpLoad %47 
          read_only Texture2DSampled %49 = OpSampledImage %46 %48 
                               f32_4 %50 = OpLoad %9 
                               f32_2 %51 = OpVectorShuffle %50 %50 0 1 
                               f32_4 %52 = OpImageSampleImplicitLod %49 %51 
                                             OpStore %44 %52 
                 read_only Texture2D %54 = OpLoad %53 
                             sampler %56 = OpLoad %55 
          read_only Texture2DSampled %57 = OpSampledImage %54 %56 
                               f32_4 %58 = OpLoad %9 
                               f32_2 %59 = OpVectorShuffle %58 %58 0 1 
                               f32_4 %60 = OpImageSampleImplicitLod %57 %59 
                                             OpStore %9 %60 
                               f32_4 %61 = OpLoad %30 
                               f32_4 %62 = OpLoad %44 
                               f32_4 %63 = OpExtInst %1 37 %61 %62 
                                             OpStore %30 %63 
                               f32_4 %66 = OpLoad %9 
                               f32_4 %67 = OpLoad %30 
                               f32_4 %68 = OpExtInst %1 37 %66 %67 
                                             OpStore %65 %68 
                                             OpReturn
                                             OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "AB_HIGH_PRECISION" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "AB_HIGH_PRECISION" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in  vec4 in_POSITION0;
in  vec2 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _MainTex_ST;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
UNITY_LOCATION(1) uniform  sampler2D _AnamorphicRTS0;
UNITY_LOCATION(2) uniform  sampler2D _AnamorphicRTS1;
in  vec2 vs_TEXCOORD0;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1 = texture(_MainTex, u_xlat0.xy);
    u_xlat2 = texture(_AnamorphicRTS0, u_xlat0.xy);
    u_xlat0 = texture(_AnamorphicRTS1, u_xlat0.xy);
    u_xlat1 = min(u_xlat1, u_xlat2);
    SV_Target0 = min(u_xlat0, u_xlat1);
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "AB_HIGH_PRECISION" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 94
; Schema: 0
                                              OpCapability Shader 
                                       %1 = OpExtInstImport "GLSL.std.450" 
                                              OpMemoryModel Logical GLSL450 
                                              OpEntryPoint Vertex %4 "main" %11 %72 %84 %86 
                                              OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                              OpDecorate %11 Location 11 
                                              OpDecorate %16 ArrayStride 16 
                                              OpDecorate %17 ArrayStride 17 
                                              OpMemberDecorate %18 0 Offset 18 
                                              OpMemberDecorate %18 1 Offset 18 
                                              OpDecorate %18 Block 
                                              OpDecorate %20 DescriptorSet 20 
                                              OpDecorate %20 Binding 20 
                                              OpMemberDecorate %70 0 BuiltIn 70 
                                              OpMemberDecorate %70 1 BuiltIn 70 
                                              OpMemberDecorate %70 2 BuiltIn 70 
                                              OpDecorate %70 Block 
                                              OpDecorate vs_TEXCOORD0 Location 84 
                                              OpDecorate %86 Location 86 
                                       %2 = OpTypeVoid 
                                       %3 = OpTypeFunction %2 
                                       %6 = OpTypeFloat 32 
                                       %7 = OpTypeVector %6 4 
                                       %8 = OpTypePointer Private %7 
                        Private f32_4* %9 = OpVariable Private 
                                      %10 = OpTypePointer Input %7 
                         Input f32_4* %11 = OpVariable Input 
                                      %14 = OpTypeInt 32 0 
                                  u32 %15 = OpConstant 4 
                                      %16 = OpTypeArray %7 %15 
                                      %17 = OpTypeArray %7 %15 
                                      %18 = OpTypeStruct %16 %17 
                                      %19 = OpTypePointer Uniform %18 
Uniform struct {f32_4[4]; f32_4[4];}* %20 = OpVariable Uniform 
                                      %21 = OpTypeInt 32 1 
                                  i32 %22 = OpConstant 0 
                                  i32 %23 = OpConstant 1 
                                      %24 = OpTypePointer Uniform %7 
                                  i32 %35 = OpConstant 2 
                                  i32 %44 = OpConstant 3 
                       Private f32_4* %48 = OpVariable Private 
                                  u32 %68 = OpConstant 1 
                                      %69 = OpTypeArray %6 %68 
                                      %70 = OpTypeStruct %7 %6 %69 
                                      %71 = OpTypePointer Output %70 
 Output struct {f32_4; f32; f32[1];}* %72 = OpVariable Output 
                                      %80 = OpTypePointer Output %7 
                                      %82 = OpTypeVector %6 2 
                                      %83 = OpTypePointer Output %82 
               Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                      %85 = OpTypePointer Input %82 
                         Input f32_2* %86 = OpVariable Input 
                                      %88 = OpTypePointer Output %6 
                                  void %4 = OpFunction None %3 
                                       %5 = OpLabel 
                                f32_4 %12 = OpLoad %11 
                                f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                       Uniform f32_4* %25 = OpAccessChain %20 %22 %23 
                                f32_4 %26 = OpLoad %25 
                                f32_4 %27 = OpFMul %13 %26 
                                              OpStore %9 %27 
                       Uniform f32_4* %28 = OpAccessChain %20 %22 %22 
                                f32_4 %29 = OpLoad %28 
                                f32_4 %30 = OpLoad %11 
                                f32_4 %31 = OpVectorShuffle %30 %30 0 0 0 0 
                                f32_4 %32 = OpFMul %29 %31 
                                f32_4 %33 = OpLoad %9 
                                f32_4 %34 = OpFAdd %32 %33 
                                              OpStore %9 %34 
                       Uniform f32_4* %36 = OpAccessChain %20 %22 %35 
                                f32_4 %37 = OpLoad %36 
                                f32_4 %38 = OpLoad %11 
                                f32_4 %39 = OpVectorShuffle %38 %38 2 2 2 2 
                                f32_4 %40 = OpFMul %37 %39 
                                f32_4 %41 = OpLoad %9 
                                f32_4 %42 = OpFAdd %40 %41 
                                              OpStore %9 %42 
                                f32_4 %43 = OpLoad %9 
                       Uniform f32_4* %45 = OpAccessChain %20 %22 %44 
                                f32_4 %46 = OpLoad %45 
                                f32_4 %47 = OpFAdd %43 %46 
                                              OpStore %9 %47 
                                f32_4 %49 = OpLoad %9 
                                f32_4 %50 = OpVectorShuffle %49 %49 1 1 1 1 
                       Uniform f32_4* %51 = OpAccessChain %20 %23 %23 
                                f32_4 %52 = OpLoad %51 
                                f32_4 %53 = OpFMul %50 %52 
                                              OpStore %48 %53 
                       Uniform f32_4* %54 = OpAccessChain %20 %23 %22 
                                f32_4 %55 = OpLoad %54 
                                f32_4 %56 = OpLoad %9 
                                f32_4 %57 = OpVectorShuffle %56 %56 0 0 0 0 
                                f32_4 %58 = OpFMul %55 %57 
                                f32_4 %59 = OpLoad %48 
                                f32_4 %60 = OpFAdd %58 %59 
                                              OpStore %48 %60 
                       Uniform f32_4* %61 = OpAccessChain %20 %23 %35 
                                f32_4 %62 = OpLoad %61 
                                f32_4 %63 = OpLoad %9 
                                f32_4 %64 = OpVectorShuffle %63 %63 2 2 2 2 
                                f32_4 %65 = OpFMul %62 %64 
                                f32_4 %66 = OpLoad %48 
                                f32_4 %67 = OpFAdd %65 %66 
                                              OpStore %48 %67 
                       Uniform f32_4* %73 = OpAccessChain %20 %23 %44 
                                f32_4 %74 = OpLoad %73 
                                f32_4 %75 = OpLoad %9 
                                f32_4 %76 = OpVectorShuffle %75 %75 3 3 3 3 
                                f32_4 %77 = OpFMul %74 %76 
                                f32_4 %78 = OpLoad %48 
                                f32_4 %79 = OpFAdd %77 %78 
                        Output f32_4* %81 = OpAccessChain %72 %22 
                                              OpStore %81 %79 
                                f32_2 %87 = OpLoad %86 
                                              OpStore vs_TEXCOORD0 %87 
                          Output f32* %89 = OpAccessChain %72 %22 %68 
                                  f32 %90 = OpLoad %89 
                                  f32 %91 = OpFNegate %90 
                          Output f32* %92 = OpAccessChain %72 %22 %68 
                                              OpStore %92 %91 
                                              OpReturn
                                              OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 70
; Schema: 0
                                             OpCapability Shader 
                                      %1 = OpExtInstImport "GLSL.std.450" 
                                             OpMemoryModel Logical GLSL450 
                                             OpEntryPoint Fragment %4 "main" %12 %65 
                                             OpExecutionMode %4 OriginUpperLeft 
                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                             OpDecorate vs_TEXCOORD0 Location 12 
                                             OpMemberDecorate %14 0 Offset 14 
                                             OpDecorate %14 Block 
                                             OpDecorate %16 DescriptorSet 16 
                                             OpDecorate %16 Binding 16 
                                             OpDecorate %33 DescriptorSet 33 
                                             OpDecorate %33 Binding 33 
                                             OpDecorate %37 DescriptorSet 37 
                                             OpDecorate %37 Binding 37 
                                             OpDecorate %45 DescriptorSet 45 
                                             OpDecorate %45 Binding 45 
                                             OpDecorate %47 DescriptorSet 47 
                                             OpDecorate %47 Binding 47 
                                             OpDecorate %53 DescriptorSet 53 
                                             OpDecorate %53 Binding 53 
                                             OpDecorate %55 DescriptorSet 55 
                                             OpDecorate %55 Binding 55 
                                             OpDecorate %65 Location 65 
                                      %2 = OpTypeVoid 
                                      %3 = OpTypeFunction %2 
                                      %6 = OpTypeFloat 32 
                                      %7 = OpTypeVector %6 4 
                                      %8 = OpTypePointer Private %7 
                       Private f32_4* %9 = OpVariable Private 
                                     %10 = OpTypeVector %6 2 
                                     %11 = OpTypePointer Input %10 
               Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                     %14 = OpTypeStruct %7 
                                     %15 = OpTypePointer Uniform %14 
            Uniform struct {f32_4;}* %16 = OpVariable Uniform 
                                     %17 = OpTypeInt 32 1 
                                 i32 %18 = OpConstant 0 
                                     %19 = OpTypePointer Uniform %7 
                      Private f32_4* %30 = OpVariable Private 
                                     %31 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                     %32 = OpTypePointer UniformConstant %31 
UniformConstant read_only Texture2D* %33 = OpVariable UniformConstant 
                                     %35 = OpTypeSampler 
                                     %36 = OpTypePointer UniformConstant %35 
            UniformConstant sampler* %37 = OpVariable UniformConstant 
                                     %39 = OpTypeSampledImage %31 
                      Private f32_4* %44 = OpVariable Private 
UniformConstant read_only Texture2D* %45 = OpVariable UniformConstant 
            UniformConstant sampler* %47 = OpVariable UniformConstant 
UniformConstant read_only Texture2D* %53 = OpVariable UniformConstant 
            UniformConstant sampler* %55 = OpVariable UniformConstant 
                                     %64 = OpTypePointer Output %7 
                       Output f32_4* %65 = OpVariable Output 
                                 void %4 = OpFunction None %3 
                                      %5 = OpLabel 
                               f32_2 %13 = OpLoad vs_TEXCOORD0 
                      Uniform f32_4* %20 = OpAccessChain %16 %18 
                               f32_4 %21 = OpLoad %20 
                               f32_2 %22 = OpVectorShuffle %21 %21 0 1 
                               f32_2 %23 = OpFMul %13 %22 
                      Uniform f32_4* %24 = OpAccessChain %16 %18 
                               f32_4 %25 = OpLoad %24 
                               f32_2 %26 = OpVectorShuffle %25 %25 2 3 
                               f32_2 %27 = OpFAdd %23 %26 
                               f32_4 %28 = OpLoad %9 
                               f32_4 %29 = OpVectorShuffle %28 %27 4 5 2 3 
                                             OpStore %9 %29 
                 read_only Texture2D %34 = OpLoad %33 
                             sampler %38 = OpLoad %37 
          read_only Texture2DSampled %40 = OpSampledImage %34 %38 
                               f32_4 %41 = OpLoad %9 
                               f32_2 %42 = OpVectorShuffle %41 %41 0 1 
                               f32_4 %43 = OpImageSampleImplicitLod %40 %42 
                                             OpStore %30 %43 
                 read_only Texture2D %46 = OpLoad %45 
                             sampler %48 = OpLoad %47 
          read_only Texture2DSampled %49 = OpSampledImage %46 %48 
                               f32_4 %50 = OpLoad %9 
                               f32_2 %51 = OpVectorShuffle %50 %50 0 1 
                               f32_4 %52 = OpImageSampleImplicitLod %49 %51 
                                             OpStore %44 %52 
                 read_only Texture2D %54 = OpLoad %53 
                             sampler %56 = OpLoad %55 
          read_only Texture2DSampled %57 = OpSampledImage %54 %56 
                               f32_4 %58 = OpLoad %9 
                               f32_2 %59 = OpVectorShuffle %58 %58 0 1 
                               f32_4 %60 = OpImageSampleImplicitLod %57 %59 
                                             OpStore %9 %60 
                               f32_4 %61 = OpLoad %30 
                               f32_4 %62 = OpLoad %44 
                               f32_4 %63 = OpExtInst %1 37 %61 %62 
                                             OpStore %30 %63 
                               f32_4 %66 = OpLoad %9 
                               f32_4 %67 = OpLoad %30 
                               f32_4 %68 = OpExtInst %1 37 %66 %67 
                                             OpStore %65 %68 
                                             OpReturn
                                             OpFunctionEnd
"
}
}
Program "fp" {
SubProgram "d3d11 " {
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
""
}
SubProgram "vulkan " {
""
}
SubProgram "d3d11 " {
Keywords { "AB_HIGH_PRECISION" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "AB_HIGH_PRECISION" }
""
}
SubProgram "vulkan " {
Keywords { "AB_HIGH_PRECISION" }
""
}
}
}
 Pass {
  Name "frag_BokehComposition4S"
  ZTest Always
  ZWrite Off
  Cull Off
  GpuProgramID 1972178
Program "vp" {
SubProgram "d3d11 " {
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in  vec4 in_POSITION0;
in  vec2 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _MainTex_ST;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
UNITY_LOCATION(1) uniform  sampler2D _AnamorphicRTS0;
UNITY_LOCATION(2) uniform  sampler2D _AnamorphicRTS1;
UNITY_LOCATION(3) uniform  sampler2D _AnamorphicRTS2;
in  vec2 vs_TEXCOORD0;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1 = texture(_MainTex, u_xlat0.xy);
    u_xlat2 = texture(_AnamorphicRTS0, u_xlat0.xy);
    u_xlat1 = min(u_xlat1, u_xlat2);
    u_xlat2 = texture(_AnamorphicRTS1, u_xlat0.xy);
    u_xlat0 = texture(_AnamorphicRTS2, u_xlat0.xy);
    u_xlat1 = min(u_xlat1, u_xlat2);
    SV_Target0 = min(u_xlat0, u_xlat1);
    return;
}

#endif
"
}
SubProgram "vulkan " {
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 94
; Schema: 0
                                              OpCapability Shader 
                                       %1 = OpExtInstImport "GLSL.std.450" 
                                              OpMemoryModel Logical GLSL450 
                                              OpEntryPoint Vertex %4 "main" %11 %72 %84 %86 
                                              OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                              OpDecorate %11 Location 11 
                                              OpDecorate %16 ArrayStride 16 
                                              OpDecorate %17 ArrayStride 17 
                                              OpMemberDecorate %18 0 Offset 18 
                                              OpMemberDecorate %18 1 Offset 18 
                                              OpDecorate %18 Block 
                                              OpDecorate %20 DescriptorSet 20 
                                              OpDecorate %20 Binding 20 
                                              OpMemberDecorate %70 0 BuiltIn 70 
                                              OpMemberDecorate %70 1 BuiltIn 70 
                                              OpMemberDecorate %70 2 BuiltIn 70 
                                              OpDecorate %70 Block 
                                              OpDecorate vs_TEXCOORD0 Location 84 
                                              OpDecorate %86 Location 86 
                                       %2 = OpTypeVoid 
                                       %3 = OpTypeFunction %2 
                                       %6 = OpTypeFloat 32 
                                       %7 = OpTypeVector %6 4 
                                       %8 = OpTypePointer Private %7 
                        Private f32_4* %9 = OpVariable Private 
                                      %10 = OpTypePointer Input %7 
                         Input f32_4* %11 = OpVariable Input 
                                      %14 = OpTypeInt 32 0 
                                  u32 %15 = OpConstant 4 
                                      %16 = OpTypeArray %7 %15 
                                      %17 = OpTypeArray %7 %15 
                                      %18 = OpTypeStruct %16 %17 
                                      %19 = OpTypePointer Uniform %18 
Uniform struct {f32_4[4]; f32_4[4];}* %20 = OpVariable Uniform 
                                      %21 = OpTypeInt 32 1 
                                  i32 %22 = OpConstant 0 
                                  i32 %23 = OpConstant 1 
                                      %24 = OpTypePointer Uniform %7 
                                  i32 %35 = OpConstant 2 
                                  i32 %44 = OpConstant 3 
                       Private f32_4* %48 = OpVariable Private 
                                  u32 %68 = OpConstant 1 
                                      %69 = OpTypeArray %6 %68 
                                      %70 = OpTypeStruct %7 %6 %69 
                                      %71 = OpTypePointer Output %70 
 Output struct {f32_4; f32; f32[1];}* %72 = OpVariable Output 
                                      %80 = OpTypePointer Output %7 
                                      %82 = OpTypeVector %6 2 
                                      %83 = OpTypePointer Output %82 
               Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                      %85 = OpTypePointer Input %82 
                         Input f32_2* %86 = OpVariable Input 
                                      %88 = OpTypePointer Output %6 
                                  void %4 = OpFunction None %3 
                                       %5 = OpLabel 
                                f32_4 %12 = OpLoad %11 
                                f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                       Uniform f32_4* %25 = OpAccessChain %20 %22 %23 
                                f32_4 %26 = OpLoad %25 
                                f32_4 %27 = OpFMul %13 %26 
                                              OpStore %9 %27 
                       Uniform f32_4* %28 = OpAccessChain %20 %22 %22 
                                f32_4 %29 = OpLoad %28 
                                f32_4 %30 = OpLoad %11 
                                f32_4 %31 = OpVectorShuffle %30 %30 0 0 0 0 
                                f32_4 %32 = OpFMul %29 %31 
                                f32_4 %33 = OpLoad %9 
                                f32_4 %34 = OpFAdd %32 %33 
                                              OpStore %9 %34 
                       Uniform f32_4* %36 = OpAccessChain %20 %22 %35 
                                f32_4 %37 = OpLoad %36 
                                f32_4 %38 = OpLoad %11 
                                f32_4 %39 = OpVectorShuffle %38 %38 2 2 2 2 
                                f32_4 %40 = OpFMul %37 %39 
                                f32_4 %41 = OpLoad %9 
                                f32_4 %42 = OpFAdd %40 %41 
                                              OpStore %9 %42 
                                f32_4 %43 = OpLoad %9 
                       Uniform f32_4* %45 = OpAccessChain %20 %22 %44 
                                f32_4 %46 = OpLoad %45 
                                f32_4 %47 = OpFAdd %43 %46 
                                              OpStore %9 %47 
                                f32_4 %49 = OpLoad %9 
                                f32_4 %50 = OpVectorShuffle %49 %49 1 1 1 1 
                       Uniform f32_4* %51 = OpAccessChain %20 %23 %23 
                                f32_4 %52 = OpLoad %51 
                                f32_4 %53 = OpFMul %50 %52 
                                              OpStore %48 %53 
                       Uniform f32_4* %54 = OpAccessChain %20 %23 %22 
                                f32_4 %55 = OpLoad %54 
                                f32_4 %56 = OpLoad %9 
                                f32_4 %57 = OpVectorShuffle %56 %56 0 0 0 0 
                                f32_4 %58 = OpFMul %55 %57 
                                f32_4 %59 = OpLoad %48 
                                f32_4 %60 = OpFAdd %58 %59 
                                              OpStore %48 %60 
                       Uniform f32_4* %61 = OpAccessChain %20 %23 %35 
                                f32_4 %62 = OpLoad %61 
                                f32_4 %63 = OpLoad %9 
                                f32_4 %64 = OpVectorShuffle %63 %63 2 2 2 2 
                                f32_4 %65 = OpFMul %62 %64 
                                f32_4 %66 = OpLoad %48 
                                f32_4 %67 = OpFAdd %65 %66 
                                              OpStore %48 %67 
                       Uniform f32_4* %73 = OpAccessChain %20 %23 %44 
                                f32_4 %74 = OpLoad %73 
                                f32_4 %75 = OpLoad %9 
                                f32_4 %76 = OpVectorShuffle %75 %75 3 3 3 3 
                                f32_4 %77 = OpFMul %74 %76 
                                f32_4 %78 = OpLoad %48 
                                f32_4 %79 = OpFAdd %77 %78 
                        Output f32_4* %81 = OpAccessChain %72 %22 
                                              OpStore %81 %79 
                                f32_2 %87 = OpLoad %86 
                                              OpStore vs_TEXCOORD0 %87 
                          Output f32* %89 = OpAccessChain %72 %22 %68 
                                  f32 %90 = OpLoad %89 
                                  f32 %91 = OpFNegate %90 
                          Output f32* %92 = OpAccessChain %72 %22 %68 
                                              OpStore %92 %91 
                                              OpReturn
                                              OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 81
; Schema: 0
                                             OpCapability Shader 
                                      %1 = OpExtInstImport "GLSL.std.450" 
                                             OpMemoryModel Logical GLSL450 
                                             OpEntryPoint Fragment %4 "main" %12 %76 
                                             OpExecutionMode %4 OriginUpperLeft 
                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                             OpDecorate vs_TEXCOORD0 Location 12 
                                             OpMemberDecorate %14 0 Offset 14 
                                             OpDecorate %14 Block 
                                             OpDecorate %16 DescriptorSet 16 
                                             OpDecorate %16 Binding 16 
                                             OpDecorate %33 DescriptorSet 33 
                                             OpDecorate %33 Binding 33 
                                             OpDecorate %37 DescriptorSet 37 
                                             OpDecorate %37 Binding 37 
                                             OpDecorate %45 DescriptorSet 45 
                                             OpDecorate %45 Binding 45 
                                             OpDecorate %47 DescriptorSet 47 
                                             OpDecorate %47 Binding 47 
                                             OpDecorate %56 DescriptorSet 56 
                                             OpDecorate %56 Binding 56 
                                             OpDecorate %58 DescriptorSet 58 
                                             OpDecorate %58 Binding 58 
                                             OpDecorate %64 DescriptorSet 64 
                                             OpDecorate %64 Binding 64 
                                             OpDecorate %66 DescriptorSet 66 
                                             OpDecorate %66 Binding 66 
                                             OpDecorate %76 Location 76 
                                      %2 = OpTypeVoid 
                                      %3 = OpTypeFunction %2 
                                      %6 = OpTypeFloat 32 
                                      %7 = OpTypeVector %6 4 
                                      %8 = OpTypePointer Private %7 
                       Private f32_4* %9 = OpVariable Private 
                                     %10 = OpTypeVector %6 2 
                                     %11 = OpTypePointer Input %10 
               Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                     %14 = OpTypeStruct %7 
                                     %15 = OpTypePointer Uniform %14 
            Uniform struct {f32_4;}* %16 = OpVariable Uniform 
                                     %17 = OpTypeInt 32 1 
                                 i32 %18 = OpConstant 0 
                                     %19 = OpTypePointer Uniform %7 
                      Private f32_4* %30 = OpVariable Private 
                                     %31 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                     %32 = OpTypePointer UniformConstant %31 
UniformConstant read_only Texture2D* %33 = OpVariable UniformConstant 
                                     %35 = OpTypeSampler 
                                     %36 = OpTypePointer UniformConstant %35 
            UniformConstant sampler* %37 = OpVariable UniformConstant 
                                     %39 = OpTypeSampledImage %31 
                      Private f32_4* %44 = OpVariable Private 
UniformConstant read_only Texture2D* %45 = OpVariable UniformConstant 
            UniformConstant sampler* %47 = OpVariable UniformConstant 
UniformConstant read_only Texture2D* %56 = OpVariable UniformConstant 
            UniformConstant sampler* %58 = OpVariable UniformConstant 
UniformConstant read_only Texture2D* %64 = OpVariable UniformConstant 
            UniformConstant sampler* %66 = OpVariable UniformConstant 
                                     %75 = OpTypePointer Output %7 
                       Output f32_4* %76 = OpVariable Output 
                                 void %4 = OpFunction None %3 
                                      %5 = OpLabel 
                               f32_2 %13 = OpLoad vs_TEXCOORD0 
                      Uniform f32_4* %20 = OpAccessChain %16 %18 
                               f32_4 %21 = OpLoad %20 
                               f32_2 %22 = OpVectorShuffle %21 %21 0 1 
                               f32_2 %23 = OpFMul %13 %22 
                      Uniform f32_4* %24 = OpAccessChain %16 %18 
                               f32_4 %25 = OpLoad %24 
                               f32_2 %26 = OpVectorShuffle %25 %25 2 3 
                               f32_2 %27 = OpFAdd %23 %26 
                               f32_4 %28 = OpLoad %9 
                               f32_4 %29 = OpVectorShuffle %28 %27 4 5 2 3 
                                             OpStore %9 %29 
                 read_only Texture2D %34 = OpLoad %33 
                             sampler %38 = OpLoad %37 
          read_only Texture2DSampled %40 = OpSampledImage %34 %38 
                               f32_4 %41 = OpLoad %9 
                               f32_2 %42 = OpVectorShuffle %41 %41 0 1 
                               f32_4 %43 = OpImageSampleImplicitLod %40 %42 
                                             OpStore %30 %43 
                 read_only Texture2D %46 = OpLoad %45 
                             sampler %48 = OpLoad %47 
          read_only Texture2DSampled %49 = OpSampledImage %46 %48 
                               f32_4 %50 = OpLoad %9 
                               f32_2 %51 = OpVectorShuffle %50 %50 0 1 
                               f32_4 %52 = OpImageSampleImplicitLod %49 %51 
                                             OpStore %44 %52 
                               f32_4 %53 = OpLoad %30 
                               f32_4 %54 = OpLoad %44 
                               f32_4 %55 = OpExtInst %1 37 %53 %54 
                                             OpStore %30 %55 
                 read_only Texture2D %57 = OpLoad %56 
                             sampler %59 = OpLoad %58 
          read_only Texture2DSampled %60 = OpSampledImage %57 %59 
                               f32_4 %61 = OpLoad %9 
                               f32_2 %62 = OpVectorShuffle %61 %61 0 1 
                               f32_4 %63 = OpImageSampleImplicitLod %60 %62 
                                             OpStore %44 %63 
                 read_only Texture2D %65 = OpLoad %64 
                             sampler %67 = OpLoad %66 
          read_only Texture2DSampled %68 = OpSampledImage %65 %67 
                               f32_4 %69 = OpLoad %9 
                               f32_2 %70 = OpVectorShuffle %69 %69 0 1 
                               f32_4 %71 = OpImageSampleImplicitLod %68 %70 
                                             OpStore %9 %71 
                               f32_4 %72 = OpLoad %30 
                               f32_4 %73 = OpLoad %44 
                               f32_4 %74 = OpExtInst %1 37 %72 %73 
                                             OpStore %30 %74 
                               f32_4 %77 = OpLoad %9 
                               f32_4 %78 = OpLoad %30 
                               f32_4 %79 = OpExtInst %1 37 %77 %78 
                                             OpStore %76 %79 
                                             OpReturn
                                             OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "AB_HIGH_PRECISION" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "AB_HIGH_PRECISION" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in  vec4 in_POSITION0;
in  vec2 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _MainTex_ST;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
UNITY_LOCATION(1) uniform  sampler2D _AnamorphicRTS0;
UNITY_LOCATION(2) uniform  sampler2D _AnamorphicRTS1;
UNITY_LOCATION(3) uniform  sampler2D _AnamorphicRTS2;
in  vec2 vs_TEXCOORD0;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1 = texture(_MainTex, u_xlat0.xy);
    u_xlat2 = texture(_AnamorphicRTS0, u_xlat0.xy);
    u_xlat1 = min(u_xlat1, u_xlat2);
    u_xlat2 = texture(_AnamorphicRTS1, u_xlat0.xy);
    u_xlat0 = texture(_AnamorphicRTS2, u_xlat0.xy);
    u_xlat1 = min(u_xlat1, u_xlat2);
    SV_Target0 = min(u_xlat0, u_xlat1);
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "AB_HIGH_PRECISION" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 94
; Schema: 0
                                              OpCapability Shader 
                                       %1 = OpExtInstImport "GLSL.std.450" 
                                              OpMemoryModel Logical GLSL450 
                                              OpEntryPoint Vertex %4 "main" %11 %72 %84 %86 
                                              OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                              OpDecorate %11 Location 11 
                                              OpDecorate %16 ArrayStride 16 
                                              OpDecorate %17 ArrayStride 17 
                                              OpMemberDecorate %18 0 Offset 18 
                                              OpMemberDecorate %18 1 Offset 18 
                                              OpDecorate %18 Block 
                                              OpDecorate %20 DescriptorSet 20 
                                              OpDecorate %20 Binding 20 
                                              OpMemberDecorate %70 0 BuiltIn 70 
                                              OpMemberDecorate %70 1 BuiltIn 70 
                                              OpMemberDecorate %70 2 BuiltIn 70 
                                              OpDecorate %70 Block 
                                              OpDecorate vs_TEXCOORD0 Location 84 
                                              OpDecorate %86 Location 86 
                                       %2 = OpTypeVoid 
                                       %3 = OpTypeFunction %2 
                                       %6 = OpTypeFloat 32 
                                       %7 = OpTypeVector %6 4 
                                       %8 = OpTypePointer Private %7 
                        Private f32_4* %9 = OpVariable Private 
                                      %10 = OpTypePointer Input %7 
                         Input f32_4* %11 = OpVariable Input 
                                      %14 = OpTypeInt 32 0 
                                  u32 %15 = OpConstant 4 
                                      %16 = OpTypeArray %7 %15 
                                      %17 = OpTypeArray %7 %15 
                                      %18 = OpTypeStruct %16 %17 
                                      %19 = OpTypePointer Uniform %18 
Uniform struct {f32_4[4]; f32_4[4];}* %20 = OpVariable Uniform 
                                      %21 = OpTypeInt 32 1 
                                  i32 %22 = OpConstant 0 
                                  i32 %23 = OpConstant 1 
                                      %24 = OpTypePointer Uniform %7 
                                  i32 %35 = OpConstant 2 
                                  i32 %44 = OpConstant 3 
                       Private f32_4* %48 = OpVariable Private 
                                  u32 %68 = OpConstant 1 
                                      %69 = OpTypeArray %6 %68 
                                      %70 = OpTypeStruct %7 %6 %69 
                                      %71 = OpTypePointer Output %70 
 Output struct {f32_4; f32; f32[1];}* %72 = OpVariable Output 
                                      %80 = OpTypePointer Output %7 
                                      %82 = OpTypeVector %6 2 
                                      %83 = OpTypePointer Output %82 
               Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                      %85 = OpTypePointer Input %82 
                         Input f32_2* %86 = OpVariable Input 
                                      %88 = OpTypePointer Output %6 
                                  void %4 = OpFunction None %3 
                                       %5 = OpLabel 
                                f32_4 %12 = OpLoad %11 
                                f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                       Uniform f32_4* %25 = OpAccessChain %20 %22 %23 
                                f32_4 %26 = OpLoad %25 
                                f32_4 %27 = OpFMul %13 %26 
                                              OpStore %9 %27 
                       Uniform f32_4* %28 = OpAccessChain %20 %22 %22 
                                f32_4 %29 = OpLoad %28 
                                f32_4 %30 = OpLoad %11 
                                f32_4 %31 = OpVectorShuffle %30 %30 0 0 0 0 
                                f32_4 %32 = OpFMul %29 %31 
                                f32_4 %33 = OpLoad %9 
                                f32_4 %34 = OpFAdd %32 %33 
                                              OpStore %9 %34 
                       Uniform f32_4* %36 = OpAccessChain %20 %22 %35 
                                f32_4 %37 = OpLoad %36 
                                f32_4 %38 = OpLoad %11 
                                f32_4 %39 = OpVectorShuffle %38 %38 2 2 2 2 
                                f32_4 %40 = OpFMul %37 %39 
                                f32_4 %41 = OpLoad %9 
                                f32_4 %42 = OpFAdd %40 %41 
                                              OpStore %9 %42 
                                f32_4 %43 = OpLoad %9 
                       Uniform f32_4* %45 = OpAccessChain %20 %22 %44 
                                f32_4 %46 = OpLoad %45 
                                f32_4 %47 = OpFAdd %43 %46 
                                              OpStore %9 %47 
                                f32_4 %49 = OpLoad %9 
                                f32_4 %50 = OpVectorShuffle %49 %49 1 1 1 1 
                       Uniform f32_4* %51 = OpAccessChain %20 %23 %23 
                                f32_4 %52 = OpLoad %51 
                                f32_4 %53 = OpFMul %50 %52 
                                              OpStore %48 %53 
                       Uniform f32_4* %54 = OpAccessChain %20 %23 %22 
                                f32_4 %55 = OpLoad %54 
                                f32_4 %56 = OpLoad %9 
                                f32_4 %57 = OpVectorShuffle %56 %56 0 0 0 0 
                                f32_4 %58 = OpFMul %55 %57 
                                f32_4 %59 = OpLoad %48 
                                f32_4 %60 = OpFAdd %58 %59 
                                              OpStore %48 %60 
                       Uniform f32_4* %61 = OpAccessChain %20 %23 %35 
                                f32_4 %62 = OpLoad %61 
                                f32_4 %63 = OpLoad %9 
                                f32_4 %64 = OpVectorShuffle %63 %63 2 2 2 2 
                                f32_4 %65 = OpFMul %62 %64 
                                f32_4 %66 = OpLoad %48 
                                f32_4 %67 = OpFAdd %65 %66 
                                              OpStore %48 %67 
                       Uniform f32_4* %73 = OpAccessChain %20 %23 %44 
                                f32_4 %74 = OpLoad %73 
                                f32_4 %75 = OpLoad %9 
                                f32_4 %76 = OpVectorShuffle %75 %75 3 3 3 3 
                                f32_4 %77 = OpFMul %74 %76 
                                f32_4 %78 = OpLoad %48 
                                f32_4 %79 = OpFAdd %77 %78 
                        Output f32_4* %81 = OpAccessChain %72 %22 
                                              OpStore %81 %79 
                                f32_2 %87 = OpLoad %86 
                                              OpStore vs_TEXCOORD0 %87 
                          Output f32* %89 = OpAccessChain %72 %22 %68 
                                  f32 %90 = OpLoad %89 
                                  f32 %91 = OpFNegate %90 
                          Output f32* %92 = OpAccessChain %72 %22 %68 
                                              OpStore %92 %91 
                                              OpReturn
                                              OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 81
; Schema: 0
                                             OpCapability Shader 
                                      %1 = OpExtInstImport "GLSL.std.450" 
                                             OpMemoryModel Logical GLSL450 
                                             OpEntryPoint Fragment %4 "main" %12 %76 
                                             OpExecutionMode %4 OriginUpperLeft 
                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                             OpDecorate vs_TEXCOORD0 Location 12 
                                             OpMemberDecorate %14 0 Offset 14 
                                             OpDecorate %14 Block 
                                             OpDecorate %16 DescriptorSet 16 
                                             OpDecorate %16 Binding 16 
                                             OpDecorate %33 DescriptorSet 33 
                                             OpDecorate %33 Binding 33 
                                             OpDecorate %37 DescriptorSet 37 
                                             OpDecorate %37 Binding 37 
                                             OpDecorate %45 DescriptorSet 45 
                                             OpDecorate %45 Binding 45 
                                             OpDecorate %47 DescriptorSet 47 
                                             OpDecorate %47 Binding 47 
                                             OpDecorate %56 DescriptorSet 56 
                                             OpDecorate %56 Binding 56 
                                             OpDecorate %58 DescriptorSet 58 
                                             OpDecorate %58 Binding 58 
                                             OpDecorate %64 DescriptorSet 64 
                                             OpDecorate %64 Binding 64 
                                             OpDecorate %66 DescriptorSet 66 
                                             OpDecorate %66 Binding 66 
                                             OpDecorate %76 Location 76 
                                      %2 = OpTypeVoid 
                                      %3 = OpTypeFunction %2 
                                      %6 = OpTypeFloat 32 
                                      %7 = OpTypeVector %6 4 
                                      %8 = OpTypePointer Private %7 
                       Private f32_4* %9 = OpVariable Private 
                                     %10 = OpTypeVector %6 2 
                                     %11 = OpTypePointer Input %10 
               Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                     %14 = OpTypeStruct %7 
                                     %15 = OpTypePointer Uniform %14 
            Uniform struct {f32_4;}* %16 = OpVariable Uniform 
                                     %17 = OpTypeInt 32 1 
                                 i32 %18 = OpConstant 0 
                                     %19 = OpTypePointer Uniform %7 
                      Private f32_4* %30 = OpVariable Private 
                                     %31 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                     %32 = OpTypePointer UniformConstant %31 
UniformConstant read_only Texture2D* %33 = OpVariable UniformConstant 
                                     %35 = OpTypeSampler 
                                     %36 = OpTypePointer UniformConstant %35 
            UniformConstant sampler* %37 = OpVariable UniformConstant 
                                     %39 = OpTypeSampledImage %31 
                      Private f32_4* %44 = OpVariable Private 
UniformConstant read_only Texture2D* %45 = OpVariable UniformConstant 
            UniformConstant sampler* %47 = OpVariable UniformConstant 
UniformConstant read_only Texture2D* %56 = OpVariable UniformConstant 
            UniformConstant sampler* %58 = OpVariable UniformConstant 
UniformConstant read_only Texture2D* %64 = OpVariable UniformConstant 
            UniformConstant sampler* %66 = OpVariable UniformConstant 
                                     %75 = OpTypePointer Output %7 
                       Output f32_4* %76 = OpVariable Output 
                                 void %4 = OpFunction None %3 
                                      %5 = OpLabel 
                               f32_2 %13 = OpLoad vs_TEXCOORD0 
                      Uniform f32_4* %20 = OpAccessChain %16 %18 
                               f32_4 %21 = OpLoad %20 
                               f32_2 %22 = OpVectorShuffle %21 %21 0 1 
                               f32_2 %23 = OpFMul %13 %22 
                      Uniform f32_4* %24 = OpAccessChain %16 %18 
                               f32_4 %25 = OpLoad %24 
                               f32_2 %26 = OpVectorShuffle %25 %25 2 3 
                               f32_2 %27 = OpFAdd %23 %26 
                               f32_4 %28 = OpLoad %9 
                               f32_4 %29 = OpVectorShuffle %28 %27 4 5 2 3 
                                             OpStore %9 %29 
                 read_only Texture2D %34 = OpLoad %33 
                             sampler %38 = OpLoad %37 
          read_only Texture2DSampled %40 = OpSampledImage %34 %38 
                               f32_4 %41 = OpLoad %9 
                               f32_2 %42 = OpVectorShuffle %41 %41 0 1 
                               f32_4 %43 = OpImageSampleImplicitLod %40 %42 
                                             OpStore %30 %43 
                 read_only Texture2D %46 = OpLoad %45 
                             sampler %48 = OpLoad %47 
          read_only Texture2DSampled %49 = OpSampledImage %46 %48 
                               f32_4 %50 = OpLoad %9 
                               f32_2 %51 = OpVectorShuffle %50 %50 0 1 
                               f32_4 %52 = OpImageSampleImplicitLod %49 %51 
                                             OpStore %44 %52 
                               f32_4 %53 = OpLoad %30 
                               f32_4 %54 = OpLoad %44 
                               f32_4 %55 = OpExtInst %1 37 %53 %54 
                                             OpStore %30 %55 
                 read_only Texture2D %57 = OpLoad %56 
                             sampler %59 = OpLoad %58 
          read_only Texture2DSampled %60 = OpSampledImage %57 %59 
                               f32_4 %61 = OpLoad %9 
                               f32_2 %62 = OpVectorShuffle %61 %61 0 1 
                               f32_4 %63 = OpImageSampleImplicitLod %60 %62 
                                             OpStore %44 %63 
                 read_only Texture2D %65 = OpLoad %64 
                             sampler %67 = OpLoad %66 
          read_only Texture2DSampled %68 = OpSampledImage %65 %67 
                               f32_4 %69 = OpLoad %9 
                               f32_2 %70 = OpVectorShuffle %69 %69 0 1 
                               f32_4 %71 = OpImageSampleImplicitLod %68 %70 
                                             OpStore %9 %71 
                               f32_4 %72 = OpLoad %30 
                               f32_4 %73 = OpLoad %44 
                               f32_4 %74 = OpExtInst %1 37 %72 %73 
                                             OpStore %30 %74 
                               f32_4 %77 = OpLoad %9 
                               f32_4 %78 = OpLoad %30 
                               f32_4 %79 = OpExtInst %1 37 %77 %78 
                                             OpStore %76 %79 
                                             OpReturn
                                             OpFunctionEnd
"
}
}
Program "fp" {
SubProgram "d3d11 " {
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
""
}
SubProgram "vulkan " {
""
}
SubProgram "d3d11 " {
Keywords { "AB_HIGH_PRECISION" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "AB_HIGH_PRECISION" }
""
}
SubProgram "vulkan " {
Keywords { "AB_HIGH_PRECISION" }
""
}
}
}
 Pass {
  Name "frag_BokehComposition5S"
  ZTest Always
  ZWrite Off
  Cull Off
  GpuProgramID 2093301
Program "vp" {
SubProgram "d3d11 " {
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in  vec4 in_POSITION0;
in  vec2 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _MainTex_ST;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
UNITY_LOCATION(1) uniform  sampler2D _AnamorphicRTS0;
UNITY_LOCATION(2) uniform  sampler2D _AnamorphicRTS1;
UNITY_LOCATION(3) uniform  sampler2D _AnamorphicRTS2;
UNITY_LOCATION(4) uniform  sampler2D _AnamorphicRTS3;
in  vec2 vs_TEXCOORD0;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1 = texture(_MainTex, u_xlat0.xy);
    u_xlat2 = texture(_AnamorphicRTS0, u_xlat0.xy);
    u_xlat1 = min(u_xlat1, u_xlat2);
    u_xlat2 = texture(_AnamorphicRTS1, u_xlat0.xy);
    u_xlat1 = min(u_xlat1, u_xlat2);
    u_xlat2 = texture(_AnamorphicRTS2, u_xlat0.xy);
    u_xlat0 = texture(_AnamorphicRTS3, u_xlat0.xy);
    u_xlat1 = min(u_xlat1, u_xlat2);
    SV_Target0 = min(u_xlat0, u_xlat1);
    return;
}

#endif
"
}
SubProgram "vulkan " {
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 94
; Schema: 0
                                              OpCapability Shader 
                                       %1 = OpExtInstImport "GLSL.std.450" 
                                              OpMemoryModel Logical GLSL450 
                                              OpEntryPoint Vertex %4 "main" %11 %72 %84 %86 
                                              OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                              OpDecorate %11 Location 11 
                                              OpDecorate %16 ArrayStride 16 
                                              OpDecorate %17 ArrayStride 17 
                                              OpMemberDecorate %18 0 Offset 18 
                                              OpMemberDecorate %18 1 Offset 18 
                                              OpDecorate %18 Block 
                                              OpDecorate %20 DescriptorSet 20 
                                              OpDecorate %20 Binding 20 
                                              OpMemberDecorate %70 0 BuiltIn 70 
                                              OpMemberDecorate %70 1 BuiltIn 70 
                                              OpMemberDecorate %70 2 BuiltIn 70 
                                              OpDecorate %70 Block 
                                              OpDecorate vs_TEXCOORD0 Location 84 
                                              OpDecorate %86 Location 86 
                                       %2 = OpTypeVoid 
                                       %3 = OpTypeFunction %2 
                                       %6 = OpTypeFloat 32 
                                       %7 = OpTypeVector %6 4 
                                       %8 = OpTypePointer Private %7 
                        Private f32_4* %9 = OpVariable Private 
                                      %10 = OpTypePointer Input %7 
                         Input f32_4* %11 = OpVariable Input 
                                      %14 = OpTypeInt 32 0 
                                  u32 %15 = OpConstant 4 
                                      %16 = OpTypeArray %7 %15 
                                      %17 = OpTypeArray %7 %15 
                                      %18 = OpTypeStruct %16 %17 
                                      %19 = OpTypePointer Uniform %18 
Uniform struct {f32_4[4]; f32_4[4];}* %20 = OpVariable Uniform 
                                      %21 = OpTypeInt 32 1 
                                  i32 %22 = OpConstant 0 
                                  i32 %23 = OpConstant 1 
                                      %24 = OpTypePointer Uniform %7 
                                  i32 %35 = OpConstant 2 
                                  i32 %44 = OpConstant 3 
                       Private f32_4* %48 = OpVariable Private 
                                  u32 %68 = OpConstant 1 
                                      %69 = OpTypeArray %6 %68 
                                      %70 = OpTypeStruct %7 %6 %69 
                                      %71 = OpTypePointer Output %70 
 Output struct {f32_4; f32; f32[1];}* %72 = OpVariable Output 
                                      %80 = OpTypePointer Output %7 
                                      %82 = OpTypeVector %6 2 
                                      %83 = OpTypePointer Output %82 
               Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                      %85 = OpTypePointer Input %82 
                         Input f32_2* %86 = OpVariable Input 
                                      %88 = OpTypePointer Output %6 
                                  void %4 = OpFunction None %3 
                                       %5 = OpLabel 
                                f32_4 %12 = OpLoad %11 
                                f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                       Uniform f32_4* %25 = OpAccessChain %20 %22 %23 
                                f32_4 %26 = OpLoad %25 
                                f32_4 %27 = OpFMul %13 %26 
                                              OpStore %9 %27 
                       Uniform f32_4* %28 = OpAccessChain %20 %22 %22 
                                f32_4 %29 = OpLoad %28 
                                f32_4 %30 = OpLoad %11 
                                f32_4 %31 = OpVectorShuffle %30 %30 0 0 0 0 
                                f32_4 %32 = OpFMul %29 %31 
                                f32_4 %33 = OpLoad %9 
                                f32_4 %34 = OpFAdd %32 %33 
                                              OpStore %9 %34 
                       Uniform f32_4* %36 = OpAccessChain %20 %22 %35 
                                f32_4 %37 = OpLoad %36 
                                f32_4 %38 = OpLoad %11 
                                f32_4 %39 = OpVectorShuffle %38 %38 2 2 2 2 
                                f32_4 %40 = OpFMul %37 %39 
                                f32_4 %41 = OpLoad %9 
                                f32_4 %42 = OpFAdd %40 %41 
                                              OpStore %9 %42 
                                f32_4 %43 = OpLoad %9 
                       Uniform f32_4* %45 = OpAccessChain %20 %22 %44 
                                f32_4 %46 = OpLoad %45 
                                f32_4 %47 = OpFAdd %43 %46 
                                              OpStore %9 %47 
                                f32_4 %49 = OpLoad %9 
                                f32_4 %50 = OpVectorShuffle %49 %49 1 1 1 1 
                       Uniform f32_4* %51 = OpAccessChain %20 %23 %23 
                                f32_4 %52 = OpLoad %51 
                                f32_4 %53 = OpFMul %50 %52 
                                              OpStore %48 %53 
                       Uniform f32_4* %54 = OpAccessChain %20 %23 %22 
                                f32_4 %55 = OpLoad %54 
                                f32_4 %56 = OpLoad %9 
                                f32_4 %57 = OpVectorShuffle %56 %56 0 0 0 0 
                                f32_4 %58 = OpFMul %55 %57 
                                f32_4 %59 = OpLoad %48 
                                f32_4 %60 = OpFAdd %58 %59 
                                              OpStore %48 %60 
                       Uniform f32_4* %61 = OpAccessChain %20 %23 %35 
                                f32_4 %62 = OpLoad %61 
                                f32_4 %63 = OpLoad %9 
                                f32_4 %64 = OpVectorShuffle %63 %63 2 2 2 2 
                                f32_4 %65 = OpFMul %62 %64 
                                f32_4 %66 = OpLoad %48 
                                f32_4 %67 = OpFAdd %65 %66 
                                              OpStore %48 %67 
                       Uniform f32_4* %73 = OpAccessChain %20 %23 %44 
                                f32_4 %74 = OpLoad %73 
                                f32_4 %75 = OpLoad %9 
                                f32_4 %76 = OpVectorShuffle %75 %75 3 3 3 3 
                                f32_4 %77 = OpFMul %74 %76 
                                f32_4 %78 = OpLoad %48 
                                f32_4 %79 = OpFAdd %77 %78 
                        Output f32_4* %81 = OpAccessChain %72 %22 
                                              OpStore %81 %79 
                                f32_2 %87 = OpLoad %86 
                                              OpStore vs_TEXCOORD0 %87 
                          Output f32* %89 = OpAccessChain %72 %22 %68 
                                  f32 %90 = OpLoad %89 
                                  f32 %91 = OpFNegate %90 
                          Output f32* %92 = OpAccessChain %72 %22 %68 
                                              OpStore %92 %91 
                                              OpReturn
                                              OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 92
; Schema: 0
                                             OpCapability Shader 
                                      %1 = OpExtInstImport "GLSL.std.450" 
                                             OpMemoryModel Logical GLSL450 
                                             OpEntryPoint Fragment %4 "main" %12 %87 
                                             OpExecutionMode %4 OriginUpperLeft 
                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                             OpDecorate vs_TEXCOORD0 Location 12 
                                             OpMemberDecorate %14 0 Offset 14 
                                             OpDecorate %14 Block 
                                             OpDecorate %16 DescriptorSet 16 
                                             OpDecorate %16 Binding 16 
                                             OpDecorate %33 DescriptorSet 33 
                                             OpDecorate %33 Binding 33 
                                             OpDecorate %37 DescriptorSet 37 
                                             OpDecorate %37 Binding 37 
                                             OpDecorate %45 DescriptorSet 45 
                                             OpDecorate %45 Binding 45 
                                             OpDecorate %47 DescriptorSet 47 
                                             OpDecorate %47 Binding 47 
                                             OpDecorate %56 DescriptorSet 56 
                                             OpDecorate %56 Binding 56 
                                             OpDecorate %58 DescriptorSet 58 
                                             OpDecorate %58 Binding 58 
                                             OpDecorate %67 DescriptorSet 67 
                                             OpDecorate %67 Binding 67 
                                             OpDecorate %69 DescriptorSet 69 
                                             OpDecorate %69 Binding 69 
                                             OpDecorate %75 DescriptorSet 75 
                                             OpDecorate %75 Binding 75 
                                             OpDecorate %77 DescriptorSet 77 
                                             OpDecorate %77 Binding 77 
                                             OpDecorate %87 Location 87 
                                      %2 = OpTypeVoid 
                                      %3 = OpTypeFunction %2 
                                      %6 = OpTypeFloat 32 
                                      %7 = OpTypeVector %6 4 
                                      %8 = OpTypePointer Private %7 
                       Private f32_4* %9 = OpVariable Private 
                                     %10 = OpTypeVector %6 2 
                                     %11 = OpTypePointer Input %10 
               Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                     %14 = OpTypeStruct %7 
                                     %15 = OpTypePointer Uniform %14 
            Uniform struct {f32_4;}* %16 = OpVariable Uniform 
                                     %17 = OpTypeInt 32 1 
                                 i32 %18 = OpConstant 0 
                                     %19 = OpTypePointer Uniform %7 
                      Private f32_4* %30 = OpVariable Private 
                                     %31 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                     %32 = OpTypePointer UniformConstant %31 
UniformConstant read_only Texture2D* %33 = OpVariable UniformConstant 
                                     %35 = OpTypeSampler 
                                     %36 = OpTypePointer UniformConstant %35 
            UniformConstant sampler* %37 = OpVariable UniformConstant 
                                     %39 = OpTypeSampledImage %31 
                      Private f32_4* %44 = OpVariable Private 
UniformConstant read_only Texture2D* %45 = OpVariable UniformConstant 
            UniformConstant sampler* %47 = OpVariable UniformConstant 
UniformConstant read_only Texture2D* %56 = OpVariable UniformConstant 
            UniformConstant sampler* %58 = OpVariable UniformConstant 
UniformConstant read_only Texture2D* %67 = OpVariable UniformConstant 
            UniformConstant sampler* %69 = OpVariable UniformConstant 
UniformConstant read_only Texture2D* %75 = OpVariable UniformConstant 
            UniformConstant sampler* %77 = OpVariable UniformConstant 
                                     %86 = OpTypePointer Output %7 
                       Output f32_4* %87 = OpVariable Output 
                                 void %4 = OpFunction None %3 
                                      %5 = OpLabel 
                               f32_2 %13 = OpLoad vs_TEXCOORD0 
                      Uniform f32_4* %20 = OpAccessChain %16 %18 
                               f32_4 %21 = OpLoad %20 
                               f32_2 %22 = OpVectorShuffle %21 %21 0 1 
                               f32_2 %23 = OpFMul %13 %22 
                      Uniform f32_4* %24 = OpAccessChain %16 %18 
                               f32_4 %25 = OpLoad %24 
                               f32_2 %26 = OpVectorShuffle %25 %25 2 3 
                               f32_2 %27 = OpFAdd %23 %26 
                               f32_4 %28 = OpLoad %9 
                               f32_4 %29 = OpVectorShuffle %28 %27 4 5 2 3 
                                             OpStore %9 %29 
                 read_only Texture2D %34 = OpLoad %33 
                             sampler %38 = OpLoad %37 
          read_only Texture2DSampled %40 = OpSampledImage %34 %38 
                               f32_4 %41 = OpLoad %9 
                               f32_2 %42 = OpVectorShuffle %41 %41 0 1 
                               f32_4 %43 = OpImageSampleImplicitLod %40 %42 
                                             OpStore %30 %43 
                 read_only Texture2D %46 = OpLoad %45 
                             sampler %48 = OpLoad %47 
          read_only Texture2DSampled %49 = OpSampledImage %46 %48 
                               f32_4 %50 = OpLoad %9 
                               f32_2 %51 = OpVectorShuffle %50 %50 0 1 
                               f32_4 %52 = OpImageSampleImplicitLod %49 %51 
                                             OpStore %44 %52 
                               f32_4 %53 = OpLoad %30 
                               f32_4 %54 = OpLoad %44 
                               f32_4 %55 = OpExtInst %1 37 %53 %54 
                                             OpStore %30 %55 
                 read_only Texture2D %57 = OpLoad %56 
                             sampler %59 = OpLoad %58 
          read_only Texture2DSampled %60 = OpSampledImage %57 %59 
                               f32_4 %61 = OpLoad %9 
                               f32_2 %62 = OpVectorShuffle %61 %61 0 1 
                               f32_4 %63 = OpImageSampleImplicitLod %60 %62 
                                             OpStore %44 %63 
                               f32_4 %64 = OpLoad %30 
                               f32_4 %65 = OpLoad %44 
                               f32_4 %66 = OpExtInst %1 37 %64 %65 
                                             OpStore %30 %66 
                 read_only Texture2D %68 = OpLoad %67 
                             sampler %70 = OpLoad %69 
          read_only Texture2DSampled %71 = OpSampledImage %68 %70 
                               f32_4 %72 = OpLoad %9 
                               f32_2 %73 = OpVectorShuffle %72 %72 0 1 
                               f32_4 %74 = OpImageSampleImplicitLod %71 %73 
                                             OpStore %44 %74 
                 read_only Texture2D %76 = OpLoad %75 
                             sampler %78 = OpLoad %77 
          read_only Texture2DSampled %79 = OpSampledImage %76 %78 
                               f32_4 %80 = OpLoad %9 
                               f32_2 %81 = OpVectorShuffle %80 %80 0 1 
                               f32_4 %82 = OpImageSampleImplicitLod %79 %81 
                                             OpStore %9 %82 
                               f32_4 %83 = OpLoad %30 
                               f32_4 %84 = OpLoad %44 
                               f32_4 %85 = OpExtInst %1 37 %83 %84 
                                             OpStore %30 %85 
                               f32_4 %88 = OpLoad %9 
                               f32_4 %89 = OpLoad %30 
                               f32_4 %90 = OpExtInst %1 37 %88 %89 
                                             OpStore %87 %90 
                                             OpReturn
                                             OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "AB_HIGH_PRECISION" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "AB_HIGH_PRECISION" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in  vec4 in_POSITION0;
in  vec2 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _MainTex_ST;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
UNITY_LOCATION(1) uniform  sampler2D _AnamorphicRTS0;
UNITY_LOCATION(2) uniform  sampler2D _AnamorphicRTS1;
UNITY_LOCATION(3) uniform  sampler2D _AnamorphicRTS2;
UNITY_LOCATION(4) uniform  sampler2D _AnamorphicRTS3;
in  vec2 vs_TEXCOORD0;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1 = texture(_MainTex, u_xlat0.xy);
    u_xlat2 = texture(_AnamorphicRTS0, u_xlat0.xy);
    u_xlat1 = min(u_xlat1, u_xlat2);
    u_xlat2 = texture(_AnamorphicRTS1, u_xlat0.xy);
    u_xlat1 = min(u_xlat1, u_xlat2);
    u_xlat2 = texture(_AnamorphicRTS2, u_xlat0.xy);
    u_xlat0 = texture(_AnamorphicRTS3, u_xlat0.xy);
    u_xlat1 = min(u_xlat1, u_xlat2);
    SV_Target0 = min(u_xlat0, u_xlat1);
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "AB_HIGH_PRECISION" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 94
; Schema: 0
                                              OpCapability Shader 
                                       %1 = OpExtInstImport "GLSL.std.450" 
                                              OpMemoryModel Logical GLSL450 
                                              OpEntryPoint Vertex %4 "main" %11 %72 %84 %86 
                                              OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                              OpDecorate %11 Location 11 
                                              OpDecorate %16 ArrayStride 16 
                                              OpDecorate %17 ArrayStride 17 
                                              OpMemberDecorate %18 0 Offset 18 
                                              OpMemberDecorate %18 1 Offset 18 
                                              OpDecorate %18 Block 
                                              OpDecorate %20 DescriptorSet 20 
                                              OpDecorate %20 Binding 20 
                                              OpMemberDecorate %70 0 BuiltIn 70 
                                              OpMemberDecorate %70 1 BuiltIn 70 
                                              OpMemberDecorate %70 2 BuiltIn 70 
                                              OpDecorate %70 Block 
                                              OpDecorate vs_TEXCOORD0 Location 84 
                                              OpDecorate %86 Location 86 
                                       %2 = OpTypeVoid 
                                       %3 = OpTypeFunction %2 
                                       %6 = OpTypeFloat 32 
                                       %7 = OpTypeVector %6 4 
                                       %8 = OpTypePointer Private %7 
                        Private f32_4* %9 = OpVariable Private 
                                      %10 = OpTypePointer Input %7 
                         Input f32_4* %11 = OpVariable Input 
                                      %14 = OpTypeInt 32 0 
                                  u32 %15 = OpConstant 4 
                                      %16 = OpTypeArray %7 %15 
                                      %17 = OpTypeArray %7 %15 
                                      %18 = OpTypeStruct %16 %17 
                                      %19 = OpTypePointer Uniform %18 
Uniform struct {f32_4[4]; f32_4[4];}* %20 = OpVariable Uniform 
                                      %21 = OpTypeInt 32 1 
                                  i32 %22 = OpConstant 0 
                                  i32 %23 = OpConstant 1 
                                      %24 = OpTypePointer Uniform %7 
                                  i32 %35 = OpConstant 2 
                                  i32 %44 = OpConstant 3 
                       Private f32_4* %48 = OpVariable Private 
                                  u32 %68 = OpConstant 1 
                                      %69 = OpTypeArray %6 %68 
                                      %70 = OpTypeStruct %7 %6 %69 
                                      %71 = OpTypePointer Output %70 
 Output struct {f32_4; f32; f32[1];}* %72 = OpVariable Output 
                                      %80 = OpTypePointer Output %7 
                                      %82 = OpTypeVector %6 2 
                                      %83 = OpTypePointer Output %82 
               Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                      %85 = OpTypePointer Input %82 
                         Input f32_2* %86 = OpVariable Input 
                                      %88 = OpTypePointer Output %6 
                                  void %4 = OpFunction None %3 
                                       %5 = OpLabel 
                                f32_4 %12 = OpLoad %11 
                                f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                       Uniform f32_4* %25 = OpAccessChain %20 %22 %23 
                                f32_4 %26 = OpLoad %25 
                                f32_4 %27 = OpFMul %13 %26 
                                              OpStore %9 %27 
                       Uniform f32_4* %28 = OpAccessChain %20 %22 %22 
                                f32_4 %29 = OpLoad %28 
                                f32_4 %30 = OpLoad %11 
                                f32_4 %31 = OpVectorShuffle %30 %30 0 0 0 0 
                                f32_4 %32 = OpFMul %29 %31 
                                f32_4 %33 = OpLoad %9 
                                f32_4 %34 = OpFAdd %32 %33 
                                              OpStore %9 %34 
                       Uniform f32_4* %36 = OpAccessChain %20 %22 %35 
                                f32_4 %37 = OpLoad %36 
                                f32_4 %38 = OpLoad %11 
                                f32_4 %39 = OpVectorShuffle %38 %38 2 2 2 2 
                                f32_4 %40 = OpFMul %37 %39 
                                f32_4 %41 = OpLoad %9 
                                f32_4 %42 = OpFAdd %40 %41 
                                              OpStore %9 %42 
                                f32_4 %43 = OpLoad %9 
                       Uniform f32_4* %45 = OpAccessChain %20 %22 %44 
                                f32_4 %46 = OpLoad %45 
                                f32_4 %47 = OpFAdd %43 %46 
                                              OpStore %9 %47 
                                f32_4 %49 = OpLoad %9 
                                f32_4 %50 = OpVectorShuffle %49 %49 1 1 1 1 
                       Uniform f32_4* %51 = OpAccessChain %20 %23 %23 
                                f32_4 %52 = OpLoad %51 
                                f32_4 %53 = OpFMul %50 %52 
                                              OpStore %48 %53 
                       Uniform f32_4* %54 = OpAccessChain %20 %23 %22 
                                f32_4 %55 = OpLoad %54 
                                f32_4 %56 = OpLoad %9 
                                f32_4 %57 = OpVectorShuffle %56 %56 0 0 0 0 
                                f32_4 %58 = OpFMul %55 %57 
                                f32_4 %59 = OpLoad %48 
                                f32_4 %60 = OpFAdd %58 %59 
                                              OpStore %48 %60 
                       Uniform f32_4* %61 = OpAccessChain %20 %23 %35 
                                f32_4 %62 = OpLoad %61 
                                f32_4 %63 = OpLoad %9 
                                f32_4 %64 = OpVectorShuffle %63 %63 2 2 2 2 
                                f32_4 %65 = OpFMul %62 %64 
                                f32_4 %66 = OpLoad %48 
                                f32_4 %67 = OpFAdd %65 %66 
                                              OpStore %48 %67 
                       Uniform f32_4* %73 = OpAccessChain %20 %23 %44 
                                f32_4 %74 = OpLoad %73 
                                f32_4 %75 = OpLoad %9 
                                f32_4 %76 = OpVectorShuffle %75 %75 3 3 3 3 
                                f32_4 %77 = OpFMul %74 %76 
                                f32_4 %78 = OpLoad %48 
                                f32_4 %79 = OpFAdd %77 %78 
                        Output f32_4* %81 = OpAccessChain %72 %22 
                                              OpStore %81 %79 
                                f32_2 %87 = OpLoad %86 
                                              OpStore vs_TEXCOORD0 %87 
                          Output f32* %89 = OpAccessChain %72 %22 %68 
                                  f32 %90 = OpLoad %89 
                                  f32 %91 = OpFNegate %90 
                          Output f32* %92 = OpAccessChain %72 %22 %68 
                                              OpStore %92 %91 
                                              OpReturn
                                              OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 92
; Schema: 0
                                             OpCapability Shader 
                                      %1 = OpExtInstImport "GLSL.std.450" 
                                             OpMemoryModel Logical GLSL450 
                                             OpEntryPoint Fragment %4 "main" %12 %87 
                                             OpExecutionMode %4 OriginUpperLeft 
                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                             OpDecorate vs_TEXCOORD0 Location 12 
                                             OpMemberDecorate %14 0 Offset 14 
                                             OpDecorate %14 Block 
                                             OpDecorate %16 DescriptorSet 16 
                                             OpDecorate %16 Binding 16 
                                             OpDecorate %33 DescriptorSet 33 
                                             OpDecorate %33 Binding 33 
                                             OpDecorate %37 DescriptorSet 37 
                                             OpDecorate %37 Binding 37 
                                             OpDecorate %45 DescriptorSet 45 
                                             OpDecorate %45 Binding 45 
                                             OpDecorate %47 DescriptorSet 47 
                                             OpDecorate %47 Binding 47 
                                             OpDecorate %56 DescriptorSet 56 
                                             OpDecorate %56 Binding 56 
                                             OpDecorate %58 DescriptorSet 58 
                                             OpDecorate %58 Binding 58 
                                             OpDecorate %67 DescriptorSet 67 
                                             OpDecorate %67 Binding 67 
                                             OpDecorate %69 DescriptorSet 69 
                                             OpDecorate %69 Binding 69 
                                             OpDecorate %75 DescriptorSet 75 
                                             OpDecorate %75 Binding 75 
                                             OpDecorate %77 DescriptorSet 77 
                                             OpDecorate %77 Binding 77 
                                             OpDecorate %87 Location 87 
                                      %2 = OpTypeVoid 
                                      %3 = OpTypeFunction %2 
                                      %6 = OpTypeFloat 32 
                                      %7 = OpTypeVector %6 4 
                                      %8 = OpTypePointer Private %7 
                       Private f32_4* %9 = OpVariable Private 
                                     %10 = OpTypeVector %6 2 
                                     %11 = OpTypePointer Input %10 
               Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                     %14 = OpTypeStruct %7 
                                     %15 = OpTypePointer Uniform %14 
            Uniform struct {f32_4;}* %16 = OpVariable Uniform 
                                     %17 = OpTypeInt 32 1 
                                 i32 %18 = OpConstant 0 
                                     %19 = OpTypePointer Uniform %7 
                      Private f32_4* %30 = OpVariable Private 
                                     %31 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                     %32 = OpTypePointer UniformConstant %31 
UniformConstant read_only Texture2D* %33 = OpVariable UniformConstant 
                                     %35 = OpTypeSampler 
                                     %36 = OpTypePointer UniformConstant %35 
            UniformConstant sampler* %37 = OpVariable UniformConstant 
                                     %39 = OpTypeSampledImage %31 
                      Private f32_4* %44 = OpVariable Private 
UniformConstant read_only Texture2D* %45 = OpVariable UniformConstant 
            UniformConstant sampler* %47 = OpVariable UniformConstant 
UniformConstant read_only Texture2D* %56 = OpVariable UniformConstant 
            UniformConstant sampler* %58 = OpVariable UniformConstant 
UniformConstant read_only Texture2D* %67 = OpVariable UniformConstant 
            UniformConstant sampler* %69 = OpVariable UniformConstant 
UniformConstant read_only Texture2D* %75 = OpVariable UniformConstant 
            UniformConstant sampler* %77 = OpVariable UniformConstant 
                                     %86 = OpTypePointer Output %7 
                       Output f32_4* %87 = OpVariable Output 
                                 void %4 = OpFunction None %3 
                                      %5 = OpLabel 
                               f32_2 %13 = OpLoad vs_TEXCOORD0 
                      Uniform f32_4* %20 = OpAccessChain %16 %18 
                               f32_4 %21 = OpLoad %20 
                               f32_2 %22 = OpVectorShuffle %21 %21 0 1 
                               f32_2 %23 = OpFMul %13 %22 
                      Uniform f32_4* %24 = OpAccessChain %16 %18 
                               f32_4 %25 = OpLoad %24 
                               f32_2 %26 = OpVectorShuffle %25 %25 2 3 
                               f32_2 %27 = OpFAdd %23 %26 
                               f32_4 %28 = OpLoad %9 
                               f32_4 %29 = OpVectorShuffle %28 %27 4 5 2 3 
                                             OpStore %9 %29 
                 read_only Texture2D %34 = OpLoad %33 
                             sampler %38 = OpLoad %37 
          read_only Texture2DSampled %40 = OpSampledImage %34 %38 
                               f32_4 %41 = OpLoad %9 
                               f32_2 %42 = OpVectorShuffle %41 %41 0 1 
                               f32_4 %43 = OpImageSampleImplicitLod %40 %42 
                                             OpStore %30 %43 
                 read_only Texture2D %46 = OpLoad %45 
                             sampler %48 = OpLoad %47 
          read_only Texture2DSampled %49 = OpSampledImage %46 %48 
                               f32_4 %50 = OpLoad %9 
                               f32_2 %51 = OpVectorShuffle %50 %50 0 1 
                               f32_4 %52 = OpImageSampleImplicitLod %49 %51 
                                             OpStore %44 %52 
                               f32_4 %53 = OpLoad %30 
                               f32_4 %54 = OpLoad %44 
                               f32_4 %55 = OpExtInst %1 37 %53 %54 
                                             OpStore %30 %55 
                 read_only Texture2D %57 = OpLoad %56 
                             sampler %59 = OpLoad %58 
          read_only Texture2DSampled %60 = OpSampledImage %57 %59 
                               f32_4 %61 = OpLoad %9 
                               f32_2 %62 = OpVectorShuffle %61 %61 0 1 
                               f32_4 %63 = OpImageSampleImplicitLod %60 %62 
                                             OpStore %44 %63 
                               f32_4 %64 = OpLoad %30 
                               f32_4 %65 = OpLoad %44 
                               f32_4 %66 = OpExtInst %1 37 %64 %65 
                                             OpStore %30 %66 
                 read_only Texture2D %68 = OpLoad %67 
                             sampler %70 = OpLoad %69 
          read_only Texture2DSampled %71 = OpSampledImage %68 %70 
                               f32_4 %72 = OpLoad %9 
                               f32_2 %73 = OpVectorShuffle %72 %72 0 1 
                               f32_4 %74 = OpImageSampleImplicitLod %71 %73 
                                             OpStore %44 %74 
                 read_only Texture2D %76 = OpLoad %75 
                             sampler %78 = OpLoad %77 
          read_only Texture2DSampled %79 = OpSampledImage %76 %78 
                               f32_4 %80 = OpLoad %9 
                               f32_2 %81 = OpVectorShuffle %80 %80 0 1 
                               f32_4 %82 = OpImageSampleImplicitLod %79 %81 
                                             OpStore %9 %82 
                               f32_4 %83 = OpLoad %30 
                               f32_4 %84 = OpLoad %44 
                               f32_4 %85 = OpExtInst %1 37 %83 %84 
                                             OpStore %30 %85 
                               f32_4 %88 = OpLoad %9 
                               f32_4 %89 = OpLoad %30 
                               f32_4 %90 = OpExtInst %1 37 %88 %89 
                                             OpStore %87 %90 
                                             OpReturn
                                             OpFunctionEnd
"
}
}
Program "fp" {
SubProgram "d3d11 " {
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
""
}
SubProgram "vulkan " {
""
}
SubProgram "d3d11 " {
Keywords { "AB_HIGH_PRECISION" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "AB_HIGH_PRECISION" }
""
}
SubProgram "vulkan " {
Keywords { "AB_HIGH_PRECISION" }
""
}
}
}
 Pass {
  Name "frag_BokehComposition6S"
  ZTest Always
  ZWrite Off
  Cull Off
  GpuProgramID 2129582
Program "vp" {
SubProgram "d3d11 " {
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in  vec4 in_POSITION0;
in  vec2 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _MainTex_ST;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
UNITY_LOCATION(1) uniform  sampler2D _AnamorphicRTS0;
UNITY_LOCATION(2) uniform  sampler2D _AnamorphicRTS1;
UNITY_LOCATION(3) uniform  sampler2D _AnamorphicRTS2;
UNITY_LOCATION(4) uniform  sampler2D _AnamorphicRTS3;
UNITY_LOCATION(5) uniform  sampler2D _AnamorphicRTS4;
in  vec2 vs_TEXCOORD0;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1 = texture(_MainTex, u_xlat0.xy);
    u_xlat2 = texture(_AnamorphicRTS0, u_xlat0.xy);
    u_xlat1 = min(u_xlat1, u_xlat2);
    u_xlat2 = texture(_AnamorphicRTS1, u_xlat0.xy);
    u_xlat1 = min(u_xlat1, u_xlat2);
    u_xlat2 = texture(_AnamorphicRTS2, u_xlat0.xy);
    u_xlat1 = min(u_xlat1, u_xlat2);
    u_xlat2 = texture(_AnamorphicRTS3, u_xlat0.xy);
    u_xlat0 = texture(_AnamorphicRTS4, u_xlat0.xy);
    u_xlat1 = min(u_xlat1, u_xlat2);
    SV_Target0 = min(u_xlat0, u_xlat1);
    return;
}

#endif
"
}
SubProgram "vulkan " {
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 94
; Schema: 0
                                              OpCapability Shader 
                                       %1 = OpExtInstImport "GLSL.std.450" 
                                              OpMemoryModel Logical GLSL450 
                                              OpEntryPoint Vertex %4 "main" %11 %72 %84 %86 
                                              OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                              OpDecorate %11 Location 11 
                                              OpDecorate %16 ArrayStride 16 
                                              OpDecorate %17 ArrayStride 17 
                                              OpMemberDecorate %18 0 Offset 18 
                                              OpMemberDecorate %18 1 Offset 18 
                                              OpDecorate %18 Block 
                                              OpDecorate %20 DescriptorSet 20 
                                              OpDecorate %20 Binding 20 
                                              OpMemberDecorate %70 0 BuiltIn 70 
                                              OpMemberDecorate %70 1 BuiltIn 70 
                                              OpMemberDecorate %70 2 BuiltIn 70 
                                              OpDecorate %70 Block 
                                              OpDecorate vs_TEXCOORD0 Location 84 
                                              OpDecorate %86 Location 86 
                                       %2 = OpTypeVoid 
                                       %3 = OpTypeFunction %2 
                                       %6 = OpTypeFloat 32 
                                       %7 = OpTypeVector %6 4 
                                       %8 = OpTypePointer Private %7 
                        Private f32_4* %9 = OpVariable Private 
                                      %10 = OpTypePointer Input %7 
                         Input f32_4* %11 = OpVariable Input 
                                      %14 = OpTypeInt 32 0 
                                  u32 %15 = OpConstant 4 
                                      %16 = OpTypeArray %7 %15 
                                      %17 = OpTypeArray %7 %15 
                                      %18 = OpTypeStruct %16 %17 
                                      %19 = OpTypePointer Uniform %18 
Uniform struct {f32_4[4]; f32_4[4];}* %20 = OpVariable Uniform 
                                      %21 = OpTypeInt 32 1 
                                  i32 %22 = OpConstant 0 
                                  i32 %23 = OpConstant 1 
                                      %24 = OpTypePointer Uniform %7 
                                  i32 %35 = OpConstant 2 
                                  i32 %44 = OpConstant 3 
                       Private f32_4* %48 = OpVariable Private 
                                  u32 %68 = OpConstant 1 
                                      %69 = OpTypeArray %6 %68 
                                      %70 = OpTypeStruct %7 %6 %69 
                                      %71 = OpTypePointer Output %70 
 Output struct {f32_4; f32; f32[1];}* %72 = OpVariable Output 
                                      %80 = OpTypePointer Output %7 
                                      %82 = OpTypeVector %6 2 
                                      %83 = OpTypePointer Output %82 
               Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                      %85 = OpTypePointer Input %82 
                         Input f32_2* %86 = OpVariable Input 
                                      %88 = OpTypePointer Output %6 
                                  void %4 = OpFunction None %3 
                                       %5 = OpLabel 
                                f32_4 %12 = OpLoad %11 
                                f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                       Uniform f32_4* %25 = OpAccessChain %20 %22 %23 
                                f32_4 %26 = OpLoad %25 
                                f32_4 %27 = OpFMul %13 %26 
                                              OpStore %9 %27 
                       Uniform f32_4* %28 = OpAccessChain %20 %22 %22 
                                f32_4 %29 = OpLoad %28 
                                f32_4 %30 = OpLoad %11 
                                f32_4 %31 = OpVectorShuffle %30 %30 0 0 0 0 
                                f32_4 %32 = OpFMul %29 %31 
                                f32_4 %33 = OpLoad %9 
                                f32_4 %34 = OpFAdd %32 %33 
                                              OpStore %9 %34 
                       Uniform f32_4* %36 = OpAccessChain %20 %22 %35 
                                f32_4 %37 = OpLoad %36 
                                f32_4 %38 = OpLoad %11 
                                f32_4 %39 = OpVectorShuffle %38 %38 2 2 2 2 
                                f32_4 %40 = OpFMul %37 %39 
                                f32_4 %41 = OpLoad %9 
                                f32_4 %42 = OpFAdd %40 %41 
                                              OpStore %9 %42 
                                f32_4 %43 = OpLoad %9 
                       Uniform f32_4* %45 = OpAccessChain %20 %22 %44 
                                f32_4 %46 = OpLoad %45 
                                f32_4 %47 = OpFAdd %43 %46 
                                              OpStore %9 %47 
                                f32_4 %49 = OpLoad %9 
                                f32_4 %50 = OpVectorShuffle %49 %49 1 1 1 1 
                       Uniform f32_4* %51 = OpAccessChain %20 %23 %23 
                                f32_4 %52 = OpLoad %51 
                                f32_4 %53 = OpFMul %50 %52 
                                              OpStore %48 %53 
                       Uniform f32_4* %54 = OpAccessChain %20 %23 %22 
                                f32_4 %55 = OpLoad %54 
                                f32_4 %56 = OpLoad %9 
                                f32_4 %57 = OpVectorShuffle %56 %56 0 0 0 0 
                                f32_4 %58 = OpFMul %55 %57 
                                f32_4 %59 = OpLoad %48 
                                f32_4 %60 = OpFAdd %58 %59 
                                              OpStore %48 %60 
                       Uniform f32_4* %61 = OpAccessChain %20 %23 %35 
                                f32_4 %62 = OpLoad %61 
                                f32_4 %63 = OpLoad %9 
                                f32_4 %64 = OpVectorShuffle %63 %63 2 2 2 2 
                                f32_4 %65 = OpFMul %62 %64 
                                f32_4 %66 = OpLoad %48 
                                f32_4 %67 = OpFAdd %65 %66 
                                              OpStore %48 %67 
                       Uniform f32_4* %73 = OpAccessChain %20 %23 %44 
                                f32_4 %74 = OpLoad %73 
                                f32_4 %75 = OpLoad %9 
                                f32_4 %76 = OpVectorShuffle %75 %75 3 3 3 3 
                                f32_4 %77 = OpFMul %74 %76 
                                f32_4 %78 = OpLoad %48 
                                f32_4 %79 = OpFAdd %77 %78 
                        Output f32_4* %81 = OpAccessChain %72 %22 
                                              OpStore %81 %79 
                                f32_2 %87 = OpLoad %86 
                                              OpStore vs_TEXCOORD0 %87 
                          Output f32* %89 = OpAccessChain %72 %22 %68 
                                  f32 %90 = OpLoad %89 
                                  f32 %91 = OpFNegate %90 
                          Output f32* %92 = OpAccessChain %72 %22 %68 
                                              OpStore %92 %91 
                                              OpReturn
                                              OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 103
; Schema: 0
                                             OpCapability Shader 
                                      %1 = OpExtInstImport "GLSL.std.450" 
                                             OpMemoryModel Logical GLSL450 
                                             OpEntryPoint Fragment %4 "main" %12 %98 
                                             OpExecutionMode %4 OriginUpperLeft 
                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                             OpDecorate vs_TEXCOORD0 Location 12 
                                             OpMemberDecorate %14 0 Offset 14 
                                             OpDecorate %14 Block 
                                             OpDecorate %16 DescriptorSet 16 
                                             OpDecorate %16 Binding 16 
                                             OpDecorate %33 DescriptorSet 33 
                                             OpDecorate %33 Binding 33 
                                             OpDecorate %37 DescriptorSet 37 
                                             OpDecorate %37 Binding 37 
                                             OpDecorate %45 DescriptorSet 45 
                                             OpDecorate %45 Binding 45 
                                             OpDecorate %47 DescriptorSet 47 
                                             OpDecorate %47 Binding 47 
                                             OpDecorate %56 DescriptorSet 56 
                                             OpDecorate %56 Binding 56 
                                             OpDecorate %58 DescriptorSet 58 
                                             OpDecorate %58 Binding 58 
                                             OpDecorate %67 DescriptorSet 67 
                                             OpDecorate %67 Binding 67 
                                             OpDecorate %69 DescriptorSet 69 
                                             OpDecorate %69 Binding 69 
                                             OpDecorate %78 DescriptorSet 78 
                                             OpDecorate %78 Binding 78 
                                             OpDecorate %80 DescriptorSet 80 
                                             OpDecorate %80 Binding 80 
                                             OpDecorate %86 DescriptorSet 86 
                                             OpDecorate %86 Binding 86 
                                             OpDecorate %88 DescriptorSet 88 
                                             OpDecorate %88 Binding 88 
                                             OpDecorate %98 Location 98 
                                      %2 = OpTypeVoid 
                                      %3 = OpTypeFunction %2 
                                      %6 = OpTypeFloat 32 
                                      %7 = OpTypeVector %6 4 
                                      %8 = OpTypePointer Private %7 
                       Private f32_4* %9 = OpVariable Private 
                                     %10 = OpTypeVector %6 2 
                                     %11 = OpTypePointer Input %10 
               Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                     %14 = OpTypeStruct %7 
                                     %15 = OpTypePointer Uniform %14 
            Uniform struct {f32_4;}* %16 = OpVariable Uniform 
                                     %17 = OpTypeInt 32 1 
                                 i32 %18 = OpConstant 0 
                                     %19 = OpTypePointer Uniform %7 
                      Private f32_4* %30 = OpVariable Private 
                                     %31 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                     %32 = OpTypePointer UniformConstant %31 
UniformConstant read_only Texture2D* %33 = OpVariable UniformConstant 
                                     %35 = OpTypeSampler 
                                     %36 = OpTypePointer UniformConstant %35 
            UniformConstant sampler* %37 = OpVariable UniformConstant 
                                     %39 = OpTypeSampledImage %31 
                      Private f32_4* %44 = OpVariable Private 
UniformConstant read_only Texture2D* %45 = OpVariable UniformConstant 
            UniformConstant sampler* %47 = OpVariable UniformConstant 
UniformConstant read_only Texture2D* %56 = OpVariable UniformConstant 
            UniformConstant sampler* %58 = OpVariable UniformConstant 
UniformConstant read_only Texture2D* %67 = OpVariable UniformConstant 
            UniformConstant sampler* %69 = OpVariable UniformConstant 
UniformConstant read_only Texture2D* %78 = OpVariable UniformConstant 
            UniformConstant sampler* %80 = OpVariable UniformConstant 
UniformConstant read_only Texture2D* %86 = OpVariable UniformConstant 
            UniformConstant sampler* %88 = OpVariable UniformConstant 
                                     %97 = OpTypePointer Output %7 
                       Output f32_4* %98 = OpVariable Output 
                                 void %4 = OpFunction None %3 
                                      %5 = OpLabel 
                               f32_2 %13 = OpLoad vs_TEXCOORD0 
                      Uniform f32_4* %20 = OpAccessChain %16 %18 
                               f32_4 %21 = OpLoad %20 
                               f32_2 %22 = OpVectorShuffle %21 %21 0 1 
                               f32_2 %23 = OpFMul %13 %22 
                      Uniform f32_4* %24 = OpAccessChain %16 %18 
                               f32_4 %25 = OpLoad %24 
                               f32_2 %26 = OpVectorShuffle %25 %25 2 3 
                               f32_2 %27 = OpFAdd %23 %26 
                               f32_4 %28 = OpLoad %9 
                               f32_4 %29 = OpVectorShuffle %28 %27 4 5 2 3 
                                             OpStore %9 %29 
                 read_only Texture2D %34 = OpLoad %33 
                             sampler %38 = OpLoad %37 
          read_only Texture2DSampled %40 = OpSampledImage %34 %38 
                               f32_4 %41 = OpLoad %9 
                               f32_2 %42 = OpVectorShuffle %41 %41 0 1 
                               f32_4 %43 = OpImageSampleImplicitLod %40 %42 
                                             OpStore %30 %43 
                 read_only Texture2D %46 = OpLoad %45 
                             sampler %48 = OpLoad %47 
          read_only Texture2DSampled %49 = OpSampledImage %46 %48 
                               f32_4 %50 = OpLoad %9 
                               f32_2 %51 = OpVectorShuffle %50 %50 0 1 
                               f32_4 %52 = OpImageSampleImplicitLod %49 %51 
                                             OpStore %44 %52 
                               f32_4 %53 = OpLoad %30 
                               f32_4 %54 = OpLoad %44 
                               f32_4 %55 = OpExtInst %1 37 %53 %54 
                                             OpStore %30 %55 
                 read_only Texture2D %57 = OpLoad %56 
                             sampler %59 = OpLoad %58 
          read_only Texture2DSampled %60 = OpSampledImage %57 %59 
                               f32_4 %61 = OpLoad %9 
                               f32_2 %62 = OpVectorShuffle %61 %61 0 1 
                               f32_4 %63 = OpImageSampleImplicitLod %60 %62 
                                             OpStore %44 %63 
                               f32_4 %64 = OpLoad %30 
                               f32_4 %65 = OpLoad %44 
                               f32_4 %66 = OpExtInst %1 37 %64 %65 
                                             OpStore %30 %66 
                 read_only Texture2D %68 = OpLoad %67 
                             sampler %70 = OpLoad %69 
          read_only Texture2DSampled %71 = OpSampledImage %68 %70 
                               f32_4 %72 = OpLoad %9 
                               f32_2 %73 = OpVectorShuffle %72 %72 0 1 
                               f32_4 %74 = OpImageSampleImplicitLod %71 %73 
                                             OpStore %44 %74 
                               f32_4 %75 = OpLoad %30 
                               f32_4 %76 = OpLoad %44 
                               f32_4 %77 = OpExtInst %1 37 %75 %76 
                                             OpStore %30 %77 
                 read_only Texture2D %79 = OpLoad %78 
                             sampler %81 = OpLoad %80 
          read_only Texture2DSampled %82 = OpSampledImage %79 %81 
                               f32_4 %83 = OpLoad %9 
                               f32_2 %84 = OpVectorShuffle %83 %83 0 1 
                               f32_4 %85 = OpImageSampleImplicitLod %82 %84 
                                             OpStore %44 %85 
                 read_only Texture2D %87 = OpLoad %86 
                             sampler %89 = OpLoad %88 
          read_only Texture2DSampled %90 = OpSampledImage %87 %89 
                               f32_4 %91 = OpLoad %9 
                               f32_2 %92 = OpVectorShuffle %91 %91 0 1 
                               f32_4 %93 = OpImageSampleImplicitLod %90 %92 
                                             OpStore %9 %93 
                               f32_4 %94 = OpLoad %30 
                               f32_4 %95 = OpLoad %44 
                               f32_4 %96 = OpExtInst %1 37 %94 %95 
                                             OpStore %30 %96 
                               f32_4 %99 = OpLoad %9 
                              f32_4 %100 = OpLoad %30 
                              f32_4 %101 = OpExtInst %1 37 %99 %100 
                                             OpStore %98 %101 
                                             OpReturn
                                             OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "AB_HIGH_PRECISION" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "AB_HIGH_PRECISION" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in  vec4 in_POSITION0;
in  vec2 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _MainTex_ST;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
UNITY_LOCATION(1) uniform  sampler2D _AnamorphicRTS0;
UNITY_LOCATION(2) uniform  sampler2D _AnamorphicRTS1;
UNITY_LOCATION(3) uniform  sampler2D _AnamorphicRTS2;
UNITY_LOCATION(4) uniform  sampler2D _AnamorphicRTS3;
UNITY_LOCATION(5) uniform  sampler2D _AnamorphicRTS4;
in  vec2 vs_TEXCOORD0;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1 = texture(_MainTex, u_xlat0.xy);
    u_xlat2 = texture(_AnamorphicRTS0, u_xlat0.xy);
    u_xlat1 = min(u_xlat1, u_xlat2);
    u_xlat2 = texture(_AnamorphicRTS1, u_xlat0.xy);
    u_xlat1 = min(u_xlat1, u_xlat2);
    u_xlat2 = texture(_AnamorphicRTS2, u_xlat0.xy);
    u_xlat1 = min(u_xlat1, u_xlat2);
    u_xlat2 = texture(_AnamorphicRTS3, u_xlat0.xy);
    u_xlat0 = texture(_AnamorphicRTS4, u_xlat0.xy);
    u_xlat1 = min(u_xlat1, u_xlat2);
    SV_Target0 = min(u_xlat0, u_xlat1);
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "AB_HIGH_PRECISION" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 94
; Schema: 0
                                              OpCapability Shader 
                                       %1 = OpExtInstImport "GLSL.std.450" 
                                              OpMemoryModel Logical GLSL450 
                                              OpEntryPoint Vertex %4 "main" %11 %72 %84 %86 
                                              OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                              OpDecorate %11 Location 11 
                                              OpDecorate %16 ArrayStride 16 
                                              OpDecorate %17 ArrayStride 17 
                                              OpMemberDecorate %18 0 Offset 18 
                                              OpMemberDecorate %18 1 Offset 18 
                                              OpDecorate %18 Block 
                                              OpDecorate %20 DescriptorSet 20 
                                              OpDecorate %20 Binding 20 
                                              OpMemberDecorate %70 0 BuiltIn 70 
                                              OpMemberDecorate %70 1 BuiltIn 70 
                                              OpMemberDecorate %70 2 BuiltIn 70 
                                              OpDecorate %70 Block 
                                              OpDecorate vs_TEXCOORD0 Location 84 
                                              OpDecorate %86 Location 86 
                                       %2 = OpTypeVoid 
                                       %3 = OpTypeFunction %2 
                                       %6 = OpTypeFloat 32 
                                       %7 = OpTypeVector %6 4 
                                       %8 = OpTypePointer Private %7 
                        Private f32_4* %9 = OpVariable Private 
                                      %10 = OpTypePointer Input %7 
                         Input f32_4* %11 = OpVariable Input 
                                      %14 = OpTypeInt 32 0 
                                  u32 %15 = OpConstant 4 
                                      %16 = OpTypeArray %7 %15 
                                      %17 = OpTypeArray %7 %15 
                                      %18 = OpTypeStruct %16 %17 
                                      %19 = OpTypePointer Uniform %18 
Uniform struct {f32_4[4]; f32_4[4];}* %20 = OpVariable Uniform 
                                      %21 = OpTypeInt 32 1 
                                  i32 %22 = OpConstant 0 
                                  i32 %23 = OpConstant 1 
                                      %24 = OpTypePointer Uniform %7 
                                  i32 %35 = OpConstant 2 
                                  i32 %44 = OpConstant 3 
                       Private f32_4* %48 = OpVariable Private 
                                  u32 %68 = OpConstant 1 
                                      %69 = OpTypeArray %6 %68 
                                      %70 = OpTypeStruct %7 %6 %69 
                                      %71 = OpTypePointer Output %70 
 Output struct {f32_4; f32; f32[1];}* %72 = OpVariable Output 
                                      %80 = OpTypePointer Output %7 
                                      %82 = OpTypeVector %6 2 
                                      %83 = OpTypePointer Output %82 
               Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                      %85 = OpTypePointer Input %82 
                         Input f32_2* %86 = OpVariable Input 
                                      %88 = OpTypePointer Output %6 
                                  void %4 = OpFunction None %3 
                                       %5 = OpLabel 
                                f32_4 %12 = OpLoad %11 
                                f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                       Uniform f32_4* %25 = OpAccessChain %20 %22 %23 
                                f32_4 %26 = OpLoad %25 
                                f32_4 %27 = OpFMul %13 %26 
                                              OpStore %9 %27 
                       Uniform f32_4* %28 = OpAccessChain %20 %22 %22 
                                f32_4 %29 = OpLoad %28 
                                f32_4 %30 = OpLoad %11 
                                f32_4 %31 = OpVectorShuffle %30 %30 0 0 0 0 
                                f32_4 %32 = OpFMul %29 %31 
                                f32_4 %33 = OpLoad %9 
                                f32_4 %34 = OpFAdd %32 %33 
                                              OpStore %9 %34 
                       Uniform f32_4* %36 = OpAccessChain %20 %22 %35 
                                f32_4 %37 = OpLoad %36 
                                f32_4 %38 = OpLoad %11 
                                f32_4 %39 = OpVectorShuffle %38 %38 2 2 2 2 
                                f32_4 %40 = OpFMul %37 %39 
                                f32_4 %41 = OpLoad %9 
                                f32_4 %42 = OpFAdd %40 %41 
                                              OpStore %9 %42 
                                f32_4 %43 = OpLoad %9 
                       Uniform f32_4* %45 = OpAccessChain %20 %22 %44 
                                f32_4 %46 = OpLoad %45 
                                f32_4 %47 = OpFAdd %43 %46 
                                              OpStore %9 %47 
                                f32_4 %49 = OpLoad %9 
                                f32_4 %50 = OpVectorShuffle %49 %49 1 1 1 1 
                       Uniform f32_4* %51 = OpAccessChain %20 %23 %23 
                                f32_4 %52 = OpLoad %51 
                                f32_4 %53 = OpFMul %50 %52 
                                              OpStore %48 %53 
                       Uniform f32_4* %54 = OpAccessChain %20 %23 %22 
                                f32_4 %55 = OpLoad %54 
                                f32_4 %56 = OpLoad %9 
                                f32_4 %57 = OpVectorShuffle %56 %56 0 0 0 0 
                                f32_4 %58 = OpFMul %55 %57 
                                f32_4 %59 = OpLoad %48 
                                f32_4 %60 = OpFAdd %58 %59 
                                              OpStore %48 %60 
                       Uniform f32_4* %61 = OpAccessChain %20 %23 %35 
                                f32_4 %62 = OpLoad %61 
                                f32_4 %63 = OpLoad %9 
                                f32_4 %64 = OpVectorShuffle %63 %63 2 2 2 2 
                                f32_4 %65 = OpFMul %62 %64 
                                f32_4 %66 = OpLoad %48 
                                f32_4 %67 = OpFAdd %65 %66 
                                              OpStore %48 %67 
                       Uniform f32_4* %73 = OpAccessChain %20 %23 %44 
                                f32_4 %74 = OpLoad %73 
                                f32_4 %75 = OpLoad %9 
                                f32_4 %76 = OpVectorShuffle %75 %75 3 3 3 3 
                                f32_4 %77 = OpFMul %74 %76 
                                f32_4 %78 = OpLoad %48 
                                f32_4 %79 = OpFAdd %77 %78 
                        Output f32_4* %81 = OpAccessChain %72 %22 
                                              OpStore %81 %79 
                                f32_2 %87 = OpLoad %86 
                                              OpStore vs_TEXCOORD0 %87 
                          Output f32* %89 = OpAccessChain %72 %22 %68 
                                  f32 %90 = OpLoad %89 
                                  f32 %91 = OpFNegate %90 
                          Output f32* %92 = OpAccessChain %72 %22 %68 
                                              OpStore %92 %91 
                                              OpReturn
                                              OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 103
; Schema: 0
                                             OpCapability Shader 
                                      %1 = OpExtInstImport "GLSL.std.450" 
                                             OpMemoryModel Logical GLSL450 
                                             OpEntryPoint Fragment %4 "main" %12 %98 
                                             OpExecutionMode %4 OriginUpperLeft 
                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                             OpDecorate vs_TEXCOORD0 Location 12 
                                             OpMemberDecorate %14 0 Offset 14 
                                             OpDecorate %14 Block 
                                             OpDecorate %16 DescriptorSet 16 
                                             OpDecorate %16 Binding 16 
                                             OpDecorate %33 DescriptorSet 33 
                                             OpDecorate %33 Binding 33 
                                             OpDecorate %37 DescriptorSet 37 
                                             OpDecorate %37 Binding 37 
                                             OpDecorate %45 DescriptorSet 45 
                                             OpDecorate %45 Binding 45 
                                             OpDecorate %47 DescriptorSet 47 
                                             OpDecorate %47 Binding 47 
                                             OpDecorate %56 DescriptorSet 56 
                                             OpDecorate %56 Binding 56 
                                             OpDecorate %58 DescriptorSet 58 
                                             OpDecorate %58 Binding 58 
                                             OpDecorate %67 DescriptorSet 67 
                                             OpDecorate %67 Binding 67 
                                             OpDecorate %69 DescriptorSet 69 
                                             OpDecorate %69 Binding 69 
                                             OpDecorate %78 DescriptorSet 78 
                                             OpDecorate %78 Binding 78 
                                             OpDecorate %80 DescriptorSet 80 
                                             OpDecorate %80 Binding 80 
                                             OpDecorate %86 DescriptorSet 86 
                                             OpDecorate %86 Binding 86 
                                             OpDecorate %88 DescriptorSet 88 
                                             OpDecorate %88 Binding 88 
                                             OpDecorate %98 Location 98 
                                      %2 = OpTypeVoid 
                                      %3 = OpTypeFunction %2 
                                      %6 = OpTypeFloat 32 
                                      %7 = OpTypeVector %6 4 
                                      %8 = OpTypePointer Private %7 
                       Private f32_4* %9 = OpVariable Private 
                                     %10 = OpTypeVector %6 2 
                                     %11 = OpTypePointer Input %10 
               Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                     %14 = OpTypeStruct %7 
                                     %15 = OpTypePointer Uniform %14 
            Uniform struct {f32_4;}* %16 = OpVariable Uniform 
                                     %17 = OpTypeInt 32 1 
                                 i32 %18 = OpConstant 0 
                                     %19 = OpTypePointer Uniform %7 
                      Private f32_4* %30 = OpVariable Private 
                                     %31 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                     %32 = OpTypePointer UniformConstant %31 
UniformConstant read_only Texture2D* %33 = OpVariable UniformConstant 
                                     %35 = OpTypeSampler 
                                     %36 = OpTypePointer UniformConstant %35 
            UniformConstant sampler* %37 = OpVariable UniformConstant 
                                     %39 = OpTypeSampledImage %31 
                      Private f32_4* %44 = OpVariable Private 
UniformConstant read_only Texture2D* %45 = OpVariable UniformConstant 
            UniformConstant sampler* %47 = OpVariable UniformConstant 
UniformConstant read_only Texture2D* %56 = OpVariable UniformConstant 
            UniformConstant sampler* %58 = OpVariable UniformConstant 
UniformConstant read_only Texture2D* %67 = OpVariable UniformConstant 
            UniformConstant sampler* %69 = OpVariable UniformConstant 
UniformConstant read_only Texture2D* %78 = OpVariable UniformConstant 
            UniformConstant sampler* %80 = OpVariable UniformConstant 
UniformConstant read_only Texture2D* %86 = OpVariable UniformConstant 
            UniformConstant sampler* %88 = OpVariable UniformConstant 
                                     %97 = OpTypePointer Output %7 
                       Output f32_4* %98 = OpVariable Output 
                                 void %4 = OpFunction None %3 
                                      %5 = OpLabel 
                               f32_2 %13 = OpLoad vs_TEXCOORD0 
                      Uniform f32_4* %20 = OpAccessChain %16 %18 
                               f32_4 %21 = OpLoad %20 
                               f32_2 %22 = OpVectorShuffle %21 %21 0 1 
                               f32_2 %23 = OpFMul %13 %22 
                      Uniform f32_4* %24 = OpAccessChain %16 %18 
                               f32_4 %25 = OpLoad %24 
                               f32_2 %26 = OpVectorShuffle %25 %25 2 3 
                               f32_2 %27 = OpFAdd %23 %26 
                               f32_4 %28 = OpLoad %9 
                               f32_4 %29 = OpVectorShuffle %28 %27 4 5 2 3 
                                             OpStore %9 %29 
                 read_only Texture2D %34 = OpLoad %33 
                             sampler %38 = OpLoad %37 
          read_only Texture2DSampled %40 = OpSampledImage %34 %38 
                               f32_4 %41 = OpLoad %9 
                               f32_2 %42 = OpVectorShuffle %41 %41 0 1 
                               f32_4 %43 = OpImageSampleImplicitLod %40 %42 
                                             OpStore %30 %43 
                 read_only Texture2D %46 = OpLoad %45 
                             sampler %48 = OpLoad %47 
          read_only Texture2DSampled %49 = OpSampledImage %46 %48 
                               f32_4 %50 = OpLoad %9 
                               f32_2 %51 = OpVectorShuffle %50 %50 0 1 
                               f32_4 %52 = OpImageSampleImplicitLod %49 %51 
                                             OpStore %44 %52 
                               f32_4 %53 = OpLoad %30 
                               f32_4 %54 = OpLoad %44 
                               f32_4 %55 = OpExtInst %1 37 %53 %54 
                                             OpStore %30 %55 
                 read_only Texture2D %57 = OpLoad %56 
                             sampler %59 = OpLoad %58 
          read_only Texture2DSampled %60 = OpSampledImage %57 %59 
                               f32_4 %61 = OpLoad %9 
                               f32_2 %62 = OpVectorShuffle %61 %61 0 1 
                               f32_4 %63 = OpImageSampleImplicitLod %60 %62 
                                             OpStore %44 %63 
                               f32_4 %64 = OpLoad %30 
                               f32_4 %65 = OpLoad %44 
                               f32_4 %66 = OpExtInst %1 37 %64 %65 
                                             OpStore %30 %66 
                 read_only Texture2D %68 = OpLoad %67 
                             sampler %70 = OpLoad %69 
          read_only Texture2DSampled %71 = OpSampledImage %68 %70 
                               f32_4 %72 = OpLoad %9 
                               f32_2 %73 = OpVectorShuffle %72 %72 0 1 
                               f32_4 %74 = OpImageSampleImplicitLod %71 %73 
                                             OpStore %44 %74 
                               f32_4 %75 = OpLoad %30 
                               f32_4 %76 = OpLoad %44 
                               f32_4 %77 = OpExtInst %1 37 %75 %76 
                                             OpStore %30 %77 
                 read_only Texture2D %79 = OpLoad %78 
                             sampler %81 = OpLoad %80 
          read_only Texture2DSampled %82 = OpSampledImage %79 %81 
                               f32_4 %83 = OpLoad %9 
                               f32_2 %84 = OpVectorShuffle %83 %83 0 1 
                               f32_4 %85 = OpImageSampleImplicitLod %82 %84 
                                             OpStore %44 %85 
                 read_only Texture2D %87 = OpLoad %86 
                             sampler %89 = OpLoad %88 
          read_only Texture2DSampled %90 = OpSampledImage %87 %89 
                               f32_4 %91 = OpLoad %9 
                               f32_2 %92 = OpVectorShuffle %91 %91 0 1 
                               f32_4 %93 = OpImageSampleImplicitLod %90 %92 
                                             OpStore %9 %93 
                               f32_4 %94 = OpLoad %30 
                               f32_4 %95 = OpLoad %44 
                               f32_4 %96 = OpExtInst %1 37 %94 %95 
                                             OpStore %30 %96 
                               f32_4 %99 = OpLoad %9 
                              f32_4 %100 = OpLoad %30 
                              f32_4 %101 = OpExtInst %1 37 %99 %100 
                                             OpStore %98 %101 
                                             OpReturn
                                             OpFunctionEnd
"
}
}
Program "fp" {
SubProgram "d3d11 " {
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
""
}
SubProgram "vulkan " {
""
}
SubProgram "d3d11 " {
Keywords { "AB_HIGH_PRECISION" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "AB_HIGH_PRECISION" }
""
}
SubProgram "vulkan " {
Keywords { "AB_HIGH_PRECISION" }
""
}
}
}
 Pass {
  Name "frag_decode"
  ZTest Always
  ZWrite Off
  Cull Off
  GpuProgramID 2190352
Program "vp" {
SubProgram "d3d11 " {
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in  vec4 in_POSITION0;
in  vec2 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _BloomRange;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
in  vec2 vs_TEXCOORD0;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
void main()
{
    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat0.xyz = u_xlat0.xyz * _BloomRange.xxx;
    SV_Target0.xyz = u_xlat0.www * u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 94
; Schema: 0
                                              OpCapability Shader 
                                       %1 = OpExtInstImport "GLSL.std.450" 
                                              OpMemoryModel Logical GLSL450 
                                              OpEntryPoint Vertex %4 "main" %11 %72 %84 %86 
                                              OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                              OpDecorate %11 Location 11 
                                              OpDecorate %16 ArrayStride 16 
                                              OpDecorate %17 ArrayStride 17 
                                              OpMemberDecorate %18 0 Offset 18 
                                              OpMemberDecorate %18 1 Offset 18 
                                              OpDecorate %18 Block 
                                              OpDecorate %20 DescriptorSet 20 
                                              OpDecorate %20 Binding 20 
                                              OpMemberDecorate %70 0 BuiltIn 70 
                                              OpMemberDecorate %70 1 BuiltIn 70 
                                              OpMemberDecorate %70 2 BuiltIn 70 
                                              OpDecorate %70 Block 
                                              OpDecorate vs_TEXCOORD0 Location 84 
                                              OpDecorate %86 Location 86 
                                       %2 = OpTypeVoid 
                                       %3 = OpTypeFunction %2 
                                       %6 = OpTypeFloat 32 
                                       %7 = OpTypeVector %6 4 
                                       %8 = OpTypePointer Private %7 
                        Private f32_4* %9 = OpVariable Private 
                                      %10 = OpTypePointer Input %7 
                         Input f32_4* %11 = OpVariable Input 
                                      %14 = OpTypeInt 32 0 
                                  u32 %15 = OpConstant 4 
                                      %16 = OpTypeArray %7 %15 
                                      %17 = OpTypeArray %7 %15 
                                      %18 = OpTypeStruct %16 %17 
                                      %19 = OpTypePointer Uniform %18 
Uniform struct {f32_4[4]; f32_4[4];}* %20 = OpVariable Uniform 
                                      %21 = OpTypeInt 32 1 
                                  i32 %22 = OpConstant 0 
                                  i32 %23 = OpConstant 1 
                                      %24 = OpTypePointer Uniform %7 
                                  i32 %35 = OpConstant 2 
                                  i32 %44 = OpConstant 3 
                       Private f32_4* %48 = OpVariable Private 
                                  u32 %68 = OpConstant 1 
                                      %69 = OpTypeArray %6 %68 
                                      %70 = OpTypeStruct %7 %6 %69 
                                      %71 = OpTypePointer Output %70 
 Output struct {f32_4; f32; f32[1];}* %72 = OpVariable Output 
                                      %80 = OpTypePointer Output %7 
                                      %82 = OpTypeVector %6 2 
                                      %83 = OpTypePointer Output %82 
               Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                      %85 = OpTypePointer Input %82 
                         Input f32_2* %86 = OpVariable Input 
                                      %88 = OpTypePointer Output %6 
                                  void %4 = OpFunction None %3 
                                       %5 = OpLabel 
                                f32_4 %12 = OpLoad %11 
                                f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                       Uniform f32_4* %25 = OpAccessChain %20 %22 %23 
                                f32_4 %26 = OpLoad %25 
                                f32_4 %27 = OpFMul %13 %26 
                                              OpStore %9 %27 
                       Uniform f32_4* %28 = OpAccessChain %20 %22 %22 
                                f32_4 %29 = OpLoad %28 
                                f32_4 %30 = OpLoad %11 
                                f32_4 %31 = OpVectorShuffle %30 %30 0 0 0 0 
                                f32_4 %32 = OpFMul %29 %31 
                                f32_4 %33 = OpLoad %9 
                                f32_4 %34 = OpFAdd %32 %33 
                                              OpStore %9 %34 
                       Uniform f32_4* %36 = OpAccessChain %20 %22 %35 
                                f32_4 %37 = OpLoad %36 
                                f32_4 %38 = OpLoad %11 
                                f32_4 %39 = OpVectorShuffle %38 %38 2 2 2 2 
                                f32_4 %40 = OpFMul %37 %39 
                                f32_4 %41 = OpLoad %9 
                                f32_4 %42 = OpFAdd %40 %41 
                                              OpStore %9 %42 
                                f32_4 %43 = OpLoad %9 
                       Uniform f32_4* %45 = OpAccessChain %20 %22 %44 
                                f32_4 %46 = OpLoad %45 
                                f32_4 %47 = OpFAdd %43 %46 
                                              OpStore %9 %47 
                                f32_4 %49 = OpLoad %9 
                                f32_4 %50 = OpVectorShuffle %49 %49 1 1 1 1 
                       Uniform f32_4* %51 = OpAccessChain %20 %23 %23 
                                f32_4 %52 = OpLoad %51 
                                f32_4 %53 = OpFMul %50 %52 
                                              OpStore %48 %53 
                       Uniform f32_4* %54 = OpAccessChain %20 %23 %22 
                                f32_4 %55 = OpLoad %54 
                                f32_4 %56 = OpLoad %9 
                                f32_4 %57 = OpVectorShuffle %56 %56 0 0 0 0 
                                f32_4 %58 = OpFMul %55 %57 
                                f32_4 %59 = OpLoad %48 
                                f32_4 %60 = OpFAdd %58 %59 
                                              OpStore %48 %60 
                       Uniform f32_4* %61 = OpAccessChain %20 %23 %35 
                                f32_4 %62 = OpLoad %61 
                                f32_4 %63 = OpLoad %9 
                                f32_4 %64 = OpVectorShuffle %63 %63 2 2 2 2 
                                f32_4 %65 = OpFMul %62 %64 
                                f32_4 %66 = OpLoad %48 
                                f32_4 %67 = OpFAdd %65 %66 
                                              OpStore %48 %67 
                       Uniform f32_4* %73 = OpAccessChain %20 %23 %44 
                                f32_4 %74 = OpLoad %73 
                                f32_4 %75 = OpLoad %9 
                                f32_4 %76 = OpVectorShuffle %75 %75 3 3 3 3 
                                f32_4 %77 = OpFMul %74 %76 
                                f32_4 %78 = OpLoad %48 
                                f32_4 %79 = OpFAdd %77 %78 
                        Output f32_4* %81 = OpAccessChain %72 %22 
                                              OpStore %81 %79 
                                f32_2 %87 = OpLoad %86 
                                              OpStore vs_TEXCOORD0 %87 
                          Output f32* %89 = OpAccessChain %72 %22 %68 
                                  f32 %90 = OpLoad %89 
                                  f32 %91 = OpFNegate %90 
                          Output f32* %92 = OpAccessChain %72 %22 %68 
                                              OpStore %92 %91 
                                              OpReturn
                                              OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 55
; Schema: 0
                                             OpCapability Shader 
                                      %1 = OpExtInstImport "GLSL.std.450" 
                                             OpMemoryModel Logical GLSL450 
                                             OpEntryPoint Fragment %4 "main" %22 %41 
                                             OpExecutionMode %4 OriginUpperLeft 
                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                             OpDecorate %12 DescriptorSet 12 
                                             OpDecorate %12 Binding 12 
                                             OpDecorate %16 DescriptorSet 16 
                                             OpDecorate %16 Binding 16 
                                             OpDecorate vs_TEXCOORD0 Location 22 
                                             OpMemberDecorate %28 0 Offset 28 
                                             OpDecorate %28 Block 
                                             OpDecorate %30 DescriptorSet 30 
                                             OpDecorate %30 Binding 30 
                                             OpDecorate %41 Location 41 
                                      %2 = OpTypeVoid 
                                      %3 = OpTypeFunction %2 
                                      %6 = OpTypeFloat 32 
                                      %7 = OpTypeVector %6 4 
                                      %8 = OpTypePointer Private %7 
                       Private f32_4* %9 = OpVariable Private 
                                     %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                     %11 = OpTypePointer UniformConstant %10 
UniformConstant read_only Texture2D* %12 = OpVariable UniformConstant 
                                     %14 = OpTypeSampler 
                                     %15 = OpTypePointer UniformConstant %14 
            UniformConstant sampler* %16 = OpVariable UniformConstant 
                                     %18 = OpTypeSampledImage %10 
                                     %20 = OpTypeVector %6 2 
                                     %21 = OpTypePointer Input %20 
               Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                     %25 = OpTypeVector %6 3 
                                     %28 = OpTypeStruct %7 
                                     %29 = OpTypePointer Uniform %28 
            Uniform struct {f32_4;}* %30 = OpVariable Uniform 
                                     %31 = OpTypeInt 32 1 
                                 i32 %32 = OpConstant 0 
                                     %33 = OpTypePointer Uniform %7 
                                     %40 = OpTypePointer Output %7 
                       Output f32_4* %41 = OpVariable Output 
                                 f32 %49 = OpConstant 3.674022E-40 
                                     %50 = OpTypeInt 32 0 
                                 u32 %51 = OpConstant 3 
                                     %52 = OpTypePointer Output %6 
                                 void %4 = OpFunction None %3 
                                      %5 = OpLabel 
                 read_only Texture2D %13 = OpLoad %12 
                             sampler %17 = OpLoad %16 
          read_only Texture2DSampled %19 = OpSampledImage %13 %17 
                               f32_2 %23 = OpLoad vs_TEXCOORD0 
                               f32_4 %24 = OpImageSampleImplicitLod %19 %23 
                                             OpStore %9 %24 
                               f32_4 %26 = OpLoad %9 
                               f32_3 %27 = OpVectorShuffle %26 %26 0 1 2 
                      Uniform f32_4* %34 = OpAccessChain %30 %32 
                               f32_4 %35 = OpLoad %34 
                               f32_3 %36 = OpVectorShuffle %35 %35 0 0 0 
                               f32_3 %37 = OpFMul %27 %36 
                               f32_4 %38 = OpLoad %9 
                               f32_4 %39 = OpVectorShuffle %38 %37 4 5 6 3 
                                             OpStore %9 %39 
                               f32_4 %42 = OpLoad %9 
                               f32_3 %43 = OpVectorShuffle %42 %42 3 3 3 
                               f32_4 %44 = OpLoad %9 
                               f32_3 %45 = OpVectorShuffle %44 %44 0 1 2 
                               f32_3 %46 = OpFMul %43 %45 
                               f32_4 %47 = OpLoad %41 
                               f32_4 %48 = OpVectorShuffle %47 %46 4 5 6 3 
                                             OpStore %41 %48 
                         Output f32* %53 = OpAccessChain %41 %51 
                                             OpStore %53 %49 
                                             OpReturn
                                             OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "AB_HIGH_PRECISION" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "AB_HIGH_PRECISION" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in  vec4 in_POSITION0;
in  vec2 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
in  vec2 vs_TEXCOORD0;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
void main()
{
    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
    SV_Target0.xyz = u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "AB_HIGH_PRECISION" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 94
; Schema: 0
                                              OpCapability Shader 
                                       %1 = OpExtInstImport "GLSL.std.450" 
                                              OpMemoryModel Logical GLSL450 
                                              OpEntryPoint Vertex %4 "main" %11 %72 %84 %86 
                                              OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                              OpDecorate %11 Location 11 
                                              OpDecorate %16 ArrayStride 16 
                                              OpDecorate %17 ArrayStride 17 
                                              OpMemberDecorate %18 0 Offset 18 
                                              OpMemberDecorate %18 1 Offset 18 
                                              OpDecorate %18 Block 
                                              OpDecorate %20 DescriptorSet 20 
                                              OpDecorate %20 Binding 20 
                                              OpMemberDecorate %70 0 BuiltIn 70 
                                              OpMemberDecorate %70 1 BuiltIn 70 
                                              OpMemberDecorate %70 2 BuiltIn 70 
                                              OpDecorate %70 Block 
                                              OpDecorate vs_TEXCOORD0 Location 84 
                                              OpDecorate %86 Location 86 
                                       %2 = OpTypeVoid 
                                       %3 = OpTypeFunction %2 
                                       %6 = OpTypeFloat 32 
                                       %7 = OpTypeVector %6 4 
                                       %8 = OpTypePointer Private %7 
                        Private f32_4* %9 = OpVariable Private 
                                      %10 = OpTypePointer Input %7 
                         Input f32_4* %11 = OpVariable Input 
                                      %14 = OpTypeInt 32 0 
                                  u32 %15 = OpConstant 4 
                                      %16 = OpTypeArray %7 %15 
                                      %17 = OpTypeArray %7 %15 
                                      %18 = OpTypeStruct %16 %17 
                                      %19 = OpTypePointer Uniform %18 
Uniform struct {f32_4[4]; f32_4[4];}* %20 = OpVariable Uniform 
                                      %21 = OpTypeInt 32 1 
                                  i32 %22 = OpConstant 0 
                                  i32 %23 = OpConstant 1 
                                      %24 = OpTypePointer Uniform %7 
                                  i32 %35 = OpConstant 2 
                                  i32 %44 = OpConstant 3 
                       Private f32_4* %48 = OpVariable Private 
                                  u32 %68 = OpConstant 1 
                                      %69 = OpTypeArray %6 %68 
                                      %70 = OpTypeStruct %7 %6 %69 
                                      %71 = OpTypePointer Output %70 
 Output struct {f32_4; f32; f32[1];}* %72 = OpVariable Output 
                                      %80 = OpTypePointer Output %7 
                                      %82 = OpTypeVector %6 2 
                                      %83 = OpTypePointer Output %82 
               Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                      %85 = OpTypePointer Input %82 
                         Input f32_2* %86 = OpVariable Input 
                                      %88 = OpTypePointer Output %6 
                                  void %4 = OpFunction None %3 
                                       %5 = OpLabel 
                                f32_4 %12 = OpLoad %11 
                                f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                       Uniform f32_4* %25 = OpAccessChain %20 %22 %23 
                                f32_4 %26 = OpLoad %25 
                                f32_4 %27 = OpFMul %13 %26 
                                              OpStore %9 %27 
                       Uniform f32_4* %28 = OpAccessChain %20 %22 %22 
                                f32_4 %29 = OpLoad %28 
                                f32_4 %30 = OpLoad %11 
                                f32_4 %31 = OpVectorShuffle %30 %30 0 0 0 0 
                                f32_4 %32 = OpFMul %29 %31 
                                f32_4 %33 = OpLoad %9 
                                f32_4 %34 = OpFAdd %32 %33 
                                              OpStore %9 %34 
                       Uniform f32_4* %36 = OpAccessChain %20 %22 %35 
                                f32_4 %37 = OpLoad %36 
                                f32_4 %38 = OpLoad %11 
                                f32_4 %39 = OpVectorShuffle %38 %38 2 2 2 2 
                                f32_4 %40 = OpFMul %37 %39 
                                f32_4 %41 = OpLoad %9 
                                f32_4 %42 = OpFAdd %40 %41 
                                              OpStore %9 %42 
                                f32_4 %43 = OpLoad %9 
                       Uniform f32_4* %45 = OpAccessChain %20 %22 %44 
                                f32_4 %46 = OpLoad %45 
                                f32_4 %47 = OpFAdd %43 %46 
                                              OpStore %9 %47 
                                f32_4 %49 = OpLoad %9 
                                f32_4 %50 = OpVectorShuffle %49 %49 1 1 1 1 
                       Uniform f32_4* %51 = OpAccessChain %20 %23 %23 
                                f32_4 %52 = OpLoad %51 
                                f32_4 %53 = OpFMul %50 %52 
                                              OpStore %48 %53 
                       Uniform f32_4* %54 = OpAccessChain %20 %23 %22 
                                f32_4 %55 = OpLoad %54 
                                f32_4 %56 = OpLoad %9 
                                f32_4 %57 = OpVectorShuffle %56 %56 0 0 0 0 
                                f32_4 %58 = OpFMul %55 %57 
                                f32_4 %59 = OpLoad %48 
                                f32_4 %60 = OpFAdd %58 %59 
                                              OpStore %48 %60 
                       Uniform f32_4* %61 = OpAccessChain %20 %23 %35 
                                f32_4 %62 = OpLoad %61 
                                f32_4 %63 = OpLoad %9 
                                f32_4 %64 = OpVectorShuffle %63 %63 2 2 2 2 
                                f32_4 %65 = OpFMul %62 %64 
                                f32_4 %66 = OpLoad %48 
                                f32_4 %67 = OpFAdd %65 %66 
                                              OpStore %48 %67 
                       Uniform f32_4* %73 = OpAccessChain %20 %23 %44 
                                f32_4 %74 = OpLoad %73 
                                f32_4 %75 = OpLoad %9 
                                f32_4 %76 = OpVectorShuffle %75 %75 3 3 3 3 
                                f32_4 %77 = OpFMul %74 %76 
                                f32_4 %78 = OpLoad %48 
                                f32_4 %79 = OpFAdd %77 %78 
                        Output f32_4* %81 = OpAccessChain %72 %22 
                                              OpStore %81 %79 
                                f32_2 %87 = OpLoad %86 
                                              OpStore vs_TEXCOORD0 %87 
                          Output f32* %89 = OpAccessChain %72 %22 %68 
                                  f32 %90 = OpLoad %89 
                                  f32 %91 = OpFNegate %90 
                          Output f32* %92 = OpAccessChain %72 %22 %68 
                                              OpStore %92 %91 
                                              OpReturn
                                              OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 38
; Schema: 0
                                             OpCapability Shader 
                                      %1 = OpExtInstImport "GLSL.std.450" 
                                             OpMemoryModel Logical GLSL450 
                                             OpEntryPoint Fragment %4 "main" %22 %28 
                                             OpExecutionMode %4 OriginUpperLeft 
                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                             OpDecorate %12 DescriptorSet 12 
                                             OpDecorate %12 Binding 12 
                                             OpDecorate %16 DescriptorSet 16 
                                             OpDecorate %16 Binding 16 
                                             OpDecorate vs_TEXCOORD0 Location 22 
                                             OpDecorate %28 Location 28 
                                      %2 = OpTypeVoid 
                                      %3 = OpTypeFunction %2 
                                      %6 = OpTypeFloat 32 
                                      %7 = OpTypeVector %6 3 
                                      %8 = OpTypePointer Private %7 
                       Private f32_3* %9 = OpVariable Private 
                                     %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                     %11 = OpTypePointer UniformConstant %10 
UniformConstant read_only Texture2D* %12 = OpVariable UniformConstant 
                                     %14 = OpTypeSampler 
                                     %15 = OpTypePointer UniformConstant %14 
            UniformConstant sampler* %16 = OpVariable UniformConstant 
                                     %18 = OpTypeSampledImage %10 
                                     %20 = OpTypeVector %6 2 
                                     %21 = OpTypePointer Input %20 
               Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                     %24 = OpTypeVector %6 4 
                                     %27 = OpTypePointer Output %24 
                       Output f32_4* %28 = OpVariable Output 
                                 f32 %32 = OpConstant 3.674022E-40 
                                     %33 = OpTypeInt 32 0 
                                 u32 %34 = OpConstant 3 
                                     %35 = OpTypePointer Output %6 
                                 void %4 = OpFunction None %3 
                                      %5 = OpLabel 
                 read_only Texture2D %13 = OpLoad %12 
                             sampler %17 = OpLoad %16 
          read_only Texture2DSampled %19 = OpSampledImage %13 %17 
                               f32_2 %23 = OpLoad vs_TEXCOORD0 
                               f32_4 %25 = OpImageSampleImplicitLod %19 %23 
                               f32_3 %26 = OpVectorShuffle %25 %25 0 1 2 
                                             OpStore %9 %26 
                               f32_3 %29 = OpLoad %9 
                               f32_4 %30 = OpLoad %28 
                               f32_4 %31 = OpVectorShuffle %30 %29 4 5 6 3 
                                             OpStore %28 %31 
                         Output f32* %36 = OpAccessChain %28 %34 
                                             OpStore %36 %32 
                                             OpReturn
                                             OpFunctionEnd
"
}
}
Program "fp" {
SubProgram "d3d11 " {
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
""
}
SubProgram "vulkan " {
""
}
SubProgram "d3d11 " {
Keywords { "AB_HIGH_PRECISION" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "AB_HIGH_PRECISION" }
""
}
SubProgram "vulkan " {
Keywords { "AB_HIGH_PRECISION" }
""
}
}
}
}
}