//////////////////////////////////////////
//
// NOTE: This is *not* a valid shader file
//
///////////////////////////////////////////
Shader "TextMeshPro/Mobile/Distance Field" {
Properties {
_FaceColor ("Face Color", Color) = (1,1,1,1)
_FaceDilate ("Face Dilate", Range(-1, 1)) = 0
_OutlineColor ("Outline Color", Color) = (0,0,0,1)
_OutlineWidth ("Outline Thickness", Range(0, 1)) = 0
_OutlineSoftness ("Outline Softness", Range(0, 1)) = 0
_UnderlayColor ("Border Color", Color) = (0,0,0,0.5)
_UnderlayOffsetX ("Border OffsetX", Range(-1, 1)) = 0
_UnderlayOffsetY ("Border OffsetY", Range(-1, 1)) = 0
_UnderlayDilate ("Border Dilate", Range(-1, 1)) = 0
_UnderlaySoftness ("Border Softness", Range(0, 1)) = 0
_WeightNormal ("Weight Normal", Float) = 0
_WeightBold ("Weight Bold", Float) = 0.5
_ShaderFlags ("Flags", Float) = 0
_ScaleRatioA ("Scale RatioA", Float) = 1
_ScaleRatioB ("Scale RatioB", Float) = 1
_ScaleRatioC ("Scale RatioC", Float) = 1
_MainTex ("Font Atlas", 2D) = "white" { }
_TextureWidth ("Texture Width", Float) = 512
_TextureHeight ("Texture Height", Float) = 512
_GradientScale ("Gradient Scale", Float) = 5
_ScaleX ("Scale X", Float) = 1
_ScaleY ("Scale Y", Float) = 1
_PerspectiveFilter ("Perspective Correction", Range(0, 1)) = 0.875
_Sharpness ("Sharpness", Range(-1, 1)) = 0
_VertexOffsetX ("Vertex OffsetX", Float) = 0
_VertexOffsetY ("Vertex OffsetY", Float) = 0
_ClipRect ("Clip Rect", Vector) = (-32767,-32767,32767,32767)
_MaskSoftnessX ("Mask SoftnessX", Float) = 0
_MaskSoftnessY ("Mask SoftnessY", Float) = 0
_StencilComp ("Stencil Comparison", Float) = 8
_Stencil ("Stencil ID", Float) = 0
_StencilOp ("Stencil Operation", Float) = 0
_StencilWriteMask ("Stencil Write Mask", Float) = 255
_StencilReadMask ("Stencil Read Mask", Float) = 255
_CullMode ("Cull Mode", Float) = 0
_ColorMask ("Color Mask", Float) = 15
}
SubShader {
 Tags { "IGNOREPROJECTOR" = "true" "QUEUE" = "Transparent" "RenderType" = "Transparent" }
 Pass {
  Tags { "IGNOREPROJECTOR" = "true" "QUEUE" = "Transparent" "RenderType" = "Transparent" }
  Blend One OneMinusSrcAlpha, One OneMinusSrcAlpha
  ColorMask 0 0
  ZTest Off
  ZWrite Off
  Cull Off
  Stencil {
   ReadMask 0
   WriteMask 0
   Comp Disabled
   Pass Keep
   Fail Keep
   ZFail Keep
  }
  GpuProgramID 37499
Program "vp" {
SubProgram "d3d11 " {
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _FaceColor;
uniform 	float _FaceDilate;
uniform 	float _OutlineSoftness;
uniform 	vec4 _OutlineColor;
uniform 	float _OutlineWidth;
uniform 	float _WeightNormal;
uniform 	float _WeightBold;
uniform 	float _ScaleRatioA;
uniform 	float _VertexOffsetX;
uniform 	float _VertexOffsetY;
uniform 	vec4 _ClipRect;
uniform 	float _MaskSoftnessX;
uniform 	float _MaskSoftnessY;
uniform 	float _GradientScale;
uniform 	float _ScaleX;
uniform 	float _ScaleY;
uniform 	float _PerspectiveFilter;
uniform 	float _Sharpness;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_COLOR0;
in  vec2 in_TEXCOORD0;
in  vec2 in_TEXCOORD1;
out vec4 vs_COLOR0;
out vec4 vs_COLOR1;
out vec4 vs_TEXCOORD0;
out vec4 vs_TEXCOORD1;
out vec4 vs_TEXCOORD2;
vec2 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
float u_xlat5;
vec2 u_xlat6;
float u_xlat10;
float u_xlat11;
float u_xlat15;
bool u_xlatb15;
void main()
{
    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
    gl_Position = u_xlat2;
    u_xlat3 = in_COLOR0 * _FaceColor;
    u_xlat3.xyz = u_xlat3.www * u_xlat3.xyz;
    vs_COLOR0 = u_xlat3;
    u_xlat4.w = in_COLOR0.w * _OutlineColor.w;
    u_xlat4.xyz = u_xlat4.www * _OutlineColor.xyz;
    u_xlat4 = (-u_xlat3) + u_xlat4;
    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat10 = inversesqrt(u_xlat10);
    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat10 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat10 = inversesqrt(u_xlat10);
    u_xlat2.xyz = vec3(u_xlat10) * u_xlat2.xyz;
    u_xlat10 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat1.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;
    u_xlat1.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat1.xy;
    u_xlat1.xy = abs(u_xlat1.xy) * vec2(_ScaleX, _ScaleY);
    u_xlat1.xy = u_xlat2.ww / u_xlat1.xy;
    u_xlat15 = dot(u_xlat1.xy, u_xlat1.xy);
    u_xlat1.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) * vec2(0.25, 0.25) + u_xlat1.xy;
    vs_TEXCOORD2.zw = vec2(0.25, 0.25) / u_xlat1.xy;
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.x = abs(in_TEXCOORD1.y) * _GradientScale;
    u_xlat6.x = _Sharpness + 1.0;
    u_xlat1.x = u_xlat6.x * u_xlat1.x;
    u_xlat6.x = u_xlat15 * u_xlat1.x;
    u_xlat11 = (-_PerspectiveFilter) + 1.0;
    u_xlat11 = u_xlat11 * abs(u_xlat6.x);
    u_xlat15 = u_xlat15 * u_xlat1.x + (-u_xlat11);
    u_xlat10 = abs(u_xlat10) * u_xlat15 + u_xlat11;
    u_xlatb15 = hlslcc_mtx4x4glstate_matrix_projection[3].w==0.0;
    u_xlat10 = (u_xlatb15) ? u_xlat10 : u_xlat6.x;
    u_xlat15 = _OutlineSoftness * _ScaleRatioA;
    u_xlat15 = u_xlat15 * u_xlat10 + 1.0;
    u_xlat1.x = u_xlat10 / u_xlat15;
    u_xlat10 = _OutlineWidth * _ScaleRatioA;
    u_xlat10 = u_xlat10 * 0.5;
    u_xlat15 = u_xlat1.x * u_xlat10;
    u_xlat15 = u_xlat15 + u_xlat15;
    u_xlat15 = min(u_xlat15, 1.0);
    u_xlat15 = sqrt(u_xlat15);
    vs_COLOR1 = vec4(u_xlat15) * u_xlat4 + u_xlat3;
    u_xlat2 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));
    u_xlat2 = min(u_xlat2, vec4(2e+10, 2e+10, 2e+10, 2e+10));
    u_xlat6.xy = u_xlat0.xy + (-u_xlat2.xy);
    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + (-u_xlat2.xy);
    vs_TEXCOORD2.xy = (-u_xlat2.zw) + u_xlat0.xy;
    u_xlat0.xy = (-u_xlat2.xy) + u_xlat2.zw;
    vs_TEXCOORD0.zw = u_xlat6.xy / u_xlat0.xy;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlatb0 = 0.0>=in_TEXCOORD1.y;
    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);
    u_xlat5 = (-_WeightNormal) + _WeightBold;
    u_xlat0.x = u_xlat0.x * u_xlat5 + _WeightNormal;
    u_xlat0.x = u_xlat0.x * 0.25 + _FaceDilate;
    u_xlat0.x = u_xlat0.x * _ScaleRatioA;
    u_xlat0.x = (-u_xlat0.x) * 0.5 + 0.5;
    u_xlat1.w = u_xlat0.x * u_xlat1.x + -0.5;
    vs_TEXCOORD1.y = (-u_xlat10) * u_xlat1.x + u_xlat1.w;
    vs_TEXCOORD1.z = u_xlat10 * u_xlat1.x + u_xlat1.w;
    vs_TEXCOORD1.xw = u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
in  vec4 vs_COLOR0;
in  vec4 vs_TEXCOORD0;
in  vec4 vs_TEXCOORD1;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
void main()
{
    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat0.x = u_xlat0.w * vs_TEXCOORD1.x + (-vs_TEXCOORD1.w);
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    SV_Target0 = u_xlat0.xxxx * vs_COLOR0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 514
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %12 %118 %122 %135 %154 %257 %266 %384 %427 %433 %490 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpDecorate %12 Location 12 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpDecorate %19 ArrayStride 19 
                                                      OpDecorate %20 ArrayStride 20 
                                                      OpDecorate %21 ArrayStride 21 
                                                      OpMemberDecorate %22 0 Offset 22 
                                                      OpMemberDecorate %22 1 Offset 22 
                                                      OpMemberDecorate %22 2 Offset 22 
                                                      OpMemberDecorate %22 3 Offset 22 
                                                      OpMemberDecorate %22 4 Offset 22 
                                                      OpMemberDecorate %22 5 Offset 22 
                                                      OpMemberDecorate %22 6 Offset 22 
                                                      OpMemberDecorate %22 7 Offset 22 
                                                      OpMemberDecorate %22 8 Offset 22 
                                                      OpMemberDecorate %22 9 Offset 22 
                                                      OpMemberDecorate %22 10 Offset 22 
                                                      OpMemberDecorate %22 11 Offset 22 
                                                      OpMemberDecorate %22 12 Offset 22 
                                                      OpMemberDecorate %22 13 Offset 22 
                                                      OpMemberDecorate %22 14 Offset 22 
                                                      OpMemberDecorate %22 15 Offset 22 
                                                      OpMemberDecorate %22 16 Offset 22 
                                                      OpMemberDecorate %22 17 Offset 22 
                                                      OpMemberDecorate %22 18 Offset 22 
                                                      OpMemberDecorate %22 19 Offset 22 
                                                      OpMemberDecorate %22 20 Offset 22 
                                                      OpMemberDecorate %22 21 Offset 22 
                                                      OpMemberDecorate %22 22 Offset 22 
                                                      OpMemberDecorate %22 23 Offset 22 
                                                      OpDecorate %22 Block 
                                                      OpDecorate %24 DescriptorSet 24 
                                                      OpDecorate %24 Binding 24 
                                                      OpMemberDecorate %116 0 BuiltIn 116 
                                                      OpMemberDecorate %116 1 BuiltIn 116 
                                                      OpMemberDecorate %116 2 BuiltIn 116 
                                                      OpDecorate %116 Block 
                                                      OpDecorate %122 Location 122 
                                                      OpDecorate %135 Location 135 
                                                      OpDecorate %154 Location 154 
                                                      OpDecorate vs_TEXCOORD2 Location 257 
                                                      OpDecorate %266 Location 266 
                                                      OpDecorate %384 Location 384 
                                                      OpDecorate vs_TEXCOORD0 Location 427 
                                                      OpDecorate %433 Location 433 
                                                      OpDecorate vs_TEXCOORD1 Location 490 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 2 
                                               %8 = OpTypePointer Private %7 
                                Private f32_2* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 4 
                                              %11 = OpTypePointer Input %10 
                                 Input f32_4* %12 = OpVariable Input 
                                              %15 = OpTypeVector %6 3 
                                              %16 = OpTypeInt 32 0 
                                          u32 %17 = OpConstant 4 
                                              %18 = OpTypeArray %10 %17 
                                              %19 = OpTypeArray %10 %17 
                                              %20 = OpTypeArray %10 %17 
                                              %21 = OpTypeArray %10 %17 
                                              %22 = OpTypeStruct %15 %10 %18 %19 %20 %21 %10 %6 %6 %10 %6 %6 %6 %6 %6 %6 %10 %6 %6 %6 %6 %6 %6 %6 
                                              %23 = OpTypePointer Uniform %22 
Uniform struct {f32_3; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4[4]; f32_4; f32; f32; f32_4; f32; f32; f32; f32; f32; f32; f32_4; f32; f32; f32; f32; f32; f32; f32;}* %24 = OpVariable Uniform 
                                              %25 = OpTypeInt 32 1 
                                          i32 %26 = OpConstant 14 
                                              %27 = OpTypePointer Uniform %6 
                                          i32 %30 = OpConstant 15 
                                              %35 = OpTypePointer Private %10 
                               Private f32_4* %36 = OpVariable Private 
                                          i32 %39 = OpConstant 2 
                                          i32 %40 = OpConstant 1 
                                              %41 = OpTypePointer Uniform %10 
                                          i32 %45 = OpConstant 0 
                               Private f32_4* %60 = OpVariable Private 
                                          i32 %62 = OpConstant 3 
                                              %80 = OpTypePointer Uniform %15 
                               Private f32_4* %86 = OpVariable Private 
                                          i32 %89 = OpConstant 5 
                                         u32 %114 = OpConstant 1 
                                             %115 = OpTypeArray %6 %114 
                                             %116 = OpTypeStruct %10 %6 %115 
                                             %117 = OpTypePointer Output %116 
        Output struct {f32_4; f32; f32[1];}* %118 = OpVariable Output 
                                             %120 = OpTypePointer Output %10 
                                Input f32_4* %122 = OpVariable Input 
                                         i32 %124 = OpConstant 6 
                               Output f32_4* %135 = OpVariable Output 
                                             %137 = OpTypePointer Private %6 
                                Private f32* %138 = OpVariable Private 
                                             %153 = OpTypePointer Input %15 
                                Input f32_3* %154 = OpVariable Input 
                                         u32 %160 = OpConstant 0 
                                         u32 %173 = OpConstant 2 
                                         i32 %197 = OpConstant 4 
                                         i32 %219 = OpConstant 20 
                                         i32 %222 = OpConstant 21 
                                Private f32* %236 = OpVariable Private 
                                         i32 %242 = OpConstant 17 
                                         i32 %245 = OpConstant 18 
                                         f32 %249 = OpConstant 3.674022E-40 
                                       f32_2 %250 = OpConstantComposite %249 %249 
                       Output f32_4* vs_TEXCOORD2 = OpVariable Output 
                                             %265 = OpTypePointer Input %7 
                                Input f32_2* %266 = OpVariable Input 
                                             %267 = OpTypePointer Input %6 
                                         i32 %271 = OpConstant 19 
                              Private f32_2* %276 = OpVariable Private 
                                         i32 %277 = OpConstant 23 
                                         f32 %280 = OpConstant 3.674022E-40 
                                Private f32* %294 = OpVariable Private 
                                         i32 %295 = OpConstant 22 
                                             %318 = OpTypeBool 
                                             %319 = OpTypePointer Private %318 
                               Private bool* %320 = OpVariable Private 
                                         u32 %321 = OpConstant 3 
                                         f32 %324 = OpConstant 3.674022E-40 
                                             %327 = OpTypePointer Function %6 
                                         i32 %336 = OpConstant 8 
                                         i32 %339 = OpConstant 13 
                                         i32 %351 = OpConstant 10 
                                         i32 %367 = OpConstant 9 
                               Output f32_4* %384 = OpVariable Output 
                                         i32 %391 = OpConstant 16 
                                         f32 %394 = OpConstant 3.674022E-40 
                                       f32_4 %395 = OpConstantComposite %394 %394 %394 %394 
                                         f32 %398 = OpConstant 3.674022E-40 
                                       f32_4 %399 = OpConstantComposite %398 %398 %398 %398 
                                         f32 %407 = OpConstant 3.674022E-40 
                                       f32_2 %408 = OpConstantComposite %407 %407 
                       Output f32_4* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_2* %433 = OpVariable Input 
                               Private bool* %437 = OpVariable Private 
                                Private f32* %444 = OpVariable Private 
                                         i32 %445 = OpConstant 11 
                                         i32 %449 = OpConstant 12 
                                         i32 %464 = OpConstant 7 
                                         f32 %478 = OpConstant 3.674022E-40 
                                         f32 %487 = OpConstant 3.674022E-40 
                       Output f32_4* vs_TEXCOORD1 = OpVariable Output 
                                             %501 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                               Function f32* %328 = OpVariable Function 
                                        f32_4 %13 = OpLoad %12 
                                        f32_2 %14 = OpVectorShuffle %13 %13 0 1 
                                 Uniform f32* %28 = OpAccessChain %24 %26 
                                          f32 %29 = OpLoad %28 
                                 Uniform f32* %31 = OpAccessChain %24 %30 
                                          f32 %32 = OpLoad %31 
                                        f32_2 %33 = OpCompositeConstruct %29 %32 
                                        f32_2 %34 = OpFAdd %14 %33 
                                                      OpStore %9 %34 
                                        f32_2 %37 = OpLoad %9 
                                        f32_4 %38 = OpVectorShuffle %37 %37 1 1 1 1 
                               Uniform f32_4* %42 = OpAccessChain %24 %39 %40 
                                        f32_4 %43 = OpLoad %42 
                                        f32_4 %44 = OpFMul %38 %43 
                                                      OpStore %36 %44 
                               Uniform f32_4* %46 = OpAccessChain %24 %39 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_2 %48 = OpLoad %9 
                                        f32_4 %49 = OpVectorShuffle %48 %48 0 0 0 0 
                                        f32_4 %50 = OpFMul %47 %49 
                                        f32_4 %51 = OpLoad %36 
                                        f32_4 %52 = OpFAdd %50 %51 
                                                      OpStore %36 %52 
                               Uniform f32_4* %53 = OpAccessChain %24 %39 %39 
                                        f32_4 %54 = OpLoad %53 
                                        f32_4 %55 = OpLoad %12 
                                        f32_4 %56 = OpVectorShuffle %55 %55 2 2 2 2 
                                        f32_4 %57 = OpFMul %54 %56 
                                        f32_4 %58 = OpLoad %36 
                                        f32_4 %59 = OpFAdd %57 %58 
                                                      OpStore %36 %59 
                                        f32_4 %61 = OpLoad %36 
                               Uniform f32_4* %63 = OpAccessChain %24 %39 %62 
                                        f32_4 %64 = OpLoad %63 
                                        f32_4 %65 = OpFAdd %61 %64 
                                                      OpStore %60 %65 
                               Uniform f32_4* %66 = OpAccessChain %24 %39 %62 
                                        f32_4 %67 = OpLoad %66 
                                        f32_3 %68 = OpVectorShuffle %67 %67 0 1 2 
                                        f32_4 %69 = OpLoad %12 
                                        f32_3 %70 = OpVectorShuffle %69 %69 3 3 3 
                                        f32_3 %71 = OpFMul %68 %70 
                                        f32_4 %72 = OpLoad %36 
                                        f32_3 %73 = OpVectorShuffle %72 %72 0 1 2 
                                        f32_3 %74 = OpFAdd %71 %73 
                                        f32_4 %75 = OpLoad %36 
                                        f32_4 %76 = OpVectorShuffle %75 %74 4 5 6 3 
                                                      OpStore %36 %76 
                                        f32_4 %77 = OpLoad %36 
                                        f32_3 %78 = OpVectorShuffle %77 %77 0 1 2 
                                        f32_3 %79 = OpFNegate %78 
                               Uniform f32_3* %81 = OpAccessChain %24 %45 
                                        f32_3 %82 = OpLoad %81 
                                        f32_3 %83 = OpFAdd %79 %82 
                                        f32_4 %84 = OpLoad %36 
                                        f32_4 %85 = OpVectorShuffle %84 %83 4 5 6 3 
                                                      OpStore %36 %85 
                                        f32_4 %87 = OpLoad %60 
                                        f32_4 %88 = OpVectorShuffle %87 %87 1 1 1 1 
                               Uniform f32_4* %90 = OpAccessChain %24 %89 %40 
                                        f32_4 %91 = OpLoad %90 
                                        f32_4 %92 = OpFMul %88 %91 
                                                      OpStore %86 %92 
                               Uniform f32_4* %93 = OpAccessChain %24 %89 %45 
                                        f32_4 %94 = OpLoad %93 
                                        f32_4 %95 = OpLoad %60 
                                        f32_4 %96 = OpVectorShuffle %95 %95 0 0 0 0 
                                        f32_4 %97 = OpFMul %94 %96 
                                        f32_4 %98 = OpLoad %86 
                                        f32_4 %99 = OpFAdd %97 %98 
                                                      OpStore %86 %99 
                              Uniform f32_4* %100 = OpAccessChain %24 %89 %39 
                                       f32_4 %101 = OpLoad %100 
                                       f32_4 %102 = OpLoad %60 
                                       f32_4 %103 = OpVectorShuffle %102 %102 2 2 2 2 
                                       f32_4 %104 = OpFMul %101 %103 
                                       f32_4 %105 = OpLoad %86 
                                       f32_4 %106 = OpFAdd %104 %105 
                                                      OpStore %86 %106 
                              Uniform f32_4* %107 = OpAccessChain %24 %89 %62 
                                       f32_4 %108 = OpLoad %107 
                                       f32_4 %109 = OpLoad %60 
                                       f32_4 %110 = OpVectorShuffle %109 %109 3 3 3 3 
                                       f32_4 %111 = OpFMul %108 %110 
                                       f32_4 %112 = OpLoad %86 
                                       f32_4 %113 = OpFAdd %111 %112 
                                                      OpStore %60 %113 
                                       f32_4 %119 = OpLoad %60 
                               Output f32_4* %121 = OpAccessChain %118 %45 
                                                      OpStore %121 %119 
                                       f32_4 %123 = OpLoad %122 
                              Uniform f32_4* %125 = OpAccessChain %24 %124 
                                       f32_4 %126 = OpLoad %125 
                                       f32_4 %127 = OpFMul %123 %126 
                                                      OpStore %86 %127 
                                       f32_4 %128 = OpLoad %86 
                                       f32_3 %129 = OpVectorShuffle %128 %128 3 3 3 
                                       f32_4 %130 = OpLoad %86 
                                       f32_3 %131 = OpVectorShuffle %130 %130 0 1 2 
                                       f32_3 %132 = OpFMul %129 %131 
                                       f32_4 %133 = OpLoad %86 
                                       f32_4 %134 = OpVectorShuffle %133 %132 4 5 6 3 
                                                      OpStore %86 %134 
                                       f32_4 %136 = OpLoad %86 
                                                      OpStore %135 %136 
                                       f32_4 %139 = OpLoad %36 
                                       f32_3 %140 = OpVectorShuffle %139 %139 0 1 2 
                                       f32_4 %141 = OpLoad %36 
                                       f32_3 %142 = OpVectorShuffle %141 %141 0 1 2 
                                         f32 %143 = OpDot %140 %142 
                                                      OpStore %138 %143 
                                         f32 %144 = OpLoad %138 
                                         f32 %145 = OpExtInst %1 32 %144 
                                                      OpStore %138 %145 
                                         f32 %146 = OpLoad %138 
                                       f32_3 %147 = OpCompositeConstruct %146 %146 %146 
                                       f32_4 %148 = OpLoad %36 
                                       f32_3 %149 = OpVectorShuffle %148 %148 0 1 2 
                                       f32_3 %150 = OpFMul %147 %149 
                                       f32_4 %151 = OpLoad %36 
                                       f32_4 %152 = OpVectorShuffle %151 %150 4 5 6 3 
                                                      OpStore %36 %152 
                                       f32_3 %155 = OpLoad %154 
                              Uniform f32_4* %156 = OpAccessChain %24 %62 %45 
                                       f32_4 %157 = OpLoad %156 
                                       f32_3 %158 = OpVectorShuffle %157 %157 0 1 2 
                                         f32 %159 = OpDot %155 %158 
                                Private f32* %161 = OpAccessChain %60 %160 
                                                      OpStore %161 %159 
                                       f32_3 %162 = OpLoad %154 
                              Uniform f32_4* %163 = OpAccessChain %24 %62 %40 
                                       f32_4 %164 = OpLoad %163 
                                       f32_3 %165 = OpVectorShuffle %164 %164 0 1 2 
                                         f32 %166 = OpDot %162 %165 
                                Private f32* %167 = OpAccessChain %60 %114 
                                                      OpStore %167 %166 
                                       f32_3 %168 = OpLoad %154 
                              Uniform f32_4* %169 = OpAccessChain %24 %62 %39 
                                       f32_4 %170 = OpLoad %169 
                                       f32_3 %171 = OpVectorShuffle %170 %170 0 1 2 
                                         f32 %172 = OpDot %168 %171 
                                Private f32* %174 = OpAccessChain %60 %173 
                                                      OpStore %174 %172 
                                       f32_4 %175 = OpLoad %60 
                                       f32_3 %176 = OpVectorShuffle %175 %175 0 1 2 
                                       f32_4 %177 = OpLoad %60 
                                       f32_3 %178 = OpVectorShuffle %177 %177 0 1 2 
                                         f32 %179 = OpDot %176 %178 
                                                      OpStore %138 %179 
                                         f32 %180 = OpLoad %138 
                                         f32 %181 = OpExtInst %1 32 %180 
                                                      OpStore %138 %181 
                                         f32 %182 = OpLoad %138 
                                       f32_3 %183 = OpCompositeConstruct %182 %182 %182 
                                       f32_4 %184 = OpLoad %60 
                                       f32_3 %185 = OpVectorShuffle %184 %184 0 1 2 
                                       f32_3 %186 = OpFMul %183 %185 
                                       f32_4 %187 = OpLoad %60 
                                       f32_4 %188 = OpVectorShuffle %187 %186 4 5 6 3 
                                                      OpStore %60 %188 
                                       f32_4 %189 = OpLoad %60 
                                       f32_3 %190 = OpVectorShuffle %189 %189 0 1 2 
                                       f32_4 %191 = OpLoad %36 
                                       f32_3 %192 = OpVectorShuffle %191 %191 0 1 2 
                                         f32 %193 = OpDot %190 %192 
                                                      OpStore %138 %193 
                              Uniform f32_4* %194 = OpAccessChain %24 %40 
                                       f32_4 %195 = OpLoad %194 
                                       f32_2 %196 = OpVectorShuffle %195 %195 1 1 
                              Uniform f32_4* %198 = OpAccessChain %24 %197 %40 
                                       f32_4 %199 = OpLoad %198 
                                       f32_2 %200 = OpVectorShuffle %199 %199 0 1 
                                       f32_2 %201 = OpFMul %196 %200 
                                       f32_4 %202 = OpLoad %36 
                                       f32_4 %203 = OpVectorShuffle %202 %201 4 5 2 3 
                                                      OpStore %36 %203 
                              Uniform f32_4* %204 = OpAccessChain %24 %197 %45 
                                       f32_4 %205 = OpLoad %204 
                                       f32_2 %206 = OpVectorShuffle %205 %205 0 1 
                              Uniform f32_4* %207 = OpAccessChain %24 %40 
                                       f32_4 %208 = OpLoad %207 
                                       f32_2 %209 = OpVectorShuffle %208 %208 0 0 
                                       f32_2 %210 = OpFMul %206 %209 
                                       f32_4 %211 = OpLoad %36 
                                       f32_2 %212 = OpVectorShuffle %211 %211 0 1 
                                       f32_2 %213 = OpFAdd %210 %212 
                                       f32_4 %214 = OpLoad %36 
                                       f32_4 %215 = OpVectorShuffle %214 %213 4 5 2 3 
                                                      OpStore %36 %215 
                                       f32_4 %216 = OpLoad %36 
                                       f32_2 %217 = OpVectorShuffle %216 %216 0 1 
                                       f32_2 %218 = OpExtInst %1 4 %217 
                                Uniform f32* %220 = OpAccessChain %24 %219 
                                         f32 %221 = OpLoad %220 
                                Uniform f32* %223 = OpAccessChain %24 %222 
                                         f32 %224 = OpLoad %223 
                                       f32_2 %225 = OpCompositeConstruct %221 %224 
                                       f32_2 %226 = OpFMul %218 %225 
                                       f32_4 %227 = OpLoad %36 
                                       f32_4 %228 = OpVectorShuffle %227 %226 4 5 2 3 
                                                      OpStore %36 %228 
                                       f32_4 %229 = OpLoad %60 
                                       f32_2 %230 = OpVectorShuffle %229 %229 3 3 
                                       f32_4 %231 = OpLoad %36 
                                       f32_2 %232 = OpVectorShuffle %231 %231 0 1 
                                       f32_2 %233 = OpFDiv %230 %232 
                                       f32_4 %234 = OpLoad %36 
                                       f32_4 %235 = OpVectorShuffle %234 %233 4 5 2 3 
                                                      OpStore %36 %235 
                                       f32_4 %237 = OpLoad %36 
                                       f32_2 %238 = OpVectorShuffle %237 %237 0 1 
                                       f32_4 %239 = OpLoad %36 
                                       f32_2 %240 = OpVectorShuffle %239 %239 0 1 
                                         f32 %241 = OpDot %238 %240 
                                                      OpStore %236 %241 
                                Uniform f32* %243 = OpAccessChain %24 %242 
                                         f32 %244 = OpLoad %243 
                                Uniform f32* %246 = OpAccessChain %24 %245 
                                         f32 %247 = OpLoad %246 
                                       f32_2 %248 = OpCompositeConstruct %244 %247 
                                       f32_2 %251 = OpFMul %248 %250 
                                       f32_4 %252 = OpLoad %36 
                                       f32_2 %253 = OpVectorShuffle %252 %252 0 1 
                                       f32_2 %254 = OpFAdd %251 %253 
                                       f32_4 %255 = OpLoad %36 
                                       f32_4 %256 = OpVectorShuffle %255 %254 4 5 2 3 
                                                      OpStore %36 %256 
                                       f32_4 %258 = OpLoad %36 
                                       f32_2 %259 = OpVectorShuffle %258 %258 0 1 
                                       f32_2 %260 = OpFDiv %250 %259 
                                       f32_4 %261 = OpLoad vs_TEXCOORD2 
                                       f32_4 %262 = OpVectorShuffle %261 %260 0 1 4 5 
                                                      OpStore vs_TEXCOORD2 %262 
                                         f32 %263 = OpLoad %236 
                                         f32 %264 = OpExtInst %1 32 %263 
                                                      OpStore %236 %264 
                                  Input f32* %268 = OpAccessChain %266 %114 
                                         f32 %269 = OpLoad %268 
                                         f32 %270 = OpExtInst %1 4 %269 
                                Uniform f32* %272 = OpAccessChain %24 %271 
                                         f32 %273 = OpLoad %272 
                                         f32 %274 = OpFMul %270 %273 
                                Private f32* %275 = OpAccessChain %36 %160 
                                                      OpStore %275 %274 
                                Uniform f32* %278 = OpAccessChain %24 %277 
                                         f32 %279 = OpLoad %278 
                                         f32 %281 = OpFAdd %279 %280 
                                Private f32* %282 = OpAccessChain %276 %160 
                                                      OpStore %282 %281 
                                Private f32* %283 = OpAccessChain %276 %160 
                                         f32 %284 = OpLoad %283 
                                Private f32* %285 = OpAccessChain %36 %160 
                                         f32 %286 = OpLoad %285 
                                         f32 %287 = OpFMul %284 %286 
                                Private f32* %288 = OpAccessChain %36 %160 
                                                      OpStore %288 %287 
                                         f32 %289 = OpLoad %236 
                                Private f32* %290 = OpAccessChain %36 %160 
                                         f32 %291 = OpLoad %290 
                                         f32 %292 = OpFMul %289 %291 
                                Private f32* %293 = OpAccessChain %276 %160 
                                                      OpStore %293 %292 
                                Uniform f32* %296 = OpAccessChain %24 %295 
                                         f32 %297 = OpLoad %296 
                                         f32 %298 = OpFNegate %297 
                                         f32 %299 = OpFAdd %298 %280 
                                                      OpStore %294 %299 
                                         f32 %300 = OpLoad %294 
                                Private f32* %301 = OpAccessChain %276 %160 
                                         f32 %302 = OpLoad %301 
                                         f32 %303 = OpExtInst %1 4 %302 
                                         f32 %304 = OpFMul %300 %303 
                                                      OpStore %294 %304 
                                         f32 %305 = OpLoad %236 
                                Private f32* %306 = OpAccessChain %36 %160 
                                         f32 %307 = OpLoad %306 
                                         f32 %308 = OpFMul %305 %307 
                                         f32 %309 = OpLoad %294 
                                         f32 %310 = OpFNegate %309 
                                         f32 %311 = OpFAdd %308 %310 
                                                      OpStore %236 %311 
                                         f32 %312 = OpLoad %138 
                                         f32 %313 = OpExtInst %1 4 %312 
                                         f32 %314 = OpLoad %236 
                                         f32 %315 = OpFMul %313 %314 
                                         f32 %316 = OpLoad %294 
                                         f32 %317 = OpFAdd %315 %316 
                                                      OpStore %138 %317 
                                Uniform f32* %322 = OpAccessChain %24 %197 %62 %321 
                                         f32 %323 = OpLoad %322 
                                        bool %325 = OpFOrdEqual %323 %324 
                                                      OpStore %320 %325 
                                        bool %326 = OpLoad %320 
                                                      OpSelectionMerge %330 None 
                                                      OpBranchConditional %326 %329 %332 
                                             %329 = OpLabel 
                                         f32 %331 = OpLoad %138 
                                                      OpStore %328 %331 
                                                      OpBranch %330 
                                             %332 = OpLabel 
                                Private f32* %333 = OpAccessChain %276 %160 
                                         f32 %334 = OpLoad %333 
                                                      OpStore %328 %334 
                                                      OpBranch %330 
                                             %330 = OpLabel 
                                         f32 %335 = OpLoad %328 
                                                      OpStore %138 %335 
                                Uniform f32* %337 = OpAccessChain %24 %336 
                                         f32 %338 = OpLoad %337 
                                Uniform f32* %340 = OpAccessChain %24 %339 
                                         f32 %341 = OpLoad %340 
                                         f32 %342 = OpFMul %338 %341 
                                                      OpStore %236 %342 
                                         f32 %343 = OpLoad %236 
                                         f32 %344 = OpLoad %138 
                                         f32 %345 = OpFMul %343 %344 
                                         f32 %346 = OpFAdd %345 %280 
                                                      OpStore %236 %346 
                                         f32 %347 = OpLoad %138 
                                         f32 %348 = OpLoad %236 
                                         f32 %349 = OpFDiv %347 %348 
                                Private f32* %350 = OpAccessChain %36 %160 
                                                      OpStore %350 %349 
                                Uniform f32* %352 = OpAccessChain %24 %351 
                                         f32 %353 = OpLoad %352 
                                Uniform f32* %354 = OpAccessChain %24 %339 
                                         f32 %355 = OpLoad %354 
                                         f32 %356 = OpFMul %353 %355 
                                                      OpStore %138 %356 
                                Private f32* %357 = OpAccessChain %36 %160 
                                         f32 %358 = OpLoad %357 
                                         f32 %359 = OpLoad %138 
                                         f32 %360 = OpFMul %358 %359 
                                                      OpStore %138 %360 
                                         f32 %361 = OpLoad %138 
                                         f32 %362 = OpExtInst %1 37 %361 %280 
                                                      OpStore %236 %362 
                                         f32 %363 = OpLoad %236 
                                         f32 %364 = OpExtInst %1 31 %363 
                                                      OpStore %236 %364 
                                  Input f32* %365 = OpAccessChain %122 %321 
                                         f32 %366 = OpLoad %365 
                                Uniform f32* %368 = OpAccessChain %24 %367 %321 
                                         f32 %369 = OpLoad %368 
                                         f32 %370 = OpFMul %366 %369 
                                Private f32* %371 = OpAccessChain %60 %321 
                                                      OpStore %371 %370 
                                       f32_4 %372 = OpLoad %60 
                                       f32_3 %373 = OpVectorShuffle %372 %372 3 3 3 
                              Uniform f32_4* %374 = OpAccessChain %24 %367 
                                       f32_4 %375 = OpLoad %374 
                                       f32_3 %376 = OpVectorShuffle %375 %375 0 1 2 
                                       f32_3 %377 = OpFMul %373 %376 
                                       f32_4 %378 = OpLoad %60 
                                       f32_4 %379 = OpVectorShuffle %378 %377 4 5 6 3 
                                                      OpStore %60 %379 
                                       f32_4 %380 = OpLoad %86 
                                       f32_4 %381 = OpFNegate %380 
                                       f32_4 %382 = OpLoad %60 
                                       f32_4 %383 = OpFAdd %381 %382 
                                                      OpStore %60 %383 
                                         f32 %385 = OpLoad %236 
                                       f32_4 %386 = OpCompositeConstruct %385 %385 %385 %385 
                                       f32_4 %387 = OpLoad %60 
                                       f32_4 %388 = OpFMul %386 %387 
                                       f32_4 %389 = OpLoad %86 
                                       f32_4 %390 = OpFAdd %388 %389 
                                                      OpStore %384 %390 
                              Uniform f32_4* %392 = OpAccessChain %24 %391 
                                       f32_4 %393 = OpLoad %392 
                                       f32_4 %396 = OpExtInst %1 40 %393 %395 
                                                      OpStore %60 %396 
                                       f32_4 %397 = OpLoad %60 
                                       f32_4 %400 = OpExtInst %1 37 %397 %399 
                                                      OpStore %60 %400 
                                       f32_2 %401 = OpLoad %9 
                                       f32_4 %402 = OpLoad %60 
                                       f32_2 %403 = OpVectorShuffle %402 %402 0 1 
                                       f32_2 %404 = OpFNegate %403 
                                       f32_2 %405 = OpFAdd %401 %404 
                                                      OpStore %276 %405 
                                       f32_2 %406 = OpLoad %9 
                                       f32_2 %409 = OpFMul %406 %408 
                                       f32_4 %410 = OpLoad %60 
                                       f32_2 %411 = OpVectorShuffle %410 %410 0 1 
                                       f32_2 %412 = OpFNegate %411 
                                       f32_2 %413 = OpFAdd %409 %412 
                                                      OpStore %9 %413 
                                       f32_4 %414 = OpLoad %60 
                                       f32_2 %415 = OpVectorShuffle %414 %414 2 3 
                                       f32_2 %416 = OpFNegate %415 
                                       f32_2 %417 = OpLoad %9 
                                       f32_2 %418 = OpFAdd %416 %417 
                                       f32_4 %419 = OpLoad vs_TEXCOORD2 
                                       f32_4 %420 = OpVectorShuffle %419 %418 4 5 2 3 
                                                      OpStore vs_TEXCOORD2 %420 
                                       f32_4 %421 = OpLoad %60 
                                       f32_2 %422 = OpVectorShuffle %421 %421 0 1 
                                       f32_2 %423 = OpFNegate %422 
                                       f32_4 %424 = OpLoad %60 
                                       f32_2 %425 = OpVectorShuffle %424 %424 2 3 
                                       f32_2 %426 = OpFAdd %423 %425 
                                                      OpStore %9 %426 
                                       f32_2 %428 = OpLoad %276 
                                       f32_2 %429 = OpLoad %9 
                                       f32_2 %430 = OpFDiv %428 %429 
                                       f32_4 %431 = OpLoad vs_TEXCOORD0 
                                       f32_4 %432 = OpVectorShuffle %431 %430 0 1 4 5 
                                                      OpStore vs_TEXCOORD0 %432 
                                       f32_2 %434 = OpLoad %433 
                                       f32_4 %435 = OpLoad vs_TEXCOORD0 
                                       f32_4 %436 = OpVectorShuffle %435 %434 4 5 2 3 
                                                      OpStore vs_TEXCOORD0 %436 
                                  Input f32* %438 = OpAccessChain %266 %114 
                                         f32 %439 = OpLoad %438 
                                        bool %440 = OpFOrdGreaterThanEqual %324 %439 
                                                      OpStore %437 %440 
                                        bool %441 = OpLoad %437 
                                         f32 %442 = OpSelect %441 %280 %324 
                                Private f32* %443 = OpAccessChain %9 %160 
                                                      OpStore %443 %442 
                                Uniform f32* %446 = OpAccessChain %24 %445 
                                         f32 %447 = OpLoad %446 
                                         f32 %448 = OpFNegate %447 
                                Uniform f32* %450 = OpAccessChain %24 %449 
                                         f32 %451 = OpLoad %450 
                                         f32 %452 = OpFAdd %448 %451 
                                                      OpStore %444 %452 
                                Private f32* %453 = OpAccessChain %9 %160 
                                         f32 %454 = OpLoad %453 
                                         f32 %455 = OpLoad %444 
                                         f32 %456 = OpFMul %454 %455 
                                Uniform f32* %457 = OpAccessChain %24 %445 
                                         f32 %458 = OpLoad %457 
                                         f32 %459 = OpFAdd %456 %458 
                                Private f32* %460 = OpAccessChain %9 %160 
                                                      OpStore %460 %459 
                                Private f32* %461 = OpAccessChain %9 %160 
                                         f32 %462 = OpLoad %461 
                                         f32 %463 = OpFMul %462 %249 
                                Uniform f32* %465 = OpAccessChain %24 %464 
                                         f32 %466 = OpLoad %465 
                                         f32 %467 = OpFAdd %463 %466 
                                Private f32* %468 = OpAccessChain %9 %160 
                                                      OpStore %468 %467 
                                Private f32* %469 = OpAccessChain %9 %160 
                                         f32 %470 = OpLoad %469 
                                Uniform f32* %471 = OpAccessChain %24 %339 
                                         f32 %472 = OpLoad %471 
                                         f32 %473 = OpFMul %470 %472 
                                Private f32* %474 = OpAccessChain %9 %160 
                                                      OpStore %474 %473 
                                Private f32* %475 = OpAccessChain %9 %160 
                                         f32 %476 = OpLoad %475 
                                         f32 %477 = OpFNegate %476 
                                         f32 %479 = OpFMul %477 %478 
                                         f32 %480 = OpFAdd %479 %478 
                                Private f32* %481 = OpAccessChain %9 %160 
                                                      OpStore %481 %480 
                                Private f32* %482 = OpAccessChain %9 %160 
                                         f32 %483 = OpLoad %482 
                                Private f32* %484 = OpAccessChain %36 %160 
                                         f32 %485 = OpLoad %484 
                                         f32 %486 = OpFMul %483 %485 
                                         f32 %488 = OpFAdd %486 %487 
                                Private f32* %489 = OpAccessChain %36 %321 
                                                      OpStore %489 %488 
                                       f32_4 %491 = OpLoad %36 
                                       f32_2 %492 = OpVectorShuffle %491 %491 0 3 
                                       f32_4 %493 = OpLoad vs_TEXCOORD1 
                                       f32_4 %494 = OpVectorShuffle %493 %492 4 1 2 5 
                                                      OpStore vs_TEXCOORD1 %494 
                                         f32 %495 = OpLoad %138 
                                         f32 %496 = OpFNegate %495 
                                         f32 %497 = OpFMul %496 %478 
                                Private f32* %498 = OpAccessChain %36 %321 
                                         f32 %499 = OpLoad %498 
                                         f32 %500 = OpFAdd %497 %499 
                                 Output f32* %502 = OpAccessChain vs_TEXCOORD1 %114 
                                                      OpStore %502 %500 
                                         f32 %503 = OpLoad %138 
                                         f32 %504 = OpFMul %503 %478 
                                Private f32* %505 = OpAccessChain %36 %321 
                                         f32 %506 = OpLoad %505 
                                         f32 %507 = OpFAdd %504 %506 
                                 Output f32* %508 = OpAccessChain vs_TEXCOORD1 %173 
                                                      OpStore %508 %507 
                                 Output f32* %509 = OpAccessChain %118 %45 %114 
                                         f32 %510 = OpLoad %509 
                                         f32 %511 = OpFNegate %510 
                                 Output f32* %512 = OpAccessChain %118 %45 %114 
                                                      OpStore %512 %511 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 52
; Schema: 0
                                             OpCapability Shader 
                                      %1 = OpExtInstImport "GLSL.std.450" 
                                             OpMemoryModel Logical GLSL450 
                                             OpEntryPoint Fragment %4 "main" %21 %30 %45 %48 
                                             OpExecutionMode %4 OriginUpperLeft 
                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                             OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                             OpDecorate %11 DescriptorSet 11 
                                             OpDecorate %11 Binding 11 
                                             OpDecorate %15 DescriptorSet 15 
                                             OpDecorate %15 Binding 15 
                                             OpDecorate vs_TEXCOORD0 Location 21 
                                             OpDecorate vs_TEXCOORD1 Location 30 
                                             OpDecorate %45 Location 45 
                                             OpDecorate %48 Location 48 
                                      %2 = OpTypeVoid 
                                      %3 = OpTypeFunction %2 
                                      %6 = OpTypeFloat 32 
                                      %7 = OpTypePointer Private %6 
                         Private f32* %8 = OpVariable Private 
                                      %9 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                     %10 = OpTypePointer UniformConstant %9 
UniformConstant read_only Texture2D* %11 = OpVariable UniformConstant 
                                     %13 = OpTypeSampler 
                                     %14 = OpTypePointer UniformConstant %13 
            UniformConstant sampler* %15 = OpVariable UniformConstant 
                                     %17 = OpTypeSampledImage %9 
                                     %19 = OpTypeVector %6 4 
                                     %20 = OpTypePointer Input %19 
               Input f32_4* vs_TEXCOORD0 = OpVariable Input 
                                     %22 = OpTypeVector %6 2 
                                     %26 = OpTypeInt 32 0 
                                 u32 %27 = OpConstant 3 
               Input f32_4* vs_TEXCOORD1 = OpVariable Input 
                                 u32 %31 = OpConstant 0 
                                     %32 = OpTypePointer Input %6 
                                 f32 %41 = OpConstant 3.674022E-40 
                                 f32 %42 = OpConstant 3.674022E-40 
                                     %44 = OpTypePointer Output %19 
                       Output f32_4* %45 = OpVariable Output 
                        Input f32_4* %48 = OpVariable Input 
                                 void %4 = OpFunction None %3 
                                      %5 = OpLabel 
                 read_only Texture2D %12 = OpLoad %11 
                             sampler %16 = OpLoad %15 
          read_only Texture2DSampled %18 = OpSampledImage %12 %16 
                               f32_4 %23 = OpLoad vs_TEXCOORD0 
                               f32_2 %24 = OpVectorShuffle %23 %23 0 1 
                               f32_4 %25 = OpImageSampleImplicitLod %18 %24 
                                 f32 %28 = OpCompositeExtract %25 3 
                                             OpStore %8 %28 
                                 f32 %29 = OpLoad %8 
                          Input f32* %33 = OpAccessChain vs_TEXCOORD1 %31 
                                 f32 %34 = OpLoad %33 
                                 f32 %35 = OpFMul %29 %34 
                          Input f32* %36 = OpAccessChain vs_TEXCOORD1 %27 
                                 f32 %37 = OpLoad %36 
                                 f32 %38 = OpFNegate %37 
                                 f32 %39 = OpFAdd %35 %38 
                                             OpStore %8 %39 
                                 f32 %40 = OpLoad %8 
                                 f32 %43 = OpExtInst %1 43 %40 %41 %42 
                                             OpStore %8 %43 
                                 f32 %46 = OpLoad %8 
                               f32_4 %47 = OpCompositeConstruct %46 %46 %46 %46 
                               f32_4 %49 = OpLoad %48 
                               f32_4 %50 = OpFMul %47 %49 
                                             OpStore %45 %50 
                                             OpReturn
                                             OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "OUTLINE_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "OUTLINE_ON" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _FaceColor;
uniform 	float _FaceDilate;
uniform 	float _OutlineSoftness;
uniform 	vec4 _OutlineColor;
uniform 	float _OutlineWidth;
uniform 	float _WeightNormal;
uniform 	float _WeightBold;
uniform 	float _ScaleRatioA;
uniform 	float _VertexOffsetX;
uniform 	float _VertexOffsetY;
uniform 	vec4 _ClipRect;
uniform 	float _MaskSoftnessX;
uniform 	float _MaskSoftnessY;
uniform 	float _GradientScale;
uniform 	float _ScaleX;
uniform 	float _ScaleY;
uniform 	float _PerspectiveFilter;
uniform 	float _Sharpness;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_COLOR0;
in  vec2 in_TEXCOORD0;
in  vec2 in_TEXCOORD1;
out vec4 vs_COLOR0;
out vec4 vs_COLOR1;
out vec4 vs_TEXCOORD0;
out vec4 vs_TEXCOORD1;
out vec4 vs_TEXCOORD2;
vec2 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
float u_xlat5;
vec2 u_xlat6;
float u_xlat10;
float u_xlat11;
float u_xlat15;
bool u_xlatb15;
void main()
{
    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
    gl_Position = u_xlat2;
    u_xlat3 = in_COLOR0 * _FaceColor;
    u_xlat3.xyz = u_xlat3.www * u_xlat3.xyz;
    vs_COLOR0 = u_xlat3;
    u_xlat4.w = in_COLOR0.w * _OutlineColor.w;
    u_xlat4.xyz = u_xlat4.www * _OutlineColor.xyz;
    u_xlat4 = (-u_xlat3) + u_xlat4;
    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat10 = inversesqrt(u_xlat10);
    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat10 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat10 = inversesqrt(u_xlat10);
    u_xlat2.xyz = vec3(u_xlat10) * u_xlat2.xyz;
    u_xlat10 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat1.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;
    u_xlat1.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat1.xy;
    u_xlat1.xy = abs(u_xlat1.xy) * vec2(_ScaleX, _ScaleY);
    u_xlat1.xy = u_xlat2.ww / u_xlat1.xy;
    u_xlat15 = dot(u_xlat1.xy, u_xlat1.xy);
    u_xlat1.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) * vec2(0.25, 0.25) + u_xlat1.xy;
    vs_TEXCOORD2.zw = vec2(0.25, 0.25) / u_xlat1.xy;
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.x = abs(in_TEXCOORD1.y) * _GradientScale;
    u_xlat6.x = _Sharpness + 1.0;
    u_xlat1.x = u_xlat6.x * u_xlat1.x;
    u_xlat6.x = u_xlat15 * u_xlat1.x;
    u_xlat11 = (-_PerspectiveFilter) + 1.0;
    u_xlat11 = u_xlat11 * abs(u_xlat6.x);
    u_xlat15 = u_xlat15 * u_xlat1.x + (-u_xlat11);
    u_xlat10 = abs(u_xlat10) * u_xlat15 + u_xlat11;
    u_xlatb15 = hlslcc_mtx4x4glstate_matrix_projection[3].w==0.0;
    u_xlat10 = (u_xlatb15) ? u_xlat10 : u_xlat6.x;
    u_xlat15 = _OutlineSoftness * _ScaleRatioA;
    u_xlat15 = u_xlat15 * u_xlat10 + 1.0;
    u_xlat1.x = u_xlat10 / u_xlat15;
    u_xlat10 = _OutlineWidth * _ScaleRatioA;
    u_xlat10 = u_xlat10 * 0.5;
    u_xlat15 = u_xlat1.x * u_xlat10;
    u_xlat15 = u_xlat15 + u_xlat15;
    u_xlat15 = min(u_xlat15, 1.0);
    u_xlat15 = sqrt(u_xlat15);
    vs_COLOR1 = vec4(u_xlat15) * u_xlat4 + u_xlat3;
    u_xlat2 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));
    u_xlat2 = min(u_xlat2, vec4(2e+10, 2e+10, 2e+10, 2e+10));
    u_xlat6.xy = u_xlat0.xy + (-u_xlat2.xy);
    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + (-u_xlat2.xy);
    vs_TEXCOORD2.xy = (-u_xlat2.zw) + u_xlat0.xy;
    u_xlat0.xy = (-u_xlat2.xy) + u_xlat2.zw;
    vs_TEXCOORD0.zw = u_xlat6.xy / u_xlat0.xy;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlatb0 = 0.0>=in_TEXCOORD1.y;
    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);
    u_xlat5 = (-_WeightNormal) + _WeightBold;
    u_xlat0.x = u_xlat0.x * u_xlat5 + _WeightNormal;
    u_xlat0.x = u_xlat0.x * 0.25 + _FaceDilate;
    u_xlat0.x = u_xlat0.x * _ScaleRatioA;
    u_xlat0.x = (-u_xlat0.x) * 0.5 + 0.5;
    u_xlat1.w = u_xlat0.x * u_xlat1.x + -0.5;
    vs_TEXCOORD1.y = (-u_xlat10) * u_xlat1.x + u_xlat1.w;
    vs_TEXCOORD1.z = u_xlat10 * u_xlat1.x + u_xlat1.w;
    vs_TEXCOORD1.xw = u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
in  vec4 vs_COLOR0;
in  vec4 vs_COLOR1;
in  vec4 vs_TEXCOORD0;
in  vec4 vs_TEXCOORD1;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = vs_COLOR0 + (-vs_COLOR1);
    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1.xy = u_xlat1.ww * vs_TEXCOORD1.xx + (-vs_TEXCOORD1.zy);
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
    u_xlat0 = u_xlat1.xxxx * u_xlat0 + vs_COLOR1;
    SV_Target0 = u_xlat1.yyyy * u_xlat0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "OUTLINE_ON" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 514
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %12 %118 %122 %135 %154 %257 %266 %384 %427 %433 %490 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpDecorate %12 Location 12 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpDecorate %19 ArrayStride 19 
                                                      OpDecorate %20 ArrayStride 20 
                                                      OpDecorate %21 ArrayStride 21 
                                                      OpMemberDecorate %22 0 Offset 22 
                                                      OpMemberDecorate %22 1 Offset 22 
                                                      OpMemberDecorate %22 2 Offset 22 
                                                      OpMemberDecorate %22 3 Offset 22 
                                                      OpMemberDecorate %22 4 Offset 22 
                                                      OpMemberDecorate %22 5 Offset 22 
                                                      OpMemberDecorate %22 6 Offset 22 
                                                      OpMemberDecorate %22 7 Offset 22 
                                                      OpMemberDecorate %22 8 Offset 22 
                                                      OpMemberDecorate %22 9 Offset 22 
                                                      OpMemberDecorate %22 10 Offset 22 
                                                      OpMemberDecorate %22 11 Offset 22 
                                                      OpMemberDecorate %22 12 Offset 22 
                                                      OpMemberDecorate %22 13 Offset 22 
                                                      OpMemberDecorate %22 14 Offset 22 
                                                      OpMemberDecorate %22 15 Offset 22 
                                                      OpMemberDecorate %22 16 Offset 22 
                                                      OpMemberDecorate %22 17 Offset 22 
                                                      OpMemberDecorate %22 18 Offset 22 
                                                      OpMemberDecorate %22 19 Offset 22 
                                                      OpMemberDecorate %22 20 Offset 22 
                                                      OpMemberDecorate %22 21 Offset 22 
                                                      OpMemberDecorate %22 22 Offset 22 
                                                      OpMemberDecorate %22 23 Offset 22 
                                                      OpDecorate %22 Block 
                                                      OpDecorate %24 DescriptorSet 24 
                                                      OpDecorate %24 Binding 24 
                                                      OpMemberDecorate %116 0 BuiltIn 116 
                                                      OpMemberDecorate %116 1 BuiltIn 116 
                                                      OpMemberDecorate %116 2 BuiltIn 116 
                                                      OpDecorate %116 Block 
                                                      OpDecorate %122 Location 122 
                                                      OpDecorate %135 Location 135 
                                                      OpDecorate %154 Location 154 
                                                      OpDecorate vs_TEXCOORD2 Location 257 
                                                      OpDecorate %266 Location 266 
                                                      OpDecorate %384 Location 384 
                                                      OpDecorate vs_TEXCOORD0 Location 427 
                                                      OpDecorate %433 Location 433 
                                                      OpDecorate vs_TEXCOORD1 Location 490 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 2 
                                               %8 = OpTypePointer Private %7 
                                Private f32_2* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 4 
                                              %11 = OpTypePointer Input %10 
                                 Input f32_4* %12 = OpVariable Input 
                                              %15 = OpTypeVector %6 3 
                                              %16 = OpTypeInt 32 0 
                                          u32 %17 = OpConstant 4 
                                              %18 = OpTypeArray %10 %17 
                                              %19 = OpTypeArray %10 %17 
                                              %20 = OpTypeArray %10 %17 
                                              %21 = OpTypeArray %10 %17 
                                              %22 = OpTypeStruct %15 %10 %18 %19 %20 %21 %10 %6 %6 %10 %6 %6 %6 %6 %6 %6 %10 %6 %6 %6 %6 %6 %6 %6 
                                              %23 = OpTypePointer Uniform %22 
Uniform struct {f32_3; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4[4]; f32_4; f32; f32; f32_4; f32; f32; f32; f32; f32; f32; f32_4; f32; f32; f32; f32; f32; f32; f32;}* %24 = OpVariable Uniform 
                                              %25 = OpTypeInt 32 1 
                                          i32 %26 = OpConstant 14 
                                              %27 = OpTypePointer Uniform %6 
                                          i32 %30 = OpConstant 15 
                                              %35 = OpTypePointer Private %10 
                               Private f32_4* %36 = OpVariable Private 
                                          i32 %39 = OpConstant 2 
                                          i32 %40 = OpConstant 1 
                                              %41 = OpTypePointer Uniform %10 
                                          i32 %45 = OpConstant 0 
                               Private f32_4* %60 = OpVariable Private 
                                          i32 %62 = OpConstant 3 
                                              %80 = OpTypePointer Uniform %15 
                               Private f32_4* %86 = OpVariable Private 
                                          i32 %89 = OpConstant 5 
                                         u32 %114 = OpConstant 1 
                                             %115 = OpTypeArray %6 %114 
                                             %116 = OpTypeStruct %10 %6 %115 
                                             %117 = OpTypePointer Output %116 
        Output struct {f32_4; f32; f32[1];}* %118 = OpVariable Output 
                                             %120 = OpTypePointer Output %10 
                                Input f32_4* %122 = OpVariable Input 
                                         i32 %124 = OpConstant 6 
                               Output f32_4* %135 = OpVariable Output 
                                             %137 = OpTypePointer Private %6 
                                Private f32* %138 = OpVariable Private 
                                             %153 = OpTypePointer Input %15 
                                Input f32_3* %154 = OpVariable Input 
                                         u32 %160 = OpConstant 0 
                                         u32 %173 = OpConstant 2 
                                         i32 %197 = OpConstant 4 
                                         i32 %219 = OpConstant 20 
                                         i32 %222 = OpConstant 21 
                                Private f32* %236 = OpVariable Private 
                                         i32 %242 = OpConstant 17 
                                         i32 %245 = OpConstant 18 
                                         f32 %249 = OpConstant 3.674022E-40 
                                       f32_2 %250 = OpConstantComposite %249 %249 
                       Output f32_4* vs_TEXCOORD2 = OpVariable Output 
                                             %265 = OpTypePointer Input %7 
                                Input f32_2* %266 = OpVariable Input 
                                             %267 = OpTypePointer Input %6 
                                         i32 %271 = OpConstant 19 
                              Private f32_2* %276 = OpVariable Private 
                                         i32 %277 = OpConstant 23 
                                         f32 %280 = OpConstant 3.674022E-40 
                                Private f32* %294 = OpVariable Private 
                                         i32 %295 = OpConstant 22 
                                             %318 = OpTypeBool 
                                             %319 = OpTypePointer Private %318 
                               Private bool* %320 = OpVariable Private 
                                         u32 %321 = OpConstant 3 
                                         f32 %324 = OpConstant 3.674022E-40 
                                             %327 = OpTypePointer Function %6 
                                         i32 %336 = OpConstant 8 
                                         i32 %339 = OpConstant 13 
                                         i32 %351 = OpConstant 10 
                                         i32 %367 = OpConstant 9 
                               Output f32_4* %384 = OpVariable Output 
                                         i32 %391 = OpConstant 16 
                                         f32 %394 = OpConstant 3.674022E-40 
                                       f32_4 %395 = OpConstantComposite %394 %394 %394 %394 
                                         f32 %398 = OpConstant 3.674022E-40 
                                       f32_4 %399 = OpConstantComposite %398 %398 %398 %398 
                                         f32 %407 = OpConstant 3.674022E-40 
                                       f32_2 %408 = OpConstantComposite %407 %407 
                       Output f32_4* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_2* %433 = OpVariable Input 
                               Private bool* %437 = OpVariable Private 
                                Private f32* %444 = OpVariable Private 
                                         i32 %445 = OpConstant 11 
                                         i32 %449 = OpConstant 12 
                                         i32 %464 = OpConstant 7 
                                         f32 %478 = OpConstant 3.674022E-40 
                                         f32 %487 = OpConstant 3.674022E-40 
                       Output f32_4* vs_TEXCOORD1 = OpVariable Output 
                                             %501 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                               Function f32* %328 = OpVariable Function 
                                        f32_4 %13 = OpLoad %12 
                                        f32_2 %14 = OpVectorShuffle %13 %13 0 1 
                                 Uniform f32* %28 = OpAccessChain %24 %26 
                                          f32 %29 = OpLoad %28 
                                 Uniform f32* %31 = OpAccessChain %24 %30 
                                          f32 %32 = OpLoad %31 
                                        f32_2 %33 = OpCompositeConstruct %29 %32 
                                        f32_2 %34 = OpFAdd %14 %33 
                                                      OpStore %9 %34 
                                        f32_2 %37 = OpLoad %9 
                                        f32_4 %38 = OpVectorShuffle %37 %37 1 1 1 1 
                               Uniform f32_4* %42 = OpAccessChain %24 %39 %40 
                                        f32_4 %43 = OpLoad %42 
                                        f32_4 %44 = OpFMul %38 %43 
                                                      OpStore %36 %44 
                               Uniform f32_4* %46 = OpAccessChain %24 %39 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_2 %48 = OpLoad %9 
                                        f32_4 %49 = OpVectorShuffle %48 %48 0 0 0 0 
                                        f32_4 %50 = OpFMul %47 %49 
                                        f32_4 %51 = OpLoad %36 
                                        f32_4 %52 = OpFAdd %50 %51 
                                                      OpStore %36 %52 
                               Uniform f32_4* %53 = OpAccessChain %24 %39 %39 
                                        f32_4 %54 = OpLoad %53 
                                        f32_4 %55 = OpLoad %12 
                                        f32_4 %56 = OpVectorShuffle %55 %55 2 2 2 2 
                                        f32_4 %57 = OpFMul %54 %56 
                                        f32_4 %58 = OpLoad %36 
                                        f32_4 %59 = OpFAdd %57 %58 
                                                      OpStore %36 %59 
                                        f32_4 %61 = OpLoad %36 
                               Uniform f32_4* %63 = OpAccessChain %24 %39 %62 
                                        f32_4 %64 = OpLoad %63 
                                        f32_4 %65 = OpFAdd %61 %64 
                                                      OpStore %60 %65 
                               Uniform f32_4* %66 = OpAccessChain %24 %39 %62 
                                        f32_4 %67 = OpLoad %66 
                                        f32_3 %68 = OpVectorShuffle %67 %67 0 1 2 
                                        f32_4 %69 = OpLoad %12 
                                        f32_3 %70 = OpVectorShuffle %69 %69 3 3 3 
                                        f32_3 %71 = OpFMul %68 %70 
                                        f32_4 %72 = OpLoad %36 
                                        f32_3 %73 = OpVectorShuffle %72 %72 0 1 2 
                                        f32_3 %74 = OpFAdd %71 %73 
                                        f32_4 %75 = OpLoad %36 
                                        f32_4 %76 = OpVectorShuffle %75 %74 4 5 6 3 
                                                      OpStore %36 %76 
                                        f32_4 %77 = OpLoad %36 
                                        f32_3 %78 = OpVectorShuffle %77 %77 0 1 2 
                                        f32_3 %79 = OpFNegate %78 
                               Uniform f32_3* %81 = OpAccessChain %24 %45 
                                        f32_3 %82 = OpLoad %81 
                                        f32_3 %83 = OpFAdd %79 %82 
                                        f32_4 %84 = OpLoad %36 
                                        f32_4 %85 = OpVectorShuffle %84 %83 4 5 6 3 
                                                      OpStore %36 %85 
                                        f32_4 %87 = OpLoad %60 
                                        f32_4 %88 = OpVectorShuffle %87 %87 1 1 1 1 
                               Uniform f32_4* %90 = OpAccessChain %24 %89 %40 
                                        f32_4 %91 = OpLoad %90 
                                        f32_4 %92 = OpFMul %88 %91 
                                                      OpStore %86 %92 
                               Uniform f32_4* %93 = OpAccessChain %24 %89 %45 
                                        f32_4 %94 = OpLoad %93 
                                        f32_4 %95 = OpLoad %60 
                                        f32_4 %96 = OpVectorShuffle %95 %95 0 0 0 0 
                                        f32_4 %97 = OpFMul %94 %96 
                                        f32_4 %98 = OpLoad %86 
                                        f32_4 %99 = OpFAdd %97 %98 
                                                      OpStore %86 %99 
                              Uniform f32_4* %100 = OpAccessChain %24 %89 %39 
                                       f32_4 %101 = OpLoad %100 
                                       f32_4 %102 = OpLoad %60 
                                       f32_4 %103 = OpVectorShuffle %102 %102 2 2 2 2 
                                       f32_4 %104 = OpFMul %101 %103 
                                       f32_4 %105 = OpLoad %86 
                                       f32_4 %106 = OpFAdd %104 %105 
                                                      OpStore %86 %106 
                              Uniform f32_4* %107 = OpAccessChain %24 %89 %62 
                                       f32_4 %108 = OpLoad %107 
                                       f32_4 %109 = OpLoad %60 
                                       f32_4 %110 = OpVectorShuffle %109 %109 3 3 3 3 
                                       f32_4 %111 = OpFMul %108 %110 
                                       f32_4 %112 = OpLoad %86 
                                       f32_4 %113 = OpFAdd %111 %112 
                                                      OpStore %60 %113 
                                       f32_4 %119 = OpLoad %60 
                               Output f32_4* %121 = OpAccessChain %118 %45 
                                                      OpStore %121 %119 
                                       f32_4 %123 = OpLoad %122 
                              Uniform f32_4* %125 = OpAccessChain %24 %124 
                                       f32_4 %126 = OpLoad %125 
                                       f32_4 %127 = OpFMul %123 %126 
                                                      OpStore %86 %127 
                                       f32_4 %128 = OpLoad %86 
                                       f32_3 %129 = OpVectorShuffle %128 %128 3 3 3 
                                       f32_4 %130 = OpLoad %86 
                                       f32_3 %131 = OpVectorShuffle %130 %130 0 1 2 
                                       f32_3 %132 = OpFMul %129 %131 
                                       f32_4 %133 = OpLoad %86 
                                       f32_4 %134 = OpVectorShuffle %133 %132 4 5 6 3 
                                                      OpStore %86 %134 
                                       f32_4 %136 = OpLoad %86 
                                                      OpStore %135 %136 
                                       f32_4 %139 = OpLoad %36 
                                       f32_3 %140 = OpVectorShuffle %139 %139 0 1 2 
                                       f32_4 %141 = OpLoad %36 
                                       f32_3 %142 = OpVectorShuffle %141 %141 0 1 2 
                                         f32 %143 = OpDot %140 %142 
                                                      OpStore %138 %143 
                                         f32 %144 = OpLoad %138 
                                         f32 %145 = OpExtInst %1 32 %144 
                                                      OpStore %138 %145 
                                         f32 %146 = OpLoad %138 
                                       f32_3 %147 = OpCompositeConstruct %146 %146 %146 
                                       f32_4 %148 = OpLoad %36 
                                       f32_3 %149 = OpVectorShuffle %148 %148 0 1 2 
                                       f32_3 %150 = OpFMul %147 %149 
                                       f32_4 %151 = OpLoad %36 
                                       f32_4 %152 = OpVectorShuffle %151 %150 4 5 6 3 
                                                      OpStore %36 %152 
                                       f32_3 %155 = OpLoad %154 
                              Uniform f32_4* %156 = OpAccessChain %24 %62 %45 
                                       f32_4 %157 = OpLoad %156 
                                       f32_3 %158 = OpVectorShuffle %157 %157 0 1 2 
                                         f32 %159 = OpDot %155 %158 
                                Private f32* %161 = OpAccessChain %60 %160 
                                                      OpStore %161 %159 
                                       f32_3 %162 = OpLoad %154 
                              Uniform f32_4* %163 = OpAccessChain %24 %62 %40 
                                       f32_4 %164 = OpLoad %163 
                                       f32_3 %165 = OpVectorShuffle %164 %164 0 1 2 
                                         f32 %166 = OpDot %162 %165 
                                Private f32* %167 = OpAccessChain %60 %114 
                                                      OpStore %167 %166 
                                       f32_3 %168 = OpLoad %154 
                              Uniform f32_4* %169 = OpAccessChain %24 %62 %39 
                                       f32_4 %170 = OpLoad %169 
                                       f32_3 %171 = OpVectorShuffle %170 %170 0 1 2 
                                         f32 %172 = OpDot %168 %171 
                                Private f32* %174 = OpAccessChain %60 %173 
                                                      OpStore %174 %172 
                                       f32_4 %175 = OpLoad %60 
                                       f32_3 %176 = OpVectorShuffle %175 %175 0 1 2 
                                       f32_4 %177 = OpLoad %60 
                                       f32_3 %178 = OpVectorShuffle %177 %177 0 1 2 
                                         f32 %179 = OpDot %176 %178 
                                                      OpStore %138 %179 
                                         f32 %180 = OpLoad %138 
                                         f32 %181 = OpExtInst %1 32 %180 
                                                      OpStore %138 %181 
                                         f32 %182 = OpLoad %138 
                                       f32_3 %183 = OpCompositeConstruct %182 %182 %182 
                                       f32_4 %184 = OpLoad %60 
                                       f32_3 %185 = OpVectorShuffle %184 %184 0 1 2 
                                       f32_3 %186 = OpFMul %183 %185 
                                       f32_4 %187 = OpLoad %60 
                                       f32_4 %188 = OpVectorShuffle %187 %186 4 5 6 3 
                                                      OpStore %60 %188 
                                       f32_4 %189 = OpLoad %60 
                                       f32_3 %190 = OpVectorShuffle %189 %189 0 1 2 
                                       f32_4 %191 = OpLoad %36 
                                       f32_3 %192 = OpVectorShuffle %191 %191 0 1 2 
                                         f32 %193 = OpDot %190 %192 
                                                      OpStore %138 %193 
                              Uniform f32_4* %194 = OpAccessChain %24 %40 
                                       f32_4 %195 = OpLoad %194 
                                       f32_2 %196 = OpVectorShuffle %195 %195 1 1 
                              Uniform f32_4* %198 = OpAccessChain %24 %197 %40 
                                       f32_4 %199 = OpLoad %198 
                                       f32_2 %200 = OpVectorShuffle %199 %199 0 1 
                                       f32_2 %201 = OpFMul %196 %200 
                                       f32_4 %202 = OpLoad %36 
                                       f32_4 %203 = OpVectorShuffle %202 %201 4 5 2 3 
                                                      OpStore %36 %203 
                              Uniform f32_4* %204 = OpAccessChain %24 %197 %45 
                                       f32_4 %205 = OpLoad %204 
                                       f32_2 %206 = OpVectorShuffle %205 %205 0 1 
                              Uniform f32_4* %207 = OpAccessChain %24 %40 
                                       f32_4 %208 = OpLoad %207 
                                       f32_2 %209 = OpVectorShuffle %208 %208 0 0 
                                       f32_2 %210 = OpFMul %206 %209 
                                       f32_4 %211 = OpLoad %36 
                                       f32_2 %212 = OpVectorShuffle %211 %211 0 1 
                                       f32_2 %213 = OpFAdd %210 %212 
                                       f32_4 %214 = OpLoad %36 
                                       f32_4 %215 = OpVectorShuffle %214 %213 4 5 2 3 
                                                      OpStore %36 %215 
                                       f32_4 %216 = OpLoad %36 
                                       f32_2 %217 = OpVectorShuffle %216 %216 0 1 
                                       f32_2 %218 = OpExtInst %1 4 %217 
                                Uniform f32* %220 = OpAccessChain %24 %219 
                                         f32 %221 = OpLoad %220 
                                Uniform f32* %223 = OpAccessChain %24 %222 
                                         f32 %224 = OpLoad %223 
                                       f32_2 %225 = OpCompositeConstruct %221 %224 
                                       f32_2 %226 = OpFMul %218 %225 
                                       f32_4 %227 = OpLoad %36 
                                       f32_4 %228 = OpVectorShuffle %227 %226 4 5 2 3 
                                                      OpStore %36 %228 
                                       f32_4 %229 = OpLoad %60 
                                       f32_2 %230 = OpVectorShuffle %229 %229 3 3 
                                       f32_4 %231 = OpLoad %36 
                                       f32_2 %232 = OpVectorShuffle %231 %231 0 1 
                                       f32_2 %233 = OpFDiv %230 %232 
                                       f32_4 %234 = OpLoad %36 
                                       f32_4 %235 = OpVectorShuffle %234 %233 4 5 2 3 
                                                      OpStore %36 %235 
                                       f32_4 %237 = OpLoad %36 
                                       f32_2 %238 = OpVectorShuffle %237 %237 0 1 
                                       f32_4 %239 = OpLoad %36 
                                       f32_2 %240 = OpVectorShuffle %239 %239 0 1 
                                         f32 %241 = OpDot %238 %240 
                                                      OpStore %236 %241 
                                Uniform f32* %243 = OpAccessChain %24 %242 
                                         f32 %244 = OpLoad %243 
                                Uniform f32* %246 = OpAccessChain %24 %245 
                                         f32 %247 = OpLoad %246 
                                       f32_2 %248 = OpCompositeConstruct %244 %247 
                                       f32_2 %251 = OpFMul %248 %250 
                                       f32_4 %252 = OpLoad %36 
                                       f32_2 %253 = OpVectorShuffle %252 %252 0 1 
                                       f32_2 %254 = OpFAdd %251 %253 
                                       f32_4 %255 = OpLoad %36 
                                       f32_4 %256 = OpVectorShuffle %255 %254 4 5 2 3 
                                                      OpStore %36 %256 
                                       f32_4 %258 = OpLoad %36 
                                       f32_2 %259 = OpVectorShuffle %258 %258 0 1 
                                       f32_2 %260 = OpFDiv %250 %259 
                                       f32_4 %261 = OpLoad vs_TEXCOORD2 
                                       f32_4 %262 = OpVectorShuffle %261 %260 0 1 4 5 
                                                      OpStore vs_TEXCOORD2 %262 
                                         f32 %263 = OpLoad %236 
                                         f32 %264 = OpExtInst %1 32 %263 
                                                      OpStore %236 %264 
                                  Input f32* %268 = OpAccessChain %266 %114 
                                         f32 %269 = OpLoad %268 
                                         f32 %270 = OpExtInst %1 4 %269 
                                Uniform f32* %272 = OpAccessChain %24 %271 
                                         f32 %273 = OpLoad %272 
                                         f32 %274 = OpFMul %270 %273 
                                Private f32* %275 = OpAccessChain %36 %160 
                                                      OpStore %275 %274 
                                Uniform f32* %278 = OpAccessChain %24 %277 
                                         f32 %279 = OpLoad %278 
                                         f32 %281 = OpFAdd %279 %280 
                                Private f32* %282 = OpAccessChain %276 %160 
                                                      OpStore %282 %281 
                                Private f32* %283 = OpAccessChain %276 %160 
                                         f32 %284 = OpLoad %283 
                                Private f32* %285 = OpAccessChain %36 %160 
                                         f32 %286 = OpLoad %285 
                                         f32 %287 = OpFMul %284 %286 
                                Private f32* %288 = OpAccessChain %36 %160 
                                                      OpStore %288 %287 
                                         f32 %289 = OpLoad %236 
                                Private f32* %290 = OpAccessChain %36 %160 
                                         f32 %291 = OpLoad %290 
                                         f32 %292 = OpFMul %289 %291 
                                Private f32* %293 = OpAccessChain %276 %160 
                                                      OpStore %293 %292 
                                Uniform f32* %296 = OpAccessChain %24 %295 
                                         f32 %297 = OpLoad %296 
                                         f32 %298 = OpFNegate %297 
                                         f32 %299 = OpFAdd %298 %280 
                                                      OpStore %294 %299 
                                         f32 %300 = OpLoad %294 
                                Private f32* %301 = OpAccessChain %276 %160 
                                         f32 %302 = OpLoad %301 
                                         f32 %303 = OpExtInst %1 4 %302 
                                         f32 %304 = OpFMul %300 %303 
                                                      OpStore %294 %304 
                                         f32 %305 = OpLoad %236 
                                Private f32* %306 = OpAccessChain %36 %160 
                                         f32 %307 = OpLoad %306 
                                         f32 %308 = OpFMul %305 %307 
                                         f32 %309 = OpLoad %294 
                                         f32 %310 = OpFNegate %309 
                                         f32 %311 = OpFAdd %308 %310 
                                                      OpStore %236 %311 
                                         f32 %312 = OpLoad %138 
                                         f32 %313 = OpExtInst %1 4 %312 
                                         f32 %314 = OpLoad %236 
                                         f32 %315 = OpFMul %313 %314 
                                         f32 %316 = OpLoad %294 
                                         f32 %317 = OpFAdd %315 %316 
                                                      OpStore %138 %317 
                                Uniform f32* %322 = OpAccessChain %24 %197 %62 %321 
                                         f32 %323 = OpLoad %322 
                                        bool %325 = OpFOrdEqual %323 %324 
                                                      OpStore %320 %325 
                                        bool %326 = OpLoad %320 
                                                      OpSelectionMerge %330 None 
                                                      OpBranchConditional %326 %329 %332 
                                             %329 = OpLabel 
                                         f32 %331 = OpLoad %138 
                                                      OpStore %328 %331 
                                                      OpBranch %330 
                                             %332 = OpLabel 
                                Private f32* %333 = OpAccessChain %276 %160 
                                         f32 %334 = OpLoad %333 
                                                      OpStore %328 %334 
                                                      OpBranch %330 
                                             %330 = OpLabel 
                                         f32 %335 = OpLoad %328 
                                                      OpStore %138 %335 
                                Uniform f32* %337 = OpAccessChain %24 %336 
                                         f32 %338 = OpLoad %337 
                                Uniform f32* %340 = OpAccessChain %24 %339 
                                         f32 %341 = OpLoad %340 
                                         f32 %342 = OpFMul %338 %341 
                                                      OpStore %236 %342 
                                         f32 %343 = OpLoad %236 
                                         f32 %344 = OpLoad %138 
                                         f32 %345 = OpFMul %343 %344 
                                         f32 %346 = OpFAdd %345 %280 
                                                      OpStore %236 %346 
                                         f32 %347 = OpLoad %138 
                                         f32 %348 = OpLoad %236 
                                         f32 %349 = OpFDiv %347 %348 
                                Private f32* %350 = OpAccessChain %36 %160 
                                                      OpStore %350 %349 
                                Uniform f32* %352 = OpAccessChain %24 %351 
                                         f32 %353 = OpLoad %352 
                                Uniform f32* %354 = OpAccessChain %24 %339 
                                         f32 %355 = OpLoad %354 
                                         f32 %356 = OpFMul %353 %355 
                                                      OpStore %138 %356 
                                Private f32* %357 = OpAccessChain %36 %160 
                                         f32 %358 = OpLoad %357 
                                         f32 %359 = OpLoad %138 
                                         f32 %360 = OpFMul %358 %359 
                                                      OpStore %138 %360 
                                         f32 %361 = OpLoad %138 
                                         f32 %362 = OpExtInst %1 37 %361 %280 
                                                      OpStore %236 %362 
                                         f32 %363 = OpLoad %236 
                                         f32 %364 = OpExtInst %1 31 %363 
                                                      OpStore %236 %364 
                                  Input f32* %365 = OpAccessChain %122 %321 
                                         f32 %366 = OpLoad %365 
                                Uniform f32* %368 = OpAccessChain %24 %367 %321 
                                         f32 %369 = OpLoad %368 
                                         f32 %370 = OpFMul %366 %369 
                                Private f32* %371 = OpAccessChain %60 %321 
                                                      OpStore %371 %370 
                                       f32_4 %372 = OpLoad %60 
                                       f32_3 %373 = OpVectorShuffle %372 %372 3 3 3 
                              Uniform f32_4* %374 = OpAccessChain %24 %367 
                                       f32_4 %375 = OpLoad %374 
                                       f32_3 %376 = OpVectorShuffle %375 %375 0 1 2 
                                       f32_3 %377 = OpFMul %373 %376 
                                       f32_4 %378 = OpLoad %60 
                                       f32_4 %379 = OpVectorShuffle %378 %377 4 5 6 3 
                                                      OpStore %60 %379 
                                       f32_4 %380 = OpLoad %86 
                                       f32_4 %381 = OpFNegate %380 
                                       f32_4 %382 = OpLoad %60 
                                       f32_4 %383 = OpFAdd %381 %382 
                                                      OpStore %60 %383 
                                         f32 %385 = OpLoad %236 
                                       f32_4 %386 = OpCompositeConstruct %385 %385 %385 %385 
                                       f32_4 %387 = OpLoad %60 
                                       f32_4 %388 = OpFMul %386 %387 
                                       f32_4 %389 = OpLoad %86 
                                       f32_4 %390 = OpFAdd %388 %389 
                                                      OpStore %384 %390 
                              Uniform f32_4* %392 = OpAccessChain %24 %391 
                                       f32_4 %393 = OpLoad %392 
                                       f32_4 %396 = OpExtInst %1 40 %393 %395 
                                                      OpStore %60 %396 
                                       f32_4 %397 = OpLoad %60 
                                       f32_4 %400 = OpExtInst %1 37 %397 %399 
                                                      OpStore %60 %400 
                                       f32_2 %401 = OpLoad %9 
                                       f32_4 %402 = OpLoad %60 
                                       f32_2 %403 = OpVectorShuffle %402 %402 0 1 
                                       f32_2 %404 = OpFNegate %403 
                                       f32_2 %405 = OpFAdd %401 %404 
                                                      OpStore %276 %405 
                                       f32_2 %406 = OpLoad %9 
                                       f32_2 %409 = OpFMul %406 %408 
                                       f32_4 %410 = OpLoad %60 
                                       f32_2 %411 = OpVectorShuffle %410 %410 0 1 
                                       f32_2 %412 = OpFNegate %411 
                                       f32_2 %413 = OpFAdd %409 %412 
                                                      OpStore %9 %413 
                                       f32_4 %414 = OpLoad %60 
                                       f32_2 %415 = OpVectorShuffle %414 %414 2 3 
                                       f32_2 %416 = OpFNegate %415 
                                       f32_2 %417 = OpLoad %9 
                                       f32_2 %418 = OpFAdd %416 %417 
                                       f32_4 %419 = OpLoad vs_TEXCOORD2 
                                       f32_4 %420 = OpVectorShuffle %419 %418 4 5 2 3 
                                                      OpStore vs_TEXCOORD2 %420 
                                       f32_4 %421 = OpLoad %60 
                                       f32_2 %422 = OpVectorShuffle %421 %421 0 1 
                                       f32_2 %423 = OpFNegate %422 
                                       f32_4 %424 = OpLoad %60 
                                       f32_2 %425 = OpVectorShuffle %424 %424 2 3 
                                       f32_2 %426 = OpFAdd %423 %425 
                                                      OpStore %9 %426 
                                       f32_2 %428 = OpLoad %276 
                                       f32_2 %429 = OpLoad %9 
                                       f32_2 %430 = OpFDiv %428 %429 
                                       f32_4 %431 = OpLoad vs_TEXCOORD0 
                                       f32_4 %432 = OpVectorShuffle %431 %430 0 1 4 5 
                                                      OpStore vs_TEXCOORD0 %432 
                                       f32_2 %434 = OpLoad %433 
                                       f32_4 %435 = OpLoad vs_TEXCOORD0 
                                       f32_4 %436 = OpVectorShuffle %435 %434 4 5 2 3 
                                                      OpStore vs_TEXCOORD0 %436 
                                  Input f32* %438 = OpAccessChain %266 %114 
                                         f32 %439 = OpLoad %438 
                                        bool %440 = OpFOrdGreaterThanEqual %324 %439 
                                                      OpStore %437 %440 
                                        bool %441 = OpLoad %437 
                                         f32 %442 = OpSelect %441 %280 %324 
                                Private f32* %443 = OpAccessChain %9 %160 
                                                      OpStore %443 %442 
                                Uniform f32* %446 = OpAccessChain %24 %445 
                                         f32 %447 = OpLoad %446 
                                         f32 %448 = OpFNegate %447 
                                Uniform f32* %450 = OpAccessChain %24 %449 
                                         f32 %451 = OpLoad %450 
                                         f32 %452 = OpFAdd %448 %451 
                                                      OpStore %444 %452 
                                Private f32* %453 = OpAccessChain %9 %160 
                                         f32 %454 = OpLoad %453 
                                         f32 %455 = OpLoad %444 
                                         f32 %456 = OpFMul %454 %455 
                                Uniform f32* %457 = OpAccessChain %24 %445 
                                         f32 %458 = OpLoad %457 
                                         f32 %459 = OpFAdd %456 %458 
                                Private f32* %460 = OpAccessChain %9 %160 
                                                      OpStore %460 %459 
                                Private f32* %461 = OpAccessChain %9 %160 
                                         f32 %462 = OpLoad %461 
                                         f32 %463 = OpFMul %462 %249 
                                Uniform f32* %465 = OpAccessChain %24 %464 
                                         f32 %466 = OpLoad %465 
                                         f32 %467 = OpFAdd %463 %466 
                                Private f32* %468 = OpAccessChain %9 %160 
                                                      OpStore %468 %467 
                                Private f32* %469 = OpAccessChain %9 %160 
                                         f32 %470 = OpLoad %469 
                                Uniform f32* %471 = OpAccessChain %24 %339 
                                         f32 %472 = OpLoad %471 
                                         f32 %473 = OpFMul %470 %472 
                                Private f32* %474 = OpAccessChain %9 %160 
                                                      OpStore %474 %473 
                                Private f32* %475 = OpAccessChain %9 %160 
                                         f32 %476 = OpLoad %475 
                                         f32 %477 = OpFNegate %476 
                                         f32 %479 = OpFMul %477 %478 
                                         f32 %480 = OpFAdd %479 %478 
                                Private f32* %481 = OpAccessChain %9 %160 
                                                      OpStore %481 %480 
                                Private f32* %482 = OpAccessChain %9 %160 
                                         f32 %483 = OpLoad %482 
                                Private f32* %484 = OpAccessChain %36 %160 
                                         f32 %485 = OpLoad %484 
                                         f32 %486 = OpFMul %483 %485 
                                         f32 %488 = OpFAdd %486 %487 
                                Private f32* %489 = OpAccessChain %36 %321 
                                                      OpStore %489 %488 
                                       f32_4 %491 = OpLoad %36 
                                       f32_2 %492 = OpVectorShuffle %491 %491 0 3 
                                       f32_4 %493 = OpLoad vs_TEXCOORD1 
                                       f32_4 %494 = OpVectorShuffle %493 %492 4 1 2 5 
                                                      OpStore vs_TEXCOORD1 %494 
                                         f32 %495 = OpLoad %138 
                                         f32 %496 = OpFNegate %495 
                                         f32 %497 = OpFMul %496 %478 
                                Private f32* %498 = OpAccessChain %36 %321 
                                         f32 %499 = OpLoad %498 
                                         f32 %500 = OpFAdd %497 %499 
                                 Output f32* %502 = OpAccessChain vs_TEXCOORD1 %114 
                                                      OpStore %502 %500 
                                         f32 %503 = OpLoad %138 
                                         f32 %504 = OpFMul %503 %478 
                                Private f32* %505 = OpAccessChain %36 %321 
                                         f32 %506 = OpLoad %505 
                                         f32 %507 = OpFAdd %504 %506 
                                 Output f32* %508 = OpAccessChain vs_TEXCOORD1 %173 
                                                      OpStore %508 %507 
                                 Output f32* %509 = OpAccessChain %118 %45 %114 
                                         f32 %510 = OpLoad %509 
                                         f32 %511 = OpFNegate %510 
                                 Output f32* %512 = OpAccessChain %118 %45 %114 
                                                      OpStore %512 %511 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 69
; Schema: 0
                                             OpCapability Shader 
                                      %1 = OpExtInstImport "GLSL.std.450" 
                                             OpMemoryModel Logical GLSL450 
                                             OpEntryPoint Fragment %4 "main" %11 %13 %30 %42 %63 
                                             OpExecutionMode %4 OriginUpperLeft 
                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                             OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                             OpDecorate %11 Location 11 
                                             OpDecorate %13 Location 13 
                                             OpDecorate %22 DescriptorSet 22 
                                             OpDecorate %22 Binding 22 
                                             OpDecorate %26 DescriptorSet 26 
                                             OpDecorate %26 Binding 26 
                                             OpDecorate vs_TEXCOORD0 Location 30 
                                             OpDecorate vs_TEXCOORD1 Location 42 
                                             OpDecorate %63 Location 63 
                                      %2 = OpTypeVoid 
                                      %3 = OpTypeFunction %2 
                                      %6 = OpTypeFloat 32 
                                      %7 = OpTypeVector %6 4 
                                      %8 = OpTypePointer Private %7 
                       Private f32_4* %9 = OpVariable Private 
                                     %10 = OpTypePointer Input %7 
                        Input f32_4* %11 = OpVariable Input 
                        Input f32_4* %13 = OpVariable Input 
                                     %17 = OpTypeVector %6 2 
                                     %18 = OpTypePointer Private %17 
                      Private f32_2* %19 = OpVariable Private 
                                     %20 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                     %21 = OpTypePointer UniformConstant %20 
UniformConstant read_only Texture2D* %22 = OpVariable UniformConstant 
                                     %24 = OpTypeSampler 
                                     %25 = OpTypePointer UniformConstant %24 
            UniformConstant sampler* %26 = OpVariable UniformConstant 
                                     %28 = OpTypeSampledImage %20 
               Input f32_4* vs_TEXCOORD0 = OpVariable Input 
                                     %34 = OpTypeInt 32 0 
                                 u32 %35 = OpConstant 3 
                                 u32 %37 = OpConstant 0 
                                     %38 = OpTypePointer Private %6 
               Input f32_4* vs_TEXCOORD1 = OpVariable Input 
                                 f32 %51 = OpConstant 3.674022E-40 
                                 f32 %52 = OpConstant 3.674022E-40 
                                     %62 = OpTypePointer Output %7 
                       Output f32_4* %63 = OpVariable Output 
                                 void %4 = OpFunction None %3 
                                      %5 = OpLabel 
                               f32_4 %12 = OpLoad %11 
                               f32_4 %14 = OpLoad %13 
                               f32_4 %15 = OpFNegate %14 
                               f32_4 %16 = OpFAdd %12 %15 
                                             OpStore %9 %16 
                 read_only Texture2D %23 = OpLoad %22 
                             sampler %27 = OpLoad %26 
          read_only Texture2DSampled %29 = OpSampledImage %23 %27 
                               f32_4 %31 = OpLoad vs_TEXCOORD0 
                               f32_2 %32 = OpVectorShuffle %31 %31 0 1 
                               f32_4 %33 = OpImageSampleImplicitLod %29 %32 
                                 f32 %36 = OpCompositeExtract %33 3 
                        Private f32* %39 = OpAccessChain %19 %37 
                                             OpStore %39 %36 
                               f32_2 %40 = OpLoad %19 
                               f32_2 %41 = OpVectorShuffle %40 %40 0 0 
                               f32_4 %43 = OpLoad vs_TEXCOORD1 
                               f32_2 %44 = OpVectorShuffle %43 %43 0 0 
                               f32_2 %45 = OpFMul %41 %44 
                               f32_4 %46 = OpLoad vs_TEXCOORD1 
                               f32_2 %47 = OpVectorShuffle %46 %46 2 1 
                               f32_2 %48 = OpFNegate %47 
                               f32_2 %49 = OpFAdd %45 %48 
                                             OpStore %19 %49 
                               f32_2 %50 = OpLoad %19 
                               f32_2 %53 = OpCompositeConstruct %51 %51 
                               f32_2 %54 = OpCompositeConstruct %52 %52 
                               f32_2 %55 = OpExtInst %1 43 %50 %53 %54 
                                             OpStore %19 %55 
                               f32_2 %56 = OpLoad %19 
                               f32_4 %57 = OpVectorShuffle %56 %56 0 0 0 0 
                               f32_4 %58 = OpLoad %9 
                               f32_4 %59 = OpFMul %57 %58 
                               f32_4 %60 = OpLoad %13 
                               f32_4 %61 = OpFAdd %59 %60 
                                             OpStore %9 %61 
                               f32_2 %64 = OpLoad %19 
                               f32_4 %65 = OpVectorShuffle %64 %64 1 1 1 1 
                               f32_4 %66 = OpLoad %9 
                               f32_4 %67 = OpFMul %65 %66 
                                             OpStore %63 %67 
                                             OpReturn
                                             OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "UNDERLAY_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "UNDERLAY_ON" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _FaceColor;
uniform 	float _FaceDilate;
uniform 	float _OutlineSoftness;
uniform 	vec4 _OutlineColor;
uniform 	float _OutlineWidth;
uniform 	float _UnderlayOffsetX;
uniform 	float _UnderlayOffsetY;
uniform 	float _UnderlayDilate;
uniform 	float _UnderlaySoftness;
uniform 	float _WeightNormal;
uniform 	float _WeightBold;
uniform 	float _ScaleRatioA;
uniform 	float _ScaleRatioC;
uniform 	float _VertexOffsetX;
uniform 	float _VertexOffsetY;
uniform 	vec4 _ClipRect;
uniform 	float _MaskSoftnessX;
uniform 	float _MaskSoftnessY;
uniform 	float _TextureWidth;
uniform 	float _TextureHeight;
uniform 	float _GradientScale;
uniform 	float _ScaleX;
uniform 	float _ScaleY;
uniform 	float _PerspectiveFilter;
uniform 	float _Sharpness;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_COLOR0;
in  vec2 in_TEXCOORD0;
in  vec2 in_TEXCOORD1;
out vec4 vs_COLOR0;
out vec4 vs_COLOR1;
out vec4 vs_TEXCOORD0;
out vec4 vs_TEXCOORD1;
out vec4 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec2 vs_TEXCOORD4;
vec2 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
vec4 u_xlat6;
vec3 u_xlat7;
vec2 u_xlat8;
float u_xlat14;
float u_xlat15;
float u_xlat21;
bool u_xlatb21;
void main()
{
    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
    gl_Position = u_xlat2;
    vs_COLOR0.w = _FaceColor.w;
    u_xlat3.xyz = in_COLOR0.xyz;
    u_xlat3.w = 1.0;
    u_xlat4 = u_xlat3 * _FaceColor;
    u_xlat2.xyz = u_xlat4.www * u_xlat4.xyz;
    vs_COLOR0.xyz = u_xlat2.xyz;
    u_xlat5.xyz = (-u_xlat2.xyz);
    u_xlat5.w = (-u_xlat4.w);
    u_xlat6.xyz = _OutlineColor.www * _OutlineColor.xyz;
    u_xlat6.w = _OutlineColor.w;
    u_xlat5 = u_xlat5 + u_xlat6;
    u_xlat14 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat14 = inversesqrt(u_xlat14);
    u_xlat1.xyz = vec3(u_xlat14) * u_xlat1.xyz;
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat14 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat14 = inversesqrt(u_xlat14);
    u_xlat2.xyz = vec3(u_xlat14) * u_xlat2.xyz;
    u_xlat14 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat1.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;
    u_xlat1.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat1.xy;
    u_xlat1.xy = abs(u_xlat1.xy) * vec2(_ScaleX, _ScaleY);
    u_xlat1.xy = u_xlat2.ww / u_xlat1.xy;
    u_xlat21 = dot(u_xlat1.xy, u_xlat1.xy);
    u_xlat1.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) * vec2(0.25, 0.25) + u_xlat1.xy;
    vs_TEXCOORD2.zw = vec2(0.25, 0.25) / u_xlat1.xy;
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.x = abs(in_TEXCOORD1.y) * _GradientScale;
    u_xlat8.x = _Sharpness + 1.0;
    u_xlat1.x = u_xlat8.x * u_xlat1.x;
    u_xlat8.x = u_xlat21 * u_xlat1.x;
    u_xlat15 = (-_PerspectiveFilter) + 1.0;
    u_xlat15 = u_xlat15 * abs(u_xlat8.x);
    u_xlat21 = u_xlat21 * u_xlat1.x + (-u_xlat15);
    u_xlat14 = abs(u_xlat14) * u_xlat21 + u_xlat15;
    u_xlatb21 = hlslcc_mtx4x4glstate_matrix_projection[3].w==0.0;
    u_xlat14 = (u_xlatb21) ? u_xlat14 : u_xlat8.x;
    u_xlat21 = _OutlineSoftness * _ScaleRatioA;
    u_xlat21 = u_xlat21 * u_xlat14 + 1.0;
    u_xlat1.x = u_xlat14 / u_xlat21;
    u_xlat21 = _OutlineWidth * _ScaleRatioA;
    u_xlat21 = u_xlat21 * 0.5;
    u_xlat8.x = u_xlat1.x * u_xlat21;
    u_xlat8.x = u_xlat8.x + u_xlat8.x;
    u_xlat8.x = min(u_xlat8.x, 1.0);
    u_xlat8.x = sqrt(u_xlat8.x);
    u_xlat2 = u_xlat5 * u_xlat8.xxxx;
    vs_COLOR1.xyz = u_xlat4.xyz * u_xlat4.www + u_xlat2.xyz;
    vs_COLOR1.w = u_xlat3.w * _FaceColor.w + u_xlat2.w;
    u_xlat2 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));
    u_xlat2 = min(u_xlat2, vec4(2e+10, 2e+10, 2e+10, 2e+10));
    u_xlat8.xy = u_xlat0.xy + (-u_xlat2.xy);
    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + (-u_xlat2.xy);
    vs_TEXCOORD2.xy = (-u_xlat2.zw) + u_xlat0.xy;
    u_xlat0.xy = (-u_xlat2.xy) + u_xlat2.zw;
    vs_TEXCOORD0.zw = u_xlat8.xy / u_xlat0.xy;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlatb0 = 0.0>=in_TEXCOORD1.y;
    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);
    u_xlat7.x = (-_WeightNormal) + _WeightBold;
    u_xlat0.x = u_xlat0.x * u_xlat7.x + _WeightNormal;
    u_xlat0.x = u_xlat0.x * 0.25 + _FaceDilate;
    u_xlat0.x = u_xlat0.x * _ScaleRatioA;
    u_xlat0.x = (-u_xlat0.x) * 0.5 + 0.5;
    u_xlat1.w = u_xlat0.x * u_xlat1.x + -0.5;
    vs_TEXCOORD1.y = (-u_xlat21) * u_xlat1.x + u_xlat1.w;
    vs_TEXCOORD1.z = u_xlat21 * u_xlat1.x + u_xlat1.w;
    vs_TEXCOORD1.xw = u_xlat1.xw;
    vs_TEXCOORD3.z = in_COLOR0.w;
    vs_TEXCOORD3.w = 0.0;
    u_xlat1 = vec4(_UnderlaySoftness, _UnderlayDilate, _UnderlayOffsetX, _UnderlayOffsetY) * vec4(vec4(_ScaleRatioC, _ScaleRatioC, _ScaleRatioC, _ScaleRatioC));
    u_xlat7.xz = (-u_xlat1.zw) * vec2(_GradientScale);
    u_xlat7.xz = u_xlat7.xz / vec2(_TextureWidth, _TextureHeight);
    vs_TEXCOORD3.xy = u_xlat7.xz + in_TEXCOORD0.xy;
    u_xlat7.x = u_xlat1.x * u_xlat14 + 1.0;
    u_xlat7.x = u_xlat14 / u_xlat7.x;
    u_xlat14 = u_xlat1.y * 0.5;
    u_xlat0.x = u_xlat0.x * u_xlat7.x + -0.5;
    vs_TEXCOORD4.y = (-u_xlat14) * u_xlat7.x + u_xlat0.x;
    vs_TEXCOORD4.x = u_xlat7.x;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _UnderlayColor;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
in  vec4 vs_COLOR0;
in  vec4 vs_TEXCOORD0;
in  vec4 vs_TEXCOORD1;
in  vec4 vs_TEXCOORD3;
in  vec2 vs_TEXCOORD4;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = texture(_MainTex, vs_TEXCOORD3.xy);
    u_xlat0.x = u_xlat0.w * vs_TEXCOORD4.x + (-vs_TEXCOORD4.y);
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat1.xyz = _UnderlayColor.www * _UnderlayColor.xyz;
    u_xlat1.w = _UnderlayColor.w;
    u_xlat0 = u_xlat0.xxxx * u_xlat1;
    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1.x = u_xlat1.w * vs_TEXCOORD1.x + (-vs_TEXCOORD1.w);
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat2 = u_xlat1.xxxx * vs_COLOR0;
    u_xlat1.x = (-vs_COLOR0.w) * u_xlat1.x + 1.0;
    u_xlat0 = u_xlat0 * u_xlat1.xxxx + u_xlat2;
    SV_Target0 = u_xlat0 * vs_TEXCOORD3.zzzz;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "UNDERLAY_ON" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 653
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %12 %118 %122 %129 %196 %299 %308 %412 %468 %474 %534 %552 %637 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpDecorate %12 Location 12 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpDecorate %19 ArrayStride 19 
                                                      OpDecorate %20 ArrayStride 20 
                                                      OpDecorate %21 ArrayStride 21 
                                                      OpMemberDecorate %22 0 Offset 22 
                                                      OpMemberDecorate %22 1 Offset 22 
                                                      OpMemberDecorate %22 2 Offset 22 
                                                      OpMemberDecorate %22 3 Offset 22 
                                                      OpMemberDecorate %22 4 Offset 22 
                                                      OpMemberDecorate %22 5 Offset 22 
                                                      OpMemberDecorate %22 6 Offset 22 
                                                      OpMemberDecorate %22 7 Offset 22 
                                                      OpMemberDecorate %22 8 Offset 22 
                                                      OpMemberDecorate %22 9 Offset 22 
                                                      OpMemberDecorate %22 10 Offset 22 
                                                      OpMemberDecorate %22 11 Offset 22 
                                                      OpMemberDecorate %22 12 Offset 22 
                                                      OpMemberDecorate %22 13 Offset 22 
                                                      OpMemberDecorate %22 14 Offset 22 
                                                      OpMemberDecorate %22 15 Offset 22 
                                                      OpMemberDecorate %22 16 Offset 22 
                                                      OpMemberDecorate %22 17 Offset 22 
                                                      OpMemberDecorate %22 18 Offset 22 
                                                      OpMemberDecorate %22 19 Offset 22 
                                                      OpMemberDecorate %22 20 Offset 22 
                                                      OpMemberDecorate %22 21 Offset 22 
                                                      OpMemberDecorate %22 22 Offset 22 
                                                      OpMemberDecorate %22 23 Offset 22 
                                                      OpMemberDecorate %22 24 Offset 22 
                                                      OpMemberDecorate %22 25 Offset 22 
                                                      OpMemberDecorate %22 26 Offset 22 
                                                      OpMemberDecorate %22 27 Offset 22 
                                                      OpMemberDecorate %22 28 Offset 22 
                                                      OpMemberDecorate %22 29 Offset 22 
                                                      OpMemberDecorate %22 30 Offset 22 
                                                      OpDecorate %22 Block 
                                                      OpDecorate %24 DescriptorSet 24 
                                                      OpDecorate %24 Binding 24 
                                                      OpMemberDecorate %116 0 BuiltIn 116 
                                                      OpMemberDecorate %116 1 BuiltIn 116 
                                                      OpMemberDecorate %116 2 BuiltIn 116 
                                                      OpDecorate %116 Block 
                                                      OpDecorate %122 Location 122 
                                                      OpDecorate %129 Location 129 
                                                      OpDecorate %196 Location 196 
                                                      OpDecorate vs_TEXCOORD2 Location 299 
                                                      OpDecorate %308 Location 308 
                                                      OpDecorate %412 Location 412 
                                                      OpDecorate vs_TEXCOORD0 Location 468 
                                                      OpDecorate %474 Location 474 
                                                      OpDecorate vs_TEXCOORD1 Location 534 
                                                      OpDecorate vs_TEXCOORD3 Location 552 
                                                      OpDecorate vs_TEXCOORD4 Location 637 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 2 
                                               %8 = OpTypePointer Private %7 
                                Private f32_2* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 4 
                                              %11 = OpTypePointer Input %10 
                                 Input f32_4* %12 = OpVariable Input 
                                              %15 = OpTypeVector %6 3 
                                              %16 = OpTypeInt 32 0 
                                          u32 %17 = OpConstant 4 
                                              %18 = OpTypeArray %10 %17 
                                              %19 = OpTypeArray %10 %17 
                                              %20 = OpTypeArray %10 %17 
                                              %21 = OpTypeArray %10 %17 
                                              %22 = OpTypeStruct %15 %10 %18 %19 %20 %21 %10 %6 %6 %10 %6 %6 %6 %6 %6 %6 %6 %6 %6 %6 %6 %10 %6 %6 %6 %6 %6 %6 %6 %6 %6 
                                              %23 = OpTypePointer Uniform %22 
Uniform struct {f32_3; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4[4]; f32_4; f32; f32; f32_4; f32; f32; f32; f32; f32; f32; f32; f32; f32; f32; f32; f32_4; f32; f32; f32; f32; f32; f32; f32; f32; f32;}* %24 = OpVariable Uniform 
                                              %25 = OpTypeInt 32 1 
                                          i32 %26 = OpConstant 19 
                                              %27 = OpTypePointer Uniform %6 
                                          i32 %30 = OpConstant 20 
                                              %35 = OpTypePointer Private %10 
                               Private f32_4* %36 = OpVariable Private 
                                          i32 %39 = OpConstant 2 
                                          i32 %40 = OpConstant 1 
                                              %41 = OpTypePointer Uniform %10 
                                          i32 %45 = OpConstant 0 
                               Private f32_4* %60 = OpVariable Private 
                                          i32 %62 = OpConstant 3 
                                              %80 = OpTypePointer Uniform %15 
                               Private f32_4* %86 = OpVariable Private 
                                          i32 %89 = OpConstant 5 
                                         u32 %114 = OpConstant 1 
                                             %115 = OpTypeArray %6 %114 
                                             %116 = OpTypeStruct %10 %6 %115 
                                             %117 = OpTypePointer Output %116 
        Output struct {f32_4; f32; f32[1];}* %118 = OpVariable Output 
                                             %120 = OpTypePointer Output %10 
                               Output f32_4* %122 = OpVariable Output 
                                         i32 %123 = OpConstant 6 
                                         u32 %124 = OpConstant 3 
                                             %127 = OpTypePointer Output %6 
                                Input f32_4* %129 = OpVariable Input 
                                         f32 %134 = OpConstant 3.674022E-40 
                                             %135 = OpTypePointer Private %6 
                              Private f32_4* %137 = OpVariable Private 
                              Private f32_4* %153 = OpVariable Private 
                              Private f32_4* %163 = OpVariable Private 
                                         i32 %164 = OpConstant 9 
                                Private f32* %180 = OpVariable Private 
                                             %195 = OpTypePointer Input %15 
                                Input f32_3* %196 = OpVariable Input 
                                         u32 %202 = OpConstant 0 
                                         u32 %215 = OpConstant 2 
                                         i32 %239 = OpConstant 4 
                                         i32 %261 = OpConstant 27 
                                         i32 %264 = OpConstant 28 
                                Private f32* %278 = OpVariable Private 
                                         i32 %284 = OpConstant 22 
                                         i32 %287 = OpConstant 23 
                                         f32 %291 = OpConstant 3.674022E-40 
                                       f32_2 %292 = OpConstantComposite %291 %291 
                       Output f32_4* vs_TEXCOORD2 = OpVariable Output 
                                             %307 = OpTypePointer Input %7 
                                Input f32_2* %308 = OpVariable Input 
                                             %309 = OpTypePointer Input %6 
                                         i32 %313 = OpConstant 26 
                              Private f32_2* %318 = OpVariable Private 
                                         i32 %319 = OpConstant 30 
                                Private f32* %335 = OpVariable Private 
                                         i32 %336 = OpConstant 29 
                                             %359 = OpTypeBool 
                                             %360 = OpTypePointer Private %359 
                               Private bool* %361 = OpVariable Private 
                                         f32 %364 = OpConstant 3.674022E-40 
                                             %367 = OpTypePointer Function %6 
                                         i32 %376 = OpConstant 8 
                                         i32 %379 = OpConstant 17 
                                         i32 %391 = OpConstant 10 
                               Output f32_4* %412 = OpVariable Output 
                                         i32 %432 = OpConstant 21 
                                         f32 %435 = OpConstant 3.674022E-40 
                                       f32_4 %436 = OpConstantComposite %435 %435 %435 %435 
                                         f32 %439 = OpConstant 3.674022E-40 
                                       f32_4 %440 = OpConstantComposite %439 %439 %439 %439 
                                         f32 %448 = OpConstant 3.674022E-40 
                                       f32_2 %449 = OpConstantComposite %448 %448 
                       Output f32_4* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_2* %474 = OpVariable Input 
                               Private bool* %478 = OpVariable Private 
                                             %485 = OpTypePointer Private %15 
                              Private f32_3* %486 = OpVariable Private 
                                         i32 %487 = OpConstant 15 
                                         i32 %491 = OpConstant 16 
                                         i32 %508 = OpConstant 7 
                                         f32 %522 = OpConstant 3.674022E-40 
                                         f32 %531 = OpConstant 3.674022E-40 
                       Output f32_4* vs_TEXCOORD1 = OpVariable Output 
                       Output f32_4* vs_TEXCOORD3 = OpVariable Output 
                                         i32 %557 = OpConstant 14 
                                         i32 %560 = OpConstant 13 
                                         i32 %563 = OpConstant 11 
                                         i32 %566 = OpConstant 12 
                                         i32 %570 = OpConstant 18 
                                         i32 %597 = OpConstant 24 
                                         i32 %600 = OpConstant 25 
                                             %636 = OpTypePointer Output %7 
                       Output f32_2* vs_TEXCOORD4 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                               Function f32* %368 = OpVariable Function 
                                        f32_4 %13 = OpLoad %12 
                                        f32_2 %14 = OpVectorShuffle %13 %13 0 1 
                                 Uniform f32* %28 = OpAccessChain %24 %26 
                                          f32 %29 = OpLoad %28 
                                 Uniform f32* %31 = OpAccessChain %24 %30 
                                          f32 %32 = OpLoad %31 
                                        f32_2 %33 = OpCompositeConstruct %29 %32 
                                        f32_2 %34 = OpFAdd %14 %33 
                                                      OpStore %9 %34 
                                        f32_2 %37 = OpLoad %9 
                                        f32_4 %38 = OpVectorShuffle %37 %37 1 1 1 1 
                               Uniform f32_4* %42 = OpAccessChain %24 %39 %40 
                                        f32_4 %43 = OpLoad %42 
                                        f32_4 %44 = OpFMul %38 %43 
                                                      OpStore %36 %44 
                               Uniform f32_4* %46 = OpAccessChain %24 %39 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_2 %48 = OpLoad %9 
                                        f32_4 %49 = OpVectorShuffle %48 %48 0 0 0 0 
                                        f32_4 %50 = OpFMul %47 %49 
                                        f32_4 %51 = OpLoad %36 
                                        f32_4 %52 = OpFAdd %50 %51 
                                                      OpStore %36 %52 
                               Uniform f32_4* %53 = OpAccessChain %24 %39 %39 
                                        f32_4 %54 = OpLoad %53 
                                        f32_4 %55 = OpLoad %12 
                                        f32_4 %56 = OpVectorShuffle %55 %55 2 2 2 2 
                                        f32_4 %57 = OpFMul %54 %56 
                                        f32_4 %58 = OpLoad %36 
                                        f32_4 %59 = OpFAdd %57 %58 
                                                      OpStore %36 %59 
                                        f32_4 %61 = OpLoad %36 
                               Uniform f32_4* %63 = OpAccessChain %24 %39 %62 
                                        f32_4 %64 = OpLoad %63 
                                        f32_4 %65 = OpFAdd %61 %64 
                                                      OpStore %60 %65 
                               Uniform f32_4* %66 = OpAccessChain %24 %39 %62 
                                        f32_4 %67 = OpLoad %66 
                                        f32_3 %68 = OpVectorShuffle %67 %67 0 1 2 
                                        f32_4 %69 = OpLoad %12 
                                        f32_3 %70 = OpVectorShuffle %69 %69 3 3 3 
                                        f32_3 %71 = OpFMul %68 %70 
                                        f32_4 %72 = OpLoad %36 
                                        f32_3 %73 = OpVectorShuffle %72 %72 0 1 2 
                                        f32_3 %74 = OpFAdd %71 %73 
                                        f32_4 %75 = OpLoad %36 
                                        f32_4 %76 = OpVectorShuffle %75 %74 4 5 6 3 
                                                      OpStore %36 %76 
                                        f32_4 %77 = OpLoad %36 
                                        f32_3 %78 = OpVectorShuffle %77 %77 0 1 2 
                                        f32_3 %79 = OpFNegate %78 
                               Uniform f32_3* %81 = OpAccessChain %24 %45 
                                        f32_3 %82 = OpLoad %81 
                                        f32_3 %83 = OpFAdd %79 %82 
                                        f32_4 %84 = OpLoad %36 
                                        f32_4 %85 = OpVectorShuffle %84 %83 4 5 6 3 
                                                      OpStore %36 %85 
                                        f32_4 %87 = OpLoad %60 
                                        f32_4 %88 = OpVectorShuffle %87 %87 1 1 1 1 
                               Uniform f32_4* %90 = OpAccessChain %24 %89 %40 
                                        f32_4 %91 = OpLoad %90 
                                        f32_4 %92 = OpFMul %88 %91 
                                                      OpStore %86 %92 
                               Uniform f32_4* %93 = OpAccessChain %24 %89 %45 
                                        f32_4 %94 = OpLoad %93 
                                        f32_4 %95 = OpLoad %60 
                                        f32_4 %96 = OpVectorShuffle %95 %95 0 0 0 0 
                                        f32_4 %97 = OpFMul %94 %96 
                                        f32_4 %98 = OpLoad %86 
                                        f32_4 %99 = OpFAdd %97 %98 
                                                      OpStore %86 %99 
                              Uniform f32_4* %100 = OpAccessChain %24 %89 %39 
                                       f32_4 %101 = OpLoad %100 
                                       f32_4 %102 = OpLoad %60 
                                       f32_4 %103 = OpVectorShuffle %102 %102 2 2 2 2 
                                       f32_4 %104 = OpFMul %101 %103 
                                       f32_4 %105 = OpLoad %86 
                                       f32_4 %106 = OpFAdd %104 %105 
                                                      OpStore %86 %106 
                              Uniform f32_4* %107 = OpAccessChain %24 %89 %62 
                                       f32_4 %108 = OpLoad %107 
                                       f32_4 %109 = OpLoad %60 
                                       f32_4 %110 = OpVectorShuffle %109 %109 3 3 3 3 
                                       f32_4 %111 = OpFMul %108 %110 
                                       f32_4 %112 = OpLoad %86 
                                       f32_4 %113 = OpFAdd %111 %112 
                                                      OpStore %60 %113 
                                       f32_4 %119 = OpLoad %60 
                               Output f32_4* %121 = OpAccessChain %118 %45 
                                                      OpStore %121 %119 
                                Uniform f32* %125 = OpAccessChain %24 %123 %124 
                                         f32 %126 = OpLoad %125 
                                 Output f32* %128 = OpAccessChain %122 %124 
                                                      OpStore %128 %126 
                                       f32_4 %130 = OpLoad %129 
                                       f32_3 %131 = OpVectorShuffle %130 %130 0 1 2 
                                       f32_4 %132 = OpLoad %86 
                                       f32_4 %133 = OpVectorShuffle %132 %131 4 5 6 3 
                                                      OpStore %86 %133 
                                Private f32* %136 = OpAccessChain %86 %124 
                                                      OpStore %136 %134 
                                       f32_4 %138 = OpLoad %86 
                              Uniform f32_4* %139 = OpAccessChain %24 %123 
                                       f32_4 %140 = OpLoad %139 
                                       f32_4 %141 = OpFMul %138 %140 
                                                      OpStore %137 %141 
                                       f32_4 %142 = OpLoad %137 
                                       f32_3 %143 = OpVectorShuffle %142 %142 3 3 3 
                                       f32_4 %144 = OpLoad %137 
                                       f32_3 %145 = OpVectorShuffle %144 %144 0 1 2 
                                       f32_3 %146 = OpFMul %143 %145 
                                       f32_4 %147 = OpLoad %60 
                                       f32_4 %148 = OpVectorShuffle %147 %146 4 5 6 3 
                                                      OpStore %60 %148 
                                       f32_4 %149 = OpLoad %60 
                                       f32_3 %150 = OpVectorShuffle %149 %149 0 1 2 
                                       f32_4 %151 = OpLoad %122 
                                       f32_4 %152 = OpVectorShuffle %151 %150 4 5 6 3 
                                                      OpStore %122 %152 
                                       f32_4 %154 = OpLoad %60 
                                       f32_3 %155 = OpVectorShuffle %154 %154 0 1 2 
                                       f32_3 %156 = OpFNegate %155 
                                       f32_4 %157 = OpLoad %153 
                                       f32_4 %158 = OpVectorShuffle %157 %156 4 5 6 3 
                                                      OpStore %153 %158 
                                Private f32* %159 = OpAccessChain %137 %124 
                                         f32 %160 = OpLoad %159 
                                         f32 %161 = OpFNegate %160 
                                Private f32* %162 = OpAccessChain %153 %124 
                                                      OpStore %162 %161 
                              Uniform f32_4* %165 = OpAccessChain %24 %164 
                                       f32_4 %166 = OpLoad %165 
                                       f32_3 %167 = OpVectorShuffle %166 %166 3 3 3 
                              Uniform f32_4* %168 = OpAccessChain %24 %164 
                                       f32_4 %169 = OpLoad %168 
                                       f32_3 %170 = OpVectorShuffle %169 %169 0 1 2 
                                       f32_3 %171 = OpFMul %167 %170 
                                       f32_4 %172 = OpLoad %163 
                                       f32_4 %173 = OpVectorShuffle %172 %171 4 5 6 3 
                                                      OpStore %163 %173 
                                Uniform f32* %174 = OpAccessChain %24 %164 %124 
                                         f32 %175 = OpLoad %174 
                                Private f32* %176 = OpAccessChain %163 %124 
                                                      OpStore %176 %175 
                                       f32_4 %177 = OpLoad %153 
                                       f32_4 %178 = OpLoad %163 
                                       f32_4 %179 = OpFAdd %177 %178 
                                                      OpStore %153 %179 
                                       f32_4 %181 = OpLoad %36 
                                       f32_3 %182 = OpVectorShuffle %181 %181 0 1 2 
                                       f32_4 %183 = OpLoad %36 
                                       f32_3 %184 = OpVectorShuffle %183 %183 0 1 2 
                                         f32 %185 = OpDot %182 %184 
                                                      OpStore %180 %185 
                                         f32 %186 = OpLoad %180 
                                         f32 %187 = OpExtInst %1 32 %186 
                                                      OpStore %180 %187 
                                         f32 %188 = OpLoad %180 
                                       f32_3 %189 = OpCompositeConstruct %188 %188 %188 
                                       f32_4 %190 = OpLoad %36 
                                       f32_3 %191 = OpVectorShuffle %190 %190 0 1 2 
                                       f32_3 %192 = OpFMul %189 %191 
                                       f32_4 %193 = OpLoad %36 
                                       f32_4 %194 = OpVectorShuffle %193 %192 4 5 6 3 
                                                      OpStore %36 %194 
                                       f32_3 %197 = OpLoad %196 
                              Uniform f32_4* %198 = OpAccessChain %24 %62 %45 
                                       f32_4 %199 = OpLoad %198 
                                       f32_3 %200 = OpVectorShuffle %199 %199 0 1 2 
                                         f32 %201 = OpDot %197 %200 
                                Private f32* %203 = OpAccessChain %60 %202 
                                                      OpStore %203 %201 
                                       f32_3 %204 = OpLoad %196 
                              Uniform f32_4* %205 = OpAccessChain %24 %62 %40 
                                       f32_4 %206 = OpLoad %205 
                                       f32_3 %207 = OpVectorShuffle %206 %206 0 1 2 
                                         f32 %208 = OpDot %204 %207 
                                Private f32* %209 = OpAccessChain %60 %114 
                                                      OpStore %209 %208 
                                       f32_3 %210 = OpLoad %196 
                              Uniform f32_4* %211 = OpAccessChain %24 %62 %39 
                                       f32_4 %212 = OpLoad %211 
                                       f32_3 %213 = OpVectorShuffle %212 %212 0 1 2 
                                         f32 %214 = OpDot %210 %213 
                                Private f32* %216 = OpAccessChain %60 %215 
                                                      OpStore %216 %214 
                                       f32_4 %217 = OpLoad %60 
                                       f32_3 %218 = OpVectorShuffle %217 %217 0 1 2 
                                       f32_4 %219 = OpLoad %60 
                                       f32_3 %220 = OpVectorShuffle %219 %219 0 1 2 
                                         f32 %221 = OpDot %218 %220 
                                                      OpStore %180 %221 
                                         f32 %222 = OpLoad %180 
                                         f32 %223 = OpExtInst %1 32 %222 
                                                      OpStore %180 %223 
                                         f32 %224 = OpLoad %180 
                                       f32_3 %225 = OpCompositeConstruct %224 %224 %224 
                                       f32_4 %226 = OpLoad %60 
                                       f32_3 %227 = OpVectorShuffle %226 %226 0 1 2 
                                       f32_3 %228 = OpFMul %225 %227 
                                       f32_4 %229 = OpLoad %60 
                                       f32_4 %230 = OpVectorShuffle %229 %228 4 5 6 3 
                                                      OpStore %60 %230 
                                       f32_4 %231 = OpLoad %60 
                                       f32_3 %232 = OpVectorShuffle %231 %231 0 1 2 
                                       f32_4 %233 = OpLoad %36 
                                       f32_3 %234 = OpVectorShuffle %233 %233 0 1 2 
                                         f32 %235 = OpDot %232 %234 
                                                      OpStore %180 %235 
                              Uniform f32_4* %236 = OpAccessChain %24 %40 
                                       f32_4 %237 = OpLoad %236 
                                       f32_2 %238 = OpVectorShuffle %237 %237 1 1 
                              Uniform f32_4* %240 = OpAccessChain %24 %239 %40 
                                       f32_4 %241 = OpLoad %240 
                                       f32_2 %242 = OpVectorShuffle %241 %241 0 1 
                                       f32_2 %243 = OpFMul %238 %242 
                                       f32_4 %244 = OpLoad %36 
                                       f32_4 %245 = OpVectorShuffle %244 %243 4 5 2 3 
                                                      OpStore %36 %245 
                              Uniform f32_4* %246 = OpAccessChain %24 %239 %45 
                                       f32_4 %247 = OpLoad %246 
                                       f32_2 %248 = OpVectorShuffle %247 %247 0 1 
                              Uniform f32_4* %249 = OpAccessChain %24 %40 
                                       f32_4 %250 = OpLoad %249 
                                       f32_2 %251 = OpVectorShuffle %250 %250 0 0 
                                       f32_2 %252 = OpFMul %248 %251 
                                       f32_4 %253 = OpLoad %36 
                                       f32_2 %254 = OpVectorShuffle %253 %253 0 1 
                                       f32_2 %255 = OpFAdd %252 %254 
                                       f32_4 %256 = OpLoad %36 
                                       f32_4 %257 = OpVectorShuffle %256 %255 4 5 2 3 
                                                      OpStore %36 %257 
                                       f32_4 %258 = OpLoad %36 
                                       f32_2 %259 = OpVectorShuffle %258 %258 0 1 
                                       f32_2 %260 = OpExtInst %1 4 %259 
                                Uniform f32* %262 = OpAccessChain %24 %261 
                                         f32 %263 = OpLoad %262 
                                Uniform f32* %265 = OpAccessChain %24 %264 
                                         f32 %266 = OpLoad %265 
                                       f32_2 %267 = OpCompositeConstruct %263 %266 
                                       f32_2 %268 = OpFMul %260 %267 
                                       f32_4 %269 = OpLoad %36 
                                       f32_4 %270 = OpVectorShuffle %269 %268 4 5 2 3 
                                                      OpStore %36 %270 
                                       f32_4 %271 = OpLoad %60 
                                       f32_2 %272 = OpVectorShuffle %271 %271 3 3 
                                       f32_4 %273 = OpLoad %36 
                                       f32_2 %274 = OpVectorShuffle %273 %273 0 1 
                                       f32_2 %275 = OpFDiv %272 %274 
                                       f32_4 %276 = OpLoad %36 
                                       f32_4 %277 = OpVectorShuffle %276 %275 4 5 2 3 
                                                      OpStore %36 %277 
                                       f32_4 %279 = OpLoad %36 
                                       f32_2 %280 = OpVectorShuffle %279 %279 0 1 
                                       f32_4 %281 = OpLoad %36 
                                       f32_2 %282 = OpVectorShuffle %281 %281 0 1 
                                         f32 %283 = OpDot %280 %282 
                                                      OpStore %278 %283 
                                Uniform f32* %285 = OpAccessChain %24 %284 
                                         f32 %286 = OpLoad %285 
                                Uniform f32* %288 = OpAccessChain %24 %287 
                                         f32 %289 = OpLoad %288 
                                       f32_2 %290 = OpCompositeConstruct %286 %289 
                                       f32_2 %293 = OpFMul %290 %292 
                                       f32_4 %294 = OpLoad %36 
                                       f32_2 %295 = OpVectorShuffle %294 %294 0 1 
                                       f32_2 %296 = OpFAdd %293 %295 
                                       f32_4 %297 = OpLoad %36 
                                       f32_4 %298 = OpVectorShuffle %297 %296 4 5 2 3 
                                                      OpStore %36 %298 
                                       f32_4 %300 = OpLoad %36 
                                       f32_2 %301 = OpVectorShuffle %300 %300 0 1 
                                       f32_2 %302 = OpFDiv %292 %301 
                                       f32_4 %303 = OpLoad vs_TEXCOORD2 
                                       f32_4 %304 = OpVectorShuffle %303 %302 0 1 4 5 
                                                      OpStore vs_TEXCOORD2 %304 
                                         f32 %305 = OpLoad %278 
                                         f32 %306 = OpExtInst %1 32 %305 
                                                      OpStore %278 %306 
                                  Input f32* %310 = OpAccessChain %308 %114 
                                         f32 %311 = OpLoad %310 
                                         f32 %312 = OpExtInst %1 4 %311 
                                Uniform f32* %314 = OpAccessChain %24 %313 
                                         f32 %315 = OpLoad %314 
                                         f32 %316 = OpFMul %312 %315 
                                Private f32* %317 = OpAccessChain %36 %202 
                                                      OpStore %317 %316 
                                Uniform f32* %320 = OpAccessChain %24 %319 
                                         f32 %321 = OpLoad %320 
                                         f32 %322 = OpFAdd %321 %134 
                                Private f32* %323 = OpAccessChain %318 %202 
                                                      OpStore %323 %322 
                                Private f32* %324 = OpAccessChain %318 %202 
                                         f32 %325 = OpLoad %324 
                                Private f32* %326 = OpAccessChain %36 %202 
                                         f32 %327 = OpLoad %326 
                                         f32 %328 = OpFMul %325 %327 
                                Private f32* %329 = OpAccessChain %36 %202 
                                                      OpStore %329 %328 
                                         f32 %330 = OpLoad %278 
                                Private f32* %331 = OpAccessChain %36 %202 
                                         f32 %332 = OpLoad %331 
                                         f32 %333 = OpFMul %330 %332 
                                Private f32* %334 = OpAccessChain %318 %202 
                                                      OpStore %334 %333 
                                Uniform f32* %337 = OpAccessChain %24 %336 
                                         f32 %338 = OpLoad %337 
                                         f32 %339 = OpFNegate %338 
                                         f32 %340 = OpFAdd %339 %134 
                                                      OpStore %335 %340 
                                         f32 %341 = OpLoad %335 
                                Private f32* %342 = OpAccessChain %318 %202 
                                         f32 %343 = OpLoad %342 
                                         f32 %344 = OpExtInst %1 4 %343 
                                         f32 %345 = OpFMul %341 %344 
                                                      OpStore %335 %345 
                                         f32 %346 = OpLoad %278 
                                Private f32* %347 = OpAccessChain %36 %202 
                                         f32 %348 = OpLoad %347 
                                         f32 %349 = OpFMul %346 %348 
                                         f32 %350 = OpLoad %335 
                                         f32 %351 = OpFNegate %350 
                                         f32 %352 = OpFAdd %349 %351 
                                                      OpStore %278 %352 
                                         f32 %353 = OpLoad %180 
                                         f32 %354 = OpExtInst %1 4 %353 
                                         f32 %355 = OpLoad %278 
                                         f32 %356 = OpFMul %354 %355 
                                         f32 %357 = OpLoad %335 
                                         f32 %358 = OpFAdd %356 %357 
                                                      OpStore %180 %358 
                                Uniform f32* %362 = OpAccessChain %24 %239 %62 %124 
                                         f32 %363 = OpLoad %362 
                                        bool %365 = OpFOrdEqual %363 %364 
                                                      OpStore %361 %365 
                                        bool %366 = OpLoad %361 
                                                      OpSelectionMerge %370 None 
                                                      OpBranchConditional %366 %369 %372 
                                             %369 = OpLabel 
                                         f32 %371 = OpLoad %180 
                                                      OpStore %368 %371 
                                                      OpBranch %370 
                                             %372 = OpLabel 
                                Private f32* %373 = OpAccessChain %318 %202 
                                         f32 %374 = OpLoad %373 
                                                      OpStore %368 %374 
                                                      OpBranch %370 
                                             %370 = OpLabel 
                                         f32 %375 = OpLoad %368 
                                                      OpStore %180 %375 
                                Uniform f32* %377 = OpAccessChain %24 %376 
                                         f32 %378 = OpLoad %377 
                                Uniform f32* %380 = OpAccessChain %24 %379 
                                         f32 %381 = OpLoad %380 
                                         f32 %382 = OpFMul %378 %381 
                                                      OpStore %278 %382 
                                         f32 %383 = OpLoad %278 
                                         f32 %384 = OpLoad %180 
                                         f32 %385 = OpFMul %383 %384 
                                         f32 %386 = OpFAdd %385 %134 
                                                      OpStore %278 %386 
                                         f32 %387 = OpLoad %180 
                                         f32 %388 = OpLoad %278 
                                         f32 %389 = OpFDiv %387 %388 
                                Private f32* %390 = OpAccessChain %36 %202 
                                                      OpStore %390 %389 
                                Uniform f32* %392 = OpAccessChain %24 %391 
                                         f32 %393 = OpLoad %392 
                                Uniform f32* %394 = OpAccessChain %24 %379 
                                         f32 %395 = OpLoad %394 
                                         f32 %396 = OpFMul %393 %395 
                                                      OpStore %278 %396 
                                Private f32* %397 = OpAccessChain %36 %202 
                                         f32 %398 = OpLoad %397 
                                         f32 %399 = OpLoad %278 
                                         f32 %400 = OpFMul %398 %399 
                                                      OpStore %278 %400 
                                         f32 %401 = OpLoad %278 
                                         f32 %402 = OpExtInst %1 37 %401 %134 
                                Private f32* %403 = OpAccessChain %318 %202 
                                                      OpStore %403 %402 
                                Private f32* %404 = OpAccessChain %318 %202 
                                         f32 %405 = OpLoad %404 
                                         f32 %406 = OpExtInst %1 31 %405 
                                Private f32* %407 = OpAccessChain %318 %202 
                                                      OpStore %407 %406 
                                       f32_4 %408 = OpLoad %153 
                                       f32_2 %409 = OpLoad %318 
                                       f32_4 %410 = OpVectorShuffle %409 %409 0 0 0 0 
                                       f32_4 %411 = OpFMul %408 %410 
                                                      OpStore %60 %411 
                                       f32_4 %413 = OpLoad %137 
                                       f32_3 %414 = OpVectorShuffle %413 %413 0 1 2 
                                       f32_4 %415 = OpLoad %137 
                                       f32_3 %416 = OpVectorShuffle %415 %415 3 3 3 
                                       f32_3 %417 = OpFMul %414 %416 
                                       f32_4 %418 = OpLoad %60 
                                       f32_3 %419 = OpVectorShuffle %418 %418 0 1 2 
                                       f32_3 %420 = OpFAdd %417 %419 
                                       f32_4 %421 = OpLoad %412 
                                       f32_4 %422 = OpVectorShuffle %421 %420 4 5 6 3 
                                                      OpStore %412 %422 
                                Private f32* %423 = OpAccessChain %86 %124 
                                         f32 %424 = OpLoad %423 
                                Uniform f32* %425 = OpAccessChain %24 %123 %124 
                                         f32 %426 = OpLoad %425 
                                         f32 %427 = OpFMul %424 %426 
                                Private f32* %428 = OpAccessChain %60 %124 
                                         f32 %429 = OpLoad %428 
                                         f32 %430 = OpFAdd %427 %429 
                                 Output f32* %431 = OpAccessChain %412 %124 
                                                      OpStore %431 %430 
                              Uniform f32_4* %433 = OpAccessChain %24 %432 
                                       f32_4 %434 = OpLoad %433 
                                       f32_4 %437 = OpExtInst %1 40 %434 %436 
                                                      OpStore %60 %437 
                                       f32_4 %438 = OpLoad %60 
                                       f32_4 %441 = OpExtInst %1 37 %438 %440 
                                                      OpStore %60 %441 
                                       f32_2 %442 = OpLoad %9 
                                       f32_4 %443 = OpLoad %60 
                                       f32_2 %444 = OpVectorShuffle %443 %443 0 1 
                                       f32_2 %445 = OpFNegate %444 
                                       f32_2 %446 = OpFAdd %442 %445 
                                                      OpStore %318 %446 
                                       f32_2 %447 = OpLoad %9 
                                       f32_2 %450 = OpFMul %447 %449 
                                       f32_4 %451 = OpLoad %60 
                                       f32_2 %452 = OpVectorShuffle %451 %451 0 1 
                                       f32_2 %453 = OpFNegate %452 
                                       f32_2 %454 = OpFAdd %450 %453 
                                                      OpStore %9 %454 
                                       f32_4 %455 = OpLoad %60 
                                       f32_2 %456 = OpVectorShuffle %455 %455 2 3 
                                       f32_2 %457 = OpFNegate %456 
                                       f32_2 %458 = OpLoad %9 
                                       f32_2 %459 = OpFAdd %457 %458 
                                       f32_4 %460 = OpLoad vs_TEXCOORD2 
                                       f32_4 %461 = OpVectorShuffle %460 %459 4 5 2 3 
                                                      OpStore vs_TEXCOORD2 %461 
                                       f32_4 %462 = OpLoad %60 
                                       f32_2 %463 = OpVectorShuffle %462 %462 0 1 
                                       f32_2 %464 = OpFNegate %463 
                                       f32_4 %465 = OpLoad %60 
                                       f32_2 %466 = OpVectorShuffle %465 %465 2 3 
                                       f32_2 %467 = OpFAdd %464 %466 
                                                      OpStore %9 %467 
                                       f32_2 %469 = OpLoad %318 
                                       f32_2 %470 = OpLoad %9 
                                       f32_2 %471 = OpFDiv %469 %470 
                                       f32_4 %472 = OpLoad vs_TEXCOORD0 
                                       f32_4 %473 = OpVectorShuffle %472 %471 0 1 4 5 
                                                      OpStore vs_TEXCOORD0 %473 
                                       f32_2 %475 = OpLoad %474 
                                       f32_4 %476 = OpLoad vs_TEXCOORD0 
                                       f32_4 %477 = OpVectorShuffle %476 %475 4 5 2 3 
                                                      OpStore vs_TEXCOORD0 %477 
                                  Input f32* %479 = OpAccessChain %308 %114 
                                         f32 %480 = OpLoad %479 
                                        bool %481 = OpFOrdGreaterThanEqual %364 %480 
                                                      OpStore %478 %481 
                                        bool %482 = OpLoad %478 
                                         f32 %483 = OpSelect %482 %134 %364 
                                Private f32* %484 = OpAccessChain %9 %202 
                                                      OpStore %484 %483 
                                Uniform f32* %488 = OpAccessChain %24 %487 
                                         f32 %489 = OpLoad %488 
                                         f32 %490 = OpFNegate %489 
                                Uniform f32* %492 = OpAccessChain %24 %491 
                                         f32 %493 = OpLoad %492 
                                         f32 %494 = OpFAdd %490 %493 
                                Private f32* %495 = OpAccessChain %486 %202 
                                                      OpStore %495 %494 
                                Private f32* %496 = OpAccessChain %9 %202 
                                         f32 %497 = OpLoad %496 
                                Private f32* %498 = OpAccessChain %486 %202 
                                         f32 %499 = OpLoad %498 
                                         f32 %500 = OpFMul %497 %499 
                                Uniform f32* %501 = OpAccessChain %24 %487 
                                         f32 %502 = OpLoad %501 
                                         f32 %503 = OpFAdd %500 %502 
                                Private f32* %504 = OpAccessChain %9 %202 
                                                      OpStore %504 %503 
                                Private f32* %505 = OpAccessChain %9 %202 
                                         f32 %506 = OpLoad %505 
                                         f32 %507 = OpFMul %506 %291 
                                Uniform f32* %509 = OpAccessChain %24 %508 
                                         f32 %510 = OpLoad %509 
                                         f32 %511 = OpFAdd %507 %510 
                                Private f32* %512 = OpAccessChain %9 %202 
                                                      OpStore %512 %511 
                                Private f32* %513 = OpAccessChain %9 %202 
                                         f32 %514 = OpLoad %513 
                                Uniform f32* %515 = OpAccessChain %24 %379 
                                         f32 %516 = OpLoad %515 
                                         f32 %517 = OpFMul %514 %516 
                                Private f32* %518 = OpAccessChain %9 %202 
                                                      OpStore %518 %517 
                                Private f32* %519 = OpAccessChain %9 %202 
                                         f32 %520 = OpLoad %519 
                                         f32 %521 = OpFNegate %520 
                                         f32 %523 = OpFMul %521 %522 
                                         f32 %524 = OpFAdd %523 %522 
                                Private f32* %525 = OpAccessChain %9 %202 
                                                      OpStore %525 %524 
                                Private f32* %526 = OpAccessChain %9 %202 
                                         f32 %527 = OpLoad %526 
                                Private f32* %528 = OpAccessChain %36 %202 
                                         f32 %529 = OpLoad %528 
                                         f32 %530 = OpFMul %527 %529 
                                         f32 %532 = OpFAdd %530 %531 
                                Private f32* %533 = OpAccessChain %36 %124 
                                                      OpStore %533 %532 
                                       f32_4 %535 = OpLoad %36 
                                       f32_2 %536 = OpVectorShuffle %535 %535 0 3 
                                       f32_4 %537 = OpLoad vs_TEXCOORD1 
                                       f32_4 %538 = OpVectorShuffle %537 %536 4 1 2 5 
                                                      OpStore vs_TEXCOORD1 %538 
                                         f32 %539 = OpLoad %278 
                                         f32 %540 = OpFNegate %539 
                                         f32 %541 = OpFMul %540 %522 
                                Private f32* %542 = OpAccessChain %36 %124 
                                         f32 %543 = OpLoad %542 
                                         f32 %544 = OpFAdd %541 %543 
                                 Output f32* %545 = OpAccessChain vs_TEXCOORD1 %114 
                                                      OpStore %545 %544 
                                         f32 %546 = OpLoad %278 
                                         f32 %547 = OpFMul %546 %522 
                                Private f32* %548 = OpAccessChain %36 %124 
                                         f32 %549 = OpLoad %548 
                                         f32 %550 = OpFAdd %547 %549 
                                 Output f32* %551 = OpAccessChain vs_TEXCOORD1 %215 
                                                      OpStore %551 %550 
                                  Input f32* %553 = OpAccessChain %129 %124 
                                         f32 %554 = OpLoad %553 
                                 Output f32* %555 = OpAccessChain vs_TEXCOORD3 %215 
                                                      OpStore %555 %554 
                                 Output f32* %556 = OpAccessChain vs_TEXCOORD3 %124 
                                                      OpStore %556 %364 
                                Uniform f32* %558 = OpAccessChain %24 %557 
                                         f32 %559 = OpLoad %558 
                                Uniform f32* %561 = OpAccessChain %24 %560 
                                         f32 %562 = OpLoad %561 
                                Uniform f32* %564 = OpAccessChain %24 %563 
                                         f32 %565 = OpLoad %564 
                                Uniform f32* %567 = OpAccessChain %24 %566 
                                         f32 %568 = OpLoad %567 
                                       f32_4 %569 = OpCompositeConstruct %559 %562 %565 %568 
                                Uniform f32* %571 = OpAccessChain %24 %570 
                                         f32 %572 = OpLoad %571 
                                Uniform f32* %573 = OpAccessChain %24 %570 
                                         f32 %574 = OpLoad %573 
                                Uniform f32* %575 = OpAccessChain %24 %570 
                                         f32 %576 = OpLoad %575 
                                Uniform f32* %577 = OpAccessChain %24 %570 
                                         f32 %578 = OpLoad %577 
                                       f32_4 %579 = OpCompositeConstruct %572 %574 %576 %578 
                                         f32 %580 = OpCompositeExtract %579 0 
                                         f32 %581 = OpCompositeExtract %579 1 
                                         f32 %582 = OpCompositeExtract %579 2 
                                         f32 %583 = OpCompositeExtract %579 3 
                                       f32_4 %584 = OpCompositeConstruct %580 %581 %582 %583 
                                       f32_4 %585 = OpFMul %569 %584 
                                                      OpStore %36 %585 
                                       f32_4 %586 = OpLoad %36 
                                       f32_2 %587 = OpVectorShuffle %586 %586 2 3 
                                       f32_2 %588 = OpFNegate %587 
                                Uniform f32* %589 = OpAccessChain %24 %313 
                                         f32 %590 = OpLoad %589 
                                       f32_2 %591 = OpCompositeConstruct %590 %590 
                                       f32_2 %592 = OpFMul %588 %591 
                                       f32_3 %593 = OpLoad %486 
                                       f32_3 %594 = OpVectorShuffle %593 %592 3 1 4 
                                                      OpStore %486 %594 
                                       f32_3 %595 = OpLoad %486 
                                       f32_2 %596 = OpVectorShuffle %595 %595 0 2 
                                Uniform f32* %598 = OpAccessChain %24 %597 
                                         f32 %599 = OpLoad %598 
                                Uniform f32* %601 = OpAccessChain %24 %600 
                                         f32 %602 = OpLoad %601 
                                       f32_2 %603 = OpCompositeConstruct %599 %602 
                                       f32_2 %604 = OpFDiv %596 %603 
                                       f32_3 %605 = OpLoad %486 
                                       f32_3 %606 = OpVectorShuffle %605 %604 3 1 4 
                                                      OpStore %486 %606 
                                       f32_3 %607 = OpLoad %486 
                                       f32_2 %608 = OpVectorShuffle %607 %607 0 2 
                                       f32_2 %609 = OpLoad %474 
                                       f32_2 %610 = OpFAdd %608 %609 
                                       f32_4 %611 = OpLoad vs_TEXCOORD3 
                                       f32_4 %612 = OpVectorShuffle %611 %610 4 5 2 3 
                                                      OpStore vs_TEXCOORD3 %612 
                                Private f32* %613 = OpAccessChain %36 %202 
                                         f32 %614 = OpLoad %613 
                                         f32 %615 = OpLoad %180 
                                         f32 %616 = OpFMul %614 %615 
                                         f32 %617 = OpFAdd %616 %134 
                                Private f32* %618 = OpAccessChain %486 %202 
                                                      OpStore %618 %617 
                                         f32 %619 = OpLoad %180 
                                Private f32* %620 = OpAccessChain %486 %202 
                                         f32 %621 = OpLoad %620 
                                         f32 %622 = OpFDiv %619 %621 
                                Private f32* %623 = OpAccessChain %486 %202 
                                                      OpStore %623 %622 
                                Private f32* %624 = OpAccessChain %486 %202 
                                         f32 %625 = OpLoad %624 
                                Private f32* %626 = OpAccessChain %36 %114 
                                         f32 %627 = OpLoad %626 
                                         f32 %628 = OpFMul %625 %627 
                                                      OpStore %180 %628 
                                Private f32* %629 = OpAccessChain %9 %202 
                                         f32 %630 = OpLoad %629 
                                Private f32* %631 = OpAccessChain %486 %202 
                                         f32 %632 = OpLoad %631 
                                         f32 %633 = OpFMul %630 %632 
                                         f32 %634 = OpFAdd %633 %531 
                                Private f32* %635 = OpAccessChain %9 %202 
                                                      OpStore %635 %634 
                                Private f32* %638 = OpAccessChain %486 %202 
                                         f32 %639 = OpLoad %638 
                                 Output f32* %640 = OpAccessChain vs_TEXCOORD4 %202 
                                                      OpStore %640 %639 
                                         f32 %641 = OpLoad %180 
                                         f32 %642 = OpFNegate %641 
                                         f32 %643 = OpFMul %642 %522 
                                Private f32* %644 = OpAccessChain %9 %202 
                                         f32 %645 = OpLoad %644 
                                         f32 %646 = OpFAdd %643 %645 
                                 Output f32* %647 = OpAccessChain vs_TEXCOORD4 %114 
                                                      OpStore %647 %646 
                                 Output f32* %648 = OpAccessChain %118 %45 %114 
                                         f32 %649 = OpLoad %648 
                                         f32 %650 = OpFNegate %649 
                                 Output f32* %651 = OpAccessChain %118 %45 %114 
                                                      OpStore %651 %650 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 128
; Schema: 0
                                             OpCapability Shader 
                                      %1 = OpExtInstImport "GLSL.std.450" 
                                             OpMemoryModel Logical GLSL450 
                                             OpEntryPoint Fragment %4 "main" %21 %35 %80 %88 %104 %122 
                                             OpExecutionMode %4 OriginUpperLeft 
                                             OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                             OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                             OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                             OpDecorate %12 DescriptorSet 12 
                                             OpDecorate %12 Binding 12 
                                             OpDecorate %16 DescriptorSet 16 
                                             OpDecorate %16 Binding 16 
                                             OpDecorate vs_TEXCOORD3 Location 21 
                                             OpDecorate vs_TEXCOORD4 Location 35 
                                             OpMemberDecorate %53 0 Offset 53 
                                             OpDecorate %53 Block 
                                             OpDecorate %55 DescriptorSet 55 
                                             OpDecorate %55 Binding 55 
                                             OpDecorate vs_TEXCOORD0 Location 80 
                                             OpDecorate vs_TEXCOORD1 Location 88 
                                             OpDecorate %104 Location 104 
                                             OpDecorate %122 Location 122 
                                      %2 = OpTypeVoid 
                                      %3 = OpTypeFunction %2 
                                      %6 = OpTypeFloat 32 
                                      %7 = OpTypeVector %6 4 
                                      %8 = OpTypePointer Private %7 
                       Private f32_4* %9 = OpVariable Private 
                                     %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                     %11 = OpTypePointer UniformConstant %10 
UniformConstant read_only Texture2D* %12 = OpVariable UniformConstant 
                                     %14 = OpTypeSampler 
                                     %15 = OpTypePointer UniformConstant %14 
            UniformConstant sampler* %16 = OpVariable UniformConstant 
                                     %18 = OpTypeSampledImage %10 
                                     %20 = OpTypePointer Input %7 
               Input f32_4* vs_TEXCOORD3 = OpVariable Input 
                                     %22 = OpTypeVector %6 2 
                                     %26 = OpTypeInt 32 0 
                                 u32 %27 = OpConstant 3 
                                 u32 %29 = OpConstant 0 
                                     %30 = OpTypePointer Private %6 
                                     %34 = OpTypePointer Input %22 
               Input f32_2* vs_TEXCOORD4 = OpVariable Input 
                                     %36 = OpTypePointer Input %6 
                                 u32 %40 = OpConstant 1 
                                 f32 %48 = OpConstant 3.674022E-40 
                                 f32 %49 = OpConstant 3.674022E-40 
                      Private f32_4* %52 = OpVariable Private 
                                     %53 = OpTypeStruct %7 
                                     %54 = OpTypePointer Uniform %53 
            Uniform struct {f32_4;}* %55 = OpVariable Uniform 
                                     %56 = OpTypeInt 32 1 
                                 i32 %57 = OpConstant 0 
                                     %58 = OpTypeVector %6 3 
                                     %59 = OpTypePointer Uniform %7 
                                     %69 = OpTypePointer Uniform %6 
               Input f32_4* vs_TEXCOORD0 = OpVariable Input 
               Input f32_4* vs_TEXCOORD1 = OpVariable Input 
                     Private f32_4* %101 = OpVariable Private 
                       Input f32_4* %104 = OpVariable Input 
                                    %121 = OpTypePointer Output %7 
                      Output f32_4* %122 = OpVariable Output 
                                 void %4 = OpFunction None %3 
                                      %5 = OpLabel 
                 read_only Texture2D %13 = OpLoad %12 
                             sampler %17 = OpLoad %16 
          read_only Texture2DSampled %19 = OpSampledImage %13 %17 
                               f32_4 %23 = OpLoad vs_TEXCOORD3 
                               f32_2 %24 = OpVectorShuffle %23 %23 0 1 
                               f32_4 %25 = OpImageSampleImplicitLod %19 %24 
                                 f32 %28 = OpCompositeExtract %25 3 
                        Private f32* %31 = OpAccessChain %9 %29 
                                             OpStore %31 %28 
                        Private f32* %32 = OpAccessChain %9 %29 
                                 f32 %33 = OpLoad %32 
                          Input f32* %37 = OpAccessChain vs_TEXCOORD4 %29 
                                 f32 %38 = OpLoad %37 
                                 f32 %39 = OpFMul %33 %38 
                          Input f32* %41 = OpAccessChain vs_TEXCOORD4 %40 
                                 f32 %42 = OpLoad %41 
                                 f32 %43 = OpFNegate %42 
                                 f32 %44 = OpFAdd %39 %43 
                        Private f32* %45 = OpAccessChain %9 %29 
                                             OpStore %45 %44 
                        Private f32* %46 = OpAccessChain %9 %29 
                                 f32 %47 = OpLoad %46 
                                 f32 %50 = OpExtInst %1 43 %47 %48 %49 
                        Private f32* %51 = OpAccessChain %9 %29 
                                             OpStore %51 %50 
                      Uniform f32_4* %60 = OpAccessChain %55 %57 
                               f32_4 %61 = OpLoad %60 
                               f32_3 %62 = OpVectorShuffle %61 %61 3 3 3 
                      Uniform f32_4* %63 = OpAccessChain %55 %57 
                               f32_4 %64 = OpLoad %63 
                               f32_3 %65 = OpVectorShuffle %64 %64 0 1 2 
                               f32_3 %66 = OpFMul %62 %65 
                               f32_4 %67 = OpLoad %52 
                               f32_4 %68 = OpVectorShuffle %67 %66 4 5 6 3 
                                             OpStore %52 %68 
                        Uniform f32* %70 = OpAccessChain %55 %57 %27 
                                 f32 %71 = OpLoad %70 
                        Private f32* %72 = OpAccessChain %52 %27 
                                             OpStore %72 %71 
                               f32_4 %73 = OpLoad %9 
                               f32_4 %74 = OpVectorShuffle %73 %73 0 0 0 0 
                               f32_4 %75 = OpLoad %52 
                               f32_4 %76 = OpFMul %74 %75 
                                             OpStore %9 %76 
                 read_only Texture2D %77 = OpLoad %12 
                             sampler %78 = OpLoad %16 
          read_only Texture2DSampled %79 = OpSampledImage %77 %78 
                               f32_4 %81 = OpLoad vs_TEXCOORD0 
                               f32_2 %82 = OpVectorShuffle %81 %81 0 1 
                               f32_4 %83 = OpImageSampleImplicitLod %79 %82 
                                 f32 %84 = OpCompositeExtract %83 3 
                        Private f32* %85 = OpAccessChain %52 %29 
                                             OpStore %85 %84 
                        Private f32* %86 = OpAccessChain %52 %29 
                                 f32 %87 = OpLoad %86 
                          Input f32* %89 = OpAccessChain vs_TEXCOORD1 %29 
                                 f32 %90 = OpLoad %89 
                                 f32 %91 = OpFMul %87 %90 
                          Input f32* %92 = OpAccessChain vs_TEXCOORD1 %27 
                                 f32 %93 = OpLoad %92 
                                 f32 %94 = OpFNegate %93 
                                 f32 %95 = OpFAdd %91 %94 
                        Private f32* %96 = OpAccessChain %52 %29 
                                             OpStore %96 %95 
                        Private f32* %97 = OpAccessChain %52 %29 
                                 f32 %98 = OpLoad %97 
                                 f32 %99 = OpExtInst %1 43 %98 %48 %49 
                       Private f32* %100 = OpAccessChain %52 %29 
                                             OpStore %100 %99 
                              f32_4 %102 = OpLoad %52 
                              f32_4 %103 = OpVectorShuffle %102 %102 0 0 0 0 
                              f32_4 %105 = OpLoad %104 
                              f32_4 %106 = OpFMul %103 %105 
                                             OpStore %101 %106 
                         Input f32* %107 = OpAccessChain %104 %27 
                                f32 %108 = OpLoad %107 
                                f32 %109 = OpFNegate %108 
                       Private f32* %110 = OpAccessChain %52 %29 
                                f32 %111 = OpLoad %110 
                                f32 %112 = OpFMul %109 %111 
                                f32 %113 = OpFAdd %112 %49 
                       Private f32* %114 = OpAccessChain %52 %29 
                                             OpStore %114 %113 
                              f32_4 %115 = OpLoad %9 
                              f32_4 %116 = OpLoad %52 
                              f32_4 %117 = OpVectorShuffle %116 %116 0 0 0 0 
                              f32_4 %118 = OpFMul %115 %117 
                              f32_4 %119 = OpLoad %101 
                              f32_4 %120 = OpFAdd %118 %119 
                                             OpStore %9 %120 
                              f32_4 %123 = OpLoad %9 
                              f32_4 %124 = OpLoad vs_TEXCOORD3 
                              f32_4 %125 = OpVectorShuffle %124 %124 2 2 2 2 
                              f32_4 %126 = OpFMul %123 %125 
                                             OpStore %122 %126 
                                             OpReturn
                                             OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "OUTLINE_ON" "UNDERLAY_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "OUTLINE_ON" "UNDERLAY_ON" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _FaceColor;
uniform 	float _FaceDilate;
uniform 	float _OutlineSoftness;
uniform 	vec4 _OutlineColor;
uniform 	float _OutlineWidth;
uniform 	float _UnderlayOffsetX;
uniform 	float _UnderlayOffsetY;
uniform 	float _UnderlayDilate;
uniform 	float _UnderlaySoftness;
uniform 	float _WeightNormal;
uniform 	float _WeightBold;
uniform 	float _ScaleRatioA;
uniform 	float _ScaleRatioC;
uniform 	float _VertexOffsetX;
uniform 	float _VertexOffsetY;
uniform 	vec4 _ClipRect;
uniform 	float _MaskSoftnessX;
uniform 	float _MaskSoftnessY;
uniform 	float _TextureWidth;
uniform 	float _TextureHeight;
uniform 	float _GradientScale;
uniform 	float _ScaleX;
uniform 	float _ScaleY;
uniform 	float _PerspectiveFilter;
uniform 	float _Sharpness;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_COLOR0;
in  vec2 in_TEXCOORD0;
in  vec2 in_TEXCOORD1;
out vec4 vs_COLOR0;
out vec4 vs_COLOR1;
out vec4 vs_TEXCOORD0;
out vec4 vs_TEXCOORD1;
out vec4 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec2 vs_TEXCOORD4;
vec2 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
vec4 u_xlat6;
vec3 u_xlat7;
vec2 u_xlat8;
float u_xlat14;
float u_xlat15;
float u_xlat21;
bool u_xlatb21;
void main()
{
    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
    gl_Position = u_xlat2;
    vs_COLOR0.w = _FaceColor.w;
    u_xlat3.xyz = in_COLOR0.xyz;
    u_xlat3.w = 1.0;
    u_xlat4 = u_xlat3 * _FaceColor;
    u_xlat2.xyz = u_xlat4.www * u_xlat4.xyz;
    vs_COLOR0.xyz = u_xlat2.xyz;
    u_xlat5.xyz = (-u_xlat2.xyz);
    u_xlat5.w = (-u_xlat4.w);
    u_xlat6.xyz = _OutlineColor.www * _OutlineColor.xyz;
    u_xlat6.w = _OutlineColor.w;
    u_xlat5 = u_xlat5 + u_xlat6;
    u_xlat14 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat14 = inversesqrt(u_xlat14);
    u_xlat1.xyz = vec3(u_xlat14) * u_xlat1.xyz;
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat14 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat14 = inversesqrt(u_xlat14);
    u_xlat2.xyz = vec3(u_xlat14) * u_xlat2.xyz;
    u_xlat14 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat1.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;
    u_xlat1.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat1.xy;
    u_xlat1.xy = abs(u_xlat1.xy) * vec2(_ScaleX, _ScaleY);
    u_xlat1.xy = u_xlat2.ww / u_xlat1.xy;
    u_xlat21 = dot(u_xlat1.xy, u_xlat1.xy);
    u_xlat1.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) * vec2(0.25, 0.25) + u_xlat1.xy;
    vs_TEXCOORD2.zw = vec2(0.25, 0.25) / u_xlat1.xy;
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.x = abs(in_TEXCOORD1.y) * _GradientScale;
    u_xlat8.x = _Sharpness + 1.0;
    u_xlat1.x = u_xlat8.x * u_xlat1.x;
    u_xlat8.x = u_xlat21 * u_xlat1.x;
    u_xlat15 = (-_PerspectiveFilter) + 1.0;
    u_xlat15 = u_xlat15 * abs(u_xlat8.x);
    u_xlat21 = u_xlat21 * u_xlat1.x + (-u_xlat15);
    u_xlat14 = abs(u_xlat14) * u_xlat21 + u_xlat15;
    u_xlatb21 = hlslcc_mtx4x4glstate_matrix_projection[3].w==0.0;
    u_xlat14 = (u_xlatb21) ? u_xlat14 : u_xlat8.x;
    u_xlat21 = _OutlineSoftness * _ScaleRatioA;
    u_xlat21 = u_xlat21 * u_xlat14 + 1.0;
    u_xlat1.x = u_xlat14 / u_xlat21;
    u_xlat21 = _OutlineWidth * _ScaleRatioA;
    u_xlat21 = u_xlat21 * 0.5;
    u_xlat8.x = u_xlat1.x * u_xlat21;
    u_xlat8.x = u_xlat8.x + u_xlat8.x;
    u_xlat8.x = min(u_xlat8.x, 1.0);
    u_xlat8.x = sqrt(u_xlat8.x);
    u_xlat2 = u_xlat5 * u_xlat8.xxxx;
    vs_COLOR1.xyz = u_xlat4.xyz * u_xlat4.www + u_xlat2.xyz;
    vs_COLOR1.w = u_xlat3.w * _FaceColor.w + u_xlat2.w;
    u_xlat2 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));
    u_xlat2 = min(u_xlat2, vec4(2e+10, 2e+10, 2e+10, 2e+10));
    u_xlat8.xy = u_xlat0.xy + (-u_xlat2.xy);
    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + (-u_xlat2.xy);
    vs_TEXCOORD2.xy = (-u_xlat2.zw) + u_xlat0.xy;
    u_xlat0.xy = (-u_xlat2.xy) + u_xlat2.zw;
    vs_TEXCOORD0.zw = u_xlat8.xy / u_xlat0.xy;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlatb0 = 0.0>=in_TEXCOORD1.y;
    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);
    u_xlat7.x = (-_WeightNormal) + _WeightBold;
    u_xlat0.x = u_xlat0.x * u_xlat7.x + _WeightNormal;
    u_xlat0.x = u_xlat0.x * 0.25 + _FaceDilate;
    u_xlat0.x = u_xlat0.x * _ScaleRatioA;
    u_xlat0.x = (-u_xlat0.x) * 0.5 + 0.5;
    u_xlat1.w = u_xlat0.x * u_xlat1.x + -0.5;
    vs_TEXCOORD1.y = (-u_xlat21) * u_xlat1.x + u_xlat1.w;
    vs_TEXCOORD1.z = u_xlat21 * u_xlat1.x + u_xlat1.w;
    vs_TEXCOORD1.xw = u_xlat1.xw;
    vs_TEXCOORD3.z = in_COLOR0.w;
    vs_TEXCOORD3.w = 0.0;
    u_xlat1 = vec4(_UnderlaySoftness, _UnderlayDilate, _UnderlayOffsetX, _UnderlayOffsetY) * vec4(vec4(_ScaleRatioC, _ScaleRatioC, _ScaleRatioC, _ScaleRatioC));
    u_xlat7.xz = (-u_xlat1.zw) * vec2(_GradientScale);
    u_xlat7.xz = u_xlat7.xz / vec2(_TextureWidth, _TextureHeight);
    vs_TEXCOORD3.xy = u_xlat7.xz + in_TEXCOORD0.xy;
    u_xlat7.x = u_xlat1.x * u_xlat14 + 1.0;
    u_xlat7.x = u_xlat14 / u_xlat7.x;
    u_xlat14 = u_xlat1.y * 0.5;
    u_xlat0.x = u_xlat0.x * u_xlat7.x + -0.5;
    vs_TEXCOORD4.y = (-u_xlat14) * u_xlat7.x + u_xlat0.x;
    vs_TEXCOORD4.x = u_xlat7.x;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _UnderlayColor;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
in  vec4 vs_COLOR0;
in  vec4 vs_COLOR1;
in  vec4 vs_TEXCOORD0;
in  vec4 vs_TEXCOORD1;
in  vec4 vs_TEXCOORD3;
in  vec2 vs_TEXCOORD4;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
void main()
{
    u_xlat0 = texture(_MainTex, vs_TEXCOORD3.xy);
    u_xlat0.x = u_xlat0.w * vs_TEXCOORD4.x + (-vs_TEXCOORD4.y);
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat1.xyz = _UnderlayColor.www * _UnderlayColor.xyz;
    u_xlat1.w = _UnderlayColor.w;
    u_xlat0 = u_xlat0.xxxx * u_xlat1;
    u_xlat1 = vs_COLOR0 + (-vs_COLOR1);
    u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2.xy = u_xlat2.ww * vs_TEXCOORD1.xx + (-vs_TEXCOORD1.zy);
    u_xlat2.xy = clamp(u_xlat2.xy, 0.0, 1.0);
    u_xlat1 = u_xlat2.xxxx * u_xlat1 + vs_COLOR1;
    u_xlat3 = u_xlat2.yyyy * u_xlat1;
    u_xlat1.x = (-u_xlat1.w) * u_xlat2.y + 1.0;
    u_xlat0 = u_xlat0 * u_xlat1.xxxx + u_xlat3;
    SV_Target0 = u_xlat0 * vs_TEXCOORD3.zzzz;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "OUTLINE_ON" "UNDERLAY_ON" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 653
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %12 %118 %122 %129 %196 %299 %308 %412 %468 %474 %534 %552 %637 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpDecorate %12 Location 12 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpDecorate %19 ArrayStride 19 
                                                      OpDecorate %20 ArrayStride 20 
                                                      OpDecorate %21 ArrayStride 21 
                                                      OpMemberDecorate %22 0 Offset 22 
                                                      OpMemberDecorate %22 1 Offset 22 
                                                      OpMemberDecorate %22 2 Offset 22 
                                                      OpMemberDecorate %22 3 Offset 22 
                                                      OpMemberDecorate %22 4 Offset 22 
                                                      OpMemberDecorate %22 5 Offset 22 
                                                      OpMemberDecorate %22 6 Offset 22 
                                                      OpMemberDecorate %22 7 Offset 22 
                                                      OpMemberDecorate %22 8 Offset 22 
                                                      OpMemberDecorate %22 9 Offset 22 
                                                      OpMemberDecorate %22 10 Offset 22 
                                                      OpMemberDecorate %22 11 Offset 22 
                                                      OpMemberDecorate %22 12 Offset 22 
                                                      OpMemberDecorate %22 13 Offset 22 
                                                      OpMemberDecorate %22 14 Offset 22 
                                                      OpMemberDecorate %22 15 Offset 22 
                                                      OpMemberDecorate %22 16 Offset 22 
                                                      OpMemberDecorate %22 17 Offset 22 
                                                      OpMemberDecorate %22 18 Offset 22 
                                                      OpMemberDecorate %22 19 Offset 22 
                                                      OpMemberDecorate %22 20 Offset 22 
                                                      OpMemberDecorate %22 21 Offset 22 
                                                      OpMemberDecorate %22 22 Offset 22 
                                                      OpMemberDecorate %22 23 Offset 22 
                                                      OpMemberDecorate %22 24 Offset 22 
                                                      OpMemberDecorate %22 25 Offset 22 
                                                      OpMemberDecorate %22 26 Offset 22 
                                                      OpMemberDecorate %22 27 Offset 22 
                                                      OpMemberDecorate %22 28 Offset 22 
                                                      OpMemberDecorate %22 29 Offset 22 
                                                      OpMemberDecorate %22 30 Offset 22 
                                                      OpDecorate %22 Block 
                                                      OpDecorate %24 DescriptorSet 24 
                                                      OpDecorate %24 Binding 24 
                                                      OpMemberDecorate %116 0 BuiltIn 116 
                                                      OpMemberDecorate %116 1 BuiltIn 116 
                                                      OpMemberDecorate %116 2 BuiltIn 116 
                                                      OpDecorate %116 Block 
                                                      OpDecorate %122 Location 122 
                                                      OpDecorate %129 Location 129 
                                                      OpDecorate %196 Location 196 
                                                      OpDecorate vs_TEXCOORD2 Location 299 
                                                      OpDecorate %308 Location 308 
                                                      OpDecorate %412 Location 412 
                                                      OpDecorate vs_TEXCOORD0 Location 468 
                                                      OpDecorate %474 Location 474 
                                                      OpDecorate vs_TEXCOORD1 Location 534 
                                                      OpDecorate vs_TEXCOORD3 Location 552 
                                                      OpDecorate vs_TEXCOORD4 Location 637 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 2 
                                               %8 = OpTypePointer Private %7 
                                Private f32_2* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 4 
                                              %11 = OpTypePointer Input %10 
                                 Input f32_4* %12 = OpVariable Input 
                                              %15 = OpTypeVector %6 3 
                                              %16 = OpTypeInt 32 0 
                                          u32 %17 = OpConstant 4 
                                              %18 = OpTypeArray %10 %17 
                                              %19 = OpTypeArray %10 %17 
                                              %20 = OpTypeArray %10 %17 
                                              %21 = OpTypeArray %10 %17 
                                              %22 = OpTypeStruct %15 %10 %18 %19 %20 %21 %10 %6 %6 %10 %6 %6 %6 %6 %6 %6 %6 %6 %6 %6 %6 %10 %6 %6 %6 %6 %6 %6 %6 %6 %6 
                                              %23 = OpTypePointer Uniform %22 
Uniform struct {f32_3; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4[4]; f32_4; f32; f32; f32_4; f32; f32; f32; f32; f32; f32; f32; f32; f32; f32; f32; f32_4; f32; f32; f32; f32; f32; f32; f32; f32; f32;}* %24 = OpVariable Uniform 
                                              %25 = OpTypeInt 32 1 
                                          i32 %26 = OpConstant 19 
                                              %27 = OpTypePointer Uniform %6 
                                          i32 %30 = OpConstant 20 
                                              %35 = OpTypePointer Private %10 
                               Private f32_4* %36 = OpVariable Private 
                                          i32 %39 = OpConstant 2 
                                          i32 %40 = OpConstant 1 
                                              %41 = OpTypePointer Uniform %10 
                                          i32 %45 = OpConstant 0 
                               Private f32_4* %60 = OpVariable Private 
                                          i32 %62 = OpConstant 3 
                                              %80 = OpTypePointer Uniform %15 
                               Private f32_4* %86 = OpVariable Private 
                                          i32 %89 = OpConstant 5 
                                         u32 %114 = OpConstant 1 
                                             %115 = OpTypeArray %6 %114 
                                             %116 = OpTypeStruct %10 %6 %115 
                                             %117 = OpTypePointer Output %116 
        Output struct {f32_4; f32; f32[1];}* %118 = OpVariable Output 
                                             %120 = OpTypePointer Output %10 
                               Output f32_4* %122 = OpVariable Output 
                                         i32 %123 = OpConstant 6 
                                         u32 %124 = OpConstant 3 
                                             %127 = OpTypePointer Output %6 
                                Input f32_4* %129 = OpVariable Input 
                                         f32 %134 = OpConstant 3.674022E-40 
                                             %135 = OpTypePointer Private %6 
                              Private f32_4* %137 = OpVariable Private 
                              Private f32_4* %153 = OpVariable Private 
                              Private f32_4* %163 = OpVariable Private 
                                         i32 %164 = OpConstant 9 
                                Private f32* %180 = OpVariable Private 
                                             %195 = OpTypePointer Input %15 
                                Input f32_3* %196 = OpVariable Input 
                                         u32 %202 = OpConstant 0 
                                         u32 %215 = OpConstant 2 
                                         i32 %239 = OpConstant 4 
                                         i32 %261 = OpConstant 27 
                                         i32 %264 = OpConstant 28 
                                Private f32* %278 = OpVariable Private 
                                         i32 %284 = OpConstant 22 
                                         i32 %287 = OpConstant 23 
                                         f32 %291 = OpConstant 3.674022E-40 
                                       f32_2 %292 = OpConstantComposite %291 %291 
                       Output f32_4* vs_TEXCOORD2 = OpVariable Output 
                                             %307 = OpTypePointer Input %7 
                                Input f32_2* %308 = OpVariable Input 
                                             %309 = OpTypePointer Input %6 
                                         i32 %313 = OpConstant 26 
                              Private f32_2* %318 = OpVariable Private 
                                         i32 %319 = OpConstant 30 
                                Private f32* %335 = OpVariable Private 
                                         i32 %336 = OpConstant 29 
                                             %359 = OpTypeBool 
                                             %360 = OpTypePointer Private %359 
                               Private bool* %361 = OpVariable Private 
                                         f32 %364 = OpConstant 3.674022E-40 
                                             %367 = OpTypePointer Function %6 
                                         i32 %376 = OpConstant 8 
                                         i32 %379 = OpConstant 17 
                                         i32 %391 = OpConstant 10 
                               Output f32_4* %412 = OpVariable Output 
                                         i32 %432 = OpConstant 21 
                                         f32 %435 = OpConstant 3.674022E-40 
                                       f32_4 %436 = OpConstantComposite %435 %435 %435 %435 
                                         f32 %439 = OpConstant 3.674022E-40 
                                       f32_4 %440 = OpConstantComposite %439 %439 %439 %439 
                                         f32 %448 = OpConstant 3.674022E-40 
                                       f32_2 %449 = OpConstantComposite %448 %448 
                       Output f32_4* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_2* %474 = OpVariable Input 
                               Private bool* %478 = OpVariable Private 
                                             %485 = OpTypePointer Private %15 
                              Private f32_3* %486 = OpVariable Private 
                                         i32 %487 = OpConstant 15 
                                         i32 %491 = OpConstant 16 
                                         i32 %508 = OpConstant 7 
                                         f32 %522 = OpConstant 3.674022E-40 
                                         f32 %531 = OpConstant 3.674022E-40 
                       Output f32_4* vs_TEXCOORD1 = OpVariable Output 
                       Output f32_4* vs_TEXCOORD3 = OpVariable Output 
                                         i32 %557 = OpConstant 14 
                                         i32 %560 = OpConstant 13 
                                         i32 %563 = OpConstant 11 
                                         i32 %566 = OpConstant 12 
                                         i32 %570 = OpConstant 18 
                                         i32 %597 = OpConstant 24 
                                         i32 %600 = OpConstant 25 
                                             %636 = OpTypePointer Output %7 
                       Output f32_2* vs_TEXCOORD4 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                               Function f32* %368 = OpVariable Function 
                                        f32_4 %13 = OpLoad %12 
                                        f32_2 %14 = OpVectorShuffle %13 %13 0 1 
                                 Uniform f32* %28 = OpAccessChain %24 %26 
                                          f32 %29 = OpLoad %28 
                                 Uniform f32* %31 = OpAccessChain %24 %30 
                                          f32 %32 = OpLoad %31 
                                        f32_2 %33 = OpCompositeConstruct %29 %32 
                                        f32_2 %34 = OpFAdd %14 %33 
                                                      OpStore %9 %34 
                                        f32_2 %37 = OpLoad %9 
                                        f32_4 %38 = OpVectorShuffle %37 %37 1 1 1 1 
                               Uniform f32_4* %42 = OpAccessChain %24 %39 %40 
                                        f32_4 %43 = OpLoad %42 
                                        f32_4 %44 = OpFMul %38 %43 
                                                      OpStore %36 %44 
                               Uniform f32_4* %46 = OpAccessChain %24 %39 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_2 %48 = OpLoad %9 
                                        f32_4 %49 = OpVectorShuffle %48 %48 0 0 0 0 
                                        f32_4 %50 = OpFMul %47 %49 
                                        f32_4 %51 = OpLoad %36 
                                        f32_4 %52 = OpFAdd %50 %51 
                                                      OpStore %36 %52 
                               Uniform f32_4* %53 = OpAccessChain %24 %39 %39 
                                        f32_4 %54 = OpLoad %53 
                                        f32_4 %55 = OpLoad %12 
                                        f32_4 %56 = OpVectorShuffle %55 %55 2 2 2 2 
                                        f32_4 %57 = OpFMul %54 %56 
                                        f32_4 %58 = OpLoad %36 
                                        f32_4 %59 = OpFAdd %57 %58 
                                                      OpStore %36 %59 
                                        f32_4 %61 = OpLoad %36 
                               Uniform f32_4* %63 = OpAccessChain %24 %39 %62 
                                        f32_4 %64 = OpLoad %63 
                                        f32_4 %65 = OpFAdd %61 %64 
                                                      OpStore %60 %65 
                               Uniform f32_4* %66 = OpAccessChain %24 %39 %62 
                                        f32_4 %67 = OpLoad %66 
                                        f32_3 %68 = OpVectorShuffle %67 %67 0 1 2 
                                        f32_4 %69 = OpLoad %12 
                                        f32_3 %70 = OpVectorShuffle %69 %69 3 3 3 
                                        f32_3 %71 = OpFMul %68 %70 
                                        f32_4 %72 = OpLoad %36 
                                        f32_3 %73 = OpVectorShuffle %72 %72 0 1 2 
                                        f32_3 %74 = OpFAdd %71 %73 
                                        f32_4 %75 = OpLoad %36 
                                        f32_4 %76 = OpVectorShuffle %75 %74 4 5 6 3 
                                                      OpStore %36 %76 
                                        f32_4 %77 = OpLoad %36 
                                        f32_3 %78 = OpVectorShuffle %77 %77 0 1 2 
                                        f32_3 %79 = OpFNegate %78 
                               Uniform f32_3* %81 = OpAccessChain %24 %45 
                                        f32_3 %82 = OpLoad %81 
                                        f32_3 %83 = OpFAdd %79 %82 
                                        f32_4 %84 = OpLoad %36 
                                        f32_4 %85 = OpVectorShuffle %84 %83 4 5 6 3 
                                                      OpStore %36 %85 
                                        f32_4 %87 = OpLoad %60 
                                        f32_4 %88 = OpVectorShuffle %87 %87 1 1 1 1 
                               Uniform f32_4* %90 = OpAccessChain %24 %89 %40 
                                        f32_4 %91 = OpLoad %90 
                                        f32_4 %92 = OpFMul %88 %91 
                                                      OpStore %86 %92 
                               Uniform f32_4* %93 = OpAccessChain %24 %89 %45 
                                        f32_4 %94 = OpLoad %93 
                                        f32_4 %95 = OpLoad %60 
                                        f32_4 %96 = OpVectorShuffle %95 %95 0 0 0 0 
                                        f32_4 %97 = OpFMul %94 %96 
                                        f32_4 %98 = OpLoad %86 
                                        f32_4 %99 = OpFAdd %97 %98 
                                                      OpStore %86 %99 
                              Uniform f32_4* %100 = OpAccessChain %24 %89 %39 
                                       f32_4 %101 = OpLoad %100 
                                       f32_4 %102 = OpLoad %60 
                                       f32_4 %103 = OpVectorShuffle %102 %102 2 2 2 2 
                                       f32_4 %104 = OpFMul %101 %103 
                                       f32_4 %105 = OpLoad %86 
                                       f32_4 %106 = OpFAdd %104 %105 
                                                      OpStore %86 %106 
                              Uniform f32_4* %107 = OpAccessChain %24 %89 %62 
                                       f32_4 %108 = OpLoad %107 
                                       f32_4 %109 = OpLoad %60 
                                       f32_4 %110 = OpVectorShuffle %109 %109 3 3 3 3 
                                       f32_4 %111 = OpFMul %108 %110 
                                       f32_4 %112 = OpLoad %86 
                                       f32_4 %113 = OpFAdd %111 %112 
                                                      OpStore %60 %113 
                                       f32_4 %119 = OpLoad %60 
                               Output f32_4* %121 = OpAccessChain %118 %45 
                                                      OpStore %121 %119 
                                Uniform f32* %125 = OpAccessChain %24 %123 %124 
                                         f32 %126 = OpLoad %125 
                                 Output f32* %128 = OpAccessChain %122 %124 
                                                      OpStore %128 %126 
                                       f32_4 %130 = OpLoad %129 
                                       f32_3 %131 = OpVectorShuffle %130 %130 0 1 2 
                                       f32_4 %132 = OpLoad %86 
                                       f32_4 %133 = OpVectorShuffle %132 %131 4 5 6 3 
                                                      OpStore %86 %133 
                                Private f32* %136 = OpAccessChain %86 %124 
                                                      OpStore %136 %134 
                                       f32_4 %138 = OpLoad %86 
                              Uniform f32_4* %139 = OpAccessChain %24 %123 
                                       f32_4 %140 = OpLoad %139 
                                       f32_4 %141 = OpFMul %138 %140 
                                                      OpStore %137 %141 
                                       f32_4 %142 = OpLoad %137 
                                       f32_3 %143 = OpVectorShuffle %142 %142 3 3 3 
                                       f32_4 %144 = OpLoad %137 
                                       f32_3 %145 = OpVectorShuffle %144 %144 0 1 2 
                                       f32_3 %146 = OpFMul %143 %145 
                                       f32_4 %147 = OpLoad %60 
                                       f32_4 %148 = OpVectorShuffle %147 %146 4 5 6 3 
                                                      OpStore %60 %148 
                                       f32_4 %149 = OpLoad %60 
                                       f32_3 %150 = OpVectorShuffle %149 %149 0 1 2 
                                       f32_4 %151 = OpLoad %122 
                                       f32_4 %152 = OpVectorShuffle %151 %150 4 5 6 3 
                                                      OpStore %122 %152 
                                       f32_4 %154 = OpLoad %60 
                                       f32_3 %155 = OpVectorShuffle %154 %154 0 1 2 
                                       f32_3 %156 = OpFNegate %155 
                                       f32_4 %157 = OpLoad %153 
                                       f32_4 %158 = OpVectorShuffle %157 %156 4 5 6 3 
                                                      OpStore %153 %158 
                                Private f32* %159 = OpAccessChain %137 %124 
                                         f32 %160 = OpLoad %159 
                                         f32 %161 = OpFNegate %160 
                                Private f32* %162 = OpAccessChain %153 %124 
                                                      OpStore %162 %161 
                              Uniform f32_4* %165 = OpAccessChain %24 %164 
                                       f32_4 %166 = OpLoad %165 
                                       f32_3 %167 = OpVectorShuffle %166 %166 3 3 3 
                              Uniform f32_4* %168 = OpAccessChain %24 %164 
                                       f32_4 %169 = OpLoad %168 
                                       f32_3 %170 = OpVectorShuffle %169 %169 0 1 2 
                                       f32_3 %171 = OpFMul %167 %170 
                                       f32_4 %172 = OpLoad %163 
                                       f32_4 %173 = OpVectorShuffle %172 %171 4 5 6 3 
                                                      OpStore %163 %173 
                                Uniform f32* %174 = OpAccessChain %24 %164 %124 
                                         f32 %175 = OpLoad %174 
                                Private f32* %176 = OpAccessChain %163 %124 
                                                      OpStore %176 %175 
                                       f32_4 %177 = OpLoad %153 
                                       f32_4 %178 = OpLoad %163 
                                       f32_4 %179 = OpFAdd %177 %178 
                                                      OpStore %153 %179 
                                       f32_4 %181 = OpLoad %36 
                                       f32_3 %182 = OpVectorShuffle %181 %181 0 1 2 
                                       f32_4 %183 = OpLoad %36 
                                       f32_3 %184 = OpVectorShuffle %183 %183 0 1 2 
                                         f32 %185 = OpDot %182 %184 
                                                      OpStore %180 %185 
                                         f32 %186 = OpLoad %180 
                                         f32 %187 = OpExtInst %1 32 %186 
                                                      OpStore %180 %187 
                                         f32 %188 = OpLoad %180 
                                       f32_3 %189 = OpCompositeConstruct %188 %188 %188 
                                       f32_4 %190 = OpLoad %36 
                                       f32_3 %191 = OpVectorShuffle %190 %190 0 1 2 
                                       f32_3 %192 = OpFMul %189 %191 
                                       f32_4 %193 = OpLoad %36 
                                       f32_4 %194 = OpVectorShuffle %193 %192 4 5 6 3 
                                                      OpStore %36 %194 
                                       f32_3 %197 = OpLoad %196 
                              Uniform f32_4* %198 = OpAccessChain %24 %62 %45 
                                       f32_4 %199 = OpLoad %198 
                                       f32_3 %200 = OpVectorShuffle %199 %199 0 1 2 
                                         f32 %201 = OpDot %197 %200 
                                Private f32* %203 = OpAccessChain %60 %202 
                                                      OpStore %203 %201 
                                       f32_3 %204 = OpLoad %196 
                              Uniform f32_4* %205 = OpAccessChain %24 %62 %40 
                                       f32_4 %206 = OpLoad %205 
                                       f32_3 %207 = OpVectorShuffle %206 %206 0 1 2 
                                         f32 %208 = OpDot %204 %207 
                                Private f32* %209 = OpAccessChain %60 %114 
                                                      OpStore %209 %208 
                                       f32_3 %210 = OpLoad %196 
                              Uniform f32_4* %211 = OpAccessChain %24 %62 %39 
                                       f32_4 %212 = OpLoad %211 
                                       f32_3 %213 = OpVectorShuffle %212 %212 0 1 2 
                                         f32 %214 = OpDot %210 %213 
                                Private f32* %216 = OpAccessChain %60 %215 
                                                      OpStore %216 %214 
                                       f32_4 %217 = OpLoad %60 
                                       f32_3 %218 = OpVectorShuffle %217 %217 0 1 2 
                                       f32_4 %219 = OpLoad %60 
                                       f32_3 %220 = OpVectorShuffle %219 %219 0 1 2 
                                         f32 %221 = OpDot %218 %220 
                                                      OpStore %180 %221 
                                         f32 %222 = OpLoad %180 
                                         f32 %223 = OpExtInst %1 32 %222 
                                                      OpStore %180 %223 
                                         f32 %224 = OpLoad %180 
                                       f32_3 %225 = OpCompositeConstruct %224 %224 %224 
                                       f32_4 %226 = OpLoad %60 
                                       f32_3 %227 = OpVectorShuffle %226 %226 0 1 2 
                                       f32_3 %228 = OpFMul %225 %227 
                                       f32_4 %229 = OpLoad %60 
                                       f32_4 %230 = OpVectorShuffle %229 %228 4 5 6 3 
                                                      OpStore %60 %230 
                                       f32_4 %231 = OpLoad %60 
                                       f32_3 %232 = OpVectorShuffle %231 %231 0 1 2 
                                       f32_4 %233 = OpLoad %36 
                                       f32_3 %234 = OpVectorShuffle %233 %233 0 1 2 
                                         f32 %235 = OpDot %232 %234 
                                                      OpStore %180 %235 
                              Uniform f32_4* %236 = OpAccessChain %24 %40 
                                       f32_4 %237 = OpLoad %236 
                                       f32_2 %238 = OpVectorShuffle %237 %237 1 1 
                              Uniform f32_4* %240 = OpAccessChain %24 %239 %40 
                                       f32_4 %241 = OpLoad %240 
                                       f32_2 %242 = OpVectorShuffle %241 %241 0 1 
                                       f32_2 %243 = OpFMul %238 %242 
                                       f32_4 %244 = OpLoad %36 
                                       f32_4 %245 = OpVectorShuffle %244 %243 4 5 2 3 
                                                      OpStore %36 %245 
                              Uniform f32_4* %246 = OpAccessChain %24 %239 %45 
                                       f32_4 %247 = OpLoad %246 
                                       f32_2 %248 = OpVectorShuffle %247 %247 0 1 
                              Uniform f32_4* %249 = OpAccessChain %24 %40 
                                       f32_4 %250 = OpLoad %249 
                                       f32_2 %251 = OpVectorShuffle %250 %250 0 0 
                                       f32_2 %252 = OpFMul %248 %251 
                                       f32_4 %253 = OpLoad %36 
                                       f32_2 %254 = OpVectorShuffle %253 %253 0 1 
                                       f32_2 %255 = OpFAdd %252 %254 
                                       f32_4 %256 = OpLoad %36 
                                       f32_4 %257 = OpVectorShuffle %256 %255 4 5 2 3 
                                                      OpStore %36 %257 
                                       f32_4 %258 = OpLoad %36 
                                       f32_2 %259 = OpVectorShuffle %258 %258 0 1 
                                       f32_2 %260 = OpExtInst %1 4 %259 
                                Uniform f32* %262 = OpAccessChain %24 %261 
                                         f32 %263 = OpLoad %262 
                                Uniform f32* %265 = OpAccessChain %24 %264 
                                         f32 %266 = OpLoad %265 
                                       f32_2 %267 = OpCompositeConstruct %263 %266 
                                       f32_2 %268 = OpFMul %260 %267 
                                       f32_4 %269 = OpLoad %36 
                                       f32_4 %270 = OpVectorShuffle %269 %268 4 5 2 3 
                                                      OpStore %36 %270 
                                       f32_4 %271 = OpLoad %60 
                                       f32_2 %272 = OpVectorShuffle %271 %271 3 3 
                                       f32_4 %273 = OpLoad %36 
                                       f32_2 %274 = OpVectorShuffle %273 %273 0 1 
                                       f32_2 %275 = OpFDiv %272 %274 
                                       f32_4 %276 = OpLoad %36 
                                       f32_4 %277 = OpVectorShuffle %276 %275 4 5 2 3 
                                                      OpStore %36 %277 
                                       f32_4 %279 = OpLoad %36 
                                       f32_2 %280 = OpVectorShuffle %279 %279 0 1 
                                       f32_4 %281 = OpLoad %36 
                                       f32_2 %282 = OpVectorShuffle %281 %281 0 1 
                                         f32 %283 = OpDot %280 %282 
                                                      OpStore %278 %283 
                                Uniform f32* %285 = OpAccessChain %24 %284 
                                         f32 %286 = OpLoad %285 
                                Uniform f32* %288 = OpAccessChain %24 %287 
                                         f32 %289 = OpLoad %288 
                                       f32_2 %290 = OpCompositeConstruct %286 %289 
                                       f32_2 %293 = OpFMul %290 %292 
                                       f32_4 %294 = OpLoad %36 
                                       f32_2 %295 = OpVectorShuffle %294 %294 0 1 
                                       f32_2 %296 = OpFAdd %293 %295 
                                       f32_4 %297 = OpLoad %36 
                                       f32_4 %298 = OpVectorShuffle %297 %296 4 5 2 3 
                                                      OpStore %36 %298 
                                       f32_4 %300 = OpLoad %36 
                                       f32_2 %301 = OpVectorShuffle %300 %300 0 1 
                                       f32_2 %302 = OpFDiv %292 %301 
                                       f32_4 %303 = OpLoad vs_TEXCOORD2 
                                       f32_4 %304 = OpVectorShuffle %303 %302 0 1 4 5 
                                                      OpStore vs_TEXCOORD2 %304 
                                         f32 %305 = OpLoad %278 
                                         f32 %306 = OpExtInst %1 32 %305 
                                                      OpStore %278 %306 
                                  Input f32* %310 = OpAccessChain %308 %114 
                                         f32 %311 = OpLoad %310 
                                         f32 %312 = OpExtInst %1 4 %311 
                                Uniform f32* %314 = OpAccessChain %24 %313 
                                         f32 %315 = OpLoad %314 
                                         f32 %316 = OpFMul %312 %315 
                                Private f32* %317 = OpAccessChain %36 %202 
                                                      OpStore %317 %316 
                                Uniform f32* %320 = OpAccessChain %24 %319 
                                         f32 %321 = OpLoad %320 
                                         f32 %322 = OpFAdd %321 %134 
                                Private f32* %323 = OpAccessChain %318 %202 
                                                      OpStore %323 %322 
                                Private f32* %324 = OpAccessChain %318 %202 
                                         f32 %325 = OpLoad %324 
                                Private f32* %326 = OpAccessChain %36 %202 
                                         f32 %327 = OpLoad %326 
                                         f32 %328 = OpFMul %325 %327 
                                Private f32* %329 = OpAccessChain %36 %202 
                                                      OpStore %329 %328 
                                         f32 %330 = OpLoad %278 
                                Private f32* %331 = OpAccessChain %36 %202 
                                         f32 %332 = OpLoad %331 
                                         f32 %333 = OpFMul %330 %332 
                                Private f32* %334 = OpAccessChain %318 %202 
                                                      OpStore %334 %333 
                                Uniform f32* %337 = OpAccessChain %24 %336 
                                         f32 %338 = OpLoad %337 
                                         f32 %339 = OpFNegate %338 
                                         f32 %340 = OpFAdd %339 %134 
                                                      OpStore %335 %340 
                                         f32 %341 = OpLoad %335 
                                Private f32* %342 = OpAccessChain %318 %202 
                                         f32 %343 = OpLoad %342 
                                         f32 %344 = OpExtInst %1 4 %343 
                                         f32 %345 = OpFMul %341 %344 
                                                      OpStore %335 %345 
                                         f32 %346 = OpLoad %278 
                                Private f32* %347 = OpAccessChain %36 %202 
                                         f32 %348 = OpLoad %347 
                                         f32 %349 = OpFMul %346 %348 
                                         f32 %350 = OpLoad %335 
                                         f32 %351 = OpFNegate %350 
                                         f32 %352 = OpFAdd %349 %351 
                                                      OpStore %278 %352 
                                         f32 %353 = OpLoad %180 
                                         f32 %354 = OpExtInst %1 4 %353 
                                         f32 %355 = OpLoad %278 
                                         f32 %356 = OpFMul %354 %355 
                                         f32 %357 = OpLoad %335 
                                         f32 %358 = OpFAdd %356 %357 
                                                      OpStore %180 %358 
                                Uniform f32* %362 = OpAccessChain %24 %239 %62 %124 
                                         f32 %363 = OpLoad %362 
                                        bool %365 = OpFOrdEqual %363 %364 
                                                      OpStore %361 %365 
                                        bool %366 = OpLoad %361 
                                                      OpSelectionMerge %370 None 
                                                      OpBranchConditional %366 %369 %372 
                                             %369 = OpLabel 
                                         f32 %371 = OpLoad %180 
                                                      OpStore %368 %371 
                                                      OpBranch %370 
                                             %372 = OpLabel 
                                Private f32* %373 = OpAccessChain %318 %202 
                                         f32 %374 = OpLoad %373 
                                                      OpStore %368 %374 
                                                      OpBranch %370 
                                             %370 = OpLabel 
                                         f32 %375 = OpLoad %368 
                                                      OpStore %180 %375 
                                Uniform f32* %377 = OpAccessChain %24 %376 
                                         f32 %378 = OpLoad %377 
                                Uniform f32* %380 = OpAccessChain %24 %379 
                                         f32 %381 = OpLoad %380 
                                         f32 %382 = OpFMul %378 %381 
                                                      OpStore %278 %382 
                                         f32 %383 = OpLoad %278 
                                         f32 %384 = OpLoad %180 
                                         f32 %385 = OpFMul %383 %384 
                                         f32 %386 = OpFAdd %385 %134 
                                                      OpStore %278 %386 
                                         f32 %387 = OpLoad %180 
                                         f32 %388 = OpLoad %278 
                                         f32 %389 = OpFDiv %387 %388 
                                Private f32* %390 = OpAccessChain %36 %202 
                                                      OpStore %390 %389 
                                Uniform f32* %392 = OpAccessChain %24 %391 
                                         f32 %393 = OpLoad %392 
                                Uniform f32* %394 = OpAccessChain %24 %379 
                                         f32 %395 = OpLoad %394 
                                         f32 %396 = OpFMul %393 %395 
                                                      OpStore %278 %396 
                                Private f32* %397 = OpAccessChain %36 %202 
                                         f32 %398 = OpLoad %397 
                                         f32 %399 = OpLoad %278 
                                         f32 %400 = OpFMul %398 %399 
                                                      OpStore %278 %400 
                                         f32 %401 = OpLoad %278 
                                         f32 %402 = OpExtInst %1 37 %401 %134 
                                Private f32* %403 = OpAccessChain %318 %202 
                                                      OpStore %403 %402 
                                Private f32* %404 = OpAccessChain %318 %202 
                                         f32 %405 = OpLoad %404 
                                         f32 %406 = OpExtInst %1 31 %405 
                                Private f32* %407 = OpAccessChain %318 %202 
                                                      OpStore %407 %406 
                                       f32_4 %408 = OpLoad %153 
                                       f32_2 %409 = OpLoad %318 
                                       f32_4 %410 = OpVectorShuffle %409 %409 0 0 0 0 
                                       f32_4 %411 = OpFMul %408 %410 
                                                      OpStore %60 %411 
                                       f32_4 %413 = OpLoad %137 
                                       f32_3 %414 = OpVectorShuffle %413 %413 0 1 2 
                                       f32_4 %415 = OpLoad %137 
                                       f32_3 %416 = OpVectorShuffle %415 %415 3 3 3 
                                       f32_3 %417 = OpFMul %414 %416 
                                       f32_4 %418 = OpLoad %60 
                                       f32_3 %419 = OpVectorShuffle %418 %418 0 1 2 
                                       f32_3 %420 = OpFAdd %417 %419 
                                       f32_4 %421 = OpLoad %412 
                                       f32_4 %422 = OpVectorShuffle %421 %420 4 5 6 3 
                                                      OpStore %412 %422 
                                Private f32* %423 = OpAccessChain %86 %124 
                                         f32 %424 = OpLoad %423 
                                Uniform f32* %425 = OpAccessChain %24 %123 %124 
                                         f32 %426 = OpLoad %425 
                                         f32 %427 = OpFMul %424 %426 
                                Private f32* %428 = OpAccessChain %60 %124 
                                         f32 %429 = OpLoad %428 
                                         f32 %430 = OpFAdd %427 %429 
                                 Output f32* %431 = OpAccessChain %412 %124 
                                                      OpStore %431 %430 
                              Uniform f32_4* %433 = OpAccessChain %24 %432 
                                       f32_4 %434 = OpLoad %433 
                                       f32_4 %437 = OpExtInst %1 40 %434 %436 
                                                      OpStore %60 %437 
                                       f32_4 %438 = OpLoad %60 
                                       f32_4 %441 = OpExtInst %1 37 %438 %440 
                                                      OpStore %60 %441 
                                       f32_2 %442 = OpLoad %9 
                                       f32_4 %443 = OpLoad %60 
                                       f32_2 %444 = OpVectorShuffle %443 %443 0 1 
                                       f32_2 %445 = OpFNegate %444 
                                       f32_2 %446 = OpFAdd %442 %445 
                                                      OpStore %318 %446 
                                       f32_2 %447 = OpLoad %9 
                                       f32_2 %450 = OpFMul %447 %449 
                                       f32_4 %451 = OpLoad %60 
                                       f32_2 %452 = OpVectorShuffle %451 %451 0 1 
                                       f32_2 %453 = OpFNegate %452 
                                       f32_2 %454 = OpFAdd %450 %453 
                                                      OpStore %9 %454 
                                       f32_4 %455 = OpLoad %60 
                                       f32_2 %456 = OpVectorShuffle %455 %455 2 3 
                                       f32_2 %457 = OpFNegate %456 
                                       f32_2 %458 = OpLoad %9 
                                       f32_2 %459 = OpFAdd %457 %458 
                                       f32_4 %460 = OpLoad vs_TEXCOORD2 
                                       f32_4 %461 = OpVectorShuffle %460 %459 4 5 2 3 
                                                      OpStore vs_TEXCOORD2 %461 
                                       f32_4 %462 = OpLoad %60 
                                       f32_2 %463 = OpVectorShuffle %462 %462 0 1 
                                       f32_2 %464 = OpFNegate %463 
                                       f32_4 %465 = OpLoad %60 
                                       f32_2 %466 = OpVectorShuffle %465 %465 2 3 
                                       f32_2 %467 = OpFAdd %464 %466 
                                                      OpStore %9 %467 
                                       f32_2 %469 = OpLoad %318 
                                       f32_2 %470 = OpLoad %9 
                                       f32_2 %471 = OpFDiv %469 %470 
                                       f32_4 %472 = OpLoad vs_TEXCOORD0 
                                       f32_4 %473 = OpVectorShuffle %472 %471 0 1 4 5 
                                                      OpStore vs_TEXCOORD0 %473 
                                       f32_2 %475 = OpLoad %474 
                                       f32_4 %476 = OpLoad vs_TEXCOORD0 
                                       f32_4 %477 = OpVectorShuffle %476 %475 4 5 2 3 
                                                      OpStore vs_TEXCOORD0 %477 
                                  Input f32* %479 = OpAccessChain %308 %114 
                                         f32 %480 = OpLoad %479 
                                        bool %481 = OpFOrdGreaterThanEqual %364 %480 
                                                      OpStore %478 %481 
                                        bool %482 = OpLoad %478 
                                         f32 %483 = OpSelect %482 %134 %364 
                                Private f32* %484 = OpAccessChain %9 %202 
                                                      OpStore %484 %483 
                                Uniform f32* %488 = OpAccessChain %24 %487 
                                         f32 %489 = OpLoad %488 
                                         f32 %490 = OpFNegate %489 
                                Uniform f32* %492 = OpAccessChain %24 %491 
                                         f32 %493 = OpLoad %492 
                                         f32 %494 = OpFAdd %490 %493 
                                Private f32* %495 = OpAccessChain %486 %202 
                                                      OpStore %495 %494 
                                Private f32* %496 = OpAccessChain %9 %202 
                                         f32 %497 = OpLoad %496 
                                Private f32* %498 = OpAccessChain %486 %202 
                                         f32 %499 = OpLoad %498 
                                         f32 %500 = OpFMul %497 %499 
                                Uniform f32* %501 = OpAccessChain %24 %487 
                                         f32 %502 = OpLoad %501 
                                         f32 %503 = OpFAdd %500 %502 
                                Private f32* %504 = OpAccessChain %9 %202 
                                                      OpStore %504 %503 
                                Private f32* %505 = OpAccessChain %9 %202 
                                         f32 %506 = OpLoad %505 
                                         f32 %507 = OpFMul %506 %291 
                                Uniform f32* %509 = OpAccessChain %24 %508 
                                         f32 %510 = OpLoad %509 
                                         f32 %511 = OpFAdd %507 %510 
                                Private f32* %512 = OpAccessChain %9 %202 
                                                      OpStore %512 %511 
                                Private f32* %513 = OpAccessChain %9 %202 
                                         f32 %514 = OpLoad %513 
                                Uniform f32* %515 = OpAccessChain %24 %379 
                                         f32 %516 = OpLoad %515 
                                         f32 %517 = OpFMul %514 %516 
                                Private f32* %518 = OpAccessChain %9 %202 
                                                      OpStore %518 %517 
                                Private f32* %519 = OpAccessChain %9 %202 
                                         f32 %520 = OpLoad %519 
                                         f32 %521 = OpFNegate %520 
                                         f32 %523 = OpFMul %521 %522 
                                         f32 %524 = OpFAdd %523 %522 
                                Private f32* %525 = OpAccessChain %9 %202 
                                                      OpStore %525 %524 
                                Private f32* %526 = OpAccessChain %9 %202 
                                         f32 %527 = OpLoad %526 
                                Private f32* %528 = OpAccessChain %36 %202 
                                         f32 %529 = OpLoad %528 
                                         f32 %530 = OpFMul %527 %529 
                                         f32 %532 = OpFAdd %530 %531 
                                Private f32* %533 = OpAccessChain %36 %124 
                                                      OpStore %533 %532 
                                       f32_4 %535 = OpLoad %36 
                                       f32_2 %536 = OpVectorShuffle %535 %535 0 3 
                                       f32_4 %537 = OpLoad vs_TEXCOORD1 
                                       f32_4 %538 = OpVectorShuffle %537 %536 4 1 2 5 
                                                      OpStore vs_TEXCOORD1 %538 
                                         f32 %539 = OpLoad %278 
                                         f32 %540 = OpFNegate %539 
                                         f32 %541 = OpFMul %540 %522 
                                Private f32* %542 = OpAccessChain %36 %124 
                                         f32 %543 = OpLoad %542 
                                         f32 %544 = OpFAdd %541 %543 
                                 Output f32* %545 = OpAccessChain vs_TEXCOORD1 %114 
                                                      OpStore %545 %544 
                                         f32 %546 = OpLoad %278 
                                         f32 %547 = OpFMul %546 %522 
                                Private f32* %548 = OpAccessChain %36 %124 
                                         f32 %549 = OpLoad %548 
                                         f32 %550 = OpFAdd %547 %549 
                                 Output f32* %551 = OpAccessChain vs_TEXCOORD1 %215 
                                                      OpStore %551 %550 
                                  Input f32* %553 = OpAccessChain %129 %124 
                                         f32 %554 = OpLoad %553 
                                 Output f32* %555 = OpAccessChain vs_TEXCOORD3 %215 
                                                      OpStore %555 %554 
                                 Output f32* %556 = OpAccessChain vs_TEXCOORD3 %124 
                                                      OpStore %556 %364 
                                Uniform f32* %558 = OpAccessChain %24 %557 
                                         f32 %559 = OpLoad %558 
                                Uniform f32* %561 = OpAccessChain %24 %560 
                                         f32 %562 = OpLoad %561 
                                Uniform f32* %564 = OpAccessChain %24 %563 
                                         f32 %565 = OpLoad %564 
                                Uniform f32* %567 = OpAccessChain %24 %566 
                                         f32 %568 = OpLoad %567 
                                       f32_4 %569 = OpCompositeConstruct %559 %562 %565 %568 
                                Uniform f32* %571 = OpAccessChain %24 %570 
                                         f32 %572 = OpLoad %571 
                                Uniform f32* %573 = OpAccessChain %24 %570 
                                         f32 %574 = OpLoad %573 
                                Uniform f32* %575 = OpAccessChain %24 %570 
                                         f32 %576 = OpLoad %575 
                                Uniform f32* %577 = OpAccessChain %24 %570 
                                         f32 %578 = OpLoad %577 
                                       f32_4 %579 = OpCompositeConstruct %572 %574 %576 %578 
                                         f32 %580 = OpCompositeExtract %579 0 
                                         f32 %581 = OpCompositeExtract %579 1 
                                         f32 %582 = OpCompositeExtract %579 2 
                                         f32 %583 = OpCompositeExtract %579 3 
                                       f32_4 %584 = OpCompositeConstruct %580 %581 %582 %583 
                                       f32_4 %585 = OpFMul %569 %584 
                                                      OpStore %36 %585 
                                       f32_4 %586 = OpLoad %36 
                                       f32_2 %587 = OpVectorShuffle %586 %586 2 3 
                                       f32_2 %588 = OpFNegate %587 
                                Uniform f32* %589 = OpAccessChain %24 %313 
                                         f32 %590 = OpLoad %589 
                                       f32_2 %591 = OpCompositeConstruct %590 %590 
                                       f32_2 %592 = OpFMul %588 %591 
                                       f32_3 %593 = OpLoad %486 
                                       f32_3 %594 = OpVectorShuffle %593 %592 3 1 4 
                                                      OpStore %486 %594 
                                       f32_3 %595 = OpLoad %486 
                                       f32_2 %596 = OpVectorShuffle %595 %595 0 2 
                                Uniform f32* %598 = OpAccessChain %24 %597 
                                         f32 %599 = OpLoad %598 
                                Uniform f32* %601 = OpAccessChain %24 %600 
                                         f32 %602 = OpLoad %601 
                                       f32_2 %603 = OpCompositeConstruct %599 %602 
                                       f32_2 %604 = OpFDiv %596 %603 
                                       f32_3 %605 = OpLoad %486 
                                       f32_3 %606 = OpVectorShuffle %605 %604 3 1 4 
                                                      OpStore %486 %606 
                                       f32_3 %607 = OpLoad %486 
                                       f32_2 %608 = OpVectorShuffle %607 %607 0 2 
                                       f32_2 %609 = OpLoad %474 
                                       f32_2 %610 = OpFAdd %608 %609 
                                       f32_4 %611 = OpLoad vs_TEXCOORD3 
                                       f32_4 %612 = OpVectorShuffle %611 %610 4 5 2 3 
                                                      OpStore vs_TEXCOORD3 %612 
                                Private f32* %613 = OpAccessChain %36 %202 
                                         f32 %614 = OpLoad %613 
                                         f32 %615 = OpLoad %180 
                                         f32 %616 = OpFMul %614 %615 
                                         f32 %617 = OpFAdd %616 %134 
                                Private f32* %618 = OpAccessChain %486 %202 
                                                      OpStore %618 %617 
                                         f32 %619 = OpLoad %180 
                                Private f32* %620 = OpAccessChain %486 %202 
                                         f32 %621 = OpLoad %620 
                                         f32 %622 = OpFDiv %619 %621 
                                Private f32* %623 = OpAccessChain %486 %202 
                                                      OpStore %623 %622 
                                Private f32* %624 = OpAccessChain %486 %202 
                                         f32 %625 = OpLoad %624 
                                Private f32* %626 = OpAccessChain %36 %114 
                                         f32 %627 = OpLoad %626 
                                         f32 %628 = OpFMul %625 %627 
                                                      OpStore %180 %628 
                                Private f32* %629 = OpAccessChain %9 %202 
                                         f32 %630 = OpLoad %629 
                                Private f32* %631 = OpAccessChain %486 %202 
                                         f32 %632 = OpLoad %631 
                                         f32 %633 = OpFMul %630 %632 
                                         f32 %634 = OpFAdd %633 %531 
                                Private f32* %635 = OpAccessChain %9 %202 
                                                      OpStore %635 %634 
                                Private f32* %638 = OpAccessChain %486 %202 
                                         f32 %639 = OpLoad %638 
                                 Output f32* %640 = OpAccessChain vs_TEXCOORD4 %202 
                                                      OpStore %640 %639 
                                         f32 %641 = OpLoad %180 
                                         f32 %642 = OpFNegate %641 
                                         f32 %643 = OpFMul %642 %522 
                                Private f32* %644 = OpAccessChain %9 %202 
                                         f32 %645 = OpLoad %644 
                                         f32 %646 = OpFAdd %643 %645 
                                 Output f32* %647 = OpAccessChain vs_TEXCOORD4 %114 
                                                      OpStore %647 %646 
                                 Output f32* %648 = OpAccessChain %118 %45 %114 
                                         f32 %649 = OpLoad %648 
                                         f32 %650 = OpFNegate %649 
                                 Output f32* %651 = OpAccessChain %118 %45 %114 
                                                      OpStore %651 %650 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 140
; Schema: 0
                                             OpCapability Shader 
                                      %1 = OpExtInstImport "GLSL.std.450" 
                                             OpMemoryModel Logical GLSL450 
                                             OpEntryPoint Fragment %4 "main" %21 %35 %77 %79 %88 %96 %134 
                                             OpExecutionMode %4 OriginUpperLeft 
                                             OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                             OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                             OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                             OpDecorate %12 DescriptorSet 12 
                                             OpDecorate %12 Binding 12 
                                             OpDecorate %16 DescriptorSet 16 
                                             OpDecorate %16 Binding 16 
                                             OpDecorate vs_TEXCOORD3 Location 21 
                                             OpDecorate vs_TEXCOORD4 Location 35 
                                             OpMemberDecorate %53 0 Offset 53 
                                             OpDecorate %53 Block 
                                             OpDecorate %55 DescriptorSet 55 
                                             OpDecorate %55 Binding 55 
                                             OpDecorate %77 Location 77 
                                             OpDecorate %79 Location 79 
                                             OpDecorate vs_TEXCOORD0 Location 88 
                                             OpDecorate vs_TEXCOORD1 Location 96 
                                             OpDecorate %134 Location 134 
                                      %2 = OpTypeVoid 
                                      %3 = OpTypeFunction %2 
                                      %6 = OpTypeFloat 32 
                                      %7 = OpTypeVector %6 4 
                                      %8 = OpTypePointer Private %7 
                       Private f32_4* %9 = OpVariable Private 
                                     %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                     %11 = OpTypePointer UniformConstant %10 
UniformConstant read_only Texture2D* %12 = OpVariable UniformConstant 
                                     %14 = OpTypeSampler 
                                     %15 = OpTypePointer UniformConstant %14 
            UniformConstant sampler* %16 = OpVariable UniformConstant 
                                     %18 = OpTypeSampledImage %10 
                                     %20 = OpTypePointer Input %7 
               Input f32_4* vs_TEXCOORD3 = OpVariable Input 
                                     %22 = OpTypeVector %6 2 
                                     %26 = OpTypeInt 32 0 
                                 u32 %27 = OpConstant 3 
                                 u32 %29 = OpConstant 0 
                                     %30 = OpTypePointer Private %6 
                                     %34 = OpTypePointer Input %22 
               Input f32_2* vs_TEXCOORD4 = OpVariable Input 
                                     %36 = OpTypePointer Input %6 
                                 u32 %40 = OpConstant 1 
                                 f32 %48 = OpConstant 3.674022E-40 
                                 f32 %49 = OpConstant 3.674022E-40 
                      Private f32_4* %52 = OpVariable Private 
                                     %53 = OpTypeStruct %7 
                                     %54 = OpTypePointer Uniform %53 
            Uniform struct {f32_4;}* %55 = OpVariable Uniform 
                                     %56 = OpTypeInt 32 1 
                                 i32 %57 = OpConstant 0 
                                     %58 = OpTypeVector %6 3 
                                     %59 = OpTypePointer Uniform %7 
                                     %69 = OpTypePointer Uniform %6 
                        Input f32_4* %77 = OpVariable Input 
                        Input f32_4* %79 = OpVariable Input 
                                     %83 = OpTypePointer Private %22 
                      Private f32_2* %84 = OpVariable Private 
               Input f32_4* vs_TEXCOORD0 = OpVariable Input 
               Input f32_4* vs_TEXCOORD1 = OpVariable Input 
                     Private f32_4* %114 = OpVariable Private 
                                    %133 = OpTypePointer Output %7 
                      Output f32_4* %134 = OpVariable Output 
                                 void %4 = OpFunction None %3 
                                      %5 = OpLabel 
                 read_only Texture2D %13 = OpLoad %12 
                             sampler %17 = OpLoad %16 
          read_only Texture2DSampled %19 = OpSampledImage %13 %17 
                               f32_4 %23 = OpLoad vs_TEXCOORD3 
                               f32_2 %24 = OpVectorShuffle %23 %23 0 1 
                               f32_4 %25 = OpImageSampleImplicitLod %19 %24 
                                 f32 %28 = OpCompositeExtract %25 3 
                        Private f32* %31 = OpAccessChain %9 %29 
                                             OpStore %31 %28 
                        Private f32* %32 = OpAccessChain %9 %29 
                                 f32 %33 = OpLoad %32 
                          Input f32* %37 = OpAccessChain vs_TEXCOORD4 %29 
                                 f32 %38 = OpLoad %37 
                                 f32 %39 = OpFMul %33 %38 
                          Input f32* %41 = OpAccessChain vs_TEXCOORD4 %40 
                                 f32 %42 = OpLoad %41 
                                 f32 %43 = OpFNegate %42 
                                 f32 %44 = OpFAdd %39 %43 
                        Private f32* %45 = OpAccessChain %9 %29 
                                             OpStore %45 %44 
                        Private f32* %46 = OpAccessChain %9 %29 
                                 f32 %47 = OpLoad %46 
                                 f32 %50 = OpExtInst %1 43 %47 %48 %49 
                        Private f32* %51 = OpAccessChain %9 %29 
                                             OpStore %51 %50 
                      Uniform f32_4* %60 = OpAccessChain %55 %57 
                               f32_4 %61 = OpLoad %60 
                               f32_3 %62 = OpVectorShuffle %61 %61 3 3 3 
                      Uniform f32_4* %63 = OpAccessChain %55 %57 
                               f32_4 %64 = OpLoad %63 
                               f32_3 %65 = OpVectorShuffle %64 %64 0 1 2 
                               f32_3 %66 = OpFMul %62 %65 
                               f32_4 %67 = OpLoad %52 
                               f32_4 %68 = OpVectorShuffle %67 %66 4 5 6 3 
                                             OpStore %52 %68 
                        Uniform f32* %70 = OpAccessChain %55 %57 %27 
                                 f32 %71 = OpLoad %70 
                        Private f32* %72 = OpAccessChain %52 %27 
                                             OpStore %72 %71 
                               f32_4 %73 = OpLoad %9 
                               f32_4 %74 = OpVectorShuffle %73 %73 0 0 0 0 
                               f32_4 %75 = OpLoad %52 
                               f32_4 %76 = OpFMul %74 %75 
                                             OpStore %9 %76 
                               f32_4 %78 = OpLoad %77 
                               f32_4 %80 = OpLoad %79 
                               f32_4 %81 = OpFNegate %80 
                               f32_4 %82 = OpFAdd %78 %81 
                                             OpStore %52 %82 
                 read_only Texture2D %85 = OpLoad %12 
                             sampler %86 = OpLoad %16 
          read_only Texture2DSampled %87 = OpSampledImage %85 %86 
                               f32_4 %89 = OpLoad vs_TEXCOORD0 
                               f32_2 %90 = OpVectorShuffle %89 %89 0 1 
                               f32_4 %91 = OpImageSampleImplicitLod %87 %90 
                                 f32 %92 = OpCompositeExtract %91 3 
                        Private f32* %93 = OpAccessChain %84 %29 
                                             OpStore %93 %92 
                               f32_2 %94 = OpLoad %84 
                               f32_2 %95 = OpVectorShuffle %94 %94 0 0 
                               f32_4 %97 = OpLoad vs_TEXCOORD1 
                               f32_2 %98 = OpVectorShuffle %97 %97 0 0 
                               f32_2 %99 = OpFMul %95 %98 
                              f32_4 %100 = OpLoad vs_TEXCOORD1 
                              f32_2 %101 = OpVectorShuffle %100 %100 2 1 
                              f32_2 %102 = OpFNegate %101 
                              f32_2 %103 = OpFAdd %99 %102 
                                             OpStore %84 %103 
                              f32_2 %104 = OpLoad %84 
                              f32_2 %105 = OpCompositeConstruct %48 %48 
                              f32_2 %106 = OpCompositeConstruct %49 %49 
                              f32_2 %107 = OpExtInst %1 43 %104 %105 %106 
                                             OpStore %84 %107 
                              f32_2 %108 = OpLoad %84 
                              f32_4 %109 = OpVectorShuffle %108 %108 0 0 0 0 
                              f32_4 %110 = OpLoad %52 
                              f32_4 %111 = OpFMul %109 %110 
                              f32_4 %112 = OpLoad %79 
                              f32_4 %113 = OpFAdd %111 %112 
                                             OpStore %52 %113 
                              f32_2 %115 = OpLoad %84 
                              f32_4 %116 = OpVectorShuffle %115 %115 1 1 1 1 
                              f32_4 %117 = OpLoad %52 
                              f32_4 %118 = OpFMul %116 %117 
                                             OpStore %114 %118 
                       Private f32* %119 = OpAccessChain %52 %27 
                                f32 %120 = OpLoad %119 
                                f32 %121 = OpFNegate %120 
                       Private f32* %122 = OpAccessChain %84 %40 
                                f32 %123 = OpLoad %122 
                                f32 %124 = OpFMul %121 %123 
                                f32 %125 = OpFAdd %124 %49 
                       Private f32* %126 = OpAccessChain %52 %29 
                                             OpStore %126 %125 
                              f32_4 %127 = OpLoad %9 
                              f32_4 %128 = OpLoad %52 
                              f32_4 %129 = OpVectorShuffle %128 %128 0 0 0 0 
                              f32_4 %130 = OpFMul %127 %129 
                              f32_4 %131 = OpLoad %114 
                              f32_4 %132 = OpFAdd %130 %131 
                                             OpStore %9 %132 
                              f32_4 %135 = OpLoad %9 
                              f32_4 %136 = OpLoad vs_TEXCOORD3 
                              f32_4 %137 = OpVectorShuffle %136 %136 2 2 2 2 
                              f32_4 %138 = OpFMul %135 %137 
                                             OpStore %134 %138 
                                             OpReturn
                                             OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "FOG_LINEAR" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "FOG_LINEAR" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	vec4 _FaceColor;
uniform 	float _FaceDilate;
uniform 	float _OutlineSoftness;
uniform 	vec4 _OutlineColor;
uniform 	float _OutlineWidth;
uniform 	float _WeightNormal;
uniform 	float _WeightBold;
uniform 	float _ScaleRatioA;
uniform 	float _VertexOffsetX;
uniform 	float _VertexOffsetY;
uniform 	vec4 _ClipRect;
uniform 	float _MaskSoftnessX;
uniform 	float _MaskSoftnessY;
uniform 	float _GradientScale;
uniform 	float _ScaleX;
uniform 	float _ScaleY;
uniform 	float _PerspectiveFilter;
uniform 	float _Sharpness;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_COLOR0;
in  vec2 in_TEXCOORD0;
in  vec2 in_TEXCOORD1;
out vec4 vs_COLOR0;
out vec4 vs_COLOR1;
out vec4 vs_TEXCOORD0;
out vec4 vs_TEXCOORD1;
out vec4 vs_TEXCOORD2;
out float vs_TEXCOORDn0;
vec2 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
vec3 u_xlat5;
float u_xlat6;
vec2 u_xlat7;
float u_xlat12;
float u_xlat13;
float u_xlat18;
bool u_xlatb18;
void main()
{
    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
    gl_Position = u_xlat2;
    u_xlat3 = in_COLOR0 * _FaceColor;
    u_xlat3.xyz = u_xlat3.www * u_xlat3.xyz;
    vs_COLOR0 = u_xlat3;
    u_xlat4.w = in_COLOR0.w * _OutlineColor.w;
    u_xlat4.xyz = u_xlat4.www * _OutlineColor.xyz;
    u_xlat4 = (-u_xlat3) + u_xlat4;
    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
    u_xlat5.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat5.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat5.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat5.xyz = vec3(u_xlat12) * u_xlat5.xyz;
    u_xlat12 = dot(u_xlat5.xyz, u_xlat1.xyz);
    u_xlat1.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;
    u_xlat1.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat1.xy;
    u_xlat1.xy = abs(u_xlat1.xy) * vec2(_ScaleX, _ScaleY);
    u_xlat1.xy = u_xlat2.ww / u_xlat1.xy;
    vs_TEXCOORDn0 = u_xlat2.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat18 = dot(u_xlat1.xy, u_xlat1.xy);
    u_xlat1.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) * vec2(0.25, 0.25) + u_xlat1.xy;
    vs_TEXCOORD2.zw = vec2(0.25, 0.25) / u_xlat1.xy;
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.x = abs(in_TEXCOORD1.y) * _GradientScale;
    u_xlat7.x = _Sharpness + 1.0;
    u_xlat1.x = u_xlat7.x * u_xlat1.x;
    u_xlat7.x = u_xlat18 * u_xlat1.x;
    u_xlat13 = (-_PerspectiveFilter) + 1.0;
    u_xlat13 = u_xlat13 * abs(u_xlat7.x);
    u_xlat18 = u_xlat18 * u_xlat1.x + (-u_xlat13);
    u_xlat12 = abs(u_xlat12) * u_xlat18 + u_xlat13;
    u_xlatb18 = hlslcc_mtx4x4glstate_matrix_projection[3].w==0.0;
    u_xlat12 = (u_xlatb18) ? u_xlat12 : u_xlat7.x;
    u_xlat18 = _OutlineSoftness * _ScaleRatioA;
    u_xlat18 = u_xlat18 * u_xlat12 + 1.0;
    u_xlat1.x = u_xlat12 / u_xlat18;
    u_xlat12 = _OutlineWidth * _ScaleRatioA;
    u_xlat12 = u_xlat12 * 0.5;
    u_xlat18 = u_xlat1.x * u_xlat12;
    u_xlat18 = u_xlat18 + u_xlat18;
    u_xlat18 = min(u_xlat18, 1.0);
    u_xlat18 = sqrt(u_xlat18);
    vs_COLOR1 = vec4(u_xlat18) * u_xlat4 + u_xlat3;
    u_xlat2 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));
    u_xlat2 = min(u_xlat2, vec4(2e+10, 2e+10, 2e+10, 2e+10));
    u_xlat7.xy = u_xlat0.xy + (-u_xlat2.xy);
    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + (-u_xlat2.xy);
    vs_TEXCOORD2.xy = (-u_xlat2.zw) + u_xlat0.xy;
    u_xlat0.xy = (-u_xlat2.xy) + u_xlat2.zw;
    vs_TEXCOORD0.zw = u_xlat7.xy / u_xlat0.xy;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlatb0 = 0.0>=in_TEXCOORD1.y;
    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);
    u_xlat6 = (-_WeightNormal) + _WeightBold;
    u_xlat0.x = u_xlat0.x * u_xlat6 + _WeightNormal;
    u_xlat0.x = u_xlat0.x * 0.25 + _FaceDilate;
    u_xlat0.x = u_xlat0.x * _ScaleRatioA;
    u_xlat0.x = (-u_xlat0.x) * 0.5 + 0.5;
    u_xlat1.w = u_xlat0.x * u_xlat1.x + -0.5;
    vs_TEXCOORD1.y = (-u_xlat12) * u_xlat1.x + u_xlat1.w;
    vs_TEXCOORD1.z = u_xlat12 * u_xlat1.x + u_xlat1.w;
    vs_TEXCOORD1.xw = u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 unity_FogColor;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
in  vec4 vs_COLOR0;
in  vec4 vs_TEXCOORD0;
in  vec4 vs_TEXCOORD1;
in  float vs_TEXCOORDn0;
layout(location = 0) out vec4 SV_Target0;
float u_xlat0;
vec4 u_xlat1;
float u_xlat2;
void main()
{
    u_xlat0 = vs_TEXCOORDn0;
    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2 = u_xlat1.w * vs_TEXCOORD1.x + (-vs_TEXCOORD1.w);
    u_xlat2 = clamp(u_xlat2, 0.0, 1.0);
    u_xlat1.xyz = vs_COLOR0.xyz * vec3(u_xlat2) + (-unity_FogColor.xyz);
    u_xlat2 = u_xlat2 * vs_COLOR0.w;
    SV_Target0.w = u_xlat2;
    SV_Target0.xyz = vec3(u_xlat0) * u_xlat1.xyz + unity_FogColor.xyz;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "FOG_LINEAR" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 534
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %12 %118 %122 %135 %156 %251 %281 %290 %405 %448 %454 %511 
                                                      OpName vs_TEXCOORDn0 "vs_TEXCOORDn0" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpDecorate %12 Location 12 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpDecorate %19 ArrayStride 19 
                                                      OpDecorate %20 ArrayStride 20 
                                                      OpDecorate %21 ArrayStride 21 
                                                      OpMemberDecorate %22 0 Offset 22 
                                                      OpMemberDecorate %22 1 Offset 22 
                                                      OpMemberDecorate %22 2 Offset 22 
                                                      OpMemberDecorate %22 3 Offset 22 
                                                      OpMemberDecorate %22 4 Offset 22 
                                                      OpMemberDecorate %22 5 Offset 22 
                                                      OpMemberDecorate %22 6 Offset 22 
                                                      OpMemberDecorate %22 7 Offset 22 
                                                      OpMemberDecorate %22 8 Offset 22 
                                                      OpMemberDecorate %22 9 Offset 22 
                                                      OpMemberDecorate %22 10 Offset 22 
                                                      OpMemberDecorate %22 11 Offset 22 
                                                      OpMemberDecorate %22 12 Offset 22 
                                                      OpMemberDecorate %22 13 Offset 22 
                                                      OpMemberDecorate %22 14 Offset 22 
                                                      OpMemberDecorate %22 15 Offset 22 
                                                      OpMemberDecorate %22 16 Offset 22 
                                                      OpMemberDecorate %22 17 Offset 22 
                                                      OpMemberDecorate %22 18 Offset 22 
                                                      OpMemberDecorate %22 19 Offset 22 
                                                      OpMemberDecorate %22 20 Offset 22 
                                                      OpMemberDecorate %22 21 Offset 22 
                                                      OpMemberDecorate %22 22 Offset 22 
                                                      OpMemberDecorate %22 23 Offset 22 
                                                      OpMemberDecorate %22 24 Offset 22 
                                                      OpMemberDecorate %22 25 Offset 22 
                                                      OpDecorate %22 Block 
                                                      OpDecorate %24 DescriptorSet 24 
                                                      OpDecorate %24 Binding 24 
                                                      OpMemberDecorate %116 0 BuiltIn 116 
                                                      OpMemberDecorate %116 1 BuiltIn 116 
                                                      OpMemberDecorate %116 2 BuiltIn 116 
                                                      OpDecorate %116 Block 
                                                      OpDecorate %122 Location 122 
                                                      OpDecorate %135 Location 135 
                                                      OpDecorate %156 Location 156 
                                                      OpDecorate vs_TEXCOORDn0 Location 251 
                                                      OpDecorate vs_TEXCOORD2 Location 281 
                                                      OpDecorate %290 Location 290 
                                                      OpDecorate %405 Location 405 
                                                      OpDecorate vs_TEXCOORD0 Location 448 
                                                      OpDecorate %454 Location 454 
                                                      OpDecorate vs_TEXCOORD1 Location 511 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 2 
                                               %8 = OpTypePointer Private %7 
                                Private f32_2* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 4 
                                              %11 = OpTypePointer Input %10 
                                 Input f32_4* %12 = OpVariable Input 
                                              %15 = OpTypeVector %6 3 
                                              %16 = OpTypeInt 32 0 
                                          u32 %17 = OpConstant 4 
                                              %18 = OpTypeArray %10 %17 
                                              %19 = OpTypeArray %10 %17 
                                              %20 = OpTypeArray %10 %17 
                                              %21 = OpTypeArray %10 %17 
                                              %22 = OpTypeStruct %15 %10 %10 %18 %19 %20 %21 %10 %10 %6 %6 %10 %6 %6 %6 %6 %6 %6 %10 %6 %6 %6 %6 %6 %6 %6 
                                              %23 = OpTypePointer Uniform %22 
Uniform struct {f32_3; f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4[4]; f32_4; f32_4; f32; f32; f32_4; f32; f32; f32; f32; f32; f32; f32_4; f32; f32; f32; f32; f32; f32; f32;}* %24 = OpVariable Uniform 
                                              %25 = OpTypeInt 32 1 
                                          i32 %26 = OpConstant 16 
                                              %27 = OpTypePointer Uniform %6 
                                          i32 %30 = OpConstant 17 
                                              %35 = OpTypePointer Private %10 
                               Private f32_4* %36 = OpVariable Private 
                                          i32 %39 = OpConstant 3 
                                          i32 %40 = OpConstant 1 
                                              %41 = OpTypePointer Uniform %10 
                                          i32 %45 = OpConstant 0 
                                          i32 %53 = OpConstant 2 
                               Private f32_4* %61 = OpVariable Private 
                                              %80 = OpTypePointer Uniform %15 
                               Private f32_4* %86 = OpVariable Private 
                                          i32 %89 = OpConstant 6 
                                         u32 %114 = OpConstant 1 
                                             %115 = OpTypeArray %6 %114 
                                             %116 = OpTypeStruct %10 %6 %115 
                                             %117 = OpTypePointer Output %116 
        Output struct {f32_4; f32; f32[1];}* %118 = OpVariable Output 
                                             %120 = OpTypePointer Output %10 
                                Input f32_4* %122 = OpVariable Input 
                                         i32 %124 = OpConstant 8 
                               Output f32_4* %135 = OpVariable Output 
                                             %137 = OpTypePointer Private %6 
                                Private f32* %138 = OpVariable Private 
                                             %153 = OpTypePointer Private %15 
                              Private f32_3* %154 = OpVariable Private 
                                             %155 = OpTypePointer Input %15 
                                Input f32_3* %156 = OpVariable Input 
                                         i32 %158 = OpConstant 4 
                                         u32 %163 = OpConstant 0 
                                         u32 %176 = OpConstant 2 
                                         i32 %194 = OpConstant 5 
                                         i32 %216 = OpConstant 22 
                                         i32 %219 = OpConstant 23 
                                Private f32* %233 = OpVariable Private 
                                         f32 %241 = OpConstant 3.674022E-40 
                                         f32 %248 = OpConstant 3.674022E-40 
                                             %250 = OpTypePointer Output %6 
                        Output f32* vs_TEXCOORDn0 = OpVariable Output 
                                         i32 %253 = OpConstant 7 
                                         u32 %257 = OpConstant 3 
                                         i32 %266 = OpConstant 19 
                                         i32 %269 = OpConstant 20 
                                         f32 %273 = OpConstant 3.674022E-40 
                                       f32_2 %274 = OpConstantComposite %273 %273 
                       Output f32_4* vs_TEXCOORD2 = OpVariable Output 
                                             %289 = OpTypePointer Input %7 
                                Input f32_2* %290 = OpVariable Input 
                                             %291 = OpTypePointer Input %6 
                                         i32 %295 = OpConstant 21 
                              Private f32_2* %300 = OpVariable Private 
                                         i32 %301 = OpConstant 25 
                                Private f32* %317 = OpVariable Private 
                                         i32 %318 = OpConstant 24 
                                             %341 = OpTypeBool 
                                             %342 = OpTypePointer Private %341 
                               Private bool* %343 = OpVariable Private 
                                             %348 = OpTypePointer Function %6 
                                         i32 %357 = OpConstant 10 
                                         i32 %360 = OpConstant 15 
                                         i32 %372 = OpConstant 12 
                                         i32 %388 = OpConstant 11 
                               Output f32_4* %405 = OpVariable Output 
                                         i32 %412 = OpConstant 18 
                                         f32 %415 = OpConstant 3.674022E-40 
                                       f32_4 %416 = OpConstantComposite %415 %415 %415 %415 
                                         f32 %419 = OpConstant 3.674022E-40 
                                       f32_4 %420 = OpConstantComposite %419 %419 %419 %419 
                                         f32 %428 = OpConstant 3.674022E-40 
                                       f32_2 %429 = OpConstantComposite %428 %428 
                       Output f32_4* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_2* %454 = OpVariable Input 
                               Private bool* %458 = OpVariable Private 
                                Private f32* %465 = OpVariable Private 
                                         i32 %466 = OpConstant 13 
                                         i32 %470 = OpConstant 14 
                                         i32 %485 = OpConstant 9 
                                         f32 %499 = OpConstant 3.674022E-40 
                                         f32 %508 = OpConstant 3.674022E-40 
                       Output f32_4* vs_TEXCOORD1 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                               Function f32* %349 = OpVariable Function 
                                        f32_4 %13 = OpLoad %12 
                                        f32_2 %14 = OpVectorShuffle %13 %13 0 1 
                                 Uniform f32* %28 = OpAccessChain %24 %26 
                                          f32 %29 = OpLoad %28 
                                 Uniform f32* %31 = OpAccessChain %24 %30 
                                          f32 %32 = OpLoad %31 
                                        f32_2 %33 = OpCompositeConstruct %29 %32 
                                        f32_2 %34 = OpFAdd %14 %33 
                                                      OpStore %9 %34 
                                        f32_2 %37 = OpLoad %9 
                                        f32_4 %38 = OpVectorShuffle %37 %37 1 1 1 1 
                               Uniform f32_4* %42 = OpAccessChain %24 %39 %40 
                                        f32_4 %43 = OpLoad %42 
                                        f32_4 %44 = OpFMul %38 %43 
                                                      OpStore %36 %44 
                               Uniform f32_4* %46 = OpAccessChain %24 %39 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_2 %48 = OpLoad %9 
                                        f32_4 %49 = OpVectorShuffle %48 %48 0 0 0 0 
                                        f32_4 %50 = OpFMul %47 %49 
                                        f32_4 %51 = OpLoad %36 
                                        f32_4 %52 = OpFAdd %50 %51 
                                                      OpStore %36 %52 
                               Uniform f32_4* %54 = OpAccessChain %24 %39 %53 
                                        f32_4 %55 = OpLoad %54 
                                        f32_4 %56 = OpLoad %12 
                                        f32_4 %57 = OpVectorShuffle %56 %56 2 2 2 2 
                                        f32_4 %58 = OpFMul %55 %57 
                                        f32_4 %59 = OpLoad %36 
                                        f32_4 %60 = OpFAdd %58 %59 
                                                      OpStore %36 %60 
                                        f32_4 %62 = OpLoad %36 
                               Uniform f32_4* %63 = OpAccessChain %24 %39 %39 
                                        f32_4 %64 = OpLoad %63 
                                        f32_4 %65 = OpFAdd %62 %64 
                                                      OpStore %61 %65 
                               Uniform f32_4* %66 = OpAccessChain %24 %39 %39 
                                        f32_4 %67 = OpLoad %66 
                                        f32_3 %68 = OpVectorShuffle %67 %67 0 1 2 
                                        f32_4 %69 = OpLoad %12 
                                        f32_3 %70 = OpVectorShuffle %69 %69 3 3 3 
                                        f32_3 %71 = OpFMul %68 %70 
                                        f32_4 %72 = OpLoad %36 
                                        f32_3 %73 = OpVectorShuffle %72 %72 0 1 2 
                                        f32_3 %74 = OpFAdd %71 %73 
                                        f32_4 %75 = OpLoad %36 
                                        f32_4 %76 = OpVectorShuffle %75 %74 4 5 6 3 
                                                      OpStore %36 %76 
                                        f32_4 %77 = OpLoad %36 
                                        f32_3 %78 = OpVectorShuffle %77 %77 0 1 2 
                                        f32_3 %79 = OpFNegate %78 
                               Uniform f32_3* %81 = OpAccessChain %24 %45 
                                        f32_3 %82 = OpLoad %81 
                                        f32_3 %83 = OpFAdd %79 %82 
                                        f32_4 %84 = OpLoad %36 
                                        f32_4 %85 = OpVectorShuffle %84 %83 4 5 6 3 
                                                      OpStore %36 %85 
                                        f32_4 %87 = OpLoad %61 
                                        f32_4 %88 = OpVectorShuffle %87 %87 1 1 1 1 
                               Uniform f32_4* %90 = OpAccessChain %24 %89 %40 
                                        f32_4 %91 = OpLoad %90 
                                        f32_4 %92 = OpFMul %88 %91 
                                                      OpStore %86 %92 
                               Uniform f32_4* %93 = OpAccessChain %24 %89 %45 
                                        f32_4 %94 = OpLoad %93 
                                        f32_4 %95 = OpLoad %61 
                                        f32_4 %96 = OpVectorShuffle %95 %95 0 0 0 0 
                                        f32_4 %97 = OpFMul %94 %96 
                                        f32_4 %98 = OpLoad %86 
                                        f32_4 %99 = OpFAdd %97 %98 
                                                      OpStore %86 %99 
                              Uniform f32_4* %100 = OpAccessChain %24 %89 %53 
                                       f32_4 %101 = OpLoad %100 
                                       f32_4 %102 = OpLoad %61 
                                       f32_4 %103 = OpVectorShuffle %102 %102 2 2 2 2 
                                       f32_4 %104 = OpFMul %101 %103 
                                       f32_4 %105 = OpLoad %86 
                                       f32_4 %106 = OpFAdd %104 %105 
                                                      OpStore %86 %106 
                              Uniform f32_4* %107 = OpAccessChain %24 %89 %39 
                                       f32_4 %108 = OpLoad %107 
                                       f32_4 %109 = OpLoad %61 
                                       f32_4 %110 = OpVectorShuffle %109 %109 3 3 3 3 
                                       f32_4 %111 = OpFMul %108 %110 
                                       f32_4 %112 = OpLoad %86 
                                       f32_4 %113 = OpFAdd %111 %112 
                                                      OpStore %61 %113 
                                       f32_4 %119 = OpLoad %61 
                               Output f32_4* %121 = OpAccessChain %118 %45 
                                                      OpStore %121 %119 
                                       f32_4 %123 = OpLoad %122 
                              Uniform f32_4* %125 = OpAccessChain %24 %124 
                                       f32_4 %126 = OpLoad %125 
                                       f32_4 %127 = OpFMul %123 %126 
                                                      OpStore %86 %127 
                                       f32_4 %128 = OpLoad %86 
                                       f32_3 %129 = OpVectorShuffle %128 %128 3 3 3 
                                       f32_4 %130 = OpLoad %86 
                                       f32_3 %131 = OpVectorShuffle %130 %130 0 1 2 
                                       f32_3 %132 = OpFMul %129 %131 
                                       f32_4 %133 = OpLoad %86 
                                       f32_4 %134 = OpVectorShuffle %133 %132 4 5 6 3 
                                                      OpStore %86 %134 
                                       f32_4 %136 = OpLoad %86 
                                                      OpStore %135 %136 
                                       f32_4 %139 = OpLoad %36 
                                       f32_3 %140 = OpVectorShuffle %139 %139 0 1 2 
                                       f32_4 %141 = OpLoad %36 
                                       f32_3 %142 = OpVectorShuffle %141 %141 0 1 2 
                                         f32 %143 = OpDot %140 %142 
                                                      OpStore %138 %143 
                                         f32 %144 = OpLoad %138 
                                         f32 %145 = OpExtInst %1 32 %144 
                                                      OpStore %138 %145 
                                         f32 %146 = OpLoad %138 
                                       f32_3 %147 = OpCompositeConstruct %146 %146 %146 
                                       f32_4 %148 = OpLoad %36 
                                       f32_3 %149 = OpVectorShuffle %148 %148 0 1 2 
                                       f32_3 %150 = OpFMul %147 %149 
                                       f32_4 %151 = OpLoad %36 
                                       f32_4 %152 = OpVectorShuffle %151 %150 4 5 6 3 
                                                      OpStore %36 %152 
                                       f32_3 %157 = OpLoad %156 
                              Uniform f32_4* %159 = OpAccessChain %24 %158 %45 
                                       f32_4 %160 = OpLoad %159 
                                       f32_3 %161 = OpVectorShuffle %160 %160 0 1 2 
                                         f32 %162 = OpDot %157 %161 
                                Private f32* %164 = OpAccessChain %154 %163 
                                                      OpStore %164 %162 
                                       f32_3 %165 = OpLoad %156 
                              Uniform f32_4* %166 = OpAccessChain %24 %158 %40 
                                       f32_4 %167 = OpLoad %166 
                                       f32_3 %168 = OpVectorShuffle %167 %167 0 1 2 
                                         f32 %169 = OpDot %165 %168 
                                Private f32* %170 = OpAccessChain %154 %114 
                                                      OpStore %170 %169 
                                       f32_3 %171 = OpLoad %156 
                              Uniform f32_4* %172 = OpAccessChain %24 %158 %53 
                                       f32_4 %173 = OpLoad %172 
                                       f32_3 %174 = OpVectorShuffle %173 %173 0 1 2 
                                         f32 %175 = OpDot %171 %174 
                                Private f32* %177 = OpAccessChain %154 %176 
                                                      OpStore %177 %175 
                                       f32_3 %178 = OpLoad %154 
                                       f32_3 %179 = OpLoad %154 
                                         f32 %180 = OpDot %178 %179 
                                                      OpStore %138 %180 
                                         f32 %181 = OpLoad %138 
                                         f32 %182 = OpExtInst %1 32 %181 
                                                      OpStore %138 %182 
                                         f32 %183 = OpLoad %138 
                                       f32_3 %184 = OpCompositeConstruct %183 %183 %183 
                                       f32_3 %185 = OpLoad %154 
                                       f32_3 %186 = OpFMul %184 %185 
                                                      OpStore %154 %186 
                                       f32_3 %187 = OpLoad %154 
                                       f32_4 %188 = OpLoad %36 
                                       f32_3 %189 = OpVectorShuffle %188 %188 0 1 2 
                                         f32 %190 = OpDot %187 %189 
                                                      OpStore %138 %190 
                              Uniform f32_4* %191 = OpAccessChain %24 %53 
                                       f32_4 %192 = OpLoad %191 
                                       f32_2 %193 = OpVectorShuffle %192 %192 1 1 
                              Uniform f32_4* %195 = OpAccessChain %24 %194 %40 
                                       f32_4 %196 = OpLoad %195 
                                       f32_2 %197 = OpVectorShuffle %196 %196 0 1 
                                       f32_2 %198 = OpFMul %193 %197 
                                       f32_4 %199 = OpLoad %36 
                                       f32_4 %200 = OpVectorShuffle %199 %198 4 5 2 3 
                                                      OpStore %36 %200 
                              Uniform f32_4* %201 = OpAccessChain %24 %194 %45 
                                       f32_4 %202 = OpLoad %201 
                                       f32_2 %203 = OpVectorShuffle %202 %202 0 1 
                              Uniform f32_4* %204 = OpAccessChain %24 %53 
                                       f32_4 %205 = OpLoad %204 
                                       f32_2 %206 = OpVectorShuffle %205 %205 0 0 
                                       f32_2 %207 = OpFMul %203 %206 
                                       f32_4 %208 = OpLoad %36 
                                       f32_2 %209 = OpVectorShuffle %208 %208 0 1 
                                       f32_2 %210 = OpFAdd %207 %209 
                                       f32_4 %211 = OpLoad %36 
                                       f32_4 %212 = OpVectorShuffle %211 %210 4 5 2 3 
                                                      OpStore %36 %212 
                                       f32_4 %213 = OpLoad %36 
                                       f32_2 %214 = OpVectorShuffle %213 %213 0 1 
                                       f32_2 %215 = OpExtInst %1 4 %214 
                                Uniform f32* %217 = OpAccessChain %24 %216 
                                         f32 %218 = OpLoad %217 
                                Uniform f32* %220 = OpAccessChain %24 %219 
                                         f32 %221 = OpLoad %220 
                                       f32_2 %222 = OpCompositeConstruct %218 %221 
                                       f32_2 %223 = OpFMul %215 %222 
                                       f32_4 %224 = OpLoad %36 
                                       f32_4 %225 = OpVectorShuffle %224 %223 4 5 2 3 
                                                      OpStore %36 %225 
                                       f32_4 %226 = OpLoad %61 
                                       f32_2 %227 = OpVectorShuffle %226 %226 3 3 
                                       f32_4 %228 = OpLoad %36 
                                       f32_2 %229 = OpVectorShuffle %228 %228 0 1 
                                       f32_2 %230 = OpFDiv %227 %229 
                                       f32_4 %231 = OpLoad %36 
                                       f32_4 %232 = OpVectorShuffle %231 %230 4 5 2 3 
                                                      OpStore %36 %232 
                                Private f32* %234 = OpAccessChain %61 %176 
                                         f32 %235 = OpLoad %234 
                                Uniform f32* %236 = OpAccessChain %24 %40 %114 
                                         f32 %237 = OpLoad %236 
                                         f32 %238 = OpFDiv %235 %237 
                                                      OpStore %233 %238 
                                         f32 %239 = OpLoad %233 
                                         f32 %240 = OpFNegate %239 
                                         f32 %242 = OpFAdd %240 %241 
                                                      OpStore %233 %242 
                                         f32 %243 = OpLoad %233 
                                Uniform f32* %244 = OpAccessChain %24 %40 %176 
                                         f32 %245 = OpLoad %244 
                                         f32 %246 = OpFMul %243 %245 
                                                      OpStore %233 %246 
                                         f32 %247 = OpLoad %233 
                                         f32 %249 = OpExtInst %1 40 %247 %248 
                                                      OpStore %233 %249 
                                         f32 %252 = OpLoad %233 
                                Uniform f32* %254 = OpAccessChain %24 %253 %176 
                                         f32 %255 = OpLoad %254 
                                         f32 %256 = OpFMul %252 %255 
                                Uniform f32* %258 = OpAccessChain %24 %253 %257 
                                         f32 %259 = OpLoad %258 
                                         f32 %260 = OpFAdd %256 %259 
                                                      OpStore vs_TEXCOORDn0 %260 
                                       f32_4 %261 = OpLoad %36 
                                       f32_2 %262 = OpVectorShuffle %261 %261 0 1 
                                       f32_4 %263 = OpLoad %36 
                                       f32_2 %264 = OpVectorShuffle %263 %263 0 1 
                                         f32 %265 = OpDot %262 %264 
                                                      OpStore %233 %265 
                                Uniform f32* %267 = OpAccessChain %24 %266 
                                         f32 %268 = OpLoad %267 
                                Uniform f32* %270 = OpAccessChain %24 %269 
                                         f32 %271 = OpLoad %270 
                                       f32_2 %272 = OpCompositeConstruct %268 %271 
                                       f32_2 %275 = OpFMul %272 %274 
                                       f32_4 %276 = OpLoad %36 
                                       f32_2 %277 = OpVectorShuffle %276 %276 0 1 
                                       f32_2 %278 = OpFAdd %275 %277 
                                       f32_4 %279 = OpLoad %36 
                                       f32_4 %280 = OpVectorShuffle %279 %278 4 5 2 3 
                                                      OpStore %36 %280 
                                       f32_4 %282 = OpLoad %36 
                                       f32_2 %283 = OpVectorShuffle %282 %282 0 1 
                                       f32_2 %284 = OpFDiv %274 %283 
                                       f32_4 %285 = OpLoad vs_TEXCOORD2 
                                       f32_4 %286 = OpVectorShuffle %285 %284 0 1 4 5 
                                                      OpStore vs_TEXCOORD2 %286 
                                         f32 %287 = OpLoad %233 
                                         f32 %288 = OpExtInst %1 32 %287 
                                                      OpStore %233 %288 
                                  Input f32* %292 = OpAccessChain %290 %114 
                                         f32 %293 = OpLoad %292 
                                         f32 %294 = OpExtInst %1 4 %293 
                                Uniform f32* %296 = OpAccessChain %24 %295 
                                         f32 %297 = OpLoad %296 
                                         f32 %298 = OpFMul %294 %297 
                                Private f32* %299 = OpAccessChain %36 %163 
                                                      OpStore %299 %298 
                                Uniform f32* %302 = OpAccessChain %24 %301 
                                         f32 %303 = OpLoad %302 
                                         f32 %304 = OpFAdd %303 %241 
                                Private f32* %305 = OpAccessChain %300 %163 
                                                      OpStore %305 %304 
                                Private f32* %306 = OpAccessChain %300 %163 
                                         f32 %307 = OpLoad %306 
                                Private f32* %308 = OpAccessChain %36 %163 
                                         f32 %309 = OpLoad %308 
                                         f32 %310 = OpFMul %307 %309 
                                Private f32* %311 = OpAccessChain %36 %163 
                                                      OpStore %311 %310 
                                         f32 %312 = OpLoad %233 
                                Private f32* %313 = OpAccessChain %36 %163 
                                         f32 %314 = OpLoad %313 
                                         f32 %315 = OpFMul %312 %314 
                                Private f32* %316 = OpAccessChain %300 %163 
                                                      OpStore %316 %315 
                                Uniform f32* %319 = OpAccessChain %24 %318 
                                         f32 %320 = OpLoad %319 
                                         f32 %321 = OpFNegate %320 
                                         f32 %322 = OpFAdd %321 %241 
                                                      OpStore %317 %322 
                                         f32 %323 = OpLoad %317 
                                Private f32* %324 = OpAccessChain %300 %163 
                                         f32 %325 = OpLoad %324 
                                         f32 %326 = OpExtInst %1 4 %325 
                                         f32 %327 = OpFMul %323 %326 
                                                      OpStore %317 %327 
                                         f32 %328 = OpLoad %233 
                                Private f32* %329 = OpAccessChain %36 %163 
                                         f32 %330 = OpLoad %329 
                                         f32 %331 = OpFMul %328 %330 
                                         f32 %332 = OpLoad %317 
                                         f32 %333 = OpFNegate %332 
                                         f32 %334 = OpFAdd %331 %333 
                                                      OpStore %233 %334 
                                         f32 %335 = OpLoad %138 
                                         f32 %336 = OpExtInst %1 4 %335 
                                         f32 %337 = OpLoad %233 
                                         f32 %338 = OpFMul %336 %337 
                                         f32 %339 = OpLoad %317 
                                         f32 %340 = OpFAdd %338 %339 
                                                      OpStore %138 %340 
                                Uniform f32* %344 = OpAccessChain %24 %194 %39 %257 
                                         f32 %345 = OpLoad %344 
                                        bool %346 = OpFOrdEqual %345 %248 
                                                      OpStore %343 %346 
                                        bool %347 = OpLoad %343 
                                                      OpSelectionMerge %351 None 
                                                      OpBranchConditional %347 %350 %353 
                                             %350 = OpLabel 
                                         f32 %352 = OpLoad %138 
                                                      OpStore %349 %352 
                                                      OpBranch %351 
                                             %353 = OpLabel 
                                Private f32* %354 = OpAccessChain %300 %163 
                                         f32 %355 = OpLoad %354 
                                                      OpStore %349 %355 
                                                      OpBranch %351 
                                             %351 = OpLabel 
                                         f32 %356 = OpLoad %349 
                                                      OpStore %138 %356 
                                Uniform f32* %358 = OpAccessChain %24 %357 
                                         f32 %359 = OpLoad %358 
                                Uniform f32* %361 = OpAccessChain %24 %360 
                                         f32 %362 = OpLoad %361 
                                         f32 %363 = OpFMul %359 %362 
                                                      OpStore %233 %363 
                                         f32 %364 = OpLoad %233 
                                         f32 %365 = OpLoad %138 
                                         f32 %366 = OpFMul %364 %365 
                                         f32 %367 = OpFAdd %366 %241 
                                                      OpStore %233 %367 
                                         f32 %368 = OpLoad %138 
                                         f32 %369 = OpLoad %233 
                                         f32 %370 = OpFDiv %368 %369 
                                Private f32* %371 = OpAccessChain %36 %163 
                                                      OpStore %371 %370 
                                Uniform f32* %373 = OpAccessChain %24 %372 
                                         f32 %374 = OpLoad %373 
                                Uniform f32* %375 = OpAccessChain %24 %360 
                                         f32 %376 = OpLoad %375 
                                         f32 %377 = OpFMul %374 %376 
                                                      OpStore %138 %377 
                                Private f32* %378 = OpAccessChain %36 %163 
                                         f32 %379 = OpLoad %378 
                                         f32 %380 = OpLoad %138 
                                         f32 %381 = OpFMul %379 %380 
                                                      OpStore %138 %381 
                                         f32 %382 = OpLoad %138 
                                         f32 %383 = OpExtInst %1 37 %382 %241 
                                                      OpStore %233 %383 
                                         f32 %384 = OpLoad %233 
                                         f32 %385 = OpExtInst %1 31 %384 
                                                      OpStore %233 %385 
                                  Input f32* %386 = OpAccessChain %122 %257 
                                         f32 %387 = OpLoad %386 
                                Uniform f32* %389 = OpAccessChain %24 %388 %257 
                                         f32 %390 = OpLoad %389 
                                         f32 %391 = OpFMul %387 %390 
                                Private f32* %392 = OpAccessChain %61 %257 
                                                      OpStore %392 %391 
                                       f32_4 %393 = OpLoad %61 
                                       f32_3 %394 = OpVectorShuffle %393 %393 3 3 3 
                              Uniform f32_4* %395 = OpAccessChain %24 %388 
                                       f32_4 %396 = OpLoad %395 
                                       f32_3 %397 = OpVectorShuffle %396 %396 0 1 2 
                                       f32_3 %398 = OpFMul %394 %397 
                                       f32_4 %399 = OpLoad %61 
                                       f32_4 %400 = OpVectorShuffle %399 %398 4 5 6 3 
                                                      OpStore %61 %400 
                                       f32_4 %401 = OpLoad %86 
                                       f32_4 %402 = OpFNegate %401 
                                       f32_4 %403 = OpLoad %61 
                                       f32_4 %404 = OpFAdd %402 %403 
                                                      OpStore %61 %404 
                                         f32 %406 = OpLoad %233 
                                       f32_4 %407 = OpCompositeConstruct %406 %406 %406 %406 
                                       f32_4 %408 = OpLoad %61 
                                       f32_4 %409 = OpFMul %407 %408 
                                       f32_4 %410 = OpLoad %86 
                                       f32_4 %411 = OpFAdd %409 %410 
                                                      OpStore %405 %411 
                              Uniform f32_4* %413 = OpAccessChain %24 %412 
                                       f32_4 %414 = OpLoad %413 
                                       f32_4 %417 = OpExtInst %1 40 %414 %416 
                                                      OpStore %61 %417 
                                       f32_4 %418 = OpLoad %61 
                                       f32_4 %421 = OpExtInst %1 37 %418 %420 
                                                      OpStore %61 %421 
                                       f32_2 %422 = OpLoad %9 
                                       f32_4 %423 = OpLoad %61 
                                       f32_2 %424 = OpVectorShuffle %423 %423 0 1 
                                       f32_2 %425 = OpFNegate %424 
                                       f32_2 %426 = OpFAdd %422 %425 
                                                      OpStore %300 %426 
                                       f32_2 %427 = OpLoad %9 
                                       f32_2 %430 = OpFMul %427 %429 
                                       f32_4 %431 = OpLoad %61 
                                       f32_2 %432 = OpVectorShuffle %431 %431 0 1 
                                       f32_2 %433 = OpFNegate %432 
                                       f32_2 %434 = OpFAdd %430 %433 
                                                      OpStore %9 %434 
                                       f32_4 %435 = OpLoad %61 
                                       f32_2 %436 = OpVectorShuffle %435 %435 2 3 
                                       f32_2 %437 = OpFNegate %436 
                                       f32_2 %438 = OpLoad %9 
                                       f32_2 %439 = OpFAdd %437 %438 
                                       f32_4 %440 = OpLoad vs_TEXCOORD2 
                                       f32_4 %441 = OpVectorShuffle %440 %439 4 5 2 3 
                                                      OpStore vs_TEXCOORD2 %441 
                                       f32_4 %442 = OpLoad %61 
                                       f32_2 %443 = OpVectorShuffle %442 %442 0 1 
                                       f32_2 %444 = OpFNegate %443 
                                       f32_4 %445 = OpLoad %61 
                                       f32_2 %446 = OpVectorShuffle %445 %445 2 3 
                                       f32_2 %447 = OpFAdd %444 %446 
                                                      OpStore %9 %447 
                                       f32_2 %449 = OpLoad %300 
                                       f32_2 %450 = OpLoad %9 
                                       f32_2 %451 = OpFDiv %449 %450 
                                       f32_4 %452 = OpLoad vs_TEXCOORD0 
                                       f32_4 %453 = OpVectorShuffle %452 %451 0 1 4 5 
                                                      OpStore vs_TEXCOORD0 %453 
                                       f32_2 %455 = OpLoad %454 
                                       f32_4 %456 = OpLoad vs_TEXCOORD0 
                                       f32_4 %457 = OpVectorShuffle %456 %455 4 5 2 3 
                                                      OpStore vs_TEXCOORD0 %457 
                                  Input f32* %459 = OpAccessChain %290 %114 
                                         f32 %460 = OpLoad %459 
                                        bool %461 = OpFOrdGreaterThanEqual %248 %460 
                                                      OpStore %458 %461 
                                        bool %462 = OpLoad %458 
                                         f32 %463 = OpSelect %462 %241 %248 
                                Private f32* %464 = OpAccessChain %9 %163 
                                                      OpStore %464 %463 
                                Uniform f32* %467 = OpAccessChain %24 %466 
                                         f32 %468 = OpLoad %467 
                                         f32 %469 = OpFNegate %468 
                                Uniform f32* %471 = OpAccessChain %24 %470 
                                         f32 %472 = OpLoad %471 
                                         f32 %473 = OpFAdd %469 %472 
                                                      OpStore %465 %473 
                                Private f32* %474 = OpAccessChain %9 %163 
                                         f32 %475 = OpLoad %474 
                                         f32 %476 = OpLoad %465 
                                         f32 %477 = OpFMul %475 %476 
                                Uniform f32* %478 = OpAccessChain %24 %466 
                                         f32 %479 = OpLoad %478 
                                         f32 %480 = OpFAdd %477 %479 
                                Private f32* %481 = OpAccessChain %9 %163 
                                                      OpStore %481 %480 
                                Private f32* %482 = OpAccessChain %9 %163 
                                         f32 %483 = OpLoad %482 
                                         f32 %484 = OpFMul %483 %273 
                                Uniform f32* %486 = OpAccessChain %24 %485 
                                         f32 %487 = OpLoad %486 
                                         f32 %488 = OpFAdd %484 %487 
                                Private f32* %489 = OpAccessChain %9 %163 
                                                      OpStore %489 %488 
                                Private f32* %490 = OpAccessChain %9 %163 
                                         f32 %491 = OpLoad %490 
                                Uniform f32* %492 = OpAccessChain %24 %360 
                                         f32 %493 = OpLoad %492 
                                         f32 %494 = OpFMul %491 %493 
                                Private f32* %495 = OpAccessChain %9 %163 
                                                      OpStore %495 %494 
                                Private f32* %496 = OpAccessChain %9 %163 
                                         f32 %497 = OpLoad %496 
                                         f32 %498 = OpFNegate %497 
                                         f32 %500 = OpFMul %498 %499 
                                         f32 %501 = OpFAdd %500 %499 
                                Private f32* %502 = OpAccessChain %9 %163 
                                                      OpStore %502 %501 
                                Private f32* %503 = OpAccessChain %9 %163 
                                         f32 %504 = OpLoad %503 
                                Private f32* %505 = OpAccessChain %36 %163 
                                         f32 %506 = OpLoad %505 
                                         f32 %507 = OpFMul %504 %506 
                                         f32 %509 = OpFAdd %507 %508 
                                Private f32* %510 = OpAccessChain %36 %257 
                                                      OpStore %510 %509 
                                       f32_4 %512 = OpLoad %36 
                                       f32_2 %513 = OpVectorShuffle %512 %512 0 3 
                                       f32_4 %514 = OpLoad vs_TEXCOORD1 
                                       f32_4 %515 = OpVectorShuffle %514 %513 4 1 2 5 
                                                      OpStore vs_TEXCOORD1 %515 
                                         f32 %516 = OpLoad %138 
                                         f32 %517 = OpFNegate %516 
                                         f32 %518 = OpFMul %517 %499 
                                Private f32* %519 = OpAccessChain %36 %257 
                                         f32 %520 = OpLoad %519 
                                         f32 %521 = OpFAdd %518 %520 
                                 Output f32* %522 = OpAccessChain vs_TEXCOORD1 %114 
                                                      OpStore %522 %521 
                                         f32 %523 = OpLoad %138 
                                         f32 %524 = OpFMul %523 %499 
                                Private f32* %525 = OpAccessChain %36 %257 
                                         f32 %526 = OpLoad %525 
                                         f32 %527 = OpFAdd %524 %526 
                                 Output f32* %528 = OpAccessChain vs_TEXCOORD1 %176 
                                                      OpStore %528 %527 
                                 Output f32* %529 = OpAccessChain %118 %45 %114 
                                         f32 %530 = OpLoad %529 
                                         f32 %531 = OpFNegate %530 
                                 Output f32* %532 = OpAccessChain %118 %45 %114 
                                                      OpStore %532 %531 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 89
; Schema: 0
                                             OpCapability Shader 
                                      %1 = OpExtInstImport "GLSL.std.450" 
                                             OpMemoryModel Logical GLSL450 
                                             OpEntryPoint Fragment %4 "main" %10 %29 %38 %52 %74 
                                             OpExecutionMode %4 OriginUpperLeft 
                                             OpName vs_TEXCOORDn0 "vs_TEXCOORDn0" 
                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                             OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                             OpDecorate vs_TEXCOORDn0 Location 10 
                                             OpDecorate %19 DescriptorSet 19 
                                             OpDecorate %19 Binding 19 
                                             OpDecorate %23 DescriptorSet 23 
                                             OpDecorate %23 Binding 23 
                                             OpDecorate vs_TEXCOORD0 Location 29 
                                             OpDecorate vs_TEXCOORD1 Location 38 
                                             OpDecorate %52 Location 52 
                                             OpMemberDecorate %58 0 Offset 58 
                                             OpDecorate %58 Block 
                                             OpDecorate %60 DescriptorSet 60 
                                             OpDecorate %60 Binding 60 
                                             OpDecorate %74 Location 74 
                                      %2 = OpTypeVoid 
                                      %3 = OpTypeFunction %2 
                                      %6 = OpTypeFloat 32 
                                      %7 = OpTypePointer Private %6 
                         Private f32* %8 = OpVariable Private 
                                      %9 = OpTypePointer Input %6 
                Input f32* vs_TEXCOORDn0 = OpVariable Input 
                                 f32 %13 = OpConstant 3.674022E-40 
                                 f32 %14 = OpConstant 3.674022E-40 
                        Private f32* %16 = OpVariable Private 
                                     %17 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                     %18 = OpTypePointer UniformConstant %17 
UniformConstant read_only Texture2D* %19 = OpVariable UniformConstant 
                                     %21 = OpTypeSampler 
                                     %22 = OpTypePointer UniformConstant %21 
            UniformConstant sampler* %23 = OpVariable UniformConstant 
                                     %25 = OpTypeSampledImage %17 
                                     %27 = OpTypeVector %6 4 
                                     %28 = OpTypePointer Input %27 
               Input f32_4* vs_TEXCOORD0 = OpVariable Input 
                                     %30 = OpTypeVector %6 2 
                                     %34 = OpTypeInt 32 0 
                                 u32 %35 = OpConstant 3 
               Input f32_4* vs_TEXCOORD1 = OpVariable Input 
                                 u32 %39 = OpConstant 0 
                                     %49 = OpTypeVector %6 3 
                                     %50 = OpTypePointer Private %49 
                      Private f32_3* %51 = OpVariable Private 
                        Input f32_4* %52 = OpVariable Input 
                                     %58 = OpTypeStruct %27 
                                     %59 = OpTypePointer Uniform %58 
            Uniform struct {f32_4;}* %60 = OpVariable Uniform 
                                     %61 = OpTypeInt 32 1 
                                 i32 %62 = OpConstant 0 
                                     %63 = OpTypePointer Uniform %27 
                                     %73 = OpTypePointer Output %27 
                       Output f32_4* %74 = OpVariable Output 
                                     %76 = OpTypePointer Output %6 
                                 void %4 = OpFunction None %3 
                                      %5 = OpLabel 
                                 f32 %11 = OpLoad vs_TEXCOORDn0 
                                             OpStore %8 %11 
                                 f32 %12 = OpLoad %8 
                                 f32 %15 = OpExtInst %1 43 %12 %13 %14 
                                             OpStore %8 %15 
                 read_only Texture2D %20 = OpLoad %19 
                             sampler %24 = OpLoad %23 
          read_only Texture2DSampled %26 = OpSampledImage %20 %24 
                               f32_4 %31 = OpLoad vs_TEXCOORD0 
                               f32_2 %32 = OpVectorShuffle %31 %31 0 1 
                               f32_4 %33 = OpImageSampleImplicitLod %26 %32 
                                 f32 %36 = OpCompositeExtract %33 3 
                                             OpStore %16 %36 
                                 f32 %37 = OpLoad %16 
                          Input f32* %40 = OpAccessChain vs_TEXCOORD1 %39 
                                 f32 %41 = OpLoad %40 
                                 f32 %42 = OpFMul %37 %41 
                          Input f32* %43 = OpAccessChain vs_TEXCOORD1 %35 
                                 f32 %44 = OpLoad %43 
                                 f32 %45 = OpFNegate %44 
                                 f32 %46 = OpFAdd %42 %45 
                                             OpStore %16 %46 
                                 f32 %47 = OpLoad %16 
                                 f32 %48 = OpExtInst %1 43 %47 %13 %14 
                                             OpStore %16 %48 
                               f32_4 %53 = OpLoad %52 
                               f32_3 %54 = OpVectorShuffle %53 %53 0 1 2 
                                 f32 %55 = OpLoad %16 
                               f32_3 %56 = OpCompositeConstruct %55 %55 %55 
                               f32_3 %57 = OpFMul %54 %56 
                      Uniform f32_4* %64 = OpAccessChain %60 %62 
                               f32_4 %65 = OpLoad %64 
                               f32_3 %66 = OpVectorShuffle %65 %65 0 1 2 
                               f32_3 %67 = OpFNegate %66 
                               f32_3 %68 = OpFAdd %57 %67 
                                             OpStore %51 %68 
                                 f32 %69 = OpLoad %16 
                          Input f32* %70 = OpAccessChain %52 %35 
                                 f32 %71 = OpLoad %70 
                                 f32 %72 = OpFMul %69 %71 
                                             OpStore %16 %72 
                                 f32 %75 = OpLoad %16 
                         Output f32* %77 = OpAccessChain %74 %35 
                                             OpStore %77 %75 
                                 f32 %78 = OpLoad %8 
                               f32_3 %79 = OpCompositeConstruct %78 %78 %78 
                               f32_3 %80 = OpLoad %51 
                               f32_3 %81 = OpFMul %79 %80 
                      Uniform f32_4* %82 = OpAccessChain %60 %62 
                               f32_4 %83 = OpLoad %82 
                               f32_3 %84 = OpVectorShuffle %83 %83 0 1 2 
                               f32_3 %85 = OpFAdd %81 %84 
                               f32_4 %86 = OpLoad %74 
                               f32_4 %87 = OpVectorShuffle %86 %85 4 5 6 3 
                                             OpStore %74 %87 
                                             OpReturn
                                             OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "FOG_LINEAR" "OUTLINE_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "FOG_LINEAR" "OUTLINE_ON" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	vec4 _FaceColor;
uniform 	float _FaceDilate;
uniform 	float _OutlineSoftness;
uniform 	vec4 _OutlineColor;
uniform 	float _OutlineWidth;
uniform 	float _WeightNormal;
uniform 	float _WeightBold;
uniform 	float _ScaleRatioA;
uniform 	float _VertexOffsetX;
uniform 	float _VertexOffsetY;
uniform 	vec4 _ClipRect;
uniform 	float _MaskSoftnessX;
uniform 	float _MaskSoftnessY;
uniform 	float _GradientScale;
uniform 	float _ScaleX;
uniform 	float _ScaleY;
uniform 	float _PerspectiveFilter;
uniform 	float _Sharpness;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_COLOR0;
in  vec2 in_TEXCOORD0;
in  vec2 in_TEXCOORD1;
out vec4 vs_COLOR0;
out vec4 vs_COLOR1;
out vec4 vs_TEXCOORD0;
out vec4 vs_TEXCOORD1;
out vec4 vs_TEXCOORD2;
out float vs_TEXCOORDn0;
vec2 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
vec3 u_xlat5;
float u_xlat6;
vec2 u_xlat7;
float u_xlat12;
float u_xlat13;
float u_xlat18;
bool u_xlatb18;
void main()
{
    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
    gl_Position = u_xlat2;
    u_xlat3 = in_COLOR0 * _FaceColor;
    u_xlat3.xyz = u_xlat3.www * u_xlat3.xyz;
    vs_COLOR0 = u_xlat3;
    u_xlat4.w = in_COLOR0.w * _OutlineColor.w;
    u_xlat4.xyz = u_xlat4.www * _OutlineColor.xyz;
    u_xlat4 = (-u_xlat3) + u_xlat4;
    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
    u_xlat5.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat5.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat5.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat5.xyz = vec3(u_xlat12) * u_xlat5.xyz;
    u_xlat12 = dot(u_xlat5.xyz, u_xlat1.xyz);
    u_xlat1.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;
    u_xlat1.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat1.xy;
    u_xlat1.xy = abs(u_xlat1.xy) * vec2(_ScaleX, _ScaleY);
    u_xlat1.xy = u_xlat2.ww / u_xlat1.xy;
    vs_TEXCOORDn0 = u_xlat2.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat18 = dot(u_xlat1.xy, u_xlat1.xy);
    u_xlat1.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) * vec2(0.25, 0.25) + u_xlat1.xy;
    vs_TEXCOORD2.zw = vec2(0.25, 0.25) / u_xlat1.xy;
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.x = abs(in_TEXCOORD1.y) * _GradientScale;
    u_xlat7.x = _Sharpness + 1.0;
    u_xlat1.x = u_xlat7.x * u_xlat1.x;
    u_xlat7.x = u_xlat18 * u_xlat1.x;
    u_xlat13 = (-_PerspectiveFilter) + 1.0;
    u_xlat13 = u_xlat13 * abs(u_xlat7.x);
    u_xlat18 = u_xlat18 * u_xlat1.x + (-u_xlat13);
    u_xlat12 = abs(u_xlat12) * u_xlat18 + u_xlat13;
    u_xlatb18 = hlslcc_mtx4x4glstate_matrix_projection[3].w==0.0;
    u_xlat12 = (u_xlatb18) ? u_xlat12 : u_xlat7.x;
    u_xlat18 = _OutlineSoftness * _ScaleRatioA;
    u_xlat18 = u_xlat18 * u_xlat12 + 1.0;
    u_xlat1.x = u_xlat12 / u_xlat18;
    u_xlat12 = _OutlineWidth * _ScaleRatioA;
    u_xlat12 = u_xlat12 * 0.5;
    u_xlat18 = u_xlat1.x * u_xlat12;
    u_xlat18 = u_xlat18 + u_xlat18;
    u_xlat18 = min(u_xlat18, 1.0);
    u_xlat18 = sqrt(u_xlat18);
    vs_COLOR1 = vec4(u_xlat18) * u_xlat4 + u_xlat3;
    u_xlat2 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));
    u_xlat2 = min(u_xlat2, vec4(2e+10, 2e+10, 2e+10, 2e+10));
    u_xlat7.xy = u_xlat0.xy + (-u_xlat2.xy);
    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + (-u_xlat2.xy);
    vs_TEXCOORD2.xy = (-u_xlat2.zw) + u_xlat0.xy;
    u_xlat0.xy = (-u_xlat2.xy) + u_xlat2.zw;
    vs_TEXCOORD0.zw = u_xlat7.xy / u_xlat0.xy;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlatb0 = 0.0>=in_TEXCOORD1.y;
    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);
    u_xlat6 = (-_WeightNormal) + _WeightBold;
    u_xlat0.x = u_xlat0.x * u_xlat6 + _WeightNormal;
    u_xlat0.x = u_xlat0.x * 0.25 + _FaceDilate;
    u_xlat0.x = u_xlat0.x * _ScaleRatioA;
    u_xlat0.x = (-u_xlat0.x) * 0.5 + 0.5;
    u_xlat1.w = u_xlat0.x * u_xlat1.x + -0.5;
    vs_TEXCOORD1.y = (-u_xlat12) * u_xlat1.x + u_xlat1.w;
    vs_TEXCOORD1.z = u_xlat12 * u_xlat1.x + u_xlat1.w;
    vs_TEXCOORD1.xw = u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 unity_FogColor;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
in  vec4 vs_COLOR0;
in  vec4 vs_COLOR1;
in  vec4 vs_TEXCOORD0;
in  vec4 vs_TEXCOORD1;
in  float vs_TEXCOORDn0;
layout(location = 0) out vec4 SV_Target0;
float u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec2 u_xlat3;
void main()
{
    u_xlat0 = vs_TEXCOORDn0;
    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
    u_xlat1 = vs_COLOR0 + (-vs_COLOR1);
    u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat3.xy = u_xlat2.ww * vs_TEXCOORD1.xx + (-vs_TEXCOORD1.zy);
    u_xlat3.xy = clamp(u_xlat3.xy, 0.0, 1.0);
    u_xlat1 = u_xlat3.xxxx * u_xlat1 + vs_COLOR1;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat3.yyy + (-unity_FogColor.xyz);
    u_xlat3.x = u_xlat3.y * u_xlat1.w;
    SV_Target0.w = u_xlat3.x;
    SV_Target0.xyz = vec3(u_xlat0) * u_xlat1.xyz + unity_FogColor.xyz;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "FOG_LINEAR" "OUTLINE_ON" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 534
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %12 %118 %122 %135 %156 %251 %281 %290 %405 %448 %454 %511 
                                                      OpName vs_TEXCOORDn0 "vs_TEXCOORDn0" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpDecorate %12 Location 12 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpDecorate %19 ArrayStride 19 
                                                      OpDecorate %20 ArrayStride 20 
                                                      OpDecorate %21 ArrayStride 21 
                                                      OpMemberDecorate %22 0 Offset 22 
                                                      OpMemberDecorate %22 1 Offset 22 
                                                      OpMemberDecorate %22 2 Offset 22 
                                                      OpMemberDecorate %22 3 Offset 22 
                                                      OpMemberDecorate %22 4 Offset 22 
                                                      OpMemberDecorate %22 5 Offset 22 
                                                      OpMemberDecorate %22 6 Offset 22 
                                                      OpMemberDecorate %22 7 Offset 22 
                                                      OpMemberDecorate %22 8 Offset 22 
                                                      OpMemberDecorate %22 9 Offset 22 
                                                      OpMemberDecorate %22 10 Offset 22 
                                                      OpMemberDecorate %22 11 Offset 22 
                                                      OpMemberDecorate %22 12 Offset 22 
                                                      OpMemberDecorate %22 13 Offset 22 
                                                      OpMemberDecorate %22 14 Offset 22 
                                                      OpMemberDecorate %22 15 Offset 22 
                                                      OpMemberDecorate %22 16 Offset 22 
                                                      OpMemberDecorate %22 17 Offset 22 
                                                      OpMemberDecorate %22 18 Offset 22 
                                                      OpMemberDecorate %22 19 Offset 22 
                                                      OpMemberDecorate %22 20 Offset 22 
                                                      OpMemberDecorate %22 21 Offset 22 
                                                      OpMemberDecorate %22 22 Offset 22 
                                                      OpMemberDecorate %22 23 Offset 22 
                                                      OpMemberDecorate %22 24 Offset 22 
                                                      OpMemberDecorate %22 25 Offset 22 
                                                      OpDecorate %22 Block 
                                                      OpDecorate %24 DescriptorSet 24 
                                                      OpDecorate %24 Binding 24 
                                                      OpMemberDecorate %116 0 BuiltIn 116 
                                                      OpMemberDecorate %116 1 BuiltIn 116 
                                                      OpMemberDecorate %116 2 BuiltIn 116 
                                                      OpDecorate %116 Block 
                                                      OpDecorate %122 Location 122 
                                                      OpDecorate %135 Location 135 
                                                      OpDecorate %156 Location 156 
                                                      OpDecorate vs_TEXCOORDn0 Location 251 
                                                      OpDecorate vs_TEXCOORD2 Location 281 
                                                      OpDecorate %290 Location 290 
                                                      OpDecorate %405 Location 405 
                                                      OpDecorate vs_TEXCOORD0 Location 448 
                                                      OpDecorate %454 Location 454 
                                                      OpDecorate vs_TEXCOORD1 Location 511 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 2 
                                               %8 = OpTypePointer Private %7 
                                Private f32_2* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 4 
                                              %11 = OpTypePointer Input %10 
                                 Input f32_4* %12 = OpVariable Input 
                                              %15 = OpTypeVector %6 3 
                                              %16 = OpTypeInt 32 0 
                                          u32 %17 = OpConstant 4 
                                              %18 = OpTypeArray %10 %17 
                                              %19 = OpTypeArray %10 %17 
                                              %20 = OpTypeArray %10 %17 
                                              %21 = OpTypeArray %10 %17 
                                              %22 = OpTypeStruct %15 %10 %10 %18 %19 %20 %21 %10 %10 %6 %6 %10 %6 %6 %6 %6 %6 %6 %10 %6 %6 %6 %6 %6 %6 %6 
                                              %23 = OpTypePointer Uniform %22 
Uniform struct {f32_3; f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4[4]; f32_4; f32_4; f32; f32; f32_4; f32; f32; f32; f32; f32; f32; f32_4; f32; f32; f32; f32; f32; f32; f32;}* %24 = OpVariable Uniform 
                                              %25 = OpTypeInt 32 1 
                                          i32 %26 = OpConstant 16 
                                              %27 = OpTypePointer Uniform %6 
                                          i32 %30 = OpConstant 17 
                                              %35 = OpTypePointer Private %10 
                               Private f32_4* %36 = OpVariable Private 
                                          i32 %39 = OpConstant 3 
                                          i32 %40 = OpConstant 1 
                                              %41 = OpTypePointer Uniform %10 
                                          i32 %45 = OpConstant 0 
                                          i32 %53 = OpConstant 2 
                               Private f32_4* %61 = OpVariable Private 
                                              %80 = OpTypePointer Uniform %15 
                               Private f32_4* %86 = OpVariable Private 
                                          i32 %89 = OpConstant 6 
                                         u32 %114 = OpConstant 1 
                                             %115 = OpTypeArray %6 %114 
                                             %116 = OpTypeStruct %10 %6 %115 
                                             %117 = OpTypePointer Output %116 
        Output struct {f32_4; f32; f32[1];}* %118 = OpVariable Output 
                                             %120 = OpTypePointer Output %10 
                                Input f32_4* %122 = OpVariable Input 
                                         i32 %124 = OpConstant 8 
                               Output f32_4* %135 = OpVariable Output 
                                             %137 = OpTypePointer Private %6 
                                Private f32* %138 = OpVariable Private 
                                             %153 = OpTypePointer Private %15 
                              Private f32_3* %154 = OpVariable Private 
                                             %155 = OpTypePointer Input %15 
                                Input f32_3* %156 = OpVariable Input 
                                         i32 %158 = OpConstant 4 
                                         u32 %163 = OpConstant 0 
                                         u32 %176 = OpConstant 2 
                                         i32 %194 = OpConstant 5 
                                         i32 %216 = OpConstant 22 
                                         i32 %219 = OpConstant 23 
                                Private f32* %233 = OpVariable Private 
                                         f32 %241 = OpConstant 3.674022E-40 
                                         f32 %248 = OpConstant 3.674022E-40 
                                             %250 = OpTypePointer Output %6 
                        Output f32* vs_TEXCOORDn0 = OpVariable Output 
                                         i32 %253 = OpConstant 7 
                                         u32 %257 = OpConstant 3 
                                         i32 %266 = OpConstant 19 
                                         i32 %269 = OpConstant 20 
                                         f32 %273 = OpConstant 3.674022E-40 
                                       f32_2 %274 = OpConstantComposite %273 %273 
                       Output f32_4* vs_TEXCOORD2 = OpVariable Output 
                                             %289 = OpTypePointer Input %7 
                                Input f32_2* %290 = OpVariable Input 
                                             %291 = OpTypePointer Input %6 
                                         i32 %295 = OpConstant 21 
                              Private f32_2* %300 = OpVariable Private 
                                         i32 %301 = OpConstant 25 
                                Private f32* %317 = OpVariable Private 
                                         i32 %318 = OpConstant 24 
                                             %341 = OpTypeBool 
                                             %342 = OpTypePointer Private %341 
                               Private bool* %343 = OpVariable Private 
                                             %348 = OpTypePointer Function %6 
                                         i32 %357 = OpConstant 10 
                                         i32 %360 = OpConstant 15 
                                         i32 %372 = OpConstant 12 
                                         i32 %388 = OpConstant 11 
                               Output f32_4* %405 = OpVariable Output 
                                         i32 %412 = OpConstant 18 
                                         f32 %415 = OpConstant 3.674022E-40 
                                       f32_4 %416 = OpConstantComposite %415 %415 %415 %415 
                                         f32 %419 = OpConstant 3.674022E-40 
                                       f32_4 %420 = OpConstantComposite %419 %419 %419 %419 
                                         f32 %428 = OpConstant 3.674022E-40 
                                       f32_2 %429 = OpConstantComposite %428 %428 
                       Output f32_4* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_2* %454 = OpVariable Input 
                               Private bool* %458 = OpVariable Private 
                                Private f32* %465 = OpVariable Private 
                                         i32 %466 = OpConstant 13 
                                         i32 %470 = OpConstant 14 
                                         i32 %485 = OpConstant 9 
                                         f32 %499 = OpConstant 3.674022E-40 
                                         f32 %508 = OpConstant 3.674022E-40 
                       Output f32_4* vs_TEXCOORD1 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                               Function f32* %349 = OpVariable Function 
                                        f32_4 %13 = OpLoad %12 
                                        f32_2 %14 = OpVectorShuffle %13 %13 0 1 
                                 Uniform f32* %28 = OpAccessChain %24 %26 
                                          f32 %29 = OpLoad %28 
                                 Uniform f32* %31 = OpAccessChain %24 %30 
                                          f32 %32 = OpLoad %31 
                                        f32_2 %33 = OpCompositeConstruct %29 %32 
                                        f32_2 %34 = OpFAdd %14 %33 
                                                      OpStore %9 %34 
                                        f32_2 %37 = OpLoad %9 
                                        f32_4 %38 = OpVectorShuffle %37 %37 1 1 1 1 
                               Uniform f32_4* %42 = OpAccessChain %24 %39 %40 
                                        f32_4 %43 = OpLoad %42 
                                        f32_4 %44 = OpFMul %38 %43 
                                                      OpStore %36 %44 
                               Uniform f32_4* %46 = OpAccessChain %24 %39 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_2 %48 = OpLoad %9 
                                        f32_4 %49 = OpVectorShuffle %48 %48 0 0 0 0 
                                        f32_4 %50 = OpFMul %47 %49 
                                        f32_4 %51 = OpLoad %36 
                                        f32_4 %52 = OpFAdd %50 %51 
                                                      OpStore %36 %52 
                               Uniform f32_4* %54 = OpAccessChain %24 %39 %53 
                                        f32_4 %55 = OpLoad %54 
                                        f32_4 %56 = OpLoad %12 
                                        f32_4 %57 = OpVectorShuffle %56 %56 2 2 2 2 
                                        f32_4 %58 = OpFMul %55 %57 
                                        f32_4 %59 = OpLoad %36 
                                        f32_4 %60 = OpFAdd %58 %59 
                                                      OpStore %36 %60 
                                        f32_4 %62 = OpLoad %36 
                               Uniform f32_4* %63 = OpAccessChain %24 %39 %39 
                                        f32_4 %64 = OpLoad %63 
                                        f32_4 %65 = OpFAdd %62 %64 
                                                      OpStore %61 %65 
                               Uniform f32_4* %66 = OpAccessChain %24 %39 %39 
                                        f32_4 %67 = OpLoad %66 
                                        f32_3 %68 = OpVectorShuffle %67 %67 0 1 2 
                                        f32_4 %69 = OpLoad %12 
                                        f32_3 %70 = OpVectorShuffle %69 %69 3 3 3 
                                        f32_3 %71 = OpFMul %68 %70 
                                        f32_4 %72 = OpLoad %36 
                                        f32_3 %73 = OpVectorShuffle %72 %72 0 1 2 
                                        f32_3 %74 = OpFAdd %71 %73 
                                        f32_4 %75 = OpLoad %36 
                                        f32_4 %76 = OpVectorShuffle %75 %74 4 5 6 3 
                                                      OpStore %36 %76 
                                        f32_4 %77 = OpLoad %36 
                                        f32_3 %78 = OpVectorShuffle %77 %77 0 1 2 
                                        f32_3 %79 = OpFNegate %78 
                               Uniform f32_3* %81 = OpAccessChain %24 %45 
                                        f32_3 %82 = OpLoad %81 
                                        f32_3 %83 = OpFAdd %79 %82 
                                        f32_4 %84 = OpLoad %36 
                                        f32_4 %85 = OpVectorShuffle %84 %83 4 5 6 3 
                                                      OpStore %36 %85 
                                        f32_4 %87 = OpLoad %61 
                                        f32_4 %88 = OpVectorShuffle %87 %87 1 1 1 1 
                               Uniform f32_4* %90 = OpAccessChain %24 %89 %40 
                                        f32_4 %91 = OpLoad %90 
                                        f32_4 %92 = OpFMul %88 %91 
                                                      OpStore %86 %92 
                               Uniform f32_4* %93 = OpAccessChain %24 %89 %45 
                                        f32_4 %94 = OpLoad %93 
                                        f32_4 %95 = OpLoad %61 
                                        f32_4 %96 = OpVectorShuffle %95 %95 0 0 0 0 
                                        f32_4 %97 = OpFMul %94 %96 
                                        f32_4 %98 = OpLoad %86 
                                        f32_4 %99 = OpFAdd %97 %98 
                                                      OpStore %86 %99 
                              Uniform f32_4* %100 = OpAccessChain %24 %89 %53 
                                       f32_4 %101 = OpLoad %100 
                                       f32_4 %102 = OpLoad %61 
                                       f32_4 %103 = OpVectorShuffle %102 %102 2 2 2 2 
                                       f32_4 %104 = OpFMul %101 %103 
                                       f32_4 %105 = OpLoad %86 
                                       f32_4 %106 = OpFAdd %104 %105 
                                                      OpStore %86 %106 
                              Uniform f32_4* %107 = OpAccessChain %24 %89 %39 
                                       f32_4 %108 = OpLoad %107 
                                       f32_4 %109 = OpLoad %61 
                                       f32_4 %110 = OpVectorShuffle %109 %109 3 3 3 3 
                                       f32_4 %111 = OpFMul %108 %110 
                                       f32_4 %112 = OpLoad %86 
                                       f32_4 %113 = OpFAdd %111 %112 
                                                      OpStore %61 %113 
                                       f32_4 %119 = OpLoad %61 
                               Output f32_4* %121 = OpAccessChain %118 %45 
                                                      OpStore %121 %119 
                                       f32_4 %123 = OpLoad %122 
                              Uniform f32_4* %125 = OpAccessChain %24 %124 
                                       f32_4 %126 = OpLoad %125 
                                       f32_4 %127 = OpFMul %123 %126 
                                                      OpStore %86 %127 
                                       f32_4 %128 = OpLoad %86 
                                       f32_3 %129 = OpVectorShuffle %128 %128 3 3 3 
                                       f32_4 %130 = OpLoad %86 
                                       f32_3 %131 = OpVectorShuffle %130 %130 0 1 2 
                                       f32_3 %132 = OpFMul %129 %131 
                                       f32_4 %133 = OpLoad %86 
                                       f32_4 %134 = OpVectorShuffle %133 %132 4 5 6 3 
                                                      OpStore %86 %134 
                                       f32_4 %136 = OpLoad %86 
                                                      OpStore %135 %136 
                                       f32_4 %139 = OpLoad %36 
                                       f32_3 %140 = OpVectorShuffle %139 %139 0 1 2 
                                       f32_4 %141 = OpLoad %36 
                                       f32_3 %142 = OpVectorShuffle %141 %141 0 1 2 
                                         f32 %143 = OpDot %140 %142 
                                                      OpStore %138 %143 
                                         f32 %144 = OpLoad %138 
                                         f32 %145 = OpExtInst %1 32 %144 
                                                      OpStore %138 %145 
                                         f32 %146 = OpLoad %138 
                                       f32_3 %147 = OpCompositeConstruct %146 %146 %146 
                                       f32_4 %148 = OpLoad %36 
                                       f32_3 %149 = OpVectorShuffle %148 %148 0 1 2 
                                       f32_3 %150 = OpFMul %147 %149 
                                       f32_4 %151 = OpLoad %36 
                                       f32_4 %152 = OpVectorShuffle %151 %150 4 5 6 3 
                                                      OpStore %36 %152 
                                       f32_3 %157 = OpLoad %156 
                              Uniform f32_4* %159 = OpAccessChain %24 %158 %45 
                                       f32_4 %160 = OpLoad %159 
                                       f32_3 %161 = OpVectorShuffle %160 %160 0 1 2 
                                         f32 %162 = OpDot %157 %161 
                                Private f32* %164 = OpAccessChain %154 %163 
                                                      OpStore %164 %162 
                                       f32_3 %165 = OpLoad %156 
                              Uniform f32_4* %166 = OpAccessChain %24 %158 %40 
                                       f32_4 %167 = OpLoad %166 
                                       f32_3 %168 = OpVectorShuffle %167 %167 0 1 2 
                                         f32 %169 = OpDot %165 %168 
                                Private f32* %170 = OpAccessChain %154 %114 
                                                      OpStore %170 %169 
                                       f32_3 %171 = OpLoad %156 
                              Uniform f32_4* %172 = OpAccessChain %24 %158 %53 
                                       f32_4 %173 = OpLoad %172 
                                       f32_3 %174 = OpVectorShuffle %173 %173 0 1 2 
                                         f32 %175 = OpDot %171 %174 
                                Private f32* %177 = OpAccessChain %154 %176 
                                                      OpStore %177 %175 
                                       f32_3 %178 = OpLoad %154 
                                       f32_3 %179 = OpLoad %154 
                                         f32 %180 = OpDot %178 %179 
                                                      OpStore %138 %180 
                                         f32 %181 = OpLoad %138 
                                         f32 %182 = OpExtInst %1 32 %181 
                                                      OpStore %138 %182 
                                         f32 %183 = OpLoad %138 
                                       f32_3 %184 = OpCompositeConstruct %183 %183 %183 
                                       f32_3 %185 = OpLoad %154 
                                       f32_3 %186 = OpFMul %184 %185 
                                                      OpStore %154 %186 
                                       f32_3 %187 = OpLoad %154 
                                       f32_4 %188 = OpLoad %36 
                                       f32_3 %189 = OpVectorShuffle %188 %188 0 1 2 
                                         f32 %190 = OpDot %187 %189 
                                                      OpStore %138 %190 
                              Uniform f32_4* %191 = OpAccessChain %24 %53 
                                       f32_4 %192 = OpLoad %191 
                                       f32_2 %193 = OpVectorShuffle %192 %192 1 1 
                              Uniform f32_4* %195 = OpAccessChain %24 %194 %40 
                                       f32_4 %196 = OpLoad %195 
                                       f32_2 %197 = OpVectorShuffle %196 %196 0 1 
                                       f32_2 %198 = OpFMul %193 %197 
                                       f32_4 %199 = OpLoad %36 
                                       f32_4 %200 = OpVectorShuffle %199 %198 4 5 2 3 
                                                      OpStore %36 %200 
                              Uniform f32_4* %201 = OpAccessChain %24 %194 %45 
                                       f32_4 %202 = OpLoad %201 
                                       f32_2 %203 = OpVectorShuffle %202 %202 0 1 
                              Uniform f32_4* %204 = OpAccessChain %24 %53 
                                       f32_4 %205 = OpLoad %204 
                                       f32_2 %206 = OpVectorShuffle %205 %205 0 0 
                                       f32_2 %207 = OpFMul %203 %206 
                                       f32_4 %208 = OpLoad %36 
                                       f32_2 %209 = OpVectorShuffle %208 %208 0 1 
                                       f32_2 %210 = OpFAdd %207 %209 
                                       f32_4 %211 = OpLoad %36 
                                       f32_4 %212 = OpVectorShuffle %211 %210 4 5 2 3 
                                                      OpStore %36 %212 
                                       f32_4 %213 = OpLoad %36 
                                       f32_2 %214 = OpVectorShuffle %213 %213 0 1 
                                       f32_2 %215 = OpExtInst %1 4 %214 
                                Uniform f32* %217 = OpAccessChain %24 %216 
                                         f32 %218 = OpLoad %217 
                                Uniform f32* %220 = OpAccessChain %24 %219 
                                         f32 %221 = OpLoad %220 
                                       f32_2 %222 = OpCompositeConstruct %218 %221 
                                       f32_2 %223 = OpFMul %215 %222 
                                       f32_4 %224 = OpLoad %36 
                                       f32_4 %225 = OpVectorShuffle %224 %223 4 5 2 3 
                                                      OpStore %36 %225 
                                       f32_4 %226 = OpLoad %61 
                                       f32_2 %227 = OpVectorShuffle %226 %226 3 3 
                                       f32_4 %228 = OpLoad %36 
                                       f32_2 %229 = OpVectorShuffle %228 %228 0 1 
                                       f32_2 %230 = OpFDiv %227 %229 
                                       f32_4 %231 = OpLoad %36 
                                       f32_4 %232 = OpVectorShuffle %231 %230 4 5 2 3 
                                                      OpStore %36 %232 
                                Private f32* %234 = OpAccessChain %61 %176 
                                         f32 %235 = OpLoad %234 
                                Uniform f32* %236 = OpAccessChain %24 %40 %114 
                                         f32 %237 = OpLoad %236 
                                         f32 %238 = OpFDiv %235 %237 
                                                      OpStore %233 %238 
                                         f32 %239 = OpLoad %233 
                                         f32 %240 = OpFNegate %239 
                                         f32 %242 = OpFAdd %240 %241 
                                                      OpStore %233 %242 
                                         f32 %243 = OpLoad %233 
                                Uniform f32* %244 = OpAccessChain %24 %40 %176 
                                         f32 %245 = OpLoad %244 
                                         f32 %246 = OpFMul %243 %245 
                                                      OpStore %233 %246 
                                         f32 %247 = OpLoad %233 
                                         f32 %249 = OpExtInst %1 40 %247 %248 
                                                      OpStore %233 %249 
                                         f32 %252 = OpLoad %233 
                                Uniform f32* %254 = OpAccessChain %24 %253 %176 
                                         f32 %255 = OpLoad %254 
                                         f32 %256 = OpFMul %252 %255 
                                Uniform f32* %258 = OpAccessChain %24 %253 %257 
                                         f32 %259 = OpLoad %258 
                                         f32 %260 = OpFAdd %256 %259 
                                                      OpStore vs_TEXCOORDn0 %260 
                                       f32_4 %261 = OpLoad %36 
                                       f32_2 %262 = OpVectorShuffle %261 %261 0 1 
                                       f32_4 %263 = OpLoad %36 
                                       f32_2 %264 = OpVectorShuffle %263 %263 0 1 
                                         f32 %265 = OpDot %262 %264 
                                                      OpStore %233 %265 
                                Uniform f32* %267 = OpAccessChain %24 %266 
                                         f32 %268 = OpLoad %267 
                                Uniform f32* %270 = OpAccessChain %24 %269 
                                         f32 %271 = OpLoad %270 
                                       f32_2 %272 = OpCompositeConstruct %268 %271 
                                       f32_2 %275 = OpFMul %272 %274 
                                       f32_4 %276 = OpLoad %36 
                                       f32_2 %277 = OpVectorShuffle %276 %276 0 1 
                                       f32_2 %278 = OpFAdd %275 %277 
                                       f32_4 %279 = OpLoad %36 
                                       f32_4 %280 = OpVectorShuffle %279 %278 4 5 2 3 
                                                      OpStore %36 %280 
                                       f32_4 %282 = OpLoad %36 
                                       f32_2 %283 = OpVectorShuffle %282 %282 0 1 
                                       f32_2 %284 = OpFDiv %274 %283 
                                       f32_4 %285 = OpLoad vs_TEXCOORD2 
                                       f32_4 %286 = OpVectorShuffle %285 %284 0 1 4 5 
                                                      OpStore vs_TEXCOORD2 %286 
                                         f32 %287 = OpLoad %233 
                                         f32 %288 = OpExtInst %1 32 %287 
                                                      OpStore %233 %288 
                                  Input f32* %292 = OpAccessChain %290 %114 
                                         f32 %293 = OpLoad %292 
                                         f32 %294 = OpExtInst %1 4 %293 
                                Uniform f32* %296 = OpAccessChain %24 %295 
                                         f32 %297 = OpLoad %296 
                                         f32 %298 = OpFMul %294 %297 
                                Private f32* %299 = OpAccessChain %36 %163 
                                                      OpStore %299 %298 
                                Uniform f32* %302 = OpAccessChain %24 %301 
                                         f32 %303 = OpLoad %302 
                                         f32 %304 = OpFAdd %303 %241 
                                Private f32* %305 = OpAccessChain %300 %163 
                                                      OpStore %305 %304 
                                Private f32* %306 = OpAccessChain %300 %163 
                                         f32 %307 = OpLoad %306 
                                Private f32* %308 = OpAccessChain %36 %163 
                                         f32 %309 = OpLoad %308 
                                         f32 %310 = OpFMul %307 %309 
                                Private f32* %311 = OpAccessChain %36 %163 
                                                      OpStore %311 %310 
                                         f32 %312 = OpLoad %233 
                                Private f32* %313 = OpAccessChain %36 %163 
                                         f32 %314 = OpLoad %313 
                                         f32 %315 = OpFMul %312 %314 
                                Private f32* %316 = OpAccessChain %300 %163 
                                                      OpStore %316 %315 
                                Uniform f32* %319 = OpAccessChain %24 %318 
                                         f32 %320 = OpLoad %319 
                                         f32 %321 = OpFNegate %320 
                                         f32 %322 = OpFAdd %321 %241 
                                                      OpStore %317 %322 
                                         f32 %323 = OpLoad %317 
                                Private f32* %324 = OpAccessChain %300 %163 
                                         f32 %325 = OpLoad %324 
                                         f32 %326 = OpExtInst %1 4 %325 
                                         f32 %327 = OpFMul %323 %326 
                                                      OpStore %317 %327 
                                         f32 %328 = OpLoad %233 
                                Private f32* %329 = OpAccessChain %36 %163 
                                         f32 %330 = OpLoad %329 
                                         f32 %331 = OpFMul %328 %330 
                                         f32 %332 = OpLoad %317 
                                         f32 %333 = OpFNegate %332 
                                         f32 %334 = OpFAdd %331 %333 
                                                      OpStore %233 %334 
                                         f32 %335 = OpLoad %138 
                                         f32 %336 = OpExtInst %1 4 %335 
                                         f32 %337 = OpLoad %233 
                                         f32 %338 = OpFMul %336 %337 
                                         f32 %339 = OpLoad %317 
                                         f32 %340 = OpFAdd %338 %339 
                                                      OpStore %138 %340 
                                Uniform f32* %344 = OpAccessChain %24 %194 %39 %257 
                                         f32 %345 = OpLoad %344 
                                        bool %346 = OpFOrdEqual %345 %248 
                                                      OpStore %343 %346 
                                        bool %347 = OpLoad %343 
                                                      OpSelectionMerge %351 None 
                                                      OpBranchConditional %347 %350 %353 
                                             %350 = OpLabel 
                                         f32 %352 = OpLoad %138 
                                                      OpStore %349 %352 
                                                      OpBranch %351 
                                             %353 = OpLabel 
                                Private f32* %354 = OpAccessChain %300 %163 
                                         f32 %355 = OpLoad %354 
                                                      OpStore %349 %355 
                                                      OpBranch %351 
                                             %351 = OpLabel 
                                         f32 %356 = OpLoad %349 
                                                      OpStore %138 %356 
                                Uniform f32* %358 = OpAccessChain %24 %357 
                                         f32 %359 = OpLoad %358 
                                Uniform f32* %361 = OpAccessChain %24 %360 
                                         f32 %362 = OpLoad %361 
                                         f32 %363 = OpFMul %359 %362 
                                                      OpStore %233 %363 
                                         f32 %364 = OpLoad %233 
                                         f32 %365 = OpLoad %138 
                                         f32 %366 = OpFMul %364 %365 
                                         f32 %367 = OpFAdd %366 %241 
                                                      OpStore %233 %367 
                                         f32 %368 = OpLoad %138 
                                         f32 %369 = OpLoad %233 
                                         f32 %370 = OpFDiv %368 %369 
                                Private f32* %371 = OpAccessChain %36 %163 
                                                      OpStore %371 %370 
                                Uniform f32* %373 = OpAccessChain %24 %372 
                                         f32 %374 = OpLoad %373 
                                Uniform f32* %375 = OpAccessChain %24 %360 
                                         f32 %376 = OpLoad %375 
                                         f32 %377 = OpFMul %374 %376 
                                                      OpStore %138 %377 
                                Private f32* %378 = OpAccessChain %36 %163 
                                         f32 %379 = OpLoad %378 
                                         f32 %380 = OpLoad %138 
                                         f32 %381 = OpFMul %379 %380 
                                                      OpStore %138 %381 
                                         f32 %382 = OpLoad %138 
                                         f32 %383 = OpExtInst %1 37 %382 %241 
                                                      OpStore %233 %383 
                                         f32 %384 = OpLoad %233 
                                         f32 %385 = OpExtInst %1 31 %384 
                                                      OpStore %233 %385 
                                  Input f32* %386 = OpAccessChain %122 %257 
                                         f32 %387 = OpLoad %386 
                                Uniform f32* %389 = OpAccessChain %24 %388 %257 
                                         f32 %390 = OpLoad %389 
                                         f32 %391 = OpFMul %387 %390 
                                Private f32* %392 = OpAccessChain %61 %257 
                                                      OpStore %392 %391 
                                       f32_4 %393 = OpLoad %61 
                                       f32_3 %394 = OpVectorShuffle %393 %393 3 3 3 
                              Uniform f32_4* %395 = OpAccessChain %24 %388 
                                       f32_4 %396 = OpLoad %395 
                                       f32_3 %397 = OpVectorShuffle %396 %396 0 1 2 
                                       f32_3 %398 = OpFMul %394 %397 
                                       f32_4 %399 = OpLoad %61 
                                       f32_4 %400 = OpVectorShuffle %399 %398 4 5 6 3 
                                                      OpStore %61 %400 
                                       f32_4 %401 = OpLoad %86 
                                       f32_4 %402 = OpFNegate %401 
                                       f32_4 %403 = OpLoad %61 
                                       f32_4 %404 = OpFAdd %402 %403 
                                                      OpStore %61 %404 
                                         f32 %406 = OpLoad %233 
                                       f32_4 %407 = OpCompositeConstruct %406 %406 %406 %406 
                                       f32_4 %408 = OpLoad %61 
                                       f32_4 %409 = OpFMul %407 %408 
                                       f32_4 %410 = OpLoad %86 
                                       f32_4 %411 = OpFAdd %409 %410 
                                                      OpStore %405 %411 
                              Uniform f32_4* %413 = OpAccessChain %24 %412 
                                       f32_4 %414 = OpLoad %413 
                                       f32_4 %417 = OpExtInst %1 40 %414 %416 
                                                      OpStore %61 %417 
                                       f32_4 %418 = OpLoad %61 
                                       f32_4 %421 = OpExtInst %1 37 %418 %420 
                                                      OpStore %61 %421 
                                       f32_2 %422 = OpLoad %9 
                                       f32_4 %423 = OpLoad %61 
                                       f32_2 %424 = OpVectorShuffle %423 %423 0 1 
                                       f32_2 %425 = OpFNegate %424 
                                       f32_2 %426 = OpFAdd %422 %425 
                                                      OpStore %300 %426 
                                       f32_2 %427 = OpLoad %9 
                                       f32_2 %430 = OpFMul %427 %429 
                                       f32_4 %431 = OpLoad %61 
                                       f32_2 %432 = OpVectorShuffle %431 %431 0 1 
                                       f32_2 %433 = OpFNegate %432 
                                       f32_2 %434 = OpFAdd %430 %433 
                                                      OpStore %9 %434 
                                       f32_4 %435 = OpLoad %61 
                                       f32_2 %436 = OpVectorShuffle %435 %435 2 3 
                                       f32_2 %437 = OpFNegate %436 
                                       f32_2 %438 = OpLoad %9 
                                       f32_2 %439 = OpFAdd %437 %438 
                                       f32_4 %440 = OpLoad vs_TEXCOORD2 
                                       f32_4 %441 = OpVectorShuffle %440 %439 4 5 2 3 
                                                      OpStore vs_TEXCOORD2 %441 
                                       f32_4 %442 = OpLoad %61 
                                       f32_2 %443 = OpVectorShuffle %442 %442 0 1 
                                       f32_2 %444 = OpFNegate %443 
                                       f32_4 %445 = OpLoad %61 
                                       f32_2 %446 = OpVectorShuffle %445 %445 2 3 
                                       f32_2 %447 = OpFAdd %444 %446 
                                                      OpStore %9 %447 
                                       f32_2 %449 = OpLoad %300 
                                       f32_2 %450 = OpLoad %9 
                                       f32_2 %451 = OpFDiv %449 %450 
                                       f32_4 %452 = OpLoad vs_TEXCOORD0 
                                       f32_4 %453 = OpVectorShuffle %452 %451 0 1 4 5 
                                                      OpStore vs_TEXCOORD0 %453 
                                       f32_2 %455 = OpLoad %454 
                                       f32_4 %456 = OpLoad vs_TEXCOORD0 
                                       f32_4 %457 = OpVectorShuffle %456 %455 4 5 2 3 
                                                      OpStore vs_TEXCOORD0 %457 
                                  Input f32* %459 = OpAccessChain %290 %114 
                                         f32 %460 = OpLoad %459 
                                        bool %461 = OpFOrdGreaterThanEqual %248 %460 
                                                      OpStore %458 %461 
                                        bool %462 = OpLoad %458 
                                         f32 %463 = OpSelect %462 %241 %248 
                                Private f32* %464 = OpAccessChain %9 %163 
                                                      OpStore %464 %463 
                                Uniform f32* %467 = OpAccessChain %24 %466 
                                         f32 %468 = OpLoad %467 
                                         f32 %469 = OpFNegate %468 
                                Uniform f32* %471 = OpAccessChain %24 %470 
                                         f32 %472 = OpLoad %471 
                                         f32 %473 = OpFAdd %469 %472 
                                                      OpStore %465 %473 
                                Private f32* %474 = OpAccessChain %9 %163 
                                         f32 %475 = OpLoad %474 
                                         f32 %476 = OpLoad %465 
                                         f32 %477 = OpFMul %475 %476 
                                Uniform f32* %478 = OpAccessChain %24 %466 
                                         f32 %479 = OpLoad %478 
                                         f32 %480 = OpFAdd %477 %479 
                                Private f32* %481 = OpAccessChain %9 %163 
                                                      OpStore %481 %480 
                                Private f32* %482 = OpAccessChain %9 %163 
                                         f32 %483 = OpLoad %482 
                                         f32 %484 = OpFMul %483 %273 
                                Uniform f32* %486 = OpAccessChain %24 %485 
                                         f32 %487 = OpLoad %486 
                                         f32 %488 = OpFAdd %484 %487 
                                Private f32* %489 = OpAccessChain %9 %163 
                                                      OpStore %489 %488 
                                Private f32* %490 = OpAccessChain %9 %163 
                                         f32 %491 = OpLoad %490 
                                Uniform f32* %492 = OpAccessChain %24 %360 
                                         f32 %493 = OpLoad %492 
                                         f32 %494 = OpFMul %491 %493 
                                Private f32* %495 = OpAccessChain %9 %163 
                                                      OpStore %495 %494 
                                Private f32* %496 = OpAccessChain %9 %163 
                                         f32 %497 = OpLoad %496 
                                         f32 %498 = OpFNegate %497 
                                         f32 %500 = OpFMul %498 %499 
                                         f32 %501 = OpFAdd %500 %499 
                                Private f32* %502 = OpAccessChain %9 %163 
                                                      OpStore %502 %501 
                                Private f32* %503 = OpAccessChain %9 %163 
                                         f32 %504 = OpLoad %503 
                                Private f32* %505 = OpAccessChain %36 %163 
                                         f32 %506 = OpLoad %505 
                                         f32 %507 = OpFMul %504 %506 
                                         f32 %509 = OpFAdd %507 %508 
                                Private f32* %510 = OpAccessChain %36 %257 
                                                      OpStore %510 %509 
                                       f32_4 %512 = OpLoad %36 
                                       f32_2 %513 = OpVectorShuffle %512 %512 0 3 
                                       f32_4 %514 = OpLoad vs_TEXCOORD1 
                                       f32_4 %515 = OpVectorShuffle %514 %513 4 1 2 5 
                                                      OpStore vs_TEXCOORD1 %515 
                                         f32 %516 = OpLoad %138 
                                         f32 %517 = OpFNegate %516 
                                         f32 %518 = OpFMul %517 %499 
                                Private f32* %519 = OpAccessChain %36 %257 
                                         f32 %520 = OpLoad %519 
                                         f32 %521 = OpFAdd %518 %520 
                                 Output f32* %522 = OpAccessChain vs_TEXCOORD1 %114 
                                                      OpStore %522 %521 
                                         f32 %523 = OpLoad %138 
                                         f32 %524 = OpFMul %523 %499 
                                Private f32* %525 = OpAccessChain %36 %257 
                                         f32 %526 = OpLoad %525 
                                         f32 %527 = OpFAdd %524 %526 
                                 Output f32* %528 = OpAccessChain vs_TEXCOORD1 %176 
                                                      OpStore %528 %527 
                                 Output f32* %529 = OpAccessChain %118 %45 %114 
                                         f32 %530 = OpLoad %529 
                                         f32 %531 = OpFNegate %530 
                                 Output f32* %532 = OpAccessChain %118 %45 %114 
                                                      OpStore %532 %531 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 112
; Schema: 0
                                             OpCapability Shader 
                                      %1 = OpExtInstImport "GLSL.std.450" 
                                             OpMemoryModel Logical GLSL450 
                                             OpEntryPoint Fragment %4 "main" %10 %20 %22 %39 %50 %95 
                                             OpExecutionMode %4 OriginUpperLeft 
                                             OpName vs_TEXCOORDn0 "vs_TEXCOORDn0" 
                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                             OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                             OpDecorate vs_TEXCOORDn0 Location 10 
                                             OpDecorate %20 Location 20 
                                             OpDecorate %22 Location 22 
                                             OpDecorate %31 DescriptorSet 31 
                                             OpDecorate %31 Binding 31 
                                             OpDecorate %35 DescriptorSet 35 
                                             OpDecorate %35 Binding 35 
                                             OpDecorate vs_TEXCOORD0 Location 39 
                                             OpDecorate vs_TEXCOORD1 Location 50 
                                             OpMemberDecorate %74 0 Offset 74 
                                             OpDecorate %74 Block 
                                             OpDecorate %76 DescriptorSet 76 
                                             OpDecorate %76 Binding 76 
                                             OpDecorate %95 Location 95 
                                      %2 = OpTypeVoid 
                                      %3 = OpTypeFunction %2 
                                      %6 = OpTypeFloat 32 
                                      %7 = OpTypePointer Private %6 
                         Private f32* %8 = OpVariable Private 
                                      %9 = OpTypePointer Input %6 
                Input f32* vs_TEXCOORDn0 = OpVariable Input 
                                 f32 %13 = OpConstant 3.674022E-40 
                                 f32 %14 = OpConstant 3.674022E-40 
                                     %16 = OpTypeVector %6 4 
                                     %17 = OpTypePointer Private %16 
                      Private f32_4* %18 = OpVariable Private 
                                     %19 = OpTypePointer Input %16 
                        Input f32_4* %20 = OpVariable Input 
                        Input f32_4* %22 = OpVariable Input 
                                     %26 = OpTypeVector %6 2 
                                     %27 = OpTypePointer Private %26 
                      Private f32_2* %28 = OpVariable Private 
                                     %29 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                     %30 = OpTypePointer UniformConstant %29 
UniformConstant read_only Texture2D* %31 = OpVariable UniformConstant 
                                     %33 = OpTypeSampler 
                                     %34 = OpTypePointer UniformConstant %33 
            UniformConstant sampler* %35 = OpVariable UniformConstant 
                                     %37 = OpTypeSampledImage %29 
               Input f32_4* vs_TEXCOORD0 = OpVariable Input 
                                     %43 = OpTypeInt 32 0 
                                 u32 %44 = OpConstant 3 
                                 u32 %46 = OpConstant 0 
               Input f32_4* vs_TEXCOORD1 = OpVariable Input 
                                     %68 = OpTypeVector %6 3 
                                     %74 = OpTypeStruct %16 
                                     %75 = OpTypePointer Uniform %74 
            Uniform struct {f32_4;}* %76 = OpVariable Uniform 
                                     %77 = OpTypeInt 32 1 
                                 i32 %78 = OpConstant 0 
                                     %79 = OpTypePointer Uniform %16 
                                 u32 %87 = OpConstant 1 
                                     %94 = OpTypePointer Output %16 
                       Output f32_4* %95 = OpVariable Output 
                                     %98 = OpTypePointer Output %6 
                                 void %4 = OpFunction None %3 
                                      %5 = OpLabel 
                                 f32 %11 = OpLoad vs_TEXCOORDn0 
                                             OpStore %8 %11 
                                 f32 %12 = OpLoad %8 
                                 f32 %15 = OpExtInst %1 43 %12 %13 %14 
                                             OpStore %8 %15 
                               f32_4 %21 = OpLoad %20 
                               f32_4 %23 = OpLoad %22 
                               f32_4 %24 = OpFNegate %23 
                               f32_4 %25 = OpFAdd %21 %24 
                                             OpStore %18 %25 
                 read_only Texture2D %32 = OpLoad %31 
                             sampler %36 = OpLoad %35 
          read_only Texture2DSampled %38 = OpSampledImage %32 %36 
                               f32_4 %40 = OpLoad vs_TEXCOORD0 
                               f32_2 %41 = OpVectorShuffle %40 %40 0 1 
                               f32_4 %42 = OpImageSampleImplicitLod %38 %41 
                                 f32 %45 = OpCompositeExtract %42 3 
                        Private f32* %47 = OpAccessChain %28 %46 
                                             OpStore %47 %45 
                               f32_2 %48 = OpLoad %28 
                               f32_2 %49 = OpVectorShuffle %48 %48 0 0 
                               f32_4 %51 = OpLoad vs_TEXCOORD1 
                               f32_2 %52 = OpVectorShuffle %51 %51 0 0 
                               f32_2 %53 = OpFMul %49 %52 
                               f32_4 %54 = OpLoad vs_TEXCOORD1 
                               f32_2 %55 = OpVectorShuffle %54 %54 2 1 
                               f32_2 %56 = OpFNegate %55 
                               f32_2 %57 = OpFAdd %53 %56 
                                             OpStore %28 %57 
                               f32_2 %58 = OpLoad %28 
                               f32_2 %59 = OpCompositeConstruct %13 %13 
                               f32_2 %60 = OpCompositeConstruct %14 %14 
                               f32_2 %61 = OpExtInst %1 43 %58 %59 %60 
                                             OpStore %28 %61 
                               f32_2 %62 = OpLoad %28 
                               f32_4 %63 = OpVectorShuffle %62 %62 0 0 0 0 
                               f32_4 %64 = OpLoad %18 
                               f32_4 %65 = OpFMul %63 %64 
                               f32_4 %66 = OpLoad %22 
                               f32_4 %67 = OpFAdd %65 %66 
                                             OpStore %18 %67 
                               f32_4 %69 = OpLoad %18 
                               f32_3 %70 = OpVectorShuffle %69 %69 0 1 2 
                               f32_2 %71 = OpLoad %28 
                               f32_3 %72 = OpVectorShuffle %71 %71 1 1 1 
                               f32_3 %73 = OpFMul %70 %72 
                      Uniform f32_4* %80 = OpAccessChain %76 %78 
                               f32_4 %81 = OpLoad %80 
                               f32_3 %82 = OpVectorShuffle %81 %81 0 1 2 
                               f32_3 %83 = OpFNegate %82 
                               f32_3 %84 = OpFAdd %73 %83 
                               f32_4 %85 = OpLoad %18 
                               f32_4 %86 = OpVectorShuffle %85 %84 4 5 6 3 
                                             OpStore %18 %86 
                        Private f32* %88 = OpAccessChain %28 %87 
                                 f32 %89 = OpLoad %88 
                        Private f32* %90 = OpAccessChain %18 %44 
                                 f32 %91 = OpLoad %90 
                                 f32 %92 = OpFMul %89 %91 
                        Private f32* %93 = OpAccessChain %28 %46 
                                             OpStore %93 %92 
                        Private f32* %96 = OpAccessChain %28 %46 
                                 f32 %97 = OpLoad %96 
                         Output f32* %99 = OpAccessChain %95 %44 
                                             OpStore %99 %97 
                                f32 %100 = OpLoad %8 
                              f32_3 %101 = OpCompositeConstruct %100 %100 %100 
                              f32_4 %102 = OpLoad %18 
                              f32_3 %103 = OpVectorShuffle %102 %102 0 1 2 
                              f32_3 %104 = OpFMul %101 %103 
                     Uniform f32_4* %105 = OpAccessChain %76 %78 
                              f32_4 %106 = OpLoad %105 
                              f32_3 %107 = OpVectorShuffle %106 %106 0 1 2 
                              f32_3 %108 = OpFAdd %104 %107 
                              f32_4 %109 = OpLoad %95 
                              f32_4 %110 = OpVectorShuffle %109 %108 4 5 6 3 
                                             OpStore %95 %110 
                                             OpReturn
                                             OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "FOG_LINEAR" "UNDERLAY_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "FOG_LINEAR" "UNDERLAY_ON" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	vec4 _FaceColor;
uniform 	float _FaceDilate;
uniform 	float _OutlineSoftness;
uniform 	vec4 _OutlineColor;
uniform 	float _OutlineWidth;
uniform 	float _UnderlayOffsetX;
uniform 	float _UnderlayOffsetY;
uniform 	float _UnderlayDilate;
uniform 	float _UnderlaySoftness;
uniform 	float _WeightNormal;
uniform 	float _WeightBold;
uniform 	float _ScaleRatioA;
uniform 	float _ScaleRatioC;
uniform 	float _VertexOffsetX;
uniform 	float _VertexOffsetY;
uniform 	vec4 _ClipRect;
uniform 	float _MaskSoftnessX;
uniform 	float _MaskSoftnessY;
uniform 	float _TextureWidth;
uniform 	float _TextureHeight;
uniform 	float _GradientScale;
uniform 	float _ScaleX;
uniform 	float _ScaleY;
uniform 	float _PerspectiveFilter;
uniform 	float _Sharpness;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_COLOR0;
in  vec2 in_TEXCOORD0;
in  vec2 in_TEXCOORD1;
out vec4 vs_COLOR0;
out vec4 vs_COLOR1;
out vec4 vs_TEXCOORD0;
out vec4 vs_TEXCOORD1;
out vec4 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec2 vs_TEXCOORD4;
out float vs_TEXCOORDn0;
vec2 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
vec4 u_xlat6;
vec3 u_xlat7;
vec2 u_xlat8;
float u_xlat14;
float u_xlat15;
float u_xlat21;
bool u_xlatb21;
void main()
{
    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
    gl_Position = u_xlat2;
    vs_COLOR0.w = _FaceColor.w;
    u_xlat3.xyz = in_COLOR0.xyz;
    u_xlat3.w = 1.0;
    u_xlat4 = u_xlat3 * _FaceColor;
    u_xlat3.xyz = u_xlat4.www * u_xlat4.xyz;
    vs_COLOR0.xyz = u_xlat3.xyz;
    u_xlat5.xyz = (-u_xlat3.xyz);
    u_xlat5.w = (-u_xlat4.w);
    u_xlat6.xyz = _OutlineColor.www * _OutlineColor.xyz;
    u_xlat6.w = _OutlineColor.w;
    u_xlat5 = u_xlat5 + u_xlat6;
    u_xlat14 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat14 = inversesqrt(u_xlat14);
    u_xlat1.xyz = vec3(u_xlat14) * u_xlat1.xyz;
    u_xlat3.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat3.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat3.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat14 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat14 = inversesqrt(u_xlat14);
    u_xlat3.xyz = vec3(u_xlat14) * u_xlat3.xyz;
    u_xlat14 = dot(u_xlat3.xyz, u_xlat1.xyz);
    u_xlat1.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;
    u_xlat1.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat1.xy;
    u_xlat1.xy = abs(u_xlat1.xy) * vec2(_ScaleX, _ScaleY);
    u_xlat1.xy = u_xlat2.ww / u_xlat1.xy;
    vs_TEXCOORDn0 = u_xlat2.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat21 = dot(u_xlat1.xy, u_xlat1.xy);
    u_xlat1.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) * vec2(0.25, 0.25) + u_xlat1.xy;
    vs_TEXCOORD2.zw = vec2(0.25, 0.25) / u_xlat1.xy;
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.x = abs(in_TEXCOORD1.y) * _GradientScale;
    u_xlat8.x = _Sharpness + 1.0;
    u_xlat1.x = u_xlat8.x * u_xlat1.x;
    u_xlat8.x = u_xlat21 * u_xlat1.x;
    u_xlat15 = (-_PerspectiveFilter) + 1.0;
    u_xlat15 = u_xlat15 * abs(u_xlat8.x);
    u_xlat21 = u_xlat21 * u_xlat1.x + (-u_xlat15);
    u_xlat14 = abs(u_xlat14) * u_xlat21 + u_xlat15;
    u_xlatb21 = hlslcc_mtx4x4glstate_matrix_projection[3].w==0.0;
    u_xlat14 = (u_xlatb21) ? u_xlat14 : u_xlat8.x;
    u_xlat21 = _OutlineSoftness * _ScaleRatioA;
    u_xlat21 = u_xlat21 * u_xlat14 + 1.0;
    u_xlat1.x = u_xlat14 / u_xlat21;
    u_xlat21 = _OutlineWidth * _ScaleRatioA;
    u_xlat21 = u_xlat21 * 0.5;
    u_xlat8.x = u_xlat1.x * u_xlat21;
    u_xlat8.x = u_xlat8.x + u_xlat8.x;
    u_xlat8.x = min(u_xlat8.x, 1.0);
    u_xlat8.x = sqrt(u_xlat8.x);
    u_xlat2 = u_xlat5 * u_xlat8.xxxx;
    vs_COLOR1.xyz = u_xlat4.xyz * u_xlat4.www + u_xlat2.xyz;
    vs_COLOR1.w = u_xlat3.w * _FaceColor.w + u_xlat2.w;
    u_xlat2 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));
    u_xlat2 = min(u_xlat2, vec4(2e+10, 2e+10, 2e+10, 2e+10));
    u_xlat8.xy = u_xlat0.xy + (-u_xlat2.xy);
    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + (-u_xlat2.xy);
    vs_TEXCOORD2.xy = (-u_xlat2.zw) + u_xlat0.xy;
    u_xlat0.xy = (-u_xlat2.xy) + u_xlat2.zw;
    vs_TEXCOORD0.zw = u_xlat8.xy / u_xlat0.xy;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlatb0 = 0.0>=in_TEXCOORD1.y;
    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);
    u_xlat7.x = (-_WeightNormal) + _WeightBold;
    u_xlat0.x = u_xlat0.x * u_xlat7.x + _WeightNormal;
    u_xlat0.x = u_xlat0.x * 0.25 + _FaceDilate;
    u_xlat0.x = u_xlat0.x * _ScaleRatioA;
    u_xlat0.x = (-u_xlat0.x) * 0.5 + 0.5;
    u_xlat1.w = u_xlat0.x * u_xlat1.x + -0.5;
    vs_TEXCOORD1.y = (-u_xlat21) * u_xlat1.x + u_xlat1.w;
    vs_TEXCOORD1.z = u_xlat21 * u_xlat1.x + u_xlat1.w;
    vs_TEXCOORD1.xw = u_xlat1.xw;
    vs_TEXCOORD3.z = in_COLOR0.w;
    vs_TEXCOORD3.w = 0.0;
    u_xlat1 = vec4(_UnderlaySoftness, _UnderlayDilate, _UnderlayOffsetX, _UnderlayOffsetY) * vec4(vec4(_ScaleRatioC, _ScaleRatioC, _ScaleRatioC, _ScaleRatioC));
    u_xlat7.xz = (-u_xlat1.zw) * vec2(_GradientScale);
    u_xlat7.xz = u_xlat7.xz / vec2(_TextureWidth, _TextureHeight);
    vs_TEXCOORD3.xy = u_xlat7.xz + in_TEXCOORD0.xy;
    u_xlat7.x = u_xlat1.x * u_xlat14 + 1.0;
    u_xlat7.x = u_xlat14 / u_xlat7.x;
    u_xlat14 = u_xlat1.y * 0.5;
    u_xlat0.x = u_xlat0.x * u_xlat7.x + -0.5;
    vs_TEXCOORD4.y = (-u_xlat14) * u_xlat7.x + u_xlat0.x;
    vs_TEXCOORD4.x = u_xlat7.x;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 unity_FogColor;
uniform 	vec4 _UnderlayColor;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
in  vec4 vs_COLOR0;
in  vec4 vs_TEXCOORD0;
in  vec4 vs_TEXCOORD1;
in  vec4 vs_TEXCOORD3;
in  vec2 vs_TEXCOORD4;
in  float vs_TEXCOORDn0;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat9;
void main()
{
    u_xlat0 = texture(_MainTex, vs_TEXCOORD3.xy);
    u_xlat0.x = u_xlat0.w * vs_TEXCOORD4.x + (-vs_TEXCOORD4.y);
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat1.xyz = _UnderlayColor.www * _UnderlayColor.xyz;
    u_xlat1.w = _UnderlayColor.w;
    u_xlat0 = u_xlat0.xxxx * u_xlat1;
    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1.x = u_xlat1.w * vs_TEXCOORD1.x + (-vs_TEXCOORD1.w);
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat2 = u_xlat1.xxxx * vs_COLOR0;
    u_xlat1.x = (-vs_COLOR0.w) * u_xlat1.x + 1.0;
    u_xlat0 = u_xlat0 * u_xlat1.xxxx + u_xlat2;
    u_xlat0.xyz = u_xlat0.xyz * vs_TEXCOORD3.zzz + (-unity_FogColor.xyz);
    u_xlat9 = u_xlat0.w * vs_TEXCOORD3.z;
    SV_Target0.w = u_xlat9;
    u_xlat9 = vs_TEXCOORDn0;
    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
    SV_Target0.xyz = vec3(u_xlat9) * u_xlat0.xyz + unity_FogColor.xyz;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "FOG_LINEAR" "UNDERLAY_ON" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 677
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %12 %118 %122 %129 %196 %295 %324 %333 %436 %492 %498 %558 %576 %661 
                                                      OpName vs_TEXCOORDn0 "vs_TEXCOORDn0" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpDecorate %12 Location 12 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpDecorate %19 ArrayStride 19 
                                                      OpDecorate %20 ArrayStride 20 
                                                      OpDecorate %21 ArrayStride 21 
                                                      OpMemberDecorate %22 0 Offset 22 
                                                      OpMemberDecorate %22 1 Offset 22 
                                                      OpMemberDecorate %22 2 Offset 22 
                                                      OpMemberDecorate %22 3 Offset 22 
                                                      OpMemberDecorate %22 4 Offset 22 
                                                      OpMemberDecorate %22 5 Offset 22 
                                                      OpMemberDecorate %22 6 Offset 22 
                                                      OpMemberDecorate %22 7 Offset 22 
                                                      OpMemberDecorate %22 8 Offset 22 
                                                      OpMemberDecorate %22 9 Offset 22 
                                                      OpMemberDecorate %22 10 Offset 22 
                                                      OpMemberDecorate %22 11 Offset 22 
                                                      OpMemberDecorate %22 12 Offset 22 
                                                      OpMemberDecorate %22 13 Offset 22 
                                                      OpMemberDecorate %22 14 Offset 22 
                                                      OpMemberDecorate %22 15 Offset 22 
                                                      OpMemberDecorate %22 16 Offset 22 
                                                      OpMemberDecorate %22 17 Offset 22 
                                                      OpMemberDecorate %22 18 Offset 22 
                                                      OpMemberDecorate %22 19 Offset 22 
                                                      OpMemberDecorate %22 20 Offset 22 
                                                      OpMemberDecorate %22 21 Offset 22 
                                                      OpMemberDecorate %22 22 Offset 22 
                                                      OpMemberDecorate %22 23 Offset 22 
                                                      OpMemberDecorate %22 24 Offset 22 
                                                      OpMemberDecorate %22 25 Offset 22 
                                                      OpMemberDecorate %22 26 Offset 22 
                                                      OpMemberDecorate %22 27 Offset 22 
                                                      OpMemberDecorate %22 28 Offset 22 
                                                      OpMemberDecorate %22 29 Offset 22 
                                                      OpMemberDecorate %22 30 Offset 22 
                                                      OpMemberDecorate %22 31 Offset 22 
                                                      OpMemberDecorate %22 32 Offset 22 
                                                      OpDecorate %22 Block 
                                                      OpDecorate %24 DescriptorSet 24 
                                                      OpDecorate %24 Binding 24 
                                                      OpMemberDecorate %116 0 BuiltIn 116 
                                                      OpMemberDecorate %116 1 BuiltIn 116 
                                                      OpMemberDecorate %116 2 BuiltIn 116 
                                                      OpDecorate %116 Block 
                                                      OpDecorate %122 Location 122 
                                                      OpDecorate %129 Location 129 
                                                      OpDecorate %196 Location 196 
                                                      OpDecorate vs_TEXCOORDn0 Location 295 
                                                      OpDecorate vs_TEXCOORD2 Location 324 
                                                      OpDecorate %333 Location 333 
                                                      OpDecorate %436 Location 436 
                                                      OpDecorate vs_TEXCOORD0 Location 492 
                                                      OpDecorate %498 Location 498 
                                                      OpDecorate vs_TEXCOORD1 Location 558 
                                                      OpDecorate vs_TEXCOORD3 Location 576 
                                                      OpDecorate vs_TEXCOORD4 Location 661 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 2 
                                               %8 = OpTypePointer Private %7 
                                Private f32_2* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 4 
                                              %11 = OpTypePointer Input %10 
                                 Input f32_4* %12 = OpVariable Input 
                                              %15 = OpTypeVector %6 3 
                                              %16 = OpTypeInt 32 0 
                                          u32 %17 = OpConstant 4 
                                              %18 = OpTypeArray %10 %17 
                                              %19 = OpTypeArray %10 %17 
                                              %20 = OpTypeArray %10 %17 
                                              %21 = OpTypeArray %10 %17 
                                              %22 = OpTypeStruct %15 %10 %10 %18 %19 %20 %21 %10 %10 %6 %6 %10 %6 %6 %6 %6 %6 %6 %6 %6 %6 %6 %6 %10 %6 %6 %6 %6 %6 %6 %6 %6 %6 
                                              %23 = OpTypePointer Uniform %22 
Uniform struct {f32_3; f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4[4]; f32_4; f32_4; f32; f32; f32_4; f32; f32; f32; f32; f32; f32; f32; f32; f32; f32; f32; f32_4; f32; f32; f32; f32; f32; f32; f32; f32; f32;}* %24 = OpVariable Uniform 
                                              %25 = OpTypeInt 32 1 
                                          i32 %26 = OpConstant 21 
                                              %27 = OpTypePointer Uniform %6 
                                          i32 %30 = OpConstant 22 
                                              %35 = OpTypePointer Private %10 
                               Private f32_4* %36 = OpVariable Private 
                                          i32 %39 = OpConstant 3 
                                          i32 %40 = OpConstant 1 
                                              %41 = OpTypePointer Uniform %10 
                                          i32 %45 = OpConstant 0 
                                          i32 %53 = OpConstant 2 
                               Private f32_4* %61 = OpVariable Private 
                                              %80 = OpTypePointer Uniform %15 
                               Private f32_4* %86 = OpVariable Private 
                                          i32 %89 = OpConstant 6 
                                         u32 %114 = OpConstant 1 
                                             %115 = OpTypeArray %6 %114 
                                             %116 = OpTypeStruct %10 %6 %115 
                                             %117 = OpTypePointer Output %116 
        Output struct {f32_4; f32; f32[1];}* %118 = OpVariable Output 
                                             %120 = OpTypePointer Output %10 
                               Output f32_4* %122 = OpVariable Output 
                                         i32 %123 = OpConstant 8 
                                         u32 %124 = OpConstant 3 
                                             %127 = OpTypePointer Output %6 
                                Input f32_4* %129 = OpVariable Input 
                                         f32 %134 = OpConstant 3.674022E-40 
                                             %135 = OpTypePointer Private %6 
                              Private f32_4* %137 = OpVariable Private 
                              Private f32_4* %153 = OpVariable Private 
                              Private f32_4* %163 = OpVariable Private 
                                         i32 %164 = OpConstant 11 
                                Private f32* %180 = OpVariable Private 
                                             %195 = OpTypePointer Input %15 
                                Input f32_3* %196 = OpVariable Input 
                                         i32 %198 = OpConstant 4 
                                         u32 %203 = OpConstant 0 
                                         u32 %216 = OpConstant 2 
                                         i32 %240 = OpConstant 5 
                                         i32 %262 = OpConstant 29 
                                         i32 %265 = OpConstant 30 
                                Private f32* %279 = OpVariable Private 
                                         f32 %293 = OpConstant 3.674022E-40 
                        Output f32* vs_TEXCOORDn0 = OpVariable Output 
                                         i32 %297 = OpConstant 7 
                                         i32 %309 = OpConstant 24 
                                         i32 %312 = OpConstant 25 
                                         f32 %316 = OpConstant 3.674022E-40 
                                       f32_2 %317 = OpConstantComposite %316 %316 
                       Output f32_4* vs_TEXCOORD2 = OpVariable Output 
                                             %332 = OpTypePointer Input %7 
                                Input f32_2* %333 = OpVariable Input 
                                             %334 = OpTypePointer Input %6 
                                         i32 %338 = OpConstant 28 
                              Private f32_2* %343 = OpVariable Private 
                                         i32 %344 = OpConstant 32 
                                Private f32* %360 = OpVariable Private 
                                         i32 %361 = OpConstant 31 
                                             %384 = OpTypeBool 
                                             %385 = OpTypePointer Private %384 
                               Private bool* %386 = OpVariable Private 
                                             %391 = OpTypePointer Function %6 
                                         i32 %400 = OpConstant 10 
                                         i32 %403 = OpConstant 19 
                                         i32 %415 = OpConstant 12 
                               Output f32_4* %436 = OpVariable Output 
                                         i32 %456 = OpConstant 23 
                                         f32 %459 = OpConstant 3.674022E-40 
                                       f32_4 %460 = OpConstantComposite %459 %459 %459 %459 
                                         f32 %463 = OpConstant 3.674022E-40 
                                       f32_4 %464 = OpConstantComposite %463 %463 %463 %463 
                                         f32 %472 = OpConstant 3.674022E-40 
                                       f32_2 %473 = OpConstantComposite %472 %472 
                       Output f32_4* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_2* %498 = OpVariable Input 
                               Private bool* %502 = OpVariable Private 
                                             %509 = OpTypePointer Private %15 
                              Private f32_3* %510 = OpVariable Private 
                                         i32 %511 = OpConstant 17 
                                         i32 %515 = OpConstant 18 
                                         i32 %532 = OpConstant 9 
                                         f32 %546 = OpConstant 3.674022E-40 
                                         f32 %555 = OpConstant 3.674022E-40 
                       Output f32_4* vs_TEXCOORD1 = OpVariable Output 
                       Output f32_4* vs_TEXCOORD3 = OpVariable Output 
                                         i32 %581 = OpConstant 16 
                                         i32 %584 = OpConstant 15 
                                         i32 %587 = OpConstant 13 
                                         i32 %590 = OpConstant 14 
                                         i32 %594 = OpConstant 20 
                                         i32 %621 = OpConstant 26 
                                         i32 %624 = OpConstant 27 
                                             %660 = OpTypePointer Output %7 
                       Output f32_2* vs_TEXCOORD4 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                               Function f32* %392 = OpVariable Function 
                                        f32_4 %13 = OpLoad %12 
                                        f32_2 %14 = OpVectorShuffle %13 %13 0 1 
                                 Uniform f32* %28 = OpAccessChain %24 %26 
                                          f32 %29 = OpLoad %28 
                                 Uniform f32* %31 = OpAccessChain %24 %30 
                                          f32 %32 = OpLoad %31 
                                        f32_2 %33 = OpCompositeConstruct %29 %32 
                                        f32_2 %34 = OpFAdd %14 %33 
                                                      OpStore %9 %34 
                                        f32_2 %37 = OpLoad %9 
                                        f32_4 %38 = OpVectorShuffle %37 %37 1 1 1 1 
                               Uniform f32_4* %42 = OpAccessChain %24 %39 %40 
                                        f32_4 %43 = OpLoad %42 
                                        f32_4 %44 = OpFMul %38 %43 
                                                      OpStore %36 %44 
                               Uniform f32_4* %46 = OpAccessChain %24 %39 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_2 %48 = OpLoad %9 
                                        f32_4 %49 = OpVectorShuffle %48 %48 0 0 0 0 
                                        f32_4 %50 = OpFMul %47 %49 
                                        f32_4 %51 = OpLoad %36 
                                        f32_4 %52 = OpFAdd %50 %51 
                                                      OpStore %36 %52 
                               Uniform f32_4* %54 = OpAccessChain %24 %39 %53 
                                        f32_4 %55 = OpLoad %54 
                                        f32_4 %56 = OpLoad %12 
                                        f32_4 %57 = OpVectorShuffle %56 %56 2 2 2 2 
                                        f32_4 %58 = OpFMul %55 %57 
                                        f32_4 %59 = OpLoad %36 
                                        f32_4 %60 = OpFAdd %58 %59 
                                                      OpStore %36 %60 
                                        f32_4 %62 = OpLoad %36 
                               Uniform f32_4* %63 = OpAccessChain %24 %39 %39 
                                        f32_4 %64 = OpLoad %63 
                                        f32_4 %65 = OpFAdd %62 %64 
                                                      OpStore %61 %65 
                               Uniform f32_4* %66 = OpAccessChain %24 %39 %39 
                                        f32_4 %67 = OpLoad %66 
                                        f32_3 %68 = OpVectorShuffle %67 %67 0 1 2 
                                        f32_4 %69 = OpLoad %12 
                                        f32_3 %70 = OpVectorShuffle %69 %69 3 3 3 
                                        f32_3 %71 = OpFMul %68 %70 
                                        f32_4 %72 = OpLoad %36 
                                        f32_3 %73 = OpVectorShuffle %72 %72 0 1 2 
                                        f32_3 %74 = OpFAdd %71 %73 
                                        f32_4 %75 = OpLoad %36 
                                        f32_4 %76 = OpVectorShuffle %75 %74 4 5 6 3 
                                                      OpStore %36 %76 
                                        f32_4 %77 = OpLoad %36 
                                        f32_3 %78 = OpVectorShuffle %77 %77 0 1 2 
                                        f32_3 %79 = OpFNegate %78 
                               Uniform f32_3* %81 = OpAccessChain %24 %45 
                                        f32_3 %82 = OpLoad %81 
                                        f32_3 %83 = OpFAdd %79 %82 
                                        f32_4 %84 = OpLoad %36 
                                        f32_4 %85 = OpVectorShuffle %84 %83 4 5 6 3 
                                                      OpStore %36 %85 
                                        f32_4 %87 = OpLoad %61 
                                        f32_4 %88 = OpVectorShuffle %87 %87 1 1 1 1 
                               Uniform f32_4* %90 = OpAccessChain %24 %89 %40 
                                        f32_4 %91 = OpLoad %90 
                                        f32_4 %92 = OpFMul %88 %91 
                                                      OpStore %86 %92 
                               Uniform f32_4* %93 = OpAccessChain %24 %89 %45 
                                        f32_4 %94 = OpLoad %93 
                                        f32_4 %95 = OpLoad %61 
                                        f32_4 %96 = OpVectorShuffle %95 %95 0 0 0 0 
                                        f32_4 %97 = OpFMul %94 %96 
                                        f32_4 %98 = OpLoad %86 
                                        f32_4 %99 = OpFAdd %97 %98 
                                                      OpStore %86 %99 
                              Uniform f32_4* %100 = OpAccessChain %24 %89 %53 
                                       f32_4 %101 = OpLoad %100 
                                       f32_4 %102 = OpLoad %61 
                                       f32_4 %103 = OpVectorShuffle %102 %102 2 2 2 2 
                                       f32_4 %104 = OpFMul %101 %103 
                                       f32_4 %105 = OpLoad %86 
                                       f32_4 %106 = OpFAdd %104 %105 
                                                      OpStore %86 %106 
                              Uniform f32_4* %107 = OpAccessChain %24 %89 %39 
                                       f32_4 %108 = OpLoad %107 
                                       f32_4 %109 = OpLoad %61 
                                       f32_4 %110 = OpVectorShuffle %109 %109 3 3 3 3 
                                       f32_4 %111 = OpFMul %108 %110 
                                       f32_4 %112 = OpLoad %86 
                                       f32_4 %113 = OpFAdd %111 %112 
                                                      OpStore %61 %113 
                                       f32_4 %119 = OpLoad %61 
                               Output f32_4* %121 = OpAccessChain %118 %45 
                                                      OpStore %121 %119 
                                Uniform f32* %125 = OpAccessChain %24 %123 %124 
                                         f32 %126 = OpLoad %125 
                                 Output f32* %128 = OpAccessChain %122 %124 
                                                      OpStore %128 %126 
                                       f32_4 %130 = OpLoad %129 
                                       f32_3 %131 = OpVectorShuffle %130 %130 0 1 2 
                                       f32_4 %132 = OpLoad %86 
                                       f32_4 %133 = OpVectorShuffle %132 %131 4 5 6 3 
                                                      OpStore %86 %133 
                                Private f32* %136 = OpAccessChain %86 %124 
                                                      OpStore %136 %134 
                                       f32_4 %138 = OpLoad %86 
                              Uniform f32_4* %139 = OpAccessChain %24 %123 
                                       f32_4 %140 = OpLoad %139 
                                       f32_4 %141 = OpFMul %138 %140 
                                                      OpStore %137 %141 
                                       f32_4 %142 = OpLoad %137 
                                       f32_3 %143 = OpVectorShuffle %142 %142 3 3 3 
                                       f32_4 %144 = OpLoad %137 
                                       f32_3 %145 = OpVectorShuffle %144 %144 0 1 2 
                                       f32_3 %146 = OpFMul %143 %145 
                                       f32_4 %147 = OpLoad %86 
                                       f32_4 %148 = OpVectorShuffle %147 %146 4 5 6 3 
                                                      OpStore %86 %148 
                                       f32_4 %149 = OpLoad %86 
                                       f32_3 %150 = OpVectorShuffle %149 %149 0 1 2 
                                       f32_4 %151 = OpLoad %122 
                                       f32_4 %152 = OpVectorShuffle %151 %150 4 5 6 3 
                                                      OpStore %122 %152 
                                       f32_4 %154 = OpLoad %86 
                                       f32_3 %155 = OpVectorShuffle %154 %154 0 1 2 
                                       f32_3 %156 = OpFNegate %155 
                                       f32_4 %157 = OpLoad %153 
                                       f32_4 %158 = OpVectorShuffle %157 %156 4 5 6 3 
                                                      OpStore %153 %158 
                                Private f32* %159 = OpAccessChain %137 %124 
                                         f32 %160 = OpLoad %159 
                                         f32 %161 = OpFNegate %160 
                                Private f32* %162 = OpAccessChain %153 %124 
                                                      OpStore %162 %161 
                              Uniform f32_4* %165 = OpAccessChain %24 %164 
                                       f32_4 %166 = OpLoad %165 
                                       f32_3 %167 = OpVectorShuffle %166 %166 3 3 3 
                              Uniform f32_4* %168 = OpAccessChain %24 %164 
                                       f32_4 %169 = OpLoad %168 
                                       f32_3 %170 = OpVectorShuffle %169 %169 0 1 2 
                                       f32_3 %171 = OpFMul %167 %170 
                                       f32_4 %172 = OpLoad %163 
                                       f32_4 %173 = OpVectorShuffle %172 %171 4 5 6 3 
                                                      OpStore %163 %173 
                                Uniform f32* %174 = OpAccessChain %24 %164 %124 
                                         f32 %175 = OpLoad %174 
                                Private f32* %176 = OpAccessChain %163 %124 
                                                      OpStore %176 %175 
                                       f32_4 %177 = OpLoad %153 
                                       f32_4 %178 = OpLoad %163 
                                       f32_4 %179 = OpFAdd %177 %178 
                                                      OpStore %153 %179 
                                       f32_4 %181 = OpLoad %36 
                                       f32_3 %182 = OpVectorShuffle %181 %181 0 1 2 
                                       f32_4 %183 = OpLoad %36 
                                       f32_3 %184 = OpVectorShuffle %183 %183 0 1 2 
                                         f32 %185 = OpDot %182 %184 
                                                      OpStore %180 %185 
                                         f32 %186 = OpLoad %180 
                                         f32 %187 = OpExtInst %1 32 %186 
                                                      OpStore %180 %187 
                                         f32 %188 = OpLoad %180 
                                       f32_3 %189 = OpCompositeConstruct %188 %188 %188 
                                       f32_4 %190 = OpLoad %36 
                                       f32_3 %191 = OpVectorShuffle %190 %190 0 1 2 
                                       f32_3 %192 = OpFMul %189 %191 
                                       f32_4 %193 = OpLoad %36 
                                       f32_4 %194 = OpVectorShuffle %193 %192 4 5 6 3 
                                                      OpStore %36 %194 
                                       f32_3 %197 = OpLoad %196 
                              Uniform f32_4* %199 = OpAccessChain %24 %198 %45 
                                       f32_4 %200 = OpLoad %199 
                                       f32_3 %201 = OpVectorShuffle %200 %200 0 1 2 
                                         f32 %202 = OpDot %197 %201 
                                Private f32* %204 = OpAccessChain %86 %203 
                                                      OpStore %204 %202 
                                       f32_3 %205 = OpLoad %196 
                              Uniform f32_4* %206 = OpAccessChain %24 %198 %40 
                                       f32_4 %207 = OpLoad %206 
                                       f32_3 %208 = OpVectorShuffle %207 %207 0 1 2 
                                         f32 %209 = OpDot %205 %208 
                                Private f32* %210 = OpAccessChain %86 %114 
                                                      OpStore %210 %209 
                                       f32_3 %211 = OpLoad %196 
                              Uniform f32_4* %212 = OpAccessChain %24 %198 %53 
                                       f32_4 %213 = OpLoad %212 
                                       f32_3 %214 = OpVectorShuffle %213 %213 0 1 2 
                                         f32 %215 = OpDot %211 %214 
                                Private f32* %217 = OpAccessChain %86 %216 
                                                      OpStore %217 %215 
                                       f32_4 %218 = OpLoad %86 
                                       f32_3 %219 = OpVectorShuffle %218 %218 0 1 2 
                                       f32_4 %220 = OpLoad %86 
                                       f32_3 %221 = OpVectorShuffle %220 %220 0 1 2 
                                         f32 %222 = OpDot %219 %221 
                                                      OpStore %180 %222 
                                         f32 %223 = OpLoad %180 
                                         f32 %224 = OpExtInst %1 32 %223 
                                                      OpStore %180 %224 
                                         f32 %225 = OpLoad %180 
                                       f32_3 %226 = OpCompositeConstruct %225 %225 %225 
                                       f32_4 %227 = OpLoad %86 
                                       f32_3 %228 = OpVectorShuffle %227 %227 0 1 2 
                                       f32_3 %229 = OpFMul %226 %228 
                                       f32_4 %230 = OpLoad %86 
                                       f32_4 %231 = OpVectorShuffle %230 %229 4 5 6 3 
                                                      OpStore %86 %231 
                                       f32_4 %232 = OpLoad %86 
                                       f32_3 %233 = OpVectorShuffle %232 %232 0 1 2 
                                       f32_4 %234 = OpLoad %36 
                                       f32_3 %235 = OpVectorShuffle %234 %234 0 1 2 
                                         f32 %236 = OpDot %233 %235 
                                                      OpStore %180 %236 
                              Uniform f32_4* %237 = OpAccessChain %24 %53 
                                       f32_4 %238 = OpLoad %237 
                                       f32_2 %239 = OpVectorShuffle %238 %238 1 1 
                              Uniform f32_4* %241 = OpAccessChain %24 %240 %40 
                                       f32_4 %242 = OpLoad %241 
                                       f32_2 %243 = OpVectorShuffle %242 %242 0 1 
                                       f32_2 %244 = OpFMul %239 %243 
                                       f32_4 %245 = OpLoad %36 
                                       f32_4 %246 = OpVectorShuffle %245 %244 4 5 2 3 
                                                      OpStore %36 %246 
                              Uniform f32_4* %247 = OpAccessChain %24 %240 %45 
                                       f32_4 %248 = OpLoad %247 
                                       f32_2 %249 = OpVectorShuffle %248 %248 0 1 
                              Uniform f32_4* %250 = OpAccessChain %24 %53 
                                       f32_4 %251 = OpLoad %250 
                                       f32_2 %252 = OpVectorShuffle %251 %251 0 0 
                                       f32_2 %253 = OpFMul %249 %252 
                                       f32_4 %254 = OpLoad %36 
                                       f32_2 %255 = OpVectorShuffle %254 %254 0 1 
                                       f32_2 %256 = OpFAdd %253 %255 
                                       f32_4 %257 = OpLoad %36 
                                       f32_4 %258 = OpVectorShuffle %257 %256 4 5 2 3 
                                                      OpStore %36 %258 
                                       f32_4 %259 = OpLoad %36 
                                       f32_2 %260 = OpVectorShuffle %259 %259 0 1 
                                       f32_2 %261 = OpExtInst %1 4 %260 
                                Uniform f32* %263 = OpAccessChain %24 %262 
                                         f32 %264 = OpLoad %263 
                                Uniform f32* %266 = OpAccessChain %24 %265 
                                         f32 %267 = OpLoad %266 
                                       f32_2 %268 = OpCompositeConstruct %264 %267 
                                       f32_2 %269 = OpFMul %261 %268 
                                       f32_4 %270 = OpLoad %36 
                                       f32_4 %271 = OpVectorShuffle %270 %269 4 5 2 3 
                                                      OpStore %36 %271 
                                       f32_4 %272 = OpLoad %61 
                                       f32_2 %273 = OpVectorShuffle %272 %272 3 3 
                                       f32_4 %274 = OpLoad %36 
                                       f32_2 %275 = OpVectorShuffle %274 %274 0 1 
                                       f32_2 %276 = OpFDiv %273 %275 
                                       f32_4 %277 = OpLoad %36 
                                       f32_4 %278 = OpVectorShuffle %277 %276 4 5 2 3 
                                                      OpStore %36 %278 
                                Private f32* %280 = OpAccessChain %61 %216 
                                         f32 %281 = OpLoad %280 
                                Uniform f32* %282 = OpAccessChain %24 %40 %114 
                                         f32 %283 = OpLoad %282 
                                         f32 %284 = OpFDiv %281 %283 
                                                      OpStore %279 %284 
                                         f32 %285 = OpLoad %279 
                                         f32 %286 = OpFNegate %285 
                                         f32 %287 = OpFAdd %286 %134 
                                                      OpStore %279 %287 
                                         f32 %288 = OpLoad %279 
                                Uniform f32* %289 = OpAccessChain %24 %40 %216 
                                         f32 %290 = OpLoad %289 
                                         f32 %291 = OpFMul %288 %290 
                                                      OpStore %279 %291 
                                         f32 %292 = OpLoad %279 
                                         f32 %294 = OpExtInst %1 40 %292 %293 
                                                      OpStore %279 %294 
                                         f32 %296 = OpLoad %279 
                                Uniform f32* %298 = OpAccessChain %24 %297 %216 
                                         f32 %299 = OpLoad %298 
                                         f32 %300 = OpFMul %296 %299 
                                Uniform f32* %301 = OpAccessChain %24 %297 %124 
                                         f32 %302 = OpLoad %301 
                                         f32 %303 = OpFAdd %300 %302 
                                                      OpStore vs_TEXCOORDn0 %303 
                                       f32_4 %304 = OpLoad %36 
                                       f32_2 %305 = OpVectorShuffle %304 %304 0 1 
                                       f32_4 %306 = OpLoad %36 
                                       f32_2 %307 = OpVectorShuffle %306 %306 0 1 
                                         f32 %308 = OpDot %305 %307 
                                                      OpStore %279 %308 
                                Uniform f32* %310 = OpAccessChain %24 %309 
                                         f32 %311 = OpLoad %310 
                                Uniform f32* %313 = OpAccessChain %24 %312 
                                         f32 %314 = OpLoad %313 
                                       f32_2 %315 = OpCompositeConstruct %311 %314 
                                       f32_2 %318 = OpFMul %315 %317 
                                       f32_4 %319 = OpLoad %36 
                                       f32_2 %320 = OpVectorShuffle %319 %319 0 1 
                                       f32_2 %321 = OpFAdd %318 %320 
                                       f32_4 %322 = OpLoad %36 
                                       f32_4 %323 = OpVectorShuffle %322 %321 4 5 2 3 
                                                      OpStore %36 %323 
                                       f32_4 %325 = OpLoad %36 
                                       f32_2 %326 = OpVectorShuffle %325 %325 0 1 
                                       f32_2 %327 = OpFDiv %317 %326 
                                       f32_4 %328 = OpLoad vs_TEXCOORD2 
                                       f32_4 %329 = OpVectorShuffle %328 %327 0 1 4 5 
                                                      OpStore vs_TEXCOORD2 %329 
                                         f32 %330 = OpLoad %279 
                                         f32 %331 = OpExtInst %1 32 %330 
                                                      OpStore %279 %331 
                                  Input f32* %335 = OpAccessChain %333 %114 
                                         f32 %336 = OpLoad %335 
                                         f32 %337 = OpExtInst %1 4 %336 
                                Uniform f32* %339 = OpAccessChain %24 %338 
                                         f32 %340 = OpLoad %339 
                                         f32 %341 = OpFMul %337 %340 
                                Private f32* %342 = OpAccessChain %36 %203 
                                                      OpStore %342 %341 
                                Uniform f32* %345 = OpAccessChain %24 %344 
                                         f32 %346 = OpLoad %345 
                                         f32 %347 = OpFAdd %346 %134 
                                Private f32* %348 = OpAccessChain %343 %203 
                                                      OpStore %348 %347 
                                Private f32* %349 = OpAccessChain %343 %203 
                                         f32 %350 = OpLoad %349 
                                Private f32* %351 = OpAccessChain %36 %203 
                                         f32 %352 = OpLoad %351 
                                         f32 %353 = OpFMul %350 %352 
                                Private f32* %354 = OpAccessChain %36 %203 
                                                      OpStore %354 %353 
                                         f32 %355 = OpLoad %279 
                                Private f32* %356 = OpAccessChain %36 %203 
                                         f32 %357 = OpLoad %356 
                                         f32 %358 = OpFMul %355 %357 
                                Private f32* %359 = OpAccessChain %343 %203 
                                                      OpStore %359 %358 
                                Uniform f32* %362 = OpAccessChain %24 %361 
                                         f32 %363 = OpLoad %362 
                                         f32 %364 = OpFNegate %363 
                                         f32 %365 = OpFAdd %364 %134 
                                                      OpStore %360 %365 
                                         f32 %366 = OpLoad %360 
                                Private f32* %367 = OpAccessChain %343 %203 
                                         f32 %368 = OpLoad %367 
                                         f32 %369 = OpExtInst %1 4 %368 
                                         f32 %370 = OpFMul %366 %369 
                                                      OpStore %360 %370 
                                         f32 %371 = OpLoad %279 
                                Private f32* %372 = OpAccessChain %36 %203 
                                         f32 %373 = OpLoad %372 
                                         f32 %374 = OpFMul %371 %373 
                                         f32 %375 = OpLoad %360 
                                         f32 %376 = OpFNegate %375 
                                         f32 %377 = OpFAdd %374 %376 
                                                      OpStore %279 %377 
                                         f32 %378 = OpLoad %180 
                                         f32 %379 = OpExtInst %1 4 %378 
                                         f32 %380 = OpLoad %279 
                                         f32 %381 = OpFMul %379 %380 
                                         f32 %382 = OpLoad %360 
                                         f32 %383 = OpFAdd %381 %382 
                                                      OpStore %180 %383 
                                Uniform f32* %387 = OpAccessChain %24 %240 %39 %124 
                                         f32 %388 = OpLoad %387 
                                        bool %389 = OpFOrdEqual %388 %293 
                                                      OpStore %386 %389 
                                        bool %390 = OpLoad %386 
                                                      OpSelectionMerge %394 None 
                                                      OpBranchConditional %390 %393 %396 
                                             %393 = OpLabel 
                                         f32 %395 = OpLoad %180 
                                                      OpStore %392 %395 
                                                      OpBranch %394 
                                             %396 = OpLabel 
                                Private f32* %397 = OpAccessChain %343 %203 
                                         f32 %398 = OpLoad %397 
                                                      OpStore %392 %398 
                                                      OpBranch %394 
                                             %394 = OpLabel 
                                         f32 %399 = OpLoad %392 
                                                      OpStore %180 %399 
                                Uniform f32* %401 = OpAccessChain %24 %400 
                                         f32 %402 = OpLoad %401 
                                Uniform f32* %404 = OpAccessChain %24 %403 
                                         f32 %405 = OpLoad %404 
                                         f32 %406 = OpFMul %402 %405 
                                                      OpStore %279 %406 
                                         f32 %407 = OpLoad %279 
                                         f32 %408 = OpLoad %180 
                                         f32 %409 = OpFMul %407 %408 
                                         f32 %410 = OpFAdd %409 %134 
                                                      OpStore %279 %410 
                                         f32 %411 = OpLoad %180 
                                         f32 %412 = OpLoad %279 
                                         f32 %413 = OpFDiv %411 %412 
                                Private f32* %414 = OpAccessChain %36 %203 
                                                      OpStore %414 %413 
                                Uniform f32* %416 = OpAccessChain %24 %415 
                                         f32 %417 = OpLoad %416 
                                Uniform f32* %418 = OpAccessChain %24 %403 
                                         f32 %419 = OpLoad %418 
                                         f32 %420 = OpFMul %417 %419 
                                                      OpStore %279 %420 
                                Private f32* %421 = OpAccessChain %36 %203 
                                         f32 %422 = OpLoad %421 
                                         f32 %423 = OpLoad %279 
                                         f32 %424 = OpFMul %422 %423 
                                                      OpStore %279 %424 
                                         f32 %425 = OpLoad %279 
                                         f32 %426 = OpExtInst %1 37 %425 %134 
                                Private f32* %427 = OpAccessChain %343 %203 
                                                      OpStore %427 %426 
                                Private f32* %428 = OpAccessChain %343 %203 
                                         f32 %429 = OpLoad %428 
                                         f32 %430 = OpExtInst %1 31 %429 
                                Private f32* %431 = OpAccessChain %343 %203 
                                                      OpStore %431 %430 
                                       f32_4 %432 = OpLoad %153 
                                       f32_2 %433 = OpLoad %343 
                                       f32_4 %434 = OpVectorShuffle %433 %433 0 0 0 0 
                                       f32_4 %435 = OpFMul %432 %434 
                                                      OpStore %61 %435 
                                       f32_4 %437 = OpLoad %137 
                                       f32_3 %438 = OpVectorShuffle %437 %437 0 1 2 
                                       f32_4 %439 = OpLoad %137 
                                       f32_3 %440 = OpVectorShuffle %439 %439 3 3 3 
                                       f32_3 %441 = OpFMul %438 %440 
                                       f32_4 %442 = OpLoad %61 
                                       f32_3 %443 = OpVectorShuffle %442 %442 0 1 2 
                                       f32_3 %444 = OpFAdd %441 %443 
                                       f32_4 %445 = OpLoad %436 
                                       f32_4 %446 = OpVectorShuffle %445 %444 4 5 6 3 
                                                      OpStore %436 %446 
                                Private f32* %447 = OpAccessChain %86 %124 
                                         f32 %448 = OpLoad %447 
                                Uniform f32* %449 = OpAccessChain %24 %123 %124 
                                         f32 %450 = OpLoad %449 
                                         f32 %451 = OpFMul %448 %450 
                                Private f32* %452 = OpAccessChain %61 %124 
                                         f32 %453 = OpLoad %452 
                                         f32 %454 = OpFAdd %451 %453 
                                 Output f32* %455 = OpAccessChain %436 %124 
                                                      OpStore %455 %454 
                              Uniform f32_4* %457 = OpAccessChain %24 %456 
                                       f32_4 %458 = OpLoad %457 
                                       f32_4 %461 = OpExtInst %1 40 %458 %460 
                                                      OpStore %61 %461 
                                       f32_4 %462 = OpLoad %61 
                                       f32_4 %465 = OpExtInst %1 37 %462 %464 
                                                      OpStore %61 %465 
                                       f32_2 %466 = OpLoad %9 
                                       f32_4 %467 = OpLoad %61 
                                       f32_2 %468 = OpVectorShuffle %467 %467 0 1 
                                       f32_2 %469 = OpFNegate %468 
                                       f32_2 %470 = OpFAdd %466 %469 
                                                      OpStore %343 %470 
                                       f32_2 %471 = OpLoad %9 
                                       f32_2 %474 = OpFMul %471 %473 
                                       f32_4 %475 = OpLoad %61 
                                       f32_2 %476 = OpVectorShuffle %475 %475 0 1 
                                       f32_2 %477 = OpFNegate %476 
                                       f32_2 %478 = OpFAdd %474 %477 
                                                      OpStore %9 %478 
                                       f32_4 %479 = OpLoad %61 
                                       f32_2 %480 = OpVectorShuffle %479 %479 2 3 
                                       f32_2 %481 = OpFNegate %480 
                                       f32_2 %482 = OpLoad %9 
                                       f32_2 %483 = OpFAdd %481 %482 
                                       f32_4 %484 = OpLoad vs_TEXCOORD2 
                                       f32_4 %485 = OpVectorShuffle %484 %483 4 5 2 3 
                                                      OpStore vs_TEXCOORD2 %485 
                                       f32_4 %486 = OpLoad %61 
                                       f32_2 %487 = OpVectorShuffle %486 %486 0 1 
                                       f32_2 %488 = OpFNegate %487 
                                       f32_4 %489 = OpLoad %61 
                                       f32_2 %490 = OpVectorShuffle %489 %489 2 3 
                                       f32_2 %491 = OpFAdd %488 %490 
                                                      OpStore %9 %491 
                                       f32_2 %493 = OpLoad %343 
                                       f32_2 %494 = OpLoad %9 
                                       f32_2 %495 = OpFDiv %493 %494 
                                       f32_4 %496 = OpLoad vs_TEXCOORD0 
                                       f32_4 %497 = OpVectorShuffle %496 %495 0 1 4 5 
                                                      OpStore vs_TEXCOORD0 %497 
                                       f32_2 %499 = OpLoad %498 
                                       f32_4 %500 = OpLoad vs_TEXCOORD0 
                                       f32_4 %501 = OpVectorShuffle %500 %499 4 5 2 3 
                                                      OpStore vs_TEXCOORD0 %501 
                                  Input f32* %503 = OpAccessChain %333 %114 
                                         f32 %504 = OpLoad %503 
                                        bool %505 = OpFOrdGreaterThanEqual %293 %504 
                                                      OpStore %502 %505 
                                        bool %506 = OpLoad %502 
                                         f32 %507 = OpSelect %506 %134 %293 
                                Private f32* %508 = OpAccessChain %9 %203 
                                                      OpStore %508 %507 
                                Uniform f32* %512 = OpAccessChain %24 %511 
                                         f32 %513 = OpLoad %512 
                                         f32 %514 = OpFNegate %513 
                                Uniform f32* %516 = OpAccessChain %24 %515 
                                         f32 %517 = OpLoad %516 
                                         f32 %518 = OpFAdd %514 %517 
                                Private f32* %519 = OpAccessChain %510 %203 
                                                      OpStore %519 %518 
                                Private f32* %520 = OpAccessChain %9 %203 
                                         f32 %521 = OpLoad %520 
                                Private f32* %522 = OpAccessChain %510 %203 
                                         f32 %523 = OpLoad %522 
                                         f32 %524 = OpFMul %521 %523 
                                Uniform f32* %525 = OpAccessChain %24 %511 
                                         f32 %526 = OpLoad %525 
                                         f32 %527 = OpFAdd %524 %526 
                                Private f32* %528 = OpAccessChain %9 %203 
                                                      OpStore %528 %527 
                                Private f32* %529 = OpAccessChain %9 %203 
                                         f32 %530 = OpLoad %529 
                                         f32 %531 = OpFMul %530 %316 
                                Uniform f32* %533 = OpAccessChain %24 %532 
                                         f32 %534 = OpLoad %533 
                                         f32 %535 = OpFAdd %531 %534 
                                Private f32* %536 = OpAccessChain %9 %203 
                                                      OpStore %536 %535 
                                Private f32* %537 = OpAccessChain %9 %203 
                                         f32 %538 = OpLoad %537 
                                Uniform f32* %539 = OpAccessChain %24 %403 
                                         f32 %540 = OpLoad %539 
                                         f32 %541 = OpFMul %538 %540 
                                Private f32* %542 = OpAccessChain %9 %203 
                                                      OpStore %542 %541 
                                Private f32* %543 = OpAccessChain %9 %203 
                                         f32 %544 = OpLoad %543 
                                         f32 %545 = OpFNegate %544 
                                         f32 %547 = OpFMul %545 %546 
                                         f32 %548 = OpFAdd %547 %546 
                                Private f32* %549 = OpAccessChain %9 %203 
                                                      OpStore %549 %548 
                                Private f32* %550 = OpAccessChain %9 %203 
                                         f32 %551 = OpLoad %550 
                                Private f32* %552 = OpAccessChain %36 %203 
                                         f32 %553 = OpLoad %552 
                                         f32 %554 = OpFMul %551 %553 
                                         f32 %556 = OpFAdd %554 %555 
                                Private f32* %557 = OpAccessChain %36 %124 
                                                      OpStore %557 %556 
                                       f32_4 %559 = OpLoad %36 
                                       f32_2 %560 = OpVectorShuffle %559 %559 0 3 
                                       f32_4 %561 = OpLoad vs_TEXCOORD1 
                                       f32_4 %562 = OpVectorShuffle %561 %560 4 1 2 5 
                                                      OpStore vs_TEXCOORD1 %562 
                                         f32 %563 = OpLoad %279 
                                         f32 %564 = OpFNegate %563 
                                         f32 %565 = OpFMul %564 %546 
                                Private f32* %566 = OpAccessChain %36 %124 
                                         f32 %567 = OpLoad %566 
                                         f32 %568 = OpFAdd %565 %567 
                                 Output f32* %569 = OpAccessChain vs_TEXCOORD1 %114 
                                                      OpStore %569 %568 
                                         f32 %570 = OpLoad %279 
                                         f32 %571 = OpFMul %570 %546 
                                Private f32* %572 = OpAccessChain %36 %124 
                                         f32 %573 = OpLoad %572 
                                         f32 %574 = OpFAdd %571 %573 
                                 Output f32* %575 = OpAccessChain vs_TEXCOORD1 %216 
                                                      OpStore %575 %574 
                                  Input f32* %577 = OpAccessChain %129 %124 
                                         f32 %578 = OpLoad %577 
                                 Output f32* %579 = OpAccessChain vs_TEXCOORD3 %216 
                                                      OpStore %579 %578 
                                 Output f32* %580 = OpAccessChain vs_TEXCOORD3 %124 
                                                      OpStore %580 %293 
                                Uniform f32* %582 = OpAccessChain %24 %581 
                                         f32 %583 = OpLoad %582 
                                Uniform f32* %585 = OpAccessChain %24 %584 
                                         f32 %586 = OpLoad %585 
                                Uniform f32* %588 = OpAccessChain %24 %587 
                                         f32 %589 = OpLoad %588 
                                Uniform f32* %591 = OpAccessChain %24 %590 
                                         f32 %592 = OpLoad %591 
                                       f32_4 %593 = OpCompositeConstruct %583 %586 %589 %592 
                                Uniform f32* %595 = OpAccessChain %24 %594 
                                         f32 %596 = OpLoad %595 
                                Uniform f32* %597 = OpAccessChain %24 %594 
                                         f32 %598 = OpLoad %597 
                                Uniform f32* %599 = OpAccessChain %24 %594 
                                         f32 %600 = OpLoad %599 
                                Uniform f32* %601 = OpAccessChain %24 %594 
                                         f32 %602 = OpLoad %601 
                                       f32_4 %603 = OpCompositeConstruct %596 %598 %600 %602 
                                         f32 %604 = OpCompositeExtract %603 0 
                                         f32 %605 = OpCompositeExtract %603 1 
                                         f32 %606 = OpCompositeExtract %603 2 
                                         f32 %607 = OpCompositeExtract %603 3 
                                       f32_4 %608 = OpCompositeConstruct %604 %605 %606 %607 
                                       f32_4 %609 = OpFMul %593 %608 
                                                      OpStore %36 %609 
                                       f32_4 %610 = OpLoad %36 
                                       f32_2 %611 = OpVectorShuffle %610 %610 2 3 
                                       f32_2 %612 = OpFNegate %611 
                                Uniform f32* %613 = OpAccessChain %24 %338 
                                         f32 %614 = OpLoad %613 
                                       f32_2 %615 = OpCompositeConstruct %614 %614 
                                       f32_2 %616 = OpFMul %612 %615 
                                       f32_3 %617 = OpLoad %510 
                                       f32_3 %618 = OpVectorShuffle %617 %616 3 1 4 
                                                      OpStore %510 %618 
                                       f32_3 %619 = OpLoad %510 
                                       f32_2 %620 = OpVectorShuffle %619 %619 0 2 
                                Uniform f32* %622 = OpAccessChain %24 %621 
                                         f32 %623 = OpLoad %622 
                                Uniform f32* %625 = OpAccessChain %24 %624 
                                         f32 %626 = OpLoad %625 
                                       f32_2 %627 = OpCompositeConstruct %623 %626 
                                       f32_2 %628 = OpFDiv %620 %627 
                                       f32_3 %629 = OpLoad %510 
                                       f32_3 %630 = OpVectorShuffle %629 %628 3 1 4 
                                                      OpStore %510 %630 
                                       f32_3 %631 = OpLoad %510 
                                       f32_2 %632 = OpVectorShuffle %631 %631 0 2 
                                       f32_2 %633 = OpLoad %498 
                                       f32_2 %634 = OpFAdd %632 %633 
                                       f32_4 %635 = OpLoad vs_TEXCOORD3 
                                       f32_4 %636 = OpVectorShuffle %635 %634 4 5 2 3 
                                                      OpStore vs_TEXCOORD3 %636 
                                Private f32* %637 = OpAccessChain %36 %203 
                                         f32 %638 = OpLoad %637 
                                         f32 %639 = OpLoad %180 
                                         f32 %640 = OpFMul %638 %639 
                                         f32 %641 = OpFAdd %640 %134 
                                Private f32* %642 = OpAccessChain %510 %203 
                                                      OpStore %642 %641 
                                         f32 %643 = OpLoad %180 
                                Private f32* %644 = OpAccessChain %510 %203 
                                         f32 %645 = OpLoad %644 
                                         f32 %646 = OpFDiv %643 %645 
                                Private f32* %647 = OpAccessChain %510 %203 
                                                      OpStore %647 %646 
                                Private f32* %648 = OpAccessChain %510 %203 
                                         f32 %649 = OpLoad %648 
                                Private f32* %650 = OpAccessChain %36 %114 
                                         f32 %651 = OpLoad %650 
                                         f32 %652 = OpFMul %649 %651 
                                                      OpStore %180 %652 
                                Private f32* %653 = OpAccessChain %9 %203 
                                         f32 %654 = OpLoad %653 
                                Private f32* %655 = OpAccessChain %510 %203 
                                         f32 %656 = OpLoad %655 
                                         f32 %657 = OpFMul %654 %656 
                                         f32 %658 = OpFAdd %657 %555 
                                Private f32* %659 = OpAccessChain %9 %203 
                                                      OpStore %659 %658 
                                Private f32* %662 = OpAccessChain %510 %203 
                                         f32 %663 = OpLoad %662 
                                 Output f32* %664 = OpAccessChain vs_TEXCOORD4 %203 
                                                      OpStore %664 %663 
                                         f32 %665 = OpLoad %180 
                                         f32 %666 = OpFNegate %665 
                                         f32 %667 = OpFMul %666 %546 
                                Private f32* %668 = OpAccessChain %9 %203 
                                         f32 %669 = OpLoad %668 
                                         f32 %670 = OpFAdd %667 %669 
                                 Output f32* %671 = OpAccessChain vs_TEXCOORD4 %114 
                                                      OpStore %671 %670 
                                 Output f32* %672 = OpAccessChain %118 %45 %114 
                                         f32 %673 = OpLoad %672 
                                         f32 %674 = OpFNegate %673 
                                 Output f32* %675 = OpAccessChain %118 %45 %114 
                                                      OpStore %675 %674 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 162
; Schema: 0
                                             OpCapability Shader 
                                      %1 = OpExtInstImport "GLSL.std.450" 
                                             OpMemoryModel Logical GLSL450 
                                             OpEntryPoint Fragment %4 "main" %21 %35 %80 %88 %104 %142 %146 
                                             OpExecutionMode %4 OriginUpperLeft 
                                             OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                             OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                             OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                             OpName vs_TEXCOORDn0 "vs_TEXCOORDn0" 
                                             OpDecorate %12 DescriptorSet 12 
                                             OpDecorate %12 Binding 12 
                                             OpDecorate %16 DescriptorSet 16 
                                             OpDecorate %16 Binding 16 
                                             OpDecorate vs_TEXCOORD3 Location 21 
                                             OpDecorate vs_TEXCOORD4 Location 35 
                                             OpMemberDecorate %53 0 Offset 53 
                                             OpMemberDecorate %53 1 Offset 53 
                                             OpDecorate %53 Block 
                                             OpDecorate %55 DescriptorSet 55 
                                             OpDecorate %55 Binding 55 
                                             OpDecorate vs_TEXCOORD0 Location 80 
                                             OpDecorate vs_TEXCOORD1 Location 88 
                                             OpDecorate %104 Location 104 
                                             OpDecorate %142 Location 142 
                                             OpDecorate vs_TEXCOORDn0 Location 146 
                                      %2 = OpTypeVoid 
                                      %3 = OpTypeFunction %2 
                                      %6 = OpTypeFloat 32 
                                      %7 = OpTypeVector %6 4 
                                      %8 = OpTypePointer Private %7 
                       Private f32_4* %9 = OpVariable Private 
                                     %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                     %11 = OpTypePointer UniformConstant %10 
UniformConstant read_only Texture2D* %12 = OpVariable UniformConstant 
                                     %14 = OpTypeSampler 
                                     %15 = OpTypePointer UniformConstant %14 
            UniformConstant sampler* %16 = OpVariable UniformConstant 
                                     %18 = OpTypeSampledImage %10 
                                     %20 = OpTypePointer Input %7 
               Input f32_4* vs_TEXCOORD3 = OpVariable Input 
                                     %22 = OpTypeVector %6 2 
                                     %26 = OpTypeInt 32 0 
                                 u32 %27 = OpConstant 3 
                                 u32 %29 = OpConstant 0 
                                     %30 = OpTypePointer Private %6 
                                     %34 = OpTypePointer Input %22 
               Input f32_2* vs_TEXCOORD4 = OpVariable Input 
                                     %36 = OpTypePointer Input %6 
                                 u32 %40 = OpConstant 1 
                                 f32 %48 = OpConstant 3.674022E-40 
                                 f32 %49 = OpConstant 3.674022E-40 
                      Private f32_4* %52 = OpVariable Private 
                                     %53 = OpTypeStruct %7 %7 
                                     %54 = OpTypePointer Uniform %53 
     Uniform struct {f32_4; f32_4;}* %55 = OpVariable Uniform 
                                     %56 = OpTypeInt 32 1 
                                 i32 %57 = OpConstant 1 
                                     %58 = OpTypeVector %6 3 
                                     %59 = OpTypePointer Uniform %7 
                                     %69 = OpTypePointer Uniform %6 
               Input f32_4* vs_TEXCOORD0 = OpVariable Input 
               Input f32_4* vs_TEXCOORD1 = OpVariable Input 
                     Private f32_4* %101 = OpVariable Private 
                       Input f32_4* %104 = OpVariable Input 
                                i32 %126 = OpConstant 0 
                       Private f32* %134 = OpVariable Private 
                                u32 %137 = OpConstant 2 
                                    %141 = OpTypePointer Output %7 
                      Output f32_4* %142 = OpVariable Output 
                                    %144 = OpTypePointer Output %6 
                Input f32* vs_TEXCOORDn0 = OpVariable Input 
                                 void %4 = OpFunction None %3 
                                      %5 = OpLabel 
                 read_only Texture2D %13 = OpLoad %12 
                             sampler %17 = OpLoad %16 
          read_only Texture2DSampled %19 = OpSampledImage %13 %17 
                               f32_4 %23 = OpLoad vs_TEXCOORD3 
                               f32_2 %24 = OpVectorShuffle %23 %23 0 1 
                               f32_4 %25 = OpImageSampleImplicitLod %19 %24 
                                 f32 %28 = OpCompositeExtract %25 3 
                        Private f32* %31 = OpAccessChain %9 %29 
                                             OpStore %31 %28 
                        Private f32* %32 = OpAccessChain %9 %29 
                                 f32 %33 = OpLoad %32 
                          Input f32* %37 = OpAccessChain vs_TEXCOORD4 %29 
                                 f32 %38 = OpLoad %37 
                                 f32 %39 = OpFMul %33 %38 
                          Input f32* %41 = OpAccessChain vs_TEXCOORD4 %40 
                                 f32 %42 = OpLoad %41 
                                 f32 %43 = OpFNegate %42 
                                 f32 %44 = OpFAdd %39 %43 
                        Private f32* %45 = OpAccessChain %9 %29 
                                             OpStore %45 %44 
                        Private f32* %46 = OpAccessChain %9 %29 
                                 f32 %47 = OpLoad %46 
                                 f32 %50 = OpExtInst %1 43 %47 %48 %49 
                        Private f32* %51 = OpAccessChain %9 %29 
                                             OpStore %51 %50 
                      Uniform f32_4* %60 = OpAccessChain %55 %57 
                               f32_4 %61 = OpLoad %60 
                               f32_3 %62 = OpVectorShuffle %61 %61 3 3 3 
                      Uniform f32_4* %63 = OpAccessChain %55 %57 
                               f32_4 %64 = OpLoad %63 
                               f32_3 %65 = OpVectorShuffle %64 %64 0 1 2 
                               f32_3 %66 = OpFMul %62 %65 
                               f32_4 %67 = OpLoad %52 
                               f32_4 %68 = OpVectorShuffle %67 %66 4 5 6 3 
                                             OpStore %52 %68 
                        Uniform f32* %70 = OpAccessChain %55 %57 %27 
                                 f32 %71 = OpLoad %70 
                        Private f32* %72 = OpAccessChain %52 %27 
                                             OpStore %72 %71 
                               f32_4 %73 = OpLoad %9 
                               f32_4 %74 = OpVectorShuffle %73 %73 0 0 0 0 
                               f32_4 %75 = OpLoad %52 
                               f32_4 %76 = OpFMul %74 %75 
                                             OpStore %9 %76 
                 read_only Texture2D %77 = OpLoad %12 
                             sampler %78 = OpLoad %16 
          read_only Texture2DSampled %79 = OpSampledImage %77 %78 
                               f32_4 %81 = OpLoad vs_TEXCOORD0 
                               f32_2 %82 = OpVectorShuffle %81 %81 0 1 
                               f32_4 %83 = OpImageSampleImplicitLod %79 %82 
                                 f32 %84 = OpCompositeExtract %83 3 
                        Private f32* %85 = OpAccessChain %52 %29 
                                             OpStore %85 %84 
                        Private f32* %86 = OpAccessChain %52 %29 
                                 f32 %87 = OpLoad %86 
                          Input f32* %89 = OpAccessChain vs_TEXCOORD1 %29 
                                 f32 %90 = OpLoad %89 
                                 f32 %91 = OpFMul %87 %90 
                          Input f32* %92 = OpAccessChain vs_TEXCOORD1 %27 
                                 f32 %93 = OpLoad %92 
                                 f32 %94 = OpFNegate %93 
                                 f32 %95 = OpFAdd %91 %94 
                        Private f32* %96 = OpAccessChain %52 %29 
                                             OpStore %96 %95 
                        Private f32* %97 = OpAccessChain %52 %29 
                                 f32 %98 = OpLoad %97 
                                 f32 %99 = OpExtInst %1 43 %98 %48 %49 
                       Private f32* %100 = OpAccessChain %52 %29 
                                             OpStore %100 %99 
                              f32_4 %102 = OpLoad %52 
                              f32_4 %103 = OpVectorShuffle %102 %102 0 0 0 0 
                              f32_4 %105 = OpLoad %104 
                              f32_4 %106 = OpFMul %103 %105 
                                             OpStore %101 %106 
                         Input f32* %107 = OpAccessChain %104 %27 
                                f32 %108 = OpLoad %107 
                                f32 %109 = OpFNegate %108 
                       Private f32* %110 = OpAccessChain %52 %29 
                                f32 %111 = OpLoad %110 
                                f32 %112 = OpFMul %109 %111 
                                f32 %113 = OpFAdd %112 %49 
                       Private f32* %114 = OpAccessChain %52 %29 
                                             OpStore %114 %113 
                              f32_4 %115 = OpLoad %9 
                              f32_4 %116 = OpLoad %52 
                              f32_4 %117 = OpVectorShuffle %116 %116 0 0 0 0 
                              f32_4 %118 = OpFMul %115 %117 
                              f32_4 %119 = OpLoad %101 
                              f32_4 %120 = OpFAdd %118 %119 
                                             OpStore %9 %120 
                              f32_4 %121 = OpLoad %9 
                              f32_3 %122 = OpVectorShuffle %121 %121 0 1 2 
                              f32_4 %123 = OpLoad vs_TEXCOORD3 
                              f32_3 %124 = OpVectorShuffle %123 %123 2 2 2 
                              f32_3 %125 = OpFMul %122 %124 
                     Uniform f32_4* %127 = OpAccessChain %55 %126 
                              f32_4 %128 = OpLoad %127 
                              f32_3 %129 = OpVectorShuffle %128 %128 0 1 2 
                              f32_3 %130 = OpFNegate %129 
                              f32_3 %131 = OpFAdd %125 %130 
                              f32_4 %132 = OpLoad %9 
                              f32_4 %133 = OpVectorShuffle %132 %131 4 5 6 3 
                                             OpStore %9 %133 
                       Private f32* %135 = OpAccessChain %9 %27 
                                f32 %136 = OpLoad %135 
                         Input f32* %138 = OpAccessChain vs_TEXCOORD3 %137 
                                f32 %139 = OpLoad %138 
                                f32 %140 = OpFMul %136 %139 
                                             OpStore %134 %140 
                                f32 %143 = OpLoad %134 
                        Output f32* %145 = OpAccessChain %142 %27 
                                             OpStore %145 %143 
                                f32 %147 = OpLoad vs_TEXCOORDn0 
                                             OpStore %134 %147 
                                f32 %148 = OpLoad %134 
                                f32 %149 = OpExtInst %1 43 %148 %48 %49 
                                             OpStore %134 %149 
                                f32 %150 = OpLoad %134 
                              f32_3 %151 = OpCompositeConstruct %150 %150 %150 
                              f32_4 %152 = OpLoad %9 
                              f32_3 %153 = OpVectorShuffle %152 %152 0 1 2 
                              f32_3 %154 = OpFMul %151 %153 
                     Uniform f32_4* %155 = OpAccessChain %55 %126 
                              f32_4 %156 = OpLoad %155 
                              f32_3 %157 = OpVectorShuffle %156 %156 0 1 2 
                              f32_3 %158 = OpFAdd %154 %157 
                              f32_4 %159 = OpLoad %142 
                              f32_4 %160 = OpVectorShuffle %159 %158 4 5 6 3 
                                             OpStore %142 %160 
                                             OpReturn
                                             OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "FOG_LINEAR" "OUTLINE_ON" "UNDERLAY_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "FOG_LINEAR" "OUTLINE_ON" "UNDERLAY_ON" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	vec4 _FaceColor;
uniform 	float _FaceDilate;
uniform 	float _OutlineSoftness;
uniform 	vec4 _OutlineColor;
uniform 	float _OutlineWidth;
uniform 	float _UnderlayOffsetX;
uniform 	float _UnderlayOffsetY;
uniform 	float _UnderlayDilate;
uniform 	float _UnderlaySoftness;
uniform 	float _WeightNormal;
uniform 	float _WeightBold;
uniform 	float _ScaleRatioA;
uniform 	float _ScaleRatioC;
uniform 	float _VertexOffsetX;
uniform 	float _VertexOffsetY;
uniform 	vec4 _ClipRect;
uniform 	float _MaskSoftnessX;
uniform 	float _MaskSoftnessY;
uniform 	float _TextureWidth;
uniform 	float _TextureHeight;
uniform 	float _GradientScale;
uniform 	float _ScaleX;
uniform 	float _ScaleY;
uniform 	float _PerspectiveFilter;
uniform 	float _Sharpness;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_COLOR0;
in  vec2 in_TEXCOORD0;
in  vec2 in_TEXCOORD1;
out vec4 vs_COLOR0;
out vec4 vs_COLOR1;
out vec4 vs_TEXCOORD0;
out vec4 vs_TEXCOORD1;
out vec4 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec2 vs_TEXCOORD4;
out float vs_TEXCOORDn0;
vec2 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
vec4 u_xlat6;
vec3 u_xlat7;
vec2 u_xlat8;
float u_xlat14;
float u_xlat15;
float u_xlat21;
bool u_xlatb21;
void main()
{
    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
    gl_Position = u_xlat2;
    vs_COLOR0.w = _FaceColor.w;
    u_xlat3.xyz = in_COLOR0.xyz;
    u_xlat3.w = 1.0;
    u_xlat4 = u_xlat3 * _FaceColor;
    u_xlat3.xyz = u_xlat4.www * u_xlat4.xyz;
    vs_COLOR0.xyz = u_xlat3.xyz;
    u_xlat5.xyz = (-u_xlat3.xyz);
    u_xlat5.w = (-u_xlat4.w);
    u_xlat6.xyz = _OutlineColor.www * _OutlineColor.xyz;
    u_xlat6.w = _OutlineColor.w;
    u_xlat5 = u_xlat5 + u_xlat6;
    u_xlat14 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat14 = inversesqrt(u_xlat14);
    u_xlat1.xyz = vec3(u_xlat14) * u_xlat1.xyz;
    u_xlat3.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat3.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat3.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat14 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat14 = inversesqrt(u_xlat14);
    u_xlat3.xyz = vec3(u_xlat14) * u_xlat3.xyz;
    u_xlat14 = dot(u_xlat3.xyz, u_xlat1.xyz);
    u_xlat1.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;
    u_xlat1.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat1.xy;
    u_xlat1.xy = abs(u_xlat1.xy) * vec2(_ScaleX, _ScaleY);
    u_xlat1.xy = u_xlat2.ww / u_xlat1.xy;
    vs_TEXCOORDn0 = u_xlat2.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat21 = dot(u_xlat1.xy, u_xlat1.xy);
    u_xlat1.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) * vec2(0.25, 0.25) + u_xlat1.xy;
    vs_TEXCOORD2.zw = vec2(0.25, 0.25) / u_xlat1.xy;
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.x = abs(in_TEXCOORD1.y) * _GradientScale;
    u_xlat8.x = _Sharpness + 1.0;
    u_xlat1.x = u_xlat8.x * u_xlat1.x;
    u_xlat8.x = u_xlat21 * u_xlat1.x;
    u_xlat15 = (-_PerspectiveFilter) + 1.0;
    u_xlat15 = u_xlat15 * abs(u_xlat8.x);
    u_xlat21 = u_xlat21 * u_xlat1.x + (-u_xlat15);
    u_xlat14 = abs(u_xlat14) * u_xlat21 + u_xlat15;
    u_xlatb21 = hlslcc_mtx4x4glstate_matrix_projection[3].w==0.0;
    u_xlat14 = (u_xlatb21) ? u_xlat14 : u_xlat8.x;
    u_xlat21 = _OutlineSoftness * _ScaleRatioA;
    u_xlat21 = u_xlat21 * u_xlat14 + 1.0;
    u_xlat1.x = u_xlat14 / u_xlat21;
    u_xlat21 = _OutlineWidth * _ScaleRatioA;
    u_xlat21 = u_xlat21 * 0.5;
    u_xlat8.x = u_xlat1.x * u_xlat21;
    u_xlat8.x = u_xlat8.x + u_xlat8.x;
    u_xlat8.x = min(u_xlat8.x, 1.0);
    u_xlat8.x = sqrt(u_xlat8.x);
    u_xlat2 = u_xlat5 * u_xlat8.xxxx;
    vs_COLOR1.xyz = u_xlat4.xyz * u_xlat4.www + u_xlat2.xyz;
    vs_COLOR1.w = u_xlat3.w * _FaceColor.w + u_xlat2.w;
    u_xlat2 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));
    u_xlat2 = min(u_xlat2, vec4(2e+10, 2e+10, 2e+10, 2e+10));
    u_xlat8.xy = u_xlat0.xy + (-u_xlat2.xy);
    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + (-u_xlat2.xy);
    vs_TEXCOORD2.xy = (-u_xlat2.zw) + u_xlat0.xy;
    u_xlat0.xy = (-u_xlat2.xy) + u_xlat2.zw;
    vs_TEXCOORD0.zw = u_xlat8.xy / u_xlat0.xy;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlatb0 = 0.0>=in_TEXCOORD1.y;
    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);
    u_xlat7.x = (-_WeightNormal) + _WeightBold;
    u_xlat0.x = u_xlat0.x * u_xlat7.x + _WeightNormal;
    u_xlat0.x = u_xlat0.x * 0.25 + _FaceDilate;
    u_xlat0.x = u_xlat0.x * _ScaleRatioA;
    u_xlat0.x = (-u_xlat0.x) * 0.5 + 0.5;
    u_xlat1.w = u_xlat0.x * u_xlat1.x + -0.5;
    vs_TEXCOORD1.y = (-u_xlat21) * u_xlat1.x + u_xlat1.w;
    vs_TEXCOORD1.z = u_xlat21 * u_xlat1.x + u_xlat1.w;
    vs_TEXCOORD1.xw = u_xlat1.xw;
    vs_TEXCOORD3.z = in_COLOR0.w;
    vs_TEXCOORD3.w = 0.0;
    u_xlat1 = vec4(_UnderlaySoftness, _UnderlayDilate, _UnderlayOffsetX, _UnderlayOffsetY) * vec4(vec4(_ScaleRatioC, _ScaleRatioC, _ScaleRatioC, _ScaleRatioC));
    u_xlat7.xz = (-u_xlat1.zw) * vec2(_GradientScale);
    u_xlat7.xz = u_xlat7.xz / vec2(_TextureWidth, _TextureHeight);
    vs_TEXCOORD3.xy = u_xlat7.xz + in_TEXCOORD0.xy;
    u_xlat7.x = u_xlat1.x * u_xlat14 + 1.0;
    u_xlat7.x = u_xlat14 / u_xlat7.x;
    u_xlat14 = u_xlat1.y * 0.5;
    u_xlat0.x = u_xlat0.x * u_xlat7.x + -0.5;
    vs_TEXCOORD4.y = (-u_xlat14) * u_xlat7.x + u_xlat0.x;
    vs_TEXCOORD4.x = u_xlat7.x;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 unity_FogColor;
uniform 	vec4 _UnderlayColor;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
in  vec4 vs_COLOR0;
in  vec4 vs_COLOR1;
in  vec4 vs_TEXCOORD0;
in  vec4 vs_TEXCOORD1;
in  vec4 vs_TEXCOORD3;
in  vec2 vs_TEXCOORD4;
in  float vs_TEXCOORDn0;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
float u_xlat12;
void main()
{
    u_xlat0 = texture(_MainTex, vs_TEXCOORD3.xy);
    u_xlat0.x = u_xlat0.w * vs_TEXCOORD4.x + (-vs_TEXCOORD4.y);
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat1.xyz = _UnderlayColor.www * _UnderlayColor.xyz;
    u_xlat1.w = _UnderlayColor.w;
    u_xlat0 = u_xlat0.xxxx * u_xlat1;
    u_xlat1 = vs_COLOR0 + (-vs_COLOR1);
    u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2.xy = u_xlat2.ww * vs_TEXCOORD1.xx + (-vs_TEXCOORD1.zy);
    u_xlat2.xy = clamp(u_xlat2.xy, 0.0, 1.0);
    u_xlat1 = u_xlat2.xxxx * u_xlat1 + vs_COLOR1;
    u_xlat3 = u_xlat2.yyyy * u_xlat1;
    u_xlat1.x = (-u_xlat1.w) * u_xlat2.y + 1.0;
    u_xlat0 = u_xlat0 * u_xlat1.xxxx + u_xlat3;
    u_xlat0.xyz = u_xlat0.xyz * vs_TEXCOORD3.zzz + (-unity_FogColor.xyz);
    u_xlat12 = u_xlat0.w * vs_TEXCOORD3.z;
    SV_Target0.w = u_xlat12;
    u_xlat12 = vs_TEXCOORDn0;
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
    SV_Target0.xyz = vec3(u_xlat12) * u_xlat0.xyz + unity_FogColor.xyz;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "FOG_LINEAR" "OUTLINE_ON" "UNDERLAY_ON" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 677
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %12 %118 %122 %129 %196 %295 %324 %333 %436 %492 %498 %558 %576 %661 
                                                      OpName vs_TEXCOORDn0 "vs_TEXCOORDn0" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpDecorate %12 Location 12 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpDecorate %19 ArrayStride 19 
                                                      OpDecorate %20 ArrayStride 20 
                                                      OpDecorate %21 ArrayStride 21 
                                                      OpMemberDecorate %22 0 Offset 22 
                                                      OpMemberDecorate %22 1 Offset 22 
                                                      OpMemberDecorate %22 2 Offset 22 
                                                      OpMemberDecorate %22 3 Offset 22 
                                                      OpMemberDecorate %22 4 Offset 22 
                                                      OpMemberDecorate %22 5 Offset 22 
                                                      OpMemberDecorate %22 6 Offset 22 
                                                      OpMemberDecorate %22 7 Offset 22 
                                                      OpMemberDecorate %22 8 Offset 22 
                                                      OpMemberDecorate %22 9 Offset 22 
                                                      OpMemberDecorate %22 10 Offset 22 
                                                      OpMemberDecorate %22 11 Offset 22 
                                                      OpMemberDecorate %22 12 Offset 22 
                                                      OpMemberDecorate %22 13 Offset 22 
                                                      OpMemberDecorate %22 14 Offset 22 
                                                      OpMemberDecorate %22 15 Offset 22 
                                                      OpMemberDecorate %22 16 Offset 22 
                                                      OpMemberDecorate %22 17 Offset 22 
                                                      OpMemberDecorate %22 18 Offset 22 
                                                      OpMemberDecorate %22 19 Offset 22 
                                                      OpMemberDecorate %22 20 Offset 22 
                                                      OpMemberDecorate %22 21 Offset 22 
                                                      OpMemberDecorate %22 22 Offset 22 
                                                      OpMemberDecorate %22 23 Offset 22 
                                                      OpMemberDecorate %22 24 Offset 22 
                                                      OpMemberDecorate %22 25 Offset 22 
                                                      OpMemberDecorate %22 26 Offset 22 
                                                      OpMemberDecorate %22 27 Offset 22 
                                                      OpMemberDecorate %22 28 Offset 22 
                                                      OpMemberDecorate %22 29 Offset 22 
                                                      OpMemberDecorate %22 30 Offset 22 
                                                      OpMemberDecorate %22 31 Offset 22 
                                                      OpMemberDecorate %22 32 Offset 22 
                                                      OpDecorate %22 Block 
                                                      OpDecorate %24 DescriptorSet 24 
                                                      OpDecorate %24 Binding 24 
                                                      OpMemberDecorate %116 0 BuiltIn 116 
                                                      OpMemberDecorate %116 1 BuiltIn 116 
                                                      OpMemberDecorate %116 2 BuiltIn 116 
                                                      OpDecorate %116 Block 
                                                      OpDecorate %122 Location 122 
                                                      OpDecorate %129 Location 129 
                                                      OpDecorate %196 Location 196 
                                                      OpDecorate vs_TEXCOORDn0 Location 295 
                                                      OpDecorate vs_TEXCOORD2 Location 324 
                                                      OpDecorate %333 Location 333 
                                                      OpDecorate %436 Location 436 
                                                      OpDecorate vs_TEXCOORD0 Location 492 
                                                      OpDecorate %498 Location 498 
                                                      OpDecorate vs_TEXCOORD1 Location 558 
                                                      OpDecorate vs_TEXCOORD3 Location 576 
                                                      OpDecorate vs_TEXCOORD4 Location 661 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 2 
                                               %8 = OpTypePointer Private %7 
                                Private f32_2* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 4 
                                              %11 = OpTypePointer Input %10 
                                 Input f32_4* %12 = OpVariable Input 
                                              %15 = OpTypeVector %6 3 
                                              %16 = OpTypeInt 32 0 
                                          u32 %17 = OpConstant 4 
                                              %18 = OpTypeArray %10 %17 
                                              %19 = OpTypeArray %10 %17 
                                              %20 = OpTypeArray %10 %17 
                                              %21 = OpTypeArray %10 %17 
                                              %22 = OpTypeStruct %15 %10 %10 %18 %19 %20 %21 %10 %10 %6 %6 %10 %6 %6 %6 %6 %6 %6 %6 %6 %6 %6 %6 %10 %6 %6 %6 %6 %6 %6 %6 %6 %6 
                                              %23 = OpTypePointer Uniform %22 
Uniform struct {f32_3; f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4[4]; f32_4; f32_4; f32; f32; f32_4; f32; f32; f32; f32; f32; f32; f32; f32; f32; f32; f32; f32_4; f32; f32; f32; f32; f32; f32; f32; f32; f32;}* %24 = OpVariable Uniform 
                                              %25 = OpTypeInt 32 1 
                                          i32 %26 = OpConstant 21 
                                              %27 = OpTypePointer Uniform %6 
                                          i32 %30 = OpConstant 22 
                                              %35 = OpTypePointer Private %10 
                               Private f32_4* %36 = OpVariable Private 
                                          i32 %39 = OpConstant 3 
                                          i32 %40 = OpConstant 1 
                                              %41 = OpTypePointer Uniform %10 
                                          i32 %45 = OpConstant 0 
                                          i32 %53 = OpConstant 2 
                               Private f32_4* %61 = OpVariable Private 
                                              %80 = OpTypePointer Uniform %15 
                               Private f32_4* %86 = OpVariable Private 
                                          i32 %89 = OpConstant 6 
                                         u32 %114 = OpConstant 1 
                                             %115 = OpTypeArray %6 %114 
                                             %116 = OpTypeStruct %10 %6 %115 
                                             %117 = OpTypePointer Output %116 
        Output struct {f32_4; f32; f32[1];}* %118 = OpVariable Output 
                                             %120 = OpTypePointer Output %10 
                               Output f32_4* %122 = OpVariable Output 
                                         i32 %123 = OpConstant 8 
                                         u32 %124 = OpConstant 3 
                                             %127 = OpTypePointer Output %6 
                                Input f32_4* %129 = OpVariable Input 
                                         f32 %134 = OpConstant 3.674022E-40 
                                             %135 = OpTypePointer Private %6 
                              Private f32_4* %137 = OpVariable Private 
                              Private f32_4* %153 = OpVariable Private 
                              Private f32_4* %163 = OpVariable Private 
                                         i32 %164 = OpConstant 11 
                                Private f32* %180 = OpVariable Private 
                                             %195 = OpTypePointer Input %15 
                                Input f32_3* %196 = OpVariable Input 
                                         i32 %198 = OpConstant 4 
                                         u32 %203 = OpConstant 0 
                                         u32 %216 = OpConstant 2 
                                         i32 %240 = OpConstant 5 
                                         i32 %262 = OpConstant 29 
                                         i32 %265 = OpConstant 30 
                                Private f32* %279 = OpVariable Private 
                                         f32 %293 = OpConstant 3.674022E-40 
                        Output f32* vs_TEXCOORDn0 = OpVariable Output 
                                         i32 %297 = OpConstant 7 
                                         i32 %309 = OpConstant 24 
                                         i32 %312 = OpConstant 25 
                                         f32 %316 = OpConstant 3.674022E-40 
                                       f32_2 %317 = OpConstantComposite %316 %316 
                       Output f32_4* vs_TEXCOORD2 = OpVariable Output 
                                             %332 = OpTypePointer Input %7 
                                Input f32_2* %333 = OpVariable Input 
                                             %334 = OpTypePointer Input %6 
                                         i32 %338 = OpConstant 28 
                              Private f32_2* %343 = OpVariable Private 
                                         i32 %344 = OpConstant 32 
                                Private f32* %360 = OpVariable Private 
                                         i32 %361 = OpConstant 31 
                                             %384 = OpTypeBool 
                                             %385 = OpTypePointer Private %384 
                               Private bool* %386 = OpVariable Private 
                                             %391 = OpTypePointer Function %6 
                                         i32 %400 = OpConstant 10 
                                         i32 %403 = OpConstant 19 
                                         i32 %415 = OpConstant 12 
                               Output f32_4* %436 = OpVariable Output 
                                         i32 %456 = OpConstant 23 
                                         f32 %459 = OpConstant 3.674022E-40 
                                       f32_4 %460 = OpConstantComposite %459 %459 %459 %459 
                                         f32 %463 = OpConstant 3.674022E-40 
                                       f32_4 %464 = OpConstantComposite %463 %463 %463 %463 
                                         f32 %472 = OpConstant 3.674022E-40 
                                       f32_2 %473 = OpConstantComposite %472 %472 
                       Output f32_4* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_2* %498 = OpVariable Input 
                               Private bool* %502 = OpVariable Private 
                                             %509 = OpTypePointer Private %15 
                              Private f32_3* %510 = OpVariable Private 
                                         i32 %511 = OpConstant 17 
                                         i32 %515 = OpConstant 18 
                                         i32 %532 = OpConstant 9 
                                         f32 %546 = OpConstant 3.674022E-40 
                                         f32 %555 = OpConstant 3.674022E-40 
                       Output f32_4* vs_TEXCOORD1 = OpVariable Output 
                       Output f32_4* vs_TEXCOORD3 = OpVariable Output 
                                         i32 %581 = OpConstant 16 
                                         i32 %584 = OpConstant 15 
                                         i32 %587 = OpConstant 13 
                                         i32 %590 = OpConstant 14 
                                         i32 %594 = OpConstant 20 
                                         i32 %621 = OpConstant 26 
                                         i32 %624 = OpConstant 27 
                                             %660 = OpTypePointer Output %7 
                       Output f32_2* vs_TEXCOORD4 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                               Function f32* %392 = OpVariable Function 
                                        f32_4 %13 = OpLoad %12 
                                        f32_2 %14 = OpVectorShuffle %13 %13 0 1 
                                 Uniform f32* %28 = OpAccessChain %24 %26 
                                          f32 %29 = OpLoad %28 
                                 Uniform f32* %31 = OpAccessChain %24 %30 
                                          f32 %32 = OpLoad %31 
                                        f32_2 %33 = OpCompositeConstruct %29 %32 
                                        f32_2 %34 = OpFAdd %14 %33 
                                                      OpStore %9 %34 
                                        f32_2 %37 = OpLoad %9 
                                        f32_4 %38 = OpVectorShuffle %37 %37 1 1 1 1 
                               Uniform f32_4* %42 = OpAccessChain %24 %39 %40 
                                        f32_4 %43 = OpLoad %42 
                                        f32_4 %44 = OpFMul %38 %43 
                                                      OpStore %36 %44 
                               Uniform f32_4* %46 = OpAccessChain %24 %39 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_2 %48 = OpLoad %9 
                                        f32_4 %49 = OpVectorShuffle %48 %48 0 0 0 0 
                                        f32_4 %50 = OpFMul %47 %49 
                                        f32_4 %51 = OpLoad %36 
                                        f32_4 %52 = OpFAdd %50 %51 
                                                      OpStore %36 %52 
                               Uniform f32_4* %54 = OpAccessChain %24 %39 %53 
                                        f32_4 %55 = OpLoad %54 
                                        f32_4 %56 = OpLoad %12 
                                        f32_4 %57 = OpVectorShuffle %56 %56 2 2 2 2 
                                        f32_4 %58 = OpFMul %55 %57 
                                        f32_4 %59 = OpLoad %36 
                                        f32_4 %60 = OpFAdd %58 %59 
                                                      OpStore %36 %60 
                                        f32_4 %62 = OpLoad %36 
                               Uniform f32_4* %63 = OpAccessChain %24 %39 %39 
                                        f32_4 %64 = OpLoad %63 
                                        f32_4 %65 = OpFAdd %62 %64 
                                                      OpStore %61 %65 
                               Uniform f32_4* %66 = OpAccessChain %24 %39 %39 
                                        f32_4 %67 = OpLoad %66 
                                        f32_3 %68 = OpVectorShuffle %67 %67 0 1 2 
                                        f32_4 %69 = OpLoad %12 
                                        f32_3 %70 = OpVectorShuffle %69 %69 3 3 3 
                                        f32_3 %71 = OpFMul %68 %70 
                                        f32_4 %72 = OpLoad %36 
                                        f32_3 %73 = OpVectorShuffle %72 %72 0 1 2 
                                        f32_3 %74 = OpFAdd %71 %73 
                                        f32_4 %75 = OpLoad %36 
                                        f32_4 %76 = OpVectorShuffle %75 %74 4 5 6 3 
                                                      OpStore %36 %76 
                                        f32_4 %77 = OpLoad %36 
                                        f32_3 %78 = OpVectorShuffle %77 %77 0 1 2 
                                        f32_3 %79 = OpFNegate %78 
                               Uniform f32_3* %81 = OpAccessChain %24 %45 
                                        f32_3 %82 = OpLoad %81 
                                        f32_3 %83 = OpFAdd %79 %82 
                                        f32_4 %84 = OpLoad %36 
                                        f32_4 %85 = OpVectorShuffle %84 %83 4 5 6 3 
                                                      OpStore %36 %85 
                                        f32_4 %87 = OpLoad %61 
                                        f32_4 %88 = OpVectorShuffle %87 %87 1 1 1 1 
                               Uniform f32_4* %90 = OpAccessChain %24 %89 %40 
                                        f32_4 %91 = OpLoad %90 
                                        f32_4 %92 = OpFMul %88 %91 
                                                      OpStore %86 %92 
                               Uniform f32_4* %93 = OpAccessChain %24 %89 %45 
                                        f32_4 %94 = OpLoad %93 
                                        f32_4 %95 = OpLoad %61 
                                        f32_4 %96 = OpVectorShuffle %95 %95 0 0 0 0 
                                        f32_4 %97 = OpFMul %94 %96 
                                        f32_4 %98 = OpLoad %86 
                                        f32_4 %99 = OpFAdd %97 %98 
                                                      OpStore %86 %99 
                              Uniform f32_4* %100 = OpAccessChain %24 %89 %53 
                                       f32_4 %101 = OpLoad %100 
                                       f32_4 %102 = OpLoad %61 
                                       f32_4 %103 = OpVectorShuffle %102 %102 2 2 2 2 
                                       f32_4 %104 = OpFMul %101 %103 
                                       f32_4 %105 = OpLoad %86 
                                       f32_4 %106 = OpFAdd %104 %105 
                                                      OpStore %86 %106 
                              Uniform f32_4* %107 = OpAccessChain %24 %89 %39 
                                       f32_4 %108 = OpLoad %107 
                                       f32_4 %109 = OpLoad %61 
                                       f32_4 %110 = OpVectorShuffle %109 %109 3 3 3 3 
                                       f32_4 %111 = OpFMul %108 %110 
                                       f32_4 %112 = OpLoad %86 
                                       f32_4 %113 = OpFAdd %111 %112 
                                                      OpStore %61 %113 
                                       f32_4 %119 = OpLoad %61 
                               Output f32_4* %121 = OpAccessChain %118 %45 
                                                      OpStore %121 %119 
                                Uniform f32* %125 = OpAccessChain %24 %123 %124 
                                         f32 %126 = OpLoad %125 
                                 Output f32* %128 = OpAccessChain %122 %124 
                                                      OpStore %128 %126 
                                       f32_4 %130 = OpLoad %129 
                                       f32_3 %131 = OpVectorShuffle %130 %130 0 1 2 
                                       f32_4 %132 = OpLoad %86 
                                       f32_4 %133 = OpVectorShuffle %132 %131 4 5 6 3 
                                                      OpStore %86 %133 
                                Private f32* %136 = OpAccessChain %86 %124 
                                                      OpStore %136 %134 
                                       f32_4 %138 = OpLoad %86 
                              Uniform f32_4* %139 = OpAccessChain %24 %123 
                                       f32_4 %140 = OpLoad %139 
                                       f32_4 %141 = OpFMul %138 %140 
                                                      OpStore %137 %141 
                                       f32_4 %142 = OpLoad %137 
                                       f32_3 %143 = OpVectorShuffle %142 %142 3 3 3 
                                       f32_4 %144 = OpLoad %137 
                                       f32_3 %145 = OpVectorShuffle %144 %144 0 1 2 
                                       f32_3 %146 = OpFMul %143 %145 
                                       f32_4 %147 = OpLoad %86 
                                       f32_4 %148 = OpVectorShuffle %147 %146 4 5 6 3 
                                                      OpStore %86 %148 
                                       f32_4 %149 = OpLoad %86 
                                       f32_3 %150 = OpVectorShuffle %149 %149 0 1 2 
                                       f32_4 %151 = OpLoad %122 
                                       f32_4 %152 = OpVectorShuffle %151 %150 4 5 6 3 
                                                      OpStore %122 %152 
                                       f32_4 %154 = OpLoad %86 
                                       f32_3 %155 = OpVectorShuffle %154 %154 0 1 2 
                                       f32_3 %156 = OpFNegate %155 
                                       f32_4 %157 = OpLoad %153 
                                       f32_4 %158 = OpVectorShuffle %157 %156 4 5 6 3 
                                                      OpStore %153 %158 
                                Private f32* %159 = OpAccessChain %137 %124 
                                         f32 %160 = OpLoad %159 
                                         f32 %161 = OpFNegate %160 
                                Private f32* %162 = OpAccessChain %153 %124 
                                                      OpStore %162 %161 
                              Uniform f32_4* %165 = OpAccessChain %24 %164 
                                       f32_4 %166 = OpLoad %165 
                                       f32_3 %167 = OpVectorShuffle %166 %166 3 3 3 
                              Uniform f32_4* %168 = OpAccessChain %24 %164 
                                       f32_4 %169 = OpLoad %168 
                                       f32_3 %170 = OpVectorShuffle %169 %169 0 1 2 
                                       f32_3 %171 = OpFMul %167 %170 
                                       f32_4 %172 = OpLoad %163 
                                       f32_4 %173 = OpVectorShuffle %172 %171 4 5 6 3 
                                                      OpStore %163 %173 
                                Uniform f32* %174 = OpAccessChain %24 %164 %124 
                                         f32 %175 = OpLoad %174 
                                Private f32* %176 = OpAccessChain %163 %124 
                                                      OpStore %176 %175 
                                       f32_4 %177 = OpLoad %153 
                                       f32_4 %178 = OpLoad %163 
                                       f32_4 %179 = OpFAdd %177 %178 
                                                      OpStore %153 %179 
                                       f32_4 %181 = OpLoad %36 
                                       f32_3 %182 = OpVectorShuffle %181 %181 0 1 2 
                                       f32_4 %183 = OpLoad %36 
                                       f32_3 %184 = OpVectorShuffle %183 %183 0 1 2 
                                         f32 %185 = OpDot %182 %184 
                                                      OpStore %180 %185 
                                         f32 %186 = OpLoad %180 
                                         f32 %187 = OpExtInst %1 32 %186 
                                                      OpStore %180 %187 
                                         f32 %188 = OpLoad %180 
                                       f32_3 %189 = OpCompositeConstruct %188 %188 %188 
                                       f32_4 %190 = OpLoad %36 
                                       f32_3 %191 = OpVectorShuffle %190 %190 0 1 2 
                                       f32_3 %192 = OpFMul %189 %191 
                                       f32_4 %193 = OpLoad %36 
                                       f32_4 %194 = OpVectorShuffle %193 %192 4 5 6 3 
                                                      OpStore %36 %194 
                                       f32_3 %197 = OpLoad %196 
                              Uniform f32_4* %199 = OpAccessChain %24 %198 %45 
                                       f32_4 %200 = OpLoad %199 
                                       f32_3 %201 = OpVectorShuffle %200 %200 0 1 2 
                                         f32 %202 = OpDot %197 %201 
                                Private f32* %204 = OpAccessChain %86 %203 
                                                      OpStore %204 %202 
                                       f32_3 %205 = OpLoad %196 
                              Uniform f32_4* %206 = OpAccessChain %24 %198 %40 
                                       f32_4 %207 = OpLoad %206 
                                       f32_3 %208 = OpVectorShuffle %207 %207 0 1 2 
                                         f32 %209 = OpDot %205 %208 
                                Private f32* %210 = OpAccessChain %86 %114 
                                                      OpStore %210 %209 
                                       f32_3 %211 = OpLoad %196 
                              Uniform f32_4* %212 = OpAccessChain %24 %198 %53 
                                       f32_4 %213 = OpLoad %212 
                                       f32_3 %214 = OpVectorShuffle %213 %213 0 1 2 
                                         f32 %215 = OpDot %211 %214 
                                Private f32* %217 = OpAccessChain %86 %216 
                                                      OpStore %217 %215 
                                       f32_4 %218 = OpLoad %86 
                                       f32_3 %219 = OpVectorShuffle %218 %218 0 1 2 
                                       f32_4 %220 = OpLoad %86 
                                       f32_3 %221 = OpVectorShuffle %220 %220 0 1 2 
                                         f32 %222 = OpDot %219 %221 
                                                      OpStore %180 %222 
                                         f32 %223 = OpLoad %180 
                                         f32 %224 = OpExtInst %1 32 %223 
                                                      OpStore %180 %224 
                                         f32 %225 = OpLoad %180 
                                       f32_3 %226 = OpCompositeConstruct %225 %225 %225 
                                       f32_4 %227 = OpLoad %86 
                                       f32_3 %228 = OpVectorShuffle %227 %227 0 1 2 
                                       f32_3 %229 = OpFMul %226 %228 
                                       f32_4 %230 = OpLoad %86 
                                       f32_4 %231 = OpVectorShuffle %230 %229 4 5 6 3 
                                                      OpStore %86 %231 
                                       f32_4 %232 = OpLoad %86 
                                       f32_3 %233 = OpVectorShuffle %232 %232 0 1 2 
                                       f32_4 %234 = OpLoad %36 
                                       f32_3 %235 = OpVectorShuffle %234 %234 0 1 2 
                                         f32 %236 = OpDot %233 %235 
                                                      OpStore %180 %236 
                              Uniform f32_4* %237 = OpAccessChain %24 %53 
                                       f32_4 %238 = OpLoad %237 
                                       f32_2 %239 = OpVectorShuffle %238 %238 1 1 
                              Uniform f32_4* %241 = OpAccessChain %24 %240 %40 
                                       f32_4 %242 = OpLoad %241 
                                       f32_2 %243 = OpVectorShuffle %242 %242 0 1 
                                       f32_2 %244 = OpFMul %239 %243 
                                       f32_4 %245 = OpLoad %36 
                                       f32_4 %246 = OpVectorShuffle %245 %244 4 5 2 3 
                                                      OpStore %36 %246 
                              Uniform f32_4* %247 = OpAccessChain %24 %240 %45 
                                       f32_4 %248 = OpLoad %247 
                                       f32_2 %249 = OpVectorShuffle %248 %248 0 1 
                              Uniform f32_4* %250 = OpAccessChain %24 %53 
                                       f32_4 %251 = OpLoad %250 
                                       f32_2 %252 = OpVectorShuffle %251 %251 0 0 
                                       f32_2 %253 = OpFMul %249 %252 
                                       f32_4 %254 = OpLoad %36 
                                       f32_2 %255 = OpVectorShuffle %254 %254 0 1 
                                       f32_2 %256 = OpFAdd %253 %255 
                                       f32_4 %257 = OpLoad %36 
                                       f32_4 %258 = OpVectorShuffle %257 %256 4 5 2 3 
                                                      OpStore %36 %258 
                                       f32_4 %259 = OpLoad %36 
                                       f32_2 %260 = OpVectorShuffle %259 %259 0 1 
                                       f32_2 %261 = OpExtInst %1 4 %260 
                                Uniform f32* %263 = OpAccessChain %24 %262 
                                         f32 %264 = OpLoad %263 
                                Uniform f32* %266 = OpAccessChain %24 %265 
                                         f32 %267 = OpLoad %266 
                                       f32_2 %268 = OpCompositeConstruct %264 %267 
                                       f32_2 %269 = OpFMul %261 %268 
                                       f32_4 %270 = OpLoad %36 
                                       f32_4 %271 = OpVectorShuffle %270 %269 4 5 2 3 
                                                      OpStore %36 %271 
                                       f32_4 %272 = OpLoad %61 
                                       f32_2 %273 = OpVectorShuffle %272 %272 3 3 
                                       f32_4 %274 = OpLoad %36 
                                       f32_2 %275 = OpVectorShuffle %274 %274 0 1 
                                       f32_2 %276 = OpFDiv %273 %275 
                                       f32_4 %277 = OpLoad %36 
                                       f32_4 %278 = OpVectorShuffle %277 %276 4 5 2 3 
                                                      OpStore %36 %278 
                                Private f32* %280 = OpAccessChain %61 %216 
                                         f32 %281 = OpLoad %280 
                                Uniform f32* %282 = OpAccessChain %24 %40 %114 
                                         f32 %283 = OpLoad %282 
                                         f32 %284 = OpFDiv %281 %283 
                                                      OpStore %279 %284 
                                         f32 %285 = OpLoad %279 
                                         f32 %286 = OpFNegate %285 
                                         f32 %287 = OpFAdd %286 %134 
                                                      OpStore %279 %287 
                                         f32 %288 = OpLoad %279 
                                Uniform f32* %289 = OpAccessChain %24 %40 %216 
                                         f32 %290 = OpLoad %289 
                                         f32 %291 = OpFMul %288 %290 
                                                      OpStore %279 %291 
                                         f32 %292 = OpLoad %279 
                                         f32 %294 = OpExtInst %1 40 %292 %293 
                                                      OpStore %279 %294 
                                         f32 %296 = OpLoad %279 
                                Uniform f32* %298 = OpAccessChain %24 %297 %216 
                                         f32 %299 = OpLoad %298 
                                         f32 %300 = OpFMul %296 %299 
                                Uniform f32* %301 = OpAccessChain %24 %297 %124 
                                         f32 %302 = OpLoad %301 
                                         f32 %303 = OpFAdd %300 %302 
                                                      OpStore vs_TEXCOORDn0 %303 
                                       f32_4 %304 = OpLoad %36 
                                       f32_2 %305 = OpVectorShuffle %304 %304 0 1 
                                       f32_4 %306 = OpLoad %36 
                                       f32_2 %307 = OpVectorShuffle %306 %306 0 1 
                                         f32 %308 = OpDot %305 %307 
                                                      OpStore %279 %308 
                                Uniform f32* %310 = OpAccessChain %24 %309 
                                         f32 %311 = OpLoad %310 
                                Uniform f32* %313 = OpAccessChain %24 %312 
                                         f32 %314 = OpLoad %313 
                                       f32_2 %315 = OpCompositeConstruct %311 %314 
                                       f32_2 %318 = OpFMul %315 %317 
                                       f32_4 %319 = OpLoad %36 
                                       f32_2 %320 = OpVectorShuffle %319 %319 0 1 
                                       f32_2 %321 = OpFAdd %318 %320 
                                       f32_4 %322 = OpLoad %36 
                                       f32_4 %323 = OpVectorShuffle %322 %321 4 5 2 3 
                                                      OpStore %36 %323 
                                       f32_4 %325 = OpLoad %36 
                                       f32_2 %326 = OpVectorShuffle %325 %325 0 1 
                                       f32_2 %327 = OpFDiv %317 %326 
                                       f32_4 %328 = OpLoad vs_TEXCOORD2 
                                       f32_4 %329 = OpVectorShuffle %328 %327 0 1 4 5 
                                                      OpStore vs_TEXCOORD2 %329 
                                         f32 %330 = OpLoad %279 
                                         f32 %331 = OpExtInst %1 32 %330 
                                                      OpStore %279 %331 
                                  Input f32* %335 = OpAccessChain %333 %114 
                                         f32 %336 = OpLoad %335 
                                         f32 %337 = OpExtInst %1 4 %336 
                                Uniform f32* %339 = OpAccessChain %24 %338 
                                         f32 %340 = OpLoad %339 
                                         f32 %341 = OpFMul %337 %340 
                                Private f32* %342 = OpAccessChain %36 %203 
                                                      OpStore %342 %341 
                                Uniform f32* %345 = OpAccessChain %24 %344 
                                         f32 %346 = OpLoad %345 
                                         f32 %347 = OpFAdd %346 %134 
                                Private f32* %348 = OpAccessChain %343 %203 
                                                      OpStore %348 %347 
                                Private f32* %349 = OpAccessChain %343 %203 
                                         f32 %350 = OpLoad %349 
                                Private f32* %351 = OpAccessChain %36 %203 
                                         f32 %352 = OpLoad %351 
                                         f32 %353 = OpFMul %350 %352 
                                Private f32* %354 = OpAccessChain %36 %203 
                                                      OpStore %354 %353 
                                         f32 %355 = OpLoad %279 
                                Private f32* %356 = OpAccessChain %36 %203 
                                         f32 %357 = OpLoad %356 
                                         f32 %358 = OpFMul %355 %357 
                                Private f32* %359 = OpAccessChain %343 %203 
                                                      OpStore %359 %358 
                                Uniform f32* %362 = OpAccessChain %24 %361 
                                         f32 %363 = OpLoad %362 
                                         f32 %364 = OpFNegate %363 
                                         f32 %365 = OpFAdd %364 %134 
                                                      OpStore %360 %365 
                                         f32 %366 = OpLoad %360 
                                Private f32* %367 = OpAccessChain %343 %203 
                                         f32 %368 = OpLoad %367 
                                         f32 %369 = OpExtInst %1 4 %368 
                                         f32 %370 = OpFMul %366 %369 
                                                      OpStore %360 %370 
                                         f32 %371 = OpLoad %279 
                                Private f32* %372 = OpAccessChain %36 %203 
                                         f32 %373 = OpLoad %372 
                                         f32 %374 = OpFMul %371 %373 
                                         f32 %375 = OpLoad %360 
                                         f32 %376 = OpFNegate %375 
                                         f32 %377 = OpFAdd %374 %376 
                                                      OpStore %279 %377 
                                         f32 %378 = OpLoad %180 
                                         f32 %379 = OpExtInst %1 4 %378 
                                         f32 %380 = OpLoad %279 
                                         f32 %381 = OpFMul %379 %380 
                                         f32 %382 = OpLoad %360 
                                         f32 %383 = OpFAdd %381 %382 
                                                      OpStore %180 %383 
                                Uniform f32* %387 = OpAccessChain %24 %240 %39 %124 
                                         f32 %388 = OpLoad %387 
                                        bool %389 = OpFOrdEqual %388 %293 
                                                      OpStore %386 %389 
                                        bool %390 = OpLoad %386 
                                                      OpSelectionMerge %394 None 
                                                      OpBranchConditional %390 %393 %396 
                                             %393 = OpLabel 
                                         f32 %395 = OpLoad %180 
                                                      OpStore %392 %395 
                                                      OpBranch %394 
                                             %396 = OpLabel 
                                Private f32* %397 = OpAccessChain %343 %203 
                                         f32 %398 = OpLoad %397 
                                                      OpStore %392 %398 
                                                      OpBranch %394 
                                             %394 = OpLabel 
                                         f32 %399 = OpLoad %392 
                                                      OpStore %180 %399 
                                Uniform f32* %401 = OpAccessChain %24 %400 
                                         f32 %402 = OpLoad %401 
                                Uniform f32* %404 = OpAccessChain %24 %403 
                                         f32 %405 = OpLoad %404 
                                         f32 %406 = OpFMul %402 %405 
                                                      OpStore %279 %406 
                                         f32 %407 = OpLoad %279 
                                         f32 %408 = OpLoad %180 
                                         f32 %409 = OpFMul %407 %408 
                                         f32 %410 = OpFAdd %409 %134 
                                                      OpStore %279 %410 
                                         f32 %411 = OpLoad %180 
                                         f32 %412 = OpLoad %279 
                                         f32 %413 = OpFDiv %411 %412 
                                Private f32* %414 = OpAccessChain %36 %203 
                                                      OpStore %414 %413 
                                Uniform f32* %416 = OpAccessChain %24 %415 
                                         f32 %417 = OpLoad %416 
                                Uniform f32* %418 = OpAccessChain %24 %403 
                                         f32 %419 = OpLoad %418 
                                         f32 %420 = OpFMul %417 %419 
                                                      OpStore %279 %420 
                                Private f32* %421 = OpAccessChain %36 %203 
                                         f32 %422 = OpLoad %421 
                                         f32 %423 = OpLoad %279 
                                         f32 %424 = OpFMul %422 %423 
                                                      OpStore %279 %424 
                                         f32 %425 = OpLoad %279 
                                         f32 %426 = OpExtInst %1 37 %425 %134 
                                Private f32* %427 = OpAccessChain %343 %203 
                                                      OpStore %427 %426 
                                Private f32* %428 = OpAccessChain %343 %203 
                                         f32 %429 = OpLoad %428 
                                         f32 %430 = OpExtInst %1 31 %429 
                                Private f32* %431 = OpAccessChain %343 %203 
                                                      OpStore %431 %430 
                                       f32_4 %432 = OpLoad %153 
                                       f32_2 %433 = OpLoad %343 
                                       f32_4 %434 = OpVectorShuffle %433 %433 0 0 0 0 
                                       f32_4 %435 = OpFMul %432 %434 
                                                      OpStore %61 %435 
                                       f32_4 %437 = OpLoad %137 
                                       f32_3 %438 = OpVectorShuffle %437 %437 0 1 2 
                                       f32_4 %439 = OpLoad %137 
                                       f32_3 %440 = OpVectorShuffle %439 %439 3 3 3 
                                       f32_3 %441 = OpFMul %438 %440 
                                       f32_4 %442 = OpLoad %61 
                                       f32_3 %443 = OpVectorShuffle %442 %442 0 1 2 
                                       f32_3 %444 = OpFAdd %441 %443 
                                       f32_4 %445 = OpLoad %436 
                                       f32_4 %446 = OpVectorShuffle %445 %444 4 5 6 3 
                                                      OpStore %436 %446 
                                Private f32* %447 = OpAccessChain %86 %124 
                                         f32 %448 = OpLoad %447 
                                Uniform f32* %449 = OpAccessChain %24 %123 %124 
                                         f32 %450 = OpLoad %449 
                                         f32 %451 = OpFMul %448 %450 
                                Private f32* %452 = OpAccessChain %61 %124 
                                         f32 %453 = OpLoad %452 
                                         f32 %454 = OpFAdd %451 %453 
                                 Output f32* %455 = OpAccessChain %436 %124 
                                                      OpStore %455 %454 
                              Uniform f32_4* %457 = OpAccessChain %24 %456 
                                       f32_4 %458 = OpLoad %457 
                                       f32_4 %461 = OpExtInst %1 40 %458 %460 
                                                      OpStore %61 %461 
                                       f32_4 %462 = OpLoad %61 
                                       f32_4 %465 = OpExtInst %1 37 %462 %464 
                                                      OpStore %61 %465 
                                       f32_2 %466 = OpLoad %9 
                                       f32_4 %467 = OpLoad %61 
                                       f32_2 %468 = OpVectorShuffle %467 %467 0 1 
                                       f32_2 %469 = OpFNegate %468 
                                       f32_2 %470 = OpFAdd %466 %469 
                                                      OpStore %343 %470 
                                       f32_2 %471 = OpLoad %9 
                                       f32_2 %474 = OpFMul %471 %473 
                                       f32_4 %475 = OpLoad %61 
                                       f32_2 %476 = OpVectorShuffle %475 %475 0 1 
                                       f32_2 %477 = OpFNegate %476 
                                       f32_2 %478 = OpFAdd %474 %477 
                                                      OpStore %9 %478 
                                       f32_4 %479 = OpLoad %61 
                                       f32_2 %480 = OpVectorShuffle %479 %479 2 3 
                                       f32_2 %481 = OpFNegate %480 
                                       f32_2 %482 = OpLoad %9 
                                       f32_2 %483 = OpFAdd %481 %482 
                                       f32_4 %484 = OpLoad vs_TEXCOORD2 
                                       f32_4 %485 = OpVectorShuffle %484 %483 4 5 2 3 
                                                      OpStore vs_TEXCOORD2 %485 
                                       f32_4 %486 = OpLoad %61 
                                       f32_2 %487 = OpVectorShuffle %486 %486 0 1 
                                       f32_2 %488 = OpFNegate %487 
                                       f32_4 %489 = OpLoad %61 
                                       f32_2 %490 = OpVectorShuffle %489 %489 2 3 
                                       f32_2 %491 = OpFAdd %488 %490 
                                                      OpStore %9 %491 
                                       f32_2 %493 = OpLoad %343 
                                       f32_2 %494 = OpLoad %9 
                                       f32_2 %495 = OpFDiv %493 %494 
                                       f32_4 %496 = OpLoad vs_TEXCOORD0 
                                       f32_4 %497 = OpVectorShuffle %496 %495 0 1 4 5 
                                                      OpStore vs_TEXCOORD0 %497 
                                       f32_2 %499 = OpLoad %498 
                                       f32_4 %500 = OpLoad vs_TEXCOORD0 
                                       f32_4 %501 = OpVectorShuffle %500 %499 4 5 2 3 
                                                      OpStore vs_TEXCOORD0 %501 
                                  Input f32* %503 = OpAccessChain %333 %114 
                                         f32 %504 = OpLoad %503 
                                        bool %505 = OpFOrdGreaterThanEqual %293 %504 
                                                      OpStore %502 %505 
                                        bool %506 = OpLoad %502 
                                         f32 %507 = OpSelect %506 %134 %293 
                                Private f32* %508 = OpAccessChain %9 %203 
                                                      OpStore %508 %507 
                                Uniform f32* %512 = OpAccessChain %24 %511 
                                         f32 %513 = OpLoad %512 
                                         f32 %514 = OpFNegate %513 
                                Uniform f32* %516 = OpAccessChain %24 %515 
                                         f32 %517 = OpLoad %516 
                                         f32 %518 = OpFAdd %514 %517 
                                Private f32* %519 = OpAccessChain %510 %203 
                                                      OpStore %519 %518 
                                Private f32* %520 = OpAccessChain %9 %203 
                                         f32 %521 = OpLoad %520 
                                Private f32* %522 = OpAccessChain %510 %203 
                                         f32 %523 = OpLoad %522 
                                         f32 %524 = OpFMul %521 %523 
                                Uniform f32* %525 = OpAccessChain %24 %511 
                                         f32 %526 = OpLoad %525 
                                         f32 %527 = OpFAdd %524 %526 
                                Private f32* %528 = OpAccessChain %9 %203 
                                                      OpStore %528 %527 
                                Private f32* %529 = OpAccessChain %9 %203 
                                         f32 %530 = OpLoad %529 
                                         f32 %531 = OpFMul %530 %316 
                                Uniform f32* %533 = OpAccessChain %24 %532 
                                         f32 %534 = OpLoad %533 
                                         f32 %535 = OpFAdd %531 %534 
                                Private f32* %536 = OpAccessChain %9 %203 
                                                      OpStore %536 %535 
                                Private f32* %537 = OpAccessChain %9 %203 
                                         f32 %538 = OpLoad %537 
                                Uniform f32* %539 = OpAccessChain %24 %403 
                                         f32 %540 = OpLoad %539 
                                         f32 %541 = OpFMul %538 %540 
                                Private f32* %542 = OpAccessChain %9 %203 
                                                      OpStore %542 %541 
                                Private f32* %543 = OpAccessChain %9 %203 
                                         f32 %544 = OpLoad %543 
                                         f32 %545 = OpFNegate %544 
                                         f32 %547 = OpFMul %545 %546 
                                         f32 %548 = OpFAdd %547 %546 
                                Private f32* %549 = OpAccessChain %9 %203 
                                                      OpStore %549 %548 
                                Private f32* %550 = OpAccessChain %9 %203 
                                         f32 %551 = OpLoad %550 
                                Private f32* %552 = OpAccessChain %36 %203 
                                         f32 %553 = OpLoad %552 
                                         f32 %554 = OpFMul %551 %553 
                                         f32 %556 = OpFAdd %554 %555 
                                Private f32* %557 = OpAccessChain %36 %124 
                                                      OpStore %557 %556 
                                       f32_4 %559 = OpLoad %36 
                                       f32_2 %560 = OpVectorShuffle %559 %559 0 3 
                                       f32_4 %561 = OpLoad vs_TEXCOORD1 
                                       f32_4 %562 = OpVectorShuffle %561 %560 4 1 2 5 
                                                      OpStore vs_TEXCOORD1 %562 
                                         f32 %563 = OpLoad %279 
                                         f32 %564 = OpFNegate %563 
                                         f32 %565 = OpFMul %564 %546 
                                Private f32* %566 = OpAccessChain %36 %124 
                                         f32 %567 = OpLoad %566 
                                         f32 %568 = OpFAdd %565 %567 
                                 Output f32* %569 = OpAccessChain vs_TEXCOORD1 %114 
                                                      OpStore %569 %568 
                                         f32 %570 = OpLoad %279 
                                         f32 %571 = OpFMul %570 %546 
                                Private f32* %572 = OpAccessChain %36 %124 
                                         f32 %573 = OpLoad %572 
                                         f32 %574 = OpFAdd %571 %573 
                                 Output f32* %575 = OpAccessChain vs_TEXCOORD1 %216 
                                                      OpStore %575 %574 
                                  Input f32* %577 = OpAccessChain %129 %124 
                                         f32 %578 = OpLoad %577 
                                 Output f32* %579 = OpAccessChain vs_TEXCOORD3 %216 
                                                      OpStore %579 %578 
                                 Output f32* %580 = OpAccessChain vs_TEXCOORD3 %124 
                                                      OpStore %580 %293 
                                Uniform f32* %582 = OpAccessChain %24 %581 
                                         f32 %583 = OpLoad %582 
                                Uniform f32* %585 = OpAccessChain %24 %584 
                                         f32 %586 = OpLoad %585 
                                Uniform f32* %588 = OpAccessChain %24 %587 
                                         f32 %589 = OpLoad %588 
                                Uniform f32* %591 = OpAccessChain %24 %590 
                                         f32 %592 = OpLoad %591 
                                       f32_4 %593 = OpCompositeConstruct %583 %586 %589 %592 
                                Uniform f32* %595 = OpAccessChain %24 %594 
                                         f32 %596 = OpLoad %595 
                                Uniform f32* %597 = OpAccessChain %24 %594 
                                         f32 %598 = OpLoad %597 
                                Uniform f32* %599 = OpAccessChain %24 %594 
                                         f32 %600 = OpLoad %599 
                                Uniform f32* %601 = OpAccessChain %24 %594 
                                         f32 %602 = OpLoad %601 
                                       f32_4 %603 = OpCompositeConstruct %596 %598 %600 %602 
                                         f32 %604 = OpCompositeExtract %603 0 
                                         f32 %605 = OpCompositeExtract %603 1 
                                         f32 %606 = OpCompositeExtract %603 2 
                                         f32 %607 = OpCompositeExtract %603 3 
                                       f32_4 %608 = OpCompositeConstruct %604 %605 %606 %607 
                                       f32_4 %609 = OpFMul %593 %608 
                                                      OpStore %36 %609 
                                       f32_4 %610 = OpLoad %36 
                                       f32_2 %611 = OpVectorShuffle %610 %610 2 3 
                                       f32_2 %612 = OpFNegate %611 
                                Uniform f32* %613 = OpAccessChain %24 %338 
                                         f32 %614 = OpLoad %613 
                                       f32_2 %615 = OpCompositeConstruct %614 %614 
                                       f32_2 %616 = OpFMul %612 %615 
                                       f32_3 %617 = OpLoad %510 
                                       f32_3 %618 = OpVectorShuffle %617 %616 3 1 4 
                                                      OpStore %510 %618 
                                       f32_3 %619 = OpLoad %510 
                                       f32_2 %620 = OpVectorShuffle %619 %619 0 2 
                                Uniform f32* %622 = OpAccessChain %24 %621 
                                         f32 %623 = OpLoad %622 
                                Uniform f32* %625 = OpAccessChain %24 %624 
                                         f32 %626 = OpLoad %625 
                                       f32_2 %627 = OpCompositeConstruct %623 %626 
                                       f32_2 %628 = OpFDiv %620 %627 
                                       f32_3 %629 = OpLoad %510 
                                       f32_3 %630 = OpVectorShuffle %629 %628 3 1 4 
                                                      OpStore %510 %630 
                                       f32_3 %631 = OpLoad %510 
                                       f32_2 %632 = OpVectorShuffle %631 %631 0 2 
                                       f32_2 %633 = OpLoad %498 
                                       f32_2 %634 = OpFAdd %632 %633 
                                       f32_4 %635 = OpLoad vs_TEXCOORD3 
                                       f32_4 %636 = OpVectorShuffle %635 %634 4 5 2 3 
                                                      OpStore vs_TEXCOORD3 %636 
                                Private f32* %637 = OpAccessChain %36 %203 
                                         f32 %638 = OpLoad %637 
                                         f32 %639 = OpLoad %180 
                                         f32 %640 = OpFMul %638 %639 
                                         f32 %641 = OpFAdd %640 %134 
                                Private f32* %642 = OpAccessChain %510 %203 
                                                      OpStore %642 %641 
                                         f32 %643 = OpLoad %180 
                                Private f32* %644 = OpAccessChain %510 %203 
                                         f32 %645 = OpLoad %644 
                                         f32 %646 = OpFDiv %643 %645 
                                Private f32* %647 = OpAccessChain %510 %203 
                                                      OpStore %647 %646 
                                Private f32* %648 = OpAccessChain %510 %203 
                                         f32 %649 = OpLoad %648 
                                Private f32* %650 = OpAccessChain %36 %114 
                                         f32 %651 = OpLoad %650 
                                         f32 %652 = OpFMul %649 %651 
                                                      OpStore %180 %652 
                                Private f32* %653 = OpAccessChain %9 %203 
                                         f32 %654 = OpLoad %653 
                                Private f32* %655 = OpAccessChain %510 %203 
                                         f32 %656 = OpLoad %655 
                                         f32 %657 = OpFMul %654 %656 
                                         f32 %658 = OpFAdd %657 %555 
                                Private f32* %659 = OpAccessChain %9 %203 
                                                      OpStore %659 %658 
                                Private f32* %662 = OpAccessChain %510 %203 
                                         f32 %663 = OpLoad %662 
                                 Output f32* %664 = OpAccessChain vs_TEXCOORD4 %203 
                                                      OpStore %664 %663 
                                         f32 %665 = OpLoad %180 
                                         f32 %666 = OpFNegate %665 
                                         f32 %667 = OpFMul %666 %546 
                                Private f32* %668 = OpAccessChain %9 %203 
                                         f32 %669 = OpLoad %668 
                                         f32 %670 = OpFAdd %667 %669 
                                 Output f32* %671 = OpAccessChain vs_TEXCOORD4 %114 
                                                      OpStore %671 %670 
                                 Output f32* %672 = OpAccessChain %118 %45 %114 
                                         f32 %673 = OpLoad %672 
                                         f32 %674 = OpFNegate %673 
                                 Output f32* %675 = OpAccessChain %118 %45 %114 
                                                      OpStore %675 %674 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 174
; Schema: 0
                                             OpCapability Shader 
                                      %1 = OpExtInstImport "GLSL.std.450" 
                                             OpMemoryModel Logical GLSL450 
                                             OpEntryPoint Fragment %4 "main" %21 %35 %77 %79 %88 %96 %154 %158 
                                             OpExecutionMode %4 OriginUpperLeft 
                                             OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                             OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                             OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                             OpName vs_TEXCOORDn0 "vs_TEXCOORDn0" 
                                             OpDecorate %12 DescriptorSet 12 
                                             OpDecorate %12 Binding 12 
                                             OpDecorate %16 DescriptorSet 16 
                                             OpDecorate %16 Binding 16 
                                             OpDecorate vs_TEXCOORD3 Location 21 
                                             OpDecorate vs_TEXCOORD4 Location 35 
                                             OpMemberDecorate %53 0 Offset 53 
                                             OpMemberDecorate %53 1 Offset 53 
                                             OpDecorate %53 Block 
                                             OpDecorate %55 DescriptorSet 55 
                                             OpDecorate %55 Binding 55 
                                             OpDecorate %77 Location 77 
                                             OpDecorate %79 Location 79 
                                             OpDecorate vs_TEXCOORD0 Location 88 
                                             OpDecorate vs_TEXCOORD1 Location 96 
                                             OpDecorate %154 Location 154 
                                             OpDecorate vs_TEXCOORDn0 Location 158 
                                      %2 = OpTypeVoid 
                                      %3 = OpTypeFunction %2 
                                      %6 = OpTypeFloat 32 
                                      %7 = OpTypeVector %6 4 
                                      %8 = OpTypePointer Private %7 
                       Private f32_4* %9 = OpVariable Private 
                                     %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                     %11 = OpTypePointer UniformConstant %10 
UniformConstant read_only Texture2D* %12 = OpVariable UniformConstant 
                                     %14 = OpTypeSampler 
                                     %15 = OpTypePointer UniformConstant %14 
            UniformConstant sampler* %16 = OpVariable UniformConstant 
                                     %18 = OpTypeSampledImage %10 
                                     %20 = OpTypePointer Input %7 
               Input f32_4* vs_TEXCOORD3 = OpVariable Input 
                                     %22 = OpTypeVector %6 2 
                                     %26 = OpTypeInt 32 0 
                                 u32 %27 = OpConstant 3 
                                 u32 %29 = OpConstant 0 
                                     %30 = OpTypePointer Private %6 
                                     %34 = OpTypePointer Input %22 
               Input f32_2* vs_TEXCOORD4 = OpVariable Input 
                                     %36 = OpTypePointer Input %6 
                                 u32 %40 = OpConstant 1 
                                 f32 %48 = OpConstant 3.674022E-40 
                                 f32 %49 = OpConstant 3.674022E-40 
                      Private f32_4* %52 = OpVariable Private 
                                     %53 = OpTypeStruct %7 %7 
                                     %54 = OpTypePointer Uniform %53 
     Uniform struct {f32_4; f32_4;}* %55 = OpVariable Uniform 
                                     %56 = OpTypeInt 32 1 
                                 i32 %57 = OpConstant 1 
                                     %58 = OpTypeVector %6 3 
                                     %59 = OpTypePointer Uniform %7 
                                     %69 = OpTypePointer Uniform %6 
                        Input f32_4* %77 = OpVariable Input 
                        Input f32_4* %79 = OpVariable Input 
                                     %83 = OpTypePointer Private %22 
                      Private f32_2* %84 = OpVariable Private 
               Input f32_4* vs_TEXCOORD0 = OpVariable Input 
               Input f32_4* vs_TEXCOORD1 = OpVariable Input 
                     Private f32_4* %114 = OpVariable Private 
                                i32 %138 = OpConstant 0 
                       Private f32* %146 = OpVariable Private 
                                u32 %149 = OpConstant 2 
                                    %153 = OpTypePointer Output %7 
                      Output f32_4* %154 = OpVariable Output 
                                    %156 = OpTypePointer Output %6 
                Input f32* vs_TEXCOORDn0 = OpVariable Input 
                                 void %4 = OpFunction None %3 
                                      %5 = OpLabel 
                 read_only Texture2D %13 = OpLoad %12 
                             sampler %17 = OpLoad %16 
          read_only Texture2DSampled %19 = OpSampledImage %13 %17 
                               f32_4 %23 = OpLoad vs_TEXCOORD3 
                               f32_2 %24 = OpVectorShuffle %23 %23 0 1 
                               f32_4 %25 = OpImageSampleImplicitLod %19 %24 
                                 f32 %28 = OpCompositeExtract %25 3 
                        Private f32* %31 = OpAccessChain %9 %29 
                                             OpStore %31 %28 
                        Private f32* %32 = OpAccessChain %9 %29 
                                 f32 %33 = OpLoad %32 
                          Input f32* %37 = OpAccessChain vs_TEXCOORD4 %29 
                                 f32 %38 = OpLoad %37 
                                 f32 %39 = OpFMul %33 %38 
                          Input f32* %41 = OpAccessChain vs_TEXCOORD4 %40 
                                 f32 %42 = OpLoad %41 
                                 f32 %43 = OpFNegate %42 
                                 f32 %44 = OpFAdd %39 %43 
                        Private f32* %45 = OpAccessChain %9 %29 
                                             OpStore %45 %44 
                        Private f32* %46 = OpAccessChain %9 %29 
                                 f32 %47 = OpLoad %46 
                                 f32 %50 = OpExtInst %1 43 %47 %48 %49 
                        Private f32* %51 = OpAccessChain %9 %29 
                                             OpStore %51 %50 
                      Uniform f32_4* %60 = OpAccessChain %55 %57 
                               f32_4 %61 = OpLoad %60 
                               f32_3 %62 = OpVectorShuffle %61 %61 3 3 3 
                      Uniform f32_4* %63 = OpAccessChain %55 %57 
                               f32_4 %64 = OpLoad %63 
                               f32_3 %65 = OpVectorShuffle %64 %64 0 1 2 
                               f32_3 %66 = OpFMul %62 %65 
                               f32_4 %67 = OpLoad %52 
                               f32_4 %68 = OpVectorShuffle %67 %66 4 5 6 3 
                                             OpStore %52 %68 
                        Uniform f32* %70 = OpAccessChain %55 %57 %27 
                                 f32 %71 = OpLoad %70 
                        Private f32* %72 = OpAccessChain %52 %27 
                                             OpStore %72 %71 
                               f32_4 %73 = OpLoad %9 
                               f32_4 %74 = OpVectorShuffle %73 %73 0 0 0 0 
                               f32_4 %75 = OpLoad %52 
                               f32_4 %76 = OpFMul %74 %75 
                                             OpStore %9 %76 
                               f32_4 %78 = OpLoad %77 
                               f32_4 %80 = OpLoad %79 
                               f32_4 %81 = OpFNegate %80 
                               f32_4 %82 = OpFAdd %78 %81 
                                             OpStore %52 %82 
                 read_only Texture2D %85 = OpLoad %12 
                             sampler %86 = OpLoad %16 
          read_only Texture2DSampled %87 = OpSampledImage %85 %86 
                               f32_4 %89 = OpLoad vs_TEXCOORD0 
                               f32_2 %90 = OpVectorShuffle %89 %89 0 1 
                               f32_4 %91 = OpImageSampleImplicitLod %87 %90 
                                 f32 %92 = OpCompositeExtract %91 3 
                        Private f32* %93 = OpAccessChain %84 %29 
                                             OpStore %93 %92 
                               f32_2 %94 = OpLoad %84 
                               f32_2 %95 = OpVectorShuffle %94 %94 0 0 
                               f32_4 %97 = OpLoad vs_TEXCOORD1 
                               f32_2 %98 = OpVectorShuffle %97 %97 0 0 
                               f32_2 %99 = OpFMul %95 %98 
                              f32_4 %100 = OpLoad vs_TEXCOORD1 
                              f32_2 %101 = OpVectorShuffle %100 %100 2 1 
                              f32_2 %102 = OpFNegate %101 
                              f32_2 %103 = OpFAdd %99 %102 
                                             OpStore %84 %103 
                              f32_2 %104 = OpLoad %84 
                              f32_2 %105 = OpCompositeConstruct %48 %48 
                              f32_2 %106 = OpCompositeConstruct %49 %49 
                              f32_2 %107 = OpExtInst %1 43 %104 %105 %106 
                                             OpStore %84 %107 
                              f32_2 %108 = OpLoad %84 
                              f32_4 %109 = OpVectorShuffle %108 %108 0 0 0 0 
                              f32_4 %110 = OpLoad %52 
                              f32_4 %111 = OpFMul %109 %110 
                              f32_4 %112 = OpLoad %79 
                              f32_4 %113 = OpFAdd %111 %112 
                                             OpStore %52 %113 
                              f32_2 %115 = OpLoad %84 
                              f32_4 %116 = OpVectorShuffle %115 %115 1 1 1 1 
                              f32_4 %117 = OpLoad %52 
                              f32_4 %118 = OpFMul %116 %117 
                                             OpStore %114 %118 
                       Private f32* %119 = OpAccessChain %52 %27 
                                f32 %120 = OpLoad %119 
                                f32 %121 = OpFNegate %120 
                       Private f32* %122 = OpAccessChain %84 %40 
                                f32 %123 = OpLoad %122 
                                f32 %124 = OpFMul %121 %123 
                                f32 %125 = OpFAdd %124 %49 
                       Private f32* %126 = OpAccessChain %52 %29 
                                             OpStore %126 %125 
                              f32_4 %127 = OpLoad %9 
                              f32_4 %128 = OpLoad %52 
                              f32_4 %129 = OpVectorShuffle %128 %128 0 0 0 0 
                              f32_4 %130 = OpFMul %127 %129 
                              f32_4 %131 = OpLoad %114 
                              f32_4 %132 = OpFAdd %130 %131 
                                             OpStore %9 %132 
                              f32_4 %133 = OpLoad %9 
                              f32_3 %134 = OpVectorShuffle %133 %133 0 1 2 
                              f32_4 %135 = OpLoad vs_TEXCOORD3 
                              f32_3 %136 = OpVectorShuffle %135 %135 2 2 2 
                              f32_3 %137 = OpFMul %134 %136 
                     Uniform f32_4* %139 = OpAccessChain %55 %138 
                              f32_4 %140 = OpLoad %139 
                              f32_3 %141 = OpVectorShuffle %140 %140 0 1 2 
                              f32_3 %142 = OpFNegate %141 
                              f32_3 %143 = OpFAdd %137 %142 
                              f32_4 %144 = OpLoad %9 
                              f32_4 %145 = OpVectorShuffle %144 %143 4 5 6 3 
                                             OpStore %9 %145 
                       Private f32* %147 = OpAccessChain %9 %27 
                                f32 %148 = OpLoad %147 
                         Input f32* %150 = OpAccessChain vs_TEXCOORD3 %149 
                                f32 %151 = OpLoad %150 
                                f32 %152 = OpFMul %148 %151 
                                             OpStore %146 %152 
                                f32 %155 = OpLoad %146 
                        Output f32* %157 = OpAccessChain %154 %27 
                                             OpStore %157 %155 
                                f32 %159 = OpLoad vs_TEXCOORDn0 
                                             OpStore %146 %159 
                                f32 %160 = OpLoad %146 
                                f32 %161 = OpExtInst %1 43 %160 %48 %49 
                                             OpStore %146 %161 
                                f32 %162 = OpLoad %146 
                              f32_3 %163 = OpCompositeConstruct %162 %162 %162 
                              f32_4 %164 = OpLoad %9 
                              f32_3 %165 = OpVectorShuffle %164 %164 0 1 2 
                              f32_3 %166 = OpFMul %163 %165 
                     Uniform f32_4* %167 = OpAccessChain %55 %138 
                              f32_4 %168 = OpLoad %167 
                              f32_3 %169 = OpVectorShuffle %168 %168 0 1 2 
                              f32_3 %170 = OpFAdd %166 %169 
                              f32_4 %171 = OpLoad %154 
                              f32_4 %172 = OpVectorShuffle %171 %170 4 5 6 3 
                                             OpStore %154 %172 
                                             OpReturn
                                             OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "UNITY_UI_ALPHACLIP" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "UNITY_UI_ALPHACLIP" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _FaceColor;
uniform 	float _FaceDilate;
uniform 	float _OutlineSoftness;
uniform 	vec4 _OutlineColor;
uniform 	float _OutlineWidth;
uniform 	float _WeightNormal;
uniform 	float _WeightBold;
uniform 	float _ScaleRatioA;
uniform 	float _VertexOffsetX;
uniform 	float _VertexOffsetY;
uniform 	vec4 _ClipRect;
uniform 	float _MaskSoftnessX;
uniform 	float _MaskSoftnessY;
uniform 	float _GradientScale;
uniform 	float _ScaleX;
uniform 	float _ScaleY;
uniform 	float _PerspectiveFilter;
uniform 	float _Sharpness;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_COLOR0;
in  vec2 in_TEXCOORD0;
in  vec2 in_TEXCOORD1;
out vec4 vs_COLOR0;
out vec4 vs_COLOR1;
out vec4 vs_TEXCOORD0;
out vec4 vs_TEXCOORD1;
out vec4 vs_TEXCOORD2;
vec2 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
float u_xlat5;
vec2 u_xlat6;
float u_xlat10;
float u_xlat11;
float u_xlat15;
bool u_xlatb15;
void main()
{
    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
    gl_Position = u_xlat2;
    u_xlat3 = in_COLOR0 * _FaceColor;
    u_xlat3.xyz = u_xlat3.www * u_xlat3.xyz;
    vs_COLOR0 = u_xlat3;
    u_xlat4.w = in_COLOR0.w * _OutlineColor.w;
    u_xlat4.xyz = u_xlat4.www * _OutlineColor.xyz;
    u_xlat4 = (-u_xlat3) + u_xlat4;
    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat10 = inversesqrt(u_xlat10);
    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat10 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat10 = inversesqrt(u_xlat10);
    u_xlat2.xyz = vec3(u_xlat10) * u_xlat2.xyz;
    u_xlat10 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat1.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;
    u_xlat1.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat1.xy;
    u_xlat1.xy = abs(u_xlat1.xy) * vec2(_ScaleX, _ScaleY);
    u_xlat1.xy = u_xlat2.ww / u_xlat1.xy;
    u_xlat15 = dot(u_xlat1.xy, u_xlat1.xy);
    u_xlat1.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) * vec2(0.25, 0.25) + u_xlat1.xy;
    vs_TEXCOORD2.zw = vec2(0.25, 0.25) / u_xlat1.xy;
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.x = abs(in_TEXCOORD1.y) * _GradientScale;
    u_xlat6.x = _Sharpness + 1.0;
    u_xlat1.x = u_xlat6.x * u_xlat1.x;
    u_xlat6.x = u_xlat15 * u_xlat1.x;
    u_xlat11 = (-_PerspectiveFilter) + 1.0;
    u_xlat11 = u_xlat11 * abs(u_xlat6.x);
    u_xlat15 = u_xlat15 * u_xlat1.x + (-u_xlat11);
    u_xlat10 = abs(u_xlat10) * u_xlat15 + u_xlat11;
    u_xlatb15 = hlslcc_mtx4x4glstate_matrix_projection[3].w==0.0;
    u_xlat10 = (u_xlatb15) ? u_xlat10 : u_xlat6.x;
    u_xlat15 = _OutlineSoftness * _ScaleRatioA;
    u_xlat15 = u_xlat15 * u_xlat10 + 1.0;
    u_xlat1.x = u_xlat10 / u_xlat15;
    u_xlat10 = _OutlineWidth * _ScaleRatioA;
    u_xlat10 = u_xlat10 * 0.5;
    u_xlat15 = u_xlat1.x * u_xlat10;
    u_xlat15 = u_xlat15 + u_xlat15;
    u_xlat15 = min(u_xlat15, 1.0);
    u_xlat15 = sqrt(u_xlat15);
    vs_COLOR1 = vec4(u_xlat15) * u_xlat4 + u_xlat3;
    u_xlat2 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));
    u_xlat2 = min(u_xlat2, vec4(2e+10, 2e+10, 2e+10, 2e+10));
    u_xlat6.xy = u_xlat0.xy + (-u_xlat2.xy);
    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + (-u_xlat2.xy);
    vs_TEXCOORD2.xy = (-u_xlat2.zw) + u_xlat0.xy;
    u_xlat0.xy = (-u_xlat2.xy) + u_xlat2.zw;
    vs_TEXCOORD0.zw = u_xlat6.xy / u_xlat0.xy;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlatb0 = 0.0>=in_TEXCOORD1.y;
    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);
    u_xlat5 = (-_WeightNormal) + _WeightBold;
    u_xlat0.x = u_xlat0.x * u_xlat5 + _WeightNormal;
    u_xlat0.x = u_xlat0.x * 0.25 + _FaceDilate;
    u_xlat0.x = u_xlat0.x * _ScaleRatioA;
    u_xlat0.x = (-u_xlat0.x) * 0.5 + 0.5;
    u_xlat1.w = u_xlat0.x * u_xlat1.x + -0.5;
    vs_TEXCOORD1.y = (-u_xlat10) * u_xlat1.x + u_xlat1.w;
    vs_TEXCOORD1.z = u_xlat10 * u_xlat1.x + u_xlat1.w;
    vs_TEXCOORD1.xw = u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
in  vec4 vs_COLOR0;
in  vec4 vs_TEXCOORD0;
in  vec4 vs_TEXCOORD1;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat2;
void main()
{
    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat0.x = u_xlat0.w * vs_TEXCOORD1.x + (-vs_TEXCOORD1.w);
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat2 = vs_COLOR0.w * u_xlat0.x + -0.00100000005;
    u_xlat1 = u_xlat0.xxxx * vs_COLOR0;
    SV_Target0 = u_xlat1;
    u_xlatb0 = u_xlat2<0.0;
    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "UNITY_UI_ALPHACLIP" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 514
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %12 %118 %122 %135 %154 %257 %266 %384 %427 %433 %490 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpDecorate %12 Location 12 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpDecorate %19 ArrayStride 19 
                                                      OpDecorate %20 ArrayStride 20 
                                                      OpDecorate %21 ArrayStride 21 
                                                      OpMemberDecorate %22 0 Offset 22 
                                                      OpMemberDecorate %22 1 Offset 22 
                                                      OpMemberDecorate %22 2 Offset 22 
                                                      OpMemberDecorate %22 3 Offset 22 
                                                      OpMemberDecorate %22 4 Offset 22 
                                                      OpMemberDecorate %22 5 Offset 22 
                                                      OpMemberDecorate %22 6 Offset 22 
                                                      OpMemberDecorate %22 7 Offset 22 
                                                      OpMemberDecorate %22 8 Offset 22 
                                                      OpMemberDecorate %22 9 Offset 22 
                                                      OpMemberDecorate %22 10 Offset 22 
                                                      OpMemberDecorate %22 11 Offset 22 
                                                      OpMemberDecorate %22 12 Offset 22 
                                                      OpMemberDecorate %22 13 Offset 22 
                                                      OpMemberDecorate %22 14 Offset 22 
                                                      OpMemberDecorate %22 15 Offset 22 
                                                      OpMemberDecorate %22 16 Offset 22 
                                                      OpMemberDecorate %22 17 Offset 22 
                                                      OpMemberDecorate %22 18 Offset 22 
                                                      OpMemberDecorate %22 19 Offset 22 
                                                      OpMemberDecorate %22 20 Offset 22 
                                                      OpMemberDecorate %22 21 Offset 22 
                                                      OpMemberDecorate %22 22 Offset 22 
                                                      OpMemberDecorate %22 23 Offset 22 
                                                      OpDecorate %22 Block 
                                                      OpDecorate %24 DescriptorSet 24 
                                                      OpDecorate %24 Binding 24 
                                                      OpMemberDecorate %116 0 BuiltIn 116 
                                                      OpMemberDecorate %116 1 BuiltIn 116 
                                                      OpMemberDecorate %116 2 BuiltIn 116 
                                                      OpDecorate %116 Block 
                                                      OpDecorate %122 Location 122 
                                                      OpDecorate %135 Location 135 
                                                      OpDecorate %154 Location 154 
                                                      OpDecorate vs_TEXCOORD2 Location 257 
                                                      OpDecorate %266 Location 266 
                                                      OpDecorate %384 Location 384 
                                                      OpDecorate vs_TEXCOORD0 Location 427 
                                                      OpDecorate %433 Location 433 
                                                      OpDecorate vs_TEXCOORD1 Location 490 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 2 
                                               %8 = OpTypePointer Private %7 
                                Private f32_2* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 4 
                                              %11 = OpTypePointer Input %10 
                                 Input f32_4* %12 = OpVariable Input 
                                              %15 = OpTypeVector %6 3 
                                              %16 = OpTypeInt 32 0 
                                          u32 %17 = OpConstant 4 
                                              %18 = OpTypeArray %10 %17 
                                              %19 = OpTypeArray %10 %17 
                                              %20 = OpTypeArray %10 %17 
                                              %21 = OpTypeArray %10 %17 
                                              %22 = OpTypeStruct %15 %10 %18 %19 %20 %21 %10 %6 %6 %10 %6 %6 %6 %6 %6 %6 %10 %6 %6 %6 %6 %6 %6 %6 
                                              %23 = OpTypePointer Uniform %22 
Uniform struct {f32_3; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4[4]; f32_4; f32; f32; f32_4; f32; f32; f32; f32; f32; f32; f32_4; f32; f32; f32; f32; f32; f32; f32;}* %24 = OpVariable Uniform 
                                              %25 = OpTypeInt 32 1 
                                          i32 %26 = OpConstant 14 
                                              %27 = OpTypePointer Uniform %6 
                                          i32 %30 = OpConstant 15 
                                              %35 = OpTypePointer Private %10 
                               Private f32_4* %36 = OpVariable Private 
                                          i32 %39 = OpConstant 2 
                                          i32 %40 = OpConstant 1 
                                              %41 = OpTypePointer Uniform %10 
                                          i32 %45 = OpConstant 0 
                               Private f32_4* %60 = OpVariable Private 
                                          i32 %62 = OpConstant 3 
                                              %80 = OpTypePointer Uniform %15 
                               Private f32_4* %86 = OpVariable Private 
                                          i32 %89 = OpConstant 5 
                                         u32 %114 = OpConstant 1 
                                             %115 = OpTypeArray %6 %114 
                                             %116 = OpTypeStruct %10 %6 %115 
                                             %117 = OpTypePointer Output %116 
        Output struct {f32_4; f32; f32[1];}* %118 = OpVariable Output 
                                             %120 = OpTypePointer Output %10 
                                Input f32_4* %122 = OpVariable Input 
                                         i32 %124 = OpConstant 6 
                               Output f32_4* %135 = OpVariable Output 
                                             %137 = OpTypePointer Private %6 
                                Private f32* %138 = OpVariable Private 
                                             %153 = OpTypePointer Input %15 
                                Input f32_3* %154 = OpVariable Input 
                                         u32 %160 = OpConstant 0 
                                         u32 %173 = OpConstant 2 
                                         i32 %197 = OpConstant 4 
                                         i32 %219 = OpConstant 20 
                                         i32 %222 = OpConstant 21 
                                Private f32* %236 = OpVariable Private 
                                         i32 %242 = OpConstant 17 
                                         i32 %245 = OpConstant 18 
                                         f32 %249 = OpConstant 3.674022E-40 
                                       f32_2 %250 = OpConstantComposite %249 %249 
                       Output f32_4* vs_TEXCOORD2 = OpVariable Output 
                                             %265 = OpTypePointer Input %7 
                                Input f32_2* %266 = OpVariable Input 
                                             %267 = OpTypePointer Input %6 
                                         i32 %271 = OpConstant 19 
                              Private f32_2* %276 = OpVariable Private 
                                         i32 %277 = OpConstant 23 
                                         f32 %280 = OpConstant 3.674022E-40 
                                Private f32* %294 = OpVariable Private 
                                         i32 %295 = OpConstant 22 
                                             %318 = OpTypeBool 
                                             %319 = OpTypePointer Private %318 
                               Private bool* %320 = OpVariable Private 
                                         u32 %321 = OpConstant 3 
                                         f32 %324 = OpConstant 3.674022E-40 
                                             %327 = OpTypePointer Function %6 
                                         i32 %336 = OpConstant 8 
                                         i32 %339 = OpConstant 13 
                                         i32 %351 = OpConstant 10 
                                         i32 %367 = OpConstant 9 
                               Output f32_4* %384 = OpVariable Output 
                                         i32 %391 = OpConstant 16 
                                         f32 %394 = OpConstant 3.674022E-40 
                                       f32_4 %395 = OpConstantComposite %394 %394 %394 %394 
                                         f32 %398 = OpConstant 3.674022E-40 
                                       f32_4 %399 = OpConstantComposite %398 %398 %398 %398 
                                         f32 %407 = OpConstant 3.674022E-40 
                                       f32_2 %408 = OpConstantComposite %407 %407 
                       Output f32_4* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_2* %433 = OpVariable Input 
                               Private bool* %437 = OpVariable Private 
                                Private f32* %444 = OpVariable Private 
                                         i32 %445 = OpConstant 11 
                                         i32 %449 = OpConstant 12 
                                         i32 %464 = OpConstant 7 
                                         f32 %478 = OpConstant 3.674022E-40 
                                         f32 %487 = OpConstant 3.674022E-40 
                       Output f32_4* vs_TEXCOORD1 = OpVariable Output 
                                             %501 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                               Function f32* %328 = OpVariable Function 
                                        f32_4 %13 = OpLoad %12 
                                        f32_2 %14 = OpVectorShuffle %13 %13 0 1 
                                 Uniform f32* %28 = OpAccessChain %24 %26 
                                          f32 %29 = OpLoad %28 
                                 Uniform f32* %31 = OpAccessChain %24 %30 
                                          f32 %32 = OpLoad %31 
                                        f32_2 %33 = OpCompositeConstruct %29 %32 
                                        f32_2 %34 = OpFAdd %14 %33 
                                                      OpStore %9 %34 
                                        f32_2 %37 = OpLoad %9 
                                        f32_4 %38 = OpVectorShuffle %37 %37 1 1 1 1 
                               Uniform f32_4* %42 = OpAccessChain %24 %39 %40 
                                        f32_4 %43 = OpLoad %42 
                                        f32_4 %44 = OpFMul %38 %43 
                                                      OpStore %36 %44 
                               Uniform f32_4* %46 = OpAccessChain %24 %39 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_2 %48 = OpLoad %9 
                                        f32_4 %49 = OpVectorShuffle %48 %48 0 0 0 0 
                                        f32_4 %50 = OpFMul %47 %49 
                                        f32_4 %51 = OpLoad %36 
                                        f32_4 %52 = OpFAdd %50 %51 
                                                      OpStore %36 %52 
                               Uniform f32_4* %53 = OpAccessChain %24 %39 %39 
                                        f32_4 %54 = OpLoad %53 
                                        f32_4 %55 = OpLoad %12 
                                        f32_4 %56 = OpVectorShuffle %55 %55 2 2 2 2 
                                        f32_4 %57 = OpFMul %54 %56 
                                        f32_4 %58 = OpLoad %36 
                                        f32_4 %59 = OpFAdd %57 %58 
                                                      OpStore %36 %59 
                                        f32_4 %61 = OpLoad %36 
                               Uniform f32_4* %63 = OpAccessChain %24 %39 %62 
                                        f32_4 %64 = OpLoad %63 
                                        f32_4 %65 = OpFAdd %61 %64 
                                                      OpStore %60 %65 
                               Uniform f32_4* %66 = OpAccessChain %24 %39 %62 
                                        f32_4 %67 = OpLoad %66 
                                        f32_3 %68 = OpVectorShuffle %67 %67 0 1 2 
                                        f32_4 %69 = OpLoad %12 
                                        f32_3 %70 = OpVectorShuffle %69 %69 3 3 3 
                                        f32_3 %71 = OpFMul %68 %70 
                                        f32_4 %72 = OpLoad %36 
                                        f32_3 %73 = OpVectorShuffle %72 %72 0 1 2 
                                        f32_3 %74 = OpFAdd %71 %73 
                                        f32_4 %75 = OpLoad %36 
                                        f32_4 %76 = OpVectorShuffle %75 %74 4 5 6 3 
                                                      OpStore %36 %76 
                                        f32_4 %77 = OpLoad %36 
                                        f32_3 %78 = OpVectorShuffle %77 %77 0 1 2 
                                        f32_3 %79 = OpFNegate %78 
                               Uniform f32_3* %81 = OpAccessChain %24 %45 
                                        f32_3 %82 = OpLoad %81 
                                        f32_3 %83 = OpFAdd %79 %82 
                                        f32_4 %84 = OpLoad %36 
                                        f32_4 %85 = OpVectorShuffle %84 %83 4 5 6 3 
                                                      OpStore %36 %85 
                                        f32_4 %87 = OpLoad %60 
                                        f32_4 %88 = OpVectorShuffle %87 %87 1 1 1 1 
                               Uniform f32_4* %90 = OpAccessChain %24 %89 %40 
                                        f32_4 %91 = OpLoad %90 
                                        f32_4 %92 = OpFMul %88 %91 
                                                      OpStore %86 %92 
                               Uniform f32_4* %93 = OpAccessChain %24 %89 %45 
                                        f32_4 %94 = OpLoad %93 
                                        f32_4 %95 = OpLoad %60 
                                        f32_4 %96 = OpVectorShuffle %95 %95 0 0 0 0 
                                        f32_4 %97 = OpFMul %94 %96 
                                        f32_4 %98 = OpLoad %86 
                                        f32_4 %99 = OpFAdd %97 %98 
                                                      OpStore %86 %99 
                              Uniform f32_4* %100 = OpAccessChain %24 %89 %39 
                                       f32_4 %101 = OpLoad %100 
                                       f32_4 %102 = OpLoad %60 
                                       f32_4 %103 = OpVectorShuffle %102 %102 2 2 2 2 
                                       f32_4 %104 = OpFMul %101 %103 
                                       f32_4 %105 = OpLoad %86 
                                       f32_4 %106 = OpFAdd %104 %105 
                                                      OpStore %86 %106 
                              Uniform f32_4* %107 = OpAccessChain %24 %89 %62 
                                       f32_4 %108 = OpLoad %107 
                                       f32_4 %109 = OpLoad %60 
                                       f32_4 %110 = OpVectorShuffle %109 %109 3 3 3 3 
                                       f32_4 %111 = OpFMul %108 %110 
                                       f32_4 %112 = OpLoad %86 
                                       f32_4 %113 = OpFAdd %111 %112 
                                                      OpStore %60 %113 
                                       f32_4 %119 = OpLoad %60 
                               Output f32_4* %121 = OpAccessChain %118 %45 
                                                      OpStore %121 %119 
                                       f32_4 %123 = OpLoad %122 
                              Uniform f32_4* %125 = OpAccessChain %24 %124 
                                       f32_4 %126 = OpLoad %125 
                                       f32_4 %127 = OpFMul %123 %126 
                                                      OpStore %86 %127 
                                       f32_4 %128 = OpLoad %86 
                                       f32_3 %129 = OpVectorShuffle %128 %128 3 3 3 
                                       f32_4 %130 = OpLoad %86 
                                       f32_3 %131 = OpVectorShuffle %130 %130 0 1 2 
                                       f32_3 %132 = OpFMul %129 %131 
                                       f32_4 %133 = OpLoad %86 
                                       f32_4 %134 = OpVectorShuffle %133 %132 4 5 6 3 
                                                      OpStore %86 %134 
                                       f32_4 %136 = OpLoad %86 
                                                      OpStore %135 %136 
                                       f32_4 %139 = OpLoad %36 
                                       f32_3 %140 = OpVectorShuffle %139 %139 0 1 2 
                                       f32_4 %141 = OpLoad %36 
                                       f32_3 %142 = OpVectorShuffle %141 %141 0 1 2 
                                         f32 %143 = OpDot %140 %142 
                                                      OpStore %138 %143 
                                         f32 %144 = OpLoad %138 
                                         f32 %145 = OpExtInst %1 32 %144 
                                                      OpStore %138 %145 
                                         f32 %146 = OpLoad %138 
                                       f32_3 %147 = OpCompositeConstruct %146 %146 %146 
                                       f32_4 %148 = OpLoad %36 
                                       f32_3 %149 = OpVectorShuffle %148 %148 0 1 2 
                                       f32_3 %150 = OpFMul %147 %149 
                                       f32_4 %151 = OpLoad %36 
                                       f32_4 %152 = OpVectorShuffle %151 %150 4 5 6 3 
                                                      OpStore %36 %152 
                                       f32_3 %155 = OpLoad %154 
                              Uniform f32_4* %156 = OpAccessChain %24 %62 %45 
                                       f32_4 %157 = OpLoad %156 
                                       f32_3 %158 = OpVectorShuffle %157 %157 0 1 2 
                                         f32 %159 = OpDot %155 %158 
                                Private f32* %161 = OpAccessChain %60 %160 
                                                      OpStore %161 %159 
                                       f32_3 %162 = OpLoad %154 
                              Uniform f32_4* %163 = OpAccessChain %24 %62 %40 
                                       f32_4 %164 = OpLoad %163 
                                       f32_3 %165 = OpVectorShuffle %164 %164 0 1 2 
                                         f32 %166 = OpDot %162 %165 
                                Private f32* %167 = OpAccessChain %60 %114 
                                                      OpStore %167 %166 
                                       f32_3 %168 = OpLoad %154 
                              Uniform f32_4* %169 = OpAccessChain %24 %62 %39 
                                       f32_4 %170 = OpLoad %169 
                                       f32_3 %171 = OpVectorShuffle %170 %170 0 1 2 
                                         f32 %172 = OpDot %168 %171 
                                Private f32* %174 = OpAccessChain %60 %173 
                                                      OpStore %174 %172 
                                       f32_4 %175 = OpLoad %60 
                                       f32_3 %176 = OpVectorShuffle %175 %175 0 1 2 
                                       f32_4 %177 = OpLoad %60 
                                       f32_3 %178 = OpVectorShuffle %177 %177 0 1 2 
                                         f32 %179 = OpDot %176 %178 
                                                      OpStore %138 %179 
                                         f32 %180 = OpLoad %138 
                                         f32 %181 = OpExtInst %1 32 %180 
                                                      OpStore %138 %181 
                                         f32 %182 = OpLoad %138 
                                       f32_3 %183 = OpCompositeConstruct %182 %182 %182 
                                       f32_4 %184 = OpLoad %60 
                                       f32_3 %185 = OpVectorShuffle %184 %184 0 1 2 
                                       f32_3 %186 = OpFMul %183 %185 
                                       f32_4 %187 = OpLoad %60 
                                       f32_4 %188 = OpVectorShuffle %187 %186 4 5 6 3 
                                                      OpStore %60 %188 
                                       f32_4 %189 = OpLoad %60 
                                       f32_3 %190 = OpVectorShuffle %189 %189 0 1 2 
                                       f32_4 %191 = OpLoad %36 
                                       f32_3 %192 = OpVectorShuffle %191 %191 0 1 2 
                                         f32 %193 = OpDot %190 %192 
                                                      OpStore %138 %193 
                              Uniform f32_4* %194 = OpAccessChain %24 %40 
                                       f32_4 %195 = OpLoad %194 
                                       f32_2 %196 = OpVectorShuffle %195 %195 1 1 
                              Uniform f32_4* %198 = OpAccessChain %24 %197 %40 
                                       f32_4 %199 = OpLoad %198 
                                       f32_2 %200 = OpVectorShuffle %199 %199 0 1 
                                       f32_2 %201 = OpFMul %196 %200 
                                       f32_4 %202 = OpLoad %36 
                                       f32_4 %203 = OpVectorShuffle %202 %201 4 5 2 3 
                                                      OpStore %36 %203 
                              Uniform f32_4* %204 = OpAccessChain %24 %197 %45 
                                       f32_4 %205 = OpLoad %204 
                                       f32_2 %206 = OpVectorShuffle %205 %205 0 1 
                              Uniform f32_4* %207 = OpAccessChain %24 %40 
                                       f32_4 %208 = OpLoad %207 
                                       f32_2 %209 = OpVectorShuffle %208 %208 0 0 
                                       f32_2 %210 = OpFMul %206 %209 
                                       f32_4 %211 = OpLoad %36 
                                       f32_2 %212 = OpVectorShuffle %211 %211 0 1 
                                       f32_2 %213 = OpFAdd %210 %212 
                                       f32_4 %214 = OpLoad %36 
                                       f32_4 %215 = OpVectorShuffle %214 %213 4 5 2 3 
                                                      OpStore %36 %215 
                                       f32_4 %216 = OpLoad %36 
                                       f32_2 %217 = OpVectorShuffle %216 %216 0 1 
                                       f32_2 %218 = OpExtInst %1 4 %217 
                                Uniform f32* %220 = OpAccessChain %24 %219 
                                         f32 %221 = OpLoad %220 
                                Uniform f32* %223 = OpAccessChain %24 %222 
                                         f32 %224 = OpLoad %223 
                                       f32_2 %225 = OpCompositeConstruct %221 %224 
                                       f32_2 %226 = OpFMul %218 %225 
                                       f32_4 %227 = OpLoad %36 
                                       f32_4 %228 = OpVectorShuffle %227 %226 4 5 2 3 
                                                      OpStore %36 %228 
                                       f32_4 %229 = OpLoad %60 
                                       f32_2 %230 = OpVectorShuffle %229 %229 3 3 
                                       f32_4 %231 = OpLoad %36 
                                       f32_2 %232 = OpVectorShuffle %231 %231 0 1 
                                       f32_2 %233 = OpFDiv %230 %232 
                                       f32_4 %234 = OpLoad %36 
                                       f32_4 %235 = OpVectorShuffle %234 %233 4 5 2 3 
                                                      OpStore %36 %235 
                                       f32_4 %237 = OpLoad %36 
                                       f32_2 %238 = OpVectorShuffle %237 %237 0 1 
                                       f32_4 %239 = OpLoad %36 
                                       f32_2 %240 = OpVectorShuffle %239 %239 0 1 
                                         f32 %241 = OpDot %238 %240 
                                                      OpStore %236 %241 
                                Uniform f32* %243 = OpAccessChain %24 %242 
                                         f32 %244 = OpLoad %243 
                                Uniform f32* %246 = OpAccessChain %24 %245 
                                         f32 %247 = OpLoad %246 
                                       f32_2 %248 = OpCompositeConstruct %244 %247 
                                       f32_2 %251 = OpFMul %248 %250 
                                       f32_4 %252 = OpLoad %36 
                                       f32_2 %253 = OpVectorShuffle %252 %252 0 1 
                                       f32_2 %254 = OpFAdd %251 %253 
                                       f32_4 %255 = OpLoad %36 
                                       f32_4 %256 = OpVectorShuffle %255 %254 4 5 2 3 
                                                      OpStore %36 %256 
                                       f32_4 %258 = OpLoad %36 
                                       f32_2 %259 = OpVectorShuffle %258 %258 0 1 
                                       f32_2 %260 = OpFDiv %250 %259 
                                       f32_4 %261 = OpLoad vs_TEXCOORD2 
                                       f32_4 %262 = OpVectorShuffle %261 %260 0 1 4 5 
                                                      OpStore vs_TEXCOORD2 %262 
                                         f32 %263 = OpLoad %236 
                                         f32 %264 = OpExtInst %1 32 %263 
                                                      OpStore %236 %264 
                                  Input f32* %268 = OpAccessChain %266 %114 
                                         f32 %269 = OpLoad %268 
                                         f32 %270 = OpExtInst %1 4 %269 
                                Uniform f32* %272 = OpAccessChain %24 %271 
                                         f32 %273 = OpLoad %272 
                                         f32 %274 = OpFMul %270 %273 
                                Private f32* %275 = OpAccessChain %36 %160 
                                                      OpStore %275 %274 
                                Uniform f32* %278 = OpAccessChain %24 %277 
                                         f32 %279 = OpLoad %278 
                                         f32 %281 = OpFAdd %279 %280 
                                Private f32* %282 = OpAccessChain %276 %160 
                                                      OpStore %282 %281 
                                Private f32* %283 = OpAccessChain %276 %160 
                                         f32 %284 = OpLoad %283 
                                Private f32* %285 = OpAccessChain %36 %160 
                                         f32 %286 = OpLoad %285 
                                         f32 %287 = OpFMul %284 %286 
                                Private f32* %288 = OpAccessChain %36 %160 
                                                      OpStore %288 %287 
                                         f32 %289 = OpLoad %236 
                                Private f32* %290 = OpAccessChain %36 %160 
                                         f32 %291 = OpLoad %290 
                                         f32 %292 = OpFMul %289 %291 
                                Private f32* %293 = OpAccessChain %276 %160 
                                                      OpStore %293 %292 
                                Uniform f32* %296 = OpAccessChain %24 %295 
                                         f32 %297 = OpLoad %296 
                                         f32 %298 = OpFNegate %297 
                                         f32 %299 = OpFAdd %298 %280 
                                                      OpStore %294 %299 
                                         f32 %300 = OpLoad %294 
                                Private f32* %301 = OpAccessChain %276 %160 
                                         f32 %302 = OpLoad %301 
                                         f32 %303 = OpExtInst %1 4 %302 
                                         f32 %304 = OpFMul %300 %303 
                                                      OpStore %294 %304 
                                         f32 %305 = OpLoad %236 
                                Private f32* %306 = OpAccessChain %36 %160 
                                         f32 %307 = OpLoad %306 
                                         f32 %308 = OpFMul %305 %307 
                                         f32 %309 = OpLoad %294 
                                         f32 %310 = OpFNegate %309 
                                         f32 %311 = OpFAdd %308 %310 
                                                      OpStore %236 %311 
                                         f32 %312 = OpLoad %138 
                                         f32 %313 = OpExtInst %1 4 %312 
                                         f32 %314 = OpLoad %236 
                                         f32 %315 = OpFMul %313 %314 
                                         f32 %316 = OpLoad %294 
                                         f32 %317 = OpFAdd %315 %316 
                                                      OpStore %138 %317 
                                Uniform f32* %322 = OpAccessChain %24 %197 %62 %321 
                                         f32 %323 = OpLoad %322 
                                        bool %325 = OpFOrdEqual %323 %324 
                                                      OpStore %320 %325 
                                        bool %326 = OpLoad %320 
                                                      OpSelectionMerge %330 None 
                                                      OpBranchConditional %326 %329 %332 
                                             %329 = OpLabel 
                                         f32 %331 = OpLoad %138 
                                                      OpStore %328 %331 
                                                      OpBranch %330 
                                             %332 = OpLabel 
                                Private f32* %333 = OpAccessChain %276 %160 
                                         f32 %334 = OpLoad %333 
                                                      OpStore %328 %334 
                                                      OpBranch %330 
                                             %330 = OpLabel 
                                         f32 %335 = OpLoad %328 
                                                      OpStore %138 %335 
                                Uniform f32* %337 = OpAccessChain %24 %336 
                                         f32 %338 = OpLoad %337 
                                Uniform f32* %340 = OpAccessChain %24 %339 
                                         f32 %341 = OpLoad %340 
                                         f32 %342 = OpFMul %338 %341 
                                                      OpStore %236 %342 
                                         f32 %343 = OpLoad %236 
                                         f32 %344 = OpLoad %138 
                                         f32 %345 = OpFMul %343 %344 
                                         f32 %346 = OpFAdd %345 %280 
                                                      OpStore %236 %346 
                                         f32 %347 = OpLoad %138 
                                         f32 %348 = OpLoad %236 
                                         f32 %349 = OpFDiv %347 %348 
                                Private f32* %350 = OpAccessChain %36 %160 
                                                      OpStore %350 %349 
                                Uniform f32* %352 = OpAccessChain %24 %351 
                                         f32 %353 = OpLoad %352 
                                Uniform f32* %354 = OpAccessChain %24 %339 
                                         f32 %355 = OpLoad %354 
                                         f32 %356 = OpFMul %353 %355 
                                                      OpStore %138 %356 
                                Private f32* %357 = OpAccessChain %36 %160 
                                         f32 %358 = OpLoad %357 
                                         f32 %359 = OpLoad %138 
                                         f32 %360 = OpFMul %358 %359 
                                                      OpStore %138 %360 
                                         f32 %361 = OpLoad %138 
                                         f32 %362 = OpExtInst %1 37 %361 %280 
                                                      OpStore %236 %362 
                                         f32 %363 = OpLoad %236 
                                         f32 %364 = OpExtInst %1 31 %363 
                                                      OpStore %236 %364 
                                  Input f32* %365 = OpAccessChain %122 %321 
                                         f32 %366 = OpLoad %365 
                                Uniform f32* %368 = OpAccessChain %24 %367 %321 
                                         f32 %369 = OpLoad %368 
                                         f32 %370 = OpFMul %366 %369 
                                Private f32* %371 = OpAccessChain %60 %321 
                                                      OpStore %371 %370 
                                       f32_4 %372 = OpLoad %60 
                                       f32_3 %373 = OpVectorShuffle %372 %372 3 3 3 
                              Uniform f32_4* %374 = OpAccessChain %24 %367 
                                       f32_4 %375 = OpLoad %374 
                                       f32_3 %376 = OpVectorShuffle %375 %375 0 1 2 
                                       f32_3 %377 = OpFMul %373 %376 
                                       f32_4 %378 = OpLoad %60 
                                       f32_4 %379 = OpVectorShuffle %378 %377 4 5 6 3 
                                                      OpStore %60 %379 
                                       f32_4 %380 = OpLoad %86 
                                       f32_4 %381 = OpFNegate %380 
                                       f32_4 %382 = OpLoad %60 
                                       f32_4 %383 = OpFAdd %381 %382 
                                                      OpStore %60 %383 
                                         f32 %385 = OpLoad %236 
                                       f32_4 %386 = OpCompositeConstruct %385 %385 %385 %385 
                                       f32_4 %387 = OpLoad %60 
                                       f32_4 %388 = OpFMul %386 %387 
                                       f32_4 %389 = OpLoad %86 
                                       f32_4 %390 = OpFAdd %388 %389 
                                                      OpStore %384 %390 
                              Uniform f32_4* %392 = OpAccessChain %24 %391 
                                       f32_4 %393 = OpLoad %392 
                                       f32_4 %396 = OpExtInst %1 40 %393 %395 
                                                      OpStore %60 %396 
                                       f32_4 %397 = OpLoad %60 
                                       f32_4 %400 = OpExtInst %1 37 %397 %399 
                                                      OpStore %60 %400 
                                       f32_2 %401 = OpLoad %9 
                                       f32_4 %402 = OpLoad %60 
                                       f32_2 %403 = OpVectorShuffle %402 %402 0 1 
                                       f32_2 %404 = OpFNegate %403 
                                       f32_2 %405 = OpFAdd %401 %404 
                                                      OpStore %276 %405 
                                       f32_2 %406 = OpLoad %9 
                                       f32_2 %409 = OpFMul %406 %408 
                                       f32_4 %410 = OpLoad %60 
                                       f32_2 %411 = OpVectorShuffle %410 %410 0 1 
                                       f32_2 %412 = OpFNegate %411 
                                       f32_2 %413 = OpFAdd %409 %412 
                                                      OpStore %9 %413 
                                       f32_4 %414 = OpLoad %60 
                                       f32_2 %415 = OpVectorShuffle %414 %414 2 3 
                                       f32_2 %416 = OpFNegate %415 
                                       f32_2 %417 = OpLoad %9 
                                       f32_2 %418 = OpFAdd %416 %417 
                                       f32_4 %419 = OpLoad vs_TEXCOORD2 
                                       f32_4 %420 = OpVectorShuffle %419 %418 4 5 2 3 
                                                      OpStore vs_TEXCOORD2 %420 
                                       f32_4 %421 = OpLoad %60 
                                       f32_2 %422 = OpVectorShuffle %421 %421 0 1 
                                       f32_2 %423 = OpFNegate %422 
                                       f32_4 %424 = OpLoad %60 
                                       f32_2 %425 = OpVectorShuffle %424 %424 2 3 
                                       f32_2 %426 = OpFAdd %423 %425 
                                                      OpStore %9 %426 
                                       f32_2 %428 = OpLoad %276 
                                       f32_2 %429 = OpLoad %9 
                                       f32_2 %430 = OpFDiv %428 %429 
                                       f32_4 %431 = OpLoad vs_TEXCOORD0 
                                       f32_4 %432 = OpVectorShuffle %431 %430 0 1 4 5 
                                                      OpStore vs_TEXCOORD0 %432 
                                       f32_2 %434 = OpLoad %433 
                                       f32_4 %435 = OpLoad vs_TEXCOORD0 
                                       f32_4 %436 = OpVectorShuffle %435 %434 4 5 2 3 
                                                      OpStore vs_TEXCOORD0 %436 
                                  Input f32* %438 = OpAccessChain %266 %114 
                                         f32 %439 = OpLoad %438 
                                        bool %440 = OpFOrdGreaterThanEqual %324 %439 
                                                      OpStore %437 %440 
                                        bool %441 = OpLoad %437 
                                         f32 %442 = OpSelect %441 %280 %324 
                                Private f32* %443 = OpAccessChain %9 %160 
                                                      OpStore %443 %442 
                                Uniform f32* %446 = OpAccessChain %24 %445 
                                         f32 %447 = OpLoad %446 
                                         f32 %448 = OpFNegate %447 
                                Uniform f32* %450 = OpAccessChain %24 %449 
                                         f32 %451 = OpLoad %450 
                                         f32 %452 = OpFAdd %448 %451 
                                                      OpStore %444 %452 
                                Private f32* %453 = OpAccessChain %9 %160 
                                         f32 %454 = OpLoad %453 
                                         f32 %455 = OpLoad %444 
                                         f32 %456 = OpFMul %454 %455 
                                Uniform f32* %457 = OpAccessChain %24 %445 
                                         f32 %458 = OpLoad %457 
                                         f32 %459 = OpFAdd %456 %458 
                                Private f32* %460 = OpAccessChain %9 %160 
                                                      OpStore %460 %459 
                                Private f32* %461 = OpAccessChain %9 %160 
                                         f32 %462 = OpLoad %461 
                                         f32 %463 = OpFMul %462 %249 
                                Uniform f32* %465 = OpAccessChain %24 %464 
                                         f32 %466 = OpLoad %465 
                                         f32 %467 = OpFAdd %463 %466 
                                Private f32* %468 = OpAccessChain %9 %160 
                                                      OpStore %468 %467 
                                Private f32* %469 = OpAccessChain %9 %160 
                                         f32 %470 = OpLoad %469 
                                Uniform f32* %471 = OpAccessChain %24 %339 
                                         f32 %472 = OpLoad %471 
                                         f32 %473 = OpFMul %470 %472 
                                Private f32* %474 = OpAccessChain %9 %160 
                                                      OpStore %474 %473 
                                Private f32* %475 = OpAccessChain %9 %160 
                                         f32 %476 = OpLoad %475 
                                         f32 %477 = OpFNegate %476 
                                         f32 %479 = OpFMul %477 %478 
                                         f32 %480 = OpFAdd %479 %478 
                                Private f32* %481 = OpAccessChain %9 %160 
                                                      OpStore %481 %480 
                                Private f32* %482 = OpAccessChain %9 %160 
                                         f32 %483 = OpLoad %482 
                                Private f32* %484 = OpAccessChain %36 %160 
                                         f32 %485 = OpLoad %484 
                                         f32 %486 = OpFMul %483 %485 
                                         f32 %488 = OpFAdd %486 %487 
                                Private f32* %489 = OpAccessChain %36 %321 
                                                      OpStore %489 %488 
                                       f32_4 %491 = OpLoad %36 
                                       f32_2 %492 = OpVectorShuffle %491 %491 0 3 
                                       f32_4 %493 = OpLoad vs_TEXCOORD1 
                                       f32_4 %494 = OpVectorShuffle %493 %492 4 1 2 5 
                                                      OpStore vs_TEXCOORD1 %494 
                                         f32 %495 = OpLoad %138 
                                         f32 %496 = OpFNegate %495 
                                         f32 %497 = OpFMul %496 %478 
                                Private f32* %498 = OpAccessChain %36 %321 
                                         f32 %499 = OpLoad %498 
                                         f32 %500 = OpFAdd %497 %499 
                                 Output f32* %502 = OpAccessChain vs_TEXCOORD1 %114 
                                                      OpStore %502 %500 
                                         f32 %503 = OpLoad %138 
                                         f32 %504 = OpFMul %503 %478 
                                Private f32* %505 = OpAccessChain %36 %321 
                                         f32 %506 = OpLoad %505 
                                         f32 %507 = OpFAdd %504 %506 
                                 Output f32* %508 = OpAccessChain vs_TEXCOORD1 %173 
                                                      OpStore %508 %507 
                                 Output f32* %509 = OpAccessChain %118 %45 %114 
                                         f32 %510 = OpLoad %509 
                                         f32 %511 = OpFNegate %510 
                                 Output f32* %512 = OpAccessChain %118 %45 %114 
                                                      OpStore %512 %511 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 78
; Schema: 0
                                             OpCapability Shader 
                                      %1 = OpExtInstImport "GLSL.std.450" 
                                             OpMemoryModel Logical GLSL450 
                                             OpEntryPoint Fragment %4 "main" %21 %30 %45 %59 
                                             OpExecutionMode %4 OriginUpperLeft 
                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                             OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                             OpDecorate %11 DescriptorSet 11 
                                             OpDecorate %11 Binding 11 
                                             OpDecorate %15 DescriptorSet 15 
                                             OpDecorate %15 Binding 15 
                                             OpDecorate vs_TEXCOORD0 Location 21 
                                             OpDecorate vs_TEXCOORD1 Location 30 
                                             OpDecorate %45 Location 45 
                                             OpDecorate %59 Location 59 
                                      %2 = OpTypeVoid 
                                      %3 = OpTypeFunction %2 
                                      %6 = OpTypeFloat 32 
                                      %7 = OpTypePointer Private %6 
                         Private f32* %8 = OpVariable Private 
                                      %9 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                     %10 = OpTypePointer UniformConstant %9 
UniformConstant read_only Texture2D* %11 = OpVariable UniformConstant 
                                     %13 = OpTypeSampler 
                                     %14 = OpTypePointer UniformConstant %13 
            UniformConstant sampler* %15 = OpVariable UniformConstant 
                                     %17 = OpTypeSampledImage %9 
                                     %19 = OpTypeVector %6 4 
                                     %20 = OpTypePointer Input %19 
               Input f32_4* vs_TEXCOORD0 = OpVariable Input 
                                     %22 = OpTypeVector %6 2 
                                     %26 = OpTypeInt 32 0 
                                 u32 %27 = OpConstant 3 
               Input f32_4* vs_TEXCOORD1 = OpVariable Input 
                                 u32 %31 = OpConstant 0 
                                     %32 = OpTypePointer Input %6 
                                 f32 %41 = OpConstant 3.674022E-40 
                                 f32 %42 = OpConstant 3.674022E-40 
                        Private f32* %44 = OpVariable Private 
                        Input f32_4* %45 = OpVariable Input 
                                 f32 %50 = OpConstant 3.674022E-40 
                                     %52 = OpTypePointer Private %19 
                      Private f32_4* %53 = OpVariable Private 
                                     %58 = OpTypePointer Output %19 
                       Output f32_4* %59 = OpVariable Output 
                                     %61 = OpTypeBool 
                                     %62 = OpTypePointer Private %61 
                       Private bool* %63 = OpVariable Private 
                                     %67 = OpTypeInt 32 1 
                                 i32 %68 = OpConstant 0 
                                 i32 %69 = OpConstant 1 
                                 i32 %71 = OpConstant -1 
                                 void %4 = OpFunction None %3 
                                      %5 = OpLabel 
                 read_only Texture2D %12 = OpLoad %11 
                             sampler %16 = OpLoad %15 
          read_only Texture2DSampled %18 = OpSampledImage %12 %16 
                               f32_4 %23 = OpLoad vs_TEXCOORD0 
                               f32_2 %24 = OpVectorShuffle %23 %23 0 1 
                               f32_4 %25 = OpImageSampleImplicitLod %18 %24 
                                 f32 %28 = OpCompositeExtract %25 3 
                                             OpStore %8 %28 
                                 f32 %29 = OpLoad %8 
                          Input f32* %33 = OpAccessChain vs_TEXCOORD1 %31 
                                 f32 %34 = OpLoad %33 
                                 f32 %35 = OpFMul %29 %34 
                          Input f32* %36 = OpAccessChain vs_TEXCOORD1 %27 
                                 f32 %37 = OpLoad %36 
                                 f32 %38 = OpFNegate %37 
                                 f32 %39 = OpFAdd %35 %38 
                                             OpStore %8 %39 
                                 f32 %40 = OpLoad %8 
                                 f32 %43 = OpExtInst %1 43 %40 %41 %42 
                                             OpStore %8 %43 
                          Input f32* %46 = OpAccessChain %45 %27 
                                 f32 %47 = OpLoad %46 
                                 f32 %48 = OpLoad %8 
                                 f32 %49 = OpFMul %47 %48 
                                 f32 %51 = OpFAdd %49 %50 
                                             OpStore %44 %51 
                                 f32 %54 = OpLoad %8 
                               f32_4 %55 = OpCompositeConstruct %54 %54 %54 %54 
                               f32_4 %56 = OpLoad %45 
                               f32_4 %57 = OpFMul %55 %56 
                                             OpStore %53 %57 
                               f32_4 %60 = OpLoad %53 
                                             OpStore %59 %60 
                                 f32 %64 = OpLoad %44 
                                bool %65 = OpFOrdLessThan %64 %41 
                                             OpStore %63 %65 
                                bool %66 = OpLoad %63 
                                 i32 %70 = OpSelect %66 %69 %68 
                                 i32 %72 = OpIMul %70 %71 
                                bool %73 = OpINotEqual %72 %68 
                                             OpSelectionMerge %75 None 
                                             OpBranchConditional %73 %74 %75 
                                     %74 = OpLabel 
                                             OpKill
                                     %75 = OpLabel 
                                             OpReturn
                                             OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "OUTLINE_ON" "UNITY_UI_ALPHACLIP" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "OUTLINE_ON" "UNITY_UI_ALPHACLIP" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _FaceColor;
uniform 	float _FaceDilate;
uniform 	float _OutlineSoftness;
uniform 	vec4 _OutlineColor;
uniform 	float _OutlineWidth;
uniform 	float _WeightNormal;
uniform 	float _WeightBold;
uniform 	float _ScaleRatioA;
uniform 	float _VertexOffsetX;
uniform 	float _VertexOffsetY;
uniform 	vec4 _ClipRect;
uniform 	float _MaskSoftnessX;
uniform 	float _MaskSoftnessY;
uniform 	float _GradientScale;
uniform 	float _ScaleX;
uniform 	float _ScaleY;
uniform 	float _PerspectiveFilter;
uniform 	float _Sharpness;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_COLOR0;
in  vec2 in_TEXCOORD0;
in  vec2 in_TEXCOORD1;
out vec4 vs_COLOR0;
out vec4 vs_COLOR1;
out vec4 vs_TEXCOORD0;
out vec4 vs_TEXCOORD1;
out vec4 vs_TEXCOORD2;
vec2 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
float u_xlat5;
vec2 u_xlat6;
float u_xlat10;
float u_xlat11;
float u_xlat15;
bool u_xlatb15;
void main()
{
    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
    gl_Position = u_xlat2;
    u_xlat3 = in_COLOR0 * _FaceColor;
    u_xlat3.xyz = u_xlat3.www * u_xlat3.xyz;
    vs_COLOR0 = u_xlat3;
    u_xlat4.w = in_COLOR0.w * _OutlineColor.w;
    u_xlat4.xyz = u_xlat4.www * _OutlineColor.xyz;
    u_xlat4 = (-u_xlat3) + u_xlat4;
    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat10 = inversesqrt(u_xlat10);
    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat10 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat10 = inversesqrt(u_xlat10);
    u_xlat2.xyz = vec3(u_xlat10) * u_xlat2.xyz;
    u_xlat10 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat1.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;
    u_xlat1.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat1.xy;
    u_xlat1.xy = abs(u_xlat1.xy) * vec2(_ScaleX, _ScaleY);
    u_xlat1.xy = u_xlat2.ww / u_xlat1.xy;
    u_xlat15 = dot(u_xlat1.xy, u_xlat1.xy);
    u_xlat1.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) * vec2(0.25, 0.25) + u_xlat1.xy;
    vs_TEXCOORD2.zw = vec2(0.25, 0.25) / u_xlat1.xy;
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.x = abs(in_TEXCOORD1.y) * _GradientScale;
    u_xlat6.x = _Sharpness + 1.0;
    u_xlat1.x = u_xlat6.x * u_xlat1.x;
    u_xlat6.x = u_xlat15 * u_xlat1.x;
    u_xlat11 = (-_PerspectiveFilter) + 1.0;
    u_xlat11 = u_xlat11 * abs(u_xlat6.x);
    u_xlat15 = u_xlat15 * u_xlat1.x + (-u_xlat11);
    u_xlat10 = abs(u_xlat10) * u_xlat15 + u_xlat11;
    u_xlatb15 = hlslcc_mtx4x4glstate_matrix_projection[3].w==0.0;
    u_xlat10 = (u_xlatb15) ? u_xlat10 : u_xlat6.x;
    u_xlat15 = _OutlineSoftness * _ScaleRatioA;
    u_xlat15 = u_xlat15 * u_xlat10 + 1.0;
    u_xlat1.x = u_xlat10 / u_xlat15;
    u_xlat10 = _OutlineWidth * _ScaleRatioA;
    u_xlat10 = u_xlat10 * 0.5;
    u_xlat15 = u_xlat1.x * u_xlat10;
    u_xlat15 = u_xlat15 + u_xlat15;
    u_xlat15 = min(u_xlat15, 1.0);
    u_xlat15 = sqrt(u_xlat15);
    vs_COLOR1 = vec4(u_xlat15) * u_xlat4 + u_xlat3;
    u_xlat2 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));
    u_xlat2 = min(u_xlat2, vec4(2e+10, 2e+10, 2e+10, 2e+10));
    u_xlat6.xy = u_xlat0.xy + (-u_xlat2.xy);
    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + (-u_xlat2.xy);
    vs_TEXCOORD2.xy = (-u_xlat2.zw) + u_xlat0.xy;
    u_xlat0.xy = (-u_xlat2.xy) + u_xlat2.zw;
    vs_TEXCOORD0.zw = u_xlat6.xy / u_xlat0.xy;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlatb0 = 0.0>=in_TEXCOORD1.y;
    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);
    u_xlat5 = (-_WeightNormal) + _WeightBold;
    u_xlat0.x = u_xlat0.x * u_xlat5 + _WeightNormal;
    u_xlat0.x = u_xlat0.x * 0.25 + _FaceDilate;
    u_xlat0.x = u_xlat0.x * _ScaleRatioA;
    u_xlat0.x = (-u_xlat0.x) * 0.5 + 0.5;
    u_xlat1.w = u_xlat0.x * u_xlat1.x + -0.5;
    vs_TEXCOORD1.y = (-u_xlat10) * u_xlat1.x + u_xlat1.w;
    vs_TEXCOORD1.z = u_xlat10 * u_xlat1.x + u_xlat1.w;
    vs_TEXCOORD1.xw = u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
in  vec4 vs_COLOR0;
in  vec4 vs_COLOR1;
in  vec4 vs_TEXCOORD0;
in  vec4 vs_TEXCOORD1;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = vs_COLOR0 + (-vs_COLOR1);
    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1.xy = u_xlat1.ww * vs_TEXCOORD1.xx + (-vs_TEXCOORD1.zy);
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
    u_xlat0 = u_xlat1.xxxx * u_xlat0 + vs_COLOR1;
    u_xlat1.x = u_xlat0.w * u_xlat1.y + -0.00100000005;
    u_xlat0 = u_xlat1.yyyy * u_xlat0;
    SV_Target0 = u_xlat0;
    u_xlatb0 = u_xlat1.x<0.0;
    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "OUTLINE_ON" "UNITY_UI_ALPHACLIP" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 514
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %12 %118 %122 %135 %154 %257 %266 %384 %427 %433 %490 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpDecorate %12 Location 12 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpDecorate %19 ArrayStride 19 
                                                      OpDecorate %20 ArrayStride 20 
                                                      OpDecorate %21 ArrayStride 21 
                                                      OpMemberDecorate %22 0 Offset 22 
                                                      OpMemberDecorate %22 1 Offset 22 
                                                      OpMemberDecorate %22 2 Offset 22 
                                                      OpMemberDecorate %22 3 Offset 22 
                                                      OpMemberDecorate %22 4 Offset 22 
                                                      OpMemberDecorate %22 5 Offset 22 
                                                      OpMemberDecorate %22 6 Offset 22 
                                                      OpMemberDecorate %22 7 Offset 22 
                                                      OpMemberDecorate %22 8 Offset 22 
                                                      OpMemberDecorate %22 9 Offset 22 
                                                      OpMemberDecorate %22 10 Offset 22 
                                                      OpMemberDecorate %22 11 Offset 22 
                                                      OpMemberDecorate %22 12 Offset 22 
                                                      OpMemberDecorate %22 13 Offset 22 
                                                      OpMemberDecorate %22 14 Offset 22 
                                                      OpMemberDecorate %22 15 Offset 22 
                                                      OpMemberDecorate %22 16 Offset 22 
                                                      OpMemberDecorate %22 17 Offset 22 
                                                      OpMemberDecorate %22 18 Offset 22 
                                                      OpMemberDecorate %22 19 Offset 22 
                                                      OpMemberDecorate %22 20 Offset 22 
                                                      OpMemberDecorate %22 21 Offset 22 
                                                      OpMemberDecorate %22 22 Offset 22 
                                                      OpMemberDecorate %22 23 Offset 22 
                                                      OpDecorate %22 Block 
                                                      OpDecorate %24 DescriptorSet 24 
                                                      OpDecorate %24 Binding 24 
                                                      OpMemberDecorate %116 0 BuiltIn 116 
                                                      OpMemberDecorate %116 1 BuiltIn 116 
                                                      OpMemberDecorate %116 2 BuiltIn 116 
                                                      OpDecorate %116 Block 
                                                      OpDecorate %122 Location 122 
                                                      OpDecorate %135 Location 135 
                                                      OpDecorate %154 Location 154 
                                                      OpDecorate vs_TEXCOORD2 Location 257 
                                                      OpDecorate %266 Location 266 
                                                      OpDecorate %384 Location 384 
                                                      OpDecorate vs_TEXCOORD0 Location 427 
                                                      OpDecorate %433 Location 433 
                                                      OpDecorate vs_TEXCOORD1 Location 490 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 2 
                                               %8 = OpTypePointer Private %7 
                                Private f32_2* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 4 
                                              %11 = OpTypePointer Input %10 
                                 Input f32_4* %12 = OpVariable Input 
                                              %15 = OpTypeVector %6 3 
                                              %16 = OpTypeInt 32 0 
                                          u32 %17 = OpConstant 4 
                                              %18 = OpTypeArray %10 %17 
                                              %19 = OpTypeArray %10 %17 
                                              %20 = OpTypeArray %10 %17 
                                              %21 = OpTypeArray %10 %17 
                                              %22 = OpTypeStruct %15 %10 %18 %19 %20 %21 %10 %6 %6 %10 %6 %6 %6 %6 %6 %6 %10 %6 %6 %6 %6 %6 %6 %6 
                                              %23 = OpTypePointer Uniform %22 
Uniform struct {f32_3; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4[4]; f32_4; f32; f32; f32_4; f32; f32; f32; f32; f32; f32; f32_4; f32; f32; f32; f32; f32; f32; f32;}* %24 = OpVariable Uniform 
                                              %25 = OpTypeInt 32 1 
                                          i32 %26 = OpConstant 14 
                                              %27 = OpTypePointer Uniform %6 
                                          i32 %30 = OpConstant 15 
                                              %35 = OpTypePointer Private %10 
                               Private f32_4* %36 = OpVariable Private 
                                          i32 %39 = OpConstant 2 
                                          i32 %40 = OpConstant 1 
                                              %41 = OpTypePointer Uniform %10 
                                          i32 %45 = OpConstant 0 
                               Private f32_4* %60 = OpVariable Private 
                                          i32 %62 = OpConstant 3 
                                              %80 = OpTypePointer Uniform %15 
                               Private f32_4* %86 = OpVariable Private 
                                          i32 %89 = OpConstant 5 
                                         u32 %114 = OpConstant 1 
                                             %115 = OpTypeArray %6 %114 
                                             %116 = OpTypeStruct %10 %6 %115 
                                             %117 = OpTypePointer Output %116 
        Output struct {f32_4; f32; f32[1];}* %118 = OpVariable Output 
                                             %120 = OpTypePointer Output %10 
                                Input f32_4* %122 = OpVariable Input 
                                         i32 %124 = OpConstant 6 
                               Output f32_4* %135 = OpVariable Output 
                                             %137 = OpTypePointer Private %6 
                                Private f32* %138 = OpVariable Private 
                                             %153 = OpTypePointer Input %15 
                                Input f32_3* %154 = OpVariable Input 
                                         u32 %160 = OpConstant 0 
                                         u32 %173 = OpConstant 2 
                                         i32 %197 = OpConstant 4 
                                         i32 %219 = OpConstant 20 
                                         i32 %222 = OpConstant 21 
                                Private f32* %236 = OpVariable Private 
                                         i32 %242 = OpConstant 17 
                                         i32 %245 = OpConstant 18 
                                         f32 %249 = OpConstant 3.674022E-40 
                                       f32_2 %250 = OpConstantComposite %249 %249 
                       Output f32_4* vs_TEXCOORD2 = OpVariable Output 
                                             %265 = OpTypePointer Input %7 
                                Input f32_2* %266 = OpVariable Input 
                                             %267 = OpTypePointer Input %6 
                                         i32 %271 = OpConstant 19 
                              Private f32_2* %276 = OpVariable Private 
                                         i32 %277 = OpConstant 23 
                                         f32 %280 = OpConstant 3.674022E-40 
                                Private f32* %294 = OpVariable Private 
                                         i32 %295 = OpConstant 22 
                                             %318 = OpTypeBool 
                                             %319 = OpTypePointer Private %318 
                               Private bool* %320 = OpVariable Private 
                                         u32 %321 = OpConstant 3 
                                         f32 %324 = OpConstant 3.674022E-40 
                                             %327 = OpTypePointer Function %6 
                                         i32 %336 = OpConstant 8 
                                         i32 %339 = OpConstant 13 
                                         i32 %351 = OpConstant 10 
                                         i32 %367 = OpConstant 9 
                               Output f32_4* %384 = OpVariable Output 
                                         i32 %391 = OpConstant 16 
                                         f32 %394 = OpConstant 3.674022E-40 
                                       f32_4 %395 = OpConstantComposite %394 %394 %394 %394 
                                         f32 %398 = OpConstant 3.674022E-40 
                                       f32_4 %399 = OpConstantComposite %398 %398 %398 %398 
                                         f32 %407 = OpConstant 3.674022E-40 
                                       f32_2 %408 = OpConstantComposite %407 %407 
                       Output f32_4* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_2* %433 = OpVariable Input 
                               Private bool* %437 = OpVariable Private 
                                Private f32* %444 = OpVariable Private 
                                         i32 %445 = OpConstant 11 
                                         i32 %449 = OpConstant 12 
                                         i32 %464 = OpConstant 7 
                                         f32 %478 = OpConstant 3.674022E-40 
                                         f32 %487 = OpConstant 3.674022E-40 
                       Output f32_4* vs_TEXCOORD1 = OpVariable Output 
                                             %501 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                               Function f32* %328 = OpVariable Function 
                                        f32_4 %13 = OpLoad %12 
                                        f32_2 %14 = OpVectorShuffle %13 %13 0 1 
                                 Uniform f32* %28 = OpAccessChain %24 %26 
                                          f32 %29 = OpLoad %28 
                                 Uniform f32* %31 = OpAccessChain %24 %30 
                                          f32 %32 = OpLoad %31 
                                        f32_2 %33 = OpCompositeConstruct %29 %32 
                                        f32_2 %34 = OpFAdd %14 %33 
                                                      OpStore %9 %34 
                                        f32_2 %37 = OpLoad %9 
                                        f32_4 %38 = OpVectorShuffle %37 %37 1 1 1 1 
                               Uniform f32_4* %42 = OpAccessChain %24 %39 %40 
                                        f32_4 %43 = OpLoad %42 
                                        f32_4 %44 = OpFMul %38 %43 
                                                      OpStore %36 %44 
                               Uniform f32_4* %46 = OpAccessChain %24 %39 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_2 %48 = OpLoad %9 
                                        f32_4 %49 = OpVectorShuffle %48 %48 0 0 0 0 
                                        f32_4 %50 = OpFMul %47 %49 
                                        f32_4 %51 = OpLoad %36 
                                        f32_4 %52 = OpFAdd %50 %51 
                                                      OpStore %36 %52 
                               Uniform f32_4* %53 = OpAccessChain %24 %39 %39 
                                        f32_4 %54 = OpLoad %53 
                                        f32_4 %55 = OpLoad %12 
                                        f32_4 %56 = OpVectorShuffle %55 %55 2 2 2 2 
                                        f32_4 %57 = OpFMul %54 %56 
                                        f32_4 %58 = OpLoad %36 
                                        f32_4 %59 = OpFAdd %57 %58 
                                                      OpStore %36 %59 
                                        f32_4 %61 = OpLoad %36 
                               Uniform f32_4* %63 = OpAccessChain %24 %39 %62 
                                        f32_4 %64 = OpLoad %63 
                                        f32_4 %65 = OpFAdd %61 %64 
                                                      OpStore %60 %65 
                               Uniform f32_4* %66 = OpAccessChain %24 %39 %62 
                                        f32_4 %67 = OpLoad %66 
                                        f32_3 %68 = OpVectorShuffle %67 %67 0 1 2 
                                        f32_4 %69 = OpLoad %12 
                                        f32_3 %70 = OpVectorShuffle %69 %69 3 3 3 
                                        f32_3 %71 = OpFMul %68 %70 
                                        f32_4 %72 = OpLoad %36 
                                        f32_3 %73 = OpVectorShuffle %72 %72 0 1 2 
                                        f32_3 %74 = OpFAdd %71 %73 
                                        f32_4 %75 = OpLoad %36 
                                        f32_4 %76 = OpVectorShuffle %75 %74 4 5 6 3 
                                                      OpStore %36 %76 
                                        f32_4 %77 = OpLoad %36 
                                        f32_3 %78 = OpVectorShuffle %77 %77 0 1 2 
                                        f32_3 %79 = OpFNegate %78 
                               Uniform f32_3* %81 = OpAccessChain %24 %45 
                                        f32_3 %82 = OpLoad %81 
                                        f32_3 %83 = OpFAdd %79 %82 
                                        f32_4 %84 = OpLoad %36 
                                        f32_4 %85 = OpVectorShuffle %84 %83 4 5 6 3 
                                                      OpStore %36 %85 
                                        f32_4 %87 = OpLoad %60 
                                        f32_4 %88 = OpVectorShuffle %87 %87 1 1 1 1 
                               Uniform f32_4* %90 = OpAccessChain %24 %89 %40 
                                        f32_4 %91 = OpLoad %90 
                                        f32_4 %92 = OpFMul %88 %91 
                                                      OpStore %86 %92 
                               Uniform f32_4* %93 = OpAccessChain %24 %89 %45 
                                        f32_4 %94 = OpLoad %93 
                                        f32_4 %95 = OpLoad %60 
                                        f32_4 %96 = OpVectorShuffle %95 %95 0 0 0 0 
                                        f32_4 %97 = OpFMul %94 %96 
                                        f32_4 %98 = OpLoad %86 
                                        f32_4 %99 = OpFAdd %97 %98 
                                                      OpStore %86 %99 
                              Uniform f32_4* %100 = OpAccessChain %24 %89 %39 
                                       f32_4 %101 = OpLoad %100 
                                       f32_4 %102 = OpLoad %60 
                                       f32_4 %103 = OpVectorShuffle %102 %102 2 2 2 2 
                                       f32_4 %104 = OpFMul %101 %103 
                                       f32_4 %105 = OpLoad %86 
                                       f32_4 %106 = OpFAdd %104 %105 
                                                      OpStore %86 %106 
                              Uniform f32_4* %107 = OpAccessChain %24 %89 %62 
                                       f32_4 %108 = OpLoad %107 
                                       f32_4 %109 = OpLoad %60 
                                       f32_4 %110 = OpVectorShuffle %109 %109 3 3 3 3 
                                       f32_4 %111 = OpFMul %108 %110 
                                       f32_4 %112 = OpLoad %86 
                                       f32_4 %113 = OpFAdd %111 %112 
                                                      OpStore %60 %113 
                                       f32_4 %119 = OpLoad %60 
                               Output f32_4* %121 = OpAccessChain %118 %45 
                                                      OpStore %121 %119 
                                       f32_4 %123 = OpLoad %122 
                              Uniform f32_4* %125 = OpAccessChain %24 %124 
                                       f32_4 %126 = OpLoad %125 
                                       f32_4 %127 = OpFMul %123 %126 
                                                      OpStore %86 %127 
                                       f32_4 %128 = OpLoad %86 
                                       f32_3 %129 = OpVectorShuffle %128 %128 3 3 3 
                                       f32_4 %130 = OpLoad %86 
                                       f32_3 %131 = OpVectorShuffle %130 %130 0 1 2 
                                       f32_3 %132 = OpFMul %129 %131 
                                       f32_4 %133 = OpLoad %86 
                                       f32_4 %134 = OpVectorShuffle %133 %132 4 5 6 3 
                                                      OpStore %86 %134 
                                       f32_4 %136 = OpLoad %86 
                                                      OpStore %135 %136 
                                       f32_4 %139 = OpLoad %36 
                                       f32_3 %140 = OpVectorShuffle %139 %139 0 1 2 
                                       f32_4 %141 = OpLoad %36 
                                       f32_3 %142 = OpVectorShuffle %141 %141 0 1 2 
                                         f32 %143 = OpDot %140 %142 
                                                      OpStore %138 %143 
                                         f32 %144 = OpLoad %138 
                                         f32 %145 = OpExtInst %1 32 %144 
                                                      OpStore %138 %145 
                                         f32 %146 = OpLoad %138 
                                       f32_3 %147 = OpCompositeConstruct %146 %146 %146 
                                       f32_4 %148 = OpLoad %36 
                                       f32_3 %149 = OpVectorShuffle %148 %148 0 1 2 
                                       f32_3 %150 = OpFMul %147 %149 
                                       f32_4 %151 = OpLoad %36 
                                       f32_4 %152 = OpVectorShuffle %151 %150 4 5 6 3 
                                                      OpStore %36 %152 
                                       f32_3 %155 = OpLoad %154 
                              Uniform f32_4* %156 = OpAccessChain %24 %62 %45 
                                       f32_4 %157 = OpLoad %156 
                                       f32_3 %158 = OpVectorShuffle %157 %157 0 1 2 
                                         f32 %159 = OpDot %155 %158 
                                Private f32* %161 = OpAccessChain %60 %160 
                                                      OpStore %161 %159 
                                       f32_3 %162 = OpLoad %154 
                              Uniform f32_4* %163 = OpAccessChain %24 %62 %40 
                                       f32_4 %164 = OpLoad %163 
                                       f32_3 %165 = OpVectorShuffle %164 %164 0 1 2 
                                         f32 %166 = OpDot %162 %165 
                                Private f32* %167 = OpAccessChain %60 %114 
                                                      OpStore %167 %166 
                                       f32_3 %168 = OpLoad %154 
                              Uniform f32_4* %169 = OpAccessChain %24 %62 %39 
                                       f32_4 %170 = OpLoad %169 
                                       f32_3 %171 = OpVectorShuffle %170 %170 0 1 2 
                                         f32 %172 = OpDot %168 %171 
                                Private f32* %174 = OpAccessChain %60 %173 
                                                      OpStore %174 %172 
                                       f32_4 %175 = OpLoad %60 
                                       f32_3 %176 = OpVectorShuffle %175 %175 0 1 2 
                                       f32_4 %177 = OpLoad %60 
                                       f32_3 %178 = OpVectorShuffle %177 %177 0 1 2 
                                         f32 %179 = OpDot %176 %178 
                                                      OpStore %138 %179 
                                         f32 %180 = OpLoad %138 
                                         f32 %181 = OpExtInst %1 32 %180 
                                                      OpStore %138 %181 
                                         f32 %182 = OpLoad %138 
                                       f32_3 %183 = OpCompositeConstruct %182 %182 %182 
                                       f32_4 %184 = OpLoad %60 
                                       f32_3 %185 = OpVectorShuffle %184 %184 0 1 2 
                                       f32_3 %186 = OpFMul %183 %185 
                                       f32_4 %187 = OpLoad %60 
                                       f32_4 %188 = OpVectorShuffle %187 %186 4 5 6 3 
                                                      OpStore %60 %188 
                                       f32_4 %189 = OpLoad %60 
                                       f32_3 %190 = OpVectorShuffle %189 %189 0 1 2 
                                       f32_4 %191 = OpLoad %36 
                                       f32_3 %192 = OpVectorShuffle %191 %191 0 1 2 
                                         f32 %193 = OpDot %190 %192 
                                                      OpStore %138 %193 
                              Uniform f32_4* %194 = OpAccessChain %24 %40 
                                       f32_4 %195 = OpLoad %194 
                                       f32_2 %196 = OpVectorShuffle %195 %195 1 1 
                              Uniform f32_4* %198 = OpAccessChain %24 %197 %40 
                                       f32_4 %199 = OpLoad %198 
                                       f32_2 %200 = OpVectorShuffle %199 %199 0 1 
                                       f32_2 %201 = OpFMul %196 %200 
                                       f32_4 %202 = OpLoad %36 
                                       f32_4 %203 = OpVectorShuffle %202 %201 4 5 2 3 
                                                      OpStore %36 %203 
                              Uniform f32_4* %204 = OpAccessChain %24 %197 %45 
                                       f32_4 %205 = OpLoad %204 
                                       f32_2 %206 = OpVectorShuffle %205 %205 0 1 
                              Uniform f32_4* %207 = OpAccessChain %24 %40 
                                       f32_4 %208 = OpLoad %207 
                                       f32_2 %209 = OpVectorShuffle %208 %208 0 0 
                                       f32_2 %210 = OpFMul %206 %209 
                                       f32_4 %211 = OpLoad %36 
                                       f32_2 %212 = OpVectorShuffle %211 %211 0 1 
                                       f32_2 %213 = OpFAdd %210 %212 
                                       f32_4 %214 = OpLoad %36 
                                       f32_4 %215 = OpVectorShuffle %214 %213 4 5 2 3 
                                                      OpStore %36 %215 
                                       f32_4 %216 = OpLoad %36 
                                       f32_2 %217 = OpVectorShuffle %216 %216 0 1 
                                       f32_2 %218 = OpExtInst %1 4 %217 
                                Uniform f32* %220 = OpAccessChain %24 %219 
                                         f32 %221 = OpLoad %220 
                                Uniform f32* %223 = OpAccessChain %24 %222 
                                         f32 %224 = OpLoad %223 
                                       f32_2 %225 = OpCompositeConstruct %221 %224 
                                       f32_2 %226 = OpFMul %218 %225 
                                       f32_4 %227 = OpLoad %36 
                                       f32_4 %228 = OpVectorShuffle %227 %226 4 5 2 3 
                                                      OpStore %36 %228 
                                       f32_4 %229 = OpLoad %60 
                                       f32_2 %230 = OpVectorShuffle %229 %229 3 3 
                                       f32_4 %231 = OpLoad %36 
                                       f32_2 %232 = OpVectorShuffle %231 %231 0 1 
                                       f32_2 %233 = OpFDiv %230 %232 
                                       f32_4 %234 = OpLoad %36 
                                       f32_4 %235 = OpVectorShuffle %234 %233 4 5 2 3 
                                                      OpStore %36 %235 
                                       f32_4 %237 = OpLoad %36 
                                       f32_2 %238 = OpVectorShuffle %237 %237 0 1 
                                       f32_4 %239 = OpLoad %36 
                                       f32_2 %240 = OpVectorShuffle %239 %239 0 1 
                                         f32 %241 = OpDot %238 %240 
                                                      OpStore %236 %241 
                                Uniform f32* %243 = OpAccessChain %24 %242 
                                         f32 %244 = OpLoad %243 
                                Uniform f32* %246 = OpAccessChain %24 %245 
                                         f32 %247 = OpLoad %246 
                                       f32_2 %248 = OpCompositeConstruct %244 %247 
                                       f32_2 %251 = OpFMul %248 %250 
                                       f32_4 %252 = OpLoad %36 
                                       f32_2 %253 = OpVectorShuffle %252 %252 0 1 
                                       f32_2 %254 = OpFAdd %251 %253 
                                       f32_4 %255 = OpLoad %36 
                                       f32_4 %256 = OpVectorShuffle %255 %254 4 5 2 3 
                                                      OpStore %36 %256 
                                       f32_4 %258 = OpLoad %36 
                                       f32_2 %259 = OpVectorShuffle %258 %258 0 1 
                                       f32_2 %260 = OpFDiv %250 %259 
                                       f32_4 %261 = OpLoad vs_TEXCOORD2 
                                       f32_4 %262 = OpVectorShuffle %261 %260 0 1 4 5 
                                                      OpStore vs_TEXCOORD2 %262 
                                         f32 %263 = OpLoad %236 
                                         f32 %264 = OpExtInst %1 32 %263 
                                                      OpStore %236 %264 
                                  Input f32* %268 = OpAccessChain %266 %114 
                                         f32 %269 = OpLoad %268 
                                         f32 %270 = OpExtInst %1 4 %269 
                                Uniform f32* %272 = OpAccessChain %24 %271 
                                         f32 %273 = OpLoad %272 
                                         f32 %274 = OpFMul %270 %273 
                                Private f32* %275 = OpAccessChain %36 %160 
                                                      OpStore %275 %274 
                                Uniform f32* %278 = OpAccessChain %24 %277 
                                         f32 %279 = OpLoad %278 
                                         f32 %281 = OpFAdd %279 %280 
                                Private f32* %282 = OpAccessChain %276 %160 
                                                      OpStore %282 %281 
                                Private f32* %283 = OpAccessChain %276 %160 
                                         f32 %284 = OpLoad %283 
                                Private f32* %285 = OpAccessChain %36 %160 
                                         f32 %286 = OpLoad %285 
                                         f32 %287 = OpFMul %284 %286 
                                Private f32* %288 = OpAccessChain %36 %160 
                                                      OpStore %288 %287 
                                         f32 %289 = OpLoad %236 
                                Private f32* %290 = OpAccessChain %36 %160 
                                         f32 %291 = OpLoad %290 
                                         f32 %292 = OpFMul %289 %291 
                                Private f32* %293 = OpAccessChain %276 %160 
                                                      OpStore %293 %292 
                                Uniform f32* %296 = OpAccessChain %24 %295 
                                         f32 %297 = OpLoad %296 
                                         f32 %298 = OpFNegate %297 
                                         f32 %299 = OpFAdd %298 %280 
                                                      OpStore %294 %299 
                                         f32 %300 = OpLoad %294 
                                Private f32* %301 = OpAccessChain %276 %160 
                                         f32 %302 = OpLoad %301 
                                         f32 %303 = OpExtInst %1 4 %302 
                                         f32 %304 = OpFMul %300 %303 
                                                      OpStore %294 %304 
                                         f32 %305 = OpLoad %236 
                                Private f32* %306 = OpAccessChain %36 %160 
                                         f32 %307 = OpLoad %306 
                                         f32 %308 = OpFMul %305 %307 
                                         f32 %309 = OpLoad %294 
                                         f32 %310 = OpFNegate %309 
                                         f32 %311 = OpFAdd %308 %310 
                                                      OpStore %236 %311 
                                         f32 %312 = OpLoad %138 
                                         f32 %313 = OpExtInst %1 4 %312 
                                         f32 %314 = OpLoad %236 
                                         f32 %315 = OpFMul %313 %314 
                                         f32 %316 = OpLoad %294 
                                         f32 %317 = OpFAdd %315 %316 
                                                      OpStore %138 %317 
                                Uniform f32* %322 = OpAccessChain %24 %197 %62 %321 
                                         f32 %323 = OpLoad %322 
                                        bool %325 = OpFOrdEqual %323 %324 
                                                      OpStore %320 %325 
                                        bool %326 = OpLoad %320 
                                                      OpSelectionMerge %330 None 
                                                      OpBranchConditional %326 %329 %332 
                                             %329 = OpLabel 
                                         f32 %331 = OpLoad %138 
                                                      OpStore %328 %331 
                                                      OpBranch %330 
                                             %332 = OpLabel 
                                Private f32* %333 = OpAccessChain %276 %160 
                                         f32 %334 = OpLoad %333 
                                                      OpStore %328 %334 
                                                      OpBranch %330 
                                             %330 = OpLabel 
                                         f32 %335 = OpLoad %328 
                                                      OpStore %138 %335 
                                Uniform f32* %337 = OpAccessChain %24 %336 
                                         f32 %338 = OpLoad %337 
                                Uniform f32* %340 = OpAccessChain %24 %339 
                                         f32 %341 = OpLoad %340 
                                         f32 %342 = OpFMul %338 %341 
                                                      OpStore %236 %342 
                                         f32 %343 = OpLoad %236 
                                         f32 %344 = OpLoad %138 
                                         f32 %345 = OpFMul %343 %344 
                                         f32 %346 = OpFAdd %345 %280 
                                                      OpStore %236 %346 
                                         f32 %347 = OpLoad %138 
                                         f32 %348 = OpLoad %236 
                                         f32 %349 = OpFDiv %347 %348 
                                Private f32* %350 = OpAccessChain %36 %160 
                                                      OpStore %350 %349 
                                Uniform f32* %352 = OpAccessChain %24 %351 
                                         f32 %353 = OpLoad %352 
                                Uniform f32* %354 = OpAccessChain %24 %339 
                                         f32 %355 = OpLoad %354 
                                         f32 %356 = OpFMul %353 %355 
                                                      OpStore %138 %356 
                                Private f32* %357 = OpAccessChain %36 %160 
                                         f32 %358 = OpLoad %357 
                                         f32 %359 = OpLoad %138 
                                         f32 %360 = OpFMul %358 %359 
                                                      OpStore %138 %360 
                                         f32 %361 = OpLoad %138 
                                         f32 %362 = OpExtInst %1 37 %361 %280 
                                                      OpStore %236 %362 
                                         f32 %363 = OpLoad %236 
                                         f32 %364 = OpExtInst %1 31 %363 
                                                      OpStore %236 %364 
                                  Input f32* %365 = OpAccessChain %122 %321 
                                         f32 %366 = OpLoad %365 
                                Uniform f32* %368 = OpAccessChain %24 %367 %321 
                                         f32 %369 = OpLoad %368 
                                         f32 %370 = OpFMul %366 %369 
                                Private f32* %371 = OpAccessChain %60 %321 
                                                      OpStore %371 %370 
                                       f32_4 %372 = OpLoad %60 
                                       f32_3 %373 = OpVectorShuffle %372 %372 3 3 3 
                              Uniform f32_4* %374 = OpAccessChain %24 %367 
                                       f32_4 %375 = OpLoad %374 
                                       f32_3 %376 = OpVectorShuffle %375 %375 0 1 2 
                                       f32_3 %377 = OpFMul %373 %376 
                                       f32_4 %378 = OpLoad %60 
                                       f32_4 %379 = OpVectorShuffle %378 %377 4 5 6 3 
                                                      OpStore %60 %379 
                                       f32_4 %380 = OpLoad %86 
                                       f32_4 %381 = OpFNegate %380 
                                       f32_4 %382 = OpLoad %60 
                                       f32_4 %383 = OpFAdd %381 %382 
                                                      OpStore %60 %383 
                                         f32 %385 = OpLoad %236 
                                       f32_4 %386 = OpCompositeConstruct %385 %385 %385 %385 
                                       f32_4 %387 = OpLoad %60 
                                       f32_4 %388 = OpFMul %386 %387 
                                       f32_4 %389 = OpLoad %86 
                                       f32_4 %390 = OpFAdd %388 %389 
                                                      OpStore %384 %390 
                              Uniform f32_4* %392 = OpAccessChain %24 %391 
                                       f32_4 %393 = OpLoad %392 
                                       f32_4 %396 = OpExtInst %1 40 %393 %395 
                                                      OpStore %60 %396 
                                       f32_4 %397 = OpLoad %60 
                                       f32_4 %400 = OpExtInst %1 37 %397 %399 
                                                      OpStore %60 %400 
                                       f32_2 %401 = OpLoad %9 
                                       f32_4 %402 = OpLoad %60 
                                       f32_2 %403 = OpVectorShuffle %402 %402 0 1 
                                       f32_2 %404 = OpFNegate %403 
                                       f32_2 %405 = OpFAdd %401 %404 
                                                      OpStore %276 %405 
                                       f32_2 %406 = OpLoad %9 
                                       f32_2 %409 = OpFMul %406 %408 
                                       f32_4 %410 = OpLoad %60 
                                       f32_2 %411 = OpVectorShuffle %410 %410 0 1 
                                       f32_2 %412 = OpFNegate %411 
                                       f32_2 %413 = OpFAdd %409 %412 
                                                      OpStore %9 %413 
                                       f32_4 %414 = OpLoad %60 
                                       f32_2 %415 = OpVectorShuffle %414 %414 2 3 
                                       f32_2 %416 = OpFNegate %415 
                                       f32_2 %417 = OpLoad %9 
                                       f32_2 %418 = OpFAdd %416 %417 
                                       f32_4 %419 = OpLoad vs_TEXCOORD2 
                                       f32_4 %420 = OpVectorShuffle %419 %418 4 5 2 3 
                                                      OpStore vs_TEXCOORD2 %420 
                                       f32_4 %421 = OpLoad %60 
                                       f32_2 %422 = OpVectorShuffle %421 %421 0 1 
                                       f32_2 %423 = OpFNegate %422 
                                       f32_4 %424 = OpLoad %60 
                                       f32_2 %425 = OpVectorShuffle %424 %424 2 3 
                                       f32_2 %426 = OpFAdd %423 %425 
                                                      OpStore %9 %426 
                                       f32_2 %428 = OpLoad %276 
                                       f32_2 %429 = OpLoad %9 
                                       f32_2 %430 = OpFDiv %428 %429 
                                       f32_4 %431 = OpLoad vs_TEXCOORD0 
                                       f32_4 %432 = OpVectorShuffle %431 %430 0 1 4 5 
                                                      OpStore vs_TEXCOORD0 %432 
                                       f32_2 %434 = OpLoad %433 
                                       f32_4 %435 = OpLoad vs_TEXCOORD0 
                                       f32_4 %436 = OpVectorShuffle %435 %434 4 5 2 3 
                                                      OpStore vs_TEXCOORD0 %436 
                                  Input f32* %438 = OpAccessChain %266 %114 
                                         f32 %439 = OpLoad %438 
                                        bool %440 = OpFOrdGreaterThanEqual %324 %439 
                                                      OpStore %437 %440 
                                        bool %441 = OpLoad %437 
                                         f32 %442 = OpSelect %441 %280 %324 
                                Private f32* %443 = OpAccessChain %9 %160 
                                                      OpStore %443 %442 
                                Uniform f32* %446 = OpAccessChain %24 %445 
                                         f32 %447 = OpLoad %446 
                                         f32 %448 = OpFNegate %447 
                                Uniform f32* %450 = OpAccessChain %24 %449 
                                         f32 %451 = OpLoad %450 
                                         f32 %452 = OpFAdd %448 %451 
                                                      OpStore %444 %452 
                                Private f32* %453 = OpAccessChain %9 %160 
                                         f32 %454 = OpLoad %453 
                                         f32 %455 = OpLoad %444 
                                         f32 %456 = OpFMul %454 %455 
                                Uniform f32* %457 = OpAccessChain %24 %445 
                                         f32 %458 = OpLoad %457 
                                         f32 %459 = OpFAdd %456 %458 
                                Private f32* %460 = OpAccessChain %9 %160 
                                                      OpStore %460 %459 
                                Private f32* %461 = OpAccessChain %9 %160 
                                         f32 %462 = OpLoad %461 
                                         f32 %463 = OpFMul %462 %249 
                                Uniform f32* %465 = OpAccessChain %24 %464 
                                         f32 %466 = OpLoad %465 
                                         f32 %467 = OpFAdd %463 %466 
                                Private f32* %468 = OpAccessChain %9 %160 
                                                      OpStore %468 %467 
                                Private f32* %469 = OpAccessChain %9 %160 
                                         f32 %470 = OpLoad %469 
                                Uniform f32* %471 = OpAccessChain %24 %339 
                                         f32 %472 = OpLoad %471 
                                         f32 %473 = OpFMul %470 %472 
                                Private f32* %474 = OpAccessChain %9 %160 
                                                      OpStore %474 %473 
                                Private f32* %475 = OpAccessChain %9 %160 
                                         f32 %476 = OpLoad %475 
                                         f32 %477 = OpFNegate %476 
                                         f32 %479 = OpFMul %477 %478 
                                         f32 %480 = OpFAdd %479 %478 
                                Private f32* %481 = OpAccessChain %9 %160 
                                                      OpStore %481 %480 
                                Private f32* %482 = OpAccessChain %9 %160 
                                         f32 %483 = OpLoad %482 
                                Private f32* %484 = OpAccessChain %36 %160 
                                         f32 %485 = OpLoad %484 
                                         f32 %486 = OpFMul %483 %485 
                                         f32 %488 = OpFAdd %486 %487 
                                Private f32* %489 = OpAccessChain %36 %321 
                                                      OpStore %489 %488 
                                       f32_4 %491 = OpLoad %36 
                                       f32_2 %492 = OpVectorShuffle %491 %491 0 3 
                                       f32_4 %493 = OpLoad vs_TEXCOORD1 
                                       f32_4 %494 = OpVectorShuffle %493 %492 4 1 2 5 
                                                      OpStore vs_TEXCOORD1 %494 
                                         f32 %495 = OpLoad %138 
                                         f32 %496 = OpFNegate %495 
                                         f32 %497 = OpFMul %496 %478 
                                Private f32* %498 = OpAccessChain %36 %321 
                                         f32 %499 = OpLoad %498 
                                         f32 %500 = OpFAdd %497 %499 
                                 Output f32* %502 = OpAccessChain vs_TEXCOORD1 %114 
                                                      OpStore %502 %500 
                                         f32 %503 = OpLoad %138 
                                         f32 %504 = OpFMul %503 %478 
                                Private f32* %505 = OpAccessChain %36 %321 
                                         f32 %506 = OpLoad %505 
                                         f32 %507 = OpFAdd %504 %506 
                                 Output f32* %508 = OpAccessChain vs_TEXCOORD1 %173 
                                                      OpStore %508 %507 
                                 Output f32* %509 = OpAccessChain %118 %45 %114 
                                         f32 %510 = OpLoad %509 
                                         f32 %511 = OpFNegate %510 
                                 Output f32* %512 = OpAccessChain %118 %45 %114 
                                                      OpStore %512 %511 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 96
; Schema: 0
                                             OpCapability Shader 
                                      %1 = OpExtInstImport "GLSL.std.450" 
                                             OpMemoryModel Logical GLSL450 
                                             OpEntryPoint Fragment %4 "main" %11 %13 %30 %42 %76 
                                             OpExecutionMode %4 OriginUpperLeft 
                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                             OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                             OpDecorate %11 Location 11 
                                             OpDecorate %13 Location 13 
                                             OpDecorate %22 DescriptorSet 22 
                                             OpDecorate %22 Binding 22 
                                             OpDecorate %26 DescriptorSet 26 
                                             OpDecorate %26 Binding 26 
                                             OpDecorate vs_TEXCOORD0 Location 30 
                                             OpDecorate vs_TEXCOORD1 Location 42 
                                             OpDecorate %76 Location 76 
                                      %2 = OpTypeVoid 
                                      %3 = OpTypeFunction %2 
                                      %6 = OpTypeFloat 32 
                                      %7 = OpTypeVector %6 4 
                                      %8 = OpTypePointer Private %7 
                       Private f32_4* %9 = OpVariable Private 
                                     %10 = OpTypePointer Input %7 
                        Input f32_4* %11 = OpVariable Input 
                        Input f32_4* %13 = OpVariable Input 
                                     %17 = OpTypeVector %6 2 
                                     %18 = OpTypePointer Private %17 
                      Private f32_2* %19 = OpVariable Private 
                                     %20 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                     %21 = OpTypePointer UniformConstant %20 
UniformConstant read_only Texture2D* %22 = OpVariable UniformConstant 
                                     %24 = OpTypeSampler 
                                     %25 = OpTypePointer UniformConstant %24 
            UniformConstant sampler* %26 = OpVariable UniformConstant 
                                     %28 = OpTypeSampledImage %20 
               Input f32_4* vs_TEXCOORD0 = OpVariable Input 
                                     %34 = OpTypeInt 32 0 
                                 u32 %35 = OpConstant 3 
                                 u32 %37 = OpConstant 0 
                                     %38 = OpTypePointer Private %6 
               Input f32_4* vs_TEXCOORD1 = OpVariable Input 
                                 f32 %51 = OpConstant 3.674022E-40 
                                 f32 %52 = OpConstant 3.674022E-40 
                                 u32 %64 = OpConstant 1 
                                 f32 %68 = OpConstant 3.674022E-40 
                                     %75 = OpTypePointer Output %7 
                       Output f32_4* %76 = OpVariable Output 
                                     %78 = OpTypeBool 
                                     %79 = OpTypePointer Private %78 
                       Private bool* %80 = OpVariable Private 
                                     %85 = OpTypeInt 32 1 
                                 i32 %86 = OpConstant 0 
                                 i32 %87 = OpConstant 1 
                                 i32 %89 = OpConstant -1 
                                 void %4 = OpFunction None %3 
                                      %5 = OpLabel 
                               f32_4 %12 = OpLoad %11 
                               f32_4 %14 = OpLoad %13 
                               f32_4 %15 = OpFNegate %14 
                               f32_4 %16 = OpFAdd %12 %15 
                                             OpStore %9 %16 
                 read_only Texture2D %23 = OpLoad %22 
                             sampler %27 = OpLoad %26 
          read_only Texture2DSampled %29 = OpSampledImage %23 %27 
                               f32_4 %31 = OpLoad vs_TEXCOORD0 
                               f32_2 %32 = OpVectorShuffle %31 %31 0 1 
                               f32_4 %33 = OpImageSampleImplicitLod %29 %32 
                                 f32 %36 = OpCompositeExtract %33 3 
                        Private f32* %39 = OpAccessChain %19 %37 
                                             OpStore %39 %36 
                               f32_2 %40 = OpLoad %19 
                               f32_2 %41 = OpVectorShuffle %40 %40 0 0 
                               f32_4 %43 = OpLoad vs_TEXCOORD1 
                               f32_2 %44 = OpVectorShuffle %43 %43 0 0 
                               f32_2 %45 = OpFMul %41 %44 
                               f32_4 %46 = OpLoad vs_TEXCOORD1 
                               f32_2 %47 = OpVectorShuffle %46 %46 2 1 
                               f32_2 %48 = OpFNegate %47 
                               f32_2 %49 = OpFAdd %45 %48 
                                             OpStore %19 %49 
                               f32_2 %50 = OpLoad %19 
                               f32_2 %53 = OpCompositeConstruct %51 %51 
                               f32_2 %54 = OpCompositeConstruct %52 %52 
                               f32_2 %55 = OpExtInst %1 43 %50 %53 %54 
                                             OpStore %19 %55 
                               f32_2 %56 = OpLoad %19 
                               f32_4 %57 = OpVectorShuffle %56 %56 0 0 0 0 
                               f32_4 %58 = OpLoad %9 
                               f32_4 %59 = OpFMul %57 %58 
                               f32_4 %60 = OpLoad %13 
                               f32_4 %61 = OpFAdd %59 %60 
                                             OpStore %9 %61 
                        Private f32* %62 = OpAccessChain %9 %35 
                                 f32 %63 = OpLoad %62 
                        Private f32* %65 = OpAccessChain %19 %64 
                                 f32 %66 = OpLoad %65 
                                 f32 %67 = OpFMul %63 %66 
                                 f32 %69 = OpFAdd %67 %68 
                        Private f32* %70 = OpAccessChain %19 %37 
                                             OpStore %70 %69 
                               f32_2 %71 = OpLoad %19 
                               f32_4 %72 = OpVectorShuffle %71 %71 1 1 1 1 
                               f32_4 %73 = OpLoad %9 
                               f32_4 %74 = OpFMul %72 %73 
                                             OpStore %9 %74 
                               f32_4 %77 = OpLoad %9 
                                             OpStore %76 %77 
                        Private f32* %81 = OpAccessChain %19 %37 
                                 f32 %82 = OpLoad %81 
                                bool %83 = OpFOrdLessThan %82 %51 
                                             OpStore %80 %83 
                                bool %84 = OpLoad %80 
                                 i32 %88 = OpSelect %84 %87 %86 
                                 i32 %90 = OpIMul %88 %89 
                                bool %91 = OpINotEqual %90 %86 
                                             OpSelectionMerge %93 None 
                                             OpBranchConditional %91 %92 %93 
                                     %92 = OpLabel 
                                             OpKill
                                     %93 = OpLabel 
                                             OpReturn
                                             OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "UNDERLAY_ON" "UNITY_UI_ALPHACLIP" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "UNDERLAY_ON" "UNITY_UI_ALPHACLIP" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _FaceColor;
uniform 	float _FaceDilate;
uniform 	float _OutlineSoftness;
uniform 	vec4 _OutlineColor;
uniform 	float _OutlineWidth;
uniform 	float _UnderlayOffsetX;
uniform 	float _UnderlayOffsetY;
uniform 	float _UnderlayDilate;
uniform 	float _UnderlaySoftness;
uniform 	float _WeightNormal;
uniform 	float _WeightBold;
uniform 	float _ScaleRatioA;
uniform 	float _ScaleRatioC;
uniform 	float _VertexOffsetX;
uniform 	float _VertexOffsetY;
uniform 	vec4 _ClipRect;
uniform 	float _MaskSoftnessX;
uniform 	float _MaskSoftnessY;
uniform 	float _TextureWidth;
uniform 	float _TextureHeight;
uniform 	float _GradientScale;
uniform 	float _ScaleX;
uniform 	float _ScaleY;
uniform 	float _PerspectiveFilter;
uniform 	float _Sharpness;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_COLOR0;
in  vec2 in_TEXCOORD0;
in  vec2 in_TEXCOORD1;
out vec4 vs_COLOR0;
out vec4 vs_COLOR1;
out vec4 vs_TEXCOORD0;
out vec4 vs_TEXCOORD1;
out vec4 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec2 vs_TEXCOORD4;
vec2 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
vec4 u_xlat6;
vec3 u_xlat7;
vec2 u_xlat8;
float u_xlat14;
float u_xlat15;
float u_xlat21;
bool u_xlatb21;
void main()
{
    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
    gl_Position = u_xlat2;
    vs_COLOR0.w = _FaceColor.w;
    u_xlat3.xyz = in_COLOR0.xyz;
    u_xlat3.w = 1.0;
    u_xlat4 = u_xlat3 * _FaceColor;
    u_xlat2.xyz = u_xlat4.www * u_xlat4.xyz;
    vs_COLOR0.xyz = u_xlat2.xyz;
    u_xlat5.xyz = (-u_xlat2.xyz);
    u_xlat5.w = (-u_xlat4.w);
    u_xlat6.xyz = _OutlineColor.www * _OutlineColor.xyz;
    u_xlat6.w = _OutlineColor.w;
    u_xlat5 = u_xlat5 + u_xlat6;
    u_xlat14 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat14 = inversesqrt(u_xlat14);
    u_xlat1.xyz = vec3(u_xlat14) * u_xlat1.xyz;
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat14 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat14 = inversesqrt(u_xlat14);
    u_xlat2.xyz = vec3(u_xlat14) * u_xlat2.xyz;
    u_xlat14 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat1.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;
    u_xlat1.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat1.xy;
    u_xlat1.xy = abs(u_xlat1.xy) * vec2(_ScaleX, _ScaleY);
    u_xlat1.xy = u_xlat2.ww / u_xlat1.xy;
    u_xlat21 = dot(u_xlat1.xy, u_xlat1.xy);
    u_xlat1.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) * vec2(0.25, 0.25) + u_xlat1.xy;
    vs_TEXCOORD2.zw = vec2(0.25, 0.25) / u_xlat1.xy;
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.x = abs(in_TEXCOORD1.y) * _GradientScale;
    u_xlat8.x = _Sharpness + 1.0;
    u_xlat1.x = u_xlat8.x * u_xlat1.x;
    u_xlat8.x = u_xlat21 * u_xlat1.x;
    u_xlat15 = (-_PerspectiveFilter) + 1.0;
    u_xlat15 = u_xlat15 * abs(u_xlat8.x);
    u_xlat21 = u_xlat21 * u_xlat1.x + (-u_xlat15);
    u_xlat14 = abs(u_xlat14) * u_xlat21 + u_xlat15;
    u_xlatb21 = hlslcc_mtx4x4glstate_matrix_projection[3].w==0.0;
    u_xlat14 = (u_xlatb21) ? u_xlat14 : u_xlat8.x;
    u_xlat21 = _OutlineSoftness * _ScaleRatioA;
    u_xlat21 = u_xlat21 * u_xlat14 + 1.0;
    u_xlat1.x = u_xlat14 / u_xlat21;
    u_xlat21 = _OutlineWidth * _ScaleRatioA;
    u_xlat21 = u_xlat21 * 0.5;
    u_xlat8.x = u_xlat1.x * u_xlat21;
    u_xlat8.x = u_xlat8.x + u_xlat8.x;
    u_xlat8.x = min(u_xlat8.x, 1.0);
    u_xlat8.x = sqrt(u_xlat8.x);
    u_xlat2 = u_xlat5 * u_xlat8.xxxx;
    vs_COLOR1.xyz = u_xlat4.xyz * u_xlat4.www + u_xlat2.xyz;
    vs_COLOR1.w = u_xlat3.w * _FaceColor.w + u_xlat2.w;
    u_xlat2 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));
    u_xlat2 = min(u_xlat2, vec4(2e+10, 2e+10, 2e+10, 2e+10));
    u_xlat8.xy = u_xlat0.xy + (-u_xlat2.xy);
    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + (-u_xlat2.xy);
    vs_TEXCOORD2.xy = (-u_xlat2.zw) + u_xlat0.xy;
    u_xlat0.xy = (-u_xlat2.xy) + u_xlat2.zw;
    vs_TEXCOORD0.zw = u_xlat8.xy / u_xlat0.xy;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlatb0 = 0.0>=in_TEXCOORD1.y;
    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);
    u_xlat7.x = (-_WeightNormal) + _WeightBold;
    u_xlat0.x = u_xlat0.x * u_xlat7.x + _WeightNormal;
    u_xlat0.x = u_xlat0.x * 0.25 + _FaceDilate;
    u_xlat0.x = u_xlat0.x * _ScaleRatioA;
    u_xlat0.x = (-u_xlat0.x) * 0.5 + 0.5;
    u_xlat1.w = u_xlat0.x * u_xlat1.x + -0.5;
    vs_TEXCOORD1.y = (-u_xlat21) * u_xlat1.x + u_xlat1.w;
    vs_TEXCOORD1.z = u_xlat21 * u_xlat1.x + u_xlat1.w;
    vs_TEXCOORD1.xw = u_xlat1.xw;
    vs_TEXCOORD3.z = in_COLOR0.w;
    vs_TEXCOORD3.w = 0.0;
    u_xlat1 = vec4(_UnderlaySoftness, _UnderlayDilate, _UnderlayOffsetX, _UnderlayOffsetY) * vec4(vec4(_ScaleRatioC, _ScaleRatioC, _ScaleRatioC, _ScaleRatioC));
    u_xlat7.xz = (-u_xlat1.zw) * vec2(_GradientScale);
    u_xlat7.xz = u_xlat7.xz / vec2(_TextureWidth, _TextureHeight);
    vs_TEXCOORD3.xy = u_xlat7.xz + in_TEXCOORD0.xy;
    u_xlat7.x = u_xlat1.x * u_xlat14 + 1.0;
    u_xlat7.x = u_xlat14 / u_xlat7.x;
    u_xlat14 = u_xlat1.y * 0.5;
    u_xlat0.x = u_xlat0.x * u_xlat7.x + -0.5;
    vs_TEXCOORD4.y = (-u_xlat14) * u_xlat7.x + u_xlat0.x;
    vs_TEXCOORD4.x = u_xlat7.x;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _UnderlayColor;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
in  vec4 vs_COLOR0;
in  vec4 vs_TEXCOORD0;
in  vec4 vs_TEXCOORD1;
in  vec4 vs_TEXCOORD3;
in  vec2 vs_TEXCOORD4;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = texture(_MainTex, vs_TEXCOORD3.xy);
    u_xlat0.x = u_xlat0.w * vs_TEXCOORD4.x + (-vs_TEXCOORD4.y);
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat1.xyz = _UnderlayColor.www * _UnderlayColor.xyz;
    u_xlat1.w = _UnderlayColor.w;
    u_xlat0 = u_xlat0.xxxx * u_xlat1;
    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1.x = u_xlat1.w * vs_TEXCOORD1.x + (-vs_TEXCOORD1.w);
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat2 = u_xlat1.xxxx * vs_COLOR0;
    u_xlat1.x = (-vs_COLOR0.w) * u_xlat1.x + 1.0;
    u_xlat0 = u_xlat0 * u_xlat1.xxxx + u_xlat2;
    u_xlat1.x = u_xlat0.w * vs_TEXCOORD3.z + -0.00100000005;
    u_xlat0 = u_xlat0 * vs_TEXCOORD3.zzzz;
    SV_Target0 = u_xlat0;
    u_xlatb0 = u_xlat1.x<0.0;
    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "UNDERLAY_ON" "UNITY_UI_ALPHACLIP" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 653
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %12 %118 %122 %129 %196 %299 %308 %412 %468 %474 %534 %552 %637 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpDecorate %12 Location 12 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpDecorate %19 ArrayStride 19 
                                                      OpDecorate %20 ArrayStride 20 
                                                      OpDecorate %21 ArrayStride 21 
                                                      OpMemberDecorate %22 0 Offset 22 
                                                      OpMemberDecorate %22 1 Offset 22 
                                                      OpMemberDecorate %22 2 Offset 22 
                                                      OpMemberDecorate %22 3 Offset 22 
                                                      OpMemberDecorate %22 4 Offset 22 
                                                      OpMemberDecorate %22 5 Offset 22 
                                                      OpMemberDecorate %22 6 Offset 22 
                                                      OpMemberDecorate %22 7 Offset 22 
                                                      OpMemberDecorate %22 8 Offset 22 
                                                      OpMemberDecorate %22 9 Offset 22 
                                                      OpMemberDecorate %22 10 Offset 22 
                                                      OpMemberDecorate %22 11 Offset 22 
                                                      OpMemberDecorate %22 12 Offset 22 
                                                      OpMemberDecorate %22 13 Offset 22 
                                                      OpMemberDecorate %22 14 Offset 22 
                                                      OpMemberDecorate %22 15 Offset 22 
                                                      OpMemberDecorate %22 16 Offset 22 
                                                      OpMemberDecorate %22 17 Offset 22 
                                                      OpMemberDecorate %22 18 Offset 22 
                                                      OpMemberDecorate %22 19 Offset 22 
                                                      OpMemberDecorate %22 20 Offset 22 
                                                      OpMemberDecorate %22 21 Offset 22 
                                                      OpMemberDecorate %22 22 Offset 22 
                                                      OpMemberDecorate %22 23 Offset 22 
                                                      OpMemberDecorate %22 24 Offset 22 
                                                      OpMemberDecorate %22 25 Offset 22 
                                                      OpMemberDecorate %22 26 Offset 22 
                                                      OpMemberDecorate %22 27 Offset 22 
                                                      OpMemberDecorate %22 28 Offset 22 
                                                      OpMemberDecorate %22 29 Offset 22 
                                                      OpMemberDecorate %22 30 Offset 22 
                                                      OpDecorate %22 Block 
                                                      OpDecorate %24 DescriptorSet 24 
                                                      OpDecorate %24 Binding 24 
                                                      OpMemberDecorate %116 0 BuiltIn 116 
                                                      OpMemberDecorate %116 1 BuiltIn 116 
                                                      OpMemberDecorate %116 2 BuiltIn 116 
                                                      OpDecorate %116 Block 
                                                      OpDecorate %122 Location 122 
                                                      OpDecorate %129 Location 129 
                                                      OpDecorate %196 Location 196 
                                                      OpDecorate vs_TEXCOORD2 Location 299 
                                                      OpDecorate %308 Location 308 
                                                      OpDecorate %412 Location 412 
                                                      OpDecorate vs_TEXCOORD0 Location 468 
                                                      OpDecorate %474 Location 474 
                                                      OpDecorate vs_TEXCOORD1 Location 534 
                                                      OpDecorate vs_TEXCOORD3 Location 552 
                                                      OpDecorate vs_TEXCOORD4 Location 637 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 2 
                                               %8 = OpTypePointer Private %7 
                                Private f32_2* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 4 
                                              %11 = OpTypePointer Input %10 
                                 Input f32_4* %12 = OpVariable Input 
                                              %15 = OpTypeVector %6 3 
                                              %16 = OpTypeInt 32 0 
                                          u32 %17 = OpConstant 4 
                                              %18 = OpTypeArray %10 %17 
                                              %19 = OpTypeArray %10 %17 
                                              %20 = OpTypeArray %10 %17 
                                              %21 = OpTypeArray %10 %17 
                                              %22 = OpTypeStruct %15 %10 %18 %19 %20 %21 %10 %6 %6 %10 %6 %6 %6 %6 %6 %6 %6 %6 %6 %6 %6 %10 %6 %6 %6 %6 %6 %6 %6 %6 %6 
                                              %23 = OpTypePointer Uniform %22 
Uniform struct {f32_3; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4[4]; f32_4; f32; f32; f32_4; f32; f32; f32; f32; f32; f32; f32; f32; f32; f32; f32; f32_4; f32; f32; f32; f32; f32; f32; f32; f32; f32;}* %24 = OpVariable Uniform 
                                              %25 = OpTypeInt 32 1 
                                          i32 %26 = OpConstant 19 
                                              %27 = OpTypePointer Uniform %6 
                                          i32 %30 = OpConstant 20 
                                              %35 = OpTypePointer Private %10 
                               Private f32_4* %36 = OpVariable Private 
                                          i32 %39 = OpConstant 2 
                                          i32 %40 = OpConstant 1 
                                              %41 = OpTypePointer Uniform %10 
                                          i32 %45 = OpConstant 0 
                               Private f32_4* %60 = OpVariable Private 
                                          i32 %62 = OpConstant 3 
                                              %80 = OpTypePointer Uniform %15 
                               Private f32_4* %86 = OpVariable Private 
                                          i32 %89 = OpConstant 5 
                                         u32 %114 = OpConstant 1 
                                             %115 = OpTypeArray %6 %114 
                                             %116 = OpTypeStruct %10 %6 %115 
                                             %117 = OpTypePointer Output %116 
        Output struct {f32_4; f32; f32[1];}* %118 = OpVariable Output 
                                             %120 = OpTypePointer Output %10 
                               Output f32_4* %122 = OpVariable Output 
                                         i32 %123 = OpConstant 6 
                                         u32 %124 = OpConstant 3 
                                             %127 = OpTypePointer Output %6 
                                Input f32_4* %129 = OpVariable Input 
                                         f32 %134 = OpConstant 3.674022E-40 
                                             %135 = OpTypePointer Private %6 
                              Private f32_4* %137 = OpVariable Private 
                              Private f32_4* %153 = OpVariable Private 
                              Private f32_4* %163 = OpVariable Private 
                                         i32 %164 = OpConstant 9 
                                Private f32* %180 = OpVariable Private 
                                             %195 = OpTypePointer Input %15 
                                Input f32_3* %196 = OpVariable Input 
                                         u32 %202 = OpConstant 0 
                                         u32 %215 = OpConstant 2 
                                         i32 %239 = OpConstant 4 
                                         i32 %261 = OpConstant 27 
                                         i32 %264 = OpConstant 28 
                                Private f32* %278 = OpVariable Private 
                                         i32 %284 = OpConstant 22 
                                         i32 %287 = OpConstant 23 
                                         f32 %291 = OpConstant 3.674022E-40 
                                       f32_2 %292 = OpConstantComposite %291 %291 
                       Output f32_4* vs_TEXCOORD2 = OpVariable Output 
                                             %307 = OpTypePointer Input %7 
                                Input f32_2* %308 = OpVariable Input 
                                             %309 = OpTypePointer Input %6 
                                         i32 %313 = OpConstant 26 
                              Private f32_2* %318 = OpVariable Private 
                                         i32 %319 = OpConstant 30 
                                Private f32* %335 = OpVariable Private 
                                         i32 %336 = OpConstant 29 
                                             %359 = OpTypeBool 
                                             %360 = OpTypePointer Private %359 
                               Private bool* %361 = OpVariable Private 
                                         f32 %364 = OpConstant 3.674022E-40 
                                             %367 = OpTypePointer Function %6 
                                         i32 %376 = OpConstant 8 
                                         i32 %379 = OpConstant 17 
                                         i32 %391 = OpConstant 10 
                               Output f32_4* %412 = OpVariable Output 
                                         i32 %432 = OpConstant 21 
                                         f32 %435 = OpConstant 3.674022E-40 
                                       f32_4 %436 = OpConstantComposite %435 %435 %435 %435 
                                         f32 %439 = OpConstant 3.674022E-40 
                                       f32_4 %440 = OpConstantComposite %439 %439 %439 %439 
                                         f32 %448 = OpConstant 3.674022E-40 
                                       f32_2 %449 = OpConstantComposite %448 %448 
                       Output f32_4* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_2* %474 = OpVariable Input 
                               Private bool* %478 = OpVariable Private 
                                             %485 = OpTypePointer Private %15 
                              Private f32_3* %486 = OpVariable Private 
                                         i32 %487 = OpConstant 15 
                                         i32 %491 = OpConstant 16 
                                         i32 %508 = OpConstant 7 
                                         f32 %522 = OpConstant 3.674022E-40 
                                         f32 %531 = OpConstant 3.674022E-40 
                       Output f32_4* vs_TEXCOORD1 = OpVariable Output 
                       Output f32_4* vs_TEXCOORD3 = OpVariable Output 
                                         i32 %557 = OpConstant 14 
                                         i32 %560 = OpConstant 13 
                                         i32 %563 = OpConstant 11 
                                         i32 %566 = OpConstant 12 
                                         i32 %570 = OpConstant 18 
                                         i32 %597 = OpConstant 24 
                                         i32 %600 = OpConstant 25 
                                             %636 = OpTypePointer Output %7 
                       Output f32_2* vs_TEXCOORD4 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                               Function f32* %368 = OpVariable Function 
                                        f32_4 %13 = OpLoad %12 
                                        f32_2 %14 = OpVectorShuffle %13 %13 0 1 
                                 Uniform f32* %28 = OpAccessChain %24 %26 
                                          f32 %29 = OpLoad %28 
                                 Uniform f32* %31 = OpAccessChain %24 %30 
                                          f32 %32 = OpLoad %31 
                                        f32_2 %33 = OpCompositeConstruct %29 %32 
                                        f32_2 %34 = OpFAdd %14 %33 
                                                      OpStore %9 %34 
                                        f32_2 %37 = OpLoad %9 
                                        f32_4 %38 = OpVectorShuffle %37 %37 1 1 1 1 
                               Uniform f32_4* %42 = OpAccessChain %24 %39 %40 
                                        f32_4 %43 = OpLoad %42 
                                        f32_4 %44 = OpFMul %38 %43 
                                                      OpStore %36 %44 
                               Uniform f32_4* %46 = OpAccessChain %24 %39 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_2 %48 = OpLoad %9 
                                        f32_4 %49 = OpVectorShuffle %48 %48 0 0 0 0 
                                        f32_4 %50 = OpFMul %47 %49 
                                        f32_4 %51 = OpLoad %36 
                                        f32_4 %52 = OpFAdd %50 %51 
                                                      OpStore %36 %52 
                               Uniform f32_4* %53 = OpAccessChain %24 %39 %39 
                                        f32_4 %54 = OpLoad %53 
                                        f32_4 %55 = OpLoad %12 
                                        f32_4 %56 = OpVectorShuffle %55 %55 2 2 2 2 
                                        f32_4 %57 = OpFMul %54 %56 
                                        f32_4 %58 = OpLoad %36 
                                        f32_4 %59 = OpFAdd %57 %58 
                                                      OpStore %36 %59 
                                        f32_4 %61 = OpLoad %36 
                               Uniform f32_4* %63 = OpAccessChain %24 %39 %62 
                                        f32_4 %64 = OpLoad %63 
                                        f32_4 %65 = OpFAdd %61 %64 
                                                      OpStore %60 %65 
                               Uniform f32_4* %66 = OpAccessChain %24 %39 %62 
                                        f32_4 %67 = OpLoad %66 
                                        f32_3 %68 = OpVectorShuffle %67 %67 0 1 2 
                                        f32_4 %69 = OpLoad %12 
                                        f32_3 %70 = OpVectorShuffle %69 %69 3 3 3 
                                        f32_3 %71 = OpFMul %68 %70 
                                        f32_4 %72 = OpLoad %36 
                                        f32_3 %73 = OpVectorShuffle %72 %72 0 1 2 
                                        f32_3 %74 = OpFAdd %71 %73 
                                        f32_4 %75 = OpLoad %36 
                                        f32_4 %76 = OpVectorShuffle %75 %74 4 5 6 3 
                                                      OpStore %36 %76 
                                        f32_4 %77 = OpLoad %36 
                                        f32_3 %78 = OpVectorShuffle %77 %77 0 1 2 
                                        f32_3 %79 = OpFNegate %78 
                               Uniform f32_3* %81 = OpAccessChain %24 %45 
                                        f32_3 %82 = OpLoad %81 
                                        f32_3 %83 = OpFAdd %79 %82 
                                        f32_4 %84 = OpLoad %36 
                                        f32_4 %85 = OpVectorShuffle %84 %83 4 5 6 3 
                                                      OpStore %36 %85 
                                        f32_4 %87 = OpLoad %60 
                                        f32_4 %88 = OpVectorShuffle %87 %87 1 1 1 1 
                               Uniform f32_4* %90 = OpAccessChain %24 %89 %40 
                                        f32_4 %91 = OpLoad %90 
                                        f32_4 %92 = OpFMul %88 %91 
                                                      OpStore %86 %92 
                               Uniform f32_4* %93 = OpAccessChain %24 %89 %45 
                                        f32_4 %94 = OpLoad %93 
                                        f32_4 %95 = OpLoad %60 
                                        f32_4 %96 = OpVectorShuffle %95 %95 0 0 0 0 
                                        f32_4 %97 = OpFMul %94 %96 
                                        f32_4 %98 = OpLoad %86 
                                        f32_4 %99 = OpFAdd %97 %98 
                                                      OpStore %86 %99 
                              Uniform f32_4* %100 = OpAccessChain %24 %89 %39 
                                       f32_4 %101 = OpLoad %100 
                                       f32_4 %102 = OpLoad %60 
                                       f32_4 %103 = OpVectorShuffle %102 %102 2 2 2 2 
                                       f32_4 %104 = OpFMul %101 %103 
                                       f32_4 %105 = OpLoad %86 
                                       f32_4 %106 = OpFAdd %104 %105 
                                                      OpStore %86 %106 
                              Uniform f32_4* %107 = OpAccessChain %24 %89 %62 
                                       f32_4 %108 = OpLoad %107 
                                       f32_4 %109 = OpLoad %60 
                                       f32_4 %110 = OpVectorShuffle %109 %109 3 3 3 3 
                                       f32_4 %111 = OpFMul %108 %110 
                                       f32_4 %112 = OpLoad %86 
                                       f32_4 %113 = OpFAdd %111 %112 
                                                      OpStore %60 %113 
                                       f32_4 %119 = OpLoad %60 
                               Output f32_4* %121 = OpAccessChain %118 %45 
                                                      OpStore %121 %119 
                                Uniform f32* %125 = OpAccessChain %24 %123 %124 
                                         f32 %126 = OpLoad %125 
                                 Output f32* %128 = OpAccessChain %122 %124 
                                                      OpStore %128 %126 
                                       f32_4 %130 = OpLoad %129 
                                       f32_3 %131 = OpVectorShuffle %130 %130 0 1 2 
                                       f32_4 %132 = OpLoad %86 
                                       f32_4 %133 = OpVectorShuffle %132 %131 4 5 6 3 
                                                      OpStore %86 %133 
                                Private f32* %136 = OpAccessChain %86 %124 
                                                      OpStore %136 %134 
                                       f32_4 %138 = OpLoad %86 
                              Uniform f32_4* %139 = OpAccessChain %24 %123 
                                       f32_4 %140 = OpLoad %139 
                                       f32_4 %141 = OpFMul %138 %140 
                                                      OpStore %137 %141 
                                       f32_4 %142 = OpLoad %137 
                                       f32_3 %143 = OpVectorShuffle %142 %142 3 3 3 
                                       f32_4 %144 = OpLoad %137 
                                       f32_3 %145 = OpVectorShuffle %144 %144 0 1 2 
                                       f32_3 %146 = OpFMul %143 %145 
                                       f32_4 %147 = OpLoad %60 
                                       f32_4 %148 = OpVectorShuffle %147 %146 4 5 6 3 
                                                      OpStore %60 %148 
                                       f32_4 %149 = OpLoad %60 
                                       f32_3 %150 = OpVectorShuffle %149 %149 0 1 2 
                                       f32_4 %151 = OpLoad %122 
                                       f32_4 %152 = OpVectorShuffle %151 %150 4 5 6 3 
                                                      OpStore %122 %152 
                                       f32_4 %154 = OpLoad %60 
                                       f32_3 %155 = OpVectorShuffle %154 %154 0 1 2 
                                       f32_3 %156 = OpFNegate %155 
                                       f32_4 %157 = OpLoad %153 
                                       f32_4 %158 = OpVectorShuffle %157 %156 4 5 6 3 
                                                      OpStore %153 %158 
                                Private f32* %159 = OpAccessChain %137 %124 
                                         f32 %160 = OpLoad %159 
                                         f32 %161 = OpFNegate %160 
                                Private f32* %162 = OpAccessChain %153 %124 
                                                      OpStore %162 %161 
                              Uniform f32_4* %165 = OpAccessChain %24 %164 
                                       f32_4 %166 = OpLoad %165 
                                       f32_3 %167 = OpVectorShuffle %166 %166 3 3 3 
                              Uniform f32_4* %168 = OpAccessChain %24 %164 
                                       f32_4 %169 = OpLoad %168 
                                       f32_3 %170 = OpVectorShuffle %169 %169 0 1 2 
                                       f32_3 %171 = OpFMul %167 %170 
                                       f32_4 %172 = OpLoad %163 
                                       f32_4 %173 = OpVectorShuffle %172 %171 4 5 6 3 
                                                      OpStore %163 %173 
                                Uniform f32* %174 = OpAccessChain %24 %164 %124 
                                         f32 %175 = OpLoad %174 
                                Private f32* %176 = OpAccessChain %163 %124 
                                                      OpStore %176 %175 
                                       f32_4 %177 = OpLoad %153 
                                       f32_4 %178 = OpLoad %163 
                                       f32_4 %179 = OpFAdd %177 %178 
                                                      OpStore %153 %179 
                                       f32_4 %181 = OpLoad %36 
                                       f32_3 %182 = OpVectorShuffle %181 %181 0 1 2 
                                       f32_4 %183 = OpLoad %36 
                                       f32_3 %184 = OpVectorShuffle %183 %183 0 1 2 
                                         f32 %185 = OpDot %182 %184 
                                                      OpStore %180 %185 
                                         f32 %186 = OpLoad %180 
                                         f32 %187 = OpExtInst %1 32 %186 
                                                      OpStore %180 %187 
                                         f32 %188 = OpLoad %180 
                                       f32_3 %189 = OpCompositeConstruct %188 %188 %188 
                                       f32_4 %190 = OpLoad %36 
                                       f32_3 %191 = OpVectorShuffle %190 %190 0 1 2 
                                       f32_3 %192 = OpFMul %189 %191 
                                       f32_4 %193 = OpLoad %36 
                                       f32_4 %194 = OpVectorShuffle %193 %192 4 5 6 3 
                                                      OpStore %36 %194 
                                       f32_3 %197 = OpLoad %196 
                              Uniform f32_4* %198 = OpAccessChain %24 %62 %45 
                                       f32_4 %199 = OpLoad %198 
                                       f32_3 %200 = OpVectorShuffle %199 %199 0 1 2 
                                         f32 %201 = OpDot %197 %200 
                                Private f32* %203 = OpAccessChain %60 %202 
                                                      OpStore %203 %201 
                                       f32_3 %204 = OpLoad %196 
                              Uniform f32_4* %205 = OpAccessChain %24 %62 %40 
                                       f32_4 %206 = OpLoad %205 
                                       f32_3 %207 = OpVectorShuffle %206 %206 0 1 2 
                                         f32 %208 = OpDot %204 %207 
                                Private f32* %209 = OpAccessChain %60 %114 
                                                      OpStore %209 %208 
                                       f32_3 %210 = OpLoad %196 
                              Uniform f32_4* %211 = OpAccessChain %24 %62 %39 
                                       f32_4 %212 = OpLoad %211 
                                       f32_3 %213 = OpVectorShuffle %212 %212 0 1 2 
                                         f32 %214 = OpDot %210 %213 
                                Private f32* %216 = OpAccessChain %60 %215 
                                                      OpStore %216 %214 
                                       f32_4 %217 = OpLoad %60 
                                       f32_3 %218 = OpVectorShuffle %217 %217 0 1 2 
                                       f32_4 %219 = OpLoad %60 
                                       f32_3 %220 = OpVectorShuffle %219 %219 0 1 2 
                                         f32 %221 = OpDot %218 %220 
                                                      OpStore %180 %221 
                                         f32 %222 = OpLoad %180 
                                         f32 %223 = OpExtInst %1 32 %222 
                                                      OpStore %180 %223 
                                         f32 %224 = OpLoad %180 
                                       f32_3 %225 = OpCompositeConstruct %224 %224 %224 
                                       f32_4 %226 = OpLoad %60 
                                       f32_3 %227 = OpVectorShuffle %226 %226 0 1 2 
                                       f32_3 %228 = OpFMul %225 %227 
                                       f32_4 %229 = OpLoad %60 
                                       f32_4 %230 = OpVectorShuffle %229 %228 4 5 6 3 
                                                      OpStore %60 %230 
                                       f32_4 %231 = OpLoad %60 
                                       f32_3 %232 = OpVectorShuffle %231 %231 0 1 2 
                                       f32_4 %233 = OpLoad %36 
                                       f32_3 %234 = OpVectorShuffle %233 %233 0 1 2 
                                         f32 %235 = OpDot %232 %234 
                                                      OpStore %180 %235 
                              Uniform f32_4* %236 = OpAccessChain %24 %40 
                                       f32_4 %237 = OpLoad %236 
                                       f32_2 %238 = OpVectorShuffle %237 %237 1 1 
                              Uniform f32_4* %240 = OpAccessChain %24 %239 %40 
                                       f32_4 %241 = OpLoad %240 
                                       f32_2 %242 = OpVectorShuffle %241 %241 0 1 
                                       f32_2 %243 = OpFMul %238 %242 
                                       f32_4 %244 = OpLoad %36 
                                       f32_4 %245 = OpVectorShuffle %244 %243 4 5 2 3 
                                                      OpStore %36 %245 
                              Uniform f32_4* %246 = OpAccessChain %24 %239 %45 
                                       f32_4 %247 = OpLoad %246 
                                       f32_2 %248 = OpVectorShuffle %247 %247 0 1 
                              Uniform f32_4* %249 = OpAccessChain %24 %40 
                                       f32_4 %250 = OpLoad %249 
                                       f32_2 %251 = OpVectorShuffle %250 %250 0 0 
                                       f32_2 %252 = OpFMul %248 %251 
                                       f32_4 %253 = OpLoad %36 
                                       f32_2 %254 = OpVectorShuffle %253 %253 0 1 
                                       f32_2 %255 = OpFAdd %252 %254 
                                       f32_4 %256 = OpLoad %36 
                                       f32_4 %257 = OpVectorShuffle %256 %255 4 5 2 3 
                                                      OpStore %36 %257 
                                       f32_4 %258 = OpLoad %36 
                                       f32_2 %259 = OpVectorShuffle %258 %258 0 1 
                                       f32_2 %260 = OpExtInst %1 4 %259 
                                Uniform f32* %262 = OpAccessChain %24 %261 
                                         f32 %263 = OpLoad %262 
                                Uniform f32* %265 = OpAccessChain %24 %264 
                                         f32 %266 = OpLoad %265 
                                       f32_2 %267 = OpCompositeConstruct %263 %266 
                                       f32_2 %268 = OpFMul %260 %267 
                                       f32_4 %269 = OpLoad %36 
                                       f32_4 %270 = OpVectorShuffle %269 %268 4 5 2 3 
                                                      OpStore %36 %270 
                                       f32_4 %271 = OpLoad %60 
                                       f32_2 %272 = OpVectorShuffle %271 %271 3 3 
                                       f32_4 %273 = OpLoad %36 
                                       f32_2 %274 = OpVectorShuffle %273 %273 0 1 
                                       f32_2 %275 = OpFDiv %272 %274 
                                       f32_4 %276 = OpLoad %36 
                                       f32_4 %277 = OpVectorShuffle %276 %275 4 5 2 3 
                                                      OpStore %36 %277 
                                       f32_4 %279 = OpLoad %36 
                                       f32_2 %280 = OpVectorShuffle %279 %279 0 1 
                                       f32_4 %281 = OpLoad %36 
                                       f32_2 %282 = OpVectorShuffle %281 %281 0 1 
                                         f32 %283 = OpDot %280 %282 
                                                      OpStore %278 %283 
                                Uniform f32* %285 = OpAccessChain %24 %284 
                                         f32 %286 = OpLoad %285 
                                Uniform f32* %288 = OpAccessChain %24 %287 
                                         f32 %289 = OpLoad %288 
                                       f32_2 %290 = OpCompositeConstruct %286 %289 
                                       f32_2 %293 = OpFMul %290 %292 
                                       f32_4 %294 = OpLoad %36 
                                       f32_2 %295 = OpVectorShuffle %294 %294 0 1 
                                       f32_2 %296 = OpFAdd %293 %295 
                                       f32_4 %297 = OpLoad %36 
                                       f32_4 %298 = OpVectorShuffle %297 %296 4 5 2 3 
                                                      OpStore %36 %298 
                                       f32_4 %300 = OpLoad %36 
                                       f32_2 %301 = OpVectorShuffle %300 %300 0 1 
                                       f32_2 %302 = OpFDiv %292 %301 
                                       f32_4 %303 = OpLoad vs_TEXCOORD2 
                                       f32_4 %304 = OpVectorShuffle %303 %302 0 1 4 5 
                                                      OpStore vs_TEXCOORD2 %304 
                                         f32 %305 = OpLoad %278 
                                         f32 %306 = OpExtInst %1 32 %305 
                                                      OpStore %278 %306 
                                  Input f32* %310 = OpAccessChain %308 %114 
                                         f32 %311 = OpLoad %310 
                                         f32 %312 = OpExtInst %1 4 %311 
                                Uniform f32* %314 = OpAccessChain %24 %313 
                                         f32 %315 = OpLoad %314 
                                         f32 %316 = OpFMul %312 %315 
                                Private f32* %317 = OpAccessChain %36 %202 
                                                      OpStore %317 %316 
                                Uniform f32* %320 = OpAccessChain %24 %319 
                                         f32 %321 = OpLoad %320 
                                         f32 %322 = OpFAdd %321 %134 
                                Private f32* %323 = OpAccessChain %318 %202 
                                                      OpStore %323 %322 
                                Private f32* %324 = OpAccessChain %318 %202 
                                         f32 %325 = OpLoad %324 
                                Private f32* %326 = OpAccessChain %36 %202 
                                         f32 %327 = OpLoad %326 
                                         f32 %328 = OpFMul %325 %327 
                                Private f32* %329 = OpAccessChain %36 %202 
                                                      OpStore %329 %328 
                                         f32 %330 = OpLoad %278 
                                Private f32* %331 = OpAccessChain %36 %202 
                                         f32 %332 = OpLoad %331 
                                         f32 %333 = OpFMul %330 %332 
                                Private f32* %334 = OpAccessChain %318 %202 
                                                      OpStore %334 %333 
                                Uniform f32* %337 = OpAccessChain %24 %336 
                                         f32 %338 = OpLoad %337 
                                         f32 %339 = OpFNegate %338 
                                         f32 %340 = OpFAdd %339 %134 
                                                      OpStore %335 %340 
                                         f32 %341 = OpLoad %335 
                                Private f32* %342 = OpAccessChain %318 %202 
                                         f32 %343 = OpLoad %342 
                                         f32 %344 = OpExtInst %1 4 %343 
                                         f32 %345 = OpFMul %341 %344 
                                                      OpStore %335 %345 
                                         f32 %346 = OpLoad %278 
                                Private f32* %347 = OpAccessChain %36 %202 
                                         f32 %348 = OpLoad %347 
                                         f32 %349 = OpFMul %346 %348 
                                         f32 %350 = OpLoad %335 
                                         f32 %351 = OpFNegate %350 
                                         f32 %352 = OpFAdd %349 %351 
                                                      OpStore %278 %352 
                                         f32 %353 = OpLoad %180 
                                         f32 %354 = OpExtInst %1 4 %353 
                                         f32 %355 = OpLoad %278 
                                         f32 %356 = OpFMul %354 %355 
                                         f32 %357 = OpLoad %335 
                                         f32 %358 = OpFAdd %356 %357 
                                                      OpStore %180 %358 
                                Uniform f32* %362 = OpAccessChain %24 %239 %62 %124 
                                         f32 %363 = OpLoad %362 
                                        bool %365 = OpFOrdEqual %363 %364 
                                                      OpStore %361 %365 
                                        bool %366 = OpLoad %361 
                                                      OpSelectionMerge %370 None 
                                                      OpBranchConditional %366 %369 %372 
                                             %369 = OpLabel 
                                         f32 %371 = OpLoad %180 
                                                      OpStore %368 %371 
                                                      OpBranch %370 
                                             %372 = OpLabel 
                                Private f32* %373 = OpAccessChain %318 %202 
                                         f32 %374 = OpLoad %373 
                                                      OpStore %368 %374 
                                                      OpBranch %370 
                                             %370 = OpLabel 
                                         f32 %375 = OpLoad %368 
                                                      OpStore %180 %375 
                                Uniform f32* %377 = OpAccessChain %24 %376 
                                         f32 %378 = OpLoad %377 
                                Uniform f32* %380 = OpAccessChain %24 %379 
                                         f32 %381 = OpLoad %380 
                                         f32 %382 = OpFMul %378 %381 
                                                      OpStore %278 %382 
                                         f32 %383 = OpLoad %278 
                                         f32 %384 = OpLoad %180 
                                         f32 %385 = OpFMul %383 %384 
                                         f32 %386 = OpFAdd %385 %134 
                                                      OpStore %278 %386 
                                         f32 %387 = OpLoad %180 
                                         f32 %388 = OpLoad %278 
                                         f32 %389 = OpFDiv %387 %388 
                                Private f32* %390 = OpAccessChain %36 %202 
                                                      OpStore %390 %389 
                                Uniform f32* %392 = OpAccessChain %24 %391 
                                         f32 %393 = OpLoad %392 
                                Uniform f32* %394 = OpAccessChain %24 %379 
                                         f32 %395 = OpLoad %394 
                                         f32 %396 = OpFMul %393 %395 
                                                      OpStore %278 %396 
                                Private f32* %397 = OpAccessChain %36 %202 
                                         f32 %398 = OpLoad %397 
                                         f32 %399 = OpLoad %278 
                                         f32 %400 = OpFMul %398 %399 
                                                      OpStore %278 %400 
                                         f32 %401 = OpLoad %278 
                                         f32 %402 = OpExtInst %1 37 %401 %134 
                                Private f32* %403 = OpAccessChain %318 %202 
                                                      OpStore %403 %402 
                                Private f32* %404 = OpAccessChain %318 %202 
                                         f32 %405 = OpLoad %404 
                                         f32 %406 = OpExtInst %1 31 %405 
                                Private f32* %407 = OpAccessChain %318 %202 
                                                      OpStore %407 %406 
                                       f32_4 %408 = OpLoad %153 
                                       f32_2 %409 = OpLoad %318 
                                       f32_4 %410 = OpVectorShuffle %409 %409 0 0 0 0 
                                       f32_4 %411 = OpFMul %408 %410 
                                                      OpStore %60 %411 
                                       f32_4 %413 = OpLoad %137 
                                       f32_3 %414 = OpVectorShuffle %413 %413 0 1 2 
                                       f32_4 %415 = OpLoad %137 
                                       f32_3 %416 = OpVectorShuffle %415 %415 3 3 3 
                                       f32_3 %417 = OpFMul %414 %416 
                                       f32_4 %418 = OpLoad %60 
                                       f32_3 %419 = OpVectorShuffle %418 %418 0 1 2 
                                       f32_3 %420 = OpFAdd %417 %419 
                                       f32_4 %421 = OpLoad %412 
                                       f32_4 %422 = OpVectorShuffle %421 %420 4 5 6 3 
                                                      OpStore %412 %422 
                                Private f32* %423 = OpAccessChain %86 %124 
                                         f32 %424 = OpLoad %423 
                                Uniform f32* %425 = OpAccessChain %24 %123 %124 
                                         f32 %426 = OpLoad %425 
                                         f32 %427 = OpFMul %424 %426 
                                Private f32* %428 = OpAccessChain %60 %124 
                                         f32 %429 = OpLoad %428 
                                         f32 %430 = OpFAdd %427 %429 
                                 Output f32* %431 = OpAccessChain %412 %124 
                                                      OpStore %431 %430 
                              Uniform f32_4* %433 = OpAccessChain %24 %432 
                                       f32_4 %434 = OpLoad %433 
                                       f32_4 %437 = OpExtInst %1 40 %434 %436 
                                                      OpStore %60 %437 
                                       f32_4 %438 = OpLoad %60 
                                       f32_4 %441 = OpExtInst %1 37 %438 %440 
                                                      OpStore %60 %441 
                                       f32_2 %442 = OpLoad %9 
                                       f32_4 %443 = OpLoad %60 
                                       f32_2 %444 = OpVectorShuffle %443 %443 0 1 
                                       f32_2 %445 = OpFNegate %444 
                                       f32_2 %446 = OpFAdd %442 %445 
                                                      OpStore %318 %446 
                                       f32_2 %447 = OpLoad %9 
                                       f32_2 %450 = OpFMul %447 %449 
                                       f32_4 %451 = OpLoad %60 
                                       f32_2 %452 = OpVectorShuffle %451 %451 0 1 
                                       f32_2 %453 = OpFNegate %452 
                                       f32_2 %454 = OpFAdd %450 %453 
                                                      OpStore %9 %454 
                                       f32_4 %455 = OpLoad %60 
                                       f32_2 %456 = OpVectorShuffle %455 %455 2 3 
                                       f32_2 %457 = OpFNegate %456 
                                       f32_2 %458 = OpLoad %9 
                                       f32_2 %459 = OpFAdd %457 %458 
                                       f32_4 %460 = OpLoad vs_TEXCOORD2 
                                       f32_4 %461 = OpVectorShuffle %460 %459 4 5 2 3 
                                                      OpStore vs_TEXCOORD2 %461 
                                       f32_4 %462 = OpLoad %60 
                                       f32_2 %463 = OpVectorShuffle %462 %462 0 1 
                                       f32_2 %464 = OpFNegate %463 
                                       f32_4 %465 = OpLoad %60 
                                       f32_2 %466 = OpVectorShuffle %465 %465 2 3 
                                       f32_2 %467 = OpFAdd %464 %466 
                                                      OpStore %9 %467 
                                       f32_2 %469 = OpLoad %318 
                                       f32_2 %470 = OpLoad %9 
                                       f32_2 %471 = OpFDiv %469 %470 
                                       f32_4 %472 = OpLoad vs_TEXCOORD0 
                                       f32_4 %473 = OpVectorShuffle %472 %471 0 1 4 5 
                                                      OpStore vs_TEXCOORD0 %473 
                                       f32_2 %475 = OpLoad %474 
                                       f32_4 %476 = OpLoad vs_TEXCOORD0 
                                       f32_4 %477 = OpVectorShuffle %476 %475 4 5 2 3 
                                                      OpStore vs_TEXCOORD0 %477 
                                  Input f32* %479 = OpAccessChain %308 %114 
                                         f32 %480 = OpLoad %479 
                                        bool %481 = OpFOrdGreaterThanEqual %364 %480 
                                                      OpStore %478 %481 
                                        bool %482 = OpLoad %478 
                                         f32 %483 = OpSelect %482 %134 %364 
                                Private f32* %484 = OpAccessChain %9 %202 
                                                      OpStore %484 %483 
                                Uniform f32* %488 = OpAccessChain %24 %487 
                                         f32 %489 = OpLoad %488 
                                         f32 %490 = OpFNegate %489 
                                Uniform f32* %492 = OpAccessChain %24 %491 
                                         f32 %493 = OpLoad %492 
                                         f32 %494 = OpFAdd %490 %493 
                                Private f32* %495 = OpAccessChain %486 %202 
                                                      OpStore %495 %494 
                                Private f32* %496 = OpAccessChain %9 %202 
                                         f32 %497 = OpLoad %496 
                                Private f32* %498 = OpAccessChain %486 %202 
                                         f32 %499 = OpLoad %498 
                                         f32 %500 = OpFMul %497 %499 
                                Uniform f32* %501 = OpAccessChain %24 %487 
                                         f32 %502 = OpLoad %501 
                                         f32 %503 = OpFAdd %500 %502 
                                Private f32* %504 = OpAccessChain %9 %202 
                                                      OpStore %504 %503 
                                Private f32* %505 = OpAccessChain %9 %202 
                                         f32 %506 = OpLoad %505 
                                         f32 %507 = OpFMul %506 %291 
                                Uniform f32* %509 = OpAccessChain %24 %508 
                                         f32 %510 = OpLoad %509 
                                         f32 %511 = OpFAdd %507 %510 
                                Private f32* %512 = OpAccessChain %9 %202 
                                                      OpStore %512 %511 
                                Private f32* %513 = OpAccessChain %9 %202 
                                         f32 %514 = OpLoad %513 
                                Uniform f32* %515 = OpAccessChain %24 %379 
                                         f32 %516 = OpLoad %515 
                                         f32 %517 = OpFMul %514 %516 
                                Private f32* %518 = OpAccessChain %9 %202 
                                                      OpStore %518 %517 
                                Private f32* %519 = OpAccessChain %9 %202 
                                         f32 %520 = OpLoad %519 
                                         f32 %521 = OpFNegate %520 
                                         f32 %523 = OpFMul %521 %522 
                                         f32 %524 = OpFAdd %523 %522 
                                Private f32* %525 = OpAccessChain %9 %202 
                                                      OpStore %525 %524 
                                Private f32* %526 = OpAccessChain %9 %202 
                                         f32 %527 = OpLoad %526 
                                Private f32* %528 = OpAccessChain %36 %202 
                                         f32 %529 = OpLoad %528 
                                         f32 %530 = OpFMul %527 %529 
                                         f32 %532 = OpFAdd %530 %531 
                                Private f32* %533 = OpAccessChain %36 %124 
                                                      OpStore %533 %532 
                                       f32_4 %535 = OpLoad %36 
                                       f32_2 %536 = OpVectorShuffle %535 %535 0 3 
                                       f32_4 %537 = OpLoad vs_TEXCOORD1 
                                       f32_4 %538 = OpVectorShuffle %537 %536 4 1 2 5 
                                                      OpStore vs_TEXCOORD1 %538 
                                         f32 %539 = OpLoad %278 
                                         f32 %540 = OpFNegate %539 
                                         f32 %541 = OpFMul %540 %522 
                                Private f32* %542 = OpAccessChain %36 %124 
                                         f32 %543 = OpLoad %542 
                                         f32 %544 = OpFAdd %541 %543 
                                 Output f32* %545 = OpAccessChain vs_TEXCOORD1 %114 
                                                      OpStore %545 %544 
                                         f32 %546 = OpLoad %278 
                                         f32 %547 = OpFMul %546 %522 
                                Private f32* %548 = OpAccessChain %36 %124 
                                         f32 %549 = OpLoad %548 
                                         f32 %550 = OpFAdd %547 %549 
                                 Output f32* %551 = OpAccessChain vs_TEXCOORD1 %215 
                                                      OpStore %551 %550 
                                  Input f32* %553 = OpAccessChain %129 %124 
                                         f32 %554 = OpLoad %553 
                                 Output f32* %555 = OpAccessChain vs_TEXCOORD3 %215 
                                                      OpStore %555 %554 
                                 Output f32* %556 = OpAccessChain vs_TEXCOORD3 %124 
                                                      OpStore %556 %364 
                                Uniform f32* %558 = OpAccessChain %24 %557 
                                         f32 %559 = OpLoad %558 
                                Uniform f32* %561 = OpAccessChain %24 %560 
                                         f32 %562 = OpLoad %561 
                                Uniform f32* %564 = OpAccessChain %24 %563 
                                         f32 %565 = OpLoad %564 
                                Uniform f32* %567 = OpAccessChain %24 %566 
                                         f32 %568 = OpLoad %567 
                                       f32_4 %569 = OpCompositeConstruct %559 %562 %565 %568 
                                Uniform f32* %571 = OpAccessChain %24 %570 
                                         f32 %572 = OpLoad %571 
                                Uniform f32* %573 = OpAccessChain %24 %570 
                                         f32 %574 = OpLoad %573 
                                Uniform f32* %575 = OpAccessChain %24 %570 
                                         f32 %576 = OpLoad %575 
                                Uniform f32* %577 = OpAccessChain %24 %570 
                                         f32 %578 = OpLoad %577 
                                       f32_4 %579 = OpCompositeConstruct %572 %574 %576 %578 
                                         f32 %580 = OpCompositeExtract %579 0 
                                         f32 %581 = OpCompositeExtract %579 1 
                                         f32 %582 = OpCompositeExtract %579 2 
                                         f32 %583 = OpCompositeExtract %579 3 
                                       f32_4 %584 = OpCompositeConstruct %580 %581 %582 %583 
                                       f32_4 %585 = OpFMul %569 %584 
                                                      OpStore %36 %585 
                                       f32_4 %586 = OpLoad %36 
                                       f32_2 %587 = OpVectorShuffle %586 %586 2 3 
                                       f32_2 %588 = OpFNegate %587 
                                Uniform f32* %589 = OpAccessChain %24 %313 
                                         f32 %590 = OpLoad %589 
                                       f32_2 %591 = OpCompositeConstruct %590 %590 
                                       f32_2 %592 = OpFMul %588 %591 
                                       f32_3 %593 = OpLoad %486 
                                       f32_3 %594 = OpVectorShuffle %593 %592 3 1 4 
                                                      OpStore %486 %594 
                                       f32_3 %595 = OpLoad %486 
                                       f32_2 %596 = OpVectorShuffle %595 %595 0 2 
                                Uniform f32* %598 = OpAccessChain %24 %597 
                                         f32 %599 = OpLoad %598 
                                Uniform f32* %601 = OpAccessChain %24 %600 
                                         f32 %602 = OpLoad %601 
                                       f32_2 %603 = OpCompositeConstruct %599 %602 
                                       f32_2 %604 = OpFDiv %596 %603 
                                       f32_3 %605 = OpLoad %486 
                                       f32_3 %606 = OpVectorShuffle %605 %604 3 1 4 
                                                      OpStore %486 %606 
                                       f32_3 %607 = OpLoad %486 
                                       f32_2 %608 = OpVectorShuffle %607 %607 0 2 
                                       f32_2 %609 = OpLoad %474 
                                       f32_2 %610 = OpFAdd %608 %609 
                                       f32_4 %611 = OpLoad vs_TEXCOORD3 
                                       f32_4 %612 = OpVectorShuffle %611 %610 4 5 2 3 
                                                      OpStore vs_TEXCOORD3 %612 
                                Private f32* %613 = OpAccessChain %36 %202 
                                         f32 %614 = OpLoad %613 
                                         f32 %615 = OpLoad %180 
                                         f32 %616 = OpFMul %614 %615 
                                         f32 %617 = OpFAdd %616 %134 
                                Private f32* %618 = OpAccessChain %486 %202 
                                                      OpStore %618 %617 
                                         f32 %619 = OpLoad %180 
                                Private f32* %620 = OpAccessChain %486 %202 
                                         f32 %621 = OpLoad %620 
                                         f32 %622 = OpFDiv %619 %621 
                                Private f32* %623 = OpAccessChain %486 %202 
                                                      OpStore %623 %622 
                                Private f32* %624 = OpAccessChain %486 %202 
                                         f32 %625 = OpLoad %624 
                                Private f32* %626 = OpAccessChain %36 %114 
                                         f32 %627 = OpLoad %626 
                                         f32 %628 = OpFMul %625 %627 
                                                      OpStore %180 %628 
                                Private f32* %629 = OpAccessChain %9 %202 
                                         f32 %630 = OpLoad %629 
                                Private f32* %631 = OpAccessChain %486 %202 
                                         f32 %632 = OpLoad %631 
                                         f32 %633 = OpFMul %630 %632 
                                         f32 %634 = OpFAdd %633 %531 
                                Private f32* %635 = OpAccessChain %9 %202 
                                                      OpStore %635 %634 
                                Private f32* %638 = OpAccessChain %486 %202 
                                         f32 %639 = OpLoad %638 
                                 Output f32* %640 = OpAccessChain vs_TEXCOORD4 %202 
                                                      OpStore %640 %639 
                                         f32 %641 = OpLoad %180 
                                         f32 %642 = OpFNegate %641 
                                         f32 %643 = OpFMul %642 %522 
                                Private f32* %644 = OpAccessChain %9 %202 
                                         f32 %645 = OpLoad %644 
                                         f32 %646 = OpFAdd %643 %645 
                                 Output f32* %647 = OpAccessChain vs_TEXCOORD4 %114 
                                                      OpStore %647 %646 
                                 Output f32* %648 = OpAccessChain %118 %45 %114 
                                         f32 %649 = OpLoad %648 
                                         f32 %650 = OpFNegate %649 
                                 Output f32* %651 = OpAccessChain %118 %45 %114 
                                                      OpStore %651 %650 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 153
; Schema: 0
                                             OpCapability Shader 
                                      %1 = OpExtInstImport "GLSL.std.450" 
                                             OpMemoryModel Logical GLSL450 
                                             OpEntryPoint Fragment %4 "main" %21 %35 %80 %88 %104 %135 
                                             OpExecutionMode %4 OriginUpperLeft 
                                             OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                             OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                             OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                             OpDecorate %12 DescriptorSet 12 
                                             OpDecorate %12 Binding 12 
                                             OpDecorate %16 DescriptorSet 16 
                                             OpDecorate %16 Binding 16 
                                             OpDecorate vs_TEXCOORD3 Location 21 
                                             OpDecorate vs_TEXCOORD4 Location 35 
                                             OpMemberDecorate %53 0 Offset 53 
                                             OpDecorate %53 Block 
                                             OpDecorate %55 DescriptorSet 55 
                                             OpDecorate %55 Binding 55 
                                             OpDecorate vs_TEXCOORD0 Location 80 
                                             OpDecorate vs_TEXCOORD1 Location 88 
                                             OpDecorate %104 Location 104 
                                             OpDecorate %135 Location 135 
                                      %2 = OpTypeVoid 
                                      %3 = OpTypeFunction %2 
                                      %6 = OpTypeFloat 32 
                                      %7 = OpTypeVector %6 4 
                                      %8 = OpTypePointer Private %7 
                       Private f32_4* %9 = OpVariable Private 
                                     %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                     %11 = OpTypePointer UniformConstant %10 
UniformConstant read_only Texture2D* %12 = OpVariable UniformConstant 
                                     %14 = OpTypeSampler 
                                     %15 = OpTypePointer UniformConstant %14 
            UniformConstant sampler* %16 = OpVariable UniformConstant 
                                     %18 = OpTypeSampledImage %10 
                                     %20 = OpTypePointer Input %7 
               Input f32_4* vs_TEXCOORD3 = OpVariable Input 
                                     %22 = OpTypeVector %6 2 
                                     %26 = OpTypeInt 32 0 
                                 u32 %27 = OpConstant 3 
                                 u32 %29 = OpConstant 0 
                                     %30 = OpTypePointer Private %6 
                                     %34 = OpTypePointer Input %22 
               Input f32_2* vs_TEXCOORD4 = OpVariable Input 
                                     %36 = OpTypePointer Input %6 
                                 u32 %40 = OpConstant 1 
                                 f32 %48 = OpConstant 3.674022E-40 
                                 f32 %49 = OpConstant 3.674022E-40 
                      Private f32_4* %52 = OpVariable Private 
                                     %53 = OpTypeStruct %7 
                                     %54 = OpTypePointer Uniform %53 
            Uniform struct {f32_4;}* %55 = OpVariable Uniform 
                                     %56 = OpTypeInt 32 1 
                                 i32 %57 = OpConstant 0 
                                     %58 = OpTypeVector %6 3 
                                     %59 = OpTypePointer Uniform %7 
                                     %69 = OpTypePointer Uniform %6 
               Input f32_4* vs_TEXCOORD0 = OpVariable Input 
               Input f32_4* vs_TEXCOORD1 = OpVariable Input 
                     Private f32_4* %101 = OpVariable Private 
                       Input f32_4* %104 = OpVariable Input 
                                u32 %123 = OpConstant 2 
                                f32 %127 = OpConstant 3.674022E-40 
                                    %134 = OpTypePointer Output %7 
                      Output f32_4* %135 = OpVariable Output 
                                    %137 = OpTypeBool 
                                    %138 = OpTypePointer Private %137 
                      Private bool* %139 = OpVariable Private 
                                i32 %144 = OpConstant 1 
                                i32 %146 = OpConstant -1 
                                 void %4 = OpFunction None %3 
                                      %5 = OpLabel 
                 read_only Texture2D %13 = OpLoad %12 
                             sampler %17 = OpLoad %16 
          read_only Texture2DSampled %19 = OpSampledImage %13 %17 
                               f32_4 %23 = OpLoad vs_TEXCOORD3 
                               f32_2 %24 = OpVectorShuffle %23 %23 0 1 
                               f32_4 %25 = OpImageSampleImplicitLod %19 %24 
                                 f32 %28 = OpCompositeExtract %25 3 
                        Private f32* %31 = OpAccessChain %9 %29 
                                             OpStore %31 %28 
                        Private f32* %32 = OpAccessChain %9 %29 
                                 f32 %33 = OpLoad %32 
                          Input f32* %37 = OpAccessChain vs_TEXCOORD4 %29 
                                 f32 %38 = OpLoad %37 
                                 f32 %39 = OpFMul %33 %38 
                          Input f32* %41 = OpAccessChain vs_TEXCOORD4 %40 
                                 f32 %42 = OpLoad %41 
                                 f32 %43 = OpFNegate %42 
                                 f32 %44 = OpFAdd %39 %43 
                        Private f32* %45 = OpAccessChain %9 %29 
                                             OpStore %45 %44 
                        Private f32* %46 = OpAccessChain %9 %29 
                                 f32 %47 = OpLoad %46 
                                 f32 %50 = OpExtInst %1 43 %47 %48 %49 
                        Private f32* %51 = OpAccessChain %9 %29 
                                             OpStore %51 %50 
                      Uniform f32_4* %60 = OpAccessChain %55 %57 
                               f32_4 %61 = OpLoad %60 
                               f32_3 %62 = OpVectorShuffle %61 %61 3 3 3 
                      Uniform f32_4* %63 = OpAccessChain %55 %57 
                               f32_4 %64 = OpLoad %63 
                               f32_3 %65 = OpVectorShuffle %64 %64 0 1 2 
                               f32_3 %66 = OpFMul %62 %65 
                               f32_4 %67 = OpLoad %52 
                               f32_4 %68 = OpVectorShuffle %67 %66 4 5 6 3 
                                             OpStore %52 %68 
                        Uniform f32* %70 = OpAccessChain %55 %57 %27 
                                 f32 %71 = OpLoad %70 
                        Private f32* %72 = OpAccessChain %52 %27 
                                             OpStore %72 %71 
                               f32_4 %73 = OpLoad %9 
                               f32_4 %74 = OpVectorShuffle %73 %73 0 0 0 0 
                               f32_4 %75 = OpLoad %52 
                               f32_4 %76 = OpFMul %74 %75 
                                             OpStore %9 %76 
                 read_only Texture2D %77 = OpLoad %12 
                             sampler %78 = OpLoad %16 
          read_only Texture2DSampled %79 = OpSampledImage %77 %78 
                               f32_4 %81 = OpLoad vs_TEXCOORD0 
                               f32_2 %82 = OpVectorShuffle %81 %81 0 1 
                               f32_4 %83 = OpImageSampleImplicitLod %79 %82 
                                 f32 %84 = OpCompositeExtract %83 3 
                        Private f32* %85 = OpAccessChain %52 %29 
                                             OpStore %85 %84 
                        Private f32* %86 = OpAccessChain %52 %29 
                                 f32 %87 = OpLoad %86 
                          Input f32* %89 = OpAccessChain vs_TEXCOORD1 %29 
                                 f32 %90 = OpLoad %89 
                                 f32 %91 = OpFMul %87 %90 
                          Input f32* %92 = OpAccessChain vs_TEXCOORD1 %27 
                                 f32 %93 = OpLoad %92 
                                 f32 %94 = OpFNegate %93 
                                 f32 %95 = OpFAdd %91 %94 
                        Private f32* %96 = OpAccessChain %52 %29 
                                             OpStore %96 %95 
                        Private f32* %97 = OpAccessChain %52 %29 
                                 f32 %98 = OpLoad %97 
                                 f32 %99 = OpExtInst %1 43 %98 %48 %49 
                       Private f32* %100 = OpAccessChain %52 %29 
                                             OpStore %100 %99 
                              f32_4 %102 = OpLoad %52 
                              f32_4 %103 = OpVectorShuffle %102 %102 0 0 0 0 
                              f32_4 %105 = OpLoad %104 
                              f32_4 %106 = OpFMul %103 %105 
                                             OpStore %101 %106 
                         Input f32* %107 = OpAccessChain %104 %27 
                                f32 %108 = OpLoad %107 
                                f32 %109 = OpFNegate %108 
                       Private f32* %110 = OpAccessChain %52 %29 
                                f32 %111 = OpLoad %110 
                                f32 %112 = OpFMul %109 %111 
                                f32 %113 = OpFAdd %112 %49 
                       Private f32* %114 = OpAccessChain %52 %29 
                                             OpStore %114 %113 
                              f32_4 %115 = OpLoad %9 
                              f32_4 %116 = OpLoad %52 
                              f32_4 %117 = OpVectorShuffle %116 %116 0 0 0 0 
                              f32_4 %118 = OpFMul %115 %117 
                              f32_4 %119 = OpLoad %101 
                              f32_4 %120 = OpFAdd %118 %119 
                                             OpStore %9 %120 
                       Private f32* %121 = OpAccessChain %9 %27 
                                f32 %122 = OpLoad %121 
                         Input f32* %124 = OpAccessChain vs_TEXCOORD3 %123 
                                f32 %125 = OpLoad %124 
                                f32 %126 = OpFMul %122 %125 
                                f32 %128 = OpFAdd %126 %127 
                       Private f32* %129 = OpAccessChain %52 %29 
                                             OpStore %129 %128 
                              f32_4 %130 = OpLoad %9 
                              f32_4 %131 = OpLoad vs_TEXCOORD3 
                              f32_4 %132 = OpVectorShuffle %131 %131 2 2 2 2 
                              f32_4 %133 = OpFMul %130 %132 
                                             OpStore %9 %133 
                              f32_4 %136 = OpLoad %9 
                                             OpStore %135 %136 
                       Private f32* %140 = OpAccessChain %52 %29 
                                f32 %141 = OpLoad %140 
                               bool %142 = OpFOrdLessThan %141 %48 
                                             OpStore %139 %142 
                               bool %143 = OpLoad %139 
                                i32 %145 = OpSelect %143 %144 %57 
                                i32 %147 = OpIMul %145 %146 
                               bool %148 = OpINotEqual %147 %57 
                                             OpSelectionMerge %150 None 
                                             OpBranchConditional %148 %149 %150 
                                    %149 = OpLabel 
                                             OpKill
                                    %150 = OpLabel 
                                             OpReturn
                                             OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "OUTLINE_ON" "UNDERLAY_ON" "UNITY_UI_ALPHACLIP" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "OUTLINE_ON" "UNDERLAY_ON" "UNITY_UI_ALPHACLIP" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _FaceColor;
uniform 	float _FaceDilate;
uniform 	float _OutlineSoftness;
uniform 	vec4 _OutlineColor;
uniform 	float _OutlineWidth;
uniform 	float _UnderlayOffsetX;
uniform 	float _UnderlayOffsetY;
uniform 	float _UnderlayDilate;
uniform 	float _UnderlaySoftness;
uniform 	float _WeightNormal;
uniform 	float _WeightBold;
uniform 	float _ScaleRatioA;
uniform 	float _ScaleRatioC;
uniform 	float _VertexOffsetX;
uniform 	float _VertexOffsetY;
uniform 	vec4 _ClipRect;
uniform 	float _MaskSoftnessX;
uniform 	float _MaskSoftnessY;
uniform 	float _TextureWidth;
uniform 	float _TextureHeight;
uniform 	float _GradientScale;
uniform 	float _ScaleX;
uniform 	float _ScaleY;
uniform 	float _PerspectiveFilter;
uniform 	float _Sharpness;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_COLOR0;
in  vec2 in_TEXCOORD0;
in  vec2 in_TEXCOORD1;
out vec4 vs_COLOR0;
out vec4 vs_COLOR1;
out vec4 vs_TEXCOORD0;
out vec4 vs_TEXCOORD1;
out vec4 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec2 vs_TEXCOORD4;
vec2 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
vec4 u_xlat6;
vec3 u_xlat7;
vec2 u_xlat8;
float u_xlat14;
float u_xlat15;
float u_xlat21;
bool u_xlatb21;
void main()
{
    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
    gl_Position = u_xlat2;
    vs_COLOR0.w = _FaceColor.w;
    u_xlat3.xyz = in_COLOR0.xyz;
    u_xlat3.w = 1.0;
    u_xlat4 = u_xlat3 * _FaceColor;
    u_xlat2.xyz = u_xlat4.www * u_xlat4.xyz;
    vs_COLOR0.xyz = u_xlat2.xyz;
    u_xlat5.xyz = (-u_xlat2.xyz);
    u_xlat5.w = (-u_xlat4.w);
    u_xlat6.xyz = _OutlineColor.www * _OutlineColor.xyz;
    u_xlat6.w = _OutlineColor.w;
    u_xlat5 = u_xlat5 + u_xlat6;
    u_xlat14 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat14 = inversesqrt(u_xlat14);
    u_xlat1.xyz = vec3(u_xlat14) * u_xlat1.xyz;
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat14 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat14 = inversesqrt(u_xlat14);
    u_xlat2.xyz = vec3(u_xlat14) * u_xlat2.xyz;
    u_xlat14 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat1.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;
    u_xlat1.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat1.xy;
    u_xlat1.xy = abs(u_xlat1.xy) * vec2(_ScaleX, _ScaleY);
    u_xlat1.xy = u_xlat2.ww / u_xlat1.xy;
    u_xlat21 = dot(u_xlat1.xy, u_xlat1.xy);
    u_xlat1.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) * vec2(0.25, 0.25) + u_xlat1.xy;
    vs_TEXCOORD2.zw = vec2(0.25, 0.25) / u_xlat1.xy;
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.x = abs(in_TEXCOORD1.y) * _GradientScale;
    u_xlat8.x = _Sharpness + 1.0;
    u_xlat1.x = u_xlat8.x * u_xlat1.x;
    u_xlat8.x = u_xlat21 * u_xlat1.x;
    u_xlat15 = (-_PerspectiveFilter) + 1.0;
    u_xlat15 = u_xlat15 * abs(u_xlat8.x);
    u_xlat21 = u_xlat21 * u_xlat1.x + (-u_xlat15);
    u_xlat14 = abs(u_xlat14) * u_xlat21 + u_xlat15;
    u_xlatb21 = hlslcc_mtx4x4glstate_matrix_projection[3].w==0.0;
    u_xlat14 = (u_xlatb21) ? u_xlat14 : u_xlat8.x;
    u_xlat21 = _OutlineSoftness * _ScaleRatioA;
    u_xlat21 = u_xlat21 * u_xlat14 + 1.0;
    u_xlat1.x = u_xlat14 / u_xlat21;
    u_xlat21 = _OutlineWidth * _ScaleRatioA;
    u_xlat21 = u_xlat21 * 0.5;
    u_xlat8.x = u_xlat1.x * u_xlat21;
    u_xlat8.x = u_xlat8.x + u_xlat8.x;
    u_xlat8.x = min(u_xlat8.x, 1.0);
    u_xlat8.x = sqrt(u_xlat8.x);
    u_xlat2 = u_xlat5 * u_xlat8.xxxx;
    vs_COLOR1.xyz = u_xlat4.xyz * u_xlat4.www + u_xlat2.xyz;
    vs_COLOR1.w = u_xlat3.w * _FaceColor.w + u_xlat2.w;
    u_xlat2 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));
    u_xlat2 = min(u_xlat2, vec4(2e+10, 2e+10, 2e+10, 2e+10));
    u_xlat8.xy = u_xlat0.xy + (-u_xlat2.xy);
    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + (-u_xlat2.xy);
    vs_TEXCOORD2.xy = (-u_xlat2.zw) + u_xlat0.xy;
    u_xlat0.xy = (-u_xlat2.xy) + u_xlat2.zw;
    vs_TEXCOORD0.zw = u_xlat8.xy / u_xlat0.xy;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlatb0 = 0.0>=in_TEXCOORD1.y;
    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);
    u_xlat7.x = (-_WeightNormal) + _WeightBold;
    u_xlat0.x = u_xlat0.x * u_xlat7.x + _WeightNormal;
    u_xlat0.x = u_xlat0.x * 0.25 + _FaceDilate;
    u_xlat0.x = u_xlat0.x * _ScaleRatioA;
    u_xlat0.x = (-u_xlat0.x) * 0.5 + 0.5;
    u_xlat1.w = u_xlat0.x * u_xlat1.x + -0.5;
    vs_TEXCOORD1.y = (-u_xlat21) * u_xlat1.x + u_xlat1.w;
    vs_TEXCOORD1.z = u_xlat21 * u_xlat1.x + u_xlat1.w;
    vs_TEXCOORD1.xw = u_xlat1.xw;
    vs_TEXCOORD3.z = in_COLOR0.w;
    vs_TEXCOORD3.w = 0.0;
    u_xlat1 = vec4(_UnderlaySoftness, _UnderlayDilate, _UnderlayOffsetX, _UnderlayOffsetY) * vec4(vec4(_ScaleRatioC, _ScaleRatioC, _ScaleRatioC, _ScaleRatioC));
    u_xlat7.xz = (-u_xlat1.zw) * vec2(_GradientScale);
    u_xlat7.xz = u_xlat7.xz / vec2(_TextureWidth, _TextureHeight);
    vs_TEXCOORD3.xy = u_xlat7.xz + in_TEXCOORD0.xy;
    u_xlat7.x = u_xlat1.x * u_xlat14 + 1.0;
    u_xlat7.x = u_xlat14 / u_xlat7.x;
    u_xlat14 = u_xlat1.y * 0.5;
    u_xlat0.x = u_xlat0.x * u_xlat7.x + -0.5;
    vs_TEXCOORD4.y = (-u_xlat14) * u_xlat7.x + u_xlat0.x;
    vs_TEXCOORD4.x = u_xlat7.x;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _UnderlayColor;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
in  vec4 vs_COLOR0;
in  vec4 vs_COLOR1;
in  vec4 vs_TEXCOORD0;
in  vec4 vs_TEXCOORD1;
in  vec4 vs_TEXCOORD3;
in  vec2 vs_TEXCOORD4;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
void main()
{
    u_xlat0 = texture(_MainTex, vs_TEXCOORD3.xy);
    u_xlat0.x = u_xlat0.w * vs_TEXCOORD4.x + (-vs_TEXCOORD4.y);
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat1.xyz = _UnderlayColor.www * _UnderlayColor.xyz;
    u_xlat1.w = _UnderlayColor.w;
    u_xlat0 = u_xlat0.xxxx * u_xlat1;
    u_xlat1 = vs_COLOR0 + (-vs_COLOR1);
    u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2.xy = u_xlat2.ww * vs_TEXCOORD1.xx + (-vs_TEXCOORD1.zy);
    u_xlat2.xy = clamp(u_xlat2.xy, 0.0, 1.0);
    u_xlat1 = u_xlat2.xxxx * u_xlat1 + vs_COLOR1;
    u_xlat3 = u_xlat2.yyyy * u_xlat1;
    u_xlat1.x = (-u_xlat1.w) * u_xlat2.y + 1.0;
    u_xlat0 = u_xlat0 * u_xlat1.xxxx + u_xlat3;
    u_xlat1.x = u_xlat0.w * vs_TEXCOORD3.z + -0.00100000005;
    u_xlat0 = u_xlat0 * vs_TEXCOORD3.zzzz;
    SV_Target0 = u_xlat0;
    u_xlatb0 = u_xlat1.x<0.0;
    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "OUTLINE_ON" "UNDERLAY_ON" "UNITY_UI_ALPHACLIP" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 653
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %12 %118 %122 %129 %196 %299 %308 %412 %468 %474 %534 %552 %637 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpDecorate %12 Location 12 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpDecorate %19 ArrayStride 19 
                                                      OpDecorate %20 ArrayStride 20 
                                                      OpDecorate %21 ArrayStride 21 
                                                      OpMemberDecorate %22 0 Offset 22 
                                                      OpMemberDecorate %22 1 Offset 22 
                                                      OpMemberDecorate %22 2 Offset 22 
                                                      OpMemberDecorate %22 3 Offset 22 
                                                      OpMemberDecorate %22 4 Offset 22 
                                                      OpMemberDecorate %22 5 Offset 22 
                                                      OpMemberDecorate %22 6 Offset 22 
                                                      OpMemberDecorate %22 7 Offset 22 
                                                      OpMemberDecorate %22 8 Offset 22 
                                                      OpMemberDecorate %22 9 Offset 22 
                                                      OpMemberDecorate %22 10 Offset 22 
                                                      OpMemberDecorate %22 11 Offset 22 
                                                      OpMemberDecorate %22 12 Offset 22 
                                                      OpMemberDecorate %22 13 Offset 22 
                                                      OpMemberDecorate %22 14 Offset 22 
                                                      OpMemberDecorate %22 15 Offset 22 
                                                      OpMemberDecorate %22 16 Offset 22 
                                                      OpMemberDecorate %22 17 Offset 22 
                                                      OpMemberDecorate %22 18 Offset 22 
                                                      OpMemberDecorate %22 19 Offset 22 
                                                      OpMemberDecorate %22 20 Offset 22 
                                                      OpMemberDecorate %22 21 Offset 22 
                                                      OpMemberDecorate %22 22 Offset 22 
                                                      OpMemberDecorate %22 23 Offset 22 
                                                      OpMemberDecorate %22 24 Offset 22 
                                                      OpMemberDecorate %22 25 Offset 22 
                                                      OpMemberDecorate %22 26 Offset 22 
                                                      OpMemberDecorate %22 27 Offset 22 
                                                      OpMemberDecorate %22 28 Offset 22 
                                                      OpMemberDecorate %22 29 Offset 22 
                                                      OpMemberDecorate %22 30 Offset 22 
                                                      OpDecorate %22 Block 
                                                      OpDecorate %24 DescriptorSet 24 
                                                      OpDecorate %24 Binding 24 
                                                      OpMemberDecorate %116 0 BuiltIn 116 
                                                      OpMemberDecorate %116 1 BuiltIn 116 
                                                      OpMemberDecorate %116 2 BuiltIn 116 
                                                      OpDecorate %116 Block 
                                                      OpDecorate %122 Location 122 
                                                      OpDecorate %129 Location 129 
                                                      OpDecorate %196 Location 196 
                                                      OpDecorate vs_TEXCOORD2 Location 299 
                                                      OpDecorate %308 Location 308 
                                                      OpDecorate %412 Location 412 
                                                      OpDecorate vs_TEXCOORD0 Location 468 
                                                      OpDecorate %474 Location 474 
                                                      OpDecorate vs_TEXCOORD1 Location 534 
                                                      OpDecorate vs_TEXCOORD3 Location 552 
                                                      OpDecorate vs_TEXCOORD4 Location 637 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 2 
                                               %8 = OpTypePointer Private %7 
                                Private f32_2* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 4 
                                              %11 = OpTypePointer Input %10 
                                 Input f32_4* %12 = OpVariable Input 
                                              %15 = OpTypeVector %6 3 
                                              %16 = OpTypeInt 32 0 
                                          u32 %17 = OpConstant 4 
                                              %18 = OpTypeArray %10 %17 
                                              %19 = OpTypeArray %10 %17 
                                              %20 = OpTypeArray %10 %17 
                                              %21 = OpTypeArray %10 %17 
                                              %22 = OpTypeStruct %15 %10 %18 %19 %20 %21 %10 %6 %6 %10 %6 %6 %6 %6 %6 %6 %6 %6 %6 %6 %6 %10 %6 %6 %6 %6 %6 %6 %6 %6 %6 
                                              %23 = OpTypePointer Uniform %22 
Uniform struct {f32_3; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4[4]; f32_4; f32; f32; f32_4; f32; f32; f32; f32; f32; f32; f32; f32; f32; f32; f32; f32_4; f32; f32; f32; f32; f32; f32; f32; f32; f32;}* %24 = OpVariable Uniform 
                                              %25 = OpTypeInt 32 1 
                                          i32 %26 = OpConstant 19 
                                              %27 = OpTypePointer Uniform %6 
                                          i32 %30 = OpConstant 20 
                                              %35 = OpTypePointer Private %10 
                               Private f32_4* %36 = OpVariable Private 
                                          i32 %39 = OpConstant 2 
                                          i32 %40 = OpConstant 1 
                                              %41 = OpTypePointer Uniform %10 
                                          i32 %45 = OpConstant 0 
                               Private f32_4* %60 = OpVariable Private 
                                          i32 %62 = OpConstant 3 
                                              %80 = OpTypePointer Uniform %15 
                               Private f32_4* %86 = OpVariable Private 
                                          i32 %89 = OpConstant 5 
                                         u32 %114 = OpConstant 1 
                                             %115 = OpTypeArray %6 %114 
                                             %116 = OpTypeStruct %10 %6 %115 
                                             %117 = OpTypePointer Output %116 
        Output struct {f32_4; f32; f32[1];}* %118 = OpVariable Output 
                                             %120 = OpTypePointer Output %10 
                               Output f32_4* %122 = OpVariable Output 
                                         i32 %123 = OpConstant 6 
                                         u32 %124 = OpConstant 3 
                                             %127 = OpTypePointer Output %6 
                                Input f32_4* %129 = OpVariable Input 
                                         f32 %134 = OpConstant 3.674022E-40 
                                             %135 = OpTypePointer Private %6 
                              Private f32_4* %137 = OpVariable Private 
                              Private f32_4* %153 = OpVariable Private 
                              Private f32_4* %163 = OpVariable Private 
                                         i32 %164 = OpConstant 9 
                                Private f32* %180 = OpVariable Private 
                                             %195 = OpTypePointer Input %15 
                                Input f32_3* %196 = OpVariable Input 
                                         u32 %202 = OpConstant 0 
                                         u32 %215 = OpConstant 2 
                                         i32 %239 = OpConstant 4 
                                         i32 %261 = OpConstant 27 
                                         i32 %264 = OpConstant 28 
                                Private f32* %278 = OpVariable Private 
                                         i32 %284 = OpConstant 22 
                                         i32 %287 = OpConstant 23 
                                         f32 %291 = OpConstant 3.674022E-40 
                                       f32_2 %292 = OpConstantComposite %291 %291 
                       Output f32_4* vs_TEXCOORD2 = OpVariable Output 
                                             %307 = OpTypePointer Input %7 
                                Input f32_2* %308 = OpVariable Input 
                                             %309 = OpTypePointer Input %6 
                                         i32 %313 = OpConstant 26 
                              Private f32_2* %318 = OpVariable Private 
                                         i32 %319 = OpConstant 30 
                                Private f32* %335 = OpVariable Private 
                                         i32 %336 = OpConstant 29 
                                             %359 = OpTypeBool 
                                             %360 = OpTypePointer Private %359 
                               Private bool* %361 = OpVariable Private 
                                         f32 %364 = OpConstant 3.674022E-40 
                                             %367 = OpTypePointer Function %6 
                                         i32 %376 = OpConstant 8 
                                         i32 %379 = OpConstant 17 
                                         i32 %391 = OpConstant 10 
                               Output f32_4* %412 = OpVariable Output 
                                         i32 %432 = OpConstant 21 
                                         f32 %435 = OpConstant 3.674022E-40 
                                       f32_4 %436 = OpConstantComposite %435 %435 %435 %435 
                                         f32 %439 = OpConstant 3.674022E-40 
                                       f32_4 %440 = OpConstantComposite %439 %439 %439 %439 
                                         f32 %448 = OpConstant 3.674022E-40 
                                       f32_2 %449 = OpConstantComposite %448 %448 
                       Output f32_4* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_2* %474 = OpVariable Input 
                               Private bool* %478 = OpVariable Private 
                                             %485 = OpTypePointer Private %15 
                              Private f32_3* %486 = OpVariable Private 
                                         i32 %487 = OpConstant 15 
                                         i32 %491 = OpConstant 16 
                                         i32 %508 = OpConstant 7 
                                         f32 %522 = OpConstant 3.674022E-40 
                                         f32 %531 = OpConstant 3.674022E-40 
                       Output f32_4* vs_TEXCOORD1 = OpVariable Output 
                       Output f32_4* vs_TEXCOORD3 = OpVariable Output 
                                         i32 %557 = OpConstant 14 
                                         i32 %560 = OpConstant 13 
                                         i32 %563 = OpConstant 11 
                                         i32 %566 = OpConstant 12 
                                         i32 %570 = OpConstant 18 
                                         i32 %597 = OpConstant 24 
                                         i32 %600 = OpConstant 25 
                                             %636 = OpTypePointer Output %7 
                       Output f32_2* vs_TEXCOORD4 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                               Function f32* %368 = OpVariable Function 
                                        f32_4 %13 = OpLoad %12 
                                        f32_2 %14 = OpVectorShuffle %13 %13 0 1 
                                 Uniform f32* %28 = OpAccessChain %24 %26 
                                          f32 %29 = OpLoad %28 
                                 Uniform f32* %31 = OpAccessChain %24 %30 
                                          f32 %32 = OpLoad %31 
                                        f32_2 %33 = OpCompositeConstruct %29 %32 
                                        f32_2 %34 = OpFAdd %14 %33 
                                                      OpStore %9 %34 
                                        f32_2 %37 = OpLoad %9 
                                        f32_4 %38 = OpVectorShuffle %37 %37 1 1 1 1 
                               Uniform f32_4* %42 = OpAccessChain %24 %39 %40 
                                        f32_4 %43 = OpLoad %42 
                                        f32_4 %44 = OpFMul %38 %43 
                                                      OpStore %36 %44 
                               Uniform f32_4* %46 = OpAccessChain %24 %39 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_2 %48 = OpLoad %9 
                                        f32_4 %49 = OpVectorShuffle %48 %48 0 0 0 0 
                                        f32_4 %50 = OpFMul %47 %49 
                                        f32_4 %51 = OpLoad %36 
                                        f32_4 %52 = OpFAdd %50 %51 
                                                      OpStore %36 %52 
                               Uniform f32_4* %53 = OpAccessChain %24 %39 %39 
                                        f32_4 %54 = OpLoad %53 
                                        f32_4 %55 = OpLoad %12 
                                        f32_4 %56 = OpVectorShuffle %55 %55 2 2 2 2 
                                        f32_4 %57 = OpFMul %54 %56 
                                        f32_4 %58 = OpLoad %36 
                                        f32_4 %59 = OpFAdd %57 %58 
                                                      OpStore %36 %59 
                                        f32_4 %61 = OpLoad %36 
                               Uniform f32_4* %63 = OpAccessChain %24 %39 %62 
                                        f32_4 %64 = OpLoad %63 
                                        f32_4 %65 = OpFAdd %61 %64 
                                                      OpStore %60 %65 
                               Uniform f32_4* %66 = OpAccessChain %24 %39 %62 
                                        f32_4 %67 = OpLoad %66 
                                        f32_3 %68 = OpVectorShuffle %67 %67 0 1 2 
                                        f32_4 %69 = OpLoad %12 
                                        f32_3 %70 = OpVectorShuffle %69 %69 3 3 3 
                                        f32_3 %71 = OpFMul %68 %70 
                                        f32_4 %72 = OpLoad %36 
                                        f32_3 %73 = OpVectorShuffle %72 %72 0 1 2 
                                        f32_3 %74 = OpFAdd %71 %73 
                                        f32_4 %75 = OpLoad %36 
                                        f32_4 %76 = OpVectorShuffle %75 %74 4 5 6 3 
                                                      OpStore %36 %76 
                                        f32_4 %77 = OpLoad %36 
                                        f32_3 %78 = OpVectorShuffle %77 %77 0 1 2 
                                        f32_3 %79 = OpFNegate %78 
                               Uniform f32_3* %81 = OpAccessChain %24 %45 
                                        f32_3 %82 = OpLoad %81 
                                        f32_3 %83 = OpFAdd %79 %82 
                                        f32_4 %84 = OpLoad %36 
                                        f32_4 %85 = OpVectorShuffle %84 %83 4 5 6 3 
                                                      OpStore %36 %85 
                                        f32_4 %87 = OpLoad %60 
                                        f32_4 %88 = OpVectorShuffle %87 %87 1 1 1 1 
                               Uniform f32_4* %90 = OpAccessChain %24 %89 %40 
                                        f32_4 %91 = OpLoad %90 
                                        f32_4 %92 = OpFMul %88 %91 
                                                      OpStore %86 %92 
                               Uniform f32_4* %93 = OpAccessChain %24 %89 %45 
                                        f32_4 %94 = OpLoad %93 
                                        f32_4 %95 = OpLoad %60 
                                        f32_4 %96 = OpVectorShuffle %95 %95 0 0 0 0 
                                        f32_4 %97 = OpFMul %94 %96 
                                        f32_4 %98 = OpLoad %86 
                                        f32_4 %99 = OpFAdd %97 %98 
                                                      OpStore %86 %99 
                              Uniform f32_4* %100 = OpAccessChain %24 %89 %39 
                                       f32_4 %101 = OpLoad %100 
                                       f32_4 %102 = OpLoad %60 
                                       f32_4 %103 = OpVectorShuffle %102 %102 2 2 2 2 
                                       f32_4 %104 = OpFMul %101 %103 
                                       f32_4 %105 = OpLoad %86 
                                       f32_4 %106 = OpFAdd %104 %105 
                                                      OpStore %86 %106 
                              Uniform f32_4* %107 = OpAccessChain %24 %89 %62 
                                       f32_4 %108 = OpLoad %107 
                                       f32_4 %109 = OpLoad %60 
                                       f32_4 %110 = OpVectorShuffle %109 %109 3 3 3 3 
                                       f32_4 %111 = OpFMul %108 %110 
                                       f32_4 %112 = OpLoad %86 
                                       f32_4 %113 = OpFAdd %111 %112 
                                                      OpStore %60 %113 
                                       f32_4 %119 = OpLoad %60 
                               Output f32_4* %121 = OpAccessChain %118 %45 
                                                      OpStore %121 %119 
                                Uniform f32* %125 = OpAccessChain %24 %123 %124 
                                         f32 %126 = OpLoad %125 
                                 Output f32* %128 = OpAccessChain %122 %124 
                                                      OpStore %128 %126 
                                       f32_4 %130 = OpLoad %129 
                                       f32_3 %131 = OpVectorShuffle %130 %130 0 1 2 
                                       f32_4 %132 = OpLoad %86 
                                       f32_4 %133 = OpVectorShuffle %132 %131 4 5 6 3 
                                                      OpStore %86 %133 
                                Private f32* %136 = OpAccessChain %86 %124 
                                                      OpStore %136 %134 
                                       f32_4 %138 = OpLoad %86 
                              Uniform f32_4* %139 = OpAccessChain %24 %123 
                                       f32_4 %140 = OpLoad %139 
                                       f32_4 %141 = OpFMul %138 %140 
                                                      OpStore %137 %141 
                                       f32_4 %142 = OpLoad %137 
                                       f32_3 %143 = OpVectorShuffle %142 %142 3 3 3 
                                       f32_4 %144 = OpLoad %137 
                                       f32_3 %145 = OpVectorShuffle %144 %144 0 1 2 
                                       f32_3 %146 = OpFMul %143 %145 
                                       f32_4 %147 = OpLoad %60 
                                       f32_4 %148 = OpVectorShuffle %147 %146 4 5 6 3 
                                                      OpStore %60 %148 
                                       f32_4 %149 = OpLoad %60 
                                       f32_3 %150 = OpVectorShuffle %149 %149 0 1 2 
                                       f32_4 %151 = OpLoad %122 
                                       f32_4 %152 = OpVectorShuffle %151 %150 4 5 6 3 
                                                      OpStore %122 %152 
                                       f32_4 %154 = OpLoad %60 
                                       f32_3 %155 = OpVectorShuffle %154 %154 0 1 2 
                                       f32_3 %156 = OpFNegate %155 
                                       f32_4 %157 = OpLoad %153 
                                       f32_4 %158 = OpVectorShuffle %157 %156 4 5 6 3 
                                                      OpStore %153 %158 
                                Private f32* %159 = OpAccessChain %137 %124 
                                         f32 %160 = OpLoad %159 
                                         f32 %161 = OpFNegate %160 
                                Private f32* %162 = OpAccessChain %153 %124 
                                                      OpStore %162 %161 
                              Uniform f32_4* %165 = OpAccessChain %24 %164 
                                       f32_4 %166 = OpLoad %165 
                                       f32_3 %167 = OpVectorShuffle %166 %166 3 3 3 
                              Uniform f32_4* %168 = OpAccessChain %24 %164 
                                       f32_4 %169 = OpLoad %168 
                                       f32_3 %170 = OpVectorShuffle %169 %169 0 1 2 
                                       f32_3 %171 = OpFMul %167 %170 
                                       f32_4 %172 = OpLoad %163 
                                       f32_4 %173 = OpVectorShuffle %172 %171 4 5 6 3 
                                                      OpStore %163 %173 
                                Uniform f32* %174 = OpAccessChain %24 %164 %124 
                                         f32 %175 = OpLoad %174 
                                Private f32* %176 = OpAccessChain %163 %124 
                                                      OpStore %176 %175 
                                       f32_4 %177 = OpLoad %153 
                                       f32_4 %178 = OpLoad %163 
                                       f32_4 %179 = OpFAdd %177 %178 
                                                      OpStore %153 %179 
                                       f32_4 %181 = OpLoad %36 
                                       f32_3 %182 = OpVectorShuffle %181 %181 0 1 2 
                                       f32_4 %183 = OpLoad %36 
                                       f32_3 %184 = OpVectorShuffle %183 %183 0 1 2 
                                         f32 %185 = OpDot %182 %184 
                                                      OpStore %180 %185 
                                         f32 %186 = OpLoad %180 
                                         f32 %187 = OpExtInst %1 32 %186 
                                                      OpStore %180 %187 
                                         f32 %188 = OpLoad %180 
                                       f32_3 %189 = OpCompositeConstruct %188 %188 %188 
                                       f32_4 %190 = OpLoad %36 
                                       f32_3 %191 = OpVectorShuffle %190 %190 0 1 2 
                                       f32_3 %192 = OpFMul %189 %191 
                                       f32_4 %193 = OpLoad %36 
                                       f32_4 %194 = OpVectorShuffle %193 %192 4 5 6 3 
                                                      OpStore %36 %194 
                                       f32_3 %197 = OpLoad %196 
                              Uniform f32_4* %198 = OpAccessChain %24 %62 %45 
                                       f32_4 %199 = OpLoad %198 
                                       f32_3 %200 = OpVectorShuffle %199 %199 0 1 2 
                                         f32 %201 = OpDot %197 %200 
                                Private f32* %203 = OpAccessChain %60 %202 
                                                      OpStore %203 %201 
                                       f32_3 %204 = OpLoad %196 
                              Uniform f32_4* %205 = OpAccessChain %24 %62 %40 
                                       f32_4 %206 = OpLoad %205 
                                       f32_3 %207 = OpVectorShuffle %206 %206 0 1 2 
                                         f32 %208 = OpDot %204 %207 
                                Private f32* %209 = OpAccessChain %60 %114 
                                                      OpStore %209 %208 
                                       f32_3 %210 = OpLoad %196 
                              Uniform f32_4* %211 = OpAccessChain %24 %62 %39 
                                       f32_4 %212 = OpLoad %211 
                                       f32_3 %213 = OpVectorShuffle %212 %212 0 1 2 
                                         f32 %214 = OpDot %210 %213 
                                Private f32* %216 = OpAccessChain %60 %215 
                                                      OpStore %216 %214 
                                       f32_4 %217 = OpLoad %60 
                                       f32_3 %218 = OpVectorShuffle %217 %217 0 1 2 
                                       f32_4 %219 = OpLoad %60 
                                       f32_3 %220 = OpVectorShuffle %219 %219 0 1 2 
                                         f32 %221 = OpDot %218 %220 
                                                      OpStore %180 %221 
                                         f32 %222 = OpLoad %180 
                                         f32 %223 = OpExtInst %1 32 %222 
                                                      OpStore %180 %223 
                                         f32 %224 = OpLoad %180 
                                       f32_3 %225 = OpCompositeConstruct %224 %224 %224 
                                       f32_4 %226 = OpLoad %60 
                                       f32_3 %227 = OpVectorShuffle %226 %226 0 1 2 
                                       f32_3 %228 = OpFMul %225 %227 
                                       f32_4 %229 = OpLoad %60 
                                       f32_4 %230 = OpVectorShuffle %229 %228 4 5 6 3 
                                                      OpStore %60 %230 
                                       f32_4 %231 = OpLoad %60 
                                       f32_3 %232 = OpVectorShuffle %231 %231 0 1 2 
                                       f32_4 %233 = OpLoad %36 
                                       f32_3 %234 = OpVectorShuffle %233 %233 0 1 2 
                                         f32 %235 = OpDot %232 %234 
                                                      OpStore %180 %235 
                              Uniform f32_4* %236 = OpAccessChain %24 %40 
                                       f32_4 %237 = OpLoad %236 
                                       f32_2 %238 = OpVectorShuffle %237 %237 1 1 
                              Uniform f32_4* %240 = OpAccessChain %24 %239 %40 
                                       f32_4 %241 = OpLoad %240 
                                       f32_2 %242 = OpVectorShuffle %241 %241 0 1 
                                       f32_2 %243 = OpFMul %238 %242 
                                       f32_4 %244 = OpLoad %36 
                                       f32_4 %245 = OpVectorShuffle %244 %243 4 5 2 3 
                                                      OpStore %36 %245 
                              Uniform f32_4* %246 = OpAccessChain %24 %239 %45 
                                       f32_4 %247 = OpLoad %246 
                                       f32_2 %248 = OpVectorShuffle %247 %247 0 1 
                              Uniform f32_4* %249 = OpAccessChain %24 %40 
                                       f32_4 %250 = OpLoad %249 
                                       f32_2 %251 = OpVectorShuffle %250 %250 0 0 
                                       f32_2 %252 = OpFMul %248 %251 
                                       f32_4 %253 = OpLoad %36 
                                       f32_2 %254 = OpVectorShuffle %253 %253 0 1 
                                       f32_2 %255 = OpFAdd %252 %254 
                                       f32_4 %256 = OpLoad %36 
                                       f32_4 %257 = OpVectorShuffle %256 %255 4 5 2 3 
                                                      OpStore %36 %257 
                                       f32_4 %258 = OpLoad %36 
                                       f32_2 %259 = OpVectorShuffle %258 %258 0 1 
                                       f32_2 %260 = OpExtInst %1 4 %259 
                                Uniform f32* %262 = OpAccessChain %24 %261 
                                         f32 %263 = OpLoad %262 
                                Uniform f32* %265 = OpAccessChain %24 %264 
                                         f32 %266 = OpLoad %265 
                                       f32_2 %267 = OpCompositeConstruct %263 %266 
                                       f32_2 %268 = OpFMul %260 %267 
                                       f32_4 %269 = OpLoad %36 
                                       f32_4 %270 = OpVectorShuffle %269 %268 4 5 2 3 
                                                      OpStore %36 %270 
                                       f32_4 %271 = OpLoad %60 
                                       f32_2 %272 = OpVectorShuffle %271 %271 3 3 
                                       f32_4 %273 = OpLoad %36 
                                       f32_2 %274 = OpVectorShuffle %273 %273 0 1 
                                       f32_2 %275 = OpFDiv %272 %274 
                                       f32_4 %276 = OpLoad %36 
                                       f32_4 %277 = OpVectorShuffle %276 %275 4 5 2 3 
                                                      OpStore %36 %277 
                                       f32_4 %279 = OpLoad %36 
                                       f32_2 %280 = OpVectorShuffle %279 %279 0 1 
                                       f32_4 %281 = OpLoad %36 
                                       f32_2 %282 = OpVectorShuffle %281 %281 0 1 
                                         f32 %283 = OpDot %280 %282 
                                                      OpStore %278 %283 
                                Uniform f32* %285 = OpAccessChain %24 %284 
                                         f32 %286 = OpLoad %285 
                                Uniform f32* %288 = OpAccessChain %24 %287 
                                         f32 %289 = OpLoad %288 
                                       f32_2 %290 = OpCompositeConstruct %286 %289 
                                       f32_2 %293 = OpFMul %290 %292 
                                       f32_4 %294 = OpLoad %36 
                                       f32_2 %295 = OpVectorShuffle %294 %294 0 1 
                                       f32_2 %296 = OpFAdd %293 %295 
                                       f32_4 %297 = OpLoad %36 
                                       f32_4 %298 = OpVectorShuffle %297 %296 4 5 2 3 
                                                      OpStore %36 %298 
                                       f32_4 %300 = OpLoad %36 
                                       f32_2 %301 = OpVectorShuffle %300 %300 0 1 
                                       f32_2 %302 = OpFDiv %292 %301 
                                       f32_4 %303 = OpLoad vs_TEXCOORD2 
                                       f32_4 %304 = OpVectorShuffle %303 %302 0 1 4 5 
                                                      OpStore vs_TEXCOORD2 %304 
                                         f32 %305 = OpLoad %278 
                                         f32 %306 = OpExtInst %1 32 %305 
                                                      OpStore %278 %306 
                                  Input f32* %310 = OpAccessChain %308 %114 
                                         f32 %311 = OpLoad %310 
                                         f32 %312 = OpExtInst %1 4 %311 
                                Uniform f32* %314 = OpAccessChain %24 %313 
                                         f32 %315 = OpLoad %314 
                                         f32 %316 = OpFMul %312 %315 
                                Private f32* %317 = OpAccessChain %36 %202 
                                                      OpStore %317 %316 
                                Uniform f32* %320 = OpAccessChain %24 %319 
                                         f32 %321 = OpLoad %320 
                                         f32 %322 = OpFAdd %321 %134 
                                Private f32* %323 = OpAccessChain %318 %202 
                                                      OpStore %323 %322 
                                Private f32* %324 = OpAccessChain %318 %202 
                                         f32 %325 = OpLoad %324 
                                Private f32* %326 = OpAccessChain %36 %202 
                                         f32 %327 = OpLoad %326 
                                         f32 %328 = OpFMul %325 %327 
                                Private f32* %329 = OpAccessChain %36 %202 
                                                      OpStore %329 %328 
                                         f32 %330 = OpLoad %278 
                                Private f32* %331 = OpAccessChain %36 %202 
                                         f32 %332 = OpLoad %331 
                                         f32 %333 = OpFMul %330 %332 
                                Private f32* %334 = OpAccessChain %318 %202 
                                                      OpStore %334 %333 
                                Uniform f32* %337 = OpAccessChain %24 %336 
                                         f32 %338 = OpLoad %337 
                                         f32 %339 = OpFNegate %338 
                                         f32 %340 = OpFAdd %339 %134 
                                                      OpStore %335 %340 
                                         f32 %341 = OpLoad %335 
                                Private f32* %342 = OpAccessChain %318 %202 
                                         f32 %343 = OpLoad %342 
                                         f32 %344 = OpExtInst %1 4 %343 
                                         f32 %345 = OpFMul %341 %344 
                                                      OpStore %335 %345 
                                         f32 %346 = OpLoad %278 
                                Private f32* %347 = OpAccessChain %36 %202 
                                         f32 %348 = OpLoad %347 
                                         f32 %349 = OpFMul %346 %348 
                                         f32 %350 = OpLoad %335 
                                         f32 %351 = OpFNegate %350 
                                         f32 %352 = OpFAdd %349 %351 
                                                      OpStore %278 %352 
                                         f32 %353 = OpLoad %180 
                                         f32 %354 = OpExtInst %1 4 %353 
                                         f32 %355 = OpLoad %278 
                                         f32 %356 = OpFMul %354 %355 
                                         f32 %357 = OpLoad %335 
                                         f32 %358 = OpFAdd %356 %357 
                                                      OpStore %180 %358 
                                Uniform f32* %362 = OpAccessChain %24 %239 %62 %124 
                                         f32 %363 = OpLoad %362 
                                        bool %365 = OpFOrdEqual %363 %364 
                                                      OpStore %361 %365 
                                        bool %366 = OpLoad %361 
                                                      OpSelectionMerge %370 None 
                                                      OpBranchConditional %366 %369 %372 
                                             %369 = OpLabel 
                                         f32 %371 = OpLoad %180 
                                                      OpStore %368 %371 
                                                      OpBranch %370 
                                             %372 = OpLabel 
                                Private f32* %373 = OpAccessChain %318 %202 
                                         f32 %374 = OpLoad %373 
                                                      OpStore %368 %374 
                                                      OpBranch %370 
                                             %370 = OpLabel 
                                         f32 %375 = OpLoad %368 
                                                      OpStore %180 %375 
                                Uniform f32* %377 = OpAccessChain %24 %376 
                                         f32 %378 = OpLoad %377 
                                Uniform f32* %380 = OpAccessChain %24 %379 
                                         f32 %381 = OpLoad %380 
                                         f32 %382 = OpFMul %378 %381 
                                                      OpStore %278 %382 
                                         f32 %383 = OpLoad %278 
                                         f32 %384 = OpLoad %180 
                                         f32 %385 = OpFMul %383 %384 
                                         f32 %386 = OpFAdd %385 %134 
                                                      OpStore %278 %386 
                                         f32 %387 = OpLoad %180 
                                         f32 %388 = OpLoad %278 
                                         f32 %389 = OpFDiv %387 %388 
                                Private f32* %390 = OpAccessChain %36 %202 
                                                      OpStore %390 %389 
                                Uniform f32* %392 = OpAccessChain %24 %391 
                                         f32 %393 = OpLoad %392 
                                Uniform f32* %394 = OpAccessChain %24 %379 
                                         f32 %395 = OpLoad %394 
                                         f32 %396 = OpFMul %393 %395 
                                                      OpStore %278 %396 
                                Private f32* %397 = OpAccessChain %36 %202 
                                         f32 %398 = OpLoad %397 
                                         f32 %399 = OpLoad %278 
                                         f32 %400 = OpFMul %398 %399 
                                                      OpStore %278 %400 
                                         f32 %401 = OpLoad %278 
                                         f32 %402 = OpExtInst %1 37 %401 %134 
                                Private f32* %403 = OpAccessChain %318 %202 
                                                      OpStore %403 %402 
                                Private f32* %404 = OpAccessChain %318 %202 
                                         f32 %405 = OpLoad %404 
                                         f32 %406 = OpExtInst %1 31 %405 
                                Private f32* %407 = OpAccessChain %318 %202 
                                                      OpStore %407 %406 
                                       f32_4 %408 = OpLoad %153 
                                       f32_2 %409 = OpLoad %318 
                                       f32_4 %410 = OpVectorShuffle %409 %409 0 0 0 0 
                                       f32_4 %411 = OpFMul %408 %410 
                                                      OpStore %60 %411 
                                       f32_4 %413 = OpLoad %137 
                                       f32_3 %414 = OpVectorShuffle %413 %413 0 1 2 
                                       f32_4 %415 = OpLoad %137 
                                       f32_3 %416 = OpVectorShuffle %415 %415 3 3 3 
                                       f32_3 %417 = OpFMul %414 %416 
                                       f32_4 %418 = OpLoad %60 
                                       f32_3 %419 = OpVectorShuffle %418 %418 0 1 2 
                                       f32_3 %420 = OpFAdd %417 %419 
                                       f32_4 %421 = OpLoad %412 
                                       f32_4 %422 = OpVectorShuffle %421 %420 4 5 6 3 
                                                      OpStore %412 %422 
                                Private f32* %423 = OpAccessChain %86 %124 
                                         f32 %424 = OpLoad %423 
                                Uniform f32* %425 = OpAccessChain %24 %123 %124 
                                         f32 %426 = OpLoad %425 
                                         f32 %427 = OpFMul %424 %426 
                                Private f32* %428 = OpAccessChain %60 %124 
                                         f32 %429 = OpLoad %428 
                                         f32 %430 = OpFAdd %427 %429 
                                 Output f32* %431 = OpAccessChain %412 %124 
                                                      OpStore %431 %430 
                              Uniform f32_4* %433 = OpAccessChain %24 %432 
                                       f32_4 %434 = OpLoad %433 
                                       f32_4 %437 = OpExtInst %1 40 %434 %436 
                                                      OpStore %60 %437 
                                       f32_4 %438 = OpLoad %60 
                                       f32_4 %441 = OpExtInst %1 37 %438 %440 
                                                      OpStore %60 %441 
                                       f32_2 %442 = OpLoad %9 
                                       f32_4 %443 = OpLoad %60 
                                       f32_2 %444 = OpVectorShuffle %443 %443 0 1 
                                       f32_2 %445 = OpFNegate %444 
                                       f32_2 %446 = OpFAdd %442 %445 
                                                      OpStore %318 %446 
                                       f32_2 %447 = OpLoad %9 
                                       f32_2 %450 = OpFMul %447 %449 
                                       f32_4 %451 = OpLoad %60 
                                       f32_2 %452 = OpVectorShuffle %451 %451 0 1 
                                       f32_2 %453 = OpFNegate %452 
                                       f32_2 %454 = OpFAdd %450 %453 
                                                      OpStore %9 %454 
                                       f32_4 %455 = OpLoad %60 
                                       f32_2 %456 = OpVectorShuffle %455 %455 2 3 
                                       f32_2 %457 = OpFNegate %456 
                                       f32_2 %458 = OpLoad %9 
                                       f32_2 %459 = OpFAdd %457 %458 
                                       f32_4 %460 = OpLoad vs_TEXCOORD2 
                                       f32_4 %461 = OpVectorShuffle %460 %459 4 5 2 3 
                                                      OpStore vs_TEXCOORD2 %461 
                                       f32_4 %462 = OpLoad %60 
                                       f32_2 %463 = OpVectorShuffle %462 %462 0 1 
                                       f32_2 %464 = OpFNegate %463 
                                       f32_4 %465 = OpLoad %60 
                                       f32_2 %466 = OpVectorShuffle %465 %465 2 3 
                                       f32_2 %467 = OpFAdd %464 %466 
                                                      OpStore %9 %467 
                                       f32_2 %469 = OpLoad %318 
                                       f32_2 %470 = OpLoad %9 
                                       f32_2 %471 = OpFDiv %469 %470 
                                       f32_4 %472 = OpLoad vs_TEXCOORD0 
                                       f32_4 %473 = OpVectorShuffle %472 %471 0 1 4 5 
                                                      OpStore vs_TEXCOORD0 %473 
                                       f32_2 %475 = OpLoad %474 
                                       f32_4 %476 = OpLoad vs_TEXCOORD0 
                                       f32_4 %477 = OpVectorShuffle %476 %475 4 5 2 3 
                                                      OpStore vs_TEXCOORD0 %477 
                                  Input f32* %479 = OpAccessChain %308 %114 
                                         f32 %480 = OpLoad %479 
                                        bool %481 = OpFOrdGreaterThanEqual %364 %480 
                                                      OpStore %478 %481 
                                        bool %482 = OpLoad %478 
                                         f32 %483 = OpSelect %482 %134 %364 
                                Private f32* %484 = OpAccessChain %9 %202 
                                                      OpStore %484 %483 
                                Uniform f32* %488 = OpAccessChain %24 %487 
                                         f32 %489 = OpLoad %488 
                                         f32 %490 = OpFNegate %489 
                                Uniform f32* %492 = OpAccessChain %24 %491 
                                         f32 %493 = OpLoad %492 
                                         f32 %494 = OpFAdd %490 %493 
                                Private f32* %495 = OpAccessChain %486 %202 
                                                      OpStore %495 %494 
                                Private f32* %496 = OpAccessChain %9 %202 
                                         f32 %497 = OpLoad %496 
                                Private f32* %498 = OpAccessChain %486 %202 
                                         f32 %499 = OpLoad %498 
                                         f32 %500 = OpFMul %497 %499 
                                Uniform f32* %501 = OpAccessChain %24 %487 
                                         f32 %502 = OpLoad %501 
                                         f32 %503 = OpFAdd %500 %502 
                                Private f32* %504 = OpAccessChain %9 %202 
                                                      OpStore %504 %503 
                                Private f32* %505 = OpAccessChain %9 %202 
                                         f32 %506 = OpLoad %505 
                                         f32 %507 = OpFMul %506 %291 
                                Uniform f32* %509 = OpAccessChain %24 %508 
                                         f32 %510 = OpLoad %509 
                                         f32 %511 = OpFAdd %507 %510 
                                Private f32* %512 = OpAccessChain %9 %202 
                                                      OpStore %512 %511 
                                Private f32* %513 = OpAccessChain %9 %202 
                                         f32 %514 = OpLoad %513 
                                Uniform f32* %515 = OpAccessChain %24 %379 
                                         f32 %516 = OpLoad %515 
                                         f32 %517 = OpFMul %514 %516 
                                Private f32* %518 = OpAccessChain %9 %202 
                                                      OpStore %518 %517 
                                Private f32* %519 = OpAccessChain %9 %202 
                                         f32 %520 = OpLoad %519 
                                         f32 %521 = OpFNegate %520 
                                         f32 %523 = OpFMul %521 %522 
                                         f32 %524 = OpFAdd %523 %522 
                                Private f32* %525 = OpAccessChain %9 %202 
                                                      OpStore %525 %524 
                                Private f32* %526 = OpAccessChain %9 %202 
                                         f32 %527 = OpLoad %526 
                                Private f32* %528 = OpAccessChain %36 %202 
                                         f32 %529 = OpLoad %528 
                                         f32 %530 = OpFMul %527 %529 
                                         f32 %532 = OpFAdd %530 %531 
                                Private f32* %533 = OpAccessChain %36 %124 
                                                      OpStore %533 %532 
                                       f32_4 %535 = OpLoad %36 
                                       f32_2 %536 = OpVectorShuffle %535 %535 0 3 
                                       f32_4 %537 = OpLoad vs_TEXCOORD1 
                                       f32_4 %538 = OpVectorShuffle %537 %536 4 1 2 5 
                                                      OpStore vs_TEXCOORD1 %538 
                                         f32 %539 = OpLoad %278 
                                         f32 %540 = OpFNegate %539 
                                         f32 %541 = OpFMul %540 %522 
                                Private f32* %542 = OpAccessChain %36 %124 
                                         f32 %543 = OpLoad %542 
                                         f32 %544 = OpFAdd %541 %543 
                                 Output f32* %545 = OpAccessChain vs_TEXCOORD1 %114 
                                                      OpStore %545 %544 
                                         f32 %546 = OpLoad %278 
                                         f32 %547 = OpFMul %546 %522 
                                Private f32* %548 = OpAccessChain %36 %124 
                                         f32 %549 = OpLoad %548 
                                         f32 %550 = OpFAdd %547 %549 
                                 Output f32* %551 = OpAccessChain vs_TEXCOORD1 %215 
                                                      OpStore %551 %550 
                                  Input f32* %553 = OpAccessChain %129 %124 
                                         f32 %554 = OpLoad %553 
                                 Output f32* %555 = OpAccessChain vs_TEXCOORD3 %215 
                                                      OpStore %555 %554 
                                 Output f32* %556 = OpAccessChain vs_TEXCOORD3 %124 
                                                      OpStore %556 %364 
                                Uniform f32* %558 = OpAccessChain %24 %557 
                                         f32 %559 = OpLoad %558 
                                Uniform f32* %561 = OpAccessChain %24 %560 
                                         f32 %562 = OpLoad %561 
                                Uniform f32* %564 = OpAccessChain %24 %563 
                                         f32 %565 = OpLoad %564 
                                Uniform f32* %567 = OpAccessChain %24 %566 
                                         f32 %568 = OpLoad %567 
                                       f32_4 %569 = OpCompositeConstruct %559 %562 %565 %568 
                                Uniform f32* %571 = OpAccessChain %24 %570 
                                         f32 %572 = OpLoad %571 
                                Uniform f32* %573 = OpAccessChain %24 %570 
                                         f32 %574 = OpLoad %573 
                                Uniform f32* %575 = OpAccessChain %24 %570 
                                         f32 %576 = OpLoad %575 
                                Uniform f32* %577 = OpAccessChain %24 %570 
                                         f32 %578 = OpLoad %577 
                                       f32_4 %579 = OpCompositeConstruct %572 %574 %576 %578 
                                         f32 %580 = OpCompositeExtract %579 0 
                                         f32 %581 = OpCompositeExtract %579 1 
                                         f32 %582 = OpCompositeExtract %579 2 
                                         f32 %583 = OpCompositeExtract %579 3 
                                       f32_4 %584 = OpCompositeConstruct %580 %581 %582 %583 
                                       f32_4 %585 = OpFMul %569 %584 
                                                      OpStore %36 %585 
                                       f32_4 %586 = OpLoad %36 
                                       f32_2 %587 = OpVectorShuffle %586 %586 2 3 
                                       f32_2 %588 = OpFNegate %587 
                                Uniform f32* %589 = OpAccessChain %24 %313 
                                         f32 %590 = OpLoad %589 
                                       f32_2 %591 = OpCompositeConstruct %590 %590 
                                       f32_2 %592 = OpFMul %588 %591 
                                       f32_3 %593 = OpLoad %486 
                                       f32_3 %594 = OpVectorShuffle %593 %592 3 1 4 
                                                      OpStore %486 %594 
                                       f32_3 %595 = OpLoad %486 
                                       f32_2 %596 = OpVectorShuffle %595 %595 0 2 
                                Uniform f32* %598 = OpAccessChain %24 %597 
                                         f32 %599 = OpLoad %598 
                                Uniform f32* %601 = OpAccessChain %24 %600 
                                         f32 %602 = OpLoad %601 
                                       f32_2 %603 = OpCompositeConstruct %599 %602 
                                       f32_2 %604 = OpFDiv %596 %603 
                                       f32_3 %605 = OpLoad %486 
                                       f32_3 %606 = OpVectorShuffle %605 %604 3 1 4 
                                                      OpStore %486 %606 
                                       f32_3 %607 = OpLoad %486 
                                       f32_2 %608 = OpVectorShuffle %607 %607 0 2 
                                       f32_2 %609 = OpLoad %474 
                                       f32_2 %610 = OpFAdd %608 %609 
                                       f32_4 %611 = OpLoad vs_TEXCOORD3 
                                       f32_4 %612 = OpVectorShuffle %611 %610 4 5 2 3 
                                                      OpStore vs_TEXCOORD3 %612 
                                Private f32* %613 = OpAccessChain %36 %202 
                                         f32 %614 = OpLoad %613 
                                         f32 %615 = OpLoad %180 
                                         f32 %616 = OpFMul %614 %615 
                                         f32 %617 = OpFAdd %616 %134 
                                Private f32* %618 = OpAccessChain %486 %202 
                                                      OpStore %618 %617 
                                         f32 %619 = OpLoad %180 
                                Private f32* %620 = OpAccessChain %486 %202 
                                         f32 %621 = OpLoad %620 
                                         f32 %622 = OpFDiv %619 %621 
                                Private f32* %623 = OpAccessChain %486 %202 
                                                      OpStore %623 %622 
                                Private f32* %624 = OpAccessChain %486 %202 
                                         f32 %625 = OpLoad %624 
                                Private f32* %626 = OpAccessChain %36 %114 
                                         f32 %627 = OpLoad %626 
                                         f32 %628 = OpFMul %625 %627 
                                                      OpStore %180 %628 
                                Private f32* %629 = OpAccessChain %9 %202 
                                         f32 %630 = OpLoad %629 
                                Private f32* %631 = OpAccessChain %486 %202 
                                         f32 %632 = OpLoad %631 
                                         f32 %633 = OpFMul %630 %632 
                                         f32 %634 = OpFAdd %633 %531 
                                Private f32* %635 = OpAccessChain %9 %202 
                                                      OpStore %635 %634 
                                Private f32* %638 = OpAccessChain %486 %202 
                                         f32 %639 = OpLoad %638 
                                 Output f32* %640 = OpAccessChain vs_TEXCOORD4 %202 
                                                      OpStore %640 %639 
                                         f32 %641 = OpLoad %180 
                                         f32 %642 = OpFNegate %641 
                                         f32 %643 = OpFMul %642 %522 
                                Private f32* %644 = OpAccessChain %9 %202 
                                         f32 %645 = OpLoad %644 
                                         f32 %646 = OpFAdd %643 %645 
                                 Output f32* %647 = OpAccessChain vs_TEXCOORD4 %114 
                                                      OpStore %647 %646 
                                 Output f32* %648 = OpAccessChain %118 %45 %114 
                                         f32 %649 = OpLoad %648 
                                         f32 %650 = OpFNegate %649 
                                 Output f32* %651 = OpAccessChain %118 %45 %114 
                                                      OpStore %651 %650 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 165
; Schema: 0
                                             OpCapability Shader 
                                      %1 = OpExtInstImport "GLSL.std.450" 
                                             OpMemoryModel Logical GLSL450 
                                             OpEntryPoint Fragment %4 "main" %21 %35 %77 %79 %88 %96 %147 
                                             OpExecutionMode %4 OriginUpperLeft 
                                             OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                             OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                             OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                             OpDecorate %12 DescriptorSet 12 
                                             OpDecorate %12 Binding 12 
                                             OpDecorate %16 DescriptorSet 16 
                                             OpDecorate %16 Binding 16 
                                             OpDecorate vs_TEXCOORD3 Location 21 
                                             OpDecorate vs_TEXCOORD4 Location 35 
                                             OpMemberDecorate %53 0 Offset 53 
                                             OpDecorate %53 Block 
                                             OpDecorate %55 DescriptorSet 55 
                                             OpDecorate %55 Binding 55 
                                             OpDecorate %77 Location 77 
                                             OpDecorate %79 Location 79 
                                             OpDecorate vs_TEXCOORD0 Location 88 
                                             OpDecorate vs_TEXCOORD1 Location 96 
                                             OpDecorate %147 Location 147 
                                      %2 = OpTypeVoid 
                                      %3 = OpTypeFunction %2 
                                      %6 = OpTypeFloat 32 
                                      %7 = OpTypeVector %6 4 
                                      %8 = OpTypePointer Private %7 
                       Private f32_4* %9 = OpVariable Private 
                                     %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                     %11 = OpTypePointer UniformConstant %10 
UniformConstant read_only Texture2D* %12 = OpVariable UniformConstant 
                                     %14 = OpTypeSampler 
                                     %15 = OpTypePointer UniformConstant %14 
            UniformConstant sampler* %16 = OpVariable UniformConstant 
                                     %18 = OpTypeSampledImage %10 
                                     %20 = OpTypePointer Input %7 
               Input f32_4* vs_TEXCOORD3 = OpVariable Input 
                                     %22 = OpTypeVector %6 2 
                                     %26 = OpTypeInt 32 0 
                                 u32 %27 = OpConstant 3 
                                 u32 %29 = OpConstant 0 
                                     %30 = OpTypePointer Private %6 
                                     %34 = OpTypePointer Input %22 
               Input f32_2* vs_TEXCOORD4 = OpVariable Input 
                                     %36 = OpTypePointer Input %6 
                                 u32 %40 = OpConstant 1 
                                 f32 %48 = OpConstant 3.674022E-40 
                                 f32 %49 = OpConstant 3.674022E-40 
                      Private f32_4* %52 = OpVariable Private 
                                     %53 = OpTypeStruct %7 
                                     %54 = OpTypePointer Uniform %53 
            Uniform struct {f32_4;}* %55 = OpVariable Uniform 
                                     %56 = OpTypeInt 32 1 
                                 i32 %57 = OpConstant 0 
                                     %58 = OpTypeVector %6 3 
                                     %59 = OpTypePointer Uniform %7 
                                     %69 = OpTypePointer Uniform %6 
                        Input f32_4* %77 = OpVariable Input 
                        Input f32_4* %79 = OpVariable Input 
                                     %83 = OpTypePointer Private %22 
                      Private f32_2* %84 = OpVariable Private 
               Input f32_4* vs_TEXCOORD0 = OpVariable Input 
               Input f32_4* vs_TEXCOORD1 = OpVariable Input 
                     Private f32_4* %114 = OpVariable Private 
                                u32 %135 = OpConstant 2 
                                f32 %139 = OpConstant 3.674022E-40 
                                    %146 = OpTypePointer Output %7 
                      Output f32_4* %147 = OpVariable Output 
                                    %149 = OpTypeBool 
                                    %150 = OpTypePointer Private %149 
                      Private bool* %151 = OpVariable Private 
                                i32 %156 = OpConstant 1 
                                i32 %158 = OpConstant -1 
                                 void %4 = OpFunction None %3 
                                      %5 = OpLabel 
                 read_only Texture2D %13 = OpLoad %12 
                             sampler %17 = OpLoad %16 
          read_only Texture2DSampled %19 = OpSampledImage %13 %17 
                               f32_4 %23 = OpLoad vs_TEXCOORD3 
                               f32_2 %24 = OpVectorShuffle %23 %23 0 1 
                               f32_4 %25 = OpImageSampleImplicitLod %19 %24 
                                 f32 %28 = OpCompositeExtract %25 3 
                        Private f32* %31 = OpAccessChain %9 %29 
                                             OpStore %31 %28 
                        Private f32* %32 = OpAccessChain %9 %29 
                                 f32 %33 = OpLoad %32 
                          Input f32* %37 = OpAccessChain vs_TEXCOORD4 %29 
                                 f32 %38 = OpLoad %37 
                                 f32 %39 = OpFMul %33 %38 
                          Input f32* %41 = OpAccessChain vs_TEXCOORD4 %40 
                                 f32 %42 = OpLoad %41 
                                 f32 %43 = OpFNegate %42 
                                 f32 %44 = OpFAdd %39 %43 
                        Private f32* %45 = OpAccessChain %9 %29 
                                             OpStore %45 %44 
                        Private f32* %46 = OpAccessChain %9 %29 
                                 f32 %47 = OpLoad %46 
                                 f32 %50 = OpExtInst %1 43 %47 %48 %49 
                        Private f32* %51 = OpAccessChain %9 %29 
                                             OpStore %51 %50 
                      Uniform f32_4* %60 = OpAccessChain %55 %57 
                               f32_4 %61 = OpLoad %60 
                               f32_3 %62 = OpVectorShuffle %61 %61 3 3 3 
                      Uniform f32_4* %63 = OpAccessChain %55 %57 
                               f32_4 %64 = OpLoad %63 
                               f32_3 %65 = OpVectorShuffle %64 %64 0 1 2 
                               f32_3 %66 = OpFMul %62 %65 
                               f32_4 %67 = OpLoad %52 
                               f32_4 %68 = OpVectorShuffle %67 %66 4 5 6 3 
                                             OpStore %52 %68 
                        Uniform f32* %70 = OpAccessChain %55 %57 %27 
                                 f32 %71 = OpLoad %70 
                        Private f32* %72 = OpAccessChain %52 %27 
                                             OpStore %72 %71 
                               f32_4 %73 = OpLoad %9 
                               f32_4 %74 = OpVectorShuffle %73 %73 0 0 0 0 
                               f32_4 %75 = OpLoad %52 
                               f32_4 %76 = OpFMul %74 %75 
                                             OpStore %9 %76 
                               f32_4 %78 = OpLoad %77 
                               f32_4 %80 = OpLoad %79 
                               f32_4 %81 = OpFNegate %80 
                               f32_4 %82 = OpFAdd %78 %81 
                                             OpStore %52 %82 
                 read_only Texture2D %85 = OpLoad %12 
                             sampler %86 = OpLoad %16 
          read_only Texture2DSampled %87 = OpSampledImage %85 %86 
                               f32_4 %89 = OpLoad vs_TEXCOORD0 
                               f32_2 %90 = OpVectorShuffle %89 %89 0 1 
                               f32_4 %91 = OpImageSampleImplicitLod %87 %90 
                                 f32 %92 = OpCompositeExtract %91 3 
                        Private f32* %93 = OpAccessChain %84 %29 
                                             OpStore %93 %92 
                               f32_2 %94 = OpLoad %84 
                               f32_2 %95 = OpVectorShuffle %94 %94 0 0 
                               f32_4 %97 = OpLoad vs_TEXCOORD1 
                               f32_2 %98 = OpVectorShuffle %97 %97 0 0 
                               f32_2 %99 = OpFMul %95 %98 
                              f32_4 %100 = OpLoad vs_TEXCOORD1 
                              f32_2 %101 = OpVectorShuffle %100 %100 2 1 
                              f32_2 %102 = OpFNegate %101 
                              f32_2 %103 = OpFAdd %99 %102 
                                             OpStore %84 %103 
                              f32_2 %104 = OpLoad %84 
                              f32_2 %105 = OpCompositeConstruct %48 %48 
                              f32_2 %106 = OpCompositeConstruct %49 %49 
                              f32_2 %107 = OpExtInst %1 43 %104 %105 %106 
                                             OpStore %84 %107 
                              f32_2 %108 = OpLoad %84 
                              f32_4 %109 = OpVectorShuffle %108 %108 0 0 0 0 
                              f32_4 %110 = OpLoad %52 
                              f32_4 %111 = OpFMul %109 %110 
                              f32_4 %112 = OpLoad %79 
                              f32_4 %113 = OpFAdd %111 %112 
                                             OpStore %52 %113 
                              f32_2 %115 = OpLoad %84 
                              f32_4 %116 = OpVectorShuffle %115 %115 1 1 1 1 
                              f32_4 %117 = OpLoad %52 
                              f32_4 %118 = OpFMul %116 %117 
                                             OpStore %114 %118 
                       Private f32* %119 = OpAccessChain %52 %27 
                                f32 %120 = OpLoad %119 
                                f32 %121 = OpFNegate %120 
                       Private f32* %122 = OpAccessChain %84 %40 
                                f32 %123 = OpLoad %122 
                                f32 %124 = OpFMul %121 %123 
                                f32 %125 = OpFAdd %124 %49 
                       Private f32* %126 = OpAccessChain %52 %29 
                                             OpStore %126 %125 
                              f32_4 %127 = OpLoad %9 
                              f32_4 %128 = OpLoad %52 
                              f32_4 %129 = OpVectorShuffle %128 %128 0 0 0 0 
                              f32_4 %130 = OpFMul %127 %129 
                              f32_4 %131 = OpLoad %114 
                              f32_4 %132 = OpFAdd %130 %131 
                                             OpStore %9 %132 
                       Private f32* %133 = OpAccessChain %9 %27 
                                f32 %134 = OpLoad %133 
                         Input f32* %136 = OpAccessChain vs_TEXCOORD3 %135 
                                f32 %137 = OpLoad %136 
                                f32 %138 = OpFMul %134 %137 
                                f32 %140 = OpFAdd %138 %139 
                       Private f32* %141 = OpAccessChain %52 %29 
                                             OpStore %141 %140 
                              f32_4 %142 = OpLoad %9 
                              f32_4 %143 = OpLoad vs_TEXCOORD3 
                              f32_4 %144 = OpVectorShuffle %143 %143 2 2 2 2 
                              f32_4 %145 = OpFMul %142 %144 
                                             OpStore %9 %145 
                              f32_4 %148 = OpLoad %9 
                                             OpStore %147 %148 
                       Private f32* %152 = OpAccessChain %52 %29 
                                f32 %153 = OpLoad %152 
                               bool %154 = OpFOrdLessThan %153 %48 
                                             OpStore %151 %154 
                               bool %155 = OpLoad %151 
                                i32 %157 = OpSelect %155 %156 %57 
                                i32 %159 = OpIMul %157 %158 
                               bool %160 = OpINotEqual %159 %57 
                                             OpSelectionMerge %162 None 
                                             OpBranchConditional %160 %161 %162 
                                    %161 = OpLabel 
                                             OpKill
                                    %162 = OpLabel 
                                             OpReturn
                                             OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "FOG_LINEAR" "UNITY_UI_ALPHACLIP" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "FOG_LINEAR" "UNITY_UI_ALPHACLIP" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	vec4 _FaceColor;
uniform 	float _FaceDilate;
uniform 	float _OutlineSoftness;
uniform 	vec4 _OutlineColor;
uniform 	float _OutlineWidth;
uniform 	float _WeightNormal;
uniform 	float _WeightBold;
uniform 	float _ScaleRatioA;
uniform 	float _VertexOffsetX;
uniform 	float _VertexOffsetY;
uniform 	vec4 _ClipRect;
uniform 	float _MaskSoftnessX;
uniform 	float _MaskSoftnessY;
uniform 	float _GradientScale;
uniform 	float _ScaleX;
uniform 	float _ScaleY;
uniform 	float _PerspectiveFilter;
uniform 	float _Sharpness;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_COLOR0;
in  vec2 in_TEXCOORD0;
in  vec2 in_TEXCOORD1;
out vec4 vs_COLOR0;
out vec4 vs_COLOR1;
out vec4 vs_TEXCOORD0;
out vec4 vs_TEXCOORD1;
out vec4 vs_TEXCOORD2;
out float vs_TEXCOORDn0;
vec2 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
vec3 u_xlat5;
float u_xlat6;
vec2 u_xlat7;
float u_xlat12;
float u_xlat13;
float u_xlat18;
bool u_xlatb18;
void main()
{
    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
    gl_Position = u_xlat2;
    u_xlat3 = in_COLOR0 * _FaceColor;
    u_xlat3.xyz = u_xlat3.www * u_xlat3.xyz;
    vs_COLOR0 = u_xlat3;
    u_xlat4.w = in_COLOR0.w * _OutlineColor.w;
    u_xlat4.xyz = u_xlat4.www * _OutlineColor.xyz;
    u_xlat4 = (-u_xlat3) + u_xlat4;
    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
    u_xlat5.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat5.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat5.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat5.xyz = vec3(u_xlat12) * u_xlat5.xyz;
    u_xlat12 = dot(u_xlat5.xyz, u_xlat1.xyz);
    u_xlat1.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;
    u_xlat1.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat1.xy;
    u_xlat1.xy = abs(u_xlat1.xy) * vec2(_ScaleX, _ScaleY);
    u_xlat1.xy = u_xlat2.ww / u_xlat1.xy;
    vs_TEXCOORDn0 = u_xlat2.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat18 = dot(u_xlat1.xy, u_xlat1.xy);
    u_xlat1.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) * vec2(0.25, 0.25) + u_xlat1.xy;
    vs_TEXCOORD2.zw = vec2(0.25, 0.25) / u_xlat1.xy;
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.x = abs(in_TEXCOORD1.y) * _GradientScale;
    u_xlat7.x = _Sharpness + 1.0;
    u_xlat1.x = u_xlat7.x * u_xlat1.x;
    u_xlat7.x = u_xlat18 * u_xlat1.x;
    u_xlat13 = (-_PerspectiveFilter) + 1.0;
    u_xlat13 = u_xlat13 * abs(u_xlat7.x);
    u_xlat18 = u_xlat18 * u_xlat1.x + (-u_xlat13);
    u_xlat12 = abs(u_xlat12) * u_xlat18 + u_xlat13;
    u_xlatb18 = hlslcc_mtx4x4glstate_matrix_projection[3].w==0.0;
    u_xlat12 = (u_xlatb18) ? u_xlat12 : u_xlat7.x;
    u_xlat18 = _OutlineSoftness * _ScaleRatioA;
    u_xlat18 = u_xlat18 * u_xlat12 + 1.0;
    u_xlat1.x = u_xlat12 / u_xlat18;
    u_xlat12 = _OutlineWidth * _ScaleRatioA;
    u_xlat12 = u_xlat12 * 0.5;
    u_xlat18 = u_xlat1.x * u_xlat12;
    u_xlat18 = u_xlat18 + u_xlat18;
    u_xlat18 = min(u_xlat18, 1.0);
    u_xlat18 = sqrt(u_xlat18);
    vs_COLOR1 = vec4(u_xlat18) * u_xlat4 + u_xlat3;
    u_xlat2 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));
    u_xlat2 = min(u_xlat2, vec4(2e+10, 2e+10, 2e+10, 2e+10));
    u_xlat7.xy = u_xlat0.xy + (-u_xlat2.xy);
    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + (-u_xlat2.xy);
    vs_TEXCOORD2.xy = (-u_xlat2.zw) + u_xlat0.xy;
    u_xlat0.xy = (-u_xlat2.xy) + u_xlat2.zw;
    vs_TEXCOORD0.zw = u_xlat7.xy / u_xlat0.xy;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlatb0 = 0.0>=in_TEXCOORD1.y;
    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);
    u_xlat6 = (-_WeightNormal) + _WeightBold;
    u_xlat0.x = u_xlat0.x * u_xlat6 + _WeightNormal;
    u_xlat0.x = u_xlat0.x * 0.25 + _FaceDilate;
    u_xlat0.x = u_xlat0.x * _ScaleRatioA;
    u_xlat0.x = (-u_xlat0.x) * 0.5 + 0.5;
    u_xlat1.w = u_xlat0.x * u_xlat1.x + -0.5;
    vs_TEXCOORD1.y = (-u_xlat12) * u_xlat1.x + u_xlat1.w;
    vs_TEXCOORD1.z = u_xlat12 * u_xlat1.x + u_xlat1.w;
    vs_TEXCOORD1.xw = u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 unity_FogColor;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
in  vec4 vs_COLOR0;
in  vec4 vs_TEXCOORD0;
in  vec4 vs_TEXCOORD1;
in  float vs_TEXCOORDn0;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec3 u_xlat1;
bool u_xlatb1;
void main()
{
    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat0.x = u_xlat0.w * vs_TEXCOORD1.x + (-vs_TEXCOORD1.w);
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat1.x = vs_COLOR0.w * u_xlat0.x + -0.00100000005;
    u_xlatb1 = u_xlat1.x<0.0;
    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
    u_xlat1.xyz = vs_COLOR0.xyz * u_xlat0.xxx + (-unity_FogColor.xyz);
    u_xlat0.x = u_xlat0.x * vs_COLOR0.w;
    SV_Target0.w = u_xlat0.x;
    u_xlat0.x = vs_TEXCOORDn0;
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    SV_Target0.xyz = u_xlat0.xxx * u_xlat1.xyz + unity_FogColor.xyz;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "FOG_LINEAR" "UNITY_UI_ALPHACLIP" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 534
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %12 %118 %122 %135 %156 %251 %281 %290 %405 %448 %454 %511 
                                                      OpName vs_TEXCOORDn0 "vs_TEXCOORDn0" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpDecorate %12 Location 12 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpDecorate %19 ArrayStride 19 
                                                      OpDecorate %20 ArrayStride 20 
                                                      OpDecorate %21 ArrayStride 21 
                                                      OpMemberDecorate %22 0 Offset 22 
                                                      OpMemberDecorate %22 1 Offset 22 
                                                      OpMemberDecorate %22 2 Offset 22 
                                                      OpMemberDecorate %22 3 Offset 22 
                                                      OpMemberDecorate %22 4 Offset 22 
                                                      OpMemberDecorate %22 5 Offset 22 
                                                      OpMemberDecorate %22 6 Offset 22 
                                                      OpMemberDecorate %22 7 Offset 22 
                                                      OpMemberDecorate %22 8 Offset 22 
                                                      OpMemberDecorate %22 9 Offset 22 
                                                      OpMemberDecorate %22 10 Offset 22 
                                                      OpMemberDecorate %22 11 Offset 22 
                                                      OpMemberDecorate %22 12 Offset 22 
                                                      OpMemberDecorate %22 13 Offset 22 
                                                      OpMemberDecorate %22 14 Offset 22 
                                                      OpMemberDecorate %22 15 Offset 22 
                                                      OpMemberDecorate %22 16 Offset 22 
                                                      OpMemberDecorate %22 17 Offset 22 
                                                      OpMemberDecorate %22 18 Offset 22 
                                                      OpMemberDecorate %22 19 Offset 22 
                                                      OpMemberDecorate %22 20 Offset 22 
                                                      OpMemberDecorate %22 21 Offset 22 
                                                      OpMemberDecorate %22 22 Offset 22 
                                                      OpMemberDecorate %22 23 Offset 22 
                                                      OpMemberDecorate %22 24 Offset 22 
                                                      OpMemberDecorate %22 25 Offset 22 
                                                      OpDecorate %22 Block 
                                                      OpDecorate %24 DescriptorSet 24 
                                                      OpDecorate %24 Binding 24 
                                                      OpMemberDecorate %116 0 BuiltIn 116 
                                                      OpMemberDecorate %116 1 BuiltIn 116 
                                                      OpMemberDecorate %116 2 BuiltIn 116 
                                                      OpDecorate %116 Block 
                                                      OpDecorate %122 Location 122 
                                                      OpDecorate %135 Location 135 
                                                      OpDecorate %156 Location 156 
                                                      OpDecorate vs_TEXCOORDn0 Location 251 
                                                      OpDecorate vs_TEXCOORD2 Location 281 
                                                      OpDecorate %290 Location 290 
                                                      OpDecorate %405 Location 405 
                                                      OpDecorate vs_TEXCOORD0 Location 448 
                                                      OpDecorate %454 Location 454 
                                                      OpDecorate vs_TEXCOORD1 Location 511 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 2 
                                               %8 = OpTypePointer Private %7 
                                Private f32_2* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 4 
                                              %11 = OpTypePointer Input %10 
                                 Input f32_4* %12 = OpVariable Input 
                                              %15 = OpTypeVector %6 3 
                                              %16 = OpTypeInt 32 0 
                                          u32 %17 = OpConstant 4 
                                              %18 = OpTypeArray %10 %17 
                                              %19 = OpTypeArray %10 %17 
                                              %20 = OpTypeArray %10 %17 
                                              %21 = OpTypeArray %10 %17 
                                              %22 = OpTypeStruct %15 %10 %10 %18 %19 %20 %21 %10 %10 %6 %6 %10 %6 %6 %6 %6 %6 %6 %10 %6 %6 %6 %6 %6 %6 %6 
                                              %23 = OpTypePointer Uniform %22 
Uniform struct {f32_3; f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4[4]; f32_4; f32_4; f32; f32; f32_4; f32; f32; f32; f32; f32; f32; f32_4; f32; f32; f32; f32; f32; f32; f32;}* %24 = OpVariable Uniform 
                                              %25 = OpTypeInt 32 1 
                                          i32 %26 = OpConstant 16 
                                              %27 = OpTypePointer Uniform %6 
                                          i32 %30 = OpConstant 17 
                                              %35 = OpTypePointer Private %10 
                               Private f32_4* %36 = OpVariable Private 
                                          i32 %39 = OpConstant 3 
                                          i32 %40 = OpConstant 1 
                                              %41 = OpTypePointer Uniform %10 
                                          i32 %45 = OpConstant 0 
                                          i32 %53 = OpConstant 2 
                               Private f32_4* %61 = OpVariable Private 
                                              %80 = OpTypePointer Uniform %15 
                               Private f32_4* %86 = OpVariable Private 
                                          i32 %89 = OpConstant 6 
                                         u32 %114 = OpConstant 1 
                                             %115 = OpTypeArray %6 %114 
                                             %116 = OpTypeStruct %10 %6 %115 
                                             %117 = OpTypePointer Output %116 
        Output struct {f32_4; f32; f32[1];}* %118 = OpVariable Output 
                                             %120 = OpTypePointer Output %10 
                                Input f32_4* %122 = OpVariable Input 
                                         i32 %124 = OpConstant 8 
                               Output f32_4* %135 = OpVariable Output 
                                             %137 = OpTypePointer Private %6 
                                Private f32* %138 = OpVariable Private 
                                             %153 = OpTypePointer Private %15 
                              Private f32_3* %154 = OpVariable Private 
                                             %155 = OpTypePointer Input %15 
                                Input f32_3* %156 = OpVariable Input 
                                         i32 %158 = OpConstant 4 
                                         u32 %163 = OpConstant 0 
                                         u32 %176 = OpConstant 2 
                                         i32 %194 = OpConstant 5 
                                         i32 %216 = OpConstant 22 
                                         i32 %219 = OpConstant 23 
                                Private f32* %233 = OpVariable Private 
                                         f32 %241 = OpConstant 3.674022E-40 
                                         f32 %248 = OpConstant 3.674022E-40 
                                             %250 = OpTypePointer Output %6 
                        Output f32* vs_TEXCOORDn0 = OpVariable Output 
                                         i32 %253 = OpConstant 7 
                                         u32 %257 = OpConstant 3 
                                         i32 %266 = OpConstant 19 
                                         i32 %269 = OpConstant 20 
                                         f32 %273 = OpConstant 3.674022E-40 
                                       f32_2 %274 = OpConstantComposite %273 %273 
                       Output f32_4* vs_TEXCOORD2 = OpVariable Output 
                                             %289 = OpTypePointer Input %7 
                                Input f32_2* %290 = OpVariable Input 
                                             %291 = OpTypePointer Input %6 
                                         i32 %295 = OpConstant 21 
                              Private f32_2* %300 = OpVariable Private 
                                         i32 %301 = OpConstant 25 
                                Private f32* %317 = OpVariable Private 
                                         i32 %318 = OpConstant 24 
                                             %341 = OpTypeBool 
                                             %342 = OpTypePointer Private %341 
                               Private bool* %343 = OpVariable Private 
                                             %348 = OpTypePointer Function %6 
                                         i32 %357 = OpConstant 10 
                                         i32 %360 = OpConstant 15 
                                         i32 %372 = OpConstant 12 
                                         i32 %388 = OpConstant 11 
                               Output f32_4* %405 = OpVariable Output 
                                         i32 %412 = OpConstant 18 
                                         f32 %415 = OpConstant 3.674022E-40 
                                       f32_4 %416 = OpConstantComposite %415 %415 %415 %415 
                                         f32 %419 = OpConstant 3.674022E-40 
                                       f32_4 %420 = OpConstantComposite %419 %419 %419 %419 
                                         f32 %428 = OpConstant 3.674022E-40 
                                       f32_2 %429 = OpConstantComposite %428 %428 
                       Output f32_4* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_2* %454 = OpVariable Input 
                               Private bool* %458 = OpVariable Private 
                                Private f32* %465 = OpVariable Private 
                                         i32 %466 = OpConstant 13 
                                         i32 %470 = OpConstant 14 
                                         i32 %485 = OpConstant 9 
                                         f32 %499 = OpConstant 3.674022E-40 
                                         f32 %508 = OpConstant 3.674022E-40 
                       Output f32_4* vs_TEXCOORD1 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                               Function f32* %349 = OpVariable Function 
                                        f32_4 %13 = OpLoad %12 
                                        f32_2 %14 = OpVectorShuffle %13 %13 0 1 
                                 Uniform f32* %28 = OpAccessChain %24 %26 
                                          f32 %29 = OpLoad %28 
                                 Uniform f32* %31 = OpAccessChain %24 %30 
                                          f32 %32 = OpLoad %31 
                                        f32_2 %33 = OpCompositeConstruct %29 %32 
                                        f32_2 %34 = OpFAdd %14 %33 
                                                      OpStore %9 %34 
                                        f32_2 %37 = OpLoad %9 
                                        f32_4 %38 = OpVectorShuffle %37 %37 1 1 1 1 
                               Uniform f32_4* %42 = OpAccessChain %24 %39 %40 
                                        f32_4 %43 = OpLoad %42 
                                        f32_4 %44 = OpFMul %38 %43 
                                                      OpStore %36 %44 
                               Uniform f32_4* %46 = OpAccessChain %24 %39 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_2 %48 = OpLoad %9 
                                        f32_4 %49 = OpVectorShuffle %48 %48 0 0 0 0 
                                        f32_4 %50 = OpFMul %47 %49 
                                        f32_4 %51 = OpLoad %36 
                                        f32_4 %52 = OpFAdd %50 %51 
                                                      OpStore %36 %52 
                               Uniform f32_4* %54 = OpAccessChain %24 %39 %53 
                                        f32_4 %55 = OpLoad %54 
                                        f32_4 %56 = OpLoad %12 
                                        f32_4 %57 = OpVectorShuffle %56 %56 2 2 2 2 
                                        f32_4 %58 = OpFMul %55 %57 
                                        f32_4 %59 = OpLoad %36 
                                        f32_4 %60 = OpFAdd %58 %59 
                                                      OpStore %36 %60 
                                        f32_4 %62 = OpLoad %36 
                               Uniform f32_4* %63 = OpAccessChain %24 %39 %39 
                                        f32_4 %64 = OpLoad %63 
                                        f32_4 %65 = OpFAdd %62 %64 
                                                      OpStore %61 %65 
                               Uniform f32_4* %66 = OpAccessChain %24 %39 %39 
                                        f32_4 %67 = OpLoad %66 
                                        f32_3 %68 = OpVectorShuffle %67 %67 0 1 2 
                                        f32_4 %69 = OpLoad %12 
                                        f32_3 %70 = OpVectorShuffle %69 %69 3 3 3 
                                        f32_3 %71 = OpFMul %68 %70 
                                        f32_4 %72 = OpLoad %36 
                                        f32_3 %73 = OpVectorShuffle %72 %72 0 1 2 
                                        f32_3 %74 = OpFAdd %71 %73 
                                        f32_4 %75 = OpLoad %36 
                                        f32_4 %76 = OpVectorShuffle %75 %74 4 5 6 3 
                                                      OpStore %36 %76 
                                        f32_4 %77 = OpLoad %36 
                                        f32_3 %78 = OpVectorShuffle %77 %77 0 1 2 
                                        f32_3 %79 = OpFNegate %78 
                               Uniform f32_3* %81 = OpAccessChain %24 %45 
                                        f32_3 %82 = OpLoad %81 
                                        f32_3 %83 = OpFAdd %79 %82 
                                        f32_4 %84 = OpLoad %36 
                                        f32_4 %85 = OpVectorShuffle %84 %83 4 5 6 3 
                                                      OpStore %36 %85 
                                        f32_4 %87 = OpLoad %61 
                                        f32_4 %88 = OpVectorShuffle %87 %87 1 1 1 1 
                               Uniform f32_4* %90 = OpAccessChain %24 %89 %40 
                                        f32_4 %91 = OpLoad %90 
                                        f32_4 %92 = OpFMul %88 %91 
                                                      OpStore %86 %92 
                               Uniform f32_4* %93 = OpAccessChain %24 %89 %45 
                                        f32_4 %94 = OpLoad %93 
                                        f32_4 %95 = OpLoad %61 
                                        f32_4 %96 = OpVectorShuffle %95 %95 0 0 0 0 
                                        f32_4 %97 = OpFMul %94 %96 
                                        f32_4 %98 = OpLoad %86 
                                        f32_4 %99 = OpFAdd %97 %98 
                                                      OpStore %86 %99 
                              Uniform f32_4* %100 = OpAccessChain %24 %89 %53 
                                       f32_4 %101 = OpLoad %100 
                                       f32_4 %102 = OpLoad %61 
                                       f32_4 %103 = OpVectorShuffle %102 %102 2 2 2 2 
                                       f32_4 %104 = OpFMul %101 %103 
                                       f32_4 %105 = OpLoad %86 
                                       f32_4 %106 = OpFAdd %104 %105 
                                                      OpStore %86 %106 
                              Uniform f32_4* %107 = OpAccessChain %24 %89 %39 
                                       f32_4 %108 = OpLoad %107 
                                       f32_4 %109 = OpLoad %61 
                                       f32_4 %110 = OpVectorShuffle %109 %109 3 3 3 3 
                                       f32_4 %111 = OpFMul %108 %110 
                                       f32_4 %112 = OpLoad %86 
                                       f32_4 %113 = OpFAdd %111 %112 
                                                      OpStore %61 %113 
                                       f32_4 %119 = OpLoad %61 
                               Output f32_4* %121 = OpAccessChain %118 %45 
                                                      OpStore %121 %119 
                                       f32_4 %123 = OpLoad %122 
                              Uniform f32_4* %125 = OpAccessChain %24 %124 
                                       f32_4 %126 = OpLoad %125 
                                       f32_4 %127 = OpFMul %123 %126 
                                                      OpStore %86 %127 
                                       f32_4 %128 = OpLoad %86 
                                       f32_3 %129 = OpVectorShuffle %128 %128 3 3 3 
                                       f32_4 %130 = OpLoad %86 
                                       f32_3 %131 = OpVectorShuffle %130 %130 0 1 2 
                                       f32_3 %132 = OpFMul %129 %131 
                                       f32_4 %133 = OpLoad %86 
                                       f32_4 %134 = OpVectorShuffle %133 %132 4 5 6 3 
                                                      OpStore %86 %134 
                                       f32_4 %136 = OpLoad %86 
                                                      OpStore %135 %136 
                                       f32_4 %139 = OpLoad %36 
                                       f32_3 %140 = OpVectorShuffle %139 %139 0 1 2 
                                       f32_4 %141 = OpLoad %36 
                                       f32_3 %142 = OpVectorShuffle %141 %141 0 1 2 
                                         f32 %143 = OpDot %140 %142 
                                                      OpStore %138 %143 
                                         f32 %144 = OpLoad %138 
                                         f32 %145 = OpExtInst %1 32 %144 
                                                      OpStore %138 %145 
                                         f32 %146 = OpLoad %138 
                                       f32_3 %147 = OpCompositeConstruct %146 %146 %146 
                                       f32_4 %148 = OpLoad %36 
                                       f32_3 %149 = OpVectorShuffle %148 %148 0 1 2 
                                       f32_3 %150 = OpFMul %147 %149 
                                       f32_4 %151 = OpLoad %36 
                                       f32_4 %152 = OpVectorShuffle %151 %150 4 5 6 3 
                                                      OpStore %36 %152 
                                       f32_3 %157 = OpLoad %156 
                              Uniform f32_4* %159 = OpAccessChain %24 %158 %45 
                                       f32_4 %160 = OpLoad %159 
                                       f32_3 %161 = OpVectorShuffle %160 %160 0 1 2 
                                         f32 %162 = OpDot %157 %161 
                                Private f32* %164 = OpAccessChain %154 %163 
                                                      OpStore %164 %162 
                                       f32_3 %165 = OpLoad %156 
                              Uniform f32_4* %166 = OpAccessChain %24 %158 %40 
                                       f32_4 %167 = OpLoad %166 
                                       f32_3 %168 = OpVectorShuffle %167 %167 0 1 2 
                                         f32 %169 = OpDot %165 %168 
                                Private f32* %170 = OpAccessChain %154 %114 
                                                      OpStore %170 %169 
                                       f32_3 %171 = OpLoad %156 
                              Uniform f32_4* %172 = OpAccessChain %24 %158 %53 
                                       f32_4 %173 = OpLoad %172 
                                       f32_3 %174 = OpVectorShuffle %173 %173 0 1 2 
                                         f32 %175 = OpDot %171 %174 
                                Private f32* %177 = OpAccessChain %154 %176 
                                                      OpStore %177 %175 
                                       f32_3 %178 = OpLoad %154 
                                       f32_3 %179 = OpLoad %154 
                                         f32 %180 = OpDot %178 %179 
                                                      OpStore %138 %180 
                                         f32 %181 = OpLoad %138 
                                         f32 %182 = OpExtInst %1 32 %181 
                                                      OpStore %138 %182 
                                         f32 %183 = OpLoad %138 
                                       f32_3 %184 = OpCompositeConstruct %183 %183 %183 
                                       f32_3 %185 = OpLoad %154 
                                       f32_3 %186 = OpFMul %184 %185 
                                                      OpStore %154 %186 
                                       f32_3 %187 = OpLoad %154 
                                       f32_4 %188 = OpLoad %36 
                                       f32_3 %189 = OpVectorShuffle %188 %188 0 1 2 
                                         f32 %190 = OpDot %187 %189 
                                                      OpStore %138 %190 
                              Uniform f32_4* %191 = OpAccessChain %24 %53 
                                       f32_4 %192 = OpLoad %191 
                                       f32_2 %193 = OpVectorShuffle %192 %192 1 1 
                              Uniform f32_4* %195 = OpAccessChain %24 %194 %40 
                                       f32_4 %196 = OpLoad %195 
                                       f32_2 %197 = OpVectorShuffle %196 %196 0 1 
                                       f32_2 %198 = OpFMul %193 %197 
                                       f32_4 %199 = OpLoad %36 
                                       f32_4 %200 = OpVectorShuffle %199 %198 4 5 2 3 
                                                      OpStore %36 %200 
                              Uniform f32_4* %201 = OpAccessChain %24 %194 %45 
                                       f32_4 %202 = OpLoad %201 
                                       f32_2 %203 = OpVectorShuffle %202 %202 0 1 
                              Uniform f32_4* %204 = OpAccessChain %24 %53 
                                       f32_4 %205 = OpLoad %204 
                                       f32_2 %206 = OpVectorShuffle %205 %205 0 0 
                                       f32_2 %207 = OpFMul %203 %206 
                                       f32_4 %208 = OpLoad %36 
                                       f32_2 %209 = OpVectorShuffle %208 %208 0 1 
                                       f32_2 %210 = OpFAdd %207 %209 
                                       f32_4 %211 = OpLoad %36 
                                       f32_4 %212 = OpVectorShuffle %211 %210 4 5 2 3 
                                                      OpStore %36 %212 
                                       f32_4 %213 = OpLoad %36 
                                       f32_2 %214 = OpVectorShuffle %213 %213 0 1 
                                       f32_2 %215 = OpExtInst %1 4 %214 
                                Uniform f32* %217 = OpAccessChain %24 %216 
                                         f32 %218 = OpLoad %217 
                                Uniform f32* %220 = OpAccessChain %24 %219 
                                         f32 %221 = OpLoad %220 
                                       f32_2 %222 = OpCompositeConstruct %218 %221 
                                       f32_2 %223 = OpFMul %215 %222 
                                       f32_4 %224 = OpLoad %36 
                                       f32_4 %225 = OpVectorShuffle %224 %223 4 5 2 3 
                                                      OpStore %36 %225 
                                       f32_4 %226 = OpLoad %61 
                                       f32_2 %227 = OpVectorShuffle %226 %226 3 3 
                                       f32_4 %228 = OpLoad %36 
                                       f32_2 %229 = OpVectorShuffle %228 %228 0 1 
                                       f32_2 %230 = OpFDiv %227 %229 
                                       f32_4 %231 = OpLoad %36 
                                       f32_4 %232 = OpVectorShuffle %231 %230 4 5 2 3 
                                                      OpStore %36 %232 
                                Private f32* %234 = OpAccessChain %61 %176 
                                         f32 %235 = OpLoad %234 
                                Uniform f32* %236 = OpAccessChain %24 %40 %114 
                                         f32 %237 = OpLoad %236 
                                         f32 %238 = OpFDiv %235 %237 
                                                      OpStore %233 %238 
                                         f32 %239 = OpLoad %233 
                                         f32 %240 = OpFNegate %239 
                                         f32 %242 = OpFAdd %240 %241 
                                                      OpStore %233 %242 
                                         f32 %243 = OpLoad %233 
                                Uniform f32* %244 = OpAccessChain %24 %40 %176 
                                         f32 %245 = OpLoad %244 
                                         f32 %246 = OpFMul %243 %245 
                                                      OpStore %233 %246 
                                         f32 %247 = OpLoad %233 
                                         f32 %249 = OpExtInst %1 40 %247 %248 
                                                      OpStore %233 %249 
                                         f32 %252 = OpLoad %233 
                                Uniform f32* %254 = OpAccessChain %24 %253 %176 
                                         f32 %255 = OpLoad %254 
                                         f32 %256 = OpFMul %252 %255 
                                Uniform f32* %258 = OpAccessChain %24 %253 %257 
                                         f32 %259 = OpLoad %258 
                                         f32 %260 = OpFAdd %256 %259 
                                                      OpStore vs_TEXCOORDn0 %260 
                                       f32_4 %261 = OpLoad %36 
                                       f32_2 %262 = OpVectorShuffle %261 %261 0 1 
                                       f32_4 %263 = OpLoad %36 
                                       f32_2 %264 = OpVectorShuffle %263 %263 0 1 
                                         f32 %265 = OpDot %262 %264 
                                                      OpStore %233 %265 
                                Uniform f32* %267 = OpAccessChain %24 %266 
                                         f32 %268 = OpLoad %267 
                                Uniform f32* %270 = OpAccessChain %24 %269 
                                         f32 %271 = OpLoad %270 
                                       f32_2 %272 = OpCompositeConstruct %268 %271 
                                       f32_2 %275 = OpFMul %272 %274 
                                       f32_4 %276 = OpLoad %36 
                                       f32_2 %277 = OpVectorShuffle %276 %276 0 1 
                                       f32_2 %278 = OpFAdd %275 %277 
                                       f32_4 %279 = OpLoad %36 
                                       f32_4 %280 = OpVectorShuffle %279 %278 4 5 2 3 
                                                      OpStore %36 %280 
                                       f32_4 %282 = OpLoad %36 
                                       f32_2 %283 = OpVectorShuffle %282 %282 0 1 
                                       f32_2 %284 = OpFDiv %274 %283 
                                       f32_4 %285 = OpLoad vs_TEXCOORD2 
                                       f32_4 %286 = OpVectorShuffle %285 %284 0 1 4 5 
                                                      OpStore vs_TEXCOORD2 %286 
                                         f32 %287 = OpLoad %233 
                                         f32 %288 = OpExtInst %1 32 %287 
                                                      OpStore %233 %288 
                                  Input f32* %292 = OpAccessChain %290 %114 
                                         f32 %293 = OpLoad %292 
                                         f32 %294 = OpExtInst %1 4 %293 
                                Uniform f32* %296 = OpAccessChain %24 %295 
                                         f32 %297 = OpLoad %296 
                                         f32 %298 = OpFMul %294 %297 
                                Private f32* %299 = OpAccessChain %36 %163 
                                                      OpStore %299 %298 
                                Uniform f32* %302 = OpAccessChain %24 %301 
                                         f32 %303 = OpLoad %302 
                                         f32 %304 = OpFAdd %303 %241 
                                Private f32* %305 = OpAccessChain %300 %163 
                                                      OpStore %305 %304 
                                Private f32* %306 = OpAccessChain %300 %163 
                                         f32 %307 = OpLoad %306 
                                Private f32* %308 = OpAccessChain %36 %163 
                                         f32 %309 = OpLoad %308 
                                         f32 %310 = OpFMul %307 %309 
                                Private f32* %311 = OpAccessChain %36 %163 
                                                      OpStore %311 %310 
                                         f32 %312 = OpLoad %233 
                                Private f32* %313 = OpAccessChain %36 %163 
                                         f32 %314 = OpLoad %313 
                                         f32 %315 = OpFMul %312 %314 
                                Private f32* %316 = OpAccessChain %300 %163 
                                                      OpStore %316 %315 
                                Uniform f32* %319 = OpAccessChain %24 %318 
                                         f32 %320 = OpLoad %319 
                                         f32 %321 = OpFNegate %320 
                                         f32 %322 = OpFAdd %321 %241 
                                                      OpStore %317 %322 
                                         f32 %323 = OpLoad %317 
                                Private f32* %324 = OpAccessChain %300 %163 
                                         f32 %325 = OpLoad %324 
                                         f32 %326 = OpExtInst %1 4 %325 
                                         f32 %327 = OpFMul %323 %326 
                                                      OpStore %317 %327 
                                         f32 %328 = OpLoad %233 
                                Private f32* %329 = OpAccessChain %36 %163 
                                         f32 %330 = OpLoad %329 
                                         f32 %331 = OpFMul %328 %330 
                                         f32 %332 = OpLoad %317 
                                         f32 %333 = OpFNegate %332 
                                         f32 %334 = OpFAdd %331 %333 
                                                      OpStore %233 %334 
                                         f32 %335 = OpLoad %138 
                                         f32 %336 = OpExtInst %1 4 %335 
                                         f32 %337 = OpLoad %233 
                                         f32 %338 = OpFMul %336 %337 
                                         f32 %339 = OpLoad %317 
                                         f32 %340 = OpFAdd %338 %339 
                                                      OpStore %138 %340 
                                Uniform f32* %344 = OpAccessChain %24 %194 %39 %257 
                                         f32 %345 = OpLoad %344 
                                        bool %346 = OpFOrdEqual %345 %248 
                                                      OpStore %343 %346 
                                        bool %347 = OpLoad %343 
                                                      OpSelectionMerge %351 None 
                                                      OpBranchConditional %347 %350 %353 
                                             %350 = OpLabel 
                                         f32 %352 = OpLoad %138 
                                                      OpStore %349 %352 
                                                      OpBranch %351 
                                             %353 = OpLabel 
                                Private f32* %354 = OpAccessChain %300 %163 
                                         f32 %355 = OpLoad %354 
                                                      OpStore %349 %355 
                                                      OpBranch %351 
                                             %351 = OpLabel 
                                         f32 %356 = OpLoad %349 
                                                      OpStore %138 %356 
                                Uniform f32* %358 = OpAccessChain %24 %357 
                                         f32 %359 = OpLoad %358 
                                Uniform f32* %361 = OpAccessChain %24 %360 
                                         f32 %362 = OpLoad %361 
                                         f32 %363 = OpFMul %359 %362 
                                                      OpStore %233 %363 
                                         f32 %364 = OpLoad %233 
                                         f32 %365 = OpLoad %138 
                                         f32 %366 = OpFMul %364 %365 
                                         f32 %367 = OpFAdd %366 %241 
                                                      OpStore %233 %367 
                                         f32 %368 = OpLoad %138 
                                         f32 %369 = OpLoad %233 
                                         f32 %370 = OpFDiv %368 %369 
                                Private f32* %371 = OpAccessChain %36 %163 
                                                      OpStore %371 %370 
                                Uniform f32* %373 = OpAccessChain %24 %372 
                                         f32 %374 = OpLoad %373 
                                Uniform f32* %375 = OpAccessChain %24 %360 
                                         f32 %376 = OpLoad %375 
                                         f32 %377 = OpFMul %374 %376 
                                                      OpStore %138 %377 
                                Private f32* %378 = OpAccessChain %36 %163 
                                         f32 %379 = OpLoad %378 
                                         f32 %380 = OpLoad %138 
                                         f32 %381 = OpFMul %379 %380 
                                                      OpStore %138 %381 
                                         f32 %382 = OpLoad %138 
                                         f32 %383 = OpExtInst %1 37 %382 %241 
                                                      OpStore %233 %383 
                                         f32 %384 = OpLoad %233 
                                         f32 %385 = OpExtInst %1 31 %384 
                                                      OpStore %233 %385 
                                  Input f32* %386 = OpAccessChain %122 %257 
                                         f32 %387 = OpLoad %386 
                                Uniform f32* %389 = OpAccessChain %24 %388 %257 
                                         f32 %390 = OpLoad %389 
                                         f32 %391 = OpFMul %387 %390 
                                Private f32* %392 = OpAccessChain %61 %257 
                                                      OpStore %392 %391 
                                       f32_4 %393 = OpLoad %61 
                                       f32_3 %394 = OpVectorShuffle %393 %393 3 3 3 
                              Uniform f32_4* %395 = OpAccessChain %24 %388 
                                       f32_4 %396 = OpLoad %395 
                                       f32_3 %397 = OpVectorShuffle %396 %396 0 1 2 
                                       f32_3 %398 = OpFMul %394 %397 
                                       f32_4 %399 = OpLoad %61 
                                       f32_4 %400 = OpVectorShuffle %399 %398 4 5 6 3 
                                                      OpStore %61 %400 
                                       f32_4 %401 = OpLoad %86 
                                       f32_4 %402 = OpFNegate %401 
                                       f32_4 %403 = OpLoad %61 
                                       f32_4 %404 = OpFAdd %402 %403 
                                                      OpStore %61 %404 
                                         f32 %406 = OpLoad %233 
                                       f32_4 %407 = OpCompositeConstruct %406 %406 %406 %406 
                                       f32_4 %408 = OpLoad %61 
                                       f32_4 %409 = OpFMul %407 %408 
                                       f32_4 %410 = OpLoad %86 
                                       f32_4 %411 = OpFAdd %409 %410 
                                                      OpStore %405 %411 
                              Uniform f32_4* %413 = OpAccessChain %24 %412 
                                       f32_4 %414 = OpLoad %413 
                                       f32_4 %417 = OpExtInst %1 40 %414 %416 
                                                      OpStore %61 %417 
                                       f32_4 %418 = OpLoad %61 
                                       f32_4 %421 = OpExtInst %1 37 %418 %420 
                                                      OpStore %61 %421 
                                       f32_2 %422 = OpLoad %9 
                                       f32_4 %423 = OpLoad %61 
                                       f32_2 %424 = OpVectorShuffle %423 %423 0 1 
                                       f32_2 %425 = OpFNegate %424 
                                       f32_2 %426 = OpFAdd %422 %425 
                                                      OpStore %300 %426 
                                       f32_2 %427 = OpLoad %9 
                                       f32_2 %430 = OpFMul %427 %429 
                                       f32_4 %431 = OpLoad %61 
                                       f32_2 %432 = OpVectorShuffle %431 %431 0 1 
                                       f32_2 %433 = OpFNegate %432 
                                       f32_2 %434 = OpFAdd %430 %433 
                                                      OpStore %9 %434 
                                       f32_4 %435 = OpLoad %61 
                                       f32_2 %436 = OpVectorShuffle %435 %435 2 3 
                                       f32_2 %437 = OpFNegate %436 
                                       f32_2 %438 = OpLoad %9 
                                       f32_2 %439 = OpFAdd %437 %438 
                                       f32_4 %440 = OpLoad vs_TEXCOORD2 
                                       f32_4 %441 = OpVectorShuffle %440 %439 4 5 2 3 
                                                      OpStore vs_TEXCOORD2 %441 
                                       f32_4 %442 = OpLoad %61 
                                       f32_2 %443 = OpVectorShuffle %442 %442 0 1 
                                       f32_2 %444 = OpFNegate %443 
                                       f32_4 %445 = OpLoad %61 
                                       f32_2 %446 = OpVectorShuffle %445 %445 2 3 
                                       f32_2 %447 = OpFAdd %444 %446 
                                                      OpStore %9 %447 
                                       f32_2 %449 = OpLoad %300 
                                       f32_2 %450 = OpLoad %9 
                                       f32_2 %451 = OpFDiv %449 %450 
                                       f32_4 %452 = OpLoad vs_TEXCOORD0 
                                       f32_4 %453 = OpVectorShuffle %452 %451 0 1 4 5 
                                                      OpStore vs_TEXCOORD0 %453 
                                       f32_2 %455 = OpLoad %454 
                                       f32_4 %456 = OpLoad vs_TEXCOORD0 
                                       f32_4 %457 = OpVectorShuffle %456 %455 4 5 2 3 
                                                      OpStore vs_TEXCOORD0 %457 
                                  Input f32* %459 = OpAccessChain %290 %114 
                                         f32 %460 = OpLoad %459 
                                        bool %461 = OpFOrdGreaterThanEqual %248 %460 
                                                      OpStore %458 %461 
                                        bool %462 = OpLoad %458 
                                         f32 %463 = OpSelect %462 %241 %248 
                                Private f32* %464 = OpAccessChain %9 %163 
                                                      OpStore %464 %463 
                                Uniform f32* %467 = OpAccessChain %24 %466 
                                         f32 %468 = OpLoad %467 
                                         f32 %469 = OpFNegate %468 
                                Uniform f32* %471 = OpAccessChain %24 %470 
                                         f32 %472 = OpLoad %471 
                                         f32 %473 = OpFAdd %469 %472 
                                                      OpStore %465 %473 
                                Private f32* %474 = OpAccessChain %9 %163 
                                         f32 %475 = OpLoad %474 
                                         f32 %476 = OpLoad %465 
                                         f32 %477 = OpFMul %475 %476 
                                Uniform f32* %478 = OpAccessChain %24 %466 
                                         f32 %479 = OpLoad %478 
                                         f32 %480 = OpFAdd %477 %479 
                                Private f32* %481 = OpAccessChain %9 %163 
                                                      OpStore %481 %480 
                                Private f32* %482 = OpAccessChain %9 %163 
                                         f32 %483 = OpLoad %482 
                                         f32 %484 = OpFMul %483 %273 
                                Uniform f32* %486 = OpAccessChain %24 %485 
                                         f32 %487 = OpLoad %486 
                                         f32 %488 = OpFAdd %484 %487 
                                Private f32* %489 = OpAccessChain %9 %163 
                                                      OpStore %489 %488 
                                Private f32* %490 = OpAccessChain %9 %163 
                                         f32 %491 = OpLoad %490 
                                Uniform f32* %492 = OpAccessChain %24 %360 
                                         f32 %493 = OpLoad %492 
                                         f32 %494 = OpFMul %491 %493 
                                Private f32* %495 = OpAccessChain %9 %163 
                                                      OpStore %495 %494 
                                Private f32* %496 = OpAccessChain %9 %163 
                                         f32 %497 = OpLoad %496 
                                         f32 %498 = OpFNegate %497 
                                         f32 %500 = OpFMul %498 %499 
                                         f32 %501 = OpFAdd %500 %499 
                                Private f32* %502 = OpAccessChain %9 %163 
                                                      OpStore %502 %501 
                                Private f32* %503 = OpAccessChain %9 %163 
                                         f32 %504 = OpLoad %503 
                                Private f32* %505 = OpAccessChain %36 %163 
                                         f32 %506 = OpLoad %505 
                                         f32 %507 = OpFMul %504 %506 
                                         f32 %509 = OpFAdd %507 %508 
                                Private f32* %510 = OpAccessChain %36 %257 
                                                      OpStore %510 %509 
                                       f32_4 %512 = OpLoad %36 
                                       f32_2 %513 = OpVectorShuffle %512 %512 0 3 
                                       f32_4 %514 = OpLoad vs_TEXCOORD1 
                                       f32_4 %515 = OpVectorShuffle %514 %513 4 1 2 5 
                                                      OpStore vs_TEXCOORD1 %515 
                                         f32 %516 = OpLoad %138 
                                         f32 %517 = OpFNegate %516 
                                         f32 %518 = OpFMul %517 %499 
                                Private f32* %519 = OpAccessChain %36 %257 
                                         f32 %520 = OpLoad %519 
                                         f32 %521 = OpFAdd %518 %520 
                                 Output f32* %522 = OpAccessChain vs_TEXCOORD1 %114 
                                                      OpStore %522 %521 
                                         f32 %523 = OpLoad %138 
                                         f32 %524 = OpFMul %523 %499 
                                Private f32* %525 = OpAccessChain %36 %257 
                                         f32 %526 = OpLoad %525 
                                         f32 %527 = OpFAdd %524 %526 
                                 Output f32* %528 = OpAccessChain vs_TEXCOORD1 %176 
                                                      OpStore %528 %527 
                                 Output f32* %529 = OpAccessChain %118 %45 %114 
                                         f32 %530 = OpLoad %529 
                                         f32 %531 = OpFNegate %530 
                                 Output f32* %532 = OpAccessChain %118 %45 %114 
                                                      OpStore %532 %531 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 110
; Schema: 0
                                             OpCapability Shader 
                                      %1 = OpExtInstImport "GLSL.std.450" 
                                             OpMemoryModel Logical GLSL450 
                                             OpEntryPoint Fragment %4 "main" %21 %30 %47 %91 %95 
                                             OpExecutionMode %4 OriginUpperLeft 
                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                             OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                             OpName vs_TEXCOORDn0 "vs_TEXCOORDn0" 
                                             OpDecorate %11 DescriptorSet 11 
                                             OpDecorate %11 Binding 11 
                                             OpDecorate %15 DescriptorSet 15 
                                             OpDecorate %15 Binding 15 
                                             OpDecorate vs_TEXCOORD0 Location 21 
                                             OpDecorate vs_TEXCOORD1 Location 30 
                                             OpDecorate %47 Location 47 
                                             OpMemberDecorate %77 0 Offset 77 
                                             OpDecorate %77 Block 
                                             OpDecorate %79 DescriptorSet 79 
                                             OpDecorate %79 Binding 79 
                                             OpDecorate %91 Location 91 
                                             OpDecorate vs_TEXCOORDn0 Location 95 
                                      %2 = OpTypeVoid 
                                      %3 = OpTypeFunction %2 
                                      %6 = OpTypeFloat 32 
                                      %7 = OpTypePointer Private %6 
                         Private f32* %8 = OpVariable Private 
                                      %9 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                     %10 = OpTypePointer UniformConstant %9 
UniformConstant read_only Texture2D* %11 = OpVariable UniformConstant 
                                     %13 = OpTypeSampler 
                                     %14 = OpTypePointer UniformConstant %13 
            UniformConstant sampler* %15 = OpVariable UniformConstant 
                                     %17 = OpTypeSampledImage %9 
                                     %19 = OpTypeVector %6 4 
                                     %20 = OpTypePointer Input %19 
               Input f32_4* vs_TEXCOORD0 = OpVariable Input 
                                     %22 = OpTypeVector %6 2 
                                     %26 = OpTypeInt 32 0 
                                 u32 %27 = OpConstant 3 
               Input f32_4* vs_TEXCOORD1 = OpVariable Input 
                                 u32 %31 = OpConstant 0 
                                     %32 = OpTypePointer Input %6 
                                 f32 %41 = OpConstant 3.674022E-40 
                                 f32 %42 = OpConstant 3.674022E-40 
                                     %44 = OpTypeVector %6 3 
                                     %45 = OpTypePointer Private %44 
                      Private f32_3* %46 = OpVariable Private 
                        Input f32_4* %47 = OpVariable Input 
                                 f32 %52 = OpConstant 3.674022E-40 
                                     %55 = OpTypeBool 
                                     %56 = OpTypePointer Private %55 
                       Private bool* %57 = OpVariable Private 
                                     %62 = OpTypeInt 32 1 
                                 i32 %63 = OpConstant 0 
                                 i32 %64 = OpConstant 1 
                                 i32 %66 = OpConstant -1 
                                     %77 = OpTypeStruct %19 
                                     %78 = OpTypePointer Uniform %77 
            Uniform struct {f32_4;}* %79 = OpVariable Uniform 
                                     %80 = OpTypePointer Uniform %19 
                                     %90 = OpTypePointer Output %19 
                       Output f32_4* %91 = OpVariable Output 
                                     %93 = OpTypePointer Output %6 
                Input f32* vs_TEXCOORDn0 = OpVariable Input 
                                 void %4 = OpFunction None %3 
                                      %5 = OpLabel 
                 read_only Texture2D %12 = OpLoad %11 
                             sampler %16 = OpLoad %15 
          read_only Texture2DSampled %18 = OpSampledImage %12 %16 
                               f32_4 %23 = OpLoad vs_TEXCOORD0 
                               f32_2 %24 = OpVectorShuffle %23 %23 0 1 
                               f32_4 %25 = OpImageSampleImplicitLod %18 %24 
                                 f32 %28 = OpCompositeExtract %25 3 
                                             OpStore %8 %28 
                                 f32 %29 = OpLoad %8 
                          Input f32* %33 = OpAccessChain vs_TEXCOORD1 %31 
                                 f32 %34 = OpLoad %33 
                                 f32 %35 = OpFMul %29 %34 
                          Input f32* %36 = OpAccessChain vs_TEXCOORD1 %27 
                                 f32 %37 = OpLoad %36 
                                 f32 %38 = OpFNegate %37 
                                 f32 %39 = OpFAdd %35 %38 
                                             OpStore %8 %39 
                                 f32 %40 = OpLoad %8 
                                 f32 %43 = OpExtInst %1 43 %40 %41 %42 
                                             OpStore %8 %43 
                          Input f32* %48 = OpAccessChain %47 %27 
                                 f32 %49 = OpLoad %48 
                                 f32 %50 = OpLoad %8 
                                 f32 %51 = OpFMul %49 %50 
                                 f32 %53 = OpFAdd %51 %52 
                        Private f32* %54 = OpAccessChain %46 %31 
                                             OpStore %54 %53 
                        Private f32* %58 = OpAccessChain %46 %31 
                                 f32 %59 = OpLoad %58 
                                bool %60 = OpFOrdLessThan %59 %41 
                                             OpStore %57 %60 
                                bool %61 = OpLoad %57 
                                 i32 %65 = OpSelect %61 %64 %63 
                                 i32 %67 = OpIMul %65 %66 
                                bool %68 = OpINotEqual %67 %63 
                                             OpSelectionMerge %70 None 
                                             OpBranchConditional %68 %69 %70 
                                     %69 = OpLabel 
                                             OpKill
                                     %70 = OpLabel 
                               f32_4 %72 = OpLoad %47 
                               f32_3 %73 = OpVectorShuffle %72 %72 0 1 2 
                                 f32 %74 = OpLoad %8 
                               f32_3 %75 = OpCompositeConstruct %74 %74 %74 
                               f32_3 %76 = OpFMul %73 %75 
                      Uniform f32_4* %81 = OpAccessChain %79 %63 
                               f32_4 %82 = OpLoad %81 
                               f32_3 %83 = OpVectorShuffle %82 %82 0 1 2 
                               f32_3 %84 = OpFNegate %83 
                               f32_3 %85 = OpFAdd %76 %84 
                                             OpStore %46 %85 
                                 f32 %86 = OpLoad %8 
                          Input f32* %87 = OpAccessChain %47 %27 
                                 f32 %88 = OpLoad %87 
                                 f32 %89 = OpFMul %86 %88 
                                             OpStore %8 %89 
                                 f32 %92 = OpLoad %8 
                         Output f32* %94 = OpAccessChain %91 %27 
                                             OpStore %94 %92 
                                 f32 %96 = OpLoad vs_TEXCOORDn0 
                                             OpStore %8 %96 
                                 f32 %97 = OpLoad %8 
                                 f32 %98 = OpExtInst %1 43 %97 %41 %42 
                                             OpStore %8 %98 
                                 f32 %99 = OpLoad %8 
                              f32_3 %100 = OpCompositeConstruct %99 %99 %99 
                              f32_3 %101 = OpLoad %46 
                              f32_3 %102 = OpFMul %100 %101 
                     Uniform f32_4* %103 = OpAccessChain %79 %63 
                              f32_4 %104 = OpLoad %103 
                              f32_3 %105 = OpVectorShuffle %104 %104 0 1 2 
                              f32_3 %106 = OpFAdd %102 %105 
                              f32_4 %107 = OpLoad %91 
                              f32_4 %108 = OpVectorShuffle %107 %106 4 5 6 3 
                                             OpStore %91 %108 
                                             OpReturn
                                             OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "FOG_LINEAR" "OUTLINE_ON" "UNITY_UI_ALPHACLIP" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "FOG_LINEAR" "OUTLINE_ON" "UNITY_UI_ALPHACLIP" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	vec4 _FaceColor;
uniform 	float _FaceDilate;
uniform 	float _OutlineSoftness;
uniform 	vec4 _OutlineColor;
uniform 	float _OutlineWidth;
uniform 	float _WeightNormal;
uniform 	float _WeightBold;
uniform 	float _ScaleRatioA;
uniform 	float _VertexOffsetX;
uniform 	float _VertexOffsetY;
uniform 	vec4 _ClipRect;
uniform 	float _MaskSoftnessX;
uniform 	float _MaskSoftnessY;
uniform 	float _GradientScale;
uniform 	float _ScaleX;
uniform 	float _ScaleY;
uniform 	float _PerspectiveFilter;
uniform 	float _Sharpness;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_COLOR0;
in  vec2 in_TEXCOORD0;
in  vec2 in_TEXCOORD1;
out vec4 vs_COLOR0;
out vec4 vs_COLOR1;
out vec4 vs_TEXCOORD0;
out vec4 vs_TEXCOORD1;
out vec4 vs_TEXCOORD2;
out float vs_TEXCOORDn0;
vec2 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
vec3 u_xlat5;
float u_xlat6;
vec2 u_xlat7;
float u_xlat12;
float u_xlat13;
float u_xlat18;
bool u_xlatb18;
void main()
{
    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
    gl_Position = u_xlat2;
    u_xlat3 = in_COLOR0 * _FaceColor;
    u_xlat3.xyz = u_xlat3.www * u_xlat3.xyz;
    vs_COLOR0 = u_xlat3;
    u_xlat4.w = in_COLOR0.w * _OutlineColor.w;
    u_xlat4.xyz = u_xlat4.www * _OutlineColor.xyz;
    u_xlat4 = (-u_xlat3) + u_xlat4;
    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
    u_xlat5.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat5.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat5.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat5.xyz = vec3(u_xlat12) * u_xlat5.xyz;
    u_xlat12 = dot(u_xlat5.xyz, u_xlat1.xyz);
    u_xlat1.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;
    u_xlat1.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat1.xy;
    u_xlat1.xy = abs(u_xlat1.xy) * vec2(_ScaleX, _ScaleY);
    u_xlat1.xy = u_xlat2.ww / u_xlat1.xy;
    vs_TEXCOORDn0 = u_xlat2.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat18 = dot(u_xlat1.xy, u_xlat1.xy);
    u_xlat1.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) * vec2(0.25, 0.25) + u_xlat1.xy;
    vs_TEXCOORD2.zw = vec2(0.25, 0.25) / u_xlat1.xy;
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.x = abs(in_TEXCOORD1.y) * _GradientScale;
    u_xlat7.x = _Sharpness + 1.0;
    u_xlat1.x = u_xlat7.x * u_xlat1.x;
    u_xlat7.x = u_xlat18 * u_xlat1.x;
    u_xlat13 = (-_PerspectiveFilter) + 1.0;
    u_xlat13 = u_xlat13 * abs(u_xlat7.x);
    u_xlat18 = u_xlat18 * u_xlat1.x + (-u_xlat13);
    u_xlat12 = abs(u_xlat12) * u_xlat18 + u_xlat13;
    u_xlatb18 = hlslcc_mtx4x4glstate_matrix_projection[3].w==0.0;
    u_xlat12 = (u_xlatb18) ? u_xlat12 : u_xlat7.x;
    u_xlat18 = _OutlineSoftness * _ScaleRatioA;
    u_xlat18 = u_xlat18 * u_xlat12 + 1.0;
    u_xlat1.x = u_xlat12 / u_xlat18;
    u_xlat12 = _OutlineWidth * _ScaleRatioA;
    u_xlat12 = u_xlat12 * 0.5;
    u_xlat18 = u_xlat1.x * u_xlat12;
    u_xlat18 = u_xlat18 + u_xlat18;
    u_xlat18 = min(u_xlat18, 1.0);
    u_xlat18 = sqrt(u_xlat18);
    vs_COLOR1 = vec4(u_xlat18) * u_xlat4 + u_xlat3;
    u_xlat2 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));
    u_xlat2 = min(u_xlat2, vec4(2e+10, 2e+10, 2e+10, 2e+10));
    u_xlat7.xy = u_xlat0.xy + (-u_xlat2.xy);
    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + (-u_xlat2.xy);
    vs_TEXCOORD2.xy = (-u_xlat2.zw) + u_xlat0.xy;
    u_xlat0.xy = (-u_xlat2.xy) + u_xlat2.zw;
    vs_TEXCOORD0.zw = u_xlat7.xy / u_xlat0.xy;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlatb0 = 0.0>=in_TEXCOORD1.y;
    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);
    u_xlat6 = (-_WeightNormal) + _WeightBold;
    u_xlat0.x = u_xlat0.x * u_xlat6 + _WeightNormal;
    u_xlat0.x = u_xlat0.x * 0.25 + _FaceDilate;
    u_xlat0.x = u_xlat0.x * _ScaleRatioA;
    u_xlat0.x = (-u_xlat0.x) * 0.5 + 0.5;
    u_xlat1.w = u_xlat0.x * u_xlat1.x + -0.5;
    vs_TEXCOORD1.y = (-u_xlat12) * u_xlat1.x + u_xlat1.w;
    vs_TEXCOORD1.z = u_xlat12 * u_xlat1.x + u_xlat1.w;
    vs_TEXCOORD1.xw = u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 unity_FogColor;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
in  vec4 vs_COLOR0;
in  vec4 vs_COLOR1;
in  vec4 vs_TEXCOORD0;
in  vec4 vs_TEXCOORD1;
in  float vs_TEXCOORDn0;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
bool u_xlatb1;
float u_xlat6;
void main()
{
    u_xlat0 = vs_COLOR0 + (-vs_COLOR1);
    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1.xy = u_xlat1.ww * vs_TEXCOORD1.xx + (-vs_TEXCOORD1.zy);
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
    u_xlat0 = u_xlat1.xxxx * u_xlat0 + vs_COLOR1;
    u_xlat1.x = u_xlat0.w * u_xlat1.y + -0.00100000005;
    u_xlatb1 = u_xlat1.x<0.0;
    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.yyy + (-unity_FogColor.xyz);
    u_xlat6 = u_xlat1.y * u_xlat0.w;
    SV_Target0.w = u_xlat6;
    u_xlat6 = vs_TEXCOORDn0;
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
    SV_Target0.xyz = vec3(u_xlat6) * u_xlat0.xyz + unity_FogColor.xyz;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "FOG_LINEAR" "OUTLINE_ON" "UNITY_UI_ALPHACLIP" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 534
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %12 %118 %122 %135 %156 %251 %281 %290 %405 %448 %454 %511 
                                                      OpName vs_TEXCOORDn0 "vs_TEXCOORDn0" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpDecorate %12 Location 12 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpDecorate %19 ArrayStride 19 
                                                      OpDecorate %20 ArrayStride 20 
                                                      OpDecorate %21 ArrayStride 21 
                                                      OpMemberDecorate %22 0 Offset 22 
                                                      OpMemberDecorate %22 1 Offset 22 
                                                      OpMemberDecorate %22 2 Offset 22 
                                                      OpMemberDecorate %22 3 Offset 22 
                                                      OpMemberDecorate %22 4 Offset 22 
                                                      OpMemberDecorate %22 5 Offset 22 
                                                      OpMemberDecorate %22 6 Offset 22 
                                                      OpMemberDecorate %22 7 Offset 22 
                                                      OpMemberDecorate %22 8 Offset 22 
                                                      OpMemberDecorate %22 9 Offset 22 
                                                      OpMemberDecorate %22 10 Offset 22 
                                                      OpMemberDecorate %22 11 Offset 22 
                                                      OpMemberDecorate %22 12 Offset 22 
                                                      OpMemberDecorate %22 13 Offset 22 
                                                      OpMemberDecorate %22 14 Offset 22 
                                                      OpMemberDecorate %22 15 Offset 22 
                                                      OpMemberDecorate %22 16 Offset 22 
                                                      OpMemberDecorate %22 17 Offset 22 
                                                      OpMemberDecorate %22 18 Offset 22 
                                                      OpMemberDecorate %22 19 Offset 22 
                                                      OpMemberDecorate %22 20 Offset 22 
                                                      OpMemberDecorate %22 21 Offset 22 
                                                      OpMemberDecorate %22 22 Offset 22 
                                                      OpMemberDecorate %22 23 Offset 22 
                                                      OpMemberDecorate %22 24 Offset 22 
                                                      OpMemberDecorate %22 25 Offset 22 
                                                      OpDecorate %22 Block 
                                                      OpDecorate %24 DescriptorSet 24 
                                                      OpDecorate %24 Binding 24 
                                                      OpMemberDecorate %116 0 BuiltIn 116 
                                                      OpMemberDecorate %116 1 BuiltIn 116 
                                                      OpMemberDecorate %116 2 BuiltIn 116 
                                                      OpDecorate %116 Block 
                                                      OpDecorate %122 Location 122 
                                                      OpDecorate %135 Location 135 
                                                      OpDecorate %156 Location 156 
                                                      OpDecorate vs_TEXCOORDn0 Location 251 
                                                      OpDecorate vs_TEXCOORD2 Location 281 
                                                      OpDecorate %290 Location 290 
                                                      OpDecorate %405 Location 405 
                                                      OpDecorate vs_TEXCOORD0 Location 448 
                                                      OpDecorate %454 Location 454 
                                                      OpDecorate vs_TEXCOORD1 Location 511 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 2 
                                               %8 = OpTypePointer Private %7 
                                Private f32_2* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 4 
                                              %11 = OpTypePointer Input %10 
                                 Input f32_4* %12 = OpVariable Input 
                                              %15 = OpTypeVector %6 3 
                                              %16 = OpTypeInt 32 0 
                                          u32 %17 = OpConstant 4 
                                              %18 = OpTypeArray %10 %17 
                                              %19 = OpTypeArray %10 %17 
                                              %20 = OpTypeArray %10 %17 
                                              %21 = OpTypeArray %10 %17 
                                              %22 = OpTypeStruct %15 %10 %10 %18 %19 %20 %21 %10 %10 %6 %6 %10 %6 %6 %6 %6 %6 %6 %10 %6 %6 %6 %6 %6 %6 %6 
                                              %23 = OpTypePointer Uniform %22 
Uniform struct {f32_3; f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4[4]; f32_4; f32_4; f32; f32; f32_4; f32; f32; f32; f32; f32; f32; f32_4; f32; f32; f32; f32; f32; f32; f32;}* %24 = OpVariable Uniform 
                                              %25 = OpTypeInt 32 1 
                                          i32 %26 = OpConstant 16 
                                              %27 = OpTypePointer Uniform %6 
                                          i32 %30 = OpConstant 17 
                                              %35 = OpTypePointer Private %10 
                               Private f32_4* %36 = OpVariable Private 
                                          i32 %39 = OpConstant 3 
                                          i32 %40 = OpConstant 1 
                                              %41 = OpTypePointer Uniform %10 
                                          i32 %45 = OpConstant 0 
                                          i32 %53 = OpConstant 2 
                               Private f32_4* %61 = OpVariable Private 
                                              %80 = OpTypePointer Uniform %15 
                               Private f32_4* %86 = OpVariable Private 
                                          i32 %89 = OpConstant 6 
                                         u32 %114 = OpConstant 1 
                                             %115 = OpTypeArray %6 %114 
                                             %116 = OpTypeStruct %10 %6 %115 
                                             %117 = OpTypePointer Output %116 
        Output struct {f32_4; f32; f32[1];}* %118 = OpVariable Output 
                                             %120 = OpTypePointer Output %10 
                                Input f32_4* %122 = OpVariable Input 
                                         i32 %124 = OpConstant 8 
                               Output f32_4* %135 = OpVariable Output 
                                             %137 = OpTypePointer Private %6 
                                Private f32* %138 = OpVariable Private 
                                             %153 = OpTypePointer Private %15 
                              Private f32_3* %154 = OpVariable Private 
                                             %155 = OpTypePointer Input %15 
                                Input f32_3* %156 = OpVariable Input 
                                         i32 %158 = OpConstant 4 
                                         u32 %163 = OpConstant 0 
                                         u32 %176 = OpConstant 2 
                                         i32 %194 = OpConstant 5 
                                         i32 %216 = OpConstant 22 
                                         i32 %219 = OpConstant 23 
                                Private f32* %233 = OpVariable Private 
                                         f32 %241 = OpConstant 3.674022E-40 
                                         f32 %248 = OpConstant 3.674022E-40 
                                             %250 = OpTypePointer Output %6 
                        Output f32* vs_TEXCOORDn0 = OpVariable Output 
                                         i32 %253 = OpConstant 7 
                                         u32 %257 = OpConstant 3 
                                         i32 %266 = OpConstant 19 
                                         i32 %269 = OpConstant 20 
                                         f32 %273 = OpConstant 3.674022E-40 
                                       f32_2 %274 = OpConstantComposite %273 %273 
                       Output f32_4* vs_TEXCOORD2 = OpVariable Output 
                                             %289 = OpTypePointer Input %7 
                                Input f32_2* %290 = OpVariable Input 
                                             %291 = OpTypePointer Input %6 
                                         i32 %295 = OpConstant 21 
                              Private f32_2* %300 = OpVariable Private 
                                         i32 %301 = OpConstant 25 
                                Private f32* %317 = OpVariable Private 
                                         i32 %318 = OpConstant 24 
                                             %341 = OpTypeBool 
                                             %342 = OpTypePointer Private %341 
                               Private bool* %343 = OpVariable Private 
                                             %348 = OpTypePointer Function %6 
                                         i32 %357 = OpConstant 10 
                                         i32 %360 = OpConstant 15 
                                         i32 %372 = OpConstant 12 
                                         i32 %388 = OpConstant 11 
                               Output f32_4* %405 = OpVariable Output 
                                         i32 %412 = OpConstant 18 
                                         f32 %415 = OpConstant 3.674022E-40 
                                       f32_4 %416 = OpConstantComposite %415 %415 %415 %415 
                                         f32 %419 = OpConstant 3.674022E-40 
                                       f32_4 %420 = OpConstantComposite %419 %419 %419 %419 
                                         f32 %428 = OpConstant 3.674022E-40 
                                       f32_2 %429 = OpConstantComposite %428 %428 
                       Output f32_4* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_2* %454 = OpVariable Input 
                               Private bool* %458 = OpVariable Private 
                                Private f32* %465 = OpVariable Private 
                                         i32 %466 = OpConstant 13 
                                         i32 %470 = OpConstant 14 
                                         i32 %485 = OpConstant 9 
                                         f32 %499 = OpConstant 3.674022E-40 
                                         f32 %508 = OpConstant 3.674022E-40 
                       Output f32_4* vs_TEXCOORD1 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                               Function f32* %349 = OpVariable Function 
                                        f32_4 %13 = OpLoad %12 
                                        f32_2 %14 = OpVectorShuffle %13 %13 0 1 
                                 Uniform f32* %28 = OpAccessChain %24 %26 
                                          f32 %29 = OpLoad %28 
                                 Uniform f32* %31 = OpAccessChain %24 %30 
                                          f32 %32 = OpLoad %31 
                                        f32_2 %33 = OpCompositeConstruct %29 %32 
                                        f32_2 %34 = OpFAdd %14 %33 
                                                      OpStore %9 %34 
                                        f32_2 %37 = OpLoad %9 
                                        f32_4 %38 = OpVectorShuffle %37 %37 1 1 1 1 
                               Uniform f32_4* %42 = OpAccessChain %24 %39 %40 
                                        f32_4 %43 = OpLoad %42 
                                        f32_4 %44 = OpFMul %38 %43 
                                                      OpStore %36 %44 
                               Uniform f32_4* %46 = OpAccessChain %24 %39 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_2 %48 = OpLoad %9 
                                        f32_4 %49 = OpVectorShuffle %48 %48 0 0 0 0 
                                        f32_4 %50 = OpFMul %47 %49 
                                        f32_4 %51 = OpLoad %36 
                                        f32_4 %52 = OpFAdd %50 %51 
                                                      OpStore %36 %52 
                               Uniform f32_4* %54 = OpAccessChain %24 %39 %53 
                                        f32_4 %55 = OpLoad %54 
                                        f32_4 %56 = OpLoad %12 
                                        f32_4 %57 = OpVectorShuffle %56 %56 2 2 2 2 
                                        f32_4 %58 = OpFMul %55 %57 
                                        f32_4 %59 = OpLoad %36 
                                        f32_4 %60 = OpFAdd %58 %59 
                                                      OpStore %36 %60 
                                        f32_4 %62 = OpLoad %36 
                               Uniform f32_4* %63 = OpAccessChain %24 %39 %39 
                                        f32_4 %64 = OpLoad %63 
                                        f32_4 %65 = OpFAdd %62 %64 
                                                      OpStore %61 %65 
                               Uniform f32_4* %66 = OpAccessChain %24 %39 %39 
                                        f32_4 %67 = OpLoad %66 
                                        f32_3 %68 = OpVectorShuffle %67 %67 0 1 2 
                                        f32_4 %69 = OpLoad %12 
                                        f32_3 %70 = OpVectorShuffle %69 %69 3 3 3 
                                        f32_3 %71 = OpFMul %68 %70 
                                        f32_4 %72 = OpLoad %36 
                                        f32_3 %73 = OpVectorShuffle %72 %72 0 1 2 
                                        f32_3 %74 = OpFAdd %71 %73 
                                        f32_4 %75 = OpLoad %36 
                                        f32_4 %76 = OpVectorShuffle %75 %74 4 5 6 3 
                                                      OpStore %36 %76 
                                        f32_4 %77 = OpLoad %36 
                                        f32_3 %78 = OpVectorShuffle %77 %77 0 1 2 
                                        f32_3 %79 = OpFNegate %78 
                               Uniform f32_3* %81 = OpAccessChain %24 %45 
                                        f32_3 %82 = OpLoad %81 
                                        f32_3 %83 = OpFAdd %79 %82 
                                        f32_4 %84 = OpLoad %36 
                                        f32_4 %85 = OpVectorShuffle %84 %83 4 5 6 3 
                                                      OpStore %36 %85 
                                        f32_4 %87 = OpLoad %61 
                                        f32_4 %88 = OpVectorShuffle %87 %87 1 1 1 1 
                               Uniform f32_4* %90 = OpAccessChain %24 %89 %40 
                                        f32_4 %91 = OpLoad %90 
                                        f32_4 %92 = OpFMul %88 %91 
                                                      OpStore %86 %92 
                               Uniform f32_4* %93 = OpAccessChain %24 %89 %45 
                                        f32_4 %94 = OpLoad %93 
                                        f32_4 %95 = OpLoad %61 
                                        f32_4 %96 = OpVectorShuffle %95 %95 0 0 0 0 
                                        f32_4 %97 = OpFMul %94 %96 
                                        f32_4 %98 = OpLoad %86 
                                        f32_4 %99 = OpFAdd %97 %98 
                                                      OpStore %86 %99 
                              Uniform f32_4* %100 = OpAccessChain %24 %89 %53 
                                       f32_4 %101 = OpLoad %100 
                                       f32_4 %102 = OpLoad %61 
                                       f32_4 %103 = OpVectorShuffle %102 %102 2 2 2 2 
                                       f32_4 %104 = OpFMul %101 %103 
                                       f32_4 %105 = OpLoad %86 
                                       f32_4 %106 = OpFAdd %104 %105 
                                                      OpStore %86 %106 
                              Uniform f32_4* %107 = OpAccessChain %24 %89 %39 
                                       f32_4 %108 = OpLoad %107 
                                       f32_4 %109 = OpLoad %61 
                                       f32_4 %110 = OpVectorShuffle %109 %109 3 3 3 3 
                                       f32_4 %111 = OpFMul %108 %110 
                                       f32_4 %112 = OpLoad %86 
                                       f32_4 %113 = OpFAdd %111 %112 
                                                      OpStore %61 %113 
                                       f32_4 %119 = OpLoad %61 
                               Output f32_4* %121 = OpAccessChain %118 %45 
                                                      OpStore %121 %119 
                                       f32_4 %123 = OpLoad %122 
                              Uniform f32_4* %125 = OpAccessChain %24 %124 
                                       f32_4 %126 = OpLoad %125 
                                       f32_4 %127 = OpFMul %123 %126 
                                                      OpStore %86 %127 
                                       f32_4 %128 = OpLoad %86 
                                       f32_3 %129 = OpVectorShuffle %128 %128 3 3 3 
                                       f32_4 %130 = OpLoad %86 
                                       f32_3 %131 = OpVectorShuffle %130 %130 0 1 2 
                                       f32_3 %132 = OpFMul %129 %131 
                                       f32_4 %133 = OpLoad %86 
                                       f32_4 %134 = OpVectorShuffle %133 %132 4 5 6 3 
                                                      OpStore %86 %134 
                                       f32_4 %136 = OpLoad %86 
                                                      OpStore %135 %136 
                                       f32_4 %139 = OpLoad %36 
                                       f32_3 %140 = OpVectorShuffle %139 %139 0 1 2 
                                       f32_4 %141 = OpLoad %36 
                                       f32_3 %142 = OpVectorShuffle %141 %141 0 1 2 
                                         f32 %143 = OpDot %140 %142 
                                                      OpStore %138 %143 
                                         f32 %144 = OpLoad %138 
                                         f32 %145 = OpExtInst %1 32 %144 
                                                      OpStore %138 %145 
                                         f32 %146 = OpLoad %138 
                                       f32_3 %147 = OpCompositeConstruct %146 %146 %146 
                                       f32_4 %148 = OpLoad %36 
                                       f32_3 %149 = OpVectorShuffle %148 %148 0 1 2 
                                       f32_3 %150 = OpFMul %147 %149 
                                       f32_4 %151 = OpLoad %36 
                                       f32_4 %152 = OpVectorShuffle %151 %150 4 5 6 3 
                                                      OpStore %36 %152 
                                       f32_3 %157 = OpLoad %156 
                              Uniform f32_4* %159 = OpAccessChain %24 %158 %45 
                                       f32_4 %160 = OpLoad %159 
                                       f32_3 %161 = OpVectorShuffle %160 %160 0 1 2 
                                         f32 %162 = OpDot %157 %161 
                                Private f32* %164 = OpAccessChain %154 %163 
                                                      OpStore %164 %162 
                                       f32_3 %165 = OpLoad %156 
                              Uniform f32_4* %166 = OpAccessChain %24 %158 %40 
                                       f32_4 %167 = OpLoad %166 
                                       f32_3 %168 = OpVectorShuffle %167 %167 0 1 2 
                                         f32 %169 = OpDot %165 %168 
                                Private f32* %170 = OpAccessChain %154 %114 
                                                      OpStore %170 %169 
                                       f32_3 %171 = OpLoad %156 
                              Uniform f32_4* %172 = OpAccessChain %24 %158 %53 
                                       f32_4 %173 = OpLoad %172 
                                       f32_3 %174 = OpVectorShuffle %173 %173 0 1 2 
                                         f32 %175 = OpDot %171 %174 
                                Private f32* %177 = OpAccessChain %154 %176 
                                                      OpStore %177 %175 
                                       f32_3 %178 = OpLoad %154 
                                       f32_3 %179 = OpLoad %154 
                                         f32 %180 = OpDot %178 %179 
                                                      OpStore %138 %180 
                                         f32 %181 = OpLoad %138 
                                         f32 %182 = OpExtInst %1 32 %181 
                                                      OpStore %138 %182 
                                         f32 %183 = OpLoad %138 
                                       f32_3 %184 = OpCompositeConstruct %183 %183 %183 
                                       f32_3 %185 = OpLoad %154 
                                       f32_3 %186 = OpFMul %184 %185 
                                                      OpStore %154 %186 
                                       f32_3 %187 = OpLoad %154 
                                       f32_4 %188 = OpLoad %36 
                                       f32_3 %189 = OpVectorShuffle %188 %188 0 1 2 
                                         f32 %190 = OpDot %187 %189 
                                                      OpStore %138 %190 
                              Uniform f32_4* %191 = OpAccessChain %24 %53 
                                       f32_4 %192 = OpLoad %191 
                                       f32_2 %193 = OpVectorShuffle %192 %192 1 1 
                              Uniform f32_4* %195 = OpAccessChain %24 %194 %40 
                                       f32_4 %196 = OpLoad %195 
                                       f32_2 %197 = OpVectorShuffle %196 %196 0 1 
                                       f32_2 %198 = OpFMul %193 %197 
                                       f32_4 %199 = OpLoad %36 
                                       f32_4 %200 = OpVectorShuffle %199 %198 4 5 2 3 
                                                      OpStore %36 %200 
                              Uniform f32_4* %201 = OpAccessChain %24 %194 %45 
                                       f32_4 %202 = OpLoad %201 
                                       f32_2 %203 = OpVectorShuffle %202 %202 0 1 
                              Uniform f32_4* %204 = OpAccessChain %24 %53 
                                       f32_4 %205 = OpLoad %204 
                                       f32_2 %206 = OpVectorShuffle %205 %205 0 0 
                                       f32_2 %207 = OpFMul %203 %206 
                                       f32_4 %208 = OpLoad %36 
                                       f32_2 %209 = OpVectorShuffle %208 %208 0 1 
                                       f32_2 %210 = OpFAdd %207 %209 
                                       f32_4 %211 = OpLoad %36 
                                       f32_4 %212 = OpVectorShuffle %211 %210 4 5 2 3 
                                                      OpStore %36 %212 
                                       f32_4 %213 = OpLoad %36 
                                       f32_2 %214 = OpVectorShuffle %213 %213 0 1 
                                       f32_2 %215 = OpExtInst %1 4 %214 
                                Uniform f32* %217 = OpAccessChain %24 %216 
                                         f32 %218 = OpLoad %217 
                                Uniform f32* %220 = OpAccessChain %24 %219 
                                         f32 %221 = OpLoad %220 
                                       f32_2 %222 = OpCompositeConstruct %218 %221 
                                       f32_2 %223 = OpFMul %215 %222 
                                       f32_4 %224 = OpLoad %36 
                                       f32_4 %225 = OpVectorShuffle %224 %223 4 5 2 3 
                                                      OpStore %36 %225 
                                       f32_4 %226 = OpLoad %61 
                                       f32_2 %227 = OpVectorShuffle %226 %226 3 3 
                                       f32_4 %228 = OpLoad %36 
                                       f32_2 %229 = OpVectorShuffle %228 %228 0 1 
                                       f32_2 %230 = OpFDiv %227 %229 
                                       f32_4 %231 = OpLoad %36 
                                       f32_4 %232 = OpVectorShuffle %231 %230 4 5 2 3 
                                                      OpStore %36 %232 
                                Private f32* %234 = OpAccessChain %61 %176 
                                         f32 %235 = OpLoad %234 
                                Uniform f32* %236 = OpAccessChain %24 %40 %114 
                                         f32 %237 = OpLoad %236 
                                         f32 %238 = OpFDiv %235 %237 
                                                      OpStore %233 %238 
                                         f32 %239 = OpLoad %233 
                                         f32 %240 = OpFNegate %239 
                                         f32 %242 = OpFAdd %240 %241 
                                                      OpStore %233 %242 
                                         f32 %243 = OpLoad %233 
                                Uniform f32* %244 = OpAccessChain %24 %40 %176 
                                         f32 %245 = OpLoad %244 
                                         f32 %246 = OpFMul %243 %245 
                                                      OpStore %233 %246 
                                         f32 %247 = OpLoad %233 
                                         f32 %249 = OpExtInst %1 40 %247 %248 
                                                      OpStore %233 %249 
                                         f32 %252 = OpLoad %233 
                                Uniform f32* %254 = OpAccessChain %24 %253 %176 
                                         f32 %255 = OpLoad %254 
                                         f32 %256 = OpFMul %252 %255 
                                Uniform f32* %258 = OpAccessChain %24 %253 %257 
                                         f32 %259 = OpLoad %258 
                                         f32 %260 = OpFAdd %256 %259 
                                                      OpStore vs_TEXCOORDn0 %260 
                                       f32_4 %261 = OpLoad %36 
                                       f32_2 %262 = OpVectorShuffle %261 %261 0 1 
                                       f32_4 %263 = OpLoad %36 
                                       f32_2 %264 = OpVectorShuffle %263 %263 0 1 
                                         f32 %265 = OpDot %262 %264 
                                                      OpStore %233 %265 
                                Uniform f32* %267 = OpAccessChain %24 %266 
                                         f32 %268 = OpLoad %267 
                                Uniform f32* %270 = OpAccessChain %24 %269 
                                         f32 %271 = OpLoad %270 
                                       f32_2 %272 = OpCompositeConstruct %268 %271 
                                       f32_2 %275 = OpFMul %272 %274 
                                       f32_4 %276 = OpLoad %36 
                                       f32_2 %277 = OpVectorShuffle %276 %276 0 1 
                                       f32_2 %278 = OpFAdd %275 %277 
                                       f32_4 %279 = OpLoad %36 
                                       f32_4 %280 = OpVectorShuffle %279 %278 4 5 2 3 
                                                      OpStore %36 %280 
                                       f32_4 %282 = OpLoad %36 
                                       f32_2 %283 = OpVectorShuffle %282 %282 0 1 
                                       f32_2 %284 = OpFDiv %274 %283 
                                       f32_4 %285 = OpLoad vs_TEXCOORD2 
                                       f32_4 %286 = OpVectorShuffle %285 %284 0 1 4 5 
                                                      OpStore vs_TEXCOORD2 %286 
                                         f32 %287 = OpLoad %233 
                                         f32 %288 = OpExtInst %1 32 %287 
                                                      OpStore %233 %288 
                                  Input f32* %292 = OpAccessChain %290 %114 
                                         f32 %293 = OpLoad %292 
                                         f32 %294 = OpExtInst %1 4 %293 
                                Uniform f32* %296 = OpAccessChain %24 %295 
                                         f32 %297 = OpLoad %296 
                                         f32 %298 = OpFMul %294 %297 
                                Private f32* %299 = OpAccessChain %36 %163 
                                                      OpStore %299 %298 
                                Uniform f32* %302 = OpAccessChain %24 %301 
                                         f32 %303 = OpLoad %302 
                                         f32 %304 = OpFAdd %303 %241 
                                Private f32* %305 = OpAccessChain %300 %163 
                                                      OpStore %305 %304 
                                Private f32* %306 = OpAccessChain %300 %163 
                                         f32 %307 = OpLoad %306 
                                Private f32* %308 = OpAccessChain %36 %163 
                                         f32 %309 = OpLoad %308 
                                         f32 %310 = OpFMul %307 %309 
                                Private f32* %311 = OpAccessChain %36 %163 
                                                      OpStore %311 %310 
                                         f32 %312 = OpLoad %233 
                                Private f32* %313 = OpAccessChain %36 %163 
                                         f32 %314 = OpLoad %313 
                                         f32 %315 = OpFMul %312 %314 
                                Private f32* %316 = OpAccessChain %300 %163 
                                                      OpStore %316 %315 
                                Uniform f32* %319 = OpAccessChain %24 %318 
                                         f32 %320 = OpLoad %319 
                                         f32 %321 = OpFNegate %320 
                                         f32 %322 = OpFAdd %321 %241 
                                                      OpStore %317 %322 
                                         f32 %323 = OpLoad %317 
                                Private f32* %324 = OpAccessChain %300 %163 
                                         f32 %325 = OpLoad %324 
                                         f32 %326 = OpExtInst %1 4 %325 
                                         f32 %327 = OpFMul %323 %326 
                                                      OpStore %317 %327 
                                         f32 %328 = OpLoad %233 
                                Private f32* %329 = OpAccessChain %36 %163 
                                         f32 %330 = OpLoad %329 
                                         f32 %331 = OpFMul %328 %330 
                                         f32 %332 = OpLoad %317 
                                         f32 %333 = OpFNegate %332 
                                         f32 %334 = OpFAdd %331 %333 
                                                      OpStore %233 %334 
                                         f32 %335 = OpLoad %138 
                                         f32 %336 = OpExtInst %1 4 %335 
                                         f32 %337 = OpLoad %233 
                                         f32 %338 = OpFMul %336 %337 
                                         f32 %339 = OpLoad %317 
                                         f32 %340 = OpFAdd %338 %339 
                                                      OpStore %138 %340 
                                Uniform f32* %344 = OpAccessChain %24 %194 %39 %257 
                                         f32 %345 = OpLoad %344 
                                        bool %346 = OpFOrdEqual %345 %248 
                                                      OpStore %343 %346 
                                        bool %347 = OpLoad %343 
                                                      OpSelectionMerge %351 None 
                                                      OpBranchConditional %347 %350 %353 
                                             %350 = OpLabel 
                                         f32 %352 = OpLoad %138 
                                                      OpStore %349 %352 
                                                      OpBranch %351 
                                             %353 = OpLabel 
                                Private f32* %354 = OpAccessChain %300 %163 
                                         f32 %355 = OpLoad %354 
                                                      OpStore %349 %355 
                                                      OpBranch %351 
                                             %351 = OpLabel 
                                         f32 %356 = OpLoad %349 
                                                      OpStore %138 %356 
                                Uniform f32* %358 = OpAccessChain %24 %357 
                                         f32 %359 = OpLoad %358 
                                Uniform f32* %361 = OpAccessChain %24 %360 
                                         f32 %362 = OpLoad %361 
                                         f32 %363 = OpFMul %359 %362 
                                                      OpStore %233 %363 
                                         f32 %364 = OpLoad %233 
                                         f32 %365 = OpLoad %138 
                                         f32 %366 = OpFMul %364 %365 
                                         f32 %367 = OpFAdd %366 %241 
                                                      OpStore %233 %367 
                                         f32 %368 = OpLoad %138 
                                         f32 %369 = OpLoad %233 
                                         f32 %370 = OpFDiv %368 %369 
                                Private f32* %371 = OpAccessChain %36 %163 
                                                      OpStore %371 %370 
                                Uniform f32* %373 = OpAccessChain %24 %372 
                                         f32 %374 = OpLoad %373 
                                Uniform f32* %375 = OpAccessChain %24 %360 
                                         f32 %376 = OpLoad %375 
                                         f32 %377 = OpFMul %374 %376 
                                                      OpStore %138 %377 
                                Private f32* %378 = OpAccessChain %36 %163 
                                         f32 %379 = OpLoad %378 
                                         f32 %380 = OpLoad %138 
                                         f32 %381 = OpFMul %379 %380 
                                                      OpStore %138 %381 
                                         f32 %382 = OpLoad %138 
                                         f32 %383 = OpExtInst %1 37 %382 %241 
                                                      OpStore %233 %383 
                                         f32 %384 = OpLoad %233 
                                         f32 %385 = OpExtInst %1 31 %384 
                                                      OpStore %233 %385 
                                  Input f32* %386 = OpAccessChain %122 %257 
                                         f32 %387 = OpLoad %386 
                                Uniform f32* %389 = OpAccessChain %24 %388 %257 
                                         f32 %390 = OpLoad %389 
                                         f32 %391 = OpFMul %387 %390 
                                Private f32* %392 = OpAccessChain %61 %257 
                                                      OpStore %392 %391 
                                       f32_4 %393 = OpLoad %61 
                                       f32_3 %394 = OpVectorShuffle %393 %393 3 3 3 
                              Uniform f32_4* %395 = OpAccessChain %24 %388 
                                       f32_4 %396 = OpLoad %395 
                                       f32_3 %397 = OpVectorShuffle %396 %396 0 1 2 
                                       f32_3 %398 = OpFMul %394 %397 
                                       f32_4 %399 = OpLoad %61 
                                       f32_4 %400 = OpVectorShuffle %399 %398 4 5 6 3 
                                                      OpStore %61 %400 
                                       f32_4 %401 = OpLoad %86 
                                       f32_4 %402 = OpFNegate %401 
                                       f32_4 %403 = OpLoad %61 
                                       f32_4 %404 = OpFAdd %402 %403 
                                                      OpStore %61 %404 
                                         f32 %406 = OpLoad %233 
                                       f32_4 %407 = OpCompositeConstruct %406 %406 %406 %406 
                                       f32_4 %408 = OpLoad %61 
                                       f32_4 %409 = OpFMul %407 %408 
                                       f32_4 %410 = OpLoad %86 
                                       f32_4 %411 = OpFAdd %409 %410 
                                                      OpStore %405 %411 
                              Uniform f32_4* %413 = OpAccessChain %24 %412 
                                       f32_4 %414 = OpLoad %413 
                                       f32_4 %417 = OpExtInst %1 40 %414 %416 
                                                      OpStore %61 %417 
                                       f32_4 %418 = OpLoad %61 
                                       f32_4 %421 = OpExtInst %1 37 %418 %420 
                                                      OpStore %61 %421 
                                       f32_2 %422 = OpLoad %9 
                                       f32_4 %423 = OpLoad %61 
                                       f32_2 %424 = OpVectorShuffle %423 %423 0 1 
                                       f32_2 %425 = OpFNegate %424 
                                       f32_2 %426 = OpFAdd %422 %425 
                                                      OpStore %300 %426 
                                       f32_2 %427 = OpLoad %9 
                                       f32_2 %430 = OpFMul %427 %429 
                                       f32_4 %431 = OpLoad %61 
                                       f32_2 %432 = OpVectorShuffle %431 %431 0 1 
                                       f32_2 %433 = OpFNegate %432 
                                       f32_2 %434 = OpFAdd %430 %433 
                                                      OpStore %9 %434 
                                       f32_4 %435 = OpLoad %61 
                                       f32_2 %436 = OpVectorShuffle %435 %435 2 3 
                                       f32_2 %437 = OpFNegate %436 
                                       f32_2 %438 = OpLoad %9 
                                       f32_2 %439 = OpFAdd %437 %438 
                                       f32_4 %440 = OpLoad vs_TEXCOORD2 
                                       f32_4 %441 = OpVectorShuffle %440 %439 4 5 2 3 
                                                      OpStore vs_TEXCOORD2 %441 
                                       f32_4 %442 = OpLoad %61 
                                       f32_2 %443 = OpVectorShuffle %442 %442 0 1 
                                       f32_2 %444 = OpFNegate %443 
                                       f32_4 %445 = OpLoad %61 
                                       f32_2 %446 = OpVectorShuffle %445 %445 2 3 
                                       f32_2 %447 = OpFAdd %444 %446 
                                                      OpStore %9 %447 
                                       f32_2 %449 = OpLoad %300 
                                       f32_2 %450 = OpLoad %9 
                                       f32_2 %451 = OpFDiv %449 %450 
                                       f32_4 %452 = OpLoad vs_TEXCOORD0 
                                       f32_4 %453 = OpVectorShuffle %452 %451 0 1 4 5 
                                                      OpStore vs_TEXCOORD0 %453 
                                       f32_2 %455 = OpLoad %454 
                                       f32_4 %456 = OpLoad vs_TEXCOORD0 
                                       f32_4 %457 = OpVectorShuffle %456 %455 4 5 2 3 
                                                      OpStore vs_TEXCOORD0 %457 
                                  Input f32* %459 = OpAccessChain %290 %114 
                                         f32 %460 = OpLoad %459 
                                        bool %461 = OpFOrdGreaterThanEqual %248 %460 
                                                      OpStore %458 %461 
                                        bool %462 = OpLoad %458 
                                         f32 %463 = OpSelect %462 %241 %248 
                                Private f32* %464 = OpAccessChain %9 %163 
                                                      OpStore %464 %463 
                                Uniform f32* %467 = OpAccessChain %24 %466 
                                         f32 %468 = OpLoad %467 
                                         f32 %469 = OpFNegate %468 
                                Uniform f32* %471 = OpAccessChain %24 %470 
                                         f32 %472 = OpLoad %471 
                                         f32 %473 = OpFAdd %469 %472 
                                                      OpStore %465 %473 
                                Private f32* %474 = OpAccessChain %9 %163 
                                         f32 %475 = OpLoad %474 
                                         f32 %476 = OpLoad %465 
                                         f32 %477 = OpFMul %475 %476 
                                Uniform f32* %478 = OpAccessChain %24 %466 
                                         f32 %479 = OpLoad %478 
                                         f32 %480 = OpFAdd %477 %479 
                                Private f32* %481 = OpAccessChain %9 %163 
                                                      OpStore %481 %480 
                                Private f32* %482 = OpAccessChain %9 %163 
                                         f32 %483 = OpLoad %482 
                                         f32 %484 = OpFMul %483 %273 
                                Uniform f32* %486 = OpAccessChain %24 %485 
                                         f32 %487 = OpLoad %486 
                                         f32 %488 = OpFAdd %484 %487 
                                Private f32* %489 = OpAccessChain %9 %163 
                                                      OpStore %489 %488 
                                Private f32* %490 = OpAccessChain %9 %163 
                                         f32 %491 = OpLoad %490 
                                Uniform f32* %492 = OpAccessChain %24 %360 
                                         f32 %493 = OpLoad %492 
                                         f32 %494 = OpFMul %491 %493 
                                Private f32* %495 = OpAccessChain %9 %163 
                                                      OpStore %495 %494 
                                Private f32* %496 = OpAccessChain %9 %163 
                                         f32 %497 = OpLoad %496 
                                         f32 %498 = OpFNegate %497 
                                         f32 %500 = OpFMul %498 %499 
                                         f32 %501 = OpFAdd %500 %499 
                                Private f32* %502 = OpAccessChain %9 %163 
                                                      OpStore %502 %501 
                                Private f32* %503 = OpAccessChain %9 %163 
                                         f32 %504 = OpLoad %503 
                                Private f32* %505 = OpAccessChain %36 %163 
                                         f32 %506 = OpLoad %505 
                                         f32 %507 = OpFMul %504 %506 
                                         f32 %509 = OpFAdd %507 %508 
                                Private f32* %510 = OpAccessChain %36 %257 
                                                      OpStore %510 %509 
                                       f32_4 %512 = OpLoad %36 
                                       f32_2 %513 = OpVectorShuffle %512 %512 0 3 
                                       f32_4 %514 = OpLoad vs_TEXCOORD1 
                                       f32_4 %515 = OpVectorShuffle %514 %513 4 1 2 5 
                                                      OpStore vs_TEXCOORD1 %515 
                                         f32 %516 = OpLoad %138 
                                         f32 %517 = OpFNegate %516 
                                         f32 %518 = OpFMul %517 %499 
                                Private f32* %519 = OpAccessChain %36 %257 
                                         f32 %520 = OpLoad %519 
                                         f32 %521 = OpFAdd %518 %520 
                                 Output f32* %522 = OpAccessChain vs_TEXCOORD1 %114 
                                                      OpStore %522 %521 
                                         f32 %523 = OpLoad %138 
                                         f32 %524 = OpFMul %523 %499 
                                Private f32* %525 = OpAccessChain %36 %257 
                                         f32 %526 = OpLoad %525 
                                         f32 %527 = OpFAdd %524 %526 
                                 Output f32* %528 = OpAccessChain vs_TEXCOORD1 %176 
                                                      OpStore %528 %527 
                                 Output f32* %529 = OpAccessChain %118 %45 %114 
                                         f32 %530 = OpLoad %529 
                                         f32 %531 = OpFNegate %530 
                                 Output f32* %532 = OpAccessChain %118 %45 %114 
                                                      OpStore %532 %531 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 133
; Schema: 0
                                             OpCapability Shader 
                                      %1 = OpExtInstImport "GLSL.std.450" 
                                             OpMemoryModel Logical GLSL450 
                                             OpEntryPoint Fragment %4 "main" %11 %13 %30 %42 %112 %117 
                                             OpExecutionMode %4 OriginUpperLeft 
                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                             OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                             OpName vs_TEXCOORDn0 "vs_TEXCOORDn0" 
                                             OpDecorate %11 Location 11 
                                             OpDecorate %13 Location 13 
                                             OpDecorate %22 DescriptorSet 22 
                                             OpDecorate %22 Binding 22 
                                             OpDecorate %26 DescriptorSet 26 
                                             OpDecorate %26 Binding 26 
                                             OpDecorate vs_TEXCOORD0 Location 30 
                                             OpDecorate vs_TEXCOORD1 Location 42 
                                             OpMemberDecorate %94 0 Offset 94 
                                             OpDecorate %94 Block 
                                             OpDecorate %96 DescriptorSet 96 
                                             OpDecorate %96 Binding 96 
                                             OpDecorate %112 Location 112 
                                             OpDecorate vs_TEXCOORDn0 Location 117 
                                      %2 = OpTypeVoid 
                                      %3 = OpTypeFunction %2 
                                      %6 = OpTypeFloat 32 
                                      %7 = OpTypeVector %6 4 
                                      %8 = OpTypePointer Private %7 
                       Private f32_4* %9 = OpVariable Private 
                                     %10 = OpTypePointer Input %7 
                        Input f32_4* %11 = OpVariable Input 
                        Input f32_4* %13 = OpVariable Input 
                                     %17 = OpTypeVector %6 2 
                                     %18 = OpTypePointer Private %17 
                      Private f32_2* %19 = OpVariable Private 
                                     %20 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                     %21 = OpTypePointer UniformConstant %20 
UniformConstant read_only Texture2D* %22 = OpVariable UniformConstant 
                                     %24 = OpTypeSampler 
                                     %25 = OpTypePointer UniformConstant %24 
            UniformConstant sampler* %26 = OpVariable UniformConstant 
                                     %28 = OpTypeSampledImage %20 
               Input f32_4* vs_TEXCOORD0 = OpVariable Input 
                                     %34 = OpTypeInt 32 0 
                                 u32 %35 = OpConstant 3 
                                 u32 %37 = OpConstant 0 
                                     %38 = OpTypePointer Private %6 
               Input f32_4* vs_TEXCOORD1 = OpVariable Input 
                                 f32 %51 = OpConstant 3.674022E-40 
                                 f32 %52 = OpConstant 3.674022E-40 
                                 u32 %64 = OpConstant 1 
                                 f32 %68 = OpConstant 3.674022E-40 
                                     %71 = OpTypeBool 
                                     %72 = OpTypePointer Private %71 
                       Private bool* %73 = OpVariable Private 
                                     %78 = OpTypeInt 32 1 
                                 i32 %79 = OpConstant 0 
                                 i32 %80 = OpConstant 1 
                                 i32 %82 = OpConstant -1 
                                     %88 = OpTypeVector %6 3 
                                     %94 = OpTypeStruct %7 
                                     %95 = OpTypePointer Uniform %94 
            Uniform struct {f32_4;}* %96 = OpVariable Uniform 
                                     %97 = OpTypePointer Uniform %7 
                       Private f32* %105 = OpVariable Private 
                                    %111 = OpTypePointer Output %7 
                      Output f32_4* %112 = OpVariable Output 
                                    %114 = OpTypePointer Output %6 
                                    %116 = OpTypePointer Input %6 
                Input f32* vs_TEXCOORDn0 = OpVariable Input 
                                 void %4 = OpFunction None %3 
                                      %5 = OpLabel 
                               f32_4 %12 = OpLoad %11 
                               f32_4 %14 = OpLoad %13 
                               f32_4 %15 = OpFNegate %14 
                               f32_4 %16 = OpFAdd %12 %15 
                                             OpStore %9 %16 
                 read_only Texture2D %23 = OpLoad %22 
                             sampler %27 = OpLoad %26 
          read_only Texture2DSampled %29 = OpSampledImage %23 %27 
                               f32_4 %31 = OpLoad vs_TEXCOORD0 
                               f32_2 %32 = OpVectorShuffle %31 %31 0 1 
                               f32_4 %33 = OpImageSampleImplicitLod %29 %32 
                                 f32 %36 = OpCompositeExtract %33 3 
                        Private f32* %39 = OpAccessChain %19 %37 
                                             OpStore %39 %36 
                               f32_2 %40 = OpLoad %19 
                               f32_2 %41 = OpVectorShuffle %40 %40 0 0 
                               f32_4 %43 = OpLoad vs_TEXCOORD1 
                               f32_2 %44 = OpVectorShuffle %43 %43 0 0 
                               f32_2 %45 = OpFMul %41 %44 
                               f32_4 %46 = OpLoad vs_TEXCOORD1 
                               f32_2 %47 = OpVectorShuffle %46 %46 2 1 
                               f32_2 %48 = OpFNegate %47 
                               f32_2 %49 = OpFAdd %45 %48 
                                             OpStore %19 %49 
                               f32_2 %50 = OpLoad %19 
                               f32_2 %53 = OpCompositeConstruct %51 %51 
                               f32_2 %54 = OpCompositeConstruct %52 %52 
                               f32_2 %55 = OpExtInst %1 43 %50 %53 %54 
                                             OpStore %19 %55 
                               f32_2 %56 = OpLoad %19 
                               f32_4 %57 = OpVectorShuffle %56 %56 0 0 0 0 
                               f32_4 %58 = OpLoad %9 
                               f32_4 %59 = OpFMul %57 %58 
                               f32_4 %60 = OpLoad %13 
                               f32_4 %61 = OpFAdd %59 %60 
                                             OpStore %9 %61 
                        Private f32* %62 = OpAccessChain %9 %35 
                                 f32 %63 = OpLoad %62 
                        Private f32* %65 = OpAccessChain %19 %64 
                                 f32 %66 = OpLoad %65 
                                 f32 %67 = OpFMul %63 %66 
                                 f32 %69 = OpFAdd %67 %68 
                        Private f32* %70 = OpAccessChain %19 %37 
                                             OpStore %70 %69 
                        Private f32* %74 = OpAccessChain %19 %37 
                                 f32 %75 = OpLoad %74 
                                bool %76 = OpFOrdLessThan %75 %51 
                                             OpStore %73 %76 
                                bool %77 = OpLoad %73 
                                 i32 %81 = OpSelect %77 %80 %79 
                                 i32 %83 = OpIMul %81 %82 
                                bool %84 = OpINotEqual %83 %79 
                                             OpSelectionMerge %86 None 
                                             OpBranchConditional %84 %85 %86 
                                     %85 = OpLabel 
                                             OpKill
                                     %86 = OpLabel 
                               f32_4 %89 = OpLoad %9 
                               f32_3 %90 = OpVectorShuffle %89 %89 0 1 2 
                               f32_2 %91 = OpLoad %19 
                               f32_3 %92 = OpVectorShuffle %91 %91 1 1 1 
                               f32_3 %93 = OpFMul %90 %92 
                      Uniform f32_4* %98 = OpAccessChain %96 %79 
                               f32_4 %99 = OpLoad %98 
                              f32_3 %100 = OpVectorShuffle %99 %99 0 1 2 
                              f32_3 %101 = OpFNegate %100 
                              f32_3 %102 = OpFAdd %93 %101 
                              f32_4 %103 = OpLoad %9 
                              f32_4 %104 = OpVectorShuffle %103 %102 4 5 6 3 
                                             OpStore %9 %104 
                       Private f32* %106 = OpAccessChain %19 %64 
                                f32 %107 = OpLoad %106 
                       Private f32* %108 = OpAccessChain %9 %35 
                                f32 %109 = OpLoad %108 
                                f32 %110 = OpFMul %107 %109 
                                             OpStore %105 %110 
                                f32 %113 = OpLoad %105 
                        Output f32* %115 = OpAccessChain %112 %35 
                                             OpStore %115 %113 
                                f32 %118 = OpLoad vs_TEXCOORDn0 
                                             OpStore %105 %118 
                                f32 %119 = OpLoad %105 
                                f32 %120 = OpExtInst %1 43 %119 %51 %52 
                                             OpStore %105 %120 
                                f32 %121 = OpLoad %105 
                              f32_3 %122 = OpCompositeConstruct %121 %121 %121 
                              f32_4 %123 = OpLoad %9 
                              f32_3 %124 = OpVectorShuffle %123 %123 0 1 2 
                              f32_3 %125 = OpFMul %122 %124 
                     Uniform f32_4* %126 = OpAccessChain %96 %79 
                              f32_4 %127 = OpLoad %126 
                              f32_3 %128 = OpVectorShuffle %127 %127 0 1 2 
                              f32_3 %129 = OpFAdd %125 %128 
                              f32_4 %130 = OpLoad %112 
                              f32_4 %131 = OpVectorShuffle %130 %129 4 5 6 3 
                                             OpStore %112 %131 
                                             OpReturn
                                             OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "FOG_LINEAR" "UNDERLAY_ON" "UNITY_UI_ALPHACLIP" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "FOG_LINEAR" "UNDERLAY_ON" "UNITY_UI_ALPHACLIP" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	vec4 _FaceColor;
uniform 	float _FaceDilate;
uniform 	float _OutlineSoftness;
uniform 	vec4 _OutlineColor;
uniform 	float _OutlineWidth;
uniform 	float _UnderlayOffsetX;
uniform 	float _UnderlayOffsetY;
uniform 	float _UnderlayDilate;
uniform 	float _UnderlaySoftness;
uniform 	float _WeightNormal;
uniform 	float _WeightBold;
uniform 	float _ScaleRatioA;
uniform 	float _ScaleRatioC;
uniform 	float _VertexOffsetX;
uniform 	float _VertexOffsetY;
uniform 	vec4 _ClipRect;
uniform 	float _MaskSoftnessX;
uniform 	float _MaskSoftnessY;
uniform 	float _TextureWidth;
uniform 	float _TextureHeight;
uniform 	float _GradientScale;
uniform 	float _ScaleX;
uniform 	float _ScaleY;
uniform 	float _PerspectiveFilter;
uniform 	float _Sharpness;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_COLOR0;
in  vec2 in_TEXCOORD0;
in  vec2 in_TEXCOORD1;
out vec4 vs_COLOR0;
out vec4 vs_COLOR1;
out vec4 vs_TEXCOORD0;
out vec4 vs_TEXCOORD1;
out vec4 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec2 vs_TEXCOORD4;
out float vs_TEXCOORDn0;
vec2 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
vec4 u_xlat6;
vec3 u_xlat7;
vec2 u_xlat8;
float u_xlat14;
float u_xlat15;
float u_xlat21;
bool u_xlatb21;
void main()
{
    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
    gl_Position = u_xlat2;
    vs_COLOR0.w = _FaceColor.w;
    u_xlat3.xyz = in_COLOR0.xyz;
    u_xlat3.w = 1.0;
    u_xlat4 = u_xlat3 * _FaceColor;
    u_xlat3.xyz = u_xlat4.www * u_xlat4.xyz;
    vs_COLOR0.xyz = u_xlat3.xyz;
    u_xlat5.xyz = (-u_xlat3.xyz);
    u_xlat5.w = (-u_xlat4.w);
    u_xlat6.xyz = _OutlineColor.www * _OutlineColor.xyz;
    u_xlat6.w = _OutlineColor.w;
    u_xlat5 = u_xlat5 + u_xlat6;
    u_xlat14 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat14 = inversesqrt(u_xlat14);
    u_xlat1.xyz = vec3(u_xlat14) * u_xlat1.xyz;
    u_xlat3.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat3.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat3.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat14 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat14 = inversesqrt(u_xlat14);
    u_xlat3.xyz = vec3(u_xlat14) * u_xlat3.xyz;
    u_xlat14 = dot(u_xlat3.xyz, u_xlat1.xyz);
    u_xlat1.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;
    u_xlat1.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat1.xy;
    u_xlat1.xy = abs(u_xlat1.xy) * vec2(_ScaleX, _ScaleY);
    u_xlat1.xy = u_xlat2.ww / u_xlat1.xy;
    vs_TEXCOORDn0 = u_xlat2.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat21 = dot(u_xlat1.xy, u_xlat1.xy);
    u_xlat1.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) * vec2(0.25, 0.25) + u_xlat1.xy;
    vs_TEXCOORD2.zw = vec2(0.25, 0.25) / u_xlat1.xy;
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.x = abs(in_TEXCOORD1.y) * _GradientScale;
    u_xlat8.x = _Sharpness + 1.0;
    u_xlat1.x = u_xlat8.x * u_xlat1.x;
    u_xlat8.x = u_xlat21 * u_xlat1.x;
    u_xlat15 = (-_PerspectiveFilter) + 1.0;
    u_xlat15 = u_xlat15 * abs(u_xlat8.x);
    u_xlat21 = u_xlat21 * u_xlat1.x + (-u_xlat15);
    u_xlat14 = abs(u_xlat14) * u_xlat21 + u_xlat15;
    u_xlatb21 = hlslcc_mtx4x4glstate_matrix_projection[3].w==0.0;
    u_xlat14 = (u_xlatb21) ? u_xlat14 : u_xlat8.x;
    u_xlat21 = _OutlineSoftness * _ScaleRatioA;
    u_xlat21 = u_xlat21 * u_xlat14 + 1.0;
    u_xlat1.x = u_xlat14 / u_xlat21;
    u_xlat21 = _OutlineWidth * _ScaleRatioA;
    u_xlat21 = u_xlat21 * 0.5;
    u_xlat8.x = u_xlat1.x * u_xlat21;
    u_xlat8.x = u_xlat8.x + u_xlat8.x;
    u_xlat8.x = min(u_xlat8.x, 1.0);
    u_xlat8.x = sqrt(u_xlat8.x);
    u_xlat2 = u_xlat5 * u_xlat8.xxxx;
    vs_COLOR1.xyz = u_xlat4.xyz * u_xlat4.www + u_xlat2.xyz;
    vs_COLOR1.w = u_xlat3.w * _FaceColor.w + u_xlat2.w;
    u_xlat2 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));
    u_xlat2 = min(u_xlat2, vec4(2e+10, 2e+10, 2e+10, 2e+10));
    u_xlat8.xy = u_xlat0.xy + (-u_xlat2.xy);
    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + (-u_xlat2.xy);
    vs_TEXCOORD2.xy = (-u_xlat2.zw) + u_xlat0.xy;
    u_xlat0.xy = (-u_xlat2.xy) + u_xlat2.zw;
    vs_TEXCOORD0.zw = u_xlat8.xy / u_xlat0.xy;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlatb0 = 0.0>=in_TEXCOORD1.y;
    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);
    u_xlat7.x = (-_WeightNormal) + _WeightBold;
    u_xlat0.x = u_xlat0.x * u_xlat7.x + _WeightNormal;
    u_xlat0.x = u_xlat0.x * 0.25 + _FaceDilate;
    u_xlat0.x = u_xlat0.x * _ScaleRatioA;
    u_xlat0.x = (-u_xlat0.x) * 0.5 + 0.5;
    u_xlat1.w = u_xlat0.x * u_xlat1.x + -0.5;
    vs_TEXCOORD1.y = (-u_xlat21) * u_xlat1.x + u_xlat1.w;
    vs_TEXCOORD1.z = u_xlat21 * u_xlat1.x + u_xlat1.w;
    vs_TEXCOORD1.xw = u_xlat1.xw;
    vs_TEXCOORD3.z = in_COLOR0.w;
    vs_TEXCOORD3.w = 0.0;
    u_xlat1 = vec4(_UnderlaySoftness, _UnderlayDilate, _UnderlayOffsetX, _UnderlayOffsetY) * vec4(vec4(_ScaleRatioC, _ScaleRatioC, _ScaleRatioC, _ScaleRatioC));
    u_xlat7.xz = (-u_xlat1.zw) * vec2(_GradientScale);
    u_xlat7.xz = u_xlat7.xz / vec2(_TextureWidth, _TextureHeight);
    vs_TEXCOORD3.xy = u_xlat7.xz + in_TEXCOORD0.xy;
    u_xlat7.x = u_xlat1.x * u_xlat14 + 1.0;
    u_xlat7.x = u_xlat14 / u_xlat7.x;
    u_xlat14 = u_xlat1.y * 0.5;
    u_xlat0.x = u_xlat0.x * u_xlat7.x + -0.5;
    vs_TEXCOORD4.y = (-u_xlat14) * u_xlat7.x + u_xlat0.x;
    vs_TEXCOORD4.x = u_xlat7.x;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 unity_FogColor;
uniform 	vec4 _UnderlayColor;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
in  vec4 vs_COLOR0;
in  vec4 vs_TEXCOORD0;
in  vec4 vs_TEXCOORD1;
in  vec4 vs_TEXCOORD3;
in  vec2 vs_TEXCOORD4;
in  float vs_TEXCOORDn0;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
float u_xlat9;
void main()
{
    u_xlat0 = texture(_MainTex, vs_TEXCOORD3.xy);
    u_xlat0.x = u_xlat0.w * vs_TEXCOORD4.x + (-vs_TEXCOORD4.y);
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat1.xyz = _UnderlayColor.www * _UnderlayColor.xyz;
    u_xlat1.w = _UnderlayColor.w;
    u_xlat0 = u_xlat0.xxxx * u_xlat1;
    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1.x = u_xlat1.w * vs_TEXCOORD1.x + (-vs_TEXCOORD1.w);
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat2 = u_xlat1.xxxx * vs_COLOR0;
    u_xlat1.x = (-vs_COLOR0.w) * u_xlat1.x + 1.0;
    u_xlat0 = u_xlat0 * u_xlat1.xxxx + u_xlat2;
    u_xlat1.x = u_xlat0.w * vs_TEXCOORD3.z + -0.00100000005;
    u_xlatb1 = u_xlat1.x<0.0;
    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
    u_xlat0.xyz = u_xlat0.xyz * vs_TEXCOORD3.zzz + (-unity_FogColor.xyz);
    u_xlat9 = u_xlat0.w * vs_TEXCOORD3.z;
    SV_Target0.w = u_xlat9;
    u_xlat9 = vs_TEXCOORDn0;
    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
    SV_Target0.xyz = vec3(u_xlat9) * u_xlat0.xyz + unity_FogColor.xyz;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "FOG_LINEAR" "UNDERLAY_ON" "UNITY_UI_ALPHACLIP" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 677
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %12 %118 %122 %129 %196 %295 %324 %333 %436 %492 %498 %558 %576 %661 
                                                      OpName vs_TEXCOORDn0 "vs_TEXCOORDn0" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpDecorate %12 Location 12 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpDecorate %19 ArrayStride 19 
                                                      OpDecorate %20 ArrayStride 20 
                                                      OpDecorate %21 ArrayStride 21 
                                                      OpMemberDecorate %22 0 Offset 22 
                                                      OpMemberDecorate %22 1 Offset 22 
                                                      OpMemberDecorate %22 2 Offset 22 
                                                      OpMemberDecorate %22 3 Offset 22 
                                                      OpMemberDecorate %22 4 Offset 22 
                                                      OpMemberDecorate %22 5 Offset 22 
                                                      OpMemberDecorate %22 6 Offset 22 
                                                      OpMemberDecorate %22 7 Offset 22 
                                                      OpMemberDecorate %22 8 Offset 22 
                                                      OpMemberDecorate %22 9 Offset 22 
                                                      OpMemberDecorate %22 10 Offset 22 
                                                      OpMemberDecorate %22 11 Offset 22 
                                                      OpMemberDecorate %22 12 Offset 22 
                                                      OpMemberDecorate %22 13 Offset 22 
                                                      OpMemberDecorate %22 14 Offset 22 
                                                      OpMemberDecorate %22 15 Offset 22 
                                                      OpMemberDecorate %22 16 Offset 22 
                                                      OpMemberDecorate %22 17 Offset 22 
                                                      OpMemberDecorate %22 18 Offset 22 
                                                      OpMemberDecorate %22 19 Offset 22 
                                                      OpMemberDecorate %22 20 Offset 22 
                                                      OpMemberDecorate %22 21 Offset 22 
                                                      OpMemberDecorate %22 22 Offset 22 
                                                      OpMemberDecorate %22 23 Offset 22 
                                                      OpMemberDecorate %22 24 Offset 22 
                                                      OpMemberDecorate %22 25 Offset 22 
                                                      OpMemberDecorate %22 26 Offset 22 
                                                      OpMemberDecorate %22 27 Offset 22 
                                                      OpMemberDecorate %22 28 Offset 22 
                                                      OpMemberDecorate %22 29 Offset 22 
                                                      OpMemberDecorate %22 30 Offset 22 
                                                      OpMemberDecorate %22 31 Offset 22 
                                                      OpMemberDecorate %22 32 Offset 22 
                                                      OpDecorate %22 Block 
                                                      OpDecorate %24 DescriptorSet 24 
                                                      OpDecorate %24 Binding 24 
                                                      OpMemberDecorate %116 0 BuiltIn 116 
                                                      OpMemberDecorate %116 1 BuiltIn 116 
                                                      OpMemberDecorate %116 2 BuiltIn 116 
                                                      OpDecorate %116 Block 
                                                      OpDecorate %122 Location 122 
                                                      OpDecorate %129 Location 129 
                                                      OpDecorate %196 Location 196 
                                                      OpDecorate vs_TEXCOORDn0 Location 295 
                                                      OpDecorate vs_TEXCOORD2 Location 324 
                                                      OpDecorate %333 Location 333 
                                                      OpDecorate %436 Location 436 
                                                      OpDecorate vs_TEXCOORD0 Location 492 
                                                      OpDecorate %498 Location 498 
                                                      OpDecorate vs_TEXCOORD1 Location 558 
                                                      OpDecorate vs_TEXCOORD3 Location 576 
                                                      OpDecorate vs_TEXCOORD4 Location 661 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 2 
                                               %8 = OpTypePointer Private %7 
                                Private f32_2* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 4 
                                              %11 = OpTypePointer Input %10 
                                 Input f32_4* %12 = OpVariable Input 
                                              %15 = OpTypeVector %6 3 
                                              %16 = OpTypeInt 32 0 
                                          u32 %17 = OpConstant 4 
                                              %18 = OpTypeArray %10 %17 
                                              %19 = OpTypeArray %10 %17 
                                              %20 = OpTypeArray %10 %17 
                                              %21 = OpTypeArray %10 %17 
                                              %22 = OpTypeStruct %15 %10 %10 %18 %19 %20 %21 %10 %10 %6 %6 %10 %6 %6 %6 %6 %6 %6 %6 %6 %6 %6 %6 %10 %6 %6 %6 %6 %6 %6 %6 %6 %6 
                                              %23 = OpTypePointer Uniform %22 
Uniform struct {f32_3; f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4[4]; f32_4; f32_4; f32; f32; f32_4; f32; f32; f32; f32; f32; f32; f32; f32; f32; f32; f32; f32_4; f32; f32; f32; f32; f32; f32; f32; f32; f32;}* %24 = OpVariable Uniform 
                                              %25 = OpTypeInt 32 1 
                                          i32 %26 = OpConstant 21 
                                              %27 = OpTypePointer Uniform %6 
                                          i32 %30 = OpConstant 22 
                                              %35 = OpTypePointer Private %10 
                               Private f32_4* %36 = OpVariable Private 
                                          i32 %39 = OpConstant 3 
                                          i32 %40 = OpConstant 1 
                                              %41 = OpTypePointer Uniform %10 
                                          i32 %45 = OpConstant 0 
                                          i32 %53 = OpConstant 2 
                               Private f32_4* %61 = OpVariable Private 
                                              %80 = OpTypePointer Uniform %15 
                               Private f32_4* %86 = OpVariable Private 
                                          i32 %89 = OpConstant 6 
                                         u32 %114 = OpConstant 1 
                                             %115 = OpTypeArray %6 %114 
                                             %116 = OpTypeStruct %10 %6 %115 
                                             %117 = OpTypePointer Output %116 
        Output struct {f32_4; f32; f32[1];}* %118 = OpVariable Output 
                                             %120 = OpTypePointer Output %10 
                               Output f32_4* %122 = OpVariable Output 
                                         i32 %123 = OpConstant 8 
                                         u32 %124 = OpConstant 3 
                                             %127 = OpTypePointer Output %6 
                                Input f32_4* %129 = OpVariable Input 
                                         f32 %134 = OpConstant 3.674022E-40 
                                             %135 = OpTypePointer Private %6 
                              Private f32_4* %137 = OpVariable Private 
                              Private f32_4* %153 = OpVariable Private 
                              Private f32_4* %163 = OpVariable Private 
                                         i32 %164 = OpConstant 11 
                                Private f32* %180 = OpVariable Private 
                                             %195 = OpTypePointer Input %15 
                                Input f32_3* %196 = OpVariable Input 
                                         i32 %198 = OpConstant 4 
                                         u32 %203 = OpConstant 0 
                                         u32 %216 = OpConstant 2 
                                         i32 %240 = OpConstant 5 
                                         i32 %262 = OpConstant 29 
                                         i32 %265 = OpConstant 30 
                                Private f32* %279 = OpVariable Private 
                                         f32 %293 = OpConstant 3.674022E-40 
                        Output f32* vs_TEXCOORDn0 = OpVariable Output 
                                         i32 %297 = OpConstant 7 
                                         i32 %309 = OpConstant 24 
                                         i32 %312 = OpConstant 25 
                                         f32 %316 = OpConstant 3.674022E-40 
                                       f32_2 %317 = OpConstantComposite %316 %316 
                       Output f32_4* vs_TEXCOORD2 = OpVariable Output 
                                             %332 = OpTypePointer Input %7 
                                Input f32_2* %333 = OpVariable Input 
                                             %334 = OpTypePointer Input %6 
                                         i32 %338 = OpConstant 28 
                              Private f32_2* %343 = OpVariable Private 
                                         i32 %344 = OpConstant 32 
                                Private f32* %360 = OpVariable Private 
                                         i32 %361 = OpConstant 31 
                                             %384 = OpTypeBool 
                                             %385 = OpTypePointer Private %384 
                               Private bool* %386 = OpVariable Private 
                                             %391 = OpTypePointer Function %6 
                                         i32 %400 = OpConstant 10 
                                         i32 %403 = OpConstant 19 
                                         i32 %415 = OpConstant 12 
                               Output f32_4* %436 = OpVariable Output 
                                         i32 %456 = OpConstant 23 
                                         f32 %459 = OpConstant 3.674022E-40 
                                       f32_4 %460 = OpConstantComposite %459 %459 %459 %459 
                                         f32 %463 = OpConstant 3.674022E-40 
                                       f32_4 %464 = OpConstantComposite %463 %463 %463 %463 
                                         f32 %472 = OpConstant 3.674022E-40 
                                       f32_2 %473 = OpConstantComposite %472 %472 
                       Output f32_4* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_2* %498 = OpVariable Input 
                               Private bool* %502 = OpVariable Private 
                                             %509 = OpTypePointer Private %15 
                              Private f32_3* %510 = OpVariable Private 
                                         i32 %511 = OpConstant 17 
                                         i32 %515 = OpConstant 18 
                                         i32 %532 = OpConstant 9 
                                         f32 %546 = OpConstant 3.674022E-40 
                                         f32 %555 = OpConstant 3.674022E-40 
                       Output f32_4* vs_TEXCOORD1 = OpVariable Output 
                       Output f32_4* vs_TEXCOORD3 = OpVariable Output 
                                         i32 %581 = OpConstant 16 
                                         i32 %584 = OpConstant 15 
                                         i32 %587 = OpConstant 13 
                                         i32 %590 = OpConstant 14 
                                         i32 %594 = OpConstant 20 
                                         i32 %621 = OpConstant 26 
                                         i32 %624 = OpConstant 27 
                                             %660 = OpTypePointer Output %7 
                       Output f32_2* vs_TEXCOORD4 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                               Function f32* %392 = OpVariable Function 
                                        f32_4 %13 = OpLoad %12 
                                        f32_2 %14 = OpVectorShuffle %13 %13 0 1 
                                 Uniform f32* %28 = OpAccessChain %24 %26 
                                          f32 %29 = OpLoad %28 
                                 Uniform f32* %31 = OpAccessChain %24 %30 
                                          f32 %32 = OpLoad %31 
                                        f32_2 %33 = OpCompositeConstruct %29 %32 
                                        f32_2 %34 = OpFAdd %14 %33 
                                                      OpStore %9 %34 
                                        f32_2 %37 = OpLoad %9 
                                        f32_4 %38 = OpVectorShuffle %37 %37 1 1 1 1 
                               Uniform f32_4* %42 = OpAccessChain %24 %39 %40 
                                        f32_4 %43 = OpLoad %42 
                                        f32_4 %44 = OpFMul %38 %43 
                                                      OpStore %36 %44 
                               Uniform f32_4* %46 = OpAccessChain %24 %39 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_2 %48 = OpLoad %9 
                                        f32_4 %49 = OpVectorShuffle %48 %48 0 0 0 0 
                                        f32_4 %50 = OpFMul %47 %49 
                                        f32_4 %51 = OpLoad %36 
                                        f32_4 %52 = OpFAdd %50 %51 
                                                      OpStore %36 %52 
                               Uniform f32_4* %54 = OpAccessChain %24 %39 %53 
                                        f32_4 %55 = OpLoad %54 
                                        f32_4 %56 = OpLoad %12 
                                        f32_4 %57 = OpVectorShuffle %56 %56 2 2 2 2 
                                        f32_4 %58 = OpFMul %55 %57 
                                        f32_4 %59 = OpLoad %36 
                                        f32_4 %60 = OpFAdd %58 %59 
                                                      OpStore %36 %60 
                                        f32_4 %62 = OpLoad %36 
                               Uniform f32_4* %63 = OpAccessChain %24 %39 %39 
                                        f32_4 %64 = OpLoad %63 
                                        f32_4 %65 = OpFAdd %62 %64 
                                                      OpStore %61 %65 
                               Uniform f32_4* %66 = OpAccessChain %24 %39 %39 
                                        f32_4 %67 = OpLoad %66 
                                        f32_3 %68 = OpVectorShuffle %67 %67 0 1 2 
                                        f32_4 %69 = OpLoad %12 
                                        f32_3 %70 = OpVectorShuffle %69 %69 3 3 3 
                                        f32_3 %71 = OpFMul %68 %70 
                                        f32_4 %72 = OpLoad %36 
                                        f32_3 %73 = OpVectorShuffle %72 %72 0 1 2 
                                        f32_3 %74 = OpFAdd %71 %73 
                                        f32_4 %75 = OpLoad %36 
                                        f32_4 %76 = OpVectorShuffle %75 %74 4 5 6 3 
                                                      OpStore %36 %76 
                                        f32_4 %77 = OpLoad %36 
                                        f32_3 %78 = OpVectorShuffle %77 %77 0 1 2 
                                        f32_3 %79 = OpFNegate %78 
                               Uniform f32_3* %81 = OpAccessChain %24 %45 
                                        f32_3 %82 = OpLoad %81 
                                        f32_3 %83 = OpFAdd %79 %82 
                                        f32_4 %84 = OpLoad %36 
                                        f32_4 %85 = OpVectorShuffle %84 %83 4 5 6 3 
                                                      OpStore %36 %85 
                                        f32_4 %87 = OpLoad %61 
                                        f32_4 %88 = OpVectorShuffle %87 %87 1 1 1 1 
                               Uniform f32_4* %90 = OpAccessChain %24 %89 %40 
                                        f32_4 %91 = OpLoad %90 
                                        f32_4 %92 = OpFMul %88 %91 
                                                      OpStore %86 %92 
                               Uniform f32_4* %93 = OpAccessChain %24 %89 %45 
                                        f32_4 %94 = OpLoad %93 
                                        f32_4 %95 = OpLoad %61 
                                        f32_4 %96 = OpVectorShuffle %95 %95 0 0 0 0 
                                        f32_4 %97 = OpFMul %94 %96 
                                        f32_4 %98 = OpLoad %86 
                                        f32_4 %99 = OpFAdd %97 %98 
                                                      OpStore %86 %99 
                              Uniform f32_4* %100 = OpAccessChain %24 %89 %53 
                                       f32_4 %101 = OpLoad %100 
                                       f32_4 %102 = OpLoad %61 
                                       f32_4 %103 = OpVectorShuffle %102 %102 2 2 2 2 
                                       f32_4 %104 = OpFMul %101 %103 
                                       f32_4 %105 = OpLoad %86 
                                       f32_4 %106 = OpFAdd %104 %105 
                                                      OpStore %86 %106 
                              Uniform f32_4* %107 = OpAccessChain %24 %89 %39 
                                       f32_4 %108 = OpLoad %107 
                                       f32_4 %109 = OpLoad %61 
                                       f32_4 %110 = OpVectorShuffle %109 %109 3 3 3 3 
                                       f32_4 %111 = OpFMul %108 %110 
                                       f32_4 %112 = OpLoad %86 
                                       f32_4 %113 = OpFAdd %111 %112 
                                                      OpStore %61 %113 
                                       f32_4 %119 = OpLoad %61 
                               Output f32_4* %121 = OpAccessChain %118 %45 
                                                      OpStore %121 %119 
                                Uniform f32* %125 = OpAccessChain %24 %123 %124 
                                         f32 %126 = OpLoad %125 
                                 Output f32* %128 = OpAccessChain %122 %124 
                                                      OpStore %128 %126 
                                       f32_4 %130 = OpLoad %129 
                                       f32_3 %131 = OpVectorShuffle %130 %130 0 1 2 
                                       f32_4 %132 = OpLoad %86 
                                       f32_4 %133 = OpVectorShuffle %132 %131 4 5 6 3 
                                                      OpStore %86 %133 
                                Private f32* %136 = OpAccessChain %86 %124 
                                                      OpStore %136 %134 
                                       f32_4 %138 = OpLoad %86 
                              Uniform f32_4* %139 = OpAccessChain %24 %123 
                                       f32_4 %140 = OpLoad %139 
                                       f32_4 %141 = OpFMul %138 %140 
                                                      OpStore %137 %141 
                                       f32_4 %142 = OpLoad %137 
                                       f32_3 %143 = OpVectorShuffle %142 %142 3 3 3 
                                       f32_4 %144 = OpLoad %137 
                                       f32_3 %145 = OpVectorShuffle %144 %144 0 1 2 
                                       f32_3 %146 = OpFMul %143 %145 
                                       f32_4 %147 = OpLoad %86 
                                       f32_4 %148 = OpVectorShuffle %147 %146 4 5 6 3 
                                                      OpStore %86 %148 
                                       f32_4 %149 = OpLoad %86 
                                       f32_3 %150 = OpVectorShuffle %149 %149 0 1 2 
                                       f32_4 %151 = OpLoad %122 
                                       f32_4 %152 = OpVectorShuffle %151 %150 4 5 6 3 
                                                      OpStore %122 %152 
                                       f32_4 %154 = OpLoad %86 
                                       f32_3 %155 = OpVectorShuffle %154 %154 0 1 2 
                                       f32_3 %156 = OpFNegate %155 
                                       f32_4 %157 = OpLoad %153 
                                       f32_4 %158 = OpVectorShuffle %157 %156 4 5 6 3 
                                                      OpStore %153 %158 
                                Private f32* %159 = OpAccessChain %137 %124 
                                         f32 %160 = OpLoad %159 
                                         f32 %161 = OpFNegate %160 
                                Private f32* %162 = OpAccessChain %153 %124 
                                                      OpStore %162 %161 
                              Uniform f32_4* %165 = OpAccessChain %24 %164 
                                       f32_4 %166 = OpLoad %165 
                                       f32_3 %167 = OpVectorShuffle %166 %166 3 3 3 
                              Uniform f32_4* %168 = OpAccessChain %24 %164 
                                       f32_4 %169 = OpLoad %168 
                                       f32_3 %170 = OpVectorShuffle %169 %169 0 1 2 
                                       f32_3 %171 = OpFMul %167 %170 
                                       f32_4 %172 = OpLoad %163 
                                       f32_4 %173 = OpVectorShuffle %172 %171 4 5 6 3 
                                                      OpStore %163 %173 
                                Uniform f32* %174 = OpAccessChain %24 %164 %124 
                                         f32 %175 = OpLoad %174 
                                Private f32* %176 = OpAccessChain %163 %124 
                                                      OpStore %176 %175 
                                       f32_4 %177 = OpLoad %153 
                                       f32_4 %178 = OpLoad %163 
                                       f32_4 %179 = OpFAdd %177 %178 
                                                      OpStore %153 %179 
                                       f32_4 %181 = OpLoad %36 
                                       f32_3 %182 = OpVectorShuffle %181 %181 0 1 2 
                                       f32_4 %183 = OpLoad %36 
                                       f32_3 %184 = OpVectorShuffle %183 %183 0 1 2 
                                         f32 %185 = OpDot %182 %184 
                                                      OpStore %180 %185 
                                         f32 %186 = OpLoad %180 
                                         f32 %187 = OpExtInst %1 32 %186 
                                                      OpStore %180 %187 
                                         f32 %188 = OpLoad %180 
                                       f32_3 %189 = OpCompositeConstruct %188 %188 %188 
                                       f32_4 %190 = OpLoad %36 
                                       f32_3 %191 = OpVectorShuffle %190 %190 0 1 2 
                                       f32_3 %192 = OpFMul %189 %191 
                                       f32_4 %193 = OpLoad %36 
                                       f32_4 %194 = OpVectorShuffle %193 %192 4 5 6 3 
                                                      OpStore %36 %194 
                                       f32_3 %197 = OpLoad %196 
                              Uniform f32_4* %199 = OpAccessChain %24 %198 %45 
                                       f32_4 %200 = OpLoad %199 
                                       f32_3 %201 = OpVectorShuffle %200 %200 0 1 2 
                                         f32 %202 = OpDot %197 %201 
                                Private f32* %204 = OpAccessChain %86 %203 
                                                      OpStore %204 %202 
                                       f32_3 %205 = OpLoad %196 
                              Uniform f32_4* %206 = OpAccessChain %24 %198 %40 
                                       f32_4 %207 = OpLoad %206 
                                       f32_3 %208 = OpVectorShuffle %207 %207 0 1 2 
                                         f32 %209 = OpDot %205 %208 
                                Private f32* %210 = OpAccessChain %86 %114 
                                                      OpStore %210 %209 
                                       f32_3 %211 = OpLoad %196 
                              Uniform f32_4* %212 = OpAccessChain %24 %198 %53 
                                       f32_4 %213 = OpLoad %212 
                                       f32_3 %214 = OpVectorShuffle %213 %213 0 1 2 
                                         f32 %215 = OpDot %211 %214 
                                Private f32* %217 = OpAccessChain %86 %216 
                                                      OpStore %217 %215 
                                       f32_4 %218 = OpLoad %86 
                                       f32_3 %219 = OpVectorShuffle %218 %218 0 1 2 
                                       f32_4 %220 = OpLoad %86 
                                       f32_3 %221 = OpVectorShuffle %220 %220 0 1 2 
                                         f32 %222 = OpDot %219 %221 
                                                      OpStore %180 %222 
                                         f32 %223 = OpLoad %180 
                                         f32 %224 = OpExtInst %1 32 %223 
                                                      OpStore %180 %224 
                                         f32 %225 = OpLoad %180 
                                       f32_3 %226 = OpCompositeConstruct %225 %225 %225 
                                       f32_4 %227 = OpLoad %86 
                                       f32_3 %228 = OpVectorShuffle %227 %227 0 1 2 
                                       f32_3 %229 = OpFMul %226 %228 
                                       f32_4 %230 = OpLoad %86 
                                       f32_4 %231 = OpVectorShuffle %230 %229 4 5 6 3 
                                                      OpStore %86 %231 
                                       f32_4 %232 = OpLoad %86 
                                       f32_3 %233 = OpVectorShuffle %232 %232 0 1 2 
                                       f32_4 %234 = OpLoad %36 
                                       f32_3 %235 = OpVectorShuffle %234 %234 0 1 2 
                                         f32 %236 = OpDot %233 %235 
                                                      OpStore %180 %236 
                              Uniform f32_4* %237 = OpAccessChain %24 %53 
                                       f32_4 %238 = OpLoad %237 
                                       f32_2 %239 = OpVectorShuffle %238 %238 1 1 
                              Uniform f32_4* %241 = OpAccessChain %24 %240 %40 
                                       f32_4 %242 = OpLoad %241 
                                       f32_2 %243 = OpVectorShuffle %242 %242 0 1 
                                       f32_2 %244 = OpFMul %239 %243 
                                       f32_4 %245 = OpLoad %36 
                                       f32_4 %246 = OpVectorShuffle %245 %244 4 5 2 3 
                                                      OpStore %36 %246 
                              Uniform f32_4* %247 = OpAccessChain %24 %240 %45 
                                       f32_4 %248 = OpLoad %247 
                                       f32_2 %249 = OpVectorShuffle %248 %248 0 1 
                              Uniform f32_4* %250 = OpAccessChain %24 %53 
                                       f32_4 %251 = OpLoad %250 
                                       f32_2 %252 = OpVectorShuffle %251 %251 0 0 
                                       f32_2 %253 = OpFMul %249 %252 
                                       f32_4 %254 = OpLoad %36 
                                       f32_2 %255 = OpVectorShuffle %254 %254 0 1 
                                       f32_2 %256 = OpFAdd %253 %255 
                                       f32_4 %257 = OpLoad %36 
                                       f32_4 %258 = OpVectorShuffle %257 %256 4 5 2 3 
                                                      OpStore %36 %258 
                                       f32_4 %259 = OpLoad %36 
                                       f32_2 %260 = OpVectorShuffle %259 %259 0 1 
                                       f32_2 %261 = OpExtInst %1 4 %260 
                                Uniform f32* %263 = OpAccessChain %24 %262 
                                         f32 %264 = OpLoad %263 
                                Uniform f32* %266 = OpAccessChain %24 %265 
                                         f32 %267 = OpLoad %266 
                                       f32_2 %268 = OpCompositeConstruct %264 %267 
                                       f32_2 %269 = OpFMul %261 %268 
                                       f32_4 %270 = OpLoad %36 
                                       f32_4 %271 = OpVectorShuffle %270 %269 4 5 2 3 
                                                      OpStore %36 %271 
                                       f32_4 %272 = OpLoad %61 
                                       f32_2 %273 = OpVectorShuffle %272 %272 3 3 
                                       f32_4 %274 = OpLoad %36 
                                       f32_2 %275 = OpVectorShuffle %274 %274 0 1 
                                       f32_2 %276 = OpFDiv %273 %275 
                                       f32_4 %277 = OpLoad %36 
                                       f32_4 %278 = OpVectorShuffle %277 %276 4 5 2 3 
                                                      OpStore %36 %278 
                                Private f32* %280 = OpAccessChain %61 %216 
                                         f32 %281 = OpLoad %280 
                                Uniform f32* %282 = OpAccessChain %24 %40 %114 
                                         f32 %283 = OpLoad %282 
                                         f32 %284 = OpFDiv %281 %283 
                                                      OpStore %279 %284 
                                         f32 %285 = OpLoad %279 
                                         f32 %286 = OpFNegate %285 
                                         f32 %287 = OpFAdd %286 %134 
                                                      OpStore %279 %287 
                                         f32 %288 = OpLoad %279 
                                Uniform f32* %289 = OpAccessChain %24 %40 %216 
                                         f32 %290 = OpLoad %289 
                                         f32 %291 = OpFMul %288 %290 
                                                      OpStore %279 %291 
                                         f32 %292 = OpLoad %279 
                                         f32 %294 = OpExtInst %1 40 %292 %293 
                                                      OpStore %279 %294 
                                         f32 %296 = OpLoad %279 
                                Uniform f32* %298 = OpAccessChain %24 %297 %216 
                                         f32 %299 = OpLoad %298 
                                         f32 %300 = OpFMul %296 %299 
                                Uniform f32* %301 = OpAccessChain %24 %297 %124 
                                         f32 %302 = OpLoad %301 
                                         f32 %303 = OpFAdd %300 %302 
                                                      OpStore vs_TEXCOORDn0 %303 
                                       f32_4 %304 = OpLoad %36 
                                       f32_2 %305 = OpVectorShuffle %304 %304 0 1 
                                       f32_4 %306 = OpLoad %36 
                                       f32_2 %307 = OpVectorShuffle %306 %306 0 1 
                                         f32 %308 = OpDot %305 %307 
                                                      OpStore %279 %308 
                                Uniform f32* %310 = OpAccessChain %24 %309 
                                         f32 %311 = OpLoad %310 
                                Uniform f32* %313 = OpAccessChain %24 %312 
                                         f32 %314 = OpLoad %313 
                                       f32_2 %315 = OpCompositeConstruct %311 %314 
                                       f32_2 %318 = OpFMul %315 %317 
                                       f32_4 %319 = OpLoad %36 
                                       f32_2 %320 = OpVectorShuffle %319 %319 0 1 
                                       f32_2 %321 = OpFAdd %318 %320 
                                       f32_4 %322 = OpLoad %36 
                                       f32_4 %323 = OpVectorShuffle %322 %321 4 5 2 3 
                                                      OpStore %36 %323 
                                       f32_4 %325 = OpLoad %36 
                                       f32_2 %326 = OpVectorShuffle %325 %325 0 1 
                                       f32_2 %327 = OpFDiv %317 %326 
                                       f32_4 %328 = OpLoad vs_TEXCOORD2 
                                       f32_4 %329 = OpVectorShuffle %328 %327 0 1 4 5 
                                                      OpStore vs_TEXCOORD2 %329 
                                         f32 %330 = OpLoad %279 
                                         f32 %331 = OpExtInst %1 32 %330 
                                                      OpStore %279 %331 
                                  Input f32* %335 = OpAccessChain %333 %114 
                                         f32 %336 = OpLoad %335 
                                         f32 %337 = OpExtInst %1 4 %336 
                                Uniform f32* %339 = OpAccessChain %24 %338 
                                         f32 %340 = OpLoad %339 
                                         f32 %341 = OpFMul %337 %340 
                                Private f32* %342 = OpAccessChain %36 %203 
                                                      OpStore %342 %341 
                                Uniform f32* %345 = OpAccessChain %24 %344 
                                         f32 %346 = OpLoad %345 
                                         f32 %347 = OpFAdd %346 %134 
                                Private f32* %348 = OpAccessChain %343 %203 
                                                      OpStore %348 %347 
                                Private f32* %349 = OpAccessChain %343 %203 
                                         f32 %350 = OpLoad %349 
                                Private f32* %351 = OpAccessChain %36 %203 
                                         f32 %352 = OpLoad %351 
                                         f32 %353 = OpFMul %350 %352 
                                Private f32* %354 = OpAccessChain %36 %203 
                                                      OpStore %354 %353 
                                         f32 %355 = OpLoad %279 
                                Private f32* %356 = OpAccessChain %36 %203 
                                         f32 %357 = OpLoad %356 
                                         f32 %358 = OpFMul %355 %357 
                                Private f32* %359 = OpAccessChain %343 %203 
                                                      OpStore %359 %358 
                                Uniform f32* %362 = OpAccessChain %24 %361 
                                         f32 %363 = OpLoad %362 
                                         f32 %364 = OpFNegate %363 
                                         f32 %365 = OpFAdd %364 %134 
                                                      OpStore %360 %365 
                                         f32 %366 = OpLoad %360 
                                Private f32* %367 = OpAccessChain %343 %203 
                                         f32 %368 = OpLoad %367 
                                         f32 %369 = OpExtInst %1 4 %368 
                                         f32 %370 = OpFMul %366 %369 
                                                      OpStore %360 %370 
                                         f32 %371 = OpLoad %279 
                                Private f32* %372 = OpAccessChain %36 %203 
                                         f32 %373 = OpLoad %372 
                                         f32 %374 = OpFMul %371 %373 
                                         f32 %375 = OpLoad %360 
                                         f32 %376 = OpFNegate %375 
                                         f32 %377 = OpFAdd %374 %376 
                                                      OpStore %279 %377 
                                         f32 %378 = OpLoad %180 
                                         f32 %379 = OpExtInst %1 4 %378 
                                         f32 %380 = OpLoad %279 
                                         f32 %381 = OpFMul %379 %380 
                                         f32 %382 = OpLoad %360 
                                         f32 %383 = OpFAdd %381 %382 
                                                      OpStore %180 %383 
                                Uniform f32* %387 = OpAccessChain %24 %240 %39 %124 
                                         f32 %388 = OpLoad %387 
                                        bool %389 = OpFOrdEqual %388 %293 
                                                      OpStore %386 %389 
                                        bool %390 = OpLoad %386 
                                                      OpSelectionMerge %394 None 
                                                      OpBranchConditional %390 %393 %396 
                                             %393 = OpLabel 
                                         f32 %395 = OpLoad %180 
                                                      OpStore %392 %395 
                                                      OpBranch %394 
                                             %396 = OpLabel 
                                Private f32* %397 = OpAccessChain %343 %203 
                                         f32 %398 = OpLoad %397 
                                                      OpStore %392 %398 
                                                      OpBranch %394 
                                             %394 = OpLabel 
                                         f32 %399 = OpLoad %392 
                                                      OpStore %180 %399 
                                Uniform f32* %401 = OpAccessChain %24 %400 
                                         f32 %402 = OpLoad %401 
                                Uniform f32* %404 = OpAccessChain %24 %403 
                                         f32 %405 = OpLoad %404 
                                         f32 %406 = OpFMul %402 %405 
                                                      OpStore %279 %406 
                                         f32 %407 = OpLoad %279 
                                         f32 %408 = OpLoad %180 
                                         f32 %409 = OpFMul %407 %408 
                                         f32 %410 = OpFAdd %409 %134 
                                                      OpStore %279 %410 
                                         f32 %411 = OpLoad %180 
                                         f32 %412 = OpLoad %279 
                                         f32 %413 = OpFDiv %411 %412 
                                Private f32* %414 = OpAccessChain %36 %203 
                                                      OpStore %414 %413 
                                Uniform f32* %416 = OpAccessChain %24 %415 
                                         f32 %417 = OpLoad %416 
                                Uniform f32* %418 = OpAccessChain %24 %403 
                                         f32 %419 = OpLoad %418 
                                         f32 %420 = OpFMul %417 %419 
                                                      OpStore %279 %420 
                                Private f32* %421 = OpAccessChain %36 %203 
                                         f32 %422 = OpLoad %421 
                                         f32 %423 = OpLoad %279 
                                         f32 %424 = OpFMul %422 %423 
                                                      OpStore %279 %424 
                                         f32 %425 = OpLoad %279 
                                         f32 %426 = OpExtInst %1 37 %425 %134 
                                Private f32* %427 = OpAccessChain %343 %203 
                                                      OpStore %427 %426 
                                Private f32* %428 = OpAccessChain %343 %203 
                                         f32 %429 = OpLoad %428 
                                         f32 %430 = OpExtInst %1 31 %429 
                                Private f32* %431 = OpAccessChain %343 %203 
                                                      OpStore %431 %430 
                                       f32_4 %432 = OpLoad %153 
                                       f32_2 %433 = OpLoad %343 
                                       f32_4 %434 = OpVectorShuffle %433 %433 0 0 0 0 
                                       f32_4 %435 = OpFMul %432 %434 
                                                      OpStore %61 %435 
                                       f32_4 %437 = OpLoad %137 
                                       f32_3 %438 = OpVectorShuffle %437 %437 0 1 2 
                                       f32_4 %439 = OpLoad %137 
                                       f32_3 %440 = OpVectorShuffle %439 %439 3 3 3 
                                       f32_3 %441 = OpFMul %438 %440 
                                       f32_4 %442 = OpLoad %61 
                                       f32_3 %443 = OpVectorShuffle %442 %442 0 1 2 
                                       f32_3 %444 = OpFAdd %441 %443 
                                       f32_4 %445 = OpLoad %436 
                                       f32_4 %446 = OpVectorShuffle %445 %444 4 5 6 3 
                                                      OpStore %436 %446 
                                Private f32* %447 = OpAccessChain %86 %124 
                                         f32 %448 = OpLoad %447 
                                Uniform f32* %449 = OpAccessChain %24 %123 %124 
                                         f32 %450 = OpLoad %449 
                                         f32 %451 = OpFMul %448 %450 
                                Private f32* %452 = OpAccessChain %61 %124 
                                         f32 %453 = OpLoad %452 
                                         f32 %454 = OpFAdd %451 %453 
                                 Output f32* %455 = OpAccessChain %436 %124 
                                                      OpStore %455 %454 
                              Uniform f32_4* %457 = OpAccessChain %24 %456 
                                       f32_4 %458 = OpLoad %457 
                                       f32_4 %461 = OpExtInst %1 40 %458 %460 
                                                      OpStore %61 %461 
                                       f32_4 %462 = OpLoad %61 
                                       f32_4 %465 = OpExtInst %1 37 %462 %464 
                                                      OpStore %61 %465 
                                       f32_2 %466 = OpLoad %9 
                                       f32_4 %467 = OpLoad %61 
                                       f32_2 %468 = OpVectorShuffle %467 %467 0 1 
                                       f32_2 %469 = OpFNegate %468 
                                       f32_2 %470 = OpFAdd %466 %469 
                                                      OpStore %343 %470 
                                       f32_2 %471 = OpLoad %9 
                                       f32_2 %474 = OpFMul %471 %473 
                                       f32_4 %475 = OpLoad %61 
                                       f32_2 %476 = OpVectorShuffle %475 %475 0 1 
                                       f32_2 %477 = OpFNegate %476 
                                       f32_2 %478 = OpFAdd %474 %477 
                                                      OpStore %9 %478 
                                       f32_4 %479 = OpLoad %61 
                                       f32_2 %480 = OpVectorShuffle %479 %479 2 3 
                                       f32_2 %481 = OpFNegate %480 
                                       f32_2 %482 = OpLoad %9 
                                       f32_2 %483 = OpFAdd %481 %482 
                                       f32_4 %484 = OpLoad vs_TEXCOORD2 
                                       f32_4 %485 = OpVectorShuffle %484 %483 4 5 2 3 
                                                      OpStore vs_TEXCOORD2 %485 
                                       f32_4 %486 = OpLoad %61 
                                       f32_2 %487 = OpVectorShuffle %486 %486 0 1 
                                       f32_2 %488 = OpFNegate %487 
                                       f32_4 %489 = OpLoad %61 
                                       f32_2 %490 = OpVectorShuffle %489 %489 2 3 
                                       f32_2 %491 = OpFAdd %488 %490 
                                                      OpStore %9 %491 
                                       f32_2 %493 = OpLoad %343 
                                       f32_2 %494 = OpLoad %9 
                                       f32_2 %495 = OpFDiv %493 %494 
                                       f32_4 %496 = OpLoad vs_TEXCOORD0 
                                       f32_4 %497 = OpVectorShuffle %496 %495 0 1 4 5 
                                                      OpStore vs_TEXCOORD0 %497 
                                       f32_2 %499 = OpLoad %498 
                                       f32_4 %500 = OpLoad vs_TEXCOORD0 
                                       f32_4 %501 = OpVectorShuffle %500 %499 4 5 2 3 
                                                      OpStore vs_TEXCOORD0 %501 
                                  Input f32* %503 = OpAccessChain %333 %114 
                                         f32 %504 = OpLoad %503 
                                        bool %505 = OpFOrdGreaterThanEqual %293 %504 
                                                      OpStore %502 %505 
                                        bool %506 = OpLoad %502 
                                         f32 %507 = OpSelect %506 %134 %293 
                                Private f32* %508 = OpAccessChain %9 %203 
                                                      OpStore %508 %507 
                                Uniform f32* %512 = OpAccessChain %24 %511 
                                         f32 %513 = OpLoad %512 
                                         f32 %514 = OpFNegate %513 
                                Uniform f32* %516 = OpAccessChain %24 %515 
                                         f32 %517 = OpLoad %516 
                                         f32 %518 = OpFAdd %514 %517 
                                Private f32* %519 = OpAccessChain %510 %203 
                                                      OpStore %519 %518 
                                Private f32* %520 = OpAccessChain %9 %203 
                                         f32 %521 = OpLoad %520 
                                Private f32* %522 = OpAccessChain %510 %203 
                                         f32 %523 = OpLoad %522 
                                         f32 %524 = OpFMul %521 %523 
                                Uniform f32* %525 = OpAccessChain %24 %511 
                                         f32 %526 = OpLoad %525 
                                         f32 %527 = OpFAdd %524 %526 
                                Private f32* %528 = OpAccessChain %9 %203 
                                                      OpStore %528 %527 
                                Private f32* %529 = OpAccessChain %9 %203 
                                         f32 %530 = OpLoad %529 
                                         f32 %531 = OpFMul %530 %316 
                                Uniform f32* %533 = OpAccessChain %24 %532 
                                         f32 %534 = OpLoad %533 
                                         f32 %535 = OpFAdd %531 %534 
                                Private f32* %536 = OpAccessChain %9 %203 
                                                      OpStore %536 %535 
                                Private f32* %537 = OpAccessChain %9 %203 
                                         f32 %538 = OpLoad %537 
                                Uniform f32* %539 = OpAccessChain %24 %403 
                                         f32 %540 = OpLoad %539 
                                         f32 %541 = OpFMul %538 %540 
                                Private f32* %542 = OpAccessChain %9 %203 
                                                      OpStore %542 %541 
                                Private f32* %543 = OpAccessChain %9 %203 
                                         f32 %544 = OpLoad %543 
                                         f32 %545 = OpFNegate %544 
                                         f32 %547 = OpFMul %545 %546 
                                         f32 %548 = OpFAdd %547 %546 
                                Private f32* %549 = OpAccessChain %9 %203 
                                                      OpStore %549 %548 
                                Private f32* %550 = OpAccessChain %9 %203 
                                         f32 %551 = OpLoad %550 
                                Private f32* %552 = OpAccessChain %36 %203 
                                         f32 %553 = OpLoad %552 
                                         f32 %554 = OpFMul %551 %553 
                                         f32 %556 = OpFAdd %554 %555 
                                Private f32* %557 = OpAccessChain %36 %124 
                                                      OpStore %557 %556 
                                       f32_4 %559 = OpLoad %36 
                                       f32_2 %560 = OpVectorShuffle %559 %559 0 3 
                                       f32_4 %561 = OpLoad vs_TEXCOORD1 
                                       f32_4 %562 = OpVectorShuffle %561 %560 4 1 2 5 
                                                      OpStore vs_TEXCOORD1 %562 
                                         f32 %563 = OpLoad %279 
                                         f32 %564 = OpFNegate %563 
                                         f32 %565 = OpFMul %564 %546 
                                Private f32* %566 = OpAccessChain %36 %124 
                                         f32 %567 = OpLoad %566 
                                         f32 %568 = OpFAdd %565 %567 
                                 Output f32* %569 = OpAccessChain vs_TEXCOORD1 %114 
                                                      OpStore %569 %568 
                                         f32 %570 = OpLoad %279 
                                         f32 %571 = OpFMul %570 %546 
                                Private f32* %572 = OpAccessChain %36 %124 
                                         f32 %573 = OpLoad %572 
                                         f32 %574 = OpFAdd %571 %573 
                                 Output f32* %575 = OpAccessChain vs_TEXCOORD1 %216 
                                                      OpStore %575 %574 
                                  Input f32* %577 = OpAccessChain %129 %124 
                                         f32 %578 = OpLoad %577 
                                 Output f32* %579 = OpAccessChain vs_TEXCOORD3 %216 
                                                      OpStore %579 %578 
                                 Output f32* %580 = OpAccessChain vs_TEXCOORD3 %124 
                                                      OpStore %580 %293 
                                Uniform f32* %582 = OpAccessChain %24 %581 
                                         f32 %583 = OpLoad %582 
                                Uniform f32* %585 = OpAccessChain %24 %584 
                                         f32 %586 = OpLoad %585 
                                Uniform f32* %588 = OpAccessChain %24 %587 
                                         f32 %589 = OpLoad %588 
                                Uniform f32* %591 = OpAccessChain %24 %590 
                                         f32 %592 = OpLoad %591 
                                       f32_4 %593 = OpCompositeConstruct %583 %586 %589 %592 
                                Uniform f32* %595 = OpAccessChain %24 %594 
                                         f32 %596 = OpLoad %595 
                                Uniform f32* %597 = OpAccessChain %24 %594 
                                         f32 %598 = OpLoad %597 
                                Uniform f32* %599 = OpAccessChain %24 %594 
                                         f32 %600 = OpLoad %599 
                                Uniform f32* %601 = OpAccessChain %24 %594 
                                         f32 %602 = OpLoad %601 
                                       f32_4 %603 = OpCompositeConstruct %596 %598 %600 %602 
                                         f32 %604 = OpCompositeExtract %603 0 
                                         f32 %605 = OpCompositeExtract %603 1 
                                         f32 %606 = OpCompositeExtract %603 2 
                                         f32 %607 = OpCompositeExtract %603 3 
                                       f32_4 %608 = OpCompositeConstruct %604 %605 %606 %607 
                                       f32_4 %609 = OpFMul %593 %608 
                                                      OpStore %36 %609 
                                       f32_4 %610 = OpLoad %36 
                                       f32_2 %611 = OpVectorShuffle %610 %610 2 3 
                                       f32_2 %612 = OpFNegate %611 
                                Uniform f32* %613 = OpAccessChain %24 %338 
                                         f32 %614 = OpLoad %613 
                                       f32_2 %615 = OpCompositeConstruct %614 %614 
                                       f32_2 %616 = OpFMul %612 %615 
                                       f32_3 %617 = OpLoad %510 
                                       f32_3 %618 = OpVectorShuffle %617 %616 3 1 4 
                                                      OpStore %510 %618 
                                       f32_3 %619 = OpLoad %510 
                                       f32_2 %620 = OpVectorShuffle %619 %619 0 2 
                                Uniform f32* %622 = OpAccessChain %24 %621 
                                         f32 %623 = OpLoad %622 
                                Uniform f32* %625 = OpAccessChain %24 %624 
                                         f32 %626 = OpLoad %625 
                                       f32_2 %627 = OpCompositeConstruct %623 %626 
                                       f32_2 %628 = OpFDiv %620 %627 
                                       f32_3 %629 = OpLoad %510 
                                       f32_3 %630 = OpVectorShuffle %629 %628 3 1 4 
                                                      OpStore %510 %630 
                                       f32_3 %631 = OpLoad %510 
                                       f32_2 %632 = OpVectorShuffle %631 %631 0 2 
                                       f32_2 %633 = OpLoad %498 
                                       f32_2 %634 = OpFAdd %632 %633 
                                       f32_4 %635 = OpLoad vs_TEXCOORD3 
                                       f32_4 %636 = OpVectorShuffle %635 %634 4 5 2 3 
                                                      OpStore vs_TEXCOORD3 %636 
                                Private f32* %637 = OpAccessChain %36 %203 
                                         f32 %638 = OpLoad %637 
                                         f32 %639 = OpLoad %180 
                                         f32 %640 = OpFMul %638 %639 
                                         f32 %641 = OpFAdd %640 %134 
                                Private f32* %642 = OpAccessChain %510 %203 
                                                      OpStore %642 %641 
                                         f32 %643 = OpLoad %180 
                                Private f32* %644 = OpAccessChain %510 %203 
                                         f32 %645 = OpLoad %644 
                                         f32 %646 = OpFDiv %643 %645 
                                Private f32* %647 = OpAccessChain %510 %203 
                                                      OpStore %647 %646 
                                Private f32* %648 = OpAccessChain %510 %203 
                                         f32 %649 = OpLoad %648 
                                Private f32* %650 = OpAccessChain %36 %114 
                                         f32 %651 = OpLoad %650 
                                         f32 %652 = OpFMul %649 %651 
                                                      OpStore %180 %652 
                                Private f32* %653 = OpAccessChain %9 %203 
                                         f32 %654 = OpLoad %653 
                                Private f32* %655 = OpAccessChain %510 %203 
                                         f32 %656 = OpLoad %655 
                                         f32 %657 = OpFMul %654 %656 
                                         f32 %658 = OpFAdd %657 %555 
                                Private f32* %659 = OpAccessChain %9 %203 
                                                      OpStore %659 %658 
                                Private f32* %662 = OpAccessChain %510 %203 
                                         f32 %663 = OpLoad %662 
                                 Output f32* %664 = OpAccessChain vs_TEXCOORD4 %203 
                                                      OpStore %664 %663 
                                         f32 %665 = OpLoad %180 
                                         f32 %666 = OpFNegate %665 
                                         f32 %667 = OpFMul %666 %546 
                                Private f32* %668 = OpAccessChain %9 %203 
                                         f32 %669 = OpLoad %668 
                                         f32 %670 = OpFAdd %667 %669 
                                 Output f32* %671 = OpAccessChain vs_TEXCOORD4 %114 
                                                      OpStore %671 %670 
                                 Output f32* %672 = OpAccessChain %118 %45 %114 
                                         f32 %673 = OpLoad %672 
                                         f32 %674 = OpFNegate %673 
                                 Output f32* %675 = OpAccessChain %118 %45 %114 
                                                      OpStore %675 %674 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 184
; Schema: 0
                                             OpCapability Shader 
                                      %1 = OpExtInstImport "GLSL.std.450" 
                                             OpMemoryModel Logical GLSL450 
                                             OpEntryPoint Fragment %4 "main" %21 %35 %80 %88 %104 %164 %168 
                                             OpExecutionMode %4 OriginUpperLeft 
                                             OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                             OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                             OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                             OpName vs_TEXCOORDn0 "vs_TEXCOORDn0" 
                                             OpDecorate %12 DescriptorSet 12 
                                             OpDecorate %12 Binding 12 
                                             OpDecorate %16 DescriptorSet 16 
                                             OpDecorate %16 Binding 16 
                                             OpDecorate vs_TEXCOORD3 Location 21 
                                             OpDecorate vs_TEXCOORD4 Location 35 
                                             OpMemberDecorate %53 0 Offset 53 
                                             OpMemberDecorate %53 1 Offset 53 
                                             OpDecorate %53 Block 
                                             OpDecorate %55 DescriptorSet 55 
                                             OpDecorate %55 Binding 55 
                                             OpDecorate vs_TEXCOORD0 Location 80 
                                             OpDecorate vs_TEXCOORD1 Location 88 
                                             OpDecorate %104 Location 104 
                                             OpDecorate %164 Location 164 
                                             OpDecorate vs_TEXCOORDn0 Location 168 
                                      %2 = OpTypeVoid 
                                      %3 = OpTypeFunction %2 
                                      %6 = OpTypeFloat 32 
                                      %7 = OpTypeVector %6 4 
                                      %8 = OpTypePointer Private %7 
                       Private f32_4* %9 = OpVariable Private 
                                     %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                     %11 = OpTypePointer UniformConstant %10 
UniformConstant read_only Texture2D* %12 = OpVariable UniformConstant 
                                     %14 = OpTypeSampler 
                                     %15 = OpTypePointer UniformConstant %14 
            UniformConstant sampler* %16 = OpVariable UniformConstant 
                                     %18 = OpTypeSampledImage %10 
                                     %20 = OpTypePointer Input %7 
               Input f32_4* vs_TEXCOORD3 = OpVariable Input 
                                     %22 = OpTypeVector %6 2 
                                     %26 = OpTypeInt 32 0 
                                 u32 %27 = OpConstant 3 
                                 u32 %29 = OpConstant 0 
                                     %30 = OpTypePointer Private %6 
                                     %34 = OpTypePointer Input %22 
               Input f32_2* vs_TEXCOORD4 = OpVariable Input 
                                     %36 = OpTypePointer Input %6 
                                 u32 %40 = OpConstant 1 
                                 f32 %48 = OpConstant 3.674022E-40 
                                 f32 %49 = OpConstant 3.674022E-40 
                      Private f32_4* %52 = OpVariable Private 
                                     %53 = OpTypeStruct %7 %7 
                                     %54 = OpTypePointer Uniform %53 
     Uniform struct {f32_4; f32_4;}* %55 = OpVariable Uniform 
                                     %56 = OpTypeInt 32 1 
                                 i32 %57 = OpConstant 1 
                                     %58 = OpTypeVector %6 3 
                                     %59 = OpTypePointer Uniform %7 
                                     %69 = OpTypePointer Uniform %6 
               Input f32_4* vs_TEXCOORD0 = OpVariable Input 
               Input f32_4* vs_TEXCOORD1 = OpVariable Input 
                     Private f32_4* %101 = OpVariable Private 
                       Input f32_4* %104 = OpVariable Input 
                                u32 %123 = OpConstant 2 
                                f32 %127 = OpConstant 3.674022E-40 
                                    %130 = OpTypeBool 
                                    %131 = OpTypePointer Private %130 
                      Private bool* %132 = OpVariable Private 
                                i32 %137 = OpConstant 0 
                                i32 %139 = OpConstant -1 
                       Private f32* %157 = OpVariable Private 
                                    %163 = OpTypePointer Output %7 
                      Output f32_4* %164 = OpVariable Output 
                                    %166 = OpTypePointer Output %6 
                Input f32* vs_TEXCOORDn0 = OpVariable Input 
                                 void %4 = OpFunction None %3 
                                      %5 = OpLabel 
                 read_only Texture2D %13 = OpLoad %12 
                             sampler %17 = OpLoad %16 
          read_only Texture2DSampled %19 = OpSampledImage %13 %17 
                               f32_4 %23 = OpLoad vs_TEXCOORD3 
                               f32_2 %24 = OpVectorShuffle %23 %23 0 1 
                               f32_4 %25 = OpImageSampleImplicitLod %19 %24 
                                 f32 %28 = OpCompositeExtract %25 3 
                        Private f32* %31 = OpAccessChain %9 %29 
                                             OpStore %31 %28 
                        Private f32* %32 = OpAccessChain %9 %29 
                                 f32 %33 = OpLoad %32 
                          Input f32* %37 = OpAccessChain vs_TEXCOORD4 %29 
                                 f32 %38 = OpLoad %37 
                                 f32 %39 = OpFMul %33 %38 
                          Input f32* %41 = OpAccessChain vs_TEXCOORD4 %40 
                                 f32 %42 = OpLoad %41 
                                 f32 %43 = OpFNegate %42 
                                 f32 %44 = OpFAdd %39 %43 
                        Private f32* %45 = OpAccessChain %9 %29 
                                             OpStore %45 %44 
                        Private f32* %46 = OpAccessChain %9 %29 
                                 f32 %47 = OpLoad %46 
                                 f32 %50 = OpExtInst %1 43 %47 %48 %49 
                        Private f32* %51 = OpAccessChain %9 %29 
                                             OpStore %51 %50 
                      Uniform f32_4* %60 = OpAccessChain %55 %57 
                               f32_4 %61 = OpLoad %60 
                               f32_3 %62 = OpVectorShuffle %61 %61 3 3 3 
                      Uniform f32_4* %63 = OpAccessChain %55 %57 
                               f32_4 %64 = OpLoad %63 
                               f32_3 %65 = OpVectorShuffle %64 %64 0 1 2 
                               f32_3 %66 = OpFMul %62 %65 
                               f32_4 %67 = OpLoad %52 
                               f32_4 %68 = OpVectorShuffle %67 %66 4 5 6 3 
                                             OpStore %52 %68 
                        Uniform f32* %70 = OpAccessChain %55 %57 %27 
                                 f32 %71 = OpLoad %70 
                        Private f32* %72 = OpAccessChain %52 %27 
                                             OpStore %72 %71 
                               f32_4 %73 = OpLoad %9 
                               f32_4 %74 = OpVectorShuffle %73 %73 0 0 0 0 
                               f32_4 %75 = OpLoad %52 
                               f32_4 %76 = OpFMul %74 %75 
                                             OpStore %9 %76 
                 read_only Texture2D %77 = OpLoad %12 
                             sampler %78 = OpLoad %16 
          read_only Texture2DSampled %79 = OpSampledImage %77 %78 
                               f32_4 %81 = OpLoad vs_TEXCOORD0 
                               f32_2 %82 = OpVectorShuffle %81 %81 0 1 
                               f32_4 %83 = OpImageSampleImplicitLod %79 %82 
                                 f32 %84 = OpCompositeExtract %83 3 
                        Private f32* %85 = OpAccessChain %52 %29 
                                             OpStore %85 %84 
                        Private f32* %86 = OpAccessChain %52 %29 
                                 f32 %87 = OpLoad %86 
                          Input f32* %89 = OpAccessChain vs_TEXCOORD1 %29 
                                 f32 %90 = OpLoad %89 
                                 f32 %91 = OpFMul %87 %90 
                          Input f32* %92 = OpAccessChain vs_TEXCOORD1 %27 
                                 f32 %93 = OpLoad %92 
                                 f32 %94 = OpFNegate %93 
                                 f32 %95 = OpFAdd %91 %94 
                        Private f32* %96 = OpAccessChain %52 %29 
                                             OpStore %96 %95 
                        Private f32* %97 = OpAccessChain %52 %29 
                                 f32 %98 = OpLoad %97 
                                 f32 %99 = OpExtInst %1 43 %98 %48 %49 
                       Private f32* %100 = OpAccessChain %52 %29 
                                             OpStore %100 %99 
                              f32_4 %102 = OpLoad %52 
                              f32_4 %103 = OpVectorShuffle %102 %102 0 0 0 0 
                              f32_4 %105 = OpLoad %104 
                              f32_4 %106 = OpFMul %103 %105 
                                             OpStore %101 %106 
                         Input f32* %107 = OpAccessChain %104 %27 
                                f32 %108 = OpLoad %107 
                                f32 %109 = OpFNegate %108 
                       Private f32* %110 = OpAccessChain %52 %29 
                                f32 %111 = OpLoad %110 
                                f32 %112 = OpFMul %109 %111 
                                f32 %113 = OpFAdd %112 %49 
                       Private f32* %114 = OpAccessChain %52 %29 
                                             OpStore %114 %113 
                              f32_4 %115 = OpLoad %9 
                              f32_4 %116 = OpLoad %52 
                              f32_4 %117 = OpVectorShuffle %116 %116 0 0 0 0 
                              f32_4 %118 = OpFMul %115 %117 
                              f32_4 %119 = OpLoad %101 
                              f32_4 %120 = OpFAdd %118 %119 
                                             OpStore %9 %120 
                       Private f32* %121 = OpAccessChain %9 %27 
                                f32 %122 = OpLoad %121 
                         Input f32* %124 = OpAccessChain vs_TEXCOORD3 %123 
                                f32 %125 = OpLoad %124 
                                f32 %126 = OpFMul %122 %125 
                                f32 %128 = OpFAdd %126 %127 
                       Private f32* %129 = OpAccessChain %52 %29 
                                             OpStore %129 %128 
                       Private f32* %133 = OpAccessChain %52 %29 
                                f32 %134 = OpLoad %133 
                               bool %135 = OpFOrdLessThan %134 %48 
                                             OpStore %132 %135 
                               bool %136 = OpLoad %132 
                                i32 %138 = OpSelect %136 %57 %137 
                                i32 %140 = OpIMul %138 %139 
                               bool %141 = OpINotEqual %140 %137 
                                             OpSelectionMerge %143 None 
                                             OpBranchConditional %141 %142 %143 
                                    %142 = OpLabel 
                                             OpKill
                                    %143 = OpLabel 
                              f32_4 %145 = OpLoad %9 
                              f32_3 %146 = OpVectorShuffle %145 %145 0 1 2 
                              f32_4 %147 = OpLoad vs_TEXCOORD3 
                              f32_3 %148 = OpVectorShuffle %147 %147 2 2 2 
                              f32_3 %149 = OpFMul %146 %148 
                     Uniform f32_4* %150 = OpAccessChain %55 %137 
                              f32_4 %151 = OpLoad %150 
                              f32_3 %152 = OpVectorShuffle %151 %151 0 1 2 
                              f32_3 %153 = OpFNegate %152 
                              f32_3 %154 = OpFAdd %149 %153 
                              f32_4 %155 = OpLoad %9 
                              f32_4 %156 = OpVectorShuffle %155 %154 4 5 6 3 
                                             OpStore %9 %156 
                       Private f32* %158 = OpAccessChain %9 %27 
                                f32 %159 = OpLoad %158 
                         Input f32* %160 = OpAccessChain vs_TEXCOORD3 %123 
                                f32 %161 = OpLoad %160 
                                f32 %162 = OpFMul %159 %161 
                                             OpStore %157 %162 
                                f32 %165 = OpLoad %157 
                        Output f32* %167 = OpAccessChain %164 %27 
                                             OpStore %167 %165 
                                f32 %169 = OpLoad vs_TEXCOORDn0 
                                             OpStore %157 %169 
                                f32 %170 = OpLoad %157 
                                f32 %171 = OpExtInst %1 43 %170 %48 %49 
                                             OpStore %157 %171 
                                f32 %172 = OpLoad %157 
                              f32_3 %173 = OpCompositeConstruct %172 %172 %172 
                              f32_4 %174 = OpLoad %9 
                              f32_3 %175 = OpVectorShuffle %174 %174 0 1 2 
                              f32_3 %176 = OpFMul %173 %175 
                     Uniform f32_4* %177 = OpAccessChain %55 %137 
                              f32_4 %178 = OpLoad %177 
                              f32_3 %179 = OpVectorShuffle %178 %178 0 1 2 
                              f32_3 %180 = OpFAdd %176 %179 
                              f32_4 %181 = OpLoad %164 
                              f32_4 %182 = OpVectorShuffle %181 %180 4 5 6 3 
                                             OpStore %164 %182 
                                             OpReturn
                                             OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "FOG_LINEAR" "OUTLINE_ON" "UNDERLAY_ON" "UNITY_UI_ALPHACLIP" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "FOG_LINEAR" "OUTLINE_ON" "UNDERLAY_ON" "UNITY_UI_ALPHACLIP" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	vec4 _FaceColor;
uniform 	float _FaceDilate;
uniform 	float _OutlineSoftness;
uniform 	vec4 _OutlineColor;
uniform 	float _OutlineWidth;
uniform 	float _UnderlayOffsetX;
uniform 	float _UnderlayOffsetY;
uniform 	float _UnderlayDilate;
uniform 	float _UnderlaySoftness;
uniform 	float _WeightNormal;
uniform 	float _WeightBold;
uniform 	float _ScaleRatioA;
uniform 	float _ScaleRatioC;
uniform 	float _VertexOffsetX;
uniform 	float _VertexOffsetY;
uniform 	vec4 _ClipRect;
uniform 	float _MaskSoftnessX;
uniform 	float _MaskSoftnessY;
uniform 	float _TextureWidth;
uniform 	float _TextureHeight;
uniform 	float _GradientScale;
uniform 	float _ScaleX;
uniform 	float _ScaleY;
uniform 	float _PerspectiveFilter;
uniform 	float _Sharpness;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_COLOR0;
in  vec2 in_TEXCOORD0;
in  vec2 in_TEXCOORD1;
out vec4 vs_COLOR0;
out vec4 vs_COLOR1;
out vec4 vs_TEXCOORD0;
out vec4 vs_TEXCOORD1;
out vec4 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec2 vs_TEXCOORD4;
out float vs_TEXCOORDn0;
vec2 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
vec4 u_xlat6;
vec3 u_xlat7;
vec2 u_xlat8;
float u_xlat14;
float u_xlat15;
float u_xlat21;
bool u_xlatb21;
void main()
{
    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
    gl_Position = u_xlat2;
    vs_COLOR0.w = _FaceColor.w;
    u_xlat3.xyz = in_COLOR0.xyz;
    u_xlat3.w = 1.0;
    u_xlat4 = u_xlat3 * _FaceColor;
    u_xlat3.xyz = u_xlat4.www * u_xlat4.xyz;
    vs_COLOR0.xyz = u_xlat3.xyz;
    u_xlat5.xyz = (-u_xlat3.xyz);
    u_xlat5.w = (-u_xlat4.w);
    u_xlat6.xyz = _OutlineColor.www * _OutlineColor.xyz;
    u_xlat6.w = _OutlineColor.w;
    u_xlat5 = u_xlat5 + u_xlat6;
    u_xlat14 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat14 = inversesqrt(u_xlat14);
    u_xlat1.xyz = vec3(u_xlat14) * u_xlat1.xyz;
    u_xlat3.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat3.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat3.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat14 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat14 = inversesqrt(u_xlat14);
    u_xlat3.xyz = vec3(u_xlat14) * u_xlat3.xyz;
    u_xlat14 = dot(u_xlat3.xyz, u_xlat1.xyz);
    u_xlat1.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;
    u_xlat1.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat1.xy;
    u_xlat1.xy = abs(u_xlat1.xy) * vec2(_ScaleX, _ScaleY);
    u_xlat1.xy = u_xlat2.ww / u_xlat1.xy;
    vs_TEXCOORDn0 = u_xlat2.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat21 = dot(u_xlat1.xy, u_xlat1.xy);
    u_xlat1.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) * vec2(0.25, 0.25) + u_xlat1.xy;
    vs_TEXCOORD2.zw = vec2(0.25, 0.25) / u_xlat1.xy;
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.x = abs(in_TEXCOORD1.y) * _GradientScale;
    u_xlat8.x = _Sharpness + 1.0;
    u_xlat1.x = u_xlat8.x * u_xlat1.x;
    u_xlat8.x = u_xlat21 * u_xlat1.x;
    u_xlat15 = (-_PerspectiveFilter) + 1.0;
    u_xlat15 = u_xlat15 * abs(u_xlat8.x);
    u_xlat21 = u_xlat21 * u_xlat1.x + (-u_xlat15);
    u_xlat14 = abs(u_xlat14) * u_xlat21 + u_xlat15;
    u_xlatb21 = hlslcc_mtx4x4glstate_matrix_projection[3].w==0.0;
    u_xlat14 = (u_xlatb21) ? u_xlat14 : u_xlat8.x;
    u_xlat21 = _OutlineSoftness * _ScaleRatioA;
    u_xlat21 = u_xlat21 * u_xlat14 + 1.0;
    u_xlat1.x = u_xlat14 / u_xlat21;
    u_xlat21 = _OutlineWidth * _ScaleRatioA;
    u_xlat21 = u_xlat21 * 0.5;
    u_xlat8.x = u_xlat1.x * u_xlat21;
    u_xlat8.x = u_xlat8.x + u_xlat8.x;
    u_xlat8.x = min(u_xlat8.x, 1.0);
    u_xlat8.x = sqrt(u_xlat8.x);
    u_xlat2 = u_xlat5 * u_xlat8.xxxx;
    vs_COLOR1.xyz = u_xlat4.xyz * u_xlat4.www + u_xlat2.xyz;
    vs_COLOR1.w = u_xlat3.w * _FaceColor.w + u_xlat2.w;
    u_xlat2 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));
    u_xlat2 = min(u_xlat2, vec4(2e+10, 2e+10, 2e+10, 2e+10));
    u_xlat8.xy = u_xlat0.xy + (-u_xlat2.xy);
    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + (-u_xlat2.xy);
    vs_TEXCOORD2.xy = (-u_xlat2.zw) + u_xlat0.xy;
    u_xlat0.xy = (-u_xlat2.xy) + u_xlat2.zw;
    vs_TEXCOORD0.zw = u_xlat8.xy / u_xlat0.xy;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlatb0 = 0.0>=in_TEXCOORD1.y;
    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);
    u_xlat7.x = (-_WeightNormal) + _WeightBold;
    u_xlat0.x = u_xlat0.x * u_xlat7.x + _WeightNormal;
    u_xlat0.x = u_xlat0.x * 0.25 + _FaceDilate;
    u_xlat0.x = u_xlat0.x * _ScaleRatioA;
    u_xlat0.x = (-u_xlat0.x) * 0.5 + 0.5;
    u_xlat1.w = u_xlat0.x * u_xlat1.x + -0.5;
    vs_TEXCOORD1.y = (-u_xlat21) * u_xlat1.x + u_xlat1.w;
    vs_TEXCOORD1.z = u_xlat21 * u_xlat1.x + u_xlat1.w;
    vs_TEXCOORD1.xw = u_xlat1.xw;
    vs_TEXCOORD3.z = in_COLOR0.w;
    vs_TEXCOORD3.w = 0.0;
    u_xlat1 = vec4(_UnderlaySoftness, _UnderlayDilate, _UnderlayOffsetX, _UnderlayOffsetY) * vec4(vec4(_ScaleRatioC, _ScaleRatioC, _ScaleRatioC, _ScaleRatioC));
    u_xlat7.xz = (-u_xlat1.zw) * vec2(_GradientScale);
    u_xlat7.xz = u_xlat7.xz / vec2(_TextureWidth, _TextureHeight);
    vs_TEXCOORD3.xy = u_xlat7.xz + in_TEXCOORD0.xy;
    u_xlat7.x = u_xlat1.x * u_xlat14 + 1.0;
    u_xlat7.x = u_xlat14 / u_xlat7.x;
    u_xlat14 = u_xlat1.y * 0.5;
    u_xlat0.x = u_xlat0.x * u_xlat7.x + -0.5;
    vs_TEXCOORD4.y = (-u_xlat14) * u_xlat7.x + u_xlat0.x;
    vs_TEXCOORD4.x = u_xlat7.x;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 unity_FogColor;
uniform 	vec4 _UnderlayColor;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
in  vec4 vs_COLOR0;
in  vec4 vs_COLOR1;
in  vec4 vs_TEXCOORD0;
in  vec4 vs_TEXCOORD1;
in  vec4 vs_TEXCOORD3;
in  vec2 vs_TEXCOORD4;
in  float vs_TEXCOORDn0;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
vec4 u_xlat3;
float u_xlat12;
void main()
{
    u_xlat0 = texture(_MainTex, vs_TEXCOORD3.xy);
    u_xlat0.x = u_xlat0.w * vs_TEXCOORD4.x + (-vs_TEXCOORD4.y);
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat1.xyz = _UnderlayColor.www * _UnderlayColor.xyz;
    u_xlat1.w = _UnderlayColor.w;
    u_xlat0 = u_xlat0.xxxx * u_xlat1;
    u_xlat1 = vs_COLOR0 + (-vs_COLOR1);
    u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2.xy = u_xlat2.ww * vs_TEXCOORD1.xx + (-vs_TEXCOORD1.zy);
    u_xlat2.xy = clamp(u_xlat2.xy, 0.0, 1.0);
    u_xlat1 = u_xlat2.xxxx * u_xlat1 + vs_COLOR1;
    u_xlat3 = u_xlat2.yyyy * u_xlat1;
    u_xlat1.x = (-u_xlat1.w) * u_xlat2.y + 1.0;
    u_xlat0 = u_xlat0 * u_xlat1.xxxx + u_xlat3;
    u_xlat1.x = u_xlat0.w * vs_TEXCOORD3.z + -0.00100000005;
    u_xlatb1 = u_xlat1.x<0.0;
    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
    u_xlat0.xyz = u_xlat0.xyz * vs_TEXCOORD3.zzz + (-unity_FogColor.xyz);
    u_xlat12 = u_xlat0.w * vs_TEXCOORD3.z;
    SV_Target0.w = u_xlat12;
    u_xlat12 = vs_TEXCOORDn0;
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
    SV_Target0.xyz = vec3(u_xlat12) * u_xlat0.xyz + unity_FogColor.xyz;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "FOG_LINEAR" "OUTLINE_ON" "UNDERLAY_ON" "UNITY_UI_ALPHACLIP" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 677
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %12 %118 %122 %129 %196 %295 %324 %333 %436 %492 %498 %558 %576 %661 
                                                      OpName vs_TEXCOORDn0 "vs_TEXCOORDn0" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpDecorate %12 Location 12 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpDecorate %19 ArrayStride 19 
                                                      OpDecorate %20 ArrayStride 20 
                                                      OpDecorate %21 ArrayStride 21 
                                                      OpMemberDecorate %22 0 Offset 22 
                                                      OpMemberDecorate %22 1 Offset 22 
                                                      OpMemberDecorate %22 2 Offset 22 
                                                      OpMemberDecorate %22 3 Offset 22 
                                                      OpMemberDecorate %22 4 Offset 22 
                                                      OpMemberDecorate %22 5 Offset 22 
                                                      OpMemberDecorate %22 6 Offset 22 
                                                      OpMemberDecorate %22 7 Offset 22 
                                                      OpMemberDecorate %22 8 Offset 22 
                                                      OpMemberDecorate %22 9 Offset 22 
                                                      OpMemberDecorate %22 10 Offset 22 
                                                      OpMemberDecorate %22 11 Offset 22 
                                                      OpMemberDecorate %22 12 Offset 22 
                                                      OpMemberDecorate %22 13 Offset 22 
                                                      OpMemberDecorate %22 14 Offset 22 
                                                      OpMemberDecorate %22 15 Offset 22 
                                                      OpMemberDecorate %22 16 Offset 22 
                                                      OpMemberDecorate %22 17 Offset 22 
                                                      OpMemberDecorate %22 18 Offset 22 
                                                      OpMemberDecorate %22 19 Offset 22 
                                                      OpMemberDecorate %22 20 Offset 22 
                                                      OpMemberDecorate %22 21 Offset 22 
                                                      OpMemberDecorate %22 22 Offset 22 
                                                      OpMemberDecorate %22 23 Offset 22 
                                                      OpMemberDecorate %22 24 Offset 22 
                                                      OpMemberDecorate %22 25 Offset 22 
                                                      OpMemberDecorate %22 26 Offset 22 
                                                      OpMemberDecorate %22 27 Offset 22 
                                                      OpMemberDecorate %22 28 Offset 22 
                                                      OpMemberDecorate %22 29 Offset 22 
                                                      OpMemberDecorate %22 30 Offset 22 
                                                      OpMemberDecorate %22 31 Offset 22 
                                                      OpMemberDecorate %22 32 Offset 22 
                                                      OpDecorate %22 Block 
                                                      OpDecorate %24 DescriptorSet 24 
                                                      OpDecorate %24 Binding 24 
                                                      OpMemberDecorate %116 0 BuiltIn 116 
                                                      OpMemberDecorate %116 1 BuiltIn 116 
                                                      OpMemberDecorate %116 2 BuiltIn 116 
                                                      OpDecorate %116 Block 
                                                      OpDecorate %122 Location 122 
                                                      OpDecorate %129 Location 129 
                                                      OpDecorate %196 Location 196 
                                                      OpDecorate vs_TEXCOORDn0 Location 295 
                                                      OpDecorate vs_TEXCOORD2 Location 324 
                                                      OpDecorate %333 Location 333 
                                                      OpDecorate %436 Location 436 
                                                      OpDecorate vs_TEXCOORD0 Location 492 
                                                      OpDecorate %498 Location 498 
                                                      OpDecorate vs_TEXCOORD1 Location 558 
                                                      OpDecorate vs_TEXCOORD3 Location 576 
                                                      OpDecorate vs_TEXCOORD4 Location 661 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 2 
                                               %8 = OpTypePointer Private %7 
                                Private f32_2* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 4 
                                              %11 = OpTypePointer Input %10 
                                 Input f32_4* %12 = OpVariable Input 
                                              %15 = OpTypeVector %6 3 
                                              %16 = OpTypeInt 32 0 
                                          u32 %17 = OpConstant 4 
                                              %18 = OpTypeArray %10 %17 
                                              %19 = OpTypeArray %10 %17 
                                              %20 = OpTypeArray %10 %17 
                                              %21 = OpTypeArray %10 %17 
                                              %22 = OpTypeStruct %15 %10 %10 %18 %19 %20 %21 %10 %10 %6 %6 %10 %6 %6 %6 %6 %6 %6 %6 %6 %6 %6 %6 %10 %6 %6 %6 %6 %6 %6 %6 %6 %6 
                                              %23 = OpTypePointer Uniform %22 
Uniform struct {f32_3; f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4[4]; f32_4; f32_4; f32; f32; f32_4; f32; f32; f32; f32; f32; f32; f32; f32; f32; f32; f32; f32_4; f32; f32; f32; f32; f32; f32; f32; f32; f32;}* %24 = OpVariable Uniform 
                                              %25 = OpTypeInt 32 1 
                                          i32 %26 = OpConstant 21 
                                              %27 = OpTypePointer Uniform %6 
                                          i32 %30 = OpConstant 22 
                                              %35 = OpTypePointer Private %10 
                               Private f32_4* %36 = OpVariable Private 
                                          i32 %39 = OpConstant 3 
                                          i32 %40 = OpConstant 1 
                                              %41 = OpTypePointer Uniform %10 
                                          i32 %45 = OpConstant 0 
                                          i32 %53 = OpConstant 2 
                               Private f32_4* %61 = OpVariable Private 
                                              %80 = OpTypePointer Uniform %15 
                               Private f32_4* %86 = OpVariable Private 
                                          i32 %89 = OpConstant 6 
                                         u32 %114 = OpConstant 1 
                                             %115 = OpTypeArray %6 %114 
                                             %116 = OpTypeStruct %10 %6 %115 
                                             %117 = OpTypePointer Output %116 
        Output struct {f32_4; f32; f32[1];}* %118 = OpVariable Output 
                                             %120 = OpTypePointer Output %10 
                               Output f32_4* %122 = OpVariable Output 
                                         i32 %123 = OpConstant 8 
                                         u32 %124 = OpConstant 3 
                                             %127 = OpTypePointer Output %6 
                                Input f32_4* %129 = OpVariable Input 
                                         f32 %134 = OpConstant 3.674022E-40 
                                             %135 = OpTypePointer Private %6 
                              Private f32_4* %137 = OpVariable Private 
                              Private f32_4* %153 = OpVariable Private 
                              Private f32_4* %163 = OpVariable Private 
                                         i32 %164 = OpConstant 11 
                                Private f32* %180 = OpVariable Private 
                                             %195 = OpTypePointer Input %15 
                                Input f32_3* %196 = OpVariable Input 
                                         i32 %198 = OpConstant 4 
                                         u32 %203 = OpConstant 0 
                                         u32 %216 = OpConstant 2 
                                         i32 %240 = OpConstant 5 
                                         i32 %262 = OpConstant 29 
                                         i32 %265 = OpConstant 30 
                                Private f32* %279 = OpVariable Private 
                                         f32 %293 = OpConstant 3.674022E-40 
                        Output f32* vs_TEXCOORDn0 = OpVariable Output 
                                         i32 %297 = OpConstant 7 
                                         i32 %309 = OpConstant 24 
                                         i32 %312 = OpConstant 25 
                                         f32 %316 = OpConstant 3.674022E-40 
                                       f32_2 %317 = OpConstantComposite %316 %316 
                       Output f32_4* vs_TEXCOORD2 = OpVariable Output 
                                             %332 = OpTypePointer Input %7 
                                Input f32_2* %333 = OpVariable Input 
                                             %334 = OpTypePointer Input %6 
                                         i32 %338 = OpConstant 28 
                              Private f32_2* %343 = OpVariable Private 
                                         i32 %344 = OpConstant 32 
                                Private f32* %360 = OpVariable Private 
                                         i32 %361 = OpConstant 31 
                                             %384 = OpTypeBool 
                                             %385 = OpTypePointer Private %384 
                               Private bool* %386 = OpVariable Private 
                                             %391 = OpTypePointer Function %6 
                                         i32 %400 = OpConstant 10 
                                         i32 %403 = OpConstant 19 
                                         i32 %415 = OpConstant 12 
                               Output f32_4* %436 = OpVariable Output 
                                         i32 %456 = OpConstant 23 
                                         f32 %459 = OpConstant 3.674022E-40 
                                       f32_4 %460 = OpConstantComposite %459 %459 %459 %459 
                                         f32 %463 = OpConstant 3.674022E-40 
                                       f32_4 %464 = OpConstantComposite %463 %463 %463 %463 
                                         f32 %472 = OpConstant 3.674022E-40 
                                       f32_2 %473 = OpConstantComposite %472 %472 
                       Output f32_4* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_2* %498 = OpVariable Input 
                               Private bool* %502 = OpVariable Private 
                                             %509 = OpTypePointer Private %15 
                              Private f32_3* %510 = OpVariable Private 
                                         i32 %511 = OpConstant 17 
                                         i32 %515 = OpConstant 18 
                                         i32 %532 = OpConstant 9 
                                         f32 %546 = OpConstant 3.674022E-40 
                                         f32 %555 = OpConstant 3.674022E-40 
                       Output f32_4* vs_TEXCOORD1 = OpVariable Output 
                       Output f32_4* vs_TEXCOORD3 = OpVariable Output 
                                         i32 %581 = OpConstant 16 
                                         i32 %584 = OpConstant 15 
                                         i32 %587 = OpConstant 13 
                                         i32 %590 = OpConstant 14 
                                         i32 %594 = OpConstant 20 
                                         i32 %621 = OpConstant 26 
                                         i32 %624 = OpConstant 27 
                                             %660 = OpTypePointer Output %7 
                       Output f32_2* vs_TEXCOORD4 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                               Function f32* %392 = OpVariable Function 
                                        f32_4 %13 = OpLoad %12 
                                        f32_2 %14 = OpVectorShuffle %13 %13 0 1 
                                 Uniform f32* %28 = OpAccessChain %24 %26 
                                          f32 %29 = OpLoad %28 
                                 Uniform f32* %31 = OpAccessChain %24 %30 
                                          f32 %32 = OpLoad %31 
                                        f32_2 %33 = OpCompositeConstruct %29 %32 
                                        f32_2 %34 = OpFAdd %14 %33 
                                                      OpStore %9 %34 
                                        f32_2 %37 = OpLoad %9 
                                        f32_4 %38 = OpVectorShuffle %37 %37 1 1 1 1 
                               Uniform f32_4* %42 = OpAccessChain %24 %39 %40 
                                        f32_4 %43 = OpLoad %42 
                                        f32_4 %44 = OpFMul %38 %43 
                                                      OpStore %36 %44 
                               Uniform f32_4* %46 = OpAccessChain %24 %39 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_2 %48 = OpLoad %9 
                                        f32_4 %49 = OpVectorShuffle %48 %48 0 0 0 0 
                                        f32_4 %50 = OpFMul %47 %49 
                                        f32_4 %51 = OpLoad %36 
                                        f32_4 %52 = OpFAdd %50 %51 
                                                      OpStore %36 %52 
                               Uniform f32_4* %54 = OpAccessChain %24 %39 %53 
                                        f32_4 %55 = OpLoad %54 
                                        f32_4 %56 = OpLoad %12 
                                        f32_4 %57 = OpVectorShuffle %56 %56 2 2 2 2 
                                        f32_4 %58 = OpFMul %55 %57 
                                        f32_4 %59 = OpLoad %36 
                                        f32_4 %60 = OpFAdd %58 %59 
                                                      OpStore %36 %60 
                                        f32_4 %62 = OpLoad %36 
                               Uniform f32_4* %63 = OpAccessChain %24 %39 %39 
                                        f32_4 %64 = OpLoad %63 
                                        f32_4 %65 = OpFAdd %62 %64 
                                                      OpStore %61 %65 
                               Uniform f32_4* %66 = OpAccessChain %24 %39 %39 
                                        f32_4 %67 = OpLoad %66 
                                        f32_3 %68 = OpVectorShuffle %67 %67 0 1 2 
                                        f32_4 %69 = OpLoad %12 
                                        f32_3 %70 = OpVectorShuffle %69 %69 3 3 3 
                                        f32_3 %71 = OpFMul %68 %70 
                                        f32_4 %72 = OpLoad %36 
                                        f32_3 %73 = OpVectorShuffle %72 %72 0 1 2 
                                        f32_3 %74 = OpFAdd %71 %73 
                                        f32_4 %75 = OpLoad %36 
                                        f32_4 %76 = OpVectorShuffle %75 %74 4 5 6 3 
                                                      OpStore %36 %76 
                                        f32_4 %77 = OpLoad %36 
                                        f32_3 %78 = OpVectorShuffle %77 %77 0 1 2 
                                        f32_3 %79 = OpFNegate %78 
                               Uniform f32_3* %81 = OpAccessChain %24 %45 
                                        f32_3 %82 = OpLoad %81 
                                        f32_3 %83 = OpFAdd %79 %82 
                                        f32_4 %84 = OpLoad %36 
                                        f32_4 %85 = OpVectorShuffle %84 %83 4 5 6 3 
                                                      OpStore %36 %85 
                                        f32_4 %87 = OpLoad %61 
                                        f32_4 %88 = OpVectorShuffle %87 %87 1 1 1 1 
                               Uniform f32_4* %90 = OpAccessChain %24 %89 %40 
                                        f32_4 %91 = OpLoad %90 
                                        f32_4 %92 = OpFMul %88 %91 
                                                      OpStore %86 %92 
                               Uniform f32_4* %93 = OpAccessChain %24 %89 %45 
                                        f32_4 %94 = OpLoad %93 
                                        f32_4 %95 = OpLoad %61 
                                        f32_4 %96 = OpVectorShuffle %95 %95 0 0 0 0 
                                        f32_4 %97 = OpFMul %94 %96 
                                        f32_4 %98 = OpLoad %86 
                                        f32_4 %99 = OpFAdd %97 %98 
                                                      OpStore %86 %99 
                              Uniform f32_4* %100 = OpAccessChain %24 %89 %53 
                                       f32_4 %101 = OpLoad %100 
                                       f32_4 %102 = OpLoad %61 
                                       f32_4 %103 = OpVectorShuffle %102 %102 2 2 2 2 
                                       f32_4 %104 = OpFMul %101 %103 
                                       f32_4 %105 = OpLoad %86 
                                       f32_4 %106 = OpFAdd %104 %105 
                                                      OpStore %86 %106 
                              Uniform f32_4* %107 = OpAccessChain %24 %89 %39 
                                       f32_4 %108 = OpLoad %107 
                                       f32_4 %109 = OpLoad %61 
                                       f32_4 %110 = OpVectorShuffle %109 %109 3 3 3 3 
                                       f32_4 %111 = OpFMul %108 %110 
                                       f32_4 %112 = OpLoad %86 
                                       f32_4 %113 = OpFAdd %111 %112 
                                                      OpStore %61 %113 
                                       f32_4 %119 = OpLoad %61 
                               Output f32_4* %121 = OpAccessChain %118 %45 
                                                      OpStore %121 %119 
                                Uniform f32* %125 = OpAccessChain %24 %123 %124 
                                         f32 %126 = OpLoad %125 
                                 Output f32* %128 = OpAccessChain %122 %124 
                                                      OpStore %128 %126 
                                       f32_4 %130 = OpLoad %129 
                                       f32_3 %131 = OpVectorShuffle %130 %130 0 1 2 
                                       f32_4 %132 = OpLoad %86 
                                       f32_4 %133 = OpVectorShuffle %132 %131 4 5 6 3 
                                                      OpStore %86 %133 
                                Private f32* %136 = OpAccessChain %86 %124 
                                                      OpStore %136 %134 
                                       f32_4 %138 = OpLoad %86 
                              Uniform f32_4* %139 = OpAccessChain %24 %123 
                                       f32_4 %140 = OpLoad %139 
                                       f32_4 %141 = OpFMul %138 %140 
                                                      OpStore %137 %141 
                                       f32_4 %142 = OpLoad %137 
                                       f32_3 %143 = OpVectorShuffle %142 %142 3 3 3 
                                       f32_4 %144 = OpLoad %137 
                                       f32_3 %145 = OpVectorShuffle %144 %144 0 1 2 
                                       f32_3 %146 = OpFMul %143 %145 
                                       f32_4 %147 = OpLoad %86 
                                       f32_4 %148 = OpVectorShuffle %147 %146 4 5 6 3 
                                                      OpStore %86 %148 
                                       f32_4 %149 = OpLoad %86 
                                       f32_3 %150 = OpVectorShuffle %149 %149 0 1 2 
                                       f32_4 %151 = OpLoad %122 
                                       f32_4 %152 = OpVectorShuffle %151 %150 4 5 6 3 
                                                      OpStore %122 %152 
                                       f32_4 %154 = OpLoad %86 
                                       f32_3 %155 = OpVectorShuffle %154 %154 0 1 2 
                                       f32_3 %156 = OpFNegate %155 
                                       f32_4 %157 = OpLoad %153 
                                       f32_4 %158 = OpVectorShuffle %157 %156 4 5 6 3 
                                                      OpStore %153 %158 
                                Private f32* %159 = OpAccessChain %137 %124 
                                         f32 %160 = OpLoad %159 
                                         f32 %161 = OpFNegate %160 
                                Private f32* %162 = OpAccessChain %153 %124 
                                                      OpStore %162 %161 
                              Uniform f32_4* %165 = OpAccessChain %24 %164 
                                       f32_4 %166 = OpLoad %165 
                                       f32_3 %167 = OpVectorShuffle %166 %166 3 3 3 
                              Uniform f32_4* %168 = OpAccessChain %24 %164 
                                       f32_4 %169 = OpLoad %168 
                                       f32_3 %170 = OpVectorShuffle %169 %169 0 1 2 
                                       f32_3 %171 = OpFMul %167 %170 
                                       f32_4 %172 = OpLoad %163 
                                       f32_4 %173 = OpVectorShuffle %172 %171 4 5 6 3 
                                                      OpStore %163 %173 
                                Uniform f32* %174 = OpAccessChain %24 %164 %124 
                                         f32 %175 = OpLoad %174 
                                Private f32* %176 = OpAccessChain %163 %124 
                                                      OpStore %176 %175 
                                       f32_4 %177 = OpLoad %153 
                                       f32_4 %178 = OpLoad %163 
                                       f32_4 %179 = OpFAdd %177 %178 
                                                      OpStore %153 %179 
                                       f32_4 %181 = OpLoad %36 
                                       f32_3 %182 = OpVectorShuffle %181 %181 0 1 2 
                                       f32_4 %183 = OpLoad %36 
                                       f32_3 %184 = OpVectorShuffle %183 %183 0 1 2 
                                         f32 %185 = OpDot %182 %184 
                                                      OpStore %180 %185 
                                         f32 %186 = OpLoad %180 
                                         f32 %187 = OpExtInst %1 32 %186 
                                                      OpStore %180 %187 
                                         f32 %188 = OpLoad %180 
                                       f32_3 %189 = OpCompositeConstruct %188 %188 %188 
                                       f32_4 %190 = OpLoad %36 
                                       f32_3 %191 = OpVectorShuffle %190 %190 0 1 2 
                                       f32_3 %192 = OpFMul %189 %191 
                                       f32_4 %193 = OpLoad %36 
                                       f32_4 %194 = OpVectorShuffle %193 %192 4 5 6 3 
                                                      OpStore %36 %194 
                                       f32_3 %197 = OpLoad %196 
                              Uniform f32_4* %199 = OpAccessChain %24 %198 %45 
                                       f32_4 %200 = OpLoad %199 
                                       f32_3 %201 = OpVectorShuffle %200 %200 0 1 2 
                                         f32 %202 = OpDot %197 %201 
                                Private f32* %204 = OpAccessChain %86 %203 
                                                      OpStore %204 %202 
                                       f32_3 %205 = OpLoad %196 
                              Uniform f32_4* %206 = OpAccessChain %24 %198 %40 
                                       f32_4 %207 = OpLoad %206 
                                       f32_3 %208 = OpVectorShuffle %207 %207 0 1 2 
                                         f32 %209 = OpDot %205 %208 
                                Private f32* %210 = OpAccessChain %86 %114 
                                                      OpStore %210 %209 
                                       f32_3 %211 = OpLoad %196 
                              Uniform f32_4* %212 = OpAccessChain %24 %198 %53 
                                       f32_4 %213 = OpLoad %212 
                                       f32_3 %214 = OpVectorShuffle %213 %213 0 1 2 
                                         f32 %215 = OpDot %211 %214 
                                Private f32* %217 = OpAccessChain %86 %216 
                                                      OpStore %217 %215 
                                       f32_4 %218 = OpLoad %86 
                                       f32_3 %219 = OpVectorShuffle %218 %218 0 1 2 
                                       f32_4 %220 = OpLoad %86 
                                       f32_3 %221 = OpVectorShuffle %220 %220 0 1 2 
                                         f32 %222 = OpDot %219 %221 
                                                      OpStore %180 %222 
                                         f32 %223 = OpLoad %180 
                                         f32 %224 = OpExtInst %1 32 %223 
                                                      OpStore %180 %224 
                                         f32 %225 = OpLoad %180 
                                       f32_3 %226 = OpCompositeConstruct %225 %225 %225 
                                       f32_4 %227 = OpLoad %86 
                                       f32_3 %228 = OpVectorShuffle %227 %227 0 1 2 
                                       f32_3 %229 = OpFMul %226 %228 
                                       f32_4 %230 = OpLoad %86 
                                       f32_4 %231 = OpVectorShuffle %230 %229 4 5 6 3 
                                                      OpStore %86 %231 
                                       f32_4 %232 = OpLoad %86 
                                       f32_3 %233 = OpVectorShuffle %232 %232 0 1 2 
                                       f32_4 %234 = OpLoad %36 
                                       f32_3 %235 = OpVectorShuffle %234 %234 0 1 2 
                                         f32 %236 = OpDot %233 %235 
                                                      OpStore %180 %236 
                              Uniform f32_4* %237 = OpAccessChain %24 %53 
                                       f32_4 %238 = OpLoad %237 
                                       f32_2 %239 = OpVectorShuffle %238 %238 1 1 
                              Uniform f32_4* %241 = OpAccessChain %24 %240 %40 
                                       f32_4 %242 = OpLoad %241 
                                       f32_2 %243 = OpVectorShuffle %242 %242 0 1 
                                       f32_2 %244 = OpFMul %239 %243 
                                       f32_4 %245 = OpLoad %36 
                                       f32_4 %246 = OpVectorShuffle %245 %244 4 5 2 3 
                                                      OpStore %36 %246 
                              Uniform f32_4* %247 = OpAccessChain %24 %240 %45 
                                       f32_4 %248 = OpLoad %247 
                                       f32_2 %249 = OpVectorShuffle %248 %248 0 1 
                              Uniform f32_4* %250 = OpAccessChain %24 %53 
                                       f32_4 %251 = OpLoad %250 
                                       f32_2 %252 = OpVectorShuffle %251 %251 0 0 
                                       f32_2 %253 = OpFMul %249 %252 
                                       f32_4 %254 = OpLoad %36 
                                       f32_2 %255 = OpVectorShuffle %254 %254 0 1 
                                       f32_2 %256 = OpFAdd %253 %255 
                                       f32_4 %257 = OpLoad %36 
                                       f32_4 %258 = OpVectorShuffle %257 %256 4 5 2 3 
                                                      OpStore %36 %258 
                                       f32_4 %259 = OpLoad %36 
                                       f32_2 %260 = OpVectorShuffle %259 %259 0 1 
                                       f32_2 %261 = OpExtInst %1 4 %260 
                                Uniform f32* %263 = OpAccessChain %24 %262 
                                         f32 %264 = OpLoad %263 
                                Uniform f32* %266 = OpAccessChain %24 %265 
                                         f32 %267 = OpLoad %266 
                                       f32_2 %268 = OpCompositeConstruct %264 %267 
                                       f32_2 %269 = OpFMul %261 %268 
                                       f32_4 %270 = OpLoad %36 
                                       f32_4 %271 = OpVectorShuffle %270 %269 4 5 2 3 
                                                      OpStore %36 %271 
                                       f32_4 %272 = OpLoad %61 
                                       f32_2 %273 = OpVectorShuffle %272 %272 3 3 
                                       f32_4 %274 = OpLoad %36 
                                       f32_2 %275 = OpVectorShuffle %274 %274 0 1 
                                       f32_2 %276 = OpFDiv %273 %275 
                                       f32_4 %277 = OpLoad %36 
                                       f32_4 %278 = OpVectorShuffle %277 %276 4 5 2 3 
                                                      OpStore %36 %278 
                                Private f32* %280 = OpAccessChain %61 %216 
                                         f32 %281 = OpLoad %280 
                                Uniform f32* %282 = OpAccessChain %24 %40 %114 
                                         f32 %283 = OpLoad %282 
                                         f32 %284 = OpFDiv %281 %283 
                                                      OpStore %279 %284 
                                         f32 %285 = OpLoad %279 
                                         f32 %286 = OpFNegate %285 
                                         f32 %287 = OpFAdd %286 %134 
                                                      OpStore %279 %287 
                                         f32 %288 = OpLoad %279 
                                Uniform f32* %289 = OpAccessChain %24 %40 %216 
                                         f32 %290 = OpLoad %289 
                                         f32 %291 = OpFMul %288 %290 
                                                      OpStore %279 %291 
                                         f32 %292 = OpLoad %279 
                                         f32 %294 = OpExtInst %1 40 %292 %293 
                                                      OpStore %279 %294 
                                         f32 %296 = OpLoad %279 
                                Uniform f32* %298 = OpAccessChain %24 %297 %216 
                                         f32 %299 = OpLoad %298 
                                         f32 %300 = OpFMul %296 %299 
                                Uniform f32* %301 = OpAccessChain %24 %297 %124 
                                         f32 %302 = OpLoad %301 
                                         f32 %303 = OpFAdd %300 %302 
                                                      OpStore vs_TEXCOORDn0 %303 
                                       f32_4 %304 = OpLoad %36 
                                       f32_2 %305 = OpVectorShuffle %304 %304 0 1 
                                       f32_4 %306 = OpLoad %36 
                                       f32_2 %307 = OpVectorShuffle %306 %306 0 1 
                                         f32 %308 = OpDot %305 %307 
                                                      OpStore %279 %308 
                                Uniform f32* %310 = OpAccessChain %24 %309 
                                         f32 %311 = OpLoad %310 
                                Uniform f32* %313 = OpAccessChain %24 %312 
                                         f32 %314 = OpLoad %313 
                                       f32_2 %315 = OpCompositeConstruct %311 %314 
                                       f32_2 %318 = OpFMul %315 %317 
                                       f32_4 %319 = OpLoad %36 
                                       f32_2 %320 = OpVectorShuffle %319 %319 0 1 
                                       f32_2 %321 = OpFAdd %318 %320 
                                       f32_4 %322 = OpLoad %36 
                                       f32_4 %323 = OpVectorShuffle %322 %321 4 5 2 3 
                                                      OpStore %36 %323 
                                       f32_4 %325 = OpLoad %36 
                                       f32_2 %326 = OpVectorShuffle %325 %325 0 1 
                                       f32_2 %327 = OpFDiv %317 %326 
                                       f32_4 %328 = OpLoad vs_TEXCOORD2 
                                       f32_4 %329 = OpVectorShuffle %328 %327 0 1 4 5 
                                                      OpStore vs_TEXCOORD2 %329 
                                         f32 %330 = OpLoad %279 
                                         f32 %331 = OpExtInst %1 32 %330 
                                                      OpStore %279 %331 
                                  Input f32* %335 = OpAccessChain %333 %114 
                                         f32 %336 = OpLoad %335 
                                         f32 %337 = OpExtInst %1 4 %336 
                                Uniform f32* %339 = OpAccessChain %24 %338 
                                         f32 %340 = OpLoad %339 
                                         f32 %341 = OpFMul %337 %340 
                                Private f32* %342 = OpAccessChain %36 %203 
                                                      OpStore %342 %341 
                                Uniform f32* %345 = OpAccessChain %24 %344 
                                         f32 %346 = OpLoad %345 
                                         f32 %347 = OpFAdd %346 %134 
                                Private f32* %348 = OpAccessChain %343 %203 
                                                      OpStore %348 %347 
                                Private f32* %349 = OpAccessChain %343 %203 
                                         f32 %350 = OpLoad %349 
                                Private f32* %351 = OpAccessChain %36 %203 
                                         f32 %352 = OpLoad %351 
                                         f32 %353 = OpFMul %350 %352 
                                Private f32* %354 = OpAccessChain %36 %203 
                                                      OpStore %354 %353 
                                         f32 %355 = OpLoad %279 
                                Private f32* %356 = OpAccessChain %36 %203 
                                         f32 %357 = OpLoad %356 
                                         f32 %358 = OpFMul %355 %357 
                                Private f32* %359 = OpAccessChain %343 %203 
                                                      OpStore %359 %358 
                                Uniform f32* %362 = OpAccessChain %24 %361 
                                         f32 %363 = OpLoad %362 
                                         f32 %364 = OpFNegate %363 
                                         f32 %365 = OpFAdd %364 %134 
                                                      OpStore %360 %365 
                                         f32 %366 = OpLoad %360 
                                Private f32* %367 = OpAccessChain %343 %203 
                                         f32 %368 = OpLoad %367 
                                         f32 %369 = OpExtInst %1 4 %368 
                                         f32 %370 = OpFMul %366 %369 
                                                      OpStore %360 %370 
                                         f32 %371 = OpLoad %279 
                                Private f32* %372 = OpAccessChain %36 %203 
                                         f32 %373 = OpLoad %372 
                                         f32 %374 = OpFMul %371 %373 
                                         f32 %375 = OpLoad %360 
                                         f32 %376 = OpFNegate %375 
                                         f32 %377 = OpFAdd %374 %376 
                                                      OpStore %279 %377 
                                         f32 %378 = OpLoad %180 
                                         f32 %379 = OpExtInst %1 4 %378 
                                         f32 %380 = OpLoad %279 
                                         f32 %381 = OpFMul %379 %380 
                                         f32 %382 = OpLoad %360 
                                         f32 %383 = OpFAdd %381 %382 
                                                      OpStore %180 %383 
                                Uniform f32* %387 = OpAccessChain %24 %240 %39 %124 
                                         f32 %388 = OpLoad %387 
                                        bool %389 = OpFOrdEqual %388 %293 
                                                      OpStore %386 %389 
                                        bool %390 = OpLoad %386 
                                                      OpSelectionMerge %394 None 
                                                      OpBranchConditional %390 %393 %396 
                                             %393 = OpLabel 
                                         f32 %395 = OpLoad %180 
                                                      OpStore %392 %395 
                                                      OpBranch %394 
                                             %396 = OpLabel 
                                Private f32* %397 = OpAccessChain %343 %203 
                                         f32 %398 = OpLoad %397 
                                                      OpStore %392 %398 
                                                      OpBranch %394 
                                             %394 = OpLabel 
                                         f32 %399 = OpLoad %392 
                                                      OpStore %180 %399 
                                Uniform f32* %401 = OpAccessChain %24 %400 
                                         f32 %402 = OpLoad %401 
                                Uniform f32* %404 = OpAccessChain %24 %403 
                                         f32 %405 = OpLoad %404 
                                         f32 %406 = OpFMul %402 %405 
                                                      OpStore %279 %406 
                                         f32 %407 = OpLoad %279 
                                         f32 %408 = OpLoad %180 
                                         f32 %409 = OpFMul %407 %408 
                                         f32 %410 = OpFAdd %409 %134 
                                                      OpStore %279 %410 
                                         f32 %411 = OpLoad %180 
                                         f32 %412 = OpLoad %279 
                                         f32 %413 = OpFDiv %411 %412 
                                Private f32* %414 = OpAccessChain %36 %203 
                                                      OpStore %414 %413 
                                Uniform f32* %416 = OpAccessChain %24 %415 
                                         f32 %417 = OpLoad %416 
                                Uniform f32* %418 = OpAccessChain %24 %403 
                                         f32 %419 = OpLoad %418 
                                         f32 %420 = OpFMul %417 %419 
                                                      OpStore %279 %420 
                                Private f32* %421 = OpAccessChain %36 %203 
                                         f32 %422 = OpLoad %421 
                                         f32 %423 = OpLoad %279 
                                         f32 %424 = OpFMul %422 %423 
                                                      OpStore %279 %424 
                                         f32 %425 = OpLoad %279 
                                         f32 %426 = OpExtInst %1 37 %425 %134 
                                Private f32* %427 = OpAccessChain %343 %203 
                                                      OpStore %427 %426 
                                Private f32* %428 = OpAccessChain %343 %203 
                                         f32 %429 = OpLoad %428 
                                         f32 %430 = OpExtInst %1 31 %429 
                                Private f32* %431 = OpAccessChain %343 %203 
                                                      OpStore %431 %430 
                                       f32_4 %432 = OpLoad %153 
                                       f32_2 %433 = OpLoad %343 
                                       f32_4 %434 = OpVectorShuffle %433 %433 0 0 0 0 
                                       f32_4 %435 = OpFMul %432 %434 
                                                      OpStore %61 %435 
                                       f32_4 %437 = OpLoad %137 
                                       f32_3 %438 = OpVectorShuffle %437 %437 0 1 2 
                                       f32_4 %439 = OpLoad %137 
                                       f32_3 %440 = OpVectorShuffle %439 %439 3 3 3 
                                       f32_3 %441 = OpFMul %438 %440 
                                       f32_4 %442 = OpLoad %61 
                                       f32_3 %443 = OpVectorShuffle %442 %442 0 1 2 
                                       f32_3 %444 = OpFAdd %441 %443 
                                       f32_4 %445 = OpLoad %436 
                                       f32_4 %446 = OpVectorShuffle %445 %444 4 5 6 3 
                                                      OpStore %436 %446 
                                Private f32* %447 = OpAccessChain %86 %124 
                                         f32 %448 = OpLoad %447 
                                Uniform f32* %449 = OpAccessChain %24 %123 %124 
                                         f32 %450 = OpLoad %449 
                                         f32 %451 = OpFMul %448 %450 
                                Private f32* %452 = OpAccessChain %61 %124 
                                         f32 %453 = OpLoad %452 
                                         f32 %454 = OpFAdd %451 %453 
                                 Output f32* %455 = OpAccessChain %436 %124 
                                                      OpStore %455 %454 
                              Uniform f32_4* %457 = OpAccessChain %24 %456 
                                       f32_4 %458 = OpLoad %457 
                                       f32_4 %461 = OpExtInst %1 40 %458 %460 
                                                      OpStore %61 %461 
                                       f32_4 %462 = OpLoad %61 
                                       f32_4 %465 = OpExtInst %1 37 %462 %464 
                                                      OpStore %61 %465 
                                       f32_2 %466 = OpLoad %9 
                                       f32_4 %467 = OpLoad %61 
                                       f32_2 %468 = OpVectorShuffle %467 %467 0 1 
                                       f32_2 %469 = OpFNegate %468 
                                       f32_2 %470 = OpFAdd %466 %469 
                                                      OpStore %343 %470 
                                       f32_2 %471 = OpLoad %9 
                                       f32_2 %474 = OpFMul %471 %473 
                                       f32_4 %475 = OpLoad %61 
                                       f32_2 %476 = OpVectorShuffle %475 %475 0 1 
                                       f32_2 %477 = OpFNegate %476 
                                       f32_2 %478 = OpFAdd %474 %477 
                                                      OpStore %9 %478 
                                       f32_4 %479 = OpLoad %61 
                                       f32_2 %480 = OpVectorShuffle %479 %479 2 3 
                                       f32_2 %481 = OpFNegate %480 
                                       f32_2 %482 = OpLoad %9 
                                       f32_2 %483 = OpFAdd %481 %482 
                                       f32_4 %484 = OpLoad vs_TEXCOORD2 
                                       f32_4 %485 = OpVectorShuffle %484 %483 4 5 2 3 
                                                      OpStore vs_TEXCOORD2 %485 
                                       f32_4 %486 = OpLoad %61 
                                       f32_2 %487 = OpVectorShuffle %486 %486 0 1 
                                       f32_2 %488 = OpFNegate %487 
                                       f32_4 %489 = OpLoad %61 
                                       f32_2 %490 = OpVectorShuffle %489 %489 2 3 
                                       f32_2 %491 = OpFAdd %488 %490 
                                                      OpStore %9 %491 
                                       f32_2 %493 = OpLoad %343 
                                       f32_2 %494 = OpLoad %9 
                                       f32_2 %495 = OpFDiv %493 %494 
                                       f32_4 %496 = OpLoad vs_TEXCOORD0 
                                       f32_4 %497 = OpVectorShuffle %496 %495 0 1 4 5 
                                                      OpStore vs_TEXCOORD0 %497 
                                       f32_2 %499 = OpLoad %498 
                                       f32_4 %500 = OpLoad vs_TEXCOORD0 
                                       f32_4 %501 = OpVectorShuffle %500 %499 4 5 2 3 
                                                      OpStore vs_TEXCOORD0 %501 
                                  Input f32* %503 = OpAccessChain %333 %114 
                                         f32 %504 = OpLoad %503 
                                        bool %505 = OpFOrdGreaterThanEqual %293 %504 
                                                      OpStore %502 %505 
                                        bool %506 = OpLoad %502 
                                         f32 %507 = OpSelect %506 %134 %293 
                                Private f32* %508 = OpAccessChain %9 %203 
                                                      OpStore %508 %507 
                                Uniform f32* %512 = OpAccessChain %24 %511 
                                         f32 %513 = OpLoad %512 
                                         f32 %514 = OpFNegate %513 
                                Uniform f32* %516 = OpAccessChain %24 %515 
                                         f32 %517 = OpLoad %516 
                                         f32 %518 = OpFAdd %514 %517 
                                Private f32* %519 = OpAccessChain %510 %203 
                                                      OpStore %519 %518 
                                Private f32* %520 = OpAccessChain %9 %203 
                                         f32 %521 = OpLoad %520 
                                Private f32* %522 = OpAccessChain %510 %203 
                                         f32 %523 = OpLoad %522 
                                         f32 %524 = OpFMul %521 %523 
                                Uniform f32* %525 = OpAccessChain %24 %511 
                                         f32 %526 = OpLoad %525 
                                         f32 %527 = OpFAdd %524 %526 
                                Private f32* %528 = OpAccessChain %9 %203 
                                                      OpStore %528 %527 
                                Private f32* %529 = OpAccessChain %9 %203 
                                         f32 %530 = OpLoad %529 
                                         f32 %531 = OpFMul %530 %316 
                                Uniform f32* %533 = OpAccessChain %24 %532 
                                         f32 %534 = OpLoad %533 
                                         f32 %535 = OpFAdd %531 %534 
                                Private f32* %536 = OpAccessChain %9 %203 
                                                      OpStore %536 %535 
                                Private f32* %537 = OpAccessChain %9 %203 
                                         f32 %538 = OpLoad %537 
                                Uniform f32* %539 = OpAccessChain %24 %403 
                                         f32 %540 = OpLoad %539 
                                         f32 %541 = OpFMul %538 %540 
                                Private f32* %542 = OpAccessChain %9 %203 
                                                      OpStore %542 %541 
                                Private f32* %543 = OpAccessChain %9 %203 
                                         f32 %544 = OpLoad %543 
                                         f32 %545 = OpFNegate %544 
                                         f32 %547 = OpFMul %545 %546 
                                         f32 %548 = OpFAdd %547 %546 
                                Private f32* %549 = OpAccessChain %9 %203 
                                                      OpStore %549 %548 
                                Private f32* %550 = OpAccessChain %9 %203 
                                         f32 %551 = OpLoad %550 
                                Private f32* %552 = OpAccessChain %36 %203 
                                         f32 %553 = OpLoad %552 
                                         f32 %554 = OpFMul %551 %553 
                                         f32 %556 = OpFAdd %554 %555 
                                Private f32* %557 = OpAccessChain %36 %124 
                                                      OpStore %557 %556 
                                       f32_4 %559 = OpLoad %36 
                                       f32_2 %560 = OpVectorShuffle %559 %559 0 3 
                                       f32_4 %561 = OpLoad vs_TEXCOORD1 
                                       f32_4 %562 = OpVectorShuffle %561 %560 4 1 2 5 
                                                      OpStore vs_TEXCOORD1 %562 
                                         f32 %563 = OpLoad %279 
                                         f32 %564 = OpFNegate %563 
                                         f32 %565 = OpFMul %564 %546 
                                Private f32* %566 = OpAccessChain %36 %124 
                                         f32 %567 = OpLoad %566 
                                         f32 %568 = OpFAdd %565 %567 
                                 Output f32* %569 = OpAccessChain vs_TEXCOORD1 %114 
                                                      OpStore %569 %568 
                                         f32 %570 = OpLoad %279 
                                         f32 %571 = OpFMul %570 %546 
                                Private f32* %572 = OpAccessChain %36 %124 
                                         f32 %573 = OpLoad %572 
                                         f32 %574 = OpFAdd %571 %573 
                                 Output f32* %575 = OpAccessChain vs_TEXCOORD1 %216 
                                                      OpStore %575 %574 
                                  Input f32* %577 = OpAccessChain %129 %124 
                                         f32 %578 = OpLoad %577 
                                 Output f32* %579 = OpAccessChain vs_TEXCOORD3 %216 
                                                      OpStore %579 %578 
                                 Output f32* %580 = OpAccessChain vs_TEXCOORD3 %124 
                                                      OpStore %580 %293 
                                Uniform f32* %582 = OpAccessChain %24 %581 
                                         f32 %583 = OpLoad %582 
                                Uniform f32* %585 = OpAccessChain %24 %584 
                                         f32 %586 = OpLoad %585 
                                Uniform f32* %588 = OpAccessChain %24 %587 
                                         f32 %589 = OpLoad %588 
                                Uniform f32* %591 = OpAccessChain %24 %590 
                                         f32 %592 = OpLoad %591 
                                       f32_4 %593 = OpCompositeConstruct %583 %586 %589 %592 
                                Uniform f32* %595 = OpAccessChain %24 %594 
                                         f32 %596 = OpLoad %595 
                                Uniform f32* %597 = OpAccessChain %24 %594 
                                         f32 %598 = OpLoad %597 
                                Uniform f32* %599 = OpAccessChain %24 %594 
                                         f32 %600 = OpLoad %599 
                                Uniform f32* %601 = OpAccessChain %24 %594 
                                         f32 %602 = OpLoad %601 
                                       f32_4 %603 = OpCompositeConstruct %596 %598 %600 %602 
                                         f32 %604 = OpCompositeExtract %603 0 
                                         f32 %605 = OpCompositeExtract %603 1 
                                         f32 %606 = OpCompositeExtract %603 2 
                                         f32 %607 = OpCompositeExtract %603 3 
                                       f32_4 %608 = OpCompositeConstruct %604 %605 %606 %607 
                                       f32_4 %609 = OpFMul %593 %608 
                                                      OpStore %36 %609 
                                       f32_4 %610 = OpLoad %36 
                                       f32_2 %611 = OpVectorShuffle %610 %610 2 3 
                                       f32_2 %612 = OpFNegate %611 
                                Uniform f32* %613 = OpAccessChain %24 %338 
                                         f32 %614 = OpLoad %613 
                                       f32_2 %615 = OpCompositeConstruct %614 %614 
                                       f32_2 %616 = OpFMul %612 %615 
                                       f32_3 %617 = OpLoad %510 
                                       f32_3 %618 = OpVectorShuffle %617 %616 3 1 4 
                                                      OpStore %510 %618 
                                       f32_3 %619 = OpLoad %510 
                                       f32_2 %620 = OpVectorShuffle %619 %619 0 2 
                                Uniform f32* %622 = OpAccessChain %24 %621 
                                         f32 %623 = OpLoad %622 
                                Uniform f32* %625 = OpAccessChain %24 %624 
                                         f32 %626 = OpLoad %625 
                                       f32_2 %627 = OpCompositeConstruct %623 %626 
                                       f32_2 %628 = OpFDiv %620 %627 
                                       f32_3 %629 = OpLoad %510 
                                       f32_3 %630 = OpVectorShuffle %629 %628 3 1 4 
                                                      OpStore %510 %630 
                                       f32_3 %631 = OpLoad %510 
                                       f32_2 %632 = OpVectorShuffle %631 %631 0 2 
                                       f32_2 %633 = OpLoad %498 
                                       f32_2 %634 = OpFAdd %632 %633 
                                       f32_4 %635 = OpLoad vs_TEXCOORD3 
                                       f32_4 %636 = OpVectorShuffle %635 %634 4 5 2 3 
                                                      OpStore vs_TEXCOORD3 %636 
                                Private f32* %637 = OpAccessChain %36 %203 
                                         f32 %638 = OpLoad %637 
                                         f32 %639 = OpLoad %180 
                                         f32 %640 = OpFMul %638 %639 
                                         f32 %641 = OpFAdd %640 %134 
                                Private f32* %642 = OpAccessChain %510 %203 
                                                      OpStore %642 %641 
                                         f32 %643 = OpLoad %180 
                                Private f32* %644 = OpAccessChain %510 %203 
                                         f32 %645 = OpLoad %644 
                                         f32 %646 = OpFDiv %643 %645 
                                Private f32* %647 = OpAccessChain %510 %203 
                                                      OpStore %647 %646 
                                Private f32* %648 = OpAccessChain %510 %203 
                                         f32 %649 = OpLoad %648 
                                Private f32* %650 = OpAccessChain %36 %114 
                                         f32 %651 = OpLoad %650 
                                         f32 %652 = OpFMul %649 %651 
                                                      OpStore %180 %652 
                                Private f32* %653 = OpAccessChain %9 %203 
                                         f32 %654 = OpLoad %653 
                                Private f32* %655 = OpAccessChain %510 %203 
                                         f32 %656 = OpLoad %655 
                                         f32 %657 = OpFMul %654 %656 
                                         f32 %658 = OpFAdd %657 %555 
                                Private f32* %659 = OpAccessChain %9 %203 
                                                      OpStore %659 %658 
                                Private f32* %662 = OpAccessChain %510 %203 
                                         f32 %663 = OpLoad %662 
                                 Output f32* %664 = OpAccessChain vs_TEXCOORD4 %203 
                                                      OpStore %664 %663 
                                         f32 %665 = OpLoad %180 
                                         f32 %666 = OpFNegate %665 
                                         f32 %667 = OpFMul %666 %546 
                                Private f32* %668 = OpAccessChain %9 %203 
                                         f32 %669 = OpLoad %668 
                                         f32 %670 = OpFAdd %667 %669 
                                 Output f32* %671 = OpAccessChain vs_TEXCOORD4 %114 
                                                      OpStore %671 %670 
                                 Output f32* %672 = OpAccessChain %118 %45 %114 
                                         f32 %673 = OpLoad %672 
                                         f32 %674 = OpFNegate %673 
                                 Output f32* %675 = OpAccessChain %118 %45 %114 
                                                      OpStore %675 %674 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 196
; Schema: 0
                                             OpCapability Shader 
                                      %1 = OpExtInstImport "GLSL.std.450" 
                                             OpMemoryModel Logical GLSL450 
                                             OpEntryPoint Fragment %4 "main" %21 %35 %77 %79 %88 %96 %176 %180 
                                             OpExecutionMode %4 OriginUpperLeft 
                                             OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                             OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                             OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                             OpName vs_TEXCOORDn0 "vs_TEXCOORDn0" 
                                             OpDecorate %12 DescriptorSet 12 
                                             OpDecorate %12 Binding 12 
                                             OpDecorate %16 DescriptorSet 16 
                                             OpDecorate %16 Binding 16 
                                             OpDecorate vs_TEXCOORD3 Location 21 
                                             OpDecorate vs_TEXCOORD4 Location 35 
                                             OpMemberDecorate %53 0 Offset 53 
                                             OpMemberDecorate %53 1 Offset 53 
                                             OpDecorate %53 Block 
                                             OpDecorate %55 DescriptorSet 55 
                                             OpDecorate %55 Binding 55 
                                             OpDecorate %77 Location 77 
                                             OpDecorate %79 Location 79 
                                             OpDecorate vs_TEXCOORD0 Location 88 
                                             OpDecorate vs_TEXCOORD1 Location 96 
                                             OpDecorate %176 Location 176 
                                             OpDecorate vs_TEXCOORDn0 Location 180 
                                      %2 = OpTypeVoid 
                                      %3 = OpTypeFunction %2 
                                      %6 = OpTypeFloat 32 
                                      %7 = OpTypeVector %6 4 
                                      %8 = OpTypePointer Private %7 
                       Private f32_4* %9 = OpVariable Private 
                                     %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                     %11 = OpTypePointer UniformConstant %10 
UniformConstant read_only Texture2D* %12 = OpVariable UniformConstant 
                                     %14 = OpTypeSampler 
                                     %15 = OpTypePointer UniformConstant %14 
            UniformConstant sampler* %16 = OpVariable UniformConstant 
                                     %18 = OpTypeSampledImage %10 
                                     %20 = OpTypePointer Input %7 
               Input f32_4* vs_TEXCOORD3 = OpVariable Input 
                                     %22 = OpTypeVector %6 2 
                                     %26 = OpTypeInt 32 0 
                                 u32 %27 = OpConstant 3 
                                 u32 %29 = OpConstant 0 
                                     %30 = OpTypePointer Private %6 
                                     %34 = OpTypePointer Input %22 
               Input f32_2* vs_TEXCOORD4 = OpVariable Input 
                                     %36 = OpTypePointer Input %6 
                                 u32 %40 = OpConstant 1 
                                 f32 %48 = OpConstant 3.674022E-40 
                                 f32 %49 = OpConstant 3.674022E-40 
                      Private f32_4* %52 = OpVariable Private 
                                     %53 = OpTypeStruct %7 %7 
                                     %54 = OpTypePointer Uniform %53 
     Uniform struct {f32_4; f32_4;}* %55 = OpVariable Uniform 
                                     %56 = OpTypeInt 32 1 
                                 i32 %57 = OpConstant 1 
                                     %58 = OpTypeVector %6 3 
                                     %59 = OpTypePointer Uniform %7 
                                     %69 = OpTypePointer Uniform %6 
                        Input f32_4* %77 = OpVariable Input 
                        Input f32_4* %79 = OpVariable Input 
                                     %83 = OpTypePointer Private %22 
                      Private f32_2* %84 = OpVariable Private 
               Input f32_4* vs_TEXCOORD0 = OpVariable Input 
               Input f32_4* vs_TEXCOORD1 = OpVariable Input 
                     Private f32_4* %114 = OpVariable Private 
                                u32 %135 = OpConstant 2 
                                f32 %139 = OpConstant 3.674022E-40 
                                    %142 = OpTypeBool 
                                    %143 = OpTypePointer Private %142 
                      Private bool* %144 = OpVariable Private 
                                i32 %149 = OpConstant 0 
                                i32 %151 = OpConstant -1 
                       Private f32* %169 = OpVariable Private 
                                    %175 = OpTypePointer Output %7 
                      Output f32_4* %176 = OpVariable Output 
                                    %178 = OpTypePointer Output %6 
                Input f32* vs_TEXCOORDn0 = OpVariable Input 
                                 void %4 = OpFunction None %3 
                                      %5 = OpLabel 
                 read_only Texture2D %13 = OpLoad %12 
                             sampler %17 = OpLoad %16 
          read_only Texture2DSampled %19 = OpSampledImage %13 %17 
                               f32_4 %23 = OpLoad vs_TEXCOORD3 
                               f32_2 %24 = OpVectorShuffle %23 %23 0 1 
                               f32_4 %25 = OpImageSampleImplicitLod %19 %24 
                                 f32 %28 = OpCompositeExtract %25 3 
                        Private f32* %31 = OpAccessChain %9 %29 
                                             OpStore %31 %28 
                        Private f32* %32 = OpAccessChain %9 %29 
                                 f32 %33 = OpLoad %32 
                          Input f32* %37 = OpAccessChain vs_TEXCOORD4 %29 
                                 f32 %38 = OpLoad %37 
                                 f32 %39 = OpFMul %33 %38 
                          Input f32* %41 = OpAccessChain vs_TEXCOORD4 %40 
                                 f32 %42 = OpLoad %41 
                                 f32 %43 = OpFNegate %42 
                                 f32 %44 = OpFAdd %39 %43 
                        Private f32* %45 = OpAccessChain %9 %29 
                                             OpStore %45 %44 
                        Private f32* %46 = OpAccessChain %9 %29 
                                 f32 %47 = OpLoad %46 
                                 f32 %50 = OpExtInst %1 43 %47 %48 %49 
                        Private f32* %51 = OpAccessChain %9 %29 
                                             OpStore %51 %50 
                      Uniform f32_4* %60 = OpAccessChain %55 %57 
                               f32_4 %61 = OpLoad %60 
                               f32_3 %62 = OpVectorShuffle %61 %61 3 3 3 
                      Uniform f32_4* %63 = OpAccessChain %55 %57 
                               f32_4 %64 = OpLoad %63 
                               f32_3 %65 = OpVectorShuffle %64 %64 0 1 2 
                               f32_3 %66 = OpFMul %62 %65 
                               f32_4 %67 = OpLoad %52 
                               f32_4 %68 = OpVectorShuffle %67 %66 4 5 6 3 
                                             OpStore %52 %68 
                        Uniform f32* %70 = OpAccessChain %55 %57 %27 
                                 f32 %71 = OpLoad %70 
                        Private f32* %72 = OpAccessChain %52 %27 
                                             OpStore %72 %71 
                               f32_4 %73 = OpLoad %9 
                               f32_4 %74 = OpVectorShuffle %73 %73 0 0 0 0 
                               f32_4 %75 = OpLoad %52 
                               f32_4 %76 = OpFMul %74 %75 
                                             OpStore %9 %76 
                               f32_4 %78 = OpLoad %77 
                               f32_4 %80 = OpLoad %79 
                               f32_4 %81 = OpFNegate %80 
                               f32_4 %82 = OpFAdd %78 %81 
                                             OpStore %52 %82 
                 read_only Texture2D %85 = OpLoad %12 
                             sampler %86 = OpLoad %16 
          read_only Texture2DSampled %87 = OpSampledImage %85 %86 
                               f32_4 %89 = OpLoad vs_TEXCOORD0 
                               f32_2 %90 = OpVectorShuffle %89 %89 0 1 
                               f32_4 %91 = OpImageSampleImplicitLod %87 %90 
                                 f32 %92 = OpCompositeExtract %91 3 
                        Private f32* %93 = OpAccessChain %84 %29 
                                             OpStore %93 %92 
                               f32_2 %94 = OpLoad %84 
                               f32_2 %95 = OpVectorShuffle %94 %94 0 0 
                               f32_4 %97 = OpLoad vs_TEXCOORD1 
                               f32_2 %98 = OpVectorShuffle %97 %97 0 0 
                               f32_2 %99 = OpFMul %95 %98 
                              f32_4 %100 = OpLoad vs_TEXCOORD1 
                              f32_2 %101 = OpVectorShuffle %100 %100 2 1 
                              f32_2 %102 = OpFNegate %101 
                              f32_2 %103 = OpFAdd %99 %102 
                                             OpStore %84 %103 
                              f32_2 %104 = OpLoad %84 
                              f32_2 %105 = OpCompositeConstruct %48 %48 
                              f32_2 %106 = OpCompositeConstruct %49 %49 
                              f32_2 %107 = OpExtInst %1 43 %104 %105 %106 
                                             OpStore %84 %107 
                              f32_2 %108 = OpLoad %84 
                              f32_4 %109 = OpVectorShuffle %108 %108 0 0 0 0 
                              f32_4 %110 = OpLoad %52 
                              f32_4 %111 = OpFMul %109 %110 
                              f32_4 %112 = OpLoad %79 
                              f32_4 %113 = OpFAdd %111 %112 
                                             OpStore %52 %113 
                              f32_2 %115 = OpLoad %84 
                              f32_4 %116 = OpVectorShuffle %115 %115 1 1 1 1 
                              f32_4 %117 = OpLoad %52 
                              f32_4 %118 = OpFMul %116 %117 
                                             OpStore %114 %118 
                       Private f32* %119 = OpAccessChain %52 %27 
                                f32 %120 = OpLoad %119 
                                f32 %121 = OpFNegate %120 
                       Private f32* %122 = OpAccessChain %84 %40 
                                f32 %123 = OpLoad %122 
                                f32 %124 = OpFMul %121 %123 
                                f32 %125 = OpFAdd %124 %49 
                       Private f32* %126 = OpAccessChain %52 %29 
                                             OpStore %126 %125 
                              f32_4 %127 = OpLoad %9 
                              f32_4 %128 = OpLoad %52 
                              f32_4 %129 = OpVectorShuffle %128 %128 0 0 0 0 
                              f32_4 %130 = OpFMul %127 %129 
                              f32_4 %131 = OpLoad %114 
                              f32_4 %132 = OpFAdd %130 %131 
                                             OpStore %9 %132 
                       Private f32* %133 = OpAccessChain %9 %27 
                                f32 %134 = OpLoad %133 
                         Input f32* %136 = OpAccessChain vs_TEXCOORD3 %135 
                                f32 %137 = OpLoad %136 
                                f32 %138 = OpFMul %134 %137 
                                f32 %140 = OpFAdd %138 %139 
                       Private f32* %141 = OpAccessChain %52 %29 
                                             OpStore %141 %140 
                       Private f32* %145 = OpAccessChain %52 %29 
                                f32 %146 = OpLoad %145 
                               bool %147 = OpFOrdLessThan %146 %48 
                                             OpStore %144 %147 
                               bool %148 = OpLoad %144 
                                i32 %150 = OpSelect %148 %57 %149 
                                i32 %152 = OpIMul %150 %151 
                               bool %153 = OpINotEqual %152 %149 
                                             OpSelectionMerge %155 None 
                                             OpBranchConditional %153 %154 %155 
                                    %154 = OpLabel 
                                             OpKill
                                    %155 = OpLabel 
                              f32_4 %157 = OpLoad %9 
                              f32_3 %158 = OpVectorShuffle %157 %157 0 1 2 
                              f32_4 %159 = OpLoad vs_TEXCOORD3 
                              f32_3 %160 = OpVectorShuffle %159 %159 2 2 2 
                              f32_3 %161 = OpFMul %158 %160 
                     Uniform f32_4* %162 = OpAccessChain %55 %149 
                              f32_4 %163 = OpLoad %162 
                              f32_3 %164 = OpVectorShuffle %163 %163 0 1 2 
                              f32_3 %165 = OpFNegate %164 
                              f32_3 %166 = OpFAdd %161 %165 
                              f32_4 %167 = OpLoad %9 
                              f32_4 %168 = OpVectorShuffle %167 %166 4 5 6 3 
                                             OpStore %9 %168 
                       Private f32* %170 = OpAccessChain %9 %27 
                                f32 %171 = OpLoad %170 
                         Input f32* %172 = OpAccessChain vs_TEXCOORD3 %135 
                                f32 %173 = OpLoad %172 
                                f32 %174 = OpFMul %171 %173 
                                             OpStore %169 %174 
                                f32 %177 = OpLoad %169 
                        Output f32* %179 = OpAccessChain %176 %27 
                                             OpStore %179 %177 
                                f32 %181 = OpLoad vs_TEXCOORDn0 
                                             OpStore %169 %181 
                                f32 %182 = OpLoad %169 
                                f32 %183 = OpExtInst %1 43 %182 %48 %49 
                                             OpStore %169 %183 
                                f32 %184 = OpLoad %169 
                              f32_3 %185 = OpCompositeConstruct %184 %184 %184 
                              f32_4 %186 = OpLoad %9 
                              f32_3 %187 = OpVectorShuffle %186 %186 0 1 2 
                              f32_3 %188 = OpFMul %185 %187 
                     Uniform f32_4* %189 = OpAccessChain %55 %149 
                              f32_4 %190 = OpLoad %189 
                              f32_3 %191 = OpVectorShuffle %190 %190 0 1 2 
                              f32_3 %192 = OpFAdd %188 %191 
                              f32_4 %193 = OpLoad %176 
                              f32_4 %194 = OpVectorShuffle %193 %192 4 5 6 3 
                                             OpStore %176 %194 
                                             OpReturn
                                             OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "UNITY_UI_CLIP_RECT" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "UNITY_UI_CLIP_RECT" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _FaceColor;
uniform 	float _FaceDilate;
uniform 	float _OutlineSoftness;
uniform 	vec4 _OutlineColor;
uniform 	float _OutlineWidth;
uniform 	float _WeightNormal;
uniform 	float _WeightBold;
uniform 	float _ScaleRatioA;
uniform 	float _VertexOffsetX;
uniform 	float _VertexOffsetY;
uniform 	vec4 _ClipRect;
uniform 	float _MaskSoftnessX;
uniform 	float _MaskSoftnessY;
uniform 	float _GradientScale;
uniform 	float _ScaleX;
uniform 	float _ScaleY;
uniform 	float _PerspectiveFilter;
uniform 	float _Sharpness;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_COLOR0;
in  vec2 in_TEXCOORD0;
in  vec2 in_TEXCOORD1;
out vec4 vs_COLOR0;
out vec4 vs_COLOR1;
out vec4 vs_TEXCOORD0;
out vec4 vs_TEXCOORD1;
out vec4 vs_TEXCOORD2;
vec2 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
float u_xlat5;
vec2 u_xlat6;
float u_xlat10;
float u_xlat11;
float u_xlat15;
bool u_xlatb15;
void main()
{
    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
    gl_Position = u_xlat2;
    u_xlat3 = in_COLOR0 * _FaceColor;
    u_xlat3.xyz = u_xlat3.www * u_xlat3.xyz;
    vs_COLOR0 = u_xlat3;
    u_xlat4.w = in_COLOR0.w * _OutlineColor.w;
    u_xlat4.xyz = u_xlat4.www * _OutlineColor.xyz;
    u_xlat4 = (-u_xlat3) + u_xlat4;
    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat10 = inversesqrt(u_xlat10);
    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat10 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat10 = inversesqrt(u_xlat10);
    u_xlat2.xyz = vec3(u_xlat10) * u_xlat2.xyz;
    u_xlat10 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat1.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;
    u_xlat1.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat1.xy;
    u_xlat1.xy = abs(u_xlat1.xy) * vec2(_ScaleX, _ScaleY);
    u_xlat1.xy = u_xlat2.ww / u_xlat1.xy;
    u_xlat15 = dot(u_xlat1.xy, u_xlat1.xy);
    u_xlat1.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) * vec2(0.25, 0.25) + u_xlat1.xy;
    vs_TEXCOORD2.zw = vec2(0.25, 0.25) / u_xlat1.xy;
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.x = abs(in_TEXCOORD1.y) * _GradientScale;
    u_xlat6.x = _Sharpness + 1.0;
    u_xlat1.x = u_xlat6.x * u_xlat1.x;
    u_xlat6.x = u_xlat15 * u_xlat1.x;
    u_xlat11 = (-_PerspectiveFilter) + 1.0;
    u_xlat11 = u_xlat11 * abs(u_xlat6.x);
    u_xlat15 = u_xlat15 * u_xlat1.x + (-u_xlat11);
    u_xlat10 = abs(u_xlat10) * u_xlat15 + u_xlat11;
    u_xlatb15 = hlslcc_mtx4x4glstate_matrix_projection[3].w==0.0;
    u_xlat10 = (u_xlatb15) ? u_xlat10 : u_xlat6.x;
    u_xlat15 = _OutlineSoftness * _ScaleRatioA;
    u_xlat15 = u_xlat15 * u_xlat10 + 1.0;
    u_xlat1.x = u_xlat10 / u_xlat15;
    u_xlat10 = _OutlineWidth * _ScaleRatioA;
    u_xlat10 = u_xlat10 * 0.5;
    u_xlat15 = u_xlat1.x * u_xlat10;
    u_xlat15 = u_xlat15 + u_xlat15;
    u_xlat15 = min(u_xlat15, 1.0);
    u_xlat15 = sqrt(u_xlat15);
    vs_COLOR1 = vec4(u_xlat15) * u_xlat4 + u_xlat3;
    u_xlat2 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));
    u_xlat2 = min(u_xlat2, vec4(2e+10, 2e+10, 2e+10, 2e+10));
    u_xlat6.xy = u_xlat0.xy + (-u_xlat2.xy);
    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + (-u_xlat2.xy);
    vs_TEXCOORD2.xy = (-u_xlat2.zw) + u_xlat0.xy;
    u_xlat0.xy = (-u_xlat2.xy) + u_xlat2.zw;
    vs_TEXCOORD0.zw = u_xlat6.xy / u_xlat0.xy;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlatb0 = 0.0>=in_TEXCOORD1.y;
    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);
    u_xlat5 = (-_WeightNormal) + _WeightBold;
    u_xlat0.x = u_xlat0.x * u_xlat5 + _WeightNormal;
    u_xlat0.x = u_xlat0.x * 0.25 + _FaceDilate;
    u_xlat0.x = u_xlat0.x * _ScaleRatioA;
    u_xlat0.x = (-u_xlat0.x) * 0.5 + 0.5;
    u_xlat1.w = u_xlat0.x * u_xlat1.x + -0.5;
    vs_TEXCOORD1.y = (-u_xlat10) * u_xlat1.x + u_xlat1.w;
    vs_TEXCOORD1.z = u_xlat10 * u_xlat1.x + u_xlat1.w;
    vs_TEXCOORD1.xw = u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ClipRect;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
in  vec4 vs_COLOR0;
in  vec4 vs_TEXCOORD0;
in  vec4 vs_TEXCOORD1;
in  vec4 vs_TEXCOORD2;
layout(location = 0) out vec4 SV_Target0;
vec2 u_xlat0;
vec4 u_xlat1;
float u_xlat2;
void main()
{
    u_xlat0.xy = (-_ClipRect.xy) + _ClipRect.zw;
    u_xlat0.xy = u_xlat0.xy + -abs(vs_TEXCOORD2.xy);
    u_xlat0.xy = u_xlat0.xy * vs_TEXCOORD2.zw;
    u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);
    u_xlat0.x = u_xlat0.y * u_xlat0.x;
    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2 = u_xlat1.w * vs_TEXCOORD1.x + (-vs_TEXCOORD1.w);
    u_xlat2 = clamp(u_xlat2, 0.0, 1.0);
    u_xlat1 = vec4(u_xlat2) * vs_COLOR0;
    SV_Target0 = u_xlat0.xxxx * u_xlat1;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "UNITY_UI_CLIP_RECT" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 514
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %12 %118 %122 %135 %154 %257 %266 %384 %427 %433 %490 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpDecorate %12 Location 12 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpDecorate %19 ArrayStride 19 
                                                      OpDecorate %20 ArrayStride 20 
                                                      OpDecorate %21 ArrayStride 21 
                                                      OpMemberDecorate %22 0 Offset 22 
                                                      OpMemberDecorate %22 1 Offset 22 
                                                      OpMemberDecorate %22 2 Offset 22 
                                                      OpMemberDecorate %22 3 Offset 22 
                                                      OpMemberDecorate %22 4 Offset 22 
                                                      OpMemberDecorate %22 5 Offset 22 
                                                      OpMemberDecorate %22 6 Offset 22 
                                                      OpMemberDecorate %22 7 Offset 22 
                                                      OpMemberDecorate %22 8 Offset 22 
                                                      OpMemberDecorate %22 9 Offset 22 
                                                      OpMemberDecorate %22 10 Offset 22 
                                                      OpMemberDecorate %22 11 Offset 22 
                                                      OpMemberDecorate %22 12 Offset 22 
                                                      OpMemberDecorate %22 13 Offset 22 
                                                      OpMemberDecorate %22 14 Offset 22 
                                                      OpMemberDecorate %22 15 Offset 22 
                                                      OpMemberDecorate %22 16 Offset 22 
                                                      OpMemberDecorate %22 17 Offset 22 
                                                      OpMemberDecorate %22 18 Offset 22 
                                                      OpMemberDecorate %22 19 Offset 22 
                                                      OpMemberDecorate %22 20 Offset 22 
                                                      OpMemberDecorate %22 21 Offset 22 
                                                      OpMemberDecorate %22 22 Offset 22 
                                                      OpMemberDecorate %22 23 Offset 22 
                                                      OpDecorate %22 Block 
                                                      OpDecorate %24 DescriptorSet 24 
                                                      OpDecorate %24 Binding 24 
                                                      OpMemberDecorate %116 0 BuiltIn 116 
                                                      OpMemberDecorate %116 1 BuiltIn 116 
                                                      OpMemberDecorate %116 2 BuiltIn 116 
                                                      OpDecorate %116 Block 
                                                      OpDecorate %122 Location 122 
                                                      OpDecorate %135 Location 135 
                                                      OpDecorate %154 Location 154 
                                                      OpDecorate vs_TEXCOORD2 Location 257 
                                                      OpDecorate %266 Location 266 
                                                      OpDecorate %384 Location 384 
                                                      OpDecorate vs_TEXCOORD0 Location 427 
                                                      OpDecorate %433 Location 433 
                                                      OpDecorate vs_TEXCOORD1 Location 490 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 2 
                                               %8 = OpTypePointer Private %7 
                                Private f32_2* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 4 
                                              %11 = OpTypePointer Input %10 
                                 Input f32_4* %12 = OpVariable Input 
                                              %15 = OpTypeVector %6 3 
                                              %16 = OpTypeInt 32 0 
                                          u32 %17 = OpConstant 4 
                                              %18 = OpTypeArray %10 %17 
                                              %19 = OpTypeArray %10 %17 
                                              %20 = OpTypeArray %10 %17 
                                              %21 = OpTypeArray %10 %17 
                                              %22 = OpTypeStruct %15 %10 %18 %19 %20 %21 %10 %6 %6 %10 %6 %6 %6 %6 %6 %6 %10 %6 %6 %6 %6 %6 %6 %6 
                                              %23 = OpTypePointer Uniform %22 
Uniform struct {f32_3; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4[4]; f32_4; f32; f32; f32_4; f32; f32; f32; f32; f32; f32; f32_4; f32; f32; f32; f32; f32; f32; f32;}* %24 = OpVariable Uniform 
                                              %25 = OpTypeInt 32 1 
                                          i32 %26 = OpConstant 14 
                                              %27 = OpTypePointer Uniform %6 
                                          i32 %30 = OpConstant 15 
                                              %35 = OpTypePointer Private %10 
                               Private f32_4* %36 = OpVariable Private 
                                          i32 %39 = OpConstant 2 
                                          i32 %40 = OpConstant 1 
                                              %41 = OpTypePointer Uniform %10 
                                          i32 %45 = OpConstant 0 
                               Private f32_4* %60 = OpVariable Private 
                                          i32 %62 = OpConstant 3 
                                              %80 = OpTypePointer Uniform %15 
                               Private f32_4* %86 = OpVariable Private 
                                          i32 %89 = OpConstant 5 
                                         u32 %114 = OpConstant 1 
                                             %115 = OpTypeArray %6 %114 
                                             %116 = OpTypeStruct %10 %6 %115 
                                             %117 = OpTypePointer Output %116 
        Output struct {f32_4; f32; f32[1];}* %118 = OpVariable Output 
                                             %120 = OpTypePointer Output %10 
                                Input f32_4* %122 = OpVariable Input 
                                         i32 %124 = OpConstant 6 
                               Output f32_4* %135 = OpVariable Output 
                                             %137 = OpTypePointer Private %6 
                                Private f32* %138 = OpVariable Private 
                                             %153 = OpTypePointer Input %15 
                                Input f32_3* %154 = OpVariable Input 
                                         u32 %160 = OpConstant 0 
                                         u32 %173 = OpConstant 2 
                                         i32 %197 = OpConstant 4 
                                         i32 %219 = OpConstant 20 
                                         i32 %222 = OpConstant 21 
                                Private f32* %236 = OpVariable Private 
                                         i32 %242 = OpConstant 17 
                                         i32 %245 = OpConstant 18 
                                         f32 %249 = OpConstant 3.674022E-40 
                                       f32_2 %250 = OpConstantComposite %249 %249 
                       Output f32_4* vs_TEXCOORD2 = OpVariable Output 
                                             %265 = OpTypePointer Input %7 
                                Input f32_2* %266 = OpVariable Input 
                                             %267 = OpTypePointer Input %6 
                                         i32 %271 = OpConstant 19 
                              Private f32_2* %276 = OpVariable Private 
                                         i32 %277 = OpConstant 23 
                                         f32 %280 = OpConstant 3.674022E-40 
                                Private f32* %294 = OpVariable Private 
                                         i32 %295 = OpConstant 22 
                                             %318 = OpTypeBool 
                                             %319 = OpTypePointer Private %318 
                               Private bool* %320 = OpVariable Private 
                                         u32 %321 = OpConstant 3 
                                         f32 %324 = OpConstant 3.674022E-40 
                                             %327 = OpTypePointer Function %6 
                                         i32 %336 = OpConstant 8 
                                         i32 %339 = OpConstant 13 
                                         i32 %351 = OpConstant 10 
                                         i32 %367 = OpConstant 9 
                               Output f32_4* %384 = OpVariable Output 
                                         i32 %391 = OpConstant 16 
                                         f32 %394 = OpConstant 3.674022E-40 
                                       f32_4 %395 = OpConstantComposite %394 %394 %394 %394 
                                         f32 %398 = OpConstant 3.674022E-40 
                                       f32_4 %399 = OpConstantComposite %398 %398 %398 %398 
                                         f32 %407 = OpConstant 3.674022E-40 
                                       f32_2 %408 = OpConstantComposite %407 %407 
                       Output f32_4* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_2* %433 = OpVariable Input 
                               Private bool* %437 = OpVariable Private 
                                Private f32* %444 = OpVariable Private 
                                         i32 %445 = OpConstant 11 
                                         i32 %449 = OpConstant 12 
                                         i32 %464 = OpConstant 7 
                                         f32 %478 = OpConstant 3.674022E-40 
                                         f32 %487 = OpConstant 3.674022E-40 
                       Output f32_4* vs_TEXCOORD1 = OpVariable Output 
                                             %501 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                               Function f32* %328 = OpVariable Function 
                                        f32_4 %13 = OpLoad %12 
                                        f32_2 %14 = OpVectorShuffle %13 %13 0 1 
                                 Uniform f32* %28 = OpAccessChain %24 %26 
                                          f32 %29 = OpLoad %28 
                                 Uniform f32* %31 = OpAccessChain %24 %30 
                                          f32 %32 = OpLoad %31 
                                        f32_2 %33 = OpCompositeConstruct %29 %32 
                                        f32_2 %34 = OpFAdd %14 %33 
                                                      OpStore %9 %34 
                                        f32_2 %37 = OpLoad %9 
                                        f32_4 %38 = OpVectorShuffle %37 %37 1 1 1 1 
                               Uniform f32_4* %42 = OpAccessChain %24 %39 %40 
                                        f32_4 %43 = OpLoad %42 
                                        f32_4 %44 = OpFMul %38 %43 
                                                      OpStore %36 %44 
                               Uniform f32_4* %46 = OpAccessChain %24 %39 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_2 %48 = OpLoad %9 
                                        f32_4 %49 = OpVectorShuffle %48 %48 0 0 0 0 
                                        f32_4 %50 = OpFMul %47 %49 
                                        f32_4 %51 = OpLoad %36 
                                        f32_4 %52 = OpFAdd %50 %51 
                                                      OpStore %36 %52 
                               Uniform f32_4* %53 = OpAccessChain %24 %39 %39 
                                        f32_4 %54 = OpLoad %53 
                                        f32_4 %55 = OpLoad %12 
                                        f32_4 %56 = OpVectorShuffle %55 %55 2 2 2 2 
                                        f32_4 %57 = OpFMul %54 %56 
                                        f32_4 %58 = OpLoad %36 
                                        f32_4 %59 = OpFAdd %57 %58 
                                                      OpStore %36 %59 
                                        f32_4 %61 = OpLoad %36 
                               Uniform f32_4* %63 = OpAccessChain %24 %39 %62 
                                        f32_4 %64 = OpLoad %63 
                                        f32_4 %65 = OpFAdd %61 %64 
                                                      OpStore %60 %65 
                               Uniform f32_4* %66 = OpAccessChain %24 %39 %62 
                                        f32_4 %67 = OpLoad %66 
                                        f32_3 %68 = OpVectorShuffle %67 %67 0 1 2 
                                        f32_4 %69 = OpLoad %12 
                                        f32_3 %70 = OpVectorShuffle %69 %69 3 3 3 
                                        f32_3 %71 = OpFMul %68 %70 
                                        f32_4 %72 = OpLoad %36 
                                        f32_3 %73 = OpVectorShuffle %72 %72 0 1 2 
                                        f32_3 %74 = OpFAdd %71 %73 
                                        f32_4 %75 = OpLoad %36 
                                        f32_4 %76 = OpVectorShuffle %75 %74 4 5 6 3 
                                                      OpStore %36 %76 
                                        f32_4 %77 = OpLoad %36 
                                        f32_3 %78 = OpVectorShuffle %77 %77 0 1 2 
                                        f32_3 %79 = OpFNegate %78 
                               Uniform f32_3* %81 = OpAccessChain %24 %45 
                                        f32_3 %82 = OpLoad %81 
                                        f32_3 %83 = OpFAdd %79 %82 
                                        f32_4 %84 = OpLoad %36 
                                        f32_4 %85 = OpVectorShuffle %84 %83 4 5 6 3 
                                                      OpStore %36 %85 
                                        f32_4 %87 = OpLoad %60 
                                        f32_4 %88 = OpVectorShuffle %87 %87 1 1 1 1 
                               Uniform f32_4* %90 = OpAccessChain %24 %89 %40 
                                        f32_4 %91 = OpLoad %90 
                                        f32_4 %92 = OpFMul %88 %91 
                                                      OpStore %86 %92 
                               Uniform f32_4* %93 = OpAccessChain %24 %89 %45 
                                        f32_4 %94 = OpLoad %93 
                                        f32_4 %95 = OpLoad %60 
                                        f32_4 %96 = OpVectorShuffle %95 %95 0 0 0 0 
                                        f32_4 %97 = OpFMul %94 %96 
                                        f32_4 %98 = OpLoad %86 
                                        f32_4 %99 = OpFAdd %97 %98 
                                                      OpStore %86 %99 
                              Uniform f32_4* %100 = OpAccessChain %24 %89 %39 
                                       f32_4 %101 = OpLoad %100 
                                       f32_4 %102 = OpLoad %60 
                                       f32_4 %103 = OpVectorShuffle %102 %102 2 2 2 2 
                                       f32_4 %104 = OpFMul %101 %103 
                                       f32_4 %105 = OpLoad %86 
                                       f32_4 %106 = OpFAdd %104 %105 
                                                      OpStore %86 %106 
                              Uniform f32_4* %107 = OpAccessChain %24 %89 %62 
                                       f32_4 %108 = OpLoad %107 
                                       f32_4 %109 = OpLoad %60 
                                       f32_4 %110 = OpVectorShuffle %109 %109 3 3 3 3 
                                       f32_4 %111 = OpFMul %108 %110 
                                       f32_4 %112 = OpLoad %86 
                                       f32_4 %113 = OpFAdd %111 %112 
                                                      OpStore %60 %113 
                                       f32_4 %119 = OpLoad %60 
                               Output f32_4* %121 = OpAccessChain %118 %45 
                                                      OpStore %121 %119 
                                       f32_4 %123 = OpLoad %122 
                              Uniform f32_4* %125 = OpAccessChain %24 %124 
                                       f32_4 %126 = OpLoad %125 
                                       f32_4 %127 = OpFMul %123 %126 
                                                      OpStore %86 %127 
                                       f32_4 %128 = OpLoad %86 
                                       f32_3 %129 = OpVectorShuffle %128 %128 3 3 3 
                                       f32_4 %130 = OpLoad %86 
                                       f32_3 %131 = OpVectorShuffle %130 %130 0 1 2 
                                       f32_3 %132 = OpFMul %129 %131 
                                       f32_4 %133 = OpLoad %86 
                                       f32_4 %134 = OpVectorShuffle %133 %132 4 5 6 3 
                                                      OpStore %86 %134 
                                       f32_4 %136 = OpLoad %86 
                                                      OpStore %135 %136 
                                       f32_4 %139 = OpLoad %36 
                                       f32_3 %140 = OpVectorShuffle %139 %139 0 1 2 
                                       f32_4 %141 = OpLoad %36 
                                       f32_3 %142 = OpVectorShuffle %141 %141 0 1 2 
                                         f32 %143 = OpDot %140 %142 
                                                      OpStore %138 %143 
                                         f32 %144 = OpLoad %138 
                                         f32 %145 = OpExtInst %1 32 %144 
                                                      OpStore %138 %145 
                                         f32 %146 = OpLoad %138 
                                       f32_3 %147 = OpCompositeConstruct %146 %146 %146 
                                       f32_4 %148 = OpLoad %36 
                                       f32_3 %149 = OpVectorShuffle %148 %148 0 1 2 
                                       f32_3 %150 = OpFMul %147 %149 
                                       f32_4 %151 = OpLoad %36 
                                       f32_4 %152 = OpVectorShuffle %151 %150 4 5 6 3 
                                                      OpStore %36 %152 
                                       f32_3 %155 = OpLoad %154 
                              Uniform f32_4* %156 = OpAccessChain %24 %62 %45 
                                       f32_4 %157 = OpLoad %156 
                                       f32_3 %158 = OpVectorShuffle %157 %157 0 1 2 
                                         f32 %159 = OpDot %155 %158 
                                Private f32* %161 = OpAccessChain %60 %160 
                                                      OpStore %161 %159 
                                       f32_3 %162 = OpLoad %154 
                              Uniform f32_4* %163 = OpAccessChain %24 %62 %40 
                                       f32_4 %164 = OpLoad %163 
                                       f32_3 %165 = OpVectorShuffle %164 %164 0 1 2 
                                         f32 %166 = OpDot %162 %165 
                                Private f32* %167 = OpAccessChain %60 %114 
                                                      OpStore %167 %166 
                                       f32_3 %168 = OpLoad %154 
                              Uniform f32_4* %169 = OpAccessChain %24 %62 %39 
                                       f32_4 %170 = OpLoad %169 
                                       f32_3 %171 = OpVectorShuffle %170 %170 0 1 2 
                                         f32 %172 = OpDot %168 %171 
                                Private f32* %174 = OpAccessChain %60 %173 
                                                      OpStore %174 %172 
                                       f32_4 %175 = OpLoad %60 
                                       f32_3 %176 = OpVectorShuffle %175 %175 0 1 2 
                                       f32_4 %177 = OpLoad %60 
                                       f32_3 %178 = OpVectorShuffle %177 %177 0 1 2 
                                         f32 %179 = OpDot %176 %178 
                                                      OpStore %138 %179 
                                         f32 %180 = OpLoad %138 
                                         f32 %181 = OpExtInst %1 32 %180 
                                                      OpStore %138 %181 
                                         f32 %182 = OpLoad %138 
                                       f32_3 %183 = OpCompositeConstruct %182 %182 %182 
                                       f32_4 %184 = OpLoad %60 
                                       f32_3 %185 = OpVectorShuffle %184 %184 0 1 2 
                                       f32_3 %186 = OpFMul %183 %185 
                                       f32_4 %187 = OpLoad %60 
                                       f32_4 %188 = OpVectorShuffle %187 %186 4 5 6 3 
                                                      OpStore %60 %188 
                                       f32_4 %189 = OpLoad %60 
                                       f32_3 %190 = OpVectorShuffle %189 %189 0 1 2 
                                       f32_4 %191 = OpLoad %36 
                                       f32_3 %192 = OpVectorShuffle %191 %191 0 1 2 
                                         f32 %193 = OpDot %190 %192 
                                                      OpStore %138 %193 
                              Uniform f32_4* %194 = OpAccessChain %24 %40 
                                       f32_4 %195 = OpLoad %194 
                                       f32_2 %196 = OpVectorShuffle %195 %195 1 1 
                              Uniform f32_4* %198 = OpAccessChain %24 %197 %40 
                                       f32_4 %199 = OpLoad %198 
                                       f32_2 %200 = OpVectorShuffle %199 %199 0 1 
                                       f32_2 %201 = OpFMul %196 %200 
                                       f32_4 %202 = OpLoad %36 
                                       f32_4 %203 = OpVectorShuffle %202 %201 4 5 2 3 
                                                      OpStore %36 %203 
                              Uniform f32_4* %204 = OpAccessChain %24 %197 %45 
                                       f32_4 %205 = OpLoad %204 
                                       f32_2 %206 = OpVectorShuffle %205 %205 0 1 
                              Uniform f32_4* %207 = OpAccessChain %24 %40 
                                       f32_4 %208 = OpLoad %207 
                                       f32_2 %209 = OpVectorShuffle %208 %208 0 0 
                                       f32_2 %210 = OpFMul %206 %209 
                                       f32_4 %211 = OpLoad %36 
                                       f32_2 %212 = OpVectorShuffle %211 %211 0 1 
                                       f32_2 %213 = OpFAdd %210 %212 
                                       f32_4 %214 = OpLoad %36 
                                       f32_4 %215 = OpVectorShuffle %214 %213 4 5 2 3 
                                                      OpStore %36 %215 
                                       f32_4 %216 = OpLoad %36 
                                       f32_2 %217 = OpVectorShuffle %216 %216 0 1 
                                       f32_2 %218 = OpExtInst %1 4 %217 
                                Uniform f32* %220 = OpAccessChain %24 %219 
                                         f32 %221 = OpLoad %220 
                                Uniform f32* %223 = OpAccessChain %24 %222 
                                         f32 %224 = OpLoad %223 
                                       f32_2 %225 = OpCompositeConstruct %221 %224 
                                       f32_2 %226 = OpFMul %218 %225 
                                       f32_4 %227 = OpLoad %36 
                                       f32_4 %228 = OpVectorShuffle %227 %226 4 5 2 3 
                                                      OpStore %36 %228 
                                       f32_4 %229 = OpLoad %60 
                                       f32_2 %230 = OpVectorShuffle %229 %229 3 3 
                                       f32_4 %231 = OpLoad %36 
                                       f32_2 %232 = OpVectorShuffle %231 %231 0 1 
                                       f32_2 %233 = OpFDiv %230 %232 
                                       f32_4 %234 = OpLoad %36 
                                       f32_4 %235 = OpVectorShuffle %234 %233 4 5 2 3 
                                                      OpStore %36 %235 
                                       f32_4 %237 = OpLoad %36 
                                       f32_2 %238 = OpVectorShuffle %237 %237 0 1 
                                       f32_4 %239 = OpLoad %36 
                                       f32_2 %240 = OpVectorShuffle %239 %239 0 1 
                                         f32 %241 = OpDot %238 %240 
                                                      OpStore %236 %241 
                                Uniform f32* %243 = OpAccessChain %24 %242 
                                         f32 %244 = OpLoad %243 
                                Uniform f32* %246 = OpAccessChain %24 %245 
                                         f32 %247 = OpLoad %246 
                                       f32_2 %248 = OpCompositeConstruct %244 %247 
                                       f32_2 %251 = OpFMul %248 %250 
                                       f32_4 %252 = OpLoad %36 
                                       f32_2 %253 = OpVectorShuffle %252 %252 0 1 
                                       f32_2 %254 = OpFAdd %251 %253 
                                       f32_4 %255 = OpLoad %36 
                                       f32_4 %256 = OpVectorShuffle %255 %254 4 5 2 3 
                                                      OpStore %36 %256 
                                       f32_4 %258 = OpLoad %36 
                                       f32_2 %259 = OpVectorShuffle %258 %258 0 1 
                                       f32_2 %260 = OpFDiv %250 %259 
                                       f32_4 %261 = OpLoad vs_TEXCOORD2 
                                       f32_4 %262 = OpVectorShuffle %261 %260 0 1 4 5 
                                                      OpStore vs_TEXCOORD2 %262 
                                         f32 %263 = OpLoad %236 
                                         f32 %264 = OpExtInst %1 32 %263 
                                                      OpStore %236 %264 
                                  Input f32* %268 = OpAccessChain %266 %114 
                                         f32 %269 = OpLoad %268 
                                         f32 %270 = OpExtInst %1 4 %269 
                                Uniform f32* %272 = OpAccessChain %24 %271 
                                         f32 %273 = OpLoad %272 
                                         f32 %274 = OpFMul %270 %273 
                                Private f32* %275 = OpAccessChain %36 %160 
                                                      OpStore %275 %274 
                                Uniform f32* %278 = OpAccessChain %24 %277 
                                         f32 %279 = OpLoad %278 
                                         f32 %281 = OpFAdd %279 %280 
                                Private f32* %282 = OpAccessChain %276 %160 
                                                      OpStore %282 %281 
                                Private f32* %283 = OpAccessChain %276 %160 
                                         f32 %284 = OpLoad %283 
                                Private f32* %285 = OpAccessChain %36 %160 
                                         f32 %286 = OpLoad %285 
                                         f32 %287 = OpFMul %284 %286 
                                Private f32* %288 = OpAccessChain %36 %160 
                                                      OpStore %288 %287 
                                         f32 %289 = OpLoad %236 
                                Private f32* %290 = OpAccessChain %36 %160 
                                         f32 %291 = OpLoad %290 
                                         f32 %292 = OpFMul %289 %291 
                                Private f32* %293 = OpAccessChain %276 %160 
                                                      OpStore %293 %292 
                                Uniform f32* %296 = OpAccessChain %24 %295 
                                         f32 %297 = OpLoad %296 
                                         f32 %298 = OpFNegate %297 
                                         f32 %299 = OpFAdd %298 %280 
                                                      OpStore %294 %299 
                                         f32 %300 = OpLoad %294 
                                Private f32* %301 = OpAccessChain %276 %160 
                                         f32 %302 = OpLoad %301 
                                         f32 %303 = OpExtInst %1 4 %302 
                                         f32 %304 = OpFMul %300 %303 
                                                      OpStore %294 %304 
                                         f32 %305 = OpLoad %236 
                                Private f32* %306 = OpAccessChain %36 %160 
                                         f32 %307 = OpLoad %306 
                                         f32 %308 = OpFMul %305 %307 
                                         f32 %309 = OpLoad %294 
                                         f32 %310 = OpFNegate %309 
                                         f32 %311 = OpFAdd %308 %310 
                                                      OpStore %236 %311 
                                         f32 %312 = OpLoad %138 
                                         f32 %313 = OpExtInst %1 4 %312 
                                         f32 %314 = OpLoad %236 
                                         f32 %315 = OpFMul %313 %314 
                                         f32 %316 = OpLoad %294 
                                         f32 %317 = OpFAdd %315 %316 
                                                      OpStore %138 %317 
                                Uniform f32* %322 = OpAccessChain %24 %197 %62 %321 
                                         f32 %323 = OpLoad %322 
                                        bool %325 = OpFOrdEqual %323 %324 
                                                      OpStore %320 %325 
                                        bool %326 = OpLoad %320 
                                                      OpSelectionMerge %330 None 
                                                      OpBranchConditional %326 %329 %332 
                                             %329 = OpLabel 
                                         f32 %331 = OpLoad %138 
                                                      OpStore %328 %331 
                                                      OpBranch %330 
                                             %332 = OpLabel 
                                Private f32* %333 = OpAccessChain %276 %160 
                                         f32 %334 = OpLoad %333 
                                                      OpStore %328 %334 
                                                      OpBranch %330 
                                             %330 = OpLabel 
                                         f32 %335 = OpLoad %328 
                                                      OpStore %138 %335 
                                Uniform f32* %337 = OpAccessChain %24 %336 
                                         f32 %338 = OpLoad %337 
                                Uniform f32* %340 = OpAccessChain %24 %339 
                                         f32 %341 = OpLoad %340 
                                         f32 %342 = OpFMul %338 %341 
                                                      OpStore %236 %342 
                                         f32 %343 = OpLoad %236 
                                         f32 %344 = OpLoad %138 
                                         f32 %345 = OpFMul %343 %344 
                                         f32 %346 = OpFAdd %345 %280 
                                                      OpStore %236 %346 
                                         f32 %347 = OpLoad %138 
                                         f32 %348 = OpLoad %236 
                                         f32 %349 = OpFDiv %347 %348 
                                Private f32* %350 = OpAccessChain %36 %160 
                                                      OpStore %350 %349 
                                Uniform f32* %352 = OpAccessChain %24 %351 
                                         f32 %353 = OpLoad %352 
                                Uniform f32* %354 = OpAccessChain %24 %339 
                                         f32 %355 = OpLoad %354 
                                         f32 %356 = OpFMul %353 %355 
                                                      OpStore %138 %356 
                                Private f32* %357 = OpAccessChain %36 %160 
                                         f32 %358 = OpLoad %357 
                                         f32 %359 = OpLoad %138 
                                         f32 %360 = OpFMul %358 %359 
                                                      OpStore %138 %360 
                                         f32 %361 = OpLoad %138 
                                         f32 %362 = OpExtInst %1 37 %361 %280 
                                                      OpStore %236 %362 
                                         f32 %363 = OpLoad %236 
                                         f32 %364 = OpExtInst %1 31 %363 
                                                      OpStore %236 %364 
                                  Input f32* %365 = OpAccessChain %122 %321 
                                         f32 %366 = OpLoad %365 
                                Uniform f32* %368 = OpAccessChain %24 %367 %321 
                                         f32 %369 = OpLoad %368 
                                         f32 %370 = OpFMul %366 %369 
                                Private f32* %371 = OpAccessChain %60 %321 
                                                      OpStore %371 %370 
                                       f32_4 %372 = OpLoad %60 
                                       f32_3 %373 = OpVectorShuffle %372 %372 3 3 3 
                              Uniform f32_4* %374 = OpAccessChain %24 %367 
                                       f32_4 %375 = OpLoad %374 
                                       f32_3 %376 = OpVectorShuffle %375 %375 0 1 2 
                                       f32_3 %377 = OpFMul %373 %376 
                                       f32_4 %378 = OpLoad %60 
                                       f32_4 %379 = OpVectorShuffle %378 %377 4 5 6 3 
                                                      OpStore %60 %379 
                                       f32_4 %380 = OpLoad %86 
                                       f32_4 %381 = OpFNegate %380 
                                       f32_4 %382 = OpLoad %60 
                                       f32_4 %383 = OpFAdd %381 %382 
                                                      OpStore %60 %383 
                                         f32 %385 = OpLoad %236 
                                       f32_4 %386 = OpCompositeConstruct %385 %385 %385 %385 
                                       f32_4 %387 = OpLoad %60 
                                       f32_4 %388 = OpFMul %386 %387 
                                       f32_4 %389 = OpLoad %86 
                                       f32_4 %390 = OpFAdd %388 %389 
                                                      OpStore %384 %390 
                              Uniform f32_4* %392 = OpAccessChain %24 %391 
                                       f32_4 %393 = OpLoad %392 
                                       f32_4 %396 = OpExtInst %1 40 %393 %395 
                                                      OpStore %60 %396 
                                       f32_4 %397 = OpLoad %60 
                                       f32_4 %400 = OpExtInst %1 37 %397 %399 
                                                      OpStore %60 %400 
                                       f32_2 %401 = OpLoad %9 
                                       f32_4 %402 = OpLoad %60 
                                       f32_2 %403 = OpVectorShuffle %402 %402 0 1 
                                       f32_2 %404 = OpFNegate %403 
                                       f32_2 %405 = OpFAdd %401 %404 
                                                      OpStore %276 %405 
                                       f32_2 %406 = OpLoad %9 
                                       f32_2 %409 = OpFMul %406 %408 
                                       f32_4 %410 = OpLoad %60 
                                       f32_2 %411 = OpVectorShuffle %410 %410 0 1 
                                       f32_2 %412 = OpFNegate %411 
                                       f32_2 %413 = OpFAdd %409 %412 
                                                      OpStore %9 %413 
                                       f32_4 %414 = OpLoad %60 
                                       f32_2 %415 = OpVectorShuffle %414 %414 2 3 
                                       f32_2 %416 = OpFNegate %415 
                                       f32_2 %417 = OpLoad %9 
                                       f32_2 %418 = OpFAdd %416 %417 
                                       f32_4 %419 = OpLoad vs_TEXCOORD2 
                                       f32_4 %420 = OpVectorShuffle %419 %418 4 5 2 3 
                                                      OpStore vs_TEXCOORD2 %420 
                                       f32_4 %421 = OpLoad %60 
                                       f32_2 %422 = OpVectorShuffle %421 %421 0 1 
                                       f32_2 %423 = OpFNegate %422 
                                       f32_4 %424 = OpLoad %60 
                                       f32_2 %425 = OpVectorShuffle %424 %424 2 3 
                                       f32_2 %426 = OpFAdd %423 %425 
                                                      OpStore %9 %426 
                                       f32_2 %428 = OpLoad %276 
                                       f32_2 %429 = OpLoad %9 
                                       f32_2 %430 = OpFDiv %428 %429 
                                       f32_4 %431 = OpLoad vs_TEXCOORD0 
                                       f32_4 %432 = OpVectorShuffle %431 %430 0 1 4 5 
                                                      OpStore vs_TEXCOORD0 %432 
                                       f32_2 %434 = OpLoad %433 
                                       f32_4 %435 = OpLoad vs_TEXCOORD0 
                                       f32_4 %436 = OpVectorShuffle %435 %434 4 5 2 3 
                                                      OpStore vs_TEXCOORD0 %436 
                                  Input f32* %438 = OpAccessChain %266 %114 
                                         f32 %439 = OpLoad %438 
                                        bool %440 = OpFOrdGreaterThanEqual %324 %439 
                                                      OpStore %437 %440 
                                        bool %441 = OpLoad %437 
                                         f32 %442 = OpSelect %441 %280 %324 
                                Private f32* %443 = OpAccessChain %9 %160 
                                                      OpStore %443 %442 
                                Uniform f32* %446 = OpAccessChain %24 %445 
                                         f32 %447 = OpLoad %446 
                                         f32 %448 = OpFNegate %447 
                                Uniform f32* %450 = OpAccessChain %24 %449 
                                         f32 %451 = OpLoad %450 
                                         f32 %452 = OpFAdd %448 %451 
                                                      OpStore %444 %452 
                                Private f32* %453 = OpAccessChain %9 %160 
                                         f32 %454 = OpLoad %453 
                                         f32 %455 = OpLoad %444 
                                         f32 %456 = OpFMul %454 %455 
                                Uniform f32* %457 = OpAccessChain %24 %445 
                                         f32 %458 = OpLoad %457 
                                         f32 %459 = OpFAdd %456 %458 
                                Private f32* %460 = OpAccessChain %9 %160 
                                                      OpStore %460 %459 
                                Private f32* %461 = OpAccessChain %9 %160 
                                         f32 %462 = OpLoad %461 
                                         f32 %463 = OpFMul %462 %249 
                                Uniform f32* %465 = OpAccessChain %24 %464 
                                         f32 %466 = OpLoad %465 
                                         f32 %467 = OpFAdd %463 %466 
                                Private f32* %468 = OpAccessChain %9 %160 
                                                      OpStore %468 %467 
                                Private f32* %469 = OpAccessChain %9 %160 
                                         f32 %470 = OpLoad %469 
                                Uniform f32* %471 = OpAccessChain %24 %339 
                                         f32 %472 = OpLoad %471 
                                         f32 %473 = OpFMul %470 %472 
                                Private f32* %474 = OpAccessChain %9 %160 
                                                      OpStore %474 %473 
                                Private f32* %475 = OpAccessChain %9 %160 
                                         f32 %476 = OpLoad %475 
                                         f32 %477 = OpFNegate %476 
                                         f32 %479 = OpFMul %477 %478 
                                         f32 %480 = OpFAdd %479 %478 
                                Private f32* %481 = OpAccessChain %9 %160 
                                                      OpStore %481 %480 
                                Private f32* %482 = OpAccessChain %9 %160 
                                         f32 %483 = OpLoad %482 
                                Private f32* %484 = OpAccessChain %36 %160 
                                         f32 %485 = OpLoad %484 
                                         f32 %486 = OpFMul %483 %485 
                                         f32 %488 = OpFAdd %486 %487 
                                Private f32* %489 = OpAccessChain %36 %321 
                                                      OpStore %489 %488 
                                       f32_4 %491 = OpLoad %36 
                                       f32_2 %492 = OpVectorShuffle %491 %491 0 3 
                                       f32_4 %493 = OpLoad vs_TEXCOORD1 
                                       f32_4 %494 = OpVectorShuffle %493 %492 4 1 2 5 
                                                      OpStore vs_TEXCOORD1 %494 
                                         f32 %495 = OpLoad %138 
                                         f32 %496 = OpFNegate %495 
                                         f32 %497 = OpFMul %496 %478 
                                Private f32* %498 = OpAccessChain %36 %321 
                                         f32 %499 = OpLoad %498 
                                         f32 %500 = OpFAdd %497 %499 
                                 Output f32* %502 = OpAccessChain vs_TEXCOORD1 %114 
                                                      OpStore %502 %500 
                                         f32 %503 = OpLoad %138 
                                         f32 %504 = OpFMul %503 %478 
                                Private f32* %505 = OpAccessChain %36 %321 
                                         f32 %506 = OpLoad %505 
                                         f32 %507 = OpFAdd %504 %506 
                                 Output f32* %508 = OpAccessChain vs_TEXCOORD1 %173 
                                                      OpStore %508 %507 
                                 Output f32* %509 = OpAccessChain %118 %45 %114 
                                         f32 %510 = OpLoad %509 
                                         f32 %511 = OpFNegate %510 
                                 Output f32* %512 = OpAccessChain %118 %45 %114 
                                                      OpStore %512 %511 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 96
; Schema: 0
                                             OpCapability Shader 
                                      %1 = OpExtInstImport "GLSL.std.450" 
                                             OpMemoryModel Logical GLSL450 
                                             OpEntryPoint Fragment %4 "main" %27 %64 %71 %86 %90 
                                             OpExecutionMode %4 OriginUpperLeft 
                                             OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                             OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                             OpMemberDecorate %11 0 Offset 11 
                                             OpDecorate %11 Block 
                                             OpDecorate %13 DescriptorSet 13 
                                             OpDecorate %13 Binding 13 
                                             OpDecorate vs_TEXCOORD2 Location 27 
                                             OpDecorate %56 DescriptorSet 56 
                                             OpDecorate %56 Binding 56 
                                             OpDecorate %60 DescriptorSet 60 
                                             OpDecorate %60 Binding 60 
                                             OpDecorate vs_TEXCOORD0 Location 64 
                                             OpDecorate vs_TEXCOORD1 Location 71 
                                             OpDecorate %86 Location 86 
                                             OpDecorate %90 Location 90 
                                      %2 = OpTypeVoid 
                                      %3 = OpTypeFunction %2 
                                      %6 = OpTypeFloat 32 
                                      %7 = OpTypeVector %6 2 
                                      %8 = OpTypePointer Private %7 
                       Private f32_2* %9 = OpVariable Private 
                                     %10 = OpTypeVector %6 4 
                                     %11 = OpTypeStruct %10 
                                     %12 = OpTypePointer Uniform %11 
            Uniform struct {f32_4;}* %13 = OpVariable Uniform 
                                     %14 = OpTypeInt 32 1 
                                 i32 %15 = OpConstant 0 
                                     %16 = OpTypePointer Uniform %10 
                                     %26 = OpTypePointer Input %10 
               Input f32_4* vs_TEXCOORD2 = OpVariable Input 
                                 f32 %38 = OpConstant 3.674022E-40 
                                 f32 %39 = OpConstant 3.674022E-40 
                                     %43 = OpTypeInt 32 0 
                                 u32 %44 = OpConstant 1 
                                     %45 = OpTypePointer Private %6 
                                 u32 %48 = OpConstant 0 
                        Private f32* %53 = OpVariable Private 
                                     %54 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                     %55 = OpTypePointer UniformConstant %54 
UniformConstant read_only Texture2D* %56 = OpVariable UniformConstant 
                                     %58 = OpTypeSampler 
                                     %59 = OpTypePointer UniformConstant %58 
            UniformConstant sampler* %60 = OpVariable UniformConstant 
                                     %62 = OpTypeSampledImage %54 
               Input f32_4* vs_TEXCOORD0 = OpVariable Input 
                                 u32 %68 = OpConstant 3 
               Input f32_4* vs_TEXCOORD1 = OpVariable Input 
                                     %72 = OpTypePointer Input %6 
                                     %82 = OpTypePointer Private %10 
                      Private f32_4* %83 = OpVariable Private 
                        Input f32_4* %86 = OpVariable Input 
                                     %89 = OpTypePointer Output %10 
                       Output f32_4* %90 = OpVariable Output 
                                 void %4 = OpFunction None %3 
                                      %5 = OpLabel 
                      Uniform f32_4* %17 = OpAccessChain %13 %15 
                               f32_4 %18 = OpLoad %17 
                               f32_2 %19 = OpVectorShuffle %18 %18 0 1 
                               f32_2 %20 = OpFNegate %19 
                      Uniform f32_4* %21 = OpAccessChain %13 %15 
                               f32_4 %22 = OpLoad %21 
                               f32_2 %23 = OpVectorShuffle %22 %22 2 3 
                               f32_2 %24 = OpFAdd %20 %23 
                                             OpStore %9 %24 
                               f32_2 %25 = OpLoad %9 
                               f32_4 %28 = OpLoad vs_TEXCOORD2 
                               f32_2 %29 = OpVectorShuffle %28 %28 0 1 
                               f32_2 %30 = OpExtInst %1 4 %29 
                               f32_2 %31 = OpFNegate %30 
                               f32_2 %32 = OpFAdd %25 %31 
                                             OpStore %9 %32 
                               f32_2 %33 = OpLoad %9 
                               f32_4 %34 = OpLoad vs_TEXCOORD2 
                               f32_2 %35 = OpVectorShuffle %34 %34 2 3 
                               f32_2 %36 = OpFMul %33 %35 
                                             OpStore %9 %36 
                               f32_2 %37 = OpLoad %9 
                               f32_2 %40 = OpCompositeConstruct %38 %38 
                               f32_2 %41 = OpCompositeConstruct %39 %39 
                               f32_2 %42 = OpExtInst %1 43 %37 %40 %41 
                                             OpStore %9 %42 
                        Private f32* %46 = OpAccessChain %9 %44 
                                 f32 %47 = OpLoad %46 
                        Private f32* %49 = OpAccessChain %9 %48 
                                 f32 %50 = OpLoad %49 
                                 f32 %51 = OpFMul %47 %50 
                        Private f32* %52 = OpAccessChain %9 %48 
                                             OpStore %52 %51 
                 read_only Texture2D %57 = OpLoad %56 
                             sampler %61 = OpLoad %60 
          read_only Texture2DSampled %63 = OpSampledImage %57 %61 
                               f32_4 %65 = OpLoad vs_TEXCOORD0 
                               f32_2 %66 = OpVectorShuffle %65 %65 0 1 
                               f32_4 %67 = OpImageSampleImplicitLod %63 %66 
                                 f32 %69 = OpCompositeExtract %67 3 
                                             OpStore %53 %69 
                                 f32 %70 = OpLoad %53 
                          Input f32* %73 = OpAccessChain vs_TEXCOORD1 %48 
                                 f32 %74 = OpLoad %73 
                                 f32 %75 = OpFMul %70 %74 
                          Input f32* %76 = OpAccessChain vs_TEXCOORD1 %68 
                                 f32 %77 = OpLoad %76 
                                 f32 %78 = OpFNegate %77 
                                 f32 %79 = OpFAdd %75 %78 
                                             OpStore %53 %79 
                                 f32 %80 = OpLoad %53 
                                 f32 %81 = OpExtInst %1 43 %80 %38 %39 
                                             OpStore %53 %81 
                                 f32 %84 = OpLoad %53 
                               f32_4 %85 = OpCompositeConstruct %84 %84 %84 %84 
                               f32_4 %87 = OpLoad %86 
                               f32_4 %88 = OpFMul %85 %87 
                                             OpStore %83 %88 
                               f32_2 %91 = OpLoad %9 
                               f32_4 %92 = OpVectorShuffle %91 %91 0 0 0 0 
                               f32_4 %93 = OpLoad %83 
                               f32_4 %94 = OpFMul %92 %93 
                                             OpStore %90 %94 
                                             OpReturn
                                             OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "OUTLINE_ON" "UNITY_UI_CLIP_RECT" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "OUTLINE_ON" "UNITY_UI_CLIP_RECT" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _FaceColor;
uniform 	float _FaceDilate;
uniform 	float _OutlineSoftness;
uniform 	vec4 _OutlineColor;
uniform 	float _OutlineWidth;
uniform 	float _WeightNormal;
uniform 	float _WeightBold;
uniform 	float _ScaleRatioA;
uniform 	float _VertexOffsetX;
uniform 	float _VertexOffsetY;
uniform 	vec4 _ClipRect;
uniform 	float _MaskSoftnessX;
uniform 	float _MaskSoftnessY;
uniform 	float _GradientScale;
uniform 	float _ScaleX;
uniform 	float _ScaleY;
uniform 	float _PerspectiveFilter;
uniform 	float _Sharpness;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_COLOR0;
in  vec2 in_TEXCOORD0;
in  vec2 in_TEXCOORD1;
out vec4 vs_COLOR0;
out vec4 vs_COLOR1;
out vec4 vs_TEXCOORD0;
out vec4 vs_TEXCOORD1;
out vec4 vs_TEXCOORD2;
vec2 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
float u_xlat5;
vec2 u_xlat6;
float u_xlat10;
float u_xlat11;
float u_xlat15;
bool u_xlatb15;
void main()
{
    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
    gl_Position = u_xlat2;
    u_xlat3 = in_COLOR0 * _FaceColor;
    u_xlat3.xyz = u_xlat3.www * u_xlat3.xyz;
    vs_COLOR0 = u_xlat3;
    u_xlat4.w = in_COLOR0.w * _OutlineColor.w;
    u_xlat4.xyz = u_xlat4.www * _OutlineColor.xyz;
    u_xlat4 = (-u_xlat3) + u_xlat4;
    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat10 = inversesqrt(u_xlat10);
    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat10 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat10 = inversesqrt(u_xlat10);
    u_xlat2.xyz = vec3(u_xlat10) * u_xlat2.xyz;
    u_xlat10 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat1.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;
    u_xlat1.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat1.xy;
    u_xlat1.xy = abs(u_xlat1.xy) * vec2(_ScaleX, _ScaleY);
    u_xlat1.xy = u_xlat2.ww / u_xlat1.xy;
    u_xlat15 = dot(u_xlat1.xy, u_xlat1.xy);
    u_xlat1.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) * vec2(0.25, 0.25) + u_xlat1.xy;
    vs_TEXCOORD2.zw = vec2(0.25, 0.25) / u_xlat1.xy;
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.x = abs(in_TEXCOORD1.y) * _GradientScale;
    u_xlat6.x = _Sharpness + 1.0;
    u_xlat1.x = u_xlat6.x * u_xlat1.x;
    u_xlat6.x = u_xlat15 * u_xlat1.x;
    u_xlat11 = (-_PerspectiveFilter) + 1.0;
    u_xlat11 = u_xlat11 * abs(u_xlat6.x);
    u_xlat15 = u_xlat15 * u_xlat1.x + (-u_xlat11);
    u_xlat10 = abs(u_xlat10) * u_xlat15 + u_xlat11;
    u_xlatb15 = hlslcc_mtx4x4glstate_matrix_projection[3].w==0.0;
    u_xlat10 = (u_xlatb15) ? u_xlat10 : u_xlat6.x;
    u_xlat15 = _OutlineSoftness * _ScaleRatioA;
    u_xlat15 = u_xlat15 * u_xlat10 + 1.0;
    u_xlat1.x = u_xlat10 / u_xlat15;
    u_xlat10 = _OutlineWidth * _ScaleRatioA;
    u_xlat10 = u_xlat10 * 0.5;
    u_xlat15 = u_xlat1.x * u_xlat10;
    u_xlat15 = u_xlat15 + u_xlat15;
    u_xlat15 = min(u_xlat15, 1.0);
    u_xlat15 = sqrt(u_xlat15);
    vs_COLOR1 = vec4(u_xlat15) * u_xlat4 + u_xlat3;
    u_xlat2 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));
    u_xlat2 = min(u_xlat2, vec4(2e+10, 2e+10, 2e+10, 2e+10));
    u_xlat6.xy = u_xlat0.xy + (-u_xlat2.xy);
    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + (-u_xlat2.xy);
    vs_TEXCOORD2.xy = (-u_xlat2.zw) + u_xlat0.xy;
    u_xlat0.xy = (-u_xlat2.xy) + u_xlat2.zw;
    vs_TEXCOORD0.zw = u_xlat6.xy / u_xlat0.xy;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlatb0 = 0.0>=in_TEXCOORD1.y;
    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);
    u_xlat5 = (-_WeightNormal) + _WeightBold;
    u_xlat0.x = u_xlat0.x * u_xlat5 + _WeightNormal;
    u_xlat0.x = u_xlat0.x * 0.25 + _FaceDilate;
    u_xlat0.x = u_xlat0.x * _ScaleRatioA;
    u_xlat0.x = (-u_xlat0.x) * 0.5 + 0.5;
    u_xlat1.w = u_xlat0.x * u_xlat1.x + -0.5;
    vs_TEXCOORD1.y = (-u_xlat10) * u_xlat1.x + u_xlat1.w;
    vs_TEXCOORD1.z = u_xlat10 * u_xlat1.x + u_xlat1.w;
    vs_TEXCOORD1.xw = u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ClipRect;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
in  vec4 vs_COLOR0;
in  vec4 vs_COLOR1;
in  vec4 vs_TEXCOORD0;
in  vec4 vs_TEXCOORD1;
in  vec4 vs_TEXCOORD2;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = vs_COLOR0 + (-vs_COLOR1);
    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1.xy = u_xlat1.ww * vs_TEXCOORD1.xx + (-vs_TEXCOORD1.zy);
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
    u_xlat0 = u_xlat1.xxxx * u_xlat0 + vs_COLOR1;
    u_xlat0 = u_xlat1.yyyy * u_xlat0;
    u_xlat1.xy = (-_ClipRect.xy) + _ClipRect.zw;
    u_xlat1.xy = u_xlat1.xy + -abs(vs_TEXCOORD2.xy);
    u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD2.zw;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
    u_xlat1.x = u_xlat1.y * u_xlat1.x;
    SV_Target0 = u_xlat0 * u_xlat1.xxxx;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "OUTLINE_ON" "UNITY_UI_CLIP_RECT" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 514
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %12 %118 %122 %135 %154 %257 %266 %384 %427 %433 %490 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpDecorate %12 Location 12 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpDecorate %19 ArrayStride 19 
                                                      OpDecorate %20 ArrayStride 20 
                                                      OpDecorate %21 ArrayStride 21 
                                                      OpMemberDecorate %22 0 Offset 22 
                                                      OpMemberDecorate %22 1 Offset 22 
                                                      OpMemberDecorate %22 2 Offset 22 
                                                      OpMemberDecorate %22 3 Offset 22 
                                                      OpMemberDecorate %22 4 Offset 22 
                                                      OpMemberDecorate %22 5 Offset 22 
                                                      OpMemberDecorate %22 6 Offset 22 
                                                      OpMemberDecorate %22 7 Offset 22 
                                                      OpMemberDecorate %22 8 Offset 22 
                                                      OpMemberDecorate %22 9 Offset 22 
                                                      OpMemberDecorate %22 10 Offset 22 
                                                      OpMemberDecorate %22 11 Offset 22 
                                                      OpMemberDecorate %22 12 Offset 22 
                                                      OpMemberDecorate %22 13 Offset 22 
                                                      OpMemberDecorate %22 14 Offset 22 
                                                      OpMemberDecorate %22 15 Offset 22 
                                                      OpMemberDecorate %22 16 Offset 22 
                                                      OpMemberDecorate %22 17 Offset 22 
                                                      OpMemberDecorate %22 18 Offset 22 
                                                      OpMemberDecorate %22 19 Offset 22 
                                                      OpMemberDecorate %22 20 Offset 22 
                                                      OpMemberDecorate %22 21 Offset 22 
                                                      OpMemberDecorate %22 22 Offset 22 
                                                      OpMemberDecorate %22 23 Offset 22 
                                                      OpDecorate %22 Block 
                                                      OpDecorate %24 DescriptorSet 24 
                                                      OpDecorate %24 Binding 24 
                                                      OpMemberDecorate %116 0 BuiltIn 116 
                                                      OpMemberDecorate %116 1 BuiltIn 116 
                                                      OpMemberDecorate %116 2 BuiltIn 116 
                                                      OpDecorate %116 Block 
                                                      OpDecorate %122 Location 122 
                                                      OpDecorate %135 Location 135 
                                                      OpDecorate %154 Location 154 
                                                      OpDecorate vs_TEXCOORD2 Location 257 
                                                      OpDecorate %266 Location 266 
                                                      OpDecorate %384 Location 384 
                                                      OpDecorate vs_TEXCOORD0 Location 427 
                                                      OpDecorate %433 Location 433 
                                                      OpDecorate vs_TEXCOORD1 Location 490 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 2 
                                               %8 = OpTypePointer Private %7 
                                Private f32_2* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 4 
                                              %11 = OpTypePointer Input %10 
                                 Input f32_4* %12 = OpVariable Input 
                                              %15 = OpTypeVector %6 3 
                                              %16 = OpTypeInt 32 0 
                                          u32 %17 = OpConstant 4 
                                              %18 = OpTypeArray %10 %17 
                                              %19 = OpTypeArray %10 %17 
                                              %20 = OpTypeArray %10 %17 
                                              %21 = OpTypeArray %10 %17 
                                              %22 = OpTypeStruct %15 %10 %18 %19 %20 %21 %10 %6 %6 %10 %6 %6 %6 %6 %6 %6 %10 %6 %6 %6 %6 %6 %6 %6 
                                              %23 = OpTypePointer Uniform %22 
Uniform struct {f32_3; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4[4]; f32_4; f32; f32; f32_4; f32; f32; f32; f32; f32; f32; f32_4; f32; f32; f32; f32; f32; f32; f32;}* %24 = OpVariable Uniform 
                                              %25 = OpTypeInt 32 1 
                                          i32 %26 = OpConstant 14 
                                              %27 = OpTypePointer Uniform %6 
                                          i32 %30 = OpConstant 15 
                                              %35 = OpTypePointer Private %10 
                               Private f32_4* %36 = OpVariable Private 
                                          i32 %39 = OpConstant 2 
                                          i32 %40 = OpConstant 1 
                                              %41 = OpTypePointer Uniform %10 
                                          i32 %45 = OpConstant 0 
                               Private f32_4* %60 = OpVariable Private 
                                          i32 %62 = OpConstant 3 
                                              %80 = OpTypePointer Uniform %15 
                               Private f32_4* %86 = OpVariable Private 
                                          i32 %89 = OpConstant 5 
                                         u32 %114 = OpConstant 1 
                                             %115 = OpTypeArray %6 %114 
                                             %116 = OpTypeStruct %10 %6 %115 
                                             %117 = OpTypePointer Output %116 
        Output struct {f32_4; f32; f32[1];}* %118 = OpVariable Output 
                                             %120 = OpTypePointer Output %10 
                                Input f32_4* %122 = OpVariable Input 
                                         i32 %124 = OpConstant 6 
                               Output f32_4* %135 = OpVariable Output 
                                             %137 = OpTypePointer Private %6 
                                Private f32* %138 = OpVariable Private 
                                             %153 = OpTypePointer Input %15 
                                Input f32_3* %154 = OpVariable Input 
                                         u32 %160 = OpConstant 0 
                                         u32 %173 = OpConstant 2 
                                         i32 %197 = OpConstant 4 
                                         i32 %219 = OpConstant 20 
                                         i32 %222 = OpConstant 21 
                                Private f32* %236 = OpVariable Private 
                                         i32 %242 = OpConstant 17 
                                         i32 %245 = OpConstant 18 
                                         f32 %249 = OpConstant 3.674022E-40 
                                       f32_2 %250 = OpConstantComposite %249 %249 
                       Output f32_4* vs_TEXCOORD2 = OpVariable Output 
                                             %265 = OpTypePointer Input %7 
                                Input f32_2* %266 = OpVariable Input 
                                             %267 = OpTypePointer Input %6 
                                         i32 %271 = OpConstant 19 
                              Private f32_2* %276 = OpVariable Private 
                                         i32 %277 = OpConstant 23 
                                         f32 %280 = OpConstant 3.674022E-40 
                                Private f32* %294 = OpVariable Private 
                                         i32 %295 = OpConstant 22 
                                             %318 = OpTypeBool 
                                             %319 = OpTypePointer Private %318 
                               Private bool* %320 = OpVariable Private 
                                         u32 %321 = OpConstant 3 
                                         f32 %324 = OpConstant 3.674022E-40 
                                             %327 = OpTypePointer Function %6 
                                         i32 %336 = OpConstant 8 
                                         i32 %339 = OpConstant 13 
                                         i32 %351 = OpConstant 10 
                                         i32 %367 = OpConstant 9 
                               Output f32_4* %384 = OpVariable Output 
                                         i32 %391 = OpConstant 16 
                                         f32 %394 = OpConstant 3.674022E-40 
                                       f32_4 %395 = OpConstantComposite %394 %394 %394 %394 
                                         f32 %398 = OpConstant 3.674022E-40 
                                       f32_4 %399 = OpConstantComposite %398 %398 %398 %398 
                                         f32 %407 = OpConstant 3.674022E-40 
                                       f32_2 %408 = OpConstantComposite %407 %407 
                       Output f32_4* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_2* %433 = OpVariable Input 
                               Private bool* %437 = OpVariable Private 
                                Private f32* %444 = OpVariable Private 
                                         i32 %445 = OpConstant 11 
                                         i32 %449 = OpConstant 12 
                                         i32 %464 = OpConstant 7 
                                         f32 %478 = OpConstant 3.674022E-40 
                                         f32 %487 = OpConstant 3.674022E-40 
                       Output f32_4* vs_TEXCOORD1 = OpVariable Output 
                                             %501 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                               Function f32* %328 = OpVariable Function 
                                        f32_4 %13 = OpLoad %12 
                                        f32_2 %14 = OpVectorShuffle %13 %13 0 1 
                                 Uniform f32* %28 = OpAccessChain %24 %26 
                                          f32 %29 = OpLoad %28 
                                 Uniform f32* %31 = OpAccessChain %24 %30 
                                          f32 %32 = OpLoad %31 
                                        f32_2 %33 = OpCompositeConstruct %29 %32 
                                        f32_2 %34 = OpFAdd %14 %33 
                                                      OpStore %9 %34 
                                        f32_2 %37 = OpLoad %9 
                                        f32_4 %38 = OpVectorShuffle %37 %37 1 1 1 1 
                               Uniform f32_4* %42 = OpAccessChain %24 %39 %40 
                                        f32_4 %43 = OpLoad %42 
                                        f32_4 %44 = OpFMul %38 %43 
                                                      OpStore %36 %44 
                               Uniform f32_4* %46 = OpAccessChain %24 %39 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_2 %48 = OpLoad %9 
                                        f32_4 %49 = OpVectorShuffle %48 %48 0 0 0 0 
                                        f32_4 %50 = OpFMul %47 %49 
                                        f32_4 %51 = OpLoad %36 
                                        f32_4 %52 = OpFAdd %50 %51 
                                                      OpStore %36 %52 
                               Uniform f32_4* %53 = OpAccessChain %24 %39 %39 
                                        f32_4 %54 = OpLoad %53 
                                        f32_4 %55 = OpLoad %12 
                                        f32_4 %56 = OpVectorShuffle %55 %55 2 2 2 2 
                                        f32_4 %57 = OpFMul %54 %56 
                                        f32_4 %58 = OpLoad %36 
                                        f32_4 %59 = OpFAdd %57 %58 
                                                      OpStore %36 %59 
                                        f32_4 %61 = OpLoad %36 
                               Uniform f32_4* %63 = OpAccessChain %24 %39 %62 
                                        f32_4 %64 = OpLoad %63 
                                        f32_4 %65 = OpFAdd %61 %64 
                                                      OpStore %60 %65 
                               Uniform f32_4* %66 = OpAccessChain %24 %39 %62 
                                        f32_4 %67 = OpLoad %66 
                                        f32_3 %68 = OpVectorShuffle %67 %67 0 1 2 
                                        f32_4 %69 = OpLoad %12 
                                        f32_3 %70 = OpVectorShuffle %69 %69 3 3 3 
                                        f32_3 %71 = OpFMul %68 %70 
                                        f32_4 %72 = OpLoad %36 
                                        f32_3 %73 = OpVectorShuffle %72 %72 0 1 2 
                                        f32_3 %74 = OpFAdd %71 %73 
                                        f32_4 %75 = OpLoad %36 
                                        f32_4 %76 = OpVectorShuffle %75 %74 4 5 6 3 
                                                      OpStore %36 %76 
                                        f32_4 %77 = OpLoad %36 
                                        f32_3 %78 = OpVectorShuffle %77 %77 0 1 2 
                                        f32_3 %79 = OpFNegate %78 
                               Uniform f32_3* %81 = OpAccessChain %24 %45 
                                        f32_3 %82 = OpLoad %81 
                                        f32_3 %83 = OpFAdd %79 %82 
                                        f32_4 %84 = OpLoad %36 
                                        f32_4 %85 = OpVectorShuffle %84 %83 4 5 6 3 
                                                      OpStore %36 %85 
                                        f32_4 %87 = OpLoad %60 
                                        f32_4 %88 = OpVectorShuffle %87 %87 1 1 1 1 
                               Uniform f32_4* %90 = OpAccessChain %24 %89 %40 
                                        f32_4 %91 = OpLoad %90 
                                        f32_4 %92 = OpFMul %88 %91 
                                                      OpStore %86 %92 
                               Uniform f32_4* %93 = OpAccessChain %24 %89 %45 
                                        f32_4 %94 = OpLoad %93 
                                        f32_4 %95 = OpLoad %60 
                                        f32_4 %96 = OpVectorShuffle %95 %95 0 0 0 0 
                                        f32_4 %97 = OpFMul %94 %96 
                                        f32_4 %98 = OpLoad %86 
                                        f32_4 %99 = OpFAdd %97 %98 
                                                      OpStore %86 %99 
                              Uniform f32_4* %100 = OpAccessChain %24 %89 %39 
                                       f32_4 %101 = OpLoad %100 
                                       f32_4 %102 = OpLoad %60 
                                       f32_4 %103 = OpVectorShuffle %102 %102 2 2 2 2 
                                       f32_4 %104 = OpFMul %101 %103 
                                       f32_4 %105 = OpLoad %86 
                                       f32_4 %106 = OpFAdd %104 %105 
                                                      OpStore %86 %106 
                              Uniform f32_4* %107 = OpAccessChain %24 %89 %62 
                                       f32_4 %108 = OpLoad %107 
                                       f32_4 %109 = OpLoad %60 
                                       f32_4 %110 = OpVectorShuffle %109 %109 3 3 3 3 
                                       f32_4 %111 = OpFMul %108 %110 
                                       f32_4 %112 = OpLoad %86 
                                       f32_4 %113 = OpFAdd %111 %112 
                                                      OpStore %60 %113 
                                       f32_4 %119 = OpLoad %60 
                               Output f32_4* %121 = OpAccessChain %118 %45 
                                                      OpStore %121 %119 
                                       f32_4 %123 = OpLoad %122 
                              Uniform f32_4* %125 = OpAccessChain %24 %124 
                                       f32_4 %126 = OpLoad %125 
                                       f32_4 %127 = OpFMul %123 %126 
                                                      OpStore %86 %127 
                                       f32_4 %128 = OpLoad %86 
                                       f32_3 %129 = OpVectorShuffle %128 %128 3 3 3 
                                       f32_4 %130 = OpLoad %86 
                                       f32_3 %131 = OpVectorShuffle %130 %130 0 1 2 
                                       f32_3 %132 = OpFMul %129 %131 
                                       f32_4 %133 = OpLoad %86 
                                       f32_4 %134 = OpVectorShuffle %133 %132 4 5 6 3 
                                                      OpStore %86 %134 
                                       f32_4 %136 = OpLoad %86 
                                                      OpStore %135 %136 
                                       f32_4 %139 = OpLoad %36 
                                       f32_3 %140 = OpVectorShuffle %139 %139 0 1 2 
                                       f32_4 %141 = OpLoad %36 
                                       f32_3 %142 = OpVectorShuffle %141 %141 0 1 2 
                                         f32 %143 = OpDot %140 %142 
                                                      OpStore %138 %143 
                                         f32 %144 = OpLoad %138 
                                         f32 %145 = OpExtInst %1 32 %144 
                                                      OpStore %138 %145 
                                         f32 %146 = OpLoad %138 
                                       f32_3 %147 = OpCompositeConstruct %146 %146 %146 
                                       f32_4 %148 = OpLoad %36 
                                       f32_3 %149 = OpVectorShuffle %148 %148 0 1 2 
                                       f32_3 %150 = OpFMul %147 %149 
                                       f32_4 %151 = OpLoad %36 
                                       f32_4 %152 = OpVectorShuffle %151 %150 4 5 6 3 
                                                      OpStore %36 %152 
                                       f32_3 %155 = OpLoad %154 
                              Uniform f32_4* %156 = OpAccessChain %24 %62 %45 
                                       f32_4 %157 = OpLoad %156 
                                       f32_3 %158 = OpVectorShuffle %157 %157 0 1 2 
                                         f32 %159 = OpDot %155 %158 
                                Private f32* %161 = OpAccessChain %60 %160 
                                                      OpStore %161 %159 
                                       f32_3 %162 = OpLoad %154 
                              Uniform f32_4* %163 = OpAccessChain %24 %62 %40 
                                       f32_4 %164 = OpLoad %163 
                                       f32_3 %165 = OpVectorShuffle %164 %164 0 1 2 
                                         f32 %166 = OpDot %162 %165 
                                Private f32* %167 = OpAccessChain %60 %114 
                                                      OpStore %167 %166 
                                       f32_3 %168 = OpLoad %154 
                              Uniform f32_4* %169 = OpAccessChain %24 %62 %39 
                                       f32_4 %170 = OpLoad %169 
                                       f32_3 %171 = OpVectorShuffle %170 %170 0 1 2 
                                         f32 %172 = OpDot %168 %171 
                                Private f32* %174 = OpAccessChain %60 %173 
                                                      OpStore %174 %172 
                                       f32_4 %175 = OpLoad %60 
                                       f32_3 %176 = OpVectorShuffle %175 %175 0 1 2 
                                       f32_4 %177 = OpLoad %60 
                                       f32_3 %178 = OpVectorShuffle %177 %177 0 1 2 
                                         f32 %179 = OpDot %176 %178 
                                                      OpStore %138 %179 
                                         f32 %180 = OpLoad %138 
                                         f32 %181 = OpExtInst %1 32 %180 
                                                      OpStore %138 %181 
                                         f32 %182 = OpLoad %138 
                                       f32_3 %183 = OpCompositeConstruct %182 %182 %182 
                                       f32_4 %184 = OpLoad %60 
                                       f32_3 %185 = OpVectorShuffle %184 %184 0 1 2 
                                       f32_3 %186 = OpFMul %183 %185 
                                       f32_4 %187 = OpLoad %60 
                                       f32_4 %188 = OpVectorShuffle %187 %186 4 5 6 3 
                                                      OpStore %60 %188 
                                       f32_4 %189 = OpLoad %60 
                                       f32_3 %190 = OpVectorShuffle %189 %189 0 1 2 
                                       f32_4 %191 = OpLoad %36 
                                       f32_3 %192 = OpVectorShuffle %191 %191 0 1 2 
                                         f32 %193 = OpDot %190 %192 
                                                      OpStore %138 %193 
                              Uniform f32_4* %194 = OpAccessChain %24 %40 
                                       f32_4 %195 = OpLoad %194 
                                       f32_2 %196 = OpVectorShuffle %195 %195 1 1 
                              Uniform f32_4* %198 = OpAccessChain %24 %197 %40 
                                       f32_4 %199 = OpLoad %198 
                                       f32_2 %200 = OpVectorShuffle %199 %199 0 1 
                                       f32_2 %201 = OpFMul %196 %200 
                                       f32_4 %202 = OpLoad %36 
                                       f32_4 %203 = OpVectorShuffle %202 %201 4 5 2 3 
                                                      OpStore %36 %203 
                              Uniform f32_4* %204 = OpAccessChain %24 %197 %45 
                                       f32_4 %205 = OpLoad %204 
                                       f32_2 %206 = OpVectorShuffle %205 %205 0 1 
                              Uniform f32_4* %207 = OpAccessChain %24 %40 
                                       f32_4 %208 = OpLoad %207 
                                       f32_2 %209 = OpVectorShuffle %208 %208 0 0 
                                       f32_2 %210 = OpFMul %206 %209 
                                       f32_4 %211 = OpLoad %36 
                                       f32_2 %212 = OpVectorShuffle %211 %211 0 1 
                                       f32_2 %213 = OpFAdd %210 %212 
                                       f32_4 %214 = OpLoad %36 
                                       f32_4 %215 = OpVectorShuffle %214 %213 4 5 2 3 
                                                      OpStore %36 %215 
                                       f32_4 %216 = OpLoad %36 
                                       f32_2 %217 = OpVectorShuffle %216 %216 0 1 
                                       f32_2 %218 = OpExtInst %1 4 %217 
                                Uniform f32* %220 = OpAccessChain %24 %219 
                                         f32 %221 = OpLoad %220 
                                Uniform f32* %223 = OpAccessChain %24 %222 
                                         f32 %224 = OpLoad %223 
                                       f32_2 %225 = OpCompositeConstruct %221 %224 
                                       f32_2 %226 = OpFMul %218 %225 
                                       f32_4 %227 = OpLoad %36 
                                       f32_4 %228 = OpVectorShuffle %227 %226 4 5 2 3 
                                                      OpStore %36 %228 
                                       f32_4 %229 = OpLoad %60 
                                       f32_2 %230 = OpVectorShuffle %229 %229 3 3 
                                       f32_4 %231 = OpLoad %36 
                                       f32_2 %232 = OpVectorShuffle %231 %231 0 1 
                                       f32_2 %233 = OpFDiv %230 %232 
                                       f32_4 %234 = OpLoad %36 
                                       f32_4 %235 = OpVectorShuffle %234 %233 4 5 2 3 
                                                      OpStore %36 %235 
                                       f32_4 %237 = OpLoad %36 
                                       f32_2 %238 = OpVectorShuffle %237 %237 0 1 
                                       f32_4 %239 = OpLoad %36 
                                       f32_2 %240 = OpVectorShuffle %239 %239 0 1 
                                         f32 %241 = OpDot %238 %240 
                                                      OpStore %236 %241 
                                Uniform f32* %243 = OpAccessChain %24 %242 
                                         f32 %244 = OpLoad %243 
                                Uniform f32* %246 = OpAccessChain %24 %245 
                                         f32 %247 = OpLoad %246 
                                       f32_2 %248 = OpCompositeConstruct %244 %247 
                                       f32_2 %251 = OpFMul %248 %250 
                                       f32_4 %252 = OpLoad %36 
                                       f32_2 %253 = OpVectorShuffle %252 %252 0 1 
                                       f32_2 %254 = OpFAdd %251 %253 
                                       f32_4 %255 = OpLoad %36 
                                       f32_4 %256 = OpVectorShuffle %255 %254 4 5 2 3 
                                                      OpStore %36 %256 
                                       f32_4 %258 = OpLoad %36 
                                       f32_2 %259 = OpVectorShuffle %258 %258 0 1 
                                       f32_2 %260 = OpFDiv %250 %259 
                                       f32_4 %261 = OpLoad vs_TEXCOORD2 
                                       f32_4 %262 = OpVectorShuffle %261 %260 0 1 4 5 
                                                      OpStore vs_TEXCOORD2 %262 
                                         f32 %263 = OpLoad %236 
                                         f32 %264 = OpExtInst %1 32 %263 
                                                      OpStore %236 %264 
                                  Input f32* %268 = OpAccessChain %266 %114 
                                         f32 %269 = OpLoad %268 
                                         f32 %270 = OpExtInst %1 4 %269 
                                Uniform f32* %272 = OpAccessChain %24 %271 
                                         f32 %273 = OpLoad %272 
                                         f32 %274 = OpFMul %270 %273 
                                Private f32* %275 = OpAccessChain %36 %160 
                                                      OpStore %275 %274 
                                Uniform f32* %278 = OpAccessChain %24 %277 
                                         f32 %279 = OpLoad %278 
                                         f32 %281 = OpFAdd %279 %280 
                                Private f32* %282 = OpAccessChain %276 %160 
                                                      OpStore %282 %281 
                                Private f32* %283 = OpAccessChain %276 %160 
                                         f32 %284 = OpLoad %283 
                                Private f32* %285 = OpAccessChain %36 %160 
                                         f32 %286 = OpLoad %285 
                                         f32 %287 = OpFMul %284 %286 
                                Private f32* %288 = OpAccessChain %36 %160 
                                                      OpStore %288 %287 
                                         f32 %289 = OpLoad %236 
                                Private f32* %290 = OpAccessChain %36 %160 
                                         f32 %291 = OpLoad %290 
                                         f32 %292 = OpFMul %289 %291 
                                Private f32* %293 = OpAccessChain %276 %160 
                                                      OpStore %293 %292 
                                Uniform f32* %296 = OpAccessChain %24 %295 
                                         f32 %297 = OpLoad %296 
                                         f32 %298 = OpFNegate %297 
                                         f32 %299 = OpFAdd %298 %280 
                                                      OpStore %294 %299 
                                         f32 %300 = OpLoad %294 
                                Private f32* %301 = OpAccessChain %276 %160 
                                         f32 %302 = OpLoad %301 
                                         f32 %303 = OpExtInst %1 4 %302 
                                         f32 %304 = OpFMul %300 %303 
                                                      OpStore %294 %304 
                                         f32 %305 = OpLoad %236 
                                Private f32* %306 = OpAccessChain %36 %160 
                                         f32 %307 = OpLoad %306 
                                         f32 %308 = OpFMul %305 %307 
                                         f32 %309 = OpLoad %294 
                                         f32 %310 = OpFNegate %309 
                                         f32 %311 = OpFAdd %308 %310 
                                                      OpStore %236 %311 
                                         f32 %312 = OpLoad %138 
                                         f32 %313 = OpExtInst %1 4 %312 
                                         f32 %314 = OpLoad %236 
                                         f32 %315 = OpFMul %313 %314 
                                         f32 %316 = OpLoad %294 
                                         f32 %317 = OpFAdd %315 %316 
                                                      OpStore %138 %317 
                                Uniform f32* %322 = OpAccessChain %24 %197 %62 %321 
                                         f32 %323 = OpLoad %322 
                                        bool %325 = OpFOrdEqual %323 %324 
                                                      OpStore %320 %325 
                                        bool %326 = OpLoad %320 
                                                      OpSelectionMerge %330 None 
                                                      OpBranchConditional %326 %329 %332 
                                             %329 = OpLabel 
                                         f32 %331 = OpLoad %138 
                                                      OpStore %328 %331 
                                                      OpBranch %330 
                                             %332 = OpLabel 
                                Private f32* %333 = OpAccessChain %276 %160 
                                         f32 %334 = OpLoad %333 
                                                      OpStore %328 %334 
                                                      OpBranch %330 
                                             %330 = OpLabel 
                                         f32 %335 = OpLoad %328 
                                                      OpStore %138 %335 
                                Uniform f32* %337 = OpAccessChain %24 %336 
                                         f32 %338 = OpLoad %337 
                                Uniform f32* %340 = OpAccessChain %24 %339 
                                         f32 %341 = OpLoad %340 
                                         f32 %342 = OpFMul %338 %341 
                                                      OpStore %236 %342 
                                         f32 %343 = OpLoad %236 
                                         f32 %344 = OpLoad %138 
                                         f32 %345 = OpFMul %343 %344 
                                         f32 %346 = OpFAdd %345 %280 
                                                      OpStore %236 %346 
                                         f32 %347 = OpLoad %138 
                                         f32 %348 = OpLoad %236 
                                         f32 %349 = OpFDiv %347 %348 
                                Private f32* %350 = OpAccessChain %36 %160 
                                                      OpStore %350 %349 
                                Uniform f32* %352 = OpAccessChain %24 %351 
                                         f32 %353 = OpLoad %352 
                                Uniform f32* %354 = OpAccessChain %24 %339 
                                         f32 %355 = OpLoad %354 
                                         f32 %356 = OpFMul %353 %355 
                                                      OpStore %138 %356 
                                Private f32* %357 = OpAccessChain %36 %160 
                                         f32 %358 = OpLoad %357 
                                         f32 %359 = OpLoad %138 
                                         f32 %360 = OpFMul %358 %359 
                                                      OpStore %138 %360 
                                         f32 %361 = OpLoad %138 
                                         f32 %362 = OpExtInst %1 37 %361 %280 
                                                      OpStore %236 %362 
                                         f32 %363 = OpLoad %236 
                                         f32 %364 = OpExtInst %1 31 %363 
                                                      OpStore %236 %364 
                                  Input f32* %365 = OpAccessChain %122 %321 
                                         f32 %366 = OpLoad %365 
                                Uniform f32* %368 = OpAccessChain %24 %367 %321 
                                         f32 %369 = OpLoad %368 
                                         f32 %370 = OpFMul %366 %369 
                                Private f32* %371 = OpAccessChain %60 %321 
                                                      OpStore %371 %370 
                                       f32_4 %372 = OpLoad %60 
                                       f32_3 %373 = OpVectorShuffle %372 %372 3 3 3 
                              Uniform f32_4* %374 = OpAccessChain %24 %367 
                                       f32_4 %375 = OpLoad %374 
                                       f32_3 %376 = OpVectorShuffle %375 %375 0 1 2 
                                       f32_3 %377 = OpFMul %373 %376 
                                       f32_4 %378 = OpLoad %60 
                                       f32_4 %379 = OpVectorShuffle %378 %377 4 5 6 3 
                                                      OpStore %60 %379 
                                       f32_4 %380 = OpLoad %86 
                                       f32_4 %381 = OpFNegate %380 
                                       f32_4 %382 = OpLoad %60 
                                       f32_4 %383 = OpFAdd %381 %382 
                                                      OpStore %60 %383 
                                         f32 %385 = OpLoad %236 
                                       f32_4 %386 = OpCompositeConstruct %385 %385 %385 %385 
                                       f32_4 %387 = OpLoad %60 
                                       f32_4 %388 = OpFMul %386 %387 
                                       f32_4 %389 = OpLoad %86 
                                       f32_4 %390 = OpFAdd %388 %389 
                                                      OpStore %384 %390 
                              Uniform f32_4* %392 = OpAccessChain %24 %391 
                                       f32_4 %393 = OpLoad %392 
                                       f32_4 %396 = OpExtInst %1 40 %393 %395 
                                                      OpStore %60 %396 
                                       f32_4 %397 = OpLoad %60 
                                       f32_4 %400 = OpExtInst %1 37 %397 %399 
                                                      OpStore %60 %400 
                                       f32_2 %401 = OpLoad %9 
                                       f32_4 %402 = OpLoad %60 
                                       f32_2 %403 = OpVectorShuffle %402 %402 0 1 
                                       f32_2 %404 = OpFNegate %403 
                                       f32_2 %405 = OpFAdd %401 %404 
                                                      OpStore %276 %405 
                                       f32_2 %406 = OpLoad %9 
                                       f32_2 %409 = OpFMul %406 %408 
                                       f32_4 %410 = OpLoad %60 
                                       f32_2 %411 = OpVectorShuffle %410 %410 0 1 
                                       f32_2 %412 = OpFNegate %411 
                                       f32_2 %413 = OpFAdd %409 %412 
                                                      OpStore %9 %413 
                                       f32_4 %414 = OpLoad %60 
                                       f32_2 %415 = OpVectorShuffle %414 %414 2 3 
                                       f32_2 %416 = OpFNegate %415 
                                       f32_2 %417 = OpLoad %9 
                                       f32_2 %418 = OpFAdd %416 %417 
                                       f32_4 %419 = OpLoad vs_TEXCOORD2 
                                       f32_4 %420 = OpVectorShuffle %419 %418 4 5 2 3 
                                                      OpStore vs_TEXCOORD2 %420 
                                       f32_4 %421 = OpLoad %60 
                                       f32_2 %422 = OpVectorShuffle %421 %421 0 1 
                                       f32_2 %423 = OpFNegate %422 
                                       f32_4 %424 = OpLoad %60 
                                       f32_2 %425 = OpVectorShuffle %424 %424 2 3 
                                       f32_2 %426 = OpFAdd %423 %425 
                                                      OpStore %9 %426 
                                       f32_2 %428 = OpLoad %276 
                                       f32_2 %429 = OpLoad %9 
                                       f32_2 %430 = OpFDiv %428 %429 
                                       f32_4 %431 = OpLoad vs_TEXCOORD0 
                                       f32_4 %432 = OpVectorShuffle %431 %430 0 1 4 5 
                                                      OpStore vs_TEXCOORD0 %432 
                                       f32_2 %434 = OpLoad %433 
                                       f32_4 %435 = OpLoad vs_TEXCOORD0 
                                       f32_4 %436 = OpVectorShuffle %435 %434 4 5 2 3 
                                                      OpStore vs_TEXCOORD0 %436 
                                  Input f32* %438 = OpAccessChain %266 %114 
                                         f32 %439 = OpLoad %438 
                                        bool %440 = OpFOrdGreaterThanEqual %324 %439 
                                                      OpStore %437 %440 
                                        bool %441 = OpLoad %437 
                                         f32 %442 = OpSelect %441 %280 %324 
                                Private f32* %443 = OpAccessChain %9 %160 
                                                      OpStore %443 %442 
                                Uniform f32* %446 = OpAccessChain %24 %445 
                                         f32 %447 = OpLoad %446 
                                         f32 %448 = OpFNegate %447 
                                Uniform f32* %450 = OpAccessChain %24 %449 
                                         f32 %451 = OpLoad %450 
                                         f32 %452 = OpFAdd %448 %451 
                                                      OpStore %444 %452 
                                Private f32* %453 = OpAccessChain %9 %160 
                                         f32 %454 = OpLoad %453 
                                         f32 %455 = OpLoad %444 
                                         f32 %456 = OpFMul %454 %455 
                                Uniform f32* %457 = OpAccessChain %24 %445 
                                         f32 %458 = OpLoad %457 
                                         f32 %459 = OpFAdd %456 %458 
                                Private f32* %460 = OpAccessChain %9 %160 
                                                      OpStore %460 %459 
                                Private f32* %461 = OpAccessChain %9 %160 
                                         f32 %462 = OpLoad %461 
                                         f32 %463 = OpFMul %462 %249 
                                Uniform f32* %465 = OpAccessChain %24 %464 
                                         f32 %466 = OpLoad %465 
                                         f32 %467 = OpFAdd %463 %466 
                                Private f32* %468 = OpAccessChain %9 %160 
                                                      OpStore %468 %467 
                                Private f32* %469 = OpAccessChain %9 %160 
                                         f32 %470 = OpLoad %469 
                                Uniform f32* %471 = OpAccessChain %24 %339 
                                         f32 %472 = OpLoad %471 
                                         f32 %473 = OpFMul %470 %472 
                                Private f32* %474 = OpAccessChain %9 %160 
                                                      OpStore %474 %473 
                                Private f32* %475 = OpAccessChain %9 %160 
                                         f32 %476 = OpLoad %475 
                                         f32 %477 = OpFNegate %476 
                                         f32 %479 = OpFMul %477 %478 
                                         f32 %480 = OpFAdd %479 %478 
                                Private f32* %481 = OpAccessChain %9 %160 
                                                      OpStore %481 %480 
                                Private f32* %482 = OpAccessChain %9 %160 
                                         f32 %483 = OpLoad %482 
                                Private f32* %484 = OpAccessChain %36 %160 
                                         f32 %485 = OpLoad %484 
                                         f32 %486 = OpFMul %483 %485 
                                         f32 %488 = OpFAdd %486 %487 
                                Private f32* %489 = OpAccessChain %36 %321 
                                                      OpStore %489 %488 
                                       f32_4 %491 = OpLoad %36 
                                       f32_2 %492 = OpVectorShuffle %491 %491 0 3 
                                       f32_4 %493 = OpLoad vs_TEXCOORD1 
                                       f32_4 %494 = OpVectorShuffle %493 %492 4 1 2 5 
                                                      OpStore vs_TEXCOORD1 %494 
                                         f32 %495 = OpLoad %138 
                                         f32 %496 = OpFNegate %495 
                                         f32 %497 = OpFMul %496 %478 
                                Private f32* %498 = OpAccessChain %36 %321 
                                         f32 %499 = OpLoad %498 
                                         f32 %500 = OpFAdd %497 %499 
                                 Output f32* %502 = OpAccessChain vs_TEXCOORD1 %114 
                                                      OpStore %502 %500 
                                         f32 %503 = OpLoad %138 
                                         f32 %504 = OpFMul %503 %478 
                                Private f32* %505 = OpAccessChain %36 %321 
                                         f32 %506 = OpLoad %505 
                                         f32 %507 = OpFAdd %504 %506 
                                 Output f32* %508 = OpAccessChain vs_TEXCOORD1 %173 
                                                      OpStore %508 %507 
                                 Output f32* %509 = OpAccessChain %118 %45 %114 
                                         f32 %510 = OpLoad %509 
                                         f32 %511 = OpFNegate %510 
                                 Output f32* %512 = OpAccessChain %118 %45 %114 
                                                      OpStore %512 %511 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 109
; Schema: 0
                                             OpCapability Shader 
                                      %1 = OpExtInstImport "GLSL.std.450" 
                                             OpMemoryModel Logical GLSL450 
                                             OpEntryPoint Fragment %4 "main" %11 %13 %30 %42 %81 %103 
                                             OpExecutionMode %4 OriginUpperLeft 
                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                             OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                             OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                             OpDecorate %11 Location 11 
                                             OpDecorate %13 Location 13 
                                             OpDecorate %22 DescriptorSet 22 
                                             OpDecorate %22 Binding 22 
                                             OpDecorate %26 DescriptorSet 26 
                                             OpDecorate %26 Binding 26 
                                             OpDecorate vs_TEXCOORD0 Location 30 
                                             OpDecorate vs_TEXCOORD1 Location 42 
                                             OpMemberDecorate %66 0 Offset 66 
                                             OpDecorate %66 Block 
                                             OpDecorate %68 DescriptorSet 68 
                                             OpDecorate %68 Binding 68 
                                             OpDecorate vs_TEXCOORD2 Location 81 
                                             OpDecorate %103 Location 103 
                                      %2 = OpTypeVoid 
                                      %3 = OpTypeFunction %2 
                                      %6 = OpTypeFloat 32 
                                      %7 = OpTypeVector %6 4 
                                      %8 = OpTypePointer Private %7 
                       Private f32_4* %9 = OpVariable Private 
                                     %10 = OpTypePointer Input %7 
                        Input f32_4* %11 = OpVariable Input 
                        Input f32_4* %13 = OpVariable Input 
                                     %17 = OpTypeVector %6 2 
                                     %18 = OpTypePointer Private %17 
                      Private f32_2* %19 = OpVariable Private 
                                     %20 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                     %21 = OpTypePointer UniformConstant %20 
UniformConstant read_only Texture2D* %22 = OpVariable UniformConstant 
                                     %24 = OpTypeSampler 
                                     %25 = OpTypePointer UniformConstant %24 
            UniformConstant sampler* %26 = OpVariable UniformConstant 
                                     %28 = OpTypeSampledImage %20 
               Input f32_4* vs_TEXCOORD0 = OpVariable Input 
                                     %34 = OpTypeInt 32 0 
                                 u32 %35 = OpConstant 3 
                                 u32 %37 = OpConstant 0 
                                     %38 = OpTypePointer Private %6 
               Input f32_4* vs_TEXCOORD1 = OpVariable Input 
                                 f32 %51 = OpConstant 3.674022E-40 
                                 f32 %52 = OpConstant 3.674022E-40 
                                     %66 = OpTypeStruct %7 
                                     %67 = OpTypePointer Uniform %66 
            Uniform struct {f32_4;}* %68 = OpVariable Uniform 
                                     %69 = OpTypeInt 32 1 
                                 i32 %70 = OpConstant 0 
                                     %71 = OpTypePointer Uniform %7 
               Input f32_4* vs_TEXCOORD2 = OpVariable Input 
                                 u32 %95 = OpConstant 1 
                                    %102 = OpTypePointer Output %7 
                      Output f32_4* %103 = OpVariable Output 
                                 void %4 = OpFunction None %3 
                                      %5 = OpLabel 
                               f32_4 %12 = OpLoad %11 
                               f32_4 %14 = OpLoad %13 
                               f32_4 %15 = OpFNegate %14 
                               f32_4 %16 = OpFAdd %12 %15 
                                             OpStore %9 %16 
                 read_only Texture2D %23 = OpLoad %22 
                             sampler %27 = OpLoad %26 
          read_only Texture2DSampled %29 = OpSampledImage %23 %27 
                               f32_4 %31 = OpLoad vs_TEXCOORD0 
                               f32_2 %32 = OpVectorShuffle %31 %31 0 1 
                               f32_4 %33 = OpImageSampleImplicitLod %29 %32 
                                 f32 %36 = OpCompositeExtract %33 3 
                        Private f32* %39 = OpAccessChain %19 %37 
                                             OpStore %39 %36 
                               f32_2 %40 = OpLoad %19 
                               f32_2 %41 = OpVectorShuffle %40 %40 0 0 
                               f32_4 %43 = OpLoad vs_TEXCOORD1 
                               f32_2 %44 = OpVectorShuffle %43 %43 0 0 
                               f32_2 %45 = OpFMul %41 %44 
                               f32_4 %46 = OpLoad vs_TEXCOORD1 
                               f32_2 %47 = OpVectorShuffle %46 %46 2 1 
                               f32_2 %48 = OpFNegate %47 
                               f32_2 %49 = OpFAdd %45 %48 
                                             OpStore %19 %49 
                               f32_2 %50 = OpLoad %19 
                               f32_2 %53 = OpCompositeConstruct %51 %51 
                               f32_2 %54 = OpCompositeConstruct %52 %52 
                               f32_2 %55 = OpExtInst %1 43 %50 %53 %54 
                                             OpStore %19 %55 
                               f32_2 %56 = OpLoad %19 
                               f32_4 %57 = OpVectorShuffle %56 %56 0 0 0 0 
                               f32_4 %58 = OpLoad %9 
                               f32_4 %59 = OpFMul %57 %58 
                               f32_4 %60 = OpLoad %13 
                               f32_4 %61 = OpFAdd %59 %60 
                                             OpStore %9 %61 
                               f32_2 %62 = OpLoad %19 
                               f32_4 %63 = OpVectorShuffle %62 %62 1 1 1 1 
                               f32_4 %64 = OpLoad %9 
                               f32_4 %65 = OpFMul %63 %64 
                                             OpStore %9 %65 
                      Uniform f32_4* %72 = OpAccessChain %68 %70 
                               f32_4 %73 = OpLoad %72 
                               f32_2 %74 = OpVectorShuffle %73 %73 0 1 
                               f32_2 %75 = OpFNegate %74 
                      Uniform f32_4* %76 = OpAccessChain %68 %70 
                               f32_4 %77 = OpLoad %76 
                               f32_2 %78 = OpVectorShuffle %77 %77 2 3 
                               f32_2 %79 = OpFAdd %75 %78 
                                             OpStore %19 %79 
                               f32_2 %80 = OpLoad %19 
                               f32_4 %82 = OpLoad vs_TEXCOORD2 
                               f32_2 %83 = OpVectorShuffle %82 %82 0 1 
                               f32_2 %84 = OpExtInst %1 4 %83 
                               f32_2 %85 = OpFNegate %84 
                               f32_2 %86 = OpFAdd %80 %85 
                                             OpStore %19 %86 
                               f32_2 %87 = OpLoad %19 
                               f32_4 %88 = OpLoad vs_TEXCOORD2 
                               f32_2 %89 = OpVectorShuffle %88 %88 2 3 
                               f32_2 %90 = OpFMul %87 %89 
                                             OpStore %19 %90 
                               f32_2 %91 = OpLoad %19 
                               f32_2 %92 = OpCompositeConstruct %51 %51 
                               f32_2 %93 = OpCompositeConstruct %52 %52 
                               f32_2 %94 = OpExtInst %1 43 %91 %92 %93 
                                             OpStore %19 %94 
                        Private f32* %96 = OpAccessChain %19 %95 
                                 f32 %97 = OpLoad %96 
                        Private f32* %98 = OpAccessChain %19 %37 
                                 f32 %99 = OpLoad %98 
                                f32 %100 = OpFMul %97 %99 
                       Private f32* %101 = OpAccessChain %19 %37 
                                             OpStore %101 %100 
                              f32_4 %104 = OpLoad %9 
                              f32_2 %105 = OpLoad %19 
                              f32_4 %106 = OpVectorShuffle %105 %105 0 0 0 0 
                              f32_4 %107 = OpFMul %104 %106 
                                             OpStore %103 %107 
                                             OpReturn
                                             OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "UNDERLAY_ON" "UNITY_UI_CLIP_RECT" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "UNDERLAY_ON" "UNITY_UI_CLIP_RECT" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _FaceColor;
uniform 	float _FaceDilate;
uniform 	float _OutlineSoftness;
uniform 	vec4 _OutlineColor;
uniform 	float _OutlineWidth;
uniform 	float _UnderlayOffsetX;
uniform 	float _UnderlayOffsetY;
uniform 	float _UnderlayDilate;
uniform 	float _UnderlaySoftness;
uniform 	float _WeightNormal;
uniform 	float _WeightBold;
uniform 	float _ScaleRatioA;
uniform 	float _ScaleRatioC;
uniform 	float _VertexOffsetX;
uniform 	float _VertexOffsetY;
uniform 	vec4 _ClipRect;
uniform 	float _MaskSoftnessX;
uniform 	float _MaskSoftnessY;
uniform 	float _TextureWidth;
uniform 	float _TextureHeight;
uniform 	float _GradientScale;
uniform 	float _ScaleX;
uniform 	float _ScaleY;
uniform 	float _PerspectiveFilter;
uniform 	float _Sharpness;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_COLOR0;
in  vec2 in_TEXCOORD0;
in  vec2 in_TEXCOORD1;
out vec4 vs_COLOR0;
out vec4 vs_COLOR1;
out vec4 vs_TEXCOORD0;
out vec4 vs_TEXCOORD1;
out vec4 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec2 vs_TEXCOORD4;
vec2 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
vec4 u_xlat6;
vec3 u_xlat7;
vec2 u_xlat8;
float u_xlat14;
float u_xlat15;
float u_xlat21;
bool u_xlatb21;
void main()
{
    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
    gl_Position = u_xlat2;
    vs_COLOR0.w = _FaceColor.w;
    u_xlat3.xyz = in_COLOR0.xyz;
    u_xlat3.w = 1.0;
    u_xlat4 = u_xlat3 * _FaceColor;
    u_xlat2.xyz = u_xlat4.www * u_xlat4.xyz;
    vs_COLOR0.xyz = u_xlat2.xyz;
    u_xlat5.xyz = (-u_xlat2.xyz);
    u_xlat5.w = (-u_xlat4.w);
    u_xlat6.xyz = _OutlineColor.www * _OutlineColor.xyz;
    u_xlat6.w = _OutlineColor.w;
    u_xlat5 = u_xlat5 + u_xlat6;
    u_xlat14 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat14 = inversesqrt(u_xlat14);
    u_xlat1.xyz = vec3(u_xlat14) * u_xlat1.xyz;
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat14 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat14 = inversesqrt(u_xlat14);
    u_xlat2.xyz = vec3(u_xlat14) * u_xlat2.xyz;
    u_xlat14 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat1.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;
    u_xlat1.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat1.xy;
    u_xlat1.xy = abs(u_xlat1.xy) * vec2(_ScaleX, _ScaleY);
    u_xlat1.xy = u_xlat2.ww / u_xlat1.xy;
    u_xlat21 = dot(u_xlat1.xy, u_xlat1.xy);
    u_xlat1.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) * vec2(0.25, 0.25) + u_xlat1.xy;
    vs_TEXCOORD2.zw = vec2(0.25, 0.25) / u_xlat1.xy;
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.x = abs(in_TEXCOORD1.y) * _GradientScale;
    u_xlat8.x = _Sharpness + 1.0;
    u_xlat1.x = u_xlat8.x * u_xlat1.x;
    u_xlat8.x = u_xlat21 * u_xlat1.x;
    u_xlat15 = (-_PerspectiveFilter) + 1.0;
    u_xlat15 = u_xlat15 * abs(u_xlat8.x);
    u_xlat21 = u_xlat21 * u_xlat1.x + (-u_xlat15);
    u_xlat14 = abs(u_xlat14) * u_xlat21 + u_xlat15;
    u_xlatb21 = hlslcc_mtx4x4glstate_matrix_projection[3].w==0.0;
    u_xlat14 = (u_xlatb21) ? u_xlat14 : u_xlat8.x;
    u_xlat21 = _OutlineSoftness * _ScaleRatioA;
    u_xlat21 = u_xlat21 * u_xlat14 + 1.0;
    u_xlat1.x = u_xlat14 / u_xlat21;
    u_xlat21 = _OutlineWidth * _ScaleRatioA;
    u_xlat21 = u_xlat21 * 0.5;
    u_xlat8.x = u_xlat1.x * u_xlat21;
    u_xlat8.x = u_xlat8.x + u_xlat8.x;
    u_xlat8.x = min(u_xlat8.x, 1.0);
    u_xlat8.x = sqrt(u_xlat8.x);
    u_xlat2 = u_xlat5 * u_xlat8.xxxx;
    vs_COLOR1.xyz = u_xlat4.xyz * u_xlat4.www + u_xlat2.xyz;
    vs_COLOR1.w = u_xlat3.w * _FaceColor.w + u_xlat2.w;
    u_xlat2 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));
    u_xlat2 = min(u_xlat2, vec4(2e+10, 2e+10, 2e+10, 2e+10));
    u_xlat8.xy = u_xlat0.xy + (-u_xlat2.xy);
    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + (-u_xlat2.xy);
    vs_TEXCOORD2.xy = (-u_xlat2.zw) + u_xlat0.xy;
    u_xlat0.xy = (-u_xlat2.xy) + u_xlat2.zw;
    vs_TEXCOORD0.zw = u_xlat8.xy / u_xlat0.xy;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlatb0 = 0.0>=in_TEXCOORD1.y;
    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);
    u_xlat7.x = (-_WeightNormal) + _WeightBold;
    u_xlat0.x = u_xlat0.x * u_xlat7.x + _WeightNormal;
    u_xlat0.x = u_xlat0.x * 0.25 + _FaceDilate;
    u_xlat0.x = u_xlat0.x * _ScaleRatioA;
    u_xlat0.x = (-u_xlat0.x) * 0.5 + 0.5;
    u_xlat1.w = u_xlat0.x * u_xlat1.x + -0.5;
    vs_TEXCOORD1.y = (-u_xlat21) * u_xlat1.x + u_xlat1.w;
    vs_TEXCOORD1.z = u_xlat21 * u_xlat1.x + u_xlat1.w;
    vs_TEXCOORD1.xw = u_xlat1.xw;
    vs_TEXCOORD3.z = in_COLOR0.w;
    vs_TEXCOORD3.w = 0.0;
    u_xlat1 = vec4(_UnderlaySoftness, _UnderlayDilate, _UnderlayOffsetX, _UnderlayOffsetY) * vec4(vec4(_ScaleRatioC, _ScaleRatioC, _ScaleRatioC, _ScaleRatioC));
    u_xlat7.xz = (-u_xlat1.zw) * vec2(_GradientScale);
    u_xlat7.xz = u_xlat7.xz / vec2(_TextureWidth, _TextureHeight);
    vs_TEXCOORD3.xy = u_xlat7.xz + in_TEXCOORD0.xy;
    u_xlat7.x = u_xlat1.x * u_xlat14 + 1.0;
    u_xlat7.x = u_xlat14 / u_xlat7.x;
    u_xlat14 = u_xlat1.y * 0.5;
    u_xlat0.x = u_xlat0.x * u_xlat7.x + -0.5;
    vs_TEXCOORD4.y = (-u_xlat14) * u_xlat7.x + u_xlat0.x;
    vs_TEXCOORD4.x = u_xlat7.x;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _UnderlayColor;
uniform 	vec4 _ClipRect;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
in  vec4 vs_COLOR0;
in  vec4 vs_TEXCOORD0;
in  vec4 vs_TEXCOORD1;
in  vec4 vs_TEXCOORD2;
in  vec4 vs_TEXCOORD3;
in  vec2 vs_TEXCOORD4;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = texture(_MainTex, vs_TEXCOORD3.xy);
    u_xlat0.x = u_xlat0.w * vs_TEXCOORD4.x + (-vs_TEXCOORD4.y);
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat1.xyz = _UnderlayColor.www * _UnderlayColor.xyz;
    u_xlat1.w = _UnderlayColor.w;
    u_xlat0 = u_xlat0.xxxx * u_xlat1;
    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1.x = u_xlat1.w * vs_TEXCOORD1.x + (-vs_TEXCOORD1.w);
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat2 = u_xlat1.xxxx * vs_COLOR0;
    u_xlat1.x = (-vs_COLOR0.w) * u_xlat1.x + 1.0;
    u_xlat0 = u_xlat0 * u_xlat1.xxxx + u_xlat2;
    u_xlat1.xy = (-_ClipRect.xy) + _ClipRect.zw;
    u_xlat1.xy = u_xlat1.xy + -abs(vs_TEXCOORD2.xy);
    u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD2.zw;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
    u_xlat1.x = u_xlat1.y * u_xlat1.x;
    u_xlat0 = u_xlat0 * u_xlat1.xxxx;
    SV_Target0 = u_xlat0 * vs_TEXCOORD3.zzzz;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "UNDERLAY_ON" "UNITY_UI_CLIP_RECT" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 653
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %12 %118 %122 %129 %196 %299 %308 %412 %468 %474 %534 %552 %637 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpDecorate %12 Location 12 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpDecorate %19 ArrayStride 19 
                                                      OpDecorate %20 ArrayStride 20 
                                                      OpDecorate %21 ArrayStride 21 
                                                      OpMemberDecorate %22 0 Offset 22 
                                                      OpMemberDecorate %22 1 Offset 22 
                                                      OpMemberDecorate %22 2 Offset 22 
                                                      OpMemberDecorate %22 3 Offset 22 
                                                      OpMemberDecorate %22 4 Offset 22 
                                                      OpMemberDecorate %22 5 Offset 22 
                                                      OpMemberDecorate %22 6 Offset 22 
                                                      OpMemberDecorate %22 7 Offset 22 
                                                      OpMemberDecorate %22 8 Offset 22 
                                                      OpMemberDecorate %22 9 Offset 22 
                                                      OpMemberDecorate %22 10 Offset 22 
                                                      OpMemberDecorate %22 11 Offset 22 
                                                      OpMemberDecorate %22 12 Offset 22 
                                                      OpMemberDecorate %22 13 Offset 22 
                                                      OpMemberDecorate %22 14 Offset 22 
                                                      OpMemberDecorate %22 15 Offset 22 
                                                      OpMemberDecorate %22 16 Offset 22 
                                                      OpMemberDecorate %22 17 Offset 22 
                                                      OpMemberDecorate %22 18 Offset 22 
                                                      OpMemberDecorate %22 19 Offset 22 
                                                      OpMemberDecorate %22 20 Offset 22 
                                                      OpMemberDecorate %22 21 Offset 22 
                                                      OpMemberDecorate %22 22 Offset 22 
                                                      OpMemberDecorate %22 23 Offset 22 
                                                      OpMemberDecorate %22 24 Offset 22 
                                                      OpMemberDecorate %22 25 Offset 22 
                                                      OpMemberDecorate %22 26 Offset 22 
                                                      OpMemberDecorate %22 27 Offset 22 
                                                      OpMemberDecorate %22 28 Offset 22 
                                                      OpMemberDecorate %22 29 Offset 22 
                                                      OpMemberDecorate %22 30 Offset 22 
                                                      OpDecorate %22 Block 
                                                      OpDecorate %24 DescriptorSet 24 
                                                      OpDecorate %24 Binding 24 
                                                      OpMemberDecorate %116 0 BuiltIn 116 
                                                      OpMemberDecorate %116 1 BuiltIn 116 
                                                      OpMemberDecorate %116 2 BuiltIn 116 
                                                      OpDecorate %116 Block 
                                                      OpDecorate %122 Location 122 
                                                      OpDecorate %129 Location 129 
                                                      OpDecorate %196 Location 196 
                                                      OpDecorate vs_TEXCOORD2 Location 299 
                                                      OpDecorate %308 Location 308 
                                                      OpDecorate %412 Location 412 
                                                      OpDecorate vs_TEXCOORD0 Location 468 
                                                      OpDecorate %474 Location 474 
                                                      OpDecorate vs_TEXCOORD1 Location 534 
                                                      OpDecorate vs_TEXCOORD3 Location 552 
                                                      OpDecorate vs_TEXCOORD4 Location 637 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 2 
                                               %8 = OpTypePointer Private %7 
                                Private f32_2* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 4 
                                              %11 = OpTypePointer Input %10 
                                 Input f32_4* %12 = OpVariable Input 
                                              %15 = OpTypeVector %6 3 
                                              %16 = OpTypeInt 32 0 
                                          u32 %17 = OpConstant 4 
                                              %18 = OpTypeArray %10 %17 
                                              %19 = OpTypeArray %10 %17 
                                              %20 = OpTypeArray %10 %17 
                                              %21 = OpTypeArray %10 %17 
                                              %22 = OpTypeStruct %15 %10 %18 %19 %20 %21 %10 %6 %6 %10 %6 %6 %6 %6 %6 %6 %6 %6 %6 %6 %6 %10 %6 %6 %6 %6 %6 %6 %6 %6 %6 
                                              %23 = OpTypePointer Uniform %22 
Uniform struct {f32_3; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4[4]; f32_4; f32; f32; f32_4; f32; f32; f32; f32; f32; f32; f32; f32; f32; f32; f32; f32_4; f32; f32; f32; f32; f32; f32; f32; f32; f32;}* %24 = OpVariable Uniform 
                                              %25 = OpTypeInt 32 1 
                                          i32 %26 = OpConstant 19 
                                              %27 = OpTypePointer Uniform %6 
                                          i32 %30 = OpConstant 20 
                                              %35 = OpTypePointer Private %10 
                               Private f32_4* %36 = OpVariable Private 
                                          i32 %39 = OpConstant 2 
                                          i32 %40 = OpConstant 1 
                                              %41 = OpTypePointer Uniform %10 
                                          i32 %45 = OpConstant 0 
                               Private f32_4* %60 = OpVariable Private 
                                          i32 %62 = OpConstant 3 
                                              %80 = OpTypePointer Uniform %15 
                               Private f32_4* %86 = OpVariable Private 
                                          i32 %89 = OpConstant 5 
                                         u32 %114 = OpConstant 1 
                                             %115 = OpTypeArray %6 %114 
                                             %116 = OpTypeStruct %10 %6 %115 
                                             %117 = OpTypePointer Output %116 
        Output struct {f32_4; f32; f32[1];}* %118 = OpVariable Output 
                                             %120 = OpTypePointer Output %10 
                               Output f32_4* %122 = OpVariable Output 
                                         i32 %123 = OpConstant 6 
                                         u32 %124 = OpConstant 3 
                                             %127 = OpTypePointer Output %6 
                                Input f32_4* %129 = OpVariable Input 
                                         f32 %134 = OpConstant 3.674022E-40 
                                             %135 = OpTypePointer Private %6 
                              Private f32_4* %137 = OpVariable Private 
                              Private f32_4* %153 = OpVariable Private 
                              Private f32_4* %163 = OpVariable Private 
                                         i32 %164 = OpConstant 9 
                                Private f32* %180 = OpVariable Private 
                                             %195 = OpTypePointer Input %15 
                                Input f32_3* %196 = OpVariable Input 
                                         u32 %202 = OpConstant 0 
                                         u32 %215 = OpConstant 2 
                                         i32 %239 = OpConstant 4 
                                         i32 %261 = OpConstant 27 
                                         i32 %264 = OpConstant 28 
                                Private f32* %278 = OpVariable Private 
                                         i32 %284 = OpConstant 22 
                                         i32 %287 = OpConstant 23 
                                         f32 %291 = OpConstant 3.674022E-40 
                                       f32_2 %292 = OpConstantComposite %291 %291 
                       Output f32_4* vs_TEXCOORD2 = OpVariable Output 
                                             %307 = OpTypePointer Input %7 
                                Input f32_2* %308 = OpVariable Input 
                                             %309 = OpTypePointer Input %6 
                                         i32 %313 = OpConstant 26 
                              Private f32_2* %318 = OpVariable Private 
                                         i32 %319 = OpConstant 30 
                                Private f32* %335 = OpVariable Private 
                                         i32 %336 = OpConstant 29 
                                             %359 = OpTypeBool 
                                             %360 = OpTypePointer Private %359 
                               Private bool* %361 = OpVariable Private 
                                         f32 %364 = OpConstant 3.674022E-40 
                                             %367 = OpTypePointer Function %6 
                                         i32 %376 = OpConstant 8 
                                         i32 %379 = OpConstant 17 
                                         i32 %391 = OpConstant 10 
                               Output f32_4* %412 = OpVariable Output 
                                         i32 %432 = OpConstant 21 
                                         f32 %435 = OpConstant 3.674022E-40 
                                       f32_4 %436 = OpConstantComposite %435 %435 %435 %435 
                                         f32 %439 = OpConstant 3.674022E-40 
                                       f32_4 %440 = OpConstantComposite %439 %439 %439 %439 
                                         f32 %448 = OpConstant 3.674022E-40 
                                       f32_2 %449 = OpConstantComposite %448 %448 
                       Output f32_4* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_2* %474 = OpVariable Input 
                               Private bool* %478 = OpVariable Private 
                                             %485 = OpTypePointer Private %15 
                              Private f32_3* %486 = OpVariable Private 
                                         i32 %487 = OpConstant 15 
                                         i32 %491 = OpConstant 16 
                                         i32 %508 = OpConstant 7 
                                         f32 %522 = OpConstant 3.674022E-40 
                                         f32 %531 = OpConstant 3.674022E-40 
                       Output f32_4* vs_TEXCOORD1 = OpVariable Output 
                       Output f32_4* vs_TEXCOORD3 = OpVariable Output 
                                         i32 %557 = OpConstant 14 
                                         i32 %560 = OpConstant 13 
                                         i32 %563 = OpConstant 11 
                                         i32 %566 = OpConstant 12 
                                         i32 %570 = OpConstant 18 
                                         i32 %597 = OpConstant 24 
                                         i32 %600 = OpConstant 25 
                                             %636 = OpTypePointer Output %7 
                       Output f32_2* vs_TEXCOORD4 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                               Function f32* %368 = OpVariable Function 
                                        f32_4 %13 = OpLoad %12 
                                        f32_2 %14 = OpVectorShuffle %13 %13 0 1 
                                 Uniform f32* %28 = OpAccessChain %24 %26 
                                          f32 %29 = OpLoad %28 
                                 Uniform f32* %31 = OpAccessChain %24 %30 
                                          f32 %32 = OpLoad %31 
                                        f32_2 %33 = OpCompositeConstruct %29 %32 
                                        f32_2 %34 = OpFAdd %14 %33 
                                                      OpStore %9 %34 
                                        f32_2 %37 = OpLoad %9 
                                        f32_4 %38 = OpVectorShuffle %37 %37 1 1 1 1 
                               Uniform f32_4* %42 = OpAccessChain %24 %39 %40 
                                        f32_4 %43 = OpLoad %42 
                                        f32_4 %44 = OpFMul %38 %43 
                                                      OpStore %36 %44 
                               Uniform f32_4* %46 = OpAccessChain %24 %39 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_2 %48 = OpLoad %9 
                                        f32_4 %49 = OpVectorShuffle %48 %48 0 0 0 0 
                                        f32_4 %50 = OpFMul %47 %49 
                                        f32_4 %51 = OpLoad %36 
                                        f32_4 %52 = OpFAdd %50 %51 
                                                      OpStore %36 %52 
                               Uniform f32_4* %53 = OpAccessChain %24 %39 %39 
                                        f32_4 %54 = OpLoad %53 
                                        f32_4 %55 = OpLoad %12 
                                        f32_4 %56 = OpVectorShuffle %55 %55 2 2 2 2 
                                        f32_4 %57 = OpFMul %54 %56 
                                        f32_4 %58 = OpLoad %36 
                                        f32_4 %59 = OpFAdd %57 %58 
                                                      OpStore %36 %59 
                                        f32_4 %61 = OpLoad %36 
                               Uniform f32_4* %63 = OpAccessChain %24 %39 %62 
                                        f32_4 %64 = OpLoad %63 
                                        f32_4 %65 = OpFAdd %61 %64 
                                                      OpStore %60 %65 
                               Uniform f32_4* %66 = OpAccessChain %24 %39 %62 
                                        f32_4 %67 = OpLoad %66 
                                        f32_3 %68 = OpVectorShuffle %67 %67 0 1 2 
                                        f32_4 %69 = OpLoad %12 
                                        f32_3 %70 = OpVectorShuffle %69 %69 3 3 3 
                                        f32_3 %71 = OpFMul %68 %70 
                                        f32_4 %72 = OpLoad %36 
                                        f32_3 %73 = OpVectorShuffle %72 %72 0 1 2 
                                        f32_3 %74 = OpFAdd %71 %73 
                                        f32_4 %75 = OpLoad %36 
                                        f32_4 %76 = OpVectorShuffle %75 %74 4 5 6 3 
                                                      OpStore %36 %76 
                                        f32_4 %77 = OpLoad %36 
                                        f32_3 %78 = OpVectorShuffle %77 %77 0 1 2 
                                        f32_3 %79 = OpFNegate %78 
                               Uniform f32_3* %81 = OpAccessChain %24 %45 
                                        f32_3 %82 = OpLoad %81 
                                        f32_3 %83 = OpFAdd %79 %82 
                                        f32_4 %84 = OpLoad %36 
                                        f32_4 %85 = OpVectorShuffle %84 %83 4 5 6 3 
                                                      OpStore %36 %85 
                                        f32_4 %87 = OpLoad %60 
                                        f32_4 %88 = OpVectorShuffle %87 %87 1 1 1 1 
                               Uniform f32_4* %90 = OpAccessChain %24 %89 %40 
                                        f32_4 %91 = OpLoad %90 
                                        f32_4 %92 = OpFMul %88 %91 
                                                      OpStore %86 %92 
                               Uniform f32_4* %93 = OpAccessChain %24 %89 %45 
                                        f32_4 %94 = OpLoad %93 
                                        f32_4 %95 = OpLoad %60 
                                        f32_4 %96 = OpVectorShuffle %95 %95 0 0 0 0 
                                        f32_4 %97 = OpFMul %94 %96 
                                        f32_4 %98 = OpLoad %86 
                                        f32_4 %99 = OpFAdd %97 %98 
                                                      OpStore %86 %99 
                              Uniform f32_4* %100 = OpAccessChain %24 %89 %39 
                                       f32_4 %101 = OpLoad %100 
                                       f32_4 %102 = OpLoad %60 
                                       f32_4 %103 = OpVectorShuffle %102 %102 2 2 2 2 
                                       f32_4 %104 = OpFMul %101 %103 
                                       f32_4 %105 = OpLoad %86 
                                       f32_4 %106 = OpFAdd %104 %105 
                                                      OpStore %86 %106 
                              Uniform f32_4* %107 = OpAccessChain %24 %89 %62 
                                       f32_4 %108 = OpLoad %107 
                                       f32_4 %109 = OpLoad %60 
                                       f32_4 %110 = OpVectorShuffle %109 %109 3 3 3 3 
                                       f32_4 %111 = OpFMul %108 %110 
                                       f32_4 %112 = OpLoad %86 
                                       f32_4 %113 = OpFAdd %111 %112 
                                                      OpStore %60 %113 
                                       f32_4 %119 = OpLoad %60 
                               Output f32_4* %121 = OpAccessChain %118 %45 
                                                      OpStore %121 %119 
                                Uniform f32* %125 = OpAccessChain %24 %123 %124 
                                         f32 %126 = OpLoad %125 
                                 Output f32* %128 = OpAccessChain %122 %124 
                                                      OpStore %128 %126 
                                       f32_4 %130 = OpLoad %129 
                                       f32_3 %131 = OpVectorShuffle %130 %130 0 1 2 
                                       f32_4 %132 = OpLoad %86 
                                       f32_4 %133 = OpVectorShuffle %132 %131 4 5 6 3 
                                                      OpStore %86 %133 
                                Private f32* %136 = OpAccessChain %86 %124 
                                                      OpStore %136 %134 
                                       f32_4 %138 = OpLoad %86 
                              Uniform f32_4* %139 = OpAccessChain %24 %123 
                                       f32_4 %140 = OpLoad %139 
                                       f32_4 %141 = OpFMul %138 %140 
                                                      OpStore %137 %141 
                                       f32_4 %142 = OpLoad %137 
                                       f32_3 %143 = OpVectorShuffle %142 %142 3 3 3 
                                       f32_4 %144 = OpLoad %137 
                                       f32_3 %145 = OpVectorShuffle %144 %144 0 1 2 
                                       f32_3 %146 = OpFMul %143 %145 
                                       f32_4 %147 = OpLoad %60 
                                       f32_4 %148 = OpVectorShuffle %147 %146 4 5 6 3 
                                                      OpStore %60 %148 
                                       f32_4 %149 = OpLoad %60 
                                       f32_3 %150 = OpVectorShuffle %149 %149 0 1 2 
                                       f32_4 %151 = OpLoad %122 
                                       f32_4 %152 = OpVectorShuffle %151 %150 4 5 6 3 
                                                      OpStore %122 %152 
                                       f32_4 %154 = OpLoad %60 
                                       f32_3 %155 = OpVectorShuffle %154 %154 0 1 2 
                                       f32_3 %156 = OpFNegate %155 
                                       f32_4 %157 = OpLoad %153 
                                       f32_4 %158 = OpVectorShuffle %157 %156 4 5 6 3 
                                                      OpStore %153 %158 
                                Private f32* %159 = OpAccessChain %137 %124 
                                         f32 %160 = OpLoad %159 
                                         f32 %161 = OpFNegate %160 
                                Private f32* %162 = OpAccessChain %153 %124 
                                                      OpStore %162 %161 
                              Uniform f32_4* %165 = OpAccessChain %24 %164 
                                       f32_4 %166 = OpLoad %165 
                                       f32_3 %167 = OpVectorShuffle %166 %166 3 3 3 
                              Uniform f32_4* %168 = OpAccessChain %24 %164 
                                       f32_4 %169 = OpLoad %168 
                                       f32_3 %170 = OpVectorShuffle %169 %169 0 1 2 
                                       f32_3 %171 = OpFMul %167 %170 
                                       f32_4 %172 = OpLoad %163 
                                       f32_4 %173 = OpVectorShuffle %172 %171 4 5 6 3 
                                                      OpStore %163 %173 
                                Uniform f32* %174 = OpAccessChain %24 %164 %124 
                                         f32 %175 = OpLoad %174 
                                Private f32* %176 = OpAccessChain %163 %124 
                                                      OpStore %176 %175 
                                       f32_4 %177 = OpLoad %153 
                                       f32_4 %178 = OpLoad %163 
                                       f32_4 %179 = OpFAdd %177 %178 
                                                      OpStore %153 %179 
                                       f32_4 %181 = OpLoad %36 
                                       f32_3 %182 = OpVectorShuffle %181 %181 0 1 2 
                                       f32_4 %183 = OpLoad %36 
                                       f32_3 %184 = OpVectorShuffle %183 %183 0 1 2 
                                         f32 %185 = OpDot %182 %184 
                                                      OpStore %180 %185 
                                         f32 %186 = OpLoad %180 
                                         f32 %187 = OpExtInst %1 32 %186 
                                                      OpStore %180 %187 
                                         f32 %188 = OpLoad %180 
                                       f32_3 %189 = OpCompositeConstruct %188 %188 %188 
                                       f32_4 %190 = OpLoad %36 
                                       f32_3 %191 = OpVectorShuffle %190 %190 0 1 2 
                                       f32_3 %192 = OpFMul %189 %191 
                                       f32_4 %193 = OpLoad %36 
                                       f32_4 %194 = OpVectorShuffle %193 %192 4 5 6 3 
                                                      OpStore %36 %194 
                                       f32_3 %197 = OpLoad %196 
                              Uniform f32_4* %198 = OpAccessChain %24 %62 %45 
                                       f32_4 %199 = OpLoad %198 
                                       f32_3 %200 = OpVectorShuffle %199 %199 0 1 2 
                                         f32 %201 = OpDot %197 %200 
                                Private f32* %203 = OpAccessChain %60 %202 
                                                      OpStore %203 %201 
                                       f32_3 %204 = OpLoad %196 
                              Uniform f32_4* %205 = OpAccessChain %24 %62 %40 
                                       f32_4 %206 = OpLoad %205 
                                       f32_3 %207 = OpVectorShuffle %206 %206 0 1 2 
                                         f32 %208 = OpDot %204 %207 
                                Private f32* %209 = OpAccessChain %60 %114 
                                                      OpStore %209 %208 
                                       f32_3 %210 = OpLoad %196 
                              Uniform f32_4* %211 = OpAccessChain %24 %62 %39 
                                       f32_4 %212 = OpLoad %211 
                                       f32_3 %213 = OpVectorShuffle %212 %212 0 1 2 
                                         f32 %214 = OpDot %210 %213 
                                Private f32* %216 = OpAccessChain %60 %215 
                                                      OpStore %216 %214 
                                       f32_4 %217 = OpLoad %60 
                                       f32_3 %218 = OpVectorShuffle %217 %217 0 1 2 
                                       f32_4 %219 = OpLoad %60 
                                       f32_3 %220 = OpVectorShuffle %219 %219 0 1 2 
                                         f32 %221 = OpDot %218 %220 
                                                      OpStore %180 %221 
                                         f32 %222 = OpLoad %180 
                                         f32 %223 = OpExtInst %1 32 %222 
                                                      OpStore %180 %223 
                                         f32 %224 = OpLoad %180 
                                       f32_3 %225 = OpCompositeConstruct %224 %224 %224 
                                       f32_4 %226 = OpLoad %60 
                                       f32_3 %227 = OpVectorShuffle %226 %226 0 1 2 
                                       f32_3 %228 = OpFMul %225 %227 
                                       f32_4 %229 = OpLoad %60 
                                       f32_4 %230 = OpVectorShuffle %229 %228 4 5 6 3 
                                                      OpStore %60 %230 
                                       f32_4 %231 = OpLoad %60 
                                       f32_3 %232 = OpVectorShuffle %231 %231 0 1 2 
                                       f32_4 %233 = OpLoad %36 
                                       f32_3 %234 = OpVectorShuffle %233 %233 0 1 2 
                                         f32 %235 = OpDot %232 %234 
                                                      OpStore %180 %235 
                              Uniform f32_4* %236 = OpAccessChain %24 %40 
                                       f32_4 %237 = OpLoad %236 
                                       f32_2 %238 = OpVectorShuffle %237 %237 1 1 
                              Uniform f32_4* %240 = OpAccessChain %24 %239 %40 
                                       f32_4 %241 = OpLoad %240 
                                       f32_2 %242 = OpVectorShuffle %241 %241 0 1 
                                       f32_2 %243 = OpFMul %238 %242 
                                       f32_4 %244 = OpLoad %36 
                                       f32_4 %245 = OpVectorShuffle %244 %243 4 5 2 3 
                                                      OpStore %36 %245 
                              Uniform f32_4* %246 = OpAccessChain %24 %239 %45 
                                       f32_4 %247 = OpLoad %246 
                                       f32_2 %248 = OpVectorShuffle %247 %247 0 1 
                              Uniform f32_4* %249 = OpAccessChain %24 %40 
                                       f32_4 %250 = OpLoad %249 
                                       f32_2 %251 = OpVectorShuffle %250 %250 0 0 
                                       f32_2 %252 = OpFMul %248 %251 
                                       f32_4 %253 = OpLoad %36 
                                       f32_2 %254 = OpVectorShuffle %253 %253 0 1 
                                       f32_2 %255 = OpFAdd %252 %254 
                                       f32_4 %256 = OpLoad %36 
                                       f32_4 %257 = OpVectorShuffle %256 %255 4 5 2 3 
                                                      OpStore %36 %257 
                                       f32_4 %258 = OpLoad %36 
                                       f32_2 %259 = OpVectorShuffle %258 %258 0 1 
                                       f32_2 %260 = OpExtInst %1 4 %259 
                                Uniform f32* %262 = OpAccessChain %24 %261 
                                         f32 %263 = OpLoad %262 
                                Uniform f32* %265 = OpAccessChain %24 %264 
                                         f32 %266 = OpLoad %265 
                                       f32_2 %267 = OpCompositeConstruct %263 %266 
                                       f32_2 %268 = OpFMul %260 %267 
                                       f32_4 %269 = OpLoad %36 
                                       f32_4 %270 = OpVectorShuffle %269 %268 4 5 2 3 
                                                      OpStore %36 %270 
                                       f32_4 %271 = OpLoad %60 
                                       f32_2 %272 = OpVectorShuffle %271 %271 3 3 
                                       f32_4 %273 = OpLoad %36 
                                       f32_2 %274 = OpVectorShuffle %273 %273 0 1 
                                       f32_2 %275 = OpFDiv %272 %274 
                                       f32_4 %276 = OpLoad %36 
                                       f32_4 %277 = OpVectorShuffle %276 %275 4 5 2 3 
                                                      OpStore %36 %277 
                                       f32_4 %279 = OpLoad %36 
                                       f32_2 %280 = OpVectorShuffle %279 %279 0 1 
                                       f32_4 %281 = OpLoad %36 
                                       f32_2 %282 = OpVectorShuffle %281 %281 0 1 
                                         f32 %283 = OpDot %280 %282 
                                                      OpStore %278 %283 
                                Uniform f32* %285 = OpAccessChain %24 %284 
                                         f32 %286 = OpLoad %285 
                                Uniform f32* %288 = OpAccessChain %24 %287 
                                         f32 %289 = OpLoad %288 
                                       f32_2 %290 = OpCompositeConstruct %286 %289 
                                       f32_2 %293 = OpFMul %290 %292 
                                       f32_4 %294 = OpLoad %36 
                                       f32_2 %295 = OpVectorShuffle %294 %294 0 1 
                                       f32_2 %296 = OpFAdd %293 %295 
                                       f32_4 %297 = OpLoad %36 
                                       f32_4 %298 = OpVectorShuffle %297 %296 4 5 2 3 
                                                      OpStore %36 %298 
                                       f32_4 %300 = OpLoad %36 
                                       f32_2 %301 = OpVectorShuffle %300 %300 0 1 
                                       f32_2 %302 = OpFDiv %292 %301 
                                       f32_4 %303 = OpLoad vs_TEXCOORD2 
                                       f32_4 %304 = OpVectorShuffle %303 %302 0 1 4 5 
                                                      OpStore vs_TEXCOORD2 %304 
                                         f32 %305 = OpLoad %278 
                                         f32 %306 = OpExtInst %1 32 %305 
                                                      OpStore %278 %306 
                                  Input f32* %310 = OpAccessChain %308 %114 
                                         f32 %311 = OpLoad %310 
                                         f32 %312 = OpExtInst %1 4 %311 
                                Uniform f32* %314 = OpAccessChain %24 %313 
                                         f32 %315 = OpLoad %314 
                                         f32 %316 = OpFMul %312 %315 
                                Private f32* %317 = OpAccessChain %36 %202 
                                                      OpStore %317 %316 
                                Uniform f32* %320 = OpAccessChain %24 %319 
                                         f32 %321 = OpLoad %320 
                                         f32 %322 = OpFAdd %321 %134 
                                Private f32* %323 = OpAccessChain %318 %202 
                                                      OpStore %323 %322 
                                Private f32* %324 = OpAccessChain %318 %202 
                                         f32 %325 = OpLoad %324 
                                Private f32* %326 = OpAccessChain %36 %202 
                                         f32 %327 = OpLoad %326 
                                         f32 %328 = OpFMul %325 %327 
                                Private f32* %329 = OpAccessChain %36 %202 
                                                      OpStore %329 %328 
                                         f32 %330 = OpLoad %278 
                                Private f32* %331 = OpAccessChain %36 %202 
                                         f32 %332 = OpLoad %331 
                                         f32 %333 = OpFMul %330 %332 
                                Private f32* %334 = OpAccessChain %318 %202 
                                                      OpStore %334 %333 
                                Uniform f32* %337 = OpAccessChain %24 %336 
                                         f32 %338 = OpLoad %337 
                                         f32 %339 = OpFNegate %338 
                                         f32 %340 = OpFAdd %339 %134 
                                                      OpStore %335 %340 
                                         f32 %341 = OpLoad %335 
                                Private f32* %342 = OpAccessChain %318 %202 
                                         f32 %343 = OpLoad %342 
                                         f32 %344 = OpExtInst %1 4 %343 
                                         f32 %345 = OpFMul %341 %344 
                                                      OpStore %335 %345 
                                         f32 %346 = OpLoad %278 
                                Private f32* %347 = OpAccessChain %36 %202 
                                         f32 %348 = OpLoad %347 
                                         f32 %349 = OpFMul %346 %348 
                                         f32 %350 = OpLoad %335 
                                         f32 %351 = OpFNegate %350 
                                         f32 %352 = OpFAdd %349 %351 
                                                      OpStore %278 %352 
                                         f32 %353 = OpLoad %180 
                                         f32 %354 = OpExtInst %1 4 %353 
                                         f32 %355 = OpLoad %278 
                                         f32 %356 = OpFMul %354 %355 
                                         f32 %357 = OpLoad %335 
                                         f32 %358 = OpFAdd %356 %357 
                                                      OpStore %180 %358 
                                Uniform f32* %362 = OpAccessChain %24 %239 %62 %124 
                                         f32 %363 = OpLoad %362 
                                        bool %365 = OpFOrdEqual %363 %364 
                                                      OpStore %361 %365 
                                        bool %366 = OpLoad %361 
                                                      OpSelectionMerge %370 None 
                                                      OpBranchConditional %366 %369 %372 
                                             %369 = OpLabel 
                                         f32 %371 = OpLoad %180 
                                                      OpStore %368 %371 
                                                      OpBranch %370 
                                             %372 = OpLabel 
                                Private f32* %373 = OpAccessChain %318 %202 
                                         f32 %374 = OpLoad %373 
                                                      OpStore %368 %374 
                                                      OpBranch %370 
                                             %370 = OpLabel 
                                         f32 %375 = OpLoad %368 
                                                      OpStore %180 %375 
                                Uniform f32* %377 = OpAccessChain %24 %376 
                                         f32 %378 = OpLoad %377 
                                Uniform f32* %380 = OpAccessChain %24 %379 
                                         f32 %381 = OpLoad %380 
                                         f32 %382 = OpFMul %378 %381 
                                                      OpStore %278 %382 
                                         f32 %383 = OpLoad %278 
                                         f32 %384 = OpLoad %180 
                                         f32 %385 = OpFMul %383 %384 
                                         f32 %386 = OpFAdd %385 %134 
                                                      OpStore %278 %386 
                                         f32 %387 = OpLoad %180 
                                         f32 %388 = OpLoad %278 
                                         f32 %389 = OpFDiv %387 %388 
                                Private f32* %390 = OpAccessChain %36 %202 
                                                      OpStore %390 %389 
                                Uniform f32* %392 = OpAccessChain %24 %391 
                                         f32 %393 = OpLoad %392 
                                Uniform f32* %394 = OpAccessChain %24 %379 
                                         f32 %395 = OpLoad %394 
                                         f32 %396 = OpFMul %393 %395 
                                                      OpStore %278 %396 
                                Private f32* %397 = OpAccessChain %36 %202 
                                         f32 %398 = OpLoad %397 
                                         f32 %399 = OpLoad %278 
                                         f32 %400 = OpFMul %398 %399 
                                                      OpStore %278 %400 
                                         f32 %401 = OpLoad %278 
                                         f32 %402 = OpExtInst %1 37 %401 %134 
                                Private f32* %403 = OpAccessChain %318 %202 
                                                      OpStore %403 %402 
                                Private f32* %404 = OpAccessChain %318 %202 
                                         f32 %405 = OpLoad %404 
                                         f32 %406 = OpExtInst %1 31 %405 
                                Private f32* %407 = OpAccessChain %318 %202 
                                                      OpStore %407 %406 
                                       f32_4 %408 = OpLoad %153 
                                       f32_2 %409 = OpLoad %318 
                                       f32_4 %410 = OpVectorShuffle %409 %409 0 0 0 0 
                                       f32_4 %411 = OpFMul %408 %410 
                                                      OpStore %60 %411 
                                       f32_4 %413 = OpLoad %137 
                                       f32_3 %414 = OpVectorShuffle %413 %413 0 1 2 
                                       f32_4 %415 = OpLoad %137 
                                       f32_3 %416 = OpVectorShuffle %415 %415 3 3 3 
                                       f32_3 %417 = OpFMul %414 %416 
                                       f32_4 %418 = OpLoad %60 
                                       f32_3 %419 = OpVectorShuffle %418 %418 0 1 2 
                                       f32_3 %420 = OpFAdd %417 %419 
                                       f32_4 %421 = OpLoad %412 
                                       f32_4 %422 = OpVectorShuffle %421 %420 4 5 6 3 
                                                      OpStore %412 %422 
                                Private f32* %423 = OpAccessChain %86 %124 
                                         f32 %424 = OpLoad %423 
                                Uniform f32* %425 = OpAccessChain %24 %123 %124 
                                         f32 %426 = OpLoad %425 
                                         f32 %427 = OpFMul %424 %426 
                                Private f32* %428 = OpAccessChain %60 %124 
                                         f32 %429 = OpLoad %428 
                                         f32 %430 = OpFAdd %427 %429 
                                 Output f32* %431 = OpAccessChain %412 %124 
                                                      OpStore %431 %430 
                              Uniform f32_4* %433 = OpAccessChain %24 %432 
                                       f32_4 %434 = OpLoad %433 
                                       f32_4 %437 = OpExtInst %1 40 %434 %436 
                                                      OpStore %60 %437 
                                       f32_4 %438 = OpLoad %60 
                                       f32_4 %441 = OpExtInst %1 37 %438 %440 
                                                      OpStore %60 %441 
                                       f32_2 %442 = OpLoad %9 
                                       f32_4 %443 = OpLoad %60 
                                       f32_2 %444 = OpVectorShuffle %443 %443 0 1 
                                       f32_2 %445 = OpFNegate %444 
                                       f32_2 %446 = OpFAdd %442 %445 
                                                      OpStore %318 %446 
                                       f32_2 %447 = OpLoad %9 
                                       f32_2 %450 = OpFMul %447 %449 
                                       f32_4 %451 = OpLoad %60 
                                       f32_2 %452 = OpVectorShuffle %451 %451 0 1 
                                       f32_2 %453 = OpFNegate %452 
                                       f32_2 %454 = OpFAdd %450 %453 
                                                      OpStore %9 %454 
                                       f32_4 %455 = OpLoad %60 
                                       f32_2 %456 = OpVectorShuffle %455 %455 2 3 
                                       f32_2 %457 = OpFNegate %456 
                                       f32_2 %458 = OpLoad %9 
                                       f32_2 %459 = OpFAdd %457 %458 
                                       f32_4 %460 = OpLoad vs_TEXCOORD2 
                                       f32_4 %461 = OpVectorShuffle %460 %459 4 5 2 3 
                                                      OpStore vs_TEXCOORD2 %461 
                                       f32_4 %462 = OpLoad %60 
                                       f32_2 %463 = OpVectorShuffle %462 %462 0 1 
                                       f32_2 %464 = OpFNegate %463 
                                       f32_4 %465 = OpLoad %60 
                                       f32_2 %466 = OpVectorShuffle %465 %465 2 3 
                                       f32_2 %467 = OpFAdd %464 %466 
                                                      OpStore %9 %467 
                                       f32_2 %469 = OpLoad %318 
                                       f32_2 %470 = OpLoad %9 
                                       f32_2 %471 = OpFDiv %469 %470 
                                       f32_4 %472 = OpLoad vs_TEXCOORD0 
                                       f32_4 %473 = OpVectorShuffle %472 %471 0 1 4 5 
                                                      OpStore vs_TEXCOORD0 %473 
                                       f32_2 %475 = OpLoad %474 
                                       f32_4 %476 = OpLoad vs_TEXCOORD0 
                                       f32_4 %477 = OpVectorShuffle %476 %475 4 5 2 3 
                                                      OpStore vs_TEXCOORD0 %477 
                                  Input f32* %479 = OpAccessChain %308 %114 
                                         f32 %480 = OpLoad %479 
                                        bool %481 = OpFOrdGreaterThanEqual %364 %480 
                                                      OpStore %478 %481 
                                        bool %482 = OpLoad %478 
                                         f32 %483 = OpSelect %482 %134 %364 
                                Private f32* %484 = OpAccessChain %9 %202 
                                                      OpStore %484 %483 
                                Uniform f32* %488 = OpAccessChain %24 %487 
                                         f32 %489 = OpLoad %488 
                                         f32 %490 = OpFNegate %489 
                                Uniform f32* %492 = OpAccessChain %24 %491 
                                         f32 %493 = OpLoad %492 
                                         f32 %494 = OpFAdd %490 %493 
                                Private f32* %495 = OpAccessChain %486 %202 
                                                      OpStore %495 %494 
                                Private f32* %496 = OpAccessChain %9 %202 
                                         f32 %497 = OpLoad %496 
                                Private f32* %498 = OpAccessChain %486 %202 
                                         f32 %499 = OpLoad %498 
                                         f32 %500 = OpFMul %497 %499 
                                Uniform f32* %501 = OpAccessChain %24 %487 
                                         f32 %502 = OpLoad %501 
                                         f32 %503 = OpFAdd %500 %502 
                                Private f32* %504 = OpAccessChain %9 %202 
                                                      OpStore %504 %503 
                                Private f32* %505 = OpAccessChain %9 %202 
                                         f32 %506 = OpLoad %505 
                                         f32 %507 = OpFMul %506 %291 
                                Uniform f32* %509 = OpAccessChain %24 %508 
                                         f32 %510 = OpLoad %509 
                                         f32 %511 = OpFAdd %507 %510 
                                Private f32* %512 = OpAccessChain %9 %202 
                                                      OpStore %512 %511 
                                Private f32* %513 = OpAccessChain %9 %202 
                                         f32 %514 = OpLoad %513 
                                Uniform f32* %515 = OpAccessChain %24 %379 
                                         f32 %516 = OpLoad %515 
                                         f32 %517 = OpFMul %514 %516 
                                Private f32* %518 = OpAccessChain %9 %202 
                                                      OpStore %518 %517 
                                Private f32* %519 = OpAccessChain %9 %202 
                                         f32 %520 = OpLoad %519 
                                         f32 %521 = OpFNegate %520 
                                         f32 %523 = OpFMul %521 %522 
                                         f32 %524 = OpFAdd %523 %522 
                                Private f32* %525 = OpAccessChain %9 %202 
                                                      OpStore %525 %524 
                                Private f32* %526 = OpAccessChain %9 %202 
                                         f32 %527 = OpLoad %526 
                                Private f32* %528 = OpAccessChain %36 %202 
                                         f32 %529 = OpLoad %528 
                                         f32 %530 = OpFMul %527 %529 
                                         f32 %532 = OpFAdd %530 %531 
                                Private f32* %533 = OpAccessChain %36 %124 
                                                      OpStore %533 %532 
                                       f32_4 %535 = OpLoad %36 
                                       f32_2 %536 = OpVectorShuffle %535 %535 0 3 
                                       f32_4 %537 = OpLoad vs_TEXCOORD1 
                                       f32_4 %538 = OpVectorShuffle %537 %536 4 1 2 5 
                                                      OpStore vs_TEXCOORD1 %538 
                                         f32 %539 = OpLoad %278 
                                         f32 %540 = OpFNegate %539 
                                         f32 %541 = OpFMul %540 %522 
                                Private f32* %542 = OpAccessChain %36 %124 
                                         f32 %543 = OpLoad %542 
                                         f32 %544 = OpFAdd %541 %543 
                                 Output f32* %545 = OpAccessChain vs_TEXCOORD1 %114 
                                                      OpStore %545 %544 
                                         f32 %546 = OpLoad %278 
                                         f32 %547 = OpFMul %546 %522 
                                Private f32* %548 = OpAccessChain %36 %124 
                                         f32 %549 = OpLoad %548 
                                         f32 %550 = OpFAdd %547 %549 
                                 Output f32* %551 = OpAccessChain vs_TEXCOORD1 %215 
                                                      OpStore %551 %550 
                                  Input f32* %553 = OpAccessChain %129 %124 
                                         f32 %554 = OpLoad %553 
                                 Output f32* %555 = OpAccessChain vs_TEXCOORD3 %215 
                                                      OpStore %555 %554 
                                 Output f32* %556 = OpAccessChain vs_TEXCOORD3 %124 
                                                      OpStore %556 %364 
                                Uniform f32* %558 = OpAccessChain %24 %557 
                                         f32 %559 = OpLoad %558 
                                Uniform f32* %561 = OpAccessChain %24 %560 
                                         f32 %562 = OpLoad %561 
                                Uniform f32* %564 = OpAccessChain %24 %563 
                                         f32 %565 = OpLoad %564 
                                Uniform f32* %567 = OpAccessChain %24 %566 
                                         f32 %568 = OpLoad %567 
                                       f32_4 %569 = OpCompositeConstruct %559 %562 %565 %568 
                                Uniform f32* %571 = OpAccessChain %24 %570 
                                         f32 %572 = OpLoad %571 
                                Uniform f32* %573 = OpAccessChain %24 %570 
                                         f32 %574 = OpLoad %573 
                                Uniform f32* %575 = OpAccessChain %24 %570 
                                         f32 %576 = OpLoad %575 
                                Uniform f32* %577 = OpAccessChain %24 %570 
                                         f32 %578 = OpLoad %577 
                                       f32_4 %579 = OpCompositeConstruct %572 %574 %576 %578 
                                         f32 %580 = OpCompositeExtract %579 0 
                                         f32 %581 = OpCompositeExtract %579 1 
                                         f32 %582 = OpCompositeExtract %579 2 
                                         f32 %583 = OpCompositeExtract %579 3 
                                       f32_4 %584 = OpCompositeConstruct %580 %581 %582 %583 
                                       f32_4 %585 = OpFMul %569 %584 
                                                      OpStore %36 %585 
                                       f32_4 %586 = OpLoad %36 
                                       f32_2 %587 = OpVectorShuffle %586 %586 2 3 
                                       f32_2 %588 = OpFNegate %587 
                                Uniform f32* %589 = OpAccessChain %24 %313 
                                         f32 %590 = OpLoad %589 
                                       f32_2 %591 = OpCompositeConstruct %590 %590 
                                       f32_2 %592 = OpFMul %588 %591 
                                       f32_3 %593 = OpLoad %486 
                                       f32_3 %594 = OpVectorShuffle %593 %592 3 1 4 
                                                      OpStore %486 %594 
                                       f32_3 %595 = OpLoad %486 
                                       f32_2 %596 = OpVectorShuffle %595 %595 0 2 
                                Uniform f32* %598 = OpAccessChain %24 %597 
                                         f32 %599 = OpLoad %598 
                                Uniform f32* %601 = OpAccessChain %24 %600 
                                         f32 %602 = OpLoad %601 
                                       f32_2 %603 = OpCompositeConstruct %599 %602 
                                       f32_2 %604 = OpFDiv %596 %603 
                                       f32_3 %605 = OpLoad %486 
                                       f32_3 %606 = OpVectorShuffle %605 %604 3 1 4 
                                                      OpStore %486 %606 
                                       f32_3 %607 = OpLoad %486 
                                       f32_2 %608 = OpVectorShuffle %607 %607 0 2 
                                       f32_2 %609 = OpLoad %474 
                                       f32_2 %610 = OpFAdd %608 %609 
                                       f32_4 %611 = OpLoad vs_TEXCOORD3 
                                       f32_4 %612 = OpVectorShuffle %611 %610 4 5 2 3 
                                                      OpStore vs_TEXCOORD3 %612 
                                Private f32* %613 = OpAccessChain %36 %202 
                                         f32 %614 = OpLoad %613 
                                         f32 %615 = OpLoad %180 
                                         f32 %616 = OpFMul %614 %615 
                                         f32 %617 = OpFAdd %616 %134 
                                Private f32* %618 = OpAccessChain %486 %202 
                                                      OpStore %618 %617 
                                         f32 %619 = OpLoad %180 
                                Private f32* %620 = OpAccessChain %486 %202 
                                         f32 %621 = OpLoad %620 
                                         f32 %622 = OpFDiv %619 %621 
                                Private f32* %623 = OpAccessChain %486 %202 
                                                      OpStore %623 %622 
                                Private f32* %624 = OpAccessChain %486 %202 
                                         f32 %625 = OpLoad %624 
                                Private f32* %626 = OpAccessChain %36 %114 
                                         f32 %627 = OpLoad %626 
                                         f32 %628 = OpFMul %625 %627 
                                                      OpStore %180 %628 
                                Private f32* %629 = OpAccessChain %9 %202 
                                         f32 %630 = OpLoad %629 
                                Private f32* %631 = OpAccessChain %486 %202 
                                         f32 %632 = OpLoad %631 
                                         f32 %633 = OpFMul %630 %632 
                                         f32 %634 = OpFAdd %633 %531 
                                Private f32* %635 = OpAccessChain %9 %202 
                                                      OpStore %635 %634 
                                Private f32* %638 = OpAccessChain %486 %202 
                                         f32 %639 = OpLoad %638 
                                 Output f32* %640 = OpAccessChain vs_TEXCOORD4 %202 
                                                      OpStore %640 %639 
                                         f32 %641 = OpLoad %180 
                                         f32 %642 = OpFNegate %641 
                                         f32 %643 = OpFMul %642 %522 
                                Private f32* %644 = OpAccessChain %9 %202 
                                         f32 %645 = OpLoad %644 
                                         f32 %646 = OpFAdd %643 %645 
                                 Output f32* %647 = OpAccessChain vs_TEXCOORD4 %114 
                                                      OpStore %647 %646 
                                 Output f32* %648 = OpAccessChain %118 %45 %114 
                                         f32 %649 = OpLoad %648 
                                         f32 %650 = OpFNegate %649 
                                 Output f32* %651 = OpAccessChain %118 %45 %114 
                                                      OpStore %651 %650 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 173
; Schema: 0
                                             OpCapability Shader 
                                      %1 = OpExtInstImport "GLSL.std.450" 
                                             OpMemoryModel Logical GLSL450 
                                             OpEntryPoint Fragment %4 "main" %21 %35 %80 %88 %104 %134 %167 
                                             OpExecutionMode %4 OriginUpperLeft 
                                             OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                             OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                             OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                             OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                             OpDecorate %12 DescriptorSet 12 
                                             OpDecorate %12 Binding 12 
                                             OpDecorate %16 DescriptorSet 16 
                                             OpDecorate %16 Binding 16 
                                             OpDecorate vs_TEXCOORD3 Location 21 
                                             OpDecorate vs_TEXCOORD4 Location 35 
                                             OpMemberDecorate %53 0 Offset 53 
                                             OpMemberDecorate %53 1 Offset 53 
                                             OpDecorate %53 Block 
                                             OpDecorate %55 DescriptorSet 55 
                                             OpDecorate %55 Binding 55 
                                             OpDecorate vs_TEXCOORD0 Location 80 
                                             OpDecorate vs_TEXCOORD1 Location 88 
                                             OpDecorate %104 Location 104 
                                             OpDecorate vs_TEXCOORD2 Location 134 
                                             OpDecorate %167 Location 167 
                                      %2 = OpTypeVoid 
                                      %3 = OpTypeFunction %2 
                                      %6 = OpTypeFloat 32 
                                      %7 = OpTypeVector %6 4 
                                      %8 = OpTypePointer Private %7 
                       Private f32_4* %9 = OpVariable Private 
                                     %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                     %11 = OpTypePointer UniformConstant %10 
UniformConstant read_only Texture2D* %12 = OpVariable UniformConstant 
                                     %14 = OpTypeSampler 
                                     %15 = OpTypePointer UniformConstant %14 
            UniformConstant sampler* %16 = OpVariable UniformConstant 
                                     %18 = OpTypeSampledImage %10 
                                     %20 = OpTypePointer Input %7 
               Input f32_4* vs_TEXCOORD3 = OpVariable Input 
                                     %22 = OpTypeVector %6 2 
                                     %26 = OpTypeInt 32 0 
                                 u32 %27 = OpConstant 3 
                                 u32 %29 = OpConstant 0 
                                     %30 = OpTypePointer Private %6 
                                     %34 = OpTypePointer Input %22 
               Input f32_2* vs_TEXCOORD4 = OpVariable Input 
                                     %36 = OpTypePointer Input %6 
                                 u32 %40 = OpConstant 1 
                                 f32 %48 = OpConstant 3.674022E-40 
                                 f32 %49 = OpConstant 3.674022E-40 
                      Private f32_4* %52 = OpVariable Private 
                                     %53 = OpTypeStruct %7 %7 
                                     %54 = OpTypePointer Uniform %53 
     Uniform struct {f32_4; f32_4;}* %55 = OpVariable Uniform 
                                     %56 = OpTypeInt 32 1 
                                 i32 %57 = OpConstant 0 
                                     %58 = OpTypeVector %6 3 
                                     %59 = OpTypePointer Uniform %7 
                                     %69 = OpTypePointer Uniform %6 
               Input f32_4* vs_TEXCOORD0 = OpVariable Input 
               Input f32_4* vs_TEXCOORD1 = OpVariable Input 
                     Private f32_4* %101 = OpVariable Private 
                       Input f32_4* %104 = OpVariable Input 
                                i32 %121 = OpConstant 1 
               Input f32_4* vs_TEXCOORD2 = OpVariable Input 
                                    %166 = OpTypePointer Output %7 
                      Output f32_4* %167 = OpVariable Output 
                                 void %4 = OpFunction None %3 
                                      %5 = OpLabel 
                 read_only Texture2D %13 = OpLoad %12 
                             sampler %17 = OpLoad %16 
          read_only Texture2DSampled %19 = OpSampledImage %13 %17 
                               f32_4 %23 = OpLoad vs_TEXCOORD3 
                               f32_2 %24 = OpVectorShuffle %23 %23 0 1 
                               f32_4 %25 = OpImageSampleImplicitLod %19 %24 
                                 f32 %28 = OpCompositeExtract %25 3 
                        Private f32* %31 = OpAccessChain %9 %29 
                                             OpStore %31 %28 
                        Private f32* %32 = OpAccessChain %9 %29 
                                 f32 %33 = OpLoad %32 
                          Input f32* %37 = OpAccessChain vs_TEXCOORD4 %29 
                                 f32 %38 = OpLoad %37 
                                 f32 %39 = OpFMul %33 %38 
                          Input f32* %41 = OpAccessChain vs_TEXCOORD4 %40 
                                 f32 %42 = OpLoad %41 
                                 f32 %43 = OpFNegate %42 
                                 f32 %44 = OpFAdd %39 %43 
                        Private f32* %45 = OpAccessChain %9 %29 
                                             OpStore %45 %44 
                        Private f32* %46 = OpAccessChain %9 %29 
                                 f32 %47 = OpLoad %46 
                                 f32 %50 = OpExtInst %1 43 %47 %48 %49 
                        Private f32* %51 = OpAccessChain %9 %29 
                                             OpStore %51 %50 
                      Uniform f32_4* %60 = OpAccessChain %55 %57 
                               f32_4 %61 = OpLoad %60 
                               f32_3 %62 = OpVectorShuffle %61 %61 3 3 3 
                      Uniform f32_4* %63 = OpAccessChain %55 %57 
                               f32_4 %64 = OpLoad %63 
                               f32_3 %65 = OpVectorShuffle %64 %64 0 1 2 
                               f32_3 %66 = OpFMul %62 %65 
                               f32_4 %67 = OpLoad %52 
                               f32_4 %68 = OpVectorShuffle %67 %66 4 5 6 3 
                                             OpStore %52 %68 
                        Uniform f32* %70 = OpAccessChain %55 %57 %27 
                                 f32 %71 = OpLoad %70 
                        Private f32* %72 = OpAccessChain %52 %27 
                                             OpStore %72 %71 
                               f32_4 %73 = OpLoad %9 
                               f32_4 %74 = OpVectorShuffle %73 %73 0 0 0 0 
                               f32_4 %75 = OpLoad %52 
                               f32_4 %76 = OpFMul %74 %75 
                                             OpStore %9 %76 
                 read_only Texture2D %77 = OpLoad %12 
                             sampler %78 = OpLoad %16 
          read_only Texture2DSampled %79 = OpSampledImage %77 %78 
                               f32_4 %81 = OpLoad vs_TEXCOORD0 
                               f32_2 %82 = OpVectorShuffle %81 %81 0 1 
                               f32_4 %83 = OpImageSampleImplicitLod %79 %82 
                                 f32 %84 = OpCompositeExtract %83 3 
                        Private f32* %85 = OpAccessChain %52 %29 
                                             OpStore %85 %84 
                        Private f32* %86 = OpAccessChain %52 %29 
                                 f32 %87 = OpLoad %86 
                          Input f32* %89 = OpAccessChain vs_TEXCOORD1 %29 
                                 f32 %90 = OpLoad %89 
                                 f32 %91 = OpFMul %87 %90 
                          Input f32* %92 = OpAccessChain vs_TEXCOORD1 %27 
                                 f32 %93 = OpLoad %92 
                                 f32 %94 = OpFNegate %93 
                                 f32 %95 = OpFAdd %91 %94 
                        Private f32* %96 = OpAccessChain %52 %29 
                                             OpStore %96 %95 
                        Private f32* %97 = OpAccessChain %52 %29 
                                 f32 %98 = OpLoad %97 
                                 f32 %99 = OpExtInst %1 43 %98 %48 %49 
                       Private f32* %100 = OpAccessChain %52 %29 
                                             OpStore %100 %99 
                              f32_4 %102 = OpLoad %52 
                              f32_4 %103 = OpVectorShuffle %102 %102 0 0 0 0 
                              f32_4 %105 = OpLoad %104 
                              f32_4 %106 = OpFMul %103 %105 
                                             OpStore %101 %106 
                         Input f32* %107 = OpAccessChain %104 %27 
                                f32 %108 = OpLoad %107 
                                f32 %109 = OpFNegate %108 
                       Private f32* %110 = OpAccessChain %52 %29 
                                f32 %111 = OpLoad %110 
                                f32 %112 = OpFMul %109 %111 
                                f32 %113 = OpFAdd %112 %49 
                       Private f32* %114 = OpAccessChain %52 %29 
                                             OpStore %114 %113 
                              f32_4 %115 = OpLoad %9 
                              f32_4 %116 = OpLoad %52 
                              f32_4 %117 = OpVectorShuffle %116 %116 0 0 0 0 
                              f32_4 %118 = OpFMul %115 %117 
                              f32_4 %119 = OpLoad %101 
                              f32_4 %120 = OpFAdd %118 %119 
                                             OpStore %9 %120 
                     Uniform f32_4* %122 = OpAccessChain %55 %121 
                              f32_4 %123 = OpLoad %122 
                              f32_2 %124 = OpVectorShuffle %123 %123 0 1 
                              f32_2 %125 = OpFNegate %124 
                     Uniform f32_4* %126 = OpAccessChain %55 %121 
                              f32_4 %127 = OpLoad %126 
                              f32_2 %128 = OpVectorShuffle %127 %127 2 3 
                              f32_2 %129 = OpFAdd %125 %128 
                              f32_4 %130 = OpLoad %52 
                              f32_4 %131 = OpVectorShuffle %130 %129 4 5 2 3 
                                             OpStore %52 %131 
                              f32_4 %132 = OpLoad %52 
                              f32_2 %133 = OpVectorShuffle %132 %132 0 1 
                              f32_4 %135 = OpLoad vs_TEXCOORD2 
                              f32_2 %136 = OpVectorShuffle %135 %135 0 1 
                              f32_2 %137 = OpExtInst %1 4 %136 
                              f32_2 %138 = OpFNegate %137 
                              f32_2 %139 = OpFAdd %133 %138 
                              f32_4 %140 = OpLoad %52 
                              f32_4 %141 = OpVectorShuffle %140 %139 4 5 2 3 
                                             OpStore %52 %141 
                              f32_4 %142 = OpLoad %52 
                              f32_2 %143 = OpVectorShuffle %142 %142 0 1 
                              f32_4 %144 = OpLoad vs_TEXCOORD2 
                              f32_2 %145 = OpVectorShuffle %144 %144 2 3 
                              f32_2 %146 = OpFMul %143 %145 
                              f32_4 %147 = OpLoad %52 
                              f32_4 %148 = OpVectorShuffle %147 %146 4 5 2 3 
                                             OpStore %52 %148 
                              f32_4 %149 = OpLoad %52 
                              f32_2 %150 = OpVectorShuffle %149 %149 0 1 
                              f32_2 %151 = OpCompositeConstruct %48 %48 
                              f32_2 %152 = OpCompositeConstruct %49 %49 
                              f32_2 %153 = OpExtInst %1 43 %150 %151 %152 
                              f32_4 %154 = OpLoad %52 
                              f32_4 %155 = OpVectorShuffle %154 %153 4 5 2 3 
                                             OpStore %52 %155 
                       Private f32* %156 = OpAccessChain %52 %40 
                                f32 %157 = OpLoad %156 
                       Private f32* %158 = OpAccessChain %52 %29 
                                f32 %159 = OpLoad %158 
                                f32 %160 = OpFMul %157 %159 
                       Private f32* %161 = OpAccessChain %52 %29 
                                             OpStore %161 %160 
                              f32_4 %162 = OpLoad %9 
                              f32_4 %163 = OpLoad %52 
                              f32_4 %164 = OpVectorShuffle %163 %163 0 0 0 0 
                              f32_4 %165 = OpFMul %162 %164 
                                             OpStore %9 %165 
                              f32_4 %168 = OpLoad %9 
                              f32_4 %169 = OpLoad vs_TEXCOORD3 
                              f32_4 %170 = OpVectorShuffle %169 %169 2 2 2 2 
                              f32_4 %171 = OpFMul %168 %170 
                                             OpStore %167 %171 
                                             OpReturn
                                             OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "OUTLINE_ON" "UNDERLAY_ON" "UNITY_UI_CLIP_RECT" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "OUTLINE_ON" "UNDERLAY_ON" "UNITY_UI_CLIP_RECT" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _FaceColor;
uniform 	float _FaceDilate;
uniform 	float _OutlineSoftness;
uniform 	vec4 _OutlineColor;
uniform 	float _OutlineWidth;
uniform 	float _UnderlayOffsetX;
uniform 	float _UnderlayOffsetY;
uniform 	float _UnderlayDilate;
uniform 	float _UnderlaySoftness;
uniform 	float _WeightNormal;
uniform 	float _WeightBold;
uniform 	float _ScaleRatioA;
uniform 	float _ScaleRatioC;
uniform 	float _VertexOffsetX;
uniform 	float _VertexOffsetY;
uniform 	vec4 _ClipRect;
uniform 	float _MaskSoftnessX;
uniform 	float _MaskSoftnessY;
uniform 	float _TextureWidth;
uniform 	float _TextureHeight;
uniform 	float _GradientScale;
uniform 	float _ScaleX;
uniform 	float _ScaleY;
uniform 	float _PerspectiveFilter;
uniform 	float _Sharpness;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_COLOR0;
in  vec2 in_TEXCOORD0;
in  vec2 in_TEXCOORD1;
out vec4 vs_COLOR0;
out vec4 vs_COLOR1;
out vec4 vs_TEXCOORD0;
out vec4 vs_TEXCOORD1;
out vec4 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec2 vs_TEXCOORD4;
vec2 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
vec4 u_xlat6;
vec3 u_xlat7;
vec2 u_xlat8;
float u_xlat14;
float u_xlat15;
float u_xlat21;
bool u_xlatb21;
void main()
{
    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
    gl_Position = u_xlat2;
    vs_COLOR0.w = _FaceColor.w;
    u_xlat3.xyz = in_COLOR0.xyz;
    u_xlat3.w = 1.0;
    u_xlat4 = u_xlat3 * _FaceColor;
    u_xlat2.xyz = u_xlat4.www * u_xlat4.xyz;
    vs_COLOR0.xyz = u_xlat2.xyz;
    u_xlat5.xyz = (-u_xlat2.xyz);
    u_xlat5.w = (-u_xlat4.w);
    u_xlat6.xyz = _OutlineColor.www * _OutlineColor.xyz;
    u_xlat6.w = _OutlineColor.w;
    u_xlat5 = u_xlat5 + u_xlat6;
    u_xlat14 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat14 = inversesqrt(u_xlat14);
    u_xlat1.xyz = vec3(u_xlat14) * u_xlat1.xyz;
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat14 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat14 = inversesqrt(u_xlat14);
    u_xlat2.xyz = vec3(u_xlat14) * u_xlat2.xyz;
    u_xlat14 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat1.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;
    u_xlat1.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat1.xy;
    u_xlat1.xy = abs(u_xlat1.xy) * vec2(_ScaleX, _ScaleY);
    u_xlat1.xy = u_xlat2.ww / u_xlat1.xy;
    u_xlat21 = dot(u_xlat1.xy, u_xlat1.xy);
    u_xlat1.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) * vec2(0.25, 0.25) + u_xlat1.xy;
    vs_TEXCOORD2.zw = vec2(0.25, 0.25) / u_xlat1.xy;
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.x = abs(in_TEXCOORD1.y) * _GradientScale;
    u_xlat8.x = _Sharpness + 1.0;
    u_xlat1.x = u_xlat8.x * u_xlat1.x;
    u_xlat8.x = u_xlat21 * u_xlat1.x;
    u_xlat15 = (-_PerspectiveFilter) + 1.0;
    u_xlat15 = u_xlat15 * abs(u_xlat8.x);
    u_xlat21 = u_xlat21 * u_xlat1.x + (-u_xlat15);
    u_xlat14 = abs(u_xlat14) * u_xlat21 + u_xlat15;
    u_xlatb21 = hlslcc_mtx4x4glstate_matrix_projection[3].w==0.0;
    u_xlat14 = (u_xlatb21) ? u_xlat14 : u_xlat8.x;
    u_xlat21 = _OutlineSoftness * _ScaleRatioA;
    u_xlat21 = u_xlat21 * u_xlat14 + 1.0;
    u_xlat1.x = u_xlat14 / u_xlat21;
    u_xlat21 = _OutlineWidth * _ScaleRatioA;
    u_xlat21 = u_xlat21 * 0.5;
    u_xlat8.x = u_xlat1.x * u_xlat21;
    u_xlat8.x = u_xlat8.x + u_xlat8.x;
    u_xlat8.x = min(u_xlat8.x, 1.0);
    u_xlat8.x = sqrt(u_xlat8.x);
    u_xlat2 = u_xlat5 * u_xlat8.xxxx;
    vs_COLOR1.xyz = u_xlat4.xyz * u_xlat4.www + u_xlat2.xyz;
    vs_COLOR1.w = u_xlat3.w * _FaceColor.w + u_xlat2.w;
    u_xlat2 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));
    u_xlat2 = min(u_xlat2, vec4(2e+10, 2e+10, 2e+10, 2e+10));
    u_xlat8.xy = u_xlat0.xy + (-u_xlat2.xy);
    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + (-u_xlat2.xy);
    vs_TEXCOORD2.xy = (-u_xlat2.zw) + u_xlat0.xy;
    u_xlat0.xy = (-u_xlat2.xy) + u_xlat2.zw;
    vs_TEXCOORD0.zw = u_xlat8.xy / u_xlat0.xy;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlatb0 = 0.0>=in_TEXCOORD1.y;
    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);
    u_xlat7.x = (-_WeightNormal) + _WeightBold;
    u_xlat0.x = u_xlat0.x * u_xlat7.x + _WeightNormal;
    u_xlat0.x = u_xlat0.x * 0.25 + _FaceDilate;
    u_xlat0.x = u_xlat0.x * _ScaleRatioA;
    u_xlat0.x = (-u_xlat0.x) * 0.5 + 0.5;
    u_xlat1.w = u_xlat0.x * u_xlat1.x + -0.5;
    vs_TEXCOORD1.y = (-u_xlat21) * u_xlat1.x + u_xlat1.w;
    vs_TEXCOORD1.z = u_xlat21 * u_xlat1.x + u_xlat1.w;
    vs_TEXCOORD1.xw = u_xlat1.xw;
    vs_TEXCOORD3.z = in_COLOR0.w;
    vs_TEXCOORD3.w = 0.0;
    u_xlat1 = vec4(_UnderlaySoftness, _UnderlayDilate, _UnderlayOffsetX, _UnderlayOffsetY) * vec4(vec4(_ScaleRatioC, _ScaleRatioC, _ScaleRatioC, _ScaleRatioC));
    u_xlat7.xz = (-u_xlat1.zw) * vec2(_GradientScale);
    u_xlat7.xz = u_xlat7.xz / vec2(_TextureWidth, _TextureHeight);
    vs_TEXCOORD3.xy = u_xlat7.xz + in_TEXCOORD0.xy;
    u_xlat7.x = u_xlat1.x * u_xlat14 + 1.0;
    u_xlat7.x = u_xlat14 / u_xlat7.x;
    u_xlat14 = u_xlat1.y * 0.5;
    u_xlat0.x = u_xlat0.x * u_xlat7.x + -0.5;
    vs_TEXCOORD4.y = (-u_xlat14) * u_xlat7.x + u_xlat0.x;
    vs_TEXCOORD4.x = u_xlat7.x;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _UnderlayColor;
uniform 	vec4 _ClipRect;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
in  vec4 vs_COLOR0;
in  vec4 vs_COLOR1;
in  vec4 vs_TEXCOORD0;
in  vec4 vs_TEXCOORD1;
in  vec4 vs_TEXCOORD2;
in  vec4 vs_TEXCOORD3;
in  vec2 vs_TEXCOORD4;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
void main()
{
    u_xlat0 = texture(_MainTex, vs_TEXCOORD3.xy);
    u_xlat0.x = u_xlat0.w * vs_TEXCOORD4.x + (-vs_TEXCOORD4.y);
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat1.xyz = _UnderlayColor.www * _UnderlayColor.xyz;
    u_xlat1.w = _UnderlayColor.w;
    u_xlat0 = u_xlat0.xxxx * u_xlat1;
    u_xlat1 = vs_COLOR0 + (-vs_COLOR1);
    u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2.xy = u_xlat2.ww * vs_TEXCOORD1.xx + (-vs_TEXCOORD1.zy);
    u_xlat2.xy = clamp(u_xlat2.xy, 0.0, 1.0);
    u_xlat1 = u_xlat2.xxxx * u_xlat1 + vs_COLOR1;
    u_xlat3 = u_xlat2.yyyy * u_xlat1;
    u_xlat1.x = (-u_xlat1.w) * u_xlat2.y + 1.0;
    u_xlat0 = u_xlat0 * u_xlat1.xxxx + u_xlat3;
    u_xlat1.xy = (-_ClipRect.xy) + _ClipRect.zw;
    u_xlat1.xy = u_xlat1.xy + -abs(vs_TEXCOORD2.xy);
    u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD2.zw;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
    u_xlat1.x = u_xlat1.y * u_xlat1.x;
    u_xlat0 = u_xlat0 * u_xlat1.xxxx;
    SV_Target0 = u_xlat0 * vs_TEXCOORD3.zzzz;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "OUTLINE_ON" "UNDERLAY_ON" "UNITY_UI_CLIP_RECT" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 653
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %12 %118 %122 %129 %196 %299 %308 %412 %468 %474 %534 %552 %637 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpDecorate %12 Location 12 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpDecorate %19 ArrayStride 19 
                                                      OpDecorate %20 ArrayStride 20 
                                                      OpDecorate %21 ArrayStride 21 
                                                      OpMemberDecorate %22 0 Offset 22 
                                                      OpMemberDecorate %22 1 Offset 22 
                                                      OpMemberDecorate %22 2 Offset 22 
                                                      OpMemberDecorate %22 3 Offset 22 
                                                      OpMemberDecorate %22 4 Offset 22 
                                                      OpMemberDecorate %22 5 Offset 22 
                                                      OpMemberDecorate %22 6 Offset 22 
                                                      OpMemberDecorate %22 7 Offset 22 
                                                      OpMemberDecorate %22 8 Offset 22 
                                                      OpMemberDecorate %22 9 Offset 22 
                                                      OpMemberDecorate %22 10 Offset 22 
                                                      OpMemberDecorate %22 11 Offset 22 
                                                      OpMemberDecorate %22 12 Offset 22 
                                                      OpMemberDecorate %22 13 Offset 22 
                                                      OpMemberDecorate %22 14 Offset 22 
                                                      OpMemberDecorate %22 15 Offset 22 
                                                      OpMemberDecorate %22 16 Offset 22 
                                                      OpMemberDecorate %22 17 Offset 22 
                                                      OpMemberDecorate %22 18 Offset 22 
                                                      OpMemberDecorate %22 19 Offset 22 
                                                      OpMemberDecorate %22 20 Offset 22 
                                                      OpMemberDecorate %22 21 Offset 22 
                                                      OpMemberDecorate %22 22 Offset 22 
                                                      OpMemberDecorate %22 23 Offset 22 
                                                      OpMemberDecorate %22 24 Offset 22 
                                                      OpMemberDecorate %22 25 Offset 22 
                                                      OpMemberDecorate %22 26 Offset 22 
                                                      OpMemberDecorate %22 27 Offset 22 
                                                      OpMemberDecorate %22 28 Offset 22 
                                                      OpMemberDecorate %22 29 Offset 22 
                                                      OpMemberDecorate %22 30 Offset 22 
                                                      OpDecorate %22 Block 
                                                      OpDecorate %24 DescriptorSet 24 
                                                      OpDecorate %24 Binding 24 
                                                      OpMemberDecorate %116 0 BuiltIn 116 
                                                      OpMemberDecorate %116 1 BuiltIn 116 
                                                      OpMemberDecorate %116 2 BuiltIn 116 
                                                      OpDecorate %116 Block 
                                                      OpDecorate %122 Location 122 
                                                      OpDecorate %129 Location 129 
                                                      OpDecorate %196 Location 196 
                                                      OpDecorate vs_TEXCOORD2 Location 299 
                                                      OpDecorate %308 Location 308 
                                                      OpDecorate %412 Location 412 
                                                      OpDecorate vs_TEXCOORD0 Location 468 
                                                      OpDecorate %474 Location 474 
                                                      OpDecorate vs_TEXCOORD1 Location 534 
                                                      OpDecorate vs_TEXCOORD3 Location 552 
                                                      OpDecorate vs_TEXCOORD4 Location 637 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 2 
                                               %8 = OpTypePointer Private %7 
                                Private f32_2* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 4 
                                              %11 = OpTypePointer Input %10 
                                 Input f32_4* %12 = OpVariable Input 
                                              %15 = OpTypeVector %6 3 
                                              %16 = OpTypeInt 32 0 
                                          u32 %17 = OpConstant 4 
                                              %18 = OpTypeArray %10 %17 
                                              %19 = OpTypeArray %10 %17 
                                              %20 = OpTypeArray %10 %17 
                                              %21 = OpTypeArray %10 %17 
                                              %22 = OpTypeStruct %15 %10 %18 %19 %20 %21 %10 %6 %6 %10 %6 %6 %6 %6 %6 %6 %6 %6 %6 %6 %6 %10 %6 %6 %6 %6 %6 %6 %6 %6 %6 
                                              %23 = OpTypePointer Uniform %22 
Uniform struct {f32_3; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4[4]; f32_4; f32; f32; f32_4; f32; f32; f32; f32; f32; f32; f32; f32; f32; f32; f32; f32_4; f32; f32; f32; f32; f32; f32; f32; f32; f32;}* %24 = OpVariable Uniform 
                                              %25 = OpTypeInt 32 1 
                                          i32 %26 = OpConstant 19 
                                              %27 = OpTypePointer Uniform %6 
                                          i32 %30 = OpConstant 20 
                                              %35 = OpTypePointer Private %10 
                               Private f32_4* %36 = OpVariable Private 
                                          i32 %39 = OpConstant 2 
                                          i32 %40 = OpConstant 1 
                                              %41 = OpTypePointer Uniform %10 
                                          i32 %45 = OpConstant 0 
                               Private f32_4* %60 = OpVariable Private 
                                          i32 %62 = OpConstant 3 
                                              %80 = OpTypePointer Uniform %15 
                               Private f32_4* %86 = OpVariable Private 
                                          i32 %89 = OpConstant 5 
                                         u32 %114 = OpConstant 1 
                                             %115 = OpTypeArray %6 %114 
                                             %116 = OpTypeStruct %10 %6 %115 
                                             %117 = OpTypePointer Output %116 
        Output struct {f32_4; f32; f32[1];}* %118 = OpVariable Output 
                                             %120 = OpTypePointer Output %10 
                               Output f32_4* %122 = OpVariable Output 
                                         i32 %123 = OpConstant 6 
                                         u32 %124 = OpConstant 3 
                                             %127 = OpTypePointer Output %6 
                                Input f32_4* %129 = OpVariable Input 
                                         f32 %134 = OpConstant 3.674022E-40 
                                             %135 = OpTypePointer Private %6 
                              Private f32_4* %137 = OpVariable Private 
                              Private f32_4* %153 = OpVariable Private 
                              Private f32_4* %163 = OpVariable Private 
                                         i32 %164 = OpConstant 9 
                                Private f32* %180 = OpVariable Private 
                                             %195 = OpTypePointer Input %15 
                                Input f32_3* %196 = OpVariable Input 
                                         u32 %202 = OpConstant 0 
                                         u32 %215 = OpConstant 2 
                                         i32 %239 = OpConstant 4 
                                         i32 %261 = OpConstant 27 
                                         i32 %264 = OpConstant 28 
                                Private f32* %278 = OpVariable Private 
                                         i32 %284 = OpConstant 22 
                                         i32 %287 = OpConstant 23 
                                         f32 %291 = OpConstant 3.674022E-40 
                                       f32_2 %292 = OpConstantComposite %291 %291 
                       Output f32_4* vs_TEXCOORD2 = OpVariable Output 
                                             %307 = OpTypePointer Input %7 
                                Input f32_2* %308 = OpVariable Input 
                                             %309 = OpTypePointer Input %6 
                                         i32 %313 = OpConstant 26 
                              Private f32_2* %318 = OpVariable Private 
                                         i32 %319 = OpConstant 30 
                                Private f32* %335 = OpVariable Private 
                                         i32 %336 = OpConstant 29 
                                             %359 = OpTypeBool 
                                             %360 = OpTypePointer Private %359 
                               Private bool* %361 = OpVariable Private 
                                         f32 %364 = OpConstant 3.674022E-40 
                                             %367 = OpTypePointer Function %6 
                                         i32 %376 = OpConstant 8 
                                         i32 %379 = OpConstant 17 
                                         i32 %391 = OpConstant 10 
                               Output f32_4* %412 = OpVariable Output 
                                         i32 %432 = OpConstant 21 
                                         f32 %435 = OpConstant 3.674022E-40 
                                       f32_4 %436 = OpConstantComposite %435 %435 %435 %435 
                                         f32 %439 = OpConstant 3.674022E-40 
                                       f32_4 %440 = OpConstantComposite %439 %439 %439 %439 
                                         f32 %448 = OpConstant 3.674022E-40 
                                       f32_2 %449 = OpConstantComposite %448 %448 
                       Output f32_4* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_2* %474 = OpVariable Input 
                               Private bool* %478 = OpVariable Private 
                                             %485 = OpTypePointer Private %15 
                              Private f32_3* %486 = OpVariable Private 
                                         i32 %487 = OpConstant 15 
                                         i32 %491 = OpConstant 16 
                                         i32 %508 = OpConstant 7 
                                         f32 %522 = OpConstant 3.674022E-40 
                                         f32 %531 = OpConstant 3.674022E-40 
                       Output f32_4* vs_TEXCOORD1 = OpVariable Output 
                       Output f32_4* vs_TEXCOORD3 = OpVariable Output 
                                         i32 %557 = OpConstant 14 
                                         i32 %560 = OpConstant 13 
                                         i32 %563 = OpConstant 11 
                                         i32 %566 = OpConstant 12 
                                         i32 %570 = OpConstant 18 
                                         i32 %597 = OpConstant 24 
                                         i32 %600 = OpConstant 25 
                                             %636 = OpTypePointer Output %7 
                       Output f32_2* vs_TEXCOORD4 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                               Function f32* %368 = OpVariable Function 
                                        f32_4 %13 = OpLoad %12 
                                        f32_2 %14 = OpVectorShuffle %13 %13 0 1 
                                 Uniform f32* %28 = OpAccessChain %24 %26 
                                          f32 %29 = OpLoad %28 
                                 Uniform f32* %31 = OpAccessChain %24 %30 
                                          f32 %32 = OpLoad %31 
                                        f32_2 %33 = OpCompositeConstruct %29 %32 
                                        f32_2 %34 = OpFAdd %14 %33 
                                                      OpStore %9 %34 
                                        f32_2 %37 = OpLoad %9 
                                        f32_4 %38 = OpVectorShuffle %37 %37 1 1 1 1 
                               Uniform f32_4* %42 = OpAccessChain %24 %39 %40 
                                        f32_4 %43 = OpLoad %42 
                                        f32_4 %44 = OpFMul %38 %43 
                                                      OpStore %36 %44 
                               Uniform f32_4* %46 = OpAccessChain %24 %39 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_2 %48 = OpLoad %9 
                                        f32_4 %49 = OpVectorShuffle %48 %48 0 0 0 0 
                                        f32_4 %50 = OpFMul %47 %49 
                                        f32_4 %51 = OpLoad %36 
                                        f32_4 %52 = OpFAdd %50 %51 
                                                      OpStore %36 %52 
                               Uniform f32_4* %53 = OpAccessChain %24 %39 %39 
                                        f32_4 %54 = OpLoad %53 
                                        f32_4 %55 = OpLoad %12 
                                        f32_4 %56 = OpVectorShuffle %55 %55 2 2 2 2 
                                        f32_4 %57 = OpFMul %54 %56 
                                        f32_4 %58 = OpLoad %36 
                                        f32_4 %59 = OpFAdd %57 %58 
                                                      OpStore %36 %59 
                                        f32_4 %61 = OpLoad %36 
                               Uniform f32_4* %63 = OpAccessChain %24 %39 %62 
                                        f32_4 %64 = OpLoad %63 
                                        f32_4 %65 = OpFAdd %61 %64 
                                                      OpStore %60 %65 
                               Uniform f32_4* %66 = OpAccessChain %24 %39 %62 
                                        f32_4 %67 = OpLoad %66 
                                        f32_3 %68 = OpVectorShuffle %67 %67 0 1 2 
                                        f32_4 %69 = OpLoad %12 
                                        f32_3 %70 = OpVectorShuffle %69 %69 3 3 3 
                                        f32_3 %71 = OpFMul %68 %70 
                                        f32_4 %72 = OpLoad %36 
                                        f32_3 %73 = OpVectorShuffle %72 %72 0 1 2 
                                        f32_3 %74 = OpFAdd %71 %73 
                                        f32_4 %75 = OpLoad %36 
                                        f32_4 %76 = OpVectorShuffle %75 %74 4 5 6 3 
                                                      OpStore %36 %76 
                                        f32_4 %77 = OpLoad %36 
                                        f32_3 %78 = OpVectorShuffle %77 %77 0 1 2 
                                        f32_3 %79 = OpFNegate %78 
                               Uniform f32_3* %81 = OpAccessChain %24 %45 
                                        f32_3 %82 = OpLoad %81 
                                        f32_3 %83 = OpFAdd %79 %82 
                                        f32_4 %84 = OpLoad %36 
                                        f32_4 %85 = OpVectorShuffle %84 %83 4 5 6 3 
                                                      OpStore %36 %85 
                                        f32_4 %87 = OpLoad %60 
                                        f32_4 %88 = OpVectorShuffle %87 %87 1 1 1 1 
                               Uniform f32_4* %90 = OpAccessChain %24 %89 %40 
                                        f32_4 %91 = OpLoad %90 
                                        f32_4 %92 = OpFMul %88 %91 
                                                      OpStore %86 %92 
                               Uniform f32_4* %93 = OpAccessChain %24 %89 %45 
                                        f32_4 %94 = OpLoad %93 
                                        f32_4 %95 = OpLoad %60 
                                        f32_4 %96 = OpVectorShuffle %95 %95 0 0 0 0 
                                        f32_4 %97 = OpFMul %94 %96 
                                        f32_4 %98 = OpLoad %86 
                                        f32_4 %99 = OpFAdd %97 %98 
                                                      OpStore %86 %99 
                              Uniform f32_4* %100 = OpAccessChain %24 %89 %39 
                                       f32_4 %101 = OpLoad %100 
                                       f32_4 %102 = OpLoad %60 
                                       f32_4 %103 = OpVectorShuffle %102 %102 2 2 2 2 
                                       f32_4 %104 = OpFMul %101 %103 
                                       f32_4 %105 = OpLoad %86 
                                       f32_4 %106 = OpFAdd %104 %105 
                                                      OpStore %86 %106 
                              Uniform f32_4* %107 = OpAccessChain %24 %89 %62 
                                       f32_4 %108 = OpLoad %107 
                                       f32_4 %109 = OpLoad %60 
                                       f32_4 %110 = OpVectorShuffle %109 %109 3 3 3 3 
                                       f32_4 %111 = OpFMul %108 %110 
                                       f32_4 %112 = OpLoad %86 
                                       f32_4 %113 = OpFAdd %111 %112 
                                                      OpStore %60 %113 
                                       f32_4 %119 = OpLoad %60 
                               Output f32_4* %121 = OpAccessChain %118 %45 
                                                      OpStore %121 %119 
                                Uniform f32* %125 = OpAccessChain %24 %123 %124 
                                         f32 %126 = OpLoad %125 
                                 Output f32* %128 = OpAccessChain %122 %124 
                                                      OpStore %128 %126 
                                       f32_4 %130 = OpLoad %129 
                                       f32_3 %131 = OpVectorShuffle %130 %130 0 1 2 
                                       f32_4 %132 = OpLoad %86 
                                       f32_4 %133 = OpVectorShuffle %132 %131 4 5 6 3 
                                                      OpStore %86 %133 
                                Private f32* %136 = OpAccessChain %86 %124 
                                                      OpStore %136 %134 
                                       f32_4 %138 = OpLoad %86 
                              Uniform f32_4* %139 = OpAccessChain %24 %123 
                                       f32_4 %140 = OpLoad %139 
                                       f32_4 %141 = OpFMul %138 %140 
                                                      OpStore %137 %141 
                                       f32_4 %142 = OpLoad %137 
                                       f32_3 %143 = OpVectorShuffle %142 %142 3 3 3 
                                       f32_4 %144 = OpLoad %137 
                                       f32_3 %145 = OpVectorShuffle %144 %144 0 1 2 
                                       f32_3 %146 = OpFMul %143 %145 
                                       f32_4 %147 = OpLoad %60 
                                       f32_4 %148 = OpVectorShuffle %147 %146 4 5 6 3 
                                                      OpStore %60 %148 
                                       f32_4 %149 = OpLoad %60 
                                       f32_3 %150 = OpVectorShuffle %149 %149 0 1 2 
                                       f32_4 %151 = OpLoad %122 
                                       f32_4 %152 = OpVectorShuffle %151 %150 4 5 6 3 
                                                      OpStore %122 %152 
                                       f32_4 %154 = OpLoad %60 
                                       f32_3 %155 = OpVectorShuffle %154 %154 0 1 2 
                                       f32_3 %156 = OpFNegate %155 
                                       f32_4 %157 = OpLoad %153 
                                       f32_4 %158 = OpVectorShuffle %157 %156 4 5 6 3 
                                                      OpStore %153 %158 
                                Private f32* %159 = OpAccessChain %137 %124 
                                         f32 %160 = OpLoad %159 
                                         f32 %161 = OpFNegate %160 
                                Private f32* %162 = OpAccessChain %153 %124 
                                                      OpStore %162 %161 
                              Uniform f32_4* %165 = OpAccessChain %24 %164 
                                       f32_4 %166 = OpLoad %165 
                                       f32_3 %167 = OpVectorShuffle %166 %166 3 3 3 
                              Uniform f32_4* %168 = OpAccessChain %24 %164 
                                       f32_4 %169 = OpLoad %168 
                                       f32_3 %170 = OpVectorShuffle %169 %169 0 1 2 
                                       f32_3 %171 = OpFMul %167 %170 
                                       f32_4 %172 = OpLoad %163 
                                       f32_4 %173 = OpVectorShuffle %172 %171 4 5 6 3 
                                                      OpStore %163 %173 
                                Uniform f32* %174 = OpAccessChain %24 %164 %124 
                                         f32 %175 = OpLoad %174 
                                Private f32* %176 = OpAccessChain %163 %124 
                                                      OpStore %176 %175 
                                       f32_4 %177 = OpLoad %153 
                                       f32_4 %178 = OpLoad %163 
                                       f32_4 %179 = OpFAdd %177 %178 
                                                      OpStore %153 %179 
                                       f32_4 %181 = OpLoad %36 
                                       f32_3 %182 = OpVectorShuffle %181 %181 0 1 2 
                                       f32_4 %183 = OpLoad %36 
                                       f32_3 %184 = OpVectorShuffle %183 %183 0 1 2 
                                         f32 %185 = OpDot %182 %184 
                                                      OpStore %180 %185 
                                         f32 %186 = OpLoad %180 
                                         f32 %187 = OpExtInst %1 32 %186 
                                                      OpStore %180 %187 
                                         f32 %188 = OpLoad %180 
                                       f32_3 %189 = OpCompositeConstruct %188 %188 %188 
                                       f32_4 %190 = OpLoad %36 
                                       f32_3 %191 = OpVectorShuffle %190 %190 0 1 2 
                                       f32_3 %192 = OpFMul %189 %191 
                                       f32_4 %193 = OpLoad %36 
                                       f32_4 %194 = OpVectorShuffle %193 %192 4 5 6 3 
                                                      OpStore %36 %194 
                                       f32_3 %197 = OpLoad %196 
                              Uniform f32_4* %198 = OpAccessChain %24 %62 %45 
                                       f32_4 %199 = OpLoad %198 
                                       f32_3 %200 = OpVectorShuffle %199 %199 0 1 2 
                                         f32 %201 = OpDot %197 %200 
                                Private f32* %203 = OpAccessChain %60 %202 
                                                      OpStore %203 %201 
                                       f32_3 %204 = OpLoad %196 
                              Uniform f32_4* %205 = OpAccessChain %24 %62 %40 
                                       f32_4 %206 = OpLoad %205 
                                       f32_3 %207 = OpVectorShuffle %206 %206 0 1 2 
                                         f32 %208 = OpDot %204 %207 
                                Private f32* %209 = OpAccessChain %60 %114 
                                                      OpStore %209 %208 
                                       f32_3 %210 = OpLoad %196 
                              Uniform f32_4* %211 = OpAccessChain %24 %62 %39 
                                       f32_4 %212 = OpLoad %211 
                                       f32_3 %213 = OpVectorShuffle %212 %212 0 1 2 
                                         f32 %214 = OpDot %210 %213 
                                Private f32* %216 = OpAccessChain %60 %215 
                                                      OpStore %216 %214 
                                       f32_4 %217 = OpLoad %60 
                                       f32_3 %218 = OpVectorShuffle %217 %217 0 1 2 
                                       f32_4 %219 = OpLoad %60 
                                       f32_3 %220 = OpVectorShuffle %219 %219 0 1 2 
                                         f32 %221 = OpDot %218 %220 
                                                      OpStore %180 %221 
                                         f32 %222 = OpLoad %180 
                                         f32 %223 = OpExtInst %1 32 %222 
                                                      OpStore %180 %223 
                                         f32 %224 = OpLoad %180 
                                       f32_3 %225 = OpCompositeConstruct %224 %224 %224 
                                       f32_4 %226 = OpLoad %60 
                                       f32_3 %227 = OpVectorShuffle %226 %226 0 1 2 
                                       f32_3 %228 = OpFMul %225 %227 
                                       f32_4 %229 = OpLoad %60 
                                       f32_4 %230 = OpVectorShuffle %229 %228 4 5 6 3 
                                                      OpStore %60 %230 
                                       f32_4 %231 = OpLoad %60 
                                       f32_3 %232 = OpVectorShuffle %231 %231 0 1 2 
                                       f32_4 %233 = OpLoad %36 
                                       f32_3 %234 = OpVectorShuffle %233 %233 0 1 2 
                                         f32 %235 = OpDot %232 %234 
                                                      OpStore %180 %235 
                              Uniform f32_4* %236 = OpAccessChain %24 %40 
                                       f32_4 %237 = OpLoad %236 
                                       f32_2 %238 = OpVectorShuffle %237 %237 1 1 
                              Uniform f32_4* %240 = OpAccessChain %24 %239 %40 
                                       f32_4 %241 = OpLoad %240 
                                       f32_2 %242 = OpVectorShuffle %241 %241 0 1 
                                       f32_2 %243 = OpFMul %238 %242 
                                       f32_4 %244 = OpLoad %36 
                                       f32_4 %245 = OpVectorShuffle %244 %243 4 5 2 3 
                                                      OpStore %36 %245 
                              Uniform f32_4* %246 = OpAccessChain %24 %239 %45 
                                       f32_4 %247 = OpLoad %246 
                                       f32_2 %248 = OpVectorShuffle %247 %247 0 1 
                              Uniform f32_4* %249 = OpAccessChain %24 %40 
                                       f32_4 %250 = OpLoad %249 
                                       f32_2 %251 = OpVectorShuffle %250 %250 0 0 
                                       f32_2 %252 = OpFMul %248 %251 
                                       f32_4 %253 = OpLoad %36 
                                       f32_2 %254 = OpVectorShuffle %253 %253 0 1 
                                       f32_2 %255 = OpFAdd %252 %254 
                                       f32_4 %256 = OpLoad %36 
                                       f32_4 %257 = OpVectorShuffle %256 %255 4 5 2 3 
                                                      OpStore %36 %257 
                                       f32_4 %258 = OpLoad %36 
                                       f32_2 %259 = OpVectorShuffle %258 %258 0 1 
                                       f32_2 %260 = OpExtInst %1 4 %259 
                                Uniform f32* %262 = OpAccessChain %24 %261 
                                         f32 %263 = OpLoad %262 
                                Uniform f32* %265 = OpAccessChain %24 %264 
                                         f32 %266 = OpLoad %265 
                                       f32_2 %267 = OpCompositeConstruct %263 %266 
                                       f32_2 %268 = OpFMul %260 %267 
                                       f32_4 %269 = OpLoad %36 
                                       f32_4 %270 = OpVectorShuffle %269 %268 4 5 2 3 
                                                      OpStore %36 %270 
                                       f32_4 %271 = OpLoad %60 
                                       f32_2 %272 = OpVectorShuffle %271 %271 3 3 
                                       f32_4 %273 = OpLoad %36 
                                       f32_2 %274 = OpVectorShuffle %273 %273 0 1 
                                       f32_2 %275 = OpFDiv %272 %274 
                                       f32_4 %276 = OpLoad %36 
                                       f32_4 %277 = OpVectorShuffle %276 %275 4 5 2 3 
                                                      OpStore %36 %277 
                                       f32_4 %279 = OpLoad %36 
                                       f32_2 %280 = OpVectorShuffle %279 %279 0 1 
                                       f32_4 %281 = OpLoad %36 
                                       f32_2 %282 = OpVectorShuffle %281 %281 0 1 
                                         f32 %283 = OpDot %280 %282 
                                                      OpStore %278 %283 
                                Uniform f32* %285 = OpAccessChain %24 %284 
                                         f32 %286 = OpLoad %285 
                                Uniform f32* %288 = OpAccessChain %24 %287 
                                         f32 %289 = OpLoad %288 
                                       f32_2 %290 = OpCompositeConstruct %286 %289 
                                       f32_2 %293 = OpFMul %290 %292 
                                       f32_4 %294 = OpLoad %36 
                                       f32_2 %295 = OpVectorShuffle %294 %294 0 1 
                                       f32_2 %296 = OpFAdd %293 %295 
                                       f32_4 %297 = OpLoad %36 
                                       f32_4 %298 = OpVectorShuffle %297 %296 4 5 2 3 
                                                      OpStore %36 %298 
                                       f32_4 %300 = OpLoad %36 
                                       f32_2 %301 = OpVectorShuffle %300 %300 0 1 
                                       f32_2 %302 = OpFDiv %292 %301 
                                       f32_4 %303 = OpLoad vs_TEXCOORD2 
                                       f32_4 %304 = OpVectorShuffle %303 %302 0 1 4 5 
                                                      OpStore vs_TEXCOORD2 %304 
                                         f32 %305 = OpLoad %278 
                                         f32 %306 = OpExtInst %1 32 %305 
                                                      OpStore %278 %306 
                                  Input f32* %310 = OpAccessChain %308 %114 
                                         f32 %311 = OpLoad %310 
                                         f32 %312 = OpExtInst %1 4 %311 
                                Uniform f32* %314 = OpAccessChain %24 %313 
                                         f32 %315 = OpLoad %314 
                                         f32 %316 = OpFMul %312 %315 
                                Private f32* %317 = OpAccessChain %36 %202 
                                                      OpStore %317 %316 
                                Uniform f32* %320 = OpAccessChain %24 %319 
                                         f32 %321 = OpLoad %320 
                                         f32 %322 = OpFAdd %321 %134 
                                Private f32* %323 = OpAccessChain %318 %202 
                                                      OpStore %323 %322 
                                Private f32* %324 = OpAccessChain %318 %202 
                                         f32 %325 = OpLoad %324 
                                Private f32* %326 = OpAccessChain %36 %202 
                                         f32 %327 = OpLoad %326 
                                         f32 %328 = OpFMul %325 %327 
                                Private f32* %329 = OpAccessChain %36 %202 
                                                      OpStore %329 %328 
                                         f32 %330 = OpLoad %278 
                                Private f32* %331 = OpAccessChain %36 %202 
                                         f32 %332 = OpLoad %331 
                                         f32 %333 = OpFMul %330 %332 
                                Private f32* %334 = OpAccessChain %318 %202 
                                                      OpStore %334 %333 
                                Uniform f32* %337 = OpAccessChain %24 %336 
                                         f32 %338 = OpLoad %337 
                                         f32 %339 = OpFNegate %338 
                                         f32 %340 = OpFAdd %339 %134 
                                                      OpStore %335 %340 
                                         f32 %341 = OpLoad %335 
                                Private f32* %342 = OpAccessChain %318 %202 
                                         f32 %343 = OpLoad %342 
                                         f32 %344 = OpExtInst %1 4 %343 
                                         f32 %345 = OpFMul %341 %344 
                                                      OpStore %335 %345 
                                         f32 %346 = OpLoad %278 
                                Private f32* %347 = OpAccessChain %36 %202 
                                         f32 %348 = OpLoad %347 
                                         f32 %349 = OpFMul %346 %348 
                                         f32 %350 = OpLoad %335 
                                         f32 %351 = OpFNegate %350 
                                         f32 %352 = OpFAdd %349 %351 
                                                      OpStore %278 %352 
                                         f32 %353 = OpLoad %180 
                                         f32 %354 = OpExtInst %1 4 %353 
                                         f32 %355 = OpLoad %278 
                                         f32 %356 = OpFMul %354 %355 
                                         f32 %357 = OpLoad %335 
                                         f32 %358 = OpFAdd %356 %357 
                                                      OpStore %180 %358 
                                Uniform f32* %362 = OpAccessChain %24 %239 %62 %124 
                                         f32 %363 = OpLoad %362 
                                        bool %365 = OpFOrdEqual %363 %364 
                                                      OpStore %361 %365 
                                        bool %366 = OpLoad %361 
                                                      OpSelectionMerge %370 None 
                                                      OpBranchConditional %366 %369 %372 
                                             %369 = OpLabel 
                                         f32 %371 = OpLoad %180 
                                                      OpStore %368 %371 
                                                      OpBranch %370 
                                             %372 = OpLabel 
                                Private f32* %373 = OpAccessChain %318 %202 
                                         f32 %374 = OpLoad %373 
                                                      OpStore %368 %374 
                                                      OpBranch %370 
                                             %370 = OpLabel 
                                         f32 %375 = OpLoad %368 
                                                      OpStore %180 %375 
                                Uniform f32* %377 = OpAccessChain %24 %376 
                                         f32 %378 = OpLoad %377 
                                Uniform f32* %380 = OpAccessChain %24 %379 
                                         f32 %381 = OpLoad %380 
                                         f32 %382 = OpFMul %378 %381 
                                                      OpStore %278 %382 
                                         f32 %383 = OpLoad %278 
                                         f32 %384 = OpLoad %180 
                                         f32 %385 = OpFMul %383 %384 
                                         f32 %386 = OpFAdd %385 %134 
                                                      OpStore %278 %386 
                                         f32 %387 = OpLoad %180 
                                         f32 %388 = OpLoad %278 
                                         f32 %389 = OpFDiv %387 %388 
                                Private f32* %390 = OpAccessChain %36 %202 
                                                      OpStore %390 %389 
                                Uniform f32* %392 = OpAccessChain %24 %391 
                                         f32 %393 = OpLoad %392 
                                Uniform f32* %394 = OpAccessChain %24 %379 
                                         f32 %395 = OpLoad %394 
                                         f32 %396 = OpFMul %393 %395 
                                                      OpStore %278 %396 
                                Private f32* %397 = OpAccessChain %36 %202 
                                         f32 %398 = OpLoad %397 
                                         f32 %399 = OpLoad %278 
                                         f32 %400 = OpFMul %398 %399 
                                                      OpStore %278 %400 
                                         f32 %401 = OpLoad %278 
                                         f32 %402 = OpExtInst %1 37 %401 %134 
                                Private f32* %403 = OpAccessChain %318 %202 
                                                      OpStore %403 %402 
                                Private f32* %404 = OpAccessChain %318 %202 
                                         f32 %405 = OpLoad %404 
                                         f32 %406 = OpExtInst %1 31 %405 
                                Private f32* %407 = OpAccessChain %318 %202 
                                                      OpStore %407 %406 
                                       f32_4 %408 = OpLoad %153 
                                       f32_2 %409 = OpLoad %318 
                                       f32_4 %410 = OpVectorShuffle %409 %409 0 0 0 0 
                                       f32_4 %411 = OpFMul %408 %410 
                                                      OpStore %60 %411 
                                       f32_4 %413 = OpLoad %137 
                                       f32_3 %414 = OpVectorShuffle %413 %413 0 1 2 
                                       f32_4 %415 = OpLoad %137 
                                       f32_3 %416 = OpVectorShuffle %415 %415 3 3 3 
                                       f32_3 %417 = OpFMul %414 %416 
                                       f32_4 %418 = OpLoad %60 
                                       f32_3 %419 = OpVectorShuffle %418 %418 0 1 2 
                                       f32_3 %420 = OpFAdd %417 %419 
                                       f32_4 %421 = OpLoad %412 
                                       f32_4 %422 = OpVectorShuffle %421 %420 4 5 6 3 
                                                      OpStore %412 %422 
                                Private f32* %423 = OpAccessChain %86 %124 
                                         f32 %424 = OpLoad %423 
                                Uniform f32* %425 = OpAccessChain %24 %123 %124 
                                         f32 %426 = OpLoad %425 
                                         f32 %427 = OpFMul %424 %426 
                                Private f32* %428 = OpAccessChain %60 %124 
                                         f32 %429 = OpLoad %428 
                                         f32 %430 = OpFAdd %427 %429 
                                 Output f32* %431 = OpAccessChain %412 %124 
                                                      OpStore %431 %430 
                              Uniform f32_4* %433 = OpAccessChain %24 %432 
                                       f32_4 %434 = OpLoad %433 
                                       f32_4 %437 = OpExtInst %1 40 %434 %436 
                                                      OpStore %60 %437 
                                       f32_4 %438 = OpLoad %60 
                                       f32_4 %441 = OpExtInst %1 37 %438 %440 
                                                      OpStore %60 %441 
                                       f32_2 %442 = OpLoad %9 
                                       f32_4 %443 = OpLoad %60 
                                       f32_2 %444 = OpVectorShuffle %443 %443 0 1 
                                       f32_2 %445 = OpFNegate %444 
                                       f32_2 %446 = OpFAdd %442 %445 
                                                      OpStore %318 %446 
                                       f32_2 %447 = OpLoad %9 
                                       f32_2 %450 = OpFMul %447 %449 
                                       f32_4 %451 = OpLoad %60 
                                       f32_2 %452 = OpVectorShuffle %451 %451 0 1 
                                       f32_2 %453 = OpFNegate %452 
                                       f32_2 %454 = OpFAdd %450 %453 
                                                      OpStore %9 %454 
                                       f32_4 %455 = OpLoad %60 
                                       f32_2 %456 = OpVectorShuffle %455 %455 2 3 
                                       f32_2 %457 = OpFNegate %456 
                                       f32_2 %458 = OpLoad %9 
                                       f32_2 %459 = OpFAdd %457 %458 
                                       f32_4 %460 = OpLoad vs_TEXCOORD2 
                                       f32_4 %461 = OpVectorShuffle %460 %459 4 5 2 3 
                                                      OpStore vs_TEXCOORD2 %461 
                                       f32_4 %462 = OpLoad %60 
                                       f32_2 %463 = OpVectorShuffle %462 %462 0 1 
                                       f32_2 %464 = OpFNegate %463 
                                       f32_4 %465 = OpLoad %60 
                                       f32_2 %466 = OpVectorShuffle %465 %465 2 3 
                                       f32_2 %467 = OpFAdd %464 %466 
                                                      OpStore %9 %467 
                                       f32_2 %469 = OpLoad %318 
                                       f32_2 %470 = OpLoad %9 
                                       f32_2 %471 = OpFDiv %469 %470 
                                       f32_4 %472 = OpLoad vs_TEXCOORD0 
                                       f32_4 %473 = OpVectorShuffle %472 %471 0 1 4 5 
                                                      OpStore vs_TEXCOORD0 %473 
                                       f32_2 %475 = OpLoad %474 
                                       f32_4 %476 = OpLoad vs_TEXCOORD0 
                                       f32_4 %477 = OpVectorShuffle %476 %475 4 5 2 3 
                                                      OpStore vs_TEXCOORD0 %477 
                                  Input f32* %479 = OpAccessChain %308 %114 
                                         f32 %480 = OpLoad %479 
                                        bool %481 = OpFOrdGreaterThanEqual %364 %480 
                                                      OpStore %478 %481 
                                        bool %482 = OpLoad %478 
                                         f32 %483 = OpSelect %482 %134 %364 
                                Private f32* %484 = OpAccessChain %9 %202 
                                                      OpStore %484 %483 
                                Uniform f32* %488 = OpAccessChain %24 %487 
                                         f32 %489 = OpLoad %488 
                                         f32 %490 = OpFNegate %489 
                                Uniform f32* %492 = OpAccessChain %24 %491 
                                         f32 %493 = OpLoad %492 
                                         f32 %494 = OpFAdd %490 %493 
                                Private f32* %495 = OpAccessChain %486 %202 
                                                      OpStore %495 %494 
                                Private f32* %496 = OpAccessChain %9 %202 
                                         f32 %497 = OpLoad %496 
                                Private f32* %498 = OpAccessChain %486 %202 
                                         f32 %499 = OpLoad %498 
                                         f32 %500 = OpFMul %497 %499 
                                Uniform f32* %501 = OpAccessChain %24 %487 
                                         f32 %502 = OpLoad %501 
                                         f32 %503 = OpFAdd %500 %502 
                                Private f32* %504 = OpAccessChain %9 %202 
                                                      OpStore %504 %503 
                                Private f32* %505 = OpAccessChain %9 %202 
                                         f32 %506 = OpLoad %505 
                                         f32 %507 = OpFMul %506 %291 
                                Uniform f32* %509 = OpAccessChain %24 %508 
                                         f32 %510 = OpLoad %509 
                                         f32 %511 = OpFAdd %507 %510 
                                Private f32* %512 = OpAccessChain %9 %202 
                                                      OpStore %512 %511 
                                Private f32* %513 = OpAccessChain %9 %202 
                                         f32 %514 = OpLoad %513 
                                Uniform f32* %515 = OpAccessChain %24 %379 
                                         f32 %516 = OpLoad %515 
                                         f32 %517 = OpFMul %514 %516 
                                Private f32* %518 = OpAccessChain %9 %202 
                                                      OpStore %518 %517 
                                Private f32* %519 = OpAccessChain %9 %202 
                                         f32 %520 = OpLoad %519 
                                         f32 %521 = OpFNegate %520 
                                         f32 %523 = OpFMul %521 %522 
                                         f32 %524 = OpFAdd %523 %522 
                                Private f32* %525 = OpAccessChain %9 %202 
                                                      OpStore %525 %524 
                                Private f32* %526 = OpAccessChain %9 %202 
                                         f32 %527 = OpLoad %526 
                                Private f32* %528 = OpAccessChain %36 %202 
                                         f32 %529 = OpLoad %528 
                                         f32 %530 = OpFMul %527 %529 
                                         f32 %532 = OpFAdd %530 %531 
                                Private f32* %533 = OpAccessChain %36 %124 
                                                      OpStore %533 %532 
                                       f32_4 %535 = OpLoad %36 
                                       f32_2 %536 = OpVectorShuffle %535 %535 0 3 
                                       f32_4 %537 = OpLoad vs_TEXCOORD1 
                                       f32_4 %538 = OpVectorShuffle %537 %536 4 1 2 5 
                                                      OpStore vs_TEXCOORD1 %538 
                                         f32 %539 = OpLoad %278 
                                         f32 %540 = OpFNegate %539 
                                         f32 %541 = OpFMul %540 %522 
                                Private f32* %542 = OpAccessChain %36 %124 
                                         f32 %543 = OpLoad %542 
                                         f32 %544 = OpFAdd %541 %543 
                                 Output f32* %545 = OpAccessChain vs_TEXCOORD1 %114 
                                                      OpStore %545 %544 
                                         f32 %546 = OpLoad %278 
                                         f32 %547 = OpFMul %546 %522 
                                Private f32* %548 = OpAccessChain %36 %124 
                                         f32 %549 = OpLoad %548 
                                         f32 %550 = OpFAdd %547 %549 
                                 Output f32* %551 = OpAccessChain vs_TEXCOORD1 %215 
                                                      OpStore %551 %550 
                                  Input f32* %553 = OpAccessChain %129 %124 
                                         f32 %554 = OpLoad %553 
                                 Output f32* %555 = OpAccessChain vs_TEXCOORD3 %215 
                                                      OpStore %555 %554 
                                 Output f32* %556 = OpAccessChain vs_TEXCOORD3 %124 
                                                      OpStore %556 %364 
                                Uniform f32* %558 = OpAccessChain %24 %557 
                                         f32 %559 = OpLoad %558 
                                Uniform f32* %561 = OpAccessChain %24 %560 
                                         f32 %562 = OpLoad %561 
                                Uniform f32* %564 = OpAccessChain %24 %563 
                                         f32 %565 = OpLoad %564 
                                Uniform f32* %567 = OpAccessChain %24 %566 
                                         f32 %568 = OpLoad %567 
                                       f32_4 %569 = OpCompositeConstruct %559 %562 %565 %568 
                                Uniform f32* %571 = OpAccessChain %24 %570 
                                         f32 %572 = OpLoad %571 
                                Uniform f32* %573 = OpAccessChain %24 %570 
                                         f32 %574 = OpLoad %573 
                                Uniform f32* %575 = OpAccessChain %24 %570 
                                         f32 %576 = OpLoad %575 
                                Uniform f32* %577 = OpAccessChain %24 %570 
                                         f32 %578 = OpLoad %577 
                                       f32_4 %579 = OpCompositeConstruct %572 %574 %576 %578 
                                         f32 %580 = OpCompositeExtract %579 0 
                                         f32 %581 = OpCompositeExtract %579 1 
                                         f32 %582 = OpCompositeExtract %579 2 
                                         f32 %583 = OpCompositeExtract %579 3 
                                       f32_4 %584 = OpCompositeConstruct %580 %581 %582 %583 
                                       f32_4 %585 = OpFMul %569 %584 
                                                      OpStore %36 %585 
                                       f32_4 %586 = OpLoad %36 
                                       f32_2 %587 = OpVectorShuffle %586 %586 2 3 
                                       f32_2 %588 = OpFNegate %587 
                                Uniform f32* %589 = OpAccessChain %24 %313 
                                         f32 %590 = OpLoad %589 
                                       f32_2 %591 = OpCompositeConstruct %590 %590 
                                       f32_2 %592 = OpFMul %588 %591 
                                       f32_3 %593 = OpLoad %486 
                                       f32_3 %594 = OpVectorShuffle %593 %592 3 1 4 
                                                      OpStore %486 %594 
                                       f32_3 %595 = OpLoad %486 
                                       f32_2 %596 = OpVectorShuffle %595 %595 0 2 
                                Uniform f32* %598 = OpAccessChain %24 %597 
                                         f32 %599 = OpLoad %598 
                                Uniform f32* %601 = OpAccessChain %24 %600 
                                         f32 %602 = OpLoad %601 
                                       f32_2 %603 = OpCompositeConstruct %599 %602 
                                       f32_2 %604 = OpFDiv %596 %603 
                                       f32_3 %605 = OpLoad %486 
                                       f32_3 %606 = OpVectorShuffle %605 %604 3 1 4 
                                                      OpStore %486 %606 
                                       f32_3 %607 = OpLoad %486 
                                       f32_2 %608 = OpVectorShuffle %607 %607 0 2 
                                       f32_2 %609 = OpLoad %474 
                                       f32_2 %610 = OpFAdd %608 %609 
                                       f32_4 %611 = OpLoad vs_TEXCOORD3 
                                       f32_4 %612 = OpVectorShuffle %611 %610 4 5 2 3 
                                                      OpStore vs_TEXCOORD3 %612 
                                Private f32* %613 = OpAccessChain %36 %202 
                                         f32 %614 = OpLoad %613 
                                         f32 %615 = OpLoad %180 
                                         f32 %616 = OpFMul %614 %615 
                                         f32 %617 = OpFAdd %616 %134 
                                Private f32* %618 = OpAccessChain %486 %202 
                                                      OpStore %618 %617 
                                         f32 %619 = OpLoad %180 
                                Private f32* %620 = OpAccessChain %486 %202 
                                         f32 %621 = OpLoad %620 
                                         f32 %622 = OpFDiv %619 %621 
                                Private f32* %623 = OpAccessChain %486 %202 
                                                      OpStore %623 %622 
                                Private f32* %624 = OpAccessChain %486 %202 
                                         f32 %625 = OpLoad %624 
                                Private f32* %626 = OpAccessChain %36 %114 
                                         f32 %627 = OpLoad %626 
                                         f32 %628 = OpFMul %625 %627 
                                                      OpStore %180 %628 
                                Private f32* %629 = OpAccessChain %9 %202 
                                         f32 %630 = OpLoad %629 
                                Private f32* %631 = OpAccessChain %486 %202 
                                         f32 %632 = OpLoad %631 
                                         f32 %633 = OpFMul %630 %632 
                                         f32 %634 = OpFAdd %633 %531 
                                Private f32* %635 = OpAccessChain %9 %202 
                                                      OpStore %635 %634 
                                Private f32* %638 = OpAccessChain %486 %202 
                                         f32 %639 = OpLoad %638 
                                 Output f32* %640 = OpAccessChain vs_TEXCOORD4 %202 
                                                      OpStore %640 %639 
                                         f32 %641 = OpLoad %180 
                                         f32 %642 = OpFNegate %641 
                                         f32 %643 = OpFMul %642 %522 
                                Private f32* %644 = OpAccessChain %9 %202 
                                         f32 %645 = OpLoad %644 
                                         f32 %646 = OpFAdd %643 %645 
                                 Output f32* %647 = OpAccessChain vs_TEXCOORD4 %114 
                                                      OpStore %647 %646 
                                 Output f32* %648 = OpAccessChain %118 %45 %114 
                                         f32 %649 = OpLoad %648 
                                         f32 %650 = OpFNegate %649 
                                 Output f32* %651 = OpAccessChain %118 %45 %114 
                                                      OpStore %651 %650 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 185
; Schema: 0
                                             OpCapability Shader 
                                      %1 = OpExtInstImport "GLSL.std.450" 
                                             OpMemoryModel Logical GLSL450 
                                             OpEntryPoint Fragment %4 "main" %21 %35 %77 %79 %88 %96 %146 %179 
                                             OpExecutionMode %4 OriginUpperLeft 
                                             OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                             OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                             OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                             OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                             OpDecorate %12 DescriptorSet 12 
                                             OpDecorate %12 Binding 12 
                                             OpDecorate %16 DescriptorSet 16 
                                             OpDecorate %16 Binding 16 
                                             OpDecorate vs_TEXCOORD3 Location 21 
                                             OpDecorate vs_TEXCOORD4 Location 35 
                                             OpMemberDecorate %53 0 Offset 53 
                                             OpMemberDecorate %53 1 Offset 53 
                                             OpDecorate %53 Block 
                                             OpDecorate %55 DescriptorSet 55 
                                             OpDecorate %55 Binding 55 
                                             OpDecorate %77 Location 77 
                                             OpDecorate %79 Location 79 
                                             OpDecorate vs_TEXCOORD0 Location 88 
                                             OpDecorate vs_TEXCOORD1 Location 96 
                                             OpDecorate vs_TEXCOORD2 Location 146 
                                             OpDecorate %179 Location 179 
                                      %2 = OpTypeVoid 
                                      %3 = OpTypeFunction %2 
                                      %6 = OpTypeFloat 32 
                                      %7 = OpTypeVector %6 4 
                                      %8 = OpTypePointer Private %7 
                       Private f32_4* %9 = OpVariable Private 
                                     %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                     %11 = OpTypePointer UniformConstant %10 
UniformConstant read_only Texture2D* %12 = OpVariable UniformConstant 
                                     %14 = OpTypeSampler 
                                     %15 = OpTypePointer UniformConstant %14 
            UniformConstant sampler* %16 = OpVariable UniformConstant 
                                     %18 = OpTypeSampledImage %10 
                                     %20 = OpTypePointer Input %7 
               Input f32_4* vs_TEXCOORD3 = OpVariable Input 
                                     %22 = OpTypeVector %6 2 
                                     %26 = OpTypeInt 32 0 
                                 u32 %27 = OpConstant 3 
                                 u32 %29 = OpConstant 0 
                                     %30 = OpTypePointer Private %6 
                                     %34 = OpTypePointer Input %22 
               Input f32_2* vs_TEXCOORD4 = OpVariable Input 
                                     %36 = OpTypePointer Input %6 
                                 u32 %40 = OpConstant 1 
                                 f32 %48 = OpConstant 3.674022E-40 
                                 f32 %49 = OpConstant 3.674022E-40 
                      Private f32_4* %52 = OpVariable Private 
                                     %53 = OpTypeStruct %7 %7 
                                     %54 = OpTypePointer Uniform %53 
     Uniform struct {f32_4; f32_4;}* %55 = OpVariable Uniform 
                                     %56 = OpTypeInt 32 1 
                                 i32 %57 = OpConstant 0 
                                     %58 = OpTypeVector %6 3 
                                     %59 = OpTypePointer Uniform %7 
                                     %69 = OpTypePointer Uniform %6 
                        Input f32_4* %77 = OpVariable Input 
                        Input f32_4* %79 = OpVariable Input 
                                     %83 = OpTypePointer Private %22 
                      Private f32_2* %84 = OpVariable Private 
               Input f32_4* vs_TEXCOORD0 = OpVariable Input 
               Input f32_4* vs_TEXCOORD1 = OpVariable Input 
                     Private f32_4* %114 = OpVariable Private 
                                i32 %133 = OpConstant 1 
               Input f32_4* vs_TEXCOORD2 = OpVariable Input 
                                    %178 = OpTypePointer Output %7 
                      Output f32_4* %179 = OpVariable Output 
                                 void %4 = OpFunction None %3 
                                      %5 = OpLabel 
                 read_only Texture2D %13 = OpLoad %12 
                             sampler %17 = OpLoad %16 
          read_only Texture2DSampled %19 = OpSampledImage %13 %17 
                               f32_4 %23 = OpLoad vs_TEXCOORD3 
                               f32_2 %24 = OpVectorShuffle %23 %23 0 1 
                               f32_4 %25 = OpImageSampleImplicitLod %19 %24 
                                 f32 %28 = OpCompositeExtract %25 3 
                        Private f32* %31 = OpAccessChain %9 %29 
                                             OpStore %31 %28 
                        Private f32* %32 = OpAccessChain %9 %29 
                                 f32 %33 = OpLoad %32 
                          Input f32* %37 = OpAccessChain vs_TEXCOORD4 %29 
                                 f32 %38 = OpLoad %37 
                                 f32 %39 = OpFMul %33 %38 
                          Input f32* %41 = OpAccessChain vs_TEXCOORD4 %40 
                                 f32 %42 = OpLoad %41 
                                 f32 %43 = OpFNegate %42 
                                 f32 %44 = OpFAdd %39 %43 
                        Private f32* %45 = OpAccessChain %9 %29 
                                             OpStore %45 %44 
                        Private f32* %46 = OpAccessChain %9 %29 
                                 f32 %47 = OpLoad %46 
                                 f32 %50 = OpExtInst %1 43 %47 %48 %49 
                        Private f32* %51 = OpAccessChain %9 %29 
                                             OpStore %51 %50 
                      Uniform f32_4* %60 = OpAccessChain %55 %57 
                               f32_4 %61 = OpLoad %60 
                               f32_3 %62 = OpVectorShuffle %61 %61 3 3 3 
                      Uniform f32_4* %63 = OpAccessChain %55 %57 
                               f32_4 %64 = OpLoad %63 
                               f32_3 %65 = OpVectorShuffle %64 %64 0 1 2 
                               f32_3 %66 = OpFMul %62 %65 
                               f32_4 %67 = OpLoad %52 
                               f32_4 %68 = OpVectorShuffle %67 %66 4 5 6 3 
                                             OpStore %52 %68 
                        Uniform f32* %70 = OpAccessChain %55 %57 %27 
                                 f32 %71 = OpLoad %70 
                        Private f32* %72 = OpAccessChain %52 %27 
                                             OpStore %72 %71 
                               f32_4 %73 = OpLoad %9 
                               f32_4 %74 = OpVectorShuffle %73 %73 0 0 0 0 
                               f32_4 %75 = OpLoad %52 
                               f32_4 %76 = OpFMul %74 %75 
                                             OpStore %9 %76 
                               f32_4 %78 = OpLoad %77 
                               f32_4 %80 = OpLoad %79 
                               f32_4 %81 = OpFNegate %80 
                               f32_4 %82 = OpFAdd %78 %81 
                                             OpStore %52 %82 
                 read_only Texture2D %85 = OpLoad %12 
                             sampler %86 = OpLoad %16 
          read_only Texture2DSampled %87 = OpSampledImage %85 %86 
                               f32_4 %89 = OpLoad vs_TEXCOORD0 
                               f32_2 %90 = OpVectorShuffle %89 %89 0 1 
                               f32_4 %91 = OpImageSampleImplicitLod %87 %90 
                                 f32 %92 = OpCompositeExtract %91 3 
                        Private f32* %93 = OpAccessChain %84 %29 
                                             OpStore %93 %92 
                               f32_2 %94 = OpLoad %84 
                               f32_2 %95 = OpVectorShuffle %94 %94 0 0 
                               f32_4 %97 = OpLoad vs_TEXCOORD1 
                               f32_2 %98 = OpVectorShuffle %97 %97 0 0 
                               f32_2 %99 = OpFMul %95 %98 
                              f32_4 %100 = OpLoad vs_TEXCOORD1 
                              f32_2 %101 = OpVectorShuffle %100 %100 2 1 
                              f32_2 %102 = OpFNegate %101 
                              f32_2 %103 = OpFAdd %99 %102 
                                             OpStore %84 %103 
                              f32_2 %104 = OpLoad %84 
                              f32_2 %105 = OpCompositeConstruct %48 %48 
                              f32_2 %106 = OpCompositeConstruct %49 %49 
                              f32_2 %107 = OpExtInst %1 43 %104 %105 %106 
                                             OpStore %84 %107 
                              f32_2 %108 = OpLoad %84 
                              f32_4 %109 = OpVectorShuffle %108 %108 0 0 0 0 
                              f32_4 %110 = OpLoad %52 
                              f32_4 %111 = OpFMul %109 %110 
                              f32_4 %112 = OpLoad %79 
                              f32_4 %113 = OpFAdd %111 %112 
                                             OpStore %52 %113 
                              f32_2 %115 = OpLoad %84 
                              f32_4 %116 = OpVectorShuffle %115 %115 1 1 1 1 
                              f32_4 %117 = OpLoad %52 
                              f32_4 %118 = OpFMul %116 %117 
                                             OpStore %114 %118 
                       Private f32* %119 = OpAccessChain %52 %27 
                                f32 %120 = OpLoad %119 
                                f32 %121 = OpFNegate %120 
                       Private f32* %122 = OpAccessChain %84 %40 
                                f32 %123 = OpLoad %122 
                                f32 %124 = OpFMul %121 %123 
                                f32 %125 = OpFAdd %124 %49 
                       Private f32* %126 = OpAccessChain %52 %29 
                                             OpStore %126 %125 
                              f32_4 %127 = OpLoad %9 
                              f32_4 %128 = OpLoad %52 
                              f32_4 %129 = OpVectorShuffle %128 %128 0 0 0 0 
                              f32_4 %130 = OpFMul %127 %129 
                              f32_4 %131 = OpLoad %114 
                              f32_4 %132 = OpFAdd %130 %131 
                                             OpStore %9 %132 
                     Uniform f32_4* %134 = OpAccessChain %55 %133 
                              f32_4 %135 = OpLoad %134 
                              f32_2 %136 = OpVectorShuffle %135 %135 0 1 
                              f32_2 %137 = OpFNegate %136 
                     Uniform f32_4* %138 = OpAccessChain %55 %133 
                              f32_4 %139 = OpLoad %138 
                              f32_2 %140 = OpVectorShuffle %139 %139 2 3 
                              f32_2 %141 = OpFAdd %137 %140 
                              f32_4 %142 = OpLoad %52 
                              f32_4 %143 = OpVectorShuffle %142 %141 4 5 2 3 
                                             OpStore %52 %143 
                              f32_4 %144 = OpLoad %52 
                              f32_2 %145 = OpVectorShuffle %144 %144 0 1 
                              f32_4 %147 = OpLoad vs_TEXCOORD2 
                              f32_2 %148 = OpVectorShuffle %147 %147 0 1 
                              f32_2 %149 = OpExtInst %1 4 %148 
                              f32_2 %150 = OpFNegate %149 
                              f32_2 %151 = OpFAdd %145 %150 
                              f32_4 %152 = OpLoad %52 
                              f32_4 %153 = OpVectorShuffle %152 %151 4 5 2 3 
                                             OpStore %52 %153 
                              f32_4 %154 = OpLoad %52 
                              f32_2 %155 = OpVectorShuffle %154 %154 0 1 
                              f32_4 %156 = OpLoad vs_TEXCOORD2 
                              f32_2 %157 = OpVectorShuffle %156 %156 2 3 
                              f32_2 %158 = OpFMul %155 %157 
                              f32_4 %159 = OpLoad %52 
                              f32_4 %160 = OpVectorShuffle %159 %158 4 5 2 3 
                                             OpStore %52 %160 
                              f32_4 %161 = OpLoad %52 
                              f32_2 %162 = OpVectorShuffle %161 %161 0 1 
                              f32_2 %163 = OpCompositeConstruct %48 %48 
                              f32_2 %164 = OpCompositeConstruct %49 %49 
                              f32_2 %165 = OpExtInst %1 43 %162 %163 %164 
                              f32_4 %166 = OpLoad %52 
                              f32_4 %167 = OpVectorShuffle %166 %165 4 5 2 3 
                                             OpStore %52 %167 
                       Private f32* %168 = OpAccessChain %52 %40 
                                f32 %169 = OpLoad %168 
                       Private f32* %170 = OpAccessChain %52 %29 
                                f32 %171 = OpLoad %170 
                                f32 %172 = OpFMul %169 %171 
                       Private f32* %173 = OpAccessChain %52 %29 
                                             OpStore %173 %172 
                              f32_4 %174 = OpLoad %9 
                              f32_4 %175 = OpLoad %52 
                              f32_4 %176 = OpVectorShuffle %175 %175 0 0 0 0 
                              f32_4 %177 = OpFMul %174 %176 
                                             OpStore %9 %177 
                              f32_4 %180 = OpLoad %9 
                              f32_4 %181 = OpLoad vs_TEXCOORD3 
                              f32_4 %182 = OpVectorShuffle %181 %181 2 2 2 2 
                              f32_4 %183 = OpFMul %180 %182 
                                             OpStore %179 %183 
                                             OpReturn
                                             OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "FOG_LINEAR" "UNITY_UI_CLIP_RECT" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "FOG_LINEAR" "UNITY_UI_CLIP_RECT" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	vec4 _FaceColor;
uniform 	float _FaceDilate;
uniform 	float _OutlineSoftness;
uniform 	vec4 _OutlineColor;
uniform 	float _OutlineWidth;
uniform 	float _WeightNormal;
uniform 	float _WeightBold;
uniform 	float _ScaleRatioA;
uniform 	float _VertexOffsetX;
uniform 	float _VertexOffsetY;
uniform 	vec4 _ClipRect;
uniform 	float _MaskSoftnessX;
uniform 	float _MaskSoftnessY;
uniform 	float _GradientScale;
uniform 	float _ScaleX;
uniform 	float _ScaleY;
uniform 	float _PerspectiveFilter;
uniform 	float _Sharpness;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_COLOR0;
in  vec2 in_TEXCOORD0;
in  vec2 in_TEXCOORD1;
out vec4 vs_COLOR0;
out vec4 vs_COLOR1;
out vec4 vs_TEXCOORD0;
out vec4 vs_TEXCOORD1;
out vec4 vs_TEXCOORD2;
out float vs_TEXCOORDn0;
vec2 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
vec3 u_xlat5;
float u_xlat6;
vec2 u_xlat7;
float u_xlat12;
float u_xlat13;
float u_xlat18;
bool u_xlatb18;
void main()
{
    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
    gl_Position = u_xlat2;
    u_xlat3 = in_COLOR0 * _FaceColor;
    u_xlat3.xyz = u_xlat3.www * u_xlat3.xyz;
    vs_COLOR0 = u_xlat3;
    u_xlat4.w = in_COLOR0.w * _OutlineColor.w;
    u_xlat4.xyz = u_xlat4.www * _OutlineColor.xyz;
    u_xlat4 = (-u_xlat3) + u_xlat4;
    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
    u_xlat5.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat5.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat5.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat5.xyz = vec3(u_xlat12) * u_xlat5.xyz;
    u_xlat12 = dot(u_xlat5.xyz, u_xlat1.xyz);
    u_xlat1.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;
    u_xlat1.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat1.xy;
    u_xlat1.xy = abs(u_xlat1.xy) * vec2(_ScaleX, _ScaleY);
    u_xlat1.xy = u_xlat2.ww / u_xlat1.xy;
    vs_TEXCOORDn0 = u_xlat2.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat18 = dot(u_xlat1.xy, u_xlat1.xy);
    u_xlat1.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) * vec2(0.25, 0.25) + u_xlat1.xy;
    vs_TEXCOORD2.zw = vec2(0.25, 0.25) / u_xlat1.xy;
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.x = abs(in_TEXCOORD1.y) * _GradientScale;
    u_xlat7.x = _Sharpness + 1.0;
    u_xlat1.x = u_xlat7.x * u_xlat1.x;
    u_xlat7.x = u_xlat18 * u_xlat1.x;
    u_xlat13 = (-_PerspectiveFilter) + 1.0;
    u_xlat13 = u_xlat13 * abs(u_xlat7.x);
    u_xlat18 = u_xlat18 * u_xlat1.x + (-u_xlat13);
    u_xlat12 = abs(u_xlat12) * u_xlat18 + u_xlat13;
    u_xlatb18 = hlslcc_mtx4x4glstate_matrix_projection[3].w==0.0;
    u_xlat12 = (u_xlatb18) ? u_xlat12 : u_xlat7.x;
    u_xlat18 = _OutlineSoftness * _ScaleRatioA;
    u_xlat18 = u_xlat18 * u_xlat12 + 1.0;
    u_xlat1.x = u_xlat12 / u_xlat18;
    u_xlat12 = _OutlineWidth * _ScaleRatioA;
    u_xlat12 = u_xlat12 * 0.5;
    u_xlat18 = u_xlat1.x * u_xlat12;
    u_xlat18 = u_xlat18 + u_xlat18;
    u_xlat18 = min(u_xlat18, 1.0);
    u_xlat18 = sqrt(u_xlat18);
    vs_COLOR1 = vec4(u_xlat18) * u_xlat4 + u_xlat3;
    u_xlat2 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));
    u_xlat2 = min(u_xlat2, vec4(2e+10, 2e+10, 2e+10, 2e+10));
    u_xlat7.xy = u_xlat0.xy + (-u_xlat2.xy);
    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + (-u_xlat2.xy);
    vs_TEXCOORD2.xy = (-u_xlat2.zw) + u_xlat0.xy;
    u_xlat0.xy = (-u_xlat2.xy) + u_xlat2.zw;
    vs_TEXCOORD0.zw = u_xlat7.xy / u_xlat0.xy;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlatb0 = 0.0>=in_TEXCOORD1.y;
    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);
    u_xlat6 = (-_WeightNormal) + _WeightBold;
    u_xlat0.x = u_xlat0.x * u_xlat6 + _WeightNormal;
    u_xlat0.x = u_xlat0.x * 0.25 + _FaceDilate;
    u_xlat0.x = u_xlat0.x * _ScaleRatioA;
    u_xlat0.x = (-u_xlat0.x) * 0.5 + 0.5;
    u_xlat1.w = u_xlat0.x * u_xlat1.x + -0.5;
    vs_TEXCOORD1.y = (-u_xlat12) * u_xlat1.x + u_xlat1.w;
    vs_TEXCOORD1.z = u_xlat12 * u_xlat1.x + u_xlat1.w;
    vs_TEXCOORD1.xw = u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 unity_FogColor;
uniform 	vec4 _ClipRect;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
in  vec4 vs_COLOR0;
in  vec4 vs_TEXCOORD0;
in  vec4 vs_TEXCOORD1;
in  vec4 vs_TEXCOORD2;
in  float vs_TEXCOORDn0;
layout(location = 0) out vec4 SV_Target0;
vec2 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
void main()
{
    u_xlat0.xy = (-_ClipRect.xy) + _ClipRect.zw;
    u_xlat0.xy = u_xlat0.xy + -abs(vs_TEXCOORD2.xy);
    u_xlat0.xy = u_xlat0.xy * vs_TEXCOORD2.zw;
    u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);
    u_xlat0.x = u_xlat0.y * u_xlat0.x;
    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2.x = u_xlat1.w * vs_TEXCOORD1.x + (-vs_TEXCOORD1.w);
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
    u_xlat1 = u_xlat2.xxxx * vs_COLOR0;
    u_xlat2.xyz = u_xlat1.xyz * u_xlat0.xxx + (-unity_FogColor.xyz);
    u_xlat0.x = u_xlat0.x * u_xlat1.w;
    SV_Target0.w = u_xlat0.x;
    u_xlat0.x = vs_TEXCOORDn0;
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    SV_Target0.xyz = u_xlat0.xxx * u_xlat2.xyz + unity_FogColor.xyz;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "FOG_LINEAR" "UNITY_UI_CLIP_RECT" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 534
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %12 %118 %122 %135 %156 %251 %281 %290 %405 %448 %454 %511 
                                                      OpName vs_TEXCOORDn0 "vs_TEXCOORDn0" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpDecorate %12 Location 12 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpDecorate %19 ArrayStride 19 
                                                      OpDecorate %20 ArrayStride 20 
                                                      OpDecorate %21 ArrayStride 21 
                                                      OpMemberDecorate %22 0 Offset 22 
                                                      OpMemberDecorate %22 1 Offset 22 
                                                      OpMemberDecorate %22 2 Offset 22 
                                                      OpMemberDecorate %22 3 Offset 22 
                                                      OpMemberDecorate %22 4 Offset 22 
                                                      OpMemberDecorate %22 5 Offset 22 
                                                      OpMemberDecorate %22 6 Offset 22 
                                                      OpMemberDecorate %22 7 Offset 22 
                                                      OpMemberDecorate %22 8 Offset 22 
                                                      OpMemberDecorate %22 9 Offset 22 
                                                      OpMemberDecorate %22 10 Offset 22 
                                                      OpMemberDecorate %22 11 Offset 22 
                                                      OpMemberDecorate %22 12 Offset 22 
                                                      OpMemberDecorate %22 13 Offset 22 
                                                      OpMemberDecorate %22 14 Offset 22 
                                                      OpMemberDecorate %22 15 Offset 22 
                                                      OpMemberDecorate %22 16 Offset 22 
                                                      OpMemberDecorate %22 17 Offset 22 
                                                      OpMemberDecorate %22 18 Offset 22 
                                                      OpMemberDecorate %22 19 Offset 22 
                                                      OpMemberDecorate %22 20 Offset 22 
                                                      OpMemberDecorate %22 21 Offset 22 
                                                      OpMemberDecorate %22 22 Offset 22 
                                                      OpMemberDecorate %22 23 Offset 22 
                                                      OpMemberDecorate %22 24 Offset 22 
                                                      OpMemberDecorate %22 25 Offset 22 
                                                      OpDecorate %22 Block 
                                                      OpDecorate %24 DescriptorSet 24 
                                                      OpDecorate %24 Binding 24 
                                                      OpMemberDecorate %116 0 BuiltIn 116 
                                                      OpMemberDecorate %116 1 BuiltIn 116 
                                                      OpMemberDecorate %116 2 BuiltIn 116 
                                                      OpDecorate %116 Block 
                                                      OpDecorate %122 Location 122 
                                                      OpDecorate %135 Location 135 
                                                      OpDecorate %156 Location 156 
                                                      OpDecorate vs_TEXCOORDn0 Location 251 
                                                      OpDecorate vs_TEXCOORD2 Location 281 
                                                      OpDecorate %290 Location 290 
                                                      OpDecorate %405 Location 405 
                                                      OpDecorate vs_TEXCOORD0 Location 448 
                                                      OpDecorate %454 Location 454 
                                                      OpDecorate vs_TEXCOORD1 Location 511 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 2 
                                               %8 = OpTypePointer Private %7 
                                Private f32_2* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 4 
                                              %11 = OpTypePointer Input %10 
                                 Input f32_4* %12 = OpVariable Input 
                                              %15 = OpTypeVector %6 3 
                                              %16 = OpTypeInt 32 0 
                                          u32 %17 = OpConstant 4 
                                              %18 = OpTypeArray %10 %17 
                                              %19 = OpTypeArray %10 %17 
                                              %20 = OpTypeArray %10 %17 
                                              %21 = OpTypeArray %10 %17 
                                              %22 = OpTypeStruct %15 %10 %10 %18 %19 %20 %21 %10 %10 %6 %6 %10 %6 %6 %6 %6 %6 %6 %10 %6 %6 %6 %6 %6 %6 %6 
                                              %23 = OpTypePointer Uniform %22 
Uniform struct {f32_3; f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4[4]; f32_4; f32_4; f32; f32; f32_4; f32; f32; f32; f32; f32; f32; f32_4; f32; f32; f32; f32; f32; f32; f32;}* %24 = OpVariable Uniform 
                                              %25 = OpTypeInt 32 1 
                                          i32 %26 = OpConstant 16 
                                              %27 = OpTypePointer Uniform %6 
                                          i32 %30 = OpConstant 17 
                                              %35 = OpTypePointer Private %10 
                               Private f32_4* %36 = OpVariable Private 
                                          i32 %39 = OpConstant 3 
                                          i32 %40 = OpConstant 1 
                                              %41 = OpTypePointer Uniform %10 
                                          i32 %45 = OpConstant 0 
                                          i32 %53 = OpConstant 2 
                               Private f32_4* %61 = OpVariable Private 
                                              %80 = OpTypePointer Uniform %15 
                               Private f32_4* %86 = OpVariable Private 
                                          i32 %89 = OpConstant 6 
                                         u32 %114 = OpConstant 1 
                                             %115 = OpTypeArray %6 %114 
                                             %116 = OpTypeStruct %10 %6 %115 
                                             %117 = OpTypePointer Output %116 
        Output struct {f32_4; f32; f32[1];}* %118 = OpVariable Output 
                                             %120 = OpTypePointer Output %10 
                                Input f32_4* %122 = OpVariable Input 
                                         i32 %124 = OpConstant 8 
                               Output f32_4* %135 = OpVariable Output 
                                             %137 = OpTypePointer Private %6 
                                Private f32* %138 = OpVariable Private 
                                             %153 = OpTypePointer Private %15 
                              Private f32_3* %154 = OpVariable Private 
                                             %155 = OpTypePointer Input %15 
                                Input f32_3* %156 = OpVariable Input 
                                         i32 %158 = OpConstant 4 
                                         u32 %163 = OpConstant 0 
                                         u32 %176 = OpConstant 2 
                                         i32 %194 = OpConstant 5 
                                         i32 %216 = OpConstant 22 
                                         i32 %219 = OpConstant 23 
                                Private f32* %233 = OpVariable Private 
                                         f32 %241 = OpConstant 3.674022E-40 
                                         f32 %248 = OpConstant 3.674022E-40 
                                             %250 = OpTypePointer Output %6 
                        Output f32* vs_TEXCOORDn0 = OpVariable Output 
                                         i32 %253 = OpConstant 7 
                                         u32 %257 = OpConstant 3 
                                         i32 %266 = OpConstant 19 
                                         i32 %269 = OpConstant 20 
                                         f32 %273 = OpConstant 3.674022E-40 
                                       f32_2 %274 = OpConstantComposite %273 %273 
                       Output f32_4* vs_TEXCOORD2 = OpVariable Output 
                                             %289 = OpTypePointer Input %7 
                                Input f32_2* %290 = OpVariable Input 
                                             %291 = OpTypePointer Input %6 
                                         i32 %295 = OpConstant 21 
                              Private f32_2* %300 = OpVariable Private 
                                         i32 %301 = OpConstant 25 
                                Private f32* %317 = OpVariable Private 
                                         i32 %318 = OpConstant 24 
                                             %341 = OpTypeBool 
                                             %342 = OpTypePointer Private %341 
                               Private bool* %343 = OpVariable Private 
                                             %348 = OpTypePointer Function %6 
                                         i32 %357 = OpConstant 10 
                                         i32 %360 = OpConstant 15 
                                         i32 %372 = OpConstant 12 
                                         i32 %388 = OpConstant 11 
                               Output f32_4* %405 = OpVariable Output 
                                         i32 %412 = OpConstant 18 
                                         f32 %415 = OpConstant 3.674022E-40 
                                       f32_4 %416 = OpConstantComposite %415 %415 %415 %415 
                                         f32 %419 = OpConstant 3.674022E-40 
                                       f32_4 %420 = OpConstantComposite %419 %419 %419 %419 
                                         f32 %428 = OpConstant 3.674022E-40 
                                       f32_2 %429 = OpConstantComposite %428 %428 
                       Output f32_4* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_2* %454 = OpVariable Input 
                               Private bool* %458 = OpVariable Private 
                                Private f32* %465 = OpVariable Private 
                                         i32 %466 = OpConstant 13 
                                         i32 %470 = OpConstant 14 
                                         i32 %485 = OpConstant 9 
                                         f32 %499 = OpConstant 3.674022E-40 
                                         f32 %508 = OpConstant 3.674022E-40 
                       Output f32_4* vs_TEXCOORD1 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                               Function f32* %349 = OpVariable Function 
                                        f32_4 %13 = OpLoad %12 
                                        f32_2 %14 = OpVectorShuffle %13 %13 0 1 
                                 Uniform f32* %28 = OpAccessChain %24 %26 
                                          f32 %29 = OpLoad %28 
                                 Uniform f32* %31 = OpAccessChain %24 %30 
                                          f32 %32 = OpLoad %31 
                                        f32_2 %33 = OpCompositeConstruct %29 %32 
                                        f32_2 %34 = OpFAdd %14 %33 
                                                      OpStore %9 %34 
                                        f32_2 %37 = OpLoad %9 
                                        f32_4 %38 = OpVectorShuffle %37 %37 1 1 1 1 
                               Uniform f32_4* %42 = OpAccessChain %24 %39 %40 
                                        f32_4 %43 = OpLoad %42 
                                        f32_4 %44 = OpFMul %38 %43 
                                                      OpStore %36 %44 
                               Uniform f32_4* %46 = OpAccessChain %24 %39 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_2 %48 = OpLoad %9 
                                        f32_4 %49 = OpVectorShuffle %48 %48 0 0 0 0 
                                        f32_4 %50 = OpFMul %47 %49 
                                        f32_4 %51 = OpLoad %36 
                                        f32_4 %52 = OpFAdd %50 %51 
                                                      OpStore %36 %52 
                               Uniform f32_4* %54 = OpAccessChain %24 %39 %53 
                                        f32_4 %55 = OpLoad %54 
                                        f32_4 %56 = OpLoad %12 
                                        f32_4 %57 = OpVectorShuffle %56 %56 2 2 2 2 
                                        f32_4 %58 = OpFMul %55 %57 
                                        f32_4 %59 = OpLoad %36 
                                        f32_4 %60 = OpFAdd %58 %59 
                                                      OpStore %36 %60 
                                        f32_4 %62 = OpLoad %36 
                               Uniform f32_4* %63 = OpAccessChain %24 %39 %39 
                                        f32_4 %64 = OpLoad %63 
                                        f32_4 %65 = OpFAdd %62 %64 
                                                      OpStore %61 %65 
                               Uniform f32_4* %66 = OpAccessChain %24 %39 %39 
                                        f32_4 %67 = OpLoad %66 
                                        f32_3 %68 = OpVectorShuffle %67 %67 0 1 2 
                                        f32_4 %69 = OpLoad %12 
                                        f32_3 %70 = OpVectorShuffle %69 %69 3 3 3 
                                        f32_3 %71 = OpFMul %68 %70 
                                        f32_4 %72 = OpLoad %36 
                                        f32_3 %73 = OpVectorShuffle %72 %72 0 1 2 
                                        f32_3 %74 = OpFAdd %71 %73 
                                        f32_4 %75 = OpLoad %36 
                                        f32_4 %76 = OpVectorShuffle %75 %74 4 5 6 3 
                                                      OpStore %36 %76 
                                        f32_4 %77 = OpLoad %36 
                                        f32_3 %78 = OpVectorShuffle %77 %77 0 1 2 
                                        f32_3 %79 = OpFNegate %78 
                               Uniform f32_3* %81 = OpAccessChain %24 %45 
                                        f32_3 %82 = OpLoad %81 
                                        f32_3 %83 = OpFAdd %79 %82 
                                        f32_4 %84 = OpLoad %36 
                                        f32_4 %85 = OpVectorShuffle %84 %83 4 5 6 3 
                                                      OpStore %36 %85 
                                        f32_4 %87 = OpLoad %61 
                                        f32_4 %88 = OpVectorShuffle %87 %87 1 1 1 1 
                               Uniform f32_4* %90 = OpAccessChain %24 %89 %40 
                                        f32_4 %91 = OpLoad %90 
                                        f32_4 %92 = OpFMul %88 %91 
                                                      OpStore %86 %92 
                               Uniform f32_4* %93 = OpAccessChain %24 %89 %45 
                                        f32_4 %94 = OpLoad %93 
                                        f32_4 %95 = OpLoad %61 
                                        f32_4 %96 = OpVectorShuffle %95 %95 0 0 0 0 
                                        f32_4 %97 = OpFMul %94 %96 
                                        f32_4 %98 = OpLoad %86 
                                        f32_4 %99 = OpFAdd %97 %98 
                                                      OpStore %86 %99 
                              Uniform f32_4* %100 = OpAccessChain %24 %89 %53 
                                       f32_4 %101 = OpLoad %100 
                                       f32_4 %102 = OpLoad %61 
                                       f32_4 %103 = OpVectorShuffle %102 %102 2 2 2 2 
                                       f32_4 %104 = OpFMul %101 %103 
                                       f32_4 %105 = OpLoad %86 
                                       f32_4 %106 = OpFAdd %104 %105 
                                                      OpStore %86 %106 
                              Uniform f32_4* %107 = OpAccessChain %24 %89 %39 
                                       f32_4 %108 = OpLoad %107 
                                       f32_4 %109 = OpLoad %61 
                                       f32_4 %110 = OpVectorShuffle %109 %109 3 3 3 3 
                                       f32_4 %111 = OpFMul %108 %110 
                                       f32_4 %112 = OpLoad %86 
                                       f32_4 %113 = OpFAdd %111 %112 
                                                      OpStore %61 %113 
                                       f32_4 %119 = OpLoad %61 
                               Output f32_4* %121 = OpAccessChain %118 %45 
                                                      OpStore %121 %119 
                                       f32_4 %123 = OpLoad %122 
                              Uniform f32_4* %125 = OpAccessChain %24 %124 
                                       f32_4 %126 = OpLoad %125 
                                       f32_4 %127 = OpFMul %123 %126 
                                                      OpStore %86 %127 
                                       f32_4 %128 = OpLoad %86 
                                       f32_3 %129 = OpVectorShuffle %128 %128 3 3 3 
                                       f32_4 %130 = OpLoad %86 
                                       f32_3 %131 = OpVectorShuffle %130 %130 0 1 2 
                                       f32_3 %132 = OpFMul %129 %131 
                                       f32_4 %133 = OpLoad %86 
                                       f32_4 %134 = OpVectorShuffle %133 %132 4 5 6 3 
                                                      OpStore %86 %134 
                                       f32_4 %136 = OpLoad %86 
                                                      OpStore %135 %136 
                                       f32_4 %139 = OpLoad %36 
                                       f32_3 %140 = OpVectorShuffle %139 %139 0 1 2 
                                       f32_4 %141 = OpLoad %36 
                                       f32_3 %142 = OpVectorShuffle %141 %141 0 1 2 
                                         f32 %143 = OpDot %140 %142 
                                                      OpStore %138 %143 
                                         f32 %144 = OpLoad %138 
                                         f32 %145 = OpExtInst %1 32 %144 
                                                      OpStore %138 %145 
                                         f32 %146 = OpLoad %138 
                                       f32_3 %147 = OpCompositeConstruct %146 %146 %146 
                                       f32_4 %148 = OpLoad %36 
                                       f32_3 %149 = OpVectorShuffle %148 %148 0 1 2 
                                       f32_3 %150 = OpFMul %147 %149 
                                       f32_4 %151 = OpLoad %36 
                                       f32_4 %152 = OpVectorShuffle %151 %150 4 5 6 3 
                                                      OpStore %36 %152 
                                       f32_3 %157 = OpLoad %156 
                              Uniform f32_4* %159 = OpAccessChain %24 %158 %45 
                                       f32_4 %160 = OpLoad %159 
                                       f32_3 %161 = OpVectorShuffle %160 %160 0 1 2 
                                         f32 %162 = OpDot %157 %161 
                                Private f32* %164 = OpAccessChain %154 %163 
                                                      OpStore %164 %162 
                                       f32_3 %165 = OpLoad %156 
                              Uniform f32_4* %166 = OpAccessChain %24 %158 %40 
                                       f32_4 %167 = OpLoad %166 
                                       f32_3 %168 = OpVectorShuffle %167 %167 0 1 2 
                                         f32 %169 = OpDot %165 %168 
                                Private f32* %170 = OpAccessChain %154 %114 
                                                      OpStore %170 %169 
                                       f32_3 %171 = OpLoad %156 
                              Uniform f32_4* %172 = OpAccessChain %24 %158 %53 
                                       f32_4 %173 = OpLoad %172 
                                       f32_3 %174 = OpVectorShuffle %173 %173 0 1 2 
                                         f32 %175 = OpDot %171 %174 
                                Private f32* %177 = OpAccessChain %154 %176 
                                                      OpStore %177 %175 
                                       f32_3 %178 = OpLoad %154 
                                       f32_3 %179 = OpLoad %154 
                                         f32 %180 = OpDot %178 %179 
                                                      OpStore %138 %180 
                                         f32 %181 = OpLoad %138 
                                         f32 %182 = OpExtInst %1 32 %181 
                                                      OpStore %138 %182 
                                         f32 %183 = OpLoad %138 
                                       f32_3 %184 = OpCompositeConstruct %183 %183 %183 
                                       f32_3 %185 = OpLoad %154 
                                       f32_3 %186 = OpFMul %184 %185 
                                                      OpStore %154 %186 
                                       f32_3 %187 = OpLoad %154 
                                       f32_4 %188 = OpLoad %36 
                                       f32_3 %189 = OpVectorShuffle %188 %188 0 1 2 
                                         f32 %190 = OpDot %187 %189 
                                                      OpStore %138 %190 
                              Uniform f32_4* %191 = OpAccessChain %24 %53 
                                       f32_4 %192 = OpLoad %191 
                                       f32_2 %193 = OpVectorShuffle %192 %192 1 1 
                              Uniform f32_4* %195 = OpAccessChain %24 %194 %40 
                                       f32_4 %196 = OpLoad %195 
                                       f32_2 %197 = OpVectorShuffle %196 %196 0 1 
                                       f32_2 %198 = OpFMul %193 %197 
                                       f32_4 %199 = OpLoad %36 
                                       f32_4 %200 = OpVectorShuffle %199 %198 4 5 2 3 
                                                      OpStore %36 %200 
                              Uniform f32_4* %201 = OpAccessChain %24 %194 %45 
                                       f32_4 %202 = OpLoad %201 
                                       f32_2 %203 = OpVectorShuffle %202 %202 0 1 
                              Uniform f32_4* %204 = OpAccessChain %24 %53 
                                       f32_4 %205 = OpLoad %204 
                                       f32_2 %206 = OpVectorShuffle %205 %205 0 0 
                                       f32_2 %207 = OpFMul %203 %206 
                                       f32_4 %208 = OpLoad %36 
                                       f32_2 %209 = OpVectorShuffle %208 %208 0 1 
                                       f32_2 %210 = OpFAdd %207 %209 
                                       f32_4 %211 = OpLoad %36 
                                       f32_4 %212 = OpVectorShuffle %211 %210 4 5 2 3 
                                                      OpStore %36 %212 
                                       f32_4 %213 = OpLoad %36 
                                       f32_2 %214 = OpVectorShuffle %213 %213 0 1 
                                       f32_2 %215 = OpExtInst %1 4 %214 
                                Uniform f32* %217 = OpAccessChain %24 %216 
                                         f32 %218 = OpLoad %217 
                                Uniform f32* %220 = OpAccessChain %24 %219 
                                         f32 %221 = OpLoad %220 
                                       f32_2 %222 = OpCompositeConstruct %218 %221 
                                       f32_2 %223 = OpFMul %215 %222 
                                       f32_4 %224 = OpLoad %36 
                                       f32_4 %225 = OpVectorShuffle %224 %223 4 5 2 3 
                                                      OpStore %36 %225 
                                       f32_4 %226 = OpLoad %61 
                                       f32_2 %227 = OpVectorShuffle %226 %226 3 3 
                                       f32_4 %228 = OpLoad %36 
                                       f32_2 %229 = OpVectorShuffle %228 %228 0 1 
                                       f32_2 %230 = OpFDiv %227 %229 
                                       f32_4 %231 = OpLoad %36 
                                       f32_4 %232 = OpVectorShuffle %231 %230 4 5 2 3 
                                                      OpStore %36 %232 
                                Private f32* %234 = OpAccessChain %61 %176 
                                         f32 %235 = OpLoad %234 
                                Uniform f32* %236 = OpAccessChain %24 %40 %114 
                                         f32 %237 = OpLoad %236 
                                         f32 %238 = OpFDiv %235 %237 
                                                      OpStore %233 %238 
                                         f32 %239 = OpLoad %233 
                                         f32 %240 = OpFNegate %239 
                                         f32 %242 = OpFAdd %240 %241 
                                                      OpStore %233 %242 
                                         f32 %243 = OpLoad %233 
                                Uniform f32* %244 = OpAccessChain %24 %40 %176 
                                         f32 %245 = OpLoad %244 
                                         f32 %246 = OpFMul %243 %245 
                                                      OpStore %233 %246 
                                         f32 %247 = OpLoad %233 
                                         f32 %249 = OpExtInst %1 40 %247 %248 
                                                      OpStore %233 %249 
                                         f32 %252 = OpLoad %233 
                                Uniform f32* %254 = OpAccessChain %24 %253 %176 
                                         f32 %255 = OpLoad %254 
                                         f32 %256 = OpFMul %252 %255 
                                Uniform f32* %258 = OpAccessChain %24 %253 %257 
                                         f32 %259 = OpLoad %258 
                                         f32 %260 = OpFAdd %256 %259 
                                                      OpStore vs_TEXCOORDn0 %260 
                                       f32_4 %261 = OpLoad %36 
                                       f32_2 %262 = OpVectorShuffle %261 %261 0 1 
                                       f32_4 %263 = OpLoad %36 
                                       f32_2 %264 = OpVectorShuffle %263 %263 0 1 
                                         f32 %265 = OpDot %262 %264 
                                                      OpStore %233 %265 
                                Uniform f32* %267 = OpAccessChain %24 %266 
                                         f32 %268 = OpLoad %267 
                                Uniform f32* %270 = OpAccessChain %24 %269 
                                         f32 %271 = OpLoad %270 
                                       f32_2 %272 = OpCompositeConstruct %268 %271 
                                       f32_2 %275 = OpFMul %272 %274 
                                       f32_4 %276 = OpLoad %36 
                                       f32_2 %277 = OpVectorShuffle %276 %276 0 1 
                                       f32_2 %278 = OpFAdd %275 %277 
                                       f32_4 %279 = OpLoad %36 
                                       f32_4 %280 = OpVectorShuffle %279 %278 4 5 2 3 
                                                      OpStore %36 %280 
                                       f32_4 %282 = OpLoad %36 
                                       f32_2 %283 = OpVectorShuffle %282 %282 0 1 
                                       f32_2 %284 = OpFDiv %274 %283 
                                       f32_4 %285 = OpLoad vs_TEXCOORD2 
                                       f32_4 %286 = OpVectorShuffle %285 %284 0 1 4 5 
                                                      OpStore vs_TEXCOORD2 %286 
                                         f32 %287 = OpLoad %233 
                                         f32 %288 = OpExtInst %1 32 %287 
                                                      OpStore %233 %288 
                                  Input f32* %292 = OpAccessChain %290 %114 
                                         f32 %293 = OpLoad %292 
                                         f32 %294 = OpExtInst %1 4 %293 
                                Uniform f32* %296 = OpAccessChain %24 %295 
                                         f32 %297 = OpLoad %296 
                                         f32 %298 = OpFMul %294 %297 
                                Private f32* %299 = OpAccessChain %36 %163 
                                                      OpStore %299 %298 
                                Uniform f32* %302 = OpAccessChain %24 %301 
                                         f32 %303 = OpLoad %302 
                                         f32 %304 = OpFAdd %303 %241 
                                Private f32* %305 = OpAccessChain %300 %163 
                                                      OpStore %305 %304 
                                Private f32* %306 = OpAccessChain %300 %163 
                                         f32 %307 = OpLoad %306 
                                Private f32* %308 = OpAccessChain %36 %163 
                                         f32 %309 = OpLoad %308 
                                         f32 %310 = OpFMul %307 %309 
                                Private f32* %311 = OpAccessChain %36 %163 
                                                      OpStore %311 %310 
                                         f32 %312 = OpLoad %233 
                                Private f32* %313 = OpAccessChain %36 %163 
                                         f32 %314 = OpLoad %313 
                                         f32 %315 = OpFMul %312 %314 
                                Private f32* %316 = OpAccessChain %300 %163 
                                                      OpStore %316 %315 
                                Uniform f32* %319 = OpAccessChain %24 %318 
                                         f32 %320 = OpLoad %319 
                                         f32 %321 = OpFNegate %320 
                                         f32 %322 = OpFAdd %321 %241 
                                                      OpStore %317 %322 
                                         f32 %323 = OpLoad %317 
                                Private f32* %324 = OpAccessChain %300 %163 
                                         f32 %325 = OpLoad %324 
                                         f32 %326 = OpExtInst %1 4 %325 
                                         f32 %327 = OpFMul %323 %326 
                                                      OpStore %317 %327 
                                         f32 %328 = OpLoad %233 
                                Private f32* %329 = OpAccessChain %36 %163 
                                         f32 %330 = OpLoad %329 
                                         f32 %331 = OpFMul %328 %330 
                                         f32 %332 = OpLoad %317 
                                         f32 %333 = OpFNegate %332 
                                         f32 %334 = OpFAdd %331 %333 
                                                      OpStore %233 %334 
                                         f32 %335 = OpLoad %138 
                                         f32 %336 = OpExtInst %1 4 %335 
                                         f32 %337 = OpLoad %233 
                                         f32 %338 = OpFMul %336 %337 
                                         f32 %339 = OpLoad %317 
                                         f32 %340 = OpFAdd %338 %339 
                                                      OpStore %138 %340 
                                Uniform f32* %344 = OpAccessChain %24 %194 %39 %257 
                                         f32 %345 = OpLoad %344 
                                        bool %346 = OpFOrdEqual %345 %248 
                                                      OpStore %343 %346 
                                        bool %347 = OpLoad %343 
                                                      OpSelectionMerge %351 None 
                                                      OpBranchConditional %347 %350 %353 
                                             %350 = OpLabel 
                                         f32 %352 = OpLoad %138 
                                                      OpStore %349 %352 
                                                      OpBranch %351 
                                             %353 = OpLabel 
                                Private f32* %354 = OpAccessChain %300 %163 
                                         f32 %355 = OpLoad %354 
                                                      OpStore %349 %355 
                                                      OpBranch %351 
                                             %351 = OpLabel 
                                         f32 %356 = OpLoad %349 
                                                      OpStore %138 %356 
                                Uniform f32* %358 = OpAccessChain %24 %357 
                                         f32 %359 = OpLoad %358 
                                Uniform f32* %361 = OpAccessChain %24 %360 
                                         f32 %362 = OpLoad %361 
                                         f32 %363 = OpFMul %359 %362 
                                                      OpStore %233 %363 
                                         f32 %364 = OpLoad %233 
                                         f32 %365 = OpLoad %138 
                                         f32 %366 = OpFMul %364 %365 
                                         f32 %367 = OpFAdd %366 %241 
                                                      OpStore %233 %367 
                                         f32 %368 = OpLoad %138 
                                         f32 %369 = OpLoad %233 
                                         f32 %370 = OpFDiv %368 %369 
                                Private f32* %371 = OpAccessChain %36 %163 
                                                      OpStore %371 %370 
                                Uniform f32* %373 = OpAccessChain %24 %372 
                                         f32 %374 = OpLoad %373 
                                Uniform f32* %375 = OpAccessChain %24 %360 
                                         f32 %376 = OpLoad %375 
                                         f32 %377 = OpFMul %374 %376 
                                                      OpStore %138 %377 
                                Private f32* %378 = OpAccessChain %36 %163 
                                         f32 %379 = OpLoad %378 
                                         f32 %380 = OpLoad %138 
                                         f32 %381 = OpFMul %379 %380 
                                                      OpStore %138 %381 
                                         f32 %382 = OpLoad %138 
                                         f32 %383 = OpExtInst %1 37 %382 %241 
                                                      OpStore %233 %383 
                                         f32 %384 = OpLoad %233 
                                         f32 %385 = OpExtInst %1 31 %384 
                                                      OpStore %233 %385 
                                  Input f32* %386 = OpAccessChain %122 %257 
                                         f32 %387 = OpLoad %386 
                                Uniform f32* %389 = OpAccessChain %24 %388 %257 
                                         f32 %390 = OpLoad %389 
                                         f32 %391 = OpFMul %387 %390 
                                Private f32* %392 = OpAccessChain %61 %257 
                                                      OpStore %392 %391 
                                       f32_4 %393 = OpLoad %61 
                                       f32_3 %394 = OpVectorShuffle %393 %393 3 3 3 
                              Uniform f32_4* %395 = OpAccessChain %24 %388 
                                       f32_4 %396 = OpLoad %395 
                                       f32_3 %397 = OpVectorShuffle %396 %396 0 1 2 
                                       f32_3 %398 = OpFMul %394 %397 
                                       f32_4 %399 = OpLoad %61 
                                       f32_4 %400 = OpVectorShuffle %399 %398 4 5 6 3 
                                                      OpStore %61 %400 
                                       f32_4 %401 = OpLoad %86 
                                       f32_4 %402 = OpFNegate %401 
                                       f32_4 %403 = OpLoad %61 
                                       f32_4 %404 = OpFAdd %402 %403 
                                                      OpStore %61 %404 
                                         f32 %406 = OpLoad %233 
                                       f32_4 %407 = OpCompositeConstruct %406 %406 %406 %406 
                                       f32_4 %408 = OpLoad %61 
                                       f32_4 %409 = OpFMul %407 %408 
                                       f32_4 %410 = OpLoad %86 
                                       f32_4 %411 = OpFAdd %409 %410 
                                                      OpStore %405 %411 
                              Uniform f32_4* %413 = OpAccessChain %24 %412 
                                       f32_4 %414 = OpLoad %413 
                                       f32_4 %417 = OpExtInst %1 40 %414 %416 
                                                      OpStore %61 %417 
                                       f32_4 %418 = OpLoad %61 
                                       f32_4 %421 = OpExtInst %1 37 %418 %420 
                                                      OpStore %61 %421 
                                       f32_2 %422 = OpLoad %9 
                                       f32_4 %423 = OpLoad %61 
                                       f32_2 %424 = OpVectorShuffle %423 %423 0 1 
                                       f32_2 %425 = OpFNegate %424 
                                       f32_2 %426 = OpFAdd %422 %425 
                                                      OpStore %300 %426 
                                       f32_2 %427 = OpLoad %9 
                                       f32_2 %430 = OpFMul %427 %429 
                                       f32_4 %431 = OpLoad %61 
                                       f32_2 %432 = OpVectorShuffle %431 %431 0 1 
                                       f32_2 %433 = OpFNegate %432 
                                       f32_2 %434 = OpFAdd %430 %433 
                                                      OpStore %9 %434 
                                       f32_4 %435 = OpLoad %61 
                                       f32_2 %436 = OpVectorShuffle %435 %435 2 3 
                                       f32_2 %437 = OpFNegate %436 
                                       f32_2 %438 = OpLoad %9 
                                       f32_2 %439 = OpFAdd %437 %438 
                                       f32_4 %440 = OpLoad vs_TEXCOORD2 
                                       f32_4 %441 = OpVectorShuffle %440 %439 4 5 2 3 
                                                      OpStore vs_TEXCOORD2 %441 
                                       f32_4 %442 = OpLoad %61 
                                       f32_2 %443 = OpVectorShuffle %442 %442 0 1 
                                       f32_2 %444 = OpFNegate %443 
                                       f32_4 %445 = OpLoad %61 
                                       f32_2 %446 = OpVectorShuffle %445 %445 2 3 
                                       f32_2 %447 = OpFAdd %444 %446 
                                                      OpStore %9 %447 
                                       f32_2 %449 = OpLoad %300 
                                       f32_2 %450 = OpLoad %9 
                                       f32_2 %451 = OpFDiv %449 %450 
                                       f32_4 %452 = OpLoad vs_TEXCOORD0 
                                       f32_4 %453 = OpVectorShuffle %452 %451 0 1 4 5 
                                                      OpStore vs_TEXCOORD0 %453 
                                       f32_2 %455 = OpLoad %454 
                                       f32_4 %456 = OpLoad vs_TEXCOORD0 
                                       f32_4 %457 = OpVectorShuffle %456 %455 4 5 2 3 
                                                      OpStore vs_TEXCOORD0 %457 
                                  Input f32* %459 = OpAccessChain %290 %114 
                                         f32 %460 = OpLoad %459 
                                        bool %461 = OpFOrdGreaterThanEqual %248 %460 
                                                      OpStore %458 %461 
                                        bool %462 = OpLoad %458 
                                         f32 %463 = OpSelect %462 %241 %248 
                                Private f32* %464 = OpAccessChain %9 %163 
                                                      OpStore %464 %463 
                                Uniform f32* %467 = OpAccessChain %24 %466 
                                         f32 %468 = OpLoad %467 
                                         f32 %469 = OpFNegate %468 
                                Uniform f32* %471 = OpAccessChain %24 %470 
                                         f32 %472 = OpLoad %471 
                                         f32 %473 = OpFAdd %469 %472 
                                                      OpStore %465 %473 
                                Private f32* %474 = OpAccessChain %9 %163 
                                         f32 %475 = OpLoad %474 
                                         f32 %476 = OpLoad %465 
                                         f32 %477 = OpFMul %475 %476 
                                Uniform f32* %478 = OpAccessChain %24 %466 
                                         f32 %479 = OpLoad %478 
                                         f32 %480 = OpFAdd %477 %479 
                                Private f32* %481 = OpAccessChain %9 %163 
                                                      OpStore %481 %480 
                                Private f32* %482 = OpAccessChain %9 %163 
                                         f32 %483 = OpLoad %482 
                                         f32 %484 = OpFMul %483 %273 
                                Uniform f32* %486 = OpAccessChain %24 %485 
                                         f32 %487 = OpLoad %486 
                                         f32 %488 = OpFAdd %484 %487 
                                Private f32* %489 = OpAccessChain %9 %163 
                                                      OpStore %489 %488 
                                Private f32* %490 = OpAccessChain %9 %163 
                                         f32 %491 = OpLoad %490 
                                Uniform f32* %492 = OpAccessChain %24 %360 
                                         f32 %493 = OpLoad %492 
                                         f32 %494 = OpFMul %491 %493 
                                Private f32* %495 = OpAccessChain %9 %163 
                                                      OpStore %495 %494 
                                Private f32* %496 = OpAccessChain %9 %163 
                                         f32 %497 = OpLoad %496 
                                         f32 %498 = OpFNegate %497 
                                         f32 %500 = OpFMul %498 %499 
                                         f32 %501 = OpFAdd %500 %499 
                                Private f32* %502 = OpAccessChain %9 %163 
                                                      OpStore %502 %501 
                                Private f32* %503 = OpAccessChain %9 %163 
                                         f32 %504 = OpLoad %503 
                                Private f32* %505 = OpAccessChain %36 %163 
                                         f32 %506 = OpLoad %505 
                                         f32 %507 = OpFMul %504 %506 
                                         f32 %509 = OpFAdd %507 %508 
                                Private f32* %510 = OpAccessChain %36 %257 
                                                      OpStore %510 %509 
                                       f32_4 %512 = OpLoad %36 
                                       f32_2 %513 = OpVectorShuffle %512 %512 0 3 
                                       f32_4 %514 = OpLoad vs_TEXCOORD1 
                                       f32_4 %515 = OpVectorShuffle %514 %513 4 1 2 5 
                                                      OpStore vs_TEXCOORD1 %515 
                                         f32 %516 = OpLoad %138 
                                         f32 %517 = OpFNegate %516 
                                         f32 %518 = OpFMul %517 %499 
                                Private f32* %519 = OpAccessChain %36 %257 
                                         f32 %520 = OpLoad %519 
                                         f32 %521 = OpFAdd %518 %520 
                                 Output f32* %522 = OpAccessChain vs_TEXCOORD1 %114 
                                                      OpStore %522 %521 
                                         f32 %523 = OpLoad %138 
                                         f32 %524 = OpFMul %523 %499 
                                Private f32* %525 = OpAccessChain %36 %257 
                                         f32 %526 = OpLoad %525 
                                         f32 %527 = OpFAdd %524 %526 
                                 Output f32* %528 = OpAccessChain vs_TEXCOORD1 %176 
                                                      OpStore %528 %527 
                                 Output f32* %529 = OpAccessChain %118 %45 %114 
                                         f32 %530 = OpLoad %529 
                                         f32 %531 = OpFNegate %530 
                                 Output f32* %532 = OpAccessChain %118 %45 %114 
                                                      OpStore %532 %531 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 137
; Schema: 0
                                             OpCapability Shader 
                                      %1 = OpExtInstImport "GLSL.std.450" 
                                             OpMemoryModel Logical GLSL450 
                                             OpEntryPoint Fragment %4 "main" %27 %66 %75 %93 %114 %119 
                                             OpExecutionMode %4 OriginUpperLeft 
                                             OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                             OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                             OpName vs_TEXCOORDn0 "vs_TEXCOORDn0" 
                                             OpMemberDecorate %11 0 Offset 11 
                                             OpMemberDecorate %11 1 Offset 11 
                                             OpDecorate %11 Block 
                                             OpDecorate %13 DescriptorSet 13 
                                             OpDecorate %13 Binding 13 
                                             OpDecorate vs_TEXCOORD2 Location 27 
                                             OpDecorate %58 DescriptorSet 58 
                                             OpDecorate %58 Binding 58 
                                             OpDecorate %62 DescriptorSet 62 
                                             OpDecorate %62 Binding 62 
                                             OpDecorate vs_TEXCOORD0 Location 66 
                                             OpDecorate vs_TEXCOORD1 Location 75 
                                             OpDecorate %93 Location 93 
                                             OpDecorate %114 Location 114 
                                             OpDecorate vs_TEXCOORDn0 Location 119 
                                      %2 = OpTypeVoid 
                                      %3 = OpTypeFunction %2 
                                      %6 = OpTypeFloat 32 
                                      %7 = OpTypeVector %6 2 
                                      %8 = OpTypePointer Private %7 
                       Private f32_2* %9 = OpVariable Private 
                                     %10 = OpTypeVector %6 4 
                                     %11 = OpTypeStruct %10 %10 
                                     %12 = OpTypePointer Uniform %11 
     Uniform struct {f32_4; f32_4;}* %13 = OpVariable Uniform 
                                     %14 = OpTypeInt 32 1 
                                 i32 %15 = OpConstant 1 
                                     %16 = OpTypePointer Uniform %10 
                                     %26 = OpTypePointer Input %10 
               Input f32_4* vs_TEXCOORD2 = OpVariable Input 
                                 f32 %38 = OpConstant 3.674022E-40 
                                 f32 %39 = OpConstant 3.674022E-40 
                                     %43 = OpTypeInt 32 0 
                                 u32 %44 = OpConstant 1 
                                     %45 = OpTypePointer Private %6 
                                 u32 %48 = OpConstant 0 
                                     %53 = OpTypeVector %6 3 
                                     %54 = OpTypePointer Private %53 
                      Private f32_3* %55 = OpVariable Private 
                                     %56 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                     %57 = OpTypePointer UniformConstant %56 
UniformConstant read_only Texture2D* %58 = OpVariable UniformConstant 
                                     %60 = OpTypeSampler 
                                     %61 = OpTypePointer UniformConstant %60 
            UniformConstant sampler* %62 = OpVariable UniformConstant 
                                     %64 = OpTypeSampledImage %56 
               Input f32_4* vs_TEXCOORD0 = OpVariable Input 
                                 u32 %70 = OpConstant 3 
               Input f32_4* vs_TEXCOORD1 = OpVariable Input 
                                     %76 = OpTypePointer Input %6 
                                     %89 = OpTypePointer Private %10 
                      Private f32_4* %90 = OpVariable Private 
                        Input f32_4* %93 = OpVariable Input 
                                i32 %101 = OpConstant 0 
                                    %113 = OpTypePointer Output %10 
                      Output f32_4* %114 = OpVariable Output 
                                    %117 = OpTypePointer Output %6 
                Input f32* vs_TEXCOORDn0 = OpVariable Input 
                                 void %4 = OpFunction None %3 
                                      %5 = OpLabel 
                      Uniform f32_4* %17 = OpAccessChain %13 %15 
                               f32_4 %18 = OpLoad %17 
                               f32_2 %19 = OpVectorShuffle %18 %18 0 1 
                               f32_2 %20 = OpFNegate %19 
                      Uniform f32_4* %21 = OpAccessChain %13 %15 
                               f32_4 %22 = OpLoad %21 
                               f32_2 %23 = OpVectorShuffle %22 %22 2 3 
                               f32_2 %24 = OpFAdd %20 %23 
                                             OpStore %9 %24 
                               f32_2 %25 = OpLoad %9 
                               f32_4 %28 = OpLoad vs_TEXCOORD2 
                               f32_2 %29 = OpVectorShuffle %28 %28 0 1 
                               f32_2 %30 = OpExtInst %1 4 %29 
                               f32_2 %31 = OpFNegate %30 
                               f32_2 %32 = OpFAdd %25 %31 
                                             OpStore %9 %32 
                               f32_2 %33 = OpLoad %9 
                               f32_4 %34 = OpLoad vs_TEXCOORD2 
                               f32_2 %35 = OpVectorShuffle %34 %34 2 3 
                               f32_2 %36 = OpFMul %33 %35 
                                             OpStore %9 %36 
                               f32_2 %37 = OpLoad %9 
                               f32_2 %40 = OpCompositeConstruct %38 %38 
                               f32_2 %41 = OpCompositeConstruct %39 %39 
                               f32_2 %42 = OpExtInst %1 43 %37 %40 %41 
                                             OpStore %9 %42 
                        Private f32* %46 = OpAccessChain %9 %44 
                                 f32 %47 = OpLoad %46 
                        Private f32* %49 = OpAccessChain %9 %48 
                                 f32 %50 = OpLoad %49 
                                 f32 %51 = OpFMul %47 %50 
                        Private f32* %52 = OpAccessChain %9 %48 
                                             OpStore %52 %51 
                 read_only Texture2D %59 = OpLoad %58 
                             sampler %63 = OpLoad %62 
          read_only Texture2DSampled %65 = OpSampledImage %59 %63 
                               f32_4 %67 = OpLoad vs_TEXCOORD0 
                               f32_2 %68 = OpVectorShuffle %67 %67 0 1 
                               f32_4 %69 = OpImageSampleImplicitLod %65 %68 
                                 f32 %71 = OpCompositeExtract %69 3 
                        Private f32* %72 = OpAccessChain %55 %48 
                                             OpStore %72 %71 
                        Private f32* %73 = OpAccessChain %55 %48 
                                 f32 %74 = OpLoad %73 
                          Input f32* %77 = OpAccessChain vs_TEXCOORD1 %48 
                                 f32 %78 = OpLoad %77 
                                 f32 %79 = OpFMul %74 %78 
                          Input f32* %80 = OpAccessChain vs_TEXCOORD1 %70 
                                 f32 %81 = OpLoad %80 
                                 f32 %82 = OpFNegate %81 
                                 f32 %83 = OpFAdd %79 %82 
                        Private f32* %84 = OpAccessChain %55 %48 
                                             OpStore %84 %83 
                        Private f32* %85 = OpAccessChain %55 %48 
                                 f32 %86 = OpLoad %85 
                                 f32 %87 = OpExtInst %1 43 %86 %38 %39 
                        Private f32* %88 = OpAccessChain %55 %48 
                                             OpStore %88 %87 
                               f32_3 %91 = OpLoad %55 
                               f32_4 %92 = OpVectorShuffle %91 %91 0 0 0 0 
                               f32_4 %94 = OpLoad %93 
                               f32_4 %95 = OpFMul %92 %94 
                                             OpStore %90 %95 
                               f32_4 %96 = OpLoad %90 
                               f32_3 %97 = OpVectorShuffle %96 %96 0 1 2 
                               f32_2 %98 = OpLoad %9 
                               f32_3 %99 = OpVectorShuffle %98 %98 0 0 0 
                              f32_3 %100 = OpFMul %97 %99 
                     Uniform f32_4* %102 = OpAccessChain %13 %101 
                              f32_4 %103 = OpLoad %102 
                              f32_3 %104 = OpVectorShuffle %103 %103 0 1 2 
                              f32_3 %105 = OpFNegate %104 
                              f32_3 %106 = OpFAdd %100 %105 
                                             OpStore %55 %106 
                       Private f32* %107 = OpAccessChain %9 %48 
                                f32 %108 = OpLoad %107 
                       Private f32* %109 = OpAccessChain %90 %70 
                                f32 %110 = OpLoad %109 
                                f32 %111 = OpFMul %108 %110 
                       Private f32* %112 = OpAccessChain %9 %48 
                                             OpStore %112 %111 
                       Private f32* %115 = OpAccessChain %9 %48 
                                f32 %116 = OpLoad %115 
                        Output f32* %118 = OpAccessChain %114 %70 
                                             OpStore %118 %116 
                                f32 %120 = OpLoad vs_TEXCOORDn0 
                       Private f32* %121 = OpAccessChain %9 %48 
                                             OpStore %121 %120 
                       Private f32* %122 = OpAccessChain %9 %48 
                                f32 %123 = OpLoad %122 
                                f32 %124 = OpExtInst %1 43 %123 %38 %39 
                       Private f32* %125 = OpAccessChain %9 %48 
                                             OpStore %125 %124 
                              f32_2 %126 = OpLoad %9 
                              f32_3 %127 = OpVectorShuffle %126 %126 0 0 0 
                              f32_3 %128 = OpLoad %55 
                              f32_3 %129 = OpFMul %127 %128 
                     Uniform f32_4* %130 = OpAccessChain %13 %101 
                              f32_4 %131 = OpLoad %130 
                              f32_3 %132 = OpVectorShuffle %131 %131 0 1 2 
                              f32_3 %133 = OpFAdd %129 %132 
                              f32_4 %134 = OpLoad %114 
                              f32_4 %135 = OpVectorShuffle %134 %133 4 5 6 3 
                                             OpStore %114 %135 
                                             OpReturn
                                             OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "FOG_LINEAR" "OUTLINE_ON" "UNITY_UI_CLIP_RECT" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "FOG_LINEAR" "OUTLINE_ON" "UNITY_UI_CLIP_RECT" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	vec4 _FaceColor;
uniform 	float _FaceDilate;
uniform 	float _OutlineSoftness;
uniform 	vec4 _OutlineColor;
uniform 	float _OutlineWidth;
uniform 	float _WeightNormal;
uniform 	float _WeightBold;
uniform 	float _ScaleRatioA;
uniform 	float _VertexOffsetX;
uniform 	float _VertexOffsetY;
uniform 	vec4 _ClipRect;
uniform 	float _MaskSoftnessX;
uniform 	float _MaskSoftnessY;
uniform 	float _GradientScale;
uniform 	float _ScaleX;
uniform 	float _ScaleY;
uniform 	float _PerspectiveFilter;
uniform 	float _Sharpness;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_COLOR0;
in  vec2 in_TEXCOORD0;
in  vec2 in_TEXCOORD1;
out vec4 vs_COLOR0;
out vec4 vs_COLOR1;
out vec4 vs_TEXCOORD0;
out vec4 vs_TEXCOORD1;
out vec4 vs_TEXCOORD2;
out float vs_TEXCOORDn0;
vec2 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
vec3 u_xlat5;
float u_xlat6;
vec2 u_xlat7;
float u_xlat12;
float u_xlat13;
float u_xlat18;
bool u_xlatb18;
void main()
{
    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
    gl_Position = u_xlat2;
    u_xlat3 = in_COLOR0 * _FaceColor;
    u_xlat3.xyz = u_xlat3.www * u_xlat3.xyz;
    vs_COLOR0 = u_xlat3;
    u_xlat4.w = in_COLOR0.w * _OutlineColor.w;
    u_xlat4.xyz = u_xlat4.www * _OutlineColor.xyz;
    u_xlat4 = (-u_xlat3) + u_xlat4;
    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
    u_xlat5.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat5.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat5.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat5.xyz = vec3(u_xlat12) * u_xlat5.xyz;
    u_xlat12 = dot(u_xlat5.xyz, u_xlat1.xyz);
    u_xlat1.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;
    u_xlat1.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat1.xy;
    u_xlat1.xy = abs(u_xlat1.xy) * vec2(_ScaleX, _ScaleY);
    u_xlat1.xy = u_xlat2.ww / u_xlat1.xy;
    vs_TEXCOORDn0 = u_xlat2.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat18 = dot(u_xlat1.xy, u_xlat1.xy);
    u_xlat1.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) * vec2(0.25, 0.25) + u_xlat1.xy;
    vs_TEXCOORD2.zw = vec2(0.25, 0.25) / u_xlat1.xy;
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.x = abs(in_TEXCOORD1.y) * _GradientScale;
    u_xlat7.x = _Sharpness + 1.0;
    u_xlat1.x = u_xlat7.x * u_xlat1.x;
    u_xlat7.x = u_xlat18 * u_xlat1.x;
    u_xlat13 = (-_PerspectiveFilter) + 1.0;
    u_xlat13 = u_xlat13 * abs(u_xlat7.x);
    u_xlat18 = u_xlat18 * u_xlat1.x + (-u_xlat13);
    u_xlat12 = abs(u_xlat12) * u_xlat18 + u_xlat13;
    u_xlatb18 = hlslcc_mtx4x4glstate_matrix_projection[3].w==0.0;
    u_xlat12 = (u_xlatb18) ? u_xlat12 : u_xlat7.x;
    u_xlat18 = _OutlineSoftness * _ScaleRatioA;
    u_xlat18 = u_xlat18 * u_xlat12 + 1.0;
    u_xlat1.x = u_xlat12 / u_xlat18;
    u_xlat12 = _OutlineWidth * _ScaleRatioA;
    u_xlat12 = u_xlat12 * 0.5;
    u_xlat18 = u_xlat1.x * u_xlat12;
    u_xlat18 = u_xlat18 + u_xlat18;
    u_xlat18 = min(u_xlat18, 1.0);
    u_xlat18 = sqrt(u_xlat18);
    vs_COLOR1 = vec4(u_xlat18) * u_xlat4 + u_xlat3;
    u_xlat2 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));
    u_xlat2 = min(u_xlat2, vec4(2e+10, 2e+10, 2e+10, 2e+10));
    u_xlat7.xy = u_xlat0.xy + (-u_xlat2.xy);
    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + (-u_xlat2.xy);
    vs_TEXCOORD2.xy = (-u_xlat2.zw) + u_xlat0.xy;
    u_xlat0.xy = (-u_xlat2.xy) + u_xlat2.zw;
    vs_TEXCOORD0.zw = u_xlat7.xy / u_xlat0.xy;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlatb0 = 0.0>=in_TEXCOORD1.y;
    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);
    u_xlat6 = (-_WeightNormal) + _WeightBold;
    u_xlat0.x = u_xlat0.x * u_xlat6 + _WeightNormal;
    u_xlat0.x = u_xlat0.x * 0.25 + _FaceDilate;
    u_xlat0.x = u_xlat0.x * _ScaleRatioA;
    u_xlat0.x = (-u_xlat0.x) * 0.5 + 0.5;
    u_xlat1.w = u_xlat0.x * u_xlat1.x + -0.5;
    vs_TEXCOORD1.y = (-u_xlat12) * u_xlat1.x + u_xlat1.w;
    vs_TEXCOORD1.z = u_xlat12 * u_xlat1.x + u_xlat1.w;
    vs_TEXCOORD1.xw = u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 unity_FogColor;
uniform 	vec4 _ClipRect;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
in  vec4 vs_COLOR0;
in  vec4 vs_COLOR1;
in  vec4 vs_TEXCOORD0;
in  vec4 vs_TEXCOORD1;
in  vec4 vs_TEXCOORD2;
in  float vs_TEXCOORDn0;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = vs_COLOR0 + (-vs_COLOR1);
    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1.xy = u_xlat1.ww * vs_TEXCOORD1.xx + (-vs_TEXCOORD1.zy);
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
    u_xlat0 = u_xlat1.xxxx * u_xlat0 + vs_COLOR1;
    u_xlat0 = u_xlat1.yyyy * u_xlat0;
    u_xlat1.xy = (-_ClipRect.xy) + _ClipRect.zw;
    u_xlat1.xy = u_xlat1.xy + -abs(vs_TEXCOORD2.xy);
    u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD2.zw;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
    u_xlat1.x = u_xlat1.y * u_xlat1.x;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xxx + (-unity_FogColor.xyz);
    u_xlat6 = u_xlat0.w * u_xlat1.x;
    SV_Target0.w = u_xlat6;
    u_xlat6 = vs_TEXCOORDn0;
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
    SV_Target0.xyz = vec3(u_xlat6) * u_xlat0.xyz + unity_FogColor.xyz;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "FOG_LINEAR" "OUTLINE_ON" "UNITY_UI_CLIP_RECT" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 534
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %12 %118 %122 %135 %156 %251 %281 %290 %405 %448 %454 %511 
                                                      OpName vs_TEXCOORDn0 "vs_TEXCOORDn0" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpDecorate %12 Location 12 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpDecorate %19 ArrayStride 19 
                                                      OpDecorate %20 ArrayStride 20 
                                                      OpDecorate %21 ArrayStride 21 
                                                      OpMemberDecorate %22 0 Offset 22 
                                                      OpMemberDecorate %22 1 Offset 22 
                                                      OpMemberDecorate %22 2 Offset 22 
                                                      OpMemberDecorate %22 3 Offset 22 
                                                      OpMemberDecorate %22 4 Offset 22 
                                                      OpMemberDecorate %22 5 Offset 22 
                                                      OpMemberDecorate %22 6 Offset 22 
                                                      OpMemberDecorate %22 7 Offset 22 
                                                      OpMemberDecorate %22 8 Offset 22 
                                                      OpMemberDecorate %22 9 Offset 22 
                                                      OpMemberDecorate %22 10 Offset 22 
                                                      OpMemberDecorate %22 11 Offset 22 
                                                      OpMemberDecorate %22 12 Offset 22 
                                                      OpMemberDecorate %22 13 Offset 22 
                                                      OpMemberDecorate %22 14 Offset 22 
                                                      OpMemberDecorate %22 15 Offset 22 
                                                      OpMemberDecorate %22 16 Offset 22 
                                                      OpMemberDecorate %22 17 Offset 22 
                                                      OpMemberDecorate %22 18 Offset 22 
                                                      OpMemberDecorate %22 19 Offset 22 
                                                      OpMemberDecorate %22 20 Offset 22 
                                                      OpMemberDecorate %22 21 Offset 22 
                                                      OpMemberDecorate %22 22 Offset 22 
                                                      OpMemberDecorate %22 23 Offset 22 
                                                      OpMemberDecorate %22 24 Offset 22 
                                                      OpMemberDecorate %22 25 Offset 22 
                                                      OpDecorate %22 Block 
                                                      OpDecorate %24 DescriptorSet 24 
                                                      OpDecorate %24 Binding 24 
                                                      OpMemberDecorate %116 0 BuiltIn 116 
                                                      OpMemberDecorate %116 1 BuiltIn 116 
                                                      OpMemberDecorate %116 2 BuiltIn 116 
                                                      OpDecorate %116 Block 
                                                      OpDecorate %122 Location 122 
                                                      OpDecorate %135 Location 135 
                                                      OpDecorate %156 Location 156 
                                                      OpDecorate vs_TEXCOORDn0 Location 251 
                                                      OpDecorate vs_TEXCOORD2 Location 281 
                                                      OpDecorate %290 Location 290 
                                                      OpDecorate %405 Location 405 
                                                      OpDecorate vs_TEXCOORD0 Location 448 
                                                      OpDecorate %454 Location 454 
                                                      OpDecorate vs_TEXCOORD1 Location 511 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 2 
                                               %8 = OpTypePointer Private %7 
                                Private f32_2* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 4 
                                              %11 = OpTypePointer Input %10 
                                 Input f32_4* %12 = OpVariable Input 
                                              %15 = OpTypeVector %6 3 
                                              %16 = OpTypeInt 32 0 
                                          u32 %17 = OpConstant 4 
                                              %18 = OpTypeArray %10 %17 
                                              %19 = OpTypeArray %10 %17 
                                              %20 = OpTypeArray %10 %17 
                                              %21 = OpTypeArray %10 %17 
                                              %22 = OpTypeStruct %15 %10 %10 %18 %19 %20 %21 %10 %10 %6 %6 %10 %6 %6 %6 %6 %6 %6 %10 %6 %6 %6 %6 %6 %6 %6 
                                              %23 = OpTypePointer Uniform %22 
Uniform struct {f32_3; f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4[4]; f32_4; f32_4; f32; f32; f32_4; f32; f32; f32; f32; f32; f32; f32_4; f32; f32; f32; f32; f32; f32; f32;}* %24 = OpVariable Uniform 
                                              %25 = OpTypeInt 32 1 
                                          i32 %26 = OpConstant 16 
                                              %27 = OpTypePointer Uniform %6 
                                          i32 %30 = OpConstant 17 
                                              %35 = OpTypePointer Private %10 
                               Private f32_4* %36 = OpVariable Private 
                                          i32 %39 = OpConstant 3 
                                          i32 %40 = OpConstant 1 
                                              %41 = OpTypePointer Uniform %10 
                                          i32 %45 = OpConstant 0 
                                          i32 %53 = OpConstant 2 
                               Private f32_4* %61 = OpVariable Private 
                                              %80 = OpTypePointer Uniform %15 
                               Private f32_4* %86 = OpVariable Private 
                                          i32 %89 = OpConstant 6 
                                         u32 %114 = OpConstant 1 
                                             %115 = OpTypeArray %6 %114 
                                             %116 = OpTypeStruct %10 %6 %115 
                                             %117 = OpTypePointer Output %116 
        Output struct {f32_4; f32; f32[1];}* %118 = OpVariable Output 
                                             %120 = OpTypePointer Output %10 
                                Input f32_4* %122 = OpVariable Input 
                                         i32 %124 = OpConstant 8 
                               Output f32_4* %135 = OpVariable Output 
                                             %137 = OpTypePointer Private %6 
                                Private f32* %138 = OpVariable Private 
                                             %153 = OpTypePointer Private %15 
                              Private f32_3* %154 = OpVariable Private 
                                             %155 = OpTypePointer Input %15 
                                Input f32_3* %156 = OpVariable Input 
                                         i32 %158 = OpConstant 4 
                                         u32 %163 = OpConstant 0 
                                         u32 %176 = OpConstant 2 
                                         i32 %194 = OpConstant 5 
                                         i32 %216 = OpConstant 22 
                                         i32 %219 = OpConstant 23 
                                Private f32* %233 = OpVariable Private 
                                         f32 %241 = OpConstant 3.674022E-40 
                                         f32 %248 = OpConstant 3.674022E-40 
                                             %250 = OpTypePointer Output %6 
                        Output f32* vs_TEXCOORDn0 = OpVariable Output 
                                         i32 %253 = OpConstant 7 
                                         u32 %257 = OpConstant 3 
                                         i32 %266 = OpConstant 19 
                                         i32 %269 = OpConstant 20 
                                         f32 %273 = OpConstant 3.674022E-40 
                                       f32_2 %274 = OpConstantComposite %273 %273 
                       Output f32_4* vs_TEXCOORD2 = OpVariable Output 
                                             %289 = OpTypePointer Input %7 
                                Input f32_2* %290 = OpVariable Input 
                                             %291 = OpTypePointer Input %6 
                                         i32 %295 = OpConstant 21 
                              Private f32_2* %300 = OpVariable Private 
                                         i32 %301 = OpConstant 25 
                                Private f32* %317 = OpVariable Private 
                                         i32 %318 = OpConstant 24 
                                             %341 = OpTypeBool 
                                             %342 = OpTypePointer Private %341 
                               Private bool* %343 = OpVariable Private 
                                             %348 = OpTypePointer Function %6 
                                         i32 %357 = OpConstant 10 
                                         i32 %360 = OpConstant 15 
                                         i32 %372 = OpConstant 12 
                                         i32 %388 = OpConstant 11 
                               Output f32_4* %405 = OpVariable Output 
                                         i32 %412 = OpConstant 18 
                                         f32 %415 = OpConstant 3.674022E-40 
                                       f32_4 %416 = OpConstantComposite %415 %415 %415 %415 
                                         f32 %419 = OpConstant 3.674022E-40 
                                       f32_4 %420 = OpConstantComposite %419 %419 %419 %419 
                                         f32 %428 = OpConstant 3.674022E-40 
                                       f32_2 %429 = OpConstantComposite %428 %428 
                       Output f32_4* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_2* %454 = OpVariable Input 
                               Private bool* %458 = OpVariable Private 
                                Private f32* %465 = OpVariable Private 
                                         i32 %466 = OpConstant 13 
                                         i32 %470 = OpConstant 14 
                                         i32 %485 = OpConstant 9 
                                         f32 %499 = OpConstant 3.674022E-40 
                                         f32 %508 = OpConstant 3.674022E-40 
                       Output f32_4* vs_TEXCOORD1 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                               Function f32* %349 = OpVariable Function 
                                        f32_4 %13 = OpLoad %12 
                                        f32_2 %14 = OpVectorShuffle %13 %13 0 1 
                                 Uniform f32* %28 = OpAccessChain %24 %26 
                                          f32 %29 = OpLoad %28 
                                 Uniform f32* %31 = OpAccessChain %24 %30 
                                          f32 %32 = OpLoad %31 
                                        f32_2 %33 = OpCompositeConstruct %29 %32 
                                        f32_2 %34 = OpFAdd %14 %33 
                                                      OpStore %9 %34 
                                        f32_2 %37 = OpLoad %9 
                                        f32_4 %38 = OpVectorShuffle %37 %37 1 1 1 1 
                               Uniform f32_4* %42 = OpAccessChain %24 %39 %40 
                                        f32_4 %43 = OpLoad %42 
                                        f32_4 %44 = OpFMul %38 %43 
                                                      OpStore %36 %44 
                               Uniform f32_4* %46 = OpAccessChain %24 %39 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_2 %48 = OpLoad %9 
                                        f32_4 %49 = OpVectorShuffle %48 %48 0 0 0 0 
                                        f32_4 %50 = OpFMul %47 %49 
                                        f32_4 %51 = OpLoad %36 
                                        f32_4 %52 = OpFAdd %50 %51 
                                                      OpStore %36 %52 
                               Uniform f32_4* %54 = OpAccessChain %24 %39 %53 
                                        f32_4 %55 = OpLoad %54 
                                        f32_4 %56 = OpLoad %12 
                                        f32_4 %57 = OpVectorShuffle %56 %56 2 2 2 2 
                                        f32_4 %58 = OpFMul %55 %57 
                                        f32_4 %59 = OpLoad %36 
                                        f32_4 %60 = OpFAdd %58 %59 
                                                      OpStore %36 %60 
                                        f32_4 %62 = OpLoad %36 
                               Uniform f32_4* %63 = OpAccessChain %24 %39 %39 
                                        f32_4 %64 = OpLoad %63 
                                        f32_4 %65 = OpFAdd %62 %64 
                                                      OpStore %61 %65 
                               Uniform f32_4* %66 = OpAccessChain %24 %39 %39 
                                        f32_4 %67 = OpLoad %66 
                                        f32_3 %68 = OpVectorShuffle %67 %67 0 1 2 
                                        f32_4 %69 = OpLoad %12 
                                        f32_3 %70 = OpVectorShuffle %69 %69 3 3 3 
                                        f32_3 %71 = OpFMul %68 %70 
                                        f32_4 %72 = OpLoad %36 
                                        f32_3 %73 = OpVectorShuffle %72 %72 0 1 2 
                                        f32_3 %74 = OpFAdd %71 %73 
                                        f32_4 %75 = OpLoad %36 
                                        f32_4 %76 = OpVectorShuffle %75 %74 4 5 6 3 
                                                      OpStore %36 %76 
                                        f32_4 %77 = OpLoad %36 
                                        f32_3 %78 = OpVectorShuffle %77 %77 0 1 2 
                                        f32_3 %79 = OpFNegate %78 
                               Uniform f32_3* %81 = OpAccessChain %24 %45 
                                        f32_3 %82 = OpLoad %81 
                                        f32_3 %83 = OpFAdd %79 %82 
                                        f32_4 %84 = OpLoad %36 
                                        f32_4 %85 = OpVectorShuffle %84 %83 4 5 6 3 
                                                      OpStore %36 %85 
                                        f32_4 %87 = OpLoad %61 
                                        f32_4 %88 = OpVectorShuffle %87 %87 1 1 1 1 
                               Uniform f32_4* %90 = OpAccessChain %24 %89 %40 
                                        f32_4 %91 = OpLoad %90 
                                        f32_4 %92 = OpFMul %88 %91 
                                                      OpStore %86 %92 
                               Uniform f32_4* %93 = OpAccessChain %24 %89 %45 
                                        f32_4 %94 = OpLoad %93 
                                        f32_4 %95 = OpLoad %61 
                                        f32_4 %96 = OpVectorShuffle %95 %95 0 0 0 0 
                                        f32_4 %97 = OpFMul %94 %96 
                                        f32_4 %98 = OpLoad %86 
                                        f32_4 %99 = OpFAdd %97 %98 
                                                      OpStore %86 %99 
                              Uniform f32_4* %100 = OpAccessChain %24 %89 %53 
                                       f32_4 %101 = OpLoad %100 
                                       f32_4 %102 = OpLoad %61 
                                       f32_4 %103 = OpVectorShuffle %102 %102 2 2 2 2 
                                       f32_4 %104 = OpFMul %101 %103 
                                       f32_4 %105 = OpLoad %86 
                                       f32_4 %106 = OpFAdd %104 %105 
                                                      OpStore %86 %106 
                              Uniform f32_4* %107 = OpAccessChain %24 %89 %39 
                                       f32_4 %108 = OpLoad %107 
                                       f32_4 %109 = OpLoad %61 
                                       f32_4 %110 = OpVectorShuffle %109 %109 3 3 3 3 
                                       f32_4 %111 = OpFMul %108 %110 
                                       f32_4 %112 = OpLoad %86 
                                       f32_4 %113 = OpFAdd %111 %112 
                                                      OpStore %61 %113 
                                       f32_4 %119 = OpLoad %61 
                               Output f32_4* %121 = OpAccessChain %118 %45 
                                                      OpStore %121 %119 
                                       f32_4 %123 = OpLoad %122 
                              Uniform f32_4* %125 = OpAccessChain %24 %124 
                                       f32_4 %126 = OpLoad %125 
                                       f32_4 %127 = OpFMul %123 %126 
                                                      OpStore %86 %127 
                                       f32_4 %128 = OpLoad %86 
                                       f32_3 %129 = OpVectorShuffle %128 %128 3 3 3 
                                       f32_4 %130 = OpLoad %86 
                                       f32_3 %131 = OpVectorShuffle %130 %130 0 1 2 
                                       f32_3 %132 = OpFMul %129 %131 
                                       f32_4 %133 = OpLoad %86 
                                       f32_4 %134 = OpVectorShuffle %133 %132 4 5 6 3 
                                                      OpStore %86 %134 
                                       f32_4 %136 = OpLoad %86 
                                                      OpStore %135 %136 
                                       f32_4 %139 = OpLoad %36 
                                       f32_3 %140 = OpVectorShuffle %139 %139 0 1 2 
                                       f32_4 %141 = OpLoad %36 
                                       f32_3 %142 = OpVectorShuffle %141 %141 0 1 2 
                                         f32 %143 = OpDot %140 %142 
                                                      OpStore %138 %143 
                                         f32 %144 = OpLoad %138 
                                         f32 %145 = OpExtInst %1 32 %144 
                                                      OpStore %138 %145 
                                         f32 %146 = OpLoad %138 
                                       f32_3 %147 = OpCompositeConstruct %146 %146 %146 
                                       f32_4 %148 = OpLoad %36 
                                       f32_3 %149 = OpVectorShuffle %148 %148 0 1 2 
                                       f32_3 %150 = OpFMul %147 %149 
                                       f32_4 %151 = OpLoad %36 
                                       f32_4 %152 = OpVectorShuffle %151 %150 4 5 6 3 
                                                      OpStore %36 %152 
                                       f32_3 %157 = OpLoad %156 
                              Uniform f32_4* %159 = OpAccessChain %24 %158 %45 
                                       f32_4 %160 = OpLoad %159 
                                       f32_3 %161 = OpVectorShuffle %160 %160 0 1 2 
                                         f32 %162 = OpDot %157 %161 
                                Private f32* %164 = OpAccessChain %154 %163 
                                                      OpStore %164 %162 
                                       f32_3 %165 = OpLoad %156 
                              Uniform f32_4* %166 = OpAccessChain %24 %158 %40 
                                       f32_4 %167 = OpLoad %166 
                                       f32_3 %168 = OpVectorShuffle %167 %167 0 1 2 
                                         f32 %169 = OpDot %165 %168 
                                Private f32* %170 = OpAccessChain %154 %114 
                                                      OpStore %170 %169 
                                       f32_3 %171 = OpLoad %156 
                              Uniform f32_4* %172 = OpAccessChain %24 %158 %53 
                                       f32_4 %173 = OpLoad %172 
                                       f32_3 %174 = OpVectorShuffle %173 %173 0 1 2 
                                         f32 %175 = OpDot %171 %174 
                                Private f32* %177 = OpAccessChain %154 %176 
                                                      OpStore %177 %175 
                                       f32_3 %178 = OpLoad %154 
                                       f32_3 %179 = OpLoad %154 
                                         f32 %180 = OpDot %178 %179 
                                                      OpStore %138 %180 
                                         f32 %181 = OpLoad %138 
                                         f32 %182 = OpExtInst %1 32 %181 
                                                      OpStore %138 %182 
                                         f32 %183 = OpLoad %138 
                                       f32_3 %184 = OpCompositeConstruct %183 %183 %183 
                                       f32_3 %185 = OpLoad %154 
                                       f32_3 %186 = OpFMul %184 %185 
                                                      OpStore %154 %186 
                                       f32_3 %187 = OpLoad %154 
                                       f32_4 %188 = OpLoad %36 
                                       f32_3 %189 = OpVectorShuffle %188 %188 0 1 2 
                                         f32 %190 = OpDot %187 %189 
                                                      OpStore %138 %190 
                              Uniform f32_4* %191 = OpAccessChain %24 %53 
                                       f32_4 %192 = OpLoad %191 
                                       f32_2 %193 = OpVectorShuffle %192 %192 1 1 
                              Uniform f32_4* %195 = OpAccessChain %24 %194 %40 
                                       f32_4 %196 = OpLoad %195 
                                       f32_2 %197 = OpVectorShuffle %196 %196 0 1 
                                       f32_2 %198 = OpFMul %193 %197 
                                       f32_4 %199 = OpLoad %36 
                                       f32_4 %200 = OpVectorShuffle %199 %198 4 5 2 3 
                                                      OpStore %36 %200 
                              Uniform f32_4* %201 = OpAccessChain %24 %194 %45 
                                       f32_4 %202 = OpLoad %201 
                                       f32_2 %203 = OpVectorShuffle %202 %202 0 1 
                              Uniform f32_4* %204 = OpAccessChain %24 %53 
                                       f32_4 %205 = OpLoad %204 
                                       f32_2 %206 = OpVectorShuffle %205 %205 0 0 
                                       f32_2 %207 = OpFMul %203 %206 
                                       f32_4 %208 = OpLoad %36 
                                       f32_2 %209 = OpVectorShuffle %208 %208 0 1 
                                       f32_2 %210 = OpFAdd %207 %209 
                                       f32_4 %211 = OpLoad %36 
                                       f32_4 %212 = OpVectorShuffle %211 %210 4 5 2 3 
                                                      OpStore %36 %212 
                                       f32_4 %213 = OpLoad %36 
                                       f32_2 %214 = OpVectorShuffle %213 %213 0 1 
                                       f32_2 %215 = OpExtInst %1 4 %214 
                                Uniform f32* %217 = OpAccessChain %24 %216 
                                         f32 %218 = OpLoad %217 
                                Uniform f32* %220 = OpAccessChain %24 %219 
                                         f32 %221 = OpLoad %220 
                                       f32_2 %222 = OpCompositeConstruct %218 %221 
                                       f32_2 %223 = OpFMul %215 %222 
                                       f32_4 %224 = OpLoad %36 
                                       f32_4 %225 = OpVectorShuffle %224 %223 4 5 2 3 
                                                      OpStore %36 %225 
                                       f32_4 %226 = OpLoad %61 
                                       f32_2 %227 = OpVectorShuffle %226 %226 3 3 
                                       f32_4 %228 = OpLoad %36 
                                       f32_2 %229 = OpVectorShuffle %228 %228 0 1 
                                       f32_2 %230 = OpFDiv %227 %229 
                                       f32_4 %231 = OpLoad %36 
                                       f32_4 %232 = OpVectorShuffle %231 %230 4 5 2 3 
                                                      OpStore %36 %232 
                                Private f32* %234 = OpAccessChain %61 %176 
                                         f32 %235 = OpLoad %234 
                                Uniform f32* %236 = OpAccessChain %24 %40 %114 
                                         f32 %237 = OpLoad %236 
                                         f32 %238 = OpFDiv %235 %237 
                                                      OpStore %233 %238 
                                         f32 %239 = OpLoad %233 
                                         f32 %240 = OpFNegate %239 
                                         f32 %242 = OpFAdd %240 %241 
                                                      OpStore %233 %242 
                                         f32 %243 = OpLoad %233 
                                Uniform f32* %244 = OpAccessChain %24 %40 %176 
                                         f32 %245 = OpLoad %244 
                                         f32 %246 = OpFMul %243 %245 
                                                      OpStore %233 %246 
                                         f32 %247 = OpLoad %233 
                                         f32 %249 = OpExtInst %1 40 %247 %248 
                                                      OpStore %233 %249 
                                         f32 %252 = OpLoad %233 
                                Uniform f32* %254 = OpAccessChain %24 %253 %176 
                                         f32 %255 = OpLoad %254 
                                         f32 %256 = OpFMul %252 %255 
                                Uniform f32* %258 = OpAccessChain %24 %253 %257 
                                         f32 %259 = OpLoad %258 
                                         f32 %260 = OpFAdd %256 %259 
                                                      OpStore vs_TEXCOORDn0 %260 
                                       f32_4 %261 = OpLoad %36 
                                       f32_2 %262 = OpVectorShuffle %261 %261 0 1 
                                       f32_4 %263 = OpLoad %36 
                                       f32_2 %264 = OpVectorShuffle %263 %263 0 1 
                                         f32 %265 = OpDot %262 %264 
                                                      OpStore %233 %265 
                                Uniform f32* %267 = OpAccessChain %24 %266 
                                         f32 %268 = OpLoad %267 
                                Uniform f32* %270 = OpAccessChain %24 %269 
                                         f32 %271 = OpLoad %270 
                                       f32_2 %272 = OpCompositeConstruct %268 %271 
                                       f32_2 %275 = OpFMul %272 %274 
                                       f32_4 %276 = OpLoad %36 
                                       f32_2 %277 = OpVectorShuffle %276 %276 0 1 
                                       f32_2 %278 = OpFAdd %275 %277 
                                       f32_4 %279 = OpLoad %36 
                                       f32_4 %280 = OpVectorShuffle %279 %278 4 5 2 3 
                                                      OpStore %36 %280 
                                       f32_4 %282 = OpLoad %36 
                                       f32_2 %283 = OpVectorShuffle %282 %282 0 1 
                                       f32_2 %284 = OpFDiv %274 %283 
                                       f32_4 %285 = OpLoad vs_TEXCOORD2 
                                       f32_4 %286 = OpVectorShuffle %285 %284 0 1 4 5 
                                                      OpStore vs_TEXCOORD2 %286 
                                         f32 %287 = OpLoad %233 
                                         f32 %288 = OpExtInst %1 32 %287 
                                                      OpStore %233 %288 
                                  Input f32* %292 = OpAccessChain %290 %114 
                                         f32 %293 = OpLoad %292 
                                         f32 %294 = OpExtInst %1 4 %293 
                                Uniform f32* %296 = OpAccessChain %24 %295 
                                         f32 %297 = OpLoad %296 
                                         f32 %298 = OpFMul %294 %297 
                                Private f32* %299 = OpAccessChain %36 %163 
                                                      OpStore %299 %298 
                                Uniform f32* %302 = OpAccessChain %24 %301 
                                         f32 %303 = OpLoad %302 
                                         f32 %304 = OpFAdd %303 %241 
                                Private f32* %305 = OpAccessChain %300 %163 
                                                      OpStore %305 %304 
                                Private f32* %306 = OpAccessChain %300 %163 
                                         f32 %307 = OpLoad %306 
                                Private f32* %308 = OpAccessChain %36 %163 
                                         f32 %309 = OpLoad %308 
                                         f32 %310 = OpFMul %307 %309 
                                Private f32* %311 = OpAccessChain %36 %163 
                                                      OpStore %311 %310 
                                         f32 %312 = OpLoad %233 
                                Private f32* %313 = OpAccessChain %36 %163 
                                         f32 %314 = OpLoad %313 
                                         f32 %315 = OpFMul %312 %314 
                                Private f32* %316 = OpAccessChain %300 %163 
                                                      OpStore %316 %315 
                                Uniform f32* %319 = OpAccessChain %24 %318 
                                         f32 %320 = OpLoad %319 
                                         f32 %321 = OpFNegate %320 
                                         f32 %322 = OpFAdd %321 %241 
                                                      OpStore %317 %322 
                                         f32 %323 = OpLoad %317 
                                Private f32* %324 = OpAccessChain %300 %163 
                                         f32 %325 = OpLoad %324 
                                         f32 %326 = OpExtInst %1 4 %325 
                                         f32 %327 = OpFMul %323 %326 
                                                      OpStore %317 %327 
                                         f32 %328 = OpLoad %233 
                                Private f32* %329 = OpAccessChain %36 %163 
                                         f32 %330 = OpLoad %329 
                                         f32 %331 = OpFMul %328 %330 
                                         f32 %332 = OpLoad %317 
                                         f32 %333 = OpFNegate %332 
                                         f32 %334 = OpFAdd %331 %333 
                                                      OpStore %233 %334 
                                         f32 %335 = OpLoad %138 
                                         f32 %336 = OpExtInst %1 4 %335 
                                         f32 %337 = OpLoad %233 
                                         f32 %338 = OpFMul %336 %337 
                                         f32 %339 = OpLoad %317 
                                         f32 %340 = OpFAdd %338 %339 
                                                      OpStore %138 %340 
                                Uniform f32* %344 = OpAccessChain %24 %194 %39 %257 
                                         f32 %345 = OpLoad %344 
                                        bool %346 = OpFOrdEqual %345 %248 
                                                      OpStore %343 %346 
                                        bool %347 = OpLoad %343 
                                                      OpSelectionMerge %351 None 
                                                      OpBranchConditional %347 %350 %353 
                                             %350 = OpLabel 
                                         f32 %352 = OpLoad %138 
                                                      OpStore %349 %352 
                                                      OpBranch %351 
                                             %353 = OpLabel 
                                Private f32* %354 = OpAccessChain %300 %163 
                                         f32 %355 = OpLoad %354 
                                                      OpStore %349 %355 
                                                      OpBranch %351 
                                             %351 = OpLabel 
                                         f32 %356 = OpLoad %349 
                                                      OpStore %138 %356 
                                Uniform f32* %358 = OpAccessChain %24 %357 
                                         f32 %359 = OpLoad %358 
                                Uniform f32* %361 = OpAccessChain %24 %360 
                                         f32 %362 = OpLoad %361 
                                         f32 %363 = OpFMul %359 %362 
                                                      OpStore %233 %363 
                                         f32 %364 = OpLoad %233 
                                         f32 %365 = OpLoad %138 
                                         f32 %366 = OpFMul %364 %365 
                                         f32 %367 = OpFAdd %366 %241 
                                                      OpStore %233 %367 
                                         f32 %368 = OpLoad %138 
                                         f32 %369 = OpLoad %233 
                                         f32 %370 = OpFDiv %368 %369 
                                Private f32* %371 = OpAccessChain %36 %163 
                                                      OpStore %371 %370 
                                Uniform f32* %373 = OpAccessChain %24 %372 
                                         f32 %374 = OpLoad %373 
                                Uniform f32* %375 = OpAccessChain %24 %360 
                                         f32 %376 = OpLoad %375 
                                         f32 %377 = OpFMul %374 %376 
                                                      OpStore %138 %377 
                                Private f32* %378 = OpAccessChain %36 %163 
                                         f32 %379 = OpLoad %378 
                                         f32 %380 = OpLoad %138 
                                         f32 %381 = OpFMul %379 %380 
                                                      OpStore %138 %381 
                                         f32 %382 = OpLoad %138 
                                         f32 %383 = OpExtInst %1 37 %382 %241 
                                                      OpStore %233 %383 
                                         f32 %384 = OpLoad %233 
                                         f32 %385 = OpExtInst %1 31 %384 
                                                      OpStore %233 %385 
                                  Input f32* %386 = OpAccessChain %122 %257 
                                         f32 %387 = OpLoad %386 
                                Uniform f32* %389 = OpAccessChain %24 %388 %257 
                                         f32 %390 = OpLoad %389 
                                         f32 %391 = OpFMul %387 %390 
                                Private f32* %392 = OpAccessChain %61 %257 
                                                      OpStore %392 %391 
                                       f32_4 %393 = OpLoad %61 
                                       f32_3 %394 = OpVectorShuffle %393 %393 3 3 3 
                              Uniform f32_4* %395 = OpAccessChain %24 %388 
                                       f32_4 %396 = OpLoad %395 
                                       f32_3 %397 = OpVectorShuffle %396 %396 0 1 2 
                                       f32_3 %398 = OpFMul %394 %397 
                                       f32_4 %399 = OpLoad %61 
                                       f32_4 %400 = OpVectorShuffle %399 %398 4 5 6 3 
                                                      OpStore %61 %400 
                                       f32_4 %401 = OpLoad %86 
                                       f32_4 %402 = OpFNegate %401 
                                       f32_4 %403 = OpLoad %61 
                                       f32_4 %404 = OpFAdd %402 %403 
                                                      OpStore %61 %404 
                                         f32 %406 = OpLoad %233 
                                       f32_4 %407 = OpCompositeConstruct %406 %406 %406 %406 
                                       f32_4 %408 = OpLoad %61 
                                       f32_4 %409 = OpFMul %407 %408 
                                       f32_4 %410 = OpLoad %86 
                                       f32_4 %411 = OpFAdd %409 %410 
                                                      OpStore %405 %411 
                              Uniform f32_4* %413 = OpAccessChain %24 %412 
                                       f32_4 %414 = OpLoad %413 
                                       f32_4 %417 = OpExtInst %1 40 %414 %416 
                                                      OpStore %61 %417 
                                       f32_4 %418 = OpLoad %61 
                                       f32_4 %421 = OpExtInst %1 37 %418 %420 
                                                      OpStore %61 %421 
                                       f32_2 %422 = OpLoad %9 
                                       f32_4 %423 = OpLoad %61 
                                       f32_2 %424 = OpVectorShuffle %423 %423 0 1 
                                       f32_2 %425 = OpFNegate %424 
                                       f32_2 %426 = OpFAdd %422 %425 
                                                      OpStore %300 %426 
                                       f32_2 %427 = OpLoad %9 
                                       f32_2 %430 = OpFMul %427 %429 
                                       f32_4 %431 = OpLoad %61 
                                       f32_2 %432 = OpVectorShuffle %431 %431 0 1 
                                       f32_2 %433 = OpFNegate %432 
                                       f32_2 %434 = OpFAdd %430 %433 
                                                      OpStore %9 %434 
                                       f32_4 %435 = OpLoad %61 
                                       f32_2 %436 = OpVectorShuffle %435 %435 2 3 
                                       f32_2 %437 = OpFNegate %436 
                                       f32_2 %438 = OpLoad %9 
                                       f32_2 %439 = OpFAdd %437 %438 
                                       f32_4 %440 = OpLoad vs_TEXCOORD2 
                                       f32_4 %441 = OpVectorShuffle %440 %439 4 5 2 3 
                                                      OpStore vs_TEXCOORD2 %441 
                                       f32_4 %442 = OpLoad %61 
                                       f32_2 %443 = OpVectorShuffle %442 %442 0 1 
                                       f32_2 %444 = OpFNegate %443 
                                       f32_4 %445 = OpLoad %61 
                                       f32_2 %446 = OpVectorShuffle %445 %445 2 3 
                                       f32_2 %447 = OpFAdd %444 %446 
                                                      OpStore %9 %447 
                                       f32_2 %449 = OpLoad %300 
                                       f32_2 %450 = OpLoad %9 
                                       f32_2 %451 = OpFDiv %449 %450 
                                       f32_4 %452 = OpLoad vs_TEXCOORD0 
                                       f32_4 %453 = OpVectorShuffle %452 %451 0 1 4 5 
                                                      OpStore vs_TEXCOORD0 %453 
                                       f32_2 %455 = OpLoad %454 
                                       f32_4 %456 = OpLoad vs_TEXCOORD0 
                                       f32_4 %457 = OpVectorShuffle %456 %455 4 5 2 3 
                                                      OpStore vs_TEXCOORD0 %457 
                                  Input f32* %459 = OpAccessChain %290 %114 
                                         f32 %460 = OpLoad %459 
                                        bool %461 = OpFOrdGreaterThanEqual %248 %460 
                                                      OpStore %458 %461 
                                        bool %462 = OpLoad %458 
                                         f32 %463 = OpSelect %462 %241 %248 
                                Private f32* %464 = OpAccessChain %9 %163 
                                                      OpStore %464 %463 
                                Uniform f32* %467 = OpAccessChain %24 %466 
                                         f32 %468 = OpLoad %467 
                                         f32 %469 = OpFNegate %468 
                                Uniform f32* %471 = OpAccessChain %24 %470 
                                         f32 %472 = OpLoad %471 
                                         f32 %473 = OpFAdd %469 %472 
                                                      OpStore %465 %473 
                                Private f32* %474 = OpAccessChain %9 %163 
                                         f32 %475 = OpLoad %474 
                                         f32 %476 = OpLoad %465 
                                         f32 %477 = OpFMul %475 %476 
                                Uniform f32* %478 = OpAccessChain %24 %466 
                                         f32 %479 = OpLoad %478 
                                         f32 %480 = OpFAdd %477 %479 
                                Private f32* %481 = OpAccessChain %9 %163 
                                                      OpStore %481 %480 
                                Private f32* %482 = OpAccessChain %9 %163 
                                         f32 %483 = OpLoad %482 
                                         f32 %484 = OpFMul %483 %273 
                                Uniform f32* %486 = OpAccessChain %24 %485 
                                         f32 %487 = OpLoad %486 
                                         f32 %488 = OpFAdd %484 %487 
                                Private f32* %489 = OpAccessChain %9 %163 
                                                      OpStore %489 %488 
                                Private f32* %490 = OpAccessChain %9 %163 
                                         f32 %491 = OpLoad %490 
                                Uniform f32* %492 = OpAccessChain %24 %360 
                                         f32 %493 = OpLoad %492 
                                         f32 %494 = OpFMul %491 %493 
                                Private f32* %495 = OpAccessChain %9 %163 
                                                      OpStore %495 %494 
                                Private f32* %496 = OpAccessChain %9 %163 
                                         f32 %497 = OpLoad %496 
                                         f32 %498 = OpFNegate %497 
                                         f32 %500 = OpFMul %498 %499 
                                         f32 %501 = OpFAdd %500 %499 
                                Private f32* %502 = OpAccessChain %9 %163 
                                                      OpStore %502 %501 
                                Private f32* %503 = OpAccessChain %9 %163 
                                         f32 %504 = OpLoad %503 
                                Private f32* %505 = OpAccessChain %36 %163 
                                         f32 %506 = OpLoad %505 
                                         f32 %507 = OpFMul %504 %506 
                                         f32 %509 = OpFAdd %507 %508 
                                Private f32* %510 = OpAccessChain %36 %257 
                                                      OpStore %510 %509 
                                       f32_4 %512 = OpLoad %36 
                                       f32_2 %513 = OpVectorShuffle %512 %512 0 3 
                                       f32_4 %514 = OpLoad vs_TEXCOORD1 
                                       f32_4 %515 = OpVectorShuffle %514 %513 4 1 2 5 
                                                      OpStore vs_TEXCOORD1 %515 
                                         f32 %516 = OpLoad %138 
                                         f32 %517 = OpFNegate %516 
                                         f32 %518 = OpFMul %517 %499 
                                Private f32* %519 = OpAccessChain %36 %257 
                                         f32 %520 = OpLoad %519 
                                         f32 %521 = OpFAdd %518 %520 
                                 Output f32* %522 = OpAccessChain vs_TEXCOORD1 %114 
                                                      OpStore %522 %521 
                                         f32 %523 = OpLoad %138 
                                         f32 %524 = OpFMul %523 %499 
                                Private f32* %525 = OpAccessChain %36 %257 
                                         f32 %526 = OpLoad %525 
                                         f32 %527 = OpFAdd %524 %526 
                                 Output f32* %528 = OpAccessChain vs_TEXCOORD1 %176 
                                                      OpStore %528 %527 
                                 Output f32* %529 = OpAccessChain %118 %45 %114 
                                         f32 %530 = OpLoad %529 
                                         f32 %531 = OpFNegate %530 
                                 Output f32* %532 = OpAccessChain %118 %45 %114 
                                                      OpStore %532 %531 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 144
; Schema: 0
                                             OpCapability Shader 
                                      %1 = OpExtInstImport "GLSL.std.450" 
                                             OpMemoryModel Logical GLSL450 
                                             OpEntryPoint Fragment %4 "main" %11 %13 %30 %42 %81 %123 %128 
                                             OpExecutionMode %4 OriginUpperLeft 
                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                             OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                             OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                             OpName vs_TEXCOORDn0 "vs_TEXCOORDn0" 
                                             OpDecorate %11 Location 11 
                                             OpDecorate %13 Location 13 
                                             OpDecorate %22 DescriptorSet 22 
                                             OpDecorate %22 Binding 22 
                                             OpDecorate %26 DescriptorSet 26 
                                             OpDecorate %26 Binding 26 
                                             OpDecorate vs_TEXCOORD0 Location 30 
                                             OpDecorate vs_TEXCOORD1 Location 42 
                                             OpMemberDecorate %66 0 Offset 66 
                                             OpMemberDecorate %66 1 Offset 66 
                                             OpDecorate %66 Block 
                                             OpDecorate %68 DescriptorSet 68 
                                             OpDecorate %68 Binding 68 
                                             OpDecorate vs_TEXCOORD2 Location 81 
                                             OpDecorate %123 Location 123 
                                             OpDecorate vs_TEXCOORDn0 Location 128 
                                      %2 = OpTypeVoid 
                                      %3 = OpTypeFunction %2 
                                      %6 = OpTypeFloat 32 
                                      %7 = OpTypeVector %6 4 
                                      %8 = OpTypePointer Private %7 
                       Private f32_4* %9 = OpVariable Private 
                                     %10 = OpTypePointer Input %7 
                        Input f32_4* %11 = OpVariable Input 
                        Input f32_4* %13 = OpVariable Input 
                                     %17 = OpTypeVector %6 2 
                                     %18 = OpTypePointer Private %17 
                      Private f32_2* %19 = OpVariable Private 
                                     %20 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                     %21 = OpTypePointer UniformConstant %20 
UniformConstant read_only Texture2D* %22 = OpVariable UniformConstant 
                                     %24 = OpTypeSampler 
                                     %25 = OpTypePointer UniformConstant %24 
            UniformConstant sampler* %26 = OpVariable UniformConstant 
                                     %28 = OpTypeSampledImage %20 
               Input f32_4* vs_TEXCOORD0 = OpVariable Input 
                                     %34 = OpTypeInt 32 0 
                                 u32 %35 = OpConstant 3 
                                 u32 %37 = OpConstant 0 
                                     %38 = OpTypePointer Private %6 
               Input f32_4* vs_TEXCOORD1 = OpVariable Input 
                                 f32 %51 = OpConstant 3.674022E-40 
                                 f32 %52 = OpConstant 3.674022E-40 
                                     %66 = OpTypeStruct %7 %7 
                                     %67 = OpTypePointer Uniform %66 
     Uniform struct {f32_4; f32_4;}* %68 = OpVariable Uniform 
                                     %69 = OpTypeInt 32 1 
                                 i32 %70 = OpConstant 1 
                                     %71 = OpTypePointer Uniform %7 
               Input f32_4* vs_TEXCOORD2 = OpVariable Input 
                                 u32 %95 = OpConstant 1 
                                    %102 = OpTypeVector %6 3 
                                i32 %108 = OpConstant 0 
                       Private f32* %116 = OpVariable Private 
                                    %122 = OpTypePointer Output %7 
                      Output f32_4* %123 = OpVariable Output 
                                    %125 = OpTypePointer Output %6 
                                    %127 = OpTypePointer Input %6 
                Input f32* vs_TEXCOORDn0 = OpVariable Input 
                                 void %4 = OpFunction None %3 
                                      %5 = OpLabel 
                               f32_4 %12 = OpLoad %11 
                               f32_4 %14 = OpLoad %13 
                               f32_4 %15 = OpFNegate %14 
                               f32_4 %16 = OpFAdd %12 %15 
                                             OpStore %9 %16 
                 read_only Texture2D %23 = OpLoad %22 
                             sampler %27 = OpLoad %26 
          read_only Texture2DSampled %29 = OpSampledImage %23 %27 
                               f32_4 %31 = OpLoad vs_TEXCOORD0 
                               f32_2 %32 = OpVectorShuffle %31 %31 0 1 
                               f32_4 %33 = OpImageSampleImplicitLod %29 %32 
                                 f32 %36 = OpCompositeExtract %33 3 
                        Private f32* %39 = OpAccessChain %19 %37 
                                             OpStore %39 %36 
                               f32_2 %40 = OpLoad %19 
                               f32_2 %41 = OpVectorShuffle %40 %40 0 0 
                               f32_4 %43 = OpLoad vs_TEXCOORD1 
                               f32_2 %44 = OpVectorShuffle %43 %43 0 0 
                               f32_2 %45 = OpFMul %41 %44 
                               f32_4 %46 = OpLoad vs_TEXCOORD1 
                               f32_2 %47 = OpVectorShuffle %46 %46 2 1 
                               f32_2 %48 = OpFNegate %47 
                               f32_2 %49 = OpFAdd %45 %48 
                                             OpStore %19 %49 
                               f32_2 %50 = OpLoad %19 
                               f32_2 %53 = OpCompositeConstruct %51 %51 
                               f32_2 %54 = OpCompositeConstruct %52 %52 
                               f32_2 %55 = OpExtInst %1 43 %50 %53 %54 
                                             OpStore %19 %55 
                               f32_2 %56 = OpLoad %19 
                               f32_4 %57 = OpVectorShuffle %56 %56 0 0 0 0 
                               f32_4 %58 = OpLoad %9 
                               f32_4 %59 = OpFMul %57 %58 
                               f32_4 %60 = OpLoad %13 
                               f32_4 %61 = OpFAdd %59 %60 
                                             OpStore %9 %61 
                               f32_2 %62 = OpLoad %19 
                               f32_4 %63 = OpVectorShuffle %62 %62 1 1 1 1 
                               f32_4 %64 = OpLoad %9 
                               f32_4 %65 = OpFMul %63 %64 
                                             OpStore %9 %65 
                      Uniform f32_4* %72 = OpAccessChain %68 %70 
                               f32_4 %73 = OpLoad %72 
                               f32_2 %74 = OpVectorShuffle %73 %73 0 1 
                               f32_2 %75 = OpFNegate %74 
                      Uniform f32_4* %76 = OpAccessChain %68 %70 
                               f32_4 %77 = OpLoad %76 
                               f32_2 %78 = OpVectorShuffle %77 %77 2 3 
                               f32_2 %79 = OpFAdd %75 %78 
                                             OpStore %19 %79 
                               f32_2 %80 = OpLoad %19 
                               f32_4 %82 = OpLoad vs_TEXCOORD2 
                               f32_2 %83 = OpVectorShuffle %82 %82 0 1 
                               f32_2 %84 = OpExtInst %1 4 %83 
                               f32_2 %85 = OpFNegate %84 
                               f32_2 %86 = OpFAdd %80 %85 
                                             OpStore %19 %86 
                               f32_2 %87 = OpLoad %19 
                               f32_4 %88 = OpLoad vs_TEXCOORD2 
                               f32_2 %89 = OpVectorShuffle %88 %88 2 3 
                               f32_2 %90 = OpFMul %87 %89 
                                             OpStore %19 %90 
                               f32_2 %91 = OpLoad %19 
                               f32_2 %92 = OpCompositeConstruct %51 %51 
                               f32_2 %93 = OpCompositeConstruct %52 %52 
                               f32_2 %94 = OpExtInst %1 43 %91 %92 %93 
                                             OpStore %19 %94 
                        Private f32* %96 = OpAccessChain %19 %95 
                                 f32 %97 = OpLoad %96 
                        Private f32* %98 = OpAccessChain %19 %37 
                                 f32 %99 = OpLoad %98 
                                f32 %100 = OpFMul %97 %99 
                       Private f32* %101 = OpAccessChain %19 %37 
                                             OpStore %101 %100 
                              f32_4 %103 = OpLoad %9 
                              f32_3 %104 = OpVectorShuffle %103 %103 0 1 2 
                              f32_2 %105 = OpLoad %19 
                              f32_3 %106 = OpVectorShuffle %105 %105 0 0 0 
                              f32_3 %107 = OpFMul %104 %106 
                     Uniform f32_4* %109 = OpAccessChain %68 %108 
                              f32_4 %110 = OpLoad %109 
                              f32_3 %111 = OpVectorShuffle %110 %110 0 1 2 
                              f32_3 %112 = OpFNegate %111 
                              f32_3 %113 = OpFAdd %107 %112 
                              f32_4 %114 = OpLoad %9 
                              f32_4 %115 = OpVectorShuffle %114 %113 4 5 6 3 
                                             OpStore %9 %115 
                       Private f32* %117 = OpAccessChain %9 %35 
                                f32 %118 = OpLoad %117 
                       Private f32* %119 = OpAccessChain %19 %37 
                                f32 %120 = OpLoad %119 
                                f32 %121 = OpFMul %118 %120 
                                             OpStore %116 %121 
                                f32 %124 = OpLoad %116 
                        Output f32* %126 = OpAccessChain %123 %35 
                                             OpStore %126 %124 
                                f32 %129 = OpLoad vs_TEXCOORDn0 
                                             OpStore %116 %129 
                                f32 %130 = OpLoad %116 
                                f32 %131 = OpExtInst %1 43 %130 %51 %52 
                                             OpStore %116 %131 
                                f32 %132 = OpLoad %116 
                              f32_3 %133 = OpCompositeConstruct %132 %132 %132 
                              f32_4 %134 = OpLoad %9 
                              f32_3 %135 = OpVectorShuffle %134 %134 0 1 2 
                              f32_3 %136 = OpFMul %133 %135 
                     Uniform f32_4* %137 = OpAccessChain %68 %108 
                              f32_4 %138 = OpLoad %137 
                              f32_3 %139 = OpVectorShuffle %138 %138 0 1 2 
                              f32_3 %140 = OpFAdd %136 %139 
                              f32_4 %141 = OpLoad %123 
                              f32_4 %142 = OpVectorShuffle %141 %140 4 5 6 3 
                                             OpStore %123 %142 
                                             OpReturn
                                             OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "FOG_LINEAR" "UNDERLAY_ON" "UNITY_UI_CLIP_RECT" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "FOG_LINEAR" "UNDERLAY_ON" "UNITY_UI_CLIP_RECT" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	vec4 _FaceColor;
uniform 	float _FaceDilate;
uniform 	float _OutlineSoftness;
uniform 	vec4 _OutlineColor;
uniform 	float _OutlineWidth;
uniform 	float _UnderlayOffsetX;
uniform 	float _UnderlayOffsetY;
uniform 	float _UnderlayDilate;
uniform 	float _UnderlaySoftness;
uniform 	float _WeightNormal;
uniform 	float _WeightBold;
uniform 	float _ScaleRatioA;
uniform 	float _ScaleRatioC;
uniform 	float _VertexOffsetX;
uniform 	float _VertexOffsetY;
uniform 	vec4 _ClipRect;
uniform 	float _MaskSoftnessX;
uniform 	float _MaskSoftnessY;
uniform 	float _TextureWidth;
uniform 	float _TextureHeight;
uniform 	float _GradientScale;
uniform 	float _ScaleX;
uniform 	float _ScaleY;
uniform 	float _PerspectiveFilter;
uniform 	float _Sharpness;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_COLOR0;
in  vec2 in_TEXCOORD0;
in  vec2 in_TEXCOORD1;
out vec4 vs_COLOR0;
out vec4 vs_COLOR1;
out vec4 vs_TEXCOORD0;
out vec4 vs_TEXCOORD1;
out vec4 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec2 vs_TEXCOORD4;
out float vs_TEXCOORDn0;
vec2 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
vec4 u_xlat6;
vec3 u_xlat7;
vec2 u_xlat8;
float u_xlat14;
float u_xlat15;
float u_xlat21;
bool u_xlatb21;
void main()
{
    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
    gl_Position = u_xlat2;
    vs_COLOR0.w = _FaceColor.w;
    u_xlat3.xyz = in_COLOR0.xyz;
    u_xlat3.w = 1.0;
    u_xlat4 = u_xlat3 * _FaceColor;
    u_xlat3.xyz = u_xlat4.www * u_xlat4.xyz;
    vs_COLOR0.xyz = u_xlat3.xyz;
    u_xlat5.xyz = (-u_xlat3.xyz);
    u_xlat5.w = (-u_xlat4.w);
    u_xlat6.xyz = _OutlineColor.www * _OutlineColor.xyz;
    u_xlat6.w = _OutlineColor.w;
    u_xlat5 = u_xlat5 + u_xlat6;
    u_xlat14 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat14 = inversesqrt(u_xlat14);
    u_xlat1.xyz = vec3(u_xlat14) * u_xlat1.xyz;
    u_xlat3.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat3.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat3.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat14 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat14 = inversesqrt(u_xlat14);
    u_xlat3.xyz = vec3(u_xlat14) * u_xlat3.xyz;
    u_xlat14 = dot(u_xlat3.xyz, u_xlat1.xyz);
    u_xlat1.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;
    u_xlat1.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat1.xy;
    u_xlat1.xy = abs(u_xlat1.xy) * vec2(_ScaleX, _ScaleY);
    u_xlat1.xy = u_xlat2.ww / u_xlat1.xy;
    vs_TEXCOORDn0 = u_xlat2.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat21 = dot(u_xlat1.xy, u_xlat1.xy);
    u_xlat1.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) * vec2(0.25, 0.25) + u_xlat1.xy;
    vs_TEXCOORD2.zw = vec2(0.25, 0.25) / u_xlat1.xy;
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.x = abs(in_TEXCOORD1.y) * _GradientScale;
    u_xlat8.x = _Sharpness + 1.0;
    u_xlat1.x = u_xlat8.x * u_xlat1.x;
    u_xlat8.x = u_xlat21 * u_xlat1.x;
    u_xlat15 = (-_PerspectiveFilter) + 1.0;
    u_xlat15 = u_xlat15 * abs(u_xlat8.x);
    u_xlat21 = u_xlat21 * u_xlat1.x + (-u_xlat15);
    u_xlat14 = abs(u_xlat14) * u_xlat21 + u_xlat15;
    u_xlatb21 = hlslcc_mtx4x4glstate_matrix_projection[3].w==0.0;
    u_xlat14 = (u_xlatb21) ? u_xlat14 : u_xlat8.x;
    u_xlat21 = _OutlineSoftness * _ScaleRatioA;
    u_xlat21 = u_xlat21 * u_xlat14 + 1.0;
    u_xlat1.x = u_xlat14 / u_xlat21;
    u_xlat21 = _OutlineWidth * _ScaleRatioA;
    u_xlat21 = u_xlat21 * 0.5;
    u_xlat8.x = u_xlat1.x * u_xlat21;
    u_xlat8.x = u_xlat8.x + u_xlat8.x;
    u_xlat8.x = min(u_xlat8.x, 1.0);
    u_xlat8.x = sqrt(u_xlat8.x);
    u_xlat2 = u_xlat5 * u_xlat8.xxxx;
    vs_COLOR1.xyz = u_xlat4.xyz * u_xlat4.www + u_xlat2.xyz;
    vs_COLOR1.w = u_xlat3.w * _FaceColor.w + u_xlat2.w;
    u_xlat2 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));
    u_xlat2 = min(u_xlat2, vec4(2e+10, 2e+10, 2e+10, 2e+10));
    u_xlat8.xy = u_xlat0.xy + (-u_xlat2.xy);
    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + (-u_xlat2.xy);
    vs_TEXCOORD2.xy = (-u_xlat2.zw) + u_xlat0.xy;
    u_xlat0.xy = (-u_xlat2.xy) + u_xlat2.zw;
    vs_TEXCOORD0.zw = u_xlat8.xy / u_xlat0.xy;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlatb0 = 0.0>=in_TEXCOORD1.y;
    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);
    u_xlat7.x = (-_WeightNormal) + _WeightBold;
    u_xlat0.x = u_xlat0.x * u_xlat7.x + _WeightNormal;
    u_xlat0.x = u_xlat0.x * 0.25 + _FaceDilate;
    u_xlat0.x = u_xlat0.x * _ScaleRatioA;
    u_xlat0.x = (-u_xlat0.x) * 0.5 + 0.5;
    u_xlat1.w = u_xlat0.x * u_xlat1.x + -0.5;
    vs_TEXCOORD1.y = (-u_xlat21) * u_xlat1.x + u_xlat1.w;
    vs_TEXCOORD1.z = u_xlat21 * u_xlat1.x + u_xlat1.w;
    vs_TEXCOORD1.xw = u_xlat1.xw;
    vs_TEXCOORD3.z = in_COLOR0.w;
    vs_TEXCOORD3.w = 0.0;
    u_xlat1 = vec4(_UnderlaySoftness, _UnderlayDilate, _UnderlayOffsetX, _UnderlayOffsetY) * vec4(vec4(_ScaleRatioC, _ScaleRatioC, _ScaleRatioC, _ScaleRatioC));
    u_xlat7.xz = (-u_xlat1.zw) * vec2(_GradientScale);
    u_xlat7.xz = u_xlat7.xz / vec2(_TextureWidth, _TextureHeight);
    vs_TEXCOORD3.xy = u_xlat7.xz + in_TEXCOORD0.xy;
    u_xlat7.x = u_xlat1.x * u_xlat14 + 1.0;
    u_xlat7.x = u_xlat14 / u_xlat7.x;
    u_xlat14 = u_xlat1.y * 0.5;
    u_xlat0.x = u_xlat0.x * u_xlat7.x + -0.5;
    vs_TEXCOORD4.y = (-u_xlat14) * u_xlat7.x + u_xlat0.x;
    vs_TEXCOORD4.x = u_xlat7.x;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 unity_FogColor;
uniform 	vec4 _UnderlayColor;
uniform 	vec4 _ClipRect;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
in  vec4 vs_COLOR0;
in  vec4 vs_TEXCOORD0;
in  vec4 vs_TEXCOORD1;
in  vec4 vs_TEXCOORD2;
in  vec4 vs_TEXCOORD3;
in  vec2 vs_TEXCOORD4;
in  float vs_TEXCOORDn0;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat9;
void main()
{
    u_xlat0 = texture(_MainTex, vs_TEXCOORD3.xy);
    u_xlat0.x = u_xlat0.w * vs_TEXCOORD4.x + (-vs_TEXCOORD4.y);
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat1.xyz = _UnderlayColor.www * _UnderlayColor.xyz;
    u_xlat1.w = _UnderlayColor.w;
    u_xlat0 = u_xlat0.xxxx * u_xlat1;
    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1.x = u_xlat1.w * vs_TEXCOORD1.x + (-vs_TEXCOORD1.w);
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat2 = u_xlat1.xxxx * vs_COLOR0;
    u_xlat1.x = (-vs_COLOR0.w) * u_xlat1.x + 1.0;
    u_xlat0 = u_xlat0 * u_xlat1.xxxx + u_xlat2;
    u_xlat1.xy = (-_ClipRect.xy) + _ClipRect.zw;
    u_xlat1.xy = u_xlat1.xy + -abs(vs_TEXCOORD2.xy);
    u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD2.zw;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
    u_xlat1.x = u_xlat1.y * u_xlat1.x;
    u_xlat0 = u_xlat0 * u_xlat1.xxxx;
    u_xlat0.xyz = u_xlat0.xyz * vs_TEXCOORD3.zzz + (-unity_FogColor.xyz);
    u_xlat9 = u_xlat0.w * vs_TEXCOORD3.z;
    SV_Target0.w = u_xlat9;
    u_xlat9 = vs_TEXCOORDn0;
    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
    SV_Target0.xyz = vec3(u_xlat9) * u_xlat0.xyz + unity_FogColor.xyz;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "FOG_LINEAR" "UNDERLAY_ON" "UNITY_UI_CLIP_RECT" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 677
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %12 %118 %122 %129 %196 %295 %324 %333 %436 %492 %498 %558 %576 %661 
                                                      OpName vs_TEXCOORDn0 "vs_TEXCOORDn0" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpDecorate %12 Location 12 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpDecorate %19 ArrayStride 19 
                                                      OpDecorate %20 ArrayStride 20 
                                                      OpDecorate %21 ArrayStride 21 
                                                      OpMemberDecorate %22 0 Offset 22 
                                                      OpMemberDecorate %22 1 Offset 22 
                                                      OpMemberDecorate %22 2 Offset 22 
                                                      OpMemberDecorate %22 3 Offset 22 
                                                      OpMemberDecorate %22 4 Offset 22 
                                                      OpMemberDecorate %22 5 Offset 22 
                                                      OpMemberDecorate %22 6 Offset 22 
                                                      OpMemberDecorate %22 7 Offset 22 
                                                      OpMemberDecorate %22 8 Offset 22 
                                                      OpMemberDecorate %22 9 Offset 22 
                                                      OpMemberDecorate %22 10 Offset 22 
                                                      OpMemberDecorate %22 11 Offset 22 
                                                      OpMemberDecorate %22 12 Offset 22 
                                                      OpMemberDecorate %22 13 Offset 22 
                                                      OpMemberDecorate %22 14 Offset 22 
                                                      OpMemberDecorate %22 15 Offset 22 
                                                      OpMemberDecorate %22 16 Offset 22 
                                                      OpMemberDecorate %22 17 Offset 22 
                                                      OpMemberDecorate %22 18 Offset 22 
                                                      OpMemberDecorate %22 19 Offset 22 
                                                      OpMemberDecorate %22 20 Offset 22 
                                                      OpMemberDecorate %22 21 Offset 22 
                                                      OpMemberDecorate %22 22 Offset 22 
                                                      OpMemberDecorate %22 23 Offset 22 
                                                      OpMemberDecorate %22 24 Offset 22 
                                                      OpMemberDecorate %22 25 Offset 22 
                                                      OpMemberDecorate %22 26 Offset 22 
                                                      OpMemberDecorate %22 27 Offset 22 
                                                      OpMemberDecorate %22 28 Offset 22 
                                                      OpMemberDecorate %22 29 Offset 22 
                                                      OpMemberDecorate %22 30 Offset 22 
                                                      OpMemberDecorate %22 31 Offset 22 
                                                      OpMemberDecorate %22 32 Offset 22 
                                                      OpDecorate %22 Block 
                                                      OpDecorate %24 DescriptorSet 24 
                                                      OpDecorate %24 Binding 24 
                                                      OpMemberDecorate %116 0 BuiltIn 116 
                                                      OpMemberDecorate %116 1 BuiltIn 116 
                                                      OpMemberDecorate %116 2 BuiltIn 116 
                                                      OpDecorate %116 Block 
                                                      OpDecorate %122 Location 122 
                                                      OpDecorate %129 Location 129 
                                                      OpDecorate %196 Location 196 
                                                      OpDecorate vs_TEXCOORDn0 Location 295 
                                                      OpDecorate vs_TEXCOORD2 Location 324 
                                                      OpDecorate %333 Location 333 
                                                      OpDecorate %436 Location 436 
                                                      OpDecorate vs_TEXCOORD0 Location 492 
                                                      OpDecorate %498 Location 498 
                                                      OpDecorate vs_TEXCOORD1 Location 558 
                                                      OpDecorate vs_TEXCOORD3 Location 576 
                                                      OpDecorate vs_TEXCOORD4 Location 661 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 2 
                                               %8 = OpTypePointer Private %7 
                                Private f32_2* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 4 
                                              %11 = OpTypePointer Input %10 
                                 Input f32_4* %12 = OpVariable Input 
                                              %15 = OpTypeVector %6 3 
                                              %16 = OpTypeInt 32 0 
                                          u32 %17 = OpConstant 4 
                                              %18 = OpTypeArray %10 %17 
                                              %19 = OpTypeArray %10 %17 
                                              %20 = OpTypeArray %10 %17 
                                              %21 = OpTypeArray %10 %17 
                                              %22 = OpTypeStruct %15 %10 %10 %18 %19 %20 %21 %10 %10 %6 %6 %10 %6 %6 %6 %6 %6 %6 %6 %6 %6 %6 %6 %10 %6 %6 %6 %6 %6 %6 %6 %6 %6 
                                              %23 = OpTypePointer Uniform %22 
Uniform struct {f32_3; f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4[4]; f32_4; f32_4; f32; f32; f32_4; f32; f32; f32; f32; f32; f32; f32; f32; f32; f32; f32; f32_4; f32; f32; f32; f32; f32; f32; f32; f32; f32;}* %24 = OpVariable Uniform 
                                              %25 = OpTypeInt 32 1 
                                          i32 %26 = OpConstant 21 
                                              %27 = OpTypePointer Uniform %6 
                                          i32 %30 = OpConstant 22 
                                              %35 = OpTypePointer Private %10 
                               Private f32_4* %36 = OpVariable Private 
                                          i32 %39 = OpConstant 3 
                                          i32 %40 = OpConstant 1 
                                              %41 = OpTypePointer Uniform %10 
                                          i32 %45 = OpConstant 0 
                                          i32 %53 = OpConstant 2 
                               Private f32_4* %61 = OpVariable Private 
                                              %80 = OpTypePointer Uniform %15 
                               Private f32_4* %86 = OpVariable Private 
                                          i32 %89 = OpConstant 6 
                                         u32 %114 = OpConstant 1 
                                             %115 = OpTypeArray %6 %114 
                                             %116 = OpTypeStruct %10 %6 %115 
                                             %117 = OpTypePointer Output %116 
        Output struct {f32_4; f32; f32[1];}* %118 = OpVariable Output 
                                             %120 = OpTypePointer Output %10 
                               Output f32_4* %122 = OpVariable Output 
                                         i32 %123 = OpConstant 8 
                                         u32 %124 = OpConstant 3 
                                             %127 = OpTypePointer Output %6 
                                Input f32_4* %129 = OpVariable Input 
                                         f32 %134 = OpConstant 3.674022E-40 
                                             %135 = OpTypePointer Private %6 
                              Private f32_4* %137 = OpVariable Private 
                              Private f32_4* %153 = OpVariable Private 
                              Private f32_4* %163 = OpVariable Private 
                                         i32 %164 = OpConstant 11 
                                Private f32* %180 = OpVariable Private 
                                             %195 = OpTypePointer Input %15 
                                Input f32_3* %196 = OpVariable Input 
                                         i32 %198 = OpConstant 4 
                                         u32 %203 = OpConstant 0 
                                         u32 %216 = OpConstant 2 
                                         i32 %240 = OpConstant 5 
                                         i32 %262 = OpConstant 29 
                                         i32 %265 = OpConstant 30 
                                Private f32* %279 = OpVariable Private 
                                         f32 %293 = OpConstant 3.674022E-40 
                        Output f32* vs_TEXCOORDn0 = OpVariable Output 
                                         i32 %297 = OpConstant 7 
                                         i32 %309 = OpConstant 24 
                                         i32 %312 = OpConstant 25 
                                         f32 %316 = OpConstant 3.674022E-40 
                                       f32_2 %317 = OpConstantComposite %316 %316 
                       Output f32_4* vs_TEXCOORD2 = OpVariable Output 
                                             %332 = OpTypePointer Input %7 
                                Input f32_2* %333 = OpVariable Input 
                                             %334 = OpTypePointer Input %6 
                                         i32 %338 = OpConstant 28 
                              Private f32_2* %343 = OpVariable Private 
                                         i32 %344 = OpConstant 32 
                                Private f32* %360 = OpVariable Private 
                                         i32 %361 = OpConstant 31 
                                             %384 = OpTypeBool 
                                             %385 = OpTypePointer Private %384 
                               Private bool* %386 = OpVariable Private 
                                             %391 = OpTypePointer Function %6 
                                         i32 %400 = OpConstant 10 
                                         i32 %403 = OpConstant 19 
                                         i32 %415 = OpConstant 12 
                               Output f32_4* %436 = OpVariable Output 
                                         i32 %456 = OpConstant 23 
                                         f32 %459 = OpConstant 3.674022E-40 
                                       f32_4 %460 = OpConstantComposite %459 %459 %459 %459 
                                         f32 %463 = OpConstant 3.674022E-40 
                                       f32_4 %464 = OpConstantComposite %463 %463 %463 %463 
                                         f32 %472 = OpConstant 3.674022E-40 
                                       f32_2 %473 = OpConstantComposite %472 %472 
                       Output f32_4* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_2* %498 = OpVariable Input 
                               Private bool* %502 = OpVariable Private 
                                             %509 = OpTypePointer Private %15 
                              Private f32_3* %510 = OpVariable Private 
                                         i32 %511 = OpConstant 17 
                                         i32 %515 = OpConstant 18 
                                         i32 %532 = OpConstant 9 
                                         f32 %546 = OpConstant 3.674022E-40 
                                         f32 %555 = OpConstant 3.674022E-40 
                       Output f32_4* vs_TEXCOORD1 = OpVariable Output 
                       Output f32_4* vs_TEXCOORD3 = OpVariable Output 
                                         i32 %581 = OpConstant 16 
                                         i32 %584 = OpConstant 15 
                                         i32 %587 = OpConstant 13 
                                         i32 %590 = OpConstant 14 
                                         i32 %594 = OpConstant 20 
                                         i32 %621 = OpConstant 26 
                                         i32 %624 = OpConstant 27 
                                             %660 = OpTypePointer Output %7 
                       Output f32_2* vs_TEXCOORD4 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                               Function f32* %392 = OpVariable Function 
                                        f32_4 %13 = OpLoad %12 
                                        f32_2 %14 = OpVectorShuffle %13 %13 0 1 
                                 Uniform f32* %28 = OpAccessChain %24 %26 
                                          f32 %29 = OpLoad %28 
                                 Uniform f32* %31 = OpAccessChain %24 %30 
                                          f32 %32 = OpLoad %31 
                                        f32_2 %33 = OpCompositeConstruct %29 %32 
                                        f32_2 %34 = OpFAdd %14 %33 
                                                      OpStore %9 %34 
                                        f32_2 %37 = OpLoad %9 
                                        f32_4 %38 = OpVectorShuffle %37 %37 1 1 1 1 
                               Uniform f32_4* %42 = OpAccessChain %24 %39 %40 
                                        f32_4 %43 = OpLoad %42 
                                        f32_4 %44 = OpFMul %38 %43 
                                                      OpStore %36 %44 
                               Uniform f32_4* %46 = OpAccessChain %24 %39 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_2 %48 = OpLoad %9 
                                        f32_4 %49 = OpVectorShuffle %48 %48 0 0 0 0 
                                        f32_4 %50 = OpFMul %47 %49 
                                        f32_4 %51 = OpLoad %36 
                                        f32_4 %52 = OpFAdd %50 %51 
                                                      OpStore %36 %52 
                               Uniform f32_4* %54 = OpAccessChain %24 %39 %53 
                                        f32_4 %55 = OpLoad %54 
                                        f32_4 %56 = OpLoad %12 
                                        f32_4 %57 = OpVectorShuffle %56 %56 2 2 2 2 
                                        f32_4 %58 = OpFMul %55 %57 
                                        f32_4 %59 = OpLoad %36 
                                        f32_4 %60 = OpFAdd %58 %59 
                                                      OpStore %36 %60 
                                        f32_4 %62 = OpLoad %36 
                               Uniform f32_4* %63 = OpAccessChain %24 %39 %39 
                                        f32_4 %64 = OpLoad %63 
                                        f32_4 %65 = OpFAdd %62 %64 
                                                      OpStore %61 %65 
                               Uniform f32_4* %66 = OpAccessChain %24 %39 %39 
                                        f32_4 %67 = OpLoad %66 
                                        f32_3 %68 = OpVectorShuffle %67 %67 0 1 2 
                                        f32_4 %69 = OpLoad %12 
                                        f32_3 %70 = OpVectorShuffle %69 %69 3 3 3 
                                        f32_3 %71 = OpFMul %68 %70 
                                        f32_4 %72 = OpLoad %36 
                                        f32_3 %73 = OpVectorShuffle %72 %72 0 1 2 
                                        f32_3 %74 = OpFAdd %71 %73 
                                        f32_4 %75 = OpLoad %36 
                                        f32_4 %76 = OpVectorShuffle %75 %74 4 5 6 3 
                                                      OpStore %36 %76 
                                        f32_4 %77 = OpLoad %36 
                                        f32_3 %78 = OpVectorShuffle %77 %77 0 1 2 
                                        f32_3 %79 = OpFNegate %78 
                               Uniform f32_3* %81 = OpAccessChain %24 %45 
                                        f32_3 %82 = OpLoad %81 
                                        f32_3 %83 = OpFAdd %79 %82 
                                        f32_4 %84 = OpLoad %36 
                                        f32_4 %85 = OpVectorShuffle %84 %83 4 5 6 3 
                                                      OpStore %36 %85 
                                        f32_4 %87 = OpLoad %61 
                                        f32_4 %88 = OpVectorShuffle %87 %87 1 1 1 1 
                               Uniform f32_4* %90 = OpAccessChain %24 %89 %40 
                                        f32_4 %91 = OpLoad %90 
                                        f32_4 %92 = OpFMul %88 %91 
                                                      OpStore %86 %92 
                               Uniform f32_4* %93 = OpAccessChain %24 %89 %45 
                                        f32_4 %94 = OpLoad %93 
                                        f32_4 %95 = OpLoad %61 
                                        f32_4 %96 = OpVectorShuffle %95 %95 0 0 0 0 
                                        f32_4 %97 = OpFMul %94 %96 
                                        f32_4 %98 = OpLoad %86 
                                        f32_4 %99 = OpFAdd %97 %98 
                                                      OpStore %86 %99 
                              Uniform f32_4* %100 = OpAccessChain %24 %89 %53 
                                       f32_4 %101 = OpLoad %100 
                                       f32_4 %102 = OpLoad %61 
                                       f32_4 %103 = OpVectorShuffle %102 %102 2 2 2 2 
                                       f32_4 %104 = OpFMul %101 %103 
                                       f32_4 %105 = OpLoad %86 
                                       f32_4 %106 = OpFAdd %104 %105 
                                                      OpStore %86 %106 
                              Uniform f32_4* %107 = OpAccessChain %24 %89 %39 
                                       f32_4 %108 = OpLoad %107 
                                       f32_4 %109 = OpLoad %61 
                                       f32_4 %110 = OpVectorShuffle %109 %109 3 3 3 3 
                                       f32_4 %111 = OpFMul %108 %110 
                                       f32_4 %112 = OpLoad %86 
                                       f32_4 %113 = OpFAdd %111 %112 
                                                      OpStore %61 %113 
                                       f32_4 %119 = OpLoad %61 
                               Output f32_4* %121 = OpAccessChain %118 %45 
                                                      OpStore %121 %119 
                                Uniform f32* %125 = OpAccessChain %24 %123 %124 
                                         f32 %126 = OpLoad %125 
                                 Output f32* %128 = OpAccessChain %122 %124 
                                                      OpStore %128 %126 
                                       f32_4 %130 = OpLoad %129 
                                       f32_3 %131 = OpVectorShuffle %130 %130 0 1 2 
                                       f32_4 %132 = OpLoad %86 
                                       f32_4 %133 = OpVectorShuffle %132 %131 4 5 6 3 
                                                      OpStore %86 %133 
                                Private f32* %136 = OpAccessChain %86 %124 
                                                      OpStore %136 %134 
                                       f32_4 %138 = OpLoad %86 
                              Uniform f32_4* %139 = OpAccessChain %24 %123 
                                       f32_4 %140 = OpLoad %139 
                                       f32_4 %141 = OpFMul %138 %140 
                                                      OpStore %137 %141 
                                       f32_4 %142 = OpLoad %137 
                                       f32_3 %143 = OpVectorShuffle %142 %142 3 3 3 
                                       f32_4 %144 = OpLoad %137 
                                       f32_3 %145 = OpVectorShuffle %144 %144 0 1 2 
                                       f32_3 %146 = OpFMul %143 %145 
                                       f32_4 %147 = OpLoad %86 
                                       f32_4 %148 = OpVectorShuffle %147 %146 4 5 6 3 
                                                      OpStore %86 %148 
                                       f32_4 %149 = OpLoad %86 
                                       f32_3 %150 = OpVectorShuffle %149 %149 0 1 2 
                                       f32_4 %151 = OpLoad %122 
                                       f32_4 %152 = OpVectorShuffle %151 %150 4 5 6 3 
                                                      OpStore %122 %152 
                                       f32_4 %154 = OpLoad %86 
                                       f32_3 %155 = OpVectorShuffle %154 %154 0 1 2 
                                       f32_3 %156 = OpFNegate %155 
                                       f32_4 %157 = OpLoad %153 
                                       f32_4 %158 = OpVectorShuffle %157 %156 4 5 6 3 
                                                      OpStore %153 %158 
                                Private f32* %159 = OpAccessChain %137 %124 
                                         f32 %160 = OpLoad %159 
                                         f32 %161 = OpFNegate %160 
                                Private f32* %162 = OpAccessChain %153 %124 
                                                      OpStore %162 %161 
                              Uniform f32_4* %165 = OpAccessChain %24 %164 
                                       f32_4 %166 = OpLoad %165 
                                       f32_3 %167 = OpVectorShuffle %166 %166 3 3 3 
                              Uniform f32_4* %168 = OpAccessChain %24 %164 
                                       f32_4 %169 = OpLoad %168 
                                       f32_3 %170 = OpVectorShuffle %169 %169 0 1 2 
                                       f32_3 %171 = OpFMul %167 %170 
                                       f32_4 %172 = OpLoad %163 
                                       f32_4 %173 = OpVectorShuffle %172 %171 4 5 6 3 
                                                      OpStore %163 %173 
                                Uniform f32* %174 = OpAccessChain %24 %164 %124 
                                         f32 %175 = OpLoad %174 
                                Private f32* %176 = OpAccessChain %163 %124 
                                                      OpStore %176 %175 
                                       f32_4 %177 = OpLoad %153 
                                       f32_4 %178 = OpLoad %163 
                                       f32_4 %179 = OpFAdd %177 %178 
                                                      OpStore %153 %179 
                                       f32_4 %181 = OpLoad %36 
                                       f32_3 %182 = OpVectorShuffle %181 %181 0 1 2 
                                       f32_4 %183 = OpLoad %36 
                                       f32_3 %184 = OpVectorShuffle %183 %183 0 1 2 
                                         f32 %185 = OpDot %182 %184 
                                                      OpStore %180 %185 
                                         f32 %186 = OpLoad %180 
                                         f32 %187 = OpExtInst %1 32 %186 
                                                      OpStore %180 %187 
                                         f32 %188 = OpLoad %180 
                                       f32_3 %189 = OpCompositeConstruct %188 %188 %188 
                                       f32_4 %190 = OpLoad %36 
                                       f32_3 %191 = OpVectorShuffle %190 %190 0 1 2 
                                       f32_3 %192 = OpFMul %189 %191 
                                       f32_4 %193 = OpLoad %36 
                                       f32_4 %194 = OpVectorShuffle %193 %192 4 5 6 3 
                                                      OpStore %36 %194 
                                       f32_3 %197 = OpLoad %196 
                              Uniform f32_4* %199 = OpAccessChain %24 %198 %45 
                                       f32_4 %200 = OpLoad %199 
                                       f32_3 %201 = OpVectorShuffle %200 %200 0 1 2 
                                         f32 %202 = OpDot %197 %201 
                                Private f32* %204 = OpAccessChain %86 %203 
                                                      OpStore %204 %202 
                                       f32_3 %205 = OpLoad %196 
                              Uniform f32_4* %206 = OpAccessChain %24 %198 %40 
                                       f32_4 %207 = OpLoad %206 
                                       f32_3 %208 = OpVectorShuffle %207 %207 0 1 2 
                                         f32 %209 = OpDot %205 %208 
                                Private f32* %210 = OpAccessChain %86 %114 
                                                      OpStore %210 %209 
                                       f32_3 %211 = OpLoad %196 
                              Uniform f32_4* %212 = OpAccessChain %24 %198 %53 
                                       f32_4 %213 = OpLoad %212 
                                       f32_3 %214 = OpVectorShuffle %213 %213 0 1 2 
                                         f32 %215 = OpDot %211 %214 
                                Private f32* %217 = OpAccessChain %86 %216 
                                                      OpStore %217 %215 
                                       f32_4 %218 = OpLoad %86 
                                       f32_3 %219 = OpVectorShuffle %218 %218 0 1 2 
                                       f32_4 %220 = OpLoad %86 
                                       f32_3 %221 = OpVectorShuffle %220 %220 0 1 2 
                                         f32 %222 = OpDot %219 %221 
                                                      OpStore %180 %222 
                                         f32 %223 = OpLoad %180 
                                         f32 %224 = OpExtInst %1 32 %223 
                                                      OpStore %180 %224 
                                         f32 %225 = OpLoad %180 
                                       f32_3 %226 = OpCompositeConstruct %225 %225 %225 
                                       f32_4 %227 = OpLoad %86 
                                       f32_3 %228 = OpVectorShuffle %227 %227 0 1 2 
                                       f32_3 %229 = OpFMul %226 %228 
                                       f32_4 %230 = OpLoad %86 
                                       f32_4 %231 = OpVectorShuffle %230 %229 4 5 6 3 
                                                      OpStore %86 %231 
                                       f32_4 %232 = OpLoad %86 
                                       f32_3 %233 = OpVectorShuffle %232 %232 0 1 2 
                                       f32_4 %234 = OpLoad %36 
                                       f32_3 %235 = OpVectorShuffle %234 %234 0 1 2 
                                         f32 %236 = OpDot %233 %235 
                                                      OpStore %180 %236 
                              Uniform f32_4* %237 = OpAccessChain %24 %53 
                                       f32_4 %238 = OpLoad %237 
                                       f32_2 %239 = OpVectorShuffle %238 %238 1 1 
                              Uniform f32_4* %241 = OpAccessChain %24 %240 %40 
                                       f32_4 %242 = OpLoad %241 
                                       f32_2 %243 = OpVectorShuffle %242 %242 0 1 
                                       f32_2 %244 = OpFMul %239 %243 
                                       f32_4 %245 = OpLoad %36 
                                       f32_4 %246 = OpVectorShuffle %245 %244 4 5 2 3 
                                                      OpStore %36 %246 
                              Uniform f32_4* %247 = OpAccessChain %24 %240 %45 
                                       f32_4 %248 = OpLoad %247 
                                       f32_2 %249 = OpVectorShuffle %248 %248 0 1 
                              Uniform f32_4* %250 = OpAccessChain %24 %53 
                                       f32_4 %251 = OpLoad %250 
                                       f32_2 %252 = OpVectorShuffle %251 %251 0 0 
                                       f32_2 %253 = OpFMul %249 %252 
                                       f32_4 %254 = OpLoad %36 
                                       f32_2 %255 = OpVectorShuffle %254 %254 0 1 
                                       f32_2 %256 = OpFAdd %253 %255 
                                       f32_4 %257 = OpLoad %36 
                                       f32_4 %258 = OpVectorShuffle %257 %256 4 5 2 3 
                                                      OpStore %36 %258 
                                       f32_4 %259 = OpLoad %36 
                                       f32_2 %260 = OpVectorShuffle %259 %259 0 1 
                                       f32_2 %261 = OpExtInst %1 4 %260 
                                Uniform f32* %263 = OpAccessChain %24 %262 
                                         f32 %264 = OpLoad %263 
                                Uniform f32* %266 = OpAccessChain %24 %265 
                                         f32 %267 = OpLoad %266 
                                       f32_2 %268 = OpCompositeConstruct %264 %267 
                                       f32_2 %269 = OpFMul %261 %268 
                                       f32_4 %270 = OpLoad %36 
                                       f32_4 %271 = OpVectorShuffle %270 %269 4 5 2 3 
                                                      OpStore %36 %271 
                                       f32_4 %272 = OpLoad %61 
                                       f32_2 %273 = OpVectorShuffle %272 %272 3 3 
                                       f32_4 %274 = OpLoad %36 
                                       f32_2 %275 = OpVectorShuffle %274 %274 0 1 
                                       f32_2 %276 = OpFDiv %273 %275 
                                       f32_4 %277 = OpLoad %36 
                                       f32_4 %278 = OpVectorShuffle %277 %276 4 5 2 3 
                                                      OpStore %36 %278 
                                Private f32* %280 = OpAccessChain %61 %216 
                                         f32 %281 = OpLoad %280 
                                Uniform f32* %282 = OpAccessChain %24 %40 %114 
                                         f32 %283 = OpLoad %282 
                                         f32 %284 = OpFDiv %281 %283 
                                                      OpStore %279 %284 
                                         f32 %285 = OpLoad %279 
                                         f32 %286 = OpFNegate %285 
                                         f32 %287 = OpFAdd %286 %134 
                                                      OpStore %279 %287 
                                         f32 %288 = OpLoad %279 
                                Uniform f32* %289 = OpAccessChain %24 %40 %216 
                                         f32 %290 = OpLoad %289 
                                         f32 %291 = OpFMul %288 %290 
                                                      OpStore %279 %291 
                                         f32 %292 = OpLoad %279 
                                         f32 %294 = OpExtInst %1 40 %292 %293 
                                                      OpStore %279 %294 
                                         f32 %296 = OpLoad %279 
                                Uniform f32* %298 = OpAccessChain %24 %297 %216 
                                         f32 %299 = OpLoad %298 
                                         f32 %300 = OpFMul %296 %299 
                                Uniform f32* %301 = OpAccessChain %24 %297 %124 
                                         f32 %302 = OpLoad %301 
                                         f32 %303 = OpFAdd %300 %302 
                                                      OpStore vs_TEXCOORDn0 %303 
                                       f32_4 %304 = OpLoad %36 
                                       f32_2 %305 = OpVectorShuffle %304 %304 0 1 
                                       f32_4 %306 = OpLoad %36 
                                       f32_2 %307 = OpVectorShuffle %306 %306 0 1 
                                         f32 %308 = OpDot %305 %307 
                                                      OpStore %279 %308 
                                Uniform f32* %310 = OpAccessChain %24 %309 
                                         f32 %311 = OpLoad %310 
                                Uniform f32* %313 = OpAccessChain %24 %312 
                                         f32 %314 = OpLoad %313 
                                       f32_2 %315 = OpCompositeConstruct %311 %314 
                                       f32_2 %318 = OpFMul %315 %317 
                                       f32_4 %319 = OpLoad %36 
                                       f32_2 %320 = OpVectorShuffle %319 %319 0 1 
                                       f32_2 %321 = OpFAdd %318 %320 
                                       f32_4 %322 = OpLoad %36 
                                       f32_4 %323 = OpVectorShuffle %322 %321 4 5 2 3 
                                                      OpStore %36 %323 
                                       f32_4 %325 = OpLoad %36 
                                       f32_2 %326 = OpVectorShuffle %325 %325 0 1 
                                       f32_2 %327 = OpFDiv %317 %326 
                                       f32_4 %328 = OpLoad vs_TEXCOORD2 
                                       f32_4 %329 = OpVectorShuffle %328 %327 0 1 4 5 
                                                      OpStore vs_TEXCOORD2 %329 
                                         f32 %330 = OpLoad %279 
                                         f32 %331 = OpExtInst %1 32 %330 
                                                      OpStore %279 %331 
                                  Input f32* %335 = OpAccessChain %333 %114 
                                         f32 %336 = OpLoad %335 
                                         f32 %337 = OpExtInst %1 4 %336 
                                Uniform f32* %339 = OpAccessChain %24 %338 
                                         f32 %340 = OpLoad %339 
                                         f32 %341 = OpFMul %337 %340 
                                Private f32* %342 = OpAccessChain %36 %203 
                                                      OpStore %342 %341 
                                Uniform f32* %345 = OpAccessChain %24 %344 
                                         f32 %346 = OpLoad %345 
                                         f32 %347 = OpFAdd %346 %134 
                                Private f32* %348 = OpAccessChain %343 %203 
                                                      OpStore %348 %347 
                                Private f32* %349 = OpAccessChain %343 %203 
                                         f32 %350 = OpLoad %349 
                                Private f32* %351 = OpAccessChain %36 %203 
                                         f32 %352 = OpLoad %351 
                                         f32 %353 = OpFMul %350 %352 
                                Private f32* %354 = OpAccessChain %36 %203 
                                                      OpStore %354 %353 
                                         f32 %355 = OpLoad %279 
                                Private f32* %356 = OpAccessChain %36 %203 
                                         f32 %357 = OpLoad %356 
                                         f32 %358 = OpFMul %355 %357 
                                Private f32* %359 = OpAccessChain %343 %203 
                                                      OpStore %359 %358 
                                Uniform f32* %362 = OpAccessChain %24 %361 
                                         f32 %363 = OpLoad %362 
                                         f32 %364 = OpFNegate %363 
                                         f32 %365 = OpFAdd %364 %134 
                                                      OpStore %360 %365 
                                         f32 %366 = OpLoad %360 
                                Private f32* %367 = OpAccessChain %343 %203 
                                         f32 %368 = OpLoad %367 
                                         f32 %369 = OpExtInst %1 4 %368 
                                         f32 %370 = OpFMul %366 %369 
                                                      OpStore %360 %370 
                                         f32 %371 = OpLoad %279 
                                Private f32* %372 = OpAccessChain %36 %203 
                                         f32 %373 = OpLoad %372 
                                         f32 %374 = OpFMul %371 %373 
                                         f32 %375 = OpLoad %360 
                                         f32 %376 = OpFNegate %375 
                                         f32 %377 = OpFAdd %374 %376 
                                                      OpStore %279 %377 
                                         f32 %378 = OpLoad %180 
                                         f32 %379 = OpExtInst %1 4 %378 
                                         f32 %380 = OpLoad %279 
                                         f32 %381 = OpFMul %379 %380 
                                         f32 %382 = OpLoad %360 
                                         f32 %383 = OpFAdd %381 %382 
                                                      OpStore %180 %383 
                                Uniform f32* %387 = OpAccessChain %24 %240 %39 %124 
                                         f32 %388 = OpLoad %387 
                                        bool %389 = OpFOrdEqual %388 %293 
                                                      OpStore %386 %389 
                                        bool %390 = OpLoad %386 
                                                      OpSelectionMerge %394 None 
                                                      OpBranchConditional %390 %393 %396 
                                             %393 = OpLabel 
                                         f32 %395 = OpLoad %180 
                                                      OpStore %392 %395 
                                                      OpBranch %394 
                                             %396 = OpLabel 
                                Private f32* %397 = OpAccessChain %343 %203 
                                         f32 %398 = OpLoad %397 
                                                      OpStore %392 %398 
                                                      OpBranch %394 
                                             %394 = OpLabel 
                                         f32 %399 = OpLoad %392 
                                                      OpStore %180 %399 
                                Uniform f32* %401 = OpAccessChain %24 %400 
                                         f32 %402 = OpLoad %401 
                                Uniform f32* %404 = OpAccessChain %24 %403 
                                         f32 %405 = OpLoad %404 
                                         f32 %406 = OpFMul %402 %405 
                                                      OpStore %279 %406 
                                         f32 %407 = OpLoad %279 
                                         f32 %408 = OpLoad %180 
                                         f32 %409 = OpFMul %407 %408 
                                         f32 %410 = OpFAdd %409 %134 
                                                      OpStore %279 %410 
                                         f32 %411 = OpLoad %180 
                                         f32 %412 = OpLoad %279 
                                         f32 %413 = OpFDiv %411 %412 
                                Private f32* %414 = OpAccessChain %36 %203 
                                                      OpStore %414 %413 
                                Uniform f32* %416 = OpAccessChain %24 %415 
                                         f32 %417 = OpLoad %416 
                                Uniform f32* %418 = OpAccessChain %24 %403 
                                         f32 %419 = OpLoad %418 
                                         f32 %420 = OpFMul %417 %419 
                                                      OpStore %279 %420 
                                Private f32* %421 = OpAccessChain %36 %203 
                                         f32 %422 = OpLoad %421 
                                         f32 %423 = OpLoad %279 
                                         f32 %424 = OpFMul %422 %423 
                                                      OpStore %279 %424 
                                         f32 %425 = OpLoad %279 
                                         f32 %426 = OpExtInst %1 37 %425 %134 
                                Private f32* %427 = OpAccessChain %343 %203 
                                                      OpStore %427 %426 
                                Private f32* %428 = OpAccessChain %343 %203 
                                         f32 %429 = OpLoad %428 
                                         f32 %430 = OpExtInst %1 31 %429 
                                Private f32* %431 = OpAccessChain %343 %203 
                                                      OpStore %431 %430 
                                       f32_4 %432 = OpLoad %153 
                                       f32_2 %433 = OpLoad %343 
                                       f32_4 %434 = OpVectorShuffle %433 %433 0 0 0 0 
                                       f32_4 %435 = OpFMul %432 %434 
                                                      OpStore %61 %435 
                                       f32_4 %437 = OpLoad %137 
                                       f32_3 %438 = OpVectorShuffle %437 %437 0 1 2 
                                       f32_4 %439 = OpLoad %137 
                                       f32_3 %440 = OpVectorShuffle %439 %439 3 3 3 
                                       f32_3 %441 = OpFMul %438 %440 
                                       f32_4 %442 = OpLoad %61 
                                       f32_3 %443 = OpVectorShuffle %442 %442 0 1 2 
                                       f32_3 %444 = OpFAdd %441 %443 
                                       f32_4 %445 = OpLoad %436 
                                       f32_4 %446 = OpVectorShuffle %445 %444 4 5 6 3 
                                                      OpStore %436 %446 
                                Private f32* %447 = OpAccessChain %86 %124 
                                         f32 %448 = OpLoad %447 
                                Uniform f32* %449 = OpAccessChain %24 %123 %124 
                                         f32 %450 = OpLoad %449 
                                         f32 %451 = OpFMul %448 %450 
                                Private f32* %452 = OpAccessChain %61 %124 
                                         f32 %453 = OpLoad %452 
                                         f32 %454 = OpFAdd %451 %453 
                                 Output f32* %455 = OpAccessChain %436 %124 
                                                      OpStore %455 %454 
                              Uniform f32_4* %457 = OpAccessChain %24 %456 
                                       f32_4 %458 = OpLoad %457 
                                       f32_4 %461 = OpExtInst %1 40 %458 %460 
                                                      OpStore %61 %461 
                                       f32_4 %462 = OpLoad %61 
                                       f32_4 %465 = OpExtInst %1 37 %462 %464 
                                                      OpStore %61 %465 
                                       f32_2 %466 = OpLoad %9 
                                       f32_4 %467 = OpLoad %61 
                                       f32_2 %468 = OpVectorShuffle %467 %467 0 1 
                                       f32_2 %469 = OpFNegate %468 
                                       f32_2 %470 = OpFAdd %466 %469 
                                                      OpStore %343 %470 
                                       f32_2 %471 = OpLoad %9 
                                       f32_2 %474 = OpFMul %471 %473 
                                       f32_4 %475 = OpLoad %61 
                                       f32_2 %476 = OpVectorShuffle %475 %475 0 1 
                                       f32_2 %477 = OpFNegate %476 
                                       f32_2 %478 = OpFAdd %474 %477 
                                                      OpStore %9 %478 
                                       f32_4 %479 = OpLoad %61 
                                       f32_2 %480 = OpVectorShuffle %479 %479 2 3 
                                       f32_2 %481 = OpFNegate %480 
                                       f32_2 %482 = OpLoad %9 
                                       f32_2 %483 = OpFAdd %481 %482 
                                       f32_4 %484 = OpLoad vs_TEXCOORD2 
                                       f32_4 %485 = OpVectorShuffle %484 %483 4 5 2 3 
                                                      OpStore vs_TEXCOORD2 %485 
                                       f32_4 %486 = OpLoad %61 
                                       f32_2 %487 = OpVectorShuffle %486 %486 0 1 
                                       f32_2 %488 = OpFNegate %487 
                                       f32_4 %489 = OpLoad %61 
                                       f32_2 %490 = OpVectorShuffle %489 %489 2 3 
                                       f32_2 %491 = OpFAdd %488 %490 
                                                      OpStore %9 %491 
                                       f32_2 %493 = OpLoad %343 
                                       f32_2 %494 = OpLoad %9 
                                       f32_2 %495 = OpFDiv %493 %494 
                                       f32_4 %496 = OpLoad vs_TEXCOORD0 
                                       f32_4 %497 = OpVectorShuffle %496 %495 0 1 4 5 
                                                      OpStore vs_TEXCOORD0 %497 
                                       f32_2 %499 = OpLoad %498 
                                       f32_4 %500 = OpLoad vs_TEXCOORD0 
                                       f32_4 %501 = OpVectorShuffle %500 %499 4 5 2 3 
                                                      OpStore vs_TEXCOORD0 %501 
                                  Input f32* %503 = OpAccessChain %333 %114 
                                         f32 %504 = OpLoad %503 
                                        bool %505 = OpFOrdGreaterThanEqual %293 %504 
                                                      OpStore %502 %505 
                                        bool %506 = OpLoad %502 
                                         f32 %507 = OpSelect %506 %134 %293 
                                Private f32* %508 = OpAccessChain %9 %203 
                                                      OpStore %508 %507 
                                Uniform f32* %512 = OpAccessChain %24 %511 
                                         f32 %513 = OpLoad %512 
                                         f32 %514 = OpFNegate %513 
                                Uniform f32* %516 = OpAccessChain %24 %515 
                                         f32 %517 = OpLoad %516 
                                         f32 %518 = OpFAdd %514 %517 
                                Private f32* %519 = OpAccessChain %510 %203 
                                                      OpStore %519 %518 
                                Private f32* %520 = OpAccessChain %9 %203 
                                         f32 %521 = OpLoad %520 
                                Private f32* %522 = OpAccessChain %510 %203 
                                         f32 %523 = OpLoad %522 
                                         f32 %524 = OpFMul %521 %523 
                                Uniform f32* %525 = OpAccessChain %24 %511 
                                         f32 %526 = OpLoad %525 
                                         f32 %527 = OpFAdd %524 %526 
                                Private f32* %528 = OpAccessChain %9 %203 
                                                      OpStore %528 %527 
                                Private f32* %529 = OpAccessChain %9 %203 
                                         f32 %530 = OpLoad %529 
                                         f32 %531 = OpFMul %530 %316 
                                Uniform f32* %533 = OpAccessChain %24 %532 
                                         f32 %534 = OpLoad %533 
                                         f32 %535 = OpFAdd %531 %534 
                                Private f32* %536 = OpAccessChain %9 %203 
                                                      OpStore %536 %535 
                                Private f32* %537 = OpAccessChain %9 %203 
                                         f32 %538 = OpLoad %537 
                                Uniform f32* %539 = OpAccessChain %24 %403 
                                         f32 %540 = OpLoad %539 
                                         f32 %541 = OpFMul %538 %540 
                                Private f32* %542 = OpAccessChain %9 %203 
                                                      OpStore %542 %541 
                                Private f32* %543 = OpAccessChain %9 %203 
                                         f32 %544 = OpLoad %543 
                                         f32 %545 = OpFNegate %544 
                                         f32 %547 = OpFMul %545 %546 
                                         f32 %548 = OpFAdd %547 %546 
                                Private f32* %549 = OpAccessChain %9 %203 
                                                      OpStore %549 %548 
                                Private f32* %550 = OpAccessChain %9 %203 
                                         f32 %551 = OpLoad %550 
                                Private f32* %552 = OpAccessChain %36 %203 
                                         f32 %553 = OpLoad %552 
                                         f32 %554 = OpFMul %551 %553 
                                         f32 %556 = OpFAdd %554 %555 
                                Private f32* %557 = OpAccessChain %36 %124 
                                                      OpStore %557 %556 
                                       f32_4 %559 = OpLoad %36 
                                       f32_2 %560 = OpVectorShuffle %559 %559 0 3 
                                       f32_4 %561 = OpLoad vs_TEXCOORD1 
                                       f32_4 %562 = OpVectorShuffle %561 %560 4 1 2 5 
                                                      OpStore vs_TEXCOORD1 %562 
                                         f32 %563 = OpLoad %279 
                                         f32 %564 = OpFNegate %563 
                                         f32 %565 = OpFMul %564 %546 
                                Private f32* %566 = OpAccessChain %36 %124 
                                         f32 %567 = OpLoad %566 
                                         f32 %568 = OpFAdd %565 %567 
                                 Output f32* %569 = OpAccessChain vs_TEXCOORD1 %114 
                                                      OpStore %569 %568 
                                         f32 %570 = OpLoad %279 
                                         f32 %571 = OpFMul %570 %546 
                                Private f32* %572 = OpAccessChain %36 %124 
                                         f32 %573 = OpLoad %572 
                                         f32 %574 = OpFAdd %571 %573 
                                 Output f32* %575 = OpAccessChain vs_TEXCOORD1 %216 
                                                      OpStore %575 %574 
                                  Input f32* %577 = OpAccessChain %129 %124 
                                         f32 %578 = OpLoad %577 
                                 Output f32* %579 = OpAccessChain vs_TEXCOORD3 %216 
                                                      OpStore %579 %578 
                                 Output f32* %580 = OpAccessChain vs_TEXCOORD3 %124 
                                                      OpStore %580 %293 
                                Uniform f32* %582 = OpAccessChain %24 %581 
                                         f32 %583 = OpLoad %582 
                                Uniform f32* %585 = OpAccessChain %24 %584 
                                         f32 %586 = OpLoad %585 
                                Uniform f32* %588 = OpAccessChain %24 %587 
                                         f32 %589 = OpLoad %588 
                                Uniform f32* %591 = OpAccessChain %24 %590 
                                         f32 %592 = OpLoad %591 
                                       f32_4 %593 = OpCompositeConstruct %583 %586 %589 %592 
                                Uniform f32* %595 = OpAccessChain %24 %594 
                                         f32 %596 = OpLoad %595 
                                Uniform f32* %597 = OpAccessChain %24 %594 
                                         f32 %598 = OpLoad %597 
                                Uniform f32* %599 = OpAccessChain %24 %594 
                                         f32 %600 = OpLoad %599 
                                Uniform f32* %601 = OpAccessChain %24 %594 
                                         f32 %602 = OpLoad %601 
                                       f32_4 %603 = OpCompositeConstruct %596 %598 %600 %602 
                                         f32 %604 = OpCompositeExtract %603 0 
                                         f32 %605 = OpCompositeExtract %603 1 
                                         f32 %606 = OpCompositeExtract %603 2 
                                         f32 %607 = OpCompositeExtract %603 3 
                                       f32_4 %608 = OpCompositeConstruct %604 %605 %606 %607 
                                       f32_4 %609 = OpFMul %593 %608 
                                                      OpStore %36 %609 
                                       f32_4 %610 = OpLoad %36 
                                       f32_2 %611 = OpVectorShuffle %610 %610 2 3 
                                       f32_2 %612 = OpFNegate %611 
                                Uniform f32* %613 = OpAccessChain %24 %338 
                                         f32 %614 = OpLoad %613 
                                       f32_2 %615 = OpCompositeConstruct %614 %614 
                                       f32_2 %616 = OpFMul %612 %615 
                                       f32_3 %617 = OpLoad %510 
                                       f32_3 %618 = OpVectorShuffle %617 %616 3 1 4 
                                                      OpStore %510 %618 
                                       f32_3 %619 = OpLoad %510 
                                       f32_2 %620 = OpVectorShuffle %619 %619 0 2 
                                Uniform f32* %622 = OpAccessChain %24 %621 
                                         f32 %623 = OpLoad %622 
                                Uniform f32* %625 = OpAccessChain %24 %624 
                                         f32 %626 = OpLoad %625 
                                       f32_2 %627 = OpCompositeConstruct %623 %626 
                                       f32_2 %628 = OpFDiv %620 %627 
                                       f32_3 %629 = OpLoad %510 
                                       f32_3 %630 = OpVectorShuffle %629 %628 3 1 4 
                                                      OpStore %510 %630 
                                       f32_3 %631 = OpLoad %510 
                                       f32_2 %632 = OpVectorShuffle %631 %631 0 2 
                                       f32_2 %633 = OpLoad %498 
                                       f32_2 %634 = OpFAdd %632 %633 
                                       f32_4 %635 = OpLoad vs_TEXCOORD3 
                                       f32_4 %636 = OpVectorShuffle %635 %634 4 5 2 3 
                                                      OpStore vs_TEXCOORD3 %636 
                                Private f32* %637 = OpAccessChain %36 %203 
                                         f32 %638 = OpLoad %637 
                                         f32 %639 = OpLoad %180 
                                         f32 %640 = OpFMul %638 %639 
                                         f32 %641 = OpFAdd %640 %134 
                                Private f32* %642 = OpAccessChain %510 %203 
                                                      OpStore %642 %641 
                                         f32 %643 = OpLoad %180 
                                Private f32* %644 = OpAccessChain %510 %203 
                                         f32 %645 = OpLoad %644 
                                         f32 %646 = OpFDiv %643 %645 
                                Private f32* %647 = OpAccessChain %510 %203 
                                                      OpStore %647 %646 
                                Private f32* %648 = OpAccessChain %510 %203 
                                         f32 %649 = OpLoad %648 
                                Private f32* %650 = OpAccessChain %36 %114 
                                         f32 %651 = OpLoad %650 
                                         f32 %652 = OpFMul %649 %651 
                                                      OpStore %180 %652 
                                Private f32* %653 = OpAccessChain %9 %203 
                                         f32 %654 = OpLoad %653 
                                Private f32* %655 = OpAccessChain %510 %203 
                                         f32 %656 = OpLoad %655 
                                         f32 %657 = OpFMul %654 %656 
                                         f32 %658 = OpFAdd %657 %555 
                                Private f32* %659 = OpAccessChain %9 %203 
                                                      OpStore %659 %658 
                                Private f32* %662 = OpAccessChain %510 %203 
                                         f32 %663 = OpLoad %662 
                                 Output f32* %664 = OpAccessChain vs_TEXCOORD4 %203 
                                                      OpStore %664 %663 
                                         f32 %665 = OpLoad %180 
                                         f32 %666 = OpFNegate %665 
                                         f32 %667 = OpFMul %666 %546 
                                Private f32* %668 = OpAccessChain %9 %203 
                                         f32 %669 = OpLoad %668 
                                         f32 %670 = OpFAdd %667 %669 
                                 Output f32* %671 = OpAccessChain vs_TEXCOORD4 %114 
                                                      OpStore %671 %670 
                                 Output f32* %672 = OpAccessChain %118 %45 %114 
                                         f32 %673 = OpLoad %672 
                                         f32 %674 = OpFNegate %673 
                                 Output f32* %675 = OpAccessChain %118 %45 %114 
                                                      OpStore %675 %674 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 207
; Schema: 0
                                               OpCapability Shader 
                                        %1 = OpExtInstImport "GLSL.std.450" 
                                               OpMemoryModel Logical GLSL450 
                                               OpEntryPoint Fragment %4 "main" %21 %35 %80 %88 %104 %134 %187 %191 
                                               OpExecutionMode %4 OriginUpperLeft 
                                               OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                               OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                               OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                               OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                               OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                               OpName vs_TEXCOORDn0 "vs_TEXCOORDn0" 
                                               OpDecorate %12 DescriptorSet 12 
                                               OpDecorate %12 Binding 12 
                                               OpDecorate %16 DescriptorSet 16 
                                               OpDecorate %16 Binding 16 
                                               OpDecorate vs_TEXCOORD3 Location 21 
                                               OpDecorate vs_TEXCOORD4 Location 35 
                                               OpMemberDecorate %53 0 Offset 53 
                                               OpMemberDecorate %53 1 Offset 53 
                                               OpMemberDecorate %53 2 Offset 53 
                                               OpDecorate %53 Block 
                                               OpDecorate %55 DescriptorSet 55 
                                               OpDecorate %55 Binding 55 
                                               OpDecorate vs_TEXCOORD0 Location 80 
                                               OpDecorate vs_TEXCOORD1 Location 88 
                                               OpDecorate %104 Location 104 
                                               OpDecorate vs_TEXCOORD2 Location 134 
                                               OpDecorate %187 Location 187 
                                               OpDecorate vs_TEXCOORDn0 Location 191 
                                        %2 = OpTypeVoid 
                                        %3 = OpTypeFunction %2 
                                        %6 = OpTypeFloat 32 
                                        %7 = OpTypeVector %6 4 
                                        %8 = OpTypePointer Private %7 
                         Private f32_4* %9 = OpVariable Private 
                                       %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                       %11 = OpTypePointer UniformConstant %10 
  UniformConstant read_only Texture2D* %12 = OpVariable UniformConstant 
                                       %14 = OpTypeSampler 
                                       %15 = OpTypePointer UniformConstant %14 
              UniformConstant sampler* %16 = OpVariable UniformConstant 
                                       %18 = OpTypeSampledImage %10 
                                       %20 = OpTypePointer Input %7 
                 Input f32_4* vs_TEXCOORD3 = OpVariable Input 
                                       %22 = OpTypeVector %6 2 
                                       %26 = OpTypeInt 32 0 
                                   u32 %27 = OpConstant 3 
                                   u32 %29 = OpConstant 0 
                                       %30 = OpTypePointer Private %6 
                                       %34 = OpTypePointer Input %22 
                 Input f32_2* vs_TEXCOORD4 = OpVariable Input 
                                       %36 = OpTypePointer Input %6 
                                   u32 %40 = OpConstant 1 
                                   f32 %48 = OpConstant 3.674022E-40 
                                   f32 %49 = OpConstant 3.674022E-40 
                        Private f32_4* %52 = OpVariable Private 
                                       %53 = OpTypeStruct %7 %7 %7 
                                       %54 = OpTypePointer Uniform %53 
Uniform struct {f32_4; f32_4; f32_4;}* %55 = OpVariable Uniform 
                                       %56 = OpTypeInt 32 1 
                                   i32 %57 = OpConstant 1 
                                       %58 = OpTypeVector %6 3 
                                       %59 = OpTypePointer Uniform %7 
                                       %69 = OpTypePointer Uniform %6 
                 Input f32_4* vs_TEXCOORD0 = OpVariable Input 
                 Input f32_4* vs_TEXCOORD1 = OpVariable Input 
                       Private f32_4* %101 = OpVariable Private 
                         Input f32_4* %104 = OpVariable Input 
                                  i32 %121 = OpConstant 2 
                 Input f32_4* vs_TEXCOORD2 = OpVariable Input 
                                  i32 %171 = OpConstant 0 
                         Private f32* %179 = OpVariable Private 
                                  u32 %182 = OpConstant 2 
                                      %186 = OpTypePointer Output %7 
                        Output f32_4* %187 = OpVariable Output 
                                      %189 = OpTypePointer Output %6 
                  Input f32* vs_TEXCOORDn0 = OpVariable Input 
                                   void %4 = OpFunction None %3 
                                        %5 = OpLabel 
                   read_only Texture2D %13 = OpLoad %12 
                               sampler %17 = OpLoad %16 
            read_only Texture2DSampled %19 = OpSampledImage %13 %17 
                                 f32_4 %23 = OpLoad vs_TEXCOORD3 
                                 f32_2 %24 = OpVectorShuffle %23 %23 0 1 
                                 f32_4 %25 = OpImageSampleImplicitLod %19 %24 
                                   f32 %28 = OpCompositeExtract %25 3 
                          Private f32* %31 = OpAccessChain %9 %29 
                                               OpStore %31 %28 
                          Private f32* %32 = OpAccessChain %9 %29 
                                   f32 %33 = OpLoad %32 
                            Input f32* %37 = OpAccessChain vs_TEXCOORD4 %29 
                                   f32 %38 = OpLoad %37 
                                   f32 %39 = OpFMul %33 %38 
                            Input f32* %41 = OpAccessChain vs_TEXCOORD4 %40 
                                   f32 %42 = OpLoad %41 
                                   f32 %43 = OpFNegate %42 
                                   f32 %44 = OpFAdd %39 %43 
                          Private f32* %45 = OpAccessChain %9 %29 
                                               OpStore %45 %44 
                          Private f32* %46 = OpAccessChain %9 %29 
                                   f32 %47 = OpLoad %46 
                                   f32 %50 = OpExtInst %1 43 %47 %48 %49 
                          Private f32* %51 = OpAccessChain %9 %29 
                                               OpStore %51 %50 
                        Uniform f32_4* %60 = OpAccessChain %55 %57 
                                 f32_4 %61 = OpLoad %60 
                                 f32_3 %62 = OpVectorShuffle %61 %61 3 3 3 
                        Uniform f32_4* %63 = OpAccessChain %55 %57 
                                 f32_4 %64 = OpLoad %63 
                                 f32_3 %65 = OpVectorShuffle %64 %64 0 1 2 
                                 f32_3 %66 = OpFMul %62 %65 
                                 f32_4 %67 = OpLoad %52 
                                 f32_4 %68 = OpVectorShuffle %67 %66 4 5 6 3 
                                               OpStore %52 %68 
                          Uniform f32* %70 = OpAccessChain %55 %57 %27 
                                   f32 %71 = OpLoad %70 
                          Private f32* %72 = OpAccessChain %52 %27 
                                               OpStore %72 %71 
                                 f32_4 %73 = OpLoad %9 
                                 f32_4 %74 = OpVectorShuffle %73 %73 0 0 0 0 
                                 f32_4 %75 = OpLoad %52 
                                 f32_4 %76 = OpFMul %74 %75 
                                               OpStore %9 %76 
                   read_only Texture2D %77 = OpLoad %12 
                               sampler %78 = OpLoad %16 
            read_only Texture2DSampled %79 = OpSampledImage %77 %78 
                                 f32_4 %81 = OpLoad vs_TEXCOORD0 
                                 f32_2 %82 = OpVectorShuffle %81 %81 0 1 
                                 f32_4 %83 = OpImageSampleImplicitLod %79 %82 
                                   f32 %84 = OpCompositeExtract %83 3 
                          Private f32* %85 = OpAccessChain %52 %29 
                                               OpStore %85 %84 
                          Private f32* %86 = OpAccessChain %52 %29 
                                   f32 %87 = OpLoad %86 
                            Input f32* %89 = OpAccessChain vs_TEXCOORD1 %29 
                                   f32 %90 = OpLoad %89 
                                   f32 %91 = OpFMul %87 %90 
                            Input f32* %92 = OpAccessChain vs_TEXCOORD1 %27 
                                   f32 %93 = OpLoad %92 
                                   f32 %94 = OpFNegate %93 
                                   f32 %95 = OpFAdd %91 %94 
                          Private f32* %96 = OpAccessChain %52 %29 
                                               OpStore %96 %95 
                          Private f32* %97 = OpAccessChain %52 %29 
                                   f32 %98 = OpLoad %97 
                                   f32 %99 = OpExtInst %1 43 %98 %48 %49 
                         Private f32* %100 = OpAccessChain %52 %29 
                                               OpStore %100 %99 
                                f32_4 %102 = OpLoad %52 
                                f32_4 %103 = OpVectorShuffle %102 %102 0 0 0 0 
                                f32_4 %105 = OpLoad %104 
                                f32_4 %106 = OpFMul %103 %105 
                                               OpStore %101 %106 
                           Input f32* %107 = OpAccessChain %104 %27 
                                  f32 %108 = OpLoad %107 
                                  f32 %109 = OpFNegate %108 
                         Private f32* %110 = OpAccessChain %52 %29 
                                  f32 %111 = OpLoad %110 
                                  f32 %112 = OpFMul %109 %111 
                                  f32 %113 = OpFAdd %112 %49 
                         Private f32* %114 = OpAccessChain %52 %29 
                                               OpStore %114 %113 
                                f32_4 %115 = OpLoad %9 
                                f32_4 %116 = OpLoad %52 
                                f32_4 %117 = OpVectorShuffle %116 %116 0 0 0 0 
                                f32_4 %118 = OpFMul %115 %117 
                                f32_4 %119 = OpLoad %101 
                                f32_4 %120 = OpFAdd %118 %119 
                                               OpStore %9 %120 
                       Uniform f32_4* %122 = OpAccessChain %55 %121 
                                f32_4 %123 = OpLoad %122 
                                f32_2 %124 = OpVectorShuffle %123 %123 0 1 
                                f32_2 %125 = OpFNegate %124 
                       Uniform f32_4* %126 = OpAccessChain %55 %121 
                                f32_4 %127 = OpLoad %126 
                                f32_2 %128 = OpVectorShuffle %127 %127 2 3 
                                f32_2 %129 = OpFAdd %125 %128 
                                f32_4 %130 = OpLoad %52 
                                f32_4 %131 = OpVectorShuffle %130 %129 4 5 2 3 
                                               OpStore %52 %131 
                                f32_4 %132 = OpLoad %52 
                                f32_2 %133 = OpVectorShuffle %132 %132 0 1 
                                f32_4 %135 = OpLoad vs_TEXCOORD2 
                                f32_2 %136 = OpVectorShuffle %135 %135 0 1 
                                f32_2 %137 = OpExtInst %1 4 %136 
                                f32_2 %138 = OpFNegate %137 
                                f32_2 %139 = OpFAdd %133 %138 
                                f32_4 %140 = OpLoad %52 
                                f32_4 %141 = OpVectorShuffle %140 %139 4 5 2 3 
                                               OpStore %52 %141 
                                f32_4 %142 = OpLoad %52 
                                f32_2 %143 = OpVectorShuffle %142 %142 0 1 
                                f32_4 %144 = OpLoad vs_TEXCOORD2 
                                f32_2 %145 = OpVectorShuffle %144 %144 2 3 
                                f32_2 %146 = OpFMul %143 %145 
                                f32_4 %147 = OpLoad %52 
                                f32_4 %148 = OpVectorShuffle %147 %146 4 5 2 3 
                                               OpStore %52 %148 
                                f32_4 %149 = OpLoad %52 
                                f32_2 %150 = OpVectorShuffle %149 %149 0 1 
                                f32_2 %151 = OpCompositeConstruct %48 %48 
                                f32_2 %152 = OpCompositeConstruct %49 %49 
                                f32_2 %153 = OpExtInst %1 43 %150 %151 %152 
                                f32_4 %154 = OpLoad %52 
                                f32_4 %155 = OpVectorShuffle %154 %153 4 5 2 3 
                                               OpStore %52 %155 
                         Private f32* %156 = OpAccessChain %52 %40 
                                  f32 %157 = OpLoad %156 
                         Private f32* %158 = OpAccessChain %52 %29 
                                  f32 %159 = OpLoad %158 
                                  f32 %160 = OpFMul %157 %159 
                         Private f32* %161 = OpAccessChain %52 %29 
                                               OpStore %161 %160 
                                f32_4 %162 = OpLoad %9 
                                f32_4 %163 = OpLoad %52 
                                f32_4 %164 = OpVectorShuffle %163 %163 0 0 0 0 
                                f32_4 %165 = OpFMul %162 %164 
                                               OpStore %9 %165 
                                f32_4 %166 = OpLoad %9 
                                f32_3 %167 = OpVectorShuffle %166 %166 0 1 2 
                                f32_4 %168 = OpLoad vs_TEXCOORD3 
                                f32_3 %169 = OpVectorShuffle %168 %168 2 2 2 
                                f32_3 %170 = OpFMul %167 %169 
                       Uniform f32_4* %172 = OpAccessChain %55 %171 
                                f32_4 %173 = OpLoad %172 
                                f32_3 %174 = OpVectorShuffle %173 %173 0 1 2 
                                f32_3 %175 = OpFNegate %174 
                                f32_3 %176 = OpFAdd %170 %175 
                                f32_4 %177 = OpLoad %9 
                                f32_4 %178 = OpVectorShuffle %177 %176 4 5 6 3 
                                               OpStore %9 %178 
                         Private f32* %180 = OpAccessChain %9 %27 
                                  f32 %181 = OpLoad %180 
                           Input f32* %183 = OpAccessChain vs_TEXCOORD3 %182 
                                  f32 %184 = OpLoad %183 
                                  f32 %185 = OpFMul %181 %184 
                                               OpStore %179 %185 
                                  f32 %188 = OpLoad %179 
                          Output f32* %190 = OpAccessChain %187 %27 
                                               OpStore %190 %188 
                                  f32 %192 = OpLoad vs_TEXCOORDn0 
                                               OpStore %179 %192 
                                  f32 %193 = OpLoad %179 
                                  f32 %194 = OpExtInst %1 43 %193 %48 %49 
                                               OpStore %179 %194 
                                  f32 %195 = OpLoad %179 
                                f32_3 %196 = OpCompositeConstruct %195 %195 %195 
                                f32_4 %197 = OpLoad %9 
                                f32_3 %198 = OpVectorShuffle %197 %197 0 1 2 
                                f32_3 %199 = OpFMul %196 %198 
                       Uniform f32_4* %200 = OpAccessChain %55 %171 
                                f32_4 %201 = OpLoad %200 
                                f32_3 %202 = OpVectorShuffle %201 %201 0 1 2 
                                f32_3 %203 = OpFAdd %199 %202 
                                f32_4 %204 = OpLoad %187 
                                f32_4 %205 = OpVectorShuffle %204 %203 4 5 6 3 
                                               OpStore %187 %205 
                                               OpReturn
                                               OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "FOG_LINEAR" "OUTLINE_ON" "UNDERLAY_ON" "UNITY_UI_CLIP_RECT" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "FOG_LINEAR" "OUTLINE_ON" "UNDERLAY_ON" "UNITY_UI_CLIP_RECT" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	vec4 _FaceColor;
uniform 	float _FaceDilate;
uniform 	float _OutlineSoftness;
uniform 	vec4 _OutlineColor;
uniform 	float _OutlineWidth;
uniform 	float _UnderlayOffsetX;
uniform 	float _UnderlayOffsetY;
uniform 	float _UnderlayDilate;
uniform 	float _UnderlaySoftness;
uniform 	float _WeightNormal;
uniform 	float _WeightBold;
uniform 	float _ScaleRatioA;
uniform 	float _ScaleRatioC;
uniform 	float _VertexOffsetX;
uniform 	float _VertexOffsetY;
uniform 	vec4 _ClipRect;
uniform 	float _MaskSoftnessX;
uniform 	float _MaskSoftnessY;
uniform 	float _TextureWidth;
uniform 	float _TextureHeight;
uniform 	float _GradientScale;
uniform 	float _ScaleX;
uniform 	float _ScaleY;
uniform 	float _PerspectiveFilter;
uniform 	float _Sharpness;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_COLOR0;
in  vec2 in_TEXCOORD0;
in  vec2 in_TEXCOORD1;
out vec4 vs_COLOR0;
out vec4 vs_COLOR1;
out vec4 vs_TEXCOORD0;
out vec4 vs_TEXCOORD1;
out vec4 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec2 vs_TEXCOORD4;
out float vs_TEXCOORDn0;
vec2 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
vec4 u_xlat6;
vec3 u_xlat7;
vec2 u_xlat8;
float u_xlat14;
float u_xlat15;
float u_xlat21;
bool u_xlatb21;
void main()
{
    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
    gl_Position = u_xlat2;
    vs_COLOR0.w = _FaceColor.w;
    u_xlat3.xyz = in_COLOR0.xyz;
    u_xlat3.w = 1.0;
    u_xlat4 = u_xlat3 * _FaceColor;
    u_xlat3.xyz = u_xlat4.www * u_xlat4.xyz;
    vs_COLOR0.xyz = u_xlat3.xyz;
    u_xlat5.xyz = (-u_xlat3.xyz);
    u_xlat5.w = (-u_xlat4.w);
    u_xlat6.xyz = _OutlineColor.www * _OutlineColor.xyz;
    u_xlat6.w = _OutlineColor.w;
    u_xlat5 = u_xlat5 + u_xlat6;
    u_xlat14 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat14 = inversesqrt(u_xlat14);
    u_xlat1.xyz = vec3(u_xlat14) * u_xlat1.xyz;
    u_xlat3.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat3.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat3.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat14 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat14 = inversesqrt(u_xlat14);
    u_xlat3.xyz = vec3(u_xlat14) * u_xlat3.xyz;
    u_xlat14 = dot(u_xlat3.xyz, u_xlat1.xyz);
    u_xlat1.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;
    u_xlat1.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat1.xy;
    u_xlat1.xy = abs(u_xlat1.xy) * vec2(_ScaleX, _ScaleY);
    u_xlat1.xy = u_xlat2.ww / u_xlat1.xy;
    vs_TEXCOORDn0 = u_xlat2.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat21 = dot(u_xlat1.xy, u_xlat1.xy);
    u_xlat1.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) * vec2(0.25, 0.25) + u_xlat1.xy;
    vs_TEXCOORD2.zw = vec2(0.25, 0.25) / u_xlat1.xy;
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.x = abs(in_TEXCOORD1.y) * _GradientScale;
    u_xlat8.x = _Sharpness + 1.0;
    u_xlat1.x = u_xlat8.x * u_xlat1.x;
    u_xlat8.x = u_xlat21 * u_xlat1.x;
    u_xlat15 = (-_PerspectiveFilter) + 1.0;
    u_xlat15 = u_xlat15 * abs(u_xlat8.x);
    u_xlat21 = u_xlat21 * u_xlat1.x + (-u_xlat15);
    u_xlat14 = abs(u_xlat14) * u_xlat21 + u_xlat15;
    u_xlatb21 = hlslcc_mtx4x4glstate_matrix_projection[3].w==0.0;
    u_xlat14 = (u_xlatb21) ? u_xlat14 : u_xlat8.x;
    u_xlat21 = _OutlineSoftness * _ScaleRatioA;
    u_xlat21 = u_xlat21 * u_xlat14 + 1.0;
    u_xlat1.x = u_xlat14 / u_xlat21;
    u_xlat21 = _OutlineWidth * _ScaleRatioA;
    u_xlat21 = u_xlat21 * 0.5;
    u_xlat8.x = u_xlat1.x * u_xlat21;
    u_xlat8.x = u_xlat8.x + u_xlat8.x;
    u_xlat8.x = min(u_xlat8.x, 1.0);
    u_xlat8.x = sqrt(u_xlat8.x);
    u_xlat2 = u_xlat5 * u_xlat8.xxxx;
    vs_COLOR1.xyz = u_xlat4.xyz * u_xlat4.www + u_xlat2.xyz;
    vs_COLOR1.w = u_xlat3.w * _FaceColor.w + u_xlat2.w;
    u_xlat2 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));
    u_xlat2 = min(u_xlat2, vec4(2e+10, 2e+10, 2e+10, 2e+10));
    u_xlat8.xy = u_xlat0.xy + (-u_xlat2.xy);
    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + (-u_xlat2.xy);
    vs_TEXCOORD2.xy = (-u_xlat2.zw) + u_xlat0.xy;
    u_xlat0.xy = (-u_xlat2.xy) + u_xlat2.zw;
    vs_TEXCOORD0.zw = u_xlat8.xy / u_xlat0.xy;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlatb0 = 0.0>=in_TEXCOORD1.y;
    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);
    u_xlat7.x = (-_WeightNormal) + _WeightBold;
    u_xlat0.x = u_xlat0.x * u_xlat7.x + _WeightNormal;
    u_xlat0.x = u_xlat0.x * 0.25 + _FaceDilate;
    u_xlat0.x = u_xlat0.x * _ScaleRatioA;
    u_xlat0.x = (-u_xlat0.x) * 0.5 + 0.5;
    u_xlat1.w = u_xlat0.x * u_xlat1.x + -0.5;
    vs_TEXCOORD1.y = (-u_xlat21) * u_xlat1.x + u_xlat1.w;
    vs_TEXCOORD1.z = u_xlat21 * u_xlat1.x + u_xlat1.w;
    vs_TEXCOORD1.xw = u_xlat1.xw;
    vs_TEXCOORD3.z = in_COLOR0.w;
    vs_TEXCOORD3.w = 0.0;
    u_xlat1 = vec4(_UnderlaySoftness, _UnderlayDilate, _UnderlayOffsetX, _UnderlayOffsetY) * vec4(vec4(_ScaleRatioC, _ScaleRatioC, _ScaleRatioC, _ScaleRatioC));
    u_xlat7.xz = (-u_xlat1.zw) * vec2(_GradientScale);
    u_xlat7.xz = u_xlat7.xz / vec2(_TextureWidth, _TextureHeight);
    vs_TEXCOORD3.xy = u_xlat7.xz + in_TEXCOORD0.xy;
    u_xlat7.x = u_xlat1.x * u_xlat14 + 1.0;
    u_xlat7.x = u_xlat14 / u_xlat7.x;
    u_xlat14 = u_xlat1.y * 0.5;
    u_xlat0.x = u_xlat0.x * u_xlat7.x + -0.5;
    vs_TEXCOORD4.y = (-u_xlat14) * u_xlat7.x + u_xlat0.x;
    vs_TEXCOORD4.x = u_xlat7.x;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 unity_FogColor;
uniform 	vec4 _UnderlayColor;
uniform 	vec4 _ClipRect;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
in  vec4 vs_COLOR0;
in  vec4 vs_COLOR1;
in  vec4 vs_TEXCOORD0;
in  vec4 vs_TEXCOORD1;
in  vec4 vs_TEXCOORD2;
in  vec4 vs_TEXCOORD3;
in  vec2 vs_TEXCOORD4;
in  float vs_TEXCOORDn0;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
float u_xlat12;
void main()
{
    u_xlat0 = texture(_MainTex, vs_TEXCOORD3.xy);
    u_xlat0.x = u_xlat0.w * vs_TEXCOORD4.x + (-vs_TEXCOORD4.y);
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat1.xyz = _UnderlayColor.www * _UnderlayColor.xyz;
    u_xlat1.w = _UnderlayColor.w;
    u_xlat0 = u_xlat0.xxxx * u_xlat1;
    u_xlat1 = vs_COLOR0 + (-vs_COLOR1);
    u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2.xy = u_xlat2.ww * vs_TEXCOORD1.xx + (-vs_TEXCOORD1.zy);
    u_xlat2.xy = clamp(u_xlat2.xy, 0.0, 1.0);
    u_xlat1 = u_xlat2.xxxx * u_xlat1 + vs_COLOR1;
    u_xlat3 = u_xlat2.yyyy * u_xlat1;
    u_xlat1.x = (-u_xlat1.w) * u_xlat2.y + 1.0;
    u_xlat0 = u_xlat0 * u_xlat1.xxxx + u_xlat3;
    u_xlat1.xy = (-_ClipRect.xy) + _ClipRect.zw;
    u_xlat1.xy = u_xlat1.xy + -abs(vs_TEXCOORD2.xy);
    u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD2.zw;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
    u_xlat1.x = u_xlat1.y * u_xlat1.x;
    u_xlat0 = u_xlat0 * u_xlat1.xxxx;
    u_xlat0.xyz = u_xlat0.xyz * vs_TEXCOORD3.zzz + (-unity_FogColor.xyz);
    u_xlat12 = u_xlat0.w * vs_TEXCOORD3.z;
    SV_Target0.w = u_xlat12;
    u_xlat12 = vs_TEXCOORDn0;
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
    SV_Target0.xyz = vec3(u_xlat12) * u_xlat0.xyz + unity_FogColor.xyz;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "FOG_LINEAR" "OUTLINE_ON" "UNDERLAY_ON" "UNITY_UI_CLIP_RECT" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 677
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %12 %118 %122 %129 %196 %295 %324 %333 %436 %492 %498 %558 %576 %661 
                                                      OpName vs_TEXCOORDn0 "vs_TEXCOORDn0" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpDecorate %12 Location 12 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpDecorate %19 ArrayStride 19 
                                                      OpDecorate %20 ArrayStride 20 
                                                      OpDecorate %21 ArrayStride 21 
                                                      OpMemberDecorate %22 0 Offset 22 
                                                      OpMemberDecorate %22 1 Offset 22 
                                                      OpMemberDecorate %22 2 Offset 22 
                                                      OpMemberDecorate %22 3 Offset 22 
                                                      OpMemberDecorate %22 4 Offset 22 
                                                      OpMemberDecorate %22 5 Offset 22 
                                                      OpMemberDecorate %22 6 Offset 22 
                                                      OpMemberDecorate %22 7 Offset 22 
                                                      OpMemberDecorate %22 8 Offset 22 
                                                      OpMemberDecorate %22 9 Offset 22 
                                                      OpMemberDecorate %22 10 Offset 22 
                                                      OpMemberDecorate %22 11 Offset 22 
                                                      OpMemberDecorate %22 12 Offset 22 
                                                      OpMemberDecorate %22 13 Offset 22 
                                                      OpMemberDecorate %22 14 Offset 22 
                                                      OpMemberDecorate %22 15 Offset 22 
                                                      OpMemberDecorate %22 16 Offset 22 
                                                      OpMemberDecorate %22 17 Offset 22 
                                                      OpMemberDecorate %22 18 Offset 22 
                                                      OpMemberDecorate %22 19 Offset 22 
                                                      OpMemberDecorate %22 20 Offset 22 
                                                      OpMemberDecorate %22 21 Offset 22 
                                                      OpMemberDecorate %22 22 Offset 22 
                                                      OpMemberDecorate %22 23 Offset 22 
                                                      OpMemberDecorate %22 24 Offset 22 
                                                      OpMemberDecorate %22 25 Offset 22 
                                                      OpMemberDecorate %22 26 Offset 22 
                                                      OpMemberDecorate %22 27 Offset 22 
                                                      OpMemberDecorate %22 28 Offset 22 
                                                      OpMemberDecorate %22 29 Offset 22 
                                                      OpMemberDecorate %22 30 Offset 22 
                                                      OpMemberDecorate %22 31 Offset 22 
                                                      OpMemberDecorate %22 32 Offset 22 
                                                      OpDecorate %22 Block 
                                                      OpDecorate %24 DescriptorSet 24 
                                                      OpDecorate %24 Binding 24 
                                                      OpMemberDecorate %116 0 BuiltIn 116 
                                                      OpMemberDecorate %116 1 BuiltIn 116 
                                                      OpMemberDecorate %116 2 BuiltIn 116 
                                                      OpDecorate %116 Block 
                                                      OpDecorate %122 Location 122 
                                                      OpDecorate %129 Location 129 
                                                      OpDecorate %196 Location 196 
                                                      OpDecorate vs_TEXCOORDn0 Location 295 
                                                      OpDecorate vs_TEXCOORD2 Location 324 
                                                      OpDecorate %333 Location 333 
                                                      OpDecorate %436 Location 436 
                                                      OpDecorate vs_TEXCOORD0 Location 492 
                                                      OpDecorate %498 Location 498 
                                                      OpDecorate vs_TEXCOORD1 Location 558 
                                                      OpDecorate vs_TEXCOORD3 Location 576 
                                                      OpDecorate vs_TEXCOORD4 Location 661 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 2 
                                               %8 = OpTypePointer Private %7 
                                Private f32_2* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 4 
                                              %11 = OpTypePointer Input %10 
                                 Input f32_4* %12 = OpVariable Input 
                                              %15 = OpTypeVector %6 3 
                                              %16 = OpTypeInt 32 0 
                                          u32 %17 = OpConstant 4 
                                              %18 = OpTypeArray %10 %17 
                                              %19 = OpTypeArray %10 %17 
                                              %20 = OpTypeArray %10 %17 
                                              %21 = OpTypeArray %10 %17 
                                              %22 = OpTypeStruct %15 %10 %10 %18 %19 %20 %21 %10 %10 %6 %6 %10 %6 %6 %6 %6 %6 %6 %6 %6 %6 %6 %6 %10 %6 %6 %6 %6 %6 %6 %6 %6 %6 
                                              %23 = OpTypePointer Uniform %22 
Uniform struct {f32_3; f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4[4]; f32_4; f32_4; f32; f32; f32_4; f32; f32; f32; f32; f32; f32; f32; f32; f32; f32; f32; f32_4; f32; f32; f32; f32; f32; f32; f32; f32; f32;}* %24 = OpVariable Uniform 
                                              %25 = OpTypeInt 32 1 
                                          i32 %26 = OpConstant 21 
                                              %27 = OpTypePointer Uniform %6 
                                          i32 %30 = OpConstant 22 
                                              %35 = OpTypePointer Private %10 
                               Private f32_4* %36 = OpVariable Private 
                                          i32 %39 = OpConstant 3 
                                          i32 %40 = OpConstant 1 
                                              %41 = OpTypePointer Uniform %10 
                                          i32 %45 = OpConstant 0 
                                          i32 %53 = OpConstant 2 
                               Private f32_4* %61 = OpVariable Private 
                                              %80 = OpTypePointer Uniform %15 
                               Private f32_4* %86 = OpVariable Private 
                                          i32 %89 = OpConstant 6 
                                         u32 %114 = OpConstant 1 
                                             %115 = OpTypeArray %6 %114 
                                             %116 = OpTypeStruct %10 %6 %115 
                                             %117 = OpTypePointer Output %116 
        Output struct {f32_4; f32; f32[1];}* %118 = OpVariable Output 
                                             %120 = OpTypePointer Output %10 
                               Output f32_4* %122 = OpVariable Output 
                                         i32 %123 = OpConstant 8 
                                         u32 %124 = OpConstant 3 
                                             %127 = OpTypePointer Output %6 
                                Input f32_4* %129 = OpVariable Input 
                                         f32 %134 = OpConstant 3.674022E-40 
                                             %135 = OpTypePointer Private %6 
                              Private f32_4* %137 = OpVariable Private 
                              Private f32_4* %153 = OpVariable Private 
                              Private f32_4* %163 = OpVariable Private 
                                         i32 %164 = OpConstant 11 
                                Private f32* %180 = OpVariable Private 
                                             %195 = OpTypePointer Input %15 
                                Input f32_3* %196 = OpVariable Input 
                                         i32 %198 = OpConstant 4 
                                         u32 %203 = OpConstant 0 
                                         u32 %216 = OpConstant 2 
                                         i32 %240 = OpConstant 5 
                                         i32 %262 = OpConstant 29 
                                         i32 %265 = OpConstant 30 
                                Private f32* %279 = OpVariable Private 
                                         f32 %293 = OpConstant 3.674022E-40 
                        Output f32* vs_TEXCOORDn0 = OpVariable Output 
                                         i32 %297 = OpConstant 7 
                                         i32 %309 = OpConstant 24 
                                         i32 %312 = OpConstant 25 
                                         f32 %316 = OpConstant 3.674022E-40 
                                       f32_2 %317 = OpConstantComposite %316 %316 
                       Output f32_4* vs_TEXCOORD2 = OpVariable Output 
                                             %332 = OpTypePointer Input %7 
                                Input f32_2* %333 = OpVariable Input 
                                             %334 = OpTypePointer Input %6 
                                         i32 %338 = OpConstant 28 
                              Private f32_2* %343 = OpVariable Private 
                                         i32 %344 = OpConstant 32 
                                Private f32* %360 = OpVariable Private 
                                         i32 %361 = OpConstant 31 
                                             %384 = OpTypeBool 
                                             %385 = OpTypePointer Private %384 
                               Private bool* %386 = OpVariable Private 
                                             %391 = OpTypePointer Function %6 
                                         i32 %400 = OpConstant 10 
                                         i32 %403 = OpConstant 19 
                                         i32 %415 = OpConstant 12 
                               Output f32_4* %436 = OpVariable Output 
                                         i32 %456 = OpConstant 23 
                                         f32 %459 = OpConstant 3.674022E-40 
                                       f32_4 %460 = OpConstantComposite %459 %459 %459 %459 
                                         f32 %463 = OpConstant 3.674022E-40 
                                       f32_4 %464 = OpConstantComposite %463 %463 %463 %463 
                                         f32 %472 = OpConstant 3.674022E-40 
                                       f32_2 %473 = OpConstantComposite %472 %472 
                       Output f32_4* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_2* %498 = OpVariable Input 
                               Private bool* %502 = OpVariable Private 
                                             %509 = OpTypePointer Private %15 
                              Private f32_3* %510 = OpVariable Private 
                                         i32 %511 = OpConstant 17 
                                         i32 %515 = OpConstant 18 
                                         i32 %532 = OpConstant 9 
                                         f32 %546 = OpConstant 3.674022E-40 
                                         f32 %555 = OpConstant 3.674022E-40 
                       Output f32_4* vs_TEXCOORD1 = OpVariable Output 
                       Output f32_4* vs_TEXCOORD3 = OpVariable Output 
                                         i32 %581 = OpConstant 16 
                                         i32 %584 = OpConstant 15 
                                         i32 %587 = OpConstant 13 
                                         i32 %590 = OpConstant 14 
                                         i32 %594 = OpConstant 20 
                                         i32 %621 = OpConstant 26 
                                         i32 %624 = OpConstant 27 
                                             %660 = OpTypePointer Output %7 
                       Output f32_2* vs_TEXCOORD4 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                               Function f32* %392 = OpVariable Function 
                                        f32_4 %13 = OpLoad %12 
                                        f32_2 %14 = OpVectorShuffle %13 %13 0 1 
                                 Uniform f32* %28 = OpAccessChain %24 %26 
                                          f32 %29 = OpLoad %28 
                                 Uniform f32* %31 = OpAccessChain %24 %30 
                                          f32 %32 = OpLoad %31 
                                        f32_2 %33 = OpCompositeConstruct %29 %32 
                                        f32_2 %34 = OpFAdd %14 %33 
                                                      OpStore %9 %34 
                                        f32_2 %37 = OpLoad %9 
                                        f32_4 %38 = OpVectorShuffle %37 %37 1 1 1 1 
                               Uniform f32_4* %42 = OpAccessChain %24 %39 %40 
                                        f32_4 %43 = OpLoad %42 
                                        f32_4 %44 = OpFMul %38 %43 
                                                      OpStore %36 %44 
                               Uniform f32_4* %46 = OpAccessChain %24 %39 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_2 %48 = OpLoad %9 
                                        f32_4 %49 = OpVectorShuffle %48 %48 0 0 0 0 
                                        f32_4 %50 = OpFMul %47 %49 
                                        f32_4 %51 = OpLoad %36 
                                        f32_4 %52 = OpFAdd %50 %51 
                                                      OpStore %36 %52 
                               Uniform f32_4* %54 = OpAccessChain %24 %39 %53 
                                        f32_4 %55 = OpLoad %54 
                                        f32_4 %56 = OpLoad %12 
                                        f32_4 %57 = OpVectorShuffle %56 %56 2 2 2 2 
                                        f32_4 %58 = OpFMul %55 %57 
                                        f32_4 %59 = OpLoad %36 
                                        f32_4 %60 = OpFAdd %58 %59 
                                                      OpStore %36 %60 
                                        f32_4 %62 = OpLoad %36 
                               Uniform f32_4* %63 = OpAccessChain %24 %39 %39 
                                        f32_4 %64 = OpLoad %63 
                                        f32_4 %65 = OpFAdd %62 %64 
                                                      OpStore %61 %65 
                               Uniform f32_4* %66 = OpAccessChain %24 %39 %39 
                                        f32_4 %67 = OpLoad %66 
                                        f32_3 %68 = OpVectorShuffle %67 %67 0 1 2 
                                        f32_4 %69 = OpLoad %12 
                                        f32_3 %70 = OpVectorShuffle %69 %69 3 3 3 
                                        f32_3 %71 = OpFMul %68 %70 
                                        f32_4 %72 = OpLoad %36 
                                        f32_3 %73 = OpVectorShuffle %72 %72 0 1 2 
                                        f32_3 %74 = OpFAdd %71 %73 
                                        f32_4 %75 = OpLoad %36 
                                        f32_4 %76 = OpVectorShuffle %75 %74 4 5 6 3 
                                                      OpStore %36 %76 
                                        f32_4 %77 = OpLoad %36 
                                        f32_3 %78 = OpVectorShuffle %77 %77 0 1 2 
                                        f32_3 %79 = OpFNegate %78 
                               Uniform f32_3* %81 = OpAccessChain %24 %45 
                                        f32_3 %82 = OpLoad %81 
                                        f32_3 %83 = OpFAdd %79 %82 
                                        f32_4 %84 = OpLoad %36 
                                        f32_4 %85 = OpVectorShuffle %84 %83 4 5 6 3 
                                                      OpStore %36 %85 
                                        f32_4 %87 = OpLoad %61 
                                        f32_4 %88 = OpVectorShuffle %87 %87 1 1 1 1 
                               Uniform f32_4* %90 = OpAccessChain %24 %89 %40 
                                        f32_4 %91 = OpLoad %90 
                                        f32_4 %92 = OpFMul %88 %91 
                                                      OpStore %86 %92 
                               Uniform f32_4* %93 = OpAccessChain %24 %89 %45 
                                        f32_4 %94 = OpLoad %93 
                                        f32_4 %95 = OpLoad %61 
                                        f32_4 %96 = OpVectorShuffle %95 %95 0 0 0 0 
                                        f32_4 %97 = OpFMul %94 %96 
                                        f32_4 %98 = OpLoad %86 
                                        f32_4 %99 = OpFAdd %97 %98 
                                                      OpStore %86 %99 
                              Uniform f32_4* %100 = OpAccessChain %24 %89 %53 
                                       f32_4 %101 = OpLoad %100 
                                       f32_4 %102 = OpLoad %61 
                                       f32_4 %103 = OpVectorShuffle %102 %102 2 2 2 2 
                                       f32_4 %104 = OpFMul %101 %103 
                                       f32_4 %105 = OpLoad %86 
                                       f32_4 %106 = OpFAdd %104 %105 
                                                      OpStore %86 %106 
                              Uniform f32_4* %107 = OpAccessChain %24 %89 %39 
                                       f32_4 %108 = OpLoad %107 
                                       f32_4 %109 = OpLoad %61 
                                       f32_4 %110 = OpVectorShuffle %109 %109 3 3 3 3 
                                       f32_4 %111 = OpFMul %108 %110 
                                       f32_4 %112 = OpLoad %86 
                                       f32_4 %113 = OpFAdd %111 %112 
                                                      OpStore %61 %113 
                                       f32_4 %119 = OpLoad %61 
                               Output f32_4* %121 = OpAccessChain %118 %45 
                                                      OpStore %121 %119 
                                Uniform f32* %125 = OpAccessChain %24 %123 %124 
                                         f32 %126 = OpLoad %125 
                                 Output f32* %128 = OpAccessChain %122 %124 
                                                      OpStore %128 %126 
                                       f32_4 %130 = OpLoad %129 
                                       f32_3 %131 = OpVectorShuffle %130 %130 0 1 2 
                                       f32_4 %132 = OpLoad %86 
                                       f32_4 %133 = OpVectorShuffle %132 %131 4 5 6 3 
                                                      OpStore %86 %133 
                                Private f32* %136 = OpAccessChain %86 %124 
                                                      OpStore %136 %134 
                                       f32_4 %138 = OpLoad %86 
                              Uniform f32_4* %139 = OpAccessChain %24 %123 
                                       f32_4 %140 = OpLoad %139 
                                       f32_4 %141 = OpFMul %138 %140 
                                                      OpStore %137 %141 
                                       f32_4 %142 = OpLoad %137 
                                       f32_3 %143 = OpVectorShuffle %142 %142 3 3 3 
                                       f32_4 %144 = OpLoad %137 
                                       f32_3 %145 = OpVectorShuffle %144 %144 0 1 2 
                                       f32_3 %146 = OpFMul %143 %145 
                                       f32_4 %147 = OpLoad %86 
                                       f32_4 %148 = OpVectorShuffle %147 %146 4 5 6 3 
                                                      OpStore %86 %148 
                                       f32_4 %149 = OpLoad %86 
                                       f32_3 %150 = OpVectorShuffle %149 %149 0 1 2 
                                       f32_4 %151 = OpLoad %122 
                                       f32_4 %152 = OpVectorShuffle %151 %150 4 5 6 3 
                                                      OpStore %122 %152 
                                       f32_4 %154 = OpLoad %86 
                                       f32_3 %155 = OpVectorShuffle %154 %154 0 1 2 
                                       f32_3 %156 = OpFNegate %155 
                                       f32_4 %157 = OpLoad %153 
                                       f32_4 %158 = OpVectorShuffle %157 %156 4 5 6 3 
                                                      OpStore %153 %158 
                                Private f32* %159 = OpAccessChain %137 %124 
                                         f32 %160 = OpLoad %159 
                                         f32 %161 = OpFNegate %160 
                                Private f32* %162 = OpAccessChain %153 %124 
                                                      OpStore %162 %161 
                              Uniform f32_4* %165 = OpAccessChain %24 %164 
                                       f32_4 %166 = OpLoad %165 
                                       f32_3 %167 = OpVectorShuffle %166 %166 3 3 3 
                              Uniform f32_4* %168 = OpAccessChain %24 %164 
                                       f32_4 %169 = OpLoad %168 
                                       f32_3 %170 = OpVectorShuffle %169 %169 0 1 2 
                                       f32_3 %171 = OpFMul %167 %170 
                                       f32_4 %172 = OpLoad %163 
                                       f32_4 %173 = OpVectorShuffle %172 %171 4 5 6 3 
                                                      OpStore %163 %173 
                                Uniform f32* %174 = OpAccessChain %24 %164 %124 
                                         f32 %175 = OpLoad %174 
                                Private f32* %176 = OpAccessChain %163 %124 
                                                      OpStore %176 %175 
                                       f32_4 %177 = OpLoad %153 
                                       f32_4 %178 = OpLoad %163 
                                       f32_4 %179 = OpFAdd %177 %178 
                                                      OpStore %153 %179 
                                       f32_4 %181 = OpLoad %36 
                                       f32_3 %182 = OpVectorShuffle %181 %181 0 1 2 
                                       f32_4 %183 = OpLoad %36 
                                       f32_3 %184 = OpVectorShuffle %183 %183 0 1 2 
                                         f32 %185 = OpDot %182 %184 
                                                      OpStore %180 %185 
                                         f32 %186 = OpLoad %180 
                                         f32 %187 = OpExtInst %1 32 %186 
                                                      OpStore %180 %187 
                                         f32 %188 = OpLoad %180 
                                       f32_3 %189 = OpCompositeConstruct %188 %188 %188 
                                       f32_4 %190 = OpLoad %36 
                                       f32_3 %191 = OpVectorShuffle %190 %190 0 1 2 
                                       f32_3 %192 = OpFMul %189 %191 
                                       f32_4 %193 = OpLoad %36 
                                       f32_4 %194 = OpVectorShuffle %193 %192 4 5 6 3 
                                                      OpStore %36 %194 
                                       f32_3 %197 = OpLoad %196 
                              Uniform f32_4* %199 = OpAccessChain %24 %198 %45 
                                       f32_4 %200 = OpLoad %199 
                                       f32_3 %201 = OpVectorShuffle %200 %200 0 1 2 
                                         f32 %202 = OpDot %197 %201 
                                Private f32* %204 = OpAccessChain %86 %203 
                                                      OpStore %204 %202 
                                       f32_3 %205 = OpLoad %196 
                              Uniform f32_4* %206 = OpAccessChain %24 %198 %40 
                                       f32_4 %207 = OpLoad %206 
                                       f32_3 %208 = OpVectorShuffle %207 %207 0 1 2 
                                         f32 %209 = OpDot %205 %208 
                                Private f32* %210 = OpAccessChain %86 %114 
                                                      OpStore %210 %209 
                                       f32_3 %211 = OpLoad %196 
                              Uniform f32_4* %212 = OpAccessChain %24 %198 %53 
                                       f32_4 %213 = OpLoad %212 
                                       f32_3 %214 = OpVectorShuffle %213 %213 0 1 2 
                                         f32 %215 = OpDot %211 %214 
                                Private f32* %217 = OpAccessChain %86 %216 
                                                      OpStore %217 %215 
                                       f32_4 %218 = OpLoad %86 
                                       f32_3 %219 = OpVectorShuffle %218 %218 0 1 2 
                                       f32_4 %220 = OpLoad %86 
                                       f32_3 %221 = OpVectorShuffle %220 %220 0 1 2 
                                         f32 %222 = OpDot %219 %221 
                                                      OpStore %180 %222 
                                         f32 %223 = OpLoad %180 
                                         f32 %224 = OpExtInst %1 32 %223 
                                                      OpStore %180 %224 
                                         f32 %225 = OpLoad %180 
                                       f32_3 %226 = OpCompositeConstruct %225 %225 %225 
                                       f32_4 %227 = OpLoad %86 
                                       f32_3 %228 = OpVectorShuffle %227 %227 0 1 2 
                                       f32_3 %229 = OpFMul %226 %228 
                                       f32_4 %230 = OpLoad %86 
                                       f32_4 %231 = OpVectorShuffle %230 %229 4 5 6 3 
                                                      OpStore %86 %231 
                                       f32_4 %232 = OpLoad %86 
                                       f32_3 %233 = OpVectorShuffle %232 %232 0 1 2 
                                       f32_4 %234 = OpLoad %36 
                                       f32_3 %235 = OpVectorShuffle %234 %234 0 1 2 
                                         f32 %236 = OpDot %233 %235 
                                                      OpStore %180 %236 
                              Uniform f32_4* %237 = OpAccessChain %24 %53 
                                       f32_4 %238 = OpLoad %237 
                                       f32_2 %239 = OpVectorShuffle %238 %238 1 1 
                              Uniform f32_4* %241 = OpAccessChain %24 %240 %40 
                                       f32_4 %242 = OpLoad %241 
                                       f32_2 %243 = OpVectorShuffle %242 %242 0 1 
                                       f32_2 %244 = OpFMul %239 %243 
                                       f32_4 %245 = OpLoad %36 
                                       f32_4 %246 = OpVectorShuffle %245 %244 4 5 2 3 
                                                      OpStore %36 %246 
                              Uniform f32_4* %247 = OpAccessChain %24 %240 %45 
                                       f32_4 %248 = OpLoad %247 
                                       f32_2 %249 = OpVectorShuffle %248 %248 0 1 
                              Uniform f32_4* %250 = OpAccessChain %24 %53 
                                       f32_4 %251 = OpLoad %250 
                                       f32_2 %252 = OpVectorShuffle %251 %251 0 0 
                                       f32_2 %253 = OpFMul %249 %252 
                                       f32_4 %254 = OpLoad %36 
                                       f32_2 %255 = OpVectorShuffle %254 %254 0 1 
                                       f32_2 %256 = OpFAdd %253 %255 
                                       f32_4 %257 = OpLoad %36 
                                       f32_4 %258 = OpVectorShuffle %257 %256 4 5 2 3 
                                                      OpStore %36 %258 
                                       f32_4 %259 = OpLoad %36 
                                       f32_2 %260 = OpVectorShuffle %259 %259 0 1 
                                       f32_2 %261 = OpExtInst %1 4 %260 
                                Uniform f32* %263 = OpAccessChain %24 %262 
                                         f32 %264 = OpLoad %263 
                                Uniform f32* %266 = OpAccessChain %24 %265 
                                         f32 %267 = OpLoad %266 
                                       f32_2 %268 = OpCompositeConstruct %264 %267 
                                       f32_2 %269 = OpFMul %261 %268 
                                       f32_4 %270 = OpLoad %36 
                                       f32_4 %271 = OpVectorShuffle %270 %269 4 5 2 3 
                                                      OpStore %36 %271 
                                       f32_4 %272 = OpLoad %61 
                                       f32_2 %273 = OpVectorShuffle %272 %272 3 3 
                                       f32_4 %274 = OpLoad %36 
                                       f32_2 %275 = OpVectorShuffle %274 %274 0 1 
                                       f32_2 %276 = OpFDiv %273 %275 
                                       f32_4 %277 = OpLoad %36 
                                       f32_4 %278 = OpVectorShuffle %277 %276 4 5 2 3 
                                                      OpStore %36 %278 
                                Private f32* %280 = OpAccessChain %61 %216 
                                         f32 %281 = OpLoad %280 
                                Uniform f32* %282 = OpAccessChain %24 %40 %114 
                                         f32 %283 = OpLoad %282 
                                         f32 %284 = OpFDiv %281 %283 
                                                      OpStore %279 %284 
                                         f32 %285 = OpLoad %279 
                                         f32 %286 = OpFNegate %285 
                                         f32 %287 = OpFAdd %286 %134 
                                                      OpStore %279 %287 
                                         f32 %288 = OpLoad %279 
                                Uniform f32* %289 = OpAccessChain %24 %40 %216 
                                         f32 %290 = OpLoad %289 
                                         f32 %291 = OpFMul %288 %290 
                                                      OpStore %279 %291 
                                         f32 %292 = OpLoad %279 
                                         f32 %294 = OpExtInst %1 40 %292 %293 
                                                      OpStore %279 %294 
                                         f32 %296 = OpLoad %279 
                                Uniform f32* %298 = OpAccessChain %24 %297 %216 
                                         f32 %299 = OpLoad %298 
                                         f32 %300 = OpFMul %296 %299 
                                Uniform f32* %301 = OpAccessChain %24 %297 %124 
                                         f32 %302 = OpLoad %301 
                                         f32 %303 = OpFAdd %300 %302 
                                                      OpStore vs_TEXCOORDn0 %303 
                                       f32_4 %304 = OpLoad %36 
                                       f32_2 %305 = OpVectorShuffle %304 %304 0 1 
                                       f32_4 %306 = OpLoad %36 
                                       f32_2 %307 = OpVectorShuffle %306 %306 0 1 
                                         f32 %308 = OpDot %305 %307 
                                                      OpStore %279 %308 
                                Uniform f32* %310 = OpAccessChain %24 %309 
                                         f32 %311 = OpLoad %310 
                                Uniform f32* %313 = OpAccessChain %24 %312 
                                         f32 %314 = OpLoad %313 
                                       f32_2 %315 = OpCompositeConstruct %311 %314 
                                       f32_2 %318 = OpFMul %315 %317 
                                       f32_4 %319 = OpLoad %36 
                                       f32_2 %320 = OpVectorShuffle %319 %319 0 1 
                                       f32_2 %321 = OpFAdd %318 %320 
                                       f32_4 %322 = OpLoad %36 
                                       f32_4 %323 = OpVectorShuffle %322 %321 4 5 2 3 
                                                      OpStore %36 %323 
                                       f32_4 %325 = OpLoad %36 
                                       f32_2 %326 = OpVectorShuffle %325 %325 0 1 
                                       f32_2 %327 = OpFDiv %317 %326 
                                       f32_4 %328 = OpLoad vs_TEXCOORD2 
                                       f32_4 %329 = OpVectorShuffle %328 %327 0 1 4 5 
                                                      OpStore vs_TEXCOORD2 %329 
                                         f32 %330 = OpLoad %279 
                                         f32 %331 = OpExtInst %1 32 %330 
                                                      OpStore %279 %331 
                                  Input f32* %335 = OpAccessChain %333 %114 
                                         f32 %336 = OpLoad %335 
                                         f32 %337 = OpExtInst %1 4 %336 
                                Uniform f32* %339 = OpAccessChain %24 %338 
                                         f32 %340 = OpLoad %339 
                                         f32 %341 = OpFMul %337 %340 
                                Private f32* %342 = OpAccessChain %36 %203 
                                                      OpStore %342 %341 
                                Uniform f32* %345 = OpAccessChain %24 %344 
                                         f32 %346 = OpLoad %345 
                                         f32 %347 = OpFAdd %346 %134 
                                Private f32* %348 = OpAccessChain %343 %203 
                                                      OpStore %348 %347 
                                Private f32* %349 = OpAccessChain %343 %203 
                                         f32 %350 = OpLoad %349 
                                Private f32* %351 = OpAccessChain %36 %203 
                                         f32 %352 = OpLoad %351 
                                         f32 %353 = OpFMul %350 %352 
                                Private f32* %354 = OpAccessChain %36 %203 
                                                      OpStore %354 %353 
                                         f32 %355 = OpLoad %279 
                                Private f32* %356 = OpAccessChain %36 %203 
                                         f32 %357 = OpLoad %356 
                                         f32 %358 = OpFMul %355 %357 
                                Private f32* %359 = OpAccessChain %343 %203 
                                                      OpStore %359 %358 
                                Uniform f32* %362 = OpAccessChain %24 %361 
                                         f32 %363 = OpLoad %362 
                                         f32 %364 = OpFNegate %363 
                                         f32 %365 = OpFAdd %364 %134 
                                                      OpStore %360 %365 
                                         f32 %366 = OpLoad %360 
                                Private f32* %367 = OpAccessChain %343 %203 
                                         f32 %368 = OpLoad %367 
                                         f32 %369 = OpExtInst %1 4 %368 
                                         f32 %370 = OpFMul %366 %369 
                                                      OpStore %360 %370 
                                         f32 %371 = OpLoad %279 
                                Private f32* %372 = OpAccessChain %36 %203 
                                         f32 %373 = OpLoad %372 
                                         f32 %374 = OpFMul %371 %373 
                                         f32 %375 = OpLoad %360 
                                         f32 %376 = OpFNegate %375 
                                         f32 %377 = OpFAdd %374 %376 
                                                      OpStore %279 %377 
                                         f32 %378 = OpLoad %180 
                                         f32 %379 = OpExtInst %1 4 %378 
                                         f32 %380 = OpLoad %279 
                                         f32 %381 = OpFMul %379 %380 
                                         f32 %382 = OpLoad %360 
                                         f32 %383 = OpFAdd %381 %382 
                                                      OpStore %180 %383 
                                Uniform f32* %387 = OpAccessChain %24 %240 %39 %124 
                                         f32 %388 = OpLoad %387 
                                        bool %389 = OpFOrdEqual %388 %293 
                                                      OpStore %386 %389 
                                        bool %390 = OpLoad %386 
                                                      OpSelectionMerge %394 None 
                                                      OpBranchConditional %390 %393 %396 
                                             %393 = OpLabel 
                                         f32 %395 = OpLoad %180 
                                                      OpStore %392 %395 
                                                      OpBranch %394 
                                             %396 = OpLabel 
                                Private f32* %397 = OpAccessChain %343 %203 
                                         f32 %398 = OpLoad %397 
                                                      OpStore %392 %398 
                                                      OpBranch %394 
                                             %394 = OpLabel 
                                         f32 %399 = OpLoad %392 
                                                      OpStore %180 %399 
                                Uniform f32* %401 = OpAccessChain %24 %400 
                                         f32 %402 = OpLoad %401 
                                Uniform f32* %404 = OpAccessChain %24 %403 
                                         f32 %405 = OpLoad %404 
                                         f32 %406 = OpFMul %402 %405 
                                                      OpStore %279 %406 
                                         f32 %407 = OpLoad %279 
                                         f32 %408 = OpLoad %180 
                                         f32 %409 = OpFMul %407 %408 
                                         f32 %410 = OpFAdd %409 %134 
                                                      OpStore %279 %410 
                                         f32 %411 = OpLoad %180 
                                         f32 %412 = OpLoad %279 
                                         f32 %413 = OpFDiv %411 %412 
                                Private f32* %414 = OpAccessChain %36 %203 
                                                      OpStore %414 %413 
                                Uniform f32* %416 = OpAccessChain %24 %415 
                                         f32 %417 = OpLoad %416 
                                Uniform f32* %418 = OpAccessChain %24 %403 
                                         f32 %419 = OpLoad %418 
                                         f32 %420 = OpFMul %417 %419 
                                                      OpStore %279 %420 
                                Private f32* %421 = OpAccessChain %36 %203 
                                         f32 %422 = OpLoad %421 
                                         f32 %423 = OpLoad %279 
                                         f32 %424 = OpFMul %422 %423 
                                                      OpStore %279 %424 
                                         f32 %425 = OpLoad %279 
                                         f32 %426 = OpExtInst %1 37 %425 %134 
                                Private f32* %427 = OpAccessChain %343 %203 
                                                      OpStore %427 %426 
                                Private f32* %428 = OpAccessChain %343 %203 
                                         f32 %429 = OpLoad %428 
                                         f32 %430 = OpExtInst %1 31 %429 
                                Private f32* %431 = OpAccessChain %343 %203 
                                                      OpStore %431 %430 
                                       f32_4 %432 = OpLoad %153 
                                       f32_2 %433 = OpLoad %343 
                                       f32_4 %434 = OpVectorShuffle %433 %433 0 0 0 0 
                                       f32_4 %435 = OpFMul %432 %434 
                                                      OpStore %61 %435 
                                       f32_4 %437 = OpLoad %137 
                                       f32_3 %438 = OpVectorShuffle %437 %437 0 1 2 
                                       f32_4 %439 = OpLoad %137 
                                       f32_3 %440 = OpVectorShuffle %439 %439 3 3 3 
                                       f32_3 %441 = OpFMul %438 %440 
                                       f32_4 %442 = OpLoad %61 
                                       f32_3 %443 = OpVectorShuffle %442 %442 0 1 2 
                                       f32_3 %444 = OpFAdd %441 %443 
                                       f32_4 %445 = OpLoad %436 
                                       f32_4 %446 = OpVectorShuffle %445 %444 4 5 6 3 
                                                      OpStore %436 %446 
                                Private f32* %447 = OpAccessChain %86 %124 
                                         f32 %448 = OpLoad %447 
                                Uniform f32* %449 = OpAccessChain %24 %123 %124 
                                         f32 %450 = OpLoad %449 
                                         f32 %451 = OpFMul %448 %450 
                                Private f32* %452 = OpAccessChain %61 %124 
                                         f32 %453 = OpLoad %452 
                                         f32 %454 = OpFAdd %451 %453 
                                 Output f32* %455 = OpAccessChain %436 %124 
                                                      OpStore %455 %454 
                              Uniform f32_4* %457 = OpAccessChain %24 %456 
                                       f32_4 %458 = OpLoad %457 
                                       f32_4 %461 = OpExtInst %1 40 %458 %460 
                                                      OpStore %61 %461 
                                       f32_4 %462 = OpLoad %61 
                                       f32_4 %465 = OpExtInst %1 37 %462 %464 
                                                      OpStore %61 %465 
                                       f32_2 %466 = OpLoad %9 
                                       f32_4 %467 = OpLoad %61 
                                       f32_2 %468 = OpVectorShuffle %467 %467 0 1 
                                       f32_2 %469 = OpFNegate %468 
                                       f32_2 %470 = OpFAdd %466 %469 
                                                      OpStore %343 %470 
                                       f32_2 %471 = OpLoad %9 
                                       f32_2 %474 = OpFMul %471 %473 
                                       f32_4 %475 = OpLoad %61 
                                       f32_2 %476 = OpVectorShuffle %475 %475 0 1 
                                       f32_2 %477 = OpFNegate %476 
                                       f32_2 %478 = OpFAdd %474 %477 
                                                      OpStore %9 %478 
                                       f32_4 %479 = OpLoad %61 
                                       f32_2 %480 = OpVectorShuffle %479 %479 2 3 
                                       f32_2 %481 = OpFNegate %480 
                                       f32_2 %482 = OpLoad %9 
                                       f32_2 %483 = OpFAdd %481 %482 
                                       f32_4 %484 = OpLoad vs_TEXCOORD2 
                                       f32_4 %485 = OpVectorShuffle %484 %483 4 5 2 3 
                                                      OpStore vs_TEXCOORD2 %485 
                                       f32_4 %486 = OpLoad %61 
                                       f32_2 %487 = OpVectorShuffle %486 %486 0 1 
                                       f32_2 %488 = OpFNegate %487 
                                       f32_4 %489 = OpLoad %61 
                                       f32_2 %490 = OpVectorShuffle %489 %489 2 3 
                                       f32_2 %491 = OpFAdd %488 %490 
                                                      OpStore %9 %491 
                                       f32_2 %493 = OpLoad %343 
                                       f32_2 %494 = OpLoad %9 
                                       f32_2 %495 = OpFDiv %493 %494 
                                       f32_4 %496 = OpLoad vs_TEXCOORD0 
                                       f32_4 %497 = OpVectorShuffle %496 %495 0 1 4 5 
                                                      OpStore vs_TEXCOORD0 %497 
                                       f32_2 %499 = OpLoad %498 
                                       f32_4 %500 = OpLoad vs_TEXCOORD0 
                                       f32_4 %501 = OpVectorShuffle %500 %499 4 5 2 3 
                                                      OpStore vs_TEXCOORD0 %501 
                                  Input f32* %503 = OpAccessChain %333 %114 
                                         f32 %504 = OpLoad %503 
                                        bool %505 = OpFOrdGreaterThanEqual %293 %504 
                                                      OpStore %502 %505 
                                        bool %506 = OpLoad %502 
                                         f32 %507 = OpSelect %506 %134 %293 
                                Private f32* %508 = OpAccessChain %9 %203 
                                                      OpStore %508 %507 
                                Uniform f32* %512 = OpAccessChain %24 %511 
                                         f32 %513 = OpLoad %512 
                                         f32 %514 = OpFNegate %513 
                                Uniform f32* %516 = OpAccessChain %24 %515 
                                         f32 %517 = OpLoad %516 
                                         f32 %518 = OpFAdd %514 %517 
                                Private f32* %519 = OpAccessChain %510 %203 
                                                      OpStore %519 %518 
                                Private f32* %520 = OpAccessChain %9 %203 
                                         f32 %521 = OpLoad %520 
                                Private f32* %522 = OpAccessChain %510 %203 
                                         f32 %523 = OpLoad %522 
                                         f32 %524 = OpFMul %521 %523 
                                Uniform f32* %525 = OpAccessChain %24 %511 
                                         f32 %526 = OpLoad %525 
                                         f32 %527 = OpFAdd %524 %526 
                                Private f32* %528 = OpAccessChain %9 %203 
                                                      OpStore %528 %527 
                                Private f32* %529 = OpAccessChain %9 %203 
                                         f32 %530 = OpLoad %529 
                                         f32 %531 = OpFMul %530 %316 
                                Uniform f32* %533 = OpAccessChain %24 %532 
                                         f32 %534 = OpLoad %533 
                                         f32 %535 = OpFAdd %531 %534 
                                Private f32* %536 = OpAccessChain %9 %203 
                                                      OpStore %536 %535 
                                Private f32* %537 = OpAccessChain %9 %203 
                                         f32 %538 = OpLoad %537 
                                Uniform f32* %539 = OpAccessChain %24 %403 
                                         f32 %540 = OpLoad %539 
                                         f32 %541 = OpFMul %538 %540 
                                Private f32* %542 = OpAccessChain %9 %203 
                                                      OpStore %542 %541 
                                Private f32* %543 = OpAccessChain %9 %203 
                                         f32 %544 = OpLoad %543 
                                         f32 %545 = OpFNegate %544 
                                         f32 %547 = OpFMul %545 %546 
                                         f32 %548 = OpFAdd %547 %546 
                                Private f32* %549 = OpAccessChain %9 %203 
                                                      OpStore %549 %548 
                                Private f32* %550 = OpAccessChain %9 %203 
                                         f32 %551 = OpLoad %550 
                                Private f32* %552 = OpAccessChain %36 %203 
                                         f32 %553 = OpLoad %552 
                                         f32 %554 = OpFMul %551 %553 
                                         f32 %556 = OpFAdd %554 %555 
                                Private f32* %557 = OpAccessChain %36 %124 
                                                      OpStore %557 %556 
                                       f32_4 %559 = OpLoad %36 
                                       f32_2 %560 = OpVectorShuffle %559 %559 0 3 
                                       f32_4 %561 = OpLoad vs_TEXCOORD1 
                                       f32_4 %562 = OpVectorShuffle %561 %560 4 1 2 5 
                                                      OpStore vs_TEXCOORD1 %562 
                                         f32 %563 = OpLoad %279 
                                         f32 %564 = OpFNegate %563 
                                         f32 %565 = OpFMul %564 %546 
                                Private f32* %566 = OpAccessChain %36 %124 
                                         f32 %567 = OpLoad %566 
                                         f32 %568 = OpFAdd %565 %567 
                                 Output f32* %569 = OpAccessChain vs_TEXCOORD1 %114 
                                                      OpStore %569 %568 
                                         f32 %570 = OpLoad %279 
                                         f32 %571 = OpFMul %570 %546 
                                Private f32* %572 = OpAccessChain %36 %124 
                                         f32 %573 = OpLoad %572 
                                         f32 %574 = OpFAdd %571 %573 
                                 Output f32* %575 = OpAccessChain vs_TEXCOORD1 %216 
                                                      OpStore %575 %574 
                                  Input f32* %577 = OpAccessChain %129 %124 
                                         f32 %578 = OpLoad %577 
                                 Output f32* %579 = OpAccessChain vs_TEXCOORD3 %216 
                                                      OpStore %579 %578 
                                 Output f32* %580 = OpAccessChain vs_TEXCOORD3 %124 
                                                      OpStore %580 %293 
                                Uniform f32* %582 = OpAccessChain %24 %581 
                                         f32 %583 = OpLoad %582 
                                Uniform f32* %585 = OpAccessChain %24 %584 
                                         f32 %586 = OpLoad %585 
                                Uniform f32* %588 = OpAccessChain %24 %587 
                                         f32 %589 = OpLoad %588 
                                Uniform f32* %591 = OpAccessChain %24 %590 
                                         f32 %592 = OpLoad %591 
                                       f32_4 %593 = OpCompositeConstruct %583 %586 %589 %592 
                                Uniform f32* %595 = OpAccessChain %24 %594 
                                         f32 %596 = OpLoad %595 
                                Uniform f32* %597 = OpAccessChain %24 %594 
                                         f32 %598 = OpLoad %597 
                                Uniform f32* %599 = OpAccessChain %24 %594 
                                         f32 %600 = OpLoad %599 
                                Uniform f32* %601 = OpAccessChain %24 %594 
                                         f32 %602 = OpLoad %601 
                                       f32_4 %603 = OpCompositeConstruct %596 %598 %600 %602 
                                         f32 %604 = OpCompositeExtract %603 0 
                                         f32 %605 = OpCompositeExtract %603 1 
                                         f32 %606 = OpCompositeExtract %603 2 
                                         f32 %607 = OpCompositeExtract %603 3 
                                       f32_4 %608 = OpCompositeConstruct %604 %605 %606 %607 
                                       f32_4 %609 = OpFMul %593 %608 
                                                      OpStore %36 %609 
                                       f32_4 %610 = OpLoad %36 
                                       f32_2 %611 = OpVectorShuffle %610 %610 2 3 
                                       f32_2 %612 = OpFNegate %611 
                                Uniform f32* %613 = OpAccessChain %24 %338 
                                         f32 %614 = OpLoad %613 
                                       f32_2 %615 = OpCompositeConstruct %614 %614 
                                       f32_2 %616 = OpFMul %612 %615 
                                       f32_3 %617 = OpLoad %510 
                                       f32_3 %618 = OpVectorShuffle %617 %616 3 1 4 
                                                      OpStore %510 %618 
                                       f32_3 %619 = OpLoad %510 
                                       f32_2 %620 = OpVectorShuffle %619 %619 0 2 
                                Uniform f32* %622 = OpAccessChain %24 %621 
                                         f32 %623 = OpLoad %622 
                                Uniform f32* %625 = OpAccessChain %24 %624 
                                         f32 %626 = OpLoad %625 
                                       f32_2 %627 = OpCompositeConstruct %623 %626 
                                       f32_2 %628 = OpFDiv %620 %627 
                                       f32_3 %629 = OpLoad %510 
                                       f32_3 %630 = OpVectorShuffle %629 %628 3 1 4 
                                                      OpStore %510 %630 
                                       f32_3 %631 = OpLoad %510 
                                       f32_2 %632 = OpVectorShuffle %631 %631 0 2 
                                       f32_2 %633 = OpLoad %498 
                                       f32_2 %634 = OpFAdd %632 %633 
                                       f32_4 %635 = OpLoad vs_TEXCOORD3 
                                       f32_4 %636 = OpVectorShuffle %635 %634 4 5 2 3 
                                                      OpStore vs_TEXCOORD3 %636 
                                Private f32* %637 = OpAccessChain %36 %203 
                                         f32 %638 = OpLoad %637 
                                         f32 %639 = OpLoad %180 
                                         f32 %640 = OpFMul %638 %639 
                                         f32 %641 = OpFAdd %640 %134 
                                Private f32* %642 = OpAccessChain %510 %203 
                                                      OpStore %642 %641 
                                         f32 %643 = OpLoad %180 
                                Private f32* %644 = OpAccessChain %510 %203 
                                         f32 %645 = OpLoad %644 
                                         f32 %646 = OpFDiv %643 %645 
                                Private f32* %647 = OpAccessChain %510 %203 
                                                      OpStore %647 %646 
                                Private f32* %648 = OpAccessChain %510 %203 
                                         f32 %649 = OpLoad %648 
                                Private f32* %650 = OpAccessChain %36 %114 
                                         f32 %651 = OpLoad %650 
                                         f32 %652 = OpFMul %649 %651 
                                                      OpStore %180 %652 
                                Private f32* %653 = OpAccessChain %9 %203 
                                         f32 %654 = OpLoad %653 
                                Private f32* %655 = OpAccessChain %510 %203 
                                         f32 %656 = OpLoad %655 
                                         f32 %657 = OpFMul %654 %656 
                                         f32 %658 = OpFAdd %657 %555 
                                Private f32* %659 = OpAccessChain %9 %203 
                                                      OpStore %659 %658 
                                Private f32* %662 = OpAccessChain %510 %203 
                                         f32 %663 = OpLoad %662 
                                 Output f32* %664 = OpAccessChain vs_TEXCOORD4 %203 
                                                      OpStore %664 %663 
                                         f32 %665 = OpLoad %180 
                                         f32 %666 = OpFNegate %665 
                                         f32 %667 = OpFMul %666 %546 
                                Private f32* %668 = OpAccessChain %9 %203 
                                         f32 %669 = OpLoad %668 
                                         f32 %670 = OpFAdd %667 %669 
                                 Output f32* %671 = OpAccessChain vs_TEXCOORD4 %114 
                                                      OpStore %671 %670 
                                 Output f32* %672 = OpAccessChain %118 %45 %114 
                                         f32 %673 = OpLoad %672 
                                         f32 %674 = OpFNegate %673 
                                 Output f32* %675 = OpAccessChain %118 %45 %114 
                                                      OpStore %675 %674 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 219
; Schema: 0
                                               OpCapability Shader 
                                        %1 = OpExtInstImport "GLSL.std.450" 
                                               OpMemoryModel Logical GLSL450 
                                               OpEntryPoint Fragment %4 "main" %21 %35 %77 %79 %88 %96 %146 %199 %203 
                                               OpExecutionMode %4 OriginUpperLeft 
                                               OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                               OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                               OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                               OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                               OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                               OpName vs_TEXCOORDn0 "vs_TEXCOORDn0" 
                                               OpDecorate %12 DescriptorSet 12 
                                               OpDecorate %12 Binding 12 
                                               OpDecorate %16 DescriptorSet 16 
                                               OpDecorate %16 Binding 16 
                                               OpDecorate vs_TEXCOORD3 Location 21 
                                               OpDecorate vs_TEXCOORD4 Location 35 
                                               OpMemberDecorate %53 0 Offset 53 
                                               OpMemberDecorate %53 1 Offset 53 
                                               OpMemberDecorate %53 2 Offset 53 
                                               OpDecorate %53 Block 
                                               OpDecorate %55 DescriptorSet 55 
                                               OpDecorate %55 Binding 55 
                                               OpDecorate %77 Location 77 
                                               OpDecorate %79 Location 79 
                                               OpDecorate vs_TEXCOORD0 Location 88 
                                               OpDecorate vs_TEXCOORD1 Location 96 
                                               OpDecorate vs_TEXCOORD2 Location 146 
                                               OpDecorate %199 Location 199 
                                               OpDecorate vs_TEXCOORDn0 Location 203 
                                        %2 = OpTypeVoid 
                                        %3 = OpTypeFunction %2 
                                        %6 = OpTypeFloat 32 
                                        %7 = OpTypeVector %6 4 
                                        %8 = OpTypePointer Private %7 
                         Private f32_4* %9 = OpVariable Private 
                                       %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                       %11 = OpTypePointer UniformConstant %10 
  UniformConstant read_only Texture2D* %12 = OpVariable UniformConstant 
                                       %14 = OpTypeSampler 
                                       %15 = OpTypePointer UniformConstant %14 
              UniformConstant sampler* %16 = OpVariable UniformConstant 
                                       %18 = OpTypeSampledImage %10 
                                       %20 = OpTypePointer Input %7 
                 Input f32_4* vs_TEXCOORD3 = OpVariable Input 
                                       %22 = OpTypeVector %6 2 
                                       %26 = OpTypeInt 32 0 
                                   u32 %27 = OpConstant 3 
                                   u32 %29 = OpConstant 0 
                                       %30 = OpTypePointer Private %6 
                                       %34 = OpTypePointer Input %22 
                 Input f32_2* vs_TEXCOORD4 = OpVariable Input 
                                       %36 = OpTypePointer Input %6 
                                   u32 %40 = OpConstant 1 
                                   f32 %48 = OpConstant 3.674022E-40 
                                   f32 %49 = OpConstant 3.674022E-40 
                        Private f32_4* %52 = OpVariable Private 
                                       %53 = OpTypeStruct %7 %7 %7 
                                       %54 = OpTypePointer Uniform %53 
Uniform struct {f32_4; f32_4; f32_4;}* %55 = OpVariable Uniform 
                                       %56 = OpTypeInt 32 1 
                                   i32 %57 = OpConstant 1 
                                       %58 = OpTypeVector %6 3 
                                       %59 = OpTypePointer Uniform %7 
                                       %69 = OpTypePointer Uniform %6 
                          Input f32_4* %77 = OpVariable Input 
                          Input f32_4* %79 = OpVariable Input 
                                       %83 = OpTypePointer Private %22 
                        Private f32_2* %84 = OpVariable Private 
                 Input f32_4* vs_TEXCOORD0 = OpVariable Input 
                 Input f32_4* vs_TEXCOORD1 = OpVariable Input 
                       Private f32_4* %114 = OpVariable Private 
                                  i32 %133 = OpConstant 2 
                 Input f32_4* vs_TEXCOORD2 = OpVariable Input 
                                  i32 %183 = OpConstant 0 
                         Private f32* %191 = OpVariable Private 
                                  u32 %194 = OpConstant 2 
                                      %198 = OpTypePointer Output %7 
                        Output f32_4* %199 = OpVariable Output 
                                      %201 = OpTypePointer Output %6 
                  Input f32* vs_TEXCOORDn0 = OpVariable Input 
                                   void %4 = OpFunction None %3 
                                        %5 = OpLabel 
                   read_only Texture2D %13 = OpLoad %12 
                               sampler %17 = OpLoad %16 
            read_only Texture2DSampled %19 = OpSampledImage %13 %17 
                                 f32_4 %23 = OpLoad vs_TEXCOORD3 
                                 f32_2 %24 = OpVectorShuffle %23 %23 0 1 
                                 f32_4 %25 = OpImageSampleImplicitLod %19 %24 
                                   f32 %28 = OpCompositeExtract %25 3 
                          Private f32* %31 = OpAccessChain %9 %29 
                                               OpStore %31 %28 
                          Private f32* %32 = OpAccessChain %9 %29 
                                   f32 %33 = OpLoad %32 
                            Input f32* %37 = OpAccessChain vs_TEXCOORD4 %29 
                                   f32 %38 = OpLoad %37 
                                   f32 %39 = OpFMul %33 %38 
                            Input f32* %41 = OpAccessChain vs_TEXCOORD4 %40 
                                   f32 %42 = OpLoad %41 
                                   f32 %43 = OpFNegate %42 
                                   f32 %44 = OpFAdd %39 %43 
                          Private f32* %45 = OpAccessChain %9 %29 
                                               OpStore %45 %44 
                          Private f32* %46 = OpAccessChain %9 %29 
                                   f32 %47 = OpLoad %46 
                                   f32 %50 = OpExtInst %1 43 %47 %48 %49 
                          Private f32* %51 = OpAccessChain %9 %29 
                                               OpStore %51 %50 
                        Uniform f32_4* %60 = OpAccessChain %55 %57 
                                 f32_4 %61 = OpLoad %60 
                                 f32_3 %62 = OpVectorShuffle %61 %61 3 3 3 
                        Uniform f32_4* %63 = OpAccessChain %55 %57 
                                 f32_4 %64 = OpLoad %63 
                                 f32_3 %65 = OpVectorShuffle %64 %64 0 1 2 
                                 f32_3 %66 = OpFMul %62 %65 
                                 f32_4 %67 = OpLoad %52 
                                 f32_4 %68 = OpVectorShuffle %67 %66 4 5 6 3 
                                               OpStore %52 %68 
                          Uniform f32* %70 = OpAccessChain %55 %57 %27 
                                   f32 %71 = OpLoad %70 
                          Private f32* %72 = OpAccessChain %52 %27 
                                               OpStore %72 %71 
                                 f32_4 %73 = OpLoad %9 
                                 f32_4 %74 = OpVectorShuffle %73 %73 0 0 0 0 
                                 f32_4 %75 = OpLoad %52 
                                 f32_4 %76 = OpFMul %74 %75 
                                               OpStore %9 %76 
                                 f32_4 %78 = OpLoad %77 
                                 f32_4 %80 = OpLoad %79 
                                 f32_4 %81 = OpFNegate %80 
                                 f32_4 %82 = OpFAdd %78 %81 
                                               OpStore %52 %82 
                   read_only Texture2D %85 = OpLoad %12 
                               sampler %86 = OpLoad %16 
            read_only Texture2DSampled %87 = OpSampledImage %85 %86 
                                 f32_4 %89 = OpLoad vs_TEXCOORD0 
                                 f32_2 %90 = OpVectorShuffle %89 %89 0 1 
                                 f32_4 %91 = OpImageSampleImplicitLod %87 %90 
                                   f32 %92 = OpCompositeExtract %91 3 
                          Private f32* %93 = OpAccessChain %84 %29 
                                               OpStore %93 %92 
                                 f32_2 %94 = OpLoad %84 
                                 f32_2 %95 = OpVectorShuffle %94 %94 0 0 
                                 f32_4 %97 = OpLoad vs_TEXCOORD1 
                                 f32_2 %98 = OpVectorShuffle %97 %97 0 0 
                                 f32_2 %99 = OpFMul %95 %98 
                                f32_4 %100 = OpLoad vs_TEXCOORD1 
                                f32_2 %101 = OpVectorShuffle %100 %100 2 1 
                                f32_2 %102 = OpFNegate %101 
                                f32_2 %103 = OpFAdd %99 %102 
                                               OpStore %84 %103 
                                f32_2 %104 = OpLoad %84 
                                f32_2 %105 = OpCompositeConstruct %48 %48 
                                f32_2 %106 = OpCompositeConstruct %49 %49 
                                f32_2 %107 = OpExtInst %1 43 %104 %105 %106 
                                               OpStore %84 %107 
                                f32_2 %108 = OpLoad %84 
                                f32_4 %109 = OpVectorShuffle %108 %108 0 0 0 0 
                                f32_4 %110 = OpLoad %52 
                                f32_4 %111 = OpFMul %109 %110 
                                f32_4 %112 = OpLoad %79 
                                f32_4 %113 = OpFAdd %111 %112 
                                               OpStore %52 %113 
                                f32_2 %115 = OpLoad %84 
                                f32_4 %116 = OpVectorShuffle %115 %115 1 1 1 1 
                                f32_4 %117 = OpLoad %52 
                                f32_4 %118 = OpFMul %116 %117 
                                               OpStore %114 %118 
                         Private f32* %119 = OpAccessChain %52 %27 
                                  f32 %120 = OpLoad %119 
                                  f32 %121 = OpFNegate %120 
                         Private f32* %122 = OpAccessChain %84 %40 
                                  f32 %123 = OpLoad %122 
                                  f32 %124 = OpFMul %121 %123 
                                  f32 %125 = OpFAdd %124 %49 
                         Private f32* %126 = OpAccessChain %52 %29 
                                               OpStore %126 %125 
                                f32_4 %127 = OpLoad %9 
                                f32_4 %128 = OpLoad %52 
                                f32_4 %129 = OpVectorShuffle %128 %128 0 0 0 0 
                                f32_4 %130 = OpFMul %127 %129 
                                f32_4 %131 = OpLoad %114 
                                f32_4 %132 = OpFAdd %130 %131 
                                               OpStore %9 %132 
                       Uniform f32_4* %134 = OpAccessChain %55 %133 
                                f32_4 %135 = OpLoad %134 
                                f32_2 %136 = OpVectorShuffle %135 %135 0 1 
                                f32_2 %137 = OpFNegate %136 
                       Uniform f32_4* %138 = OpAccessChain %55 %133 
                                f32_4 %139 = OpLoad %138 
                                f32_2 %140 = OpVectorShuffle %139 %139 2 3 
                                f32_2 %141 = OpFAdd %137 %140 
                                f32_4 %142 = OpLoad %52 
                                f32_4 %143 = OpVectorShuffle %142 %141 4 5 2 3 
                                               OpStore %52 %143 
                                f32_4 %144 = OpLoad %52 
                                f32_2 %145 = OpVectorShuffle %144 %144 0 1 
                                f32_4 %147 = OpLoad vs_TEXCOORD2 
                                f32_2 %148 = OpVectorShuffle %147 %147 0 1 
                                f32_2 %149 = OpExtInst %1 4 %148 
                                f32_2 %150 = OpFNegate %149 
                                f32_2 %151 = OpFAdd %145 %150 
                                f32_4 %152 = OpLoad %52 
                                f32_4 %153 = OpVectorShuffle %152 %151 4 5 2 3 
                                               OpStore %52 %153 
                                f32_4 %154 = OpLoad %52 
                                f32_2 %155 = OpVectorShuffle %154 %154 0 1 
                                f32_4 %156 = OpLoad vs_TEXCOORD2 
                                f32_2 %157 = OpVectorShuffle %156 %156 2 3 
                                f32_2 %158 = OpFMul %155 %157 
                                f32_4 %159 = OpLoad %52 
                                f32_4 %160 = OpVectorShuffle %159 %158 4 5 2 3 
                                               OpStore %52 %160 
                                f32_4 %161 = OpLoad %52 
                                f32_2 %162 = OpVectorShuffle %161 %161 0 1 
                                f32_2 %163 = OpCompositeConstruct %48 %48 
                                f32_2 %164 = OpCompositeConstruct %49 %49 
                                f32_2 %165 = OpExtInst %1 43 %162 %163 %164 
                                f32_4 %166 = OpLoad %52 
                                f32_4 %167 = OpVectorShuffle %166 %165 4 5 2 3 
                                               OpStore %52 %167 
                         Private f32* %168 = OpAccessChain %52 %40 
                                  f32 %169 = OpLoad %168 
                         Private f32* %170 = OpAccessChain %52 %29 
                                  f32 %171 = OpLoad %170 
                                  f32 %172 = OpFMul %169 %171 
                         Private f32* %173 = OpAccessChain %52 %29 
                                               OpStore %173 %172 
                                f32_4 %174 = OpLoad %9 
                                f32_4 %175 = OpLoad %52 
                                f32_4 %176 = OpVectorShuffle %175 %175 0 0 0 0 
                                f32_4 %177 = OpFMul %174 %176 
                                               OpStore %9 %177 
                                f32_4 %178 = OpLoad %9 
                                f32_3 %179 = OpVectorShuffle %178 %178 0 1 2 
                                f32_4 %180 = OpLoad vs_TEXCOORD3 
                                f32_3 %181 = OpVectorShuffle %180 %180 2 2 2 
                                f32_3 %182 = OpFMul %179 %181 
                       Uniform f32_4* %184 = OpAccessChain %55 %183 
                                f32_4 %185 = OpLoad %184 
                                f32_3 %186 = OpVectorShuffle %185 %185 0 1 2 
                                f32_3 %187 = OpFNegate %186 
                                f32_3 %188 = OpFAdd %182 %187 
                                f32_4 %189 = OpLoad %9 
                                f32_4 %190 = OpVectorShuffle %189 %188 4 5 6 3 
                                               OpStore %9 %190 
                         Private f32* %192 = OpAccessChain %9 %27 
                                  f32 %193 = OpLoad %192 
                           Input f32* %195 = OpAccessChain vs_TEXCOORD3 %194 
                                  f32 %196 = OpLoad %195 
                                  f32 %197 = OpFMul %193 %196 
                                               OpStore %191 %197 
                                  f32 %200 = OpLoad %191 
                          Output f32* %202 = OpAccessChain %199 %27 
                                               OpStore %202 %200 
                                  f32 %204 = OpLoad vs_TEXCOORDn0 
                                               OpStore %191 %204 
                                  f32 %205 = OpLoad %191 
                                  f32 %206 = OpExtInst %1 43 %205 %48 %49 
                                               OpStore %191 %206 
                                  f32 %207 = OpLoad %191 
                                f32_3 %208 = OpCompositeConstruct %207 %207 %207 
                                f32_4 %209 = OpLoad %9 
                                f32_3 %210 = OpVectorShuffle %209 %209 0 1 2 
                                f32_3 %211 = OpFMul %208 %210 
                       Uniform f32_4* %212 = OpAccessChain %55 %183 
                                f32_4 %213 = OpLoad %212 
                                f32_3 %214 = OpVectorShuffle %213 %213 0 1 2 
                                f32_3 %215 = OpFAdd %211 %214 
                                f32_4 %216 = OpLoad %199 
                                f32_4 %217 = OpVectorShuffle %216 %215 4 5 6 3 
                                               OpStore %199 %217 
                                               OpReturn
                                               OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "UNITY_UI_ALPHACLIP" "UNITY_UI_CLIP_RECT" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "UNITY_UI_ALPHACLIP" "UNITY_UI_CLIP_RECT" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _FaceColor;
uniform 	float _FaceDilate;
uniform 	float _OutlineSoftness;
uniform 	vec4 _OutlineColor;
uniform 	float _OutlineWidth;
uniform 	float _WeightNormal;
uniform 	float _WeightBold;
uniform 	float _ScaleRatioA;
uniform 	float _VertexOffsetX;
uniform 	float _VertexOffsetY;
uniform 	vec4 _ClipRect;
uniform 	float _MaskSoftnessX;
uniform 	float _MaskSoftnessY;
uniform 	float _GradientScale;
uniform 	float _ScaleX;
uniform 	float _ScaleY;
uniform 	float _PerspectiveFilter;
uniform 	float _Sharpness;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_COLOR0;
in  vec2 in_TEXCOORD0;
in  vec2 in_TEXCOORD1;
out vec4 vs_COLOR0;
out vec4 vs_COLOR1;
out vec4 vs_TEXCOORD0;
out vec4 vs_TEXCOORD1;
out vec4 vs_TEXCOORD2;
vec2 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
float u_xlat5;
vec2 u_xlat6;
float u_xlat10;
float u_xlat11;
float u_xlat15;
bool u_xlatb15;
void main()
{
    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
    gl_Position = u_xlat2;
    u_xlat3 = in_COLOR0 * _FaceColor;
    u_xlat3.xyz = u_xlat3.www * u_xlat3.xyz;
    vs_COLOR0 = u_xlat3;
    u_xlat4.w = in_COLOR0.w * _OutlineColor.w;
    u_xlat4.xyz = u_xlat4.www * _OutlineColor.xyz;
    u_xlat4 = (-u_xlat3) + u_xlat4;
    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat10 = inversesqrt(u_xlat10);
    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat10 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat10 = inversesqrt(u_xlat10);
    u_xlat2.xyz = vec3(u_xlat10) * u_xlat2.xyz;
    u_xlat10 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat1.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;
    u_xlat1.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat1.xy;
    u_xlat1.xy = abs(u_xlat1.xy) * vec2(_ScaleX, _ScaleY);
    u_xlat1.xy = u_xlat2.ww / u_xlat1.xy;
    u_xlat15 = dot(u_xlat1.xy, u_xlat1.xy);
    u_xlat1.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) * vec2(0.25, 0.25) + u_xlat1.xy;
    vs_TEXCOORD2.zw = vec2(0.25, 0.25) / u_xlat1.xy;
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.x = abs(in_TEXCOORD1.y) * _GradientScale;
    u_xlat6.x = _Sharpness + 1.0;
    u_xlat1.x = u_xlat6.x * u_xlat1.x;
    u_xlat6.x = u_xlat15 * u_xlat1.x;
    u_xlat11 = (-_PerspectiveFilter) + 1.0;
    u_xlat11 = u_xlat11 * abs(u_xlat6.x);
    u_xlat15 = u_xlat15 * u_xlat1.x + (-u_xlat11);
    u_xlat10 = abs(u_xlat10) * u_xlat15 + u_xlat11;
    u_xlatb15 = hlslcc_mtx4x4glstate_matrix_projection[3].w==0.0;
    u_xlat10 = (u_xlatb15) ? u_xlat10 : u_xlat6.x;
    u_xlat15 = _OutlineSoftness * _ScaleRatioA;
    u_xlat15 = u_xlat15 * u_xlat10 + 1.0;
    u_xlat1.x = u_xlat10 / u_xlat15;
    u_xlat10 = _OutlineWidth * _ScaleRatioA;
    u_xlat10 = u_xlat10 * 0.5;
    u_xlat15 = u_xlat1.x * u_xlat10;
    u_xlat15 = u_xlat15 + u_xlat15;
    u_xlat15 = min(u_xlat15, 1.0);
    u_xlat15 = sqrt(u_xlat15);
    vs_COLOR1 = vec4(u_xlat15) * u_xlat4 + u_xlat3;
    u_xlat2 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));
    u_xlat2 = min(u_xlat2, vec4(2e+10, 2e+10, 2e+10, 2e+10));
    u_xlat6.xy = u_xlat0.xy + (-u_xlat2.xy);
    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + (-u_xlat2.xy);
    vs_TEXCOORD2.xy = (-u_xlat2.zw) + u_xlat0.xy;
    u_xlat0.xy = (-u_xlat2.xy) + u_xlat2.zw;
    vs_TEXCOORD0.zw = u_xlat6.xy / u_xlat0.xy;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlatb0 = 0.0>=in_TEXCOORD1.y;
    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);
    u_xlat5 = (-_WeightNormal) + _WeightBold;
    u_xlat0.x = u_xlat0.x * u_xlat5 + _WeightNormal;
    u_xlat0.x = u_xlat0.x * 0.25 + _FaceDilate;
    u_xlat0.x = u_xlat0.x * _ScaleRatioA;
    u_xlat0.x = (-u_xlat0.x) * 0.5 + 0.5;
    u_xlat1.w = u_xlat0.x * u_xlat1.x + -0.5;
    vs_TEXCOORD1.y = (-u_xlat10) * u_xlat1.x + u_xlat1.w;
    vs_TEXCOORD1.z = u_xlat10 * u_xlat1.x + u_xlat1.w;
    vs_TEXCOORD1.xw = u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ClipRect;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
in  vec4 vs_COLOR0;
in  vec4 vs_TEXCOORD0;
in  vec4 vs_TEXCOORD1;
in  vec4 vs_TEXCOORD2;
layout(location = 0) out vec4 SV_Target0;
vec2 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat2;
void main()
{
    u_xlat0.xy = (-_ClipRect.xy) + _ClipRect.zw;
    u_xlat0.xy = u_xlat0.xy + -abs(vs_TEXCOORD2.xy);
    u_xlat0.xy = u_xlat0.xy * vs_TEXCOORD2.zw;
    u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);
    u_xlat0.x = u_xlat0.y * u_xlat0.x;
    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2 = u_xlat1.w * vs_TEXCOORD1.x + (-vs_TEXCOORD1.w);
    u_xlat2 = clamp(u_xlat2, 0.0, 1.0);
    u_xlat1 = vec4(u_xlat2) * vs_COLOR0;
    u_xlat2 = u_xlat1.w * u_xlat0.x + -0.00100000005;
    u_xlat1 = u_xlat0.xxxx * u_xlat1;
    SV_Target0 = u_xlat1;
    u_xlatb0 = u_xlat2<0.0;
    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "UNITY_UI_ALPHACLIP" "UNITY_UI_CLIP_RECT" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 514
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %12 %118 %122 %135 %154 %257 %266 %384 %427 %433 %490 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpDecorate %12 Location 12 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpDecorate %19 ArrayStride 19 
                                                      OpDecorate %20 ArrayStride 20 
                                                      OpDecorate %21 ArrayStride 21 
                                                      OpMemberDecorate %22 0 Offset 22 
                                                      OpMemberDecorate %22 1 Offset 22 
                                                      OpMemberDecorate %22 2 Offset 22 
                                                      OpMemberDecorate %22 3 Offset 22 
                                                      OpMemberDecorate %22 4 Offset 22 
                                                      OpMemberDecorate %22 5 Offset 22 
                                                      OpMemberDecorate %22 6 Offset 22 
                                                      OpMemberDecorate %22 7 Offset 22 
                                                      OpMemberDecorate %22 8 Offset 22 
                                                      OpMemberDecorate %22 9 Offset 22 
                                                      OpMemberDecorate %22 10 Offset 22 
                                                      OpMemberDecorate %22 11 Offset 22 
                                                      OpMemberDecorate %22 12 Offset 22 
                                                      OpMemberDecorate %22 13 Offset 22 
                                                      OpMemberDecorate %22 14 Offset 22 
                                                      OpMemberDecorate %22 15 Offset 22 
                                                      OpMemberDecorate %22 16 Offset 22 
                                                      OpMemberDecorate %22 17 Offset 22 
                                                      OpMemberDecorate %22 18 Offset 22 
                                                      OpMemberDecorate %22 19 Offset 22 
                                                      OpMemberDecorate %22 20 Offset 22 
                                                      OpMemberDecorate %22 21 Offset 22 
                                                      OpMemberDecorate %22 22 Offset 22 
                                                      OpMemberDecorate %22 23 Offset 22 
                                                      OpDecorate %22 Block 
                                                      OpDecorate %24 DescriptorSet 24 
                                                      OpDecorate %24 Binding 24 
                                                      OpMemberDecorate %116 0 BuiltIn 116 
                                                      OpMemberDecorate %116 1 BuiltIn 116 
                                                      OpMemberDecorate %116 2 BuiltIn 116 
                                                      OpDecorate %116 Block 
                                                      OpDecorate %122 Location 122 
                                                      OpDecorate %135 Location 135 
                                                      OpDecorate %154 Location 154 
                                                      OpDecorate vs_TEXCOORD2 Location 257 
                                                      OpDecorate %266 Location 266 
                                                      OpDecorate %384 Location 384 
                                                      OpDecorate vs_TEXCOORD0 Location 427 
                                                      OpDecorate %433 Location 433 
                                                      OpDecorate vs_TEXCOORD1 Location 490 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 2 
                                               %8 = OpTypePointer Private %7 
                                Private f32_2* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 4 
                                              %11 = OpTypePointer Input %10 
                                 Input f32_4* %12 = OpVariable Input 
                                              %15 = OpTypeVector %6 3 
                                              %16 = OpTypeInt 32 0 
                                          u32 %17 = OpConstant 4 
                                              %18 = OpTypeArray %10 %17 
                                              %19 = OpTypeArray %10 %17 
                                              %20 = OpTypeArray %10 %17 
                                              %21 = OpTypeArray %10 %17 
                                              %22 = OpTypeStruct %15 %10 %18 %19 %20 %21 %10 %6 %6 %10 %6 %6 %6 %6 %6 %6 %10 %6 %6 %6 %6 %6 %6 %6 
                                              %23 = OpTypePointer Uniform %22 
Uniform struct {f32_3; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4[4]; f32_4; f32; f32; f32_4; f32; f32; f32; f32; f32; f32; f32_4; f32; f32; f32; f32; f32; f32; f32;}* %24 = OpVariable Uniform 
                                              %25 = OpTypeInt 32 1 
                                          i32 %26 = OpConstant 14 
                                              %27 = OpTypePointer Uniform %6 
                                          i32 %30 = OpConstant 15 
                                              %35 = OpTypePointer Private %10 
                               Private f32_4* %36 = OpVariable Private 
                                          i32 %39 = OpConstant 2 
                                          i32 %40 = OpConstant 1 
                                              %41 = OpTypePointer Uniform %10 
                                          i32 %45 = OpConstant 0 
                               Private f32_4* %60 = OpVariable Private 
                                          i32 %62 = OpConstant 3 
                                              %80 = OpTypePointer Uniform %15 
                               Private f32_4* %86 = OpVariable Private 
                                          i32 %89 = OpConstant 5 
                                         u32 %114 = OpConstant 1 
                                             %115 = OpTypeArray %6 %114 
                                             %116 = OpTypeStruct %10 %6 %115 
                                             %117 = OpTypePointer Output %116 
        Output struct {f32_4; f32; f32[1];}* %118 = OpVariable Output 
                                             %120 = OpTypePointer Output %10 
                                Input f32_4* %122 = OpVariable Input 
                                         i32 %124 = OpConstant 6 
                               Output f32_4* %135 = OpVariable Output 
                                             %137 = OpTypePointer Private %6 
                                Private f32* %138 = OpVariable Private 
                                             %153 = OpTypePointer Input %15 
                                Input f32_3* %154 = OpVariable Input 
                                         u32 %160 = OpConstant 0 
                                         u32 %173 = OpConstant 2 
                                         i32 %197 = OpConstant 4 
                                         i32 %219 = OpConstant 20 
                                         i32 %222 = OpConstant 21 
                                Private f32* %236 = OpVariable Private 
                                         i32 %242 = OpConstant 17 
                                         i32 %245 = OpConstant 18 
                                         f32 %249 = OpConstant 3.674022E-40 
                                       f32_2 %250 = OpConstantComposite %249 %249 
                       Output f32_4* vs_TEXCOORD2 = OpVariable Output 
                                             %265 = OpTypePointer Input %7 
                                Input f32_2* %266 = OpVariable Input 
                                             %267 = OpTypePointer Input %6 
                                         i32 %271 = OpConstant 19 
                              Private f32_2* %276 = OpVariable Private 
                                         i32 %277 = OpConstant 23 
                                         f32 %280 = OpConstant 3.674022E-40 
                                Private f32* %294 = OpVariable Private 
                                         i32 %295 = OpConstant 22 
                                             %318 = OpTypeBool 
                                             %319 = OpTypePointer Private %318 
                               Private bool* %320 = OpVariable Private 
                                         u32 %321 = OpConstant 3 
                                         f32 %324 = OpConstant 3.674022E-40 
                                             %327 = OpTypePointer Function %6 
                                         i32 %336 = OpConstant 8 
                                         i32 %339 = OpConstant 13 
                                         i32 %351 = OpConstant 10 
                                         i32 %367 = OpConstant 9 
                               Output f32_4* %384 = OpVariable Output 
                                         i32 %391 = OpConstant 16 
                                         f32 %394 = OpConstant 3.674022E-40 
                                       f32_4 %395 = OpConstantComposite %394 %394 %394 %394 
                                         f32 %398 = OpConstant 3.674022E-40 
                                       f32_4 %399 = OpConstantComposite %398 %398 %398 %398 
                                         f32 %407 = OpConstant 3.674022E-40 
                                       f32_2 %408 = OpConstantComposite %407 %407 
                       Output f32_4* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_2* %433 = OpVariable Input 
                               Private bool* %437 = OpVariable Private 
                                Private f32* %444 = OpVariable Private 
                                         i32 %445 = OpConstant 11 
                                         i32 %449 = OpConstant 12 
                                         i32 %464 = OpConstant 7 
                                         f32 %478 = OpConstant 3.674022E-40 
                                         f32 %487 = OpConstant 3.674022E-40 
                       Output f32_4* vs_TEXCOORD1 = OpVariable Output 
                                             %501 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                               Function f32* %328 = OpVariable Function 
                                        f32_4 %13 = OpLoad %12 
                                        f32_2 %14 = OpVectorShuffle %13 %13 0 1 
                                 Uniform f32* %28 = OpAccessChain %24 %26 
                                          f32 %29 = OpLoad %28 
                                 Uniform f32* %31 = OpAccessChain %24 %30 
                                          f32 %32 = OpLoad %31 
                                        f32_2 %33 = OpCompositeConstruct %29 %32 
                                        f32_2 %34 = OpFAdd %14 %33 
                                                      OpStore %9 %34 
                                        f32_2 %37 = OpLoad %9 
                                        f32_4 %38 = OpVectorShuffle %37 %37 1 1 1 1 
                               Uniform f32_4* %42 = OpAccessChain %24 %39 %40 
                                        f32_4 %43 = OpLoad %42 
                                        f32_4 %44 = OpFMul %38 %43 
                                                      OpStore %36 %44 
                               Uniform f32_4* %46 = OpAccessChain %24 %39 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_2 %48 = OpLoad %9 
                                        f32_4 %49 = OpVectorShuffle %48 %48 0 0 0 0 
                                        f32_4 %50 = OpFMul %47 %49 
                                        f32_4 %51 = OpLoad %36 
                                        f32_4 %52 = OpFAdd %50 %51 
                                                      OpStore %36 %52 
                               Uniform f32_4* %53 = OpAccessChain %24 %39 %39 
                                        f32_4 %54 = OpLoad %53 
                                        f32_4 %55 = OpLoad %12 
                                        f32_4 %56 = OpVectorShuffle %55 %55 2 2 2 2 
                                        f32_4 %57 = OpFMul %54 %56 
                                        f32_4 %58 = OpLoad %36 
                                        f32_4 %59 = OpFAdd %57 %58 
                                                      OpStore %36 %59 
                                        f32_4 %61 = OpLoad %36 
                               Uniform f32_4* %63 = OpAccessChain %24 %39 %62 
                                        f32_4 %64 = OpLoad %63 
                                        f32_4 %65 = OpFAdd %61 %64 
                                                      OpStore %60 %65 
                               Uniform f32_4* %66 = OpAccessChain %24 %39 %62 
                                        f32_4 %67 = OpLoad %66 
                                        f32_3 %68 = OpVectorShuffle %67 %67 0 1 2 
                                        f32_4 %69 = OpLoad %12 
                                        f32_3 %70 = OpVectorShuffle %69 %69 3 3 3 
                                        f32_3 %71 = OpFMul %68 %70 
                                        f32_4 %72 = OpLoad %36 
                                        f32_3 %73 = OpVectorShuffle %72 %72 0 1 2 
                                        f32_3 %74 = OpFAdd %71 %73 
                                        f32_4 %75 = OpLoad %36 
                                        f32_4 %76 = OpVectorShuffle %75 %74 4 5 6 3 
                                                      OpStore %36 %76 
                                        f32_4 %77 = OpLoad %36 
                                        f32_3 %78 = OpVectorShuffle %77 %77 0 1 2 
                                        f32_3 %79 = OpFNegate %78 
                               Uniform f32_3* %81 = OpAccessChain %24 %45 
                                        f32_3 %82 = OpLoad %81 
                                        f32_3 %83 = OpFAdd %79 %82 
                                        f32_4 %84 = OpLoad %36 
                                        f32_4 %85 = OpVectorShuffle %84 %83 4 5 6 3 
                                                      OpStore %36 %85 
                                        f32_4 %87 = OpLoad %60 
                                        f32_4 %88 = OpVectorShuffle %87 %87 1 1 1 1 
                               Uniform f32_4* %90 = OpAccessChain %24 %89 %40 
                                        f32_4 %91 = OpLoad %90 
                                        f32_4 %92 = OpFMul %88 %91 
                                                      OpStore %86 %92 
                               Uniform f32_4* %93 = OpAccessChain %24 %89 %45 
                                        f32_4 %94 = OpLoad %93 
                                        f32_4 %95 = OpLoad %60 
                                        f32_4 %96 = OpVectorShuffle %95 %95 0 0 0 0 
                                        f32_4 %97 = OpFMul %94 %96 
                                        f32_4 %98 = OpLoad %86 
                                        f32_4 %99 = OpFAdd %97 %98 
                                                      OpStore %86 %99 
                              Uniform f32_4* %100 = OpAccessChain %24 %89 %39 
                                       f32_4 %101 = OpLoad %100 
                                       f32_4 %102 = OpLoad %60 
                                       f32_4 %103 = OpVectorShuffle %102 %102 2 2 2 2 
                                       f32_4 %104 = OpFMul %101 %103 
                                       f32_4 %105 = OpLoad %86 
                                       f32_4 %106 = OpFAdd %104 %105 
                                                      OpStore %86 %106 
                              Uniform f32_4* %107 = OpAccessChain %24 %89 %62 
                                       f32_4 %108 = OpLoad %107 
                                       f32_4 %109 = OpLoad %60 
                                       f32_4 %110 = OpVectorShuffle %109 %109 3 3 3 3 
                                       f32_4 %111 = OpFMul %108 %110 
                                       f32_4 %112 = OpLoad %86 
                                       f32_4 %113 = OpFAdd %111 %112 
                                                      OpStore %60 %113 
                                       f32_4 %119 = OpLoad %60 
                               Output f32_4* %121 = OpAccessChain %118 %45 
                                                      OpStore %121 %119 
                                       f32_4 %123 = OpLoad %122 
                              Uniform f32_4* %125 = OpAccessChain %24 %124 
                                       f32_4 %126 = OpLoad %125 
                                       f32_4 %127 = OpFMul %123 %126 
                                                      OpStore %86 %127 
                                       f32_4 %128 = OpLoad %86 
                                       f32_3 %129 = OpVectorShuffle %128 %128 3 3 3 
                                       f32_4 %130 = OpLoad %86 
                                       f32_3 %131 = OpVectorShuffle %130 %130 0 1 2 
                                       f32_3 %132 = OpFMul %129 %131 
                                       f32_4 %133 = OpLoad %86 
                                       f32_4 %134 = OpVectorShuffle %133 %132 4 5 6 3 
                                                      OpStore %86 %134 
                                       f32_4 %136 = OpLoad %86 
                                                      OpStore %135 %136 
                                       f32_4 %139 = OpLoad %36 
                                       f32_3 %140 = OpVectorShuffle %139 %139 0 1 2 
                                       f32_4 %141 = OpLoad %36 
                                       f32_3 %142 = OpVectorShuffle %141 %141 0 1 2 
                                         f32 %143 = OpDot %140 %142 
                                                      OpStore %138 %143 
                                         f32 %144 = OpLoad %138 
                                         f32 %145 = OpExtInst %1 32 %144 
                                                      OpStore %138 %145 
                                         f32 %146 = OpLoad %138 
                                       f32_3 %147 = OpCompositeConstruct %146 %146 %146 
                                       f32_4 %148 = OpLoad %36 
                                       f32_3 %149 = OpVectorShuffle %148 %148 0 1 2 
                                       f32_3 %150 = OpFMul %147 %149 
                                       f32_4 %151 = OpLoad %36 
                                       f32_4 %152 = OpVectorShuffle %151 %150 4 5 6 3 
                                                      OpStore %36 %152 
                                       f32_3 %155 = OpLoad %154 
                              Uniform f32_4* %156 = OpAccessChain %24 %62 %45 
                                       f32_4 %157 = OpLoad %156 
                                       f32_3 %158 = OpVectorShuffle %157 %157 0 1 2 
                                         f32 %159 = OpDot %155 %158 
                                Private f32* %161 = OpAccessChain %60 %160 
                                                      OpStore %161 %159 
                                       f32_3 %162 = OpLoad %154 
                              Uniform f32_4* %163 = OpAccessChain %24 %62 %40 
                                       f32_4 %164 = OpLoad %163 
                                       f32_3 %165 = OpVectorShuffle %164 %164 0 1 2 
                                         f32 %166 = OpDot %162 %165 
                                Private f32* %167 = OpAccessChain %60 %114 
                                                      OpStore %167 %166 
                                       f32_3 %168 = OpLoad %154 
                              Uniform f32_4* %169 = OpAccessChain %24 %62 %39 
                                       f32_4 %170 = OpLoad %169 
                                       f32_3 %171 = OpVectorShuffle %170 %170 0 1 2 
                                         f32 %172 = OpDot %168 %171 
                                Private f32* %174 = OpAccessChain %60 %173 
                                                      OpStore %174 %172 
                                       f32_4 %175 = OpLoad %60 
                                       f32_3 %176 = OpVectorShuffle %175 %175 0 1 2 
                                       f32_4 %177 = OpLoad %60 
                                       f32_3 %178 = OpVectorShuffle %177 %177 0 1 2 
                                         f32 %179 = OpDot %176 %178 
                                                      OpStore %138 %179 
                                         f32 %180 = OpLoad %138 
                                         f32 %181 = OpExtInst %1 32 %180 
                                                      OpStore %138 %181 
                                         f32 %182 = OpLoad %138 
                                       f32_3 %183 = OpCompositeConstruct %182 %182 %182 
                                       f32_4 %184 = OpLoad %60 
                                       f32_3 %185 = OpVectorShuffle %184 %184 0 1 2 
                                       f32_3 %186 = OpFMul %183 %185 
                                       f32_4 %187 = OpLoad %60 
                                       f32_4 %188 = OpVectorShuffle %187 %186 4 5 6 3 
                                                      OpStore %60 %188 
                                       f32_4 %189 = OpLoad %60 
                                       f32_3 %190 = OpVectorShuffle %189 %189 0 1 2 
                                       f32_4 %191 = OpLoad %36 
                                       f32_3 %192 = OpVectorShuffle %191 %191 0 1 2 
                                         f32 %193 = OpDot %190 %192 
                                                      OpStore %138 %193 
                              Uniform f32_4* %194 = OpAccessChain %24 %40 
                                       f32_4 %195 = OpLoad %194 
                                       f32_2 %196 = OpVectorShuffle %195 %195 1 1 
                              Uniform f32_4* %198 = OpAccessChain %24 %197 %40 
                                       f32_4 %199 = OpLoad %198 
                                       f32_2 %200 = OpVectorShuffle %199 %199 0 1 
                                       f32_2 %201 = OpFMul %196 %200 
                                       f32_4 %202 = OpLoad %36 
                                       f32_4 %203 = OpVectorShuffle %202 %201 4 5 2 3 
                                                      OpStore %36 %203 
                              Uniform f32_4* %204 = OpAccessChain %24 %197 %45 
                                       f32_4 %205 = OpLoad %204 
                                       f32_2 %206 = OpVectorShuffle %205 %205 0 1 
                              Uniform f32_4* %207 = OpAccessChain %24 %40 
                                       f32_4 %208 = OpLoad %207 
                                       f32_2 %209 = OpVectorShuffle %208 %208 0 0 
                                       f32_2 %210 = OpFMul %206 %209 
                                       f32_4 %211 = OpLoad %36 
                                       f32_2 %212 = OpVectorShuffle %211 %211 0 1 
                                       f32_2 %213 = OpFAdd %210 %212 
                                       f32_4 %214 = OpLoad %36 
                                       f32_4 %215 = OpVectorShuffle %214 %213 4 5 2 3 
                                                      OpStore %36 %215 
                                       f32_4 %216 = OpLoad %36 
                                       f32_2 %217 = OpVectorShuffle %216 %216 0 1 
                                       f32_2 %218 = OpExtInst %1 4 %217 
                                Uniform f32* %220 = OpAccessChain %24 %219 
                                         f32 %221 = OpLoad %220 
                                Uniform f32* %223 = OpAccessChain %24 %222 
                                         f32 %224 = OpLoad %223 
                                       f32_2 %225 = OpCompositeConstruct %221 %224 
                                       f32_2 %226 = OpFMul %218 %225 
                                       f32_4 %227 = OpLoad %36 
                                       f32_4 %228 = OpVectorShuffle %227 %226 4 5 2 3 
                                                      OpStore %36 %228 
                                       f32_4 %229 = OpLoad %60 
                                       f32_2 %230 = OpVectorShuffle %229 %229 3 3 
                                       f32_4 %231 = OpLoad %36 
                                       f32_2 %232 = OpVectorShuffle %231 %231 0 1 
                                       f32_2 %233 = OpFDiv %230 %232 
                                       f32_4 %234 = OpLoad %36 
                                       f32_4 %235 = OpVectorShuffle %234 %233 4 5 2 3 
                                                      OpStore %36 %235 
                                       f32_4 %237 = OpLoad %36 
                                       f32_2 %238 = OpVectorShuffle %237 %237 0 1 
                                       f32_4 %239 = OpLoad %36 
                                       f32_2 %240 = OpVectorShuffle %239 %239 0 1 
                                         f32 %241 = OpDot %238 %240 
                                                      OpStore %236 %241 
                                Uniform f32* %243 = OpAccessChain %24 %242 
                                         f32 %244 = OpLoad %243 
                                Uniform f32* %246 = OpAccessChain %24 %245 
                                         f32 %247 = OpLoad %246 
                                       f32_2 %248 = OpCompositeConstruct %244 %247 
                                       f32_2 %251 = OpFMul %248 %250 
                                       f32_4 %252 = OpLoad %36 
                                       f32_2 %253 = OpVectorShuffle %252 %252 0 1 
                                       f32_2 %254 = OpFAdd %251 %253 
                                       f32_4 %255 = OpLoad %36 
                                       f32_4 %256 = OpVectorShuffle %255 %254 4 5 2 3 
                                                      OpStore %36 %256 
                                       f32_4 %258 = OpLoad %36 
                                       f32_2 %259 = OpVectorShuffle %258 %258 0 1 
                                       f32_2 %260 = OpFDiv %250 %259 
                                       f32_4 %261 = OpLoad vs_TEXCOORD2 
                                       f32_4 %262 = OpVectorShuffle %261 %260 0 1 4 5 
                                                      OpStore vs_TEXCOORD2 %262 
                                         f32 %263 = OpLoad %236 
                                         f32 %264 = OpExtInst %1 32 %263 
                                                      OpStore %236 %264 
                                  Input f32* %268 = OpAccessChain %266 %114 
                                         f32 %269 = OpLoad %268 
                                         f32 %270 = OpExtInst %1 4 %269 
                                Uniform f32* %272 = OpAccessChain %24 %271 
                                         f32 %273 = OpLoad %272 
                                         f32 %274 = OpFMul %270 %273 
                                Private f32* %275 = OpAccessChain %36 %160 
                                                      OpStore %275 %274 
                                Uniform f32* %278 = OpAccessChain %24 %277 
                                         f32 %279 = OpLoad %278 
                                         f32 %281 = OpFAdd %279 %280 
                                Private f32* %282 = OpAccessChain %276 %160 
                                                      OpStore %282 %281 
                                Private f32* %283 = OpAccessChain %276 %160 
                                         f32 %284 = OpLoad %283 
                                Private f32* %285 = OpAccessChain %36 %160 
                                         f32 %286 = OpLoad %285 
                                         f32 %287 = OpFMul %284 %286 
                                Private f32* %288 = OpAccessChain %36 %160 
                                                      OpStore %288 %287 
                                         f32 %289 = OpLoad %236 
                                Private f32* %290 = OpAccessChain %36 %160 
                                         f32 %291 = OpLoad %290 
                                         f32 %292 = OpFMul %289 %291 
                                Private f32* %293 = OpAccessChain %276 %160 
                                                      OpStore %293 %292 
                                Uniform f32* %296 = OpAccessChain %24 %295 
                                         f32 %297 = OpLoad %296 
                                         f32 %298 = OpFNegate %297 
                                         f32 %299 = OpFAdd %298 %280 
                                                      OpStore %294 %299 
                                         f32 %300 = OpLoad %294 
                                Private f32* %301 = OpAccessChain %276 %160 
                                         f32 %302 = OpLoad %301 
                                         f32 %303 = OpExtInst %1 4 %302 
                                         f32 %304 = OpFMul %300 %303 
                                                      OpStore %294 %304 
                                         f32 %305 = OpLoad %236 
                                Private f32* %306 = OpAccessChain %36 %160 
                                         f32 %307 = OpLoad %306 
                                         f32 %308 = OpFMul %305 %307 
                                         f32 %309 = OpLoad %294 
                                         f32 %310 = OpFNegate %309 
                                         f32 %311 = OpFAdd %308 %310 
                                                      OpStore %236 %311 
                                         f32 %312 = OpLoad %138 
                                         f32 %313 = OpExtInst %1 4 %312 
                                         f32 %314 = OpLoad %236 
                                         f32 %315 = OpFMul %313 %314 
                                         f32 %316 = OpLoad %294 
                                         f32 %317 = OpFAdd %315 %316 
                                                      OpStore %138 %317 
                                Uniform f32* %322 = OpAccessChain %24 %197 %62 %321 
                                         f32 %323 = OpLoad %322 
                                        bool %325 = OpFOrdEqual %323 %324 
                                                      OpStore %320 %325 
                                        bool %326 = OpLoad %320 
                                                      OpSelectionMerge %330 None 
                                                      OpBranchConditional %326 %329 %332 
                                             %329 = OpLabel 
                                         f32 %331 = OpLoad %138 
                                                      OpStore %328 %331 
                                                      OpBranch %330 
                                             %332 = OpLabel 
                                Private f32* %333 = OpAccessChain %276 %160 
                                         f32 %334 = OpLoad %333 
                                                      OpStore %328 %334 
                                                      OpBranch %330 
                                             %330 = OpLabel 
                                         f32 %335 = OpLoad %328 
                                                      OpStore %138 %335 
                                Uniform f32* %337 = OpAccessChain %24 %336 
                                         f32 %338 = OpLoad %337 
                                Uniform f32* %340 = OpAccessChain %24 %339 
                                         f32 %341 = OpLoad %340 
                                         f32 %342 = OpFMul %338 %341 
                                                      OpStore %236 %342 
                                         f32 %343 = OpLoad %236 
                                         f32 %344 = OpLoad %138 
                                         f32 %345 = OpFMul %343 %344 
                                         f32 %346 = OpFAdd %345 %280 
                                                      OpStore %236 %346 
                                         f32 %347 = OpLoad %138 
                                         f32 %348 = OpLoad %236 
                                         f32 %349 = OpFDiv %347 %348 
                                Private f32* %350 = OpAccessChain %36 %160 
                                                      OpStore %350 %349 
                                Uniform f32* %352 = OpAccessChain %24 %351 
                                         f32 %353 = OpLoad %352 
                                Uniform f32* %354 = OpAccessChain %24 %339 
                                         f32 %355 = OpLoad %354 
                                         f32 %356 = OpFMul %353 %355 
                                                      OpStore %138 %356 
                                Private f32* %357 = OpAccessChain %36 %160 
                                         f32 %358 = OpLoad %357 
                                         f32 %359 = OpLoad %138 
                                         f32 %360 = OpFMul %358 %359 
                                                      OpStore %138 %360 
                                         f32 %361 = OpLoad %138 
                                         f32 %362 = OpExtInst %1 37 %361 %280 
                                                      OpStore %236 %362 
                                         f32 %363 = OpLoad %236 
                                         f32 %364 = OpExtInst %1 31 %363 
                                                      OpStore %236 %364 
                                  Input f32* %365 = OpAccessChain %122 %321 
                                         f32 %366 = OpLoad %365 
                                Uniform f32* %368 = OpAccessChain %24 %367 %321 
                                         f32 %369 = OpLoad %368 
                                         f32 %370 = OpFMul %366 %369 
                                Private f32* %371 = OpAccessChain %60 %321 
                                                      OpStore %371 %370 
                                       f32_4 %372 = OpLoad %60 
                                       f32_3 %373 = OpVectorShuffle %372 %372 3 3 3 
                              Uniform f32_4* %374 = OpAccessChain %24 %367 
                                       f32_4 %375 = OpLoad %374 
                                       f32_3 %376 = OpVectorShuffle %375 %375 0 1 2 
                                       f32_3 %377 = OpFMul %373 %376 
                                       f32_4 %378 = OpLoad %60 
                                       f32_4 %379 = OpVectorShuffle %378 %377 4 5 6 3 
                                                      OpStore %60 %379 
                                       f32_4 %380 = OpLoad %86 
                                       f32_4 %381 = OpFNegate %380 
                                       f32_4 %382 = OpLoad %60 
                                       f32_4 %383 = OpFAdd %381 %382 
                                                      OpStore %60 %383 
                                         f32 %385 = OpLoad %236 
                                       f32_4 %386 = OpCompositeConstruct %385 %385 %385 %385 
                                       f32_4 %387 = OpLoad %60 
                                       f32_4 %388 = OpFMul %386 %387 
                                       f32_4 %389 = OpLoad %86 
                                       f32_4 %390 = OpFAdd %388 %389 
                                                      OpStore %384 %390 
                              Uniform f32_4* %392 = OpAccessChain %24 %391 
                                       f32_4 %393 = OpLoad %392 
                                       f32_4 %396 = OpExtInst %1 40 %393 %395 
                                                      OpStore %60 %396 
                                       f32_4 %397 = OpLoad %60 
                                       f32_4 %400 = OpExtInst %1 37 %397 %399 
                                                      OpStore %60 %400 
                                       f32_2 %401 = OpLoad %9 
                                       f32_4 %402 = OpLoad %60 
                                       f32_2 %403 = OpVectorShuffle %402 %402 0 1 
                                       f32_2 %404 = OpFNegate %403 
                                       f32_2 %405 = OpFAdd %401 %404 
                                                      OpStore %276 %405 
                                       f32_2 %406 = OpLoad %9 
                                       f32_2 %409 = OpFMul %406 %408 
                                       f32_4 %410 = OpLoad %60 
                                       f32_2 %411 = OpVectorShuffle %410 %410 0 1 
                                       f32_2 %412 = OpFNegate %411 
                                       f32_2 %413 = OpFAdd %409 %412 
                                                      OpStore %9 %413 
                                       f32_4 %414 = OpLoad %60 
                                       f32_2 %415 = OpVectorShuffle %414 %414 2 3 
                                       f32_2 %416 = OpFNegate %415 
                                       f32_2 %417 = OpLoad %9 
                                       f32_2 %418 = OpFAdd %416 %417 
                                       f32_4 %419 = OpLoad vs_TEXCOORD2 
                                       f32_4 %420 = OpVectorShuffle %419 %418 4 5 2 3 
                                                      OpStore vs_TEXCOORD2 %420 
                                       f32_4 %421 = OpLoad %60 
                                       f32_2 %422 = OpVectorShuffle %421 %421 0 1 
                                       f32_2 %423 = OpFNegate %422 
                                       f32_4 %424 = OpLoad %60 
                                       f32_2 %425 = OpVectorShuffle %424 %424 2 3 
                                       f32_2 %426 = OpFAdd %423 %425 
                                                      OpStore %9 %426 
                                       f32_2 %428 = OpLoad %276 
                                       f32_2 %429 = OpLoad %9 
                                       f32_2 %430 = OpFDiv %428 %429 
                                       f32_4 %431 = OpLoad vs_TEXCOORD0 
                                       f32_4 %432 = OpVectorShuffle %431 %430 0 1 4 5 
                                                      OpStore vs_TEXCOORD0 %432 
                                       f32_2 %434 = OpLoad %433 
                                       f32_4 %435 = OpLoad vs_TEXCOORD0 
                                       f32_4 %436 = OpVectorShuffle %435 %434 4 5 2 3 
                                                      OpStore vs_TEXCOORD0 %436 
                                  Input f32* %438 = OpAccessChain %266 %114 
                                         f32 %439 = OpLoad %438 
                                        bool %440 = OpFOrdGreaterThanEqual %324 %439 
                                                      OpStore %437 %440 
                                        bool %441 = OpLoad %437 
                                         f32 %442 = OpSelect %441 %280 %324 
                                Private f32* %443 = OpAccessChain %9 %160 
                                                      OpStore %443 %442 
                                Uniform f32* %446 = OpAccessChain %24 %445 
                                         f32 %447 = OpLoad %446 
                                         f32 %448 = OpFNegate %447 
                                Uniform f32* %450 = OpAccessChain %24 %449 
                                         f32 %451 = OpLoad %450 
                                         f32 %452 = OpFAdd %448 %451 
                                                      OpStore %444 %452 
                                Private f32* %453 = OpAccessChain %9 %160 
                                         f32 %454 = OpLoad %453 
                                         f32 %455 = OpLoad %444 
                                         f32 %456 = OpFMul %454 %455 
                                Uniform f32* %457 = OpAccessChain %24 %445 
                                         f32 %458 = OpLoad %457 
                                         f32 %459 = OpFAdd %456 %458 
                                Private f32* %460 = OpAccessChain %9 %160 
                                                      OpStore %460 %459 
                                Private f32* %461 = OpAccessChain %9 %160 
                                         f32 %462 = OpLoad %461 
                                         f32 %463 = OpFMul %462 %249 
                                Uniform f32* %465 = OpAccessChain %24 %464 
                                         f32 %466 = OpLoad %465 
                                         f32 %467 = OpFAdd %463 %466 
                                Private f32* %468 = OpAccessChain %9 %160 
                                                      OpStore %468 %467 
                                Private f32* %469 = OpAccessChain %9 %160 
                                         f32 %470 = OpLoad %469 
                                Uniform f32* %471 = OpAccessChain %24 %339 
                                         f32 %472 = OpLoad %471 
                                         f32 %473 = OpFMul %470 %472 
                                Private f32* %474 = OpAccessChain %9 %160 
                                                      OpStore %474 %473 
                                Private f32* %475 = OpAccessChain %9 %160 
                                         f32 %476 = OpLoad %475 
                                         f32 %477 = OpFNegate %476 
                                         f32 %479 = OpFMul %477 %478 
                                         f32 %480 = OpFAdd %479 %478 
                                Private f32* %481 = OpAccessChain %9 %160 
                                                      OpStore %481 %480 
                                Private f32* %482 = OpAccessChain %9 %160 
                                         f32 %483 = OpLoad %482 
                                Private f32* %484 = OpAccessChain %36 %160 
                                         f32 %485 = OpLoad %484 
                                         f32 %486 = OpFMul %483 %485 
                                         f32 %488 = OpFAdd %486 %487 
                                Private f32* %489 = OpAccessChain %36 %321 
                                                      OpStore %489 %488 
                                       f32_4 %491 = OpLoad %36 
                                       f32_2 %492 = OpVectorShuffle %491 %491 0 3 
                                       f32_4 %493 = OpLoad vs_TEXCOORD1 
                                       f32_4 %494 = OpVectorShuffle %493 %492 4 1 2 5 
                                                      OpStore vs_TEXCOORD1 %494 
                                         f32 %495 = OpLoad %138 
                                         f32 %496 = OpFNegate %495 
                                         f32 %497 = OpFMul %496 %478 
                                Private f32* %498 = OpAccessChain %36 %321 
                                         f32 %499 = OpLoad %498 
                                         f32 %500 = OpFAdd %497 %499 
                                 Output f32* %502 = OpAccessChain vs_TEXCOORD1 %114 
                                                      OpStore %502 %500 
                                         f32 %503 = OpLoad %138 
                                         f32 %504 = OpFMul %503 %478 
                                Private f32* %505 = OpAccessChain %36 %321 
                                         f32 %506 = OpLoad %505 
                                         f32 %507 = OpFAdd %504 %506 
                                 Output f32* %508 = OpAccessChain vs_TEXCOORD1 %173 
                                                      OpStore %508 %507 
                                 Output f32* %509 = OpAccessChain %118 %45 %114 
                                         f32 %510 = OpLoad %509 
                                         f32 %511 = OpFNegate %510 
                                 Output f32* %512 = OpAccessChain %118 %45 %114 
                                                      OpStore %512 %511 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 118
; Schema: 0
                                             OpCapability Shader 
                                      %1 = OpExtInstImport "GLSL.std.450" 
                                             OpMemoryModel Logical GLSL450 
                                             OpEntryPoint Fragment %4 "main" %27 %64 %71 %86 %101 
                                             OpExecutionMode %4 OriginUpperLeft 
                                             OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                             OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                             OpMemberDecorate %11 0 Offset 11 
                                             OpDecorate %11 Block 
                                             OpDecorate %13 DescriptorSet 13 
                                             OpDecorate %13 Binding 13 
                                             OpDecorate vs_TEXCOORD2 Location 27 
                                             OpDecorate %56 DescriptorSet 56 
                                             OpDecorate %56 Binding 56 
                                             OpDecorate %60 DescriptorSet 60 
                                             OpDecorate %60 Binding 60 
                                             OpDecorate vs_TEXCOORD0 Location 64 
                                             OpDecorate vs_TEXCOORD1 Location 71 
                                             OpDecorate %86 Location 86 
                                             OpDecorate %101 Location 101 
                                      %2 = OpTypeVoid 
                                      %3 = OpTypeFunction %2 
                                      %6 = OpTypeFloat 32 
                                      %7 = OpTypeVector %6 2 
                                      %8 = OpTypePointer Private %7 
                       Private f32_2* %9 = OpVariable Private 
                                     %10 = OpTypeVector %6 4 
                                     %11 = OpTypeStruct %10 
                                     %12 = OpTypePointer Uniform %11 
            Uniform struct {f32_4;}* %13 = OpVariable Uniform 
                                     %14 = OpTypeInt 32 1 
                                 i32 %15 = OpConstant 0 
                                     %16 = OpTypePointer Uniform %10 
                                     %26 = OpTypePointer Input %10 
               Input f32_4* vs_TEXCOORD2 = OpVariable Input 
                                 f32 %38 = OpConstant 3.674022E-40 
                                 f32 %39 = OpConstant 3.674022E-40 
                                     %43 = OpTypeInt 32 0 
                                 u32 %44 = OpConstant 1 
                                     %45 = OpTypePointer Private %6 
                                 u32 %48 = OpConstant 0 
                        Private f32* %53 = OpVariable Private 
                                     %54 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                     %55 = OpTypePointer UniformConstant %54 
UniformConstant read_only Texture2D* %56 = OpVariable UniformConstant 
                                     %58 = OpTypeSampler 
                                     %59 = OpTypePointer UniformConstant %58 
            UniformConstant sampler* %60 = OpVariable UniformConstant 
                                     %62 = OpTypeSampledImage %54 
               Input f32_4* vs_TEXCOORD0 = OpVariable Input 
                                 u32 %68 = OpConstant 3 
               Input f32_4* vs_TEXCOORD1 = OpVariable Input 
                                     %72 = OpTypePointer Input %6 
                                     %82 = OpTypePointer Private %10 
                      Private f32_4* %83 = OpVariable Private 
                        Input f32_4* %86 = OpVariable Input 
                                 f32 %94 = OpConstant 3.674022E-40 
                                    %100 = OpTypePointer Output %10 
                      Output f32_4* %101 = OpVariable Output 
                                    %103 = OpTypeBool 
                                    %104 = OpTypePointer Private %103 
                      Private bool* %105 = OpVariable Private 
                                i32 %109 = OpConstant 1 
                                i32 %111 = OpConstant -1 
                                 void %4 = OpFunction None %3 
                                      %5 = OpLabel 
                      Uniform f32_4* %17 = OpAccessChain %13 %15 
                               f32_4 %18 = OpLoad %17 
                               f32_2 %19 = OpVectorShuffle %18 %18 0 1 
                               f32_2 %20 = OpFNegate %19 
                      Uniform f32_4* %21 = OpAccessChain %13 %15 
                               f32_4 %22 = OpLoad %21 
                               f32_2 %23 = OpVectorShuffle %22 %22 2 3 
                               f32_2 %24 = OpFAdd %20 %23 
                                             OpStore %9 %24 
                               f32_2 %25 = OpLoad %9 
                               f32_4 %28 = OpLoad vs_TEXCOORD2 
                               f32_2 %29 = OpVectorShuffle %28 %28 0 1 
                               f32_2 %30 = OpExtInst %1 4 %29 
                               f32_2 %31 = OpFNegate %30 
                               f32_2 %32 = OpFAdd %25 %31 
                                             OpStore %9 %32 
                               f32_2 %33 = OpLoad %9 
                               f32_4 %34 = OpLoad vs_TEXCOORD2 
                               f32_2 %35 = OpVectorShuffle %34 %34 2 3 
                               f32_2 %36 = OpFMul %33 %35 
                                             OpStore %9 %36 
                               f32_2 %37 = OpLoad %9 
                               f32_2 %40 = OpCompositeConstruct %38 %38 
                               f32_2 %41 = OpCompositeConstruct %39 %39 
                               f32_2 %42 = OpExtInst %1 43 %37 %40 %41 
                                             OpStore %9 %42 
                        Private f32* %46 = OpAccessChain %9 %44 
                                 f32 %47 = OpLoad %46 
                        Private f32* %49 = OpAccessChain %9 %48 
                                 f32 %50 = OpLoad %49 
                                 f32 %51 = OpFMul %47 %50 
                        Private f32* %52 = OpAccessChain %9 %48 
                                             OpStore %52 %51 
                 read_only Texture2D %57 = OpLoad %56 
                             sampler %61 = OpLoad %60 
          read_only Texture2DSampled %63 = OpSampledImage %57 %61 
                               f32_4 %65 = OpLoad vs_TEXCOORD0 
                               f32_2 %66 = OpVectorShuffle %65 %65 0 1 
                               f32_4 %67 = OpImageSampleImplicitLod %63 %66 
                                 f32 %69 = OpCompositeExtract %67 3 
                                             OpStore %53 %69 
                                 f32 %70 = OpLoad %53 
                          Input f32* %73 = OpAccessChain vs_TEXCOORD1 %48 
                                 f32 %74 = OpLoad %73 
                                 f32 %75 = OpFMul %70 %74 
                          Input f32* %76 = OpAccessChain vs_TEXCOORD1 %68 
                                 f32 %77 = OpLoad %76 
                                 f32 %78 = OpFNegate %77 
                                 f32 %79 = OpFAdd %75 %78 
                                             OpStore %53 %79 
                                 f32 %80 = OpLoad %53 
                                 f32 %81 = OpExtInst %1 43 %80 %38 %39 
                                             OpStore %53 %81 
                                 f32 %84 = OpLoad %53 
                               f32_4 %85 = OpCompositeConstruct %84 %84 %84 %84 
                               f32_4 %87 = OpLoad %86 
                               f32_4 %88 = OpFMul %85 %87 
                                             OpStore %83 %88 
                        Private f32* %89 = OpAccessChain %83 %68 
                                 f32 %90 = OpLoad %89 
                        Private f32* %91 = OpAccessChain %9 %48 
                                 f32 %92 = OpLoad %91 
                                 f32 %93 = OpFMul %90 %92 
                                 f32 %95 = OpFAdd %93 %94 
                                             OpStore %53 %95 
                               f32_2 %96 = OpLoad %9 
                               f32_4 %97 = OpVectorShuffle %96 %96 0 0 0 0 
                               f32_4 %98 = OpLoad %83 
                               f32_4 %99 = OpFMul %97 %98 
                                             OpStore %83 %99 
                              f32_4 %102 = OpLoad %83 
                                             OpStore %101 %102 
                                f32 %106 = OpLoad %53 
                               bool %107 = OpFOrdLessThan %106 %38 
                                             OpStore %105 %107 
                               bool %108 = OpLoad %105 
                                i32 %110 = OpSelect %108 %109 %15 
                                i32 %112 = OpIMul %110 %111 
                               bool %113 = OpINotEqual %112 %15 
                                             OpSelectionMerge %115 None 
                                             OpBranchConditional %113 %114 %115 
                                    %114 = OpLabel 
                                             OpKill
                                    %115 = OpLabel 
                                             OpReturn
                                             OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "OUTLINE_ON" "UNITY_UI_ALPHACLIP" "UNITY_UI_CLIP_RECT" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "OUTLINE_ON" "UNITY_UI_ALPHACLIP" "UNITY_UI_CLIP_RECT" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _FaceColor;
uniform 	float _FaceDilate;
uniform 	float _OutlineSoftness;
uniform 	vec4 _OutlineColor;
uniform 	float _OutlineWidth;
uniform 	float _WeightNormal;
uniform 	float _WeightBold;
uniform 	float _ScaleRatioA;
uniform 	float _VertexOffsetX;
uniform 	float _VertexOffsetY;
uniform 	vec4 _ClipRect;
uniform 	float _MaskSoftnessX;
uniform 	float _MaskSoftnessY;
uniform 	float _GradientScale;
uniform 	float _ScaleX;
uniform 	float _ScaleY;
uniform 	float _PerspectiveFilter;
uniform 	float _Sharpness;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_COLOR0;
in  vec2 in_TEXCOORD0;
in  vec2 in_TEXCOORD1;
out vec4 vs_COLOR0;
out vec4 vs_COLOR1;
out vec4 vs_TEXCOORD0;
out vec4 vs_TEXCOORD1;
out vec4 vs_TEXCOORD2;
vec2 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
float u_xlat5;
vec2 u_xlat6;
float u_xlat10;
float u_xlat11;
float u_xlat15;
bool u_xlatb15;
void main()
{
    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
    gl_Position = u_xlat2;
    u_xlat3 = in_COLOR0 * _FaceColor;
    u_xlat3.xyz = u_xlat3.www * u_xlat3.xyz;
    vs_COLOR0 = u_xlat3;
    u_xlat4.w = in_COLOR0.w * _OutlineColor.w;
    u_xlat4.xyz = u_xlat4.www * _OutlineColor.xyz;
    u_xlat4 = (-u_xlat3) + u_xlat4;
    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat10 = inversesqrt(u_xlat10);
    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat10 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat10 = inversesqrt(u_xlat10);
    u_xlat2.xyz = vec3(u_xlat10) * u_xlat2.xyz;
    u_xlat10 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat1.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;
    u_xlat1.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat1.xy;
    u_xlat1.xy = abs(u_xlat1.xy) * vec2(_ScaleX, _ScaleY);
    u_xlat1.xy = u_xlat2.ww / u_xlat1.xy;
    u_xlat15 = dot(u_xlat1.xy, u_xlat1.xy);
    u_xlat1.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) * vec2(0.25, 0.25) + u_xlat1.xy;
    vs_TEXCOORD2.zw = vec2(0.25, 0.25) / u_xlat1.xy;
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.x = abs(in_TEXCOORD1.y) * _GradientScale;
    u_xlat6.x = _Sharpness + 1.0;
    u_xlat1.x = u_xlat6.x * u_xlat1.x;
    u_xlat6.x = u_xlat15 * u_xlat1.x;
    u_xlat11 = (-_PerspectiveFilter) + 1.0;
    u_xlat11 = u_xlat11 * abs(u_xlat6.x);
    u_xlat15 = u_xlat15 * u_xlat1.x + (-u_xlat11);
    u_xlat10 = abs(u_xlat10) * u_xlat15 + u_xlat11;
    u_xlatb15 = hlslcc_mtx4x4glstate_matrix_projection[3].w==0.0;
    u_xlat10 = (u_xlatb15) ? u_xlat10 : u_xlat6.x;
    u_xlat15 = _OutlineSoftness * _ScaleRatioA;
    u_xlat15 = u_xlat15 * u_xlat10 + 1.0;
    u_xlat1.x = u_xlat10 / u_xlat15;
    u_xlat10 = _OutlineWidth * _ScaleRatioA;
    u_xlat10 = u_xlat10 * 0.5;
    u_xlat15 = u_xlat1.x * u_xlat10;
    u_xlat15 = u_xlat15 + u_xlat15;
    u_xlat15 = min(u_xlat15, 1.0);
    u_xlat15 = sqrt(u_xlat15);
    vs_COLOR1 = vec4(u_xlat15) * u_xlat4 + u_xlat3;
    u_xlat2 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));
    u_xlat2 = min(u_xlat2, vec4(2e+10, 2e+10, 2e+10, 2e+10));
    u_xlat6.xy = u_xlat0.xy + (-u_xlat2.xy);
    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + (-u_xlat2.xy);
    vs_TEXCOORD2.xy = (-u_xlat2.zw) + u_xlat0.xy;
    u_xlat0.xy = (-u_xlat2.xy) + u_xlat2.zw;
    vs_TEXCOORD0.zw = u_xlat6.xy / u_xlat0.xy;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlatb0 = 0.0>=in_TEXCOORD1.y;
    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);
    u_xlat5 = (-_WeightNormal) + _WeightBold;
    u_xlat0.x = u_xlat0.x * u_xlat5 + _WeightNormal;
    u_xlat0.x = u_xlat0.x * 0.25 + _FaceDilate;
    u_xlat0.x = u_xlat0.x * _ScaleRatioA;
    u_xlat0.x = (-u_xlat0.x) * 0.5 + 0.5;
    u_xlat1.w = u_xlat0.x * u_xlat1.x + -0.5;
    vs_TEXCOORD1.y = (-u_xlat10) * u_xlat1.x + u_xlat1.w;
    vs_TEXCOORD1.z = u_xlat10 * u_xlat1.x + u_xlat1.w;
    vs_TEXCOORD1.xw = u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ClipRect;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
in  vec4 vs_COLOR0;
in  vec4 vs_COLOR1;
in  vec4 vs_TEXCOORD0;
in  vec4 vs_TEXCOORD1;
in  vec4 vs_TEXCOORD2;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat3;
void main()
{
    u_xlat0 = vs_COLOR0 + (-vs_COLOR1);
    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1.xy = u_xlat1.ww * vs_TEXCOORD1.xx + (-vs_TEXCOORD1.zy);
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
    u_xlat0 = u_xlat1.xxxx * u_xlat0 + vs_COLOR1;
    u_xlat0 = u_xlat1.yyyy * u_xlat0;
    u_xlat1.xy = (-_ClipRect.xy) + _ClipRect.zw;
    u_xlat1.xy = u_xlat1.xy + -abs(vs_TEXCOORD2.xy);
    u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD2.zw;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
    u_xlat1.x = u_xlat1.y * u_xlat1.x;
    u_xlat3 = u_xlat0.w * u_xlat1.x + -0.00100000005;
    u_xlat0 = u_xlat0 * u_xlat1.xxxx;
    SV_Target0 = u_xlat0;
    u_xlatb0 = u_xlat3<0.0;
    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "OUTLINE_ON" "UNITY_UI_ALPHACLIP" "UNITY_UI_CLIP_RECT" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 514
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %12 %118 %122 %135 %154 %257 %266 %384 %427 %433 %490 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpDecorate %12 Location 12 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpDecorate %19 ArrayStride 19 
                                                      OpDecorate %20 ArrayStride 20 
                                                      OpDecorate %21 ArrayStride 21 
                                                      OpMemberDecorate %22 0 Offset 22 
                                                      OpMemberDecorate %22 1 Offset 22 
                                                      OpMemberDecorate %22 2 Offset 22 
                                                      OpMemberDecorate %22 3 Offset 22 
                                                      OpMemberDecorate %22 4 Offset 22 
                                                      OpMemberDecorate %22 5 Offset 22 
                                                      OpMemberDecorate %22 6 Offset 22 
                                                      OpMemberDecorate %22 7 Offset 22 
                                                      OpMemberDecorate %22 8 Offset 22 
                                                      OpMemberDecorate %22 9 Offset 22 
                                                      OpMemberDecorate %22 10 Offset 22 
                                                      OpMemberDecorate %22 11 Offset 22 
                                                      OpMemberDecorate %22 12 Offset 22 
                                                      OpMemberDecorate %22 13 Offset 22 
                                                      OpMemberDecorate %22 14 Offset 22 
                                                      OpMemberDecorate %22 15 Offset 22 
                                                      OpMemberDecorate %22 16 Offset 22 
                                                      OpMemberDecorate %22 17 Offset 22 
                                                      OpMemberDecorate %22 18 Offset 22 
                                                      OpMemberDecorate %22 19 Offset 22 
                                                      OpMemberDecorate %22 20 Offset 22 
                                                      OpMemberDecorate %22 21 Offset 22 
                                                      OpMemberDecorate %22 22 Offset 22 
                                                      OpMemberDecorate %22 23 Offset 22 
                                                      OpDecorate %22 Block 
                                                      OpDecorate %24 DescriptorSet 24 
                                                      OpDecorate %24 Binding 24 
                                                      OpMemberDecorate %116 0 BuiltIn 116 
                                                      OpMemberDecorate %116 1 BuiltIn 116 
                                                      OpMemberDecorate %116 2 BuiltIn 116 
                                                      OpDecorate %116 Block 
                                                      OpDecorate %122 Location 122 
                                                      OpDecorate %135 Location 135 
                                                      OpDecorate %154 Location 154 
                                                      OpDecorate vs_TEXCOORD2 Location 257 
                                                      OpDecorate %266 Location 266 
                                                      OpDecorate %384 Location 384 
                                                      OpDecorate vs_TEXCOORD0 Location 427 
                                                      OpDecorate %433 Location 433 
                                                      OpDecorate vs_TEXCOORD1 Location 490 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 2 
                                               %8 = OpTypePointer Private %7 
                                Private f32_2* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 4 
                                              %11 = OpTypePointer Input %10 
                                 Input f32_4* %12 = OpVariable Input 
                                              %15 = OpTypeVector %6 3 
                                              %16 = OpTypeInt 32 0 
                                          u32 %17 = OpConstant 4 
                                              %18 = OpTypeArray %10 %17 
                                              %19 = OpTypeArray %10 %17 
                                              %20 = OpTypeArray %10 %17 
                                              %21 = OpTypeArray %10 %17 
                                              %22 = OpTypeStruct %15 %10 %18 %19 %20 %21 %10 %6 %6 %10 %6 %6 %6 %6 %6 %6 %10 %6 %6 %6 %6 %6 %6 %6 
                                              %23 = OpTypePointer Uniform %22 
Uniform struct {f32_3; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4[4]; f32_4; f32; f32; f32_4; f32; f32; f32; f32; f32; f32; f32_4; f32; f32; f32; f32; f32; f32; f32;}* %24 = OpVariable Uniform 
                                              %25 = OpTypeInt 32 1 
                                          i32 %26 = OpConstant 14 
                                              %27 = OpTypePointer Uniform %6 
                                          i32 %30 = OpConstant 15 
                                              %35 = OpTypePointer Private %10 
                               Private f32_4* %36 = OpVariable Private 
                                          i32 %39 = OpConstant 2 
                                          i32 %40 = OpConstant 1 
                                              %41 = OpTypePointer Uniform %10 
                                          i32 %45 = OpConstant 0 
                               Private f32_4* %60 = OpVariable Private 
                                          i32 %62 = OpConstant 3 
                                              %80 = OpTypePointer Uniform %15 
                               Private f32_4* %86 = OpVariable Private 
                                          i32 %89 = OpConstant 5 
                                         u32 %114 = OpConstant 1 
                                             %115 = OpTypeArray %6 %114 
                                             %116 = OpTypeStruct %10 %6 %115 
                                             %117 = OpTypePointer Output %116 
        Output struct {f32_4; f32; f32[1];}* %118 = OpVariable Output 
                                             %120 = OpTypePointer Output %10 
                                Input f32_4* %122 = OpVariable Input 
                                         i32 %124 = OpConstant 6 
                               Output f32_4* %135 = OpVariable Output 
                                             %137 = OpTypePointer Private %6 
                                Private f32* %138 = OpVariable Private 
                                             %153 = OpTypePointer Input %15 
                                Input f32_3* %154 = OpVariable Input 
                                         u32 %160 = OpConstant 0 
                                         u32 %173 = OpConstant 2 
                                         i32 %197 = OpConstant 4 
                                         i32 %219 = OpConstant 20 
                                         i32 %222 = OpConstant 21 
                                Private f32* %236 = OpVariable Private 
                                         i32 %242 = OpConstant 17 
                                         i32 %245 = OpConstant 18 
                                         f32 %249 = OpConstant 3.674022E-40 
                                       f32_2 %250 = OpConstantComposite %249 %249 
                       Output f32_4* vs_TEXCOORD2 = OpVariable Output 
                                             %265 = OpTypePointer Input %7 
                                Input f32_2* %266 = OpVariable Input 
                                             %267 = OpTypePointer Input %6 
                                         i32 %271 = OpConstant 19 
                              Private f32_2* %276 = OpVariable Private 
                                         i32 %277 = OpConstant 23 
                                         f32 %280 = OpConstant 3.674022E-40 
                                Private f32* %294 = OpVariable Private 
                                         i32 %295 = OpConstant 22 
                                             %318 = OpTypeBool 
                                             %319 = OpTypePointer Private %318 
                               Private bool* %320 = OpVariable Private 
                                         u32 %321 = OpConstant 3 
                                         f32 %324 = OpConstant 3.674022E-40 
                                             %327 = OpTypePointer Function %6 
                                         i32 %336 = OpConstant 8 
                                         i32 %339 = OpConstant 13 
                                         i32 %351 = OpConstant 10 
                                         i32 %367 = OpConstant 9 
                               Output f32_4* %384 = OpVariable Output 
                                         i32 %391 = OpConstant 16 
                                         f32 %394 = OpConstant 3.674022E-40 
                                       f32_4 %395 = OpConstantComposite %394 %394 %394 %394 
                                         f32 %398 = OpConstant 3.674022E-40 
                                       f32_4 %399 = OpConstantComposite %398 %398 %398 %398 
                                         f32 %407 = OpConstant 3.674022E-40 
                                       f32_2 %408 = OpConstantComposite %407 %407 
                       Output f32_4* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_2* %433 = OpVariable Input 
                               Private bool* %437 = OpVariable Private 
                                Private f32* %444 = OpVariable Private 
                                         i32 %445 = OpConstant 11 
                                         i32 %449 = OpConstant 12 
                                         i32 %464 = OpConstant 7 
                                         f32 %478 = OpConstant 3.674022E-40 
                                         f32 %487 = OpConstant 3.674022E-40 
                       Output f32_4* vs_TEXCOORD1 = OpVariable Output 
                                             %501 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                               Function f32* %328 = OpVariable Function 
                                        f32_4 %13 = OpLoad %12 
                                        f32_2 %14 = OpVectorShuffle %13 %13 0 1 
                                 Uniform f32* %28 = OpAccessChain %24 %26 
                                          f32 %29 = OpLoad %28 
                                 Uniform f32* %31 = OpAccessChain %24 %30 
                                          f32 %32 = OpLoad %31 
                                        f32_2 %33 = OpCompositeConstruct %29 %32 
                                        f32_2 %34 = OpFAdd %14 %33 
                                                      OpStore %9 %34 
                                        f32_2 %37 = OpLoad %9 
                                        f32_4 %38 = OpVectorShuffle %37 %37 1 1 1 1 
                               Uniform f32_4* %42 = OpAccessChain %24 %39 %40 
                                        f32_4 %43 = OpLoad %42 
                                        f32_4 %44 = OpFMul %38 %43 
                                                      OpStore %36 %44 
                               Uniform f32_4* %46 = OpAccessChain %24 %39 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_2 %48 = OpLoad %9 
                                        f32_4 %49 = OpVectorShuffle %48 %48 0 0 0 0 
                                        f32_4 %50 = OpFMul %47 %49 
                                        f32_4 %51 = OpLoad %36 
                                        f32_4 %52 = OpFAdd %50 %51 
                                                      OpStore %36 %52 
                               Uniform f32_4* %53 = OpAccessChain %24 %39 %39 
                                        f32_4 %54 = OpLoad %53 
                                        f32_4 %55 = OpLoad %12 
                                        f32_4 %56 = OpVectorShuffle %55 %55 2 2 2 2 
                                        f32_4 %57 = OpFMul %54 %56 
                                        f32_4 %58 = OpLoad %36 
                                        f32_4 %59 = OpFAdd %57 %58 
                                                      OpStore %36 %59 
                                        f32_4 %61 = OpLoad %36 
                               Uniform f32_4* %63 = OpAccessChain %24 %39 %62 
                                        f32_4 %64 = OpLoad %63 
                                        f32_4 %65 = OpFAdd %61 %64 
                                                      OpStore %60 %65 
                               Uniform f32_4* %66 = OpAccessChain %24 %39 %62 
                                        f32_4 %67 = OpLoad %66 
                                        f32_3 %68 = OpVectorShuffle %67 %67 0 1 2 
                                        f32_4 %69 = OpLoad %12 
                                        f32_3 %70 = OpVectorShuffle %69 %69 3 3 3 
                                        f32_3 %71 = OpFMul %68 %70 
                                        f32_4 %72 = OpLoad %36 
                                        f32_3 %73 = OpVectorShuffle %72 %72 0 1 2 
                                        f32_3 %74 = OpFAdd %71 %73 
                                        f32_4 %75 = OpLoad %36 
                                        f32_4 %76 = OpVectorShuffle %75 %74 4 5 6 3 
                                                      OpStore %36 %76 
                                        f32_4 %77 = OpLoad %36 
                                        f32_3 %78 = OpVectorShuffle %77 %77 0 1 2 
                                        f32_3 %79 = OpFNegate %78 
                               Uniform f32_3* %81 = OpAccessChain %24 %45 
                                        f32_3 %82 = OpLoad %81 
                                        f32_3 %83 = OpFAdd %79 %82 
                                        f32_4 %84 = OpLoad %36 
                                        f32_4 %85 = OpVectorShuffle %84 %83 4 5 6 3 
                                                      OpStore %36 %85 
                                        f32_4 %87 = OpLoad %60 
                                        f32_4 %88 = OpVectorShuffle %87 %87 1 1 1 1 
                               Uniform f32_4* %90 = OpAccessChain %24 %89 %40 
                                        f32_4 %91 = OpLoad %90 
                                        f32_4 %92 = OpFMul %88 %91 
                                                      OpStore %86 %92 
                               Uniform f32_4* %93 = OpAccessChain %24 %89 %45 
                                        f32_4 %94 = OpLoad %93 
                                        f32_4 %95 = OpLoad %60 
                                        f32_4 %96 = OpVectorShuffle %95 %95 0 0 0 0 
                                        f32_4 %97 = OpFMul %94 %96 
                                        f32_4 %98 = OpLoad %86 
                                        f32_4 %99 = OpFAdd %97 %98 
                                                      OpStore %86 %99 
                              Uniform f32_4* %100 = OpAccessChain %24 %89 %39 
                                       f32_4 %101 = OpLoad %100 
                                       f32_4 %102 = OpLoad %60 
                                       f32_4 %103 = OpVectorShuffle %102 %102 2 2 2 2 
                                       f32_4 %104 = OpFMul %101 %103 
                                       f32_4 %105 = OpLoad %86 
                                       f32_4 %106 = OpFAdd %104 %105 
                                                      OpStore %86 %106 
                              Uniform f32_4* %107 = OpAccessChain %24 %89 %62 
                                       f32_4 %108 = OpLoad %107 
                                       f32_4 %109 = OpLoad %60 
                                       f32_4 %110 = OpVectorShuffle %109 %109 3 3 3 3 
                                       f32_4 %111 = OpFMul %108 %110 
                                       f32_4 %112 = OpLoad %86 
                                       f32_4 %113 = OpFAdd %111 %112 
                                                      OpStore %60 %113 
                                       f32_4 %119 = OpLoad %60 
                               Output f32_4* %121 = OpAccessChain %118 %45 
                                                      OpStore %121 %119 
                                       f32_4 %123 = OpLoad %122 
                              Uniform f32_4* %125 = OpAccessChain %24 %124 
                                       f32_4 %126 = OpLoad %125 
                                       f32_4 %127 = OpFMul %123 %126 
                                                      OpStore %86 %127 
                                       f32_4 %128 = OpLoad %86 
                                       f32_3 %129 = OpVectorShuffle %128 %128 3 3 3 
                                       f32_4 %130 = OpLoad %86 
                                       f32_3 %131 = OpVectorShuffle %130 %130 0 1 2 
                                       f32_3 %132 = OpFMul %129 %131 
                                       f32_4 %133 = OpLoad %86 
                                       f32_4 %134 = OpVectorShuffle %133 %132 4 5 6 3 
                                                      OpStore %86 %134 
                                       f32_4 %136 = OpLoad %86 
                                                      OpStore %135 %136 
                                       f32_4 %139 = OpLoad %36 
                                       f32_3 %140 = OpVectorShuffle %139 %139 0 1 2 
                                       f32_4 %141 = OpLoad %36 
                                       f32_3 %142 = OpVectorShuffle %141 %141 0 1 2 
                                         f32 %143 = OpDot %140 %142 
                                                      OpStore %138 %143 
                                         f32 %144 = OpLoad %138 
                                         f32 %145 = OpExtInst %1 32 %144 
                                                      OpStore %138 %145 
                                         f32 %146 = OpLoad %138 
                                       f32_3 %147 = OpCompositeConstruct %146 %146 %146 
                                       f32_4 %148 = OpLoad %36 
                                       f32_3 %149 = OpVectorShuffle %148 %148 0 1 2 
                                       f32_3 %150 = OpFMul %147 %149 
                                       f32_4 %151 = OpLoad %36 
                                       f32_4 %152 = OpVectorShuffle %151 %150 4 5 6 3 
                                                      OpStore %36 %152 
                                       f32_3 %155 = OpLoad %154 
                              Uniform f32_4* %156 = OpAccessChain %24 %62 %45 
                                       f32_4 %157 = OpLoad %156 
                                       f32_3 %158 = OpVectorShuffle %157 %157 0 1 2 
                                         f32 %159 = OpDot %155 %158 
                                Private f32* %161 = OpAccessChain %60 %160 
                                                      OpStore %161 %159 
                                       f32_3 %162 = OpLoad %154 
                              Uniform f32_4* %163 = OpAccessChain %24 %62 %40 
                                       f32_4 %164 = OpLoad %163 
                                       f32_3 %165 = OpVectorShuffle %164 %164 0 1 2 
                                         f32 %166 = OpDot %162 %165 
                                Private f32* %167 = OpAccessChain %60 %114 
                                                      OpStore %167 %166 
                                       f32_3 %168 = OpLoad %154 
                              Uniform f32_4* %169 = OpAccessChain %24 %62 %39 
                                       f32_4 %170 = OpLoad %169 
                                       f32_3 %171 = OpVectorShuffle %170 %170 0 1 2 
                                         f32 %172 = OpDot %168 %171 
                                Private f32* %174 = OpAccessChain %60 %173 
                                                      OpStore %174 %172 
                                       f32_4 %175 = OpLoad %60 
                                       f32_3 %176 = OpVectorShuffle %175 %175 0 1 2 
                                       f32_4 %177 = OpLoad %60 
                                       f32_3 %178 = OpVectorShuffle %177 %177 0 1 2 
                                         f32 %179 = OpDot %176 %178 
                                                      OpStore %138 %179 
                                         f32 %180 = OpLoad %138 
                                         f32 %181 = OpExtInst %1 32 %180 
                                                      OpStore %138 %181 
                                         f32 %182 = OpLoad %138 
                                       f32_3 %183 = OpCompositeConstruct %182 %182 %182 
                                       f32_4 %184 = OpLoad %60 
                                       f32_3 %185 = OpVectorShuffle %184 %184 0 1 2 
                                       f32_3 %186 = OpFMul %183 %185 
                                       f32_4 %187 = OpLoad %60 
                                       f32_4 %188 = OpVectorShuffle %187 %186 4 5 6 3 
                                                      OpStore %60 %188 
                                       f32_4 %189 = OpLoad %60 
                                       f32_3 %190 = OpVectorShuffle %189 %189 0 1 2 
                                       f32_4 %191 = OpLoad %36 
                                       f32_3 %192 = OpVectorShuffle %191 %191 0 1 2 
                                         f32 %193 = OpDot %190 %192 
                                                      OpStore %138 %193 
                              Uniform f32_4* %194 = OpAccessChain %24 %40 
                                       f32_4 %195 = OpLoad %194 
                                       f32_2 %196 = OpVectorShuffle %195 %195 1 1 
                              Uniform f32_4* %198 = OpAccessChain %24 %197 %40 
                                       f32_4 %199 = OpLoad %198 
                                       f32_2 %200 = OpVectorShuffle %199 %199 0 1 
                                       f32_2 %201 = OpFMul %196 %200 
                                       f32_4 %202 = OpLoad %36 
                                       f32_4 %203 = OpVectorShuffle %202 %201 4 5 2 3 
                                                      OpStore %36 %203 
                              Uniform f32_4* %204 = OpAccessChain %24 %197 %45 
                                       f32_4 %205 = OpLoad %204 
                                       f32_2 %206 = OpVectorShuffle %205 %205 0 1 
                              Uniform f32_4* %207 = OpAccessChain %24 %40 
                                       f32_4 %208 = OpLoad %207 
                                       f32_2 %209 = OpVectorShuffle %208 %208 0 0 
                                       f32_2 %210 = OpFMul %206 %209 
                                       f32_4 %211 = OpLoad %36 
                                       f32_2 %212 = OpVectorShuffle %211 %211 0 1 
                                       f32_2 %213 = OpFAdd %210 %212 
                                       f32_4 %214 = OpLoad %36 
                                       f32_4 %215 = OpVectorShuffle %214 %213 4 5 2 3 
                                                      OpStore %36 %215 
                                       f32_4 %216 = OpLoad %36 
                                       f32_2 %217 = OpVectorShuffle %216 %216 0 1 
                                       f32_2 %218 = OpExtInst %1 4 %217 
                                Uniform f32* %220 = OpAccessChain %24 %219 
                                         f32 %221 = OpLoad %220 
                                Uniform f32* %223 = OpAccessChain %24 %222 
                                         f32 %224 = OpLoad %223 
                                       f32_2 %225 = OpCompositeConstruct %221 %224 
                                       f32_2 %226 = OpFMul %218 %225 
                                       f32_4 %227 = OpLoad %36 
                                       f32_4 %228 = OpVectorShuffle %227 %226 4 5 2 3 
                                                      OpStore %36 %228 
                                       f32_4 %229 = OpLoad %60 
                                       f32_2 %230 = OpVectorShuffle %229 %229 3 3 
                                       f32_4 %231 = OpLoad %36 
                                       f32_2 %232 = OpVectorShuffle %231 %231 0 1 
                                       f32_2 %233 = OpFDiv %230 %232 
                                       f32_4 %234 = OpLoad %36 
                                       f32_4 %235 = OpVectorShuffle %234 %233 4 5 2 3 
                                                      OpStore %36 %235 
                                       f32_4 %237 = OpLoad %36 
                                       f32_2 %238 = OpVectorShuffle %237 %237 0 1 
                                       f32_4 %239 = OpLoad %36 
                                       f32_2 %240 = OpVectorShuffle %239 %239 0 1 
                                         f32 %241 = OpDot %238 %240 
                                                      OpStore %236 %241 
                                Uniform f32* %243 = OpAccessChain %24 %242 
                                         f32 %244 = OpLoad %243 
                                Uniform f32* %246 = OpAccessChain %24 %245 
                                         f32 %247 = OpLoad %246 
                                       f32_2 %248 = OpCompositeConstruct %244 %247 
                                       f32_2 %251 = OpFMul %248 %250 
                                       f32_4 %252 = OpLoad %36 
                                       f32_2 %253 = OpVectorShuffle %252 %252 0 1 
                                       f32_2 %254 = OpFAdd %251 %253 
                                       f32_4 %255 = OpLoad %36 
                                       f32_4 %256 = OpVectorShuffle %255 %254 4 5 2 3 
                                                      OpStore %36 %256 
                                       f32_4 %258 = OpLoad %36 
                                       f32_2 %259 = OpVectorShuffle %258 %258 0 1 
                                       f32_2 %260 = OpFDiv %250 %259 
                                       f32_4 %261 = OpLoad vs_TEXCOORD2 
                                       f32_4 %262 = OpVectorShuffle %261 %260 0 1 4 5 
                                                      OpStore vs_TEXCOORD2 %262 
                                         f32 %263 = OpLoad %236 
                                         f32 %264 = OpExtInst %1 32 %263 
                                                      OpStore %236 %264 
                                  Input f32* %268 = OpAccessChain %266 %114 
                                         f32 %269 = OpLoad %268 
                                         f32 %270 = OpExtInst %1 4 %269 
                                Uniform f32* %272 = OpAccessChain %24 %271 
                                         f32 %273 = OpLoad %272 
                                         f32 %274 = OpFMul %270 %273 
                                Private f32* %275 = OpAccessChain %36 %160 
                                                      OpStore %275 %274 
                                Uniform f32* %278 = OpAccessChain %24 %277 
                                         f32 %279 = OpLoad %278 
                                         f32 %281 = OpFAdd %279 %280 
                                Private f32* %282 = OpAccessChain %276 %160 
                                                      OpStore %282 %281 
                                Private f32* %283 = OpAccessChain %276 %160 
                                         f32 %284 = OpLoad %283 
                                Private f32* %285 = OpAccessChain %36 %160 
                                         f32 %286 = OpLoad %285 
                                         f32 %287 = OpFMul %284 %286 
                                Private f32* %288 = OpAccessChain %36 %160 
                                                      OpStore %288 %287 
                                         f32 %289 = OpLoad %236 
                                Private f32* %290 = OpAccessChain %36 %160 
                                         f32 %291 = OpLoad %290 
                                         f32 %292 = OpFMul %289 %291 
                                Private f32* %293 = OpAccessChain %276 %160 
                                                      OpStore %293 %292 
                                Uniform f32* %296 = OpAccessChain %24 %295 
                                         f32 %297 = OpLoad %296 
                                         f32 %298 = OpFNegate %297 
                                         f32 %299 = OpFAdd %298 %280 
                                                      OpStore %294 %299 
                                         f32 %300 = OpLoad %294 
                                Private f32* %301 = OpAccessChain %276 %160 
                                         f32 %302 = OpLoad %301 
                                         f32 %303 = OpExtInst %1 4 %302 
                                         f32 %304 = OpFMul %300 %303 
                                                      OpStore %294 %304 
                                         f32 %305 = OpLoad %236 
                                Private f32* %306 = OpAccessChain %36 %160 
                                         f32 %307 = OpLoad %306 
                                         f32 %308 = OpFMul %305 %307 
                                         f32 %309 = OpLoad %294 
                                         f32 %310 = OpFNegate %309 
                                         f32 %311 = OpFAdd %308 %310 
                                                      OpStore %236 %311 
                                         f32 %312 = OpLoad %138 
                                         f32 %313 = OpExtInst %1 4 %312 
                                         f32 %314 = OpLoad %236 
                                         f32 %315 = OpFMul %313 %314 
                                         f32 %316 = OpLoad %294 
                                         f32 %317 = OpFAdd %315 %316 
                                                      OpStore %138 %317 
                                Uniform f32* %322 = OpAccessChain %24 %197 %62 %321 
                                         f32 %323 = OpLoad %322 
                                        bool %325 = OpFOrdEqual %323 %324 
                                                      OpStore %320 %325 
                                        bool %326 = OpLoad %320 
                                                      OpSelectionMerge %330 None 
                                                      OpBranchConditional %326 %329 %332 
                                             %329 = OpLabel 
                                         f32 %331 = OpLoad %138 
                                                      OpStore %328 %331 
                                                      OpBranch %330 
                                             %332 = OpLabel 
                                Private f32* %333 = OpAccessChain %276 %160 
                                         f32 %334 = OpLoad %333 
                                                      OpStore %328 %334 
                                                      OpBranch %330 
                                             %330 = OpLabel 
                                         f32 %335 = OpLoad %328 
                                                      OpStore %138 %335 
                                Uniform f32* %337 = OpAccessChain %24 %336 
                                         f32 %338 = OpLoad %337 
                                Uniform f32* %340 = OpAccessChain %24 %339 
                                         f32 %341 = OpLoad %340 
                                         f32 %342 = OpFMul %338 %341 
                                                      OpStore %236 %342 
                                         f32 %343 = OpLoad %236 
                                         f32 %344 = OpLoad %138 
                                         f32 %345 = OpFMul %343 %344 
                                         f32 %346 = OpFAdd %345 %280 
                                                      OpStore %236 %346 
                                         f32 %347 = OpLoad %138 
                                         f32 %348 = OpLoad %236 
                                         f32 %349 = OpFDiv %347 %348 
                                Private f32* %350 = OpAccessChain %36 %160 
                                                      OpStore %350 %349 
                                Uniform f32* %352 = OpAccessChain %24 %351 
                                         f32 %353 = OpLoad %352 
                                Uniform f32* %354 = OpAccessChain %24 %339 
                                         f32 %355 = OpLoad %354 
                                         f32 %356 = OpFMul %353 %355 
                                                      OpStore %138 %356 
                                Private f32* %357 = OpAccessChain %36 %160 
                                         f32 %358 = OpLoad %357 
                                         f32 %359 = OpLoad %138 
                                         f32 %360 = OpFMul %358 %359 
                                                      OpStore %138 %360 
                                         f32 %361 = OpLoad %138 
                                         f32 %362 = OpExtInst %1 37 %361 %280 
                                                      OpStore %236 %362 
                                         f32 %363 = OpLoad %236 
                                         f32 %364 = OpExtInst %1 31 %363 
                                                      OpStore %236 %364 
                                  Input f32* %365 = OpAccessChain %122 %321 
                                         f32 %366 = OpLoad %365 
                                Uniform f32* %368 = OpAccessChain %24 %367 %321 
                                         f32 %369 = OpLoad %368 
                                         f32 %370 = OpFMul %366 %369 
                                Private f32* %371 = OpAccessChain %60 %321 
                                                      OpStore %371 %370 
                                       f32_4 %372 = OpLoad %60 
                                       f32_3 %373 = OpVectorShuffle %372 %372 3 3 3 
                              Uniform f32_4* %374 = OpAccessChain %24 %367 
                                       f32_4 %375 = OpLoad %374 
                                       f32_3 %376 = OpVectorShuffle %375 %375 0 1 2 
                                       f32_3 %377 = OpFMul %373 %376 
                                       f32_4 %378 = OpLoad %60 
                                       f32_4 %379 = OpVectorShuffle %378 %377 4 5 6 3 
                                                      OpStore %60 %379 
                                       f32_4 %380 = OpLoad %86 
                                       f32_4 %381 = OpFNegate %380 
                                       f32_4 %382 = OpLoad %60 
                                       f32_4 %383 = OpFAdd %381 %382 
                                                      OpStore %60 %383 
                                         f32 %385 = OpLoad %236 
                                       f32_4 %386 = OpCompositeConstruct %385 %385 %385 %385 
                                       f32_4 %387 = OpLoad %60 
                                       f32_4 %388 = OpFMul %386 %387 
                                       f32_4 %389 = OpLoad %86 
                                       f32_4 %390 = OpFAdd %388 %389 
                                                      OpStore %384 %390 
                              Uniform f32_4* %392 = OpAccessChain %24 %391 
                                       f32_4 %393 = OpLoad %392 
                                       f32_4 %396 = OpExtInst %1 40 %393 %395 
                                                      OpStore %60 %396 
                                       f32_4 %397 = OpLoad %60 
                                       f32_4 %400 = OpExtInst %1 37 %397 %399 
                                                      OpStore %60 %400 
                                       f32_2 %401 = OpLoad %9 
                                       f32_4 %402 = OpLoad %60 
                                       f32_2 %403 = OpVectorShuffle %402 %402 0 1 
                                       f32_2 %404 = OpFNegate %403 
                                       f32_2 %405 = OpFAdd %401 %404 
                                                      OpStore %276 %405 
                                       f32_2 %406 = OpLoad %9 
                                       f32_2 %409 = OpFMul %406 %408 
                                       f32_4 %410 = OpLoad %60 
                                       f32_2 %411 = OpVectorShuffle %410 %410 0 1 
                                       f32_2 %412 = OpFNegate %411 
                                       f32_2 %413 = OpFAdd %409 %412 
                                                      OpStore %9 %413 
                                       f32_4 %414 = OpLoad %60 
                                       f32_2 %415 = OpVectorShuffle %414 %414 2 3 
                                       f32_2 %416 = OpFNegate %415 
                                       f32_2 %417 = OpLoad %9 
                                       f32_2 %418 = OpFAdd %416 %417 
                                       f32_4 %419 = OpLoad vs_TEXCOORD2 
                                       f32_4 %420 = OpVectorShuffle %419 %418 4 5 2 3 
                                                      OpStore vs_TEXCOORD2 %420 
                                       f32_4 %421 = OpLoad %60 
                                       f32_2 %422 = OpVectorShuffle %421 %421 0 1 
                                       f32_2 %423 = OpFNegate %422 
                                       f32_4 %424 = OpLoad %60 
                                       f32_2 %425 = OpVectorShuffle %424 %424 2 3 
                                       f32_2 %426 = OpFAdd %423 %425 
                                                      OpStore %9 %426 
                                       f32_2 %428 = OpLoad %276 
                                       f32_2 %429 = OpLoad %9 
                                       f32_2 %430 = OpFDiv %428 %429 
                                       f32_4 %431 = OpLoad vs_TEXCOORD0 
                                       f32_4 %432 = OpVectorShuffle %431 %430 0 1 4 5 
                                                      OpStore vs_TEXCOORD0 %432 
                                       f32_2 %434 = OpLoad %433 
                                       f32_4 %435 = OpLoad vs_TEXCOORD0 
                                       f32_4 %436 = OpVectorShuffle %435 %434 4 5 2 3 
                                                      OpStore vs_TEXCOORD0 %436 
                                  Input f32* %438 = OpAccessChain %266 %114 
                                         f32 %439 = OpLoad %438 
                                        bool %440 = OpFOrdGreaterThanEqual %324 %439 
                                                      OpStore %437 %440 
                                        bool %441 = OpLoad %437 
                                         f32 %442 = OpSelect %441 %280 %324 
                                Private f32* %443 = OpAccessChain %9 %160 
                                                      OpStore %443 %442 
                                Uniform f32* %446 = OpAccessChain %24 %445 
                                         f32 %447 = OpLoad %446 
                                         f32 %448 = OpFNegate %447 
                                Uniform f32* %450 = OpAccessChain %24 %449 
                                         f32 %451 = OpLoad %450 
                                         f32 %452 = OpFAdd %448 %451 
                                                      OpStore %444 %452 
                                Private f32* %453 = OpAccessChain %9 %160 
                                         f32 %454 = OpLoad %453 
                                         f32 %455 = OpLoad %444 
                                         f32 %456 = OpFMul %454 %455 
                                Uniform f32* %457 = OpAccessChain %24 %445 
                                         f32 %458 = OpLoad %457 
                                         f32 %459 = OpFAdd %456 %458 
                                Private f32* %460 = OpAccessChain %9 %160 
                                                      OpStore %460 %459 
                                Private f32* %461 = OpAccessChain %9 %160 
                                         f32 %462 = OpLoad %461 
                                         f32 %463 = OpFMul %462 %249 
                                Uniform f32* %465 = OpAccessChain %24 %464 
                                         f32 %466 = OpLoad %465 
                                         f32 %467 = OpFAdd %463 %466 
                                Private f32* %468 = OpAccessChain %9 %160 
                                                      OpStore %468 %467 
                                Private f32* %469 = OpAccessChain %9 %160 
                                         f32 %470 = OpLoad %469 
                                Uniform f32* %471 = OpAccessChain %24 %339 
                                         f32 %472 = OpLoad %471 
                                         f32 %473 = OpFMul %470 %472 
                                Private f32* %474 = OpAccessChain %9 %160 
                                                      OpStore %474 %473 
                                Private f32* %475 = OpAccessChain %9 %160 
                                         f32 %476 = OpLoad %475 
                                         f32 %477 = OpFNegate %476 
                                         f32 %479 = OpFMul %477 %478 
                                         f32 %480 = OpFAdd %479 %478 
                                Private f32* %481 = OpAccessChain %9 %160 
                                                      OpStore %481 %480 
                                Private f32* %482 = OpAccessChain %9 %160 
                                         f32 %483 = OpLoad %482 
                                Private f32* %484 = OpAccessChain %36 %160 
                                         f32 %485 = OpLoad %484 
                                         f32 %486 = OpFMul %483 %485 
                                         f32 %488 = OpFAdd %486 %487 
                                Private f32* %489 = OpAccessChain %36 %321 
                                                      OpStore %489 %488 
                                       f32_4 %491 = OpLoad %36 
                                       f32_2 %492 = OpVectorShuffle %491 %491 0 3 
                                       f32_4 %493 = OpLoad vs_TEXCOORD1 
                                       f32_4 %494 = OpVectorShuffle %493 %492 4 1 2 5 
                                                      OpStore vs_TEXCOORD1 %494 
                                         f32 %495 = OpLoad %138 
                                         f32 %496 = OpFNegate %495 
                                         f32 %497 = OpFMul %496 %478 
                                Private f32* %498 = OpAccessChain %36 %321 
                                         f32 %499 = OpLoad %498 
                                         f32 %500 = OpFAdd %497 %499 
                                 Output f32* %502 = OpAccessChain vs_TEXCOORD1 %114 
                                                      OpStore %502 %500 
                                         f32 %503 = OpLoad %138 
                                         f32 %504 = OpFMul %503 %478 
                                Private f32* %505 = OpAccessChain %36 %321 
                                         f32 %506 = OpLoad %505 
                                         f32 %507 = OpFAdd %504 %506 
                                 Output f32* %508 = OpAccessChain vs_TEXCOORD1 %173 
                                                      OpStore %508 %507 
                                 Output f32* %509 = OpAccessChain %118 %45 %114 
                                         f32 %510 = OpLoad %509 
                                         f32 %511 = OpFNegate %510 
                                 Output f32* %512 = OpAccessChain %118 %45 %114 
                                                      OpStore %512 %511 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 132
; Schema: 0
                                             OpCapability Shader 
                                      %1 = OpExtInstImport "GLSL.std.450" 
                                             OpMemoryModel Logical GLSL450 
                                             OpEntryPoint Fragment %4 "main" %11 %13 %30 %42 %81 %115 
                                             OpExecutionMode %4 OriginUpperLeft 
                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                             OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                             OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                             OpDecorate %11 Location 11 
                                             OpDecorate %13 Location 13 
                                             OpDecorate %22 DescriptorSet 22 
                                             OpDecorate %22 Binding 22 
                                             OpDecorate %26 DescriptorSet 26 
                                             OpDecorate %26 Binding 26 
                                             OpDecorate vs_TEXCOORD0 Location 30 
                                             OpDecorate vs_TEXCOORD1 Location 42 
                                             OpMemberDecorate %66 0 Offset 66 
                                             OpDecorate %66 Block 
                                             OpDecorate %68 DescriptorSet 68 
                                             OpDecorate %68 Binding 68 
                                             OpDecorate vs_TEXCOORD2 Location 81 
                                             OpDecorate %115 Location 115 
                                      %2 = OpTypeVoid 
                                      %3 = OpTypeFunction %2 
                                      %6 = OpTypeFloat 32 
                                      %7 = OpTypeVector %6 4 
                                      %8 = OpTypePointer Private %7 
                       Private f32_4* %9 = OpVariable Private 
                                     %10 = OpTypePointer Input %7 
                        Input f32_4* %11 = OpVariable Input 
                        Input f32_4* %13 = OpVariable Input 
                                     %17 = OpTypeVector %6 2 
                                     %18 = OpTypePointer Private %17 
                      Private f32_2* %19 = OpVariable Private 
                                     %20 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                     %21 = OpTypePointer UniformConstant %20 
UniformConstant read_only Texture2D* %22 = OpVariable UniformConstant 
                                     %24 = OpTypeSampler 
                                     %25 = OpTypePointer UniformConstant %24 
            UniformConstant sampler* %26 = OpVariable UniformConstant 
                                     %28 = OpTypeSampledImage %20 
               Input f32_4* vs_TEXCOORD0 = OpVariable Input 
                                     %34 = OpTypeInt 32 0 
                                 u32 %35 = OpConstant 3 
                                 u32 %37 = OpConstant 0 
                                     %38 = OpTypePointer Private %6 
               Input f32_4* vs_TEXCOORD1 = OpVariable Input 
                                 f32 %51 = OpConstant 3.674022E-40 
                                 f32 %52 = OpConstant 3.674022E-40 
                                     %66 = OpTypeStruct %7 
                                     %67 = OpTypePointer Uniform %66 
            Uniform struct {f32_4;}* %68 = OpVariable Uniform 
                                     %69 = OpTypeInt 32 1 
                                 i32 %70 = OpConstant 0 
                                     %71 = OpTypePointer Uniform %7 
               Input f32_4* vs_TEXCOORD2 = OpVariable Input 
                                 u32 %95 = OpConstant 1 
                       Private f32* %102 = OpVariable Private 
                                f32 %108 = OpConstant 3.674022E-40 
                                    %114 = OpTypePointer Output %7 
                      Output f32_4* %115 = OpVariable Output 
                                    %117 = OpTypeBool 
                                    %118 = OpTypePointer Private %117 
                      Private bool* %119 = OpVariable Private 
                                i32 %123 = OpConstant 1 
                                i32 %125 = OpConstant -1 
                                 void %4 = OpFunction None %3 
                                      %5 = OpLabel 
                               f32_4 %12 = OpLoad %11 
                               f32_4 %14 = OpLoad %13 
                               f32_4 %15 = OpFNegate %14 
                               f32_4 %16 = OpFAdd %12 %15 
                                             OpStore %9 %16 
                 read_only Texture2D %23 = OpLoad %22 
                             sampler %27 = OpLoad %26 
          read_only Texture2DSampled %29 = OpSampledImage %23 %27 
                               f32_4 %31 = OpLoad vs_TEXCOORD0 
                               f32_2 %32 = OpVectorShuffle %31 %31 0 1 
                               f32_4 %33 = OpImageSampleImplicitLod %29 %32 
                                 f32 %36 = OpCompositeExtract %33 3 
                        Private f32* %39 = OpAccessChain %19 %37 
                                             OpStore %39 %36 
                               f32_2 %40 = OpLoad %19 
                               f32_2 %41 = OpVectorShuffle %40 %40 0 0 
                               f32_4 %43 = OpLoad vs_TEXCOORD1 
                               f32_2 %44 = OpVectorShuffle %43 %43 0 0 
                               f32_2 %45 = OpFMul %41 %44 
                               f32_4 %46 = OpLoad vs_TEXCOORD1 
                               f32_2 %47 = OpVectorShuffle %46 %46 2 1 
                               f32_2 %48 = OpFNegate %47 
                               f32_2 %49 = OpFAdd %45 %48 
                                             OpStore %19 %49 
                               f32_2 %50 = OpLoad %19 
                               f32_2 %53 = OpCompositeConstruct %51 %51 
                               f32_2 %54 = OpCompositeConstruct %52 %52 
                               f32_2 %55 = OpExtInst %1 43 %50 %53 %54 
                                             OpStore %19 %55 
                               f32_2 %56 = OpLoad %19 
                               f32_4 %57 = OpVectorShuffle %56 %56 0 0 0 0 
                               f32_4 %58 = OpLoad %9 
                               f32_4 %59 = OpFMul %57 %58 
                               f32_4 %60 = OpLoad %13 
                               f32_4 %61 = OpFAdd %59 %60 
                                             OpStore %9 %61 
                               f32_2 %62 = OpLoad %19 
                               f32_4 %63 = OpVectorShuffle %62 %62 1 1 1 1 
                               f32_4 %64 = OpLoad %9 
                               f32_4 %65 = OpFMul %63 %64 
                                             OpStore %9 %65 
                      Uniform f32_4* %72 = OpAccessChain %68 %70 
                               f32_4 %73 = OpLoad %72 
                               f32_2 %74 = OpVectorShuffle %73 %73 0 1 
                               f32_2 %75 = OpFNegate %74 
                      Uniform f32_4* %76 = OpAccessChain %68 %70 
                               f32_4 %77 = OpLoad %76 
                               f32_2 %78 = OpVectorShuffle %77 %77 2 3 
                               f32_2 %79 = OpFAdd %75 %78 
                                             OpStore %19 %79 
                               f32_2 %80 = OpLoad %19 
                               f32_4 %82 = OpLoad vs_TEXCOORD2 
                               f32_2 %83 = OpVectorShuffle %82 %82 0 1 
                               f32_2 %84 = OpExtInst %1 4 %83 
                               f32_2 %85 = OpFNegate %84 
                               f32_2 %86 = OpFAdd %80 %85 
                                             OpStore %19 %86 
                               f32_2 %87 = OpLoad %19 
                               f32_4 %88 = OpLoad vs_TEXCOORD2 
                               f32_2 %89 = OpVectorShuffle %88 %88 2 3 
                               f32_2 %90 = OpFMul %87 %89 
                                             OpStore %19 %90 
                               f32_2 %91 = OpLoad %19 
                               f32_2 %92 = OpCompositeConstruct %51 %51 
                               f32_2 %93 = OpCompositeConstruct %52 %52 
                               f32_2 %94 = OpExtInst %1 43 %91 %92 %93 
                                             OpStore %19 %94 
                        Private f32* %96 = OpAccessChain %19 %95 
                                 f32 %97 = OpLoad %96 
                        Private f32* %98 = OpAccessChain %19 %37 
                                 f32 %99 = OpLoad %98 
                                f32 %100 = OpFMul %97 %99 
                       Private f32* %101 = OpAccessChain %19 %37 
                                             OpStore %101 %100 
                       Private f32* %103 = OpAccessChain %9 %35 
                                f32 %104 = OpLoad %103 
                       Private f32* %105 = OpAccessChain %19 %37 
                                f32 %106 = OpLoad %105 
                                f32 %107 = OpFMul %104 %106 
                                f32 %109 = OpFAdd %107 %108 
                                             OpStore %102 %109 
                              f32_4 %110 = OpLoad %9 
                              f32_2 %111 = OpLoad %19 
                              f32_4 %112 = OpVectorShuffle %111 %111 0 0 0 0 
                              f32_4 %113 = OpFMul %110 %112 
                                             OpStore %9 %113 
                              f32_4 %116 = OpLoad %9 
                                             OpStore %115 %116 
                                f32 %120 = OpLoad %102 
                               bool %121 = OpFOrdLessThan %120 %51 
                                             OpStore %119 %121 
                               bool %122 = OpLoad %119 
                                i32 %124 = OpSelect %122 %123 %70 
                                i32 %126 = OpIMul %124 %125 
                               bool %127 = OpINotEqual %126 %70 
                                             OpSelectionMerge %129 None 
                                             OpBranchConditional %127 %128 %129 
                                    %128 = OpLabel 
                                             OpKill
                                    %129 = OpLabel 
                                             OpReturn
                                             OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "UNDERLAY_ON" "UNITY_UI_ALPHACLIP" "UNITY_UI_CLIP_RECT" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "UNDERLAY_ON" "UNITY_UI_ALPHACLIP" "UNITY_UI_CLIP_RECT" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _FaceColor;
uniform 	float _FaceDilate;
uniform 	float _OutlineSoftness;
uniform 	vec4 _OutlineColor;
uniform 	float _OutlineWidth;
uniform 	float _UnderlayOffsetX;
uniform 	float _UnderlayOffsetY;
uniform 	float _UnderlayDilate;
uniform 	float _UnderlaySoftness;
uniform 	float _WeightNormal;
uniform 	float _WeightBold;
uniform 	float _ScaleRatioA;
uniform 	float _ScaleRatioC;
uniform 	float _VertexOffsetX;
uniform 	float _VertexOffsetY;
uniform 	vec4 _ClipRect;
uniform 	float _MaskSoftnessX;
uniform 	float _MaskSoftnessY;
uniform 	float _TextureWidth;
uniform 	float _TextureHeight;
uniform 	float _GradientScale;
uniform 	float _ScaleX;
uniform 	float _ScaleY;
uniform 	float _PerspectiveFilter;
uniform 	float _Sharpness;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_COLOR0;
in  vec2 in_TEXCOORD0;
in  vec2 in_TEXCOORD1;
out vec4 vs_COLOR0;
out vec4 vs_COLOR1;
out vec4 vs_TEXCOORD0;
out vec4 vs_TEXCOORD1;
out vec4 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec2 vs_TEXCOORD4;
vec2 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
vec4 u_xlat6;
vec3 u_xlat7;
vec2 u_xlat8;
float u_xlat14;
float u_xlat15;
float u_xlat21;
bool u_xlatb21;
void main()
{
    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
    gl_Position = u_xlat2;
    vs_COLOR0.w = _FaceColor.w;
    u_xlat3.xyz = in_COLOR0.xyz;
    u_xlat3.w = 1.0;
    u_xlat4 = u_xlat3 * _FaceColor;
    u_xlat2.xyz = u_xlat4.www * u_xlat4.xyz;
    vs_COLOR0.xyz = u_xlat2.xyz;
    u_xlat5.xyz = (-u_xlat2.xyz);
    u_xlat5.w = (-u_xlat4.w);
    u_xlat6.xyz = _OutlineColor.www * _OutlineColor.xyz;
    u_xlat6.w = _OutlineColor.w;
    u_xlat5 = u_xlat5 + u_xlat6;
    u_xlat14 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat14 = inversesqrt(u_xlat14);
    u_xlat1.xyz = vec3(u_xlat14) * u_xlat1.xyz;
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat14 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat14 = inversesqrt(u_xlat14);
    u_xlat2.xyz = vec3(u_xlat14) * u_xlat2.xyz;
    u_xlat14 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat1.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;
    u_xlat1.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat1.xy;
    u_xlat1.xy = abs(u_xlat1.xy) * vec2(_ScaleX, _ScaleY);
    u_xlat1.xy = u_xlat2.ww / u_xlat1.xy;
    u_xlat21 = dot(u_xlat1.xy, u_xlat1.xy);
    u_xlat1.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) * vec2(0.25, 0.25) + u_xlat1.xy;
    vs_TEXCOORD2.zw = vec2(0.25, 0.25) / u_xlat1.xy;
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.x = abs(in_TEXCOORD1.y) * _GradientScale;
    u_xlat8.x = _Sharpness + 1.0;
    u_xlat1.x = u_xlat8.x * u_xlat1.x;
    u_xlat8.x = u_xlat21 * u_xlat1.x;
    u_xlat15 = (-_PerspectiveFilter) + 1.0;
    u_xlat15 = u_xlat15 * abs(u_xlat8.x);
    u_xlat21 = u_xlat21 * u_xlat1.x + (-u_xlat15);
    u_xlat14 = abs(u_xlat14) * u_xlat21 + u_xlat15;
    u_xlatb21 = hlslcc_mtx4x4glstate_matrix_projection[3].w==0.0;
    u_xlat14 = (u_xlatb21) ? u_xlat14 : u_xlat8.x;
    u_xlat21 = _OutlineSoftness * _ScaleRatioA;
    u_xlat21 = u_xlat21 * u_xlat14 + 1.0;
    u_xlat1.x = u_xlat14 / u_xlat21;
    u_xlat21 = _OutlineWidth * _ScaleRatioA;
    u_xlat21 = u_xlat21 * 0.5;
    u_xlat8.x = u_xlat1.x * u_xlat21;
    u_xlat8.x = u_xlat8.x + u_xlat8.x;
    u_xlat8.x = min(u_xlat8.x, 1.0);
    u_xlat8.x = sqrt(u_xlat8.x);
    u_xlat2 = u_xlat5 * u_xlat8.xxxx;
    vs_COLOR1.xyz = u_xlat4.xyz * u_xlat4.www + u_xlat2.xyz;
    vs_COLOR1.w = u_xlat3.w * _FaceColor.w + u_xlat2.w;
    u_xlat2 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));
    u_xlat2 = min(u_xlat2, vec4(2e+10, 2e+10, 2e+10, 2e+10));
    u_xlat8.xy = u_xlat0.xy + (-u_xlat2.xy);
    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + (-u_xlat2.xy);
    vs_TEXCOORD2.xy = (-u_xlat2.zw) + u_xlat0.xy;
    u_xlat0.xy = (-u_xlat2.xy) + u_xlat2.zw;
    vs_TEXCOORD0.zw = u_xlat8.xy / u_xlat0.xy;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlatb0 = 0.0>=in_TEXCOORD1.y;
    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);
    u_xlat7.x = (-_WeightNormal) + _WeightBold;
    u_xlat0.x = u_xlat0.x * u_xlat7.x + _WeightNormal;
    u_xlat0.x = u_xlat0.x * 0.25 + _FaceDilate;
    u_xlat0.x = u_xlat0.x * _ScaleRatioA;
    u_xlat0.x = (-u_xlat0.x) * 0.5 + 0.5;
    u_xlat1.w = u_xlat0.x * u_xlat1.x + -0.5;
    vs_TEXCOORD1.y = (-u_xlat21) * u_xlat1.x + u_xlat1.w;
    vs_TEXCOORD1.z = u_xlat21 * u_xlat1.x + u_xlat1.w;
    vs_TEXCOORD1.xw = u_xlat1.xw;
    vs_TEXCOORD3.z = in_COLOR0.w;
    vs_TEXCOORD3.w = 0.0;
    u_xlat1 = vec4(_UnderlaySoftness, _UnderlayDilate, _UnderlayOffsetX, _UnderlayOffsetY) * vec4(vec4(_ScaleRatioC, _ScaleRatioC, _ScaleRatioC, _ScaleRatioC));
    u_xlat7.xz = (-u_xlat1.zw) * vec2(_GradientScale);
    u_xlat7.xz = u_xlat7.xz / vec2(_TextureWidth, _TextureHeight);
    vs_TEXCOORD3.xy = u_xlat7.xz + in_TEXCOORD0.xy;
    u_xlat7.x = u_xlat1.x * u_xlat14 + 1.0;
    u_xlat7.x = u_xlat14 / u_xlat7.x;
    u_xlat14 = u_xlat1.y * 0.5;
    u_xlat0.x = u_xlat0.x * u_xlat7.x + -0.5;
    vs_TEXCOORD4.y = (-u_xlat14) * u_xlat7.x + u_xlat0.x;
    vs_TEXCOORD4.x = u_xlat7.x;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _UnderlayColor;
uniform 	vec4 _ClipRect;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
in  vec4 vs_COLOR0;
in  vec4 vs_TEXCOORD0;
in  vec4 vs_TEXCOORD1;
in  vec4 vs_TEXCOORD2;
in  vec4 vs_TEXCOORD3;
in  vec2 vs_TEXCOORD4;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = texture(_MainTex, vs_TEXCOORD3.xy);
    u_xlat0.x = u_xlat0.w * vs_TEXCOORD4.x + (-vs_TEXCOORD4.y);
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat1.xyz = _UnderlayColor.www * _UnderlayColor.xyz;
    u_xlat1.w = _UnderlayColor.w;
    u_xlat0 = u_xlat0.xxxx * u_xlat1;
    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1.x = u_xlat1.w * vs_TEXCOORD1.x + (-vs_TEXCOORD1.w);
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat2 = u_xlat1.xxxx * vs_COLOR0;
    u_xlat1.x = (-vs_COLOR0.w) * u_xlat1.x + 1.0;
    u_xlat0 = u_xlat0 * u_xlat1.xxxx + u_xlat2;
    u_xlat1.xy = (-_ClipRect.xy) + _ClipRect.zw;
    u_xlat1.xy = u_xlat1.xy + -abs(vs_TEXCOORD2.xy);
    u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD2.zw;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
    u_xlat1.x = u_xlat1.y * u_xlat1.x;
    u_xlat0 = u_xlat0 * u_xlat1.xxxx;
    u_xlat1.x = u_xlat0.w * vs_TEXCOORD3.z + -0.00100000005;
    u_xlat0 = u_xlat0 * vs_TEXCOORD3.zzzz;
    SV_Target0 = u_xlat0;
    u_xlatb0 = u_xlat1.x<0.0;
    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "UNDERLAY_ON" "UNITY_UI_ALPHACLIP" "UNITY_UI_CLIP_RECT" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 653
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %12 %118 %122 %129 %196 %299 %308 %412 %468 %474 %534 %552 %637 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpDecorate %12 Location 12 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpDecorate %19 ArrayStride 19 
                                                      OpDecorate %20 ArrayStride 20 
                                                      OpDecorate %21 ArrayStride 21 
                                                      OpMemberDecorate %22 0 Offset 22 
                                                      OpMemberDecorate %22 1 Offset 22 
                                                      OpMemberDecorate %22 2 Offset 22 
                                                      OpMemberDecorate %22 3 Offset 22 
                                                      OpMemberDecorate %22 4 Offset 22 
                                                      OpMemberDecorate %22 5 Offset 22 
                                                      OpMemberDecorate %22 6 Offset 22 
                                                      OpMemberDecorate %22 7 Offset 22 
                                                      OpMemberDecorate %22 8 Offset 22 
                                                      OpMemberDecorate %22 9 Offset 22 
                                                      OpMemberDecorate %22 10 Offset 22 
                                                      OpMemberDecorate %22 11 Offset 22 
                                                      OpMemberDecorate %22 12 Offset 22 
                                                      OpMemberDecorate %22 13 Offset 22 
                                                      OpMemberDecorate %22 14 Offset 22 
                                                      OpMemberDecorate %22 15 Offset 22 
                                                      OpMemberDecorate %22 16 Offset 22 
                                                      OpMemberDecorate %22 17 Offset 22 
                                                      OpMemberDecorate %22 18 Offset 22 
                                                      OpMemberDecorate %22 19 Offset 22 
                                                      OpMemberDecorate %22 20 Offset 22 
                                                      OpMemberDecorate %22 21 Offset 22 
                                                      OpMemberDecorate %22 22 Offset 22 
                                                      OpMemberDecorate %22 23 Offset 22 
                                                      OpMemberDecorate %22 24 Offset 22 
                                                      OpMemberDecorate %22 25 Offset 22 
                                                      OpMemberDecorate %22 26 Offset 22 
                                                      OpMemberDecorate %22 27 Offset 22 
                                                      OpMemberDecorate %22 28 Offset 22 
                                                      OpMemberDecorate %22 29 Offset 22 
                                                      OpMemberDecorate %22 30 Offset 22 
                                                      OpDecorate %22 Block 
                                                      OpDecorate %24 DescriptorSet 24 
                                                      OpDecorate %24 Binding 24 
                                                      OpMemberDecorate %116 0 BuiltIn 116 
                                                      OpMemberDecorate %116 1 BuiltIn 116 
                                                      OpMemberDecorate %116 2 BuiltIn 116 
                                                      OpDecorate %116 Block 
                                                      OpDecorate %122 Location 122 
                                                      OpDecorate %129 Location 129 
                                                      OpDecorate %196 Location 196 
                                                      OpDecorate vs_TEXCOORD2 Location 299 
                                                      OpDecorate %308 Location 308 
                                                      OpDecorate %412 Location 412 
                                                      OpDecorate vs_TEXCOORD0 Location 468 
                                                      OpDecorate %474 Location 474 
                                                      OpDecorate vs_TEXCOORD1 Location 534 
                                                      OpDecorate vs_TEXCOORD3 Location 552 
                                                      OpDecorate vs_TEXCOORD4 Location 637 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 2 
                                               %8 = OpTypePointer Private %7 
                                Private f32_2* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 4 
                                              %11 = OpTypePointer Input %10 
                                 Input f32_4* %12 = OpVariable Input 
                                              %15 = OpTypeVector %6 3 
                                              %16 = OpTypeInt 32 0 
                                          u32 %17 = OpConstant 4 
                                              %18 = OpTypeArray %10 %17 
                                              %19 = OpTypeArray %10 %17 
                                              %20 = OpTypeArray %10 %17 
                                              %21 = OpTypeArray %10 %17 
                                              %22 = OpTypeStruct %15 %10 %18 %19 %20 %21 %10 %6 %6 %10 %6 %6 %6 %6 %6 %6 %6 %6 %6 %6 %6 %10 %6 %6 %6 %6 %6 %6 %6 %6 %6 
                                              %23 = OpTypePointer Uniform %22 
Uniform struct {f32_3; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4[4]; f32_4; f32; f32; f32_4; f32; f32; f32; f32; f32; f32; f32; f32; f32; f32; f32; f32_4; f32; f32; f32; f32; f32; f32; f32; f32; f32;}* %24 = OpVariable Uniform 
                                              %25 = OpTypeInt 32 1 
                                          i32 %26 = OpConstant 19 
                                              %27 = OpTypePointer Uniform %6 
                                          i32 %30 = OpConstant 20 
                                              %35 = OpTypePointer Private %10 
                               Private f32_4* %36 = OpVariable Private 
                                          i32 %39 = OpConstant 2 
                                          i32 %40 = OpConstant 1 
                                              %41 = OpTypePointer Uniform %10 
                                          i32 %45 = OpConstant 0 
                               Private f32_4* %60 = OpVariable Private 
                                          i32 %62 = OpConstant 3 
                                              %80 = OpTypePointer Uniform %15 
                               Private f32_4* %86 = OpVariable Private 
                                          i32 %89 = OpConstant 5 
                                         u32 %114 = OpConstant 1 
                                             %115 = OpTypeArray %6 %114 
                                             %116 = OpTypeStruct %10 %6 %115 
                                             %117 = OpTypePointer Output %116 
        Output struct {f32_4; f32; f32[1];}* %118 = OpVariable Output 
                                             %120 = OpTypePointer Output %10 
                               Output f32_4* %122 = OpVariable Output 
                                         i32 %123 = OpConstant 6 
                                         u32 %124 = OpConstant 3 
                                             %127 = OpTypePointer Output %6 
                                Input f32_4* %129 = OpVariable Input 
                                         f32 %134 = OpConstant 3.674022E-40 
                                             %135 = OpTypePointer Private %6 
                              Private f32_4* %137 = OpVariable Private 
                              Private f32_4* %153 = OpVariable Private 
                              Private f32_4* %163 = OpVariable Private 
                                         i32 %164 = OpConstant 9 
                                Private f32* %180 = OpVariable Private 
                                             %195 = OpTypePointer Input %15 
                                Input f32_3* %196 = OpVariable Input 
                                         u32 %202 = OpConstant 0 
                                         u32 %215 = OpConstant 2 
                                         i32 %239 = OpConstant 4 
                                         i32 %261 = OpConstant 27 
                                         i32 %264 = OpConstant 28 
                                Private f32* %278 = OpVariable Private 
                                         i32 %284 = OpConstant 22 
                                         i32 %287 = OpConstant 23 
                                         f32 %291 = OpConstant 3.674022E-40 
                                       f32_2 %292 = OpConstantComposite %291 %291 
                       Output f32_4* vs_TEXCOORD2 = OpVariable Output 
                                             %307 = OpTypePointer Input %7 
                                Input f32_2* %308 = OpVariable Input 
                                             %309 = OpTypePointer Input %6 
                                         i32 %313 = OpConstant 26 
                              Private f32_2* %318 = OpVariable Private 
                                         i32 %319 = OpConstant 30 
                                Private f32* %335 = OpVariable Private 
                                         i32 %336 = OpConstant 29 
                                             %359 = OpTypeBool 
                                             %360 = OpTypePointer Private %359 
                               Private bool* %361 = OpVariable Private 
                                         f32 %364 = OpConstant 3.674022E-40 
                                             %367 = OpTypePointer Function %6 
                                         i32 %376 = OpConstant 8 
                                         i32 %379 = OpConstant 17 
                                         i32 %391 = OpConstant 10 
                               Output f32_4* %412 = OpVariable Output 
                                         i32 %432 = OpConstant 21 
                                         f32 %435 = OpConstant 3.674022E-40 
                                       f32_4 %436 = OpConstantComposite %435 %435 %435 %435 
                                         f32 %439 = OpConstant 3.674022E-40 
                                       f32_4 %440 = OpConstantComposite %439 %439 %439 %439 
                                         f32 %448 = OpConstant 3.674022E-40 
                                       f32_2 %449 = OpConstantComposite %448 %448 
                       Output f32_4* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_2* %474 = OpVariable Input 
                               Private bool* %478 = OpVariable Private 
                                             %485 = OpTypePointer Private %15 
                              Private f32_3* %486 = OpVariable Private 
                                         i32 %487 = OpConstant 15 
                                         i32 %491 = OpConstant 16 
                                         i32 %508 = OpConstant 7 
                                         f32 %522 = OpConstant 3.674022E-40 
                                         f32 %531 = OpConstant 3.674022E-40 
                       Output f32_4* vs_TEXCOORD1 = OpVariable Output 
                       Output f32_4* vs_TEXCOORD3 = OpVariable Output 
                                         i32 %557 = OpConstant 14 
                                         i32 %560 = OpConstant 13 
                                         i32 %563 = OpConstant 11 
                                         i32 %566 = OpConstant 12 
                                         i32 %570 = OpConstant 18 
                                         i32 %597 = OpConstant 24 
                                         i32 %600 = OpConstant 25 
                                             %636 = OpTypePointer Output %7 
                       Output f32_2* vs_TEXCOORD4 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                               Function f32* %368 = OpVariable Function 
                                        f32_4 %13 = OpLoad %12 
                                        f32_2 %14 = OpVectorShuffle %13 %13 0 1 
                                 Uniform f32* %28 = OpAccessChain %24 %26 
                                          f32 %29 = OpLoad %28 
                                 Uniform f32* %31 = OpAccessChain %24 %30 
                                          f32 %32 = OpLoad %31 
                                        f32_2 %33 = OpCompositeConstruct %29 %32 
                                        f32_2 %34 = OpFAdd %14 %33 
                                                      OpStore %9 %34 
                                        f32_2 %37 = OpLoad %9 
                                        f32_4 %38 = OpVectorShuffle %37 %37 1 1 1 1 
                               Uniform f32_4* %42 = OpAccessChain %24 %39 %40 
                                        f32_4 %43 = OpLoad %42 
                                        f32_4 %44 = OpFMul %38 %43 
                                                      OpStore %36 %44 
                               Uniform f32_4* %46 = OpAccessChain %24 %39 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_2 %48 = OpLoad %9 
                                        f32_4 %49 = OpVectorShuffle %48 %48 0 0 0 0 
                                        f32_4 %50 = OpFMul %47 %49 
                                        f32_4 %51 = OpLoad %36 
                                        f32_4 %52 = OpFAdd %50 %51 
                                                      OpStore %36 %52 
                               Uniform f32_4* %53 = OpAccessChain %24 %39 %39 
                                        f32_4 %54 = OpLoad %53 
                                        f32_4 %55 = OpLoad %12 
                                        f32_4 %56 = OpVectorShuffle %55 %55 2 2 2 2 
                                        f32_4 %57 = OpFMul %54 %56 
                                        f32_4 %58 = OpLoad %36 
                                        f32_4 %59 = OpFAdd %57 %58 
                                                      OpStore %36 %59 
                                        f32_4 %61 = OpLoad %36 
                               Uniform f32_4* %63 = OpAccessChain %24 %39 %62 
                                        f32_4 %64 = OpLoad %63 
                                        f32_4 %65 = OpFAdd %61 %64 
                                                      OpStore %60 %65 
                               Uniform f32_4* %66 = OpAccessChain %24 %39 %62 
                                        f32_4 %67 = OpLoad %66 
                                        f32_3 %68 = OpVectorShuffle %67 %67 0 1 2 
                                        f32_4 %69 = OpLoad %12 
                                        f32_3 %70 = OpVectorShuffle %69 %69 3 3 3 
                                        f32_3 %71 = OpFMul %68 %70 
                                        f32_4 %72 = OpLoad %36 
                                        f32_3 %73 = OpVectorShuffle %72 %72 0 1 2 
                                        f32_3 %74 = OpFAdd %71 %73 
                                        f32_4 %75 = OpLoad %36 
                                        f32_4 %76 = OpVectorShuffle %75 %74 4 5 6 3 
                                                      OpStore %36 %76 
                                        f32_4 %77 = OpLoad %36 
                                        f32_3 %78 = OpVectorShuffle %77 %77 0 1 2 
                                        f32_3 %79 = OpFNegate %78 
                               Uniform f32_3* %81 = OpAccessChain %24 %45 
                                        f32_3 %82 = OpLoad %81 
                                        f32_3 %83 = OpFAdd %79 %82 
                                        f32_4 %84 = OpLoad %36 
                                        f32_4 %85 = OpVectorShuffle %84 %83 4 5 6 3 
                                                      OpStore %36 %85 
                                        f32_4 %87 = OpLoad %60 
                                        f32_4 %88 = OpVectorShuffle %87 %87 1 1 1 1 
                               Uniform f32_4* %90 = OpAccessChain %24 %89 %40 
                                        f32_4 %91 = OpLoad %90 
                                        f32_4 %92 = OpFMul %88 %91 
                                                      OpStore %86 %92 
                               Uniform f32_4* %93 = OpAccessChain %24 %89 %45 
                                        f32_4 %94 = OpLoad %93 
                                        f32_4 %95 = OpLoad %60 
                                        f32_4 %96 = OpVectorShuffle %95 %95 0 0 0 0 
                                        f32_4 %97 = OpFMul %94 %96 
                                        f32_4 %98 = OpLoad %86 
                                        f32_4 %99 = OpFAdd %97 %98 
                                                      OpStore %86 %99 
                              Uniform f32_4* %100 = OpAccessChain %24 %89 %39 
                                       f32_4 %101 = OpLoad %100 
                                       f32_4 %102 = OpLoad %60 
                                       f32_4 %103 = OpVectorShuffle %102 %102 2 2 2 2 
                                       f32_4 %104 = OpFMul %101 %103 
                                       f32_4 %105 = OpLoad %86 
                                       f32_4 %106 = OpFAdd %104 %105 
                                                      OpStore %86 %106 
                              Uniform f32_4* %107 = OpAccessChain %24 %89 %62 
                                       f32_4 %108 = OpLoad %107 
                                       f32_4 %109 = OpLoad %60 
                                       f32_4 %110 = OpVectorShuffle %109 %109 3 3 3 3 
                                       f32_4 %111 = OpFMul %108 %110 
                                       f32_4 %112 = OpLoad %86 
                                       f32_4 %113 = OpFAdd %111 %112 
                                                      OpStore %60 %113 
                                       f32_4 %119 = OpLoad %60 
                               Output f32_4* %121 = OpAccessChain %118 %45 
                                                      OpStore %121 %119 
                                Uniform f32* %125 = OpAccessChain %24 %123 %124 
                                         f32 %126 = OpLoad %125 
                                 Output f32* %128 = OpAccessChain %122 %124 
                                                      OpStore %128 %126 
                                       f32_4 %130 = OpLoad %129 
                                       f32_3 %131 = OpVectorShuffle %130 %130 0 1 2 
                                       f32_4 %132 = OpLoad %86 
                                       f32_4 %133 = OpVectorShuffle %132 %131 4 5 6 3 
                                                      OpStore %86 %133 
                                Private f32* %136 = OpAccessChain %86 %124 
                                                      OpStore %136 %134 
                                       f32_4 %138 = OpLoad %86 
                              Uniform f32_4* %139 = OpAccessChain %24 %123 
                                       f32_4 %140 = OpLoad %139 
                                       f32_4 %141 = OpFMul %138 %140 
                                                      OpStore %137 %141 
                                       f32_4 %142 = OpLoad %137 
                                       f32_3 %143 = OpVectorShuffle %142 %142 3 3 3 
                                       f32_4 %144 = OpLoad %137 
                                       f32_3 %145 = OpVectorShuffle %144 %144 0 1 2 
                                       f32_3 %146 = OpFMul %143 %145 
                                       f32_4 %147 = OpLoad %60 
                                       f32_4 %148 = OpVectorShuffle %147 %146 4 5 6 3 
                                                      OpStore %60 %148 
                                       f32_4 %149 = OpLoad %60 
                                       f32_3 %150 = OpVectorShuffle %149 %149 0 1 2 
                                       f32_4 %151 = OpLoad %122 
                                       f32_4 %152 = OpVectorShuffle %151 %150 4 5 6 3 
                                                      OpStore %122 %152 
                                       f32_4 %154 = OpLoad %60 
                                       f32_3 %155 = OpVectorShuffle %154 %154 0 1 2 
                                       f32_3 %156 = OpFNegate %155 
                                       f32_4 %157 = OpLoad %153 
                                       f32_4 %158 = OpVectorShuffle %157 %156 4 5 6 3 
                                                      OpStore %153 %158 
                                Private f32* %159 = OpAccessChain %137 %124 
                                         f32 %160 = OpLoad %159 
                                         f32 %161 = OpFNegate %160 
                                Private f32* %162 = OpAccessChain %153 %124 
                                                      OpStore %162 %161 
                              Uniform f32_4* %165 = OpAccessChain %24 %164 
                                       f32_4 %166 = OpLoad %165 
                                       f32_3 %167 = OpVectorShuffle %166 %166 3 3 3 
                              Uniform f32_4* %168 = OpAccessChain %24 %164 
                                       f32_4 %169 = OpLoad %168 
                                       f32_3 %170 = OpVectorShuffle %169 %169 0 1 2 
                                       f32_3 %171 = OpFMul %167 %170 
                                       f32_4 %172 = OpLoad %163 
                                       f32_4 %173 = OpVectorShuffle %172 %171 4 5 6 3 
                                                      OpStore %163 %173 
                                Uniform f32* %174 = OpAccessChain %24 %164 %124 
                                         f32 %175 = OpLoad %174 
                                Private f32* %176 = OpAccessChain %163 %124 
                                                      OpStore %176 %175 
                                       f32_4 %177 = OpLoad %153 
                                       f32_4 %178 = OpLoad %163 
                                       f32_4 %179 = OpFAdd %177 %178 
                                                      OpStore %153 %179 
                                       f32_4 %181 = OpLoad %36 
                                       f32_3 %182 = OpVectorShuffle %181 %181 0 1 2 
                                       f32_4 %183 = OpLoad %36 
                                       f32_3 %184 = OpVectorShuffle %183 %183 0 1 2 
                                         f32 %185 = OpDot %182 %184 
                                                      OpStore %180 %185 
                                         f32 %186 = OpLoad %180 
                                         f32 %187 = OpExtInst %1 32 %186 
                                                      OpStore %180 %187 
                                         f32 %188 = OpLoad %180 
                                       f32_3 %189 = OpCompositeConstruct %188 %188 %188 
                                       f32_4 %190 = OpLoad %36 
                                       f32_3 %191 = OpVectorShuffle %190 %190 0 1 2 
                                       f32_3 %192 = OpFMul %189 %191 
                                       f32_4 %193 = OpLoad %36 
                                       f32_4 %194 = OpVectorShuffle %193 %192 4 5 6 3 
                                                      OpStore %36 %194 
                                       f32_3 %197 = OpLoad %196 
                              Uniform f32_4* %198 = OpAccessChain %24 %62 %45 
                                       f32_4 %199 = OpLoad %198 
                                       f32_3 %200 = OpVectorShuffle %199 %199 0 1 2 
                                         f32 %201 = OpDot %197 %200 
                                Private f32* %203 = OpAccessChain %60 %202 
                                                      OpStore %203 %201 
                                       f32_3 %204 = OpLoad %196 
                              Uniform f32_4* %205 = OpAccessChain %24 %62 %40 
                                       f32_4 %206 = OpLoad %205 
                                       f32_3 %207 = OpVectorShuffle %206 %206 0 1 2 
                                         f32 %208 = OpDot %204 %207 
                                Private f32* %209 = OpAccessChain %60 %114 
                                                      OpStore %209 %208 
                                       f32_3 %210 = OpLoad %196 
                              Uniform f32_4* %211 = OpAccessChain %24 %62 %39 
                                       f32_4 %212 = OpLoad %211 
                                       f32_3 %213 = OpVectorShuffle %212 %212 0 1 2 
                                         f32 %214 = OpDot %210 %213 
                                Private f32* %216 = OpAccessChain %60 %215 
                                                      OpStore %216 %214 
                                       f32_4 %217 = OpLoad %60 
                                       f32_3 %218 = OpVectorShuffle %217 %217 0 1 2 
                                       f32_4 %219 = OpLoad %60 
                                       f32_3 %220 = OpVectorShuffle %219 %219 0 1 2 
                                         f32 %221 = OpDot %218 %220 
                                                      OpStore %180 %221 
                                         f32 %222 = OpLoad %180 
                                         f32 %223 = OpExtInst %1 32 %222 
                                                      OpStore %180 %223 
                                         f32 %224 = OpLoad %180 
                                       f32_3 %225 = OpCompositeConstruct %224 %224 %224 
                                       f32_4 %226 = OpLoad %60 
                                       f32_3 %227 = OpVectorShuffle %226 %226 0 1 2 
                                       f32_3 %228 = OpFMul %225 %227 
                                       f32_4 %229 = OpLoad %60 
                                       f32_4 %230 = OpVectorShuffle %229 %228 4 5 6 3 
                                                      OpStore %60 %230 
                                       f32_4 %231 = OpLoad %60 
                                       f32_3 %232 = OpVectorShuffle %231 %231 0 1 2 
                                       f32_4 %233 = OpLoad %36 
                                       f32_3 %234 = OpVectorShuffle %233 %233 0 1 2 
                                         f32 %235 = OpDot %232 %234 
                                                      OpStore %180 %235 
                              Uniform f32_4* %236 = OpAccessChain %24 %40 
                                       f32_4 %237 = OpLoad %236 
                                       f32_2 %238 = OpVectorShuffle %237 %237 1 1 
                              Uniform f32_4* %240 = OpAccessChain %24 %239 %40 
                                       f32_4 %241 = OpLoad %240 
                                       f32_2 %242 = OpVectorShuffle %241 %241 0 1 
                                       f32_2 %243 = OpFMul %238 %242 
                                       f32_4 %244 = OpLoad %36 
                                       f32_4 %245 = OpVectorShuffle %244 %243 4 5 2 3 
                                                      OpStore %36 %245 
                              Uniform f32_4* %246 = OpAccessChain %24 %239 %45 
                                       f32_4 %247 = OpLoad %246 
                                       f32_2 %248 = OpVectorShuffle %247 %247 0 1 
                              Uniform f32_4* %249 = OpAccessChain %24 %40 
                                       f32_4 %250 = OpLoad %249 
                                       f32_2 %251 = OpVectorShuffle %250 %250 0 0 
                                       f32_2 %252 = OpFMul %248 %251 
                                       f32_4 %253 = OpLoad %36 
                                       f32_2 %254 = OpVectorShuffle %253 %253 0 1 
                                       f32_2 %255 = OpFAdd %252 %254 
                                       f32_4 %256 = OpLoad %36 
                                       f32_4 %257 = OpVectorShuffle %256 %255 4 5 2 3 
                                                      OpStore %36 %257 
                                       f32_4 %258 = OpLoad %36 
                                       f32_2 %259 = OpVectorShuffle %258 %258 0 1 
                                       f32_2 %260 = OpExtInst %1 4 %259 
                                Uniform f32* %262 = OpAccessChain %24 %261 
                                         f32 %263 = OpLoad %262 
                                Uniform f32* %265 = OpAccessChain %24 %264 
                                         f32 %266 = OpLoad %265 
                                       f32_2 %267 = OpCompositeConstruct %263 %266 
                                       f32_2 %268 = OpFMul %260 %267 
                                       f32_4 %269 = OpLoad %36 
                                       f32_4 %270 = OpVectorShuffle %269 %268 4 5 2 3 
                                                      OpStore %36 %270 
                                       f32_4 %271 = OpLoad %60 
                                       f32_2 %272 = OpVectorShuffle %271 %271 3 3 
                                       f32_4 %273 = OpLoad %36 
                                       f32_2 %274 = OpVectorShuffle %273 %273 0 1 
                                       f32_2 %275 = OpFDiv %272 %274 
                                       f32_4 %276 = OpLoad %36 
                                       f32_4 %277 = OpVectorShuffle %276 %275 4 5 2 3 
                                                      OpStore %36 %277 
                                       f32_4 %279 = OpLoad %36 
                                       f32_2 %280 = OpVectorShuffle %279 %279 0 1 
                                       f32_4 %281 = OpLoad %36 
                                       f32_2 %282 = OpVectorShuffle %281 %281 0 1 
                                         f32 %283 = OpDot %280 %282 
                                                      OpStore %278 %283 
                                Uniform f32* %285 = OpAccessChain %24 %284 
                                         f32 %286 = OpLoad %285 
                                Uniform f32* %288 = OpAccessChain %24 %287 
                                         f32 %289 = OpLoad %288 
                                       f32_2 %290 = OpCompositeConstruct %286 %289 
                                       f32_2 %293 = OpFMul %290 %292 
                                       f32_4 %294 = OpLoad %36 
                                       f32_2 %295 = OpVectorShuffle %294 %294 0 1 
                                       f32_2 %296 = OpFAdd %293 %295 
                                       f32_4 %297 = OpLoad %36 
                                       f32_4 %298 = OpVectorShuffle %297 %296 4 5 2 3 
                                                      OpStore %36 %298 
                                       f32_4 %300 = OpLoad %36 
                                       f32_2 %301 = OpVectorShuffle %300 %300 0 1 
                                       f32_2 %302 = OpFDiv %292 %301 
                                       f32_4 %303 = OpLoad vs_TEXCOORD2 
                                       f32_4 %304 = OpVectorShuffle %303 %302 0 1 4 5 
                                                      OpStore vs_TEXCOORD2 %304 
                                         f32 %305 = OpLoad %278 
                                         f32 %306 = OpExtInst %1 32 %305 
                                                      OpStore %278 %306 
                                  Input f32* %310 = OpAccessChain %308 %114 
                                         f32 %311 = OpLoad %310 
                                         f32 %312 = OpExtInst %1 4 %311 
                                Uniform f32* %314 = OpAccessChain %24 %313 
                                         f32 %315 = OpLoad %314 
                                         f32 %316 = OpFMul %312 %315 
                                Private f32* %317 = OpAccessChain %36 %202 
                                                      OpStore %317 %316 
                                Uniform f32* %320 = OpAccessChain %24 %319 
                                         f32 %321 = OpLoad %320 
                                         f32 %322 = OpFAdd %321 %134 
                                Private f32* %323 = OpAccessChain %318 %202 
                                                      OpStore %323 %322 
                                Private f32* %324 = OpAccessChain %318 %202 
                                         f32 %325 = OpLoad %324 
                                Private f32* %326 = OpAccessChain %36 %202 
                                         f32 %327 = OpLoad %326 
                                         f32 %328 = OpFMul %325 %327 
                                Private f32* %329 = OpAccessChain %36 %202 
                                                      OpStore %329 %328 
                                         f32 %330 = OpLoad %278 
                                Private f32* %331 = OpAccessChain %36 %202 
                                         f32 %332 = OpLoad %331 
                                         f32 %333 = OpFMul %330 %332 
                                Private f32* %334 = OpAccessChain %318 %202 
                                                      OpStore %334 %333 
                                Uniform f32* %337 = OpAccessChain %24 %336 
                                         f32 %338 = OpLoad %337 
                                         f32 %339 = OpFNegate %338 
                                         f32 %340 = OpFAdd %339 %134 
                                                      OpStore %335 %340 
                                         f32 %341 = OpLoad %335 
                                Private f32* %342 = OpAccessChain %318 %202 
                                         f32 %343 = OpLoad %342 
                                         f32 %344 = OpExtInst %1 4 %343 
                                         f32 %345 = OpFMul %341 %344 
                                                      OpStore %335 %345 
                                         f32 %346 = OpLoad %278 
                                Private f32* %347 = OpAccessChain %36 %202 
                                         f32 %348 = OpLoad %347 
                                         f32 %349 = OpFMul %346 %348 
                                         f32 %350 = OpLoad %335 
                                         f32 %351 = OpFNegate %350 
                                         f32 %352 = OpFAdd %349 %351 
                                                      OpStore %278 %352 
                                         f32 %353 = OpLoad %180 
                                         f32 %354 = OpExtInst %1 4 %353 
                                         f32 %355 = OpLoad %278 
                                         f32 %356 = OpFMul %354 %355 
                                         f32 %357 = OpLoad %335 
                                         f32 %358 = OpFAdd %356 %357 
                                                      OpStore %180 %358 
                                Uniform f32* %362 = OpAccessChain %24 %239 %62 %124 
                                         f32 %363 = OpLoad %362 
                                        bool %365 = OpFOrdEqual %363 %364 
                                                      OpStore %361 %365 
                                        bool %366 = OpLoad %361 
                                                      OpSelectionMerge %370 None 
                                                      OpBranchConditional %366 %369 %372 
                                             %369 = OpLabel 
                                         f32 %371 = OpLoad %180 
                                                      OpStore %368 %371 
                                                      OpBranch %370 
                                             %372 = OpLabel 
                                Private f32* %373 = OpAccessChain %318 %202 
                                         f32 %374 = OpLoad %373 
                                                      OpStore %368 %374 
                                                      OpBranch %370 
                                             %370 = OpLabel 
                                         f32 %375 = OpLoad %368 
                                                      OpStore %180 %375 
                                Uniform f32* %377 = OpAccessChain %24 %376 
                                         f32 %378 = OpLoad %377 
                                Uniform f32* %380 = OpAccessChain %24 %379 
                                         f32 %381 = OpLoad %380 
                                         f32 %382 = OpFMul %378 %381 
                                                      OpStore %278 %382 
                                         f32 %383 = OpLoad %278 
                                         f32 %384 = OpLoad %180 
                                         f32 %385 = OpFMul %383 %384 
                                         f32 %386 = OpFAdd %385 %134 
                                                      OpStore %278 %386 
                                         f32 %387 = OpLoad %180 
                                         f32 %388 = OpLoad %278 
                                         f32 %389 = OpFDiv %387 %388 
                                Private f32* %390 = OpAccessChain %36 %202 
                                                      OpStore %390 %389 
                                Uniform f32* %392 = OpAccessChain %24 %391 
                                         f32 %393 = OpLoad %392 
                                Uniform f32* %394 = OpAccessChain %24 %379 
                                         f32 %395 = OpLoad %394 
                                         f32 %396 = OpFMul %393 %395 
                                                      OpStore %278 %396 
                                Private f32* %397 = OpAccessChain %36 %202 
                                         f32 %398 = OpLoad %397 
                                         f32 %399 = OpLoad %278 
                                         f32 %400 = OpFMul %398 %399 
                                                      OpStore %278 %400 
                                         f32 %401 = OpLoad %278 
                                         f32 %402 = OpExtInst %1 37 %401 %134 
                                Private f32* %403 = OpAccessChain %318 %202 
                                                      OpStore %403 %402 
                                Private f32* %404 = OpAccessChain %318 %202 
                                         f32 %405 = OpLoad %404 
                                         f32 %406 = OpExtInst %1 31 %405 
                                Private f32* %407 = OpAccessChain %318 %202 
                                                      OpStore %407 %406 
                                       f32_4 %408 = OpLoad %153 
                                       f32_2 %409 = OpLoad %318 
                                       f32_4 %410 = OpVectorShuffle %409 %409 0 0 0 0 
                                       f32_4 %411 = OpFMul %408 %410 
                                                      OpStore %60 %411 
                                       f32_4 %413 = OpLoad %137 
                                       f32_3 %414 = OpVectorShuffle %413 %413 0 1 2 
                                       f32_4 %415 = OpLoad %137 
                                       f32_3 %416 = OpVectorShuffle %415 %415 3 3 3 
                                       f32_3 %417 = OpFMul %414 %416 
                                       f32_4 %418 = OpLoad %60 
                                       f32_3 %419 = OpVectorShuffle %418 %418 0 1 2 
                                       f32_3 %420 = OpFAdd %417 %419 
                                       f32_4 %421 = OpLoad %412 
                                       f32_4 %422 = OpVectorShuffle %421 %420 4 5 6 3 
                                                      OpStore %412 %422 
                                Private f32* %423 = OpAccessChain %86 %124 
                                         f32 %424 = OpLoad %423 
                                Uniform f32* %425 = OpAccessChain %24 %123 %124 
                                         f32 %426 = OpLoad %425 
                                         f32 %427 = OpFMul %424 %426 
                                Private f32* %428 = OpAccessChain %60 %124 
                                         f32 %429 = OpLoad %428 
                                         f32 %430 = OpFAdd %427 %429 
                                 Output f32* %431 = OpAccessChain %412 %124 
                                                      OpStore %431 %430 
                              Uniform f32_4* %433 = OpAccessChain %24 %432 
                                       f32_4 %434 = OpLoad %433 
                                       f32_4 %437 = OpExtInst %1 40 %434 %436 
                                                      OpStore %60 %437 
                                       f32_4 %438 = OpLoad %60 
                                       f32_4 %441 = OpExtInst %1 37 %438 %440 
                                                      OpStore %60 %441 
                                       f32_2 %442 = OpLoad %9 
                                       f32_4 %443 = OpLoad %60 
                                       f32_2 %444 = OpVectorShuffle %443 %443 0 1 
                                       f32_2 %445 = OpFNegate %444 
                                       f32_2 %446 = OpFAdd %442 %445 
                                                      OpStore %318 %446 
                                       f32_2 %447 = OpLoad %9 
                                       f32_2 %450 = OpFMul %447 %449 
                                       f32_4 %451 = OpLoad %60 
                                       f32_2 %452 = OpVectorShuffle %451 %451 0 1 
                                       f32_2 %453 = OpFNegate %452 
                                       f32_2 %454 = OpFAdd %450 %453 
                                                      OpStore %9 %454 
                                       f32_4 %455 = OpLoad %60 
                                       f32_2 %456 = OpVectorShuffle %455 %455 2 3 
                                       f32_2 %457 = OpFNegate %456 
                                       f32_2 %458 = OpLoad %9 
                                       f32_2 %459 = OpFAdd %457 %458 
                                       f32_4 %460 = OpLoad vs_TEXCOORD2 
                                       f32_4 %461 = OpVectorShuffle %460 %459 4 5 2 3 
                                                      OpStore vs_TEXCOORD2 %461 
                                       f32_4 %462 = OpLoad %60 
                                       f32_2 %463 = OpVectorShuffle %462 %462 0 1 
                                       f32_2 %464 = OpFNegate %463 
                                       f32_4 %465 = OpLoad %60 
                                       f32_2 %466 = OpVectorShuffle %465 %465 2 3 
                                       f32_2 %467 = OpFAdd %464 %466 
                                                      OpStore %9 %467 
                                       f32_2 %469 = OpLoad %318 
                                       f32_2 %470 = OpLoad %9 
                                       f32_2 %471 = OpFDiv %469 %470 
                                       f32_4 %472 = OpLoad vs_TEXCOORD0 
                                       f32_4 %473 = OpVectorShuffle %472 %471 0 1 4 5 
                                                      OpStore vs_TEXCOORD0 %473 
                                       f32_2 %475 = OpLoad %474 
                                       f32_4 %476 = OpLoad vs_TEXCOORD0 
                                       f32_4 %477 = OpVectorShuffle %476 %475 4 5 2 3 
                                                      OpStore vs_TEXCOORD0 %477 
                                  Input f32* %479 = OpAccessChain %308 %114 
                                         f32 %480 = OpLoad %479 
                                        bool %481 = OpFOrdGreaterThanEqual %364 %480 
                                                      OpStore %478 %481 
                                        bool %482 = OpLoad %478 
                                         f32 %483 = OpSelect %482 %134 %364 
                                Private f32* %484 = OpAccessChain %9 %202 
                                                      OpStore %484 %483 
                                Uniform f32* %488 = OpAccessChain %24 %487 
                                         f32 %489 = OpLoad %488 
                                         f32 %490 = OpFNegate %489 
                                Uniform f32* %492 = OpAccessChain %24 %491 
                                         f32 %493 = OpLoad %492 
                                         f32 %494 = OpFAdd %490 %493 
                                Private f32* %495 = OpAccessChain %486 %202 
                                                      OpStore %495 %494 
                                Private f32* %496 = OpAccessChain %9 %202 
                                         f32 %497 = OpLoad %496 
                                Private f32* %498 = OpAccessChain %486 %202 
                                         f32 %499 = OpLoad %498 
                                         f32 %500 = OpFMul %497 %499 
                                Uniform f32* %501 = OpAccessChain %24 %487 
                                         f32 %502 = OpLoad %501 
                                         f32 %503 = OpFAdd %500 %502 
                                Private f32* %504 = OpAccessChain %9 %202 
                                                      OpStore %504 %503 
                                Private f32* %505 = OpAccessChain %9 %202 
                                         f32 %506 = OpLoad %505 
                                         f32 %507 = OpFMul %506 %291 
                                Uniform f32* %509 = OpAccessChain %24 %508 
                                         f32 %510 = OpLoad %509 
                                         f32 %511 = OpFAdd %507 %510 
                                Private f32* %512 = OpAccessChain %9 %202 
                                                      OpStore %512 %511 
                                Private f32* %513 = OpAccessChain %9 %202 
                                         f32 %514 = OpLoad %513 
                                Uniform f32* %515 = OpAccessChain %24 %379 
                                         f32 %516 = OpLoad %515 
                                         f32 %517 = OpFMul %514 %516 
                                Private f32* %518 = OpAccessChain %9 %202 
                                                      OpStore %518 %517 
                                Private f32* %519 = OpAccessChain %9 %202 
                                         f32 %520 = OpLoad %519 
                                         f32 %521 = OpFNegate %520 
                                         f32 %523 = OpFMul %521 %522 
                                         f32 %524 = OpFAdd %523 %522 
                                Private f32* %525 = OpAccessChain %9 %202 
                                                      OpStore %525 %524 
                                Private f32* %526 = OpAccessChain %9 %202 
                                         f32 %527 = OpLoad %526 
                                Private f32* %528 = OpAccessChain %36 %202 
                                         f32 %529 = OpLoad %528 
                                         f32 %530 = OpFMul %527 %529 
                                         f32 %532 = OpFAdd %530 %531 
                                Private f32* %533 = OpAccessChain %36 %124 
                                                      OpStore %533 %532 
                                       f32_4 %535 = OpLoad %36 
                                       f32_2 %536 = OpVectorShuffle %535 %535 0 3 
                                       f32_4 %537 = OpLoad vs_TEXCOORD1 
                                       f32_4 %538 = OpVectorShuffle %537 %536 4 1 2 5 
                                                      OpStore vs_TEXCOORD1 %538 
                                         f32 %539 = OpLoad %278 
                                         f32 %540 = OpFNegate %539 
                                         f32 %541 = OpFMul %540 %522 
                                Private f32* %542 = OpAccessChain %36 %124 
                                         f32 %543 = OpLoad %542 
                                         f32 %544 = OpFAdd %541 %543 
                                 Output f32* %545 = OpAccessChain vs_TEXCOORD1 %114 
                                                      OpStore %545 %544 
                                         f32 %546 = OpLoad %278 
                                         f32 %547 = OpFMul %546 %522 
                                Private f32* %548 = OpAccessChain %36 %124 
                                         f32 %549 = OpLoad %548 
                                         f32 %550 = OpFAdd %547 %549 
                                 Output f32* %551 = OpAccessChain vs_TEXCOORD1 %215 
                                                      OpStore %551 %550 
                                  Input f32* %553 = OpAccessChain %129 %124 
                                         f32 %554 = OpLoad %553 
                                 Output f32* %555 = OpAccessChain vs_TEXCOORD3 %215 
                                                      OpStore %555 %554 
                                 Output f32* %556 = OpAccessChain vs_TEXCOORD3 %124 
                                                      OpStore %556 %364 
                                Uniform f32* %558 = OpAccessChain %24 %557 
                                         f32 %559 = OpLoad %558 
                                Uniform f32* %561 = OpAccessChain %24 %560 
                                         f32 %562 = OpLoad %561 
                                Uniform f32* %564 = OpAccessChain %24 %563 
                                         f32 %565 = OpLoad %564 
                                Uniform f32* %567 = OpAccessChain %24 %566 
                                         f32 %568 = OpLoad %567 
                                       f32_4 %569 = OpCompositeConstruct %559 %562 %565 %568 
                                Uniform f32* %571 = OpAccessChain %24 %570 
                                         f32 %572 = OpLoad %571 
                                Uniform f32* %573 = OpAccessChain %24 %570 
                                         f32 %574 = OpLoad %573 
                                Uniform f32* %575 = OpAccessChain %24 %570 
                                         f32 %576 = OpLoad %575 
                                Uniform f32* %577 = OpAccessChain %24 %570 
                                         f32 %578 = OpLoad %577 
                                       f32_4 %579 = OpCompositeConstruct %572 %574 %576 %578 
                                         f32 %580 = OpCompositeExtract %579 0 
                                         f32 %581 = OpCompositeExtract %579 1 
                                         f32 %582 = OpCompositeExtract %579 2 
                                         f32 %583 = OpCompositeExtract %579 3 
                                       f32_4 %584 = OpCompositeConstruct %580 %581 %582 %583 
                                       f32_4 %585 = OpFMul %569 %584 
                                                      OpStore %36 %585 
                                       f32_4 %586 = OpLoad %36 
                                       f32_2 %587 = OpVectorShuffle %586 %586 2 3 
                                       f32_2 %588 = OpFNegate %587 
                                Uniform f32* %589 = OpAccessChain %24 %313 
                                         f32 %590 = OpLoad %589 
                                       f32_2 %591 = OpCompositeConstruct %590 %590 
                                       f32_2 %592 = OpFMul %588 %591 
                                       f32_3 %593 = OpLoad %486 
                                       f32_3 %594 = OpVectorShuffle %593 %592 3 1 4 
                                                      OpStore %486 %594 
                                       f32_3 %595 = OpLoad %486 
                                       f32_2 %596 = OpVectorShuffle %595 %595 0 2 
                                Uniform f32* %598 = OpAccessChain %24 %597 
                                         f32 %599 = OpLoad %598 
                                Uniform f32* %601 = OpAccessChain %24 %600 
                                         f32 %602 = OpLoad %601 
                                       f32_2 %603 = OpCompositeConstruct %599 %602 
                                       f32_2 %604 = OpFDiv %596 %603 
                                       f32_3 %605 = OpLoad %486 
                                       f32_3 %606 = OpVectorShuffle %605 %604 3 1 4 
                                                      OpStore %486 %606 
                                       f32_3 %607 = OpLoad %486 
                                       f32_2 %608 = OpVectorShuffle %607 %607 0 2 
                                       f32_2 %609 = OpLoad %474 
                                       f32_2 %610 = OpFAdd %608 %609 
                                       f32_4 %611 = OpLoad vs_TEXCOORD3 
                                       f32_4 %612 = OpVectorShuffle %611 %610 4 5 2 3 
                                                      OpStore vs_TEXCOORD3 %612 
                                Private f32* %613 = OpAccessChain %36 %202 
                                         f32 %614 = OpLoad %613 
                                         f32 %615 = OpLoad %180 
                                         f32 %616 = OpFMul %614 %615 
                                         f32 %617 = OpFAdd %616 %134 
                                Private f32* %618 = OpAccessChain %486 %202 
                                                      OpStore %618 %617 
                                         f32 %619 = OpLoad %180 
                                Private f32* %620 = OpAccessChain %486 %202 
                                         f32 %621 = OpLoad %620 
                                         f32 %622 = OpFDiv %619 %621 
                                Private f32* %623 = OpAccessChain %486 %202 
                                                      OpStore %623 %622 
                                Private f32* %624 = OpAccessChain %486 %202 
                                         f32 %625 = OpLoad %624 
                                Private f32* %626 = OpAccessChain %36 %114 
                                         f32 %627 = OpLoad %626 
                                         f32 %628 = OpFMul %625 %627 
                                                      OpStore %180 %628 
                                Private f32* %629 = OpAccessChain %9 %202 
                                         f32 %630 = OpLoad %629 
                                Private f32* %631 = OpAccessChain %486 %202 
                                         f32 %632 = OpLoad %631 
                                         f32 %633 = OpFMul %630 %632 
                                         f32 %634 = OpFAdd %633 %531 
                                Private f32* %635 = OpAccessChain %9 %202 
                                                      OpStore %635 %634 
                                Private f32* %638 = OpAccessChain %486 %202 
                                         f32 %639 = OpLoad %638 
                                 Output f32* %640 = OpAccessChain vs_TEXCOORD4 %202 
                                                      OpStore %640 %639 
                                         f32 %641 = OpLoad %180 
                                         f32 %642 = OpFNegate %641 
                                         f32 %643 = OpFMul %642 %522 
                                Private f32* %644 = OpAccessChain %9 %202 
                                         f32 %645 = OpLoad %644 
                                         f32 %646 = OpFAdd %643 %645 
                                 Output f32* %647 = OpAccessChain vs_TEXCOORD4 %114 
                                                      OpStore %647 %646 
                                 Output f32* %648 = OpAccessChain %118 %45 %114 
                                         f32 %649 = OpLoad %648 
                                         f32 %650 = OpFNegate %649 
                                 Output f32* %651 = OpAccessChain %118 %45 %114 
                                                      OpStore %651 %650 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 197
; Schema: 0
                                             OpCapability Shader 
                                      %1 = OpExtInstImport "GLSL.std.450" 
                                             OpMemoryModel Logical GLSL450 
                                             OpEntryPoint Fragment %4 "main" %21 %35 %80 %88 %104 %134 %180 
                                             OpExecutionMode %4 OriginUpperLeft 
                                             OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                             OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                             OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                             OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                             OpDecorate %12 DescriptorSet 12 
                                             OpDecorate %12 Binding 12 
                                             OpDecorate %16 DescriptorSet 16 
                                             OpDecorate %16 Binding 16 
                                             OpDecorate vs_TEXCOORD3 Location 21 
                                             OpDecorate vs_TEXCOORD4 Location 35 
                                             OpMemberDecorate %53 0 Offset 53 
                                             OpMemberDecorate %53 1 Offset 53 
                                             OpDecorate %53 Block 
                                             OpDecorate %55 DescriptorSet 55 
                                             OpDecorate %55 Binding 55 
                                             OpDecorate vs_TEXCOORD0 Location 80 
                                             OpDecorate vs_TEXCOORD1 Location 88 
                                             OpDecorate %104 Location 104 
                                             OpDecorate vs_TEXCOORD2 Location 134 
                                             OpDecorate %180 Location 180 
                                      %2 = OpTypeVoid 
                                      %3 = OpTypeFunction %2 
                                      %6 = OpTypeFloat 32 
                                      %7 = OpTypeVector %6 4 
                                      %8 = OpTypePointer Private %7 
                       Private f32_4* %9 = OpVariable Private 
                                     %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                     %11 = OpTypePointer UniformConstant %10 
UniformConstant read_only Texture2D* %12 = OpVariable UniformConstant 
                                     %14 = OpTypeSampler 
                                     %15 = OpTypePointer UniformConstant %14 
            UniformConstant sampler* %16 = OpVariable UniformConstant 
                                     %18 = OpTypeSampledImage %10 
                                     %20 = OpTypePointer Input %7 
               Input f32_4* vs_TEXCOORD3 = OpVariable Input 
                                     %22 = OpTypeVector %6 2 
                                     %26 = OpTypeInt 32 0 
                                 u32 %27 = OpConstant 3 
                                 u32 %29 = OpConstant 0 
                                     %30 = OpTypePointer Private %6 
                                     %34 = OpTypePointer Input %22 
               Input f32_2* vs_TEXCOORD4 = OpVariable Input 
                                     %36 = OpTypePointer Input %6 
                                 u32 %40 = OpConstant 1 
                                 f32 %48 = OpConstant 3.674022E-40 
                                 f32 %49 = OpConstant 3.674022E-40 
                      Private f32_4* %52 = OpVariable Private 
                                     %53 = OpTypeStruct %7 %7 
                                     %54 = OpTypePointer Uniform %53 
     Uniform struct {f32_4; f32_4;}* %55 = OpVariable Uniform 
                                     %56 = OpTypeInt 32 1 
                                 i32 %57 = OpConstant 0 
                                     %58 = OpTypeVector %6 3 
                                     %59 = OpTypePointer Uniform %7 
                                     %69 = OpTypePointer Uniform %6 
               Input f32_4* vs_TEXCOORD0 = OpVariable Input 
               Input f32_4* vs_TEXCOORD1 = OpVariable Input 
                     Private f32_4* %101 = OpVariable Private 
                       Input f32_4* %104 = OpVariable Input 
                                i32 %121 = OpConstant 1 
               Input f32_4* vs_TEXCOORD2 = OpVariable Input 
                                u32 %168 = OpConstant 2 
                                f32 %172 = OpConstant 3.674022E-40 
                                    %179 = OpTypePointer Output %7 
                      Output f32_4* %180 = OpVariable Output 
                                    %182 = OpTypeBool 
                                    %183 = OpTypePointer Private %182 
                      Private bool* %184 = OpVariable Private 
                                i32 %190 = OpConstant -1 
                                 void %4 = OpFunction None %3 
                                      %5 = OpLabel 
                 read_only Texture2D %13 = OpLoad %12 
                             sampler %17 = OpLoad %16 
          read_only Texture2DSampled %19 = OpSampledImage %13 %17 
                               f32_4 %23 = OpLoad vs_TEXCOORD3 
                               f32_2 %24 = OpVectorShuffle %23 %23 0 1 
                               f32_4 %25 = OpImageSampleImplicitLod %19 %24 
                                 f32 %28 = OpCompositeExtract %25 3 
                        Private f32* %31 = OpAccessChain %9 %29 
                                             OpStore %31 %28 
                        Private f32* %32 = OpAccessChain %9 %29 
                                 f32 %33 = OpLoad %32 
                          Input f32* %37 = OpAccessChain vs_TEXCOORD4 %29 
                                 f32 %38 = OpLoad %37 
                                 f32 %39 = OpFMul %33 %38 
                          Input f32* %41 = OpAccessChain vs_TEXCOORD4 %40 
                                 f32 %42 = OpLoad %41 
                                 f32 %43 = OpFNegate %42 
                                 f32 %44 = OpFAdd %39 %43 
                        Private f32* %45 = OpAccessChain %9 %29 
                                             OpStore %45 %44 
                        Private f32* %46 = OpAccessChain %9 %29 
                                 f32 %47 = OpLoad %46 
                                 f32 %50 = OpExtInst %1 43 %47 %48 %49 
                        Private f32* %51 = OpAccessChain %9 %29 
                                             OpStore %51 %50 
                      Uniform f32_4* %60 = OpAccessChain %55 %57 
                               f32_4 %61 = OpLoad %60 
                               f32_3 %62 = OpVectorShuffle %61 %61 3 3 3 
                      Uniform f32_4* %63 = OpAccessChain %55 %57 
                               f32_4 %64 = OpLoad %63 
                               f32_3 %65 = OpVectorShuffle %64 %64 0 1 2 
                               f32_3 %66 = OpFMul %62 %65 
                               f32_4 %67 = OpLoad %52 
                               f32_4 %68 = OpVectorShuffle %67 %66 4 5 6 3 
                                             OpStore %52 %68 
                        Uniform f32* %70 = OpAccessChain %55 %57 %27 
                                 f32 %71 = OpLoad %70 
                        Private f32* %72 = OpAccessChain %52 %27 
                                             OpStore %72 %71 
                               f32_4 %73 = OpLoad %9 
                               f32_4 %74 = OpVectorShuffle %73 %73 0 0 0 0 
                               f32_4 %75 = OpLoad %52 
                               f32_4 %76 = OpFMul %74 %75 
                                             OpStore %9 %76 
                 read_only Texture2D %77 = OpLoad %12 
                             sampler %78 = OpLoad %16 
          read_only Texture2DSampled %79 = OpSampledImage %77 %78 
                               f32_4 %81 = OpLoad vs_TEXCOORD0 
                               f32_2 %82 = OpVectorShuffle %81 %81 0 1 
                               f32_4 %83 = OpImageSampleImplicitLod %79 %82 
                                 f32 %84 = OpCompositeExtract %83 3 
                        Private f32* %85 = OpAccessChain %52 %29 
                                             OpStore %85 %84 
                        Private f32* %86 = OpAccessChain %52 %29 
                                 f32 %87 = OpLoad %86 
                          Input f32* %89 = OpAccessChain vs_TEXCOORD1 %29 
                                 f32 %90 = OpLoad %89 
                                 f32 %91 = OpFMul %87 %90 
                          Input f32* %92 = OpAccessChain vs_TEXCOORD1 %27 
                                 f32 %93 = OpLoad %92 
                                 f32 %94 = OpFNegate %93 
                                 f32 %95 = OpFAdd %91 %94 
                        Private f32* %96 = OpAccessChain %52 %29 
                                             OpStore %96 %95 
                        Private f32* %97 = OpAccessChain %52 %29 
                                 f32 %98 = OpLoad %97 
                                 f32 %99 = OpExtInst %1 43 %98 %48 %49 
                       Private f32* %100 = OpAccessChain %52 %29 
                                             OpStore %100 %99 
                              f32_4 %102 = OpLoad %52 
                              f32_4 %103 = OpVectorShuffle %102 %102 0 0 0 0 
                              f32_4 %105 = OpLoad %104 
                              f32_4 %106 = OpFMul %103 %105 
                                             OpStore %101 %106 
                         Input f32* %107 = OpAccessChain %104 %27 
                                f32 %108 = OpLoad %107 
                                f32 %109 = OpFNegate %108 
                       Private f32* %110 = OpAccessChain %52 %29 
                                f32 %111 = OpLoad %110 
                                f32 %112 = OpFMul %109 %111 
                                f32 %113 = OpFAdd %112 %49 
                       Private f32* %114 = OpAccessChain %52 %29 
                                             OpStore %114 %113 
                              f32_4 %115 = OpLoad %9 
                              f32_4 %116 = OpLoad %52 
                              f32_4 %117 = OpVectorShuffle %116 %116 0 0 0 0 
                              f32_4 %118 = OpFMul %115 %117 
                              f32_4 %119 = OpLoad %101 
                              f32_4 %120 = OpFAdd %118 %119 
                                             OpStore %9 %120 
                     Uniform f32_4* %122 = OpAccessChain %55 %121 
                              f32_4 %123 = OpLoad %122 
                              f32_2 %124 = OpVectorShuffle %123 %123 0 1 
                              f32_2 %125 = OpFNegate %124 
                     Uniform f32_4* %126 = OpAccessChain %55 %121 
                              f32_4 %127 = OpLoad %126 
                              f32_2 %128 = OpVectorShuffle %127 %127 2 3 
                              f32_2 %129 = OpFAdd %125 %128 
                              f32_4 %130 = OpLoad %52 
                              f32_4 %131 = OpVectorShuffle %130 %129 4 5 2 3 
                                             OpStore %52 %131 
                              f32_4 %132 = OpLoad %52 
                              f32_2 %133 = OpVectorShuffle %132 %132 0 1 
                              f32_4 %135 = OpLoad vs_TEXCOORD2 
                              f32_2 %136 = OpVectorShuffle %135 %135 0 1 
                              f32_2 %137 = OpExtInst %1 4 %136 
                              f32_2 %138 = OpFNegate %137 
                              f32_2 %139 = OpFAdd %133 %138 
                              f32_4 %140 = OpLoad %52 
                              f32_4 %141 = OpVectorShuffle %140 %139 4 5 2 3 
                                             OpStore %52 %141 
                              f32_4 %142 = OpLoad %52 
                              f32_2 %143 = OpVectorShuffle %142 %142 0 1 
                              f32_4 %144 = OpLoad vs_TEXCOORD2 
                              f32_2 %145 = OpVectorShuffle %144 %144 2 3 
                              f32_2 %146 = OpFMul %143 %145 
                              f32_4 %147 = OpLoad %52 
                              f32_4 %148 = OpVectorShuffle %147 %146 4 5 2 3 
                                             OpStore %52 %148 
                              f32_4 %149 = OpLoad %52 
                              f32_2 %150 = OpVectorShuffle %149 %149 0 1 
                              f32_2 %151 = OpCompositeConstruct %48 %48 
                              f32_2 %152 = OpCompositeConstruct %49 %49 
                              f32_2 %153 = OpExtInst %1 43 %150 %151 %152 
                              f32_4 %154 = OpLoad %52 
                              f32_4 %155 = OpVectorShuffle %154 %153 4 5 2 3 
                                             OpStore %52 %155 
                       Private f32* %156 = OpAccessChain %52 %40 
                                f32 %157 = OpLoad %156 
                       Private f32* %158 = OpAccessChain %52 %29 
                                f32 %159 = OpLoad %158 
                                f32 %160 = OpFMul %157 %159 
                       Private f32* %161 = OpAccessChain %52 %29 
                                             OpStore %161 %160 
                              f32_4 %162 = OpLoad %9 
                              f32_4 %163 = OpLoad %52 
                              f32_4 %164 = OpVectorShuffle %163 %163 0 0 0 0 
                              f32_4 %165 = OpFMul %162 %164 
                                             OpStore %9 %165 
                       Private f32* %166 = OpAccessChain %9 %27 
                                f32 %167 = OpLoad %166 
                         Input f32* %169 = OpAccessChain vs_TEXCOORD3 %168 
                                f32 %170 = OpLoad %169 
                                f32 %171 = OpFMul %167 %170 
                                f32 %173 = OpFAdd %171 %172 
                       Private f32* %174 = OpAccessChain %52 %29 
                                             OpStore %174 %173 
                              f32_4 %175 = OpLoad %9 
                              f32_4 %176 = OpLoad vs_TEXCOORD3 
                              f32_4 %177 = OpVectorShuffle %176 %176 2 2 2 2 
                              f32_4 %178 = OpFMul %175 %177 
                                             OpStore %9 %178 
                              f32_4 %181 = OpLoad %9 
                                             OpStore %180 %181 
                       Private f32* %185 = OpAccessChain %52 %29 
                                f32 %186 = OpLoad %185 
                               bool %187 = OpFOrdLessThan %186 %48 
                                             OpStore %184 %187 
                               bool %188 = OpLoad %184 
                                i32 %189 = OpSelect %188 %121 %57 
                                i32 %191 = OpIMul %189 %190 
                               bool %192 = OpINotEqual %191 %57 
                                             OpSelectionMerge %194 None 
                                             OpBranchConditional %192 %193 %194 
                                    %193 = OpLabel 
                                             OpKill
                                    %194 = OpLabel 
                                             OpReturn
                                             OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "OUTLINE_ON" "UNDERLAY_ON" "UNITY_UI_ALPHACLIP" "UNITY_UI_CLIP_RECT" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "OUTLINE_ON" "UNDERLAY_ON" "UNITY_UI_ALPHACLIP" "UNITY_UI_CLIP_RECT" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _FaceColor;
uniform 	float _FaceDilate;
uniform 	float _OutlineSoftness;
uniform 	vec4 _OutlineColor;
uniform 	float _OutlineWidth;
uniform 	float _UnderlayOffsetX;
uniform 	float _UnderlayOffsetY;
uniform 	float _UnderlayDilate;
uniform 	float _UnderlaySoftness;
uniform 	float _WeightNormal;
uniform 	float _WeightBold;
uniform 	float _ScaleRatioA;
uniform 	float _ScaleRatioC;
uniform 	float _VertexOffsetX;
uniform 	float _VertexOffsetY;
uniform 	vec4 _ClipRect;
uniform 	float _MaskSoftnessX;
uniform 	float _MaskSoftnessY;
uniform 	float _TextureWidth;
uniform 	float _TextureHeight;
uniform 	float _GradientScale;
uniform 	float _ScaleX;
uniform 	float _ScaleY;
uniform 	float _PerspectiveFilter;
uniform 	float _Sharpness;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_COLOR0;
in  vec2 in_TEXCOORD0;
in  vec2 in_TEXCOORD1;
out vec4 vs_COLOR0;
out vec4 vs_COLOR1;
out vec4 vs_TEXCOORD0;
out vec4 vs_TEXCOORD1;
out vec4 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec2 vs_TEXCOORD4;
vec2 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
vec4 u_xlat6;
vec3 u_xlat7;
vec2 u_xlat8;
float u_xlat14;
float u_xlat15;
float u_xlat21;
bool u_xlatb21;
void main()
{
    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
    gl_Position = u_xlat2;
    vs_COLOR0.w = _FaceColor.w;
    u_xlat3.xyz = in_COLOR0.xyz;
    u_xlat3.w = 1.0;
    u_xlat4 = u_xlat3 * _FaceColor;
    u_xlat2.xyz = u_xlat4.www * u_xlat4.xyz;
    vs_COLOR0.xyz = u_xlat2.xyz;
    u_xlat5.xyz = (-u_xlat2.xyz);
    u_xlat5.w = (-u_xlat4.w);
    u_xlat6.xyz = _OutlineColor.www * _OutlineColor.xyz;
    u_xlat6.w = _OutlineColor.w;
    u_xlat5 = u_xlat5 + u_xlat6;
    u_xlat14 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat14 = inversesqrt(u_xlat14);
    u_xlat1.xyz = vec3(u_xlat14) * u_xlat1.xyz;
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat14 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat14 = inversesqrt(u_xlat14);
    u_xlat2.xyz = vec3(u_xlat14) * u_xlat2.xyz;
    u_xlat14 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat1.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;
    u_xlat1.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat1.xy;
    u_xlat1.xy = abs(u_xlat1.xy) * vec2(_ScaleX, _ScaleY);
    u_xlat1.xy = u_xlat2.ww / u_xlat1.xy;
    u_xlat21 = dot(u_xlat1.xy, u_xlat1.xy);
    u_xlat1.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) * vec2(0.25, 0.25) + u_xlat1.xy;
    vs_TEXCOORD2.zw = vec2(0.25, 0.25) / u_xlat1.xy;
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.x = abs(in_TEXCOORD1.y) * _GradientScale;
    u_xlat8.x = _Sharpness + 1.0;
    u_xlat1.x = u_xlat8.x * u_xlat1.x;
    u_xlat8.x = u_xlat21 * u_xlat1.x;
    u_xlat15 = (-_PerspectiveFilter) + 1.0;
    u_xlat15 = u_xlat15 * abs(u_xlat8.x);
    u_xlat21 = u_xlat21 * u_xlat1.x + (-u_xlat15);
    u_xlat14 = abs(u_xlat14) * u_xlat21 + u_xlat15;
    u_xlatb21 = hlslcc_mtx4x4glstate_matrix_projection[3].w==0.0;
    u_xlat14 = (u_xlatb21) ? u_xlat14 : u_xlat8.x;
    u_xlat21 = _OutlineSoftness * _ScaleRatioA;
    u_xlat21 = u_xlat21 * u_xlat14 + 1.0;
    u_xlat1.x = u_xlat14 / u_xlat21;
    u_xlat21 = _OutlineWidth * _ScaleRatioA;
    u_xlat21 = u_xlat21 * 0.5;
    u_xlat8.x = u_xlat1.x * u_xlat21;
    u_xlat8.x = u_xlat8.x + u_xlat8.x;
    u_xlat8.x = min(u_xlat8.x, 1.0);
    u_xlat8.x = sqrt(u_xlat8.x);
    u_xlat2 = u_xlat5 * u_xlat8.xxxx;
    vs_COLOR1.xyz = u_xlat4.xyz * u_xlat4.www + u_xlat2.xyz;
    vs_COLOR1.w = u_xlat3.w * _FaceColor.w + u_xlat2.w;
    u_xlat2 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));
    u_xlat2 = min(u_xlat2, vec4(2e+10, 2e+10, 2e+10, 2e+10));
    u_xlat8.xy = u_xlat0.xy + (-u_xlat2.xy);
    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + (-u_xlat2.xy);
    vs_TEXCOORD2.xy = (-u_xlat2.zw) + u_xlat0.xy;
    u_xlat0.xy = (-u_xlat2.xy) + u_xlat2.zw;
    vs_TEXCOORD0.zw = u_xlat8.xy / u_xlat0.xy;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlatb0 = 0.0>=in_TEXCOORD1.y;
    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);
    u_xlat7.x = (-_WeightNormal) + _WeightBold;
    u_xlat0.x = u_xlat0.x * u_xlat7.x + _WeightNormal;
    u_xlat0.x = u_xlat0.x * 0.25 + _FaceDilate;
    u_xlat0.x = u_xlat0.x * _ScaleRatioA;
    u_xlat0.x = (-u_xlat0.x) * 0.5 + 0.5;
    u_xlat1.w = u_xlat0.x * u_xlat1.x + -0.5;
    vs_TEXCOORD1.y = (-u_xlat21) * u_xlat1.x + u_xlat1.w;
    vs_TEXCOORD1.z = u_xlat21 * u_xlat1.x + u_xlat1.w;
    vs_TEXCOORD1.xw = u_xlat1.xw;
    vs_TEXCOORD3.z = in_COLOR0.w;
    vs_TEXCOORD3.w = 0.0;
    u_xlat1 = vec4(_UnderlaySoftness, _UnderlayDilate, _UnderlayOffsetX, _UnderlayOffsetY) * vec4(vec4(_ScaleRatioC, _ScaleRatioC, _ScaleRatioC, _ScaleRatioC));
    u_xlat7.xz = (-u_xlat1.zw) * vec2(_GradientScale);
    u_xlat7.xz = u_xlat7.xz / vec2(_TextureWidth, _TextureHeight);
    vs_TEXCOORD3.xy = u_xlat7.xz + in_TEXCOORD0.xy;
    u_xlat7.x = u_xlat1.x * u_xlat14 + 1.0;
    u_xlat7.x = u_xlat14 / u_xlat7.x;
    u_xlat14 = u_xlat1.y * 0.5;
    u_xlat0.x = u_xlat0.x * u_xlat7.x + -0.5;
    vs_TEXCOORD4.y = (-u_xlat14) * u_xlat7.x + u_xlat0.x;
    vs_TEXCOORD4.x = u_xlat7.x;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _UnderlayColor;
uniform 	vec4 _ClipRect;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
in  vec4 vs_COLOR0;
in  vec4 vs_COLOR1;
in  vec4 vs_TEXCOORD0;
in  vec4 vs_TEXCOORD1;
in  vec4 vs_TEXCOORD2;
in  vec4 vs_TEXCOORD3;
in  vec2 vs_TEXCOORD4;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
void main()
{
    u_xlat0 = texture(_MainTex, vs_TEXCOORD3.xy);
    u_xlat0.x = u_xlat0.w * vs_TEXCOORD4.x + (-vs_TEXCOORD4.y);
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat1.xyz = _UnderlayColor.www * _UnderlayColor.xyz;
    u_xlat1.w = _UnderlayColor.w;
    u_xlat0 = u_xlat0.xxxx * u_xlat1;
    u_xlat1 = vs_COLOR0 + (-vs_COLOR1);
    u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2.xy = u_xlat2.ww * vs_TEXCOORD1.xx + (-vs_TEXCOORD1.zy);
    u_xlat2.xy = clamp(u_xlat2.xy, 0.0, 1.0);
    u_xlat1 = u_xlat2.xxxx * u_xlat1 + vs_COLOR1;
    u_xlat3 = u_xlat2.yyyy * u_xlat1;
    u_xlat1.x = (-u_xlat1.w) * u_xlat2.y + 1.0;
    u_xlat0 = u_xlat0 * u_xlat1.xxxx + u_xlat3;
    u_xlat1.xy = (-_ClipRect.xy) + _ClipRect.zw;
    u_xlat1.xy = u_xlat1.xy + -abs(vs_TEXCOORD2.xy);
    u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD2.zw;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
    u_xlat1.x = u_xlat1.y * u_xlat1.x;
    u_xlat0 = u_xlat0 * u_xlat1.xxxx;
    u_xlat1.x = u_xlat0.w * vs_TEXCOORD3.z + -0.00100000005;
    u_xlat0 = u_xlat0 * vs_TEXCOORD3.zzzz;
    SV_Target0 = u_xlat0;
    u_xlatb0 = u_xlat1.x<0.0;
    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "OUTLINE_ON" "UNDERLAY_ON" "UNITY_UI_ALPHACLIP" "UNITY_UI_CLIP_RECT" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 653
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %12 %118 %122 %129 %196 %299 %308 %412 %468 %474 %534 %552 %637 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpDecorate %12 Location 12 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpDecorate %19 ArrayStride 19 
                                                      OpDecorate %20 ArrayStride 20 
                                                      OpDecorate %21 ArrayStride 21 
                                                      OpMemberDecorate %22 0 Offset 22 
                                                      OpMemberDecorate %22 1 Offset 22 
                                                      OpMemberDecorate %22 2 Offset 22 
                                                      OpMemberDecorate %22 3 Offset 22 
                                                      OpMemberDecorate %22 4 Offset 22 
                                                      OpMemberDecorate %22 5 Offset 22 
                                                      OpMemberDecorate %22 6 Offset 22 
                                                      OpMemberDecorate %22 7 Offset 22 
                                                      OpMemberDecorate %22 8 Offset 22 
                                                      OpMemberDecorate %22 9 Offset 22 
                                                      OpMemberDecorate %22 10 Offset 22 
                                                      OpMemberDecorate %22 11 Offset 22 
                                                      OpMemberDecorate %22 12 Offset 22 
                                                      OpMemberDecorate %22 13 Offset 22 
                                                      OpMemberDecorate %22 14 Offset 22 
                                                      OpMemberDecorate %22 15 Offset 22 
                                                      OpMemberDecorate %22 16 Offset 22 
                                                      OpMemberDecorate %22 17 Offset 22 
                                                      OpMemberDecorate %22 18 Offset 22 
                                                      OpMemberDecorate %22 19 Offset 22 
                                                      OpMemberDecorate %22 20 Offset 22 
                                                      OpMemberDecorate %22 21 Offset 22 
                                                      OpMemberDecorate %22 22 Offset 22 
                                                      OpMemberDecorate %22 23 Offset 22 
                                                      OpMemberDecorate %22 24 Offset 22 
                                                      OpMemberDecorate %22 25 Offset 22 
                                                      OpMemberDecorate %22 26 Offset 22 
                                                      OpMemberDecorate %22 27 Offset 22 
                                                      OpMemberDecorate %22 28 Offset 22 
                                                      OpMemberDecorate %22 29 Offset 22 
                                                      OpMemberDecorate %22 30 Offset 22 
                                                      OpDecorate %22 Block 
                                                      OpDecorate %24 DescriptorSet 24 
                                                      OpDecorate %24 Binding 24 
                                                      OpMemberDecorate %116 0 BuiltIn 116 
                                                      OpMemberDecorate %116 1 BuiltIn 116 
                                                      OpMemberDecorate %116 2 BuiltIn 116 
                                                      OpDecorate %116 Block 
                                                      OpDecorate %122 Location 122 
                                                      OpDecorate %129 Location 129 
                                                      OpDecorate %196 Location 196 
                                                      OpDecorate vs_TEXCOORD2 Location 299 
                                                      OpDecorate %308 Location 308 
                                                      OpDecorate %412 Location 412 
                                                      OpDecorate vs_TEXCOORD0 Location 468 
                                                      OpDecorate %474 Location 474 
                                                      OpDecorate vs_TEXCOORD1 Location 534 
                                                      OpDecorate vs_TEXCOORD3 Location 552 
                                                      OpDecorate vs_TEXCOORD4 Location 637 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 2 
                                               %8 = OpTypePointer Private %7 
                                Private f32_2* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 4 
                                              %11 = OpTypePointer Input %10 
                                 Input f32_4* %12 = OpVariable Input 
                                              %15 = OpTypeVector %6 3 
                                              %16 = OpTypeInt 32 0 
                                          u32 %17 = OpConstant 4 
                                              %18 = OpTypeArray %10 %17 
                                              %19 = OpTypeArray %10 %17 
                                              %20 = OpTypeArray %10 %17 
                                              %21 = OpTypeArray %10 %17 
                                              %22 = OpTypeStruct %15 %10 %18 %19 %20 %21 %10 %6 %6 %10 %6 %6 %6 %6 %6 %6 %6 %6 %6 %6 %6 %10 %6 %6 %6 %6 %6 %6 %6 %6 %6 
                                              %23 = OpTypePointer Uniform %22 
Uniform struct {f32_3; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4[4]; f32_4; f32; f32; f32_4; f32; f32; f32; f32; f32; f32; f32; f32; f32; f32; f32; f32_4; f32; f32; f32; f32; f32; f32; f32; f32; f32;}* %24 = OpVariable Uniform 
                                              %25 = OpTypeInt 32 1 
                                          i32 %26 = OpConstant 19 
                                              %27 = OpTypePointer Uniform %6 
                                          i32 %30 = OpConstant 20 
                                              %35 = OpTypePointer Private %10 
                               Private f32_4* %36 = OpVariable Private 
                                          i32 %39 = OpConstant 2 
                                          i32 %40 = OpConstant 1 
                                              %41 = OpTypePointer Uniform %10 
                                          i32 %45 = OpConstant 0 
                               Private f32_4* %60 = OpVariable Private 
                                          i32 %62 = OpConstant 3 
                                              %80 = OpTypePointer Uniform %15 
                               Private f32_4* %86 = OpVariable Private 
                                          i32 %89 = OpConstant 5 
                                         u32 %114 = OpConstant 1 
                                             %115 = OpTypeArray %6 %114 
                                             %116 = OpTypeStruct %10 %6 %115 
                                             %117 = OpTypePointer Output %116 
        Output struct {f32_4; f32; f32[1];}* %118 = OpVariable Output 
                                             %120 = OpTypePointer Output %10 
                               Output f32_4* %122 = OpVariable Output 
                                         i32 %123 = OpConstant 6 
                                         u32 %124 = OpConstant 3 
                                             %127 = OpTypePointer Output %6 
                                Input f32_4* %129 = OpVariable Input 
                                         f32 %134 = OpConstant 3.674022E-40 
                                             %135 = OpTypePointer Private %6 
                              Private f32_4* %137 = OpVariable Private 
                              Private f32_4* %153 = OpVariable Private 
                              Private f32_4* %163 = OpVariable Private 
                                         i32 %164 = OpConstant 9 
                                Private f32* %180 = OpVariable Private 
                                             %195 = OpTypePointer Input %15 
                                Input f32_3* %196 = OpVariable Input 
                                         u32 %202 = OpConstant 0 
                                         u32 %215 = OpConstant 2 
                                         i32 %239 = OpConstant 4 
                                         i32 %261 = OpConstant 27 
                                         i32 %264 = OpConstant 28 
                                Private f32* %278 = OpVariable Private 
                                         i32 %284 = OpConstant 22 
                                         i32 %287 = OpConstant 23 
                                         f32 %291 = OpConstant 3.674022E-40 
                                       f32_2 %292 = OpConstantComposite %291 %291 
                       Output f32_4* vs_TEXCOORD2 = OpVariable Output 
                                             %307 = OpTypePointer Input %7 
                                Input f32_2* %308 = OpVariable Input 
                                             %309 = OpTypePointer Input %6 
                                         i32 %313 = OpConstant 26 
                              Private f32_2* %318 = OpVariable Private 
                                         i32 %319 = OpConstant 30 
                                Private f32* %335 = OpVariable Private 
                                         i32 %336 = OpConstant 29 
                                             %359 = OpTypeBool 
                                             %360 = OpTypePointer Private %359 
                               Private bool* %361 = OpVariable Private 
                                         f32 %364 = OpConstant 3.674022E-40 
                                             %367 = OpTypePointer Function %6 
                                         i32 %376 = OpConstant 8 
                                         i32 %379 = OpConstant 17 
                                         i32 %391 = OpConstant 10 
                               Output f32_4* %412 = OpVariable Output 
                                         i32 %432 = OpConstant 21 
                                         f32 %435 = OpConstant 3.674022E-40 
                                       f32_4 %436 = OpConstantComposite %435 %435 %435 %435 
                                         f32 %439 = OpConstant 3.674022E-40 
                                       f32_4 %440 = OpConstantComposite %439 %439 %439 %439 
                                         f32 %448 = OpConstant 3.674022E-40 
                                       f32_2 %449 = OpConstantComposite %448 %448 
                       Output f32_4* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_2* %474 = OpVariable Input 
                               Private bool* %478 = OpVariable Private 
                                             %485 = OpTypePointer Private %15 
                              Private f32_3* %486 = OpVariable Private 
                                         i32 %487 = OpConstant 15 
                                         i32 %491 = OpConstant 16 
                                         i32 %508 = OpConstant 7 
                                         f32 %522 = OpConstant 3.674022E-40 
                                         f32 %531 = OpConstant 3.674022E-40 
                       Output f32_4* vs_TEXCOORD1 = OpVariable Output 
                       Output f32_4* vs_TEXCOORD3 = OpVariable Output 
                                         i32 %557 = OpConstant 14 
                                         i32 %560 = OpConstant 13 
                                         i32 %563 = OpConstant 11 
                                         i32 %566 = OpConstant 12 
                                         i32 %570 = OpConstant 18 
                                         i32 %597 = OpConstant 24 
                                         i32 %600 = OpConstant 25 
                                             %636 = OpTypePointer Output %7 
                       Output f32_2* vs_TEXCOORD4 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                               Function f32* %368 = OpVariable Function 
                                        f32_4 %13 = OpLoad %12 
                                        f32_2 %14 = OpVectorShuffle %13 %13 0 1 
                                 Uniform f32* %28 = OpAccessChain %24 %26 
                                          f32 %29 = OpLoad %28 
                                 Uniform f32* %31 = OpAccessChain %24 %30 
                                          f32 %32 = OpLoad %31 
                                        f32_2 %33 = OpCompositeConstruct %29 %32 
                                        f32_2 %34 = OpFAdd %14 %33 
                                                      OpStore %9 %34 
                                        f32_2 %37 = OpLoad %9 
                                        f32_4 %38 = OpVectorShuffle %37 %37 1 1 1 1 
                               Uniform f32_4* %42 = OpAccessChain %24 %39 %40 
                                        f32_4 %43 = OpLoad %42 
                                        f32_4 %44 = OpFMul %38 %43 
                                                      OpStore %36 %44 
                               Uniform f32_4* %46 = OpAccessChain %24 %39 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_2 %48 = OpLoad %9 
                                        f32_4 %49 = OpVectorShuffle %48 %48 0 0 0 0 
                                        f32_4 %50 = OpFMul %47 %49 
                                        f32_4 %51 = OpLoad %36 
                                        f32_4 %52 = OpFAdd %50 %51 
                                                      OpStore %36 %52 
                               Uniform f32_4* %53 = OpAccessChain %24 %39 %39 
                                        f32_4 %54 = OpLoad %53 
                                        f32_4 %55 = OpLoad %12 
                                        f32_4 %56 = OpVectorShuffle %55 %55 2 2 2 2 
                                        f32_4 %57 = OpFMul %54 %56 
                                        f32_4 %58 = OpLoad %36 
                                        f32_4 %59 = OpFAdd %57 %58 
                                                      OpStore %36 %59 
                                        f32_4 %61 = OpLoad %36 
                               Uniform f32_4* %63 = OpAccessChain %24 %39 %62 
                                        f32_4 %64 = OpLoad %63 
                                        f32_4 %65 = OpFAdd %61 %64 
                                                      OpStore %60 %65 
                               Uniform f32_4* %66 = OpAccessChain %24 %39 %62 
                                        f32_4 %67 = OpLoad %66 
                                        f32_3 %68 = OpVectorShuffle %67 %67 0 1 2 
                                        f32_4 %69 = OpLoad %12 
                                        f32_3 %70 = OpVectorShuffle %69 %69 3 3 3 
                                        f32_3 %71 = OpFMul %68 %70 
                                        f32_4 %72 = OpLoad %36 
                                        f32_3 %73 = OpVectorShuffle %72 %72 0 1 2 
                                        f32_3 %74 = OpFAdd %71 %73 
                                        f32_4 %75 = OpLoad %36 
                                        f32_4 %76 = OpVectorShuffle %75 %74 4 5 6 3 
                                                      OpStore %36 %76 
                                        f32_4 %77 = OpLoad %36 
                                        f32_3 %78 = OpVectorShuffle %77 %77 0 1 2 
                                        f32_3 %79 = OpFNegate %78 
                               Uniform f32_3* %81 = OpAccessChain %24 %45 
                                        f32_3 %82 = OpLoad %81 
                                        f32_3 %83 = OpFAdd %79 %82 
                                        f32_4 %84 = OpLoad %36 
                                        f32_4 %85 = OpVectorShuffle %84 %83 4 5 6 3 
                                                      OpStore %36 %85 
                                        f32_4 %87 = OpLoad %60 
                                        f32_4 %88 = OpVectorShuffle %87 %87 1 1 1 1 
                               Uniform f32_4* %90 = OpAccessChain %24 %89 %40 
                                        f32_4 %91 = OpLoad %90 
                                        f32_4 %92 = OpFMul %88 %91 
                                                      OpStore %86 %92 
                               Uniform f32_4* %93 = OpAccessChain %24 %89 %45 
                                        f32_4 %94 = OpLoad %93 
                                        f32_4 %95 = OpLoad %60 
                                        f32_4 %96 = OpVectorShuffle %95 %95 0 0 0 0 
                                        f32_4 %97 = OpFMul %94 %96 
                                        f32_4 %98 = OpLoad %86 
                                        f32_4 %99 = OpFAdd %97 %98 
                                                      OpStore %86 %99 
                              Uniform f32_4* %100 = OpAccessChain %24 %89 %39 
                                       f32_4 %101 = OpLoad %100 
                                       f32_4 %102 = OpLoad %60 
                                       f32_4 %103 = OpVectorShuffle %102 %102 2 2 2 2 
                                       f32_4 %104 = OpFMul %101 %103 
                                       f32_4 %105 = OpLoad %86 
                                       f32_4 %106 = OpFAdd %104 %105 
                                                      OpStore %86 %106 
                              Uniform f32_4* %107 = OpAccessChain %24 %89 %62 
                                       f32_4 %108 = OpLoad %107 
                                       f32_4 %109 = OpLoad %60 
                                       f32_4 %110 = OpVectorShuffle %109 %109 3 3 3 3 
                                       f32_4 %111 = OpFMul %108 %110 
                                       f32_4 %112 = OpLoad %86 
                                       f32_4 %113 = OpFAdd %111 %112 
                                                      OpStore %60 %113 
                                       f32_4 %119 = OpLoad %60 
                               Output f32_4* %121 = OpAccessChain %118 %45 
                                                      OpStore %121 %119 
                                Uniform f32* %125 = OpAccessChain %24 %123 %124 
                                         f32 %126 = OpLoad %125 
                                 Output f32* %128 = OpAccessChain %122 %124 
                                                      OpStore %128 %126 
                                       f32_4 %130 = OpLoad %129 
                                       f32_3 %131 = OpVectorShuffle %130 %130 0 1 2 
                                       f32_4 %132 = OpLoad %86 
                                       f32_4 %133 = OpVectorShuffle %132 %131 4 5 6 3 
                                                      OpStore %86 %133 
                                Private f32* %136 = OpAccessChain %86 %124 
                                                      OpStore %136 %134 
                                       f32_4 %138 = OpLoad %86 
                              Uniform f32_4* %139 = OpAccessChain %24 %123 
                                       f32_4 %140 = OpLoad %139 
                                       f32_4 %141 = OpFMul %138 %140 
                                                      OpStore %137 %141 
                                       f32_4 %142 = OpLoad %137 
                                       f32_3 %143 = OpVectorShuffle %142 %142 3 3 3 
                                       f32_4 %144 = OpLoad %137 
                                       f32_3 %145 = OpVectorShuffle %144 %144 0 1 2 
                                       f32_3 %146 = OpFMul %143 %145 
                                       f32_4 %147 = OpLoad %60 
                                       f32_4 %148 = OpVectorShuffle %147 %146 4 5 6 3 
                                                      OpStore %60 %148 
                                       f32_4 %149 = OpLoad %60 
                                       f32_3 %150 = OpVectorShuffle %149 %149 0 1 2 
                                       f32_4 %151 = OpLoad %122 
                                       f32_4 %152 = OpVectorShuffle %151 %150 4 5 6 3 
                                                      OpStore %122 %152 
                                       f32_4 %154 = OpLoad %60 
                                       f32_3 %155 = OpVectorShuffle %154 %154 0 1 2 
                                       f32_3 %156 = OpFNegate %155 
                                       f32_4 %157 = OpLoad %153 
                                       f32_4 %158 = OpVectorShuffle %157 %156 4 5 6 3 
                                                      OpStore %153 %158 
                                Private f32* %159 = OpAccessChain %137 %124 
                                         f32 %160 = OpLoad %159 
                                         f32 %161 = OpFNegate %160 
                                Private f32* %162 = OpAccessChain %153 %124 
                                                      OpStore %162 %161 
                              Uniform f32_4* %165 = OpAccessChain %24 %164 
                                       f32_4 %166 = OpLoad %165 
                                       f32_3 %167 = OpVectorShuffle %166 %166 3 3 3 
                              Uniform f32_4* %168 = OpAccessChain %24 %164 
                                       f32_4 %169 = OpLoad %168 
                                       f32_3 %170 = OpVectorShuffle %169 %169 0 1 2 
                                       f32_3 %171 = OpFMul %167 %170 
                                       f32_4 %172 = OpLoad %163 
                                       f32_4 %173 = OpVectorShuffle %172 %171 4 5 6 3 
                                                      OpStore %163 %173 
                                Uniform f32* %174 = OpAccessChain %24 %164 %124 
                                         f32 %175 = OpLoad %174 
                                Private f32* %176 = OpAccessChain %163 %124 
                                                      OpStore %176 %175 
                                       f32_4 %177 = OpLoad %153 
                                       f32_4 %178 = OpLoad %163 
                                       f32_4 %179 = OpFAdd %177 %178 
                                                      OpStore %153 %179 
                                       f32_4 %181 = OpLoad %36 
                                       f32_3 %182 = OpVectorShuffle %181 %181 0 1 2 
                                       f32_4 %183 = OpLoad %36 
                                       f32_3 %184 = OpVectorShuffle %183 %183 0 1 2 
                                         f32 %185 = OpDot %182 %184 
                                                      OpStore %180 %185 
                                         f32 %186 = OpLoad %180 
                                         f32 %187 = OpExtInst %1 32 %186 
                                                      OpStore %180 %187 
                                         f32 %188 = OpLoad %180 
                                       f32_3 %189 = OpCompositeConstruct %188 %188 %188 
                                       f32_4 %190 = OpLoad %36 
                                       f32_3 %191 = OpVectorShuffle %190 %190 0 1 2 
                                       f32_3 %192 = OpFMul %189 %191 
                                       f32_4 %193 = OpLoad %36 
                                       f32_4 %194 = OpVectorShuffle %193 %192 4 5 6 3 
                                                      OpStore %36 %194 
                                       f32_3 %197 = OpLoad %196 
                              Uniform f32_4* %198 = OpAccessChain %24 %62 %45 
                                       f32_4 %199 = OpLoad %198 
                                       f32_3 %200 = OpVectorShuffle %199 %199 0 1 2 
                                         f32 %201 = OpDot %197 %200 
                                Private f32* %203 = OpAccessChain %60 %202 
                                                      OpStore %203 %201 
                                       f32_3 %204 = OpLoad %196 
                              Uniform f32_4* %205 = OpAccessChain %24 %62 %40 
                                       f32_4 %206 = OpLoad %205 
                                       f32_3 %207 = OpVectorShuffle %206 %206 0 1 2 
                                         f32 %208 = OpDot %204 %207 
                                Private f32* %209 = OpAccessChain %60 %114 
                                                      OpStore %209 %208 
                                       f32_3 %210 = OpLoad %196 
                              Uniform f32_4* %211 = OpAccessChain %24 %62 %39 
                                       f32_4 %212 = OpLoad %211 
                                       f32_3 %213 = OpVectorShuffle %212 %212 0 1 2 
                                         f32 %214 = OpDot %210 %213 
                                Private f32* %216 = OpAccessChain %60 %215 
                                                      OpStore %216 %214 
                                       f32_4 %217 = OpLoad %60 
                                       f32_3 %218 = OpVectorShuffle %217 %217 0 1 2 
                                       f32_4 %219 = OpLoad %60 
                                       f32_3 %220 = OpVectorShuffle %219 %219 0 1 2 
                                         f32 %221 = OpDot %218 %220 
                                                      OpStore %180 %221 
                                         f32 %222 = OpLoad %180 
                                         f32 %223 = OpExtInst %1 32 %222 
                                                      OpStore %180 %223 
                                         f32 %224 = OpLoad %180 
                                       f32_3 %225 = OpCompositeConstruct %224 %224 %224 
                                       f32_4 %226 = OpLoad %60 
                                       f32_3 %227 = OpVectorShuffle %226 %226 0 1 2 
                                       f32_3 %228 = OpFMul %225 %227 
                                       f32_4 %229 = OpLoad %60 
                                       f32_4 %230 = OpVectorShuffle %229 %228 4 5 6 3 
                                                      OpStore %60 %230 
                                       f32_4 %231 = OpLoad %60 
                                       f32_3 %232 = OpVectorShuffle %231 %231 0 1 2 
                                       f32_4 %233 = OpLoad %36 
                                       f32_3 %234 = OpVectorShuffle %233 %233 0 1 2 
                                         f32 %235 = OpDot %232 %234 
                                                      OpStore %180 %235 
                              Uniform f32_4* %236 = OpAccessChain %24 %40 
                                       f32_4 %237 = OpLoad %236 
                                       f32_2 %238 = OpVectorShuffle %237 %237 1 1 
                              Uniform f32_4* %240 = OpAccessChain %24 %239 %40 
                                       f32_4 %241 = OpLoad %240 
                                       f32_2 %242 = OpVectorShuffle %241 %241 0 1 
                                       f32_2 %243 = OpFMul %238 %242 
                                       f32_4 %244 = OpLoad %36 
                                       f32_4 %245 = OpVectorShuffle %244 %243 4 5 2 3 
                                                      OpStore %36 %245 
                              Uniform f32_4* %246 = OpAccessChain %24 %239 %45 
                                       f32_4 %247 = OpLoad %246 
                                       f32_2 %248 = OpVectorShuffle %247 %247 0 1 
                              Uniform f32_4* %249 = OpAccessChain %24 %40 
                                       f32_4 %250 = OpLoad %249 
                                       f32_2 %251 = OpVectorShuffle %250 %250 0 0 
                                       f32_2 %252 = OpFMul %248 %251 
                                       f32_4 %253 = OpLoad %36 
                                       f32_2 %254 = OpVectorShuffle %253 %253 0 1 
                                       f32_2 %255 = OpFAdd %252 %254 
                                       f32_4 %256 = OpLoad %36 
                                       f32_4 %257 = OpVectorShuffle %256 %255 4 5 2 3 
                                                      OpStore %36 %257 
                                       f32_4 %258 = OpLoad %36 
                                       f32_2 %259 = OpVectorShuffle %258 %258 0 1 
                                       f32_2 %260 = OpExtInst %1 4 %259 
                                Uniform f32* %262 = OpAccessChain %24 %261 
                                         f32 %263 = OpLoad %262 
                                Uniform f32* %265 = OpAccessChain %24 %264 
                                         f32 %266 = OpLoad %265 
                                       f32_2 %267 = OpCompositeConstruct %263 %266 
                                       f32_2 %268 = OpFMul %260 %267 
                                       f32_4 %269 = OpLoad %36 
                                       f32_4 %270 = OpVectorShuffle %269 %268 4 5 2 3 
                                                      OpStore %36 %270 
                                       f32_4 %271 = OpLoad %60 
                                       f32_2 %272 = OpVectorShuffle %271 %271 3 3 
                                       f32_4 %273 = OpLoad %36 
                                       f32_2 %274 = OpVectorShuffle %273 %273 0 1 
                                       f32_2 %275 = OpFDiv %272 %274 
                                       f32_4 %276 = OpLoad %36 
                                       f32_4 %277 = OpVectorShuffle %276 %275 4 5 2 3 
                                                      OpStore %36 %277 
                                       f32_4 %279 = OpLoad %36 
                                       f32_2 %280 = OpVectorShuffle %279 %279 0 1 
                                       f32_4 %281 = OpLoad %36 
                                       f32_2 %282 = OpVectorShuffle %281 %281 0 1 
                                         f32 %283 = OpDot %280 %282 
                                                      OpStore %278 %283 
                                Uniform f32* %285 = OpAccessChain %24 %284 
                                         f32 %286 = OpLoad %285 
                                Uniform f32* %288 = OpAccessChain %24 %287 
                                         f32 %289 = OpLoad %288 
                                       f32_2 %290 = OpCompositeConstruct %286 %289 
                                       f32_2 %293 = OpFMul %290 %292 
                                       f32_4 %294 = OpLoad %36 
                                       f32_2 %295 = OpVectorShuffle %294 %294 0 1 
                                       f32_2 %296 = OpFAdd %293 %295 
                                       f32_4 %297 = OpLoad %36 
                                       f32_4 %298 = OpVectorShuffle %297 %296 4 5 2 3 
                                                      OpStore %36 %298 
                                       f32_4 %300 = OpLoad %36 
                                       f32_2 %301 = OpVectorShuffle %300 %300 0 1 
                                       f32_2 %302 = OpFDiv %292 %301 
                                       f32_4 %303 = OpLoad vs_TEXCOORD2 
                                       f32_4 %304 = OpVectorShuffle %303 %302 0 1 4 5 
                                                      OpStore vs_TEXCOORD2 %304 
                                         f32 %305 = OpLoad %278 
                                         f32 %306 = OpExtInst %1 32 %305 
                                                      OpStore %278 %306 
                                  Input f32* %310 = OpAccessChain %308 %114 
                                         f32 %311 = OpLoad %310 
                                         f32 %312 = OpExtInst %1 4 %311 
                                Uniform f32* %314 = OpAccessChain %24 %313 
                                         f32 %315 = OpLoad %314 
                                         f32 %316 = OpFMul %312 %315 
                                Private f32* %317 = OpAccessChain %36 %202 
                                                      OpStore %317 %316 
                                Uniform f32* %320 = OpAccessChain %24 %319 
                                         f32 %321 = OpLoad %320 
                                         f32 %322 = OpFAdd %321 %134 
                                Private f32* %323 = OpAccessChain %318 %202 
                                                      OpStore %323 %322 
                                Private f32* %324 = OpAccessChain %318 %202 
                                         f32 %325 = OpLoad %324 
                                Private f32* %326 = OpAccessChain %36 %202 
                                         f32 %327 = OpLoad %326 
                                         f32 %328 = OpFMul %325 %327 
                                Private f32* %329 = OpAccessChain %36 %202 
                                                      OpStore %329 %328 
                                         f32 %330 = OpLoad %278 
                                Private f32* %331 = OpAccessChain %36 %202 
                                         f32 %332 = OpLoad %331 
                                         f32 %333 = OpFMul %330 %332 
                                Private f32* %334 = OpAccessChain %318 %202 
                                                      OpStore %334 %333 
                                Uniform f32* %337 = OpAccessChain %24 %336 
                                         f32 %338 = OpLoad %337 
                                         f32 %339 = OpFNegate %338 
                                         f32 %340 = OpFAdd %339 %134 
                                                      OpStore %335 %340 
                                         f32 %341 = OpLoad %335 
                                Private f32* %342 = OpAccessChain %318 %202 
                                         f32 %343 = OpLoad %342 
                                         f32 %344 = OpExtInst %1 4 %343 
                                         f32 %345 = OpFMul %341 %344 
                                                      OpStore %335 %345 
                                         f32 %346 = OpLoad %278 
                                Private f32* %347 = OpAccessChain %36 %202 
                                         f32 %348 = OpLoad %347 
                                         f32 %349 = OpFMul %346 %348 
                                         f32 %350 = OpLoad %335 
                                         f32 %351 = OpFNegate %350 
                                         f32 %352 = OpFAdd %349 %351 
                                                      OpStore %278 %352 
                                         f32 %353 = OpLoad %180 
                                         f32 %354 = OpExtInst %1 4 %353 
                                         f32 %355 = OpLoad %278 
                                         f32 %356 = OpFMul %354 %355 
                                         f32 %357 = OpLoad %335 
                                         f32 %358 = OpFAdd %356 %357 
                                                      OpStore %180 %358 
                                Uniform f32* %362 = OpAccessChain %24 %239 %62 %124 
                                         f32 %363 = OpLoad %362 
                                        bool %365 = OpFOrdEqual %363 %364 
                                                      OpStore %361 %365 
                                        bool %366 = OpLoad %361 
                                                      OpSelectionMerge %370 None 
                                                      OpBranchConditional %366 %369 %372 
                                             %369 = OpLabel 
                                         f32 %371 = OpLoad %180 
                                                      OpStore %368 %371 
                                                      OpBranch %370 
                                             %372 = OpLabel 
                                Private f32* %373 = OpAccessChain %318 %202 
                                         f32 %374 = OpLoad %373 
                                                      OpStore %368 %374 
                                                      OpBranch %370 
                                             %370 = OpLabel 
                                         f32 %375 = OpLoad %368 
                                                      OpStore %180 %375 
                                Uniform f32* %377 = OpAccessChain %24 %376 
                                         f32 %378 = OpLoad %377 
                                Uniform f32* %380 = OpAccessChain %24 %379 
                                         f32 %381 = OpLoad %380 
                                         f32 %382 = OpFMul %378 %381 
                                                      OpStore %278 %382 
                                         f32 %383 = OpLoad %278 
                                         f32 %384 = OpLoad %180 
                                         f32 %385 = OpFMul %383 %384 
                                         f32 %386 = OpFAdd %385 %134 
                                                      OpStore %278 %386 
                                         f32 %387 = OpLoad %180 
                                         f32 %388 = OpLoad %278 
                                         f32 %389 = OpFDiv %387 %388 
                                Private f32* %390 = OpAccessChain %36 %202 
                                                      OpStore %390 %389 
                                Uniform f32* %392 = OpAccessChain %24 %391 
                                         f32 %393 = OpLoad %392 
                                Uniform f32* %394 = OpAccessChain %24 %379 
                                         f32 %395 = OpLoad %394 
                                         f32 %396 = OpFMul %393 %395 
                                                      OpStore %278 %396 
                                Private f32* %397 = OpAccessChain %36 %202 
                                         f32 %398 = OpLoad %397 
                                         f32 %399 = OpLoad %278 
                                         f32 %400 = OpFMul %398 %399 
                                                      OpStore %278 %400 
                                         f32 %401 = OpLoad %278 
                                         f32 %402 = OpExtInst %1 37 %401 %134 
                                Private f32* %403 = OpAccessChain %318 %202 
                                                      OpStore %403 %402 
                                Private f32* %404 = OpAccessChain %318 %202 
                                         f32 %405 = OpLoad %404 
                                         f32 %406 = OpExtInst %1 31 %405 
                                Private f32* %407 = OpAccessChain %318 %202 
                                                      OpStore %407 %406 
                                       f32_4 %408 = OpLoad %153 
                                       f32_2 %409 = OpLoad %318 
                                       f32_4 %410 = OpVectorShuffle %409 %409 0 0 0 0 
                                       f32_4 %411 = OpFMul %408 %410 
                                                      OpStore %60 %411 
                                       f32_4 %413 = OpLoad %137 
                                       f32_3 %414 = OpVectorShuffle %413 %413 0 1 2 
                                       f32_4 %415 = OpLoad %137 
                                       f32_3 %416 = OpVectorShuffle %415 %415 3 3 3 
                                       f32_3 %417 = OpFMul %414 %416 
                                       f32_4 %418 = OpLoad %60 
                                       f32_3 %419 = OpVectorShuffle %418 %418 0 1 2 
                                       f32_3 %420 = OpFAdd %417 %419 
                                       f32_4 %421 = OpLoad %412 
                                       f32_4 %422 = OpVectorShuffle %421 %420 4 5 6 3 
                                                      OpStore %412 %422 
                                Private f32* %423 = OpAccessChain %86 %124 
                                         f32 %424 = OpLoad %423 
                                Uniform f32* %425 = OpAccessChain %24 %123 %124 
                                         f32 %426 = OpLoad %425 
                                         f32 %427 = OpFMul %424 %426 
                                Private f32* %428 = OpAccessChain %60 %124 
                                         f32 %429 = OpLoad %428 
                                         f32 %430 = OpFAdd %427 %429 
                                 Output f32* %431 = OpAccessChain %412 %124 
                                                      OpStore %431 %430 
                              Uniform f32_4* %433 = OpAccessChain %24 %432 
                                       f32_4 %434 = OpLoad %433 
                                       f32_4 %437 = OpExtInst %1 40 %434 %436 
                                                      OpStore %60 %437 
                                       f32_4 %438 = OpLoad %60 
                                       f32_4 %441 = OpExtInst %1 37 %438 %440 
                                                      OpStore %60 %441 
                                       f32_2 %442 = OpLoad %9 
                                       f32_4 %443 = OpLoad %60 
                                       f32_2 %444 = OpVectorShuffle %443 %443 0 1 
                                       f32_2 %445 = OpFNegate %444 
                                       f32_2 %446 = OpFAdd %442 %445 
                                                      OpStore %318 %446 
                                       f32_2 %447 = OpLoad %9 
                                       f32_2 %450 = OpFMul %447 %449 
                                       f32_4 %451 = OpLoad %60 
                                       f32_2 %452 = OpVectorShuffle %451 %451 0 1 
                                       f32_2 %453 = OpFNegate %452 
                                       f32_2 %454 = OpFAdd %450 %453 
                                                      OpStore %9 %454 
                                       f32_4 %455 = OpLoad %60 
                                       f32_2 %456 = OpVectorShuffle %455 %455 2 3 
                                       f32_2 %457 = OpFNegate %456 
                                       f32_2 %458 = OpLoad %9 
                                       f32_2 %459 = OpFAdd %457 %458 
                                       f32_4 %460 = OpLoad vs_TEXCOORD2 
                                       f32_4 %461 = OpVectorShuffle %460 %459 4 5 2 3 
                                                      OpStore vs_TEXCOORD2 %461 
                                       f32_4 %462 = OpLoad %60 
                                       f32_2 %463 = OpVectorShuffle %462 %462 0 1 
                                       f32_2 %464 = OpFNegate %463 
                                       f32_4 %465 = OpLoad %60 
                                       f32_2 %466 = OpVectorShuffle %465 %465 2 3 
                                       f32_2 %467 = OpFAdd %464 %466 
                                                      OpStore %9 %467 
                                       f32_2 %469 = OpLoad %318 
                                       f32_2 %470 = OpLoad %9 
                                       f32_2 %471 = OpFDiv %469 %470 
                                       f32_4 %472 = OpLoad vs_TEXCOORD0 
                                       f32_4 %473 = OpVectorShuffle %472 %471 0 1 4 5 
                                                      OpStore vs_TEXCOORD0 %473 
                                       f32_2 %475 = OpLoad %474 
                                       f32_4 %476 = OpLoad vs_TEXCOORD0 
                                       f32_4 %477 = OpVectorShuffle %476 %475 4 5 2 3 
                                                      OpStore vs_TEXCOORD0 %477 
                                  Input f32* %479 = OpAccessChain %308 %114 
                                         f32 %480 = OpLoad %479 
                                        bool %481 = OpFOrdGreaterThanEqual %364 %480 
                                                      OpStore %478 %481 
                                        bool %482 = OpLoad %478 
                                         f32 %483 = OpSelect %482 %134 %364 
                                Private f32* %484 = OpAccessChain %9 %202 
                                                      OpStore %484 %483 
                                Uniform f32* %488 = OpAccessChain %24 %487 
                                         f32 %489 = OpLoad %488 
                                         f32 %490 = OpFNegate %489 
                                Uniform f32* %492 = OpAccessChain %24 %491 
                                         f32 %493 = OpLoad %492 
                                         f32 %494 = OpFAdd %490 %493 
                                Private f32* %495 = OpAccessChain %486 %202 
                                                      OpStore %495 %494 
                                Private f32* %496 = OpAccessChain %9 %202 
                                         f32 %497 = OpLoad %496 
                                Private f32* %498 = OpAccessChain %486 %202 
                                         f32 %499 = OpLoad %498 
                                         f32 %500 = OpFMul %497 %499 
                                Uniform f32* %501 = OpAccessChain %24 %487 
                                         f32 %502 = OpLoad %501 
                                         f32 %503 = OpFAdd %500 %502 
                                Private f32* %504 = OpAccessChain %9 %202 
                                                      OpStore %504 %503 
                                Private f32* %505 = OpAccessChain %9 %202 
                                         f32 %506 = OpLoad %505 
                                         f32 %507 = OpFMul %506 %291 
                                Uniform f32* %509 = OpAccessChain %24 %508 
                                         f32 %510 = OpLoad %509 
                                         f32 %511 = OpFAdd %507 %510 
                                Private f32* %512 = OpAccessChain %9 %202 
                                                      OpStore %512 %511 
                                Private f32* %513 = OpAccessChain %9 %202 
                                         f32 %514 = OpLoad %513 
                                Uniform f32* %515 = OpAccessChain %24 %379 
                                         f32 %516 = OpLoad %515 
                                         f32 %517 = OpFMul %514 %516 
                                Private f32* %518 = OpAccessChain %9 %202 
                                                      OpStore %518 %517 
                                Private f32* %519 = OpAccessChain %9 %202 
                                         f32 %520 = OpLoad %519 
                                         f32 %521 = OpFNegate %520 
                                         f32 %523 = OpFMul %521 %522 
                                         f32 %524 = OpFAdd %523 %522 
                                Private f32* %525 = OpAccessChain %9 %202 
                                                      OpStore %525 %524 
                                Private f32* %526 = OpAccessChain %9 %202 
                                         f32 %527 = OpLoad %526 
                                Private f32* %528 = OpAccessChain %36 %202 
                                         f32 %529 = OpLoad %528 
                                         f32 %530 = OpFMul %527 %529 
                                         f32 %532 = OpFAdd %530 %531 
                                Private f32* %533 = OpAccessChain %36 %124 
                                                      OpStore %533 %532 
                                       f32_4 %535 = OpLoad %36 
                                       f32_2 %536 = OpVectorShuffle %535 %535 0 3 
                                       f32_4 %537 = OpLoad vs_TEXCOORD1 
                                       f32_4 %538 = OpVectorShuffle %537 %536 4 1 2 5 
                                                      OpStore vs_TEXCOORD1 %538 
                                         f32 %539 = OpLoad %278 
                                         f32 %540 = OpFNegate %539 
                                         f32 %541 = OpFMul %540 %522 
                                Private f32* %542 = OpAccessChain %36 %124 
                                         f32 %543 = OpLoad %542 
                                         f32 %544 = OpFAdd %541 %543 
                                 Output f32* %545 = OpAccessChain vs_TEXCOORD1 %114 
                                                      OpStore %545 %544 
                                         f32 %546 = OpLoad %278 
                                         f32 %547 = OpFMul %546 %522 
                                Private f32* %548 = OpAccessChain %36 %124 
                                         f32 %549 = OpLoad %548 
                                         f32 %550 = OpFAdd %547 %549 
                                 Output f32* %551 = OpAccessChain vs_TEXCOORD1 %215 
                                                      OpStore %551 %550 
                                  Input f32* %553 = OpAccessChain %129 %124 
                                         f32 %554 = OpLoad %553 
                                 Output f32* %555 = OpAccessChain vs_TEXCOORD3 %215 
                                                      OpStore %555 %554 
                                 Output f32* %556 = OpAccessChain vs_TEXCOORD3 %124 
                                                      OpStore %556 %364 
                                Uniform f32* %558 = OpAccessChain %24 %557 
                                         f32 %559 = OpLoad %558 
                                Uniform f32* %561 = OpAccessChain %24 %560 
                                         f32 %562 = OpLoad %561 
                                Uniform f32* %564 = OpAccessChain %24 %563 
                                         f32 %565 = OpLoad %564 
                                Uniform f32* %567 = OpAccessChain %24 %566 
                                         f32 %568 = OpLoad %567 
                                       f32_4 %569 = OpCompositeConstruct %559 %562 %565 %568 
                                Uniform f32* %571 = OpAccessChain %24 %570 
                                         f32 %572 = OpLoad %571 
                                Uniform f32* %573 = OpAccessChain %24 %570 
                                         f32 %574 = OpLoad %573 
                                Uniform f32* %575 = OpAccessChain %24 %570 
                                         f32 %576 = OpLoad %575 
                                Uniform f32* %577 = OpAccessChain %24 %570 
                                         f32 %578 = OpLoad %577 
                                       f32_4 %579 = OpCompositeConstruct %572 %574 %576 %578 
                                         f32 %580 = OpCompositeExtract %579 0 
                                         f32 %581 = OpCompositeExtract %579 1 
                                         f32 %582 = OpCompositeExtract %579 2 
                                         f32 %583 = OpCompositeExtract %579 3 
                                       f32_4 %584 = OpCompositeConstruct %580 %581 %582 %583 
                                       f32_4 %585 = OpFMul %569 %584 
                                                      OpStore %36 %585 
                                       f32_4 %586 = OpLoad %36 
                                       f32_2 %587 = OpVectorShuffle %586 %586 2 3 
                                       f32_2 %588 = OpFNegate %587 
                                Uniform f32* %589 = OpAccessChain %24 %313 
                                         f32 %590 = OpLoad %589 
                                       f32_2 %591 = OpCompositeConstruct %590 %590 
                                       f32_2 %592 = OpFMul %588 %591 
                                       f32_3 %593 = OpLoad %486 
                                       f32_3 %594 = OpVectorShuffle %593 %592 3 1 4 
                                                      OpStore %486 %594 
                                       f32_3 %595 = OpLoad %486 
                                       f32_2 %596 = OpVectorShuffle %595 %595 0 2 
                                Uniform f32* %598 = OpAccessChain %24 %597 
                                         f32 %599 = OpLoad %598 
                                Uniform f32* %601 = OpAccessChain %24 %600 
                                         f32 %602 = OpLoad %601 
                                       f32_2 %603 = OpCompositeConstruct %599 %602 
                                       f32_2 %604 = OpFDiv %596 %603 
                                       f32_3 %605 = OpLoad %486 
                                       f32_3 %606 = OpVectorShuffle %605 %604 3 1 4 
                                                      OpStore %486 %606 
                                       f32_3 %607 = OpLoad %486 
                                       f32_2 %608 = OpVectorShuffle %607 %607 0 2 
                                       f32_2 %609 = OpLoad %474 
                                       f32_2 %610 = OpFAdd %608 %609 
                                       f32_4 %611 = OpLoad vs_TEXCOORD3 
                                       f32_4 %612 = OpVectorShuffle %611 %610 4 5 2 3 
                                                      OpStore vs_TEXCOORD3 %612 
                                Private f32* %613 = OpAccessChain %36 %202 
                                         f32 %614 = OpLoad %613 
                                         f32 %615 = OpLoad %180 
                                         f32 %616 = OpFMul %614 %615 
                                         f32 %617 = OpFAdd %616 %134 
                                Private f32* %618 = OpAccessChain %486 %202 
                                                      OpStore %618 %617 
                                         f32 %619 = OpLoad %180 
                                Private f32* %620 = OpAccessChain %486 %202 
                                         f32 %621 = OpLoad %620 
                                         f32 %622 = OpFDiv %619 %621 
                                Private f32* %623 = OpAccessChain %486 %202 
                                                      OpStore %623 %622 
                                Private f32* %624 = OpAccessChain %486 %202 
                                         f32 %625 = OpLoad %624 
                                Private f32* %626 = OpAccessChain %36 %114 
                                         f32 %627 = OpLoad %626 
                                         f32 %628 = OpFMul %625 %627 
                                                      OpStore %180 %628 
                                Private f32* %629 = OpAccessChain %9 %202 
                                         f32 %630 = OpLoad %629 
                                Private f32* %631 = OpAccessChain %486 %202 
                                         f32 %632 = OpLoad %631 
                                         f32 %633 = OpFMul %630 %632 
                                         f32 %634 = OpFAdd %633 %531 
                                Private f32* %635 = OpAccessChain %9 %202 
                                                      OpStore %635 %634 
                                Private f32* %638 = OpAccessChain %486 %202 
                                         f32 %639 = OpLoad %638 
                                 Output f32* %640 = OpAccessChain vs_TEXCOORD4 %202 
                                                      OpStore %640 %639 
                                         f32 %641 = OpLoad %180 
                                         f32 %642 = OpFNegate %641 
                                         f32 %643 = OpFMul %642 %522 
                                Private f32* %644 = OpAccessChain %9 %202 
                                         f32 %645 = OpLoad %644 
                                         f32 %646 = OpFAdd %643 %645 
                                 Output f32* %647 = OpAccessChain vs_TEXCOORD4 %114 
                                                      OpStore %647 %646 
                                 Output f32* %648 = OpAccessChain %118 %45 %114 
                                         f32 %649 = OpLoad %648 
                                         f32 %650 = OpFNegate %649 
                                 Output f32* %651 = OpAccessChain %118 %45 %114 
                                                      OpStore %651 %650 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 209
; Schema: 0
                                             OpCapability Shader 
                                      %1 = OpExtInstImport "GLSL.std.450" 
                                             OpMemoryModel Logical GLSL450 
                                             OpEntryPoint Fragment %4 "main" %21 %35 %77 %79 %88 %96 %146 %192 
                                             OpExecutionMode %4 OriginUpperLeft 
                                             OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                             OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                             OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                             OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                             OpDecorate %12 DescriptorSet 12 
                                             OpDecorate %12 Binding 12 
                                             OpDecorate %16 DescriptorSet 16 
                                             OpDecorate %16 Binding 16 
                                             OpDecorate vs_TEXCOORD3 Location 21 
                                             OpDecorate vs_TEXCOORD4 Location 35 
                                             OpMemberDecorate %53 0 Offset 53 
                                             OpMemberDecorate %53 1 Offset 53 
                                             OpDecorate %53 Block 
                                             OpDecorate %55 DescriptorSet 55 
                                             OpDecorate %55 Binding 55 
                                             OpDecorate %77 Location 77 
                                             OpDecorate %79 Location 79 
                                             OpDecorate vs_TEXCOORD0 Location 88 
                                             OpDecorate vs_TEXCOORD1 Location 96 
                                             OpDecorate vs_TEXCOORD2 Location 146 
                                             OpDecorate %192 Location 192 
                                      %2 = OpTypeVoid 
                                      %3 = OpTypeFunction %2 
                                      %6 = OpTypeFloat 32 
                                      %7 = OpTypeVector %6 4 
                                      %8 = OpTypePointer Private %7 
                       Private f32_4* %9 = OpVariable Private 
                                     %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                     %11 = OpTypePointer UniformConstant %10 
UniformConstant read_only Texture2D* %12 = OpVariable UniformConstant 
                                     %14 = OpTypeSampler 
                                     %15 = OpTypePointer UniformConstant %14 
            UniformConstant sampler* %16 = OpVariable UniformConstant 
                                     %18 = OpTypeSampledImage %10 
                                     %20 = OpTypePointer Input %7 
               Input f32_4* vs_TEXCOORD3 = OpVariable Input 
                                     %22 = OpTypeVector %6 2 
                                     %26 = OpTypeInt 32 0 
                                 u32 %27 = OpConstant 3 
                                 u32 %29 = OpConstant 0 
                                     %30 = OpTypePointer Private %6 
                                     %34 = OpTypePointer Input %22 
               Input f32_2* vs_TEXCOORD4 = OpVariable Input 
                                     %36 = OpTypePointer Input %6 
                                 u32 %40 = OpConstant 1 
                                 f32 %48 = OpConstant 3.674022E-40 
                                 f32 %49 = OpConstant 3.674022E-40 
                      Private f32_4* %52 = OpVariable Private 
                                     %53 = OpTypeStruct %7 %7 
                                     %54 = OpTypePointer Uniform %53 
     Uniform struct {f32_4; f32_4;}* %55 = OpVariable Uniform 
                                     %56 = OpTypeInt 32 1 
                                 i32 %57 = OpConstant 0 
                                     %58 = OpTypeVector %6 3 
                                     %59 = OpTypePointer Uniform %7 
                                     %69 = OpTypePointer Uniform %6 
                        Input f32_4* %77 = OpVariable Input 
                        Input f32_4* %79 = OpVariable Input 
                                     %83 = OpTypePointer Private %22 
                      Private f32_2* %84 = OpVariable Private 
               Input f32_4* vs_TEXCOORD0 = OpVariable Input 
               Input f32_4* vs_TEXCOORD1 = OpVariable Input 
                     Private f32_4* %114 = OpVariable Private 
                                i32 %133 = OpConstant 1 
               Input f32_4* vs_TEXCOORD2 = OpVariable Input 
                                u32 %180 = OpConstant 2 
                                f32 %184 = OpConstant 3.674022E-40 
                                    %191 = OpTypePointer Output %7 
                      Output f32_4* %192 = OpVariable Output 
                                    %194 = OpTypeBool 
                                    %195 = OpTypePointer Private %194 
                      Private bool* %196 = OpVariable Private 
                                i32 %202 = OpConstant -1 
                                 void %4 = OpFunction None %3 
                                      %5 = OpLabel 
                 read_only Texture2D %13 = OpLoad %12 
                             sampler %17 = OpLoad %16 
          read_only Texture2DSampled %19 = OpSampledImage %13 %17 
                               f32_4 %23 = OpLoad vs_TEXCOORD3 
                               f32_2 %24 = OpVectorShuffle %23 %23 0 1 
                               f32_4 %25 = OpImageSampleImplicitLod %19 %24 
                                 f32 %28 = OpCompositeExtract %25 3 
                        Private f32* %31 = OpAccessChain %9 %29 
                                             OpStore %31 %28 
                        Private f32* %32 = OpAccessChain %9 %29 
                                 f32 %33 = OpLoad %32 
                          Input f32* %37 = OpAccessChain vs_TEXCOORD4 %29 
                                 f32 %38 = OpLoad %37 
                                 f32 %39 = OpFMul %33 %38 
                          Input f32* %41 = OpAccessChain vs_TEXCOORD4 %40 
                                 f32 %42 = OpLoad %41 
                                 f32 %43 = OpFNegate %42 
                                 f32 %44 = OpFAdd %39 %43 
                        Private f32* %45 = OpAccessChain %9 %29 
                                             OpStore %45 %44 
                        Private f32* %46 = OpAccessChain %9 %29 
                                 f32 %47 = OpLoad %46 
                                 f32 %50 = OpExtInst %1 43 %47 %48 %49 
                        Private f32* %51 = OpAccessChain %9 %29 
                                             OpStore %51 %50 
                      Uniform f32_4* %60 = OpAccessChain %55 %57 
                               f32_4 %61 = OpLoad %60 
                               f32_3 %62 = OpVectorShuffle %61 %61 3 3 3 
                      Uniform f32_4* %63 = OpAccessChain %55 %57 
                               f32_4 %64 = OpLoad %63 
                               f32_3 %65 = OpVectorShuffle %64 %64 0 1 2 
                               f32_3 %66 = OpFMul %62 %65 
                               f32_4 %67 = OpLoad %52 
                               f32_4 %68 = OpVectorShuffle %67 %66 4 5 6 3 
                                             OpStore %52 %68 
                        Uniform f32* %70 = OpAccessChain %55 %57 %27 
                                 f32 %71 = OpLoad %70 
                        Private f32* %72 = OpAccessChain %52 %27 
                                             OpStore %72 %71 
                               f32_4 %73 = OpLoad %9 
                               f32_4 %74 = OpVectorShuffle %73 %73 0 0 0 0 
                               f32_4 %75 = OpLoad %52 
                               f32_4 %76 = OpFMul %74 %75 
                                             OpStore %9 %76 
                               f32_4 %78 = OpLoad %77 
                               f32_4 %80 = OpLoad %79 
                               f32_4 %81 = OpFNegate %80 
                               f32_4 %82 = OpFAdd %78 %81 
                                             OpStore %52 %82 
                 read_only Texture2D %85 = OpLoad %12 
                             sampler %86 = OpLoad %16 
          read_only Texture2DSampled %87 = OpSampledImage %85 %86 
                               f32_4 %89 = OpLoad vs_TEXCOORD0 
                               f32_2 %90 = OpVectorShuffle %89 %89 0 1 
                               f32_4 %91 = OpImageSampleImplicitLod %87 %90 
                                 f32 %92 = OpCompositeExtract %91 3 
                        Private f32* %93 = OpAccessChain %84 %29 
                                             OpStore %93 %92 
                               f32_2 %94 = OpLoad %84 
                               f32_2 %95 = OpVectorShuffle %94 %94 0 0 
                               f32_4 %97 = OpLoad vs_TEXCOORD1 
                               f32_2 %98 = OpVectorShuffle %97 %97 0 0 
                               f32_2 %99 = OpFMul %95 %98 
                              f32_4 %100 = OpLoad vs_TEXCOORD1 
                              f32_2 %101 = OpVectorShuffle %100 %100 2 1 
                              f32_2 %102 = OpFNegate %101 
                              f32_2 %103 = OpFAdd %99 %102 
                                             OpStore %84 %103 
                              f32_2 %104 = OpLoad %84 
                              f32_2 %105 = OpCompositeConstruct %48 %48 
                              f32_2 %106 = OpCompositeConstruct %49 %49 
                              f32_2 %107 = OpExtInst %1 43 %104 %105 %106 
                                             OpStore %84 %107 
                              f32_2 %108 = OpLoad %84 
                              f32_4 %109 = OpVectorShuffle %108 %108 0 0 0 0 
                              f32_4 %110 = OpLoad %52 
                              f32_4 %111 = OpFMul %109 %110 
                              f32_4 %112 = OpLoad %79 
                              f32_4 %113 = OpFAdd %111 %112 
                                             OpStore %52 %113 
                              f32_2 %115 = OpLoad %84 
                              f32_4 %116 = OpVectorShuffle %115 %115 1 1 1 1 
                              f32_4 %117 = OpLoad %52 
                              f32_4 %118 = OpFMul %116 %117 
                                             OpStore %114 %118 
                       Private f32* %119 = OpAccessChain %52 %27 
                                f32 %120 = OpLoad %119 
                                f32 %121 = OpFNegate %120 
                       Private f32* %122 = OpAccessChain %84 %40 
                                f32 %123 = OpLoad %122 
                                f32 %124 = OpFMul %121 %123 
                                f32 %125 = OpFAdd %124 %49 
                       Private f32* %126 = OpAccessChain %52 %29 
                                             OpStore %126 %125 
                              f32_4 %127 = OpLoad %9 
                              f32_4 %128 = OpLoad %52 
                              f32_4 %129 = OpVectorShuffle %128 %128 0 0 0 0 
                              f32_4 %130 = OpFMul %127 %129 
                              f32_4 %131 = OpLoad %114 
                              f32_4 %132 = OpFAdd %130 %131 
                                             OpStore %9 %132 
                     Uniform f32_4* %134 = OpAccessChain %55 %133 
                              f32_4 %135 = OpLoad %134 
                              f32_2 %136 = OpVectorShuffle %135 %135 0 1 
                              f32_2 %137 = OpFNegate %136 
                     Uniform f32_4* %138 = OpAccessChain %55 %133 
                              f32_4 %139 = OpLoad %138 
                              f32_2 %140 = OpVectorShuffle %139 %139 2 3 
                              f32_2 %141 = OpFAdd %137 %140 
                              f32_4 %142 = OpLoad %52 
                              f32_4 %143 = OpVectorShuffle %142 %141 4 5 2 3 
                                             OpStore %52 %143 
                              f32_4 %144 = OpLoad %52 
                              f32_2 %145 = OpVectorShuffle %144 %144 0 1 
                              f32_4 %147 = OpLoad vs_TEXCOORD2 
                              f32_2 %148 = OpVectorShuffle %147 %147 0 1 
                              f32_2 %149 = OpExtInst %1 4 %148 
                              f32_2 %150 = OpFNegate %149 
                              f32_2 %151 = OpFAdd %145 %150 
                              f32_4 %152 = OpLoad %52 
                              f32_4 %153 = OpVectorShuffle %152 %151 4 5 2 3 
                                             OpStore %52 %153 
                              f32_4 %154 = OpLoad %52 
                              f32_2 %155 = OpVectorShuffle %154 %154 0 1 
                              f32_4 %156 = OpLoad vs_TEXCOORD2 
                              f32_2 %157 = OpVectorShuffle %156 %156 2 3 
                              f32_2 %158 = OpFMul %155 %157 
                              f32_4 %159 = OpLoad %52 
                              f32_4 %160 = OpVectorShuffle %159 %158 4 5 2 3 
                                             OpStore %52 %160 
                              f32_4 %161 = OpLoad %52 
                              f32_2 %162 = OpVectorShuffle %161 %161 0 1 
                              f32_2 %163 = OpCompositeConstruct %48 %48 
                              f32_2 %164 = OpCompositeConstruct %49 %49 
                              f32_2 %165 = OpExtInst %1 43 %162 %163 %164 
                              f32_4 %166 = OpLoad %52 
                              f32_4 %167 = OpVectorShuffle %166 %165 4 5 2 3 
                                             OpStore %52 %167 
                       Private f32* %168 = OpAccessChain %52 %40 
                                f32 %169 = OpLoad %168 
                       Private f32* %170 = OpAccessChain %52 %29 
                                f32 %171 = OpLoad %170 
                                f32 %172 = OpFMul %169 %171 
                       Private f32* %173 = OpAccessChain %52 %29 
                                             OpStore %173 %172 
                              f32_4 %174 = OpLoad %9 
                              f32_4 %175 = OpLoad %52 
                              f32_4 %176 = OpVectorShuffle %175 %175 0 0 0 0 
                              f32_4 %177 = OpFMul %174 %176 
                                             OpStore %9 %177 
                       Private f32* %178 = OpAccessChain %9 %27 
                                f32 %179 = OpLoad %178 
                         Input f32* %181 = OpAccessChain vs_TEXCOORD3 %180 
                                f32 %182 = OpLoad %181 
                                f32 %183 = OpFMul %179 %182 
                                f32 %185 = OpFAdd %183 %184 
                       Private f32* %186 = OpAccessChain %52 %29 
                                             OpStore %186 %185 
                              f32_4 %187 = OpLoad %9 
                              f32_4 %188 = OpLoad vs_TEXCOORD3 
                              f32_4 %189 = OpVectorShuffle %188 %188 2 2 2 2 
                              f32_4 %190 = OpFMul %187 %189 
                                             OpStore %9 %190 
                              f32_4 %193 = OpLoad %9 
                                             OpStore %192 %193 
                       Private f32* %197 = OpAccessChain %52 %29 
                                f32 %198 = OpLoad %197 
                               bool %199 = OpFOrdLessThan %198 %48 
                                             OpStore %196 %199 
                               bool %200 = OpLoad %196 
                                i32 %201 = OpSelect %200 %133 %57 
                                i32 %203 = OpIMul %201 %202 
                               bool %204 = OpINotEqual %203 %57 
                                             OpSelectionMerge %206 None 
                                             OpBranchConditional %204 %205 %206 
                                    %205 = OpLabel 
                                             OpKill
                                    %206 = OpLabel 
                                             OpReturn
                                             OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "FOG_LINEAR" "UNITY_UI_ALPHACLIP" "UNITY_UI_CLIP_RECT" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "FOG_LINEAR" "UNITY_UI_ALPHACLIP" "UNITY_UI_CLIP_RECT" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	vec4 _FaceColor;
uniform 	float _FaceDilate;
uniform 	float _OutlineSoftness;
uniform 	vec4 _OutlineColor;
uniform 	float _OutlineWidth;
uniform 	float _WeightNormal;
uniform 	float _WeightBold;
uniform 	float _ScaleRatioA;
uniform 	float _VertexOffsetX;
uniform 	float _VertexOffsetY;
uniform 	vec4 _ClipRect;
uniform 	float _MaskSoftnessX;
uniform 	float _MaskSoftnessY;
uniform 	float _GradientScale;
uniform 	float _ScaleX;
uniform 	float _ScaleY;
uniform 	float _PerspectiveFilter;
uniform 	float _Sharpness;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_COLOR0;
in  vec2 in_TEXCOORD0;
in  vec2 in_TEXCOORD1;
out vec4 vs_COLOR0;
out vec4 vs_COLOR1;
out vec4 vs_TEXCOORD0;
out vec4 vs_TEXCOORD1;
out vec4 vs_TEXCOORD2;
out float vs_TEXCOORDn0;
vec2 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
vec3 u_xlat5;
float u_xlat6;
vec2 u_xlat7;
float u_xlat12;
float u_xlat13;
float u_xlat18;
bool u_xlatb18;
void main()
{
    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
    gl_Position = u_xlat2;
    u_xlat3 = in_COLOR0 * _FaceColor;
    u_xlat3.xyz = u_xlat3.www * u_xlat3.xyz;
    vs_COLOR0 = u_xlat3;
    u_xlat4.w = in_COLOR0.w * _OutlineColor.w;
    u_xlat4.xyz = u_xlat4.www * _OutlineColor.xyz;
    u_xlat4 = (-u_xlat3) + u_xlat4;
    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
    u_xlat5.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat5.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat5.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat5.xyz = vec3(u_xlat12) * u_xlat5.xyz;
    u_xlat12 = dot(u_xlat5.xyz, u_xlat1.xyz);
    u_xlat1.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;
    u_xlat1.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat1.xy;
    u_xlat1.xy = abs(u_xlat1.xy) * vec2(_ScaleX, _ScaleY);
    u_xlat1.xy = u_xlat2.ww / u_xlat1.xy;
    vs_TEXCOORDn0 = u_xlat2.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat18 = dot(u_xlat1.xy, u_xlat1.xy);
    u_xlat1.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) * vec2(0.25, 0.25) + u_xlat1.xy;
    vs_TEXCOORD2.zw = vec2(0.25, 0.25) / u_xlat1.xy;
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.x = abs(in_TEXCOORD1.y) * _GradientScale;
    u_xlat7.x = _Sharpness + 1.0;
    u_xlat1.x = u_xlat7.x * u_xlat1.x;
    u_xlat7.x = u_xlat18 * u_xlat1.x;
    u_xlat13 = (-_PerspectiveFilter) + 1.0;
    u_xlat13 = u_xlat13 * abs(u_xlat7.x);
    u_xlat18 = u_xlat18 * u_xlat1.x + (-u_xlat13);
    u_xlat12 = abs(u_xlat12) * u_xlat18 + u_xlat13;
    u_xlatb18 = hlslcc_mtx4x4glstate_matrix_projection[3].w==0.0;
    u_xlat12 = (u_xlatb18) ? u_xlat12 : u_xlat7.x;
    u_xlat18 = _OutlineSoftness * _ScaleRatioA;
    u_xlat18 = u_xlat18 * u_xlat12 + 1.0;
    u_xlat1.x = u_xlat12 / u_xlat18;
    u_xlat12 = _OutlineWidth * _ScaleRatioA;
    u_xlat12 = u_xlat12 * 0.5;
    u_xlat18 = u_xlat1.x * u_xlat12;
    u_xlat18 = u_xlat18 + u_xlat18;
    u_xlat18 = min(u_xlat18, 1.0);
    u_xlat18 = sqrt(u_xlat18);
    vs_COLOR1 = vec4(u_xlat18) * u_xlat4 + u_xlat3;
    u_xlat2 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));
    u_xlat2 = min(u_xlat2, vec4(2e+10, 2e+10, 2e+10, 2e+10));
    u_xlat7.xy = u_xlat0.xy + (-u_xlat2.xy);
    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + (-u_xlat2.xy);
    vs_TEXCOORD2.xy = (-u_xlat2.zw) + u_xlat0.xy;
    u_xlat0.xy = (-u_xlat2.xy) + u_xlat2.zw;
    vs_TEXCOORD0.zw = u_xlat7.xy / u_xlat0.xy;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlatb0 = 0.0>=in_TEXCOORD1.y;
    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);
    u_xlat6 = (-_WeightNormal) + _WeightBold;
    u_xlat0.x = u_xlat0.x * u_xlat6 + _WeightNormal;
    u_xlat0.x = u_xlat0.x * 0.25 + _FaceDilate;
    u_xlat0.x = u_xlat0.x * _ScaleRatioA;
    u_xlat0.x = (-u_xlat0.x) * 0.5 + 0.5;
    u_xlat1.w = u_xlat0.x * u_xlat1.x + -0.5;
    vs_TEXCOORD1.y = (-u_xlat12) * u_xlat1.x + u_xlat1.w;
    vs_TEXCOORD1.z = u_xlat12 * u_xlat1.x + u_xlat1.w;
    vs_TEXCOORD1.xw = u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 unity_FogColor;
uniform 	vec4 _ClipRect;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
in  vec4 vs_COLOR0;
in  vec4 vs_TEXCOORD0;
in  vec4 vs_TEXCOORD1;
in  vec4 vs_TEXCOORD2;
in  float vs_TEXCOORDn0;
layout(location = 0) out vec4 SV_Target0;
vec2 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
bool u_xlatb2;
void main()
{
    u_xlat0.xy = (-_ClipRect.xy) + _ClipRect.zw;
    u_xlat0.xy = u_xlat0.xy + -abs(vs_TEXCOORD2.xy);
    u_xlat0.xy = u_xlat0.xy * vs_TEXCOORD2.zw;
    u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);
    u_xlat0.x = u_xlat0.y * u_xlat0.x;
    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2.x = u_xlat1.w * vs_TEXCOORD1.x + (-vs_TEXCOORD1.w);
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
    u_xlat1 = u_xlat2.xxxx * vs_COLOR0;
    u_xlat2.x = u_xlat1.w * u_xlat0.x + -0.00100000005;
    u_xlatb2 = u_xlat2.x<0.0;
    if(((int(u_xlatb2) * int(0xffffffffu)))!=0){discard;}
    u_xlat2.xyz = u_xlat1.xyz * u_xlat0.xxx + (-unity_FogColor.xyz);
    u_xlat0.x = u_xlat0.x * u_xlat1.w;
    SV_Target0.w = u_xlat0.x;
    u_xlat0.x = vs_TEXCOORDn0;
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    SV_Target0.xyz = u_xlat0.xxx * u_xlat2.xyz + unity_FogColor.xyz;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "FOG_LINEAR" "UNITY_UI_ALPHACLIP" "UNITY_UI_CLIP_RECT" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 534
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %12 %118 %122 %135 %156 %251 %281 %290 %405 %448 %454 %511 
                                                      OpName vs_TEXCOORDn0 "vs_TEXCOORDn0" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpDecorate %12 Location 12 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpDecorate %19 ArrayStride 19 
                                                      OpDecorate %20 ArrayStride 20 
                                                      OpDecorate %21 ArrayStride 21 
                                                      OpMemberDecorate %22 0 Offset 22 
                                                      OpMemberDecorate %22 1 Offset 22 
                                                      OpMemberDecorate %22 2 Offset 22 
                                                      OpMemberDecorate %22 3 Offset 22 
                                                      OpMemberDecorate %22 4 Offset 22 
                                                      OpMemberDecorate %22 5 Offset 22 
                                                      OpMemberDecorate %22 6 Offset 22 
                                                      OpMemberDecorate %22 7 Offset 22 
                                                      OpMemberDecorate %22 8 Offset 22 
                                                      OpMemberDecorate %22 9 Offset 22 
                                                      OpMemberDecorate %22 10 Offset 22 
                                                      OpMemberDecorate %22 11 Offset 22 
                                                      OpMemberDecorate %22 12 Offset 22 
                                                      OpMemberDecorate %22 13 Offset 22 
                                                      OpMemberDecorate %22 14 Offset 22 
                                                      OpMemberDecorate %22 15 Offset 22 
                                                      OpMemberDecorate %22 16 Offset 22 
                                                      OpMemberDecorate %22 17 Offset 22 
                                                      OpMemberDecorate %22 18 Offset 22 
                                                      OpMemberDecorate %22 19 Offset 22 
                                                      OpMemberDecorate %22 20 Offset 22 
                                                      OpMemberDecorate %22 21 Offset 22 
                                                      OpMemberDecorate %22 22 Offset 22 
                                                      OpMemberDecorate %22 23 Offset 22 
                                                      OpMemberDecorate %22 24 Offset 22 
                                                      OpMemberDecorate %22 25 Offset 22 
                                                      OpDecorate %22 Block 
                                                      OpDecorate %24 DescriptorSet 24 
                                                      OpDecorate %24 Binding 24 
                                                      OpMemberDecorate %116 0 BuiltIn 116 
                                                      OpMemberDecorate %116 1 BuiltIn 116 
                                                      OpMemberDecorate %116 2 BuiltIn 116 
                                                      OpDecorate %116 Block 
                                                      OpDecorate %122 Location 122 
                                                      OpDecorate %135 Location 135 
                                                      OpDecorate %156 Location 156 
                                                      OpDecorate vs_TEXCOORDn0 Location 251 
                                                      OpDecorate vs_TEXCOORD2 Location 281 
                                                      OpDecorate %290 Location 290 
                                                      OpDecorate %405 Location 405 
                                                      OpDecorate vs_TEXCOORD0 Location 448 
                                                      OpDecorate %454 Location 454 
                                                      OpDecorate vs_TEXCOORD1 Location 511 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 2 
                                               %8 = OpTypePointer Private %7 
                                Private f32_2* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 4 
                                              %11 = OpTypePointer Input %10 
                                 Input f32_4* %12 = OpVariable Input 
                                              %15 = OpTypeVector %6 3 
                                              %16 = OpTypeInt 32 0 
                                          u32 %17 = OpConstant 4 
                                              %18 = OpTypeArray %10 %17 
                                              %19 = OpTypeArray %10 %17 
                                              %20 = OpTypeArray %10 %17 
                                              %21 = OpTypeArray %10 %17 
                                              %22 = OpTypeStruct %15 %10 %10 %18 %19 %20 %21 %10 %10 %6 %6 %10 %6 %6 %6 %6 %6 %6 %10 %6 %6 %6 %6 %6 %6 %6 
                                              %23 = OpTypePointer Uniform %22 
Uniform struct {f32_3; f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4[4]; f32_4; f32_4; f32; f32; f32_4; f32; f32; f32; f32; f32; f32; f32_4; f32; f32; f32; f32; f32; f32; f32;}* %24 = OpVariable Uniform 
                                              %25 = OpTypeInt 32 1 
                                          i32 %26 = OpConstant 16 
                                              %27 = OpTypePointer Uniform %6 
                                          i32 %30 = OpConstant 17 
                                              %35 = OpTypePointer Private %10 
                               Private f32_4* %36 = OpVariable Private 
                                          i32 %39 = OpConstant 3 
                                          i32 %40 = OpConstant 1 
                                              %41 = OpTypePointer Uniform %10 
                                          i32 %45 = OpConstant 0 
                                          i32 %53 = OpConstant 2 
                               Private f32_4* %61 = OpVariable Private 
                                              %80 = OpTypePointer Uniform %15 
                               Private f32_4* %86 = OpVariable Private 
                                          i32 %89 = OpConstant 6 
                                         u32 %114 = OpConstant 1 
                                             %115 = OpTypeArray %6 %114 
                                             %116 = OpTypeStruct %10 %6 %115 
                                             %117 = OpTypePointer Output %116 
        Output struct {f32_4; f32; f32[1];}* %118 = OpVariable Output 
                                             %120 = OpTypePointer Output %10 
                                Input f32_4* %122 = OpVariable Input 
                                         i32 %124 = OpConstant 8 
                               Output f32_4* %135 = OpVariable Output 
                                             %137 = OpTypePointer Private %6 
                                Private f32* %138 = OpVariable Private 
                                             %153 = OpTypePointer Private %15 
                              Private f32_3* %154 = OpVariable Private 
                                             %155 = OpTypePointer Input %15 
                                Input f32_3* %156 = OpVariable Input 
                                         i32 %158 = OpConstant 4 
                                         u32 %163 = OpConstant 0 
                                         u32 %176 = OpConstant 2 
                                         i32 %194 = OpConstant 5 
                                         i32 %216 = OpConstant 22 
                                         i32 %219 = OpConstant 23 
                                Private f32* %233 = OpVariable Private 
                                         f32 %241 = OpConstant 3.674022E-40 
                                         f32 %248 = OpConstant 3.674022E-40 
                                             %250 = OpTypePointer Output %6 
                        Output f32* vs_TEXCOORDn0 = OpVariable Output 
                                         i32 %253 = OpConstant 7 
                                         u32 %257 = OpConstant 3 
                                         i32 %266 = OpConstant 19 
                                         i32 %269 = OpConstant 20 
                                         f32 %273 = OpConstant 3.674022E-40 
                                       f32_2 %274 = OpConstantComposite %273 %273 
                       Output f32_4* vs_TEXCOORD2 = OpVariable Output 
                                             %289 = OpTypePointer Input %7 
                                Input f32_2* %290 = OpVariable Input 
                                             %291 = OpTypePointer Input %6 
                                         i32 %295 = OpConstant 21 
                              Private f32_2* %300 = OpVariable Private 
                                         i32 %301 = OpConstant 25 
                                Private f32* %317 = OpVariable Private 
                                         i32 %318 = OpConstant 24 
                                             %341 = OpTypeBool 
                                             %342 = OpTypePointer Private %341 
                               Private bool* %343 = OpVariable Private 
                                             %348 = OpTypePointer Function %6 
                                         i32 %357 = OpConstant 10 
                                         i32 %360 = OpConstant 15 
                                         i32 %372 = OpConstant 12 
                                         i32 %388 = OpConstant 11 
                               Output f32_4* %405 = OpVariable Output 
                                         i32 %412 = OpConstant 18 
                                         f32 %415 = OpConstant 3.674022E-40 
                                       f32_4 %416 = OpConstantComposite %415 %415 %415 %415 
                                         f32 %419 = OpConstant 3.674022E-40 
                                       f32_4 %420 = OpConstantComposite %419 %419 %419 %419 
                                         f32 %428 = OpConstant 3.674022E-40 
                                       f32_2 %429 = OpConstantComposite %428 %428 
                       Output f32_4* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_2* %454 = OpVariable Input 
                               Private bool* %458 = OpVariable Private 
                                Private f32* %465 = OpVariable Private 
                                         i32 %466 = OpConstant 13 
                                         i32 %470 = OpConstant 14 
                                         i32 %485 = OpConstant 9 
                                         f32 %499 = OpConstant 3.674022E-40 
                                         f32 %508 = OpConstant 3.674022E-40 
                       Output f32_4* vs_TEXCOORD1 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                               Function f32* %349 = OpVariable Function 
                                        f32_4 %13 = OpLoad %12 
                                        f32_2 %14 = OpVectorShuffle %13 %13 0 1 
                                 Uniform f32* %28 = OpAccessChain %24 %26 
                                          f32 %29 = OpLoad %28 
                                 Uniform f32* %31 = OpAccessChain %24 %30 
                                          f32 %32 = OpLoad %31 
                                        f32_2 %33 = OpCompositeConstruct %29 %32 
                                        f32_2 %34 = OpFAdd %14 %33 
                                                      OpStore %9 %34 
                                        f32_2 %37 = OpLoad %9 
                                        f32_4 %38 = OpVectorShuffle %37 %37 1 1 1 1 
                               Uniform f32_4* %42 = OpAccessChain %24 %39 %40 
                                        f32_4 %43 = OpLoad %42 
                                        f32_4 %44 = OpFMul %38 %43 
                                                      OpStore %36 %44 
                               Uniform f32_4* %46 = OpAccessChain %24 %39 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_2 %48 = OpLoad %9 
                                        f32_4 %49 = OpVectorShuffle %48 %48 0 0 0 0 
                                        f32_4 %50 = OpFMul %47 %49 
                                        f32_4 %51 = OpLoad %36 
                                        f32_4 %52 = OpFAdd %50 %51 
                                                      OpStore %36 %52 
                               Uniform f32_4* %54 = OpAccessChain %24 %39 %53 
                                        f32_4 %55 = OpLoad %54 
                                        f32_4 %56 = OpLoad %12 
                                        f32_4 %57 = OpVectorShuffle %56 %56 2 2 2 2 
                                        f32_4 %58 = OpFMul %55 %57 
                                        f32_4 %59 = OpLoad %36 
                                        f32_4 %60 = OpFAdd %58 %59 
                                                      OpStore %36 %60 
                                        f32_4 %62 = OpLoad %36 
                               Uniform f32_4* %63 = OpAccessChain %24 %39 %39 
                                        f32_4 %64 = OpLoad %63 
                                        f32_4 %65 = OpFAdd %62 %64 
                                                      OpStore %61 %65 
                               Uniform f32_4* %66 = OpAccessChain %24 %39 %39 
                                        f32_4 %67 = OpLoad %66 
                                        f32_3 %68 = OpVectorShuffle %67 %67 0 1 2 
                                        f32_4 %69 = OpLoad %12 
                                        f32_3 %70 = OpVectorShuffle %69 %69 3 3 3 
                                        f32_3 %71 = OpFMul %68 %70 
                                        f32_4 %72 = OpLoad %36 
                                        f32_3 %73 = OpVectorShuffle %72 %72 0 1 2 
                                        f32_3 %74 = OpFAdd %71 %73 
                                        f32_4 %75 = OpLoad %36 
                                        f32_4 %76 = OpVectorShuffle %75 %74 4 5 6 3 
                                                      OpStore %36 %76 
                                        f32_4 %77 = OpLoad %36 
                                        f32_3 %78 = OpVectorShuffle %77 %77 0 1 2 
                                        f32_3 %79 = OpFNegate %78 
                               Uniform f32_3* %81 = OpAccessChain %24 %45 
                                        f32_3 %82 = OpLoad %81 
                                        f32_3 %83 = OpFAdd %79 %82 
                                        f32_4 %84 = OpLoad %36 
                                        f32_4 %85 = OpVectorShuffle %84 %83 4 5 6 3 
                                                      OpStore %36 %85 
                                        f32_4 %87 = OpLoad %61 
                                        f32_4 %88 = OpVectorShuffle %87 %87 1 1 1 1 
                               Uniform f32_4* %90 = OpAccessChain %24 %89 %40 
                                        f32_4 %91 = OpLoad %90 
                                        f32_4 %92 = OpFMul %88 %91 
                                                      OpStore %86 %92 
                               Uniform f32_4* %93 = OpAccessChain %24 %89 %45 
                                        f32_4 %94 = OpLoad %93 
                                        f32_4 %95 = OpLoad %61 
                                        f32_4 %96 = OpVectorShuffle %95 %95 0 0 0 0 
                                        f32_4 %97 = OpFMul %94 %96 
                                        f32_4 %98 = OpLoad %86 
                                        f32_4 %99 = OpFAdd %97 %98 
                                                      OpStore %86 %99 
                              Uniform f32_4* %100 = OpAccessChain %24 %89 %53 
                                       f32_4 %101 = OpLoad %100 
                                       f32_4 %102 = OpLoad %61 
                                       f32_4 %103 = OpVectorShuffle %102 %102 2 2 2 2 
                                       f32_4 %104 = OpFMul %101 %103 
                                       f32_4 %105 = OpLoad %86 
                                       f32_4 %106 = OpFAdd %104 %105 
                                                      OpStore %86 %106 
                              Uniform f32_4* %107 = OpAccessChain %24 %89 %39 
                                       f32_4 %108 = OpLoad %107 
                                       f32_4 %109 = OpLoad %61 
                                       f32_4 %110 = OpVectorShuffle %109 %109 3 3 3 3 
                                       f32_4 %111 = OpFMul %108 %110 
                                       f32_4 %112 = OpLoad %86 
                                       f32_4 %113 = OpFAdd %111 %112 
                                                      OpStore %61 %113 
                                       f32_4 %119 = OpLoad %61 
                               Output f32_4* %121 = OpAccessChain %118 %45 
                                                      OpStore %121 %119 
                                       f32_4 %123 = OpLoad %122 
                              Uniform f32_4* %125 = OpAccessChain %24 %124 
                                       f32_4 %126 = OpLoad %125 
                                       f32_4 %127 = OpFMul %123 %126 
                                                      OpStore %86 %127 
                                       f32_4 %128 = OpLoad %86 
                                       f32_3 %129 = OpVectorShuffle %128 %128 3 3 3 
                                       f32_4 %130 = OpLoad %86 
                                       f32_3 %131 = OpVectorShuffle %130 %130 0 1 2 
                                       f32_3 %132 = OpFMul %129 %131 
                                       f32_4 %133 = OpLoad %86 
                                       f32_4 %134 = OpVectorShuffle %133 %132 4 5 6 3 
                                                      OpStore %86 %134 
                                       f32_4 %136 = OpLoad %86 
                                                      OpStore %135 %136 
                                       f32_4 %139 = OpLoad %36 
                                       f32_3 %140 = OpVectorShuffle %139 %139 0 1 2 
                                       f32_4 %141 = OpLoad %36 
                                       f32_3 %142 = OpVectorShuffle %141 %141 0 1 2 
                                         f32 %143 = OpDot %140 %142 
                                                      OpStore %138 %143 
                                         f32 %144 = OpLoad %138 
                                         f32 %145 = OpExtInst %1 32 %144 
                                                      OpStore %138 %145 
                                         f32 %146 = OpLoad %138 
                                       f32_3 %147 = OpCompositeConstruct %146 %146 %146 
                                       f32_4 %148 = OpLoad %36 
                                       f32_3 %149 = OpVectorShuffle %148 %148 0 1 2 
                                       f32_3 %150 = OpFMul %147 %149 
                                       f32_4 %151 = OpLoad %36 
                                       f32_4 %152 = OpVectorShuffle %151 %150 4 5 6 3 
                                                      OpStore %36 %152 
                                       f32_3 %157 = OpLoad %156 
                              Uniform f32_4* %159 = OpAccessChain %24 %158 %45 
                                       f32_4 %160 = OpLoad %159 
                                       f32_3 %161 = OpVectorShuffle %160 %160 0 1 2 
                                         f32 %162 = OpDot %157 %161 
                                Private f32* %164 = OpAccessChain %154 %163 
                                                      OpStore %164 %162 
                                       f32_3 %165 = OpLoad %156 
                              Uniform f32_4* %166 = OpAccessChain %24 %158 %40 
                                       f32_4 %167 = OpLoad %166 
                                       f32_3 %168 = OpVectorShuffle %167 %167 0 1 2 
                                         f32 %169 = OpDot %165 %168 
                                Private f32* %170 = OpAccessChain %154 %114 
                                                      OpStore %170 %169 
                                       f32_3 %171 = OpLoad %156 
                              Uniform f32_4* %172 = OpAccessChain %24 %158 %53 
                                       f32_4 %173 = OpLoad %172 
                                       f32_3 %174 = OpVectorShuffle %173 %173 0 1 2 
                                         f32 %175 = OpDot %171 %174 
                                Private f32* %177 = OpAccessChain %154 %176 
                                                      OpStore %177 %175 
                                       f32_3 %178 = OpLoad %154 
                                       f32_3 %179 = OpLoad %154 
                                         f32 %180 = OpDot %178 %179 
                                                      OpStore %138 %180 
                                         f32 %181 = OpLoad %138 
                                         f32 %182 = OpExtInst %1 32 %181 
                                                      OpStore %138 %182 
                                         f32 %183 = OpLoad %138 
                                       f32_3 %184 = OpCompositeConstruct %183 %183 %183 
                                       f32_3 %185 = OpLoad %154 
                                       f32_3 %186 = OpFMul %184 %185 
                                                      OpStore %154 %186 
                                       f32_3 %187 = OpLoad %154 
                                       f32_4 %188 = OpLoad %36 
                                       f32_3 %189 = OpVectorShuffle %188 %188 0 1 2 
                                         f32 %190 = OpDot %187 %189 
                                                      OpStore %138 %190 
                              Uniform f32_4* %191 = OpAccessChain %24 %53 
                                       f32_4 %192 = OpLoad %191 
                                       f32_2 %193 = OpVectorShuffle %192 %192 1 1 
                              Uniform f32_4* %195 = OpAccessChain %24 %194 %40 
                                       f32_4 %196 = OpLoad %195 
                                       f32_2 %197 = OpVectorShuffle %196 %196 0 1 
                                       f32_2 %198 = OpFMul %193 %197 
                                       f32_4 %199 = OpLoad %36 
                                       f32_4 %200 = OpVectorShuffle %199 %198 4 5 2 3 
                                                      OpStore %36 %200 
                              Uniform f32_4* %201 = OpAccessChain %24 %194 %45 
                                       f32_4 %202 = OpLoad %201 
                                       f32_2 %203 = OpVectorShuffle %202 %202 0 1 
                              Uniform f32_4* %204 = OpAccessChain %24 %53 
                                       f32_4 %205 = OpLoad %204 
                                       f32_2 %206 = OpVectorShuffle %205 %205 0 0 
                                       f32_2 %207 = OpFMul %203 %206 
                                       f32_4 %208 = OpLoad %36 
                                       f32_2 %209 = OpVectorShuffle %208 %208 0 1 
                                       f32_2 %210 = OpFAdd %207 %209 
                                       f32_4 %211 = OpLoad %36 
                                       f32_4 %212 = OpVectorShuffle %211 %210 4 5 2 3 
                                                      OpStore %36 %212 
                                       f32_4 %213 = OpLoad %36 
                                       f32_2 %214 = OpVectorShuffle %213 %213 0 1 
                                       f32_2 %215 = OpExtInst %1 4 %214 
                                Uniform f32* %217 = OpAccessChain %24 %216 
                                         f32 %218 = OpLoad %217 
                                Uniform f32* %220 = OpAccessChain %24 %219 
                                         f32 %221 = OpLoad %220 
                                       f32_2 %222 = OpCompositeConstruct %218 %221 
                                       f32_2 %223 = OpFMul %215 %222 
                                       f32_4 %224 = OpLoad %36 
                                       f32_4 %225 = OpVectorShuffle %224 %223 4 5 2 3 
                                                      OpStore %36 %225 
                                       f32_4 %226 = OpLoad %61 
                                       f32_2 %227 = OpVectorShuffle %226 %226 3 3 
                                       f32_4 %228 = OpLoad %36 
                                       f32_2 %229 = OpVectorShuffle %228 %228 0 1 
                                       f32_2 %230 = OpFDiv %227 %229 
                                       f32_4 %231 = OpLoad %36 
                                       f32_4 %232 = OpVectorShuffle %231 %230 4 5 2 3 
                                                      OpStore %36 %232 
                                Private f32* %234 = OpAccessChain %61 %176 
                                         f32 %235 = OpLoad %234 
                                Uniform f32* %236 = OpAccessChain %24 %40 %114 
                                         f32 %237 = OpLoad %236 
                                         f32 %238 = OpFDiv %235 %237 
                                                      OpStore %233 %238 
                                         f32 %239 = OpLoad %233 
                                         f32 %240 = OpFNegate %239 
                                         f32 %242 = OpFAdd %240 %241 
                                                      OpStore %233 %242 
                                         f32 %243 = OpLoad %233 
                                Uniform f32* %244 = OpAccessChain %24 %40 %176 
                                         f32 %245 = OpLoad %244 
                                         f32 %246 = OpFMul %243 %245 
                                                      OpStore %233 %246 
                                         f32 %247 = OpLoad %233 
                                         f32 %249 = OpExtInst %1 40 %247 %248 
                                                      OpStore %233 %249 
                                         f32 %252 = OpLoad %233 
                                Uniform f32* %254 = OpAccessChain %24 %253 %176 
                                         f32 %255 = OpLoad %254 
                                         f32 %256 = OpFMul %252 %255 
                                Uniform f32* %258 = OpAccessChain %24 %253 %257 
                                         f32 %259 = OpLoad %258 
                                         f32 %260 = OpFAdd %256 %259 
                                                      OpStore vs_TEXCOORDn0 %260 
                                       f32_4 %261 = OpLoad %36 
                                       f32_2 %262 = OpVectorShuffle %261 %261 0 1 
                                       f32_4 %263 = OpLoad %36 
                                       f32_2 %264 = OpVectorShuffle %263 %263 0 1 
                                         f32 %265 = OpDot %262 %264 
                                                      OpStore %233 %265 
                                Uniform f32* %267 = OpAccessChain %24 %266 
                                         f32 %268 = OpLoad %267 
                                Uniform f32* %270 = OpAccessChain %24 %269 
                                         f32 %271 = OpLoad %270 
                                       f32_2 %272 = OpCompositeConstruct %268 %271 
                                       f32_2 %275 = OpFMul %272 %274 
                                       f32_4 %276 = OpLoad %36 
                                       f32_2 %277 = OpVectorShuffle %276 %276 0 1 
                                       f32_2 %278 = OpFAdd %275 %277 
                                       f32_4 %279 = OpLoad %36 
                                       f32_4 %280 = OpVectorShuffle %279 %278 4 5 2 3 
                                                      OpStore %36 %280 
                                       f32_4 %282 = OpLoad %36 
                                       f32_2 %283 = OpVectorShuffle %282 %282 0 1 
                                       f32_2 %284 = OpFDiv %274 %283 
                                       f32_4 %285 = OpLoad vs_TEXCOORD2 
                                       f32_4 %286 = OpVectorShuffle %285 %284 0 1 4 5 
                                                      OpStore vs_TEXCOORD2 %286 
                                         f32 %287 = OpLoad %233 
                                         f32 %288 = OpExtInst %1 32 %287 
                                                      OpStore %233 %288 
                                  Input f32* %292 = OpAccessChain %290 %114 
                                         f32 %293 = OpLoad %292 
                                         f32 %294 = OpExtInst %1 4 %293 
                                Uniform f32* %296 = OpAccessChain %24 %295 
                                         f32 %297 = OpLoad %296 
                                         f32 %298 = OpFMul %294 %297 
                                Private f32* %299 = OpAccessChain %36 %163 
                                                      OpStore %299 %298 
                                Uniform f32* %302 = OpAccessChain %24 %301 
                                         f32 %303 = OpLoad %302 
                                         f32 %304 = OpFAdd %303 %241 
                                Private f32* %305 = OpAccessChain %300 %163 
                                                      OpStore %305 %304 
                                Private f32* %306 = OpAccessChain %300 %163 
                                         f32 %307 = OpLoad %306 
                                Private f32* %308 = OpAccessChain %36 %163 
                                         f32 %309 = OpLoad %308 
                                         f32 %310 = OpFMul %307 %309 
                                Private f32* %311 = OpAccessChain %36 %163 
                                                      OpStore %311 %310 
                                         f32 %312 = OpLoad %233 
                                Private f32* %313 = OpAccessChain %36 %163 
                                         f32 %314 = OpLoad %313 
                                         f32 %315 = OpFMul %312 %314 
                                Private f32* %316 = OpAccessChain %300 %163 
                                                      OpStore %316 %315 
                                Uniform f32* %319 = OpAccessChain %24 %318 
                                         f32 %320 = OpLoad %319 
                                         f32 %321 = OpFNegate %320 
                                         f32 %322 = OpFAdd %321 %241 
                                                      OpStore %317 %322 
                                         f32 %323 = OpLoad %317 
                                Private f32* %324 = OpAccessChain %300 %163 
                                         f32 %325 = OpLoad %324 
                                         f32 %326 = OpExtInst %1 4 %325 
                                         f32 %327 = OpFMul %323 %326 
                                                      OpStore %317 %327 
                                         f32 %328 = OpLoad %233 
                                Private f32* %329 = OpAccessChain %36 %163 
                                         f32 %330 = OpLoad %329 
                                         f32 %331 = OpFMul %328 %330 
                                         f32 %332 = OpLoad %317 
                                         f32 %333 = OpFNegate %332 
                                         f32 %334 = OpFAdd %331 %333 
                                                      OpStore %233 %334 
                                         f32 %335 = OpLoad %138 
                                         f32 %336 = OpExtInst %1 4 %335 
                                         f32 %337 = OpLoad %233 
                                         f32 %338 = OpFMul %336 %337 
                                         f32 %339 = OpLoad %317 
                                         f32 %340 = OpFAdd %338 %339 
                                                      OpStore %138 %340 
                                Uniform f32* %344 = OpAccessChain %24 %194 %39 %257 
                                         f32 %345 = OpLoad %344 
                                        bool %346 = OpFOrdEqual %345 %248 
                                                      OpStore %343 %346 
                                        bool %347 = OpLoad %343 
                                                      OpSelectionMerge %351 None 
                                                      OpBranchConditional %347 %350 %353 
                                             %350 = OpLabel 
                                         f32 %352 = OpLoad %138 
                                                      OpStore %349 %352 
                                                      OpBranch %351 
                                             %353 = OpLabel 
                                Private f32* %354 = OpAccessChain %300 %163 
                                         f32 %355 = OpLoad %354 
                                                      OpStore %349 %355 
                                                      OpBranch %351 
                                             %351 = OpLabel 
                                         f32 %356 = OpLoad %349 
                                                      OpStore %138 %356 
                                Uniform f32* %358 = OpAccessChain %24 %357 
                                         f32 %359 = OpLoad %358 
                                Uniform f32* %361 = OpAccessChain %24 %360 
                                         f32 %362 = OpLoad %361 
                                         f32 %363 = OpFMul %359 %362 
                                                      OpStore %233 %363 
                                         f32 %364 = OpLoad %233 
                                         f32 %365 = OpLoad %138 
                                         f32 %366 = OpFMul %364 %365 
                                         f32 %367 = OpFAdd %366 %241 
                                                      OpStore %233 %367 
                                         f32 %368 = OpLoad %138 
                                         f32 %369 = OpLoad %233 
                                         f32 %370 = OpFDiv %368 %369 
                                Private f32* %371 = OpAccessChain %36 %163 
                                                      OpStore %371 %370 
                                Uniform f32* %373 = OpAccessChain %24 %372 
                                         f32 %374 = OpLoad %373 
                                Uniform f32* %375 = OpAccessChain %24 %360 
                                         f32 %376 = OpLoad %375 
                                         f32 %377 = OpFMul %374 %376 
                                                      OpStore %138 %377 
                                Private f32* %378 = OpAccessChain %36 %163 
                                         f32 %379 = OpLoad %378 
                                         f32 %380 = OpLoad %138 
                                         f32 %381 = OpFMul %379 %380 
                                                      OpStore %138 %381 
                                         f32 %382 = OpLoad %138 
                                         f32 %383 = OpExtInst %1 37 %382 %241 
                                                      OpStore %233 %383 
                                         f32 %384 = OpLoad %233 
                                         f32 %385 = OpExtInst %1 31 %384 
                                                      OpStore %233 %385 
                                  Input f32* %386 = OpAccessChain %122 %257 
                                         f32 %387 = OpLoad %386 
                                Uniform f32* %389 = OpAccessChain %24 %388 %257 
                                         f32 %390 = OpLoad %389 
                                         f32 %391 = OpFMul %387 %390 
                                Private f32* %392 = OpAccessChain %61 %257 
                                                      OpStore %392 %391 
                                       f32_4 %393 = OpLoad %61 
                                       f32_3 %394 = OpVectorShuffle %393 %393 3 3 3 
                              Uniform f32_4* %395 = OpAccessChain %24 %388 
                                       f32_4 %396 = OpLoad %395 
                                       f32_3 %397 = OpVectorShuffle %396 %396 0 1 2 
                                       f32_3 %398 = OpFMul %394 %397 
                                       f32_4 %399 = OpLoad %61 
                                       f32_4 %400 = OpVectorShuffle %399 %398 4 5 6 3 
                                                      OpStore %61 %400 
                                       f32_4 %401 = OpLoad %86 
                                       f32_4 %402 = OpFNegate %401 
                                       f32_4 %403 = OpLoad %61 
                                       f32_4 %404 = OpFAdd %402 %403 
                                                      OpStore %61 %404 
                                         f32 %406 = OpLoad %233 
                                       f32_4 %407 = OpCompositeConstruct %406 %406 %406 %406 
                                       f32_4 %408 = OpLoad %61 
                                       f32_4 %409 = OpFMul %407 %408 
                                       f32_4 %410 = OpLoad %86 
                                       f32_4 %411 = OpFAdd %409 %410 
                                                      OpStore %405 %411 
                              Uniform f32_4* %413 = OpAccessChain %24 %412 
                                       f32_4 %414 = OpLoad %413 
                                       f32_4 %417 = OpExtInst %1 40 %414 %416 
                                                      OpStore %61 %417 
                                       f32_4 %418 = OpLoad %61 
                                       f32_4 %421 = OpExtInst %1 37 %418 %420 
                                                      OpStore %61 %421 
                                       f32_2 %422 = OpLoad %9 
                                       f32_4 %423 = OpLoad %61 
                                       f32_2 %424 = OpVectorShuffle %423 %423 0 1 
                                       f32_2 %425 = OpFNegate %424 
                                       f32_2 %426 = OpFAdd %422 %425 
                                                      OpStore %300 %426 
                                       f32_2 %427 = OpLoad %9 
                                       f32_2 %430 = OpFMul %427 %429 
                                       f32_4 %431 = OpLoad %61 
                                       f32_2 %432 = OpVectorShuffle %431 %431 0 1 
                                       f32_2 %433 = OpFNegate %432 
                                       f32_2 %434 = OpFAdd %430 %433 
                                                      OpStore %9 %434 
                                       f32_4 %435 = OpLoad %61 
                                       f32_2 %436 = OpVectorShuffle %435 %435 2 3 
                                       f32_2 %437 = OpFNegate %436 
                                       f32_2 %438 = OpLoad %9 
                                       f32_2 %439 = OpFAdd %437 %438 
                                       f32_4 %440 = OpLoad vs_TEXCOORD2 
                                       f32_4 %441 = OpVectorShuffle %440 %439 4 5 2 3 
                                                      OpStore vs_TEXCOORD2 %441 
                                       f32_4 %442 = OpLoad %61 
                                       f32_2 %443 = OpVectorShuffle %442 %442 0 1 
                                       f32_2 %444 = OpFNegate %443 
                                       f32_4 %445 = OpLoad %61 
                                       f32_2 %446 = OpVectorShuffle %445 %445 2 3 
                                       f32_2 %447 = OpFAdd %444 %446 
                                                      OpStore %9 %447 
                                       f32_2 %449 = OpLoad %300 
                                       f32_2 %450 = OpLoad %9 
                                       f32_2 %451 = OpFDiv %449 %450 
                                       f32_4 %452 = OpLoad vs_TEXCOORD0 
                                       f32_4 %453 = OpVectorShuffle %452 %451 0 1 4 5 
                                                      OpStore vs_TEXCOORD0 %453 
                                       f32_2 %455 = OpLoad %454 
                                       f32_4 %456 = OpLoad vs_TEXCOORD0 
                                       f32_4 %457 = OpVectorShuffle %456 %455 4 5 2 3 
                                                      OpStore vs_TEXCOORD0 %457 
                                  Input f32* %459 = OpAccessChain %290 %114 
                                         f32 %460 = OpLoad %459 
                                        bool %461 = OpFOrdGreaterThanEqual %248 %460 
                                                      OpStore %458 %461 
                                        bool %462 = OpLoad %458 
                                         f32 %463 = OpSelect %462 %241 %248 
                                Private f32* %464 = OpAccessChain %9 %163 
                                                      OpStore %464 %463 
                                Uniform f32* %467 = OpAccessChain %24 %466 
                                         f32 %468 = OpLoad %467 
                                         f32 %469 = OpFNegate %468 
                                Uniform f32* %471 = OpAccessChain %24 %470 
                                         f32 %472 = OpLoad %471 
                                         f32 %473 = OpFAdd %469 %472 
                                                      OpStore %465 %473 
                                Private f32* %474 = OpAccessChain %9 %163 
                                         f32 %475 = OpLoad %474 
                                         f32 %476 = OpLoad %465 
                                         f32 %477 = OpFMul %475 %476 
                                Uniform f32* %478 = OpAccessChain %24 %466 
                                         f32 %479 = OpLoad %478 
                                         f32 %480 = OpFAdd %477 %479 
                                Private f32* %481 = OpAccessChain %9 %163 
                                                      OpStore %481 %480 
                                Private f32* %482 = OpAccessChain %9 %163 
                                         f32 %483 = OpLoad %482 
                                         f32 %484 = OpFMul %483 %273 
                                Uniform f32* %486 = OpAccessChain %24 %485 
                                         f32 %487 = OpLoad %486 
                                         f32 %488 = OpFAdd %484 %487 
                                Private f32* %489 = OpAccessChain %9 %163 
                                                      OpStore %489 %488 
                                Private f32* %490 = OpAccessChain %9 %163 
                                         f32 %491 = OpLoad %490 
                                Uniform f32* %492 = OpAccessChain %24 %360 
                                         f32 %493 = OpLoad %492 
                                         f32 %494 = OpFMul %491 %493 
                                Private f32* %495 = OpAccessChain %9 %163 
                                                      OpStore %495 %494 
                                Private f32* %496 = OpAccessChain %9 %163 
                                         f32 %497 = OpLoad %496 
                                         f32 %498 = OpFNegate %497 
                                         f32 %500 = OpFMul %498 %499 
                                         f32 %501 = OpFAdd %500 %499 
                                Private f32* %502 = OpAccessChain %9 %163 
                                                      OpStore %502 %501 
                                Private f32* %503 = OpAccessChain %9 %163 
                                         f32 %504 = OpLoad %503 
                                Private f32* %505 = OpAccessChain %36 %163 
                                         f32 %506 = OpLoad %505 
                                         f32 %507 = OpFMul %504 %506 
                                         f32 %509 = OpFAdd %507 %508 
                                Private f32* %510 = OpAccessChain %36 %257 
                                                      OpStore %510 %509 
                                       f32_4 %512 = OpLoad %36 
                                       f32_2 %513 = OpVectorShuffle %512 %512 0 3 
                                       f32_4 %514 = OpLoad vs_TEXCOORD1 
                                       f32_4 %515 = OpVectorShuffle %514 %513 4 1 2 5 
                                                      OpStore vs_TEXCOORD1 %515 
                                         f32 %516 = OpLoad %138 
                                         f32 %517 = OpFNegate %516 
                                         f32 %518 = OpFMul %517 %499 
                                Private f32* %519 = OpAccessChain %36 %257 
                                         f32 %520 = OpLoad %519 
                                         f32 %521 = OpFAdd %518 %520 
                                 Output f32* %522 = OpAccessChain vs_TEXCOORD1 %114 
                                                      OpStore %522 %521 
                                         f32 %523 = OpLoad %138 
                                         f32 %524 = OpFMul %523 %499 
                                Private f32* %525 = OpAccessChain %36 %257 
                                         f32 %526 = OpLoad %525 
                                         f32 %527 = OpFAdd %524 %526 
                                 Output f32* %528 = OpAccessChain vs_TEXCOORD1 %176 
                                                      OpStore %528 %527 
                                 Output f32* %529 = OpAccessChain %118 %45 %114 
                                         f32 %530 = OpLoad %529 
                                         f32 %531 = OpFNegate %530 
                                 Output f32* %532 = OpAccessChain %118 %45 %114 
                                                      OpStore %532 %531 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 159
; Schema: 0
                                             OpCapability Shader 
                                      %1 = OpExtInstImport "GLSL.std.450" 
                                             OpMemoryModel Logical GLSL450 
                                             OpEntryPoint Fragment %4 "main" %27 %66 %75 %93 %136 %141 
                                             OpExecutionMode %4 OriginUpperLeft 
                                             OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                             OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                             OpName vs_TEXCOORDn0 "vs_TEXCOORDn0" 
                                             OpMemberDecorate %11 0 Offset 11 
                                             OpMemberDecorate %11 1 Offset 11 
                                             OpDecorate %11 Block 
                                             OpDecorate %13 DescriptorSet 13 
                                             OpDecorate %13 Binding 13 
                                             OpDecorate vs_TEXCOORD2 Location 27 
                                             OpDecorate %58 DescriptorSet 58 
                                             OpDecorate %58 Binding 58 
                                             OpDecorate %62 DescriptorSet 62 
                                             OpDecorate %62 Binding 62 
                                             OpDecorate vs_TEXCOORD0 Location 66 
                                             OpDecorate vs_TEXCOORD1 Location 75 
                                             OpDecorate %93 Location 93 
                                             OpDecorate %136 Location 136 
                                             OpDecorate vs_TEXCOORDn0 Location 141 
                                      %2 = OpTypeVoid 
                                      %3 = OpTypeFunction %2 
                                      %6 = OpTypeFloat 32 
                                      %7 = OpTypeVector %6 2 
                                      %8 = OpTypePointer Private %7 
                       Private f32_2* %9 = OpVariable Private 
                                     %10 = OpTypeVector %6 4 
                                     %11 = OpTypeStruct %10 %10 
                                     %12 = OpTypePointer Uniform %11 
     Uniform struct {f32_4; f32_4;}* %13 = OpVariable Uniform 
                                     %14 = OpTypeInt 32 1 
                                 i32 %15 = OpConstant 1 
                                     %16 = OpTypePointer Uniform %10 
                                     %26 = OpTypePointer Input %10 
               Input f32_4* vs_TEXCOORD2 = OpVariable Input 
                                 f32 %38 = OpConstant 3.674022E-40 
                                 f32 %39 = OpConstant 3.674022E-40 
                                     %43 = OpTypeInt 32 0 
                                 u32 %44 = OpConstant 1 
                                     %45 = OpTypePointer Private %6 
                                 u32 %48 = OpConstant 0 
                                     %53 = OpTypeVector %6 3 
                                     %54 = OpTypePointer Private %53 
                      Private f32_3* %55 = OpVariable Private 
                                     %56 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                     %57 = OpTypePointer UniformConstant %56 
UniformConstant read_only Texture2D* %58 = OpVariable UniformConstant 
                                     %60 = OpTypeSampler 
                                     %61 = OpTypePointer UniformConstant %60 
            UniformConstant sampler* %62 = OpVariable UniformConstant 
                                     %64 = OpTypeSampledImage %56 
               Input f32_4* vs_TEXCOORD0 = OpVariable Input 
                                 u32 %70 = OpConstant 3 
               Input f32_4* vs_TEXCOORD1 = OpVariable Input 
                                     %76 = OpTypePointer Input %6 
                                     %89 = OpTypePointer Private %10 
                      Private f32_4* %90 = OpVariable Private 
                        Input f32_4* %93 = OpVariable Input 
                                f32 %101 = OpConstant 3.674022E-40 
                                    %104 = OpTypeBool 
                                    %105 = OpTypePointer Private %104 
                      Private bool* %106 = OpVariable Private 
                                i32 %111 = OpConstant 0 
                                i32 %113 = OpConstant -1 
                                    %135 = OpTypePointer Output %10 
                      Output f32_4* %136 = OpVariable Output 
                                    %139 = OpTypePointer Output %6 
                Input f32* vs_TEXCOORDn0 = OpVariable Input 
                                 void %4 = OpFunction None %3 
                                      %5 = OpLabel 
                      Uniform f32_4* %17 = OpAccessChain %13 %15 
                               f32_4 %18 = OpLoad %17 
                               f32_2 %19 = OpVectorShuffle %18 %18 0 1 
                               f32_2 %20 = OpFNegate %19 
                      Uniform f32_4* %21 = OpAccessChain %13 %15 
                               f32_4 %22 = OpLoad %21 
                               f32_2 %23 = OpVectorShuffle %22 %22 2 3 
                               f32_2 %24 = OpFAdd %20 %23 
                                             OpStore %9 %24 
                               f32_2 %25 = OpLoad %9 
                               f32_4 %28 = OpLoad vs_TEXCOORD2 
                               f32_2 %29 = OpVectorShuffle %28 %28 0 1 
                               f32_2 %30 = OpExtInst %1 4 %29 
                               f32_2 %31 = OpFNegate %30 
                               f32_2 %32 = OpFAdd %25 %31 
                                             OpStore %9 %32 
                               f32_2 %33 = OpLoad %9 
                               f32_4 %34 = OpLoad vs_TEXCOORD2 
                               f32_2 %35 = OpVectorShuffle %34 %34 2 3 
                               f32_2 %36 = OpFMul %33 %35 
                                             OpStore %9 %36 
                               f32_2 %37 = OpLoad %9 
                               f32_2 %40 = OpCompositeConstruct %38 %38 
                               f32_2 %41 = OpCompositeConstruct %39 %39 
                               f32_2 %42 = OpExtInst %1 43 %37 %40 %41 
                                             OpStore %9 %42 
                        Private f32* %46 = OpAccessChain %9 %44 
                                 f32 %47 = OpLoad %46 
                        Private f32* %49 = OpAccessChain %9 %48 
                                 f32 %50 = OpLoad %49 
                                 f32 %51 = OpFMul %47 %50 
                        Private f32* %52 = OpAccessChain %9 %48 
                                             OpStore %52 %51 
                 read_only Texture2D %59 = OpLoad %58 
                             sampler %63 = OpLoad %62 
          read_only Texture2DSampled %65 = OpSampledImage %59 %63 
                               f32_4 %67 = OpLoad vs_TEXCOORD0 
                               f32_2 %68 = OpVectorShuffle %67 %67 0 1 
                               f32_4 %69 = OpImageSampleImplicitLod %65 %68 
                                 f32 %71 = OpCompositeExtract %69 3 
                        Private f32* %72 = OpAccessChain %55 %48 
                                             OpStore %72 %71 
                        Private f32* %73 = OpAccessChain %55 %48 
                                 f32 %74 = OpLoad %73 
                          Input f32* %77 = OpAccessChain vs_TEXCOORD1 %48 
                                 f32 %78 = OpLoad %77 
                                 f32 %79 = OpFMul %74 %78 
                          Input f32* %80 = OpAccessChain vs_TEXCOORD1 %70 
                                 f32 %81 = OpLoad %80 
                                 f32 %82 = OpFNegate %81 
                                 f32 %83 = OpFAdd %79 %82 
                        Private f32* %84 = OpAccessChain %55 %48 
                                             OpStore %84 %83 
                        Private f32* %85 = OpAccessChain %55 %48 
                                 f32 %86 = OpLoad %85 
                                 f32 %87 = OpExtInst %1 43 %86 %38 %39 
                        Private f32* %88 = OpAccessChain %55 %48 
                                             OpStore %88 %87 
                               f32_3 %91 = OpLoad %55 
                               f32_4 %92 = OpVectorShuffle %91 %91 0 0 0 0 
                               f32_4 %94 = OpLoad %93 
                               f32_4 %95 = OpFMul %92 %94 
                                             OpStore %90 %95 
                        Private f32* %96 = OpAccessChain %90 %70 
                                 f32 %97 = OpLoad %96 
                        Private f32* %98 = OpAccessChain %9 %48 
                                 f32 %99 = OpLoad %98 
                                f32 %100 = OpFMul %97 %99 
                                f32 %102 = OpFAdd %100 %101 
                       Private f32* %103 = OpAccessChain %55 %48 
                                             OpStore %103 %102 
                       Private f32* %107 = OpAccessChain %55 %48 
                                f32 %108 = OpLoad %107 
                               bool %109 = OpFOrdLessThan %108 %38 
                                             OpStore %106 %109 
                               bool %110 = OpLoad %106 
                                i32 %112 = OpSelect %110 %15 %111 
                                i32 %114 = OpIMul %112 %113 
                               bool %115 = OpINotEqual %114 %111 
                                             OpSelectionMerge %117 None 
                                             OpBranchConditional %115 %116 %117 
                                    %116 = OpLabel 
                                             OpKill
                                    %117 = OpLabel 
                              f32_4 %119 = OpLoad %90 
                              f32_3 %120 = OpVectorShuffle %119 %119 0 1 2 
                              f32_2 %121 = OpLoad %9 
                              f32_3 %122 = OpVectorShuffle %121 %121 0 0 0 
                              f32_3 %123 = OpFMul %120 %122 
                     Uniform f32_4* %124 = OpAccessChain %13 %111 
                              f32_4 %125 = OpLoad %124 
                              f32_3 %126 = OpVectorShuffle %125 %125 0 1 2 
                              f32_3 %127 = OpFNegate %126 
                              f32_3 %128 = OpFAdd %123 %127 
                                             OpStore %55 %128 
                       Private f32* %129 = OpAccessChain %9 %48 
                                f32 %130 = OpLoad %129 
                       Private f32* %131 = OpAccessChain %90 %70 
                                f32 %132 = OpLoad %131 
                                f32 %133 = OpFMul %130 %132 
                       Private f32* %134 = OpAccessChain %9 %48 
                                             OpStore %134 %133 
                       Private f32* %137 = OpAccessChain %9 %48 
                                f32 %138 = OpLoad %137 
                        Output f32* %140 = OpAccessChain %136 %70 
                                             OpStore %140 %138 
                                f32 %142 = OpLoad vs_TEXCOORDn0 
                       Private f32* %143 = OpAccessChain %9 %48 
                                             OpStore %143 %142 
                       Private f32* %144 = OpAccessChain %9 %48 
                                f32 %145 = OpLoad %144 
                                f32 %146 = OpExtInst %1 43 %145 %38 %39 
                       Private f32* %147 = OpAccessChain %9 %48 
                                             OpStore %147 %146 
                              f32_2 %148 = OpLoad %9 
                              f32_3 %149 = OpVectorShuffle %148 %148 0 0 0 
                              f32_3 %150 = OpLoad %55 
                              f32_3 %151 = OpFMul %149 %150 
                     Uniform f32_4* %152 = OpAccessChain %13 %111 
                              f32_4 %153 = OpLoad %152 
                              f32_3 %154 = OpVectorShuffle %153 %153 0 1 2 
                              f32_3 %155 = OpFAdd %151 %154 
                              f32_4 %156 = OpLoad %136 
                              f32_4 %157 = OpVectorShuffle %156 %155 4 5 6 3 
                                             OpStore %136 %157 
                                             OpReturn
                                             OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "FOG_LINEAR" "OUTLINE_ON" "UNITY_UI_ALPHACLIP" "UNITY_UI_CLIP_RECT" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "FOG_LINEAR" "OUTLINE_ON" "UNITY_UI_ALPHACLIP" "UNITY_UI_CLIP_RECT" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	vec4 _FaceColor;
uniform 	float _FaceDilate;
uniform 	float _OutlineSoftness;
uniform 	vec4 _OutlineColor;
uniform 	float _OutlineWidth;
uniform 	float _WeightNormal;
uniform 	float _WeightBold;
uniform 	float _ScaleRatioA;
uniform 	float _VertexOffsetX;
uniform 	float _VertexOffsetY;
uniform 	vec4 _ClipRect;
uniform 	float _MaskSoftnessX;
uniform 	float _MaskSoftnessY;
uniform 	float _GradientScale;
uniform 	float _ScaleX;
uniform 	float _ScaleY;
uniform 	float _PerspectiveFilter;
uniform 	float _Sharpness;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_COLOR0;
in  vec2 in_TEXCOORD0;
in  vec2 in_TEXCOORD1;
out vec4 vs_COLOR0;
out vec4 vs_COLOR1;
out vec4 vs_TEXCOORD0;
out vec4 vs_TEXCOORD1;
out vec4 vs_TEXCOORD2;
out float vs_TEXCOORDn0;
vec2 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
vec3 u_xlat5;
float u_xlat6;
vec2 u_xlat7;
float u_xlat12;
float u_xlat13;
float u_xlat18;
bool u_xlatb18;
void main()
{
    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
    gl_Position = u_xlat2;
    u_xlat3 = in_COLOR0 * _FaceColor;
    u_xlat3.xyz = u_xlat3.www * u_xlat3.xyz;
    vs_COLOR0 = u_xlat3;
    u_xlat4.w = in_COLOR0.w * _OutlineColor.w;
    u_xlat4.xyz = u_xlat4.www * _OutlineColor.xyz;
    u_xlat4 = (-u_xlat3) + u_xlat4;
    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
    u_xlat5.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat5.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat5.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat5.xyz = vec3(u_xlat12) * u_xlat5.xyz;
    u_xlat12 = dot(u_xlat5.xyz, u_xlat1.xyz);
    u_xlat1.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;
    u_xlat1.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat1.xy;
    u_xlat1.xy = abs(u_xlat1.xy) * vec2(_ScaleX, _ScaleY);
    u_xlat1.xy = u_xlat2.ww / u_xlat1.xy;
    vs_TEXCOORDn0 = u_xlat2.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat18 = dot(u_xlat1.xy, u_xlat1.xy);
    u_xlat1.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) * vec2(0.25, 0.25) + u_xlat1.xy;
    vs_TEXCOORD2.zw = vec2(0.25, 0.25) / u_xlat1.xy;
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.x = abs(in_TEXCOORD1.y) * _GradientScale;
    u_xlat7.x = _Sharpness + 1.0;
    u_xlat1.x = u_xlat7.x * u_xlat1.x;
    u_xlat7.x = u_xlat18 * u_xlat1.x;
    u_xlat13 = (-_PerspectiveFilter) + 1.0;
    u_xlat13 = u_xlat13 * abs(u_xlat7.x);
    u_xlat18 = u_xlat18 * u_xlat1.x + (-u_xlat13);
    u_xlat12 = abs(u_xlat12) * u_xlat18 + u_xlat13;
    u_xlatb18 = hlslcc_mtx4x4glstate_matrix_projection[3].w==0.0;
    u_xlat12 = (u_xlatb18) ? u_xlat12 : u_xlat7.x;
    u_xlat18 = _OutlineSoftness * _ScaleRatioA;
    u_xlat18 = u_xlat18 * u_xlat12 + 1.0;
    u_xlat1.x = u_xlat12 / u_xlat18;
    u_xlat12 = _OutlineWidth * _ScaleRatioA;
    u_xlat12 = u_xlat12 * 0.5;
    u_xlat18 = u_xlat1.x * u_xlat12;
    u_xlat18 = u_xlat18 + u_xlat18;
    u_xlat18 = min(u_xlat18, 1.0);
    u_xlat18 = sqrt(u_xlat18);
    vs_COLOR1 = vec4(u_xlat18) * u_xlat4 + u_xlat3;
    u_xlat2 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));
    u_xlat2 = min(u_xlat2, vec4(2e+10, 2e+10, 2e+10, 2e+10));
    u_xlat7.xy = u_xlat0.xy + (-u_xlat2.xy);
    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + (-u_xlat2.xy);
    vs_TEXCOORD2.xy = (-u_xlat2.zw) + u_xlat0.xy;
    u_xlat0.xy = (-u_xlat2.xy) + u_xlat2.zw;
    vs_TEXCOORD0.zw = u_xlat7.xy / u_xlat0.xy;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlatb0 = 0.0>=in_TEXCOORD1.y;
    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);
    u_xlat6 = (-_WeightNormal) + _WeightBold;
    u_xlat0.x = u_xlat0.x * u_xlat6 + _WeightNormal;
    u_xlat0.x = u_xlat0.x * 0.25 + _FaceDilate;
    u_xlat0.x = u_xlat0.x * _ScaleRatioA;
    u_xlat0.x = (-u_xlat0.x) * 0.5 + 0.5;
    u_xlat1.w = u_xlat0.x * u_xlat1.x + -0.5;
    vs_TEXCOORD1.y = (-u_xlat12) * u_xlat1.x + u_xlat1.w;
    vs_TEXCOORD1.z = u_xlat12 * u_xlat1.x + u_xlat1.w;
    vs_TEXCOORD1.xw = u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 unity_FogColor;
uniform 	vec4 _ClipRect;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
in  vec4 vs_COLOR0;
in  vec4 vs_COLOR1;
in  vec4 vs_TEXCOORD0;
in  vec4 vs_TEXCOORD1;
in  vec4 vs_TEXCOORD2;
in  float vs_TEXCOORDn0;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat3;
bool u_xlatb3;
float u_xlat6;
void main()
{
    u_xlat0 = vs_COLOR0 + (-vs_COLOR1);
    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1.xy = u_xlat1.ww * vs_TEXCOORD1.xx + (-vs_TEXCOORD1.zy);
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
    u_xlat0 = u_xlat1.xxxx * u_xlat0 + vs_COLOR1;
    u_xlat0 = u_xlat1.yyyy * u_xlat0;
    u_xlat1.xy = (-_ClipRect.xy) + _ClipRect.zw;
    u_xlat1.xy = u_xlat1.xy + -abs(vs_TEXCOORD2.xy);
    u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD2.zw;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
    u_xlat1.x = u_xlat1.y * u_xlat1.x;
    u_xlat3 = u_xlat0.w * u_xlat1.x + -0.00100000005;
    u_xlatb3 = u_xlat3<0.0;
    if(((int(u_xlatb3) * int(0xffffffffu)))!=0){discard;}
    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xxx + (-unity_FogColor.xyz);
    u_xlat6 = u_xlat0.w * u_xlat1.x;
    SV_Target0.w = u_xlat6;
    u_xlat6 = vs_TEXCOORDn0;
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
    SV_Target0.xyz = vec3(u_xlat6) * u_xlat0.xyz + unity_FogColor.xyz;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "FOG_LINEAR" "OUTLINE_ON" "UNITY_UI_ALPHACLIP" "UNITY_UI_CLIP_RECT" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 534
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %12 %118 %122 %135 %156 %251 %281 %290 %405 %448 %454 %511 
                                                      OpName vs_TEXCOORDn0 "vs_TEXCOORDn0" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpDecorate %12 Location 12 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpDecorate %19 ArrayStride 19 
                                                      OpDecorate %20 ArrayStride 20 
                                                      OpDecorate %21 ArrayStride 21 
                                                      OpMemberDecorate %22 0 Offset 22 
                                                      OpMemberDecorate %22 1 Offset 22 
                                                      OpMemberDecorate %22 2 Offset 22 
                                                      OpMemberDecorate %22 3 Offset 22 
                                                      OpMemberDecorate %22 4 Offset 22 
                                                      OpMemberDecorate %22 5 Offset 22 
                                                      OpMemberDecorate %22 6 Offset 22 
                                                      OpMemberDecorate %22 7 Offset 22 
                                                      OpMemberDecorate %22 8 Offset 22 
                                                      OpMemberDecorate %22 9 Offset 22 
                                                      OpMemberDecorate %22 10 Offset 22 
                                                      OpMemberDecorate %22 11 Offset 22 
                                                      OpMemberDecorate %22 12 Offset 22 
                                                      OpMemberDecorate %22 13 Offset 22 
                                                      OpMemberDecorate %22 14 Offset 22 
                                                      OpMemberDecorate %22 15 Offset 22 
                                                      OpMemberDecorate %22 16 Offset 22 
                                                      OpMemberDecorate %22 17 Offset 22 
                                                      OpMemberDecorate %22 18 Offset 22 
                                                      OpMemberDecorate %22 19 Offset 22 
                                                      OpMemberDecorate %22 20 Offset 22 
                                                      OpMemberDecorate %22 21 Offset 22 
                                                      OpMemberDecorate %22 22 Offset 22 
                                                      OpMemberDecorate %22 23 Offset 22 
                                                      OpMemberDecorate %22 24 Offset 22 
                                                      OpMemberDecorate %22 25 Offset 22 
                                                      OpDecorate %22 Block 
                                                      OpDecorate %24 DescriptorSet 24 
                                                      OpDecorate %24 Binding 24 
                                                      OpMemberDecorate %116 0 BuiltIn 116 
                                                      OpMemberDecorate %116 1 BuiltIn 116 
                                                      OpMemberDecorate %116 2 BuiltIn 116 
                                                      OpDecorate %116 Block 
                                                      OpDecorate %122 Location 122 
                                                      OpDecorate %135 Location 135 
                                                      OpDecorate %156 Location 156 
                                                      OpDecorate vs_TEXCOORDn0 Location 251 
                                                      OpDecorate vs_TEXCOORD2 Location 281 
                                                      OpDecorate %290 Location 290 
                                                      OpDecorate %405 Location 405 
                                                      OpDecorate vs_TEXCOORD0 Location 448 
                                                      OpDecorate %454 Location 454 
                                                      OpDecorate vs_TEXCOORD1 Location 511 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 2 
                                               %8 = OpTypePointer Private %7 
                                Private f32_2* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 4 
                                              %11 = OpTypePointer Input %10 
                                 Input f32_4* %12 = OpVariable Input 
                                              %15 = OpTypeVector %6 3 
                                              %16 = OpTypeInt 32 0 
                                          u32 %17 = OpConstant 4 
                                              %18 = OpTypeArray %10 %17 
                                              %19 = OpTypeArray %10 %17 
                                              %20 = OpTypeArray %10 %17 
                                              %21 = OpTypeArray %10 %17 
                                              %22 = OpTypeStruct %15 %10 %10 %18 %19 %20 %21 %10 %10 %6 %6 %10 %6 %6 %6 %6 %6 %6 %10 %6 %6 %6 %6 %6 %6 %6 
                                              %23 = OpTypePointer Uniform %22 
Uniform struct {f32_3; f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4[4]; f32_4; f32_4; f32; f32; f32_4; f32; f32; f32; f32; f32; f32; f32_4; f32; f32; f32; f32; f32; f32; f32;}* %24 = OpVariable Uniform 
                                              %25 = OpTypeInt 32 1 
                                          i32 %26 = OpConstant 16 
                                              %27 = OpTypePointer Uniform %6 
                                          i32 %30 = OpConstant 17 
                                              %35 = OpTypePointer Private %10 
                               Private f32_4* %36 = OpVariable Private 
                                          i32 %39 = OpConstant 3 
                                          i32 %40 = OpConstant 1 
                                              %41 = OpTypePointer Uniform %10 
                                          i32 %45 = OpConstant 0 
                                          i32 %53 = OpConstant 2 
                               Private f32_4* %61 = OpVariable Private 
                                              %80 = OpTypePointer Uniform %15 
                               Private f32_4* %86 = OpVariable Private 
                                          i32 %89 = OpConstant 6 
                                         u32 %114 = OpConstant 1 
                                             %115 = OpTypeArray %6 %114 
                                             %116 = OpTypeStruct %10 %6 %115 
                                             %117 = OpTypePointer Output %116 
        Output struct {f32_4; f32; f32[1];}* %118 = OpVariable Output 
                                             %120 = OpTypePointer Output %10 
                                Input f32_4* %122 = OpVariable Input 
                                         i32 %124 = OpConstant 8 
                               Output f32_4* %135 = OpVariable Output 
                                             %137 = OpTypePointer Private %6 
                                Private f32* %138 = OpVariable Private 
                                             %153 = OpTypePointer Private %15 
                              Private f32_3* %154 = OpVariable Private 
                                             %155 = OpTypePointer Input %15 
                                Input f32_3* %156 = OpVariable Input 
                                         i32 %158 = OpConstant 4 
                                         u32 %163 = OpConstant 0 
                                         u32 %176 = OpConstant 2 
                                         i32 %194 = OpConstant 5 
                                         i32 %216 = OpConstant 22 
                                         i32 %219 = OpConstant 23 
                                Private f32* %233 = OpVariable Private 
                                         f32 %241 = OpConstant 3.674022E-40 
                                         f32 %248 = OpConstant 3.674022E-40 
                                             %250 = OpTypePointer Output %6 
                        Output f32* vs_TEXCOORDn0 = OpVariable Output 
                                         i32 %253 = OpConstant 7 
                                         u32 %257 = OpConstant 3 
                                         i32 %266 = OpConstant 19 
                                         i32 %269 = OpConstant 20 
                                         f32 %273 = OpConstant 3.674022E-40 
                                       f32_2 %274 = OpConstantComposite %273 %273 
                       Output f32_4* vs_TEXCOORD2 = OpVariable Output 
                                             %289 = OpTypePointer Input %7 
                                Input f32_2* %290 = OpVariable Input 
                                             %291 = OpTypePointer Input %6 
                                         i32 %295 = OpConstant 21 
                              Private f32_2* %300 = OpVariable Private 
                                         i32 %301 = OpConstant 25 
                                Private f32* %317 = OpVariable Private 
                                         i32 %318 = OpConstant 24 
                                             %341 = OpTypeBool 
                                             %342 = OpTypePointer Private %341 
                               Private bool* %343 = OpVariable Private 
                                             %348 = OpTypePointer Function %6 
                                         i32 %357 = OpConstant 10 
                                         i32 %360 = OpConstant 15 
                                         i32 %372 = OpConstant 12 
                                         i32 %388 = OpConstant 11 
                               Output f32_4* %405 = OpVariable Output 
                                         i32 %412 = OpConstant 18 
                                         f32 %415 = OpConstant 3.674022E-40 
                                       f32_4 %416 = OpConstantComposite %415 %415 %415 %415 
                                         f32 %419 = OpConstant 3.674022E-40 
                                       f32_4 %420 = OpConstantComposite %419 %419 %419 %419 
                                         f32 %428 = OpConstant 3.674022E-40 
                                       f32_2 %429 = OpConstantComposite %428 %428 
                       Output f32_4* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_2* %454 = OpVariable Input 
                               Private bool* %458 = OpVariable Private 
                                Private f32* %465 = OpVariable Private 
                                         i32 %466 = OpConstant 13 
                                         i32 %470 = OpConstant 14 
                                         i32 %485 = OpConstant 9 
                                         f32 %499 = OpConstant 3.674022E-40 
                                         f32 %508 = OpConstant 3.674022E-40 
                       Output f32_4* vs_TEXCOORD1 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                               Function f32* %349 = OpVariable Function 
                                        f32_4 %13 = OpLoad %12 
                                        f32_2 %14 = OpVectorShuffle %13 %13 0 1 
                                 Uniform f32* %28 = OpAccessChain %24 %26 
                                          f32 %29 = OpLoad %28 
                                 Uniform f32* %31 = OpAccessChain %24 %30 
                                          f32 %32 = OpLoad %31 
                                        f32_2 %33 = OpCompositeConstruct %29 %32 
                                        f32_2 %34 = OpFAdd %14 %33 
                                                      OpStore %9 %34 
                                        f32_2 %37 = OpLoad %9 
                                        f32_4 %38 = OpVectorShuffle %37 %37 1 1 1 1 
                               Uniform f32_4* %42 = OpAccessChain %24 %39 %40 
                                        f32_4 %43 = OpLoad %42 
                                        f32_4 %44 = OpFMul %38 %43 
                                                      OpStore %36 %44 
                               Uniform f32_4* %46 = OpAccessChain %24 %39 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_2 %48 = OpLoad %9 
                                        f32_4 %49 = OpVectorShuffle %48 %48 0 0 0 0 
                                        f32_4 %50 = OpFMul %47 %49 
                                        f32_4 %51 = OpLoad %36 
                                        f32_4 %52 = OpFAdd %50 %51 
                                                      OpStore %36 %52 
                               Uniform f32_4* %54 = OpAccessChain %24 %39 %53 
                                        f32_4 %55 = OpLoad %54 
                                        f32_4 %56 = OpLoad %12 
                                        f32_4 %57 = OpVectorShuffle %56 %56 2 2 2 2 
                                        f32_4 %58 = OpFMul %55 %57 
                                        f32_4 %59 = OpLoad %36 
                                        f32_4 %60 = OpFAdd %58 %59 
                                                      OpStore %36 %60 
                                        f32_4 %62 = OpLoad %36 
                               Uniform f32_4* %63 = OpAccessChain %24 %39 %39 
                                        f32_4 %64 = OpLoad %63 
                                        f32_4 %65 = OpFAdd %62 %64 
                                                      OpStore %61 %65 
                               Uniform f32_4* %66 = OpAccessChain %24 %39 %39 
                                        f32_4 %67 = OpLoad %66 
                                        f32_3 %68 = OpVectorShuffle %67 %67 0 1 2 
                                        f32_4 %69 = OpLoad %12 
                                        f32_3 %70 = OpVectorShuffle %69 %69 3 3 3 
                                        f32_3 %71 = OpFMul %68 %70 
                                        f32_4 %72 = OpLoad %36 
                                        f32_3 %73 = OpVectorShuffle %72 %72 0 1 2 
                                        f32_3 %74 = OpFAdd %71 %73 
                                        f32_4 %75 = OpLoad %36 
                                        f32_4 %76 = OpVectorShuffle %75 %74 4 5 6 3 
                                                      OpStore %36 %76 
                                        f32_4 %77 = OpLoad %36 
                                        f32_3 %78 = OpVectorShuffle %77 %77 0 1 2 
                                        f32_3 %79 = OpFNegate %78 
                               Uniform f32_3* %81 = OpAccessChain %24 %45 
                                        f32_3 %82 = OpLoad %81 
                                        f32_3 %83 = OpFAdd %79 %82 
                                        f32_4 %84 = OpLoad %36 
                                        f32_4 %85 = OpVectorShuffle %84 %83 4 5 6 3 
                                                      OpStore %36 %85 
                                        f32_4 %87 = OpLoad %61 
                                        f32_4 %88 = OpVectorShuffle %87 %87 1 1 1 1 
                               Uniform f32_4* %90 = OpAccessChain %24 %89 %40 
                                        f32_4 %91 = OpLoad %90 
                                        f32_4 %92 = OpFMul %88 %91 
                                                      OpStore %86 %92 
                               Uniform f32_4* %93 = OpAccessChain %24 %89 %45 
                                        f32_4 %94 = OpLoad %93 
                                        f32_4 %95 = OpLoad %61 
                                        f32_4 %96 = OpVectorShuffle %95 %95 0 0 0 0 
                                        f32_4 %97 = OpFMul %94 %96 
                                        f32_4 %98 = OpLoad %86 
                                        f32_4 %99 = OpFAdd %97 %98 
                                                      OpStore %86 %99 
                              Uniform f32_4* %100 = OpAccessChain %24 %89 %53 
                                       f32_4 %101 = OpLoad %100 
                                       f32_4 %102 = OpLoad %61 
                                       f32_4 %103 = OpVectorShuffle %102 %102 2 2 2 2 
                                       f32_4 %104 = OpFMul %101 %103 
                                       f32_4 %105 = OpLoad %86 
                                       f32_4 %106 = OpFAdd %104 %105 
                                                      OpStore %86 %106 
                              Uniform f32_4* %107 = OpAccessChain %24 %89 %39 
                                       f32_4 %108 = OpLoad %107 
                                       f32_4 %109 = OpLoad %61 
                                       f32_4 %110 = OpVectorShuffle %109 %109 3 3 3 3 
                                       f32_4 %111 = OpFMul %108 %110 
                                       f32_4 %112 = OpLoad %86 
                                       f32_4 %113 = OpFAdd %111 %112 
                                                      OpStore %61 %113 
                                       f32_4 %119 = OpLoad %61 
                               Output f32_4* %121 = OpAccessChain %118 %45 
                                                      OpStore %121 %119 
                                       f32_4 %123 = OpLoad %122 
                              Uniform f32_4* %125 = OpAccessChain %24 %124 
                                       f32_4 %126 = OpLoad %125 
                                       f32_4 %127 = OpFMul %123 %126 
                                                      OpStore %86 %127 
                                       f32_4 %128 = OpLoad %86 
                                       f32_3 %129 = OpVectorShuffle %128 %128 3 3 3 
                                       f32_4 %130 = OpLoad %86 
                                       f32_3 %131 = OpVectorShuffle %130 %130 0 1 2 
                                       f32_3 %132 = OpFMul %129 %131 
                                       f32_4 %133 = OpLoad %86 
                                       f32_4 %134 = OpVectorShuffle %133 %132 4 5 6 3 
                                                      OpStore %86 %134 
                                       f32_4 %136 = OpLoad %86 
                                                      OpStore %135 %136 
                                       f32_4 %139 = OpLoad %36 
                                       f32_3 %140 = OpVectorShuffle %139 %139 0 1 2 
                                       f32_4 %141 = OpLoad %36 
                                       f32_3 %142 = OpVectorShuffle %141 %141 0 1 2 
                                         f32 %143 = OpDot %140 %142 
                                                      OpStore %138 %143 
                                         f32 %144 = OpLoad %138 
                                         f32 %145 = OpExtInst %1 32 %144 
                                                      OpStore %138 %145 
                                         f32 %146 = OpLoad %138 
                                       f32_3 %147 = OpCompositeConstruct %146 %146 %146 
                                       f32_4 %148 = OpLoad %36 
                                       f32_3 %149 = OpVectorShuffle %148 %148 0 1 2 
                                       f32_3 %150 = OpFMul %147 %149 
                                       f32_4 %151 = OpLoad %36 
                                       f32_4 %152 = OpVectorShuffle %151 %150 4 5 6 3 
                                                      OpStore %36 %152 
                                       f32_3 %157 = OpLoad %156 
                              Uniform f32_4* %159 = OpAccessChain %24 %158 %45 
                                       f32_4 %160 = OpLoad %159 
                                       f32_3 %161 = OpVectorShuffle %160 %160 0 1 2 
                                         f32 %162 = OpDot %157 %161 
                                Private f32* %164 = OpAccessChain %154 %163 
                                                      OpStore %164 %162 
                                       f32_3 %165 = OpLoad %156 
                              Uniform f32_4* %166 = OpAccessChain %24 %158 %40 
                                       f32_4 %167 = OpLoad %166 
                                       f32_3 %168 = OpVectorShuffle %167 %167 0 1 2 
                                         f32 %169 = OpDot %165 %168 
                                Private f32* %170 = OpAccessChain %154 %114 
                                                      OpStore %170 %169 
                                       f32_3 %171 = OpLoad %156 
                              Uniform f32_4* %172 = OpAccessChain %24 %158 %53 
                                       f32_4 %173 = OpLoad %172 
                                       f32_3 %174 = OpVectorShuffle %173 %173 0 1 2 
                                         f32 %175 = OpDot %171 %174 
                                Private f32* %177 = OpAccessChain %154 %176 
                                                      OpStore %177 %175 
                                       f32_3 %178 = OpLoad %154 
                                       f32_3 %179 = OpLoad %154 
                                         f32 %180 = OpDot %178 %179 
                                                      OpStore %138 %180 
                                         f32 %181 = OpLoad %138 
                                         f32 %182 = OpExtInst %1 32 %181 
                                                      OpStore %138 %182 
                                         f32 %183 = OpLoad %138 
                                       f32_3 %184 = OpCompositeConstruct %183 %183 %183 
                                       f32_3 %185 = OpLoad %154 
                                       f32_3 %186 = OpFMul %184 %185 
                                                      OpStore %154 %186 
                                       f32_3 %187 = OpLoad %154 
                                       f32_4 %188 = OpLoad %36 
                                       f32_3 %189 = OpVectorShuffle %188 %188 0 1 2 
                                         f32 %190 = OpDot %187 %189 
                                                      OpStore %138 %190 
                              Uniform f32_4* %191 = OpAccessChain %24 %53 
                                       f32_4 %192 = OpLoad %191 
                                       f32_2 %193 = OpVectorShuffle %192 %192 1 1 
                              Uniform f32_4* %195 = OpAccessChain %24 %194 %40 
                                       f32_4 %196 = OpLoad %195 
                                       f32_2 %197 = OpVectorShuffle %196 %196 0 1 
                                       f32_2 %198 = OpFMul %193 %197 
                                       f32_4 %199 = OpLoad %36 
                                       f32_4 %200 = OpVectorShuffle %199 %198 4 5 2 3 
                                                      OpStore %36 %200 
                              Uniform f32_4* %201 = OpAccessChain %24 %194 %45 
                                       f32_4 %202 = OpLoad %201 
                                       f32_2 %203 = OpVectorShuffle %202 %202 0 1 
                              Uniform f32_4* %204 = OpAccessChain %24 %53 
                                       f32_4 %205 = OpLoad %204 
                                       f32_2 %206 = OpVectorShuffle %205 %205 0 0 
                                       f32_2 %207 = OpFMul %203 %206 
                                       f32_4 %208 = OpLoad %36 
                                       f32_2 %209 = OpVectorShuffle %208 %208 0 1 
                                       f32_2 %210 = OpFAdd %207 %209 
                                       f32_4 %211 = OpLoad %36 
                                       f32_4 %212 = OpVectorShuffle %211 %210 4 5 2 3 
                                                      OpStore %36 %212 
                                       f32_4 %213 = OpLoad %36 
                                       f32_2 %214 = OpVectorShuffle %213 %213 0 1 
                                       f32_2 %215 = OpExtInst %1 4 %214 
                                Uniform f32* %217 = OpAccessChain %24 %216 
                                         f32 %218 = OpLoad %217 
                                Uniform f32* %220 = OpAccessChain %24 %219 
                                         f32 %221 = OpLoad %220 
                                       f32_2 %222 = OpCompositeConstruct %218 %221 
                                       f32_2 %223 = OpFMul %215 %222 
                                       f32_4 %224 = OpLoad %36 
                                       f32_4 %225 = OpVectorShuffle %224 %223 4 5 2 3 
                                                      OpStore %36 %225 
                                       f32_4 %226 = OpLoad %61 
                                       f32_2 %227 = OpVectorShuffle %226 %226 3 3 
                                       f32_4 %228 = OpLoad %36 
                                       f32_2 %229 = OpVectorShuffle %228 %228 0 1 
                                       f32_2 %230 = OpFDiv %227 %229 
                                       f32_4 %231 = OpLoad %36 
                                       f32_4 %232 = OpVectorShuffle %231 %230 4 5 2 3 
                                                      OpStore %36 %232 
                                Private f32* %234 = OpAccessChain %61 %176 
                                         f32 %235 = OpLoad %234 
                                Uniform f32* %236 = OpAccessChain %24 %40 %114 
                                         f32 %237 = OpLoad %236 
                                         f32 %238 = OpFDiv %235 %237 
                                                      OpStore %233 %238 
                                         f32 %239 = OpLoad %233 
                                         f32 %240 = OpFNegate %239 
                                         f32 %242 = OpFAdd %240 %241 
                                                      OpStore %233 %242 
                                         f32 %243 = OpLoad %233 
                                Uniform f32* %244 = OpAccessChain %24 %40 %176 
                                         f32 %245 = OpLoad %244 
                                         f32 %246 = OpFMul %243 %245 
                                                      OpStore %233 %246 
                                         f32 %247 = OpLoad %233 
                                         f32 %249 = OpExtInst %1 40 %247 %248 
                                                      OpStore %233 %249 
                                         f32 %252 = OpLoad %233 
                                Uniform f32* %254 = OpAccessChain %24 %253 %176 
                                         f32 %255 = OpLoad %254 
                                         f32 %256 = OpFMul %252 %255 
                                Uniform f32* %258 = OpAccessChain %24 %253 %257 
                                         f32 %259 = OpLoad %258 
                                         f32 %260 = OpFAdd %256 %259 
                                                      OpStore vs_TEXCOORDn0 %260 
                                       f32_4 %261 = OpLoad %36 
                                       f32_2 %262 = OpVectorShuffle %261 %261 0 1 
                                       f32_4 %263 = OpLoad %36 
                                       f32_2 %264 = OpVectorShuffle %263 %263 0 1 
                                         f32 %265 = OpDot %262 %264 
                                                      OpStore %233 %265 
                                Uniform f32* %267 = OpAccessChain %24 %266 
                                         f32 %268 = OpLoad %267 
                                Uniform f32* %270 = OpAccessChain %24 %269 
                                         f32 %271 = OpLoad %270 
                                       f32_2 %272 = OpCompositeConstruct %268 %271 
                                       f32_2 %275 = OpFMul %272 %274 
                                       f32_4 %276 = OpLoad %36 
                                       f32_2 %277 = OpVectorShuffle %276 %276 0 1 
                                       f32_2 %278 = OpFAdd %275 %277 
                                       f32_4 %279 = OpLoad %36 
                                       f32_4 %280 = OpVectorShuffle %279 %278 4 5 2 3 
                                                      OpStore %36 %280 
                                       f32_4 %282 = OpLoad %36 
                                       f32_2 %283 = OpVectorShuffle %282 %282 0 1 
                                       f32_2 %284 = OpFDiv %274 %283 
                                       f32_4 %285 = OpLoad vs_TEXCOORD2 
                                       f32_4 %286 = OpVectorShuffle %285 %284 0 1 4 5 
                                                      OpStore vs_TEXCOORD2 %286 
                                         f32 %287 = OpLoad %233 
                                         f32 %288 = OpExtInst %1 32 %287 
                                                      OpStore %233 %288 
                                  Input f32* %292 = OpAccessChain %290 %114 
                                         f32 %293 = OpLoad %292 
                                         f32 %294 = OpExtInst %1 4 %293 
                                Uniform f32* %296 = OpAccessChain %24 %295 
                                         f32 %297 = OpLoad %296 
                                         f32 %298 = OpFMul %294 %297 
                                Private f32* %299 = OpAccessChain %36 %163 
                                                      OpStore %299 %298 
                                Uniform f32* %302 = OpAccessChain %24 %301 
                                         f32 %303 = OpLoad %302 
                                         f32 %304 = OpFAdd %303 %241 
                                Private f32* %305 = OpAccessChain %300 %163 
                                                      OpStore %305 %304 
                                Private f32* %306 = OpAccessChain %300 %163 
                                         f32 %307 = OpLoad %306 
                                Private f32* %308 = OpAccessChain %36 %163 
                                         f32 %309 = OpLoad %308 
                                         f32 %310 = OpFMul %307 %309 
                                Private f32* %311 = OpAccessChain %36 %163 
                                                      OpStore %311 %310 
                                         f32 %312 = OpLoad %233 
                                Private f32* %313 = OpAccessChain %36 %163 
                                         f32 %314 = OpLoad %313 
                                         f32 %315 = OpFMul %312 %314 
                                Private f32* %316 = OpAccessChain %300 %163 
                                                      OpStore %316 %315 
                                Uniform f32* %319 = OpAccessChain %24 %318 
                                         f32 %320 = OpLoad %319 
                                         f32 %321 = OpFNegate %320 
                                         f32 %322 = OpFAdd %321 %241 
                                                      OpStore %317 %322 
                                         f32 %323 = OpLoad %317 
                                Private f32* %324 = OpAccessChain %300 %163 
                                         f32 %325 = OpLoad %324 
                                         f32 %326 = OpExtInst %1 4 %325 
                                         f32 %327 = OpFMul %323 %326 
                                                      OpStore %317 %327 
                                         f32 %328 = OpLoad %233 
                                Private f32* %329 = OpAccessChain %36 %163 
                                         f32 %330 = OpLoad %329 
                                         f32 %331 = OpFMul %328 %330 
                                         f32 %332 = OpLoad %317 
                                         f32 %333 = OpFNegate %332 
                                         f32 %334 = OpFAdd %331 %333 
                                                      OpStore %233 %334 
                                         f32 %335 = OpLoad %138 
                                         f32 %336 = OpExtInst %1 4 %335 
                                         f32 %337 = OpLoad %233 
                                         f32 %338 = OpFMul %336 %337 
                                         f32 %339 = OpLoad %317 
                                         f32 %340 = OpFAdd %338 %339 
                                                      OpStore %138 %340 
                                Uniform f32* %344 = OpAccessChain %24 %194 %39 %257 
                                         f32 %345 = OpLoad %344 
                                        bool %346 = OpFOrdEqual %345 %248 
                                                      OpStore %343 %346 
                                        bool %347 = OpLoad %343 
                                                      OpSelectionMerge %351 None 
                                                      OpBranchConditional %347 %350 %353 
                                             %350 = OpLabel 
                                         f32 %352 = OpLoad %138 
                                                      OpStore %349 %352 
                                                      OpBranch %351 
                                             %353 = OpLabel 
                                Private f32* %354 = OpAccessChain %300 %163 
                                         f32 %355 = OpLoad %354 
                                                      OpStore %349 %355 
                                                      OpBranch %351 
                                             %351 = OpLabel 
                                         f32 %356 = OpLoad %349 
                                                      OpStore %138 %356 
                                Uniform f32* %358 = OpAccessChain %24 %357 
                                         f32 %359 = OpLoad %358 
                                Uniform f32* %361 = OpAccessChain %24 %360 
                                         f32 %362 = OpLoad %361 
                                         f32 %363 = OpFMul %359 %362 
                                                      OpStore %233 %363 
                                         f32 %364 = OpLoad %233 
                                         f32 %365 = OpLoad %138 
                                         f32 %366 = OpFMul %364 %365 
                                         f32 %367 = OpFAdd %366 %241 
                                                      OpStore %233 %367 
                                         f32 %368 = OpLoad %138 
                                         f32 %369 = OpLoad %233 
                                         f32 %370 = OpFDiv %368 %369 
                                Private f32* %371 = OpAccessChain %36 %163 
                                                      OpStore %371 %370 
                                Uniform f32* %373 = OpAccessChain %24 %372 
                                         f32 %374 = OpLoad %373 
                                Uniform f32* %375 = OpAccessChain %24 %360 
                                         f32 %376 = OpLoad %375 
                                         f32 %377 = OpFMul %374 %376 
                                                      OpStore %138 %377 
                                Private f32* %378 = OpAccessChain %36 %163 
                                         f32 %379 = OpLoad %378 
                                         f32 %380 = OpLoad %138 
                                         f32 %381 = OpFMul %379 %380 
                                                      OpStore %138 %381 
                                         f32 %382 = OpLoad %138 
                                         f32 %383 = OpExtInst %1 37 %382 %241 
                                                      OpStore %233 %383 
                                         f32 %384 = OpLoad %233 
                                         f32 %385 = OpExtInst %1 31 %384 
                                                      OpStore %233 %385 
                                  Input f32* %386 = OpAccessChain %122 %257 
                                         f32 %387 = OpLoad %386 
                                Uniform f32* %389 = OpAccessChain %24 %388 %257 
                                         f32 %390 = OpLoad %389 
                                         f32 %391 = OpFMul %387 %390 
                                Private f32* %392 = OpAccessChain %61 %257 
                                                      OpStore %392 %391 
                                       f32_4 %393 = OpLoad %61 
                                       f32_3 %394 = OpVectorShuffle %393 %393 3 3 3 
                              Uniform f32_4* %395 = OpAccessChain %24 %388 
                                       f32_4 %396 = OpLoad %395 
                                       f32_3 %397 = OpVectorShuffle %396 %396 0 1 2 
                                       f32_3 %398 = OpFMul %394 %397 
                                       f32_4 %399 = OpLoad %61 
                                       f32_4 %400 = OpVectorShuffle %399 %398 4 5 6 3 
                                                      OpStore %61 %400 
                                       f32_4 %401 = OpLoad %86 
                                       f32_4 %402 = OpFNegate %401 
                                       f32_4 %403 = OpLoad %61 
                                       f32_4 %404 = OpFAdd %402 %403 
                                                      OpStore %61 %404 
                                         f32 %406 = OpLoad %233 
                                       f32_4 %407 = OpCompositeConstruct %406 %406 %406 %406 
                                       f32_4 %408 = OpLoad %61 
                                       f32_4 %409 = OpFMul %407 %408 
                                       f32_4 %410 = OpLoad %86 
                                       f32_4 %411 = OpFAdd %409 %410 
                                                      OpStore %405 %411 
                              Uniform f32_4* %413 = OpAccessChain %24 %412 
                                       f32_4 %414 = OpLoad %413 
                                       f32_4 %417 = OpExtInst %1 40 %414 %416 
                                                      OpStore %61 %417 
                                       f32_4 %418 = OpLoad %61 
                                       f32_4 %421 = OpExtInst %1 37 %418 %420 
                                                      OpStore %61 %421 
                                       f32_2 %422 = OpLoad %9 
                                       f32_4 %423 = OpLoad %61 
                                       f32_2 %424 = OpVectorShuffle %423 %423 0 1 
                                       f32_2 %425 = OpFNegate %424 
                                       f32_2 %426 = OpFAdd %422 %425 
                                                      OpStore %300 %426 
                                       f32_2 %427 = OpLoad %9 
                                       f32_2 %430 = OpFMul %427 %429 
                                       f32_4 %431 = OpLoad %61 
                                       f32_2 %432 = OpVectorShuffle %431 %431 0 1 
                                       f32_2 %433 = OpFNegate %432 
                                       f32_2 %434 = OpFAdd %430 %433 
                                                      OpStore %9 %434 
                                       f32_4 %435 = OpLoad %61 
                                       f32_2 %436 = OpVectorShuffle %435 %435 2 3 
                                       f32_2 %437 = OpFNegate %436 
                                       f32_2 %438 = OpLoad %9 
                                       f32_2 %439 = OpFAdd %437 %438 
                                       f32_4 %440 = OpLoad vs_TEXCOORD2 
                                       f32_4 %441 = OpVectorShuffle %440 %439 4 5 2 3 
                                                      OpStore vs_TEXCOORD2 %441 
                                       f32_4 %442 = OpLoad %61 
                                       f32_2 %443 = OpVectorShuffle %442 %442 0 1 
                                       f32_2 %444 = OpFNegate %443 
                                       f32_4 %445 = OpLoad %61 
                                       f32_2 %446 = OpVectorShuffle %445 %445 2 3 
                                       f32_2 %447 = OpFAdd %444 %446 
                                                      OpStore %9 %447 
                                       f32_2 %449 = OpLoad %300 
                                       f32_2 %450 = OpLoad %9 
                                       f32_2 %451 = OpFDiv %449 %450 
                                       f32_4 %452 = OpLoad vs_TEXCOORD0 
                                       f32_4 %453 = OpVectorShuffle %452 %451 0 1 4 5 
                                                      OpStore vs_TEXCOORD0 %453 
                                       f32_2 %455 = OpLoad %454 
                                       f32_4 %456 = OpLoad vs_TEXCOORD0 
                                       f32_4 %457 = OpVectorShuffle %456 %455 4 5 2 3 
                                                      OpStore vs_TEXCOORD0 %457 
                                  Input f32* %459 = OpAccessChain %290 %114 
                                         f32 %460 = OpLoad %459 
                                        bool %461 = OpFOrdGreaterThanEqual %248 %460 
                                                      OpStore %458 %461 
                                        bool %462 = OpLoad %458 
                                         f32 %463 = OpSelect %462 %241 %248 
                                Private f32* %464 = OpAccessChain %9 %163 
                                                      OpStore %464 %463 
                                Uniform f32* %467 = OpAccessChain %24 %466 
                                         f32 %468 = OpLoad %467 
                                         f32 %469 = OpFNegate %468 
                                Uniform f32* %471 = OpAccessChain %24 %470 
                                         f32 %472 = OpLoad %471 
                                         f32 %473 = OpFAdd %469 %472 
                                                      OpStore %465 %473 
                                Private f32* %474 = OpAccessChain %9 %163 
                                         f32 %475 = OpLoad %474 
                                         f32 %476 = OpLoad %465 
                                         f32 %477 = OpFMul %475 %476 
                                Uniform f32* %478 = OpAccessChain %24 %466 
                                         f32 %479 = OpLoad %478 
                                         f32 %480 = OpFAdd %477 %479 
                                Private f32* %481 = OpAccessChain %9 %163 
                                                      OpStore %481 %480 
                                Private f32* %482 = OpAccessChain %9 %163 
                                         f32 %483 = OpLoad %482 
                                         f32 %484 = OpFMul %483 %273 
                                Uniform f32* %486 = OpAccessChain %24 %485 
                                         f32 %487 = OpLoad %486 
                                         f32 %488 = OpFAdd %484 %487 
                                Private f32* %489 = OpAccessChain %9 %163 
                                                      OpStore %489 %488 
                                Private f32* %490 = OpAccessChain %9 %163 
                                         f32 %491 = OpLoad %490 
                                Uniform f32* %492 = OpAccessChain %24 %360 
                                         f32 %493 = OpLoad %492 
                                         f32 %494 = OpFMul %491 %493 
                                Private f32* %495 = OpAccessChain %9 %163 
                                                      OpStore %495 %494 
                                Private f32* %496 = OpAccessChain %9 %163 
                                         f32 %497 = OpLoad %496 
                                         f32 %498 = OpFNegate %497 
                                         f32 %500 = OpFMul %498 %499 
                                         f32 %501 = OpFAdd %500 %499 
                                Private f32* %502 = OpAccessChain %9 %163 
                                                      OpStore %502 %501 
                                Private f32* %503 = OpAccessChain %9 %163 
                                         f32 %504 = OpLoad %503 
                                Private f32* %505 = OpAccessChain %36 %163 
                                         f32 %506 = OpLoad %505 
                                         f32 %507 = OpFMul %504 %506 
                                         f32 %509 = OpFAdd %507 %508 
                                Private f32* %510 = OpAccessChain %36 %257 
                                                      OpStore %510 %509 
                                       f32_4 %512 = OpLoad %36 
                                       f32_2 %513 = OpVectorShuffle %512 %512 0 3 
                                       f32_4 %514 = OpLoad vs_TEXCOORD1 
                                       f32_4 %515 = OpVectorShuffle %514 %513 4 1 2 5 
                                                      OpStore vs_TEXCOORD1 %515 
                                         f32 %516 = OpLoad %138 
                                         f32 %517 = OpFNegate %516 
                                         f32 %518 = OpFMul %517 %499 
                                Private f32* %519 = OpAccessChain %36 %257 
                                         f32 %520 = OpLoad %519 
                                         f32 %521 = OpFAdd %518 %520 
                                 Output f32* %522 = OpAccessChain vs_TEXCOORD1 %114 
                                                      OpStore %522 %521 
                                         f32 %523 = OpLoad %138 
                                         f32 %524 = OpFMul %523 %499 
                                Private f32* %525 = OpAccessChain %36 %257 
                                         f32 %526 = OpLoad %525 
                                         f32 %527 = OpFAdd %524 %526 
                                 Output f32* %528 = OpAccessChain vs_TEXCOORD1 %176 
                                                      OpStore %528 %527 
                                 Output f32* %529 = OpAccessChain %118 %45 %114 
                                         f32 %530 = OpLoad %529 
                                         f32 %531 = OpFNegate %530 
                                 Output f32* %532 = OpAccessChain %118 %45 %114 
                                                      OpStore %532 %531 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 165
; Schema: 0
                                             OpCapability Shader 
                                      %1 = OpExtInstImport "GLSL.std.450" 
                                             OpMemoryModel Logical GLSL450 
                                             OpEntryPoint Fragment %4 "main" %11 %13 %30 %42 %81 %144 %149 
                                             OpExecutionMode %4 OriginUpperLeft 
                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                             OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                             OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                             OpName vs_TEXCOORDn0 "vs_TEXCOORDn0" 
                                             OpDecorate %11 Location 11 
                                             OpDecorate %13 Location 13 
                                             OpDecorate %22 DescriptorSet 22 
                                             OpDecorate %22 Binding 22 
                                             OpDecorate %26 DescriptorSet 26 
                                             OpDecorate %26 Binding 26 
                                             OpDecorate vs_TEXCOORD0 Location 30 
                                             OpDecorate vs_TEXCOORD1 Location 42 
                                             OpMemberDecorate %66 0 Offset 66 
                                             OpMemberDecorate %66 1 Offset 66 
                                             OpDecorate %66 Block 
                                             OpDecorate %68 DescriptorSet 68 
                                             OpDecorate %68 Binding 68 
                                             OpDecorate vs_TEXCOORD2 Location 81 
                                             OpDecorate %144 Location 144 
                                             OpDecorate vs_TEXCOORDn0 Location 149 
                                      %2 = OpTypeVoid 
                                      %3 = OpTypeFunction %2 
                                      %6 = OpTypeFloat 32 
                                      %7 = OpTypeVector %6 4 
                                      %8 = OpTypePointer Private %7 
                       Private f32_4* %9 = OpVariable Private 
                                     %10 = OpTypePointer Input %7 
                        Input f32_4* %11 = OpVariable Input 
                        Input f32_4* %13 = OpVariable Input 
                                     %17 = OpTypeVector %6 2 
                                     %18 = OpTypePointer Private %17 
                      Private f32_2* %19 = OpVariable Private 
                                     %20 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                     %21 = OpTypePointer UniformConstant %20 
UniformConstant read_only Texture2D* %22 = OpVariable UniformConstant 
                                     %24 = OpTypeSampler 
                                     %25 = OpTypePointer UniformConstant %24 
            UniformConstant sampler* %26 = OpVariable UniformConstant 
                                     %28 = OpTypeSampledImage %20 
               Input f32_4* vs_TEXCOORD0 = OpVariable Input 
                                     %34 = OpTypeInt 32 0 
                                 u32 %35 = OpConstant 3 
                                 u32 %37 = OpConstant 0 
                                     %38 = OpTypePointer Private %6 
               Input f32_4* vs_TEXCOORD1 = OpVariable Input 
                                 f32 %51 = OpConstant 3.674022E-40 
                                 f32 %52 = OpConstant 3.674022E-40 
                                     %66 = OpTypeStruct %7 %7 
                                     %67 = OpTypePointer Uniform %66 
     Uniform struct {f32_4; f32_4;}* %68 = OpVariable Uniform 
                                     %69 = OpTypeInt 32 1 
                                 i32 %70 = OpConstant 1 
                                     %71 = OpTypePointer Uniform %7 
               Input f32_4* vs_TEXCOORD2 = OpVariable Input 
                                 u32 %95 = OpConstant 1 
                       Private f32* %102 = OpVariable Private 
                                f32 %108 = OpConstant 3.674022E-40 
                                    %110 = OpTypeBool 
                                    %111 = OpTypePointer Private %110 
                      Private bool* %112 = OpVariable Private 
                                i32 %116 = OpConstant 0 
                                i32 %118 = OpConstant -1 
                                    %124 = OpTypeVector %6 3 
                       Private f32* %137 = OpVariable Private 
                                    %143 = OpTypePointer Output %7 
                      Output f32_4* %144 = OpVariable Output 
                                    %146 = OpTypePointer Output %6 
                                    %148 = OpTypePointer Input %6 
                Input f32* vs_TEXCOORDn0 = OpVariable Input 
                                 void %4 = OpFunction None %3 
                                      %5 = OpLabel 
                               f32_4 %12 = OpLoad %11 
                               f32_4 %14 = OpLoad %13 
                               f32_4 %15 = OpFNegate %14 
                               f32_4 %16 = OpFAdd %12 %15 
                                             OpStore %9 %16 
                 read_only Texture2D %23 = OpLoad %22 
                             sampler %27 = OpLoad %26 
          read_only Texture2DSampled %29 = OpSampledImage %23 %27 
                               f32_4 %31 = OpLoad vs_TEXCOORD0 
                               f32_2 %32 = OpVectorShuffle %31 %31 0 1 
                               f32_4 %33 = OpImageSampleImplicitLod %29 %32 
                                 f32 %36 = OpCompositeExtract %33 3 
                        Private f32* %39 = OpAccessChain %19 %37 
                                             OpStore %39 %36 
                               f32_2 %40 = OpLoad %19 
                               f32_2 %41 = OpVectorShuffle %40 %40 0 0 
                               f32_4 %43 = OpLoad vs_TEXCOORD1 
                               f32_2 %44 = OpVectorShuffle %43 %43 0 0 
                               f32_2 %45 = OpFMul %41 %44 
                               f32_4 %46 = OpLoad vs_TEXCOORD1 
                               f32_2 %47 = OpVectorShuffle %46 %46 2 1 
                               f32_2 %48 = OpFNegate %47 
                               f32_2 %49 = OpFAdd %45 %48 
                                             OpStore %19 %49 
                               f32_2 %50 = OpLoad %19 
                               f32_2 %53 = OpCompositeConstruct %51 %51 
                               f32_2 %54 = OpCompositeConstruct %52 %52 
                               f32_2 %55 = OpExtInst %1 43 %50 %53 %54 
                                             OpStore %19 %55 
                               f32_2 %56 = OpLoad %19 
                               f32_4 %57 = OpVectorShuffle %56 %56 0 0 0 0 
                               f32_4 %58 = OpLoad %9 
                               f32_4 %59 = OpFMul %57 %58 
                               f32_4 %60 = OpLoad %13 
                               f32_4 %61 = OpFAdd %59 %60 
                                             OpStore %9 %61 
                               f32_2 %62 = OpLoad %19 
                               f32_4 %63 = OpVectorShuffle %62 %62 1 1 1 1 
                               f32_4 %64 = OpLoad %9 
                               f32_4 %65 = OpFMul %63 %64 
                                             OpStore %9 %65 
                      Uniform f32_4* %72 = OpAccessChain %68 %70 
                               f32_4 %73 = OpLoad %72 
                               f32_2 %74 = OpVectorShuffle %73 %73 0 1 
                               f32_2 %75 = OpFNegate %74 
                      Uniform f32_4* %76 = OpAccessChain %68 %70 
                               f32_4 %77 = OpLoad %76 
                               f32_2 %78 = OpVectorShuffle %77 %77 2 3 
                               f32_2 %79 = OpFAdd %75 %78 
                                             OpStore %19 %79 
                               f32_2 %80 = OpLoad %19 
                               f32_4 %82 = OpLoad vs_TEXCOORD2 
                               f32_2 %83 = OpVectorShuffle %82 %82 0 1 
                               f32_2 %84 = OpExtInst %1 4 %83 
                               f32_2 %85 = OpFNegate %84 
                               f32_2 %86 = OpFAdd %80 %85 
                                             OpStore %19 %86 
                               f32_2 %87 = OpLoad %19 
                               f32_4 %88 = OpLoad vs_TEXCOORD2 
                               f32_2 %89 = OpVectorShuffle %88 %88 2 3 
                               f32_2 %90 = OpFMul %87 %89 
                                             OpStore %19 %90 
                               f32_2 %91 = OpLoad %19 
                               f32_2 %92 = OpCompositeConstruct %51 %51 
                               f32_2 %93 = OpCompositeConstruct %52 %52 
                               f32_2 %94 = OpExtInst %1 43 %91 %92 %93 
                                             OpStore %19 %94 
                        Private f32* %96 = OpAccessChain %19 %95 
                                 f32 %97 = OpLoad %96 
                        Private f32* %98 = OpAccessChain %19 %37 
                                 f32 %99 = OpLoad %98 
                                f32 %100 = OpFMul %97 %99 
                       Private f32* %101 = OpAccessChain %19 %37 
                                             OpStore %101 %100 
                       Private f32* %103 = OpAccessChain %9 %35 
                                f32 %104 = OpLoad %103 
                       Private f32* %105 = OpAccessChain %19 %37 
                                f32 %106 = OpLoad %105 
                                f32 %107 = OpFMul %104 %106 
                                f32 %109 = OpFAdd %107 %108 
                                             OpStore %102 %109 
                                f32 %113 = OpLoad %102 
                               bool %114 = OpFOrdLessThan %113 %51 
                                             OpStore %112 %114 
                               bool %115 = OpLoad %112 
                                i32 %117 = OpSelect %115 %70 %116 
                                i32 %119 = OpIMul %117 %118 
                               bool %120 = OpINotEqual %119 %116 
                                             OpSelectionMerge %122 None 
                                             OpBranchConditional %120 %121 %122 
                                    %121 = OpLabel 
                                             OpKill
                                    %122 = OpLabel 
                              f32_4 %125 = OpLoad %9 
                              f32_3 %126 = OpVectorShuffle %125 %125 0 1 2 
                              f32_2 %127 = OpLoad %19 
                              f32_3 %128 = OpVectorShuffle %127 %127 0 0 0 
                              f32_3 %129 = OpFMul %126 %128 
                     Uniform f32_4* %130 = OpAccessChain %68 %116 
                              f32_4 %131 = OpLoad %130 
                              f32_3 %132 = OpVectorShuffle %131 %131 0 1 2 
                              f32_3 %133 = OpFNegate %132 
                              f32_3 %134 = OpFAdd %129 %133 
                              f32_4 %135 = OpLoad %9 
                              f32_4 %136 = OpVectorShuffle %135 %134 4 5 6 3 
                                             OpStore %9 %136 
                       Private f32* %138 = OpAccessChain %9 %35 
                                f32 %139 = OpLoad %138 
                       Private f32* %140 = OpAccessChain %19 %37 
                                f32 %141 = OpLoad %140 
                                f32 %142 = OpFMul %139 %141 
                                             OpStore %137 %142 
                                f32 %145 = OpLoad %137 
                        Output f32* %147 = OpAccessChain %144 %35 
                                             OpStore %147 %145 
                                f32 %150 = OpLoad vs_TEXCOORDn0 
                                             OpStore %137 %150 
                                f32 %151 = OpLoad %137 
                                f32 %152 = OpExtInst %1 43 %151 %51 %52 
                                             OpStore %137 %152 
                                f32 %153 = OpLoad %137 
                              f32_3 %154 = OpCompositeConstruct %153 %153 %153 
                              f32_4 %155 = OpLoad %9 
                              f32_3 %156 = OpVectorShuffle %155 %155 0 1 2 
                              f32_3 %157 = OpFMul %154 %156 
                     Uniform f32_4* %158 = OpAccessChain %68 %116 
                              f32_4 %159 = OpLoad %158 
                              f32_3 %160 = OpVectorShuffle %159 %159 0 1 2 
                              f32_3 %161 = OpFAdd %157 %160 
                              f32_4 %162 = OpLoad %144 
                              f32_4 %163 = OpVectorShuffle %162 %161 4 5 6 3 
                                             OpStore %144 %163 
                                             OpReturn
                                             OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "FOG_LINEAR" "UNDERLAY_ON" "UNITY_UI_ALPHACLIP" "UNITY_UI_CLIP_RECT" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "FOG_LINEAR" "UNDERLAY_ON" "UNITY_UI_ALPHACLIP" "UNITY_UI_CLIP_RECT" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	vec4 _FaceColor;
uniform 	float _FaceDilate;
uniform 	float _OutlineSoftness;
uniform 	vec4 _OutlineColor;
uniform 	float _OutlineWidth;
uniform 	float _UnderlayOffsetX;
uniform 	float _UnderlayOffsetY;
uniform 	float _UnderlayDilate;
uniform 	float _UnderlaySoftness;
uniform 	float _WeightNormal;
uniform 	float _WeightBold;
uniform 	float _ScaleRatioA;
uniform 	float _ScaleRatioC;
uniform 	float _VertexOffsetX;
uniform 	float _VertexOffsetY;
uniform 	vec4 _ClipRect;
uniform 	float _MaskSoftnessX;
uniform 	float _MaskSoftnessY;
uniform 	float _TextureWidth;
uniform 	float _TextureHeight;
uniform 	float _GradientScale;
uniform 	float _ScaleX;
uniform 	float _ScaleY;
uniform 	float _PerspectiveFilter;
uniform 	float _Sharpness;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_COLOR0;
in  vec2 in_TEXCOORD0;
in  vec2 in_TEXCOORD1;
out vec4 vs_COLOR0;
out vec4 vs_COLOR1;
out vec4 vs_TEXCOORD0;
out vec4 vs_TEXCOORD1;
out vec4 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec2 vs_TEXCOORD4;
out float vs_TEXCOORDn0;
vec2 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
vec4 u_xlat6;
vec3 u_xlat7;
vec2 u_xlat8;
float u_xlat14;
float u_xlat15;
float u_xlat21;
bool u_xlatb21;
void main()
{
    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
    gl_Position = u_xlat2;
    vs_COLOR0.w = _FaceColor.w;
    u_xlat3.xyz = in_COLOR0.xyz;
    u_xlat3.w = 1.0;
    u_xlat4 = u_xlat3 * _FaceColor;
    u_xlat3.xyz = u_xlat4.www * u_xlat4.xyz;
    vs_COLOR0.xyz = u_xlat3.xyz;
    u_xlat5.xyz = (-u_xlat3.xyz);
    u_xlat5.w = (-u_xlat4.w);
    u_xlat6.xyz = _OutlineColor.www * _OutlineColor.xyz;
    u_xlat6.w = _OutlineColor.w;
    u_xlat5 = u_xlat5 + u_xlat6;
    u_xlat14 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat14 = inversesqrt(u_xlat14);
    u_xlat1.xyz = vec3(u_xlat14) * u_xlat1.xyz;
    u_xlat3.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat3.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat3.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat14 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat14 = inversesqrt(u_xlat14);
    u_xlat3.xyz = vec3(u_xlat14) * u_xlat3.xyz;
    u_xlat14 = dot(u_xlat3.xyz, u_xlat1.xyz);
    u_xlat1.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;
    u_xlat1.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat1.xy;
    u_xlat1.xy = abs(u_xlat1.xy) * vec2(_ScaleX, _ScaleY);
    u_xlat1.xy = u_xlat2.ww / u_xlat1.xy;
    vs_TEXCOORDn0 = u_xlat2.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat21 = dot(u_xlat1.xy, u_xlat1.xy);
    u_xlat1.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) * vec2(0.25, 0.25) + u_xlat1.xy;
    vs_TEXCOORD2.zw = vec2(0.25, 0.25) / u_xlat1.xy;
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.x = abs(in_TEXCOORD1.y) * _GradientScale;
    u_xlat8.x = _Sharpness + 1.0;
    u_xlat1.x = u_xlat8.x * u_xlat1.x;
    u_xlat8.x = u_xlat21 * u_xlat1.x;
    u_xlat15 = (-_PerspectiveFilter) + 1.0;
    u_xlat15 = u_xlat15 * abs(u_xlat8.x);
    u_xlat21 = u_xlat21 * u_xlat1.x + (-u_xlat15);
    u_xlat14 = abs(u_xlat14) * u_xlat21 + u_xlat15;
    u_xlatb21 = hlslcc_mtx4x4glstate_matrix_projection[3].w==0.0;
    u_xlat14 = (u_xlatb21) ? u_xlat14 : u_xlat8.x;
    u_xlat21 = _OutlineSoftness * _ScaleRatioA;
    u_xlat21 = u_xlat21 * u_xlat14 + 1.0;
    u_xlat1.x = u_xlat14 / u_xlat21;
    u_xlat21 = _OutlineWidth * _ScaleRatioA;
    u_xlat21 = u_xlat21 * 0.5;
    u_xlat8.x = u_xlat1.x * u_xlat21;
    u_xlat8.x = u_xlat8.x + u_xlat8.x;
    u_xlat8.x = min(u_xlat8.x, 1.0);
    u_xlat8.x = sqrt(u_xlat8.x);
    u_xlat2 = u_xlat5 * u_xlat8.xxxx;
    vs_COLOR1.xyz = u_xlat4.xyz * u_xlat4.www + u_xlat2.xyz;
    vs_COLOR1.w = u_xlat3.w * _FaceColor.w + u_xlat2.w;
    u_xlat2 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));
    u_xlat2 = min(u_xlat2, vec4(2e+10, 2e+10, 2e+10, 2e+10));
    u_xlat8.xy = u_xlat0.xy + (-u_xlat2.xy);
    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + (-u_xlat2.xy);
    vs_TEXCOORD2.xy = (-u_xlat2.zw) + u_xlat0.xy;
    u_xlat0.xy = (-u_xlat2.xy) + u_xlat2.zw;
    vs_TEXCOORD0.zw = u_xlat8.xy / u_xlat0.xy;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlatb0 = 0.0>=in_TEXCOORD1.y;
    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);
    u_xlat7.x = (-_WeightNormal) + _WeightBold;
    u_xlat0.x = u_xlat0.x * u_xlat7.x + _WeightNormal;
    u_xlat0.x = u_xlat0.x * 0.25 + _FaceDilate;
    u_xlat0.x = u_xlat0.x * _ScaleRatioA;
    u_xlat0.x = (-u_xlat0.x) * 0.5 + 0.5;
    u_xlat1.w = u_xlat0.x * u_xlat1.x + -0.5;
    vs_TEXCOORD1.y = (-u_xlat21) * u_xlat1.x + u_xlat1.w;
    vs_TEXCOORD1.z = u_xlat21 * u_xlat1.x + u_xlat1.w;
    vs_TEXCOORD1.xw = u_xlat1.xw;
    vs_TEXCOORD3.z = in_COLOR0.w;
    vs_TEXCOORD3.w = 0.0;
    u_xlat1 = vec4(_UnderlaySoftness, _UnderlayDilate, _UnderlayOffsetX, _UnderlayOffsetY) * vec4(vec4(_ScaleRatioC, _ScaleRatioC, _ScaleRatioC, _ScaleRatioC));
    u_xlat7.xz = (-u_xlat1.zw) * vec2(_GradientScale);
    u_xlat7.xz = u_xlat7.xz / vec2(_TextureWidth, _TextureHeight);
    vs_TEXCOORD3.xy = u_xlat7.xz + in_TEXCOORD0.xy;
    u_xlat7.x = u_xlat1.x * u_xlat14 + 1.0;
    u_xlat7.x = u_xlat14 / u_xlat7.x;
    u_xlat14 = u_xlat1.y * 0.5;
    u_xlat0.x = u_xlat0.x * u_xlat7.x + -0.5;
    vs_TEXCOORD4.y = (-u_xlat14) * u_xlat7.x + u_xlat0.x;
    vs_TEXCOORD4.x = u_xlat7.x;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 unity_FogColor;
uniform 	vec4 _UnderlayColor;
uniform 	vec4 _ClipRect;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
in  vec4 vs_COLOR0;
in  vec4 vs_TEXCOORD0;
in  vec4 vs_TEXCOORD1;
in  vec4 vs_TEXCOORD2;
in  vec4 vs_TEXCOORD3;
in  vec2 vs_TEXCOORD4;
in  float vs_TEXCOORDn0;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
float u_xlat9;
void main()
{
    u_xlat0 = texture(_MainTex, vs_TEXCOORD3.xy);
    u_xlat0.x = u_xlat0.w * vs_TEXCOORD4.x + (-vs_TEXCOORD4.y);
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat1.xyz = _UnderlayColor.www * _UnderlayColor.xyz;
    u_xlat1.w = _UnderlayColor.w;
    u_xlat0 = u_xlat0.xxxx * u_xlat1;
    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1.x = u_xlat1.w * vs_TEXCOORD1.x + (-vs_TEXCOORD1.w);
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat2 = u_xlat1.xxxx * vs_COLOR0;
    u_xlat1.x = (-vs_COLOR0.w) * u_xlat1.x + 1.0;
    u_xlat0 = u_xlat0 * u_xlat1.xxxx + u_xlat2;
    u_xlat1.xy = (-_ClipRect.xy) + _ClipRect.zw;
    u_xlat1.xy = u_xlat1.xy + -abs(vs_TEXCOORD2.xy);
    u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD2.zw;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
    u_xlat1.x = u_xlat1.y * u_xlat1.x;
    u_xlat0 = u_xlat0 * u_xlat1.xxxx;
    u_xlat1.x = u_xlat0.w * vs_TEXCOORD3.z + -0.00100000005;
    u_xlatb1 = u_xlat1.x<0.0;
    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
    u_xlat0.xyz = u_xlat0.xyz * vs_TEXCOORD3.zzz + (-unity_FogColor.xyz);
    u_xlat9 = u_xlat0.w * vs_TEXCOORD3.z;
    SV_Target0.w = u_xlat9;
    u_xlat9 = vs_TEXCOORDn0;
    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
    SV_Target0.xyz = vec3(u_xlat9) * u_xlat0.xyz + unity_FogColor.xyz;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "FOG_LINEAR" "UNDERLAY_ON" "UNITY_UI_ALPHACLIP" "UNITY_UI_CLIP_RECT" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 677
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %12 %118 %122 %129 %196 %295 %324 %333 %436 %492 %498 %558 %576 %661 
                                                      OpName vs_TEXCOORDn0 "vs_TEXCOORDn0" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpDecorate %12 Location 12 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpDecorate %19 ArrayStride 19 
                                                      OpDecorate %20 ArrayStride 20 
                                                      OpDecorate %21 ArrayStride 21 
                                                      OpMemberDecorate %22 0 Offset 22 
                                                      OpMemberDecorate %22 1 Offset 22 
                                                      OpMemberDecorate %22 2 Offset 22 
                                                      OpMemberDecorate %22 3 Offset 22 
                                                      OpMemberDecorate %22 4 Offset 22 
                                                      OpMemberDecorate %22 5 Offset 22 
                                                      OpMemberDecorate %22 6 Offset 22 
                                                      OpMemberDecorate %22 7 Offset 22 
                                                      OpMemberDecorate %22 8 Offset 22 
                                                      OpMemberDecorate %22 9 Offset 22 
                                                      OpMemberDecorate %22 10 Offset 22 
                                                      OpMemberDecorate %22 11 Offset 22 
                                                      OpMemberDecorate %22 12 Offset 22 
                                                      OpMemberDecorate %22 13 Offset 22 
                                                      OpMemberDecorate %22 14 Offset 22 
                                                      OpMemberDecorate %22 15 Offset 22 
                                                      OpMemberDecorate %22 16 Offset 22 
                                                      OpMemberDecorate %22 17 Offset 22 
                                                      OpMemberDecorate %22 18 Offset 22 
                                                      OpMemberDecorate %22 19 Offset 22 
                                                      OpMemberDecorate %22 20 Offset 22 
                                                      OpMemberDecorate %22 21 Offset 22 
                                                      OpMemberDecorate %22 22 Offset 22 
                                                      OpMemberDecorate %22 23 Offset 22 
                                                      OpMemberDecorate %22 24 Offset 22 
                                                      OpMemberDecorate %22 25 Offset 22 
                                                      OpMemberDecorate %22 26 Offset 22 
                                                      OpMemberDecorate %22 27 Offset 22 
                                                      OpMemberDecorate %22 28 Offset 22 
                                                      OpMemberDecorate %22 29 Offset 22 
                                                      OpMemberDecorate %22 30 Offset 22 
                                                      OpMemberDecorate %22 31 Offset 22 
                                                      OpMemberDecorate %22 32 Offset 22 
                                                      OpDecorate %22 Block 
                                                      OpDecorate %24 DescriptorSet 24 
                                                      OpDecorate %24 Binding 24 
                                                      OpMemberDecorate %116 0 BuiltIn 116 
                                                      OpMemberDecorate %116 1 BuiltIn 116 
                                                      OpMemberDecorate %116 2 BuiltIn 116 
                                                      OpDecorate %116 Block 
                                                      OpDecorate %122 Location 122 
                                                      OpDecorate %129 Location 129 
                                                      OpDecorate %196 Location 196 
                                                      OpDecorate vs_TEXCOORDn0 Location 295 
                                                      OpDecorate vs_TEXCOORD2 Location 324 
                                                      OpDecorate %333 Location 333 
                                                      OpDecorate %436 Location 436 
                                                      OpDecorate vs_TEXCOORD0 Location 492 
                                                      OpDecorate %498 Location 498 
                                                      OpDecorate vs_TEXCOORD1 Location 558 
                                                      OpDecorate vs_TEXCOORD3 Location 576 
                                                      OpDecorate vs_TEXCOORD4 Location 661 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 2 
                                               %8 = OpTypePointer Private %7 
                                Private f32_2* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 4 
                                              %11 = OpTypePointer Input %10 
                                 Input f32_4* %12 = OpVariable Input 
                                              %15 = OpTypeVector %6 3 
                                              %16 = OpTypeInt 32 0 
                                          u32 %17 = OpConstant 4 
                                              %18 = OpTypeArray %10 %17 
                                              %19 = OpTypeArray %10 %17 
                                              %20 = OpTypeArray %10 %17 
                                              %21 = OpTypeArray %10 %17 
                                              %22 = OpTypeStruct %15 %10 %10 %18 %19 %20 %21 %10 %10 %6 %6 %10 %6 %6 %6 %6 %6 %6 %6 %6 %6 %6 %6 %10 %6 %6 %6 %6 %6 %6 %6 %6 %6 
                                              %23 = OpTypePointer Uniform %22 
Uniform struct {f32_3; f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4[4]; f32_4; f32_4; f32; f32; f32_4; f32; f32; f32; f32; f32; f32; f32; f32; f32; f32; f32; f32_4; f32; f32; f32; f32; f32; f32; f32; f32; f32;}* %24 = OpVariable Uniform 
                                              %25 = OpTypeInt 32 1 
                                          i32 %26 = OpConstant 21 
                                              %27 = OpTypePointer Uniform %6 
                                          i32 %30 = OpConstant 22 
                                              %35 = OpTypePointer Private %10 
                               Private f32_4* %36 = OpVariable Private 
                                          i32 %39 = OpConstant 3 
                                          i32 %40 = OpConstant 1 
                                              %41 = OpTypePointer Uniform %10 
                                          i32 %45 = OpConstant 0 
                                          i32 %53 = OpConstant 2 
                               Private f32_4* %61 = OpVariable Private 
                                              %80 = OpTypePointer Uniform %15 
                               Private f32_4* %86 = OpVariable Private 
                                          i32 %89 = OpConstant 6 
                                         u32 %114 = OpConstant 1 
                                             %115 = OpTypeArray %6 %114 
                                             %116 = OpTypeStruct %10 %6 %115 
                                             %117 = OpTypePointer Output %116 
        Output struct {f32_4; f32; f32[1];}* %118 = OpVariable Output 
                                             %120 = OpTypePointer Output %10 
                               Output f32_4* %122 = OpVariable Output 
                                         i32 %123 = OpConstant 8 
                                         u32 %124 = OpConstant 3 
                                             %127 = OpTypePointer Output %6 
                                Input f32_4* %129 = OpVariable Input 
                                         f32 %134 = OpConstant 3.674022E-40 
                                             %135 = OpTypePointer Private %6 
                              Private f32_4* %137 = OpVariable Private 
                              Private f32_4* %153 = OpVariable Private 
                              Private f32_4* %163 = OpVariable Private 
                                         i32 %164 = OpConstant 11 
                                Private f32* %180 = OpVariable Private 
                                             %195 = OpTypePointer Input %15 
                                Input f32_3* %196 = OpVariable Input 
                                         i32 %198 = OpConstant 4 
                                         u32 %203 = OpConstant 0 
                                         u32 %216 = OpConstant 2 
                                         i32 %240 = OpConstant 5 
                                         i32 %262 = OpConstant 29 
                                         i32 %265 = OpConstant 30 
                                Private f32* %279 = OpVariable Private 
                                         f32 %293 = OpConstant 3.674022E-40 
                        Output f32* vs_TEXCOORDn0 = OpVariable Output 
                                         i32 %297 = OpConstant 7 
                                         i32 %309 = OpConstant 24 
                                         i32 %312 = OpConstant 25 
                                         f32 %316 = OpConstant 3.674022E-40 
                                       f32_2 %317 = OpConstantComposite %316 %316 
                       Output f32_4* vs_TEXCOORD2 = OpVariable Output 
                                             %332 = OpTypePointer Input %7 
                                Input f32_2* %333 = OpVariable Input 
                                             %334 = OpTypePointer Input %6 
                                         i32 %338 = OpConstant 28 
                              Private f32_2* %343 = OpVariable Private 
                                         i32 %344 = OpConstant 32 
                                Private f32* %360 = OpVariable Private 
                                         i32 %361 = OpConstant 31 
                                             %384 = OpTypeBool 
                                             %385 = OpTypePointer Private %384 
                               Private bool* %386 = OpVariable Private 
                                             %391 = OpTypePointer Function %6 
                                         i32 %400 = OpConstant 10 
                                         i32 %403 = OpConstant 19 
                                         i32 %415 = OpConstant 12 
                               Output f32_4* %436 = OpVariable Output 
                                         i32 %456 = OpConstant 23 
                                         f32 %459 = OpConstant 3.674022E-40 
                                       f32_4 %460 = OpConstantComposite %459 %459 %459 %459 
                                         f32 %463 = OpConstant 3.674022E-40 
                                       f32_4 %464 = OpConstantComposite %463 %463 %463 %463 
                                         f32 %472 = OpConstant 3.674022E-40 
                                       f32_2 %473 = OpConstantComposite %472 %472 
                       Output f32_4* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_2* %498 = OpVariable Input 
                               Private bool* %502 = OpVariable Private 
                                             %509 = OpTypePointer Private %15 
                              Private f32_3* %510 = OpVariable Private 
                                         i32 %511 = OpConstant 17 
                                         i32 %515 = OpConstant 18 
                                         i32 %532 = OpConstant 9 
                                         f32 %546 = OpConstant 3.674022E-40 
                                         f32 %555 = OpConstant 3.674022E-40 
                       Output f32_4* vs_TEXCOORD1 = OpVariable Output 
                       Output f32_4* vs_TEXCOORD3 = OpVariable Output 
                                         i32 %581 = OpConstant 16 
                                         i32 %584 = OpConstant 15 
                                         i32 %587 = OpConstant 13 
                                         i32 %590 = OpConstant 14 
                                         i32 %594 = OpConstant 20 
                                         i32 %621 = OpConstant 26 
                                         i32 %624 = OpConstant 27 
                                             %660 = OpTypePointer Output %7 
                       Output f32_2* vs_TEXCOORD4 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                               Function f32* %392 = OpVariable Function 
                                        f32_4 %13 = OpLoad %12 
                                        f32_2 %14 = OpVectorShuffle %13 %13 0 1 
                                 Uniform f32* %28 = OpAccessChain %24 %26 
                                          f32 %29 = OpLoad %28 
                                 Uniform f32* %31 = OpAccessChain %24 %30 
                                          f32 %32 = OpLoad %31 
                                        f32_2 %33 = OpCompositeConstruct %29 %32 
                                        f32_2 %34 = OpFAdd %14 %33 
                                                      OpStore %9 %34 
                                        f32_2 %37 = OpLoad %9 
                                        f32_4 %38 = OpVectorShuffle %37 %37 1 1 1 1 
                               Uniform f32_4* %42 = OpAccessChain %24 %39 %40 
                                        f32_4 %43 = OpLoad %42 
                                        f32_4 %44 = OpFMul %38 %43 
                                                      OpStore %36 %44 
                               Uniform f32_4* %46 = OpAccessChain %24 %39 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_2 %48 = OpLoad %9 
                                        f32_4 %49 = OpVectorShuffle %48 %48 0 0 0 0 
                                        f32_4 %50 = OpFMul %47 %49 
                                        f32_4 %51 = OpLoad %36 
                                        f32_4 %52 = OpFAdd %50 %51 
                                                      OpStore %36 %52 
                               Uniform f32_4* %54 = OpAccessChain %24 %39 %53 
                                        f32_4 %55 = OpLoad %54 
                                        f32_4 %56 = OpLoad %12 
                                        f32_4 %57 = OpVectorShuffle %56 %56 2 2 2 2 
                                        f32_4 %58 = OpFMul %55 %57 
                                        f32_4 %59 = OpLoad %36 
                                        f32_4 %60 = OpFAdd %58 %59 
                                                      OpStore %36 %60 
                                        f32_4 %62 = OpLoad %36 
                               Uniform f32_4* %63 = OpAccessChain %24 %39 %39 
                                        f32_4 %64 = OpLoad %63 
                                        f32_4 %65 = OpFAdd %62 %64 
                                                      OpStore %61 %65 
                               Uniform f32_4* %66 = OpAccessChain %24 %39 %39 
                                        f32_4 %67 = OpLoad %66 
                                        f32_3 %68 = OpVectorShuffle %67 %67 0 1 2 
                                        f32_4 %69 = OpLoad %12 
                                        f32_3 %70 = OpVectorShuffle %69 %69 3 3 3 
                                        f32_3 %71 = OpFMul %68 %70 
                                        f32_4 %72 = OpLoad %36 
                                        f32_3 %73 = OpVectorShuffle %72 %72 0 1 2 
                                        f32_3 %74 = OpFAdd %71 %73 
                                        f32_4 %75 = OpLoad %36 
                                        f32_4 %76 = OpVectorShuffle %75 %74 4 5 6 3 
                                                      OpStore %36 %76 
                                        f32_4 %77 = OpLoad %36 
                                        f32_3 %78 = OpVectorShuffle %77 %77 0 1 2 
                                        f32_3 %79 = OpFNegate %78 
                               Uniform f32_3* %81 = OpAccessChain %24 %45 
                                        f32_3 %82 = OpLoad %81 
                                        f32_3 %83 = OpFAdd %79 %82 
                                        f32_4 %84 = OpLoad %36 
                                        f32_4 %85 = OpVectorShuffle %84 %83 4 5 6 3 
                                                      OpStore %36 %85 
                                        f32_4 %87 = OpLoad %61 
                                        f32_4 %88 = OpVectorShuffle %87 %87 1 1 1 1 
                               Uniform f32_4* %90 = OpAccessChain %24 %89 %40 
                                        f32_4 %91 = OpLoad %90 
                                        f32_4 %92 = OpFMul %88 %91 
                                                      OpStore %86 %92 
                               Uniform f32_4* %93 = OpAccessChain %24 %89 %45 
                                        f32_4 %94 = OpLoad %93 
                                        f32_4 %95 = OpLoad %61 
                                        f32_4 %96 = OpVectorShuffle %95 %95 0 0 0 0 
                                        f32_4 %97 = OpFMul %94 %96 
                                        f32_4 %98 = OpLoad %86 
                                        f32_4 %99 = OpFAdd %97 %98 
                                                      OpStore %86 %99 
                              Uniform f32_4* %100 = OpAccessChain %24 %89 %53 
                                       f32_4 %101 = OpLoad %100 
                                       f32_4 %102 = OpLoad %61 
                                       f32_4 %103 = OpVectorShuffle %102 %102 2 2 2 2 
                                       f32_4 %104 = OpFMul %101 %103 
                                       f32_4 %105 = OpLoad %86 
                                       f32_4 %106 = OpFAdd %104 %105 
                                                      OpStore %86 %106 
                              Uniform f32_4* %107 = OpAccessChain %24 %89 %39 
                                       f32_4 %108 = OpLoad %107 
                                       f32_4 %109 = OpLoad %61 
                                       f32_4 %110 = OpVectorShuffle %109 %109 3 3 3 3 
                                       f32_4 %111 = OpFMul %108 %110 
                                       f32_4 %112 = OpLoad %86 
                                       f32_4 %113 = OpFAdd %111 %112 
                                                      OpStore %61 %113 
                                       f32_4 %119 = OpLoad %61 
                               Output f32_4* %121 = OpAccessChain %118 %45 
                                                      OpStore %121 %119 
                                Uniform f32* %125 = OpAccessChain %24 %123 %124 
                                         f32 %126 = OpLoad %125 
                                 Output f32* %128 = OpAccessChain %122 %124 
                                                      OpStore %128 %126 
                                       f32_4 %130 = OpLoad %129 
                                       f32_3 %131 = OpVectorShuffle %130 %130 0 1 2 
                                       f32_4 %132 = OpLoad %86 
                                       f32_4 %133 = OpVectorShuffle %132 %131 4 5 6 3 
                                                      OpStore %86 %133 
                                Private f32* %136 = OpAccessChain %86 %124 
                                                      OpStore %136 %134 
                                       f32_4 %138 = OpLoad %86 
                              Uniform f32_4* %139 = OpAccessChain %24 %123 
                                       f32_4 %140 = OpLoad %139 
                                       f32_4 %141 = OpFMul %138 %140 
                                                      OpStore %137 %141 
                                       f32_4 %142 = OpLoad %137 
                                       f32_3 %143 = OpVectorShuffle %142 %142 3 3 3 
                                       f32_4 %144 = OpLoad %137 
                                       f32_3 %145 = OpVectorShuffle %144 %144 0 1 2 
                                       f32_3 %146 = OpFMul %143 %145 
                                       f32_4 %147 = OpLoad %86 
                                       f32_4 %148 = OpVectorShuffle %147 %146 4 5 6 3 
                                                      OpStore %86 %148 
                                       f32_4 %149 = OpLoad %86 
                                       f32_3 %150 = OpVectorShuffle %149 %149 0 1 2 
                                       f32_4 %151 = OpLoad %122 
                                       f32_4 %152 = OpVectorShuffle %151 %150 4 5 6 3 
                                                      OpStore %122 %152 
                                       f32_4 %154 = OpLoad %86 
                                       f32_3 %155 = OpVectorShuffle %154 %154 0 1 2 
                                       f32_3 %156 = OpFNegate %155 
                                       f32_4 %157 = OpLoad %153 
                                       f32_4 %158 = OpVectorShuffle %157 %156 4 5 6 3 
                                                      OpStore %153 %158 
                                Private f32* %159 = OpAccessChain %137 %124 
                                         f32 %160 = OpLoad %159 
                                         f32 %161 = OpFNegate %160 
                                Private f32* %162 = OpAccessChain %153 %124 
                                                      OpStore %162 %161 
                              Uniform f32_4* %165 = OpAccessChain %24 %164 
                                       f32_4 %166 = OpLoad %165 
                                       f32_3 %167 = OpVectorShuffle %166 %166 3 3 3 
                              Uniform f32_4* %168 = OpAccessChain %24 %164 
                                       f32_4 %169 = OpLoad %168 
                                       f32_3 %170 = OpVectorShuffle %169 %169 0 1 2 
                                       f32_3 %171 = OpFMul %167 %170 
                                       f32_4 %172 = OpLoad %163 
                                       f32_4 %173 = OpVectorShuffle %172 %171 4 5 6 3 
                                                      OpStore %163 %173 
                                Uniform f32* %174 = OpAccessChain %24 %164 %124 
                                         f32 %175 = OpLoad %174 
                                Private f32* %176 = OpAccessChain %163 %124 
                                                      OpStore %176 %175 
                                       f32_4 %177 = OpLoad %153 
                                       f32_4 %178 = OpLoad %163 
                                       f32_4 %179 = OpFAdd %177 %178 
                                                      OpStore %153 %179 
                                       f32_4 %181 = OpLoad %36 
                                       f32_3 %182 = OpVectorShuffle %181 %181 0 1 2 
                                       f32_4 %183 = OpLoad %36 
                                       f32_3 %184 = OpVectorShuffle %183 %183 0 1 2 
                                         f32 %185 = OpDot %182 %184 
                                                      OpStore %180 %185 
                                         f32 %186 = OpLoad %180 
                                         f32 %187 = OpExtInst %1 32 %186 
                                                      OpStore %180 %187 
                                         f32 %188 = OpLoad %180 
                                       f32_3 %189 = OpCompositeConstruct %188 %188 %188 
                                       f32_4 %190 = OpLoad %36 
                                       f32_3 %191 = OpVectorShuffle %190 %190 0 1 2 
                                       f32_3 %192 = OpFMul %189 %191 
                                       f32_4 %193 = OpLoad %36 
                                       f32_4 %194 = OpVectorShuffle %193 %192 4 5 6 3 
                                                      OpStore %36 %194 
                                       f32_3 %197 = OpLoad %196 
                              Uniform f32_4* %199 = OpAccessChain %24 %198 %45 
                                       f32_4 %200 = OpLoad %199 
                                       f32_3 %201 = OpVectorShuffle %200 %200 0 1 2 
                                         f32 %202 = OpDot %197 %201 
                                Private f32* %204 = OpAccessChain %86 %203 
                                                      OpStore %204 %202 
                                       f32_3 %205 = OpLoad %196 
                              Uniform f32_4* %206 = OpAccessChain %24 %198 %40 
                                       f32_4 %207 = OpLoad %206 
                                       f32_3 %208 = OpVectorShuffle %207 %207 0 1 2 
                                         f32 %209 = OpDot %205 %208 
                                Private f32* %210 = OpAccessChain %86 %114 
                                                      OpStore %210 %209 
                                       f32_3 %211 = OpLoad %196 
                              Uniform f32_4* %212 = OpAccessChain %24 %198 %53 
                                       f32_4 %213 = OpLoad %212 
                                       f32_3 %214 = OpVectorShuffle %213 %213 0 1 2 
                                         f32 %215 = OpDot %211 %214 
                                Private f32* %217 = OpAccessChain %86 %216 
                                                      OpStore %217 %215 
                                       f32_4 %218 = OpLoad %86 
                                       f32_3 %219 = OpVectorShuffle %218 %218 0 1 2 
                                       f32_4 %220 = OpLoad %86 
                                       f32_3 %221 = OpVectorShuffle %220 %220 0 1 2 
                                         f32 %222 = OpDot %219 %221 
                                                      OpStore %180 %222 
                                         f32 %223 = OpLoad %180 
                                         f32 %224 = OpExtInst %1 32 %223 
                                                      OpStore %180 %224 
                                         f32 %225 = OpLoad %180 
                                       f32_3 %226 = OpCompositeConstruct %225 %225 %225 
                                       f32_4 %227 = OpLoad %86 
                                       f32_3 %228 = OpVectorShuffle %227 %227 0 1 2 
                                       f32_3 %229 = OpFMul %226 %228 
                                       f32_4 %230 = OpLoad %86 
                                       f32_4 %231 = OpVectorShuffle %230 %229 4 5 6 3 
                                                      OpStore %86 %231 
                                       f32_4 %232 = OpLoad %86 
                                       f32_3 %233 = OpVectorShuffle %232 %232 0 1 2 
                                       f32_4 %234 = OpLoad %36 
                                       f32_3 %235 = OpVectorShuffle %234 %234 0 1 2 
                                         f32 %236 = OpDot %233 %235 
                                                      OpStore %180 %236 
                              Uniform f32_4* %237 = OpAccessChain %24 %53 
                                       f32_4 %238 = OpLoad %237 
                                       f32_2 %239 = OpVectorShuffle %238 %238 1 1 
                              Uniform f32_4* %241 = OpAccessChain %24 %240 %40 
                                       f32_4 %242 = OpLoad %241 
                                       f32_2 %243 = OpVectorShuffle %242 %242 0 1 
                                       f32_2 %244 = OpFMul %239 %243 
                                       f32_4 %245 = OpLoad %36 
                                       f32_4 %246 = OpVectorShuffle %245 %244 4 5 2 3 
                                                      OpStore %36 %246 
                              Uniform f32_4* %247 = OpAccessChain %24 %240 %45 
                                       f32_4 %248 = OpLoad %247 
                                       f32_2 %249 = OpVectorShuffle %248 %248 0 1 
                              Uniform f32_4* %250 = OpAccessChain %24 %53 
                                       f32_4 %251 = OpLoad %250 
                                       f32_2 %252 = OpVectorShuffle %251 %251 0 0 
                                       f32_2 %253 = OpFMul %249 %252 
                                       f32_4 %254 = OpLoad %36 
                                       f32_2 %255 = OpVectorShuffle %254 %254 0 1 
                                       f32_2 %256 = OpFAdd %253 %255 
                                       f32_4 %257 = OpLoad %36 
                                       f32_4 %258 = OpVectorShuffle %257 %256 4 5 2 3 
                                                      OpStore %36 %258 
                                       f32_4 %259 = OpLoad %36 
                                       f32_2 %260 = OpVectorShuffle %259 %259 0 1 
                                       f32_2 %261 = OpExtInst %1 4 %260 
                                Uniform f32* %263 = OpAccessChain %24 %262 
                                         f32 %264 = OpLoad %263 
                                Uniform f32* %266 = OpAccessChain %24 %265 
                                         f32 %267 = OpLoad %266 
                                       f32_2 %268 = OpCompositeConstruct %264 %267 
                                       f32_2 %269 = OpFMul %261 %268 
                                       f32_4 %270 = OpLoad %36 
                                       f32_4 %271 = OpVectorShuffle %270 %269 4 5 2 3 
                                                      OpStore %36 %271 
                                       f32_4 %272 = OpLoad %61 
                                       f32_2 %273 = OpVectorShuffle %272 %272 3 3 
                                       f32_4 %274 = OpLoad %36 
                                       f32_2 %275 = OpVectorShuffle %274 %274 0 1 
                                       f32_2 %276 = OpFDiv %273 %275 
                                       f32_4 %277 = OpLoad %36 
                                       f32_4 %278 = OpVectorShuffle %277 %276 4 5 2 3 
                                                      OpStore %36 %278 
                                Private f32* %280 = OpAccessChain %61 %216 
                                         f32 %281 = OpLoad %280 
                                Uniform f32* %282 = OpAccessChain %24 %40 %114 
                                         f32 %283 = OpLoad %282 
                                         f32 %284 = OpFDiv %281 %283 
                                                      OpStore %279 %284 
                                         f32 %285 = OpLoad %279 
                                         f32 %286 = OpFNegate %285 
                                         f32 %287 = OpFAdd %286 %134 
                                                      OpStore %279 %287 
                                         f32 %288 = OpLoad %279 
                                Uniform f32* %289 = OpAccessChain %24 %40 %216 
                                         f32 %290 = OpLoad %289 
                                         f32 %291 = OpFMul %288 %290 
                                                      OpStore %279 %291 
                                         f32 %292 = OpLoad %279 
                                         f32 %294 = OpExtInst %1 40 %292 %293 
                                                      OpStore %279 %294 
                                         f32 %296 = OpLoad %279 
                                Uniform f32* %298 = OpAccessChain %24 %297 %216 
                                         f32 %299 = OpLoad %298 
                                         f32 %300 = OpFMul %296 %299 
                                Uniform f32* %301 = OpAccessChain %24 %297 %124 
                                         f32 %302 = OpLoad %301 
                                         f32 %303 = OpFAdd %300 %302 
                                                      OpStore vs_TEXCOORDn0 %303 
                                       f32_4 %304 = OpLoad %36 
                                       f32_2 %305 = OpVectorShuffle %304 %304 0 1 
                                       f32_4 %306 = OpLoad %36 
                                       f32_2 %307 = OpVectorShuffle %306 %306 0 1 
                                         f32 %308 = OpDot %305 %307 
                                                      OpStore %279 %308 
                                Uniform f32* %310 = OpAccessChain %24 %309 
                                         f32 %311 = OpLoad %310 
                                Uniform f32* %313 = OpAccessChain %24 %312 
                                         f32 %314 = OpLoad %313 
                                       f32_2 %315 = OpCompositeConstruct %311 %314 
                                       f32_2 %318 = OpFMul %315 %317 
                                       f32_4 %319 = OpLoad %36 
                                       f32_2 %320 = OpVectorShuffle %319 %319 0 1 
                                       f32_2 %321 = OpFAdd %318 %320 
                                       f32_4 %322 = OpLoad %36 
                                       f32_4 %323 = OpVectorShuffle %322 %321 4 5 2 3 
                                                      OpStore %36 %323 
                                       f32_4 %325 = OpLoad %36 
                                       f32_2 %326 = OpVectorShuffle %325 %325 0 1 
                                       f32_2 %327 = OpFDiv %317 %326 
                                       f32_4 %328 = OpLoad vs_TEXCOORD2 
                                       f32_4 %329 = OpVectorShuffle %328 %327 0 1 4 5 
                                                      OpStore vs_TEXCOORD2 %329 
                                         f32 %330 = OpLoad %279 
                                         f32 %331 = OpExtInst %1 32 %330 
                                                      OpStore %279 %331 
                                  Input f32* %335 = OpAccessChain %333 %114 
                                         f32 %336 = OpLoad %335 
                                         f32 %337 = OpExtInst %1 4 %336 
                                Uniform f32* %339 = OpAccessChain %24 %338 
                                         f32 %340 = OpLoad %339 
                                         f32 %341 = OpFMul %337 %340 
                                Private f32* %342 = OpAccessChain %36 %203 
                                                      OpStore %342 %341 
                                Uniform f32* %345 = OpAccessChain %24 %344 
                                         f32 %346 = OpLoad %345 
                                         f32 %347 = OpFAdd %346 %134 
                                Private f32* %348 = OpAccessChain %343 %203 
                                                      OpStore %348 %347 
                                Private f32* %349 = OpAccessChain %343 %203 
                                         f32 %350 = OpLoad %349 
                                Private f32* %351 = OpAccessChain %36 %203 
                                         f32 %352 = OpLoad %351 
                                         f32 %353 = OpFMul %350 %352 
                                Private f32* %354 = OpAccessChain %36 %203 
                                                      OpStore %354 %353 
                                         f32 %355 = OpLoad %279 
                                Private f32* %356 = OpAccessChain %36 %203 
                                         f32 %357 = OpLoad %356 
                                         f32 %358 = OpFMul %355 %357 
                                Private f32* %359 = OpAccessChain %343 %203 
                                                      OpStore %359 %358 
                                Uniform f32* %362 = OpAccessChain %24 %361 
                                         f32 %363 = OpLoad %362 
                                         f32 %364 = OpFNegate %363 
                                         f32 %365 = OpFAdd %364 %134 
                                                      OpStore %360 %365 
                                         f32 %366 = OpLoad %360 
                                Private f32* %367 = OpAccessChain %343 %203 
                                         f32 %368 = OpLoad %367 
                                         f32 %369 = OpExtInst %1 4 %368 
                                         f32 %370 = OpFMul %366 %369 
                                                      OpStore %360 %370 
                                         f32 %371 = OpLoad %279 
                                Private f32* %372 = OpAccessChain %36 %203 
                                         f32 %373 = OpLoad %372 
                                         f32 %374 = OpFMul %371 %373 
                                         f32 %375 = OpLoad %360 
                                         f32 %376 = OpFNegate %375 
                                         f32 %377 = OpFAdd %374 %376 
                                                      OpStore %279 %377 
                                         f32 %378 = OpLoad %180 
                                         f32 %379 = OpExtInst %1 4 %378 
                                         f32 %380 = OpLoad %279 
                                         f32 %381 = OpFMul %379 %380 
                                         f32 %382 = OpLoad %360 
                                         f32 %383 = OpFAdd %381 %382 
                                                      OpStore %180 %383 
                                Uniform f32* %387 = OpAccessChain %24 %240 %39 %124 
                                         f32 %388 = OpLoad %387 
                                        bool %389 = OpFOrdEqual %388 %293 
                                                      OpStore %386 %389 
                                        bool %390 = OpLoad %386 
                                                      OpSelectionMerge %394 None 
                                                      OpBranchConditional %390 %393 %396 
                                             %393 = OpLabel 
                                         f32 %395 = OpLoad %180 
                                                      OpStore %392 %395 
                                                      OpBranch %394 
                                             %396 = OpLabel 
                                Private f32* %397 = OpAccessChain %343 %203 
                                         f32 %398 = OpLoad %397 
                                                      OpStore %392 %398 
                                                      OpBranch %394 
                                             %394 = OpLabel 
                                         f32 %399 = OpLoad %392 
                                                      OpStore %180 %399 
                                Uniform f32* %401 = OpAccessChain %24 %400 
                                         f32 %402 = OpLoad %401 
                                Uniform f32* %404 = OpAccessChain %24 %403 
                                         f32 %405 = OpLoad %404 
                                         f32 %406 = OpFMul %402 %405 
                                                      OpStore %279 %406 
                                         f32 %407 = OpLoad %279 
                                         f32 %408 = OpLoad %180 
                                         f32 %409 = OpFMul %407 %408 
                                         f32 %410 = OpFAdd %409 %134 
                                                      OpStore %279 %410 
                                         f32 %411 = OpLoad %180 
                                         f32 %412 = OpLoad %279 
                                         f32 %413 = OpFDiv %411 %412 
                                Private f32* %414 = OpAccessChain %36 %203 
                                                      OpStore %414 %413 
                                Uniform f32* %416 = OpAccessChain %24 %415 
                                         f32 %417 = OpLoad %416 
                                Uniform f32* %418 = OpAccessChain %24 %403 
                                         f32 %419 = OpLoad %418 
                                         f32 %420 = OpFMul %417 %419 
                                                      OpStore %279 %420 
                                Private f32* %421 = OpAccessChain %36 %203 
                                         f32 %422 = OpLoad %421 
                                         f32 %423 = OpLoad %279 
                                         f32 %424 = OpFMul %422 %423 
                                                      OpStore %279 %424 
                                         f32 %425 = OpLoad %279 
                                         f32 %426 = OpExtInst %1 37 %425 %134 
                                Private f32* %427 = OpAccessChain %343 %203 
                                                      OpStore %427 %426 
                                Private f32* %428 = OpAccessChain %343 %203 
                                         f32 %429 = OpLoad %428 
                                         f32 %430 = OpExtInst %1 31 %429 
                                Private f32* %431 = OpAccessChain %343 %203 
                                                      OpStore %431 %430 
                                       f32_4 %432 = OpLoad %153 
                                       f32_2 %433 = OpLoad %343 
                                       f32_4 %434 = OpVectorShuffle %433 %433 0 0 0 0 
                                       f32_4 %435 = OpFMul %432 %434 
                                                      OpStore %61 %435 
                                       f32_4 %437 = OpLoad %137 
                                       f32_3 %438 = OpVectorShuffle %437 %437 0 1 2 
                                       f32_4 %439 = OpLoad %137 
                                       f32_3 %440 = OpVectorShuffle %439 %439 3 3 3 
                                       f32_3 %441 = OpFMul %438 %440 
                                       f32_4 %442 = OpLoad %61 
                                       f32_3 %443 = OpVectorShuffle %442 %442 0 1 2 
                                       f32_3 %444 = OpFAdd %441 %443 
                                       f32_4 %445 = OpLoad %436 
                                       f32_4 %446 = OpVectorShuffle %445 %444 4 5 6 3 
                                                      OpStore %436 %446 
                                Private f32* %447 = OpAccessChain %86 %124 
                                         f32 %448 = OpLoad %447 
                                Uniform f32* %449 = OpAccessChain %24 %123 %124 
                                         f32 %450 = OpLoad %449 
                                         f32 %451 = OpFMul %448 %450 
                                Private f32* %452 = OpAccessChain %61 %124 
                                         f32 %453 = OpLoad %452 
                                         f32 %454 = OpFAdd %451 %453 
                                 Output f32* %455 = OpAccessChain %436 %124 
                                                      OpStore %455 %454 
                              Uniform f32_4* %457 = OpAccessChain %24 %456 
                                       f32_4 %458 = OpLoad %457 
                                       f32_4 %461 = OpExtInst %1 40 %458 %460 
                                                      OpStore %61 %461 
                                       f32_4 %462 = OpLoad %61 
                                       f32_4 %465 = OpExtInst %1 37 %462 %464 
                                                      OpStore %61 %465 
                                       f32_2 %466 = OpLoad %9 
                                       f32_4 %467 = OpLoad %61 
                                       f32_2 %468 = OpVectorShuffle %467 %467 0 1 
                                       f32_2 %469 = OpFNegate %468 
                                       f32_2 %470 = OpFAdd %466 %469 
                                                      OpStore %343 %470 
                                       f32_2 %471 = OpLoad %9 
                                       f32_2 %474 = OpFMul %471 %473 
                                       f32_4 %475 = OpLoad %61 
                                       f32_2 %476 = OpVectorShuffle %475 %475 0 1 
                                       f32_2 %477 = OpFNegate %476 
                                       f32_2 %478 = OpFAdd %474 %477 
                                                      OpStore %9 %478 
                                       f32_4 %479 = OpLoad %61 
                                       f32_2 %480 = OpVectorShuffle %479 %479 2 3 
                                       f32_2 %481 = OpFNegate %480 
                                       f32_2 %482 = OpLoad %9 
                                       f32_2 %483 = OpFAdd %481 %482 
                                       f32_4 %484 = OpLoad vs_TEXCOORD2 
                                       f32_4 %485 = OpVectorShuffle %484 %483 4 5 2 3 
                                                      OpStore vs_TEXCOORD2 %485 
                                       f32_4 %486 = OpLoad %61 
                                       f32_2 %487 = OpVectorShuffle %486 %486 0 1 
                                       f32_2 %488 = OpFNegate %487 
                                       f32_4 %489 = OpLoad %61 
                                       f32_2 %490 = OpVectorShuffle %489 %489 2 3 
                                       f32_2 %491 = OpFAdd %488 %490 
                                                      OpStore %9 %491 
                                       f32_2 %493 = OpLoad %343 
                                       f32_2 %494 = OpLoad %9 
                                       f32_2 %495 = OpFDiv %493 %494 
                                       f32_4 %496 = OpLoad vs_TEXCOORD0 
                                       f32_4 %497 = OpVectorShuffle %496 %495 0 1 4 5 
                                                      OpStore vs_TEXCOORD0 %497 
                                       f32_2 %499 = OpLoad %498 
                                       f32_4 %500 = OpLoad vs_TEXCOORD0 
                                       f32_4 %501 = OpVectorShuffle %500 %499 4 5 2 3 
                                                      OpStore vs_TEXCOORD0 %501 
                                  Input f32* %503 = OpAccessChain %333 %114 
                                         f32 %504 = OpLoad %503 
                                        bool %505 = OpFOrdGreaterThanEqual %293 %504 
                                                      OpStore %502 %505 
                                        bool %506 = OpLoad %502 
                                         f32 %507 = OpSelect %506 %134 %293 
                                Private f32* %508 = OpAccessChain %9 %203 
                                                      OpStore %508 %507 
                                Uniform f32* %512 = OpAccessChain %24 %511 
                                         f32 %513 = OpLoad %512 
                                         f32 %514 = OpFNegate %513 
                                Uniform f32* %516 = OpAccessChain %24 %515 
                                         f32 %517 = OpLoad %516 
                                         f32 %518 = OpFAdd %514 %517 
                                Private f32* %519 = OpAccessChain %510 %203 
                                                      OpStore %519 %518 
                                Private f32* %520 = OpAccessChain %9 %203 
                                         f32 %521 = OpLoad %520 
                                Private f32* %522 = OpAccessChain %510 %203 
                                         f32 %523 = OpLoad %522 
                                         f32 %524 = OpFMul %521 %523 
                                Uniform f32* %525 = OpAccessChain %24 %511 
                                         f32 %526 = OpLoad %525 
                                         f32 %527 = OpFAdd %524 %526 
                                Private f32* %528 = OpAccessChain %9 %203 
                                                      OpStore %528 %527 
                                Private f32* %529 = OpAccessChain %9 %203 
                                         f32 %530 = OpLoad %529 
                                         f32 %531 = OpFMul %530 %316 
                                Uniform f32* %533 = OpAccessChain %24 %532 
                                         f32 %534 = OpLoad %533 
                                         f32 %535 = OpFAdd %531 %534 
                                Private f32* %536 = OpAccessChain %9 %203 
                                                      OpStore %536 %535 
                                Private f32* %537 = OpAccessChain %9 %203 
                                         f32 %538 = OpLoad %537 
                                Uniform f32* %539 = OpAccessChain %24 %403 
                                         f32 %540 = OpLoad %539 
                                         f32 %541 = OpFMul %538 %540 
                                Private f32* %542 = OpAccessChain %9 %203 
                                                      OpStore %542 %541 
                                Private f32* %543 = OpAccessChain %9 %203 
                                         f32 %544 = OpLoad %543 
                                         f32 %545 = OpFNegate %544 
                                         f32 %547 = OpFMul %545 %546 
                                         f32 %548 = OpFAdd %547 %546 
                                Private f32* %549 = OpAccessChain %9 %203 
                                                      OpStore %549 %548 
                                Private f32* %550 = OpAccessChain %9 %203 
                                         f32 %551 = OpLoad %550 
                                Private f32* %552 = OpAccessChain %36 %203 
                                         f32 %553 = OpLoad %552 
                                         f32 %554 = OpFMul %551 %553 
                                         f32 %556 = OpFAdd %554 %555 
                                Private f32* %557 = OpAccessChain %36 %124 
                                                      OpStore %557 %556 
                                       f32_4 %559 = OpLoad %36 
                                       f32_2 %560 = OpVectorShuffle %559 %559 0 3 
                                       f32_4 %561 = OpLoad vs_TEXCOORD1 
                                       f32_4 %562 = OpVectorShuffle %561 %560 4 1 2 5 
                                                      OpStore vs_TEXCOORD1 %562 
                                         f32 %563 = OpLoad %279 
                                         f32 %564 = OpFNegate %563 
                                         f32 %565 = OpFMul %564 %546 
                                Private f32* %566 = OpAccessChain %36 %124 
                                         f32 %567 = OpLoad %566 
                                         f32 %568 = OpFAdd %565 %567 
                                 Output f32* %569 = OpAccessChain vs_TEXCOORD1 %114 
                                                      OpStore %569 %568 
                                         f32 %570 = OpLoad %279 
                                         f32 %571 = OpFMul %570 %546 
                                Private f32* %572 = OpAccessChain %36 %124 
                                         f32 %573 = OpLoad %572 
                                         f32 %574 = OpFAdd %571 %573 
                                 Output f32* %575 = OpAccessChain vs_TEXCOORD1 %216 
                                                      OpStore %575 %574 
                                  Input f32* %577 = OpAccessChain %129 %124 
                                         f32 %578 = OpLoad %577 
                                 Output f32* %579 = OpAccessChain vs_TEXCOORD3 %216 
                                                      OpStore %579 %578 
                                 Output f32* %580 = OpAccessChain vs_TEXCOORD3 %124 
                                                      OpStore %580 %293 
                                Uniform f32* %582 = OpAccessChain %24 %581 
                                         f32 %583 = OpLoad %582 
                                Uniform f32* %585 = OpAccessChain %24 %584 
                                         f32 %586 = OpLoad %585 
                                Uniform f32* %588 = OpAccessChain %24 %587 
                                         f32 %589 = OpLoad %588 
                                Uniform f32* %591 = OpAccessChain %24 %590 
                                         f32 %592 = OpLoad %591 
                                       f32_4 %593 = OpCompositeConstruct %583 %586 %589 %592 
                                Uniform f32* %595 = OpAccessChain %24 %594 
                                         f32 %596 = OpLoad %595 
                                Uniform f32* %597 = OpAccessChain %24 %594 
                                         f32 %598 = OpLoad %597 
                                Uniform f32* %599 = OpAccessChain %24 %594 
                                         f32 %600 = OpLoad %599 
                                Uniform f32* %601 = OpAccessChain %24 %594 
                                         f32 %602 = OpLoad %601 
                                       f32_4 %603 = OpCompositeConstruct %596 %598 %600 %602 
                                         f32 %604 = OpCompositeExtract %603 0 
                                         f32 %605 = OpCompositeExtract %603 1 
                                         f32 %606 = OpCompositeExtract %603 2 
                                         f32 %607 = OpCompositeExtract %603 3 
                                       f32_4 %608 = OpCompositeConstruct %604 %605 %606 %607 
                                       f32_4 %609 = OpFMul %593 %608 
                                                      OpStore %36 %609 
                                       f32_4 %610 = OpLoad %36 
                                       f32_2 %611 = OpVectorShuffle %610 %610 2 3 
                                       f32_2 %612 = OpFNegate %611 
                                Uniform f32* %613 = OpAccessChain %24 %338 
                                         f32 %614 = OpLoad %613 
                                       f32_2 %615 = OpCompositeConstruct %614 %614 
                                       f32_2 %616 = OpFMul %612 %615 
                                       f32_3 %617 = OpLoad %510 
                                       f32_3 %618 = OpVectorShuffle %617 %616 3 1 4 
                                                      OpStore %510 %618 
                                       f32_3 %619 = OpLoad %510 
                                       f32_2 %620 = OpVectorShuffle %619 %619 0 2 
                                Uniform f32* %622 = OpAccessChain %24 %621 
                                         f32 %623 = OpLoad %622 
                                Uniform f32* %625 = OpAccessChain %24 %624 
                                         f32 %626 = OpLoad %625 
                                       f32_2 %627 = OpCompositeConstruct %623 %626 
                                       f32_2 %628 = OpFDiv %620 %627 
                                       f32_3 %629 = OpLoad %510 
                                       f32_3 %630 = OpVectorShuffle %629 %628 3 1 4 
                                                      OpStore %510 %630 
                                       f32_3 %631 = OpLoad %510 
                                       f32_2 %632 = OpVectorShuffle %631 %631 0 2 
                                       f32_2 %633 = OpLoad %498 
                                       f32_2 %634 = OpFAdd %632 %633 
                                       f32_4 %635 = OpLoad vs_TEXCOORD3 
                                       f32_4 %636 = OpVectorShuffle %635 %634 4 5 2 3 
                                                      OpStore vs_TEXCOORD3 %636 
                                Private f32* %637 = OpAccessChain %36 %203 
                                         f32 %638 = OpLoad %637 
                                         f32 %639 = OpLoad %180 
                                         f32 %640 = OpFMul %638 %639 
                                         f32 %641 = OpFAdd %640 %134 
                                Private f32* %642 = OpAccessChain %510 %203 
                                                      OpStore %642 %641 
                                         f32 %643 = OpLoad %180 
                                Private f32* %644 = OpAccessChain %510 %203 
                                         f32 %645 = OpLoad %644 
                                         f32 %646 = OpFDiv %643 %645 
                                Private f32* %647 = OpAccessChain %510 %203 
                                                      OpStore %647 %646 
                                Private f32* %648 = OpAccessChain %510 %203 
                                         f32 %649 = OpLoad %648 
                                Private f32* %650 = OpAccessChain %36 %114 
                                         f32 %651 = OpLoad %650 
                                         f32 %652 = OpFMul %649 %651 
                                                      OpStore %180 %652 
                                Private f32* %653 = OpAccessChain %9 %203 
                                         f32 %654 = OpLoad %653 
                                Private f32* %655 = OpAccessChain %510 %203 
                                         f32 %656 = OpLoad %655 
                                         f32 %657 = OpFMul %654 %656 
                                         f32 %658 = OpFAdd %657 %555 
                                Private f32* %659 = OpAccessChain %9 %203 
                                                      OpStore %659 %658 
                                Private f32* %662 = OpAccessChain %510 %203 
                                         f32 %663 = OpLoad %662 
                                 Output f32* %664 = OpAccessChain vs_TEXCOORD4 %203 
                                                      OpStore %664 %663 
                                         f32 %665 = OpLoad %180 
                                         f32 %666 = OpFNegate %665 
                                         f32 %667 = OpFMul %666 %546 
                                Private f32* %668 = OpAccessChain %9 %203 
                                         f32 %669 = OpLoad %668 
                                         f32 %670 = OpFAdd %667 %669 
                                 Output f32* %671 = OpAccessChain vs_TEXCOORD4 %114 
                                                      OpStore %671 %670 
                                 Output f32* %672 = OpAccessChain %118 %45 %114 
                                         f32 %673 = OpLoad %672 
                                         f32 %674 = OpFNegate %673 
                                 Output f32* %675 = OpAccessChain %118 %45 %114 
                                                      OpStore %675 %674 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 229
; Schema: 0
                                               OpCapability Shader 
                                        %1 = OpExtInstImport "GLSL.std.450" 
                                               OpMemoryModel Logical GLSL450 
                                               OpEntryPoint Fragment %4 "main" %21 %35 %80 %88 %104 %134 %209 %213 
                                               OpExecutionMode %4 OriginUpperLeft 
                                               OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                               OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                               OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                               OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                               OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                               OpName vs_TEXCOORDn0 "vs_TEXCOORDn0" 
                                               OpDecorate %12 DescriptorSet 12 
                                               OpDecorate %12 Binding 12 
                                               OpDecorate %16 DescriptorSet 16 
                                               OpDecorate %16 Binding 16 
                                               OpDecorate vs_TEXCOORD3 Location 21 
                                               OpDecorate vs_TEXCOORD4 Location 35 
                                               OpMemberDecorate %53 0 Offset 53 
                                               OpMemberDecorate %53 1 Offset 53 
                                               OpMemberDecorate %53 2 Offset 53 
                                               OpDecorate %53 Block 
                                               OpDecorate %55 DescriptorSet 55 
                                               OpDecorate %55 Binding 55 
                                               OpDecorate vs_TEXCOORD0 Location 80 
                                               OpDecorate vs_TEXCOORD1 Location 88 
                                               OpDecorate %104 Location 104 
                                               OpDecorate vs_TEXCOORD2 Location 134 
                                               OpDecorate %209 Location 209 
                                               OpDecorate vs_TEXCOORDn0 Location 213 
                                        %2 = OpTypeVoid 
                                        %3 = OpTypeFunction %2 
                                        %6 = OpTypeFloat 32 
                                        %7 = OpTypeVector %6 4 
                                        %8 = OpTypePointer Private %7 
                         Private f32_4* %9 = OpVariable Private 
                                       %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                       %11 = OpTypePointer UniformConstant %10 
  UniformConstant read_only Texture2D* %12 = OpVariable UniformConstant 
                                       %14 = OpTypeSampler 
                                       %15 = OpTypePointer UniformConstant %14 
              UniformConstant sampler* %16 = OpVariable UniformConstant 
                                       %18 = OpTypeSampledImage %10 
                                       %20 = OpTypePointer Input %7 
                 Input f32_4* vs_TEXCOORD3 = OpVariable Input 
                                       %22 = OpTypeVector %6 2 
                                       %26 = OpTypeInt 32 0 
                                   u32 %27 = OpConstant 3 
                                   u32 %29 = OpConstant 0 
                                       %30 = OpTypePointer Private %6 
                                       %34 = OpTypePointer Input %22 
                 Input f32_2* vs_TEXCOORD4 = OpVariable Input 
                                       %36 = OpTypePointer Input %6 
                                   u32 %40 = OpConstant 1 
                                   f32 %48 = OpConstant 3.674022E-40 
                                   f32 %49 = OpConstant 3.674022E-40 
                        Private f32_4* %52 = OpVariable Private 
                                       %53 = OpTypeStruct %7 %7 %7 
                                       %54 = OpTypePointer Uniform %53 
Uniform struct {f32_4; f32_4; f32_4;}* %55 = OpVariable Uniform 
                                       %56 = OpTypeInt 32 1 
                                   i32 %57 = OpConstant 1 
                                       %58 = OpTypeVector %6 3 
                                       %59 = OpTypePointer Uniform %7 
                                       %69 = OpTypePointer Uniform %6 
                 Input f32_4* vs_TEXCOORD0 = OpVariable Input 
                 Input f32_4* vs_TEXCOORD1 = OpVariable Input 
                       Private f32_4* %101 = OpVariable Private 
                         Input f32_4* %104 = OpVariable Input 
                                  i32 %121 = OpConstant 2 
                 Input f32_4* vs_TEXCOORD2 = OpVariable Input 
                                  u32 %168 = OpConstant 2 
                                  f32 %172 = OpConstant 3.674022E-40 
                                      %175 = OpTypeBool 
                                      %176 = OpTypePointer Private %175 
                        Private bool* %177 = OpVariable Private 
                                  i32 %182 = OpConstant 0 
                                  i32 %184 = OpConstant -1 
                         Private f32* %202 = OpVariable Private 
                                      %208 = OpTypePointer Output %7 
                        Output f32_4* %209 = OpVariable Output 
                                      %211 = OpTypePointer Output %6 
                  Input f32* vs_TEXCOORDn0 = OpVariable Input 
                                   void %4 = OpFunction None %3 
                                        %5 = OpLabel 
                   read_only Texture2D %13 = OpLoad %12 
                               sampler %17 = OpLoad %16 
            read_only Texture2DSampled %19 = OpSampledImage %13 %17 
                                 f32_4 %23 = OpLoad vs_TEXCOORD3 
                                 f32_2 %24 = OpVectorShuffle %23 %23 0 1 
                                 f32_4 %25 = OpImageSampleImplicitLod %19 %24 
                                   f32 %28 = OpCompositeExtract %25 3 
                          Private f32* %31 = OpAccessChain %9 %29 
                                               OpStore %31 %28 
                          Private f32* %32 = OpAccessChain %9 %29 
                                   f32 %33 = OpLoad %32 
                            Input f32* %37 = OpAccessChain vs_TEXCOORD4 %29 
                                   f32 %38 = OpLoad %37 
                                   f32 %39 = OpFMul %33 %38 
                            Input f32* %41 = OpAccessChain vs_TEXCOORD4 %40 
                                   f32 %42 = OpLoad %41 
                                   f32 %43 = OpFNegate %42 
                                   f32 %44 = OpFAdd %39 %43 
                          Private f32* %45 = OpAccessChain %9 %29 
                                               OpStore %45 %44 
                          Private f32* %46 = OpAccessChain %9 %29 
                                   f32 %47 = OpLoad %46 
                                   f32 %50 = OpExtInst %1 43 %47 %48 %49 
                          Private f32* %51 = OpAccessChain %9 %29 
                                               OpStore %51 %50 
                        Uniform f32_4* %60 = OpAccessChain %55 %57 
                                 f32_4 %61 = OpLoad %60 
                                 f32_3 %62 = OpVectorShuffle %61 %61 3 3 3 
                        Uniform f32_4* %63 = OpAccessChain %55 %57 
                                 f32_4 %64 = OpLoad %63 
                                 f32_3 %65 = OpVectorShuffle %64 %64 0 1 2 
                                 f32_3 %66 = OpFMul %62 %65 
                                 f32_4 %67 = OpLoad %52 
                                 f32_4 %68 = OpVectorShuffle %67 %66 4 5 6 3 
                                               OpStore %52 %68 
                          Uniform f32* %70 = OpAccessChain %55 %57 %27 
                                   f32 %71 = OpLoad %70 
                          Private f32* %72 = OpAccessChain %52 %27 
                                               OpStore %72 %71 
                                 f32_4 %73 = OpLoad %9 
                                 f32_4 %74 = OpVectorShuffle %73 %73 0 0 0 0 
                                 f32_4 %75 = OpLoad %52 
                                 f32_4 %76 = OpFMul %74 %75 
                                               OpStore %9 %76 
                   read_only Texture2D %77 = OpLoad %12 
                               sampler %78 = OpLoad %16 
            read_only Texture2DSampled %79 = OpSampledImage %77 %78 
                                 f32_4 %81 = OpLoad vs_TEXCOORD0 
                                 f32_2 %82 = OpVectorShuffle %81 %81 0 1 
                                 f32_4 %83 = OpImageSampleImplicitLod %79 %82 
                                   f32 %84 = OpCompositeExtract %83 3 
                          Private f32* %85 = OpAccessChain %52 %29 
                                               OpStore %85 %84 
                          Private f32* %86 = OpAccessChain %52 %29 
                                   f32 %87 = OpLoad %86 
                            Input f32* %89 = OpAccessChain vs_TEXCOORD1 %29 
                                   f32 %90 = OpLoad %89 
                                   f32 %91 = OpFMul %87 %90 
                            Input f32* %92 = OpAccessChain vs_TEXCOORD1 %27 
                                   f32 %93 = OpLoad %92 
                                   f32 %94 = OpFNegate %93 
                                   f32 %95 = OpFAdd %91 %94 
                          Private f32* %96 = OpAccessChain %52 %29 
                                               OpStore %96 %95 
                          Private f32* %97 = OpAccessChain %52 %29 
                                   f32 %98 = OpLoad %97 
                                   f32 %99 = OpExtInst %1 43 %98 %48 %49 
                         Private f32* %100 = OpAccessChain %52 %29 
                                               OpStore %100 %99 
                                f32_4 %102 = OpLoad %52 
                                f32_4 %103 = OpVectorShuffle %102 %102 0 0 0 0 
                                f32_4 %105 = OpLoad %104 
                                f32_4 %106 = OpFMul %103 %105 
                                               OpStore %101 %106 
                           Input f32* %107 = OpAccessChain %104 %27 
                                  f32 %108 = OpLoad %107 
                                  f32 %109 = OpFNegate %108 
                         Private f32* %110 = OpAccessChain %52 %29 
                                  f32 %111 = OpLoad %110 
                                  f32 %112 = OpFMul %109 %111 
                                  f32 %113 = OpFAdd %112 %49 
                         Private f32* %114 = OpAccessChain %52 %29 
                                               OpStore %114 %113 
                                f32_4 %115 = OpLoad %9 
                                f32_4 %116 = OpLoad %52 
                                f32_4 %117 = OpVectorShuffle %116 %116 0 0 0 0 
                                f32_4 %118 = OpFMul %115 %117 
                                f32_4 %119 = OpLoad %101 
                                f32_4 %120 = OpFAdd %118 %119 
                                               OpStore %9 %120 
                       Uniform f32_4* %122 = OpAccessChain %55 %121 
                                f32_4 %123 = OpLoad %122 
                                f32_2 %124 = OpVectorShuffle %123 %123 0 1 
                                f32_2 %125 = OpFNegate %124 
                       Uniform f32_4* %126 = OpAccessChain %55 %121 
                                f32_4 %127 = OpLoad %126 
                                f32_2 %128 = OpVectorShuffle %127 %127 2 3 
                                f32_2 %129 = OpFAdd %125 %128 
                                f32_4 %130 = OpLoad %52 
                                f32_4 %131 = OpVectorShuffle %130 %129 4 5 2 3 
                                               OpStore %52 %131 
                                f32_4 %132 = OpLoad %52 
                                f32_2 %133 = OpVectorShuffle %132 %132 0 1 
                                f32_4 %135 = OpLoad vs_TEXCOORD2 
                                f32_2 %136 = OpVectorShuffle %135 %135 0 1 
                                f32_2 %137 = OpExtInst %1 4 %136 
                                f32_2 %138 = OpFNegate %137 
                                f32_2 %139 = OpFAdd %133 %138 
                                f32_4 %140 = OpLoad %52 
                                f32_4 %141 = OpVectorShuffle %140 %139 4 5 2 3 
                                               OpStore %52 %141 
                                f32_4 %142 = OpLoad %52 
                                f32_2 %143 = OpVectorShuffle %142 %142 0 1 
                                f32_4 %144 = OpLoad vs_TEXCOORD2 
                                f32_2 %145 = OpVectorShuffle %144 %144 2 3 
                                f32_2 %146 = OpFMul %143 %145 
                                f32_4 %147 = OpLoad %52 
                                f32_4 %148 = OpVectorShuffle %147 %146 4 5 2 3 
                                               OpStore %52 %148 
                                f32_4 %149 = OpLoad %52 
                                f32_2 %150 = OpVectorShuffle %149 %149 0 1 
                                f32_2 %151 = OpCompositeConstruct %48 %48 
                                f32_2 %152 = OpCompositeConstruct %49 %49 
                                f32_2 %153 = OpExtInst %1 43 %150 %151 %152 
                                f32_4 %154 = OpLoad %52 
                                f32_4 %155 = OpVectorShuffle %154 %153 4 5 2 3 
                                               OpStore %52 %155 
                         Private f32* %156 = OpAccessChain %52 %40 
                                  f32 %157 = OpLoad %156 
                         Private f32* %158 = OpAccessChain %52 %29 
                                  f32 %159 = OpLoad %158 
                                  f32 %160 = OpFMul %157 %159 
                         Private f32* %161 = OpAccessChain %52 %29 
                                               OpStore %161 %160 
                                f32_4 %162 = OpLoad %9 
                                f32_4 %163 = OpLoad %52 
                                f32_4 %164 = OpVectorShuffle %163 %163 0 0 0 0 
                                f32_4 %165 = OpFMul %162 %164 
                                               OpStore %9 %165 
                         Private f32* %166 = OpAccessChain %9 %27 
                                  f32 %167 = OpLoad %166 
                           Input f32* %169 = OpAccessChain vs_TEXCOORD3 %168 
                                  f32 %170 = OpLoad %169 
                                  f32 %171 = OpFMul %167 %170 
                                  f32 %173 = OpFAdd %171 %172 
                         Private f32* %174 = OpAccessChain %52 %29 
                                               OpStore %174 %173 
                         Private f32* %178 = OpAccessChain %52 %29 
                                  f32 %179 = OpLoad %178 
                                 bool %180 = OpFOrdLessThan %179 %48 
                                               OpStore %177 %180 
                                 bool %181 = OpLoad %177 
                                  i32 %183 = OpSelect %181 %57 %182 
                                  i32 %185 = OpIMul %183 %184 
                                 bool %186 = OpINotEqual %185 %182 
                                               OpSelectionMerge %188 None 
                                               OpBranchConditional %186 %187 %188 
                                      %187 = OpLabel 
                                               OpKill
                                      %188 = OpLabel 
                                f32_4 %190 = OpLoad %9 
                                f32_3 %191 = OpVectorShuffle %190 %190 0 1 2 
                                f32_4 %192 = OpLoad vs_TEXCOORD3 
                                f32_3 %193 = OpVectorShuffle %192 %192 2 2 2 
                                f32_3 %194 = OpFMul %191 %193 
                       Uniform f32_4* %195 = OpAccessChain %55 %182 
                                f32_4 %196 = OpLoad %195 
                                f32_3 %197 = OpVectorShuffle %196 %196 0 1 2 
                                f32_3 %198 = OpFNegate %197 
                                f32_3 %199 = OpFAdd %194 %198 
                                f32_4 %200 = OpLoad %9 
                                f32_4 %201 = OpVectorShuffle %200 %199 4 5 6 3 
                                               OpStore %9 %201 
                         Private f32* %203 = OpAccessChain %9 %27 
                                  f32 %204 = OpLoad %203 
                           Input f32* %205 = OpAccessChain vs_TEXCOORD3 %168 
                                  f32 %206 = OpLoad %205 
                                  f32 %207 = OpFMul %204 %206 
                                               OpStore %202 %207 
                                  f32 %210 = OpLoad %202 
                          Output f32* %212 = OpAccessChain %209 %27 
                                               OpStore %212 %210 
                                  f32 %214 = OpLoad vs_TEXCOORDn0 
                                               OpStore %202 %214 
                                  f32 %215 = OpLoad %202 
                                  f32 %216 = OpExtInst %1 43 %215 %48 %49 
                                               OpStore %202 %216 
                                  f32 %217 = OpLoad %202 
                                f32_3 %218 = OpCompositeConstruct %217 %217 %217 
                                f32_4 %219 = OpLoad %9 
                                f32_3 %220 = OpVectorShuffle %219 %219 0 1 2 
                                f32_3 %221 = OpFMul %218 %220 
                       Uniform f32_4* %222 = OpAccessChain %55 %182 
                                f32_4 %223 = OpLoad %222 
                                f32_3 %224 = OpVectorShuffle %223 %223 0 1 2 
                                f32_3 %225 = OpFAdd %221 %224 
                                f32_4 %226 = OpLoad %209 
                                f32_4 %227 = OpVectorShuffle %226 %225 4 5 6 3 
                                               OpStore %209 %227 
                                               OpReturn
                                               OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "FOG_LINEAR" "OUTLINE_ON" "UNDERLAY_ON" "UNITY_UI_ALPHACLIP" "UNITY_UI_CLIP_RECT" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "FOG_LINEAR" "OUTLINE_ON" "UNDERLAY_ON" "UNITY_UI_ALPHACLIP" "UNITY_UI_CLIP_RECT" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	vec4 _FaceColor;
uniform 	float _FaceDilate;
uniform 	float _OutlineSoftness;
uniform 	vec4 _OutlineColor;
uniform 	float _OutlineWidth;
uniform 	float _UnderlayOffsetX;
uniform 	float _UnderlayOffsetY;
uniform 	float _UnderlayDilate;
uniform 	float _UnderlaySoftness;
uniform 	float _WeightNormal;
uniform 	float _WeightBold;
uniform 	float _ScaleRatioA;
uniform 	float _ScaleRatioC;
uniform 	float _VertexOffsetX;
uniform 	float _VertexOffsetY;
uniform 	vec4 _ClipRect;
uniform 	float _MaskSoftnessX;
uniform 	float _MaskSoftnessY;
uniform 	float _TextureWidth;
uniform 	float _TextureHeight;
uniform 	float _GradientScale;
uniform 	float _ScaleX;
uniform 	float _ScaleY;
uniform 	float _PerspectiveFilter;
uniform 	float _Sharpness;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_COLOR0;
in  vec2 in_TEXCOORD0;
in  vec2 in_TEXCOORD1;
out vec4 vs_COLOR0;
out vec4 vs_COLOR1;
out vec4 vs_TEXCOORD0;
out vec4 vs_TEXCOORD1;
out vec4 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec2 vs_TEXCOORD4;
out float vs_TEXCOORDn0;
vec2 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
vec4 u_xlat6;
vec3 u_xlat7;
vec2 u_xlat8;
float u_xlat14;
float u_xlat15;
float u_xlat21;
bool u_xlatb21;
void main()
{
    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
    gl_Position = u_xlat2;
    vs_COLOR0.w = _FaceColor.w;
    u_xlat3.xyz = in_COLOR0.xyz;
    u_xlat3.w = 1.0;
    u_xlat4 = u_xlat3 * _FaceColor;
    u_xlat3.xyz = u_xlat4.www * u_xlat4.xyz;
    vs_COLOR0.xyz = u_xlat3.xyz;
    u_xlat5.xyz = (-u_xlat3.xyz);
    u_xlat5.w = (-u_xlat4.w);
    u_xlat6.xyz = _OutlineColor.www * _OutlineColor.xyz;
    u_xlat6.w = _OutlineColor.w;
    u_xlat5 = u_xlat5 + u_xlat6;
    u_xlat14 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat14 = inversesqrt(u_xlat14);
    u_xlat1.xyz = vec3(u_xlat14) * u_xlat1.xyz;
    u_xlat3.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat3.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat3.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat14 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat14 = inversesqrt(u_xlat14);
    u_xlat3.xyz = vec3(u_xlat14) * u_xlat3.xyz;
    u_xlat14 = dot(u_xlat3.xyz, u_xlat1.xyz);
    u_xlat1.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;
    u_xlat1.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat1.xy;
    u_xlat1.xy = abs(u_xlat1.xy) * vec2(_ScaleX, _ScaleY);
    u_xlat1.xy = u_xlat2.ww / u_xlat1.xy;
    vs_TEXCOORDn0 = u_xlat2.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat21 = dot(u_xlat1.xy, u_xlat1.xy);
    u_xlat1.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) * vec2(0.25, 0.25) + u_xlat1.xy;
    vs_TEXCOORD2.zw = vec2(0.25, 0.25) / u_xlat1.xy;
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.x = abs(in_TEXCOORD1.y) * _GradientScale;
    u_xlat8.x = _Sharpness + 1.0;
    u_xlat1.x = u_xlat8.x * u_xlat1.x;
    u_xlat8.x = u_xlat21 * u_xlat1.x;
    u_xlat15 = (-_PerspectiveFilter) + 1.0;
    u_xlat15 = u_xlat15 * abs(u_xlat8.x);
    u_xlat21 = u_xlat21 * u_xlat1.x + (-u_xlat15);
    u_xlat14 = abs(u_xlat14) * u_xlat21 + u_xlat15;
    u_xlatb21 = hlslcc_mtx4x4glstate_matrix_projection[3].w==0.0;
    u_xlat14 = (u_xlatb21) ? u_xlat14 : u_xlat8.x;
    u_xlat21 = _OutlineSoftness * _ScaleRatioA;
    u_xlat21 = u_xlat21 * u_xlat14 + 1.0;
    u_xlat1.x = u_xlat14 / u_xlat21;
    u_xlat21 = _OutlineWidth * _ScaleRatioA;
    u_xlat21 = u_xlat21 * 0.5;
    u_xlat8.x = u_xlat1.x * u_xlat21;
    u_xlat8.x = u_xlat8.x + u_xlat8.x;
    u_xlat8.x = min(u_xlat8.x, 1.0);
    u_xlat8.x = sqrt(u_xlat8.x);
    u_xlat2 = u_xlat5 * u_xlat8.xxxx;
    vs_COLOR1.xyz = u_xlat4.xyz * u_xlat4.www + u_xlat2.xyz;
    vs_COLOR1.w = u_xlat3.w * _FaceColor.w + u_xlat2.w;
    u_xlat2 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));
    u_xlat2 = min(u_xlat2, vec4(2e+10, 2e+10, 2e+10, 2e+10));
    u_xlat8.xy = u_xlat0.xy + (-u_xlat2.xy);
    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + (-u_xlat2.xy);
    vs_TEXCOORD2.xy = (-u_xlat2.zw) + u_xlat0.xy;
    u_xlat0.xy = (-u_xlat2.xy) + u_xlat2.zw;
    vs_TEXCOORD0.zw = u_xlat8.xy / u_xlat0.xy;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlatb0 = 0.0>=in_TEXCOORD1.y;
    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);
    u_xlat7.x = (-_WeightNormal) + _WeightBold;
    u_xlat0.x = u_xlat0.x * u_xlat7.x + _WeightNormal;
    u_xlat0.x = u_xlat0.x * 0.25 + _FaceDilate;
    u_xlat0.x = u_xlat0.x * _ScaleRatioA;
    u_xlat0.x = (-u_xlat0.x) * 0.5 + 0.5;
    u_xlat1.w = u_xlat0.x * u_xlat1.x + -0.5;
    vs_TEXCOORD1.y = (-u_xlat21) * u_xlat1.x + u_xlat1.w;
    vs_TEXCOORD1.z = u_xlat21 * u_xlat1.x + u_xlat1.w;
    vs_TEXCOORD1.xw = u_xlat1.xw;
    vs_TEXCOORD3.z = in_COLOR0.w;
    vs_TEXCOORD3.w = 0.0;
    u_xlat1 = vec4(_UnderlaySoftness, _UnderlayDilate, _UnderlayOffsetX, _UnderlayOffsetY) * vec4(vec4(_ScaleRatioC, _ScaleRatioC, _ScaleRatioC, _ScaleRatioC));
    u_xlat7.xz = (-u_xlat1.zw) * vec2(_GradientScale);
    u_xlat7.xz = u_xlat7.xz / vec2(_TextureWidth, _TextureHeight);
    vs_TEXCOORD3.xy = u_xlat7.xz + in_TEXCOORD0.xy;
    u_xlat7.x = u_xlat1.x * u_xlat14 + 1.0;
    u_xlat7.x = u_xlat14 / u_xlat7.x;
    u_xlat14 = u_xlat1.y * 0.5;
    u_xlat0.x = u_xlat0.x * u_xlat7.x + -0.5;
    vs_TEXCOORD4.y = (-u_xlat14) * u_xlat7.x + u_xlat0.x;
    vs_TEXCOORD4.x = u_xlat7.x;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 unity_FogColor;
uniform 	vec4 _UnderlayColor;
uniform 	vec4 _ClipRect;
UNITY_LOCATION(0) uniform  sampler2D _MainTex;
in  vec4 vs_COLOR0;
in  vec4 vs_COLOR1;
in  vec4 vs_TEXCOORD0;
in  vec4 vs_TEXCOORD1;
in  vec4 vs_TEXCOORD2;
in  vec4 vs_TEXCOORD3;
in  vec2 vs_TEXCOORD4;
in  float vs_TEXCOORDn0;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
vec4 u_xlat3;
float u_xlat12;
void main()
{
    u_xlat0 = texture(_MainTex, vs_TEXCOORD3.xy);
    u_xlat0.x = u_xlat0.w * vs_TEXCOORD4.x + (-vs_TEXCOORD4.y);
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat1.xyz = _UnderlayColor.www * _UnderlayColor.xyz;
    u_xlat1.w = _UnderlayColor.w;
    u_xlat0 = u_xlat0.xxxx * u_xlat1;
    u_xlat1 = vs_COLOR0 + (-vs_COLOR1);
    u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2.xy = u_xlat2.ww * vs_TEXCOORD1.xx + (-vs_TEXCOORD1.zy);
    u_xlat2.xy = clamp(u_xlat2.xy, 0.0, 1.0);
    u_xlat1 = u_xlat2.xxxx * u_xlat1 + vs_COLOR1;
    u_xlat3 = u_xlat2.yyyy * u_xlat1;
    u_xlat1.x = (-u_xlat1.w) * u_xlat2.y + 1.0;
    u_xlat0 = u_xlat0 * u_xlat1.xxxx + u_xlat3;
    u_xlat1.xy = (-_ClipRect.xy) + _ClipRect.zw;
    u_xlat1.xy = u_xlat1.xy + -abs(vs_TEXCOORD2.xy);
    u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD2.zw;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
    u_xlat1.x = u_xlat1.y * u_xlat1.x;
    u_xlat0 = u_xlat0 * u_xlat1.xxxx;
    u_xlat1.x = u_xlat0.w * vs_TEXCOORD3.z + -0.00100000005;
    u_xlatb1 = u_xlat1.x<0.0;
    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
    u_xlat0.xyz = u_xlat0.xyz * vs_TEXCOORD3.zzz + (-unity_FogColor.xyz);
    u_xlat12 = u_xlat0.w * vs_TEXCOORD3.z;
    SV_Target0.w = u_xlat12;
    u_xlat12 = vs_TEXCOORDn0;
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
    SV_Target0.xyz = vec3(u_xlat12) * u_xlat0.xyz + unity_FogColor.xyz;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "FOG_LINEAR" "OUTLINE_ON" "UNDERLAY_ON" "UNITY_UI_ALPHACLIP" "UNITY_UI_CLIP_RECT" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 677
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %12 %118 %122 %129 %196 %295 %324 %333 %436 %492 %498 %558 %576 %661 
                                                      OpName vs_TEXCOORDn0 "vs_TEXCOORDn0" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpDecorate %12 Location 12 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpDecorate %19 ArrayStride 19 
                                                      OpDecorate %20 ArrayStride 20 
                                                      OpDecorate %21 ArrayStride 21 
                                                      OpMemberDecorate %22 0 Offset 22 
                                                      OpMemberDecorate %22 1 Offset 22 
                                                      OpMemberDecorate %22 2 Offset 22 
                                                      OpMemberDecorate %22 3 Offset 22 
                                                      OpMemberDecorate %22 4 Offset 22 
                                                      OpMemberDecorate %22 5 Offset 22 
                                                      OpMemberDecorate %22 6 Offset 22 
                                                      OpMemberDecorate %22 7 Offset 22 
                                                      OpMemberDecorate %22 8 Offset 22 
                                                      OpMemberDecorate %22 9 Offset 22 
                                                      OpMemberDecorate %22 10 Offset 22 
                                                      OpMemberDecorate %22 11 Offset 22 
                                                      OpMemberDecorate %22 12 Offset 22 
                                                      OpMemberDecorate %22 13 Offset 22 
                                                      OpMemberDecorate %22 14 Offset 22 
                                                      OpMemberDecorate %22 15 Offset 22 
                                                      OpMemberDecorate %22 16 Offset 22 
                                                      OpMemberDecorate %22 17 Offset 22 
                                                      OpMemberDecorate %22 18 Offset 22 
                                                      OpMemberDecorate %22 19 Offset 22 
                                                      OpMemberDecorate %22 20 Offset 22 
                                                      OpMemberDecorate %22 21 Offset 22 
                                                      OpMemberDecorate %22 22 Offset 22 
                                                      OpMemberDecorate %22 23 Offset 22 
                                                      OpMemberDecorate %22 24 Offset 22 
                                                      OpMemberDecorate %22 25 Offset 22 
                                                      OpMemberDecorate %22 26 Offset 22 
                                                      OpMemberDecorate %22 27 Offset 22 
                                                      OpMemberDecorate %22 28 Offset 22 
                                                      OpMemberDecorate %22 29 Offset 22 
                                                      OpMemberDecorate %22 30 Offset 22 
                                                      OpMemberDecorate %22 31 Offset 22 
                                                      OpMemberDecorate %22 32 Offset 22 
                                                      OpDecorate %22 Block 
                                                      OpDecorate %24 DescriptorSet 24 
                                                      OpDecorate %24 Binding 24 
                                                      OpMemberDecorate %116 0 BuiltIn 116 
                                                      OpMemberDecorate %116 1 BuiltIn 116 
                                                      OpMemberDecorate %116 2 BuiltIn 116 
                                                      OpDecorate %116 Block 
                                                      OpDecorate %122 Location 122 
                                                      OpDecorate %129 Location 129 
                                                      OpDecorate %196 Location 196 
                                                      OpDecorate vs_TEXCOORDn0 Location 295 
                                                      OpDecorate vs_TEXCOORD2 Location 324 
                                                      OpDecorate %333 Location 333 
                                                      OpDecorate %436 Location 436 
                                                      OpDecorate vs_TEXCOORD0 Location 492 
                                                      OpDecorate %498 Location 498 
                                                      OpDecorate vs_TEXCOORD1 Location 558 
                                                      OpDecorate vs_TEXCOORD3 Location 576 
                                                      OpDecorate vs_TEXCOORD4 Location 661 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 2 
                                               %8 = OpTypePointer Private %7 
                                Private f32_2* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 4 
                                              %11 = OpTypePointer Input %10 
                                 Input f32_4* %12 = OpVariable Input 
                                              %15 = OpTypeVector %6 3 
                                              %16 = OpTypeInt 32 0 
                                          u32 %17 = OpConstant 4 
                                              %18 = OpTypeArray %10 %17 
                                              %19 = OpTypeArray %10 %17 
                                              %20 = OpTypeArray %10 %17 
                                              %21 = OpTypeArray %10 %17 
                                              %22 = OpTypeStruct %15 %10 %10 %18 %19 %20 %21 %10 %10 %6 %6 %10 %6 %6 %6 %6 %6 %6 %6 %6 %6 %6 %6 %10 %6 %6 %6 %6 %6 %6 %6 %6 %6 
                                              %23 = OpTypePointer Uniform %22 
Uniform struct {f32_3; f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32_4[4]; f32_4; f32_4; f32; f32; f32_4; f32; f32; f32; f32; f32; f32; f32; f32; f32; f32; f32; f32_4; f32; f32; f32; f32; f32; f32; f32; f32; f32;}* %24 = OpVariable Uniform 
                                              %25 = OpTypeInt 32 1 
                                          i32 %26 = OpConstant 21 
                                              %27 = OpTypePointer Uniform %6 
                                          i32 %30 = OpConstant 22 
                                              %35 = OpTypePointer Private %10 
                               Private f32_4* %36 = OpVariable Private 
                                          i32 %39 = OpConstant 3 
                                          i32 %40 = OpConstant 1 
                                              %41 = OpTypePointer Uniform %10 
                                          i32 %45 = OpConstant 0 
                                          i32 %53 = OpConstant 2 
                               Private f32_4* %61 = OpVariable Private 
                                              %80 = OpTypePointer Uniform %15 
                               Private f32_4* %86 = OpVariable Private 
                                          i32 %89 = OpConstant 6 
                                         u32 %114 = OpConstant 1 
                                             %115 = OpTypeArray %6 %114 
                                             %116 = OpTypeStruct %10 %6 %115 
                                             %117 = OpTypePointer Output %116 
        Output struct {f32_4; f32; f32[1];}* %118 = OpVariable Output 
                                             %120 = OpTypePointer Output %10 
                               Output f32_4* %122 = OpVariable Output 
                                         i32 %123 = OpConstant 8 
                                         u32 %124 = OpConstant 3 
                                             %127 = OpTypePointer Output %6 
                                Input f32_4* %129 = OpVariable Input 
                                         f32 %134 = OpConstant 3.674022E-40 
                                             %135 = OpTypePointer Private %6 
                              Private f32_4* %137 = OpVariable Private 
                              Private f32_4* %153 = OpVariable Private 
                              Private f32_4* %163 = OpVariable Private 
                                         i32 %164 = OpConstant 11 
                                Private f32* %180 = OpVariable Private 
                                             %195 = OpTypePointer Input %15 
                                Input f32_3* %196 = OpVariable Input 
                                         i32 %198 = OpConstant 4 
                                         u32 %203 = OpConstant 0 
                                         u32 %216 = OpConstant 2 
                                         i32 %240 = OpConstant 5 
                                         i32 %262 = OpConstant 29 
                                         i32 %265 = OpConstant 30 
                                Private f32* %279 = OpVariable Private 
                                         f32 %293 = OpConstant 3.674022E-40 
                        Output f32* vs_TEXCOORDn0 = OpVariable Output 
                                         i32 %297 = OpConstant 7 
                                         i32 %309 = OpConstant 24 
                                         i32 %312 = OpConstant 25 
                                         f32 %316 = OpConstant 3.674022E-40 
                                       f32_2 %317 = OpConstantComposite %316 %316 
                       Output f32_4* vs_TEXCOORD2 = OpVariable Output 
                                             %332 = OpTypePointer Input %7 
                                Input f32_2* %333 = OpVariable Input 
                                             %334 = OpTypePointer Input %6 
                                         i32 %338 = OpConstant 28 
                              Private f32_2* %343 = OpVariable Private 
                                         i32 %344 = OpConstant 32 
                                Private f32* %360 = OpVariable Private 
                                         i32 %361 = OpConstant 31 
                                             %384 = OpTypeBool 
                                             %385 = OpTypePointer Private %384 
                               Private bool* %386 = OpVariable Private 
                                             %391 = OpTypePointer Function %6 
                                         i32 %400 = OpConstant 10 
                                         i32 %403 = OpConstant 19 
                                         i32 %415 = OpConstant 12 
                               Output f32_4* %436 = OpVariable Output 
                                         i32 %456 = OpConstant 23 
                                         f32 %459 = OpConstant 3.674022E-40 
                                       f32_4 %460 = OpConstantComposite %459 %459 %459 %459 
                                         f32 %463 = OpConstant 3.674022E-40 
                                       f32_4 %464 = OpConstantComposite %463 %463 %463 %463 
                                         f32 %472 = OpConstant 3.674022E-40 
                                       f32_2 %473 = OpConstantComposite %472 %472 
                       Output f32_4* vs_TEXCOORD0 = OpVariable Output 
                                Input f32_2* %498 = OpVariable Input 
                               Private bool* %502 = OpVariable Private 
                                             %509 = OpTypePointer Private %15 
                              Private f32_3* %510 = OpVariable Private 
                                         i32 %511 = OpConstant 17 
                                         i32 %515 = OpConstant 18 
                                         i32 %532 = OpConstant 9 
                                         f32 %546 = OpConstant 3.674022E-40 
                                         f32 %555 = OpConstant 3.674022E-40 
                       Output f32_4* vs_TEXCOORD1 = OpVariable Output 
                       Output f32_4* vs_TEXCOORD3 = OpVariable Output 
                                         i32 %581 = OpConstant 16 
                                         i32 %584 = OpConstant 15 
                                         i32 %587 = OpConstant 13 
                                         i32 %590 = OpConstant 14 
                                         i32 %594 = OpConstant 20 
                                         i32 %621 = OpConstant 26 
                                         i32 %624 = OpConstant 27 
                                             %660 = OpTypePointer Output %7 
                       Output f32_2* vs_TEXCOORD4 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                               Function f32* %392 = OpVariable Function 
                                        f32_4 %13 = OpLoad %12 
                                        f32_2 %14 = OpVectorShuffle %13 %13 0 1 
                                 Uniform f32* %28 = OpAccessChain %24 %26 
                                          f32 %29 = OpLoad %28 
                                 Uniform f32* %31 = OpAccessChain %24 %30 
                                          f32 %32 = OpLoad %31 
                                        f32_2 %33 = OpCompositeConstruct %29 %32 
                                        f32_2 %34 = OpFAdd %14 %33 
                                                      OpStore %9 %34 
                                        f32_2 %37 = OpLoad %9 
                                        f32_4 %38 = OpVectorShuffle %37 %37 1 1 1 1 
                               Uniform f32_4* %42 = OpAccessChain %24 %39 %40 
                                        f32_4 %43 = OpLoad %42 
                                        f32_4 %44 = OpFMul %38 %43 
                                                      OpStore %36 %44 
                               Uniform f32_4* %46 = OpAccessChain %24 %39 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_2 %48 = OpLoad %9 
                                        f32_4 %49 = OpVectorShuffle %48 %48 0 0 0 0 
                                        f32_4 %50 = OpFMul %47 %49 
                                        f32_4 %51 = OpLoad %36 
                                        f32_4 %52 = OpFAdd %50 %51 
                                                      OpStore %36 %52 
                               Uniform f32_4* %54 = OpAccessChain %24 %39 %53 
                                        f32_4 %55 = OpLoad %54 
                                        f32_4 %56 = OpLoad %12 
                                        f32_4 %57 = OpVectorShuffle %56 %56 2 2 2 2 
                                        f32_4 %58 = OpFMul %55 %57 
                                        f32_4 %59 = OpLoad %36 
                                        f32_4 %60 = OpFAdd %58 %59 
                                                      OpStore %36 %60 
                                        f32_4 %62 = OpLoad %36 
                               Uniform f32_4* %63 = OpAccessChain %24 %39 %39 
                                        f32_4 %64 = OpLoad %63 
                                        f32_4 %65 = OpFAdd %62 %64 
                                                      OpStore %61 %65 
                               Uniform f32_4* %66 = OpAccessChain %24 %39 %39 
                                        f32_4 %67 = OpLoad %66 
                                        f32_3 %68 = OpVectorShuffle %67 %67 0 1 2 
                                        f32_4 %69 = OpLoad %12 
                                        f32_3 %70 = OpVectorShuffle %69 %69 3 3 3 
                                        f32_3 %71 = OpFMul %68 %70 
                                        f32_4 %72 = OpLoad %36 
                                        f32_3 %73 = OpVectorShuffle %72 %72 0 1 2 
                                        f32_3 %74 = OpFAdd %71 %73 
                                        f32_4 %75 = OpLoad %36 
                                        f32_4 %76 = OpVectorShuffle %75 %74 4 5 6 3 
                                                      OpStore %36 %76 
                                        f32_4 %77 = OpLoad %36 
                                        f32_3 %78 = OpVectorShuffle %77 %77 0 1 2 
                                        f32_3 %79 = OpFNegate %78 
                               Uniform f32_3* %81 = OpAccessChain %24 %45 
                                        f32_3 %82 = OpLoad %81 
                                        f32_3 %83 = OpFAdd %79 %82 
                                        f32_4 %84 = OpLoad %36 
                                        f32_4 %85 = OpVectorShuffle %84 %83 4 5 6 3 
                                                      OpStore %36 %85 
                                        f32_4 %87 = OpLoad %61 
                                        f32_4 %88 = OpVectorShuffle %87 %87 1 1 1 1 
                               Uniform f32_4* %90 = OpAccessChain %24 %89 %40 
                                        f32_4 %91 = OpLoad %90 
                                        f32_4 %92 = OpFMul %88 %91 
                                                      OpStore %86 %92 
                               Uniform f32_4* %93 = OpAccessChain %24 %89 %45 
                                        f32_4 %94 = OpLoad %93 
                                        f32_4 %95 = OpLoad %61 
                                        f32_4 %96 = OpVectorShuffle %95 %95 0 0 0 0 
                                        f32_4 %97 = OpFMul %94 %96 
                                        f32_4 %98 = OpLoad %86 
                                        f32_4 %99 = OpFAdd %97 %98 
                                                      OpStore %86 %99 
                              Uniform f32_4* %100 = OpAccessChain %24 %89 %53 
                                       f32_4 %101 = OpLoad %100 
                                       f32_4 %102 = OpLoad %61 
                                       f32_4 %103 = OpVectorShuffle %102 %102 2 2 2 2 
                                       f32_4 %104 = OpFMul %101 %103 
                                       f32_4 %105 = OpLoad %86 
                                       f32_4 %106 = OpFAdd %104 %105 
                                                      OpStore %86 %106 
                              Uniform f32_4* %107 = OpAccessChain %24 %89 %39 
                                       f32_4 %108 = OpLoad %107 
                                       f32_4 %109 = OpLoad %61 
                                       f32_4 %110 = OpVectorShuffle %109 %109 3 3 3 3 
                                       f32_4 %111 = OpFMul %108 %110 
                                       f32_4 %112 = OpLoad %86 
                                       f32_4 %113 = OpFAdd %111 %112 
                                                      OpStore %61 %113 
                                       f32_4 %119 = OpLoad %61 
                               Output f32_4* %121 = OpAccessChain %118 %45 
                                                      OpStore %121 %119 
                                Uniform f32* %125 = OpAccessChain %24 %123 %124 
                                         f32 %126 = OpLoad %125 
                                 Output f32* %128 = OpAccessChain %122 %124 
                                                      OpStore %128 %126 
                                       f32_4 %130 = OpLoad %129 
                                       f32_3 %131 = OpVectorShuffle %130 %130 0 1 2 
                                       f32_4 %132 = OpLoad %86 
                                       f32_4 %133 = OpVectorShuffle %132 %131 4 5 6 3 
                                                      OpStore %86 %133 
                                Private f32* %136 = OpAccessChain %86 %124 
                                                      OpStore %136 %134 
                                       f32_4 %138 = OpLoad %86 
                              Uniform f32_4* %139 = OpAccessChain %24 %123 
                                       f32_4 %140 = OpLoad %139 
                                       f32_4 %141 = OpFMul %138 %140 
                                                      OpStore %137 %141 
                                       f32_4 %142 = OpLoad %137 
                                       f32_3 %143 = OpVectorShuffle %142 %142 3 3 3 
                                       f32_4 %144 = OpLoad %137 
                                       f32_3 %145 = OpVectorShuffle %144 %144 0 1 2 
                                       f32_3 %146 = OpFMul %143 %145 
                                       f32_4 %147 = OpLoad %86 
                                       f32_4 %148 = OpVectorShuffle %147 %146 4 5 6 3 
                                                      OpStore %86 %148 
                                       f32_4 %149 = OpLoad %86 
                                       f32_3 %150 = OpVectorShuffle %149 %149 0 1 2 
                                       f32_4 %151 = OpLoad %122 
                                       f32_4 %152 = OpVectorShuffle %151 %150 4 5 6 3 
                                                      OpStore %122 %152 
                                       f32_4 %154 = OpLoad %86 
                                       f32_3 %155 = OpVectorShuffle %154 %154 0 1 2 
                                       f32_3 %156 = OpFNegate %155 
                                       f32_4 %157 = OpLoad %153 
                                       f32_4 %158 = OpVectorShuffle %157 %156 4 5 6 3 
                                                      OpStore %153 %158 
                                Private f32* %159 = OpAccessChain %137 %124 
                                         f32 %160 = OpLoad %159 
                                         f32 %161 = OpFNegate %160 
                                Private f32* %162 = OpAccessChain %153 %124 
                                                      OpStore %162 %161 
                              Uniform f32_4* %165 = OpAccessChain %24 %164 
                                       f32_4 %166 = OpLoad %165 
                                       f32_3 %167 = OpVectorShuffle %166 %166 3 3 3 
                              Uniform f32_4* %168 = OpAccessChain %24 %164 
                                       f32_4 %169 = OpLoad %168 
                                       f32_3 %170 = OpVectorShuffle %169 %169 0 1 2 
                                       f32_3 %171 = OpFMul %167 %170 
                                       f32_4 %172 = OpLoad %163 
                                       f32_4 %173 = OpVectorShuffle %172 %171 4 5 6 3 
                                                      OpStore %163 %173 
                                Uniform f32* %174 = OpAccessChain %24 %164 %124 
                                         f32 %175 = OpLoad %174 
                                Private f32* %176 = OpAccessChain %163 %124 
                                                      OpStore %176 %175 
                                       f32_4 %177 = OpLoad %153 
                                       f32_4 %178 = OpLoad %163 
                                       f32_4 %179 = OpFAdd %177 %178 
                                                      OpStore %153 %179 
                                       f32_4 %181 = OpLoad %36 
                                       f32_3 %182 = OpVectorShuffle %181 %181 0 1 2 
                                       f32_4 %183 = OpLoad %36 
                                       f32_3 %184 = OpVectorShuffle %183 %183 0 1 2 
                                         f32 %185 = OpDot %182 %184 
                                                      OpStore %180 %185 
                                         f32 %186 = OpLoad %180 
                                         f32 %187 = OpExtInst %1 32 %186 
                                                      OpStore %180 %187 
                                         f32 %188 = OpLoad %180 
                                       f32_3 %189 = OpCompositeConstruct %188 %188 %188 
                                       f32_4 %190 = OpLoad %36 
                                       f32_3 %191 = OpVectorShuffle %190 %190 0 1 2 
                                       f32_3 %192 = OpFMul %189 %191 
                                       f32_4 %193 = OpLoad %36 
                                       f32_4 %194 = OpVectorShuffle %193 %192 4 5 6 3 
                                                      OpStore %36 %194 
                                       f32_3 %197 = OpLoad %196 
                              Uniform f32_4* %199 = OpAccessChain %24 %198 %45 
                                       f32_4 %200 = OpLoad %199 
                                       f32_3 %201 = OpVectorShuffle %200 %200 0 1 2 
                                         f32 %202 = OpDot %197 %201 
                                Private f32* %204 = OpAccessChain %86 %203 
                                                      OpStore %204 %202 
                                       f32_3 %205 = OpLoad %196 
                              Uniform f32_4* %206 = OpAccessChain %24 %198 %40 
                                       f32_4 %207 = OpLoad %206 
                                       f32_3 %208 = OpVectorShuffle %207 %207 0 1 2 
                                         f32 %209 = OpDot %205 %208 
                                Private f32* %210 = OpAccessChain %86 %114 
                                                      OpStore %210 %209 
                                       f32_3 %211 = OpLoad %196 
                              Uniform f32_4* %212 = OpAccessChain %24 %198 %53 
                                       f32_4 %213 = OpLoad %212 
                                       f32_3 %214 = OpVectorShuffle %213 %213 0 1 2 
                                         f32 %215 = OpDot %211 %214 
                                Private f32* %217 = OpAccessChain %86 %216 
                                                      OpStore %217 %215 
                                       f32_4 %218 = OpLoad %86 
                                       f32_3 %219 = OpVectorShuffle %218 %218 0 1 2 
                                       f32_4 %220 = OpLoad %86 
                                       f32_3 %221 = OpVectorShuffle %220 %220 0 1 2 
                                         f32 %222 = OpDot %219 %221 
                                                      OpStore %180 %222 
                                         f32 %223 = OpLoad %180 
                                         f32 %224 = OpExtInst %1 32 %223 
                                                      OpStore %180 %224 
                                         f32 %225 = OpLoad %180 
                                       f32_3 %226 = OpCompositeConstruct %225 %225 %225 
                                       f32_4 %227 = OpLoad %86 
                                       f32_3 %228 = OpVectorShuffle %227 %227 0 1 2 
                                       f32_3 %229 = OpFMul %226 %228 
                                       f32_4 %230 = OpLoad %86 
                                       f32_4 %231 = OpVectorShuffle %230 %229 4 5 6 3 
                                                      OpStore %86 %231 
                                       f32_4 %232 = OpLoad %86 
                                       f32_3 %233 = OpVectorShuffle %232 %232 0 1 2 
                                       f32_4 %234 = OpLoad %36 
                                       f32_3 %235 = OpVectorShuffle %234 %234 0 1 2 
                                         f32 %236 = OpDot %233 %235 
                                                      OpStore %180 %236 
                              Uniform f32_4* %237 = OpAccessChain %24 %53 
                                       f32_4 %238 = OpLoad %237 
                                       f32_2 %239 = OpVectorShuffle %238 %238 1 1 
                              Uniform f32_4* %241 = OpAccessChain %24 %240 %40 
                                       f32_4 %242 = OpLoad %241 
                                       f32_2 %243 = OpVectorShuffle %242 %242 0 1 
                                       f32_2 %244 = OpFMul %239 %243 
                                       f32_4 %245 = OpLoad %36 
                                       f32_4 %246 = OpVectorShuffle %245 %244 4 5 2 3 
                                                      OpStore %36 %246 
                              Uniform f32_4* %247 = OpAccessChain %24 %240 %45 
                                       f32_4 %248 = OpLoad %247 
                                       f32_2 %249 = OpVectorShuffle %248 %248 0 1 
                              Uniform f32_4* %250 = OpAccessChain %24 %53 
                                       f32_4 %251 = OpLoad %250 
                                       f32_2 %252 = OpVectorShuffle %251 %251 0 0 
                                       f32_2 %253 = OpFMul %249 %252 
                                       f32_4 %254 = OpLoad %36 
                                       f32_2 %255 = OpVectorShuffle %254 %254 0 1 
                                       f32_2 %256 = OpFAdd %253 %255 
                                       f32_4 %257 = OpLoad %36 
                                       f32_4 %258 = OpVectorShuffle %257 %256 4 5 2 3 
                                                      OpStore %36 %258 
                                       f32_4 %259 = OpLoad %36 
                                       f32_2 %260 = OpVectorShuffle %259 %259 0 1 
                                       f32_2 %261 = OpExtInst %1 4 %260 
                                Uniform f32* %263 = OpAccessChain %24 %262 
                                         f32 %264 = OpLoad %263 
                                Uniform f32* %266 = OpAccessChain %24 %265 
                                         f32 %267 = OpLoad %266 
                                       f32_2 %268 = OpCompositeConstruct %264 %267 
                                       f32_2 %269 = OpFMul %261 %268 
                                       f32_4 %270 = OpLoad %36 
                                       f32_4 %271 = OpVectorShuffle %270 %269 4 5 2 3 
                                                      OpStore %36 %271 
                                       f32_4 %272 = OpLoad %61 
                                       f32_2 %273 = OpVectorShuffle %272 %272 3 3 
                                       f32_4 %274 = OpLoad %36 
                                       f32_2 %275 = OpVectorShuffle %274 %274 0 1 
                                       f32_2 %276 = OpFDiv %273 %275 
                                       f32_4 %277 = OpLoad %36 
                                       f32_4 %278 = OpVectorShuffle %277 %276 4 5 2 3 
                                                      OpStore %36 %278 
                                Private f32* %280 = OpAccessChain %61 %216 
                                         f32 %281 = OpLoad %280 
                                Uniform f32* %282 = OpAccessChain %24 %40 %114 
                                         f32 %283 = OpLoad %282 
                                         f32 %284 = OpFDiv %281 %283 
                                                      OpStore %279 %284 
                                         f32 %285 = OpLoad %279 
                                         f32 %286 = OpFNegate %285 
                                         f32 %287 = OpFAdd %286 %134 
                                                      OpStore %279 %287 
                                         f32 %288 = OpLoad %279 
                                Uniform f32* %289 = OpAccessChain %24 %40 %216 
                                         f32 %290 = OpLoad %289 
                                         f32 %291 = OpFMul %288 %290 
                                                      OpStore %279 %291 
                                         f32 %292 = OpLoad %279 
                                         f32 %294 = OpExtInst %1 40 %292 %293 
                                                      OpStore %279 %294 
                                         f32 %296 = OpLoad %279 
                                Uniform f32* %298 = OpAccessChain %24 %297 %216 
                                         f32 %299 = OpLoad %298 
                                         f32 %300 = OpFMul %296 %299 
                                Uniform f32* %301 = OpAccessChain %24 %297 %124 
                                         f32 %302 = OpLoad %301 
                                         f32 %303 = OpFAdd %300 %302 
                                                      OpStore vs_TEXCOORDn0 %303 
                                       f32_4 %304 = OpLoad %36 
                                       f32_2 %305 = OpVectorShuffle %304 %304 0 1 
                                       f32_4 %306 = OpLoad %36 
                                       f32_2 %307 = OpVectorShuffle %306 %306 0 1 
                                         f32 %308 = OpDot %305 %307 
                                                      OpStore %279 %308 
                                Uniform f32* %310 = OpAccessChain %24 %309 
                                         f32 %311 = OpLoad %310 
                                Uniform f32* %313 = OpAccessChain %24 %312 
                                         f32 %314 = OpLoad %313 
                                       f32_2 %315 = OpCompositeConstruct %311 %314 
                                       f32_2 %318 = OpFMul %315 %317 
                                       f32_4 %319 = OpLoad %36 
                                       f32_2 %320 = OpVectorShuffle %319 %319 0 1 
                                       f32_2 %321 = OpFAdd %318 %320 
                                       f32_4 %322 = OpLoad %36 
                                       f32_4 %323 = OpVectorShuffle %322 %321 4 5 2 3 
                                                      OpStore %36 %323 
                                       f32_4 %325 = OpLoad %36 
                                       f32_2 %326 = OpVectorShuffle %325 %325 0 1 
                                       f32_2 %327 = OpFDiv %317 %326 
                                       f32_4 %328 = OpLoad vs_TEXCOORD2 
                                       f32_4 %329 = OpVectorShuffle %328 %327 0 1 4 5 
                                                      OpStore vs_TEXCOORD2 %329 
                                         f32 %330 = OpLoad %279 
                                         f32 %331 = OpExtInst %1 32 %330 
                                                      OpStore %279 %331 
                                  Input f32* %335 = OpAccessChain %333 %114 
                                         f32 %336 = OpLoad %335 
                                         f32 %337 = OpExtInst %1 4 %336 
                                Uniform f32* %339 = OpAccessChain %24 %338 
                                         f32 %340 = OpLoad %339 
                                         f32 %341 = OpFMul %337 %340 
                                Private f32* %342 = OpAccessChain %36 %203 
                                                      OpStore %342 %341 
                                Uniform f32* %345 = OpAccessChain %24 %344 
                                         f32 %346 = OpLoad %345 
                                         f32 %347 = OpFAdd %346 %134 
                                Private f32* %348 = OpAccessChain %343 %203 
                                                      OpStore %348 %347 
                                Private f32* %349 = OpAccessChain %343 %203 
                                         f32 %350 = OpLoad %349 
                                Private f32* %351 = OpAccessChain %36 %203 
                                         f32 %352 = OpLoad %351 
                                         f32 %353 = OpFMul %350 %352 
                                Private f32* %354 = OpAccessChain %36 %203 
                                                      OpStore %354 %353 
                                         f32 %355 = OpLoad %279 
                                Private f32* %356 = OpAccessChain %36 %203 
                                         f32 %357 = OpLoad %356 
                                         f32 %358 = OpFMul %355 %357 
                                Private f32* %359 = OpAccessChain %343 %203 
                                                      OpStore %359 %358 
                                Uniform f32* %362 = OpAccessChain %24 %361 
                                         f32 %363 = OpLoad %362 
                                         f32 %364 = OpFNegate %363 
                                         f32 %365 = OpFAdd %364 %134 
                                                      OpStore %360 %365 
                                         f32 %366 = OpLoad %360 
                                Private f32* %367 = OpAccessChain %343 %203 
                                         f32 %368 = OpLoad %367 
                                         f32 %369 = OpExtInst %1 4 %368 
                                         f32 %370 = OpFMul %366 %369 
                                                      OpStore %360 %370 
                                         f32 %371 = OpLoad %279 
                                Private f32* %372 = OpAccessChain %36 %203 
                                         f32 %373 = OpLoad %372 
                                         f32 %374 = OpFMul %371 %373 
                                         f32 %375 = OpLoad %360 
                                         f32 %376 = OpFNegate %375 
                                         f32 %377 = OpFAdd %374 %376 
                                                      OpStore %279 %377 
                                         f32 %378 = OpLoad %180 
                                         f32 %379 = OpExtInst %1 4 %378 
                                         f32 %380 = OpLoad %279 
                                         f32 %381 = OpFMul %379 %380 
                                         f32 %382 = OpLoad %360 
                                         f32 %383 = OpFAdd %381 %382 
                                                      OpStore %180 %383 
                                Uniform f32* %387 = OpAccessChain %24 %240 %39 %124 
                                         f32 %388 = OpLoad %387 
                                        bool %389 = OpFOrdEqual %388 %293 
                                                      OpStore %386 %389 
                                        bool %390 = OpLoad %386 
                                                      OpSelectionMerge %394 None 
                                                      OpBranchConditional %390 %393 %396 
                                             %393 = OpLabel 
                                         f32 %395 = OpLoad %180 
                                                      OpStore %392 %395 
                                                      OpBranch %394 
                                             %396 = OpLabel 
                                Private f32* %397 = OpAccessChain %343 %203 
                                         f32 %398 = OpLoad %397 
                                                      OpStore %392 %398 
                                                      OpBranch %394 
                                             %394 = OpLabel 
                                         f32 %399 = OpLoad %392 
                                                      OpStore %180 %399 
                                Uniform f32* %401 = OpAccessChain %24 %400 
                                         f32 %402 = OpLoad %401 
                                Uniform f32* %404 = OpAccessChain %24 %403 
                                         f32 %405 = OpLoad %404 
                                         f32 %406 = OpFMul %402 %405 
                                                      OpStore %279 %406 
                                         f32 %407 = OpLoad %279 
                                         f32 %408 = OpLoad %180 
                                         f32 %409 = OpFMul %407 %408 
                                         f32 %410 = OpFAdd %409 %134 
                                                      OpStore %279 %410 
                                         f32 %411 = OpLoad %180 
                                         f32 %412 = OpLoad %279 
                                         f32 %413 = OpFDiv %411 %412 
                                Private f32* %414 = OpAccessChain %36 %203 
                                                      OpStore %414 %413 
                                Uniform f32* %416 = OpAccessChain %24 %415 
                                         f32 %417 = OpLoad %416 
                                Uniform f32* %418 = OpAccessChain %24 %403 
                                         f32 %419 = OpLoad %418 
                                         f32 %420 = OpFMul %417 %419 
                                                      OpStore %279 %420 
                                Private f32* %421 = OpAccessChain %36 %203 
                                         f32 %422 = OpLoad %421 
                                         f32 %423 = OpLoad %279 
                                         f32 %424 = OpFMul %422 %423 
                                                      OpStore %279 %424 
                                         f32 %425 = OpLoad %279 
                                         f32 %426 = OpExtInst %1 37 %425 %134 
                                Private f32* %427 = OpAccessChain %343 %203 
                                                      OpStore %427 %426 
                                Private f32* %428 = OpAccessChain %343 %203 
                                         f32 %429 = OpLoad %428 
                                         f32 %430 = OpExtInst %1 31 %429 
                                Private f32* %431 = OpAccessChain %343 %203 
                                                      OpStore %431 %430 
                                       f32_4 %432 = OpLoad %153 
                                       f32_2 %433 = OpLoad %343 
                                       f32_4 %434 = OpVectorShuffle %433 %433 0 0 0 0 
                                       f32_4 %435 = OpFMul %432 %434 
                                                      OpStore %61 %435 
                                       f32_4 %437 = OpLoad %137 
                                       f32_3 %438 = OpVectorShuffle %437 %437 0 1 2 
                                       f32_4 %439 = OpLoad %137 
                                       f32_3 %440 = OpVectorShuffle %439 %439 3 3 3 
                                       f32_3 %441 = OpFMul %438 %440 
                                       f32_4 %442 = OpLoad %61 
                                       f32_3 %443 = OpVectorShuffle %442 %442 0 1 2 
                                       f32_3 %444 = OpFAdd %441 %443 
                                       f32_4 %445 = OpLoad %436 
                                       f32_4 %446 = OpVectorShuffle %445 %444 4 5 6 3 
                                                      OpStore %436 %446 
                                Private f32* %447 = OpAccessChain %86 %124 
                                         f32 %448 = OpLoad %447 
                                Uniform f32* %449 = OpAccessChain %24 %123 %124 
                                         f32 %450 = OpLoad %449 
                                         f32 %451 = OpFMul %448 %450 
                                Private f32* %452 = OpAccessChain %61 %124 
                                         f32 %453 = OpLoad %452 
                                         f32 %454 = OpFAdd %451 %453 
                                 Output f32* %455 = OpAccessChain %436 %124 
                                                      OpStore %455 %454 
                              Uniform f32_4* %457 = OpAccessChain %24 %456 
                                       f32_4 %458 = OpLoad %457 
                                       f32_4 %461 = OpExtInst %1 40 %458 %460 
                                                      OpStore %61 %461 
                                       f32_4 %462 = OpLoad %61 
                                       f32_4 %465 = OpExtInst %1 37 %462 %464 
                                                      OpStore %61 %465 
                                       f32_2 %466 = OpLoad %9 
                                       f32_4 %467 = OpLoad %61 
                                       f32_2 %468 = OpVectorShuffle %467 %467 0 1 
                                       f32_2 %469 = OpFNegate %468 
                                       f32_2 %470 = OpFAdd %466 %469 
                                                      OpStore %343 %470 
                                       f32_2 %471 = OpLoad %9 
                                       f32_2 %474 = OpFMul %471 %473 
                                       f32_4 %475 = OpLoad %61 
                                       f32_2 %476 = OpVectorShuffle %475 %475 0 1 
                                       f32_2 %477 = OpFNegate %476 
                                       f32_2 %478 = OpFAdd %474 %477 
                                                      OpStore %9 %478 
                                       f32_4 %479 = OpLoad %61 
                                       f32_2 %480 = OpVectorShuffle %479 %479 2 3 
                                       f32_2 %481 = OpFNegate %480 
                                       f32_2 %482 = OpLoad %9 
                                       f32_2 %483 = OpFAdd %481 %482 
                                       f32_4 %484 = OpLoad vs_TEXCOORD2 
                                       f32_4 %485 = OpVectorShuffle %484 %483 4 5 2 3 
                                                      OpStore vs_TEXCOORD2 %485 
                                       f32_4 %486 = OpLoad %61 
                                       f32_2 %487 = OpVectorShuffle %486 %486 0 1 
                                       f32_2 %488 = OpFNegate %487 
                                       f32_4 %489 = OpLoad %61 
                                       f32_2 %490 = OpVectorShuffle %489 %489 2 3 
                                       f32_2 %491 = OpFAdd %488 %490 
                                                      OpStore %9 %491 
                                       f32_2 %493 = OpLoad %343 
                                       f32_2 %494 = OpLoad %9 
                                       f32_2 %495 = OpFDiv %493 %494 
                                       f32_4 %496 = OpLoad vs_TEXCOORD0 
                                       f32_4 %497 = OpVectorShuffle %496 %495 0 1 4 5 
                                                      OpStore vs_TEXCOORD0 %497 
                                       f32_2 %499 = OpLoad %498 
                                       f32_4 %500 = OpLoad vs_TEXCOORD0 
                                       f32_4 %501 = OpVectorShuffle %500 %499 4 5 2 3 
                                                      OpStore vs_TEXCOORD0 %501 
                                  Input f32* %503 = OpAccessChain %333 %114 
                                         f32 %504 = OpLoad %503 
                                        bool %505 = OpFOrdGreaterThanEqual %293 %504 
                                                      OpStore %502 %505 
                                        bool %506 = OpLoad %502 
                                         f32 %507 = OpSelect %506 %134 %293 
                                Private f32* %508 = OpAccessChain %9 %203 
                                                      OpStore %508 %507 
                                Uniform f32* %512 = OpAccessChain %24 %511 
                                         f32 %513 = OpLoad %512 
                                         f32 %514 = OpFNegate %513 
                                Uniform f32* %516 = OpAccessChain %24 %515 
                                         f32 %517 = OpLoad %516 
                                         f32 %518 = OpFAdd %514 %517 
                                Private f32* %519 = OpAccessChain %510 %203 
                                                      OpStore %519 %518 
                                Private f32* %520 = OpAccessChain %9 %203 
                                         f32 %521 = OpLoad %520 
                                Private f32* %522 = OpAccessChain %510 %203 
                                         f32 %523 = OpLoad %522 
                                         f32 %524 = OpFMul %521 %523 
                                Uniform f32* %525 = OpAccessChain %24 %511 
                                         f32 %526 = OpLoad %525 
                                         f32 %527 = OpFAdd %524 %526 
                                Private f32* %528 = OpAccessChain %9 %203 
                                                      OpStore %528 %527 
                                Private f32* %529 = OpAccessChain %9 %203 
                                         f32 %530 = OpLoad %529 
                                         f32 %531 = OpFMul %530 %316 
                                Uniform f32* %533 = OpAccessChain %24 %532 
                                         f32 %534 = OpLoad %533 
                                         f32 %535 = OpFAdd %531 %534 
                                Private f32* %536 = OpAccessChain %9 %203 
                                                      OpStore %536 %535 
                                Private f32* %537 = OpAccessChain %9 %203 
                                         f32 %538 = OpLoad %537 
                                Uniform f32* %539 = OpAccessChain %24 %403 
                                         f32 %540 = OpLoad %539 
                                         f32 %541 = OpFMul %538 %540 
                                Private f32* %542 = OpAccessChain %9 %203 
                                                      OpStore %542 %541 
                                Private f32* %543 = OpAccessChain %9 %203 
                                         f32 %544 = OpLoad %543 
                                         f32 %545 = OpFNegate %544 
                                         f32 %547 = OpFMul %545 %546 
                                         f32 %548 = OpFAdd %547 %546 
                                Private f32* %549 = OpAccessChain %9 %203 
                                                      OpStore %549 %548 
                                Private f32* %550 = OpAccessChain %9 %203 
                                         f32 %551 = OpLoad %550 
                                Private f32* %552 = OpAccessChain %36 %203 
                                         f32 %553 = OpLoad %552 
                                         f32 %554 = OpFMul %551 %553 
                                         f32 %556 = OpFAdd %554 %555 
                                Private f32* %557 = OpAccessChain %36 %124 
                                                      OpStore %557 %556 
                                       f32_4 %559 = OpLoad %36 
                                       f32_2 %560 = OpVectorShuffle %559 %559 0 3 
                                       f32_4 %561 = OpLoad vs_TEXCOORD1 
                                       f32_4 %562 = OpVectorShuffle %561 %560 4 1 2 5 
                                                      OpStore vs_TEXCOORD1 %562 
                                         f32 %563 = OpLoad %279 
                                         f32 %564 = OpFNegate %563 
                                         f32 %565 = OpFMul %564 %546 
                                Private f32* %566 = OpAccessChain %36 %124 
                                         f32 %567 = OpLoad %566 
                                         f32 %568 = OpFAdd %565 %567 
                                 Output f32* %569 = OpAccessChain vs_TEXCOORD1 %114 
                                                      OpStore %569 %568 
                                         f32 %570 = OpLoad %279 
                                         f32 %571 = OpFMul %570 %546 
                                Private f32* %572 = OpAccessChain %36 %124 
                                         f32 %573 = OpLoad %572 
                                         f32 %574 = OpFAdd %571 %573 
                                 Output f32* %575 = OpAccessChain vs_TEXCOORD1 %216 
                                                      OpStore %575 %574 
                                  Input f32* %577 = OpAccessChain %129 %124 
                                         f32 %578 = OpLoad %577 
                                 Output f32* %579 = OpAccessChain vs_TEXCOORD3 %216 
                                                      OpStore %579 %578 
                                 Output f32* %580 = OpAccessChain vs_TEXCOORD3 %124 
                                                      OpStore %580 %293 
                                Uniform f32* %582 = OpAccessChain %24 %581 
                                         f32 %583 = OpLoad %582 
                                Uniform f32* %585 = OpAccessChain %24 %584 
                                         f32 %586 = OpLoad %585 
                                Uniform f32* %588 = OpAccessChain %24 %587 
                                         f32 %589 = OpLoad %588 
                                Uniform f32* %591 = OpAccessChain %24 %590 
                                         f32 %592 = OpLoad %591 
                                       f32_4 %593 = OpCompositeConstruct %583 %586 %589 %592 
                                Uniform f32* %595 = OpAccessChain %24 %594 
                                         f32 %596 = OpLoad %595 
                                Uniform f32* %597 = OpAccessChain %24 %594 
                                         f32 %598 = OpLoad %597 
                                Uniform f32* %599 = OpAccessChain %24 %594 
                                         f32 %600 = OpLoad %599 
                                Uniform f32* %601 = OpAccessChain %24 %594 
                                         f32 %602 = OpLoad %601 
                                       f32_4 %603 = OpCompositeConstruct %596 %598 %600 %602 
                                         f32 %604 = OpCompositeExtract %603 0 
                                         f32 %605 = OpCompositeExtract %603 1 
                                         f32 %606 = OpCompositeExtract %603 2 
                                         f32 %607 = OpCompositeExtract %603 3 
                                       f32_4 %608 = OpCompositeConstruct %604 %605 %606 %607 
                                       f32_4 %609 = OpFMul %593 %608 
                                                      OpStore %36 %609 
                                       f32_4 %610 = OpLoad %36 
                                       f32_2 %611 = OpVectorShuffle %610 %610 2 3 
                                       f32_2 %612 = OpFNegate %611 
                                Uniform f32* %613 = OpAccessChain %24 %338 
                                         f32 %614 = OpLoad %613 
                                       f32_2 %615 = OpCompositeConstruct %614 %614 
                                       f32_2 %616 = OpFMul %612 %615 
                                       f32_3 %617 = OpLoad %510 
                                       f32_3 %618 = OpVectorShuffle %617 %616 3 1 4 
                                                      OpStore %510 %618 
                                       f32_3 %619 = OpLoad %510 
                                       f32_2 %620 = OpVectorShuffle %619 %619 0 2 
                                Uniform f32* %622 = OpAccessChain %24 %621 
                                         f32 %623 = OpLoad %622 
                                Uniform f32* %625 = OpAccessChain %24 %624 
                                         f32 %626 = OpLoad %625 
                                       f32_2 %627 = OpCompositeConstruct %623 %626 
                                       f32_2 %628 = OpFDiv %620 %627 
                                       f32_3 %629 = OpLoad %510 
                                       f32_3 %630 = OpVectorShuffle %629 %628 3 1 4 
                                                      OpStore %510 %630 
                                       f32_3 %631 = OpLoad %510 
                                       f32_2 %632 = OpVectorShuffle %631 %631 0 2 
                                       f32_2 %633 = OpLoad %498 
                                       f32_2 %634 = OpFAdd %632 %633 
                                       f32_4 %635 = OpLoad vs_TEXCOORD3 
                                       f32_4 %636 = OpVectorShuffle %635 %634 4 5 2 3 
                                                      OpStore vs_TEXCOORD3 %636 
                                Private f32* %637 = OpAccessChain %36 %203 
                                         f32 %638 = OpLoad %637 
                                         f32 %639 = OpLoad %180 
                                         f32 %640 = OpFMul %638 %639 
                                         f32 %641 = OpFAdd %640 %134 
                                Private f32* %642 = OpAccessChain %510 %203 
                                                      OpStore %642 %641 
                                         f32 %643 = OpLoad %180 
                                Private f32* %644 = OpAccessChain %510 %203 
                                         f32 %645 = OpLoad %644 
                                         f32 %646 = OpFDiv %643 %645 
                                Private f32* %647 = OpAccessChain %510 %203 
                                                      OpStore %647 %646 
                                Private f32* %648 = OpAccessChain %510 %203 
                                         f32 %649 = OpLoad %648 
                                Private f32* %650 = OpAccessChain %36 %114 
                                         f32 %651 = OpLoad %650 
                                         f32 %652 = OpFMul %649 %651 
                                                      OpStore %180 %652 
                                Private f32* %653 = OpAccessChain %9 %203 
                                         f32 %654 = OpLoad %653 
                                Private f32* %655 = OpAccessChain %510 %203 
                                         f32 %656 = OpLoad %655 
                                         f32 %657 = OpFMul %654 %656 
                                         f32 %658 = OpFAdd %657 %555 
                                Private f32* %659 = OpAccessChain %9 %203 
                                                      OpStore %659 %658 
                                Private f32* %662 = OpAccessChain %510 %203 
                                         f32 %663 = OpLoad %662 
                                 Output f32* %664 = OpAccessChain vs_TEXCOORD4 %203 
                                                      OpStore %664 %663 
                                         f32 %665 = OpLoad %180 
                                         f32 %666 = OpFNegate %665 
                                         f32 %667 = OpFMul %666 %546 
                                Private f32* %668 = OpAccessChain %9 %203 
                                         f32 %669 = OpLoad %668 
                                         f32 %670 = OpFAdd %667 %669 
                                 Output f32* %671 = OpAccessChain vs_TEXCOORD4 %114 
                                                      OpStore %671 %670 
                                 Output f32* %672 = OpAccessChain %118 %45 %114 
                                         f32 %673 = OpLoad %672 
                                         f32 %674 = OpFNegate %673 
                                 Output f32* %675 = OpAccessChain %118 %45 %114 
                                                      OpStore %675 %674 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 241
; Schema: 0
                                               OpCapability Shader 
                                        %1 = OpExtInstImport "GLSL.std.450" 
                                               OpMemoryModel Logical GLSL450 
                                               OpEntryPoint Fragment %4 "main" %21 %35 %77 %79 %88 %96 %146 %221 %225 
                                               OpExecutionMode %4 OriginUpperLeft 
                                               OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                               OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                               OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                               OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                               OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                               OpName vs_TEXCOORDn0 "vs_TEXCOORDn0" 
                                               OpDecorate %12 DescriptorSet 12 
                                               OpDecorate %12 Binding 12 
                                               OpDecorate %16 DescriptorSet 16 
                                               OpDecorate %16 Binding 16 
                                               OpDecorate vs_TEXCOORD3 Location 21 
                                               OpDecorate vs_TEXCOORD4 Location 35 
                                               OpMemberDecorate %53 0 Offset 53 
                                               OpMemberDecorate %53 1 Offset 53 
                                               OpMemberDecorate %53 2 Offset 53 
                                               OpDecorate %53 Block 
                                               OpDecorate %55 DescriptorSet 55 
                                               OpDecorate %55 Binding 55 
                                               OpDecorate %77 Location 77 
                                               OpDecorate %79 Location 79 
                                               OpDecorate vs_TEXCOORD0 Location 88 
                                               OpDecorate vs_TEXCOORD1 Location 96 
                                               OpDecorate vs_TEXCOORD2 Location 146 
                                               OpDecorate %221 Location 221 
                                               OpDecorate vs_TEXCOORDn0 Location 225 
                                        %2 = OpTypeVoid 
                                        %3 = OpTypeFunction %2 
                                        %6 = OpTypeFloat 32 
                                        %7 = OpTypeVector %6 4 
                                        %8 = OpTypePointer Private %7 
                         Private f32_4* %9 = OpVariable Private 
                                       %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                       %11 = OpTypePointer UniformConstant %10 
  UniformConstant read_only Texture2D* %12 = OpVariable UniformConstant 
                                       %14 = OpTypeSampler 
                                       %15 = OpTypePointer UniformConstant %14 
              UniformConstant sampler* %16 = OpVariable UniformConstant 
                                       %18 = OpTypeSampledImage %10 
                                       %20 = OpTypePointer Input %7 
                 Input f32_4* vs_TEXCOORD3 = OpVariable Input 
                                       %22 = OpTypeVector %6 2 
                                       %26 = OpTypeInt 32 0 
                                   u32 %27 = OpConstant 3 
                                   u32 %29 = OpConstant 0 
                                       %30 = OpTypePointer Private %6 
                                       %34 = OpTypePointer Input %22 
                 Input f32_2* vs_TEXCOORD4 = OpVariable Input 
                                       %36 = OpTypePointer Input %6 
                                   u32 %40 = OpConstant 1 
                                   f32 %48 = OpConstant 3.674022E-40 
                                   f32 %49 = OpConstant 3.674022E-40 
                        Private f32_4* %52 = OpVariable Private 
                                       %53 = OpTypeStruct %7 %7 %7 
                                       %54 = OpTypePointer Uniform %53 
Uniform struct {f32_4; f32_4; f32_4;}* %55 = OpVariable Uniform 
                                       %56 = OpTypeInt 32 1 
                                   i32 %57 = OpConstant 1 
                                       %58 = OpTypeVector %6 3 
                                       %59 = OpTypePointer Uniform %7 
                                       %69 = OpTypePointer Uniform %6 
                          Input f32_4* %77 = OpVariable Input 
                          Input f32_4* %79 = OpVariable Input 
                                       %83 = OpTypePointer Private %22 
                        Private f32_2* %84 = OpVariable Private 
                 Input f32_4* vs_TEXCOORD0 = OpVariable Input 
                 Input f32_4* vs_TEXCOORD1 = OpVariable Input 
                       Private f32_4* %114 = OpVariable Private 
                                  i32 %133 = OpConstant 2 
                 Input f32_4* vs_TEXCOORD2 = OpVariable Input 
                                  u32 %180 = OpConstant 2 
                                  f32 %184 = OpConstant 3.674022E-40 
                                      %187 = OpTypeBool 
                                      %188 = OpTypePointer Private %187 
                        Private bool* %189 = OpVariable Private 
                                  i32 %194 = OpConstant 0 
                                  i32 %196 = OpConstant -1 
                         Private f32* %214 = OpVariable Private 
                                      %220 = OpTypePointer Output %7 
                        Output f32_4* %221 = OpVariable Output 
                                      %223 = OpTypePointer Output %6 
                  Input f32* vs_TEXCOORDn0 = OpVariable Input 
                                   void %4 = OpFunction None %3 
                                        %5 = OpLabel 
                   read_only Texture2D %13 = OpLoad %12 
                               sampler %17 = OpLoad %16 
            read_only Texture2DSampled %19 = OpSampledImage %13 %17 
                                 f32_4 %23 = OpLoad vs_TEXCOORD3 
                                 f32_2 %24 = OpVectorShuffle %23 %23 0 1 
                                 f32_4 %25 = OpImageSampleImplicitLod %19 %24 
                                   f32 %28 = OpCompositeExtract %25 3 
                          Private f32* %31 = OpAccessChain %9 %29 
                                               OpStore %31 %28 
                          Private f32* %32 = OpAccessChain %9 %29 
                                   f32 %33 = OpLoad %32 
                            Input f32* %37 = OpAccessChain vs_TEXCOORD4 %29 
                                   f32 %38 = OpLoad %37 
                                   f32 %39 = OpFMul %33 %38 
                            Input f32* %41 = OpAccessChain vs_TEXCOORD4 %40 
                                   f32 %42 = OpLoad %41 
                                   f32 %43 = OpFNegate %42 
                                   f32 %44 = OpFAdd %39 %43 
                          Private f32* %45 = OpAccessChain %9 %29 
                                               OpStore %45 %44 
                          Private f32* %46 = OpAccessChain %9 %29 
                                   f32 %47 = OpLoad %46 
                                   f32 %50 = OpExtInst %1 43 %47 %48 %49 
                          Private f32* %51 = OpAccessChain %9 %29 
                                               OpStore %51 %50 
                        Uniform f32_4* %60 = OpAccessChain %55 %57 
                                 f32_4 %61 = OpLoad %60 
                                 f32_3 %62 = OpVectorShuffle %61 %61 3 3 3 
                        Uniform f32_4* %63 = OpAccessChain %55 %57 
                                 f32_4 %64 = OpLoad %63 
                                 f32_3 %65 = OpVectorShuffle %64 %64 0 1 2 
                                 f32_3 %66 = OpFMul %62 %65 
                                 f32_4 %67 = OpLoad %52 
                                 f32_4 %68 = OpVectorShuffle %67 %66 4 5 6 3 
                                               OpStore %52 %68 
                          Uniform f32* %70 = OpAccessChain %55 %57 %27 
                                   f32 %71 = OpLoad %70 
                          Private f32* %72 = OpAccessChain %52 %27 
                                               OpStore %72 %71 
                                 f32_4 %73 = OpLoad %9 
                                 f32_4 %74 = OpVectorShuffle %73 %73 0 0 0 0 
                                 f32_4 %75 = OpLoad %52 
                                 f32_4 %76 = OpFMul %74 %75 
                                               OpStore %9 %76 
                                 f32_4 %78 = OpLoad %77 
                                 f32_4 %80 = OpLoad %79 
                                 f32_4 %81 = OpFNegate %80 
                                 f32_4 %82 = OpFAdd %78 %81 
                                               OpStore %52 %82 
                   read_only Texture2D %85 = OpLoad %12 
                               sampler %86 = OpLoad %16 
            read_only Texture2DSampled %87 = OpSampledImage %85 %86 
                                 f32_4 %89 = OpLoad vs_TEXCOORD0 
                                 f32_2 %90 = OpVectorShuffle %89 %89 0 1 
                                 f32_4 %91 = OpImageSampleImplicitLod %87 %90 
                                   f32 %92 = OpCompositeExtract %91 3 
                          Private f32* %93 = OpAccessChain %84 %29 
                                               OpStore %93 %92 
                                 f32_2 %94 = OpLoad %84 
                                 f32_2 %95 = OpVectorShuffle %94 %94 0 0 
                                 f32_4 %97 = OpLoad vs_TEXCOORD1 
                                 f32_2 %98 = OpVectorShuffle %97 %97 0 0 
                                 f32_2 %99 = OpFMul %95 %98 
                                f32_4 %100 = OpLoad vs_TEXCOORD1 
                                f32_2 %101 = OpVectorShuffle %100 %100 2 1 
                                f32_2 %102 = OpFNegate %101 
                                f32_2 %103 = OpFAdd %99 %102 
                                               OpStore %84 %103 
                                f32_2 %104 = OpLoad %84 
                                f32_2 %105 = OpCompositeConstruct %48 %48 
                                f32_2 %106 = OpCompositeConstruct %49 %49 
                                f32_2 %107 = OpExtInst %1 43 %104 %105 %106 
                                               OpStore %84 %107 
                                f32_2 %108 = OpLoad %84 
                                f32_4 %109 = OpVectorShuffle %108 %108 0 0 0 0 
                                f32_4 %110 = OpLoad %52 
                                f32_4 %111 = OpFMul %109 %110 
                                f32_4 %112 = OpLoad %79 
                                f32_4 %113 = OpFAdd %111 %112 
                                               OpStore %52 %113 
                                f32_2 %115 = OpLoad %84 
                                f32_4 %116 = OpVectorShuffle %115 %115 1 1 1 1 
                                f32_4 %117 = OpLoad %52 
                                f32_4 %118 = OpFMul %116 %117 
                                               OpStore %114 %118 
                         Private f32* %119 = OpAccessChain %52 %27 
                                  f32 %120 = OpLoad %119 
                                  f32 %121 = OpFNegate %120 
                         Private f32* %122 = OpAccessChain %84 %40 
                                  f32 %123 = OpLoad %122 
                                  f32 %124 = OpFMul %121 %123 
                                  f32 %125 = OpFAdd %124 %49 
                         Private f32* %126 = OpAccessChain %52 %29 
                                               OpStore %126 %125 
                                f32_4 %127 = OpLoad %9 
                                f32_4 %128 = OpLoad %52 
                                f32_4 %129 = OpVectorShuffle %128 %128 0 0 0 0 
                                f32_4 %130 = OpFMul %127 %129 
                                f32_4 %131 = OpLoad %114 
                                f32_4 %132 = OpFAdd %130 %131 
                                               OpStore %9 %132 
                       Uniform f32_4* %134 = OpAccessChain %55 %133 
                                f32_4 %135 = OpLoad %134 
                                f32_2 %136 = OpVectorShuffle %135 %135 0 1 
                                f32_2 %137 = OpFNegate %136 
                       Uniform f32_4* %138 = OpAccessChain %55 %133 
                                f32_4 %139 = OpLoad %138 
                                f32_2 %140 = OpVectorShuffle %139 %139 2 3 
                                f32_2 %141 = OpFAdd %137 %140 
                                f32_4 %142 = OpLoad %52 
                                f32_4 %143 = OpVectorShuffle %142 %141 4 5 2 3 
                                               OpStore %52 %143 
                                f32_4 %144 = OpLoad %52 
                                f32_2 %145 = OpVectorShuffle %144 %144 0 1 
                                f32_4 %147 = OpLoad vs_TEXCOORD2 
                                f32_2 %148 = OpVectorShuffle %147 %147 0 1 
                                f32_2 %149 = OpExtInst %1 4 %148 
                                f32_2 %150 = OpFNegate %149 
                                f32_2 %151 = OpFAdd %145 %150 
                                f32_4 %152 = OpLoad %52 
                                f32_4 %153 = OpVectorShuffle %152 %151 4 5 2 3 
                                               OpStore %52 %153 
                                f32_4 %154 = OpLoad %52 
                                f32_2 %155 = OpVectorShuffle %154 %154 0 1 
                                f32_4 %156 = OpLoad vs_TEXCOORD2 
                                f32_2 %157 = OpVectorShuffle %156 %156 2 3 
                                f32_2 %158 = OpFMul %155 %157 
                                f32_4 %159 = OpLoad %52 
                                f32_4 %160 = OpVectorShuffle %159 %158 4 5 2 3 
                                               OpStore %52 %160 
                                f32_4 %161 = OpLoad %52 
                                f32_2 %162 = OpVectorShuffle %161 %161 0 1 
                                f32_2 %163 = OpCompositeConstruct %48 %48 
                                f32_2 %164 = OpCompositeConstruct %49 %49 
                                f32_2 %165 = OpExtInst %1 43 %162 %163 %164 
                                f32_4 %166 = OpLoad %52 
                                f32_4 %167 = OpVectorShuffle %166 %165 4 5 2 3 
                                               OpStore %52 %167 
                         Private f32* %168 = OpAccessChain %52 %40 
                                  f32 %169 = OpLoad %168 
                         Private f32* %170 = OpAccessChain %52 %29 
                                  f32 %171 = OpLoad %170 
                                  f32 %172 = OpFMul %169 %171 
                         Private f32* %173 = OpAccessChain %52 %29 
                                               OpStore %173 %172 
                                f32_4 %174 = OpLoad %9 
                                f32_4 %175 = OpLoad %52 
                                f32_4 %176 = OpVectorShuffle %175 %175 0 0 0 0 
                                f32_4 %177 = OpFMul %174 %176 
                                               OpStore %9 %177 
                         Private f32* %178 = OpAccessChain %9 %27 
                                  f32 %179 = OpLoad %178 
                           Input f32* %181 = OpAccessChain vs_TEXCOORD3 %180 
                                  f32 %182 = OpLoad %181 
                                  f32 %183 = OpFMul %179 %182 
                                  f32 %185 = OpFAdd %183 %184 
                         Private f32* %186 = OpAccessChain %52 %29 
                                               OpStore %186 %185 
                         Private f32* %190 = OpAccessChain %52 %29 
                                  f32 %191 = OpLoad %190 
                                 bool %192 = OpFOrdLessThan %191 %48 
                                               OpStore %189 %192 
                                 bool %193 = OpLoad %189 
                                  i32 %195 = OpSelect %193 %57 %194 
                                  i32 %197 = OpIMul %195 %196 
                                 bool %198 = OpINotEqual %197 %194 
                                               OpSelectionMerge %200 None 
                                               OpBranchConditional %198 %199 %200 
                                      %199 = OpLabel 
                                               OpKill
                                      %200 = OpLabel 
                                f32_4 %202 = OpLoad %9 
                                f32_3 %203 = OpVectorShuffle %202 %202 0 1 2 
                                f32_4 %204 = OpLoad vs_TEXCOORD3 
                                f32_3 %205 = OpVectorShuffle %204 %204 2 2 2 
                                f32_3 %206 = OpFMul %203 %205 
                       Uniform f32_4* %207 = OpAccessChain %55 %194 
                                f32_4 %208 = OpLoad %207 
                                f32_3 %209 = OpVectorShuffle %208 %208 0 1 2 
                                f32_3 %210 = OpFNegate %209 
                                f32_3 %211 = OpFAdd %206 %210 
                                f32_4 %212 = OpLoad %9 
                                f32_4 %213 = OpVectorShuffle %212 %211 4 5 6 3 
                                               OpStore %9 %213 
                         Private f32* %215 = OpAccessChain %9 %27 
                                  f32 %216 = OpLoad %215 
                           Input f32* %217 = OpAccessChain vs_TEXCOORD3 %180 
                                  f32 %218 = OpLoad %217 
                                  f32 %219 = OpFMul %216 %218 
                                               OpStore %214 %219 
                                  f32 %222 = OpLoad %214 
                          Output f32* %224 = OpAccessChain %221 %27 
                                               OpStore %224 %222 
                                  f32 %226 = OpLoad vs_TEXCOORDn0 
                                               OpStore %214 %226 
                                  f32 %227 = OpLoad %214 
                                  f32 %228 = OpExtInst %1 43 %227 %48 %49 
                                               OpStore %214 %228 
                                  f32 %229 = OpLoad %214 
                                f32_3 %230 = OpCompositeConstruct %229 %229 %229 
                                f32_4 %231 = OpLoad %9 
                                f32_3 %232 = OpVectorShuffle %231 %231 0 1 2 
                                f32_3 %233 = OpFMul %230 %232 
                       Uniform f32_4* %234 = OpAccessChain %55 %194 
                                f32_4 %235 = OpLoad %234 
                                f32_3 %236 = OpVectorShuffle %235 %235 0 1 2 
                                f32_3 %237 = OpFAdd %233 %236 
                                f32_4 %238 = OpLoad %221 
                                f32_4 %239 = OpVectorShuffle %238 %237 4 5 6 3 
                                               OpStore %221 %239 
                                               OpReturn
                                               OpFunctionEnd
"
}
}
Program "fp" {
SubProgram "d3d11 " {
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
""
}
SubProgram "vulkan " {
""
}
SubProgram "d3d11 " {
Keywords { "OUTLINE_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "OUTLINE_ON" }
""
}
SubProgram "vulkan " {
Keywords { "OUTLINE_ON" }
""
}
SubProgram "d3d11 " {
Keywords { "UNDERLAY_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "UNDERLAY_ON" }
""
}
SubProgram "vulkan " {
Keywords { "UNDERLAY_ON" }
""
}
SubProgram "d3d11 " {
Keywords { "OUTLINE_ON" "UNDERLAY_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "OUTLINE_ON" "UNDERLAY_ON" }
""
}
SubProgram "vulkan " {
Keywords { "OUTLINE_ON" "UNDERLAY_ON" }
""
}
SubProgram "d3d11 " {
Keywords { "FOG_LINEAR" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "FOG_LINEAR" }
""
}
SubProgram "vulkan " {
Keywords { "FOG_LINEAR" }
""
}
SubProgram "d3d11 " {
Keywords { "FOG_LINEAR" "OUTLINE_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "FOG_LINEAR" "OUTLINE_ON" }
""
}
SubProgram "vulkan " {
Keywords { "FOG_LINEAR" "OUTLINE_ON" }
""
}
SubProgram "d3d11 " {
Keywords { "FOG_LINEAR" "UNDERLAY_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "FOG_LINEAR" "UNDERLAY_ON" }
""
}
SubProgram "vulkan " {
Keywords { "FOG_LINEAR" "UNDERLAY_ON" }
""
}
SubProgram "d3d11 " {
Keywords { "FOG_LINEAR" "OUTLINE_ON" "UNDERLAY_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "FOG_LINEAR" "OUTLINE_ON" "UNDERLAY_ON" }
""
}
SubProgram "vulkan " {
Keywords { "FOG_LINEAR" "OUTLINE_ON" "UNDERLAY_ON" }
""
}
SubProgram "d3d11 " {
Keywords { "UNITY_UI_ALPHACLIP" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "UNITY_UI_ALPHACLIP" }
""
}
SubProgram "vulkan " {
Keywords { "UNITY_UI_ALPHACLIP" }
""
}
SubProgram "d3d11 " {
Keywords { "OUTLINE_ON" "UNITY_UI_ALPHACLIP" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "OUTLINE_ON" "UNITY_UI_ALPHACLIP" }
""
}
SubProgram "vulkan " {
Keywords { "OUTLINE_ON" "UNITY_UI_ALPHACLIP" }
""
}
SubProgram "d3d11 " {
Keywords { "UNDERLAY_ON" "UNITY_UI_ALPHACLIP" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "UNDERLAY_ON" "UNITY_UI_ALPHACLIP" }
""
}
SubProgram "vulkan " {
Keywords { "UNDERLAY_ON" "UNITY_UI_ALPHACLIP" }
""
}
SubProgram "d3d11 " {
Keywords { "OUTLINE_ON" "UNDERLAY_ON" "UNITY_UI_ALPHACLIP" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "OUTLINE_ON" "UNDERLAY_ON" "UNITY_UI_ALPHACLIP" }
""
}
SubProgram "vulkan " {
Keywords { "OUTLINE_ON" "UNDERLAY_ON" "UNITY_UI_ALPHACLIP" }
""
}
SubProgram "d3d11 " {
Keywords { "FOG_LINEAR" "UNITY_UI_ALPHACLIP" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "FOG_LINEAR" "UNITY_UI_ALPHACLIP" }
""
}
SubProgram "vulkan " {
Keywords { "FOG_LINEAR" "UNITY_UI_ALPHACLIP" }
""
}
SubProgram "d3d11 " {
Keywords { "FOG_LINEAR" "OUTLINE_ON" "UNITY_UI_ALPHACLIP" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "FOG_LINEAR" "OUTLINE_ON" "UNITY_UI_ALPHACLIP" }
""
}
SubProgram "vulkan " {
Keywords { "FOG_LINEAR" "OUTLINE_ON" "UNITY_UI_ALPHACLIP" }
""
}
SubProgram "d3d11 " {
Keywords { "FOG_LINEAR" "UNDERLAY_ON" "UNITY_UI_ALPHACLIP" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "FOG_LINEAR" "UNDERLAY_ON" "UNITY_UI_ALPHACLIP" }
""
}
SubProgram "vulkan " {
Keywords { "FOG_LINEAR" "UNDERLAY_ON" "UNITY_UI_ALPHACLIP" }
""
}
SubProgram "d3d11 " {
Keywords { "FOG_LINEAR" "OUTLINE_ON" "UNDERLAY_ON" "UNITY_UI_ALPHACLIP" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "FOG_LINEAR" "OUTLINE_ON" "UNDERLAY_ON" "UNITY_UI_ALPHACLIP" }
""
}
SubProgram "vulkan " {
Keywords { "FOG_LINEAR" "OUTLINE_ON" "UNDERLAY_ON" "UNITY_UI_ALPHACLIP" }
""
}
SubProgram "d3d11 " {
Keywords { "UNITY_UI_CLIP_RECT" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "UNITY_UI_CLIP_RECT" }
""
}
SubProgram "vulkan " {
Keywords { "UNITY_UI_CLIP_RECT" }
""
}
SubProgram "d3d11 " {
Keywords { "OUTLINE_ON" "UNITY_UI_CLIP_RECT" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "OUTLINE_ON" "UNITY_UI_CLIP_RECT" }
""
}
SubProgram "vulkan " {
Keywords { "OUTLINE_ON" "UNITY_UI_CLIP_RECT" }
""
}
SubProgram "d3d11 " {
Keywords { "UNDERLAY_ON" "UNITY_UI_CLIP_RECT" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "UNDERLAY_ON" "UNITY_UI_CLIP_RECT" }
""
}
SubProgram "vulkan " {
Keywords { "UNDERLAY_ON" "UNITY_UI_CLIP_RECT" }
""
}
SubProgram "d3d11 " {
Keywords { "OUTLINE_ON" "UNDERLAY_ON" "UNITY_UI_CLIP_RECT" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "OUTLINE_ON" "UNDERLAY_ON" "UNITY_UI_CLIP_RECT" }
""
}
SubProgram "vulkan " {
Keywords { "OUTLINE_ON" "UNDERLAY_ON" "UNITY_UI_CLIP_RECT" }
""
}
SubProgram "d3d11 " {
Keywords { "FOG_LINEAR" "UNITY_UI_CLIP_RECT" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "FOG_LINEAR" "UNITY_UI_CLIP_RECT" }
""
}
SubProgram "vulkan " {
Keywords { "FOG_LINEAR" "UNITY_UI_CLIP_RECT" }
""
}
SubProgram "d3d11 " {
Keywords { "FOG_LINEAR" "OUTLINE_ON" "UNITY_UI_CLIP_RECT" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "FOG_LINEAR" "OUTLINE_ON" "UNITY_UI_CLIP_RECT" }
""
}
SubProgram "vulkan " {
Keywords { "FOG_LINEAR" "OUTLINE_ON" "UNITY_UI_CLIP_RECT" }
""
}
SubProgram "d3d11 " {
Keywords { "FOG_LINEAR" "UNDERLAY_ON" "UNITY_UI_CLIP_RECT" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "FOG_LINEAR" "UNDERLAY_ON" "UNITY_UI_CLIP_RECT" }
""
}
SubProgram "vulkan " {
Keywords { "FOG_LINEAR" "UNDERLAY_ON" "UNITY_UI_CLIP_RECT" }
""
}
SubProgram "d3d11 " {
Keywords { "FOG_LINEAR" "OUTLINE_ON" "UNDERLAY_ON" "UNITY_UI_CLIP_RECT" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "FOG_LINEAR" "OUTLINE_ON" "UNDERLAY_ON" "UNITY_UI_CLIP_RECT" }
""
}
SubProgram "vulkan " {
Keywords { "FOG_LINEAR" "OUTLINE_ON" "UNDERLAY_ON" "UNITY_UI_CLIP_RECT" }
""
}
SubProgram "d3d11 " {
Keywords { "UNITY_UI_ALPHACLIP" "UNITY_UI_CLIP_RECT" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "UNITY_UI_ALPHACLIP" "UNITY_UI_CLIP_RECT" }
""
}
SubProgram "vulkan " {
Keywords { "UNITY_UI_ALPHACLIP" "UNITY_UI_CLIP_RECT" }
""
}
SubProgram "d3d11 " {
Keywords { "OUTLINE_ON" "UNITY_UI_ALPHACLIP" "UNITY_UI_CLIP_RECT" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "OUTLINE_ON" "UNITY_UI_ALPHACLIP" "UNITY_UI_CLIP_RECT" }
""
}
SubProgram "vulkan " {
Keywords { "OUTLINE_ON" "UNITY_UI_ALPHACLIP" "UNITY_UI_CLIP_RECT" }
""
}
SubProgram "d3d11 " {
Keywords { "UNDERLAY_ON" "UNITY_UI_ALPHACLIP" "UNITY_UI_CLIP_RECT" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "UNDERLAY_ON" "UNITY_UI_ALPHACLIP" "UNITY_UI_CLIP_RECT" }
""
}
SubProgram "vulkan " {
Keywords { "UNDERLAY_ON" "UNITY_UI_ALPHACLIP" "UNITY_UI_CLIP_RECT" }
""
}
SubProgram "d3d11 " {
Keywords { "OUTLINE_ON" "UNDERLAY_ON" "UNITY_UI_ALPHACLIP" "UNITY_UI_CLIP_RECT" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "OUTLINE_ON" "UNDERLAY_ON" "UNITY_UI_ALPHACLIP" "UNITY_UI_CLIP_RECT" }
""
}
SubProgram "vulkan " {
Keywords { "OUTLINE_ON" "UNDERLAY_ON" "UNITY_UI_ALPHACLIP" "UNITY_UI_CLIP_RECT" }
""
}
SubProgram "d3d11 " {
Keywords { "FOG_LINEAR" "UNITY_UI_ALPHACLIP" "UNITY_UI_CLIP_RECT" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "FOG_LINEAR" "UNITY_UI_ALPHACLIP" "UNITY_UI_CLIP_RECT" }
""
}
SubProgram "vulkan " {
Keywords { "FOG_LINEAR" "UNITY_UI_ALPHACLIP" "UNITY_UI_CLIP_RECT" }
""
}
SubProgram "d3d11 " {
Keywords { "FOG_LINEAR" "OUTLINE_ON" "UNITY_UI_ALPHACLIP" "UNITY_UI_CLIP_RECT" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "FOG_LINEAR" "OUTLINE_ON" "UNITY_UI_ALPHACLIP" "UNITY_UI_CLIP_RECT" }
""
}
SubProgram "vulkan " {
Keywords { "FOG_LINEAR" "OUTLINE_ON" "UNITY_UI_ALPHACLIP" "UNITY_UI_CLIP_RECT" }
""
}
SubProgram "d3d11 " {
Keywords { "FOG_LINEAR" "UNDERLAY_ON" "UNITY_UI_ALPHACLIP" "UNITY_UI_CLIP_RECT" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "FOG_LINEAR" "UNDERLAY_ON" "UNITY_UI_ALPHACLIP" "UNITY_UI_CLIP_RECT" }
""
}
SubProgram "vulkan " {
Keywords { "FOG_LINEAR" "UNDERLAY_ON" "UNITY_UI_ALPHACLIP" "UNITY_UI_CLIP_RECT" }
""
}
SubProgram "d3d11 " {
Keywords { "FOG_LINEAR" "OUTLINE_ON" "UNDERLAY_ON" "UNITY_UI_ALPHACLIP" "UNITY_UI_CLIP_RECT" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "FOG_LINEAR" "OUTLINE_ON" "UNDERLAY_ON" "UNITY_UI_ALPHACLIP" "UNITY_UI_CLIP_RECT" }
""
}
SubProgram "vulkan " {
Keywords { "FOG_LINEAR" "OUTLINE_ON" "UNDERLAY_ON" "UNITY_UI_ALPHACLIP" "UNITY_UI_CLIP_RECT" }
""
}
}
}
}
CustomEditor "TMPro.EditorUtilities.TMP_SDFShaderGUI"
}