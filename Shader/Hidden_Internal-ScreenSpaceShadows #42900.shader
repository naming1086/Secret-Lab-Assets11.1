//////////////////////////////////////////
//
// NOTE: This is *not* a valid shader file
//
///////////////////////////////////////////
Shader "Hidden/Internal-ScreenSpaceShadows" {
Properties {
_ShadowMapTexture ("", any) = "" { }
_ODSWorldTexture ("", 2D) = "" { }
}
SubShader {
 Tags { "ShadowmapFilter" = "HardShadow" }
 Pass {
  Tags { "ShadowmapFilter" = "HardShadow" }
  ZTest Always
  ZWrite Off
  Cull Off
  GpuProgramID 62865
Program "vp" {
SubProgram "d3d11 " {
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraInvProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in  vec4 in_POSITION0;
in  vec2 in_TEXCOORD0;
in  vec3 in_TEXCOORD1;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_CameraInvProjection[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_CameraInvProjection[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    vs_TEXCOORD0.zw = u_xlat1.zz + u_xlat1.xw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = in_TEXCOORD1.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-hlslcc_mtx4x4unity_CameraInvProjection[2].xyz);
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[2].xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;
    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;
    u_xlat1.w = (-u_xlat1.z);
    vs_TEXCOORD2.xyz = u_xlat1.xyw;
    u_xlat0.w = (-u_xlat0.z);
    vs_TEXCOORD3.xyz = u_xlat0.xyw;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	vec4 _LightShadowData;
UNITY_LOCATION(0) uniform  sampler2D _CameraDepthTexture;
UNITY_LOCATION(1) uniform  sampler2D _ShadowMapTexture;
UNITY_LOCATION(2) uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec3 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD3;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
bvec4 u_xlatb1;
vec4 u_xlat2;
bvec4 u_xlatb2;
vec3 u_xlat3;
float u_xlat4;
float u_xlat8;
void main()
{
    u_xlat0 = texture(_CameraDepthTexture, vs_TEXCOORD0.xy);
    u_xlat4 = _ZBufferParams.x * u_xlat0.x + _ZBufferParams.y;
    u_xlat4 = float(1.0) / u_xlat4;
    u_xlat8 = (-u_xlat4) + u_xlat0.x;
    u_xlat4 = unity_OrthoParams.w * u_xlat8 + u_xlat4;
    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + vs_TEXCOORD3.xyz;
    u_xlat0.xzw = u_xlat0.xxx * u_xlat1.xyz + vs_TEXCOORD2.xyz;
    u_xlat0.xzw = (-vs_TEXCOORD1.xyz) * vec3(u_xlat4) + u_xlat0.xzw;
    u_xlat1.xyz = vec3(u_xlat4) * vs_TEXCOORD1.xyz;
    u_xlat0.xyz = unity_OrthoParams.www * u_xlat0.xzw + u_xlat1.xyz;
    u_xlatb1 = greaterThanEqual(u_xlat0.zzzz, _LightSplitsNear);
    u_xlat1.x = u_xlatb1.x ? float(1.0) : 0.0;
    u_xlat1.y = u_xlatb1.y ? float(1.0) : 0.0;
    u_xlat1.z = u_xlatb1.z ? float(1.0) : 0.0;
    u_xlat1.w = u_xlatb1.w ? float(1.0) : 0.0;
;
    u_xlatb2 = lessThan(u_xlat0.zzzz, _LightSplitsFar);
    u_xlat2.x = u_xlatb2.x ? float(1.0) : 0.0;
    u_xlat2.y = u_xlatb2.y ? float(1.0) : 0.0;
    u_xlat2.z = u_xlatb2.z ? float(1.0) : 0.0;
    u_xlat2.w = u_xlatb2.w ? float(1.0) : 0.0;
;
    u_xlat1 = u_xlat1 * u_xlat2;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4unity_CameraToWorld[1];
    u_xlat2 = hlslcc_mtx4x4unity_CameraToWorld[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4unity_CameraToWorld[2] * u_xlat0.zzzz + u_xlat2;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_CameraToWorld[3];
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[5].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[4].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[6].xyz * u_xlat0.zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[7].xyz * u_xlat0.www + u_xlat2.xyz;
    u_xlat2.xyz = u_xlat1.yyy * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * u_xlat0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * u_xlat0.zzz + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[3].xyz * u_xlat0.www + u_xlat3.xyz;
    u_xlat2.xyz = u_xlat3.xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat3.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[9].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[8].xyz * u_xlat0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[10].xyz * u_xlat0.zzz + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[11].xyz * u_xlat0.www + u_xlat3.xyz;
    u_xlat1.xyz = u_xlat3.xyz * u_xlat1.zzz + u_xlat2.xyz;
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[13].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[12].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[14].xyz * u_xlat0.zzz + u_xlat2.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[15].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.www + u_xlat1.xyz;
    vec3 txVec0 = vec3(u_xlat0.xy,u_xlat0.z);
    u_xlat0.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
    u_xlat4 = (-_LightShadowData.x) + 1.0;
    SV_Target0 = u_xlat0.xxxx * vec4(u_xlat4) + _LightShadowData.xxxx;
    return;
}

#endif
"
}
SubProgram "vulkan " {
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 193
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %80 %119 %129 %134 %136 %177 %184 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpMemberDecorate %78 0 BuiltIn 78 
                                                      OpMemberDecorate %78 1 BuiltIn 78 
                                                      OpMemberDecorate %78 2 BuiltIn 78 
                                                      OpDecorate %78 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 119 
                                                      OpDecorate %129 Location 129 
                                                      OpDecorate vs_TEXCOORD1 Location 134 
                                                      OpDecorate %136 Location 136 
                                                      OpDecorate vs_TEXCOORD2 Location 177 
                                                      OpDecorate vs_TEXCOORD3 Location 184 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %16 %17 %18 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4];}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 2 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %29 = OpConstant 0 
                                          i32 %45 = OpConstant 3 
                               Private f32_4* %49 = OpVariable Private 
                                          u32 %76 = OpConstant 1 
                                              %77 = OpTypeArray %6 %76 
                                              %78 = OpTypeStruct %7 %6 %77 
                                              %79 = OpTypePointer Output %78 
         Output struct {f32_4; f32; f32[1];}* %80 = OpVariable Output 
                                              %82 = OpTypePointer Output %7 
                                              %84 = OpTypePointer Private %6 
                                          u32 %87 = OpConstant 0 
                                              %88 = OpTypePointer Uniform %6 
                                              %93 = OpTypeVector %6 3 
                                          f32 %96 = OpConstant 3.674022E-40 
                                        f32_3 %97 = OpConstantComposite %96 %96 %96 
                                             %101 = OpTypePointer Private %93 
                              Private f32_3* %102 = OpVariable Private 
                       Output f32_4* vs_TEXCOORD0 = OpVariable Output 
                                             %120 = OpTypeVector %6 2 
                                             %128 = OpTypePointer Input %120 
                                Input f32_2* %129 = OpVariable Input 
                                             %133 = OpTypePointer Output %93 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                                             %135 = OpTypePointer Input %93 
                                Input f32_3* %136 = OpVariable Input 
                                         u32 %171 = OpConstant 2 
                                         u32 %175 = OpConstant 3 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                       Output f32_3* vs_TEXCOORD3 = OpVariable Output 
                                             %187 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %30 = OpAccessChain %21 %23 %29 
                                        f32_4 %31 = OpLoad %30 
                                        f32_4 %32 = OpLoad %11 
                                        f32_4 %33 = OpVectorShuffle %32 %32 0 0 0 0 
                                        f32_4 %34 = OpFMul %31 %33 
                                        f32_4 %35 = OpLoad %9 
                                        f32_4 %36 = OpFAdd %34 %35 
                                                      OpStore %9 %36 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %23 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %44 = OpLoad %9 
                               Uniform f32_4* %46 = OpAccessChain %21 %23 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_4 %48 = OpFAdd %44 %47 
                                                      OpStore %9 %48 
                                        f32_4 %50 = OpLoad %9 
                                        f32_4 %51 = OpVectorShuffle %50 %50 1 1 1 1 
                               Uniform f32_4* %52 = OpAccessChain %21 %45 %24 
                                        f32_4 %53 = OpLoad %52 
                                        f32_4 %54 = OpFMul %51 %53 
                                                      OpStore %49 %54 
                               Uniform f32_4* %55 = OpAccessChain %21 %45 %29 
                                        f32_4 %56 = OpLoad %55 
                                        f32_4 %57 = OpLoad %9 
                                        f32_4 %58 = OpVectorShuffle %57 %57 0 0 0 0 
                                        f32_4 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %49 
                                        f32_4 %61 = OpFAdd %59 %60 
                                                      OpStore %49 %61 
                               Uniform f32_4* %62 = OpAccessChain %21 %45 %23 
                                        f32_4 %63 = OpLoad %62 
                                        f32_4 %64 = OpLoad %9 
                                        f32_4 %65 = OpVectorShuffle %64 %64 2 2 2 2 
                                        f32_4 %66 = OpFMul %63 %65 
                                        f32_4 %67 = OpLoad %49 
                                        f32_4 %68 = OpFAdd %66 %67 
                                                      OpStore %49 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %45 %45 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %9 
                                        f32_4 %72 = OpVectorShuffle %71 %71 3 3 3 3 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %49 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %9 %75 
                                        f32_4 %81 = OpLoad %9 
                                Output f32_4* %83 = OpAccessChain %80 %29 
                                                      OpStore %83 %81 
                                 Private f32* %85 = OpAccessChain %9 %76 
                                          f32 %86 = OpLoad %85 
                                 Uniform f32* %89 = OpAccessChain %21 %29 %87 
                                          f32 %90 = OpLoad %89 
                                          f32 %91 = OpFMul %86 %90 
                                 Private f32* %92 = OpAccessChain %9 %76 
                                                      OpStore %92 %91 
                                        f32_4 %94 = OpLoad %9 
                                        f32_3 %95 = OpVectorShuffle %94 %94 0 3 1 
                                        f32_3 %98 = OpFMul %95 %97 
                                        f32_4 %99 = OpLoad %49 
                                       f32_4 %100 = OpVectorShuffle %99 %98 4 1 5 6 
                                                      OpStore %49 %100 
                                       f32_4 %103 = OpLoad %9 
                                       f32_3 %104 = OpVectorShuffle %103 %103 1 1 1 
                              Uniform f32_4* %105 = OpAccessChain %21 %24 %24 
                                       f32_4 %106 = OpLoad %105 
                                       f32_3 %107 = OpVectorShuffle %106 %106 0 1 2 
                                       f32_3 %108 = OpFMul %104 %107 
                                                      OpStore %102 %108 
                              Uniform f32_4* %109 = OpAccessChain %21 %24 %29 
                                       f32_4 %110 = OpLoad %109 
                                       f32_3 %111 = OpVectorShuffle %110 %110 0 1 2 
                                       f32_4 %112 = OpLoad %9 
                                       f32_3 %113 = OpVectorShuffle %112 %112 0 0 0 
                                       f32_3 %114 = OpFMul %111 %113 
                                       f32_3 %115 = OpLoad %102 
                                       f32_3 %116 = OpFAdd %114 %115 
                                       f32_4 %117 = OpLoad %9 
                                       f32_4 %118 = OpVectorShuffle %117 %116 4 5 6 3 
                                                      OpStore %9 %118 
                                       f32_4 %121 = OpLoad %49 
                                       f32_2 %122 = OpVectorShuffle %121 %121 2 2 
                                       f32_4 %123 = OpLoad %49 
                                       f32_2 %124 = OpVectorShuffle %123 %123 0 3 
                                       f32_2 %125 = OpFAdd %122 %124 
                                       f32_4 %126 = OpLoad vs_TEXCOORD0 
                                       f32_4 %127 = OpVectorShuffle %126 %125 0 1 4 5 
                                                      OpStore vs_TEXCOORD0 %127 
                                       f32_2 %130 = OpLoad %129 
                                       f32_4 %131 = OpLoad vs_TEXCOORD0 
                                       f32_4 %132 = OpVectorShuffle %131 %130 4 5 2 3 
                                                      OpStore vs_TEXCOORD0 %132 
                                       f32_3 %137 = OpLoad %136 
                                                      OpStore vs_TEXCOORD1 %137 
                                       f32_4 %138 = OpLoad %9 
                                       f32_3 %139 = OpVectorShuffle %138 %138 0 1 2 
                              Uniform f32_4* %140 = OpAccessChain %21 %24 %23 
                                       f32_4 %141 = OpLoad %140 
                                       f32_3 %142 = OpVectorShuffle %141 %141 0 1 2 
                                       f32_3 %143 = OpFNegate %142 
                                       f32_3 %144 = OpFAdd %139 %143 
                                       f32_4 %145 = OpLoad %49 
                                       f32_4 %146 = OpVectorShuffle %145 %144 4 5 6 3 
                                                      OpStore %49 %146 
                                       f32_4 %147 = OpLoad %9 
                                       f32_3 %148 = OpVectorShuffle %147 %147 0 1 2 
                              Uniform f32_4* %149 = OpAccessChain %21 %24 %23 
                                       f32_4 %150 = OpLoad %149 
                                       f32_3 %151 = OpVectorShuffle %150 %150 0 1 2 
                                       f32_3 %152 = OpFAdd %148 %151 
                                       f32_4 %153 = OpLoad %9 
                                       f32_4 %154 = OpVectorShuffle %153 %152 4 5 6 3 
                                                      OpStore %9 %154 
                                       f32_4 %155 = OpLoad %9 
                                       f32_3 %156 = OpVectorShuffle %155 %155 0 1 2 
                              Uniform f32_4* %157 = OpAccessChain %21 %24 %45 
                                       f32_4 %158 = OpLoad %157 
                                       f32_3 %159 = OpVectorShuffle %158 %158 0 1 2 
                                       f32_3 %160 = OpFAdd %156 %159 
                                       f32_4 %161 = OpLoad %9 
                                       f32_4 %162 = OpVectorShuffle %161 %160 4 5 6 3 
                                                      OpStore %9 %162 
                                       f32_4 %163 = OpLoad %49 
                                       f32_3 %164 = OpVectorShuffle %163 %163 0 1 2 
                              Uniform f32_4* %165 = OpAccessChain %21 %24 %45 
                                       f32_4 %166 = OpLoad %165 
                                       f32_3 %167 = OpVectorShuffle %166 %166 0 1 2 
                                       f32_3 %168 = OpFAdd %164 %167 
                                       f32_4 %169 = OpLoad %49 
                                       f32_4 %170 = OpVectorShuffle %169 %168 4 5 6 3 
                                                      OpStore %49 %170 
                                Private f32* %172 = OpAccessChain %49 %171 
                                         f32 %173 = OpLoad %172 
                                         f32 %174 = OpFNegate %173 
                                Private f32* %176 = OpAccessChain %49 %175 
                                                      OpStore %176 %174 
                                       f32_4 %178 = OpLoad %49 
                                       f32_3 %179 = OpVectorShuffle %178 %178 0 1 3 
                                                      OpStore vs_TEXCOORD2 %179 
                                Private f32* %180 = OpAccessChain %9 %171 
                                         f32 %181 = OpLoad %180 
                                         f32 %182 = OpFNegate %181 
                                Private f32* %183 = OpAccessChain %9 %175 
                                                      OpStore %183 %182 
                                       f32_4 %185 = OpLoad %9 
                                       f32_3 %186 = OpVectorShuffle %185 %185 0 1 3 
                                                      OpStore vs_TEXCOORD3 %186 
                                 Output f32* %188 = OpAccessChain %80 %29 %76 
                                         f32 %189 = OpLoad %188 
                                         f32 %190 = OpFNegate %189 
                                 Output f32* %191 = OpAccessChain %80 %29 %76 
                                                      OpStore %191 %190 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 432
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %21 %76 %79 %93 %421 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpDecorate %12 DescriptorSet 12 
                                                      OpDecorate %12 Binding 12 
                                                      OpDecorate %16 DescriptorSet 16 
                                                      OpDecorate %16 Binding 16 
                                                      OpDecorate vs_TEXCOORD0 Location 21 
                                                      OpDecorate %33 ArrayStride 33 
                                                      OpDecorate %35 ArrayStride 35 
                                                      OpMemberDecorate %36 0 Offset 36 
                                                      OpMemberDecorate %36 1 Offset 36 
                                                      OpMemberDecorate %36 2 Offset 36 
                                                      OpMemberDecorate %36 3 Offset 36 
                                                      OpMemberDecorate %36 4 Offset 36 
                                                      OpMemberDecorate %36 5 Offset 36 
                                                      OpMemberDecorate %36 6 Offset 36 
                                                      OpDecorate %36 Block 
                                                      OpDecorate %38 DescriptorSet 38 
                                                      OpDecorate %38 Binding 38 
                                                      OpDecorate vs_TEXCOORD2 Location 76 
                                                      OpDecorate vs_TEXCOORD3 Location 79 
                                                      OpDecorate vs_TEXCOORD1 Location 93 
                                                      OpDecorate %405 DescriptorSet 405 
                                                      OpDecorate %405 Binding 405 
                                                      OpDecorate %407 DescriptorSet 407 
                                                      OpDecorate %407 Binding 407 
                                                      OpDecorate %421 Location 421 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypePointer UniformConstant %10 
         UniformConstant read_only Texture2D* %12 = OpVariable UniformConstant 
                                              %14 = OpTypeSampler 
                                              %15 = OpTypePointer UniformConstant %14 
                     UniformConstant sampler* %16 = OpVariable UniformConstant 
                                              %18 = OpTypeSampledImage %10 
                                              %20 = OpTypePointer Input %7 
                        Input f32_4* vs_TEXCOORD0 = OpVariable Input 
                                              %22 = OpTypeVector %6 2 
                                              %26 = OpTypeInt 32 0 
                                          u32 %27 = OpConstant 0 
                                              %29 = OpTypePointer Private %6 
                                 Private f32* %31 = OpVariable Private 
                                          u32 %32 = OpConstant 4 
                                              %33 = OpTypeArray %7 %32 
                                          u32 %34 = OpConstant 16 
                                              %35 = OpTypeArray %7 %34 
                                              %36 = OpTypeStruct %7 %7 %33 %7 %7 %35 %7 
                                              %37 = OpTypePointer Uniform %36 
Uniform struct {f32_4; f32_4; f32_4[4]; f32_4; f32_4; f32_4[16]; f32_4;}* %38 = OpVariable Uniform 
                                              %39 = OpTypeInt 32 1 
                                          i32 %40 = OpConstant 0 
                                              %41 = OpTypePointer Uniform %6 
                                          u32 %47 = OpConstant 1 
                                          f32 %51 = OpConstant 3.674022E-40 
                                 Private f32* %54 = OpVariable Private 
                                          i32 %60 = OpConstant 1 
                                          u32 %61 = OpConstant 3 
                               Private f32_4* %73 = OpVariable Private 
                                              %74 = OpTypeVector %6 3 
                                              %75 = OpTypePointer Input %74 
                        Input f32_3* vs_TEXCOORD2 = OpVariable Input 
                        Input f32_3* vs_TEXCOORD3 = OpVariable Input 
                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                                             %110 = OpTypePointer Uniform %7 
                                             %122 = OpTypeBool 
                                             %123 = OpTypeVector %122 4 
                                             %124 = OpTypePointer Private %123 
                             Private bool_4* %125 = OpVariable Private 
                                         i32 %128 = OpConstant 3 
                                             %132 = OpTypePointer Private %122 
                                         f32 %135 = OpConstant 3.674022E-40 
                                         u32 %142 = OpConstant 2 
                             Private bool_4* %151 = OpVariable Private 
                                         i32 %154 = OpConstant 4 
                              Private f32_4* %158 = OpVariable Private 
                                         i32 %180 = OpConstant 2 
                                         i32 %204 = OpConstant 5 
                                         i32 %222 = OpConstant 6 
                                         i32 %234 = OpConstant 7 
                                             %253 = OpTypePointer Private %74 
                              Private f32_3* %254 = OpVariable Private 
                                         i32 %296 = OpConstant 9 
                                         i32 %301 = OpConstant 8 
                                         i32 %310 = OpConstant 10 
                                         i32 %319 = OpConstant 11 
                                         i32 %339 = OpConstant 13 
                                         i32 %344 = OpConstant 12 
                                         i32 %353 = OpConstant 14 
                                         i32 %364 = OpConstant 15 
                                Private f32* %386 = OpVariable Private 
                                       f32_4 %388 = OpConstantComposite %51 %51 %51 %51 
                                             %397 = OpTypePointer Function %74 
        UniformConstant read_only Texture2D* %405 = OpVariable UniformConstant 
                    UniformConstant sampler* %407 = OpVariable UniformConstant 
                                             %409 = OpTypeImage %6 Dim2D 1 0 0 1 Unknown 
                                             %410 = OpTypeSampledImage %409 
                                             %420 = OpTypePointer Output %7 
                               Output f32_4* %421 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %398 = OpVariable Function 
                          read_only Texture2D %13 = OpLoad %12 
                                      sampler %17 = OpLoad %16 
                   read_only Texture2DSampled %19 = OpSampledImage %13 %17 
                                        f32_4 %23 = OpLoad vs_TEXCOORD0 
                                        f32_2 %24 = OpVectorShuffle %23 %23 0 1 
                                        f32_4 %25 = OpImageSampleImplicitLod %19 %24 
                                          f32 %28 = OpCompositeExtract %25 0 
                                 Private f32* %30 = OpAccessChain %9 %27 
                                                      OpStore %30 %28 
                                 Uniform f32* %42 = OpAccessChain %38 %40 %27 
                                          f32 %43 = OpLoad %42 
                                 Private f32* %44 = OpAccessChain %9 %27 
                                          f32 %45 = OpLoad %44 
                                          f32 %46 = OpFMul %43 %45 
                                 Uniform f32* %48 = OpAccessChain %38 %40 %47 
                                          f32 %49 = OpLoad %48 
                                          f32 %50 = OpFAdd %46 %49 
                                                      OpStore %31 %50 
                                          f32 %52 = OpLoad %31 
                                          f32 %53 = OpFDiv %51 %52 
                                                      OpStore %31 %53 
                                          f32 %55 = OpLoad %31 
                                          f32 %56 = OpFNegate %55 
                                 Private f32* %57 = OpAccessChain %9 %27 
                                          f32 %58 = OpLoad %57 
                                          f32 %59 = OpFAdd %56 %58 
                                                      OpStore %54 %59 
                                 Uniform f32* %62 = OpAccessChain %38 %60 %61 
                                          f32 %63 = OpLoad %62 
                                          f32 %64 = OpLoad %54 
                                          f32 %65 = OpFMul %63 %64 
                                          f32 %66 = OpLoad %31 
                                          f32 %67 = OpFAdd %65 %66 
                                                      OpStore %31 %67 
                                 Private f32* %68 = OpAccessChain %9 %27 
                                          f32 %69 = OpLoad %68 
                                          f32 %70 = OpFNegate %69 
                                          f32 %71 = OpFAdd %70 %51 
                                 Private f32* %72 = OpAccessChain %9 %27 
                                                      OpStore %72 %71 
                                        f32_3 %77 = OpLoad vs_TEXCOORD2 
                                        f32_3 %78 = OpFNegate %77 
                                        f32_3 %80 = OpLoad vs_TEXCOORD3 
                                        f32_3 %81 = OpFAdd %78 %80 
                                        f32_4 %82 = OpLoad %73 
                                        f32_4 %83 = OpVectorShuffle %82 %81 4 5 6 3 
                                                      OpStore %73 %83 
                                        f32_4 %84 = OpLoad %9 
                                        f32_3 %85 = OpVectorShuffle %84 %84 0 0 0 
                                        f32_4 %86 = OpLoad %73 
                                        f32_3 %87 = OpVectorShuffle %86 %86 0 1 2 
                                        f32_3 %88 = OpFMul %85 %87 
                                        f32_3 %89 = OpLoad vs_TEXCOORD2 
                                        f32_3 %90 = OpFAdd %88 %89 
                                        f32_4 %91 = OpLoad %9 
                                        f32_4 %92 = OpVectorShuffle %91 %90 4 1 5 6 
                                                      OpStore %9 %92 
                                        f32_3 %94 = OpLoad vs_TEXCOORD1 
                                        f32_3 %95 = OpFNegate %94 
                                          f32 %96 = OpLoad %31 
                                        f32_3 %97 = OpCompositeConstruct %96 %96 %96 
                                        f32_3 %98 = OpFMul %95 %97 
                                        f32_4 %99 = OpLoad %9 
                                       f32_3 %100 = OpVectorShuffle %99 %99 0 2 3 
                                       f32_3 %101 = OpFAdd %98 %100 
                                       f32_4 %102 = OpLoad %9 
                                       f32_4 %103 = OpVectorShuffle %102 %101 4 1 5 6 
                                                      OpStore %9 %103 
                                         f32 %104 = OpLoad %31 
                                       f32_3 %105 = OpCompositeConstruct %104 %104 %104 
                                       f32_3 %106 = OpLoad vs_TEXCOORD1 
                                       f32_3 %107 = OpFMul %105 %106 
                                       f32_4 %108 = OpLoad %73 
                                       f32_4 %109 = OpVectorShuffle %108 %107 4 5 6 3 
                                                      OpStore %73 %109 
                              Uniform f32_4* %111 = OpAccessChain %38 %60 
                                       f32_4 %112 = OpLoad %111 
                                       f32_3 %113 = OpVectorShuffle %112 %112 3 3 3 
                                       f32_4 %114 = OpLoad %9 
                                       f32_3 %115 = OpVectorShuffle %114 %114 0 2 3 
                                       f32_3 %116 = OpFMul %113 %115 
                                       f32_4 %117 = OpLoad %73 
                                       f32_3 %118 = OpVectorShuffle %117 %117 0 1 2 
                                       f32_3 %119 = OpFAdd %116 %118 
                                       f32_4 %120 = OpLoad %9 
                                       f32_4 %121 = OpVectorShuffle %120 %119 4 5 6 3 
                                                      OpStore %9 %121 
                                       f32_4 %126 = OpLoad %9 
                                       f32_4 %127 = OpVectorShuffle %126 %126 2 2 2 2 
                              Uniform f32_4* %129 = OpAccessChain %38 %128 
                                       f32_4 %130 = OpLoad %129 
                                      bool_4 %131 = OpFOrdGreaterThanEqual %127 %130 
                                                      OpStore %125 %131 
                               Private bool* %133 = OpAccessChain %125 %27 
                                        bool %134 = OpLoad %133 
                                         f32 %136 = OpSelect %134 %51 %135 
                                Private f32* %137 = OpAccessChain %73 %27 
                                                      OpStore %137 %136 
                               Private bool* %138 = OpAccessChain %125 %47 
                                        bool %139 = OpLoad %138 
                                         f32 %140 = OpSelect %139 %51 %135 
                                Private f32* %141 = OpAccessChain %73 %47 
                                                      OpStore %141 %140 
                               Private bool* %143 = OpAccessChain %125 %142 
                                        bool %144 = OpLoad %143 
                                         f32 %145 = OpSelect %144 %51 %135 
                                Private f32* %146 = OpAccessChain %73 %142 
                                                      OpStore %146 %145 
                               Private bool* %147 = OpAccessChain %125 %61 
                                        bool %148 = OpLoad %147 
                                         f32 %149 = OpSelect %148 %51 %135 
                                Private f32* %150 = OpAccessChain %73 %61 
                                                      OpStore %150 %149 
                                       f32_4 %152 = OpLoad %9 
                                       f32_4 %153 = OpVectorShuffle %152 %152 2 2 2 2 
                              Uniform f32_4* %155 = OpAccessChain %38 %154 
                                       f32_4 %156 = OpLoad %155 
                                      bool_4 %157 = OpFOrdLessThan %153 %156 
                                                      OpStore %151 %157 
                               Private bool* %159 = OpAccessChain %151 %27 
                                        bool %160 = OpLoad %159 
                                         f32 %161 = OpSelect %160 %51 %135 
                                Private f32* %162 = OpAccessChain %158 %27 
                                                      OpStore %162 %161 
                               Private bool* %163 = OpAccessChain %151 %47 
                                        bool %164 = OpLoad %163 
                                         f32 %165 = OpSelect %164 %51 %135 
                                Private f32* %166 = OpAccessChain %158 %47 
                                                      OpStore %166 %165 
                               Private bool* %167 = OpAccessChain %151 %142 
                                        bool %168 = OpLoad %167 
                                         f32 %169 = OpSelect %168 %51 %135 
                                Private f32* %170 = OpAccessChain %158 %142 
                                                      OpStore %170 %169 
                               Private bool* %171 = OpAccessChain %151 %61 
                                        bool %172 = OpLoad %171 
                                         f32 %173 = OpSelect %172 %51 %135 
                                Private f32* %174 = OpAccessChain %158 %61 
                                                      OpStore %174 %173 
                                       f32_4 %175 = OpLoad %73 
                                       f32_4 %176 = OpLoad %158 
                                       f32_4 %177 = OpFMul %175 %176 
                                                      OpStore %73 %177 
                                       f32_4 %178 = OpLoad %9 
                                       f32_4 %179 = OpVectorShuffle %178 %178 1 1 1 1 
                              Uniform f32_4* %181 = OpAccessChain %38 %180 %60 
                                       f32_4 %182 = OpLoad %181 
                                       f32_4 %183 = OpFMul %179 %182 
                                                      OpStore %158 %183 
                              Uniform f32_4* %184 = OpAccessChain %38 %180 %40 
                                       f32_4 %185 = OpLoad %184 
                                       f32_4 %186 = OpLoad %9 
                                       f32_4 %187 = OpVectorShuffle %186 %186 0 0 0 0 
                                       f32_4 %188 = OpFMul %185 %187 
                                       f32_4 %189 = OpLoad %158 
                                       f32_4 %190 = OpFAdd %188 %189 
                                                      OpStore %158 %190 
                              Uniform f32_4* %191 = OpAccessChain %38 %180 %180 
                                       f32_4 %192 = OpLoad %191 
                                       f32_4 %193 = OpLoad %9 
                                       f32_4 %194 = OpVectorShuffle %193 %193 2 2 2 2 
                                       f32_4 %195 = OpFMul %192 %194 
                                       f32_4 %196 = OpLoad %158 
                                       f32_4 %197 = OpFAdd %195 %196 
                                                      OpStore %9 %197 
                                       f32_4 %198 = OpLoad %9 
                              Uniform f32_4* %199 = OpAccessChain %38 %180 %128 
                                       f32_4 %200 = OpLoad %199 
                                       f32_4 %201 = OpFAdd %198 %200 
                                                      OpStore %9 %201 
                                       f32_4 %202 = OpLoad %9 
                                       f32_3 %203 = OpVectorShuffle %202 %202 1 1 1 
                              Uniform f32_4* %205 = OpAccessChain %38 %204 %204 
                                       f32_4 %206 = OpLoad %205 
                                       f32_3 %207 = OpVectorShuffle %206 %206 0 1 2 
                                       f32_3 %208 = OpFMul %203 %207 
                                       f32_4 %209 = OpLoad %158 
                                       f32_4 %210 = OpVectorShuffle %209 %208 4 5 6 3 
                                                      OpStore %158 %210 
                              Uniform f32_4* %211 = OpAccessChain %38 %204 %154 
                                       f32_4 %212 = OpLoad %211 
                                       f32_3 %213 = OpVectorShuffle %212 %212 0 1 2 
                                       f32_4 %214 = OpLoad %9 
                                       f32_3 %215 = OpVectorShuffle %214 %214 0 0 0 
                                       f32_3 %216 = OpFMul %213 %215 
                                       f32_4 %217 = OpLoad %158 
                                       f32_3 %218 = OpVectorShuffle %217 %217 0 1 2 
                                       f32_3 %219 = OpFAdd %216 %218 
                                       f32_4 %220 = OpLoad %158 
                                       f32_4 %221 = OpVectorShuffle %220 %219 4 5 6 3 
                                                      OpStore %158 %221 
                              Uniform f32_4* %223 = OpAccessChain %38 %204 %222 
                                       f32_4 %224 = OpLoad %223 
                                       f32_3 %225 = OpVectorShuffle %224 %224 0 1 2 
                                       f32_4 %226 = OpLoad %9 
                                       f32_3 %227 = OpVectorShuffle %226 %226 2 2 2 
                                       f32_3 %228 = OpFMul %225 %227 
                                       f32_4 %229 = OpLoad %158 
                                       f32_3 %230 = OpVectorShuffle %229 %229 0 1 2 
                                       f32_3 %231 = OpFAdd %228 %230 
                                       f32_4 %232 = OpLoad %158 
                                       f32_4 %233 = OpVectorShuffle %232 %231 4 5 6 3 
                                                      OpStore %158 %233 
                              Uniform f32_4* %235 = OpAccessChain %38 %204 %234 
                                       f32_4 %236 = OpLoad %235 
                                       f32_3 %237 = OpVectorShuffle %236 %236 0 1 2 
                                       f32_4 %238 = OpLoad %9 
                                       f32_3 %239 = OpVectorShuffle %238 %238 3 3 3 
                                       f32_3 %240 = OpFMul %237 %239 
                                       f32_4 %241 = OpLoad %158 
                                       f32_3 %242 = OpVectorShuffle %241 %241 0 1 2 
                                       f32_3 %243 = OpFAdd %240 %242 
                                       f32_4 %244 = OpLoad %158 
                                       f32_4 %245 = OpVectorShuffle %244 %243 4 5 6 3 
                                                      OpStore %158 %245 
                                       f32_4 %246 = OpLoad %73 
                                       f32_3 %247 = OpVectorShuffle %246 %246 1 1 1 
                                       f32_4 %248 = OpLoad %158 
                                       f32_3 %249 = OpVectorShuffle %248 %248 0 1 2 
                                       f32_3 %250 = OpFMul %247 %249 
                                       f32_4 %251 = OpLoad %158 
                                       f32_4 %252 = OpVectorShuffle %251 %250 4 5 6 3 
                                                      OpStore %158 %252 
                                       f32_4 %255 = OpLoad %9 
                                       f32_3 %256 = OpVectorShuffle %255 %255 1 1 1 
                              Uniform f32_4* %257 = OpAccessChain %38 %204 %60 
                                       f32_4 %258 = OpLoad %257 
                                       f32_3 %259 = OpVectorShuffle %258 %258 0 1 2 
                                       f32_3 %260 = OpFMul %256 %259 
                                                      OpStore %254 %260 
                              Uniform f32_4* %261 = OpAccessChain %38 %204 %40 
                                       f32_4 %262 = OpLoad %261 
                                       f32_3 %263 = OpVectorShuffle %262 %262 0 1 2 
                                       f32_4 %264 = OpLoad %9 
                                       f32_3 %265 = OpVectorShuffle %264 %264 0 0 0 
                                       f32_3 %266 = OpFMul %263 %265 
                                       f32_3 %267 = OpLoad %254 
                                       f32_3 %268 = OpFAdd %266 %267 
                                                      OpStore %254 %268 
                              Uniform f32_4* %269 = OpAccessChain %38 %204 %180 
                                       f32_4 %270 = OpLoad %269 
                                       f32_3 %271 = OpVectorShuffle %270 %270 0 1 2 
                                       f32_4 %272 = OpLoad %9 
                                       f32_3 %273 = OpVectorShuffle %272 %272 2 2 2 
                                       f32_3 %274 = OpFMul %271 %273 
                                       f32_3 %275 = OpLoad %254 
                                       f32_3 %276 = OpFAdd %274 %275 
                                                      OpStore %254 %276 
                              Uniform f32_4* %277 = OpAccessChain %38 %204 %128 
                                       f32_4 %278 = OpLoad %277 
                                       f32_3 %279 = OpVectorShuffle %278 %278 0 1 2 
                                       f32_4 %280 = OpLoad %9 
                                       f32_3 %281 = OpVectorShuffle %280 %280 3 3 3 
                                       f32_3 %282 = OpFMul %279 %281 
                                       f32_3 %283 = OpLoad %254 
                                       f32_3 %284 = OpFAdd %282 %283 
                                                      OpStore %254 %284 
                                       f32_3 %285 = OpLoad %254 
                                       f32_4 %286 = OpLoad %73 
                                       f32_3 %287 = OpVectorShuffle %286 %286 0 0 0 
                                       f32_3 %288 = OpFMul %285 %287 
                                       f32_4 %289 = OpLoad %158 
                                       f32_3 %290 = OpVectorShuffle %289 %289 0 1 2 
                                       f32_3 %291 = OpFAdd %288 %290 
                                       f32_4 %292 = OpLoad %158 
                                       f32_4 %293 = OpVectorShuffle %292 %291 4 5 6 3 
                                                      OpStore %158 %293 
                                       f32_4 %294 = OpLoad %9 
                                       f32_3 %295 = OpVectorShuffle %294 %294 1 1 1 
                              Uniform f32_4* %297 = OpAccessChain %38 %204 %296 
                                       f32_4 %298 = OpLoad %297 
                                       f32_3 %299 = OpVectorShuffle %298 %298 0 1 2 
                                       f32_3 %300 = OpFMul %295 %299 
                                                      OpStore %254 %300 
                              Uniform f32_4* %302 = OpAccessChain %38 %204 %301 
                                       f32_4 %303 = OpLoad %302 
                                       f32_3 %304 = OpVectorShuffle %303 %303 0 1 2 
                                       f32_4 %305 = OpLoad %9 
                                       f32_3 %306 = OpVectorShuffle %305 %305 0 0 0 
                                       f32_3 %307 = OpFMul %304 %306 
                                       f32_3 %308 = OpLoad %254 
                                       f32_3 %309 = OpFAdd %307 %308 
                                                      OpStore %254 %309 
                              Uniform f32_4* %311 = OpAccessChain %38 %204 %310 
                                       f32_4 %312 = OpLoad %311 
                                       f32_3 %313 = OpVectorShuffle %312 %312 0 1 2 
                                       f32_4 %314 = OpLoad %9 
                                       f32_3 %315 = OpVectorShuffle %314 %314 2 2 2 
                                       f32_3 %316 = OpFMul %313 %315 
                                       f32_3 %317 = OpLoad %254 
                                       f32_3 %318 = OpFAdd %316 %317 
                                                      OpStore %254 %318 
                              Uniform f32_4* %320 = OpAccessChain %38 %204 %319 
                                       f32_4 %321 = OpLoad %320 
                                       f32_3 %322 = OpVectorShuffle %321 %321 0 1 2 
                                       f32_4 %323 = OpLoad %9 
                                       f32_3 %324 = OpVectorShuffle %323 %323 3 3 3 
                                       f32_3 %325 = OpFMul %322 %324 
                                       f32_3 %326 = OpLoad %254 
                                       f32_3 %327 = OpFAdd %325 %326 
                                                      OpStore %254 %327 
                                       f32_3 %328 = OpLoad %254 
                                       f32_4 %329 = OpLoad %73 
                                       f32_3 %330 = OpVectorShuffle %329 %329 2 2 2 
                                       f32_3 %331 = OpFMul %328 %330 
                                       f32_4 %332 = OpLoad %158 
                                       f32_3 %333 = OpVectorShuffle %332 %332 0 1 2 
                                       f32_3 %334 = OpFAdd %331 %333 
                                       f32_4 %335 = OpLoad %158 
                                       f32_4 %336 = OpVectorShuffle %335 %334 4 5 6 3 
                                                      OpStore %158 %336 
                                       f32_4 %337 = OpLoad %9 
                                       f32_3 %338 = OpVectorShuffle %337 %337 1 1 1 
                              Uniform f32_4* %340 = OpAccessChain %38 %204 %339 
                                       f32_4 %341 = OpLoad %340 
                                       f32_3 %342 = OpVectorShuffle %341 %341 0 1 2 
                                       f32_3 %343 = OpFMul %338 %342 
                                                      OpStore %254 %343 
                              Uniform f32_4* %345 = OpAccessChain %38 %204 %344 
                                       f32_4 %346 = OpLoad %345 
                                       f32_3 %347 = OpVectorShuffle %346 %346 0 1 2 
                                       f32_4 %348 = OpLoad %9 
                                       f32_3 %349 = OpVectorShuffle %348 %348 0 0 0 
                                       f32_3 %350 = OpFMul %347 %349 
                                       f32_3 %351 = OpLoad %254 
                                       f32_3 %352 = OpFAdd %350 %351 
                                                      OpStore %254 %352 
                              Uniform f32_4* %354 = OpAccessChain %38 %204 %353 
                                       f32_4 %355 = OpLoad %354 
                                       f32_3 %356 = OpVectorShuffle %355 %355 0 1 2 
                                       f32_4 %357 = OpLoad %9 
                                       f32_3 %358 = OpVectorShuffle %357 %357 2 2 2 
                                       f32_3 %359 = OpFMul %356 %358 
                                       f32_3 %360 = OpLoad %254 
                                       f32_3 %361 = OpFAdd %359 %360 
                                       f32_4 %362 = OpLoad %9 
                                       f32_4 %363 = OpVectorShuffle %362 %361 4 5 6 3 
                                                      OpStore %9 %363 
                              Uniform f32_4* %365 = OpAccessChain %38 %204 %364 
                                       f32_4 %366 = OpLoad %365 
                                       f32_3 %367 = OpVectorShuffle %366 %366 0 1 2 
                                       f32_4 %368 = OpLoad %9 
                                       f32_3 %369 = OpVectorShuffle %368 %368 3 3 3 
                                       f32_3 %370 = OpFMul %367 %369 
                                       f32_4 %371 = OpLoad %9 
                                       f32_3 %372 = OpVectorShuffle %371 %371 0 1 2 
                                       f32_3 %373 = OpFAdd %370 %372 
                                       f32_4 %374 = OpLoad %9 
                                       f32_4 %375 = OpVectorShuffle %374 %373 4 5 6 3 
                                                      OpStore %9 %375 
                                       f32_4 %376 = OpLoad %9 
                                       f32_3 %377 = OpVectorShuffle %376 %376 0 1 2 
                                       f32_4 %378 = OpLoad %73 
                                       f32_3 %379 = OpVectorShuffle %378 %378 3 3 3 
                                       f32_3 %380 = OpFMul %377 %379 
                                       f32_4 %381 = OpLoad %158 
                                       f32_3 %382 = OpVectorShuffle %381 %381 0 1 2 
                                       f32_3 %383 = OpFAdd %380 %382 
                                       f32_4 %384 = OpLoad %9 
                                       f32_4 %385 = OpVectorShuffle %384 %383 4 5 6 3 
                                                      OpStore %9 %385 
                                       f32_4 %387 = OpLoad %73 
                                         f32 %389 = OpDot %387 %388 
                                                      OpStore %386 %389 
                                         f32 %390 = OpLoad %386 
                                         f32 %391 = OpFNegate %390 
                                Private f32* %392 = OpAccessChain %9 %142 
                                         f32 %393 = OpLoad %392 
                                         f32 %394 = OpFAdd %391 %393 
                                                      OpStore %54 %394 
                                         f32 %395 = OpLoad %54 
                                         f32 %396 = OpFAdd %395 %51 
                                                      OpStore %54 %396 
                                       f32_4 %399 = OpLoad %9 
                                       f32_2 %400 = OpVectorShuffle %399 %399 0 1 
                                         f32 %401 = OpLoad %54 
                                         f32 %402 = OpCompositeExtract %400 0 
                                         f32 %403 = OpCompositeExtract %400 1 
                                       f32_3 %404 = OpCompositeConstruct %402 %403 %401 
                                                      OpStore %398 %404 
                         read_only Texture2D %406 = OpLoad %405 
                                     sampler %408 = OpLoad %407 
                  read_only Texture2DSampled %411 = OpSampledImage %406 %408 
                                       f32_3 %412 = OpLoad %398 
                                         f32 %413 = OpCompositeExtract %412 2 
                                         f32 %414 = OpImageSampleDrefExplicitLod %411 %412 %413 Lod %6 
                                Private f32* %415 = OpAccessChain %9 %27 
                                                      OpStore %415 %414 
                                Uniform f32* %416 = OpAccessChain %38 %222 %27 
                                         f32 %417 = OpLoad %416 
                                         f32 %418 = OpFNegate %417 
                                         f32 %419 = OpFAdd %418 %51 
                                                      OpStore %31 %419 
                                       f32_4 %422 = OpLoad %9 
                                       f32_4 %423 = OpVectorShuffle %422 %422 0 0 0 0 
                                         f32 %424 = OpLoad %31 
                                       f32_4 %425 = OpCompositeConstruct %424 %424 %424 %424 
                                       f32_4 %426 = OpFMul %423 %425 
                              Uniform f32_4* %427 = OpAccessChain %38 %222 
                                       f32_4 %428 = OpLoad %427 
                                       f32_4 %429 = OpVectorShuffle %428 %428 0 0 0 0 
                                       f32_4 %430 = OpFAdd %426 %429 
                                                      OpStore %421 %430 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "SHADOWS_SPLIT_SPHERES" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "SHADOWS_SPLIT_SPHERES" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraInvProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in  vec4 in_POSITION0;
in  vec2 in_TEXCOORD0;
in  vec3 in_TEXCOORD1;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_CameraInvProjection[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_CameraInvProjection[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    vs_TEXCOORD0.zw = u_xlat1.zz + u_xlat1.xw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = in_TEXCOORD1.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-hlslcc_mtx4x4unity_CameraInvProjection[2].xyz);
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[2].xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;
    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;
    u_xlat1.w = (-u_xlat1.z);
    vs_TEXCOORD2.xyz = u_xlat1.xyw;
    u_xlat0.w = (-u_xlat0.z);
    vs_TEXCOORD3.xyz = u_xlat0.xyw;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	vec4 _LightShadowData;
UNITY_LOCATION(0) uniform  sampler2D _CameraDepthTexture;
UNITY_LOCATION(1) uniform  sampler2D _ShadowMapTexture;
UNITY_LOCATION(2) uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec3 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD3;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
bvec4 u_xlatb1;
vec3 u_xlat2;
vec3 u_xlat3;
float u_xlat4;
vec3 u_xlat5;
float u_xlat8;
void main()
{
    u_xlat0 = texture(_CameraDepthTexture, vs_TEXCOORD0.xy);
    u_xlat4 = _ZBufferParams.x * u_xlat0.x + _ZBufferParams.y;
    u_xlat4 = float(1.0) / u_xlat4;
    u_xlat8 = (-u_xlat4) + u_xlat0.x;
    u_xlat4 = unity_OrthoParams.w * u_xlat8 + u_xlat4;
    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + vs_TEXCOORD3.xyz;
    u_xlat0.xzw = u_xlat0.xxx * u_xlat1.xyz + vs_TEXCOORD2.xyz;
    u_xlat0.xzw = (-vs_TEXCOORD1.xyz) * vec3(u_xlat4) + u_xlat0.xzw;
    u_xlat1.xyz = vec3(u_xlat4) * vs_TEXCOORD1.xyz;
    u_xlat0.xyz = unity_OrthoParams.www * u_xlat0.xzw + u_xlat1.xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_CameraToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_CameraToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_CameraToWorld[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_CameraToWorld[3];
    u_xlat1.xyz = u_xlat0.xyz + (-unity_ShadowSplitSpheres[0].xyz);
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat2.xyz = u_xlat0.xyz + (-unity_ShadowSplitSpheres[1].xyz);
    u_xlat1.y = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat2.xyz = u_xlat0.xyz + (-unity_ShadowSplitSpheres[2].xyz);
    u_xlat1.z = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat2.xyz = u_xlat0.xyz + (-unity_ShadowSplitSpheres[3].xyz);
    u_xlat1.w = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlatb1 = lessThan(u_xlat1, unity_ShadowSplitSqRadii);
    u_xlat2.x = (u_xlatb1.x) ? float(-1.0) : float(-0.0);
    u_xlat2.y = (u_xlatb1.y) ? float(-1.0) : float(-0.0);
    u_xlat2.z = (u_xlatb1.z) ? float(-1.0) : float(-0.0);
    u_xlat1.x = u_xlatb1.x ? float(1.0) : 0.0;
    u_xlat1.y = u_xlatb1.y ? float(1.0) : 0.0;
    u_xlat1.z = u_xlatb1.z ? float(1.0) : 0.0;
    u_xlat1.w = u_xlatb1.w ? float(1.0) : 0.0;
;
    u_xlat5.xyz = u_xlat2.xyz + u_xlat1.yzw;
    u_xlat5.xyz = max(u_xlat5.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[5].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[4].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[6].xyz * u_xlat0.zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[7].xyz * u_xlat0.www + u_xlat2.xyz;
    u_xlat2.xyz = u_xlat5.xxx * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * u_xlat0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * u_xlat0.zzz + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[3].xyz * u_xlat0.www + u_xlat3.xyz;
    u_xlat2.xyz = u_xlat3.xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat3.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[9].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[8].xyz * u_xlat0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[10].xyz * u_xlat0.zzz + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[11].xyz * u_xlat0.www + u_xlat3.xyz;
    u_xlat1.xyz = u_xlat3.xyz * u_xlat5.yyy + u_xlat2.xyz;
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[13].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[12].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[14].xyz * u_xlat0.zzz + u_xlat2.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[15].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat5.zzz + u_xlat1.xyz;
    vec3 txVec0 = vec3(u_xlat0.xy,u_xlat0.z);
    u_xlat0.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
    u_xlat4 = (-_LightShadowData.x) + 1.0;
    SV_Target0 = u_xlat0.xxxx * vec4(u_xlat4) + _LightShadowData.xxxx;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "SHADOWS_SPLIT_SPHERES" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 193
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %80 %119 %129 %134 %136 %177 %184 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpMemberDecorate %78 0 BuiltIn 78 
                                                      OpMemberDecorate %78 1 BuiltIn 78 
                                                      OpMemberDecorate %78 2 BuiltIn 78 
                                                      OpDecorate %78 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 119 
                                                      OpDecorate %129 Location 129 
                                                      OpDecorate vs_TEXCOORD1 Location 134 
                                                      OpDecorate %136 Location 136 
                                                      OpDecorate vs_TEXCOORD2 Location 177 
                                                      OpDecorate vs_TEXCOORD3 Location 184 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %16 %17 %18 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4];}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 2 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %29 = OpConstant 0 
                                          i32 %45 = OpConstant 3 
                               Private f32_4* %49 = OpVariable Private 
                                          u32 %76 = OpConstant 1 
                                              %77 = OpTypeArray %6 %76 
                                              %78 = OpTypeStruct %7 %6 %77 
                                              %79 = OpTypePointer Output %78 
         Output struct {f32_4; f32; f32[1];}* %80 = OpVariable Output 
                                              %82 = OpTypePointer Output %7 
                                              %84 = OpTypePointer Private %6 
                                          u32 %87 = OpConstant 0 
                                              %88 = OpTypePointer Uniform %6 
                                              %93 = OpTypeVector %6 3 
                                          f32 %96 = OpConstant 3.674022E-40 
                                        f32_3 %97 = OpConstantComposite %96 %96 %96 
                                             %101 = OpTypePointer Private %93 
                              Private f32_3* %102 = OpVariable Private 
                       Output f32_4* vs_TEXCOORD0 = OpVariable Output 
                                             %120 = OpTypeVector %6 2 
                                             %128 = OpTypePointer Input %120 
                                Input f32_2* %129 = OpVariable Input 
                                             %133 = OpTypePointer Output %93 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                                             %135 = OpTypePointer Input %93 
                                Input f32_3* %136 = OpVariable Input 
                                         u32 %171 = OpConstant 2 
                                         u32 %175 = OpConstant 3 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                       Output f32_3* vs_TEXCOORD3 = OpVariable Output 
                                             %187 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %30 = OpAccessChain %21 %23 %29 
                                        f32_4 %31 = OpLoad %30 
                                        f32_4 %32 = OpLoad %11 
                                        f32_4 %33 = OpVectorShuffle %32 %32 0 0 0 0 
                                        f32_4 %34 = OpFMul %31 %33 
                                        f32_4 %35 = OpLoad %9 
                                        f32_4 %36 = OpFAdd %34 %35 
                                                      OpStore %9 %36 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %23 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %44 = OpLoad %9 
                               Uniform f32_4* %46 = OpAccessChain %21 %23 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_4 %48 = OpFAdd %44 %47 
                                                      OpStore %9 %48 
                                        f32_4 %50 = OpLoad %9 
                                        f32_4 %51 = OpVectorShuffle %50 %50 1 1 1 1 
                               Uniform f32_4* %52 = OpAccessChain %21 %45 %24 
                                        f32_4 %53 = OpLoad %52 
                                        f32_4 %54 = OpFMul %51 %53 
                                                      OpStore %49 %54 
                               Uniform f32_4* %55 = OpAccessChain %21 %45 %29 
                                        f32_4 %56 = OpLoad %55 
                                        f32_4 %57 = OpLoad %9 
                                        f32_4 %58 = OpVectorShuffle %57 %57 0 0 0 0 
                                        f32_4 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %49 
                                        f32_4 %61 = OpFAdd %59 %60 
                                                      OpStore %49 %61 
                               Uniform f32_4* %62 = OpAccessChain %21 %45 %23 
                                        f32_4 %63 = OpLoad %62 
                                        f32_4 %64 = OpLoad %9 
                                        f32_4 %65 = OpVectorShuffle %64 %64 2 2 2 2 
                                        f32_4 %66 = OpFMul %63 %65 
                                        f32_4 %67 = OpLoad %49 
                                        f32_4 %68 = OpFAdd %66 %67 
                                                      OpStore %49 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %45 %45 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %9 
                                        f32_4 %72 = OpVectorShuffle %71 %71 3 3 3 3 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %49 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %9 %75 
                                        f32_4 %81 = OpLoad %9 
                                Output f32_4* %83 = OpAccessChain %80 %29 
                                                      OpStore %83 %81 
                                 Private f32* %85 = OpAccessChain %9 %76 
                                          f32 %86 = OpLoad %85 
                                 Uniform f32* %89 = OpAccessChain %21 %29 %87 
                                          f32 %90 = OpLoad %89 
                                          f32 %91 = OpFMul %86 %90 
                                 Private f32* %92 = OpAccessChain %9 %76 
                                                      OpStore %92 %91 
                                        f32_4 %94 = OpLoad %9 
                                        f32_3 %95 = OpVectorShuffle %94 %94 0 3 1 
                                        f32_3 %98 = OpFMul %95 %97 
                                        f32_4 %99 = OpLoad %49 
                                       f32_4 %100 = OpVectorShuffle %99 %98 4 1 5 6 
                                                      OpStore %49 %100 
                                       f32_4 %103 = OpLoad %9 
                                       f32_3 %104 = OpVectorShuffle %103 %103 1 1 1 
                              Uniform f32_4* %105 = OpAccessChain %21 %24 %24 
                                       f32_4 %106 = OpLoad %105 
                                       f32_3 %107 = OpVectorShuffle %106 %106 0 1 2 
                                       f32_3 %108 = OpFMul %104 %107 
                                                      OpStore %102 %108 
                              Uniform f32_4* %109 = OpAccessChain %21 %24 %29 
                                       f32_4 %110 = OpLoad %109 
                                       f32_3 %111 = OpVectorShuffle %110 %110 0 1 2 
                                       f32_4 %112 = OpLoad %9 
                                       f32_3 %113 = OpVectorShuffle %112 %112 0 0 0 
                                       f32_3 %114 = OpFMul %111 %113 
                                       f32_3 %115 = OpLoad %102 
                                       f32_3 %116 = OpFAdd %114 %115 
                                       f32_4 %117 = OpLoad %9 
                                       f32_4 %118 = OpVectorShuffle %117 %116 4 5 6 3 
                                                      OpStore %9 %118 
                                       f32_4 %121 = OpLoad %49 
                                       f32_2 %122 = OpVectorShuffle %121 %121 2 2 
                                       f32_4 %123 = OpLoad %49 
                                       f32_2 %124 = OpVectorShuffle %123 %123 0 3 
                                       f32_2 %125 = OpFAdd %122 %124 
                                       f32_4 %126 = OpLoad vs_TEXCOORD0 
                                       f32_4 %127 = OpVectorShuffle %126 %125 0 1 4 5 
                                                      OpStore vs_TEXCOORD0 %127 
                                       f32_2 %130 = OpLoad %129 
                                       f32_4 %131 = OpLoad vs_TEXCOORD0 
                                       f32_4 %132 = OpVectorShuffle %131 %130 4 5 2 3 
                                                      OpStore vs_TEXCOORD0 %132 
                                       f32_3 %137 = OpLoad %136 
                                                      OpStore vs_TEXCOORD1 %137 
                                       f32_4 %138 = OpLoad %9 
                                       f32_3 %139 = OpVectorShuffle %138 %138 0 1 2 
                              Uniform f32_4* %140 = OpAccessChain %21 %24 %23 
                                       f32_4 %141 = OpLoad %140 
                                       f32_3 %142 = OpVectorShuffle %141 %141 0 1 2 
                                       f32_3 %143 = OpFNegate %142 
                                       f32_3 %144 = OpFAdd %139 %143 
                                       f32_4 %145 = OpLoad %49 
                                       f32_4 %146 = OpVectorShuffle %145 %144 4 5 6 3 
                                                      OpStore %49 %146 
                                       f32_4 %147 = OpLoad %9 
                                       f32_3 %148 = OpVectorShuffle %147 %147 0 1 2 
                              Uniform f32_4* %149 = OpAccessChain %21 %24 %23 
                                       f32_4 %150 = OpLoad %149 
                                       f32_3 %151 = OpVectorShuffle %150 %150 0 1 2 
                                       f32_3 %152 = OpFAdd %148 %151 
                                       f32_4 %153 = OpLoad %9 
                                       f32_4 %154 = OpVectorShuffle %153 %152 4 5 6 3 
                                                      OpStore %9 %154 
                                       f32_4 %155 = OpLoad %9 
                                       f32_3 %156 = OpVectorShuffle %155 %155 0 1 2 
                              Uniform f32_4* %157 = OpAccessChain %21 %24 %45 
                                       f32_4 %158 = OpLoad %157 
                                       f32_3 %159 = OpVectorShuffle %158 %158 0 1 2 
                                       f32_3 %160 = OpFAdd %156 %159 
                                       f32_4 %161 = OpLoad %9 
                                       f32_4 %162 = OpVectorShuffle %161 %160 4 5 6 3 
                                                      OpStore %9 %162 
                                       f32_4 %163 = OpLoad %49 
                                       f32_3 %164 = OpVectorShuffle %163 %163 0 1 2 
                              Uniform f32_4* %165 = OpAccessChain %21 %24 %45 
                                       f32_4 %166 = OpLoad %165 
                                       f32_3 %167 = OpVectorShuffle %166 %166 0 1 2 
                                       f32_3 %168 = OpFAdd %164 %167 
                                       f32_4 %169 = OpLoad %49 
                                       f32_4 %170 = OpVectorShuffle %169 %168 4 5 6 3 
                                                      OpStore %49 %170 
                                Private f32* %172 = OpAccessChain %49 %171 
                                         f32 %173 = OpLoad %172 
                                         f32 %174 = OpFNegate %173 
                                Private f32* %176 = OpAccessChain %49 %175 
                                                      OpStore %176 %174 
                                       f32_4 %178 = OpLoad %49 
                                       f32_3 %179 = OpVectorShuffle %178 %178 0 1 3 
                                                      OpStore vs_TEXCOORD2 %179 
                                Private f32* %180 = OpAccessChain %9 %171 
                                         f32 %181 = OpLoad %180 
                                         f32 %182 = OpFNegate %181 
                                Private f32* %183 = OpAccessChain %9 %175 
                                                      OpStore %183 %182 
                                       f32_4 %185 = OpLoad %9 
                                       f32_3 %186 = OpVectorShuffle %185 %185 0 1 3 
                                                      OpStore vs_TEXCOORD3 %186 
                                 Output f32* %188 = OpAccessChain %80 %29 %76 
                                         f32 %189 = OpLoad %188 
                                         f32 %190 = OpFNegate %189 
                                 Output f32* %191 = OpAccessChain %80 %29 %76 
                                                      OpStore %191 %190 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 458
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %21 %77 %80 %94 %447 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpDecorate %12 DescriptorSet 12 
                                                      OpDecorate %12 Binding 12 
                                                      OpDecorate %16 DescriptorSet 16 
                                                      OpDecorate %16 Binding 16 
                                                      OpDecorate vs_TEXCOORD0 Location 21 
                                                      OpDecorate %33 ArrayStride 33 
                                                      OpDecorate %34 ArrayStride 34 
                                                      OpDecorate %36 ArrayStride 36 
                                                      OpMemberDecorate %37 0 Offset 37 
                                                      OpMemberDecorate %37 1 Offset 37 
                                                      OpMemberDecorate %37 2 Offset 37 
                                                      OpMemberDecorate %37 3 Offset 37 
                                                      OpMemberDecorate %37 4 Offset 37 
                                                      OpMemberDecorate %37 5 Offset 37 
                                                      OpMemberDecorate %37 6 Offset 37 
                                                      OpDecorate %37 Block 
                                                      OpDecorate %39 DescriptorSet 39 
                                                      OpDecorate %39 Binding 39 
                                                      OpDecorate vs_TEXCOORD2 Location 77 
                                                      OpDecorate vs_TEXCOORD3 Location 80 
                                                      OpDecorate vs_TEXCOORD1 Location 94 
                                                      OpDecorate %431 DescriptorSet 431 
                                                      OpDecorate %431 Binding 431 
                                                      OpDecorate %433 DescriptorSet 433 
                                                      OpDecorate %433 Binding 433 
                                                      OpDecorate %447 Location 447 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypePointer UniformConstant %10 
         UniformConstant read_only Texture2D* %12 = OpVariable UniformConstant 
                                              %14 = OpTypeSampler 
                                              %15 = OpTypePointer UniformConstant %14 
                     UniformConstant sampler* %16 = OpVariable UniformConstant 
                                              %18 = OpTypeSampledImage %10 
                                              %20 = OpTypePointer Input %7 
                        Input f32_4* vs_TEXCOORD0 = OpVariable Input 
                                              %22 = OpTypeVector %6 2 
                                              %26 = OpTypeInt 32 0 
                                          u32 %27 = OpConstant 0 
                                              %29 = OpTypePointer Private %6 
                                 Private f32* %31 = OpVariable Private 
                                          u32 %32 = OpConstant 4 
                                              %33 = OpTypeArray %7 %32 
                                              %34 = OpTypeArray %7 %32 
                                          u32 %35 = OpConstant 16 
                                              %36 = OpTypeArray %7 %35 
                                              %37 = OpTypeStruct %7 %7 %33 %34 %7 %36 %7 
                                              %38 = OpTypePointer Uniform %37 
Uniform struct {f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4; f32_4[16]; f32_4;}* %39 = OpVariable Uniform 
                                              %40 = OpTypeInt 32 1 
                                          i32 %41 = OpConstant 0 
                                              %42 = OpTypePointer Uniform %6 
                                          u32 %48 = OpConstant 1 
                                          f32 %52 = OpConstant 3.674022E-40 
                                 Private f32* %55 = OpVariable Private 
                                          i32 %61 = OpConstant 1 
                                          u32 %62 = OpConstant 3 
                               Private f32_4* %74 = OpVariable Private 
                                              %75 = OpTypeVector %6 3 
                                              %76 = OpTypePointer Input %75 
                        Input f32_3* vs_TEXCOORD2 = OpVariable Input 
                        Input f32_3* vs_TEXCOORD3 = OpVariable Input 
                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                                             %111 = OpTypePointer Uniform %7 
                                         i32 %125 = OpConstant 2 
                                         i32 %144 = OpConstant 3 
                                             %163 = OpTypePointer Private %75 
                              Private f32_3* %164 = OpVariable Private 
                                         u32 %186 = OpConstant 2 
                                             %199 = OpTypeBool 
                                             %200 = OpTypeVector %199 4 
                                             %201 = OpTypePointer Private %200 
                             Private bool_4* %202 = OpVariable Private 
                                         i32 %204 = OpConstant 4 
                                             %208 = OpTypePointer Private %199 
                                         f32 %211 = OpConstant 3.674022E-40 
                                         f32 %212 = OpConstant 3.674022E-40 
                                         f32 %225 = OpConstant 3.674022E-40 
                                       f32_3 %245 = OpConstantComposite %225 %225 %225 
                                         i32 %251 = OpConstant 5 
                                         i32 %264 = OpConstant 6 
                                         i32 %273 = OpConstant 7 
                              Private f32_3* %286 = OpVariable Private 
                                       f32_4 %324 = OpConstantComposite %52 %52 %52 %52 
                                         i32 %329 = OpConstant 9 
                                         i32 %334 = OpConstant 8 
                                         i32 %343 = OpConstant 10 
                                         i32 %352 = OpConstant 11 
                                         i32 %369 = OpConstant 13 
                                         i32 %374 = OpConstant 12 
                                         i32 %383 = OpConstant 14 
                                         i32 %394 = OpConstant 15 
                                             %423 = OpTypePointer Function %75 
        UniformConstant read_only Texture2D* %431 = OpVariable UniformConstant 
                    UniformConstant sampler* %433 = OpVariable UniformConstant 
                                             %435 = OpTypeImage %6 Dim2D 1 0 0 1 Unknown 
                                             %436 = OpTypeSampledImage %435 
                                             %446 = OpTypePointer Output %7 
                               Output f32_4* %447 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %424 = OpVariable Function 
                          read_only Texture2D %13 = OpLoad %12 
                                      sampler %17 = OpLoad %16 
                   read_only Texture2DSampled %19 = OpSampledImage %13 %17 
                                        f32_4 %23 = OpLoad vs_TEXCOORD0 
                                        f32_2 %24 = OpVectorShuffle %23 %23 0 1 
                                        f32_4 %25 = OpImageSampleImplicitLod %19 %24 
                                          f32 %28 = OpCompositeExtract %25 0 
                                 Private f32* %30 = OpAccessChain %9 %27 
                                                      OpStore %30 %28 
                                 Uniform f32* %43 = OpAccessChain %39 %41 %27 
                                          f32 %44 = OpLoad %43 
                                 Private f32* %45 = OpAccessChain %9 %27 
                                          f32 %46 = OpLoad %45 
                                          f32 %47 = OpFMul %44 %46 
                                 Uniform f32* %49 = OpAccessChain %39 %41 %48 
                                          f32 %50 = OpLoad %49 
                                          f32 %51 = OpFAdd %47 %50 
                                                      OpStore %31 %51 
                                          f32 %53 = OpLoad %31 
                                          f32 %54 = OpFDiv %52 %53 
                                                      OpStore %31 %54 
                                          f32 %56 = OpLoad %31 
                                          f32 %57 = OpFNegate %56 
                                 Private f32* %58 = OpAccessChain %9 %27 
                                          f32 %59 = OpLoad %58 
                                          f32 %60 = OpFAdd %57 %59 
                                                      OpStore %55 %60 
                                 Uniform f32* %63 = OpAccessChain %39 %61 %62 
                                          f32 %64 = OpLoad %63 
                                          f32 %65 = OpLoad %55 
                                          f32 %66 = OpFMul %64 %65 
                                          f32 %67 = OpLoad %31 
                                          f32 %68 = OpFAdd %66 %67 
                                                      OpStore %31 %68 
                                 Private f32* %69 = OpAccessChain %9 %27 
                                          f32 %70 = OpLoad %69 
                                          f32 %71 = OpFNegate %70 
                                          f32 %72 = OpFAdd %71 %52 
                                 Private f32* %73 = OpAccessChain %9 %27 
                                                      OpStore %73 %72 
                                        f32_3 %78 = OpLoad vs_TEXCOORD2 
                                        f32_3 %79 = OpFNegate %78 
                                        f32_3 %81 = OpLoad vs_TEXCOORD3 
                                        f32_3 %82 = OpFAdd %79 %81 
                                        f32_4 %83 = OpLoad %74 
                                        f32_4 %84 = OpVectorShuffle %83 %82 4 5 6 3 
                                                      OpStore %74 %84 
                                        f32_4 %85 = OpLoad %9 
                                        f32_3 %86 = OpVectorShuffle %85 %85 0 0 0 
                                        f32_4 %87 = OpLoad %74 
                                        f32_3 %88 = OpVectorShuffle %87 %87 0 1 2 
                                        f32_3 %89 = OpFMul %86 %88 
                                        f32_3 %90 = OpLoad vs_TEXCOORD2 
                                        f32_3 %91 = OpFAdd %89 %90 
                                        f32_4 %92 = OpLoad %9 
                                        f32_4 %93 = OpVectorShuffle %92 %91 4 1 5 6 
                                                      OpStore %9 %93 
                                        f32_3 %95 = OpLoad vs_TEXCOORD1 
                                        f32_3 %96 = OpFNegate %95 
                                          f32 %97 = OpLoad %31 
                                        f32_3 %98 = OpCompositeConstruct %97 %97 %97 
                                        f32_3 %99 = OpFMul %96 %98 
                                       f32_4 %100 = OpLoad %9 
                                       f32_3 %101 = OpVectorShuffle %100 %100 0 2 3 
                                       f32_3 %102 = OpFAdd %99 %101 
                                       f32_4 %103 = OpLoad %9 
                                       f32_4 %104 = OpVectorShuffle %103 %102 4 1 5 6 
                                                      OpStore %9 %104 
                                         f32 %105 = OpLoad %31 
                                       f32_3 %106 = OpCompositeConstruct %105 %105 %105 
                                       f32_3 %107 = OpLoad vs_TEXCOORD1 
                                       f32_3 %108 = OpFMul %106 %107 
                                       f32_4 %109 = OpLoad %74 
                                       f32_4 %110 = OpVectorShuffle %109 %108 4 5 6 3 
                                                      OpStore %74 %110 
                              Uniform f32_4* %112 = OpAccessChain %39 %61 
                                       f32_4 %113 = OpLoad %112 
                                       f32_3 %114 = OpVectorShuffle %113 %113 3 3 3 
                                       f32_4 %115 = OpLoad %9 
                                       f32_3 %116 = OpVectorShuffle %115 %115 0 2 3 
                                       f32_3 %117 = OpFMul %114 %116 
                                       f32_4 %118 = OpLoad %74 
                                       f32_3 %119 = OpVectorShuffle %118 %118 0 1 2 
                                       f32_3 %120 = OpFAdd %117 %119 
                                       f32_4 %121 = OpLoad %9 
                                       f32_4 %122 = OpVectorShuffle %121 %120 4 5 6 3 
                                                      OpStore %9 %122 
                                       f32_4 %123 = OpLoad %9 
                                       f32_4 %124 = OpVectorShuffle %123 %123 1 1 1 1 
                              Uniform f32_4* %126 = OpAccessChain %39 %125 %61 
                                       f32_4 %127 = OpLoad %126 
                                       f32_4 %128 = OpFMul %124 %127 
                                                      OpStore %74 %128 
                              Uniform f32_4* %129 = OpAccessChain %39 %125 %41 
                                       f32_4 %130 = OpLoad %129 
                                       f32_4 %131 = OpLoad %9 
                                       f32_4 %132 = OpVectorShuffle %131 %131 0 0 0 0 
                                       f32_4 %133 = OpFMul %130 %132 
                                       f32_4 %134 = OpLoad %74 
                                       f32_4 %135 = OpFAdd %133 %134 
                                                      OpStore %74 %135 
                              Uniform f32_4* %136 = OpAccessChain %39 %125 %125 
                                       f32_4 %137 = OpLoad %136 
                                       f32_4 %138 = OpLoad %9 
                                       f32_4 %139 = OpVectorShuffle %138 %138 2 2 2 2 
                                       f32_4 %140 = OpFMul %137 %139 
                                       f32_4 %141 = OpLoad %74 
                                       f32_4 %142 = OpFAdd %140 %141 
                                                      OpStore %9 %142 
                                       f32_4 %143 = OpLoad %9 
                              Uniform f32_4* %145 = OpAccessChain %39 %125 %144 
                                       f32_4 %146 = OpLoad %145 
                                       f32_4 %147 = OpFAdd %143 %146 
                                                      OpStore %9 %147 
                                       f32_4 %148 = OpLoad %9 
                                       f32_3 %149 = OpVectorShuffle %148 %148 0 1 2 
                              Uniform f32_4* %150 = OpAccessChain %39 %144 %41 
                                       f32_4 %151 = OpLoad %150 
                                       f32_3 %152 = OpVectorShuffle %151 %151 0 1 2 
                                       f32_3 %153 = OpFNegate %152 
                                       f32_3 %154 = OpFAdd %149 %153 
                                       f32_4 %155 = OpLoad %74 
                                       f32_4 %156 = OpVectorShuffle %155 %154 4 5 6 3 
                                                      OpStore %74 %156 
                                       f32_4 %157 = OpLoad %74 
                                       f32_3 %158 = OpVectorShuffle %157 %157 0 1 2 
                                       f32_4 %159 = OpLoad %74 
                                       f32_3 %160 = OpVectorShuffle %159 %159 0 1 2 
                                         f32 %161 = OpDot %158 %160 
                                Private f32* %162 = OpAccessChain %74 %27 
                                                      OpStore %162 %161 
                                       f32_4 %165 = OpLoad %9 
                                       f32_3 %166 = OpVectorShuffle %165 %165 0 1 2 
                              Uniform f32_4* %167 = OpAccessChain %39 %144 %61 
                                       f32_4 %168 = OpLoad %167 
                                       f32_3 %169 = OpVectorShuffle %168 %168 0 1 2 
                                       f32_3 %170 = OpFNegate %169 
                                       f32_3 %171 = OpFAdd %166 %170 
                                                      OpStore %164 %171 
                                       f32_3 %172 = OpLoad %164 
                                       f32_3 %173 = OpLoad %164 
                                         f32 %174 = OpDot %172 %173 
                                Private f32* %175 = OpAccessChain %74 %48 
                                                      OpStore %175 %174 
                                       f32_4 %176 = OpLoad %9 
                                       f32_3 %177 = OpVectorShuffle %176 %176 0 1 2 
                              Uniform f32_4* %178 = OpAccessChain %39 %144 %125 
                                       f32_4 %179 = OpLoad %178 
                                       f32_3 %180 = OpVectorShuffle %179 %179 0 1 2 
                                       f32_3 %181 = OpFNegate %180 
                                       f32_3 %182 = OpFAdd %177 %181 
                                                      OpStore %164 %182 
                                       f32_3 %183 = OpLoad %164 
                                       f32_3 %184 = OpLoad %164 
                                         f32 %185 = OpDot %183 %184 
                                Private f32* %187 = OpAccessChain %74 %186 
                                                      OpStore %187 %185 
                                       f32_4 %188 = OpLoad %9 
                                       f32_3 %189 = OpVectorShuffle %188 %188 0 1 2 
                              Uniform f32_4* %190 = OpAccessChain %39 %144 %144 
                                       f32_4 %191 = OpLoad %190 
                                       f32_3 %192 = OpVectorShuffle %191 %191 0 1 2 
                                       f32_3 %193 = OpFNegate %192 
                                       f32_3 %194 = OpFAdd %189 %193 
                                                      OpStore %164 %194 
                                       f32_3 %195 = OpLoad %164 
                                       f32_3 %196 = OpLoad %164 
                                         f32 %197 = OpDot %195 %196 
                                Private f32* %198 = OpAccessChain %74 %62 
                                                      OpStore %198 %197 
                                       f32_4 %203 = OpLoad %74 
                              Uniform f32_4* %205 = OpAccessChain %39 %204 
                                       f32_4 %206 = OpLoad %205 
                                      bool_4 %207 = OpFOrdLessThan %203 %206 
                                                      OpStore %202 %207 
                               Private bool* %209 = OpAccessChain %202 %27 
                                        bool %210 = OpLoad %209 
                                         f32 %213 = OpSelect %210 %211 %212 
                                Private f32* %214 = OpAccessChain %164 %27 
                                                      OpStore %214 %213 
                               Private bool* %215 = OpAccessChain %202 %48 
                                        bool %216 = OpLoad %215 
                                         f32 %217 = OpSelect %216 %211 %212 
                                Private f32* %218 = OpAccessChain %164 %48 
                                                      OpStore %218 %217 
                               Private bool* %219 = OpAccessChain %202 %186 
                                        bool %220 = OpLoad %219 
                                         f32 %221 = OpSelect %220 %211 %212 
                                Private f32* %222 = OpAccessChain %164 %186 
                                                      OpStore %222 %221 
                               Private bool* %223 = OpAccessChain %202 %27 
                                        bool %224 = OpLoad %223 
                                         f32 %226 = OpSelect %224 %52 %225 
                                Private f32* %227 = OpAccessChain %74 %27 
                                                      OpStore %227 %226 
                               Private bool* %228 = OpAccessChain %202 %48 
                                        bool %229 = OpLoad %228 
                                         f32 %230 = OpSelect %229 %52 %225 
                                Private f32* %231 = OpAccessChain %74 %48 
                                                      OpStore %231 %230 
                               Private bool* %232 = OpAccessChain %202 %186 
                                        bool %233 = OpLoad %232 
                                         f32 %234 = OpSelect %233 %52 %225 
                                Private f32* %235 = OpAccessChain %74 %186 
                                                      OpStore %235 %234 
                               Private bool* %236 = OpAccessChain %202 %62 
                                        bool %237 = OpLoad %236 
                                         f32 %238 = OpSelect %237 %52 %225 
                                Private f32* %239 = OpAccessChain %74 %62 
                                                      OpStore %239 %238 
                                       f32_3 %240 = OpLoad %164 
                                       f32_4 %241 = OpLoad %74 
                                       f32_3 %242 = OpVectorShuffle %241 %241 1 2 3 
                                       f32_3 %243 = OpFAdd %240 %242 
                                                      OpStore %164 %243 
                                       f32_3 %244 = OpLoad %164 
                                       f32_3 %246 = OpExtInst %1 40 %244 %245 
                                       f32_4 %247 = OpLoad %74 
                                       f32_4 %248 = OpVectorShuffle %247 %246 0 4 5 6 
                                                      OpStore %74 %248 
                                       f32_4 %249 = OpLoad %9 
                                       f32_3 %250 = OpVectorShuffle %249 %249 1 1 1 
                              Uniform f32_4* %252 = OpAccessChain %39 %251 %251 
                                       f32_4 %253 = OpLoad %252 
                                       f32_3 %254 = OpVectorShuffle %253 %253 0 1 2 
                                       f32_3 %255 = OpFMul %250 %254 
                                                      OpStore %164 %255 
                              Uniform f32_4* %256 = OpAccessChain %39 %251 %204 
                                       f32_4 %257 = OpLoad %256 
                                       f32_3 %258 = OpVectorShuffle %257 %257 0 1 2 
                                       f32_4 %259 = OpLoad %9 
                                       f32_3 %260 = OpVectorShuffle %259 %259 0 0 0 
                                       f32_3 %261 = OpFMul %258 %260 
                                       f32_3 %262 = OpLoad %164 
                                       f32_3 %263 = OpFAdd %261 %262 
                                                      OpStore %164 %263 
                              Uniform f32_4* %265 = OpAccessChain %39 %251 %264 
                                       f32_4 %266 = OpLoad %265 
                                       f32_3 %267 = OpVectorShuffle %266 %266 0 1 2 
                                       f32_4 %268 = OpLoad %9 
                                       f32_3 %269 = OpVectorShuffle %268 %268 2 2 2 
                                       f32_3 %270 = OpFMul %267 %269 
                                       f32_3 %271 = OpLoad %164 
                                       f32_3 %272 = OpFAdd %270 %271 
                                                      OpStore %164 %272 
                              Uniform f32_4* %274 = OpAccessChain %39 %251 %273 
                                       f32_4 %275 = OpLoad %274 
                                       f32_3 %276 = OpVectorShuffle %275 %275 0 1 2 
                                       f32_4 %277 = OpLoad %9 
                                       f32_3 %278 = OpVectorShuffle %277 %277 3 3 3 
                                       f32_3 %279 = OpFMul %276 %278 
                                       f32_3 %280 = OpLoad %164 
                                       f32_3 %281 = OpFAdd %279 %280 
                                                      OpStore %164 %281 
                                       f32_4 %282 = OpLoad %74 
                                       f32_3 %283 = OpVectorShuffle %282 %282 1 1 1 
                                       f32_3 %284 = OpLoad %164 
                                       f32_3 %285 = OpFMul %283 %284 
                                                      OpStore %164 %285 
                                       f32_4 %287 = OpLoad %9 
                                       f32_3 %288 = OpVectorShuffle %287 %287 1 1 1 
                              Uniform f32_4* %289 = OpAccessChain %39 %251 %61 
                                       f32_4 %290 = OpLoad %289 
                                       f32_3 %291 = OpVectorShuffle %290 %290 0 1 2 
                                       f32_3 %292 = OpFMul %288 %291 
                                                      OpStore %286 %292 
                              Uniform f32_4* %293 = OpAccessChain %39 %251 %41 
                                       f32_4 %294 = OpLoad %293 
                                       f32_3 %295 = OpVectorShuffle %294 %294 0 1 2 
                                       f32_4 %296 = OpLoad %9 
                                       f32_3 %297 = OpVectorShuffle %296 %296 0 0 0 
                                       f32_3 %298 = OpFMul %295 %297 
                                       f32_3 %299 = OpLoad %286 
                                       f32_3 %300 = OpFAdd %298 %299 
                                                      OpStore %286 %300 
                              Uniform f32_4* %301 = OpAccessChain %39 %251 %125 
                                       f32_4 %302 = OpLoad %301 
                                       f32_3 %303 = OpVectorShuffle %302 %302 0 1 2 
                                       f32_4 %304 = OpLoad %9 
                                       f32_3 %305 = OpVectorShuffle %304 %304 2 2 2 
                                       f32_3 %306 = OpFMul %303 %305 
                                       f32_3 %307 = OpLoad %286 
                                       f32_3 %308 = OpFAdd %306 %307 
                                                      OpStore %286 %308 
                              Uniform f32_4* %309 = OpAccessChain %39 %251 %144 
                                       f32_4 %310 = OpLoad %309 
                                       f32_3 %311 = OpVectorShuffle %310 %310 0 1 2 
                                       f32_4 %312 = OpLoad %9 
                                       f32_3 %313 = OpVectorShuffle %312 %312 3 3 3 
                                       f32_3 %314 = OpFMul %311 %313 
                                       f32_3 %315 = OpLoad %286 
                                       f32_3 %316 = OpFAdd %314 %315 
                                                      OpStore %286 %316 
                                       f32_3 %317 = OpLoad %286 
                                       f32_4 %318 = OpLoad %74 
                                       f32_3 %319 = OpVectorShuffle %318 %318 0 0 0 
                                       f32_3 %320 = OpFMul %317 %319 
                                       f32_3 %321 = OpLoad %164 
                                       f32_3 %322 = OpFAdd %320 %321 
                                                      OpStore %164 %322 
                                       f32_4 %323 = OpLoad %74 
                                         f32 %325 = OpDot %323 %324 
                                Private f32* %326 = OpAccessChain %74 %27 
                                                      OpStore %326 %325 
                                       f32_4 %327 = OpLoad %9 
                                       f32_3 %328 = OpVectorShuffle %327 %327 1 1 1 
                              Uniform f32_4* %330 = OpAccessChain %39 %251 %329 
                                       f32_4 %331 = OpLoad %330 
                                       f32_3 %332 = OpVectorShuffle %331 %331 0 1 2 
                                       f32_3 %333 = OpFMul %328 %332 
                                                      OpStore %286 %333 
                              Uniform f32_4* %335 = OpAccessChain %39 %251 %334 
                                       f32_4 %336 = OpLoad %335 
                                       f32_3 %337 = OpVectorShuffle %336 %336 0 1 2 
                                       f32_4 %338 = OpLoad %9 
                                       f32_3 %339 = OpVectorShuffle %338 %338 0 0 0 
                                       f32_3 %340 = OpFMul %337 %339 
                                       f32_3 %341 = OpLoad %286 
                                       f32_3 %342 = OpFAdd %340 %341 
                                                      OpStore %286 %342 
                              Uniform f32_4* %344 = OpAccessChain %39 %251 %343 
                                       f32_4 %345 = OpLoad %344 
                                       f32_3 %346 = OpVectorShuffle %345 %345 0 1 2 
                                       f32_4 %347 = OpLoad %9 
                                       f32_3 %348 = OpVectorShuffle %347 %347 2 2 2 
                                       f32_3 %349 = OpFMul %346 %348 
                                       f32_3 %350 = OpLoad %286 
                                       f32_3 %351 = OpFAdd %349 %350 
                                                      OpStore %286 %351 
                              Uniform f32_4* %353 = OpAccessChain %39 %251 %352 
                                       f32_4 %354 = OpLoad %353 
                                       f32_3 %355 = OpVectorShuffle %354 %354 0 1 2 
                                       f32_4 %356 = OpLoad %9 
                                       f32_3 %357 = OpVectorShuffle %356 %356 3 3 3 
                                       f32_3 %358 = OpFMul %355 %357 
                                       f32_3 %359 = OpLoad %286 
                                       f32_3 %360 = OpFAdd %358 %359 
                                                      OpStore %286 %360 
                                       f32_3 %361 = OpLoad %286 
                                       f32_4 %362 = OpLoad %74 
                                       f32_3 %363 = OpVectorShuffle %362 %362 2 2 2 
                                       f32_3 %364 = OpFMul %361 %363 
                                       f32_3 %365 = OpLoad %164 
                                       f32_3 %366 = OpFAdd %364 %365 
                                                      OpStore %164 %366 
                                       f32_4 %367 = OpLoad %9 
                                       f32_3 %368 = OpVectorShuffle %367 %367 1 1 1 
                              Uniform f32_4* %370 = OpAccessChain %39 %251 %369 
                                       f32_4 %371 = OpLoad %370 
                                       f32_3 %372 = OpVectorShuffle %371 %371 0 1 2 
                                       f32_3 %373 = OpFMul %368 %372 
                                                      OpStore %286 %373 
                              Uniform f32_4* %375 = OpAccessChain %39 %251 %374 
                                       f32_4 %376 = OpLoad %375 
                                       f32_3 %377 = OpVectorShuffle %376 %376 0 1 2 
                                       f32_4 %378 = OpLoad %9 
                                       f32_3 %379 = OpVectorShuffle %378 %378 0 0 0 
                                       f32_3 %380 = OpFMul %377 %379 
                                       f32_3 %381 = OpLoad %286 
                                       f32_3 %382 = OpFAdd %380 %381 
                                                      OpStore %286 %382 
                              Uniform f32_4* %384 = OpAccessChain %39 %251 %383 
                                       f32_4 %385 = OpLoad %384 
                                       f32_3 %386 = OpVectorShuffle %385 %385 0 1 2 
                                       f32_4 %387 = OpLoad %9 
                                       f32_3 %388 = OpVectorShuffle %387 %387 2 2 2 
                                       f32_3 %389 = OpFMul %386 %388 
                                       f32_3 %390 = OpLoad %286 
                                       f32_3 %391 = OpFAdd %389 %390 
                                       f32_4 %392 = OpLoad %9 
                                       f32_4 %393 = OpVectorShuffle %392 %391 4 5 6 3 
                                                      OpStore %9 %393 
                              Uniform f32_4* %395 = OpAccessChain %39 %251 %394 
                                       f32_4 %396 = OpLoad %395 
                                       f32_3 %397 = OpVectorShuffle %396 %396 0 1 2 
                                       f32_4 %398 = OpLoad %9 
                                       f32_3 %399 = OpVectorShuffle %398 %398 3 3 3 
                                       f32_3 %400 = OpFMul %397 %399 
                                       f32_4 %401 = OpLoad %9 
                                       f32_3 %402 = OpVectorShuffle %401 %401 0 1 2 
                                       f32_3 %403 = OpFAdd %400 %402 
                                       f32_4 %404 = OpLoad %9 
                                       f32_4 %405 = OpVectorShuffle %404 %403 4 5 6 3 
                                                      OpStore %9 %405 
                                       f32_4 %406 = OpLoad %9 
                                       f32_3 %407 = OpVectorShuffle %406 %406 0 1 2 
                                       f32_4 %408 = OpLoad %74 
                                       f32_3 %409 = OpVectorShuffle %408 %408 3 3 3 
                                       f32_3 %410 = OpFMul %407 %409 
                                       f32_3 %411 = OpLoad %164 
                                       f32_3 %412 = OpFAdd %410 %411 
                                       f32_4 %413 = OpLoad %9 
                                       f32_4 %414 = OpVectorShuffle %413 %412 4 5 6 3 
                                                      OpStore %9 %414 
                                Private f32* %415 = OpAccessChain %74 %27 
                                         f32 %416 = OpLoad %415 
                                         f32 %417 = OpFNegate %416 
                                Private f32* %418 = OpAccessChain %9 %186 
                                         f32 %419 = OpLoad %418 
                                         f32 %420 = OpFAdd %417 %419 
                                                      OpStore %55 %420 
                                         f32 %421 = OpLoad %55 
                                         f32 %422 = OpFAdd %421 %52 
                                                      OpStore %55 %422 
                                       f32_4 %425 = OpLoad %9 
                                       f32_2 %426 = OpVectorShuffle %425 %425 0 1 
                                         f32 %427 = OpLoad %55 
                                         f32 %428 = OpCompositeExtract %426 0 
                                         f32 %429 = OpCompositeExtract %426 1 
                                       f32_3 %430 = OpCompositeConstruct %428 %429 %427 
                                                      OpStore %424 %430 
                         read_only Texture2D %432 = OpLoad %431 
                                     sampler %434 = OpLoad %433 
                  read_only Texture2DSampled %437 = OpSampledImage %432 %434 
                                       f32_3 %438 = OpLoad %424 
                                         f32 %439 = OpCompositeExtract %438 2 
                                         f32 %440 = OpImageSampleDrefExplicitLod %437 %438 %439 Lod %6 
                                Private f32* %441 = OpAccessChain %9 %27 
                                                      OpStore %441 %440 
                                Uniform f32* %442 = OpAccessChain %39 %264 %27 
                                         f32 %443 = OpLoad %442 
                                         f32 %444 = OpFNegate %443 
                                         f32 %445 = OpFAdd %444 %52 
                                                      OpStore %31 %445 
                                       f32_4 %448 = OpLoad %9 
                                       f32_4 %449 = OpVectorShuffle %448 %448 0 0 0 0 
                                         f32 %450 = OpLoad %31 
                                       f32_4 %451 = OpCompositeConstruct %450 %450 %450 %450 
                                       f32_4 %452 = OpFMul %449 %451 
                              Uniform f32_4* %453 = OpAccessChain %39 %264 
                                       f32_4 %454 = OpLoad %453 
                                       f32_4 %455 = OpVectorShuffle %454 %454 0 0 0 0 
                                       f32_4 %456 = OpFAdd %452 %455 
                                                      OpStore %447 %456 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "SHADOWS_SINGLE_CASCADE" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "SHADOWS_SINGLE_CASCADE" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraInvProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in  vec4 in_POSITION0;
in  vec2 in_TEXCOORD0;
in  vec3 in_TEXCOORD1;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_CameraInvProjection[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_CameraInvProjection[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    vs_TEXCOORD0.zw = u_xlat1.zz + u_xlat1.xw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = in_TEXCOORD1.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-hlslcc_mtx4x4unity_CameraInvProjection[2].xyz);
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[2].xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;
    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;
    u_xlat1.w = (-u_xlat1.z);
    vs_TEXCOORD2.xyz = u_xlat1.xyw;
    u_xlat0.w = (-u_xlat0.z);
    vs_TEXCOORD3.xyz = u_xlat0.xyw;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	vec4 _LightShadowData;
UNITY_LOCATION(0) uniform  sampler2D _CameraDepthTexture;
UNITY_LOCATION(1) uniform  sampler2D _ShadowMapTexture;
UNITY_LOCATION(2) uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec3 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD3;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat2;
float u_xlat4;
void main()
{
    u_xlat0 = texture(_CameraDepthTexture, vs_TEXCOORD0.xy);
    u_xlat2 = _ZBufferParams.x * u_xlat0.x + _ZBufferParams.y;
    u_xlat2 = float(1.0) / u_xlat2;
    u_xlat4 = (-u_xlat2) + u_xlat0.x;
    u_xlat2 = unity_OrthoParams.w * u_xlat4 + u_xlat2;
    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + vs_TEXCOORD3.xyz;
    u_xlat0.xzw = u_xlat0.xxx * u_xlat1.xyz + vs_TEXCOORD2.xyz;
    u_xlat0.xzw = (-vs_TEXCOORD1.xyz) * vec3(u_xlat2) + u_xlat0.xzw;
    u_xlat1.xyz = vec3(u_xlat2) * vs_TEXCOORD1.xyz;
    u_xlat0.xyz = unity_OrthoParams.www * u_xlat0.xzw + u_xlat1.xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_CameraToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_CameraToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_CameraToWorld[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_CameraToWorld[3];
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[3].xyz * u_xlat0.www + u_xlat0.xyz;
    vec3 txVec0 = vec3(u_xlat0.xy,u_xlat0.z);
    u_xlat0.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
    u_xlat2 = (-_LightShadowData.x) + 1.0;
    SV_Target0 = u_xlat0.xxxx * vec4(u_xlat2) + _LightShadowData.xxxx;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "SHADOWS_SINGLE_CASCADE" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 193
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %80 %119 %129 %134 %136 %177 %184 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpMemberDecorate %78 0 BuiltIn 78 
                                                      OpMemberDecorate %78 1 BuiltIn 78 
                                                      OpMemberDecorate %78 2 BuiltIn 78 
                                                      OpDecorate %78 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 119 
                                                      OpDecorate %129 Location 129 
                                                      OpDecorate vs_TEXCOORD1 Location 134 
                                                      OpDecorate %136 Location 136 
                                                      OpDecorate vs_TEXCOORD2 Location 177 
                                                      OpDecorate vs_TEXCOORD3 Location 184 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %16 %17 %18 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4];}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 2 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %29 = OpConstant 0 
                                          i32 %45 = OpConstant 3 
                               Private f32_4* %49 = OpVariable Private 
                                          u32 %76 = OpConstant 1 
                                              %77 = OpTypeArray %6 %76 
                                              %78 = OpTypeStruct %7 %6 %77 
                                              %79 = OpTypePointer Output %78 
         Output struct {f32_4; f32; f32[1];}* %80 = OpVariable Output 
                                              %82 = OpTypePointer Output %7 
                                              %84 = OpTypePointer Private %6 
                                          u32 %87 = OpConstant 0 
                                              %88 = OpTypePointer Uniform %6 
                                              %93 = OpTypeVector %6 3 
                                          f32 %96 = OpConstant 3.674022E-40 
                                        f32_3 %97 = OpConstantComposite %96 %96 %96 
                                             %101 = OpTypePointer Private %93 
                              Private f32_3* %102 = OpVariable Private 
                       Output f32_4* vs_TEXCOORD0 = OpVariable Output 
                                             %120 = OpTypeVector %6 2 
                                             %128 = OpTypePointer Input %120 
                                Input f32_2* %129 = OpVariable Input 
                                             %133 = OpTypePointer Output %93 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                                             %135 = OpTypePointer Input %93 
                                Input f32_3* %136 = OpVariable Input 
                                         u32 %171 = OpConstant 2 
                                         u32 %175 = OpConstant 3 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                       Output f32_3* vs_TEXCOORD3 = OpVariable Output 
                                             %187 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %30 = OpAccessChain %21 %23 %29 
                                        f32_4 %31 = OpLoad %30 
                                        f32_4 %32 = OpLoad %11 
                                        f32_4 %33 = OpVectorShuffle %32 %32 0 0 0 0 
                                        f32_4 %34 = OpFMul %31 %33 
                                        f32_4 %35 = OpLoad %9 
                                        f32_4 %36 = OpFAdd %34 %35 
                                                      OpStore %9 %36 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %23 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %44 = OpLoad %9 
                               Uniform f32_4* %46 = OpAccessChain %21 %23 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_4 %48 = OpFAdd %44 %47 
                                                      OpStore %9 %48 
                                        f32_4 %50 = OpLoad %9 
                                        f32_4 %51 = OpVectorShuffle %50 %50 1 1 1 1 
                               Uniform f32_4* %52 = OpAccessChain %21 %45 %24 
                                        f32_4 %53 = OpLoad %52 
                                        f32_4 %54 = OpFMul %51 %53 
                                                      OpStore %49 %54 
                               Uniform f32_4* %55 = OpAccessChain %21 %45 %29 
                                        f32_4 %56 = OpLoad %55 
                                        f32_4 %57 = OpLoad %9 
                                        f32_4 %58 = OpVectorShuffle %57 %57 0 0 0 0 
                                        f32_4 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %49 
                                        f32_4 %61 = OpFAdd %59 %60 
                                                      OpStore %49 %61 
                               Uniform f32_4* %62 = OpAccessChain %21 %45 %23 
                                        f32_4 %63 = OpLoad %62 
                                        f32_4 %64 = OpLoad %9 
                                        f32_4 %65 = OpVectorShuffle %64 %64 2 2 2 2 
                                        f32_4 %66 = OpFMul %63 %65 
                                        f32_4 %67 = OpLoad %49 
                                        f32_4 %68 = OpFAdd %66 %67 
                                                      OpStore %49 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %45 %45 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %9 
                                        f32_4 %72 = OpVectorShuffle %71 %71 3 3 3 3 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %49 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %9 %75 
                                        f32_4 %81 = OpLoad %9 
                                Output f32_4* %83 = OpAccessChain %80 %29 
                                                      OpStore %83 %81 
                                 Private f32* %85 = OpAccessChain %9 %76 
                                          f32 %86 = OpLoad %85 
                                 Uniform f32* %89 = OpAccessChain %21 %29 %87 
                                          f32 %90 = OpLoad %89 
                                          f32 %91 = OpFMul %86 %90 
                                 Private f32* %92 = OpAccessChain %9 %76 
                                                      OpStore %92 %91 
                                        f32_4 %94 = OpLoad %9 
                                        f32_3 %95 = OpVectorShuffle %94 %94 0 3 1 
                                        f32_3 %98 = OpFMul %95 %97 
                                        f32_4 %99 = OpLoad %49 
                                       f32_4 %100 = OpVectorShuffle %99 %98 4 1 5 6 
                                                      OpStore %49 %100 
                                       f32_4 %103 = OpLoad %9 
                                       f32_3 %104 = OpVectorShuffle %103 %103 1 1 1 
                              Uniform f32_4* %105 = OpAccessChain %21 %24 %24 
                                       f32_4 %106 = OpLoad %105 
                                       f32_3 %107 = OpVectorShuffle %106 %106 0 1 2 
                                       f32_3 %108 = OpFMul %104 %107 
                                                      OpStore %102 %108 
                              Uniform f32_4* %109 = OpAccessChain %21 %24 %29 
                                       f32_4 %110 = OpLoad %109 
                                       f32_3 %111 = OpVectorShuffle %110 %110 0 1 2 
                                       f32_4 %112 = OpLoad %9 
                                       f32_3 %113 = OpVectorShuffle %112 %112 0 0 0 
                                       f32_3 %114 = OpFMul %111 %113 
                                       f32_3 %115 = OpLoad %102 
                                       f32_3 %116 = OpFAdd %114 %115 
                                       f32_4 %117 = OpLoad %9 
                                       f32_4 %118 = OpVectorShuffle %117 %116 4 5 6 3 
                                                      OpStore %9 %118 
                                       f32_4 %121 = OpLoad %49 
                                       f32_2 %122 = OpVectorShuffle %121 %121 2 2 
                                       f32_4 %123 = OpLoad %49 
                                       f32_2 %124 = OpVectorShuffle %123 %123 0 3 
                                       f32_2 %125 = OpFAdd %122 %124 
                                       f32_4 %126 = OpLoad vs_TEXCOORD0 
                                       f32_4 %127 = OpVectorShuffle %126 %125 0 1 4 5 
                                                      OpStore vs_TEXCOORD0 %127 
                                       f32_2 %130 = OpLoad %129 
                                       f32_4 %131 = OpLoad vs_TEXCOORD0 
                                       f32_4 %132 = OpVectorShuffle %131 %130 4 5 2 3 
                                                      OpStore vs_TEXCOORD0 %132 
                                       f32_3 %137 = OpLoad %136 
                                                      OpStore vs_TEXCOORD1 %137 
                                       f32_4 %138 = OpLoad %9 
                                       f32_3 %139 = OpVectorShuffle %138 %138 0 1 2 
                              Uniform f32_4* %140 = OpAccessChain %21 %24 %23 
                                       f32_4 %141 = OpLoad %140 
                                       f32_3 %142 = OpVectorShuffle %141 %141 0 1 2 
                                       f32_3 %143 = OpFNegate %142 
                                       f32_3 %144 = OpFAdd %139 %143 
                                       f32_4 %145 = OpLoad %49 
                                       f32_4 %146 = OpVectorShuffle %145 %144 4 5 6 3 
                                                      OpStore %49 %146 
                                       f32_4 %147 = OpLoad %9 
                                       f32_3 %148 = OpVectorShuffle %147 %147 0 1 2 
                              Uniform f32_4* %149 = OpAccessChain %21 %24 %23 
                                       f32_4 %150 = OpLoad %149 
                                       f32_3 %151 = OpVectorShuffle %150 %150 0 1 2 
                                       f32_3 %152 = OpFAdd %148 %151 
                                       f32_4 %153 = OpLoad %9 
                                       f32_4 %154 = OpVectorShuffle %153 %152 4 5 6 3 
                                                      OpStore %9 %154 
                                       f32_4 %155 = OpLoad %9 
                                       f32_3 %156 = OpVectorShuffle %155 %155 0 1 2 
                              Uniform f32_4* %157 = OpAccessChain %21 %24 %45 
                                       f32_4 %158 = OpLoad %157 
                                       f32_3 %159 = OpVectorShuffle %158 %158 0 1 2 
                                       f32_3 %160 = OpFAdd %156 %159 
                                       f32_4 %161 = OpLoad %9 
                                       f32_4 %162 = OpVectorShuffle %161 %160 4 5 6 3 
                                                      OpStore %9 %162 
                                       f32_4 %163 = OpLoad %49 
                                       f32_3 %164 = OpVectorShuffle %163 %163 0 1 2 
                              Uniform f32_4* %165 = OpAccessChain %21 %24 %45 
                                       f32_4 %166 = OpLoad %165 
                                       f32_3 %167 = OpVectorShuffle %166 %166 0 1 2 
                                       f32_3 %168 = OpFAdd %164 %167 
                                       f32_4 %169 = OpLoad %49 
                                       f32_4 %170 = OpVectorShuffle %169 %168 4 5 6 3 
                                                      OpStore %49 %170 
                                Private f32* %172 = OpAccessChain %49 %171 
                                         f32 %173 = OpLoad %172 
                                         f32 %174 = OpFNegate %173 
                                Private f32* %176 = OpAccessChain %49 %175 
                                                      OpStore %176 %174 
                                       f32_4 %178 = OpLoad %49 
                                       f32_3 %179 = OpVectorShuffle %178 %178 0 1 3 
                                                      OpStore vs_TEXCOORD2 %179 
                                Private f32* %180 = OpAccessChain %9 %171 
                                         f32 %181 = OpLoad %180 
                                         f32 %182 = OpFNegate %181 
                                Private f32* %183 = OpAccessChain %9 %175 
                                                      OpStore %183 %182 
                                       f32_4 %185 = OpLoad %9 
                                       f32_3 %186 = OpVectorShuffle %185 %185 0 1 3 
                                                      OpStore vs_TEXCOORD3 %186 
                                 Output f32* %188 = OpAccessChain %80 %29 %76 
                                         f32 %189 = OpLoad %188 
                                         f32 %190 = OpFNegate %189 
                                 Output f32* %191 = OpAccessChain %80 %29 %76 
                                                      OpStore %191 %190 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 227
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %21 %76 %79 %93 %216 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpDecorate %12 DescriptorSet 12 
                                                      OpDecorate %12 Binding 12 
                                                      OpDecorate %16 DescriptorSet 16 
                                                      OpDecorate %16 Binding 16 
                                                      OpDecorate vs_TEXCOORD0 Location 21 
                                                      OpDecorate %33 ArrayStride 33 
                                                      OpDecorate %35 ArrayStride 35 
                                                      OpMemberDecorate %36 0 Offset 36 
                                                      OpMemberDecorate %36 1 Offset 36 
                                                      OpMemberDecorate %36 2 Offset 36 
                                                      OpMemberDecorate %36 3 Offset 36 
                                                      OpMemberDecorate %36 4 Offset 36 
                                                      OpDecorate %36 Block 
                                                      OpDecorate %38 DescriptorSet 38 
                                                      OpDecorate %38 Binding 38 
                                                      OpDecorate vs_TEXCOORD2 Location 76 
                                                      OpDecorate vs_TEXCOORD3 Location 79 
                                                      OpDecorate vs_TEXCOORD1 Location 93 
                                                      OpDecorate %198 DescriptorSet 198 
                                                      OpDecorate %198 Binding 198 
                                                      OpDecorate %200 DescriptorSet 200 
                                                      OpDecorate %200 Binding 200 
                                                      OpDecorate %216 Location 216 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypePointer UniformConstant %10 
         UniformConstant read_only Texture2D* %12 = OpVariable UniformConstant 
                                              %14 = OpTypeSampler 
                                              %15 = OpTypePointer UniformConstant %14 
                     UniformConstant sampler* %16 = OpVariable UniformConstant 
                                              %18 = OpTypeSampledImage %10 
                                              %20 = OpTypePointer Input %7 
                        Input f32_4* vs_TEXCOORD0 = OpVariable Input 
                                              %22 = OpTypeVector %6 2 
                                              %26 = OpTypeInt 32 0 
                                          u32 %27 = OpConstant 0 
                                              %29 = OpTypePointer Private %6 
                                 Private f32* %31 = OpVariable Private 
                                          u32 %32 = OpConstant 4 
                                              %33 = OpTypeArray %7 %32 
                                          u32 %34 = OpConstant 16 
                                              %35 = OpTypeArray %7 %34 
                                              %36 = OpTypeStruct %7 %7 %33 %35 %7 
                                              %37 = OpTypePointer Uniform %36 
Uniform struct {f32_4; f32_4; f32_4[4]; f32_4[16]; f32_4;}* %38 = OpVariable Uniform 
                                              %39 = OpTypeInt 32 1 
                                          i32 %40 = OpConstant 0 
                                              %41 = OpTypePointer Uniform %6 
                                          u32 %47 = OpConstant 1 
                                          f32 %51 = OpConstant 3.674022E-40 
                                 Private f32* %54 = OpVariable Private 
                                          i32 %60 = OpConstant 1 
                                          u32 %61 = OpConstant 3 
                               Private f32_4* %73 = OpVariable Private 
                                              %74 = OpTypeVector %6 3 
                                              %75 = OpTypePointer Input %74 
                        Input f32_3* vs_TEXCOORD2 = OpVariable Input 
                        Input f32_3* vs_TEXCOORD3 = OpVariable Input 
                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                                             %110 = OpTypePointer Uniform %7 
                                         i32 %124 = OpConstant 2 
                                         i32 %143 = OpConstant 3 
                                             %188 = OpTypePointer Function %74 
                                         u32 %192 = OpConstant 2 
        UniformConstant read_only Texture2D* %198 = OpVariable UniformConstant 
                    UniformConstant sampler* %200 = OpVariable UniformConstant 
                                             %202 = OpTypeImage %6 Dim2D 1 0 0 1 Unknown 
                                             %203 = OpTypeSampledImage %202 
                                         f32 %206 = OpConstant 3.674022E-40 
                                         i32 %210 = OpConstant 4 
                                             %215 = OpTypePointer Output %7 
                               Output f32_4* %216 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %189 = OpVariable Function 
                          read_only Texture2D %13 = OpLoad %12 
                                      sampler %17 = OpLoad %16 
                   read_only Texture2DSampled %19 = OpSampledImage %13 %17 
                                        f32_4 %23 = OpLoad vs_TEXCOORD0 
                                        f32_2 %24 = OpVectorShuffle %23 %23 0 1 
                                        f32_4 %25 = OpImageSampleImplicitLod %19 %24 
                                          f32 %28 = OpCompositeExtract %25 0 
                                 Private f32* %30 = OpAccessChain %9 %27 
                                                      OpStore %30 %28 
                                 Uniform f32* %42 = OpAccessChain %38 %40 %27 
                                          f32 %43 = OpLoad %42 
                                 Private f32* %44 = OpAccessChain %9 %27 
                                          f32 %45 = OpLoad %44 
                                          f32 %46 = OpFMul %43 %45 
                                 Uniform f32* %48 = OpAccessChain %38 %40 %47 
                                          f32 %49 = OpLoad %48 
                                          f32 %50 = OpFAdd %46 %49 
                                                      OpStore %31 %50 
                                          f32 %52 = OpLoad %31 
                                          f32 %53 = OpFDiv %51 %52 
                                                      OpStore %31 %53 
                                          f32 %55 = OpLoad %31 
                                          f32 %56 = OpFNegate %55 
                                 Private f32* %57 = OpAccessChain %9 %27 
                                          f32 %58 = OpLoad %57 
                                          f32 %59 = OpFAdd %56 %58 
                                                      OpStore %54 %59 
                                 Uniform f32* %62 = OpAccessChain %38 %60 %61 
                                          f32 %63 = OpLoad %62 
                                          f32 %64 = OpLoad %54 
                                          f32 %65 = OpFMul %63 %64 
                                          f32 %66 = OpLoad %31 
                                          f32 %67 = OpFAdd %65 %66 
                                                      OpStore %31 %67 
                                 Private f32* %68 = OpAccessChain %9 %27 
                                          f32 %69 = OpLoad %68 
                                          f32 %70 = OpFNegate %69 
                                          f32 %71 = OpFAdd %70 %51 
                                 Private f32* %72 = OpAccessChain %9 %27 
                                                      OpStore %72 %71 
                                        f32_3 %77 = OpLoad vs_TEXCOORD2 
                                        f32_3 %78 = OpFNegate %77 
                                        f32_3 %80 = OpLoad vs_TEXCOORD3 
                                        f32_3 %81 = OpFAdd %78 %80 
                                        f32_4 %82 = OpLoad %73 
                                        f32_4 %83 = OpVectorShuffle %82 %81 4 5 6 3 
                                                      OpStore %73 %83 
                                        f32_4 %84 = OpLoad %9 
                                        f32_3 %85 = OpVectorShuffle %84 %84 0 0 0 
                                        f32_4 %86 = OpLoad %73 
                                        f32_3 %87 = OpVectorShuffle %86 %86 0 1 2 
                                        f32_3 %88 = OpFMul %85 %87 
                                        f32_3 %89 = OpLoad vs_TEXCOORD2 
                                        f32_3 %90 = OpFAdd %88 %89 
                                        f32_4 %91 = OpLoad %9 
                                        f32_4 %92 = OpVectorShuffle %91 %90 4 1 5 6 
                                                      OpStore %9 %92 
                                        f32_3 %94 = OpLoad vs_TEXCOORD1 
                                        f32_3 %95 = OpFNegate %94 
                                          f32 %96 = OpLoad %31 
                                        f32_3 %97 = OpCompositeConstruct %96 %96 %96 
                                        f32_3 %98 = OpFMul %95 %97 
                                        f32_4 %99 = OpLoad %9 
                                       f32_3 %100 = OpVectorShuffle %99 %99 0 2 3 
                                       f32_3 %101 = OpFAdd %98 %100 
                                       f32_4 %102 = OpLoad %9 
                                       f32_4 %103 = OpVectorShuffle %102 %101 4 1 5 6 
                                                      OpStore %9 %103 
                                         f32 %104 = OpLoad %31 
                                       f32_3 %105 = OpCompositeConstruct %104 %104 %104 
                                       f32_3 %106 = OpLoad vs_TEXCOORD1 
                                       f32_3 %107 = OpFMul %105 %106 
                                       f32_4 %108 = OpLoad %73 
                                       f32_4 %109 = OpVectorShuffle %108 %107 4 5 6 3 
                                                      OpStore %73 %109 
                              Uniform f32_4* %111 = OpAccessChain %38 %60 
                                       f32_4 %112 = OpLoad %111 
                                       f32_3 %113 = OpVectorShuffle %112 %112 3 3 3 
                                       f32_4 %114 = OpLoad %9 
                                       f32_3 %115 = OpVectorShuffle %114 %114 0 2 3 
                                       f32_3 %116 = OpFMul %113 %115 
                                       f32_4 %117 = OpLoad %73 
                                       f32_3 %118 = OpVectorShuffle %117 %117 0 1 2 
                                       f32_3 %119 = OpFAdd %116 %118 
                                       f32_4 %120 = OpLoad %9 
                                       f32_4 %121 = OpVectorShuffle %120 %119 4 5 6 3 
                                                      OpStore %9 %121 
                                       f32_4 %122 = OpLoad %9 
                                       f32_4 %123 = OpVectorShuffle %122 %122 1 1 1 1 
                              Uniform f32_4* %125 = OpAccessChain %38 %124 %60 
                                       f32_4 %126 = OpLoad %125 
                                       f32_4 %127 = OpFMul %123 %126 
                                                      OpStore %73 %127 
                              Uniform f32_4* %128 = OpAccessChain %38 %124 %40 
                                       f32_4 %129 = OpLoad %128 
                                       f32_4 %130 = OpLoad %9 
                                       f32_4 %131 = OpVectorShuffle %130 %130 0 0 0 0 
                                       f32_4 %132 = OpFMul %129 %131 
                                       f32_4 %133 = OpLoad %73 
                                       f32_4 %134 = OpFAdd %132 %133 
                                                      OpStore %73 %134 
                              Uniform f32_4* %135 = OpAccessChain %38 %124 %124 
                                       f32_4 %136 = OpLoad %135 
                                       f32_4 %137 = OpLoad %9 
                                       f32_4 %138 = OpVectorShuffle %137 %137 2 2 2 2 
                                       f32_4 %139 = OpFMul %136 %138 
                                       f32_4 %140 = OpLoad %73 
                                       f32_4 %141 = OpFAdd %139 %140 
                                                      OpStore %9 %141 
                                       f32_4 %142 = OpLoad %9 
                              Uniform f32_4* %144 = OpAccessChain %38 %124 %143 
                                       f32_4 %145 = OpLoad %144 
                                       f32_4 %146 = OpFAdd %142 %145 
                                                      OpStore %9 %146 
                                       f32_4 %147 = OpLoad %9 
                                       f32_3 %148 = OpVectorShuffle %147 %147 1 1 1 
                              Uniform f32_4* %149 = OpAccessChain %38 %143 %60 
                                       f32_4 %150 = OpLoad %149 
                                       f32_3 %151 = OpVectorShuffle %150 %150 0 1 2 
                                       f32_3 %152 = OpFMul %148 %151 
                                       f32_4 %153 = OpLoad %73 
                                       f32_4 %154 = OpVectorShuffle %153 %152 4 5 6 3 
                                                      OpStore %73 %154 
                              Uniform f32_4* %155 = OpAccessChain %38 %143 %40 
                                       f32_4 %156 = OpLoad %155 
                                       f32_3 %157 = OpVectorShuffle %156 %156 0 1 2 
                                       f32_4 %158 = OpLoad %9 
                                       f32_3 %159 = OpVectorShuffle %158 %158 0 0 0 
                                       f32_3 %160 = OpFMul %157 %159 
                                       f32_4 %161 = OpLoad %73 
                                       f32_3 %162 = OpVectorShuffle %161 %161 0 1 2 
                                       f32_3 %163 = OpFAdd %160 %162 
                                       f32_4 %164 = OpLoad %73 
                                       f32_4 %165 = OpVectorShuffle %164 %163 4 5 6 3 
                                                      OpStore %73 %165 
                              Uniform f32_4* %166 = OpAccessChain %38 %143 %124 
                                       f32_4 %167 = OpLoad %166 
                                       f32_3 %168 = OpVectorShuffle %167 %167 0 1 2 
                                       f32_4 %169 = OpLoad %9 
                                       f32_3 %170 = OpVectorShuffle %169 %169 2 2 2 
                                       f32_3 %171 = OpFMul %168 %170 
                                       f32_4 %172 = OpLoad %73 
                                       f32_3 %173 = OpVectorShuffle %172 %172 0 1 2 
                                       f32_3 %174 = OpFAdd %171 %173 
                                       f32_4 %175 = OpLoad %9 
                                       f32_4 %176 = OpVectorShuffle %175 %174 4 5 6 3 
                                                      OpStore %9 %176 
                              Uniform f32_4* %177 = OpAccessChain %38 %143 %143 
                                       f32_4 %178 = OpLoad %177 
                                       f32_3 %179 = OpVectorShuffle %178 %178 0 1 2 
                                       f32_4 %180 = OpLoad %9 
                                       f32_3 %181 = OpVectorShuffle %180 %180 3 3 3 
                                       f32_3 %182 = OpFMul %179 %181 
                                       f32_4 %183 = OpLoad %9 
                                       f32_3 %184 = OpVectorShuffle %183 %183 0 1 2 
                                       f32_3 %185 = OpFAdd %182 %184 
                                       f32_4 %186 = OpLoad %9 
                                       f32_4 %187 = OpVectorShuffle %186 %185 4 5 6 3 
                                                      OpStore %9 %187 
                                       f32_4 %190 = OpLoad %9 
                                       f32_2 %191 = OpVectorShuffle %190 %190 0 1 
                                Private f32* %193 = OpAccessChain %9 %192 
                                         f32 %194 = OpLoad %193 
                                         f32 %195 = OpCompositeExtract %191 0 
                                         f32 %196 = OpCompositeExtract %191 1 
                                       f32_3 %197 = OpCompositeConstruct %195 %196 %194 
                                                      OpStore %189 %197 
                         read_only Texture2D %199 = OpLoad %198 
                                     sampler %201 = OpLoad %200 
                  read_only Texture2DSampled %204 = OpSampledImage %199 %201 
                                       f32_3 %205 = OpLoad %189 
                                         f32 %207 = OpCompositeExtract %205 2 
                                         f32 %208 = OpImageSampleDrefExplicitLod %204 %205 %207 Lod %6 
                                Private f32* %209 = OpAccessChain %9 %27 
                                                      OpStore %209 %208 
                                Uniform f32* %211 = OpAccessChain %38 %210 %27 
                                         f32 %212 = OpLoad %211 
                                         f32 %213 = OpFNegate %212 
                                         f32 %214 = OpFAdd %213 %51 
                                                      OpStore %31 %214 
                                       f32_4 %217 = OpLoad %9 
                                       f32_4 %218 = OpVectorShuffle %217 %217 0 0 0 0 
                                         f32 %219 = OpLoad %31 
                                       f32_4 %220 = OpCompositeConstruct %219 %219 %219 %219 
                                       f32_4 %221 = OpFMul %218 %220 
                              Uniform f32_4* %222 = OpAccessChain %38 %210 
                                       f32_4 %223 = OpLoad %222 
                                       f32_4 %224 = OpVectorShuffle %223 %223 0 0 0 0 
                                       f32_4 %225 = OpFAdd %221 %224 
                                                      OpStore %216 %225 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "SHADOWS_SINGLE_CASCADE" "SHADOWS_SPLIT_SPHERES" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "SHADOWS_SINGLE_CASCADE" "SHADOWS_SPLIT_SPHERES" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraInvProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in  vec4 in_POSITION0;
in  vec2 in_TEXCOORD0;
in  vec3 in_TEXCOORD1;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_CameraInvProjection[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_CameraInvProjection[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    vs_TEXCOORD0.zw = u_xlat1.zz + u_xlat1.xw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = in_TEXCOORD1.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-hlslcc_mtx4x4unity_CameraInvProjection[2].xyz);
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[2].xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;
    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;
    u_xlat1.w = (-u_xlat1.z);
    vs_TEXCOORD2.xyz = u_xlat1.xyw;
    u_xlat0.w = (-u_xlat0.z);
    vs_TEXCOORD3.xyz = u_xlat0.xyw;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	vec4 _LightShadowData;
UNITY_LOCATION(0) uniform  sampler2D _CameraDepthTexture;
UNITY_LOCATION(1) uniform  sampler2D _ShadowMapTexture;
UNITY_LOCATION(2) uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec3 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD3;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat2;
float u_xlat4;
void main()
{
    u_xlat0 = texture(_CameraDepthTexture, vs_TEXCOORD0.xy);
    u_xlat2 = _ZBufferParams.x * u_xlat0.x + _ZBufferParams.y;
    u_xlat2 = float(1.0) / u_xlat2;
    u_xlat4 = (-u_xlat2) + u_xlat0.x;
    u_xlat2 = unity_OrthoParams.w * u_xlat4 + u_xlat2;
    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + vs_TEXCOORD3.xyz;
    u_xlat0.xzw = u_xlat0.xxx * u_xlat1.xyz + vs_TEXCOORD2.xyz;
    u_xlat0.xzw = (-vs_TEXCOORD1.xyz) * vec3(u_xlat2) + u_xlat0.xzw;
    u_xlat1.xyz = vec3(u_xlat2) * vs_TEXCOORD1.xyz;
    u_xlat0.xyz = unity_OrthoParams.www * u_xlat0.xzw + u_xlat1.xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_CameraToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_CameraToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_CameraToWorld[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_CameraToWorld[3];
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[3].xyz * u_xlat0.www + u_xlat0.xyz;
    vec3 txVec0 = vec3(u_xlat0.xy,u_xlat0.z);
    u_xlat0.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
    u_xlat2 = (-_LightShadowData.x) + 1.0;
    SV_Target0 = u_xlat0.xxxx * vec4(u_xlat2) + _LightShadowData.xxxx;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "SHADOWS_SINGLE_CASCADE" "SHADOWS_SPLIT_SPHERES" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 193
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %80 %119 %129 %134 %136 %177 %184 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpMemberDecorate %78 0 BuiltIn 78 
                                                      OpMemberDecorate %78 1 BuiltIn 78 
                                                      OpMemberDecorate %78 2 BuiltIn 78 
                                                      OpDecorate %78 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 119 
                                                      OpDecorate %129 Location 129 
                                                      OpDecorate vs_TEXCOORD1 Location 134 
                                                      OpDecorate %136 Location 136 
                                                      OpDecorate vs_TEXCOORD2 Location 177 
                                                      OpDecorate vs_TEXCOORD3 Location 184 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %16 %17 %18 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4];}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 2 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %29 = OpConstant 0 
                                          i32 %45 = OpConstant 3 
                               Private f32_4* %49 = OpVariable Private 
                                          u32 %76 = OpConstant 1 
                                              %77 = OpTypeArray %6 %76 
                                              %78 = OpTypeStruct %7 %6 %77 
                                              %79 = OpTypePointer Output %78 
         Output struct {f32_4; f32; f32[1];}* %80 = OpVariable Output 
                                              %82 = OpTypePointer Output %7 
                                              %84 = OpTypePointer Private %6 
                                          u32 %87 = OpConstant 0 
                                              %88 = OpTypePointer Uniform %6 
                                              %93 = OpTypeVector %6 3 
                                          f32 %96 = OpConstant 3.674022E-40 
                                        f32_3 %97 = OpConstantComposite %96 %96 %96 
                                             %101 = OpTypePointer Private %93 
                              Private f32_3* %102 = OpVariable Private 
                       Output f32_4* vs_TEXCOORD0 = OpVariable Output 
                                             %120 = OpTypeVector %6 2 
                                             %128 = OpTypePointer Input %120 
                                Input f32_2* %129 = OpVariable Input 
                                             %133 = OpTypePointer Output %93 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                                             %135 = OpTypePointer Input %93 
                                Input f32_3* %136 = OpVariable Input 
                                         u32 %171 = OpConstant 2 
                                         u32 %175 = OpConstant 3 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                       Output f32_3* vs_TEXCOORD3 = OpVariable Output 
                                             %187 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %30 = OpAccessChain %21 %23 %29 
                                        f32_4 %31 = OpLoad %30 
                                        f32_4 %32 = OpLoad %11 
                                        f32_4 %33 = OpVectorShuffle %32 %32 0 0 0 0 
                                        f32_4 %34 = OpFMul %31 %33 
                                        f32_4 %35 = OpLoad %9 
                                        f32_4 %36 = OpFAdd %34 %35 
                                                      OpStore %9 %36 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %23 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %44 = OpLoad %9 
                               Uniform f32_4* %46 = OpAccessChain %21 %23 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_4 %48 = OpFAdd %44 %47 
                                                      OpStore %9 %48 
                                        f32_4 %50 = OpLoad %9 
                                        f32_4 %51 = OpVectorShuffle %50 %50 1 1 1 1 
                               Uniform f32_4* %52 = OpAccessChain %21 %45 %24 
                                        f32_4 %53 = OpLoad %52 
                                        f32_4 %54 = OpFMul %51 %53 
                                                      OpStore %49 %54 
                               Uniform f32_4* %55 = OpAccessChain %21 %45 %29 
                                        f32_4 %56 = OpLoad %55 
                                        f32_4 %57 = OpLoad %9 
                                        f32_4 %58 = OpVectorShuffle %57 %57 0 0 0 0 
                                        f32_4 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %49 
                                        f32_4 %61 = OpFAdd %59 %60 
                                                      OpStore %49 %61 
                               Uniform f32_4* %62 = OpAccessChain %21 %45 %23 
                                        f32_4 %63 = OpLoad %62 
                                        f32_4 %64 = OpLoad %9 
                                        f32_4 %65 = OpVectorShuffle %64 %64 2 2 2 2 
                                        f32_4 %66 = OpFMul %63 %65 
                                        f32_4 %67 = OpLoad %49 
                                        f32_4 %68 = OpFAdd %66 %67 
                                                      OpStore %49 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %45 %45 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %9 
                                        f32_4 %72 = OpVectorShuffle %71 %71 3 3 3 3 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %49 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %9 %75 
                                        f32_4 %81 = OpLoad %9 
                                Output f32_4* %83 = OpAccessChain %80 %29 
                                                      OpStore %83 %81 
                                 Private f32* %85 = OpAccessChain %9 %76 
                                          f32 %86 = OpLoad %85 
                                 Uniform f32* %89 = OpAccessChain %21 %29 %87 
                                          f32 %90 = OpLoad %89 
                                          f32 %91 = OpFMul %86 %90 
                                 Private f32* %92 = OpAccessChain %9 %76 
                                                      OpStore %92 %91 
                                        f32_4 %94 = OpLoad %9 
                                        f32_3 %95 = OpVectorShuffle %94 %94 0 3 1 
                                        f32_3 %98 = OpFMul %95 %97 
                                        f32_4 %99 = OpLoad %49 
                                       f32_4 %100 = OpVectorShuffle %99 %98 4 1 5 6 
                                                      OpStore %49 %100 
                                       f32_4 %103 = OpLoad %9 
                                       f32_3 %104 = OpVectorShuffle %103 %103 1 1 1 
                              Uniform f32_4* %105 = OpAccessChain %21 %24 %24 
                                       f32_4 %106 = OpLoad %105 
                                       f32_3 %107 = OpVectorShuffle %106 %106 0 1 2 
                                       f32_3 %108 = OpFMul %104 %107 
                                                      OpStore %102 %108 
                              Uniform f32_4* %109 = OpAccessChain %21 %24 %29 
                                       f32_4 %110 = OpLoad %109 
                                       f32_3 %111 = OpVectorShuffle %110 %110 0 1 2 
                                       f32_4 %112 = OpLoad %9 
                                       f32_3 %113 = OpVectorShuffle %112 %112 0 0 0 
                                       f32_3 %114 = OpFMul %111 %113 
                                       f32_3 %115 = OpLoad %102 
                                       f32_3 %116 = OpFAdd %114 %115 
                                       f32_4 %117 = OpLoad %9 
                                       f32_4 %118 = OpVectorShuffle %117 %116 4 5 6 3 
                                                      OpStore %9 %118 
                                       f32_4 %121 = OpLoad %49 
                                       f32_2 %122 = OpVectorShuffle %121 %121 2 2 
                                       f32_4 %123 = OpLoad %49 
                                       f32_2 %124 = OpVectorShuffle %123 %123 0 3 
                                       f32_2 %125 = OpFAdd %122 %124 
                                       f32_4 %126 = OpLoad vs_TEXCOORD0 
                                       f32_4 %127 = OpVectorShuffle %126 %125 0 1 4 5 
                                                      OpStore vs_TEXCOORD0 %127 
                                       f32_2 %130 = OpLoad %129 
                                       f32_4 %131 = OpLoad vs_TEXCOORD0 
                                       f32_4 %132 = OpVectorShuffle %131 %130 4 5 2 3 
                                                      OpStore vs_TEXCOORD0 %132 
                                       f32_3 %137 = OpLoad %136 
                                                      OpStore vs_TEXCOORD1 %137 
                                       f32_4 %138 = OpLoad %9 
                                       f32_3 %139 = OpVectorShuffle %138 %138 0 1 2 
                              Uniform f32_4* %140 = OpAccessChain %21 %24 %23 
                                       f32_4 %141 = OpLoad %140 
                                       f32_3 %142 = OpVectorShuffle %141 %141 0 1 2 
                                       f32_3 %143 = OpFNegate %142 
                                       f32_3 %144 = OpFAdd %139 %143 
                                       f32_4 %145 = OpLoad %49 
                                       f32_4 %146 = OpVectorShuffle %145 %144 4 5 6 3 
                                                      OpStore %49 %146 
                                       f32_4 %147 = OpLoad %9 
                                       f32_3 %148 = OpVectorShuffle %147 %147 0 1 2 
                              Uniform f32_4* %149 = OpAccessChain %21 %24 %23 
                                       f32_4 %150 = OpLoad %149 
                                       f32_3 %151 = OpVectorShuffle %150 %150 0 1 2 
                                       f32_3 %152 = OpFAdd %148 %151 
                                       f32_4 %153 = OpLoad %9 
                                       f32_4 %154 = OpVectorShuffle %153 %152 4 5 6 3 
                                                      OpStore %9 %154 
                                       f32_4 %155 = OpLoad %9 
                                       f32_3 %156 = OpVectorShuffle %155 %155 0 1 2 
                              Uniform f32_4* %157 = OpAccessChain %21 %24 %45 
                                       f32_4 %158 = OpLoad %157 
                                       f32_3 %159 = OpVectorShuffle %158 %158 0 1 2 
                                       f32_3 %160 = OpFAdd %156 %159 
                                       f32_4 %161 = OpLoad %9 
                                       f32_4 %162 = OpVectorShuffle %161 %160 4 5 6 3 
                                                      OpStore %9 %162 
                                       f32_4 %163 = OpLoad %49 
                                       f32_3 %164 = OpVectorShuffle %163 %163 0 1 2 
                              Uniform f32_4* %165 = OpAccessChain %21 %24 %45 
                                       f32_4 %166 = OpLoad %165 
                                       f32_3 %167 = OpVectorShuffle %166 %166 0 1 2 
                                       f32_3 %168 = OpFAdd %164 %167 
                                       f32_4 %169 = OpLoad %49 
                                       f32_4 %170 = OpVectorShuffle %169 %168 4 5 6 3 
                                                      OpStore %49 %170 
                                Private f32* %172 = OpAccessChain %49 %171 
                                         f32 %173 = OpLoad %172 
                                         f32 %174 = OpFNegate %173 
                                Private f32* %176 = OpAccessChain %49 %175 
                                                      OpStore %176 %174 
                                       f32_4 %178 = OpLoad %49 
                                       f32_3 %179 = OpVectorShuffle %178 %178 0 1 3 
                                                      OpStore vs_TEXCOORD2 %179 
                                Private f32* %180 = OpAccessChain %9 %171 
                                         f32 %181 = OpLoad %180 
                                         f32 %182 = OpFNegate %181 
                                Private f32* %183 = OpAccessChain %9 %175 
                                                      OpStore %183 %182 
                                       f32_4 %185 = OpLoad %9 
                                       f32_3 %186 = OpVectorShuffle %185 %185 0 1 3 
                                                      OpStore vs_TEXCOORD3 %186 
                                 Output f32* %188 = OpAccessChain %80 %29 %76 
                                         f32 %189 = OpLoad %188 
                                         f32 %190 = OpFNegate %189 
                                 Output f32* %191 = OpAccessChain %80 %29 %76 
                                                      OpStore %191 %190 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 227
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %21 %76 %79 %93 %216 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpDecorate %12 DescriptorSet 12 
                                                      OpDecorate %12 Binding 12 
                                                      OpDecorate %16 DescriptorSet 16 
                                                      OpDecorate %16 Binding 16 
                                                      OpDecorate vs_TEXCOORD0 Location 21 
                                                      OpDecorate %33 ArrayStride 33 
                                                      OpDecorate %35 ArrayStride 35 
                                                      OpMemberDecorate %36 0 Offset 36 
                                                      OpMemberDecorate %36 1 Offset 36 
                                                      OpMemberDecorate %36 2 Offset 36 
                                                      OpMemberDecorate %36 3 Offset 36 
                                                      OpMemberDecorate %36 4 Offset 36 
                                                      OpDecorate %36 Block 
                                                      OpDecorate %38 DescriptorSet 38 
                                                      OpDecorate %38 Binding 38 
                                                      OpDecorate vs_TEXCOORD2 Location 76 
                                                      OpDecorate vs_TEXCOORD3 Location 79 
                                                      OpDecorate vs_TEXCOORD1 Location 93 
                                                      OpDecorate %198 DescriptorSet 198 
                                                      OpDecorate %198 Binding 198 
                                                      OpDecorate %200 DescriptorSet 200 
                                                      OpDecorate %200 Binding 200 
                                                      OpDecorate %216 Location 216 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypePointer UniformConstant %10 
         UniformConstant read_only Texture2D* %12 = OpVariable UniformConstant 
                                              %14 = OpTypeSampler 
                                              %15 = OpTypePointer UniformConstant %14 
                     UniformConstant sampler* %16 = OpVariable UniformConstant 
                                              %18 = OpTypeSampledImage %10 
                                              %20 = OpTypePointer Input %7 
                        Input f32_4* vs_TEXCOORD0 = OpVariable Input 
                                              %22 = OpTypeVector %6 2 
                                              %26 = OpTypeInt 32 0 
                                          u32 %27 = OpConstant 0 
                                              %29 = OpTypePointer Private %6 
                                 Private f32* %31 = OpVariable Private 
                                          u32 %32 = OpConstant 4 
                                              %33 = OpTypeArray %7 %32 
                                          u32 %34 = OpConstant 16 
                                              %35 = OpTypeArray %7 %34 
                                              %36 = OpTypeStruct %7 %7 %33 %35 %7 
                                              %37 = OpTypePointer Uniform %36 
Uniform struct {f32_4; f32_4; f32_4[4]; f32_4[16]; f32_4;}* %38 = OpVariable Uniform 
                                              %39 = OpTypeInt 32 1 
                                          i32 %40 = OpConstant 0 
                                              %41 = OpTypePointer Uniform %6 
                                          u32 %47 = OpConstant 1 
                                          f32 %51 = OpConstant 3.674022E-40 
                                 Private f32* %54 = OpVariable Private 
                                          i32 %60 = OpConstant 1 
                                          u32 %61 = OpConstant 3 
                               Private f32_4* %73 = OpVariable Private 
                                              %74 = OpTypeVector %6 3 
                                              %75 = OpTypePointer Input %74 
                        Input f32_3* vs_TEXCOORD2 = OpVariable Input 
                        Input f32_3* vs_TEXCOORD3 = OpVariable Input 
                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                                             %110 = OpTypePointer Uniform %7 
                                         i32 %124 = OpConstant 2 
                                         i32 %143 = OpConstant 3 
                                             %188 = OpTypePointer Function %74 
                                         u32 %192 = OpConstant 2 
        UniformConstant read_only Texture2D* %198 = OpVariable UniformConstant 
                    UniformConstant sampler* %200 = OpVariable UniformConstant 
                                             %202 = OpTypeImage %6 Dim2D 1 0 0 1 Unknown 
                                             %203 = OpTypeSampledImage %202 
                                         f32 %206 = OpConstant 3.674022E-40 
                                         i32 %210 = OpConstant 4 
                                             %215 = OpTypePointer Output %7 
                               Output f32_4* %216 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %189 = OpVariable Function 
                          read_only Texture2D %13 = OpLoad %12 
                                      sampler %17 = OpLoad %16 
                   read_only Texture2DSampled %19 = OpSampledImage %13 %17 
                                        f32_4 %23 = OpLoad vs_TEXCOORD0 
                                        f32_2 %24 = OpVectorShuffle %23 %23 0 1 
                                        f32_4 %25 = OpImageSampleImplicitLod %19 %24 
                                          f32 %28 = OpCompositeExtract %25 0 
                                 Private f32* %30 = OpAccessChain %9 %27 
                                                      OpStore %30 %28 
                                 Uniform f32* %42 = OpAccessChain %38 %40 %27 
                                          f32 %43 = OpLoad %42 
                                 Private f32* %44 = OpAccessChain %9 %27 
                                          f32 %45 = OpLoad %44 
                                          f32 %46 = OpFMul %43 %45 
                                 Uniform f32* %48 = OpAccessChain %38 %40 %47 
                                          f32 %49 = OpLoad %48 
                                          f32 %50 = OpFAdd %46 %49 
                                                      OpStore %31 %50 
                                          f32 %52 = OpLoad %31 
                                          f32 %53 = OpFDiv %51 %52 
                                                      OpStore %31 %53 
                                          f32 %55 = OpLoad %31 
                                          f32 %56 = OpFNegate %55 
                                 Private f32* %57 = OpAccessChain %9 %27 
                                          f32 %58 = OpLoad %57 
                                          f32 %59 = OpFAdd %56 %58 
                                                      OpStore %54 %59 
                                 Uniform f32* %62 = OpAccessChain %38 %60 %61 
                                          f32 %63 = OpLoad %62 
                                          f32 %64 = OpLoad %54 
                                          f32 %65 = OpFMul %63 %64 
                                          f32 %66 = OpLoad %31 
                                          f32 %67 = OpFAdd %65 %66 
                                                      OpStore %31 %67 
                                 Private f32* %68 = OpAccessChain %9 %27 
                                          f32 %69 = OpLoad %68 
                                          f32 %70 = OpFNegate %69 
                                          f32 %71 = OpFAdd %70 %51 
                                 Private f32* %72 = OpAccessChain %9 %27 
                                                      OpStore %72 %71 
                                        f32_3 %77 = OpLoad vs_TEXCOORD2 
                                        f32_3 %78 = OpFNegate %77 
                                        f32_3 %80 = OpLoad vs_TEXCOORD3 
                                        f32_3 %81 = OpFAdd %78 %80 
                                        f32_4 %82 = OpLoad %73 
                                        f32_4 %83 = OpVectorShuffle %82 %81 4 5 6 3 
                                                      OpStore %73 %83 
                                        f32_4 %84 = OpLoad %9 
                                        f32_3 %85 = OpVectorShuffle %84 %84 0 0 0 
                                        f32_4 %86 = OpLoad %73 
                                        f32_3 %87 = OpVectorShuffle %86 %86 0 1 2 
                                        f32_3 %88 = OpFMul %85 %87 
                                        f32_3 %89 = OpLoad vs_TEXCOORD2 
                                        f32_3 %90 = OpFAdd %88 %89 
                                        f32_4 %91 = OpLoad %9 
                                        f32_4 %92 = OpVectorShuffle %91 %90 4 1 5 6 
                                                      OpStore %9 %92 
                                        f32_3 %94 = OpLoad vs_TEXCOORD1 
                                        f32_3 %95 = OpFNegate %94 
                                          f32 %96 = OpLoad %31 
                                        f32_3 %97 = OpCompositeConstruct %96 %96 %96 
                                        f32_3 %98 = OpFMul %95 %97 
                                        f32_4 %99 = OpLoad %9 
                                       f32_3 %100 = OpVectorShuffle %99 %99 0 2 3 
                                       f32_3 %101 = OpFAdd %98 %100 
                                       f32_4 %102 = OpLoad %9 
                                       f32_4 %103 = OpVectorShuffle %102 %101 4 1 5 6 
                                                      OpStore %9 %103 
                                         f32 %104 = OpLoad %31 
                                       f32_3 %105 = OpCompositeConstruct %104 %104 %104 
                                       f32_3 %106 = OpLoad vs_TEXCOORD1 
                                       f32_3 %107 = OpFMul %105 %106 
                                       f32_4 %108 = OpLoad %73 
                                       f32_4 %109 = OpVectorShuffle %108 %107 4 5 6 3 
                                                      OpStore %73 %109 
                              Uniform f32_4* %111 = OpAccessChain %38 %60 
                                       f32_4 %112 = OpLoad %111 
                                       f32_3 %113 = OpVectorShuffle %112 %112 3 3 3 
                                       f32_4 %114 = OpLoad %9 
                                       f32_3 %115 = OpVectorShuffle %114 %114 0 2 3 
                                       f32_3 %116 = OpFMul %113 %115 
                                       f32_4 %117 = OpLoad %73 
                                       f32_3 %118 = OpVectorShuffle %117 %117 0 1 2 
                                       f32_3 %119 = OpFAdd %116 %118 
                                       f32_4 %120 = OpLoad %9 
                                       f32_4 %121 = OpVectorShuffle %120 %119 4 5 6 3 
                                                      OpStore %9 %121 
                                       f32_4 %122 = OpLoad %9 
                                       f32_4 %123 = OpVectorShuffle %122 %122 1 1 1 1 
                              Uniform f32_4* %125 = OpAccessChain %38 %124 %60 
                                       f32_4 %126 = OpLoad %125 
                                       f32_4 %127 = OpFMul %123 %126 
                                                      OpStore %73 %127 
                              Uniform f32_4* %128 = OpAccessChain %38 %124 %40 
                                       f32_4 %129 = OpLoad %128 
                                       f32_4 %130 = OpLoad %9 
                                       f32_4 %131 = OpVectorShuffle %130 %130 0 0 0 0 
                                       f32_4 %132 = OpFMul %129 %131 
                                       f32_4 %133 = OpLoad %73 
                                       f32_4 %134 = OpFAdd %132 %133 
                                                      OpStore %73 %134 
                              Uniform f32_4* %135 = OpAccessChain %38 %124 %124 
                                       f32_4 %136 = OpLoad %135 
                                       f32_4 %137 = OpLoad %9 
                                       f32_4 %138 = OpVectorShuffle %137 %137 2 2 2 2 
                                       f32_4 %139 = OpFMul %136 %138 
                                       f32_4 %140 = OpLoad %73 
                                       f32_4 %141 = OpFAdd %139 %140 
                                                      OpStore %9 %141 
                                       f32_4 %142 = OpLoad %9 
                              Uniform f32_4* %144 = OpAccessChain %38 %124 %143 
                                       f32_4 %145 = OpLoad %144 
                                       f32_4 %146 = OpFAdd %142 %145 
                                                      OpStore %9 %146 
                                       f32_4 %147 = OpLoad %9 
                                       f32_3 %148 = OpVectorShuffle %147 %147 1 1 1 
                              Uniform f32_4* %149 = OpAccessChain %38 %143 %60 
                                       f32_4 %150 = OpLoad %149 
                                       f32_3 %151 = OpVectorShuffle %150 %150 0 1 2 
                                       f32_3 %152 = OpFMul %148 %151 
                                       f32_4 %153 = OpLoad %73 
                                       f32_4 %154 = OpVectorShuffle %153 %152 4 5 6 3 
                                                      OpStore %73 %154 
                              Uniform f32_4* %155 = OpAccessChain %38 %143 %40 
                                       f32_4 %156 = OpLoad %155 
                                       f32_3 %157 = OpVectorShuffle %156 %156 0 1 2 
                                       f32_4 %158 = OpLoad %9 
                                       f32_3 %159 = OpVectorShuffle %158 %158 0 0 0 
                                       f32_3 %160 = OpFMul %157 %159 
                                       f32_4 %161 = OpLoad %73 
                                       f32_3 %162 = OpVectorShuffle %161 %161 0 1 2 
                                       f32_3 %163 = OpFAdd %160 %162 
                                       f32_4 %164 = OpLoad %73 
                                       f32_4 %165 = OpVectorShuffle %164 %163 4 5 6 3 
                                                      OpStore %73 %165 
                              Uniform f32_4* %166 = OpAccessChain %38 %143 %124 
                                       f32_4 %167 = OpLoad %166 
                                       f32_3 %168 = OpVectorShuffle %167 %167 0 1 2 
                                       f32_4 %169 = OpLoad %9 
                                       f32_3 %170 = OpVectorShuffle %169 %169 2 2 2 
                                       f32_3 %171 = OpFMul %168 %170 
                                       f32_4 %172 = OpLoad %73 
                                       f32_3 %173 = OpVectorShuffle %172 %172 0 1 2 
                                       f32_3 %174 = OpFAdd %171 %173 
                                       f32_4 %175 = OpLoad %9 
                                       f32_4 %176 = OpVectorShuffle %175 %174 4 5 6 3 
                                                      OpStore %9 %176 
                              Uniform f32_4* %177 = OpAccessChain %38 %143 %143 
                                       f32_4 %178 = OpLoad %177 
                                       f32_3 %179 = OpVectorShuffle %178 %178 0 1 2 
                                       f32_4 %180 = OpLoad %9 
                                       f32_3 %181 = OpVectorShuffle %180 %180 3 3 3 
                                       f32_3 %182 = OpFMul %179 %181 
                                       f32_4 %183 = OpLoad %9 
                                       f32_3 %184 = OpVectorShuffle %183 %183 0 1 2 
                                       f32_3 %185 = OpFAdd %182 %184 
                                       f32_4 %186 = OpLoad %9 
                                       f32_4 %187 = OpVectorShuffle %186 %185 4 5 6 3 
                                                      OpStore %9 %187 
                                       f32_4 %190 = OpLoad %9 
                                       f32_2 %191 = OpVectorShuffle %190 %190 0 1 
                                Private f32* %193 = OpAccessChain %9 %192 
                                         f32 %194 = OpLoad %193 
                                         f32 %195 = OpCompositeExtract %191 0 
                                         f32 %196 = OpCompositeExtract %191 1 
                                       f32_3 %197 = OpCompositeConstruct %195 %196 %194 
                                                      OpStore %189 %197 
                         read_only Texture2D %199 = OpLoad %198 
                                     sampler %201 = OpLoad %200 
                  read_only Texture2DSampled %204 = OpSampledImage %199 %201 
                                       f32_3 %205 = OpLoad %189 
                                         f32 %207 = OpCompositeExtract %205 2 
                                         f32 %208 = OpImageSampleDrefExplicitLod %204 %205 %207 Lod %6 
                                Private f32* %209 = OpAccessChain %9 %27 
                                                      OpStore %209 %208 
                                Uniform f32* %211 = OpAccessChain %38 %210 %27 
                                         f32 %212 = OpLoad %211 
                                         f32 %213 = OpFNegate %212 
                                         f32 %214 = OpFAdd %213 %51 
                                                      OpStore %31 %214 
                                       f32_4 %217 = OpLoad %9 
                                       f32_4 %218 = OpVectorShuffle %217 %217 0 0 0 0 
                                         f32 %219 = OpLoad %31 
                                       f32_4 %220 = OpCompositeConstruct %219 %219 %219 %219 
                                       f32_4 %221 = OpFMul %218 %220 
                              Uniform f32_4* %222 = OpAccessChain %38 %210 
                                       f32_4 %223 = OpLoad %222 
                                       f32_4 %224 = OpVectorShuffle %223 %223 0 0 0 0 
                                       f32_4 %225 = OpFAdd %221 %224 
                                                      OpStore %216 %225 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
}
Program "fp" {
SubProgram "d3d11 " {
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
""
}
SubProgram "vulkan " {
""
}
SubProgram "d3d11 " {
Keywords { "SHADOWS_SPLIT_SPHERES" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "SHADOWS_SPLIT_SPHERES" }
""
}
SubProgram "vulkan " {
Keywords { "SHADOWS_SPLIT_SPHERES" }
""
}
SubProgram "d3d11 " {
Keywords { "SHADOWS_SINGLE_CASCADE" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "SHADOWS_SINGLE_CASCADE" }
""
}
SubProgram "vulkan " {
Keywords { "SHADOWS_SINGLE_CASCADE" }
""
}
SubProgram "d3d11 " {
Keywords { "SHADOWS_SINGLE_CASCADE" "SHADOWS_SPLIT_SPHERES" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "SHADOWS_SINGLE_CASCADE" "SHADOWS_SPLIT_SPHERES" }
""
}
SubProgram "vulkan " {
Keywords { "SHADOWS_SINGLE_CASCADE" "SHADOWS_SPLIT_SPHERES" }
""
}
}
}
}
SubShader {
 Tags { "ShadowmapFilter" = "HardShadow_FORCE_INV_PROJECTION_IN_PS" }
 Pass {
  Tags { "ShadowmapFilter" = "HardShadow_FORCE_INV_PROJECTION_IN_PS" }
  ZTest Always
  ZWrite Off
  Cull Off
  GpuProgramID 106743
Program "vp" {
SubProgram "d3d11 " {
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraInvProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in  vec4 in_POSITION0;
in  vec2 in_TEXCOORD0;
in  vec3 in_TEXCOORD1;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_CameraInvProjection[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_CameraInvProjection[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    vs_TEXCOORD0.zw = u_xlat1.zz + u_xlat1.xw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = in_TEXCOORD1.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-hlslcc_mtx4x4unity_CameraInvProjection[2].xyz);
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[2].xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;
    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;
    u_xlat1.w = (-u_xlat1.z);
    vs_TEXCOORD2.xyz = u_xlat1.xyw;
    u_xlat0.w = (-u_xlat0.z);
    vs_TEXCOORD3.xyz = u_xlat0.xyw;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_CameraInvProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	vec4 _LightShadowData;
UNITY_LOCATION(0) uniform  sampler2D _CameraDepthTexture;
UNITY_LOCATION(1) uniform  sampler2D _ShadowMapTexture;
UNITY_LOCATION(2) uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
in  vec4 vs_TEXCOORD0;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
bvec4 u_xlatb1;
vec4 u_xlat2;
bvec4 u_xlatb2;
vec3 u_xlat3;
float u_xlat4;
void main()
{
    u_xlat0 = texture(_CameraDepthTexture, vs_TEXCOORD0.xy).yzxw;
    u_xlat0.xy = vs_TEXCOORD0.zw;
    u_xlat0.xyz = u_xlat0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_CameraInvProjection[1];
    u_xlat1 = hlslcc_mtx4x4unity_CameraInvProjection[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_CameraInvProjection[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_CameraInvProjection[3];
    u_xlat0.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlatb1 = greaterThanEqual((-u_xlat0.zzzz), _LightSplitsNear);
    u_xlat1.x = u_xlatb1.x ? float(1.0) : 0.0;
    u_xlat1.y = u_xlatb1.y ? float(1.0) : 0.0;
    u_xlat1.z = u_xlatb1.z ? float(1.0) : 0.0;
    u_xlat1.w = u_xlatb1.w ? float(1.0) : 0.0;
;
    u_xlatb2 = lessThan((-u_xlat0.zzzz), _LightSplitsFar);
    u_xlat2.x = u_xlatb2.x ? float(1.0) : 0.0;
    u_xlat2.y = u_xlatb2.y ? float(1.0) : 0.0;
    u_xlat2.z = u_xlatb2.z ? float(1.0) : 0.0;
    u_xlat2.w = u_xlatb2.w ? float(1.0) : 0.0;
;
    u_xlat1 = u_xlat1 * u_xlat2;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4unity_CameraToWorld[1];
    u_xlat2 = hlslcc_mtx4x4unity_CameraToWorld[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4unity_CameraToWorld[2] * (-u_xlat0.zzzz) + u_xlat2;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_CameraToWorld[3];
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[5].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[4].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[6].xyz * u_xlat0.zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[7].xyz * u_xlat0.www + u_xlat2.xyz;
    u_xlat2.xyz = u_xlat1.yyy * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * u_xlat0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * u_xlat0.zzz + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[3].xyz * u_xlat0.www + u_xlat3.xyz;
    u_xlat2.xyz = u_xlat3.xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat3.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[9].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[8].xyz * u_xlat0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[10].xyz * u_xlat0.zzz + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[11].xyz * u_xlat0.www + u_xlat3.xyz;
    u_xlat1.xyz = u_xlat3.xyz * u_xlat1.zzz + u_xlat2.xyz;
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[13].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[12].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[14].xyz * u_xlat0.zzz + u_xlat2.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[15].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.www + u_xlat1.xyz;
    vec3 txVec0 = vec3(u_xlat0.xy,u_xlat0.z);
    u_xlat0.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
    u_xlat4 = (-_LightShadowData.x) + 1.0;
    SV_Target0 = u_xlat0.xxxx * vec4(u_xlat4) + _LightShadowData.xxxx;
    return;
}

#endif
"
}
SubProgram "vulkan " {
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 193
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %80 %119 %129 %134 %136 %177 %184 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpMemberDecorate %78 0 BuiltIn 78 
                                                      OpMemberDecorate %78 1 BuiltIn 78 
                                                      OpMemberDecorate %78 2 BuiltIn 78 
                                                      OpDecorate %78 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 119 
                                                      OpDecorate %129 Location 129 
                                                      OpDecorate vs_TEXCOORD1 Location 134 
                                                      OpDecorate %136 Location 136 
                                                      OpDecorate vs_TEXCOORD2 Location 177 
                                                      OpDecorate vs_TEXCOORD3 Location 184 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %16 %17 %18 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4];}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 2 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %29 = OpConstant 0 
                                          i32 %45 = OpConstant 3 
                               Private f32_4* %49 = OpVariable Private 
                                          u32 %76 = OpConstant 1 
                                              %77 = OpTypeArray %6 %76 
                                              %78 = OpTypeStruct %7 %6 %77 
                                              %79 = OpTypePointer Output %78 
         Output struct {f32_4; f32; f32[1];}* %80 = OpVariable Output 
                                              %82 = OpTypePointer Output %7 
                                              %84 = OpTypePointer Private %6 
                                          u32 %87 = OpConstant 0 
                                              %88 = OpTypePointer Uniform %6 
                                              %93 = OpTypeVector %6 3 
                                          f32 %96 = OpConstant 3.674022E-40 
                                        f32_3 %97 = OpConstantComposite %96 %96 %96 
                                             %101 = OpTypePointer Private %93 
                              Private f32_3* %102 = OpVariable Private 
                       Output f32_4* vs_TEXCOORD0 = OpVariable Output 
                                             %120 = OpTypeVector %6 2 
                                             %128 = OpTypePointer Input %120 
                                Input f32_2* %129 = OpVariable Input 
                                             %133 = OpTypePointer Output %93 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                                             %135 = OpTypePointer Input %93 
                                Input f32_3* %136 = OpVariable Input 
                                         u32 %171 = OpConstant 2 
                                         u32 %175 = OpConstant 3 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                       Output f32_3* vs_TEXCOORD3 = OpVariable Output 
                                             %187 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %30 = OpAccessChain %21 %23 %29 
                                        f32_4 %31 = OpLoad %30 
                                        f32_4 %32 = OpLoad %11 
                                        f32_4 %33 = OpVectorShuffle %32 %32 0 0 0 0 
                                        f32_4 %34 = OpFMul %31 %33 
                                        f32_4 %35 = OpLoad %9 
                                        f32_4 %36 = OpFAdd %34 %35 
                                                      OpStore %9 %36 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %23 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %44 = OpLoad %9 
                               Uniform f32_4* %46 = OpAccessChain %21 %23 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_4 %48 = OpFAdd %44 %47 
                                                      OpStore %9 %48 
                                        f32_4 %50 = OpLoad %9 
                                        f32_4 %51 = OpVectorShuffle %50 %50 1 1 1 1 
                               Uniform f32_4* %52 = OpAccessChain %21 %45 %24 
                                        f32_4 %53 = OpLoad %52 
                                        f32_4 %54 = OpFMul %51 %53 
                                                      OpStore %49 %54 
                               Uniform f32_4* %55 = OpAccessChain %21 %45 %29 
                                        f32_4 %56 = OpLoad %55 
                                        f32_4 %57 = OpLoad %9 
                                        f32_4 %58 = OpVectorShuffle %57 %57 0 0 0 0 
                                        f32_4 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %49 
                                        f32_4 %61 = OpFAdd %59 %60 
                                                      OpStore %49 %61 
                               Uniform f32_4* %62 = OpAccessChain %21 %45 %23 
                                        f32_4 %63 = OpLoad %62 
                                        f32_4 %64 = OpLoad %9 
                                        f32_4 %65 = OpVectorShuffle %64 %64 2 2 2 2 
                                        f32_4 %66 = OpFMul %63 %65 
                                        f32_4 %67 = OpLoad %49 
                                        f32_4 %68 = OpFAdd %66 %67 
                                                      OpStore %49 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %45 %45 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %9 
                                        f32_4 %72 = OpVectorShuffle %71 %71 3 3 3 3 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %49 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %9 %75 
                                        f32_4 %81 = OpLoad %9 
                                Output f32_4* %83 = OpAccessChain %80 %29 
                                                      OpStore %83 %81 
                                 Private f32* %85 = OpAccessChain %9 %76 
                                          f32 %86 = OpLoad %85 
                                 Uniform f32* %89 = OpAccessChain %21 %29 %87 
                                          f32 %90 = OpLoad %89 
                                          f32 %91 = OpFMul %86 %90 
                                 Private f32* %92 = OpAccessChain %9 %76 
                                                      OpStore %92 %91 
                                        f32_4 %94 = OpLoad %9 
                                        f32_3 %95 = OpVectorShuffle %94 %94 0 3 1 
                                        f32_3 %98 = OpFMul %95 %97 
                                        f32_4 %99 = OpLoad %49 
                                       f32_4 %100 = OpVectorShuffle %99 %98 4 1 5 6 
                                                      OpStore %49 %100 
                                       f32_4 %103 = OpLoad %9 
                                       f32_3 %104 = OpVectorShuffle %103 %103 1 1 1 
                              Uniform f32_4* %105 = OpAccessChain %21 %24 %24 
                                       f32_4 %106 = OpLoad %105 
                                       f32_3 %107 = OpVectorShuffle %106 %106 0 1 2 
                                       f32_3 %108 = OpFMul %104 %107 
                                                      OpStore %102 %108 
                              Uniform f32_4* %109 = OpAccessChain %21 %24 %29 
                                       f32_4 %110 = OpLoad %109 
                                       f32_3 %111 = OpVectorShuffle %110 %110 0 1 2 
                                       f32_4 %112 = OpLoad %9 
                                       f32_3 %113 = OpVectorShuffle %112 %112 0 0 0 
                                       f32_3 %114 = OpFMul %111 %113 
                                       f32_3 %115 = OpLoad %102 
                                       f32_3 %116 = OpFAdd %114 %115 
                                       f32_4 %117 = OpLoad %9 
                                       f32_4 %118 = OpVectorShuffle %117 %116 4 5 6 3 
                                                      OpStore %9 %118 
                                       f32_4 %121 = OpLoad %49 
                                       f32_2 %122 = OpVectorShuffle %121 %121 2 2 
                                       f32_4 %123 = OpLoad %49 
                                       f32_2 %124 = OpVectorShuffle %123 %123 0 3 
                                       f32_2 %125 = OpFAdd %122 %124 
                                       f32_4 %126 = OpLoad vs_TEXCOORD0 
                                       f32_4 %127 = OpVectorShuffle %126 %125 0 1 4 5 
                                                      OpStore vs_TEXCOORD0 %127 
                                       f32_2 %130 = OpLoad %129 
                                       f32_4 %131 = OpLoad vs_TEXCOORD0 
                                       f32_4 %132 = OpVectorShuffle %131 %130 4 5 2 3 
                                                      OpStore vs_TEXCOORD0 %132 
                                       f32_3 %137 = OpLoad %136 
                                                      OpStore vs_TEXCOORD1 %137 
                                       f32_4 %138 = OpLoad %9 
                                       f32_3 %139 = OpVectorShuffle %138 %138 0 1 2 
                              Uniform f32_4* %140 = OpAccessChain %21 %24 %23 
                                       f32_4 %141 = OpLoad %140 
                                       f32_3 %142 = OpVectorShuffle %141 %141 0 1 2 
                                       f32_3 %143 = OpFNegate %142 
                                       f32_3 %144 = OpFAdd %139 %143 
                                       f32_4 %145 = OpLoad %49 
                                       f32_4 %146 = OpVectorShuffle %145 %144 4 5 6 3 
                                                      OpStore %49 %146 
                                       f32_4 %147 = OpLoad %9 
                                       f32_3 %148 = OpVectorShuffle %147 %147 0 1 2 
                              Uniform f32_4* %149 = OpAccessChain %21 %24 %23 
                                       f32_4 %150 = OpLoad %149 
                                       f32_3 %151 = OpVectorShuffle %150 %150 0 1 2 
                                       f32_3 %152 = OpFAdd %148 %151 
                                       f32_4 %153 = OpLoad %9 
                                       f32_4 %154 = OpVectorShuffle %153 %152 4 5 6 3 
                                                      OpStore %9 %154 
                                       f32_4 %155 = OpLoad %9 
                                       f32_3 %156 = OpVectorShuffle %155 %155 0 1 2 
                              Uniform f32_4* %157 = OpAccessChain %21 %24 %45 
                                       f32_4 %158 = OpLoad %157 
                                       f32_3 %159 = OpVectorShuffle %158 %158 0 1 2 
                                       f32_3 %160 = OpFAdd %156 %159 
                                       f32_4 %161 = OpLoad %9 
                                       f32_4 %162 = OpVectorShuffle %161 %160 4 5 6 3 
                                                      OpStore %9 %162 
                                       f32_4 %163 = OpLoad %49 
                                       f32_3 %164 = OpVectorShuffle %163 %163 0 1 2 
                              Uniform f32_4* %165 = OpAccessChain %21 %24 %45 
                                       f32_4 %166 = OpLoad %165 
                                       f32_3 %167 = OpVectorShuffle %166 %166 0 1 2 
                                       f32_3 %168 = OpFAdd %164 %167 
                                       f32_4 %169 = OpLoad %49 
                                       f32_4 %170 = OpVectorShuffle %169 %168 4 5 6 3 
                                                      OpStore %49 %170 
                                Private f32* %172 = OpAccessChain %49 %171 
                                         f32 %173 = OpLoad %172 
                                         f32 %174 = OpFNegate %173 
                                Private f32* %176 = OpAccessChain %49 %175 
                                                      OpStore %176 %174 
                                       f32_4 %178 = OpLoad %49 
                                       f32_3 %179 = OpVectorShuffle %178 %178 0 1 3 
                                                      OpStore vs_TEXCOORD2 %179 
                                Private f32* %180 = OpAccessChain %9 %171 
                                         f32 %181 = OpLoad %180 
                                         f32 %182 = OpFNegate %181 
                                Private f32* %183 = OpAccessChain %9 %175 
                                                      OpStore %183 %182 
                                       f32_4 %185 = OpLoad %9 
                                       f32_3 %186 = OpVectorShuffle %185 %185 0 1 3 
                                                      OpStore vs_TEXCOORD3 %186 
                                 Output f32* %188 = OpAccessChain %80 %29 %76 
                                         f32 %189 = OpLoad %188 
                                         f32 %190 = OpFNegate %189 
                                 Output f32* %191 = OpAccessChain %80 %29 %76 
                                                      OpStore %191 %190 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 413
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %21 %402 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpDecorate %12 DescriptorSet 12 
                                                      OpDecorate %12 Binding 12 
                                                      OpDecorate %16 DescriptorSet 16 
                                                      OpDecorate %16 Binding 16 
                                                      OpDecorate vs_TEXCOORD0 Location 21 
                                                      OpDecorate %57 ArrayStride 57 
                                                      OpDecorate %58 ArrayStride 58 
                                                      OpDecorate %60 ArrayStride 60 
                                                      OpMemberDecorate %61 0 Offset 61 
                                                      OpMemberDecorate %61 1 Offset 61 
                                                      OpMemberDecorate %61 2 Offset 61 
                                                      OpMemberDecorate %61 3 Offset 61 
                                                      OpMemberDecorate %61 4 Offset 61 
                                                      OpMemberDecorate %61 5 Offset 61 
                                                      OpDecorate %61 Block 
                                                      OpDecorate %63 DescriptorSet 63 
                                                      OpDecorate %63 Binding 63 
                                                      OpDecorate %384 DescriptorSet 384 
                                                      OpDecorate %384 Binding 384 
                                                      OpDecorate %386 DescriptorSet 386 
                                                      OpDecorate %386 Binding 386 
                                                      OpDecorate %402 Location 402 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypePointer UniformConstant %10 
         UniformConstant read_only Texture2D* %12 = OpVariable UniformConstant 
                                              %14 = OpTypeSampler 
                                              %15 = OpTypePointer UniformConstant %14 
                     UniformConstant sampler* %16 = OpVariable UniformConstant 
                                              %18 = OpTypeSampledImage %10 
                                              %20 = OpTypePointer Input %7 
                        Input f32_4* vs_TEXCOORD0 = OpVariable Input 
                                              %22 = OpTypeVector %6 2 
                                              %26 = OpTypeInt 32 0 
                                          u32 %27 = OpConstant 0 
                                              %29 = OpTypePointer Private %6 
                                          f32 %34 = OpConstant 3.674022E-40 
                                          u32 %36 = OpConstant 2 
                                              %42 = OpTypeVector %6 3 
                                          f32 %45 = OpConstant 3.674022E-40 
                                        f32_3 %46 = OpConstantComposite %45 %45 %45 
                                          f32 %48 = OpConstant 3.674022E-40 
                                        f32_3 %49 = OpConstantComposite %48 %48 %48 
                               Private f32_4* %53 = OpVariable Private 
                                          u32 %56 = OpConstant 4 
                                              %57 = OpTypeArray %7 %56 
                                              %58 = OpTypeArray %7 %56 
                                          u32 %59 = OpConstant 16 
                                              %60 = OpTypeArray %7 %59 
                                              %61 = OpTypeStruct %57 %58 %7 %7 %60 %7 
                                              %62 = OpTypePointer Uniform %61 
Uniform struct {f32_4[4]; f32_4[4]; f32_4; f32_4; f32_4[16]; f32_4;}* %63 = OpVariable Uniform 
                                              %64 = OpTypeInt 32 1 
                                          i32 %65 = OpConstant 0 
                                          i32 %66 = OpConstant 1 
                                              %67 = OpTypePointer Uniform %7 
                                          i32 %78 = OpConstant 2 
                                          i32 %87 = OpConstant 3 
                                              %98 = OpTypeBool 
                                              %99 = OpTypeVector %98 4 
                                             %100 = OpTypePointer Private %99 
                             Private bool_4* %101 = OpVariable Private 
                                             %108 = OpTypePointer Private %98 
                                         f32 %111 = OpConstant 3.674022E-40 
                                         u32 %114 = OpConstant 1 
                                         u32 %123 = OpConstant 3 
                             Private bool_4* %128 = OpVariable Private 
                              Private f32_4* %135 = OpVariable Private 
                                         i32 %181 = OpConstant 4 
                                         i32 %182 = OpConstant 5 
                                         i32 %200 = OpConstant 6 
                                         i32 %212 = OpConstant 7 
                                             %231 = OpTypePointer Private %42 
                              Private f32_3* %232 = OpVariable Private 
                                         i32 %274 = OpConstant 9 
                                         i32 %279 = OpConstant 8 
                                         i32 %288 = OpConstant 10 
                                         i32 %297 = OpConstant 11 
                                         i32 %317 = OpConstant 13 
                                         i32 %322 = OpConstant 12 
                                         i32 %331 = OpConstant 14 
                                         i32 %342 = OpConstant 15 
                                Private f32* %364 = OpVariable Private 
                                       f32_4 %366 = OpConstantComposite %34 %34 %34 %34 
                                Private f32* %368 = OpVariable Private 
                                             %376 = OpTypePointer Function %42 
        UniformConstant read_only Texture2D* %384 = OpVariable UniformConstant 
                    UniformConstant sampler* %386 = OpVariable UniformConstant 
                                             %388 = OpTypeImage %6 Dim2D 1 0 0 1 Unknown 
                                             %389 = OpTypeSampledImage %388 
                                Private f32* %395 = OpVariable Private 
                                             %396 = OpTypePointer Uniform %6 
                                             %401 = OpTypePointer Output %7 
                               Output f32_4* %402 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %377 = OpVariable Function 
                          read_only Texture2D %13 = OpLoad %12 
                                      sampler %17 = OpLoad %16 
                   read_only Texture2DSampled %19 = OpSampledImage %13 %17 
                                        f32_4 %23 = OpLoad vs_TEXCOORD0 
                                        f32_2 %24 = OpVectorShuffle %23 %23 0 1 
                                        f32_4 %25 = OpImageSampleImplicitLod %19 %24 
                                          f32 %28 = OpCompositeExtract %25 0 
                                 Private f32* %30 = OpAccessChain %9 %27 
                                                      OpStore %30 %28 
                                 Private f32* %31 = OpAccessChain %9 %27 
                                          f32 %32 = OpLoad %31 
                                          f32 %33 = OpFNegate %32 
                                          f32 %35 = OpFAdd %33 %34 
                                 Private f32* %37 = OpAccessChain %9 %36 
                                                      OpStore %37 %35 
                                        f32_4 %38 = OpLoad vs_TEXCOORD0 
                                        f32_2 %39 = OpVectorShuffle %38 %38 2 3 
                                        f32_4 %40 = OpLoad %9 
                                        f32_4 %41 = OpVectorShuffle %40 %39 4 5 2 3 
                                                      OpStore %9 %41 
                                        f32_4 %43 = OpLoad %9 
                                        f32_3 %44 = OpVectorShuffle %43 %43 0 1 2 
                                        f32_3 %47 = OpFMul %44 %46 
                                        f32_3 %50 = OpFAdd %47 %49 
                                        f32_4 %51 = OpLoad %9 
                                        f32_4 %52 = OpVectorShuffle %51 %50 4 5 6 3 
                                                      OpStore %9 %52 
                                        f32_4 %54 = OpLoad %9 
                                        f32_4 %55 = OpVectorShuffle %54 %54 1 1 1 1 
                               Uniform f32_4* %68 = OpAccessChain %63 %65 %66 
                                        f32_4 %69 = OpLoad %68 
                                        f32_4 %70 = OpFMul %55 %69 
                                                      OpStore %53 %70 
                               Uniform f32_4* %71 = OpAccessChain %63 %65 %65 
                                        f32_4 %72 = OpLoad %71 
                                        f32_4 %73 = OpLoad %9 
                                        f32_4 %74 = OpVectorShuffle %73 %73 0 0 0 0 
                                        f32_4 %75 = OpFMul %72 %74 
                                        f32_4 %76 = OpLoad %53 
                                        f32_4 %77 = OpFAdd %75 %76 
                                                      OpStore %53 %77 
                               Uniform f32_4* %79 = OpAccessChain %63 %65 %78 
                                        f32_4 %80 = OpLoad %79 
                                        f32_4 %81 = OpLoad %9 
                                        f32_4 %82 = OpVectorShuffle %81 %81 2 2 2 2 
                                        f32_4 %83 = OpFMul %80 %82 
                                        f32_4 %84 = OpLoad %53 
                                        f32_4 %85 = OpFAdd %83 %84 
                                                      OpStore %9 %85 
                                        f32_4 %86 = OpLoad %9 
                               Uniform f32_4* %88 = OpAccessChain %63 %65 %87 
                                        f32_4 %89 = OpLoad %88 
                                        f32_4 %90 = OpFAdd %86 %89 
                                                      OpStore %9 %90 
                                        f32_4 %91 = OpLoad %9 
                                        f32_3 %92 = OpVectorShuffle %91 %91 0 1 2 
                                        f32_4 %93 = OpLoad %9 
                                        f32_3 %94 = OpVectorShuffle %93 %93 3 3 3 
                                        f32_3 %95 = OpFDiv %92 %94 
                                        f32_4 %96 = OpLoad %9 
                                        f32_4 %97 = OpVectorShuffle %96 %95 4 5 6 3 
                                                      OpStore %9 %97 
                                       f32_4 %102 = OpLoad %9 
                                       f32_4 %103 = OpVectorShuffle %102 %102 2 2 2 2 
                                       f32_4 %104 = OpFNegate %103 
                              Uniform f32_4* %105 = OpAccessChain %63 %78 
                                       f32_4 %106 = OpLoad %105 
                                      bool_4 %107 = OpFOrdGreaterThanEqual %104 %106 
                                                      OpStore %101 %107 
                               Private bool* %109 = OpAccessChain %101 %27 
                                        bool %110 = OpLoad %109 
                                         f32 %112 = OpSelect %110 %34 %111 
                                Private f32* %113 = OpAccessChain %53 %27 
                                                      OpStore %113 %112 
                               Private bool* %115 = OpAccessChain %101 %114 
                                        bool %116 = OpLoad %115 
                                         f32 %117 = OpSelect %116 %34 %111 
                                Private f32* %118 = OpAccessChain %53 %114 
                                                      OpStore %118 %117 
                               Private bool* %119 = OpAccessChain %101 %36 
                                        bool %120 = OpLoad %119 
                                         f32 %121 = OpSelect %120 %34 %111 
                                Private f32* %122 = OpAccessChain %53 %36 
                                                      OpStore %122 %121 
                               Private bool* %124 = OpAccessChain %101 %123 
                                        bool %125 = OpLoad %124 
                                         f32 %126 = OpSelect %125 %34 %111 
                                Private f32* %127 = OpAccessChain %53 %123 
                                                      OpStore %127 %126 
                                       f32_4 %129 = OpLoad %9 
                                       f32_4 %130 = OpVectorShuffle %129 %129 2 2 2 2 
                                       f32_4 %131 = OpFNegate %130 
                              Uniform f32_4* %132 = OpAccessChain %63 %87 
                                       f32_4 %133 = OpLoad %132 
                                      bool_4 %134 = OpFOrdLessThan %131 %133 
                                                      OpStore %128 %134 
                               Private bool* %136 = OpAccessChain %128 %27 
                                        bool %137 = OpLoad %136 
                                         f32 %138 = OpSelect %137 %34 %111 
                                Private f32* %139 = OpAccessChain %135 %27 
                                                      OpStore %139 %138 
                               Private bool* %140 = OpAccessChain %128 %114 
                                        bool %141 = OpLoad %140 
                                         f32 %142 = OpSelect %141 %34 %111 
                                Private f32* %143 = OpAccessChain %135 %114 
                                                      OpStore %143 %142 
                               Private bool* %144 = OpAccessChain %128 %36 
                                        bool %145 = OpLoad %144 
                                         f32 %146 = OpSelect %145 %34 %111 
                                Private f32* %147 = OpAccessChain %135 %36 
                                                      OpStore %147 %146 
                               Private bool* %148 = OpAccessChain %128 %123 
                                        bool %149 = OpLoad %148 
                                         f32 %150 = OpSelect %149 %34 %111 
                                Private f32* %151 = OpAccessChain %135 %123 
                                                      OpStore %151 %150 
                                       f32_4 %152 = OpLoad %53 
                                       f32_4 %153 = OpLoad %135 
                                       f32_4 %154 = OpFMul %152 %153 
                                                      OpStore %53 %154 
                                       f32_4 %155 = OpLoad %9 
                                       f32_4 %156 = OpVectorShuffle %155 %155 1 1 1 1 
                              Uniform f32_4* %157 = OpAccessChain %63 %66 %66 
                                       f32_4 %158 = OpLoad %157 
                                       f32_4 %159 = OpFMul %156 %158 
                                                      OpStore %135 %159 
                              Uniform f32_4* %160 = OpAccessChain %63 %66 %65 
                                       f32_4 %161 = OpLoad %160 
                                       f32_4 %162 = OpLoad %9 
                                       f32_4 %163 = OpVectorShuffle %162 %162 0 0 0 0 
                                       f32_4 %164 = OpFMul %161 %163 
                                       f32_4 %165 = OpLoad %135 
                                       f32_4 %166 = OpFAdd %164 %165 
                                                      OpStore %135 %166 
                              Uniform f32_4* %167 = OpAccessChain %63 %66 %78 
                                       f32_4 %168 = OpLoad %167 
                                       f32_4 %169 = OpLoad %9 
                                       f32_4 %170 = OpVectorShuffle %169 %169 2 2 2 2 
                                       f32_4 %171 = OpFNegate %170 
                                       f32_4 %172 = OpFMul %168 %171 
                                       f32_4 %173 = OpLoad %135 
                                       f32_4 %174 = OpFAdd %172 %173 
                                                      OpStore %9 %174 
                                       f32_4 %175 = OpLoad %9 
                              Uniform f32_4* %176 = OpAccessChain %63 %66 %87 
                                       f32_4 %177 = OpLoad %176 
                                       f32_4 %178 = OpFAdd %175 %177 
                                                      OpStore %9 %178 
                                       f32_4 %179 = OpLoad %9 
                                       f32_3 %180 = OpVectorShuffle %179 %179 1 1 1 
                              Uniform f32_4* %183 = OpAccessChain %63 %181 %182 
                                       f32_4 %184 = OpLoad %183 
                                       f32_3 %185 = OpVectorShuffle %184 %184 0 1 2 
                                       f32_3 %186 = OpFMul %180 %185 
                                       f32_4 %187 = OpLoad %135 
                                       f32_4 %188 = OpVectorShuffle %187 %186 4 5 6 3 
                                                      OpStore %135 %188 
                              Uniform f32_4* %189 = OpAccessChain %63 %181 %181 
                                       f32_4 %190 = OpLoad %189 
                                       f32_3 %191 = OpVectorShuffle %190 %190 0 1 2 
                                       f32_4 %192 = OpLoad %9 
                                       f32_3 %193 = OpVectorShuffle %192 %192 0 0 0 
                                       f32_3 %194 = OpFMul %191 %193 
                                       f32_4 %195 = OpLoad %135 
                                       f32_3 %196 = OpVectorShuffle %195 %195 0 1 2 
                                       f32_3 %197 = OpFAdd %194 %196 
                                       f32_4 %198 = OpLoad %135 
                                       f32_4 %199 = OpVectorShuffle %198 %197 4 5 6 3 
                                                      OpStore %135 %199 
                              Uniform f32_4* %201 = OpAccessChain %63 %181 %200 
                                       f32_4 %202 = OpLoad %201 
                                       f32_3 %203 = OpVectorShuffle %202 %202 0 1 2 
                                       f32_4 %204 = OpLoad %9 
                                       f32_3 %205 = OpVectorShuffle %204 %204 2 2 2 
                                       f32_3 %206 = OpFMul %203 %205 
                                       f32_4 %207 = OpLoad %135 
                                       f32_3 %208 = OpVectorShuffle %207 %207 0 1 2 
                                       f32_3 %209 = OpFAdd %206 %208 
                                       f32_4 %210 = OpLoad %135 
                                       f32_4 %211 = OpVectorShuffle %210 %209 4 5 6 3 
                                                      OpStore %135 %211 
                              Uniform f32_4* %213 = OpAccessChain %63 %181 %212 
                                       f32_4 %214 = OpLoad %213 
                                       f32_3 %215 = OpVectorShuffle %214 %214 0 1 2 
                                       f32_4 %216 = OpLoad %9 
                                       f32_3 %217 = OpVectorShuffle %216 %216 3 3 3 
                                       f32_3 %218 = OpFMul %215 %217 
                                       f32_4 %219 = OpLoad %135 
                                       f32_3 %220 = OpVectorShuffle %219 %219 0 1 2 
                                       f32_3 %221 = OpFAdd %218 %220 
                                       f32_4 %222 = OpLoad %135 
                                       f32_4 %223 = OpVectorShuffle %222 %221 4 5 6 3 
                                                      OpStore %135 %223 
                                       f32_4 %224 = OpLoad %53 
                                       f32_3 %225 = OpVectorShuffle %224 %224 1 1 1 
                                       f32_4 %226 = OpLoad %135 
                                       f32_3 %227 = OpVectorShuffle %226 %226 0 1 2 
                                       f32_3 %228 = OpFMul %225 %227 
                                       f32_4 %229 = OpLoad %135 
                                       f32_4 %230 = OpVectorShuffle %229 %228 4 5 6 3 
                                                      OpStore %135 %230 
                                       f32_4 %233 = OpLoad %9 
                                       f32_3 %234 = OpVectorShuffle %233 %233 1 1 1 
                              Uniform f32_4* %235 = OpAccessChain %63 %181 %66 
                                       f32_4 %236 = OpLoad %235 
                                       f32_3 %237 = OpVectorShuffle %236 %236 0 1 2 
                                       f32_3 %238 = OpFMul %234 %237 
                                                      OpStore %232 %238 
                              Uniform f32_4* %239 = OpAccessChain %63 %181 %65 
                                       f32_4 %240 = OpLoad %239 
                                       f32_3 %241 = OpVectorShuffle %240 %240 0 1 2 
                                       f32_4 %242 = OpLoad %9 
                                       f32_3 %243 = OpVectorShuffle %242 %242 0 0 0 
                                       f32_3 %244 = OpFMul %241 %243 
                                       f32_3 %245 = OpLoad %232 
                                       f32_3 %246 = OpFAdd %244 %245 
                                                      OpStore %232 %246 
                              Uniform f32_4* %247 = OpAccessChain %63 %181 %78 
                                       f32_4 %248 = OpLoad %247 
                                       f32_3 %249 = OpVectorShuffle %248 %248 0 1 2 
                                       f32_4 %250 = OpLoad %9 
                                       f32_3 %251 = OpVectorShuffle %250 %250 2 2 2 
                                       f32_3 %252 = OpFMul %249 %251 
                                       f32_3 %253 = OpLoad %232 
                                       f32_3 %254 = OpFAdd %252 %253 
                                                      OpStore %232 %254 
                              Uniform f32_4* %255 = OpAccessChain %63 %181 %87 
                                       f32_4 %256 = OpLoad %255 
                                       f32_3 %257 = OpVectorShuffle %256 %256 0 1 2 
                                       f32_4 %258 = OpLoad %9 
                                       f32_3 %259 = OpVectorShuffle %258 %258 3 3 3 
                                       f32_3 %260 = OpFMul %257 %259 
                                       f32_3 %261 = OpLoad %232 
                                       f32_3 %262 = OpFAdd %260 %261 
                                                      OpStore %232 %262 
                                       f32_3 %263 = OpLoad %232 
                                       f32_4 %264 = OpLoad %53 
                                       f32_3 %265 = OpVectorShuffle %264 %264 0 0 0 
                                       f32_3 %266 = OpFMul %263 %265 
                                       f32_4 %267 = OpLoad %135 
                                       f32_3 %268 = OpVectorShuffle %267 %267 0 1 2 
                                       f32_3 %269 = OpFAdd %266 %268 
                                       f32_4 %270 = OpLoad %135 
                                       f32_4 %271 = OpVectorShuffle %270 %269 4 5 6 3 
                                                      OpStore %135 %271 
                                       f32_4 %272 = OpLoad %9 
                                       f32_3 %273 = OpVectorShuffle %272 %272 1 1 1 
                              Uniform f32_4* %275 = OpAccessChain %63 %181 %274 
                                       f32_4 %276 = OpLoad %275 
                                       f32_3 %277 = OpVectorShuffle %276 %276 0 1 2 
                                       f32_3 %278 = OpFMul %273 %277 
                                                      OpStore %232 %278 
                              Uniform f32_4* %280 = OpAccessChain %63 %181 %279 
                                       f32_4 %281 = OpLoad %280 
                                       f32_3 %282 = OpVectorShuffle %281 %281 0 1 2 
                                       f32_4 %283 = OpLoad %9 
                                       f32_3 %284 = OpVectorShuffle %283 %283 0 0 0 
                                       f32_3 %285 = OpFMul %282 %284 
                                       f32_3 %286 = OpLoad %232 
                                       f32_3 %287 = OpFAdd %285 %286 
                                                      OpStore %232 %287 
                              Uniform f32_4* %289 = OpAccessChain %63 %181 %288 
                                       f32_4 %290 = OpLoad %289 
                                       f32_3 %291 = OpVectorShuffle %290 %290 0 1 2 
                                       f32_4 %292 = OpLoad %9 
                                       f32_3 %293 = OpVectorShuffle %292 %292 2 2 2 
                                       f32_3 %294 = OpFMul %291 %293 
                                       f32_3 %295 = OpLoad %232 
                                       f32_3 %296 = OpFAdd %294 %295 
                                                      OpStore %232 %296 
                              Uniform f32_4* %298 = OpAccessChain %63 %181 %297 
                                       f32_4 %299 = OpLoad %298 
                                       f32_3 %300 = OpVectorShuffle %299 %299 0 1 2 
                                       f32_4 %301 = OpLoad %9 
                                       f32_3 %302 = OpVectorShuffle %301 %301 3 3 3 
                                       f32_3 %303 = OpFMul %300 %302 
                                       f32_3 %304 = OpLoad %232 
                                       f32_3 %305 = OpFAdd %303 %304 
                                                      OpStore %232 %305 
                                       f32_3 %306 = OpLoad %232 
                                       f32_4 %307 = OpLoad %53 
                                       f32_3 %308 = OpVectorShuffle %307 %307 2 2 2 
                                       f32_3 %309 = OpFMul %306 %308 
                                       f32_4 %310 = OpLoad %135 
                                       f32_3 %311 = OpVectorShuffle %310 %310 0 1 2 
                                       f32_3 %312 = OpFAdd %309 %311 
                                       f32_4 %313 = OpLoad %135 
                                       f32_4 %314 = OpVectorShuffle %313 %312 4 5 6 3 
                                                      OpStore %135 %314 
                                       f32_4 %315 = OpLoad %9 
                                       f32_3 %316 = OpVectorShuffle %315 %315 1 1 1 
                              Uniform f32_4* %318 = OpAccessChain %63 %181 %317 
                                       f32_4 %319 = OpLoad %318 
                                       f32_3 %320 = OpVectorShuffle %319 %319 0 1 2 
                                       f32_3 %321 = OpFMul %316 %320 
                                                      OpStore %232 %321 
                              Uniform f32_4* %323 = OpAccessChain %63 %181 %322 
                                       f32_4 %324 = OpLoad %323 
                                       f32_3 %325 = OpVectorShuffle %324 %324 0 1 2 
                                       f32_4 %326 = OpLoad %9 
                                       f32_3 %327 = OpVectorShuffle %326 %326 0 0 0 
                                       f32_3 %328 = OpFMul %325 %327 
                                       f32_3 %329 = OpLoad %232 
                                       f32_3 %330 = OpFAdd %328 %329 
                                                      OpStore %232 %330 
                              Uniform f32_4* %332 = OpAccessChain %63 %181 %331 
                                       f32_4 %333 = OpLoad %332 
                                       f32_3 %334 = OpVectorShuffle %333 %333 0 1 2 
                                       f32_4 %335 = OpLoad %9 
                                       f32_3 %336 = OpVectorShuffle %335 %335 2 2 2 
                                       f32_3 %337 = OpFMul %334 %336 
                                       f32_3 %338 = OpLoad %232 
                                       f32_3 %339 = OpFAdd %337 %338 
                                       f32_4 %340 = OpLoad %9 
                                       f32_4 %341 = OpVectorShuffle %340 %339 4 5 6 3 
                                                      OpStore %9 %341 
                              Uniform f32_4* %343 = OpAccessChain %63 %181 %342 
                                       f32_4 %344 = OpLoad %343 
                                       f32_3 %345 = OpVectorShuffle %344 %344 0 1 2 
                                       f32_4 %346 = OpLoad %9 
                                       f32_3 %347 = OpVectorShuffle %346 %346 3 3 3 
                                       f32_3 %348 = OpFMul %345 %347 
                                       f32_4 %349 = OpLoad %9 
                                       f32_3 %350 = OpVectorShuffle %349 %349 0 1 2 
                                       f32_3 %351 = OpFAdd %348 %350 
                                       f32_4 %352 = OpLoad %9 
                                       f32_4 %353 = OpVectorShuffle %352 %351 4 5 6 3 
                                                      OpStore %9 %353 
                                       f32_4 %354 = OpLoad %9 
                                       f32_3 %355 = OpVectorShuffle %354 %354 0 1 2 
                                       f32_4 %356 = OpLoad %53 
                                       f32_3 %357 = OpVectorShuffle %356 %356 3 3 3 
                                       f32_3 %358 = OpFMul %355 %357 
                                       f32_4 %359 = OpLoad %135 
                                       f32_3 %360 = OpVectorShuffle %359 %359 0 1 2 
                                       f32_3 %361 = OpFAdd %358 %360 
                                       f32_4 %362 = OpLoad %9 
                                       f32_4 %363 = OpVectorShuffle %362 %361 4 5 6 3 
                                                      OpStore %9 %363 
                                       f32_4 %365 = OpLoad %53 
                                         f32 %367 = OpDot %365 %366 
                                                      OpStore %364 %367 
                                         f32 %369 = OpLoad %364 
                                         f32 %370 = OpFNegate %369 
                                Private f32* %371 = OpAccessChain %9 %36 
                                         f32 %372 = OpLoad %371 
                                         f32 %373 = OpFAdd %370 %372 
                                                      OpStore %368 %373 
                                         f32 %374 = OpLoad %368 
                                         f32 %375 = OpFAdd %374 %34 
                                                      OpStore %368 %375 
                                       f32_4 %378 = OpLoad %9 
                                       f32_2 %379 = OpVectorShuffle %378 %378 0 1 
                                         f32 %380 = OpLoad %368 
                                         f32 %381 = OpCompositeExtract %379 0 
                                         f32 %382 = OpCompositeExtract %379 1 
                                       f32_3 %383 = OpCompositeConstruct %381 %382 %380 
                                                      OpStore %377 %383 
                         read_only Texture2D %385 = OpLoad %384 
                                     sampler %387 = OpLoad %386 
                  read_only Texture2DSampled %390 = OpSampledImage %385 %387 
                                       f32_3 %391 = OpLoad %377 
                                         f32 %392 = OpCompositeExtract %391 2 
                                         f32 %393 = OpImageSampleDrefExplicitLod %390 %391 %392 Lod %6 
                                Private f32* %394 = OpAccessChain %9 %27 
                                                      OpStore %394 %393 
                                Uniform f32* %397 = OpAccessChain %63 %182 %27 
                                         f32 %398 = OpLoad %397 
                                         f32 %399 = OpFNegate %398 
                                         f32 %400 = OpFAdd %399 %34 
                                                      OpStore %395 %400 
                                       f32_4 %403 = OpLoad %9 
                                       f32_4 %404 = OpVectorShuffle %403 %403 0 0 0 0 
                                         f32 %405 = OpLoad %395 
                                       f32_4 %406 = OpCompositeConstruct %405 %405 %405 %405 
                                       f32_4 %407 = OpFMul %404 %406 
                              Uniform f32_4* %408 = OpAccessChain %63 %182 
                                       f32_4 %409 = OpLoad %408 
                                       f32_4 %410 = OpVectorShuffle %409 %409 0 0 0 0 
                                       f32_4 %411 = OpFAdd %407 %410 
                                                      OpStore %402 %411 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "SHADOWS_SPLIT_SPHERES" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "SHADOWS_SPLIT_SPHERES" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraInvProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in  vec4 in_POSITION0;
in  vec2 in_TEXCOORD0;
in  vec3 in_TEXCOORD1;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_CameraInvProjection[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_CameraInvProjection[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    vs_TEXCOORD0.zw = u_xlat1.zz + u_xlat1.xw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = in_TEXCOORD1.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-hlslcc_mtx4x4unity_CameraInvProjection[2].xyz);
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[2].xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;
    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;
    u_xlat1.w = (-u_xlat1.z);
    vs_TEXCOORD2.xyz = u_xlat1.xyw;
    u_xlat0.w = (-u_xlat0.z);
    vs_TEXCOORD3.xyz = u_xlat0.xyw;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_CameraInvProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	vec4 _LightShadowData;
UNITY_LOCATION(0) uniform  sampler2D _CameraDepthTexture;
UNITY_LOCATION(1) uniform  sampler2D _ShadowMapTexture;
UNITY_LOCATION(2) uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
in  vec4 vs_TEXCOORD0;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
bvec4 u_xlatb1;
vec3 u_xlat2;
vec3 u_xlat3;
float u_xlat4;
vec3 u_xlat5;
void main()
{
    u_xlat0 = texture(_CameraDepthTexture, vs_TEXCOORD0.xy).yzxw;
    u_xlat0.xy = vs_TEXCOORD0.zw;
    u_xlat0.xyz = u_xlat0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_CameraInvProjection[1];
    u_xlat1 = hlslcc_mtx4x4unity_CameraInvProjection[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_CameraInvProjection[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_CameraInvProjection[3];
    u_xlat0.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_CameraToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_CameraToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_CameraToWorld[2] * (-u_xlat0.zzzz) + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_CameraToWorld[3];
    u_xlat1.xyz = u_xlat0.xyz + (-unity_ShadowSplitSpheres[0].xyz);
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat2.xyz = u_xlat0.xyz + (-unity_ShadowSplitSpheres[1].xyz);
    u_xlat1.y = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat2.xyz = u_xlat0.xyz + (-unity_ShadowSplitSpheres[2].xyz);
    u_xlat1.z = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat2.xyz = u_xlat0.xyz + (-unity_ShadowSplitSpheres[3].xyz);
    u_xlat1.w = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlatb1 = lessThan(u_xlat1, unity_ShadowSplitSqRadii);
    u_xlat2.x = (u_xlatb1.x) ? float(-1.0) : float(-0.0);
    u_xlat2.y = (u_xlatb1.y) ? float(-1.0) : float(-0.0);
    u_xlat2.z = (u_xlatb1.z) ? float(-1.0) : float(-0.0);
    u_xlat1.x = u_xlatb1.x ? float(1.0) : 0.0;
    u_xlat1.y = u_xlatb1.y ? float(1.0) : 0.0;
    u_xlat1.z = u_xlatb1.z ? float(1.0) : 0.0;
    u_xlat1.w = u_xlatb1.w ? float(1.0) : 0.0;
;
    u_xlat5.xyz = u_xlat2.xyz + u_xlat1.yzw;
    u_xlat5.xyz = max(u_xlat5.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[5].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[4].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[6].xyz * u_xlat0.zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[7].xyz * u_xlat0.www + u_xlat2.xyz;
    u_xlat2.xyz = u_xlat5.xxx * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * u_xlat0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * u_xlat0.zzz + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[3].xyz * u_xlat0.www + u_xlat3.xyz;
    u_xlat2.xyz = u_xlat3.xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat3.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[9].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[8].xyz * u_xlat0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[10].xyz * u_xlat0.zzz + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[11].xyz * u_xlat0.www + u_xlat3.xyz;
    u_xlat1.xyz = u_xlat3.xyz * u_xlat5.yyy + u_xlat2.xyz;
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[13].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[12].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[14].xyz * u_xlat0.zzz + u_xlat2.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[15].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat5.zzz + u_xlat1.xyz;
    vec3 txVec0 = vec3(u_xlat0.xy,u_xlat0.z);
    u_xlat0.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
    u_xlat4 = (-_LightShadowData.x) + 1.0;
    SV_Target0 = u_xlat0.xxxx * vec4(u_xlat4) + _LightShadowData.xxxx;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "SHADOWS_SPLIT_SPHERES" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 193
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %80 %119 %129 %134 %136 %177 %184 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpMemberDecorate %78 0 BuiltIn 78 
                                                      OpMemberDecorate %78 1 BuiltIn 78 
                                                      OpMemberDecorate %78 2 BuiltIn 78 
                                                      OpDecorate %78 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 119 
                                                      OpDecorate %129 Location 129 
                                                      OpDecorate vs_TEXCOORD1 Location 134 
                                                      OpDecorate %136 Location 136 
                                                      OpDecorate vs_TEXCOORD2 Location 177 
                                                      OpDecorate vs_TEXCOORD3 Location 184 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %16 %17 %18 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4];}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 2 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %29 = OpConstant 0 
                                          i32 %45 = OpConstant 3 
                               Private f32_4* %49 = OpVariable Private 
                                          u32 %76 = OpConstant 1 
                                              %77 = OpTypeArray %6 %76 
                                              %78 = OpTypeStruct %7 %6 %77 
                                              %79 = OpTypePointer Output %78 
         Output struct {f32_4; f32; f32[1];}* %80 = OpVariable Output 
                                              %82 = OpTypePointer Output %7 
                                              %84 = OpTypePointer Private %6 
                                          u32 %87 = OpConstant 0 
                                              %88 = OpTypePointer Uniform %6 
                                              %93 = OpTypeVector %6 3 
                                          f32 %96 = OpConstant 3.674022E-40 
                                        f32_3 %97 = OpConstantComposite %96 %96 %96 
                                             %101 = OpTypePointer Private %93 
                              Private f32_3* %102 = OpVariable Private 
                       Output f32_4* vs_TEXCOORD0 = OpVariable Output 
                                             %120 = OpTypeVector %6 2 
                                             %128 = OpTypePointer Input %120 
                                Input f32_2* %129 = OpVariable Input 
                                             %133 = OpTypePointer Output %93 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                                             %135 = OpTypePointer Input %93 
                                Input f32_3* %136 = OpVariable Input 
                                         u32 %171 = OpConstant 2 
                                         u32 %175 = OpConstant 3 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                       Output f32_3* vs_TEXCOORD3 = OpVariable Output 
                                             %187 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %30 = OpAccessChain %21 %23 %29 
                                        f32_4 %31 = OpLoad %30 
                                        f32_4 %32 = OpLoad %11 
                                        f32_4 %33 = OpVectorShuffle %32 %32 0 0 0 0 
                                        f32_4 %34 = OpFMul %31 %33 
                                        f32_4 %35 = OpLoad %9 
                                        f32_4 %36 = OpFAdd %34 %35 
                                                      OpStore %9 %36 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %23 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %44 = OpLoad %9 
                               Uniform f32_4* %46 = OpAccessChain %21 %23 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_4 %48 = OpFAdd %44 %47 
                                                      OpStore %9 %48 
                                        f32_4 %50 = OpLoad %9 
                                        f32_4 %51 = OpVectorShuffle %50 %50 1 1 1 1 
                               Uniform f32_4* %52 = OpAccessChain %21 %45 %24 
                                        f32_4 %53 = OpLoad %52 
                                        f32_4 %54 = OpFMul %51 %53 
                                                      OpStore %49 %54 
                               Uniform f32_4* %55 = OpAccessChain %21 %45 %29 
                                        f32_4 %56 = OpLoad %55 
                                        f32_4 %57 = OpLoad %9 
                                        f32_4 %58 = OpVectorShuffle %57 %57 0 0 0 0 
                                        f32_4 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %49 
                                        f32_4 %61 = OpFAdd %59 %60 
                                                      OpStore %49 %61 
                               Uniform f32_4* %62 = OpAccessChain %21 %45 %23 
                                        f32_4 %63 = OpLoad %62 
                                        f32_4 %64 = OpLoad %9 
                                        f32_4 %65 = OpVectorShuffle %64 %64 2 2 2 2 
                                        f32_4 %66 = OpFMul %63 %65 
                                        f32_4 %67 = OpLoad %49 
                                        f32_4 %68 = OpFAdd %66 %67 
                                                      OpStore %49 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %45 %45 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %9 
                                        f32_4 %72 = OpVectorShuffle %71 %71 3 3 3 3 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %49 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %9 %75 
                                        f32_4 %81 = OpLoad %9 
                                Output f32_4* %83 = OpAccessChain %80 %29 
                                                      OpStore %83 %81 
                                 Private f32* %85 = OpAccessChain %9 %76 
                                          f32 %86 = OpLoad %85 
                                 Uniform f32* %89 = OpAccessChain %21 %29 %87 
                                          f32 %90 = OpLoad %89 
                                          f32 %91 = OpFMul %86 %90 
                                 Private f32* %92 = OpAccessChain %9 %76 
                                                      OpStore %92 %91 
                                        f32_4 %94 = OpLoad %9 
                                        f32_3 %95 = OpVectorShuffle %94 %94 0 3 1 
                                        f32_3 %98 = OpFMul %95 %97 
                                        f32_4 %99 = OpLoad %49 
                                       f32_4 %100 = OpVectorShuffle %99 %98 4 1 5 6 
                                                      OpStore %49 %100 
                                       f32_4 %103 = OpLoad %9 
                                       f32_3 %104 = OpVectorShuffle %103 %103 1 1 1 
                              Uniform f32_4* %105 = OpAccessChain %21 %24 %24 
                                       f32_4 %106 = OpLoad %105 
                                       f32_3 %107 = OpVectorShuffle %106 %106 0 1 2 
                                       f32_3 %108 = OpFMul %104 %107 
                                                      OpStore %102 %108 
                              Uniform f32_4* %109 = OpAccessChain %21 %24 %29 
                                       f32_4 %110 = OpLoad %109 
                                       f32_3 %111 = OpVectorShuffle %110 %110 0 1 2 
                                       f32_4 %112 = OpLoad %9 
                                       f32_3 %113 = OpVectorShuffle %112 %112 0 0 0 
                                       f32_3 %114 = OpFMul %111 %113 
                                       f32_3 %115 = OpLoad %102 
                                       f32_3 %116 = OpFAdd %114 %115 
                                       f32_4 %117 = OpLoad %9 
                                       f32_4 %118 = OpVectorShuffle %117 %116 4 5 6 3 
                                                      OpStore %9 %118 
                                       f32_4 %121 = OpLoad %49 
                                       f32_2 %122 = OpVectorShuffle %121 %121 2 2 
                                       f32_4 %123 = OpLoad %49 
                                       f32_2 %124 = OpVectorShuffle %123 %123 0 3 
                                       f32_2 %125 = OpFAdd %122 %124 
                                       f32_4 %126 = OpLoad vs_TEXCOORD0 
                                       f32_4 %127 = OpVectorShuffle %126 %125 0 1 4 5 
                                                      OpStore vs_TEXCOORD0 %127 
                                       f32_2 %130 = OpLoad %129 
                                       f32_4 %131 = OpLoad vs_TEXCOORD0 
                                       f32_4 %132 = OpVectorShuffle %131 %130 4 5 2 3 
                                                      OpStore vs_TEXCOORD0 %132 
                                       f32_3 %137 = OpLoad %136 
                                                      OpStore vs_TEXCOORD1 %137 
                                       f32_4 %138 = OpLoad %9 
                                       f32_3 %139 = OpVectorShuffle %138 %138 0 1 2 
                              Uniform f32_4* %140 = OpAccessChain %21 %24 %23 
                                       f32_4 %141 = OpLoad %140 
                                       f32_3 %142 = OpVectorShuffle %141 %141 0 1 2 
                                       f32_3 %143 = OpFNegate %142 
                                       f32_3 %144 = OpFAdd %139 %143 
                                       f32_4 %145 = OpLoad %49 
                                       f32_4 %146 = OpVectorShuffle %145 %144 4 5 6 3 
                                                      OpStore %49 %146 
                                       f32_4 %147 = OpLoad %9 
                                       f32_3 %148 = OpVectorShuffle %147 %147 0 1 2 
                              Uniform f32_4* %149 = OpAccessChain %21 %24 %23 
                                       f32_4 %150 = OpLoad %149 
                                       f32_3 %151 = OpVectorShuffle %150 %150 0 1 2 
                                       f32_3 %152 = OpFAdd %148 %151 
                                       f32_4 %153 = OpLoad %9 
                                       f32_4 %154 = OpVectorShuffle %153 %152 4 5 6 3 
                                                      OpStore %9 %154 
                                       f32_4 %155 = OpLoad %9 
                                       f32_3 %156 = OpVectorShuffle %155 %155 0 1 2 
                              Uniform f32_4* %157 = OpAccessChain %21 %24 %45 
                                       f32_4 %158 = OpLoad %157 
                                       f32_3 %159 = OpVectorShuffle %158 %158 0 1 2 
                                       f32_3 %160 = OpFAdd %156 %159 
                                       f32_4 %161 = OpLoad %9 
                                       f32_4 %162 = OpVectorShuffle %161 %160 4 5 6 3 
                                                      OpStore %9 %162 
                                       f32_4 %163 = OpLoad %49 
                                       f32_3 %164 = OpVectorShuffle %163 %163 0 1 2 
                              Uniform f32_4* %165 = OpAccessChain %21 %24 %45 
                                       f32_4 %166 = OpLoad %165 
                                       f32_3 %167 = OpVectorShuffle %166 %166 0 1 2 
                                       f32_3 %168 = OpFAdd %164 %167 
                                       f32_4 %169 = OpLoad %49 
                                       f32_4 %170 = OpVectorShuffle %169 %168 4 5 6 3 
                                                      OpStore %49 %170 
                                Private f32* %172 = OpAccessChain %49 %171 
                                         f32 %173 = OpLoad %172 
                                         f32 %174 = OpFNegate %173 
                                Private f32* %176 = OpAccessChain %49 %175 
                                                      OpStore %176 %174 
                                       f32_4 %178 = OpLoad %49 
                                       f32_3 %179 = OpVectorShuffle %178 %178 0 1 3 
                                                      OpStore vs_TEXCOORD2 %179 
                                Private f32* %180 = OpAccessChain %9 %171 
                                         f32 %181 = OpLoad %180 
                                         f32 %182 = OpFNegate %181 
                                Private f32* %183 = OpAccessChain %9 %175 
                                                      OpStore %183 %182 
                                       f32_4 %185 = OpLoad %9 
                                       f32_3 %186 = OpVectorShuffle %185 %185 0 1 3 
                                                      OpStore vs_TEXCOORD3 %186 
                                 Output f32* %188 = OpAccessChain %80 %29 %76 
                                         f32 %189 = OpLoad %188 
                                         f32 %190 = OpFNegate %189 
                                 Output f32* %191 = OpAccessChain %80 %29 %76 
                                                      OpStore %191 %190 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 436
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %21 %425 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpDecorate %12 DescriptorSet 12 
                                                      OpDecorate %12 Binding 12 
                                                      OpDecorate %16 DescriptorSet 16 
                                                      OpDecorate %16 Binding 16 
                                                      OpDecorate vs_TEXCOORD0 Location 21 
                                                      OpDecorate %57 ArrayStride 57 
                                                      OpDecorate %58 ArrayStride 58 
                                                      OpDecorate %59 ArrayStride 59 
                                                      OpDecorate %61 ArrayStride 61 
                                                      OpMemberDecorate %62 0 Offset 62 
                                                      OpMemberDecorate %62 1 Offset 62 
                                                      OpMemberDecorate %62 2 Offset 62 
                                                      OpMemberDecorate %62 3 Offset 62 
                                                      OpMemberDecorate %62 4 Offset 62 
                                                      OpMemberDecorate %62 5 Offset 62 
                                                      OpDecorate %62 Block 
                                                      OpDecorate %64 DescriptorSet 64 
                                                      OpDecorate %64 Binding 64 
                                                      OpDecorate %407 DescriptorSet 407 
                                                      OpDecorate %407 Binding 407 
                                                      OpDecorate %409 DescriptorSet 409 
                                                      OpDecorate %409 Binding 409 
                                                      OpDecorate %425 Location 425 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypePointer UniformConstant %10 
         UniformConstant read_only Texture2D* %12 = OpVariable UniformConstant 
                                              %14 = OpTypeSampler 
                                              %15 = OpTypePointer UniformConstant %14 
                     UniformConstant sampler* %16 = OpVariable UniformConstant 
                                              %18 = OpTypeSampledImage %10 
                                              %20 = OpTypePointer Input %7 
                        Input f32_4* vs_TEXCOORD0 = OpVariable Input 
                                              %22 = OpTypeVector %6 2 
                                              %26 = OpTypeInt 32 0 
                                          u32 %27 = OpConstant 0 
                                              %29 = OpTypePointer Private %6 
                                          f32 %34 = OpConstant 3.674022E-40 
                                          u32 %36 = OpConstant 2 
                                              %42 = OpTypeVector %6 3 
                                          f32 %45 = OpConstant 3.674022E-40 
                                        f32_3 %46 = OpConstantComposite %45 %45 %45 
                                          f32 %48 = OpConstant 3.674022E-40 
                                        f32_3 %49 = OpConstantComposite %48 %48 %48 
                               Private f32_4* %53 = OpVariable Private 
                                          u32 %56 = OpConstant 4 
                                              %57 = OpTypeArray %7 %56 
                                              %58 = OpTypeArray %7 %56 
                                              %59 = OpTypeArray %7 %56 
                                          u32 %60 = OpConstant 16 
                                              %61 = OpTypeArray %7 %60 
                                              %62 = OpTypeStruct %57 %58 %59 %7 %61 %7 
                                              %63 = OpTypePointer Uniform %62 
Uniform struct {f32_4[4]; f32_4[4]; f32_4[4]; f32_4; f32_4[16]; f32_4;}* %64 = OpVariable Uniform 
                                              %65 = OpTypeInt 32 1 
                                          i32 %66 = OpConstant 0 
                                          i32 %67 = OpConstant 1 
                                              %68 = OpTypePointer Uniform %7 
                                          i32 %79 = OpConstant 2 
                                          i32 %88 = OpConstant 3 
                                             %138 = OpTypePointer Private %42 
                              Private f32_3* %139 = OpVariable Private 
                                         u32 %150 = OpConstant 1 
                                         u32 %173 = OpConstant 3 
                                             %175 = OpTypeBool 
                                             %176 = OpTypeVector %175 4 
                                             %177 = OpTypePointer Private %176 
                             Private bool_4* %178 = OpVariable Private 
                                             %183 = OpTypePointer Private %175 
                                         f32 %186 = OpConstant 3.674022E-40 
                                         f32 %199 = OpConstant 3.674022E-40 
                                       f32_3 %219 = OpConstantComposite %199 %199 %199 
                                         i32 %225 = OpConstant 4 
                                         i32 %226 = OpConstant 5 
                                         i32 %239 = OpConstant 6 
                                         i32 %248 = OpConstant 7 
                              Private f32_3* %261 = OpVariable Private 
                                       f32_4 %299 = OpConstantComposite %34 %34 %34 %34 
                                         i32 %304 = OpConstant 9 
                                         i32 %309 = OpConstant 8 
                                         i32 %318 = OpConstant 10 
                                         i32 %327 = OpConstant 11 
                                         i32 %344 = OpConstant 13 
                                         i32 %349 = OpConstant 12 
                                         i32 %358 = OpConstant 14 
                                         i32 %369 = OpConstant 15 
                                Private f32* %390 = OpVariable Private 
                                             %399 = OpTypePointer Function %42 
        UniformConstant read_only Texture2D* %407 = OpVariable UniformConstant 
                    UniformConstant sampler* %409 = OpVariable UniformConstant 
                                             %411 = OpTypeImage %6 Dim2D 1 0 0 1 Unknown 
                                             %412 = OpTypeSampledImage %411 
                                Private f32* %418 = OpVariable Private 
                                             %419 = OpTypePointer Uniform %6 
                                             %424 = OpTypePointer Output %7 
                               Output f32_4* %425 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %400 = OpVariable Function 
                          read_only Texture2D %13 = OpLoad %12 
                                      sampler %17 = OpLoad %16 
                   read_only Texture2DSampled %19 = OpSampledImage %13 %17 
                                        f32_4 %23 = OpLoad vs_TEXCOORD0 
                                        f32_2 %24 = OpVectorShuffle %23 %23 0 1 
                                        f32_4 %25 = OpImageSampleImplicitLod %19 %24 
                                          f32 %28 = OpCompositeExtract %25 0 
                                 Private f32* %30 = OpAccessChain %9 %27 
                                                      OpStore %30 %28 
                                 Private f32* %31 = OpAccessChain %9 %27 
                                          f32 %32 = OpLoad %31 
                                          f32 %33 = OpFNegate %32 
                                          f32 %35 = OpFAdd %33 %34 
                                 Private f32* %37 = OpAccessChain %9 %36 
                                                      OpStore %37 %35 
                                        f32_4 %38 = OpLoad vs_TEXCOORD0 
                                        f32_2 %39 = OpVectorShuffle %38 %38 2 3 
                                        f32_4 %40 = OpLoad %9 
                                        f32_4 %41 = OpVectorShuffle %40 %39 4 5 2 3 
                                                      OpStore %9 %41 
                                        f32_4 %43 = OpLoad %9 
                                        f32_3 %44 = OpVectorShuffle %43 %43 0 1 2 
                                        f32_3 %47 = OpFMul %44 %46 
                                        f32_3 %50 = OpFAdd %47 %49 
                                        f32_4 %51 = OpLoad %9 
                                        f32_4 %52 = OpVectorShuffle %51 %50 4 5 6 3 
                                                      OpStore %9 %52 
                                        f32_4 %54 = OpLoad %9 
                                        f32_4 %55 = OpVectorShuffle %54 %54 1 1 1 1 
                               Uniform f32_4* %69 = OpAccessChain %64 %66 %67 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpFMul %55 %70 
                                                      OpStore %53 %71 
                               Uniform f32_4* %72 = OpAccessChain %64 %66 %66 
                                        f32_4 %73 = OpLoad %72 
                                        f32_4 %74 = OpLoad %9 
                                        f32_4 %75 = OpVectorShuffle %74 %74 0 0 0 0 
                                        f32_4 %76 = OpFMul %73 %75 
                                        f32_4 %77 = OpLoad %53 
                                        f32_4 %78 = OpFAdd %76 %77 
                                                      OpStore %53 %78 
                               Uniform f32_4* %80 = OpAccessChain %64 %66 %79 
                                        f32_4 %81 = OpLoad %80 
                                        f32_4 %82 = OpLoad %9 
                                        f32_4 %83 = OpVectorShuffle %82 %82 2 2 2 2 
                                        f32_4 %84 = OpFMul %81 %83 
                                        f32_4 %85 = OpLoad %53 
                                        f32_4 %86 = OpFAdd %84 %85 
                                                      OpStore %9 %86 
                                        f32_4 %87 = OpLoad %9 
                               Uniform f32_4* %89 = OpAccessChain %64 %66 %88 
                                        f32_4 %90 = OpLoad %89 
                                        f32_4 %91 = OpFAdd %87 %90 
                                                      OpStore %9 %91 
                                        f32_4 %92 = OpLoad %9 
                                        f32_3 %93 = OpVectorShuffle %92 %92 0 1 2 
                                        f32_4 %94 = OpLoad %9 
                                        f32_3 %95 = OpVectorShuffle %94 %94 3 3 3 
                                        f32_3 %96 = OpFDiv %93 %95 
                                        f32_4 %97 = OpLoad %9 
                                        f32_4 %98 = OpVectorShuffle %97 %96 4 5 6 3 
                                                      OpStore %9 %98 
                                        f32_4 %99 = OpLoad %9 
                                       f32_4 %100 = OpVectorShuffle %99 %99 1 1 1 1 
                              Uniform f32_4* %101 = OpAccessChain %64 %67 %67 
                                       f32_4 %102 = OpLoad %101 
                                       f32_4 %103 = OpFMul %100 %102 
                                                      OpStore %53 %103 
                              Uniform f32_4* %104 = OpAccessChain %64 %67 %66 
                                       f32_4 %105 = OpLoad %104 
                                       f32_4 %106 = OpLoad %9 
                                       f32_4 %107 = OpVectorShuffle %106 %106 0 0 0 0 
                                       f32_4 %108 = OpFMul %105 %107 
                                       f32_4 %109 = OpLoad %53 
                                       f32_4 %110 = OpFAdd %108 %109 
                                                      OpStore %53 %110 
                              Uniform f32_4* %111 = OpAccessChain %64 %67 %79 
                                       f32_4 %112 = OpLoad %111 
                                       f32_4 %113 = OpLoad %9 
                                       f32_4 %114 = OpVectorShuffle %113 %113 2 2 2 2 
                                       f32_4 %115 = OpFNegate %114 
                                       f32_4 %116 = OpFMul %112 %115 
                                       f32_4 %117 = OpLoad %53 
                                       f32_4 %118 = OpFAdd %116 %117 
                                                      OpStore %9 %118 
                                       f32_4 %119 = OpLoad %9 
                              Uniform f32_4* %120 = OpAccessChain %64 %67 %88 
                                       f32_4 %121 = OpLoad %120 
                                       f32_4 %122 = OpFAdd %119 %121 
                                                      OpStore %9 %122 
                                       f32_4 %123 = OpLoad %9 
                                       f32_3 %124 = OpVectorShuffle %123 %123 0 1 2 
                              Uniform f32_4* %125 = OpAccessChain %64 %79 %66 
                                       f32_4 %126 = OpLoad %125 
                                       f32_3 %127 = OpVectorShuffle %126 %126 0 1 2 
                                       f32_3 %128 = OpFNegate %127 
                                       f32_3 %129 = OpFAdd %124 %128 
                                       f32_4 %130 = OpLoad %53 
                                       f32_4 %131 = OpVectorShuffle %130 %129 4 5 6 3 
                                                      OpStore %53 %131 
                                       f32_4 %132 = OpLoad %53 
                                       f32_3 %133 = OpVectorShuffle %132 %132 0 1 2 
                                       f32_4 %134 = OpLoad %53 
                                       f32_3 %135 = OpVectorShuffle %134 %134 0 1 2 
                                         f32 %136 = OpDot %133 %135 
                                Private f32* %137 = OpAccessChain %53 %27 
                                                      OpStore %137 %136 
                                       f32_4 %140 = OpLoad %9 
                                       f32_3 %141 = OpVectorShuffle %140 %140 0 1 2 
                              Uniform f32_4* %142 = OpAccessChain %64 %79 %67 
                                       f32_4 %143 = OpLoad %142 
                                       f32_3 %144 = OpVectorShuffle %143 %143 0 1 2 
                                       f32_3 %145 = OpFNegate %144 
                                       f32_3 %146 = OpFAdd %141 %145 
                                                      OpStore %139 %146 
                                       f32_3 %147 = OpLoad %139 
                                       f32_3 %148 = OpLoad %139 
                                         f32 %149 = OpDot %147 %148 
                                Private f32* %151 = OpAccessChain %53 %150 
                                                      OpStore %151 %149 
                                       f32_4 %152 = OpLoad %9 
                                       f32_3 %153 = OpVectorShuffle %152 %152 0 1 2 
                              Uniform f32_4* %154 = OpAccessChain %64 %79 %79 
                                       f32_4 %155 = OpLoad %154 
                                       f32_3 %156 = OpVectorShuffle %155 %155 0 1 2 
                                       f32_3 %157 = OpFNegate %156 
                                       f32_3 %158 = OpFAdd %153 %157 
                                                      OpStore %139 %158 
                                       f32_3 %159 = OpLoad %139 
                                       f32_3 %160 = OpLoad %139 
                                         f32 %161 = OpDot %159 %160 
                                Private f32* %162 = OpAccessChain %53 %36 
                                                      OpStore %162 %161 
                                       f32_4 %163 = OpLoad %9 
                                       f32_3 %164 = OpVectorShuffle %163 %163 0 1 2 
                              Uniform f32_4* %165 = OpAccessChain %64 %79 %88 
                                       f32_4 %166 = OpLoad %165 
                                       f32_3 %167 = OpVectorShuffle %166 %166 0 1 2 
                                       f32_3 %168 = OpFNegate %167 
                                       f32_3 %169 = OpFAdd %164 %168 
                                                      OpStore %139 %169 
                                       f32_3 %170 = OpLoad %139 
                                       f32_3 %171 = OpLoad %139 
                                         f32 %172 = OpDot %170 %171 
                                Private f32* %174 = OpAccessChain %53 %173 
                                                      OpStore %174 %172 
                                       f32_4 %179 = OpLoad %53 
                              Uniform f32_4* %180 = OpAccessChain %64 %88 
                                       f32_4 %181 = OpLoad %180 
                                      bool_4 %182 = OpFOrdLessThan %179 %181 
                                                      OpStore %178 %182 
                               Private bool* %184 = OpAccessChain %178 %27 
                                        bool %185 = OpLoad %184 
                                         f32 %187 = OpSelect %185 %48 %186 
                                Private f32* %188 = OpAccessChain %139 %27 
                                                      OpStore %188 %187 
                               Private bool* %189 = OpAccessChain %178 %150 
                                        bool %190 = OpLoad %189 
                                         f32 %191 = OpSelect %190 %48 %186 
                                Private f32* %192 = OpAccessChain %139 %150 
                                                      OpStore %192 %191 
                               Private bool* %193 = OpAccessChain %178 %36 
                                        bool %194 = OpLoad %193 
                                         f32 %195 = OpSelect %194 %48 %186 
                                Private f32* %196 = OpAccessChain %139 %36 
                                                      OpStore %196 %195 
                               Private bool* %197 = OpAccessChain %178 %27 
                                        bool %198 = OpLoad %197 
                                         f32 %200 = OpSelect %198 %34 %199 
                                Private f32* %201 = OpAccessChain %53 %27 
                                                      OpStore %201 %200 
                               Private bool* %202 = OpAccessChain %178 %150 
                                        bool %203 = OpLoad %202 
                                         f32 %204 = OpSelect %203 %34 %199 
                                Private f32* %205 = OpAccessChain %53 %150 
                                                      OpStore %205 %204 
                               Private bool* %206 = OpAccessChain %178 %36 
                                        bool %207 = OpLoad %206 
                                         f32 %208 = OpSelect %207 %34 %199 
                                Private f32* %209 = OpAccessChain %53 %36 
                                                      OpStore %209 %208 
                               Private bool* %210 = OpAccessChain %178 %173 
                                        bool %211 = OpLoad %210 
                                         f32 %212 = OpSelect %211 %34 %199 
                                Private f32* %213 = OpAccessChain %53 %173 
                                                      OpStore %213 %212 
                                       f32_3 %214 = OpLoad %139 
                                       f32_4 %215 = OpLoad %53 
                                       f32_3 %216 = OpVectorShuffle %215 %215 1 2 3 
                                       f32_3 %217 = OpFAdd %214 %216 
                                                      OpStore %139 %217 
                                       f32_3 %218 = OpLoad %139 
                                       f32_3 %220 = OpExtInst %1 40 %218 %219 
                                       f32_4 %221 = OpLoad %53 
                                       f32_4 %222 = OpVectorShuffle %221 %220 0 4 5 6 
                                                      OpStore %53 %222 
                                       f32_4 %223 = OpLoad %9 
                                       f32_3 %224 = OpVectorShuffle %223 %223 1 1 1 
                              Uniform f32_4* %227 = OpAccessChain %64 %225 %226 
                                       f32_4 %228 = OpLoad %227 
                                       f32_3 %229 = OpVectorShuffle %228 %228 0 1 2 
                                       f32_3 %230 = OpFMul %224 %229 
                                                      OpStore %139 %230 
                              Uniform f32_4* %231 = OpAccessChain %64 %225 %225 
                                       f32_4 %232 = OpLoad %231 
                                       f32_3 %233 = OpVectorShuffle %232 %232 0 1 2 
                                       f32_4 %234 = OpLoad %9 
                                       f32_3 %235 = OpVectorShuffle %234 %234 0 0 0 
                                       f32_3 %236 = OpFMul %233 %235 
                                       f32_3 %237 = OpLoad %139 
                                       f32_3 %238 = OpFAdd %236 %237 
                                                      OpStore %139 %238 
                              Uniform f32_4* %240 = OpAccessChain %64 %225 %239 
                                       f32_4 %241 = OpLoad %240 
                                       f32_3 %242 = OpVectorShuffle %241 %241 0 1 2 
                                       f32_4 %243 = OpLoad %9 
                                       f32_3 %244 = OpVectorShuffle %243 %243 2 2 2 
                                       f32_3 %245 = OpFMul %242 %244 
                                       f32_3 %246 = OpLoad %139 
                                       f32_3 %247 = OpFAdd %245 %246 
                                                      OpStore %139 %247 
                              Uniform f32_4* %249 = OpAccessChain %64 %225 %248 
                                       f32_4 %250 = OpLoad %249 
                                       f32_3 %251 = OpVectorShuffle %250 %250 0 1 2 
                                       f32_4 %252 = OpLoad %9 
                                       f32_3 %253 = OpVectorShuffle %252 %252 3 3 3 
                                       f32_3 %254 = OpFMul %251 %253 
                                       f32_3 %255 = OpLoad %139 
                                       f32_3 %256 = OpFAdd %254 %255 
                                                      OpStore %139 %256 
                                       f32_4 %257 = OpLoad %53 
                                       f32_3 %258 = OpVectorShuffle %257 %257 1 1 1 
                                       f32_3 %259 = OpLoad %139 
                                       f32_3 %260 = OpFMul %258 %259 
                                                      OpStore %139 %260 
                                       f32_4 %262 = OpLoad %9 
                                       f32_3 %263 = OpVectorShuffle %262 %262 1 1 1 
                              Uniform f32_4* %264 = OpAccessChain %64 %225 %67 
                                       f32_4 %265 = OpLoad %264 
                                       f32_3 %266 = OpVectorShuffle %265 %265 0 1 2 
                                       f32_3 %267 = OpFMul %263 %266 
                                                      OpStore %261 %267 
                              Uniform f32_4* %268 = OpAccessChain %64 %225 %66 
                                       f32_4 %269 = OpLoad %268 
                                       f32_3 %270 = OpVectorShuffle %269 %269 0 1 2 
                                       f32_4 %271 = OpLoad %9 
                                       f32_3 %272 = OpVectorShuffle %271 %271 0 0 0 
                                       f32_3 %273 = OpFMul %270 %272 
                                       f32_3 %274 = OpLoad %261 
                                       f32_3 %275 = OpFAdd %273 %274 
                                                      OpStore %261 %275 
                              Uniform f32_4* %276 = OpAccessChain %64 %225 %79 
                                       f32_4 %277 = OpLoad %276 
                                       f32_3 %278 = OpVectorShuffle %277 %277 0 1 2 
                                       f32_4 %279 = OpLoad %9 
                                       f32_3 %280 = OpVectorShuffle %279 %279 2 2 2 
                                       f32_3 %281 = OpFMul %278 %280 
                                       f32_3 %282 = OpLoad %261 
                                       f32_3 %283 = OpFAdd %281 %282 
                                                      OpStore %261 %283 
                              Uniform f32_4* %284 = OpAccessChain %64 %225 %88 
                                       f32_4 %285 = OpLoad %284 
                                       f32_3 %286 = OpVectorShuffle %285 %285 0 1 2 
                                       f32_4 %287 = OpLoad %9 
                                       f32_3 %288 = OpVectorShuffle %287 %287 3 3 3 
                                       f32_3 %289 = OpFMul %286 %288 
                                       f32_3 %290 = OpLoad %261 
                                       f32_3 %291 = OpFAdd %289 %290 
                                                      OpStore %261 %291 
                                       f32_3 %292 = OpLoad %261 
                                       f32_4 %293 = OpLoad %53 
                                       f32_3 %294 = OpVectorShuffle %293 %293 0 0 0 
                                       f32_3 %295 = OpFMul %292 %294 
                                       f32_3 %296 = OpLoad %139 
                                       f32_3 %297 = OpFAdd %295 %296 
                                                      OpStore %139 %297 
                                       f32_4 %298 = OpLoad %53 
                                         f32 %300 = OpDot %298 %299 
                                Private f32* %301 = OpAccessChain %53 %27 
                                                      OpStore %301 %300 
                                       f32_4 %302 = OpLoad %9 
                                       f32_3 %303 = OpVectorShuffle %302 %302 1 1 1 
                              Uniform f32_4* %305 = OpAccessChain %64 %225 %304 
                                       f32_4 %306 = OpLoad %305 
                                       f32_3 %307 = OpVectorShuffle %306 %306 0 1 2 
                                       f32_3 %308 = OpFMul %303 %307 
                                                      OpStore %261 %308 
                              Uniform f32_4* %310 = OpAccessChain %64 %225 %309 
                                       f32_4 %311 = OpLoad %310 
                                       f32_3 %312 = OpVectorShuffle %311 %311 0 1 2 
                                       f32_4 %313 = OpLoad %9 
                                       f32_3 %314 = OpVectorShuffle %313 %313 0 0 0 
                                       f32_3 %315 = OpFMul %312 %314 
                                       f32_3 %316 = OpLoad %261 
                                       f32_3 %317 = OpFAdd %315 %316 
                                                      OpStore %261 %317 
                              Uniform f32_4* %319 = OpAccessChain %64 %225 %318 
                                       f32_4 %320 = OpLoad %319 
                                       f32_3 %321 = OpVectorShuffle %320 %320 0 1 2 
                                       f32_4 %322 = OpLoad %9 
                                       f32_3 %323 = OpVectorShuffle %322 %322 2 2 2 
                                       f32_3 %324 = OpFMul %321 %323 
                                       f32_3 %325 = OpLoad %261 
                                       f32_3 %326 = OpFAdd %324 %325 
                                                      OpStore %261 %326 
                              Uniform f32_4* %328 = OpAccessChain %64 %225 %327 
                                       f32_4 %329 = OpLoad %328 
                                       f32_3 %330 = OpVectorShuffle %329 %329 0 1 2 
                                       f32_4 %331 = OpLoad %9 
                                       f32_3 %332 = OpVectorShuffle %331 %331 3 3 3 
                                       f32_3 %333 = OpFMul %330 %332 
                                       f32_3 %334 = OpLoad %261 
                                       f32_3 %335 = OpFAdd %333 %334 
                                                      OpStore %261 %335 
                                       f32_3 %336 = OpLoad %261 
                                       f32_4 %337 = OpLoad %53 
                                       f32_3 %338 = OpVectorShuffle %337 %337 2 2 2 
                                       f32_3 %339 = OpFMul %336 %338 
                                       f32_3 %340 = OpLoad %139 
                                       f32_3 %341 = OpFAdd %339 %340 
                                                      OpStore %139 %341 
                                       f32_4 %342 = OpLoad %9 
                                       f32_3 %343 = OpVectorShuffle %342 %342 1 1 1 
                              Uniform f32_4* %345 = OpAccessChain %64 %225 %344 
                                       f32_4 %346 = OpLoad %345 
                                       f32_3 %347 = OpVectorShuffle %346 %346 0 1 2 
                                       f32_3 %348 = OpFMul %343 %347 
                                                      OpStore %261 %348 
                              Uniform f32_4* %350 = OpAccessChain %64 %225 %349 
                                       f32_4 %351 = OpLoad %350 
                                       f32_3 %352 = OpVectorShuffle %351 %351 0 1 2 
                                       f32_4 %353 = OpLoad %9 
                                       f32_3 %354 = OpVectorShuffle %353 %353 0 0 0 
                                       f32_3 %355 = OpFMul %352 %354 
                                       f32_3 %356 = OpLoad %261 
                                       f32_3 %357 = OpFAdd %355 %356 
                                                      OpStore %261 %357 
                              Uniform f32_4* %359 = OpAccessChain %64 %225 %358 
                                       f32_4 %360 = OpLoad %359 
                                       f32_3 %361 = OpVectorShuffle %360 %360 0 1 2 
                                       f32_4 %362 = OpLoad %9 
                                       f32_3 %363 = OpVectorShuffle %362 %362 2 2 2 
                                       f32_3 %364 = OpFMul %361 %363 
                                       f32_3 %365 = OpLoad %261 
                                       f32_3 %366 = OpFAdd %364 %365 
                                       f32_4 %367 = OpLoad %9 
                                       f32_4 %368 = OpVectorShuffle %367 %366 4 5 6 3 
                                                      OpStore %9 %368 
                              Uniform f32_4* %370 = OpAccessChain %64 %225 %369 
                                       f32_4 %371 = OpLoad %370 
                                       f32_3 %372 = OpVectorShuffle %371 %371 0 1 2 
                                       f32_4 %373 = OpLoad %9 
                                       f32_3 %374 = OpVectorShuffle %373 %373 3 3 3 
                                       f32_3 %375 = OpFMul %372 %374 
                                       f32_4 %376 = OpLoad %9 
                                       f32_3 %377 = OpVectorShuffle %376 %376 0 1 2 
                                       f32_3 %378 = OpFAdd %375 %377 
                                       f32_4 %379 = OpLoad %9 
                                       f32_4 %380 = OpVectorShuffle %379 %378 4 5 6 3 
                                                      OpStore %9 %380 
                                       f32_4 %381 = OpLoad %9 
                                       f32_3 %382 = OpVectorShuffle %381 %381 0 1 2 
                                       f32_4 %383 = OpLoad %53 
                                       f32_3 %384 = OpVectorShuffle %383 %383 3 3 3 
                                       f32_3 %385 = OpFMul %382 %384 
                                       f32_3 %386 = OpLoad %139 
                                       f32_3 %387 = OpFAdd %385 %386 
                                       f32_4 %388 = OpLoad %9 
                                       f32_4 %389 = OpVectorShuffle %388 %387 4 5 6 3 
                                                      OpStore %9 %389 
                                Private f32* %391 = OpAccessChain %53 %27 
                                         f32 %392 = OpLoad %391 
                                         f32 %393 = OpFNegate %392 
                                Private f32* %394 = OpAccessChain %9 %36 
                                         f32 %395 = OpLoad %394 
                                         f32 %396 = OpFAdd %393 %395 
                                                      OpStore %390 %396 
                                         f32 %397 = OpLoad %390 
                                         f32 %398 = OpFAdd %397 %34 
                                                      OpStore %390 %398 
                                       f32_4 %401 = OpLoad %9 
                                       f32_2 %402 = OpVectorShuffle %401 %401 0 1 
                                         f32 %403 = OpLoad %390 
                                         f32 %404 = OpCompositeExtract %402 0 
                                         f32 %405 = OpCompositeExtract %402 1 
                                       f32_3 %406 = OpCompositeConstruct %404 %405 %403 
                                                      OpStore %400 %406 
                         read_only Texture2D %408 = OpLoad %407 
                                     sampler %410 = OpLoad %409 
                  read_only Texture2DSampled %413 = OpSampledImage %408 %410 
                                       f32_3 %414 = OpLoad %400 
                                         f32 %415 = OpCompositeExtract %414 2 
                                         f32 %416 = OpImageSampleDrefExplicitLod %413 %414 %415 Lod %6 
                                Private f32* %417 = OpAccessChain %9 %27 
                                                      OpStore %417 %416 
                                Uniform f32* %420 = OpAccessChain %64 %226 %27 
                                         f32 %421 = OpLoad %420 
                                         f32 %422 = OpFNegate %421 
                                         f32 %423 = OpFAdd %422 %34 
                                                      OpStore %418 %423 
                                       f32_4 %426 = OpLoad %9 
                                       f32_4 %427 = OpVectorShuffle %426 %426 0 0 0 0 
                                         f32 %428 = OpLoad %418 
                                       f32_4 %429 = OpCompositeConstruct %428 %428 %428 %428 
                                       f32_4 %430 = OpFMul %427 %429 
                              Uniform f32_4* %431 = OpAccessChain %64 %226 
                                       f32_4 %432 = OpLoad %431 
                                       f32_4 %433 = OpVectorShuffle %432 %432 0 0 0 0 
                                       f32_4 %434 = OpFAdd %430 %433 
                                                      OpStore %425 %434 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "SHADOWS_SINGLE_CASCADE" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "SHADOWS_SINGLE_CASCADE" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraInvProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in  vec4 in_POSITION0;
in  vec2 in_TEXCOORD0;
in  vec3 in_TEXCOORD1;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_CameraInvProjection[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_CameraInvProjection[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    vs_TEXCOORD0.zw = u_xlat1.zz + u_xlat1.xw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = in_TEXCOORD1.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-hlslcc_mtx4x4unity_CameraInvProjection[2].xyz);
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[2].xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;
    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;
    u_xlat1.w = (-u_xlat1.z);
    vs_TEXCOORD2.xyz = u_xlat1.xyw;
    u_xlat0.w = (-u_xlat0.z);
    vs_TEXCOORD3.xyz = u_xlat0.xyw;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_CameraInvProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	vec4 _LightShadowData;
UNITY_LOCATION(0) uniform  sampler2D _CameraDepthTexture;
UNITY_LOCATION(1) uniform  sampler2D _ShadowMapTexture;
UNITY_LOCATION(2) uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
in  vec4 vs_TEXCOORD0;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat2;
void main()
{
    u_xlat0 = texture(_CameraDepthTexture, vs_TEXCOORD0.xy).yzxw;
    u_xlat0.xy = vs_TEXCOORD0.zw;
    u_xlat0.xyz = u_xlat0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_CameraInvProjection[1];
    u_xlat1 = hlslcc_mtx4x4unity_CameraInvProjection[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_CameraInvProjection[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_CameraInvProjection[3];
    u_xlat0.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_CameraToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_CameraToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_CameraToWorld[2] * (-u_xlat0.zzzz) + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_CameraToWorld[3];
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[3].xyz * u_xlat0.www + u_xlat0.xyz;
    vec3 txVec0 = vec3(u_xlat0.xy,u_xlat0.z);
    u_xlat0.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
    u_xlat2 = (-_LightShadowData.x) + 1.0;
    SV_Target0 = u_xlat0.xxxx * vec4(u_xlat2) + _LightShadowData.xxxx;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "SHADOWS_SINGLE_CASCADE" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 193
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %80 %119 %129 %134 %136 %177 %184 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpMemberDecorate %78 0 BuiltIn 78 
                                                      OpMemberDecorate %78 1 BuiltIn 78 
                                                      OpMemberDecorate %78 2 BuiltIn 78 
                                                      OpDecorate %78 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 119 
                                                      OpDecorate %129 Location 129 
                                                      OpDecorate vs_TEXCOORD1 Location 134 
                                                      OpDecorate %136 Location 136 
                                                      OpDecorate vs_TEXCOORD2 Location 177 
                                                      OpDecorate vs_TEXCOORD3 Location 184 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %16 %17 %18 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4];}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 2 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %29 = OpConstant 0 
                                          i32 %45 = OpConstant 3 
                               Private f32_4* %49 = OpVariable Private 
                                          u32 %76 = OpConstant 1 
                                              %77 = OpTypeArray %6 %76 
                                              %78 = OpTypeStruct %7 %6 %77 
                                              %79 = OpTypePointer Output %78 
         Output struct {f32_4; f32; f32[1];}* %80 = OpVariable Output 
                                              %82 = OpTypePointer Output %7 
                                              %84 = OpTypePointer Private %6 
                                          u32 %87 = OpConstant 0 
                                              %88 = OpTypePointer Uniform %6 
                                              %93 = OpTypeVector %6 3 
                                          f32 %96 = OpConstant 3.674022E-40 
                                        f32_3 %97 = OpConstantComposite %96 %96 %96 
                                             %101 = OpTypePointer Private %93 
                              Private f32_3* %102 = OpVariable Private 
                       Output f32_4* vs_TEXCOORD0 = OpVariable Output 
                                             %120 = OpTypeVector %6 2 
                                             %128 = OpTypePointer Input %120 
                                Input f32_2* %129 = OpVariable Input 
                                             %133 = OpTypePointer Output %93 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                                             %135 = OpTypePointer Input %93 
                                Input f32_3* %136 = OpVariable Input 
                                         u32 %171 = OpConstant 2 
                                         u32 %175 = OpConstant 3 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                       Output f32_3* vs_TEXCOORD3 = OpVariable Output 
                                             %187 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %30 = OpAccessChain %21 %23 %29 
                                        f32_4 %31 = OpLoad %30 
                                        f32_4 %32 = OpLoad %11 
                                        f32_4 %33 = OpVectorShuffle %32 %32 0 0 0 0 
                                        f32_4 %34 = OpFMul %31 %33 
                                        f32_4 %35 = OpLoad %9 
                                        f32_4 %36 = OpFAdd %34 %35 
                                                      OpStore %9 %36 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %23 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %44 = OpLoad %9 
                               Uniform f32_4* %46 = OpAccessChain %21 %23 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_4 %48 = OpFAdd %44 %47 
                                                      OpStore %9 %48 
                                        f32_4 %50 = OpLoad %9 
                                        f32_4 %51 = OpVectorShuffle %50 %50 1 1 1 1 
                               Uniform f32_4* %52 = OpAccessChain %21 %45 %24 
                                        f32_4 %53 = OpLoad %52 
                                        f32_4 %54 = OpFMul %51 %53 
                                                      OpStore %49 %54 
                               Uniform f32_4* %55 = OpAccessChain %21 %45 %29 
                                        f32_4 %56 = OpLoad %55 
                                        f32_4 %57 = OpLoad %9 
                                        f32_4 %58 = OpVectorShuffle %57 %57 0 0 0 0 
                                        f32_4 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %49 
                                        f32_4 %61 = OpFAdd %59 %60 
                                                      OpStore %49 %61 
                               Uniform f32_4* %62 = OpAccessChain %21 %45 %23 
                                        f32_4 %63 = OpLoad %62 
                                        f32_4 %64 = OpLoad %9 
                                        f32_4 %65 = OpVectorShuffle %64 %64 2 2 2 2 
                                        f32_4 %66 = OpFMul %63 %65 
                                        f32_4 %67 = OpLoad %49 
                                        f32_4 %68 = OpFAdd %66 %67 
                                                      OpStore %49 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %45 %45 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %9 
                                        f32_4 %72 = OpVectorShuffle %71 %71 3 3 3 3 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %49 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %9 %75 
                                        f32_4 %81 = OpLoad %9 
                                Output f32_4* %83 = OpAccessChain %80 %29 
                                                      OpStore %83 %81 
                                 Private f32* %85 = OpAccessChain %9 %76 
                                          f32 %86 = OpLoad %85 
                                 Uniform f32* %89 = OpAccessChain %21 %29 %87 
                                          f32 %90 = OpLoad %89 
                                          f32 %91 = OpFMul %86 %90 
                                 Private f32* %92 = OpAccessChain %9 %76 
                                                      OpStore %92 %91 
                                        f32_4 %94 = OpLoad %9 
                                        f32_3 %95 = OpVectorShuffle %94 %94 0 3 1 
                                        f32_3 %98 = OpFMul %95 %97 
                                        f32_4 %99 = OpLoad %49 
                                       f32_4 %100 = OpVectorShuffle %99 %98 4 1 5 6 
                                                      OpStore %49 %100 
                                       f32_4 %103 = OpLoad %9 
                                       f32_3 %104 = OpVectorShuffle %103 %103 1 1 1 
                              Uniform f32_4* %105 = OpAccessChain %21 %24 %24 
                                       f32_4 %106 = OpLoad %105 
                                       f32_3 %107 = OpVectorShuffle %106 %106 0 1 2 
                                       f32_3 %108 = OpFMul %104 %107 
                                                      OpStore %102 %108 
                              Uniform f32_4* %109 = OpAccessChain %21 %24 %29 
                                       f32_4 %110 = OpLoad %109 
                                       f32_3 %111 = OpVectorShuffle %110 %110 0 1 2 
                                       f32_4 %112 = OpLoad %9 
                                       f32_3 %113 = OpVectorShuffle %112 %112 0 0 0 
                                       f32_3 %114 = OpFMul %111 %113 
                                       f32_3 %115 = OpLoad %102 
                                       f32_3 %116 = OpFAdd %114 %115 
                                       f32_4 %117 = OpLoad %9 
                                       f32_4 %118 = OpVectorShuffle %117 %116 4 5 6 3 
                                                      OpStore %9 %118 
                                       f32_4 %121 = OpLoad %49 
                                       f32_2 %122 = OpVectorShuffle %121 %121 2 2 
                                       f32_4 %123 = OpLoad %49 
                                       f32_2 %124 = OpVectorShuffle %123 %123 0 3 
                                       f32_2 %125 = OpFAdd %122 %124 
                                       f32_4 %126 = OpLoad vs_TEXCOORD0 
                                       f32_4 %127 = OpVectorShuffle %126 %125 0 1 4 5 
                                                      OpStore vs_TEXCOORD0 %127 
                                       f32_2 %130 = OpLoad %129 
                                       f32_4 %131 = OpLoad vs_TEXCOORD0 
                                       f32_4 %132 = OpVectorShuffle %131 %130 4 5 2 3 
                                                      OpStore vs_TEXCOORD0 %132 
                                       f32_3 %137 = OpLoad %136 
                                                      OpStore vs_TEXCOORD1 %137 
                                       f32_4 %138 = OpLoad %9 
                                       f32_3 %139 = OpVectorShuffle %138 %138 0 1 2 
                              Uniform f32_4* %140 = OpAccessChain %21 %24 %23 
                                       f32_4 %141 = OpLoad %140 
                                       f32_3 %142 = OpVectorShuffle %141 %141 0 1 2 
                                       f32_3 %143 = OpFNegate %142 
                                       f32_3 %144 = OpFAdd %139 %143 
                                       f32_4 %145 = OpLoad %49 
                                       f32_4 %146 = OpVectorShuffle %145 %144 4 5 6 3 
                                                      OpStore %49 %146 
                                       f32_4 %147 = OpLoad %9 
                                       f32_3 %148 = OpVectorShuffle %147 %147 0 1 2 
                              Uniform f32_4* %149 = OpAccessChain %21 %24 %23 
                                       f32_4 %150 = OpLoad %149 
                                       f32_3 %151 = OpVectorShuffle %150 %150 0 1 2 
                                       f32_3 %152 = OpFAdd %148 %151 
                                       f32_4 %153 = OpLoad %9 
                                       f32_4 %154 = OpVectorShuffle %153 %152 4 5 6 3 
                                                      OpStore %9 %154 
                                       f32_4 %155 = OpLoad %9 
                                       f32_3 %156 = OpVectorShuffle %155 %155 0 1 2 
                              Uniform f32_4* %157 = OpAccessChain %21 %24 %45 
                                       f32_4 %158 = OpLoad %157 
                                       f32_3 %159 = OpVectorShuffle %158 %158 0 1 2 
                                       f32_3 %160 = OpFAdd %156 %159 
                                       f32_4 %161 = OpLoad %9 
                                       f32_4 %162 = OpVectorShuffle %161 %160 4 5 6 3 
                                                      OpStore %9 %162 
                                       f32_4 %163 = OpLoad %49 
                                       f32_3 %164 = OpVectorShuffle %163 %163 0 1 2 
                              Uniform f32_4* %165 = OpAccessChain %21 %24 %45 
                                       f32_4 %166 = OpLoad %165 
                                       f32_3 %167 = OpVectorShuffle %166 %166 0 1 2 
                                       f32_3 %168 = OpFAdd %164 %167 
                                       f32_4 %169 = OpLoad %49 
                                       f32_4 %170 = OpVectorShuffle %169 %168 4 5 6 3 
                                                      OpStore %49 %170 
                                Private f32* %172 = OpAccessChain %49 %171 
                                         f32 %173 = OpLoad %172 
                                         f32 %174 = OpFNegate %173 
                                Private f32* %176 = OpAccessChain %49 %175 
                                                      OpStore %176 %174 
                                       f32_4 %178 = OpLoad %49 
                                       f32_3 %179 = OpVectorShuffle %178 %178 0 1 3 
                                                      OpStore vs_TEXCOORD2 %179 
                                Private f32* %180 = OpAccessChain %9 %171 
                                         f32 %181 = OpLoad %180 
                                         f32 %182 = OpFNegate %181 
                                Private f32* %183 = OpAccessChain %9 %175 
                                                      OpStore %183 %182 
                                       f32_4 %185 = OpLoad %9 
                                       f32_3 %186 = OpVectorShuffle %185 %185 0 1 3 
                                                      OpStore vs_TEXCOORD3 %186 
                                 Output f32* %188 = OpAccessChain %80 %29 %76 
                                         f32 %189 = OpLoad %188 
                                         f32 %190 = OpFNegate %189 
                                 Output f32* %191 = OpAccessChain %80 %29 %76 
                                                      OpStore %191 %190 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 202
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %21 %191 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpDecorate %12 DescriptorSet 12 
                                                      OpDecorate %12 Binding 12 
                                                      OpDecorate %16 DescriptorSet 16 
                                                      OpDecorate %16 Binding 16 
                                                      OpDecorate vs_TEXCOORD0 Location 21 
                                                      OpDecorate %57 ArrayStride 57 
                                                      OpDecorate %58 ArrayStride 58 
                                                      OpDecorate %60 ArrayStride 60 
                                                      OpMemberDecorate %61 0 Offset 61 
                                                      OpMemberDecorate %61 1 Offset 61 
                                                      OpMemberDecorate %61 2 Offset 61 
                                                      OpMemberDecorate %61 3 Offset 61 
                                                      OpDecorate %61 Block 
                                                      OpDecorate %63 DescriptorSet 63 
                                                      OpDecorate %63 Binding 63 
                                                      OpDecorate %172 DescriptorSet 172 
                                                      OpDecorate %172 Binding 172 
                                                      OpDecorate %174 DescriptorSet 174 
                                                      OpDecorate %174 Binding 174 
                                                      OpDecorate %191 Location 191 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypePointer UniformConstant %10 
         UniformConstant read_only Texture2D* %12 = OpVariable UniformConstant 
                                              %14 = OpTypeSampler 
                                              %15 = OpTypePointer UniformConstant %14 
                     UniformConstant sampler* %16 = OpVariable UniformConstant 
                                              %18 = OpTypeSampledImage %10 
                                              %20 = OpTypePointer Input %7 
                        Input f32_4* vs_TEXCOORD0 = OpVariable Input 
                                              %22 = OpTypeVector %6 2 
                                              %26 = OpTypeInt 32 0 
                                          u32 %27 = OpConstant 0 
                                              %29 = OpTypePointer Private %6 
                                          f32 %34 = OpConstant 3.674022E-40 
                                          u32 %36 = OpConstant 2 
                                              %42 = OpTypeVector %6 3 
                                          f32 %45 = OpConstant 3.674022E-40 
                                        f32_3 %46 = OpConstantComposite %45 %45 %45 
                                          f32 %48 = OpConstant 3.674022E-40 
                                        f32_3 %49 = OpConstantComposite %48 %48 %48 
                               Private f32_4* %53 = OpVariable Private 
                                          u32 %56 = OpConstant 4 
                                              %57 = OpTypeArray %7 %56 
                                              %58 = OpTypeArray %7 %56 
                                          u32 %59 = OpConstant 16 
                                              %60 = OpTypeArray %7 %59 
                                              %61 = OpTypeStruct %57 %58 %60 %7 
                                              %62 = OpTypePointer Uniform %61 
Uniform struct {f32_4[4]; f32_4[4]; f32_4[16]; f32_4;}* %63 = OpVariable Uniform 
                                              %64 = OpTypeInt 32 1 
                                          i32 %65 = OpConstant 0 
                                          i32 %66 = OpConstant 1 
                                              %67 = OpTypePointer Uniform %7 
                                          i32 %78 = OpConstant 2 
                                          i32 %87 = OpConstant 3 
                                             %163 = OpTypePointer Function %42 
        UniformConstant read_only Texture2D* %172 = OpVariable UniformConstant 
                    UniformConstant sampler* %174 = OpVariable UniformConstant 
                                             %176 = OpTypeImage %6 Dim2D 1 0 0 1 Unknown 
                                             %177 = OpTypeSampledImage %176 
                                         f32 %180 = OpConstant 3.674022E-40 
                                Private f32* %184 = OpVariable Private 
                                             %185 = OpTypePointer Uniform %6 
                                             %190 = OpTypePointer Output %7 
                               Output f32_4* %191 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %164 = OpVariable Function 
                          read_only Texture2D %13 = OpLoad %12 
                                      sampler %17 = OpLoad %16 
                   read_only Texture2DSampled %19 = OpSampledImage %13 %17 
                                        f32_4 %23 = OpLoad vs_TEXCOORD0 
                                        f32_2 %24 = OpVectorShuffle %23 %23 0 1 
                                        f32_4 %25 = OpImageSampleImplicitLod %19 %24 
                                          f32 %28 = OpCompositeExtract %25 0 
                                 Private f32* %30 = OpAccessChain %9 %27 
                                                      OpStore %30 %28 
                                 Private f32* %31 = OpAccessChain %9 %27 
                                          f32 %32 = OpLoad %31 
                                          f32 %33 = OpFNegate %32 
                                          f32 %35 = OpFAdd %33 %34 
                                 Private f32* %37 = OpAccessChain %9 %36 
                                                      OpStore %37 %35 
                                        f32_4 %38 = OpLoad vs_TEXCOORD0 
                                        f32_2 %39 = OpVectorShuffle %38 %38 2 3 
                                        f32_4 %40 = OpLoad %9 
                                        f32_4 %41 = OpVectorShuffle %40 %39 4 5 2 3 
                                                      OpStore %9 %41 
                                        f32_4 %43 = OpLoad %9 
                                        f32_3 %44 = OpVectorShuffle %43 %43 0 1 2 
                                        f32_3 %47 = OpFMul %44 %46 
                                        f32_3 %50 = OpFAdd %47 %49 
                                        f32_4 %51 = OpLoad %9 
                                        f32_4 %52 = OpVectorShuffle %51 %50 4 5 6 3 
                                                      OpStore %9 %52 
                                        f32_4 %54 = OpLoad %9 
                                        f32_4 %55 = OpVectorShuffle %54 %54 1 1 1 1 
                               Uniform f32_4* %68 = OpAccessChain %63 %65 %66 
                                        f32_4 %69 = OpLoad %68 
                                        f32_4 %70 = OpFMul %55 %69 
                                                      OpStore %53 %70 
                               Uniform f32_4* %71 = OpAccessChain %63 %65 %65 
                                        f32_4 %72 = OpLoad %71 
                                        f32_4 %73 = OpLoad %9 
                                        f32_4 %74 = OpVectorShuffle %73 %73 0 0 0 0 
                                        f32_4 %75 = OpFMul %72 %74 
                                        f32_4 %76 = OpLoad %53 
                                        f32_4 %77 = OpFAdd %75 %76 
                                                      OpStore %53 %77 
                               Uniform f32_4* %79 = OpAccessChain %63 %65 %78 
                                        f32_4 %80 = OpLoad %79 
                                        f32_4 %81 = OpLoad %9 
                                        f32_4 %82 = OpVectorShuffle %81 %81 2 2 2 2 
                                        f32_4 %83 = OpFMul %80 %82 
                                        f32_4 %84 = OpLoad %53 
                                        f32_4 %85 = OpFAdd %83 %84 
                                                      OpStore %9 %85 
                                        f32_4 %86 = OpLoad %9 
                               Uniform f32_4* %88 = OpAccessChain %63 %65 %87 
                                        f32_4 %89 = OpLoad %88 
                                        f32_4 %90 = OpFAdd %86 %89 
                                                      OpStore %9 %90 
                                        f32_4 %91 = OpLoad %9 
                                        f32_3 %92 = OpVectorShuffle %91 %91 0 1 2 
                                        f32_4 %93 = OpLoad %9 
                                        f32_3 %94 = OpVectorShuffle %93 %93 3 3 3 
                                        f32_3 %95 = OpFDiv %92 %94 
                                        f32_4 %96 = OpLoad %9 
                                        f32_4 %97 = OpVectorShuffle %96 %95 4 5 6 3 
                                                      OpStore %9 %97 
                                        f32_4 %98 = OpLoad %9 
                                        f32_4 %99 = OpVectorShuffle %98 %98 1 1 1 1 
                              Uniform f32_4* %100 = OpAccessChain %63 %66 %66 
                                       f32_4 %101 = OpLoad %100 
                                       f32_4 %102 = OpFMul %99 %101 
                                                      OpStore %53 %102 
                              Uniform f32_4* %103 = OpAccessChain %63 %66 %65 
                                       f32_4 %104 = OpLoad %103 
                                       f32_4 %105 = OpLoad %9 
                                       f32_4 %106 = OpVectorShuffle %105 %105 0 0 0 0 
                                       f32_4 %107 = OpFMul %104 %106 
                                       f32_4 %108 = OpLoad %53 
                                       f32_4 %109 = OpFAdd %107 %108 
                                                      OpStore %53 %109 
                              Uniform f32_4* %110 = OpAccessChain %63 %66 %78 
                                       f32_4 %111 = OpLoad %110 
                                       f32_4 %112 = OpLoad %9 
                                       f32_4 %113 = OpVectorShuffle %112 %112 2 2 2 2 
                                       f32_4 %114 = OpFNegate %113 
                                       f32_4 %115 = OpFMul %111 %114 
                                       f32_4 %116 = OpLoad %53 
                                       f32_4 %117 = OpFAdd %115 %116 
                                                      OpStore %9 %117 
                                       f32_4 %118 = OpLoad %9 
                              Uniform f32_4* %119 = OpAccessChain %63 %66 %87 
                                       f32_4 %120 = OpLoad %119 
                                       f32_4 %121 = OpFAdd %118 %120 
                                                      OpStore %9 %121 
                                       f32_4 %122 = OpLoad %9 
                                       f32_3 %123 = OpVectorShuffle %122 %122 1 1 1 
                              Uniform f32_4* %124 = OpAccessChain %63 %78 %66 
                                       f32_4 %125 = OpLoad %124 
                                       f32_3 %126 = OpVectorShuffle %125 %125 0 1 2 
                                       f32_3 %127 = OpFMul %123 %126 
                                       f32_4 %128 = OpLoad %53 
                                       f32_4 %129 = OpVectorShuffle %128 %127 4 5 6 3 
                                                      OpStore %53 %129 
                              Uniform f32_4* %130 = OpAccessChain %63 %78 %65 
                                       f32_4 %131 = OpLoad %130 
                                       f32_3 %132 = OpVectorShuffle %131 %131 0 1 2 
                                       f32_4 %133 = OpLoad %9 
                                       f32_3 %134 = OpVectorShuffle %133 %133 0 0 0 
                                       f32_3 %135 = OpFMul %132 %134 
                                       f32_4 %136 = OpLoad %53 
                                       f32_3 %137 = OpVectorShuffle %136 %136 0 1 2 
                                       f32_3 %138 = OpFAdd %135 %137 
                                       f32_4 %139 = OpLoad %53 
                                       f32_4 %140 = OpVectorShuffle %139 %138 4 5 6 3 
                                                      OpStore %53 %140 
                              Uniform f32_4* %141 = OpAccessChain %63 %78 %78 
                                       f32_4 %142 = OpLoad %141 
                                       f32_3 %143 = OpVectorShuffle %142 %142 0 1 2 
                                       f32_4 %144 = OpLoad %9 
                                       f32_3 %145 = OpVectorShuffle %144 %144 2 2 2 
                                       f32_3 %146 = OpFMul %143 %145 
                                       f32_4 %147 = OpLoad %53 
                                       f32_3 %148 = OpVectorShuffle %147 %147 0 1 2 
                                       f32_3 %149 = OpFAdd %146 %148 
                                       f32_4 %150 = OpLoad %9 
                                       f32_4 %151 = OpVectorShuffle %150 %149 4 5 6 3 
                                                      OpStore %9 %151 
                              Uniform f32_4* %152 = OpAccessChain %63 %78 %87 
                                       f32_4 %153 = OpLoad %152 
                                       f32_3 %154 = OpVectorShuffle %153 %153 0 1 2 
                                       f32_4 %155 = OpLoad %9 
                                       f32_3 %156 = OpVectorShuffle %155 %155 3 3 3 
                                       f32_3 %157 = OpFMul %154 %156 
                                       f32_4 %158 = OpLoad %9 
                                       f32_3 %159 = OpVectorShuffle %158 %158 0 1 2 
                                       f32_3 %160 = OpFAdd %157 %159 
                                       f32_4 %161 = OpLoad %9 
                                       f32_4 %162 = OpVectorShuffle %161 %160 4 5 6 3 
                                                      OpStore %9 %162 
                                       f32_4 %165 = OpLoad %9 
                                       f32_2 %166 = OpVectorShuffle %165 %165 0 1 
                                Private f32* %167 = OpAccessChain %9 %36 
                                         f32 %168 = OpLoad %167 
                                         f32 %169 = OpCompositeExtract %166 0 
                                         f32 %170 = OpCompositeExtract %166 1 
                                       f32_3 %171 = OpCompositeConstruct %169 %170 %168 
                                                      OpStore %164 %171 
                         read_only Texture2D %173 = OpLoad %172 
                                     sampler %175 = OpLoad %174 
                  read_only Texture2DSampled %178 = OpSampledImage %173 %175 
                                       f32_3 %179 = OpLoad %164 
                                         f32 %181 = OpCompositeExtract %179 2 
                                         f32 %182 = OpImageSampleDrefExplicitLod %178 %179 %181 Lod %6 
                                Private f32* %183 = OpAccessChain %9 %27 
                                                      OpStore %183 %182 
                                Uniform f32* %186 = OpAccessChain %63 %87 %27 
                                         f32 %187 = OpLoad %186 
                                         f32 %188 = OpFNegate %187 
                                         f32 %189 = OpFAdd %188 %34 
                                                      OpStore %184 %189 
                                       f32_4 %192 = OpLoad %9 
                                       f32_4 %193 = OpVectorShuffle %192 %192 0 0 0 0 
                                         f32 %194 = OpLoad %184 
                                       f32_4 %195 = OpCompositeConstruct %194 %194 %194 %194 
                                       f32_4 %196 = OpFMul %193 %195 
                              Uniform f32_4* %197 = OpAccessChain %63 %87 
                                       f32_4 %198 = OpLoad %197 
                                       f32_4 %199 = OpVectorShuffle %198 %198 0 0 0 0 
                                       f32_4 %200 = OpFAdd %196 %199 
                                                      OpStore %191 %200 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "SHADOWS_SINGLE_CASCADE" "SHADOWS_SPLIT_SPHERES" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "SHADOWS_SINGLE_CASCADE" "SHADOWS_SPLIT_SPHERES" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraInvProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in  vec4 in_POSITION0;
in  vec2 in_TEXCOORD0;
in  vec3 in_TEXCOORD1;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_CameraInvProjection[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_CameraInvProjection[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    vs_TEXCOORD0.zw = u_xlat1.zz + u_xlat1.xw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = in_TEXCOORD1.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-hlslcc_mtx4x4unity_CameraInvProjection[2].xyz);
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[2].xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;
    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;
    u_xlat1.w = (-u_xlat1.z);
    vs_TEXCOORD2.xyz = u_xlat1.xyw;
    u_xlat0.w = (-u_xlat0.z);
    vs_TEXCOORD3.xyz = u_xlat0.xyw;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_CameraInvProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	vec4 _LightShadowData;
UNITY_LOCATION(0) uniform  sampler2D _CameraDepthTexture;
UNITY_LOCATION(1) uniform  sampler2D _ShadowMapTexture;
UNITY_LOCATION(2) uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
in  vec4 vs_TEXCOORD0;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat2;
void main()
{
    u_xlat0 = texture(_CameraDepthTexture, vs_TEXCOORD0.xy).yzxw;
    u_xlat0.xy = vs_TEXCOORD0.zw;
    u_xlat0.xyz = u_xlat0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_CameraInvProjection[1];
    u_xlat1 = hlslcc_mtx4x4unity_CameraInvProjection[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_CameraInvProjection[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_CameraInvProjection[3];
    u_xlat0.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_CameraToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_CameraToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_CameraToWorld[2] * (-u_xlat0.zzzz) + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_CameraToWorld[3];
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[3].xyz * u_xlat0.www + u_xlat0.xyz;
    vec3 txVec0 = vec3(u_xlat0.xy,u_xlat0.z);
    u_xlat0.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
    u_xlat2 = (-_LightShadowData.x) + 1.0;
    SV_Target0 = u_xlat0.xxxx * vec4(u_xlat2) + _LightShadowData.xxxx;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "SHADOWS_SINGLE_CASCADE" "SHADOWS_SPLIT_SPHERES" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 193
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %80 %119 %129 %134 %136 %177 %184 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpMemberDecorate %78 0 BuiltIn 78 
                                                      OpMemberDecorate %78 1 BuiltIn 78 
                                                      OpMemberDecorate %78 2 BuiltIn 78 
                                                      OpDecorate %78 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 119 
                                                      OpDecorate %129 Location 129 
                                                      OpDecorate vs_TEXCOORD1 Location 134 
                                                      OpDecorate %136 Location 136 
                                                      OpDecorate vs_TEXCOORD2 Location 177 
                                                      OpDecorate vs_TEXCOORD3 Location 184 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %16 %17 %18 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4];}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 2 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %29 = OpConstant 0 
                                          i32 %45 = OpConstant 3 
                               Private f32_4* %49 = OpVariable Private 
                                          u32 %76 = OpConstant 1 
                                              %77 = OpTypeArray %6 %76 
                                              %78 = OpTypeStruct %7 %6 %77 
                                              %79 = OpTypePointer Output %78 
         Output struct {f32_4; f32; f32[1];}* %80 = OpVariable Output 
                                              %82 = OpTypePointer Output %7 
                                              %84 = OpTypePointer Private %6 
                                          u32 %87 = OpConstant 0 
                                              %88 = OpTypePointer Uniform %6 
                                              %93 = OpTypeVector %6 3 
                                          f32 %96 = OpConstant 3.674022E-40 
                                        f32_3 %97 = OpConstantComposite %96 %96 %96 
                                             %101 = OpTypePointer Private %93 
                              Private f32_3* %102 = OpVariable Private 
                       Output f32_4* vs_TEXCOORD0 = OpVariable Output 
                                             %120 = OpTypeVector %6 2 
                                             %128 = OpTypePointer Input %120 
                                Input f32_2* %129 = OpVariable Input 
                                             %133 = OpTypePointer Output %93 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                                             %135 = OpTypePointer Input %93 
                                Input f32_3* %136 = OpVariable Input 
                                         u32 %171 = OpConstant 2 
                                         u32 %175 = OpConstant 3 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                       Output f32_3* vs_TEXCOORD3 = OpVariable Output 
                                             %187 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %30 = OpAccessChain %21 %23 %29 
                                        f32_4 %31 = OpLoad %30 
                                        f32_4 %32 = OpLoad %11 
                                        f32_4 %33 = OpVectorShuffle %32 %32 0 0 0 0 
                                        f32_4 %34 = OpFMul %31 %33 
                                        f32_4 %35 = OpLoad %9 
                                        f32_4 %36 = OpFAdd %34 %35 
                                                      OpStore %9 %36 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %23 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %44 = OpLoad %9 
                               Uniform f32_4* %46 = OpAccessChain %21 %23 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_4 %48 = OpFAdd %44 %47 
                                                      OpStore %9 %48 
                                        f32_4 %50 = OpLoad %9 
                                        f32_4 %51 = OpVectorShuffle %50 %50 1 1 1 1 
                               Uniform f32_4* %52 = OpAccessChain %21 %45 %24 
                                        f32_4 %53 = OpLoad %52 
                                        f32_4 %54 = OpFMul %51 %53 
                                                      OpStore %49 %54 
                               Uniform f32_4* %55 = OpAccessChain %21 %45 %29 
                                        f32_4 %56 = OpLoad %55 
                                        f32_4 %57 = OpLoad %9 
                                        f32_4 %58 = OpVectorShuffle %57 %57 0 0 0 0 
                                        f32_4 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %49 
                                        f32_4 %61 = OpFAdd %59 %60 
                                                      OpStore %49 %61 
                               Uniform f32_4* %62 = OpAccessChain %21 %45 %23 
                                        f32_4 %63 = OpLoad %62 
                                        f32_4 %64 = OpLoad %9 
                                        f32_4 %65 = OpVectorShuffle %64 %64 2 2 2 2 
                                        f32_4 %66 = OpFMul %63 %65 
                                        f32_4 %67 = OpLoad %49 
                                        f32_4 %68 = OpFAdd %66 %67 
                                                      OpStore %49 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %45 %45 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %9 
                                        f32_4 %72 = OpVectorShuffle %71 %71 3 3 3 3 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %49 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %9 %75 
                                        f32_4 %81 = OpLoad %9 
                                Output f32_4* %83 = OpAccessChain %80 %29 
                                                      OpStore %83 %81 
                                 Private f32* %85 = OpAccessChain %9 %76 
                                          f32 %86 = OpLoad %85 
                                 Uniform f32* %89 = OpAccessChain %21 %29 %87 
                                          f32 %90 = OpLoad %89 
                                          f32 %91 = OpFMul %86 %90 
                                 Private f32* %92 = OpAccessChain %9 %76 
                                                      OpStore %92 %91 
                                        f32_4 %94 = OpLoad %9 
                                        f32_3 %95 = OpVectorShuffle %94 %94 0 3 1 
                                        f32_3 %98 = OpFMul %95 %97 
                                        f32_4 %99 = OpLoad %49 
                                       f32_4 %100 = OpVectorShuffle %99 %98 4 1 5 6 
                                                      OpStore %49 %100 
                                       f32_4 %103 = OpLoad %9 
                                       f32_3 %104 = OpVectorShuffle %103 %103 1 1 1 
                              Uniform f32_4* %105 = OpAccessChain %21 %24 %24 
                                       f32_4 %106 = OpLoad %105 
                                       f32_3 %107 = OpVectorShuffle %106 %106 0 1 2 
                                       f32_3 %108 = OpFMul %104 %107 
                                                      OpStore %102 %108 
                              Uniform f32_4* %109 = OpAccessChain %21 %24 %29 
                                       f32_4 %110 = OpLoad %109 
                                       f32_3 %111 = OpVectorShuffle %110 %110 0 1 2 
                                       f32_4 %112 = OpLoad %9 
                                       f32_3 %113 = OpVectorShuffle %112 %112 0 0 0 
                                       f32_3 %114 = OpFMul %111 %113 
                                       f32_3 %115 = OpLoad %102 
                                       f32_3 %116 = OpFAdd %114 %115 
                                       f32_4 %117 = OpLoad %9 
                                       f32_4 %118 = OpVectorShuffle %117 %116 4 5 6 3 
                                                      OpStore %9 %118 
                                       f32_4 %121 = OpLoad %49 
                                       f32_2 %122 = OpVectorShuffle %121 %121 2 2 
                                       f32_4 %123 = OpLoad %49 
                                       f32_2 %124 = OpVectorShuffle %123 %123 0 3 
                                       f32_2 %125 = OpFAdd %122 %124 
                                       f32_4 %126 = OpLoad vs_TEXCOORD0 
                                       f32_4 %127 = OpVectorShuffle %126 %125 0 1 4 5 
                                                      OpStore vs_TEXCOORD0 %127 
                                       f32_2 %130 = OpLoad %129 
                                       f32_4 %131 = OpLoad vs_TEXCOORD0 
                                       f32_4 %132 = OpVectorShuffle %131 %130 4 5 2 3 
                                                      OpStore vs_TEXCOORD0 %132 
                                       f32_3 %137 = OpLoad %136 
                                                      OpStore vs_TEXCOORD1 %137 
                                       f32_4 %138 = OpLoad %9 
                                       f32_3 %139 = OpVectorShuffle %138 %138 0 1 2 
                              Uniform f32_4* %140 = OpAccessChain %21 %24 %23 
                                       f32_4 %141 = OpLoad %140 
                                       f32_3 %142 = OpVectorShuffle %141 %141 0 1 2 
                                       f32_3 %143 = OpFNegate %142 
                                       f32_3 %144 = OpFAdd %139 %143 
                                       f32_4 %145 = OpLoad %49 
                                       f32_4 %146 = OpVectorShuffle %145 %144 4 5 6 3 
                                                      OpStore %49 %146 
                                       f32_4 %147 = OpLoad %9 
                                       f32_3 %148 = OpVectorShuffle %147 %147 0 1 2 
                              Uniform f32_4* %149 = OpAccessChain %21 %24 %23 
                                       f32_4 %150 = OpLoad %149 
                                       f32_3 %151 = OpVectorShuffle %150 %150 0 1 2 
                                       f32_3 %152 = OpFAdd %148 %151 
                                       f32_4 %153 = OpLoad %9 
                                       f32_4 %154 = OpVectorShuffle %153 %152 4 5 6 3 
                                                      OpStore %9 %154 
                                       f32_4 %155 = OpLoad %9 
                                       f32_3 %156 = OpVectorShuffle %155 %155 0 1 2 
                              Uniform f32_4* %157 = OpAccessChain %21 %24 %45 
                                       f32_4 %158 = OpLoad %157 
                                       f32_3 %159 = OpVectorShuffle %158 %158 0 1 2 
                                       f32_3 %160 = OpFAdd %156 %159 
                                       f32_4 %161 = OpLoad %9 
                                       f32_4 %162 = OpVectorShuffle %161 %160 4 5 6 3 
                                                      OpStore %9 %162 
                                       f32_4 %163 = OpLoad %49 
                                       f32_3 %164 = OpVectorShuffle %163 %163 0 1 2 
                              Uniform f32_4* %165 = OpAccessChain %21 %24 %45 
                                       f32_4 %166 = OpLoad %165 
                                       f32_3 %167 = OpVectorShuffle %166 %166 0 1 2 
                                       f32_3 %168 = OpFAdd %164 %167 
                                       f32_4 %169 = OpLoad %49 
                                       f32_4 %170 = OpVectorShuffle %169 %168 4 5 6 3 
                                                      OpStore %49 %170 
                                Private f32* %172 = OpAccessChain %49 %171 
                                         f32 %173 = OpLoad %172 
                                         f32 %174 = OpFNegate %173 
                                Private f32* %176 = OpAccessChain %49 %175 
                                                      OpStore %176 %174 
                                       f32_4 %178 = OpLoad %49 
                                       f32_3 %179 = OpVectorShuffle %178 %178 0 1 3 
                                                      OpStore vs_TEXCOORD2 %179 
                                Private f32* %180 = OpAccessChain %9 %171 
                                         f32 %181 = OpLoad %180 
                                         f32 %182 = OpFNegate %181 
                                Private f32* %183 = OpAccessChain %9 %175 
                                                      OpStore %183 %182 
                                       f32_4 %185 = OpLoad %9 
                                       f32_3 %186 = OpVectorShuffle %185 %185 0 1 3 
                                                      OpStore vs_TEXCOORD3 %186 
                                 Output f32* %188 = OpAccessChain %80 %29 %76 
                                         f32 %189 = OpLoad %188 
                                         f32 %190 = OpFNegate %189 
                                 Output f32* %191 = OpAccessChain %80 %29 %76 
                                                      OpStore %191 %190 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 202
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %21 %191 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpDecorate %12 DescriptorSet 12 
                                                      OpDecorate %12 Binding 12 
                                                      OpDecorate %16 DescriptorSet 16 
                                                      OpDecorate %16 Binding 16 
                                                      OpDecorate vs_TEXCOORD0 Location 21 
                                                      OpDecorate %57 ArrayStride 57 
                                                      OpDecorate %58 ArrayStride 58 
                                                      OpDecorate %60 ArrayStride 60 
                                                      OpMemberDecorate %61 0 Offset 61 
                                                      OpMemberDecorate %61 1 Offset 61 
                                                      OpMemberDecorate %61 2 Offset 61 
                                                      OpMemberDecorate %61 3 Offset 61 
                                                      OpDecorate %61 Block 
                                                      OpDecorate %63 DescriptorSet 63 
                                                      OpDecorate %63 Binding 63 
                                                      OpDecorate %172 DescriptorSet 172 
                                                      OpDecorate %172 Binding 172 
                                                      OpDecorate %174 DescriptorSet 174 
                                                      OpDecorate %174 Binding 174 
                                                      OpDecorate %191 Location 191 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypePointer UniformConstant %10 
         UniformConstant read_only Texture2D* %12 = OpVariable UniformConstant 
                                              %14 = OpTypeSampler 
                                              %15 = OpTypePointer UniformConstant %14 
                     UniformConstant sampler* %16 = OpVariable UniformConstant 
                                              %18 = OpTypeSampledImage %10 
                                              %20 = OpTypePointer Input %7 
                        Input f32_4* vs_TEXCOORD0 = OpVariable Input 
                                              %22 = OpTypeVector %6 2 
                                              %26 = OpTypeInt 32 0 
                                          u32 %27 = OpConstant 0 
                                              %29 = OpTypePointer Private %6 
                                          f32 %34 = OpConstant 3.674022E-40 
                                          u32 %36 = OpConstant 2 
                                              %42 = OpTypeVector %6 3 
                                          f32 %45 = OpConstant 3.674022E-40 
                                        f32_3 %46 = OpConstantComposite %45 %45 %45 
                                          f32 %48 = OpConstant 3.674022E-40 
                                        f32_3 %49 = OpConstantComposite %48 %48 %48 
                               Private f32_4* %53 = OpVariable Private 
                                          u32 %56 = OpConstant 4 
                                              %57 = OpTypeArray %7 %56 
                                              %58 = OpTypeArray %7 %56 
                                          u32 %59 = OpConstant 16 
                                              %60 = OpTypeArray %7 %59 
                                              %61 = OpTypeStruct %57 %58 %60 %7 
                                              %62 = OpTypePointer Uniform %61 
Uniform struct {f32_4[4]; f32_4[4]; f32_4[16]; f32_4;}* %63 = OpVariable Uniform 
                                              %64 = OpTypeInt 32 1 
                                          i32 %65 = OpConstant 0 
                                          i32 %66 = OpConstant 1 
                                              %67 = OpTypePointer Uniform %7 
                                          i32 %78 = OpConstant 2 
                                          i32 %87 = OpConstant 3 
                                             %163 = OpTypePointer Function %42 
        UniformConstant read_only Texture2D* %172 = OpVariable UniformConstant 
                    UniformConstant sampler* %174 = OpVariable UniformConstant 
                                             %176 = OpTypeImage %6 Dim2D 1 0 0 1 Unknown 
                                             %177 = OpTypeSampledImage %176 
                                         f32 %180 = OpConstant 3.674022E-40 
                                Private f32* %184 = OpVariable Private 
                                             %185 = OpTypePointer Uniform %6 
                                             %190 = OpTypePointer Output %7 
                               Output f32_4* %191 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %164 = OpVariable Function 
                          read_only Texture2D %13 = OpLoad %12 
                                      sampler %17 = OpLoad %16 
                   read_only Texture2DSampled %19 = OpSampledImage %13 %17 
                                        f32_4 %23 = OpLoad vs_TEXCOORD0 
                                        f32_2 %24 = OpVectorShuffle %23 %23 0 1 
                                        f32_4 %25 = OpImageSampleImplicitLod %19 %24 
                                          f32 %28 = OpCompositeExtract %25 0 
                                 Private f32* %30 = OpAccessChain %9 %27 
                                                      OpStore %30 %28 
                                 Private f32* %31 = OpAccessChain %9 %27 
                                          f32 %32 = OpLoad %31 
                                          f32 %33 = OpFNegate %32 
                                          f32 %35 = OpFAdd %33 %34 
                                 Private f32* %37 = OpAccessChain %9 %36 
                                                      OpStore %37 %35 
                                        f32_4 %38 = OpLoad vs_TEXCOORD0 
                                        f32_2 %39 = OpVectorShuffle %38 %38 2 3 
                                        f32_4 %40 = OpLoad %9 
                                        f32_4 %41 = OpVectorShuffle %40 %39 4 5 2 3 
                                                      OpStore %9 %41 
                                        f32_4 %43 = OpLoad %9 
                                        f32_3 %44 = OpVectorShuffle %43 %43 0 1 2 
                                        f32_3 %47 = OpFMul %44 %46 
                                        f32_3 %50 = OpFAdd %47 %49 
                                        f32_4 %51 = OpLoad %9 
                                        f32_4 %52 = OpVectorShuffle %51 %50 4 5 6 3 
                                                      OpStore %9 %52 
                                        f32_4 %54 = OpLoad %9 
                                        f32_4 %55 = OpVectorShuffle %54 %54 1 1 1 1 
                               Uniform f32_4* %68 = OpAccessChain %63 %65 %66 
                                        f32_4 %69 = OpLoad %68 
                                        f32_4 %70 = OpFMul %55 %69 
                                                      OpStore %53 %70 
                               Uniform f32_4* %71 = OpAccessChain %63 %65 %65 
                                        f32_4 %72 = OpLoad %71 
                                        f32_4 %73 = OpLoad %9 
                                        f32_4 %74 = OpVectorShuffle %73 %73 0 0 0 0 
                                        f32_4 %75 = OpFMul %72 %74 
                                        f32_4 %76 = OpLoad %53 
                                        f32_4 %77 = OpFAdd %75 %76 
                                                      OpStore %53 %77 
                               Uniform f32_4* %79 = OpAccessChain %63 %65 %78 
                                        f32_4 %80 = OpLoad %79 
                                        f32_4 %81 = OpLoad %9 
                                        f32_4 %82 = OpVectorShuffle %81 %81 2 2 2 2 
                                        f32_4 %83 = OpFMul %80 %82 
                                        f32_4 %84 = OpLoad %53 
                                        f32_4 %85 = OpFAdd %83 %84 
                                                      OpStore %9 %85 
                                        f32_4 %86 = OpLoad %9 
                               Uniform f32_4* %88 = OpAccessChain %63 %65 %87 
                                        f32_4 %89 = OpLoad %88 
                                        f32_4 %90 = OpFAdd %86 %89 
                                                      OpStore %9 %90 
                                        f32_4 %91 = OpLoad %9 
                                        f32_3 %92 = OpVectorShuffle %91 %91 0 1 2 
                                        f32_4 %93 = OpLoad %9 
                                        f32_3 %94 = OpVectorShuffle %93 %93 3 3 3 
                                        f32_3 %95 = OpFDiv %92 %94 
                                        f32_4 %96 = OpLoad %9 
                                        f32_4 %97 = OpVectorShuffle %96 %95 4 5 6 3 
                                                      OpStore %9 %97 
                                        f32_4 %98 = OpLoad %9 
                                        f32_4 %99 = OpVectorShuffle %98 %98 1 1 1 1 
                              Uniform f32_4* %100 = OpAccessChain %63 %66 %66 
                                       f32_4 %101 = OpLoad %100 
                                       f32_4 %102 = OpFMul %99 %101 
                                                      OpStore %53 %102 
                              Uniform f32_4* %103 = OpAccessChain %63 %66 %65 
                                       f32_4 %104 = OpLoad %103 
                                       f32_4 %105 = OpLoad %9 
                                       f32_4 %106 = OpVectorShuffle %105 %105 0 0 0 0 
                                       f32_4 %107 = OpFMul %104 %106 
                                       f32_4 %108 = OpLoad %53 
                                       f32_4 %109 = OpFAdd %107 %108 
                                                      OpStore %53 %109 
                              Uniform f32_4* %110 = OpAccessChain %63 %66 %78 
                                       f32_4 %111 = OpLoad %110 
                                       f32_4 %112 = OpLoad %9 
                                       f32_4 %113 = OpVectorShuffle %112 %112 2 2 2 2 
                                       f32_4 %114 = OpFNegate %113 
                                       f32_4 %115 = OpFMul %111 %114 
                                       f32_4 %116 = OpLoad %53 
                                       f32_4 %117 = OpFAdd %115 %116 
                                                      OpStore %9 %117 
                                       f32_4 %118 = OpLoad %9 
                              Uniform f32_4* %119 = OpAccessChain %63 %66 %87 
                                       f32_4 %120 = OpLoad %119 
                                       f32_4 %121 = OpFAdd %118 %120 
                                                      OpStore %9 %121 
                                       f32_4 %122 = OpLoad %9 
                                       f32_3 %123 = OpVectorShuffle %122 %122 1 1 1 
                              Uniform f32_4* %124 = OpAccessChain %63 %78 %66 
                                       f32_4 %125 = OpLoad %124 
                                       f32_3 %126 = OpVectorShuffle %125 %125 0 1 2 
                                       f32_3 %127 = OpFMul %123 %126 
                                       f32_4 %128 = OpLoad %53 
                                       f32_4 %129 = OpVectorShuffle %128 %127 4 5 6 3 
                                                      OpStore %53 %129 
                              Uniform f32_4* %130 = OpAccessChain %63 %78 %65 
                                       f32_4 %131 = OpLoad %130 
                                       f32_3 %132 = OpVectorShuffle %131 %131 0 1 2 
                                       f32_4 %133 = OpLoad %9 
                                       f32_3 %134 = OpVectorShuffle %133 %133 0 0 0 
                                       f32_3 %135 = OpFMul %132 %134 
                                       f32_4 %136 = OpLoad %53 
                                       f32_3 %137 = OpVectorShuffle %136 %136 0 1 2 
                                       f32_3 %138 = OpFAdd %135 %137 
                                       f32_4 %139 = OpLoad %53 
                                       f32_4 %140 = OpVectorShuffle %139 %138 4 5 6 3 
                                                      OpStore %53 %140 
                              Uniform f32_4* %141 = OpAccessChain %63 %78 %78 
                                       f32_4 %142 = OpLoad %141 
                                       f32_3 %143 = OpVectorShuffle %142 %142 0 1 2 
                                       f32_4 %144 = OpLoad %9 
                                       f32_3 %145 = OpVectorShuffle %144 %144 2 2 2 
                                       f32_3 %146 = OpFMul %143 %145 
                                       f32_4 %147 = OpLoad %53 
                                       f32_3 %148 = OpVectorShuffle %147 %147 0 1 2 
                                       f32_3 %149 = OpFAdd %146 %148 
                                       f32_4 %150 = OpLoad %9 
                                       f32_4 %151 = OpVectorShuffle %150 %149 4 5 6 3 
                                                      OpStore %9 %151 
                              Uniform f32_4* %152 = OpAccessChain %63 %78 %87 
                                       f32_4 %153 = OpLoad %152 
                                       f32_3 %154 = OpVectorShuffle %153 %153 0 1 2 
                                       f32_4 %155 = OpLoad %9 
                                       f32_3 %156 = OpVectorShuffle %155 %155 3 3 3 
                                       f32_3 %157 = OpFMul %154 %156 
                                       f32_4 %158 = OpLoad %9 
                                       f32_3 %159 = OpVectorShuffle %158 %158 0 1 2 
                                       f32_3 %160 = OpFAdd %157 %159 
                                       f32_4 %161 = OpLoad %9 
                                       f32_4 %162 = OpVectorShuffle %161 %160 4 5 6 3 
                                                      OpStore %9 %162 
                                       f32_4 %165 = OpLoad %9 
                                       f32_2 %166 = OpVectorShuffle %165 %165 0 1 
                                Private f32* %167 = OpAccessChain %9 %36 
                                         f32 %168 = OpLoad %167 
                                         f32 %169 = OpCompositeExtract %166 0 
                                         f32 %170 = OpCompositeExtract %166 1 
                                       f32_3 %171 = OpCompositeConstruct %169 %170 %168 
                                                      OpStore %164 %171 
                         read_only Texture2D %173 = OpLoad %172 
                                     sampler %175 = OpLoad %174 
                  read_only Texture2DSampled %178 = OpSampledImage %173 %175 
                                       f32_3 %179 = OpLoad %164 
                                         f32 %181 = OpCompositeExtract %179 2 
                                         f32 %182 = OpImageSampleDrefExplicitLod %178 %179 %181 Lod %6 
                                Private f32* %183 = OpAccessChain %9 %27 
                                                      OpStore %183 %182 
                                Uniform f32* %186 = OpAccessChain %63 %87 %27 
                                         f32 %187 = OpLoad %186 
                                         f32 %188 = OpFNegate %187 
                                         f32 %189 = OpFAdd %188 %34 
                                                      OpStore %184 %189 
                                       f32_4 %192 = OpLoad %9 
                                       f32_4 %193 = OpVectorShuffle %192 %192 0 0 0 0 
                                         f32 %194 = OpLoad %184 
                                       f32_4 %195 = OpCompositeConstruct %194 %194 %194 %194 
                                       f32_4 %196 = OpFMul %193 %195 
                              Uniform f32_4* %197 = OpAccessChain %63 %87 
                                       f32_4 %198 = OpLoad %197 
                                       f32_4 %199 = OpVectorShuffle %198 %198 0 0 0 0 
                                       f32_4 %200 = OpFAdd %196 %199 
                                                      OpStore %191 %200 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
}
Program "fp" {
SubProgram "d3d11 " {
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
""
}
SubProgram "vulkan " {
""
}
SubProgram "d3d11 " {
Keywords { "SHADOWS_SPLIT_SPHERES" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "SHADOWS_SPLIT_SPHERES" }
""
}
SubProgram "vulkan " {
Keywords { "SHADOWS_SPLIT_SPHERES" }
""
}
SubProgram "d3d11 " {
Keywords { "SHADOWS_SINGLE_CASCADE" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "SHADOWS_SINGLE_CASCADE" }
""
}
SubProgram "vulkan " {
Keywords { "SHADOWS_SINGLE_CASCADE" }
""
}
SubProgram "d3d11 " {
Keywords { "SHADOWS_SINGLE_CASCADE" "SHADOWS_SPLIT_SPHERES" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "SHADOWS_SINGLE_CASCADE" "SHADOWS_SPLIT_SPHERES" }
""
}
SubProgram "vulkan " {
Keywords { "SHADOWS_SINGLE_CASCADE" "SHADOWS_SPLIT_SPHERES" }
""
}
}
}
}
SubShader {
 Tags { "ShadowmapFilter" = "PCF_SOFT" }
 Pass {
  Tags { "ShadowmapFilter" = "PCF_SOFT" }
  ZTest Always
  ZWrite Off
  Cull Off
  GpuProgramID 180047
Program "vp" {
SubProgram "d3d11 " {
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraInvProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in  vec4 in_POSITION0;
in  vec2 in_TEXCOORD0;
in  vec3 in_TEXCOORD1;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_CameraInvProjection[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_CameraInvProjection[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    vs_TEXCOORD0.zw = u_xlat1.zz + u_xlat1.xw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = in_TEXCOORD1.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-hlslcc_mtx4x4unity_CameraInvProjection[2].xyz);
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[2].xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;
    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;
    u_xlat1.w = (-u_xlat1.z);
    vs_TEXCOORD2.xyz = u_xlat1.xyw;
    u_xlat0.w = (-u_xlat0.z);
    vs_TEXCOORD3.xyz = u_xlat0.xyw;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	vec4 _LightShadowData;
uniform 	vec4 _ShadowMapTexture_TexelSize;
UNITY_LOCATION(0) uniform  sampler2D _CameraDepthTexture;
UNITY_LOCATION(1) uniform  sampler2D _ShadowMapTexture;
UNITY_LOCATION(2) uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec3 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD3;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
bvec4 u_xlatb1;
vec4 u_xlat2;
bvec4 u_xlatb2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
vec4 u_xlat6;
vec4 u_xlat7;
vec3 u_xlat8;
float u_xlat16;
vec2 u_xlat17;
float u_xlat24;
void main()
{
    u_xlat0 = texture(_CameraDepthTexture, vs_TEXCOORD0.xy);
    u_xlat8.x = _ZBufferParams.x * u_xlat0.x + _ZBufferParams.y;
    u_xlat8.x = float(1.0) / u_xlat8.x;
    u_xlat16 = (-u_xlat8.x) + u_xlat0.x;
    u_xlat8.x = unity_OrthoParams.w * u_xlat16 + u_xlat8.x;
    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + vs_TEXCOORD3.xyz;
    u_xlat0.xzw = u_xlat0.xxx * u_xlat1.xyz + vs_TEXCOORD2.xyz;
    u_xlat0.xzw = (-vs_TEXCOORD1.xyz) * u_xlat8.xxx + u_xlat0.xzw;
    u_xlat1.xyz = u_xlat8.xxx * vs_TEXCOORD1.xyz;
    u_xlat0.xyz = unity_OrthoParams.www * u_xlat0.xzw + u_xlat1.xyz;
    u_xlatb1 = greaterThanEqual(u_xlat0.zzzz, _LightSplitsNear);
    u_xlat1.x = u_xlatb1.x ? float(1.0) : 0.0;
    u_xlat1.y = u_xlatb1.y ? float(1.0) : 0.0;
    u_xlat1.z = u_xlatb1.z ? float(1.0) : 0.0;
    u_xlat1.w = u_xlatb1.w ? float(1.0) : 0.0;
;
    u_xlatb2 = lessThan(u_xlat0.zzzz, _LightSplitsFar);
    u_xlat2.x = u_xlatb2.x ? float(1.0) : 0.0;
    u_xlat2.y = u_xlatb2.y ? float(1.0) : 0.0;
    u_xlat2.z = u_xlatb2.z ? float(1.0) : 0.0;
    u_xlat2.w = u_xlatb2.w ? float(1.0) : 0.0;
;
    u_xlat1 = u_xlat1 * u_xlat2;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4unity_CameraToWorld[1];
    u_xlat2 = hlslcc_mtx4x4unity_CameraToWorld[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4unity_CameraToWorld[2] * u_xlat0.zzzz + u_xlat2;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_CameraToWorld[3];
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[5].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[4].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[6].xyz * u_xlat0.zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[7].xyz * u_xlat0.www + u_xlat2.xyz;
    u_xlat2.xyz = u_xlat1.yyy * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * u_xlat0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * u_xlat0.zzz + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[3].xyz * u_xlat0.www + u_xlat3.xyz;
    u_xlat2.xyz = u_xlat3.xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat3.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[9].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[8].xyz * u_xlat0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[10].xyz * u_xlat0.zzz + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[11].xyz * u_xlat0.www + u_xlat3.xyz;
    u_xlat1.xyz = u_xlat3.xyz * u_xlat1.zzz + u_xlat2.xyz;
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[13].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[12].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[14].xyz * u_xlat0.zzz + u_xlat2.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[15].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat1.xy = u_xlat0.xy * _ShadowMapTexture_TexelSize.zw + vec2(0.5, 0.5);
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlat0.xy = u_xlat0.xy * _ShadowMapTexture_TexelSize.zw + (-u_xlat1.xy);
    u_xlat17.xy = (-u_xlat0.xy) + vec2(1.0, 1.0);
    u_xlat2.xy = min(u_xlat0.xy, vec2(0.0, 0.0));
    u_xlat17.xy = (-u_xlat2.xy) * u_xlat2.xy + u_xlat17.xy;
    u_xlat17.xy = u_xlat17.xy + vec2(2.0, 2.0);
    u_xlat2.xy = u_xlat17.xy * vec2(0.0816320032, 0.0816320032);
    u_xlat3.y = u_xlat2.x;
    u_xlat17.xy = max(u_xlat0.xy, vec2(0.0, 0.0));
    u_xlat4 = u_xlat0.xxyy + vec4(0.5, 1.0, 0.5, 1.0);
    u_xlat17.xy = (-u_xlat17.xy) * u_xlat17.xy + u_xlat4.yw;
    u_xlat4 = u_xlat4.xxzz * u_xlat4.xxzz;
    u_xlat17.xy = u_xlat17.xy + vec2(2.0, 2.0);
    u_xlat5.z = u_xlat17.x * 0.0816320032;
    u_xlat6.z = u_xlat17.y * 0.0816320032;
    u_xlat17.xy = u_xlat4.xz * vec2(0.5, 0.5) + (-u_xlat0.xy);
    u_xlat4.xy = u_xlat4.yw * vec2(0.0408160016, 0.0408160016);
    u_xlat6.xy = u_xlat17.yx * vec2(0.0816320032, 0.0816320032);
    u_xlat5.x = u_xlat6.y;
    u_xlat5.yw = u_xlat0.xx * vec2(-0.0816320032, 0.0816320032) + vec2(0.163264006, 0.0816320032);
    u_xlat3.xz = u_xlat0.xx * vec2(-0.0816320032, 0.0816320032) + vec2(0.0816320032, 0.163264006);
    u_xlat3.w = u_xlat4.x;
    u_xlat2.w = u_xlat4.y;
    u_xlat4 = u_xlat3 + u_xlat5;
    u_xlat3 = u_xlat3 / u_xlat4;
    u_xlat3 = u_xlat3 + vec4(-3.5, -1.5, 0.5, 2.5);
    u_xlat3 = u_xlat3.wxyz * _ShadowMapTexture_TexelSize.xxxx;
    u_xlat5.xzw = u_xlat3.yzw;
    u_xlat6.yw = u_xlat0.yy * vec2(-0.0816320032, 0.0816320032) + vec2(0.163264006, 0.0816320032);
    u_xlat2.xz = u_xlat0.yy * vec2(-0.0816320032, 0.0816320032) + vec2(0.0816320032, 0.163264006);
    u_xlat6 = u_xlat2 + u_xlat6;
    u_xlat2 = u_xlat2 / u_xlat6;
    u_xlat2 = u_xlat2 + vec4(-3.5, -1.5, 0.5, 2.5);
    u_xlat2 = u_xlat2.xwyz * _ShadowMapTexture_TexelSize.yyyy;
    u_xlat5.y = u_xlat2.x;
    u_xlat7 = u_xlat1.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat5.xyzy;
    vec3 txVec0 = vec3(u_xlat7.zw,u_xlat0.z);
    u_xlat0.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
    vec3 txVec1 = vec3(u_xlat7.xy,u_xlat0.z);
    u_xlat8.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec1, 0.0);
    u_xlat7 = u_xlat4 * u_xlat6.xxxx;
    u_xlat0.x = u_xlat0.x * u_xlat7.y;
    u_xlat0.x = u_xlat7.x * u_xlat8.x + u_xlat0.x;
    u_xlat8.xz = u_xlat1.xy * _ShadowMapTexture_TexelSize.xy + u_xlat5.wy;
    u_xlat3.y = u_xlat5.y;
    u_xlat17.xy = u_xlat1.xy * _ShadowMapTexture_TexelSize.xy + u_xlat3.xy;
    vec3 txVec2 = vec3(u_xlat17.xy,u_xlat0.z);
    u_xlat17.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec2, 0.0);
    vec3 txVec3 = vec3(u_xlat8.xz,u_xlat0.z);
    u_xlat8.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec3, 0.0);
    u_xlat0.x = u_xlat7.z * u_xlat8.x + u_xlat0.x;
    u_xlat0.x = u_xlat7.w * u_xlat17.x + u_xlat0.x;
    u_xlat5.y = u_xlat2.z;
    u_xlat7 = u_xlat1.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat5.xyzy;
    vec3 txVec4 = vec3(u_xlat7.xy,u_xlat0.z);
    u_xlat8.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec4, 0.0);
    vec3 txVec5 = vec3(u_xlat7.zw,u_xlat0.z);
    u_xlat24 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec5, 0.0);
    u_xlat7 = u_xlat4 * u_xlat6.yyyy;
    u_xlat0.x = u_xlat7.x * u_xlat8.x + u_xlat0.x;
    u_xlat0.x = u_xlat7.y * u_xlat24 + u_xlat0.x;
    u_xlat8.xz = u_xlat1.xy * _ShadowMapTexture_TexelSize.xy + u_xlat5.wy;
    u_xlat3.z = u_xlat5.y;
    u_xlat17.xy = u_xlat1.xy * _ShadowMapTexture_TexelSize.xy + u_xlat3.xz;
    vec3 txVec6 = vec3(u_xlat17.xy,u_xlat0.z);
    u_xlat17.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec6, 0.0);
    vec3 txVec7 = vec3(u_xlat8.xz,u_xlat0.z);
    u_xlat8.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec7, 0.0);
    u_xlat0.x = u_xlat7.z * u_xlat8.x + u_xlat0.x;
    u_xlat0.x = u_xlat7.w * u_xlat17.x + u_xlat0.x;
    u_xlat5.y = u_xlat2.w;
    u_xlat7 = u_xlat1.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat5.xyzy;
    vec3 txVec8 = vec3(u_xlat7.xy,u_xlat0.z);
    u_xlat8.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec8, 0.0);
    vec3 txVec9 = vec3(u_xlat7.zw,u_xlat0.z);
    u_xlat24 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec9, 0.0);
    u_xlat7 = u_xlat4 * u_xlat6.zzzz;
    u_xlat4 = u_xlat4 * u_xlat6.wwww;
    u_xlat0.x = u_xlat7.x * u_xlat8.x + u_xlat0.x;
    u_xlat0.x = u_xlat7.y * u_xlat24 + u_xlat0.x;
    u_xlat8.xz = u_xlat1.xy * _ShadowMapTexture_TexelSize.xy + u_xlat5.wy;
    u_xlat2.xzw = u_xlat5.xzw;
    u_xlat3.w = u_xlat5.y;
    u_xlat17.xy = u_xlat1.xy * _ShadowMapTexture_TexelSize.xy + u_xlat3.xw;
    vec3 txVec10 = vec3(u_xlat17.xy,u_xlat0.z);
    u_xlat17.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec10, 0.0);
    vec3 txVec11 = vec3(u_xlat8.xz,u_xlat0.z);
    u_xlat8.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec11, 0.0);
    u_xlat0.x = u_xlat7.z * u_xlat8.x + u_xlat0.x;
    u_xlat0.x = u_xlat7.w * u_xlat17.x + u_xlat0.x;
    u_xlat5 = u_xlat1.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat2.xyzy;
    u_xlat8.xz = u_xlat1.xy * _ShadowMapTexture_TexelSize.xy + u_xlat2.wy;
    u_xlat3.y = u_xlat2.y;
    u_xlat1.xy = u_xlat1.xy * _ShadowMapTexture_TexelSize.xy + u_xlat3.xy;
    vec3 txVec12 = vec3(u_xlat1.xy,u_xlat0.z);
    u_xlat1.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec12, 0.0);
    vec3 txVec13 = vec3(u_xlat8.xz,u_xlat0.z);
    u_xlat8.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec13, 0.0);
    vec3 txVec14 = vec3(u_xlat5.xy,u_xlat0.z);
    u_xlat24 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec14, 0.0);
    vec3 txVec15 = vec3(u_xlat5.zw,u_xlat0.z);
    u_xlat16 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec15, 0.0);
    u_xlat0.x = u_xlat4.x * u_xlat24 + u_xlat0.x;
    u_xlat0.x = u_xlat4.y * u_xlat16 + u_xlat0.x;
    u_xlat0.x = u_xlat4.z * u_xlat8.x + u_xlat0.x;
    u_xlat0.x = u_xlat4.w * u_xlat1.x + u_xlat0.x;
    u_xlat8.x = (-_LightShadowData.x) + 1.0;
    SV_Target0 = u_xlat0.xxxx * u_xlat8.xxxx + _LightShadowData.xxxx;
    return;
}

#endif
"
}
SubProgram "vulkan " {
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 193
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %80 %119 %129 %134 %136 %177 %184 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpMemberDecorate %78 0 BuiltIn 78 
                                                      OpMemberDecorate %78 1 BuiltIn 78 
                                                      OpMemberDecorate %78 2 BuiltIn 78 
                                                      OpDecorate %78 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 119 
                                                      OpDecorate %129 Location 129 
                                                      OpDecorate vs_TEXCOORD1 Location 134 
                                                      OpDecorate %136 Location 136 
                                                      OpDecorate vs_TEXCOORD2 Location 177 
                                                      OpDecorate vs_TEXCOORD3 Location 184 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %16 %17 %18 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4];}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 2 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %29 = OpConstant 0 
                                          i32 %45 = OpConstant 3 
                               Private f32_4* %49 = OpVariable Private 
                                          u32 %76 = OpConstant 1 
                                              %77 = OpTypeArray %6 %76 
                                              %78 = OpTypeStruct %7 %6 %77 
                                              %79 = OpTypePointer Output %78 
         Output struct {f32_4; f32; f32[1];}* %80 = OpVariable Output 
                                              %82 = OpTypePointer Output %7 
                                              %84 = OpTypePointer Private %6 
                                          u32 %87 = OpConstant 0 
                                              %88 = OpTypePointer Uniform %6 
                                              %93 = OpTypeVector %6 3 
                                          f32 %96 = OpConstant 3.674022E-40 
                                        f32_3 %97 = OpConstantComposite %96 %96 %96 
                                             %101 = OpTypePointer Private %93 
                              Private f32_3* %102 = OpVariable Private 
                       Output f32_4* vs_TEXCOORD0 = OpVariable Output 
                                             %120 = OpTypeVector %6 2 
                                             %128 = OpTypePointer Input %120 
                                Input f32_2* %129 = OpVariable Input 
                                             %133 = OpTypePointer Output %93 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                                             %135 = OpTypePointer Input %93 
                                Input f32_3* %136 = OpVariable Input 
                                         u32 %171 = OpConstant 2 
                                         u32 %175 = OpConstant 3 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                       Output f32_3* vs_TEXCOORD3 = OpVariable Output 
                                             %187 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %30 = OpAccessChain %21 %23 %29 
                                        f32_4 %31 = OpLoad %30 
                                        f32_4 %32 = OpLoad %11 
                                        f32_4 %33 = OpVectorShuffle %32 %32 0 0 0 0 
                                        f32_4 %34 = OpFMul %31 %33 
                                        f32_4 %35 = OpLoad %9 
                                        f32_4 %36 = OpFAdd %34 %35 
                                                      OpStore %9 %36 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %23 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %44 = OpLoad %9 
                               Uniform f32_4* %46 = OpAccessChain %21 %23 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_4 %48 = OpFAdd %44 %47 
                                                      OpStore %9 %48 
                                        f32_4 %50 = OpLoad %9 
                                        f32_4 %51 = OpVectorShuffle %50 %50 1 1 1 1 
                               Uniform f32_4* %52 = OpAccessChain %21 %45 %24 
                                        f32_4 %53 = OpLoad %52 
                                        f32_4 %54 = OpFMul %51 %53 
                                                      OpStore %49 %54 
                               Uniform f32_4* %55 = OpAccessChain %21 %45 %29 
                                        f32_4 %56 = OpLoad %55 
                                        f32_4 %57 = OpLoad %9 
                                        f32_4 %58 = OpVectorShuffle %57 %57 0 0 0 0 
                                        f32_4 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %49 
                                        f32_4 %61 = OpFAdd %59 %60 
                                                      OpStore %49 %61 
                               Uniform f32_4* %62 = OpAccessChain %21 %45 %23 
                                        f32_4 %63 = OpLoad %62 
                                        f32_4 %64 = OpLoad %9 
                                        f32_4 %65 = OpVectorShuffle %64 %64 2 2 2 2 
                                        f32_4 %66 = OpFMul %63 %65 
                                        f32_4 %67 = OpLoad %49 
                                        f32_4 %68 = OpFAdd %66 %67 
                                                      OpStore %49 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %45 %45 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %9 
                                        f32_4 %72 = OpVectorShuffle %71 %71 3 3 3 3 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %49 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %9 %75 
                                        f32_4 %81 = OpLoad %9 
                                Output f32_4* %83 = OpAccessChain %80 %29 
                                                      OpStore %83 %81 
                                 Private f32* %85 = OpAccessChain %9 %76 
                                          f32 %86 = OpLoad %85 
                                 Uniform f32* %89 = OpAccessChain %21 %29 %87 
                                          f32 %90 = OpLoad %89 
                                          f32 %91 = OpFMul %86 %90 
                                 Private f32* %92 = OpAccessChain %9 %76 
                                                      OpStore %92 %91 
                                        f32_4 %94 = OpLoad %9 
                                        f32_3 %95 = OpVectorShuffle %94 %94 0 3 1 
                                        f32_3 %98 = OpFMul %95 %97 
                                        f32_4 %99 = OpLoad %49 
                                       f32_4 %100 = OpVectorShuffle %99 %98 4 1 5 6 
                                                      OpStore %49 %100 
                                       f32_4 %103 = OpLoad %9 
                                       f32_3 %104 = OpVectorShuffle %103 %103 1 1 1 
                              Uniform f32_4* %105 = OpAccessChain %21 %24 %24 
                                       f32_4 %106 = OpLoad %105 
                                       f32_3 %107 = OpVectorShuffle %106 %106 0 1 2 
                                       f32_3 %108 = OpFMul %104 %107 
                                                      OpStore %102 %108 
                              Uniform f32_4* %109 = OpAccessChain %21 %24 %29 
                                       f32_4 %110 = OpLoad %109 
                                       f32_3 %111 = OpVectorShuffle %110 %110 0 1 2 
                                       f32_4 %112 = OpLoad %9 
                                       f32_3 %113 = OpVectorShuffle %112 %112 0 0 0 
                                       f32_3 %114 = OpFMul %111 %113 
                                       f32_3 %115 = OpLoad %102 
                                       f32_3 %116 = OpFAdd %114 %115 
                                       f32_4 %117 = OpLoad %9 
                                       f32_4 %118 = OpVectorShuffle %117 %116 4 5 6 3 
                                                      OpStore %9 %118 
                                       f32_4 %121 = OpLoad %49 
                                       f32_2 %122 = OpVectorShuffle %121 %121 2 2 
                                       f32_4 %123 = OpLoad %49 
                                       f32_2 %124 = OpVectorShuffle %123 %123 0 3 
                                       f32_2 %125 = OpFAdd %122 %124 
                                       f32_4 %126 = OpLoad vs_TEXCOORD0 
                                       f32_4 %127 = OpVectorShuffle %126 %125 0 1 4 5 
                                                      OpStore vs_TEXCOORD0 %127 
                                       f32_2 %130 = OpLoad %129 
                                       f32_4 %131 = OpLoad vs_TEXCOORD0 
                                       f32_4 %132 = OpVectorShuffle %131 %130 4 5 2 3 
                                                      OpStore vs_TEXCOORD0 %132 
                                       f32_3 %137 = OpLoad %136 
                                                      OpStore vs_TEXCOORD1 %137 
                                       f32_4 %138 = OpLoad %9 
                                       f32_3 %139 = OpVectorShuffle %138 %138 0 1 2 
                              Uniform f32_4* %140 = OpAccessChain %21 %24 %23 
                                       f32_4 %141 = OpLoad %140 
                                       f32_3 %142 = OpVectorShuffle %141 %141 0 1 2 
                                       f32_3 %143 = OpFNegate %142 
                                       f32_3 %144 = OpFAdd %139 %143 
                                       f32_4 %145 = OpLoad %49 
                                       f32_4 %146 = OpVectorShuffle %145 %144 4 5 6 3 
                                                      OpStore %49 %146 
                                       f32_4 %147 = OpLoad %9 
                                       f32_3 %148 = OpVectorShuffle %147 %147 0 1 2 
                              Uniform f32_4* %149 = OpAccessChain %21 %24 %23 
                                       f32_4 %150 = OpLoad %149 
                                       f32_3 %151 = OpVectorShuffle %150 %150 0 1 2 
                                       f32_3 %152 = OpFAdd %148 %151 
                                       f32_4 %153 = OpLoad %9 
                                       f32_4 %154 = OpVectorShuffle %153 %152 4 5 6 3 
                                                      OpStore %9 %154 
                                       f32_4 %155 = OpLoad %9 
                                       f32_3 %156 = OpVectorShuffle %155 %155 0 1 2 
                              Uniform f32_4* %157 = OpAccessChain %21 %24 %45 
                                       f32_4 %158 = OpLoad %157 
                                       f32_3 %159 = OpVectorShuffle %158 %158 0 1 2 
                                       f32_3 %160 = OpFAdd %156 %159 
                                       f32_4 %161 = OpLoad %9 
                                       f32_4 %162 = OpVectorShuffle %161 %160 4 5 6 3 
                                                      OpStore %9 %162 
                                       f32_4 %163 = OpLoad %49 
                                       f32_3 %164 = OpVectorShuffle %163 %163 0 1 2 
                              Uniform f32_4* %165 = OpAccessChain %21 %24 %45 
                                       f32_4 %166 = OpLoad %165 
                                       f32_3 %167 = OpVectorShuffle %166 %166 0 1 2 
                                       f32_3 %168 = OpFAdd %164 %167 
                                       f32_4 %169 = OpLoad %49 
                                       f32_4 %170 = OpVectorShuffle %169 %168 4 5 6 3 
                                                      OpStore %49 %170 
                                Private f32* %172 = OpAccessChain %49 %171 
                                         f32 %173 = OpLoad %172 
                                         f32 %174 = OpFNegate %173 
                                Private f32* %176 = OpAccessChain %49 %175 
                                                      OpStore %176 %174 
                                       f32_4 %178 = OpLoad %49 
                                       f32_3 %179 = OpVectorShuffle %178 %178 0 1 3 
                                                      OpStore vs_TEXCOORD2 %179 
                                Private f32* %180 = OpAccessChain %9 %171 
                                         f32 %181 = OpLoad %180 
                                         f32 %182 = OpFNegate %181 
                                Private f32* %183 = OpAccessChain %9 %175 
                                                      OpStore %183 %182 
                                       f32_4 %185 = OpLoad %9 
                                       f32_3 %186 = OpVectorShuffle %185 %185 0 1 3 
                                                      OpStore vs_TEXCOORD3 %186 
                                 Output f32* %188 = OpAccessChain %80 %29 %76 
                                         f32 %189 = OpLoad %188 
                                         f32 %190 = OpFNegate %189 
                                 Output f32* %191 = OpAccessChain %80 %29 %76 
                                                      OpStore %191 %190 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 1157
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %21 %83 %86 %100 %1146 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpDecorate %12 DescriptorSet 12 
                                                      OpDecorate %12 Binding 12 
                                                      OpDecorate %16 DescriptorSet 16 
                                                      OpDecorate %16 Binding 16 
                                                      OpDecorate vs_TEXCOORD0 Location 21 
                                                      OpDecorate %35 ArrayStride 35 
                                                      OpDecorate %37 ArrayStride 37 
                                                      OpMemberDecorate %38 0 Offset 38 
                                                      OpMemberDecorate %38 1 Offset 38 
                                                      OpMemberDecorate %38 2 Offset 38 
                                                      OpMemberDecorate %38 3 Offset 38 
                                                      OpMemberDecorate %38 4 Offset 38 
                                                      OpMemberDecorate %38 5 Offset 38 
                                                      OpMemberDecorate %38 6 Offset 38 
                                                      OpMemberDecorate %38 7 Offset 38 
                                                      OpDecorate %38 Block 
                                                      OpDecorate %40 DescriptorSet 40 
                                                      OpDecorate %40 Binding 40 
                                                      OpDecorate vs_TEXCOORD2 Location 83 
                                                      OpDecorate vs_TEXCOORD3 Location 86 
                                                      OpDecorate vs_TEXCOORD1 Location 100 
                                                      OpDecorate %646 DescriptorSet 646 
                                                      OpDecorate %646 Binding 646 
                                                      OpDecorate %648 DescriptorSet 648 
                                                      OpDecorate %648 Binding 648 
                                                      OpDecorate %1146 Location 1146 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypePointer UniformConstant %10 
         UniformConstant read_only Texture2D* %12 = OpVariable UniformConstant 
                                              %14 = OpTypeSampler 
                                              %15 = OpTypePointer UniformConstant %14 
                     UniformConstant sampler* %16 = OpVariable UniformConstant 
                                              %18 = OpTypeSampledImage %10 
                                              %20 = OpTypePointer Input %7 
                        Input f32_4* vs_TEXCOORD0 = OpVariable Input 
                                              %22 = OpTypeVector %6 2 
                                              %26 = OpTypeInt 32 0 
                                          u32 %27 = OpConstant 0 
                                              %29 = OpTypePointer Private %6 
                                              %31 = OpTypeVector %6 3 
                                              %32 = OpTypePointer Private %31 
                               Private f32_3* %33 = OpVariable Private 
                                          u32 %34 = OpConstant 4 
                                              %35 = OpTypeArray %7 %34 
                                          u32 %36 = OpConstant 16 
                                              %37 = OpTypeArray %7 %36 
                                              %38 = OpTypeStruct %7 %7 %35 %7 %7 %37 %7 %7 
                                              %39 = OpTypePointer Uniform %38 
Uniform struct {f32_4; f32_4; f32_4[4]; f32_4; f32_4; f32_4[16]; f32_4; f32_4;}* %40 = OpVariable Uniform 
                                              %41 = OpTypeInt 32 1 
                                          i32 %42 = OpConstant 0 
                                              %43 = OpTypePointer Uniform %6 
                                          u32 %49 = OpConstant 1 
                                          f32 %54 = OpConstant 3.674022E-40 
                                 Private f32* %59 = OpVariable Private 
                                          i32 %66 = OpConstant 1 
                                          u32 %67 = OpConstant 3 
                               Private f32_4* %81 = OpVariable Private 
                                              %82 = OpTypePointer Input %31 
                        Input f32_3* vs_TEXCOORD2 = OpVariable Input 
                        Input f32_3* vs_TEXCOORD3 = OpVariable Input 
                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                                             %117 = OpTypePointer Uniform %7 
                                             %129 = OpTypeBool 
                                             %130 = OpTypeVector %129 4 
                                             %131 = OpTypePointer Private %130 
                             Private bool_4* %132 = OpVariable Private 
                                         i32 %135 = OpConstant 3 
                                             %139 = OpTypePointer Private %129 
                                         f32 %142 = OpConstant 3.674022E-40 
                                         u32 %149 = OpConstant 2 
                             Private bool_4* %158 = OpVariable Private 
                                         i32 %161 = OpConstant 4 
                              Private f32_4* %165 = OpVariable Private 
                                         i32 %187 = OpConstant 2 
                                         i32 %211 = OpConstant 5 
                                         i32 %229 = OpConstant 6 
                                         i32 %241 = OpConstant 7 
                              Private f32_4* %260 = OpVariable Private 
                                         i32 %314 = OpConstant 9 
                                         i32 %321 = OpConstant 8 
                                         i32 %333 = OpConstant 10 
                                         i32 %345 = OpConstant 11 
                                         i32 %369 = OpConstant 13 
                                         i32 %376 = OpConstant 12 
                                         i32 %388 = OpConstant 14 
                                         i32 %400 = OpConstant 15 
                                Private f32* %422 = OpVariable Private 
                                       f32_4 %424 = OpConstantComposite %54 %54 %54 %54 
                                         f32 %439 = OpConstant 3.674022E-40 
                                       f32_2 %440 = OpConstantComposite %439 %439 
                                             %461 = OpTypePointer Private %22 
                              Private f32_2* %462 = OpVariable Private 
                                       f32_2 %466 = OpConstantComposite %54 %54 
                                       f32_2 %470 = OpConstantComposite %142 %142 
                                         f32 %483 = OpConstant 3.674022E-40 
                                       f32_2 %484 = OpConstantComposite %483 %483 
                                         f32 %487 = OpConstant 3.674022E-40 
                                       f32_2 %488 = OpConstantComposite %487 %487 
                              Private f32_4* %498 = OpVariable Private 
                                       f32_4 %501 = OpConstantComposite %439 %54 %439 %54 
                              Private f32_4* %517 = OpVariable Private 
                              Private f32_4* %522 = OpVariable Private 
                                         f32 %536 = OpConstant 3.674022E-40 
                                       f32_2 %537 = OpConstantComposite %536 %536 
                                         f32 %551 = OpConstant 3.674022E-40 
                                       f32_2 %552 = OpConstantComposite %551 %487 
                                         f32 %554 = OpConstant 3.674022E-40 
                                       f32_2 %555 = OpConstantComposite %554 %487 
                                       f32_2 %562 = OpConstantComposite %487 %554 
                                         f32 %579 = OpConstant 3.674022E-40 
                                         f32 %580 = OpConstant 3.674022E-40 
                                         f32 %581 = OpConstant 3.674022E-40 
                                       f32_4 %582 = OpConstantComposite %579 %580 %439 %581 
                              Private f32_4* %620 = OpVariable Private 
                              Private f32_4* %628 = OpVariable Private 
                                             %638 = OpTypePointer Function %31 
        UniformConstant read_only Texture2D* %646 = OpVariable UniformConstant 
                    UniformConstant sampler* %648 = OpVariable UniformConstant 
                                             %650 = OpTypeImage %6 Dim2D 1 0 0 1 Unknown 
                                             %651 = OpTypeSampledImage %650 
                                            %1145 = OpTypePointer Output %7 
                              Output f32_4* %1146 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %639 = OpVariable Function 
                             Function f32_3* %657 = OpVariable Function 
                             Function f32_3* %709 = OpVariable Function 
                             Function f32_3* %722 = OpVariable Function 
                             Function f32_3* %770 = OpVariable Function 
                             Function f32_3* %784 = OpVariable Function 
                             Function f32_3* %837 = OpVariable Function 
                             Function f32_3* %850 = OpVariable Function 
                             Function f32_3* %902 = OpVariable Function 
                             Function f32_3* %916 = OpVariable Function 
                             Function f32_3* %973 = OpVariable Function 
                             Function f32_3* %986 = OpVariable Function 
                            Function f32_3* %1052 = OpVariable Function 
                            Function f32_3* %1066 = OpVariable Function 
                            Function f32_3* %1080 = OpVariable Function 
                            Function f32_3* %1093 = OpVariable Function 
                          read_only Texture2D %13 = OpLoad %12 
                                      sampler %17 = OpLoad %16 
                   read_only Texture2DSampled %19 = OpSampledImage %13 %17 
                                        f32_4 %23 = OpLoad vs_TEXCOORD0 
                                        f32_2 %24 = OpVectorShuffle %23 %23 0 1 
                                        f32_4 %25 = OpImageSampleImplicitLod %19 %24 
                                          f32 %28 = OpCompositeExtract %25 0 
                                 Private f32* %30 = OpAccessChain %9 %27 
                                                      OpStore %30 %28 
                                 Uniform f32* %44 = OpAccessChain %40 %42 %27 
                                          f32 %45 = OpLoad %44 
                                 Private f32* %46 = OpAccessChain %9 %27 
                                          f32 %47 = OpLoad %46 
                                          f32 %48 = OpFMul %45 %47 
                                 Uniform f32* %50 = OpAccessChain %40 %42 %49 
                                          f32 %51 = OpLoad %50 
                                          f32 %52 = OpFAdd %48 %51 
                                 Private f32* %53 = OpAccessChain %33 %27 
                                                      OpStore %53 %52 
                                 Private f32* %55 = OpAccessChain %33 %27 
                                          f32 %56 = OpLoad %55 
                                          f32 %57 = OpFDiv %54 %56 
                                 Private f32* %58 = OpAccessChain %33 %27 
                                                      OpStore %58 %57 
                                 Private f32* %60 = OpAccessChain %33 %27 
                                          f32 %61 = OpLoad %60 
                                          f32 %62 = OpFNegate %61 
                                 Private f32* %63 = OpAccessChain %9 %27 
                                          f32 %64 = OpLoad %63 
                                          f32 %65 = OpFAdd %62 %64 
                                                      OpStore %59 %65 
                                 Uniform f32* %68 = OpAccessChain %40 %66 %67 
                                          f32 %69 = OpLoad %68 
                                          f32 %70 = OpLoad %59 
                                          f32 %71 = OpFMul %69 %70 
                                 Private f32* %72 = OpAccessChain %33 %27 
                                          f32 %73 = OpLoad %72 
                                          f32 %74 = OpFAdd %71 %73 
                                 Private f32* %75 = OpAccessChain %33 %27 
                                                      OpStore %75 %74 
                                 Private f32* %76 = OpAccessChain %9 %27 
                                          f32 %77 = OpLoad %76 
                                          f32 %78 = OpFNegate %77 
                                          f32 %79 = OpFAdd %78 %54 
                                 Private f32* %80 = OpAccessChain %9 %27 
                                                      OpStore %80 %79 
                                        f32_3 %84 = OpLoad vs_TEXCOORD2 
                                        f32_3 %85 = OpFNegate %84 
                                        f32_3 %87 = OpLoad vs_TEXCOORD3 
                                        f32_3 %88 = OpFAdd %85 %87 
                                        f32_4 %89 = OpLoad %81 
                                        f32_4 %90 = OpVectorShuffle %89 %88 4 5 6 3 
                                                      OpStore %81 %90 
                                        f32_4 %91 = OpLoad %9 
                                        f32_3 %92 = OpVectorShuffle %91 %91 0 0 0 
                                        f32_4 %93 = OpLoad %81 
                                        f32_3 %94 = OpVectorShuffle %93 %93 0 1 2 
                                        f32_3 %95 = OpFMul %92 %94 
                                        f32_3 %96 = OpLoad vs_TEXCOORD2 
                                        f32_3 %97 = OpFAdd %95 %96 
                                        f32_4 %98 = OpLoad %9 
                                        f32_4 %99 = OpVectorShuffle %98 %97 4 1 5 6 
                                                      OpStore %9 %99 
                                       f32_3 %101 = OpLoad vs_TEXCOORD1 
                                       f32_3 %102 = OpFNegate %101 
                                       f32_3 %103 = OpLoad %33 
                                       f32_3 %104 = OpVectorShuffle %103 %103 0 0 0 
                                       f32_3 %105 = OpFMul %102 %104 
                                       f32_4 %106 = OpLoad %9 
                                       f32_3 %107 = OpVectorShuffle %106 %106 0 2 3 
                                       f32_3 %108 = OpFAdd %105 %107 
                                       f32_4 %109 = OpLoad %9 
                                       f32_4 %110 = OpVectorShuffle %109 %108 4 1 5 6 
                                                      OpStore %9 %110 
                                       f32_3 %111 = OpLoad %33 
                                       f32_3 %112 = OpVectorShuffle %111 %111 0 0 0 
                                       f32_3 %113 = OpLoad vs_TEXCOORD1 
                                       f32_3 %114 = OpFMul %112 %113 
                                       f32_4 %115 = OpLoad %81 
                                       f32_4 %116 = OpVectorShuffle %115 %114 4 5 6 3 
                                                      OpStore %81 %116 
                              Uniform f32_4* %118 = OpAccessChain %40 %66 
                                       f32_4 %119 = OpLoad %118 
                                       f32_3 %120 = OpVectorShuffle %119 %119 3 3 3 
                                       f32_4 %121 = OpLoad %9 
                                       f32_3 %122 = OpVectorShuffle %121 %121 0 2 3 
                                       f32_3 %123 = OpFMul %120 %122 
                                       f32_4 %124 = OpLoad %81 
                                       f32_3 %125 = OpVectorShuffle %124 %124 0 1 2 
                                       f32_3 %126 = OpFAdd %123 %125 
                                       f32_4 %127 = OpLoad %9 
                                       f32_4 %128 = OpVectorShuffle %127 %126 4 5 6 3 
                                                      OpStore %9 %128 
                                       f32_4 %133 = OpLoad %9 
                                       f32_4 %134 = OpVectorShuffle %133 %133 2 2 2 2 
                              Uniform f32_4* %136 = OpAccessChain %40 %135 
                                       f32_4 %137 = OpLoad %136 
                                      bool_4 %138 = OpFOrdGreaterThanEqual %134 %137 
                                                      OpStore %132 %138 
                               Private bool* %140 = OpAccessChain %132 %27 
                                        bool %141 = OpLoad %140 
                                         f32 %143 = OpSelect %141 %54 %142 
                                Private f32* %144 = OpAccessChain %81 %27 
                                                      OpStore %144 %143 
                               Private bool* %145 = OpAccessChain %132 %49 
                                        bool %146 = OpLoad %145 
                                         f32 %147 = OpSelect %146 %54 %142 
                                Private f32* %148 = OpAccessChain %81 %49 
                                                      OpStore %148 %147 
                               Private bool* %150 = OpAccessChain %132 %149 
                                        bool %151 = OpLoad %150 
                                         f32 %152 = OpSelect %151 %54 %142 
                                Private f32* %153 = OpAccessChain %81 %149 
                                                      OpStore %153 %152 
                               Private bool* %154 = OpAccessChain %132 %67 
                                        bool %155 = OpLoad %154 
                                         f32 %156 = OpSelect %155 %54 %142 
                                Private f32* %157 = OpAccessChain %81 %67 
                                                      OpStore %157 %156 
                                       f32_4 %159 = OpLoad %9 
                                       f32_4 %160 = OpVectorShuffle %159 %159 2 2 2 2 
                              Uniform f32_4* %162 = OpAccessChain %40 %161 
                                       f32_4 %163 = OpLoad %162 
                                      bool_4 %164 = OpFOrdLessThan %160 %163 
                                                      OpStore %158 %164 
                               Private bool* %166 = OpAccessChain %158 %27 
                                        bool %167 = OpLoad %166 
                                         f32 %168 = OpSelect %167 %54 %142 
                                Private f32* %169 = OpAccessChain %165 %27 
                                                      OpStore %169 %168 
                               Private bool* %170 = OpAccessChain %158 %49 
                                        bool %171 = OpLoad %170 
                                         f32 %172 = OpSelect %171 %54 %142 
                                Private f32* %173 = OpAccessChain %165 %49 
                                                      OpStore %173 %172 
                               Private bool* %174 = OpAccessChain %158 %149 
                                        bool %175 = OpLoad %174 
                                         f32 %176 = OpSelect %175 %54 %142 
                                Private f32* %177 = OpAccessChain %165 %149 
                                                      OpStore %177 %176 
                               Private bool* %178 = OpAccessChain %158 %67 
                                        bool %179 = OpLoad %178 
                                         f32 %180 = OpSelect %179 %54 %142 
                                Private f32* %181 = OpAccessChain %165 %67 
                                                      OpStore %181 %180 
                                       f32_4 %182 = OpLoad %81 
                                       f32_4 %183 = OpLoad %165 
                                       f32_4 %184 = OpFMul %182 %183 
                                                      OpStore %81 %184 
                                       f32_4 %185 = OpLoad %9 
                                       f32_4 %186 = OpVectorShuffle %185 %185 1 1 1 1 
                              Uniform f32_4* %188 = OpAccessChain %40 %187 %66 
                                       f32_4 %189 = OpLoad %188 
                                       f32_4 %190 = OpFMul %186 %189 
                                                      OpStore %165 %190 
                              Uniform f32_4* %191 = OpAccessChain %40 %187 %42 
                                       f32_4 %192 = OpLoad %191 
                                       f32_4 %193 = OpLoad %9 
                                       f32_4 %194 = OpVectorShuffle %193 %193 0 0 0 0 
                                       f32_4 %195 = OpFMul %192 %194 
                                       f32_4 %196 = OpLoad %165 
                                       f32_4 %197 = OpFAdd %195 %196 
                                                      OpStore %165 %197 
                              Uniform f32_4* %198 = OpAccessChain %40 %187 %187 
                                       f32_4 %199 = OpLoad %198 
                                       f32_4 %200 = OpLoad %9 
                                       f32_4 %201 = OpVectorShuffle %200 %200 2 2 2 2 
                                       f32_4 %202 = OpFMul %199 %201 
                                       f32_4 %203 = OpLoad %165 
                                       f32_4 %204 = OpFAdd %202 %203 
                                                      OpStore %9 %204 
                                       f32_4 %205 = OpLoad %9 
                              Uniform f32_4* %206 = OpAccessChain %40 %187 %135 
                                       f32_4 %207 = OpLoad %206 
                                       f32_4 %208 = OpFAdd %205 %207 
                                                      OpStore %9 %208 
                                       f32_4 %209 = OpLoad %9 
                                       f32_3 %210 = OpVectorShuffle %209 %209 1 1 1 
                              Uniform f32_4* %212 = OpAccessChain %40 %211 %211 
                                       f32_4 %213 = OpLoad %212 
                                       f32_3 %214 = OpVectorShuffle %213 %213 0 1 2 
                                       f32_3 %215 = OpFMul %210 %214 
                                       f32_4 %216 = OpLoad %165 
                                       f32_4 %217 = OpVectorShuffle %216 %215 4 5 6 3 
                                                      OpStore %165 %217 
                              Uniform f32_4* %218 = OpAccessChain %40 %211 %161 
                                       f32_4 %219 = OpLoad %218 
                                       f32_3 %220 = OpVectorShuffle %219 %219 0 1 2 
                                       f32_4 %221 = OpLoad %9 
                                       f32_3 %222 = OpVectorShuffle %221 %221 0 0 0 
                                       f32_3 %223 = OpFMul %220 %222 
                                       f32_4 %224 = OpLoad %165 
                                       f32_3 %225 = OpVectorShuffle %224 %224 0 1 2 
                                       f32_3 %226 = OpFAdd %223 %225 
                                       f32_4 %227 = OpLoad %165 
                                       f32_4 %228 = OpVectorShuffle %227 %226 4 5 6 3 
                                                      OpStore %165 %228 
                              Uniform f32_4* %230 = OpAccessChain %40 %211 %229 
                                       f32_4 %231 = OpLoad %230 
                                       f32_3 %232 = OpVectorShuffle %231 %231 0 1 2 
                                       f32_4 %233 = OpLoad %9 
                                       f32_3 %234 = OpVectorShuffle %233 %233 2 2 2 
                                       f32_3 %235 = OpFMul %232 %234 
                                       f32_4 %236 = OpLoad %165 
                                       f32_3 %237 = OpVectorShuffle %236 %236 0 1 2 
                                       f32_3 %238 = OpFAdd %235 %237 
                                       f32_4 %239 = OpLoad %165 
                                       f32_4 %240 = OpVectorShuffle %239 %238 4 5 6 3 
                                                      OpStore %165 %240 
                              Uniform f32_4* %242 = OpAccessChain %40 %211 %241 
                                       f32_4 %243 = OpLoad %242 
                                       f32_3 %244 = OpVectorShuffle %243 %243 0 1 2 
                                       f32_4 %245 = OpLoad %9 
                                       f32_3 %246 = OpVectorShuffle %245 %245 3 3 3 
                                       f32_3 %247 = OpFMul %244 %246 
                                       f32_4 %248 = OpLoad %165 
                                       f32_3 %249 = OpVectorShuffle %248 %248 0 1 2 
                                       f32_3 %250 = OpFAdd %247 %249 
                                       f32_4 %251 = OpLoad %165 
                                       f32_4 %252 = OpVectorShuffle %251 %250 4 5 6 3 
                                                      OpStore %165 %252 
                                       f32_4 %253 = OpLoad %81 
                                       f32_3 %254 = OpVectorShuffle %253 %253 1 1 1 
                                       f32_4 %255 = OpLoad %165 
                                       f32_3 %256 = OpVectorShuffle %255 %255 0 1 2 
                                       f32_3 %257 = OpFMul %254 %256 
                                       f32_4 %258 = OpLoad %165 
                                       f32_4 %259 = OpVectorShuffle %258 %257 4 5 6 3 
                                                      OpStore %165 %259 
                                       f32_4 %261 = OpLoad %9 
                                       f32_3 %262 = OpVectorShuffle %261 %261 1 1 1 
                              Uniform f32_4* %263 = OpAccessChain %40 %211 %66 
                                       f32_4 %264 = OpLoad %263 
                                       f32_3 %265 = OpVectorShuffle %264 %264 0 1 2 
                                       f32_3 %266 = OpFMul %262 %265 
                                       f32_4 %267 = OpLoad %260 
                                       f32_4 %268 = OpVectorShuffle %267 %266 4 5 6 3 
                                                      OpStore %260 %268 
                              Uniform f32_4* %269 = OpAccessChain %40 %211 %42 
                                       f32_4 %270 = OpLoad %269 
                                       f32_3 %271 = OpVectorShuffle %270 %270 0 1 2 
                                       f32_4 %272 = OpLoad %9 
                                       f32_3 %273 = OpVectorShuffle %272 %272 0 0 0 
                                       f32_3 %274 = OpFMul %271 %273 
                                       f32_4 %275 = OpLoad %260 
                                       f32_3 %276 = OpVectorShuffle %275 %275 0 1 2 
                                       f32_3 %277 = OpFAdd %274 %276 
                                       f32_4 %278 = OpLoad %260 
                                       f32_4 %279 = OpVectorShuffle %278 %277 4 5 6 3 
                                                      OpStore %260 %279 
                              Uniform f32_4* %280 = OpAccessChain %40 %211 %187 
                                       f32_4 %281 = OpLoad %280 
                                       f32_3 %282 = OpVectorShuffle %281 %281 0 1 2 
                                       f32_4 %283 = OpLoad %9 
                                       f32_3 %284 = OpVectorShuffle %283 %283 2 2 2 
                                       f32_3 %285 = OpFMul %282 %284 
                                       f32_4 %286 = OpLoad %260 
                                       f32_3 %287 = OpVectorShuffle %286 %286 0 1 2 
                                       f32_3 %288 = OpFAdd %285 %287 
                                       f32_4 %289 = OpLoad %260 
                                       f32_4 %290 = OpVectorShuffle %289 %288 4 5 6 3 
                                                      OpStore %260 %290 
                              Uniform f32_4* %291 = OpAccessChain %40 %211 %135 
                                       f32_4 %292 = OpLoad %291 
                                       f32_3 %293 = OpVectorShuffle %292 %292 0 1 2 
                                       f32_4 %294 = OpLoad %9 
                                       f32_3 %295 = OpVectorShuffle %294 %294 3 3 3 
                                       f32_3 %296 = OpFMul %293 %295 
                                       f32_4 %297 = OpLoad %260 
                                       f32_3 %298 = OpVectorShuffle %297 %297 0 1 2 
                                       f32_3 %299 = OpFAdd %296 %298 
                                       f32_4 %300 = OpLoad %260 
                                       f32_4 %301 = OpVectorShuffle %300 %299 4 5 6 3 
                                                      OpStore %260 %301 
                                       f32_4 %302 = OpLoad %260 
                                       f32_3 %303 = OpVectorShuffle %302 %302 0 1 2 
                                       f32_4 %304 = OpLoad %81 
                                       f32_3 %305 = OpVectorShuffle %304 %304 0 0 0 
                                       f32_3 %306 = OpFMul %303 %305 
                                       f32_4 %307 = OpLoad %165 
                                       f32_3 %308 = OpVectorShuffle %307 %307 0 1 2 
                                       f32_3 %309 = OpFAdd %306 %308 
                                       f32_4 %310 = OpLoad %165 
                                       f32_4 %311 = OpVectorShuffle %310 %309 4 5 6 3 
                                                      OpStore %165 %311 
                                       f32_4 %312 = OpLoad %9 
                                       f32_3 %313 = OpVectorShuffle %312 %312 1 1 1 
                              Uniform f32_4* %315 = OpAccessChain %40 %211 %314 
                                       f32_4 %316 = OpLoad %315 
                                       f32_3 %317 = OpVectorShuffle %316 %316 0 1 2 
                                       f32_3 %318 = OpFMul %313 %317 
                                       f32_4 %319 = OpLoad %260 
                                       f32_4 %320 = OpVectorShuffle %319 %318 4 5 6 3 
                                                      OpStore %260 %320 
                              Uniform f32_4* %322 = OpAccessChain %40 %211 %321 
                                       f32_4 %323 = OpLoad %322 
                                       f32_3 %324 = OpVectorShuffle %323 %323 0 1 2 
                                       f32_4 %325 = OpLoad %9 
                                       f32_3 %326 = OpVectorShuffle %325 %325 0 0 0 
                                       f32_3 %327 = OpFMul %324 %326 
                                       f32_4 %328 = OpLoad %260 
                                       f32_3 %329 = OpVectorShuffle %328 %328 0 1 2 
                                       f32_3 %330 = OpFAdd %327 %329 
                                       f32_4 %331 = OpLoad %260 
                                       f32_4 %332 = OpVectorShuffle %331 %330 4 5 6 3 
                                                      OpStore %260 %332 
                              Uniform f32_4* %334 = OpAccessChain %40 %211 %333 
                                       f32_4 %335 = OpLoad %334 
                                       f32_3 %336 = OpVectorShuffle %335 %335 0 1 2 
                                       f32_4 %337 = OpLoad %9 
                                       f32_3 %338 = OpVectorShuffle %337 %337 2 2 2 
                                       f32_3 %339 = OpFMul %336 %338 
                                       f32_4 %340 = OpLoad %260 
                                       f32_3 %341 = OpVectorShuffle %340 %340 0 1 2 
                                       f32_3 %342 = OpFAdd %339 %341 
                                       f32_4 %343 = OpLoad %260 
                                       f32_4 %344 = OpVectorShuffle %343 %342 4 5 6 3 
                                                      OpStore %260 %344 
                              Uniform f32_4* %346 = OpAccessChain %40 %211 %345 
                                       f32_4 %347 = OpLoad %346 
                                       f32_3 %348 = OpVectorShuffle %347 %347 0 1 2 
                                       f32_4 %349 = OpLoad %9 
                                       f32_3 %350 = OpVectorShuffle %349 %349 3 3 3 
                                       f32_3 %351 = OpFMul %348 %350 
                                       f32_4 %352 = OpLoad %260 
                                       f32_3 %353 = OpVectorShuffle %352 %352 0 1 2 
                                       f32_3 %354 = OpFAdd %351 %353 
                                       f32_4 %355 = OpLoad %260 
                                       f32_4 %356 = OpVectorShuffle %355 %354 4 5 6 3 
                                                      OpStore %260 %356 
                                       f32_4 %357 = OpLoad %260 
                                       f32_3 %358 = OpVectorShuffle %357 %357 0 1 2 
                                       f32_4 %359 = OpLoad %81 
                                       f32_3 %360 = OpVectorShuffle %359 %359 2 2 2 
                                       f32_3 %361 = OpFMul %358 %360 
                                       f32_4 %362 = OpLoad %165 
                                       f32_3 %363 = OpVectorShuffle %362 %362 0 1 2 
                                       f32_3 %364 = OpFAdd %361 %363 
                                       f32_4 %365 = OpLoad %165 
                                       f32_4 %366 = OpVectorShuffle %365 %364 4 5 6 3 
                                                      OpStore %165 %366 
                                       f32_4 %367 = OpLoad %9 
                                       f32_3 %368 = OpVectorShuffle %367 %367 1 1 1 
                              Uniform f32_4* %370 = OpAccessChain %40 %211 %369 
                                       f32_4 %371 = OpLoad %370 
                                       f32_3 %372 = OpVectorShuffle %371 %371 0 1 2 
                                       f32_3 %373 = OpFMul %368 %372 
                                       f32_4 %374 = OpLoad %260 
                                       f32_4 %375 = OpVectorShuffle %374 %373 4 5 6 3 
                                                      OpStore %260 %375 
                              Uniform f32_4* %377 = OpAccessChain %40 %211 %376 
                                       f32_4 %378 = OpLoad %377 
                                       f32_3 %379 = OpVectorShuffle %378 %378 0 1 2 
                                       f32_4 %380 = OpLoad %9 
                                       f32_3 %381 = OpVectorShuffle %380 %380 0 0 0 
                                       f32_3 %382 = OpFMul %379 %381 
                                       f32_4 %383 = OpLoad %260 
                                       f32_3 %384 = OpVectorShuffle %383 %383 0 1 2 
                                       f32_3 %385 = OpFAdd %382 %384 
                                       f32_4 %386 = OpLoad %260 
                                       f32_4 %387 = OpVectorShuffle %386 %385 4 5 6 3 
                                                      OpStore %260 %387 
                              Uniform f32_4* %389 = OpAccessChain %40 %211 %388 
                                       f32_4 %390 = OpLoad %389 
                                       f32_3 %391 = OpVectorShuffle %390 %390 0 1 2 
                                       f32_4 %392 = OpLoad %9 
                                       f32_3 %393 = OpVectorShuffle %392 %392 2 2 2 
                                       f32_3 %394 = OpFMul %391 %393 
                                       f32_4 %395 = OpLoad %260 
                                       f32_3 %396 = OpVectorShuffle %395 %395 0 1 2 
                                       f32_3 %397 = OpFAdd %394 %396 
                                       f32_4 %398 = OpLoad %9 
                                       f32_4 %399 = OpVectorShuffle %398 %397 4 5 6 3 
                                                      OpStore %9 %399 
                              Uniform f32_4* %401 = OpAccessChain %40 %211 %400 
                                       f32_4 %402 = OpLoad %401 
                                       f32_3 %403 = OpVectorShuffle %402 %402 0 1 2 
                                       f32_4 %404 = OpLoad %9 
                                       f32_3 %405 = OpVectorShuffle %404 %404 3 3 3 
                                       f32_3 %406 = OpFMul %403 %405 
                                       f32_4 %407 = OpLoad %9 
                                       f32_3 %408 = OpVectorShuffle %407 %407 0 1 2 
                                       f32_3 %409 = OpFAdd %406 %408 
                                       f32_4 %410 = OpLoad %9 
                                       f32_4 %411 = OpVectorShuffle %410 %409 4 5 6 3 
                                                      OpStore %9 %411 
                                       f32_4 %412 = OpLoad %9 
                                       f32_3 %413 = OpVectorShuffle %412 %412 0 1 2 
                                       f32_4 %414 = OpLoad %81 
                                       f32_3 %415 = OpVectorShuffle %414 %414 3 3 3 
                                       f32_3 %416 = OpFMul %413 %415 
                                       f32_4 %417 = OpLoad %165 
                                       f32_3 %418 = OpVectorShuffle %417 %417 0 1 2 
                                       f32_3 %419 = OpFAdd %416 %418 
                                       f32_4 %420 = OpLoad %9 
                                       f32_4 %421 = OpVectorShuffle %420 %419 4 5 6 3 
                                                      OpStore %9 %421 
                                       f32_4 %423 = OpLoad %81 
                                         f32 %425 = OpDot %423 %424 
                                                      OpStore %422 %425 
                                         f32 %426 = OpLoad %422 
                                         f32 %427 = OpFNegate %426 
                                Private f32* %428 = OpAccessChain %9 %149 
                                         f32 %429 = OpLoad %428 
                                         f32 %430 = OpFAdd %427 %429 
                                                      OpStore %59 %430 
                                         f32 %431 = OpLoad %59 
                                         f32 %432 = OpFAdd %431 %54 
                                                      OpStore %59 %432 
                                       f32_4 %433 = OpLoad %9 
                                       f32_2 %434 = OpVectorShuffle %433 %433 0 1 
                              Uniform f32_4* %435 = OpAccessChain %40 %241 
                                       f32_4 %436 = OpLoad %435 
                                       f32_2 %437 = OpVectorShuffle %436 %436 2 3 
                                       f32_2 %438 = OpFMul %434 %437 
                                       f32_2 %441 = OpFAdd %438 %440 
                                       f32_4 %442 = OpLoad %81 
                                       f32_4 %443 = OpVectorShuffle %442 %441 4 5 2 3 
                                                      OpStore %81 %443 
                                       f32_4 %444 = OpLoad %81 
                                       f32_2 %445 = OpVectorShuffle %444 %444 0 1 
                                       f32_2 %446 = OpExtInst %1 8 %445 
                                       f32_4 %447 = OpLoad %81 
                                       f32_4 %448 = OpVectorShuffle %447 %446 4 5 2 3 
                                                      OpStore %81 %448 
                                       f32_4 %449 = OpLoad %9 
                                       f32_2 %450 = OpVectorShuffle %449 %449 0 1 
                              Uniform f32_4* %451 = OpAccessChain %40 %241 
                                       f32_4 %452 = OpLoad %451 
                                       f32_2 %453 = OpVectorShuffle %452 %452 2 3 
                                       f32_2 %454 = OpFMul %450 %453 
                                       f32_4 %455 = OpLoad %81 
                                       f32_2 %456 = OpVectorShuffle %455 %455 0 1 
                                       f32_2 %457 = OpFNegate %456 
                                       f32_2 %458 = OpFAdd %454 %457 
                                       f32_4 %459 = OpLoad %9 
                                       f32_4 %460 = OpVectorShuffle %459 %458 4 5 2 3 
                                                      OpStore %9 %460 
                                       f32_4 %463 = OpLoad %9 
                                       f32_2 %464 = OpVectorShuffle %463 %463 0 1 
                                       f32_2 %465 = OpFNegate %464 
                                       f32_2 %467 = OpFAdd %465 %466 
                                                      OpStore %462 %467 
                                       f32_4 %468 = OpLoad %9 
                                       f32_2 %469 = OpVectorShuffle %468 %468 0 1 
                                       f32_2 %471 = OpExtInst %1 37 %469 %470 
                                       f32_4 %472 = OpLoad %165 
                                       f32_4 %473 = OpVectorShuffle %472 %471 4 5 2 3 
                                                      OpStore %165 %473 
                                       f32_4 %474 = OpLoad %165 
                                       f32_2 %475 = OpVectorShuffle %474 %474 0 1 
                                       f32_2 %476 = OpFNegate %475 
                                       f32_4 %477 = OpLoad %165 
                                       f32_2 %478 = OpVectorShuffle %477 %477 0 1 
                                       f32_2 %479 = OpFMul %476 %478 
                                       f32_2 %480 = OpLoad %462 
                                       f32_2 %481 = OpFAdd %479 %480 
                                                      OpStore %462 %481 
                                       f32_2 %482 = OpLoad %462 
                                       f32_2 %485 = OpFAdd %482 %484 
                                                      OpStore %462 %485 
                                       f32_2 %486 = OpLoad %462 
                                       f32_2 %489 = OpFMul %486 %488 
                                       f32_4 %490 = OpLoad %165 
                                       f32_4 %491 = OpVectorShuffle %490 %489 4 5 2 3 
                                                      OpStore %165 %491 
                                Private f32* %492 = OpAccessChain %165 %27 
                                         f32 %493 = OpLoad %492 
                                Private f32* %494 = OpAccessChain %260 %49 
                                                      OpStore %494 %493 
                                       f32_4 %495 = OpLoad %9 
                                       f32_2 %496 = OpVectorShuffle %495 %495 0 1 
                                       f32_2 %497 = OpExtInst %1 40 %496 %470 
                                                      OpStore %462 %497 
                                       f32_4 %499 = OpLoad %9 
                                       f32_4 %500 = OpVectorShuffle %499 %499 0 0 1 1 
                                       f32_4 %502 = OpFAdd %500 %501 
                                                      OpStore %498 %502 
                                       f32_2 %503 = OpLoad %462 
                                       f32_2 %504 = OpFNegate %503 
                                       f32_2 %505 = OpLoad %462 
                                       f32_2 %506 = OpFMul %504 %505 
                                       f32_4 %507 = OpLoad %498 
                                       f32_2 %508 = OpVectorShuffle %507 %507 1 3 
                                       f32_2 %509 = OpFAdd %506 %508 
                                                      OpStore %462 %509 
                                       f32_4 %510 = OpLoad %498 
                                       f32_4 %511 = OpVectorShuffle %510 %510 0 0 2 2 
                                       f32_4 %512 = OpLoad %498 
                                       f32_4 %513 = OpVectorShuffle %512 %512 0 0 2 2 
                                       f32_4 %514 = OpFMul %511 %513 
                                                      OpStore %498 %514 
                                       f32_2 %515 = OpLoad %462 
                                       f32_2 %516 = OpFAdd %515 %484 
                                                      OpStore %462 %516 
                                Private f32* %518 = OpAccessChain %462 %27 
                                         f32 %519 = OpLoad %518 
                                         f32 %520 = OpFMul %519 %487 
                                Private f32* %521 = OpAccessChain %517 %149 
                                                      OpStore %521 %520 
                                Private f32* %523 = OpAccessChain %462 %49 
                                         f32 %524 = OpLoad %523 
                                         f32 %525 = OpFMul %524 %487 
                                Private f32* %526 = OpAccessChain %522 %149 
                                                      OpStore %526 %525 
                                       f32_4 %527 = OpLoad %498 
                                       f32_2 %528 = OpVectorShuffle %527 %527 0 2 
                                       f32_2 %529 = OpFMul %528 %440 
                                       f32_4 %530 = OpLoad %9 
                                       f32_2 %531 = OpVectorShuffle %530 %530 0 1 
                                       f32_2 %532 = OpFNegate %531 
                                       f32_2 %533 = OpFAdd %529 %532 
                                                      OpStore %462 %533 
                                       f32_4 %534 = OpLoad %498 
                                       f32_2 %535 = OpVectorShuffle %534 %534 1 3 
                                       f32_2 %538 = OpFMul %535 %537 
                                       f32_4 %539 = OpLoad %498 
                                       f32_4 %540 = OpVectorShuffle %539 %538 4 5 2 3 
                                                      OpStore %498 %540 
                                       f32_2 %541 = OpLoad %462 
                                       f32_2 %542 = OpVectorShuffle %541 %541 1 0 
                                       f32_2 %543 = OpFMul %542 %488 
                                       f32_4 %544 = OpLoad %522 
                                       f32_4 %545 = OpVectorShuffle %544 %543 4 5 2 3 
                                                      OpStore %522 %545 
                                Private f32* %546 = OpAccessChain %522 %49 
                                         f32 %547 = OpLoad %546 
                                Private f32* %548 = OpAccessChain %517 %27 
                                                      OpStore %548 %547 
                                       f32_4 %549 = OpLoad %9 
                                       f32_2 %550 = OpVectorShuffle %549 %549 0 0 
                                       f32_2 %553 = OpFMul %550 %552 
                                       f32_2 %556 = OpFAdd %553 %555 
                                       f32_4 %557 = OpLoad %517 
                                       f32_4 %558 = OpVectorShuffle %557 %556 0 4 2 5 
                                                      OpStore %517 %558 
                                       f32_4 %559 = OpLoad %9 
                                       f32_2 %560 = OpVectorShuffle %559 %559 0 0 
                                       f32_2 %561 = OpFMul %560 %552 
                                       f32_2 %563 = OpFAdd %561 %562 
                                       f32_4 %564 = OpLoad %260 
                                       f32_4 %565 = OpVectorShuffle %564 %563 4 1 5 3 
                                                      OpStore %260 %565 
                                Private f32* %566 = OpAccessChain %498 %27 
                                         f32 %567 = OpLoad %566 
                                Private f32* %568 = OpAccessChain %260 %67 
                                                      OpStore %568 %567 
                                Private f32* %569 = OpAccessChain %498 %49 
                                         f32 %570 = OpLoad %569 
                                Private f32* %571 = OpAccessChain %165 %67 
                                                      OpStore %571 %570 
                                       f32_4 %572 = OpLoad %260 
                                       f32_4 %573 = OpLoad %517 
                                       f32_4 %574 = OpFAdd %572 %573 
                                                      OpStore %498 %574 
                                       f32_4 %575 = OpLoad %260 
                                       f32_4 %576 = OpLoad %498 
                                       f32_4 %577 = OpFDiv %575 %576 
                                                      OpStore %260 %577 
                                       f32_4 %578 = OpLoad %260 
                                       f32_4 %583 = OpFAdd %578 %582 
                                                      OpStore %260 %583 
                                       f32_4 %584 = OpLoad %260 
                                       f32_4 %585 = OpVectorShuffle %584 %584 3 0 1 2 
                              Uniform f32_4* %586 = OpAccessChain %40 %241 
                                       f32_4 %587 = OpLoad %586 
                                       f32_4 %588 = OpVectorShuffle %587 %587 0 0 0 0 
                                       f32_4 %589 = OpFMul %585 %588 
                                                      OpStore %260 %589 
                                       f32_4 %590 = OpLoad %9 
                                       f32_2 %591 = OpVectorShuffle %590 %590 1 1 
                                       f32_2 %592 = OpFMul %591 %552 
                                       f32_2 %593 = OpFAdd %592 %555 
                                       f32_4 %594 = OpLoad %522 
                                       f32_4 %595 = OpVectorShuffle %594 %593 0 4 2 5 
                                                      OpStore %522 %595 
                                       f32_4 %596 = OpLoad %9 
                                       f32_2 %597 = OpVectorShuffle %596 %596 1 1 
                                       f32_2 %598 = OpFMul %597 %552 
                                       f32_2 %599 = OpFAdd %598 %562 
                                       f32_4 %600 = OpLoad %165 
                                       f32_4 %601 = OpVectorShuffle %600 %599 4 1 5 3 
                                                      OpStore %165 %601 
                                       f32_4 %602 = OpLoad %165 
                                       f32_4 %603 = OpLoad %522 
                                       f32_4 %604 = OpFAdd %602 %603 
                                                      OpStore %517 %604 
                                       f32_4 %605 = OpLoad %165 
                                       f32_4 %606 = OpLoad %517 
                                       f32_4 %607 = OpFDiv %605 %606 
                                                      OpStore %165 %607 
                                       f32_4 %608 = OpLoad %165 
                                       f32_4 %609 = OpFAdd %608 %582 
                                                      OpStore %165 %609 
                                       f32_4 %610 = OpLoad %165 
                                       f32_4 %611 = OpVectorShuffle %610 %610 0 3 1 2 
                              Uniform f32_4* %612 = OpAccessChain %40 %241 
                                       f32_4 %613 = OpLoad %612 
                                       f32_4 %614 = OpVectorShuffle %613 %613 1 1 1 1 
                                       f32_4 %615 = OpFMul %611 %614 
                                                      OpStore %165 %615 
                                       f32_4 %616 = OpLoad %498 
                                       f32_4 %617 = OpLoad %517 
                                       f32_4 %618 = OpVectorShuffle %617 %617 0 0 0 0 
                                       f32_4 %619 = OpFMul %616 %618 
                                                      OpStore %522 %619 
                                       f32_4 %621 = OpLoad %260 
                                       f32_3 %622 = OpVectorShuffle %621 %621 1 2 3 
                                       f32_4 %623 = OpLoad %620 
                                       f32_4 %624 = OpVectorShuffle %623 %622 4 1 5 6 
                                                      OpStore %620 %624 
                                Private f32* %625 = OpAccessChain %165 %27 
                                         f32 %626 = OpLoad %625 
                                Private f32* %627 = OpAccessChain %620 %49 
                                                      OpStore %627 %626 
                                       f32_4 %629 = OpLoad %81 
                                       f32_4 %630 = OpVectorShuffle %629 %629 0 1 0 1 
                              Uniform f32_4* %631 = OpAccessChain %40 %241 
                                       f32_4 %632 = OpLoad %631 
                                       f32_4 %633 = OpVectorShuffle %632 %632 0 1 0 1 
                                       f32_4 %634 = OpFMul %630 %633 
                                       f32_4 %635 = OpLoad %620 
                                       f32_4 %636 = OpVectorShuffle %635 %635 0 1 2 1 
                                       f32_4 %637 = OpFAdd %634 %636 
                                                      OpStore %628 %637 
                                       f32_4 %640 = OpLoad %628 
                                       f32_2 %641 = OpVectorShuffle %640 %640 0 1 
                                         f32 %642 = OpLoad %59 
                                         f32 %643 = OpCompositeExtract %641 0 
                                         f32 %644 = OpCompositeExtract %641 1 
                                       f32_3 %645 = OpCompositeConstruct %643 %644 %642 
                                                      OpStore %639 %645 
                         read_only Texture2D %647 = OpLoad %646 
                                     sampler %649 = OpLoad %648 
                  read_only Texture2DSampled %652 = OpSampledImage %647 %649 
                                       f32_3 %653 = OpLoad %639 
                                         f32 %654 = OpCompositeExtract %653 2 
                                         f32 %655 = OpImageSampleDrefExplicitLod %652 %653 %654 Lod %6 
                                Private f32* %656 = OpAccessChain %9 %27 
                                                      OpStore %656 %655 
                                       f32_4 %658 = OpLoad %628 
                                       f32_2 %659 = OpVectorShuffle %658 %658 2 3 
                                         f32 %660 = OpLoad %59 
                                         f32 %661 = OpCompositeExtract %659 0 
                                         f32 %662 = OpCompositeExtract %659 1 
                                       f32_3 %663 = OpCompositeConstruct %661 %662 %660 
                                                      OpStore %657 %663 
                         read_only Texture2D %664 = OpLoad %646 
                                     sampler %665 = OpLoad %648 
                  read_only Texture2DSampled %666 = OpSampledImage %664 %665 
                                       f32_3 %667 = OpLoad %657 
                                         f32 %668 = OpCompositeExtract %667 2 
                                         f32 %669 = OpImageSampleDrefExplicitLod %666 %667 %668 Lod %6 
                                Private f32* %670 = OpAccessChain %33 %27 
                                                      OpStore %670 %669 
                                Private f32* %671 = OpAccessChain %33 %27 
                                         f32 %672 = OpLoad %671 
                                Private f32* %673 = OpAccessChain %522 %49 
                                         f32 %674 = OpLoad %673 
                                         f32 %675 = OpFMul %672 %674 
                                Private f32* %676 = OpAccessChain %33 %27 
                                                      OpStore %676 %675 
                                Private f32* %677 = OpAccessChain %522 %27 
                                         f32 %678 = OpLoad %677 
                                Private f32* %679 = OpAccessChain %9 %27 
                                         f32 %680 = OpLoad %679 
                                         f32 %681 = OpFMul %678 %680 
                                Private f32* %682 = OpAccessChain %33 %27 
                                         f32 %683 = OpLoad %682 
                                         f32 %684 = OpFAdd %681 %683 
                                Private f32* %685 = OpAccessChain %9 %27 
                                                      OpStore %685 %684 
                                       f32_4 %686 = OpLoad %81 
                                       f32_2 %687 = OpVectorShuffle %686 %686 0 1 
                              Uniform f32_4* %688 = OpAccessChain %40 %241 
                                       f32_4 %689 = OpLoad %688 
                                       f32_2 %690 = OpVectorShuffle %689 %689 0 1 
                                       f32_2 %691 = OpFMul %687 %690 
                                       f32_4 %692 = OpLoad %620 
                                       f32_2 %693 = OpVectorShuffle %692 %692 3 1 
                                       f32_2 %694 = OpFAdd %691 %693 
                                       f32_3 %695 = OpLoad %33 
                                       f32_3 %696 = OpVectorShuffle %695 %694 3 1 4 
                                                      OpStore %33 %696 
                                Private f32* %697 = OpAccessChain %620 %49 
                                         f32 %698 = OpLoad %697 
                                Private f32* %699 = OpAccessChain %260 %49 
                                                      OpStore %699 %698 
                                       f32_4 %700 = OpLoad %81 
                                       f32_2 %701 = OpVectorShuffle %700 %700 0 1 
                              Uniform f32_4* %702 = OpAccessChain %40 %241 
                                       f32_4 %703 = OpLoad %702 
                                       f32_2 %704 = OpVectorShuffle %703 %703 0 1 
                                       f32_2 %705 = OpFMul %701 %704 
                                       f32_4 %706 = OpLoad %260 
                                       f32_2 %707 = OpVectorShuffle %706 %706 0 1 
                                       f32_2 %708 = OpFAdd %705 %707 
                                                      OpStore %462 %708 
                                       f32_2 %710 = OpLoad %462 
                                         f32 %711 = OpLoad %59 
                                         f32 %712 = OpCompositeExtract %710 0 
                                         f32 %713 = OpCompositeExtract %710 1 
                                       f32_3 %714 = OpCompositeConstruct %712 %713 %711 
                                                      OpStore %709 %714 
                         read_only Texture2D %715 = OpLoad %646 
                                     sampler %716 = OpLoad %648 
                  read_only Texture2DSampled %717 = OpSampledImage %715 %716 
                                       f32_3 %718 = OpLoad %709 
                                         f32 %719 = OpCompositeExtract %718 2 
                                         f32 %720 = OpImageSampleDrefExplicitLod %717 %718 %719 Lod %6 
                                Private f32* %721 = OpAccessChain %462 %27 
                                                      OpStore %721 %720 
                                       f32_3 %723 = OpLoad %33 
                                       f32_2 %724 = OpVectorShuffle %723 %723 0 2 
                                         f32 %725 = OpLoad %59 
                                         f32 %726 = OpCompositeExtract %724 0 
                                         f32 %727 = OpCompositeExtract %724 1 
                                       f32_3 %728 = OpCompositeConstruct %726 %727 %725 
                                                      OpStore %722 %728 
                         read_only Texture2D %729 = OpLoad %646 
                                     sampler %730 = OpLoad %648 
                  read_only Texture2DSampled %731 = OpSampledImage %729 %730 
                                       f32_3 %732 = OpLoad %722 
                                         f32 %733 = OpCompositeExtract %732 2 
                                         f32 %734 = OpImageSampleDrefExplicitLod %731 %732 %733 Lod %6 
                                Private f32* %735 = OpAccessChain %33 %27 
                                                      OpStore %735 %734 
                                Private f32* %736 = OpAccessChain %522 %149 
                                         f32 %737 = OpLoad %736 
                                Private f32* %738 = OpAccessChain %33 %27 
                                         f32 %739 = OpLoad %738 
                                         f32 %740 = OpFMul %737 %739 
                                Private f32* %741 = OpAccessChain %9 %27 
                                         f32 %742 = OpLoad %741 
                                         f32 %743 = OpFAdd %740 %742 
                                Private f32* %744 = OpAccessChain %9 %27 
                                                      OpStore %744 %743 
                                Private f32* %745 = OpAccessChain %522 %67 
                                         f32 %746 = OpLoad %745 
                                Private f32* %747 = OpAccessChain %462 %27 
                                         f32 %748 = OpLoad %747 
                                         f32 %749 = OpFMul %746 %748 
                                Private f32* %750 = OpAccessChain %9 %27 
                                         f32 %751 = OpLoad %750 
                                         f32 %752 = OpFAdd %749 %751 
                                Private f32* %753 = OpAccessChain %9 %27 
                                                      OpStore %753 %752 
                                       f32_4 %754 = OpLoad %498 
                                       f32_4 %755 = OpLoad %517 
                                       f32_4 %756 = OpVectorShuffle %755 %755 1 1 1 1 
                                       f32_4 %757 = OpFMul %754 %756 
                                                      OpStore %522 %757 
                                Private f32* %758 = OpAccessChain %165 %149 
                                         f32 %759 = OpLoad %758 
                                Private f32* %760 = OpAccessChain %620 %49 
                                                      OpStore %760 %759 
                                       f32_4 %761 = OpLoad %81 
                                       f32_4 %762 = OpVectorShuffle %761 %761 0 1 0 1 
                              Uniform f32_4* %763 = OpAccessChain %40 %241 
                                       f32_4 %764 = OpLoad %763 
                                       f32_4 %765 = OpVectorShuffle %764 %764 0 1 0 1 
                                       f32_4 %766 = OpFMul %762 %765 
                                       f32_4 %767 = OpLoad %620 
                                       f32_4 %768 = OpVectorShuffle %767 %767 0 1 2 1 
                                       f32_4 %769 = OpFAdd %766 %768 
                                                      OpStore %628 %769 
                                       f32_4 %771 = OpLoad %628 
                                       f32_2 %772 = OpVectorShuffle %771 %771 0 1 
                                         f32 %773 = OpLoad %59 
                                         f32 %774 = OpCompositeExtract %772 0 
                                         f32 %775 = OpCompositeExtract %772 1 
                                       f32_3 %776 = OpCompositeConstruct %774 %775 %773 
                                                      OpStore %770 %776 
                         read_only Texture2D %777 = OpLoad %646 
                                     sampler %778 = OpLoad %648 
                  read_only Texture2DSampled %779 = OpSampledImage %777 %778 
                                       f32_3 %780 = OpLoad %770 
                                         f32 %781 = OpCompositeExtract %780 2 
                                         f32 %782 = OpImageSampleDrefExplicitLod %779 %780 %781 Lod %6 
                                Private f32* %783 = OpAccessChain %33 %27 
                                                      OpStore %783 %782 
                                       f32_4 %785 = OpLoad %628 
                                       f32_2 %786 = OpVectorShuffle %785 %785 2 3 
                                         f32 %787 = OpLoad %59 
                                         f32 %788 = OpCompositeExtract %786 0 
                                         f32 %789 = OpCompositeExtract %786 1 
                                       f32_3 %790 = OpCompositeConstruct %788 %789 %787 
                                                      OpStore %784 %790 
                         read_only Texture2D %791 = OpLoad %646 
                                     sampler %792 = OpLoad %648 
                  read_only Texture2DSampled %793 = OpSampledImage %791 %792 
                                       f32_3 %794 = OpLoad %784 
                                         f32 %795 = OpCompositeExtract %794 2 
                                         f32 %796 = OpImageSampleDrefExplicitLod %793 %794 %795 Lod %6 
                                                      OpStore %422 %796 
                                Private f32* %797 = OpAccessChain %522 %27 
                                         f32 %798 = OpLoad %797 
                                Private f32* %799 = OpAccessChain %33 %27 
                                         f32 %800 = OpLoad %799 
                                         f32 %801 = OpFMul %798 %800 
                                Private f32* %802 = OpAccessChain %9 %27 
                                         f32 %803 = OpLoad %802 
                                         f32 %804 = OpFAdd %801 %803 
                                Private f32* %805 = OpAccessChain %9 %27 
                                                      OpStore %805 %804 
                                Private f32* %806 = OpAccessChain %522 %49 
                                         f32 %807 = OpLoad %806 
                                         f32 %808 = OpLoad %422 
                                         f32 %809 = OpFMul %807 %808 
                                Private f32* %810 = OpAccessChain %9 %27 
                                         f32 %811 = OpLoad %810 
                                         f32 %812 = OpFAdd %809 %811 
                                Private f32* %813 = OpAccessChain %9 %27 
                                                      OpStore %813 %812 
                                       f32_4 %814 = OpLoad %81 
                                       f32_2 %815 = OpVectorShuffle %814 %814 0 1 
                              Uniform f32_4* %816 = OpAccessChain %40 %241 
                                       f32_4 %817 = OpLoad %816 
                                       f32_2 %818 = OpVectorShuffle %817 %817 0 1 
                                       f32_2 %819 = OpFMul %815 %818 
                                       f32_4 %820 = OpLoad %620 
                                       f32_2 %821 = OpVectorShuffle %820 %820 3 1 
                                       f32_2 %822 = OpFAdd %819 %821 
                                       f32_3 %823 = OpLoad %33 
                                       f32_3 %824 = OpVectorShuffle %823 %822 3 1 4 
                                                      OpStore %33 %824 
                                Private f32* %825 = OpAccessChain %620 %49 
                                         f32 %826 = OpLoad %825 
                                Private f32* %827 = OpAccessChain %260 %149 
                                                      OpStore %827 %826 
                                       f32_4 %828 = OpLoad %81 
                                       f32_2 %829 = OpVectorShuffle %828 %828 0 1 
                              Uniform f32_4* %830 = OpAccessChain %40 %241 
                                       f32_4 %831 = OpLoad %830 
                                       f32_2 %832 = OpVectorShuffle %831 %831 0 1 
                                       f32_2 %833 = OpFMul %829 %832 
                                       f32_4 %834 = OpLoad %260 
                                       f32_2 %835 = OpVectorShuffle %834 %834 0 2 
                                       f32_2 %836 = OpFAdd %833 %835 
                                                      OpStore %462 %836 
                                       f32_2 %838 = OpLoad %462 
                                         f32 %839 = OpLoad %59 
                                         f32 %840 = OpCompositeExtract %838 0 
                                         f32 %841 = OpCompositeExtract %838 1 
                                       f32_3 %842 = OpCompositeConstruct %840 %841 %839 
                                                      OpStore %837 %842 
                         read_only Texture2D %843 = OpLoad %646 
                                     sampler %844 = OpLoad %648 
                  read_only Texture2DSampled %845 = OpSampledImage %843 %844 
                                       f32_3 %846 = OpLoad %837 
                                         f32 %847 = OpCompositeExtract %846 2 
                                         f32 %848 = OpImageSampleDrefExplicitLod %845 %846 %847 Lod %6 
                                Private f32* %849 = OpAccessChain %462 %27 
                                                      OpStore %849 %848 
                                       f32_3 %851 = OpLoad %33 
                                       f32_2 %852 = OpVectorShuffle %851 %851 0 2 
                                         f32 %853 = OpLoad %59 
                                         f32 %854 = OpCompositeExtract %852 0 
                                         f32 %855 = OpCompositeExtract %852 1 
                                       f32_3 %856 = OpCompositeConstruct %854 %855 %853 
                                                      OpStore %850 %856 
                         read_only Texture2D %857 = OpLoad %646 
                                     sampler %858 = OpLoad %648 
                  read_only Texture2DSampled %859 = OpSampledImage %857 %858 
                                       f32_3 %860 = OpLoad %850 
                                         f32 %861 = OpCompositeExtract %860 2 
                                         f32 %862 = OpImageSampleDrefExplicitLod %859 %860 %861 Lod %6 
                                Private f32* %863 = OpAccessChain %33 %27 
                                                      OpStore %863 %862 
                                Private f32* %864 = OpAccessChain %522 %149 
                                         f32 %865 = OpLoad %864 
                                Private f32* %866 = OpAccessChain %33 %27 
                                         f32 %867 = OpLoad %866 
                                         f32 %868 = OpFMul %865 %867 
                                Private f32* %869 = OpAccessChain %9 %27 
                                         f32 %870 = OpLoad %869 
                                         f32 %871 = OpFAdd %868 %870 
                                Private f32* %872 = OpAccessChain %9 %27 
                                                      OpStore %872 %871 
                                Private f32* %873 = OpAccessChain %522 %67 
                                         f32 %874 = OpLoad %873 
                                Private f32* %875 = OpAccessChain %462 %27 
                                         f32 %876 = OpLoad %875 
                                         f32 %877 = OpFMul %874 %876 
                                Private f32* %878 = OpAccessChain %9 %27 
                                         f32 %879 = OpLoad %878 
                                         f32 %880 = OpFAdd %877 %879 
                                Private f32* %881 = OpAccessChain %9 %27 
                                                      OpStore %881 %880 
                                       f32_4 %882 = OpLoad %498 
                                       f32_4 %883 = OpLoad %517 
                                       f32_4 %884 = OpVectorShuffle %883 %883 2 2 2 2 
                                       f32_4 %885 = OpFMul %882 %884 
                                                      OpStore %522 %885 
                                       f32_4 %886 = OpLoad %498 
                                       f32_4 %887 = OpLoad %517 
                                       f32_4 %888 = OpVectorShuffle %887 %887 3 3 3 3 
                                       f32_4 %889 = OpFMul %886 %888 
                                                      OpStore %498 %889 
                                Private f32* %890 = OpAccessChain %165 %67 
                                         f32 %891 = OpLoad %890 
                                Private f32* %892 = OpAccessChain %620 %49 
                                                      OpStore %892 %891 
                                       f32_4 %893 = OpLoad %81 
                                       f32_4 %894 = OpVectorShuffle %893 %893 0 1 0 1 
                              Uniform f32_4* %895 = OpAccessChain %40 %241 
                                       f32_4 %896 = OpLoad %895 
                                       f32_4 %897 = OpVectorShuffle %896 %896 0 1 0 1 
                                       f32_4 %898 = OpFMul %894 %897 
                                       f32_4 %899 = OpLoad %620 
                                       f32_4 %900 = OpVectorShuffle %899 %899 0 1 2 1 
                                       f32_4 %901 = OpFAdd %898 %900 
                                                      OpStore %517 %901 
                                       f32_4 %903 = OpLoad %517 
                                       f32_2 %904 = OpVectorShuffle %903 %903 0 1 
                                         f32 %905 = OpLoad %59 
                                         f32 %906 = OpCompositeExtract %904 0 
                                         f32 %907 = OpCompositeExtract %904 1 
                                       f32_3 %908 = OpCompositeConstruct %906 %907 %905 
                                                      OpStore %902 %908 
                         read_only Texture2D %909 = OpLoad %646 
                                     sampler %910 = OpLoad %648 
                  read_only Texture2DSampled %911 = OpSampledImage %909 %910 
                                       f32_3 %912 = OpLoad %902 
                                         f32 %913 = OpCompositeExtract %912 2 
                                         f32 %914 = OpImageSampleDrefExplicitLod %911 %912 %913 Lod %6 
                                Private f32* %915 = OpAccessChain %33 %27 
                                                      OpStore %915 %914 
                                       f32_4 %917 = OpLoad %517 
                                       f32_2 %918 = OpVectorShuffle %917 %917 2 3 
                                         f32 %919 = OpLoad %59 
                                         f32 %920 = OpCompositeExtract %918 0 
                                         f32 %921 = OpCompositeExtract %918 1 
                                       f32_3 %922 = OpCompositeConstruct %920 %921 %919 
                                                      OpStore %916 %922 
                         read_only Texture2D %923 = OpLoad %646 
                                     sampler %924 = OpLoad %648 
                  read_only Texture2DSampled %925 = OpSampledImage %923 %924 
                                       f32_3 %926 = OpLoad %916 
                                         f32 %927 = OpCompositeExtract %926 2 
                                         f32 %928 = OpImageSampleDrefExplicitLod %925 %926 %927 Lod %6 
                                                      OpStore %422 %928 
                                Private f32* %929 = OpAccessChain %522 %27 
                                         f32 %930 = OpLoad %929 
                                Private f32* %931 = OpAccessChain %33 %27 
                                         f32 %932 = OpLoad %931 
                                         f32 %933 = OpFMul %930 %932 
                                Private f32* %934 = OpAccessChain %9 %27 
                                         f32 %935 = OpLoad %934 
                                         f32 %936 = OpFAdd %933 %935 
                                Private f32* %937 = OpAccessChain %9 %27 
                                                      OpStore %937 %936 
                                Private f32* %938 = OpAccessChain %522 %49 
                                         f32 %939 = OpLoad %938 
                                         f32 %940 = OpLoad %422 
                                         f32 %941 = OpFMul %939 %940 
                                Private f32* %942 = OpAccessChain %9 %27 
                                         f32 %943 = OpLoad %942 
                                         f32 %944 = OpFAdd %941 %943 
                                Private f32* %945 = OpAccessChain %9 %27 
                                                      OpStore %945 %944 
                                       f32_4 %946 = OpLoad %81 
                                       f32_2 %947 = OpVectorShuffle %946 %946 0 1 
                              Uniform f32_4* %948 = OpAccessChain %40 %241 
                                       f32_4 %949 = OpLoad %948 
                                       f32_2 %950 = OpVectorShuffle %949 %949 0 1 
                                       f32_2 %951 = OpFMul %947 %950 
                                       f32_4 %952 = OpLoad %620 
                                       f32_2 %953 = OpVectorShuffle %952 %952 3 1 
                                       f32_2 %954 = OpFAdd %951 %953 
                                       f32_3 %955 = OpLoad %33 
                                       f32_3 %956 = OpVectorShuffle %955 %954 3 1 4 
                                                      OpStore %33 %956 
                                       f32_4 %957 = OpLoad %620 
                                       f32_3 %958 = OpVectorShuffle %957 %957 0 2 3 
                                       f32_4 %959 = OpLoad %165 
                                       f32_4 %960 = OpVectorShuffle %959 %958 4 1 5 6 
                                                      OpStore %165 %960 
                                Private f32* %961 = OpAccessChain %620 %49 
                                         f32 %962 = OpLoad %961 
                                Private f32* %963 = OpAccessChain %260 %67 
                                                      OpStore %963 %962 
                                       f32_4 %964 = OpLoad %81 
                                       f32_2 %965 = OpVectorShuffle %964 %964 0 1 
                              Uniform f32_4* %966 = OpAccessChain %40 %241 
                                       f32_4 %967 = OpLoad %966 
                                       f32_2 %968 = OpVectorShuffle %967 %967 0 1 
                                       f32_2 %969 = OpFMul %965 %968 
                                       f32_4 %970 = OpLoad %260 
                                       f32_2 %971 = OpVectorShuffle %970 %970 0 3 
                                       f32_2 %972 = OpFAdd %969 %971 
                                                      OpStore %462 %972 
                                       f32_2 %974 = OpLoad %462 
                                         f32 %975 = OpLoad %59 
                                         f32 %976 = OpCompositeExtract %974 0 
                                         f32 %977 = OpCompositeExtract %974 1 
                                       f32_3 %978 = OpCompositeConstruct %976 %977 %975 
                                                      OpStore %973 %978 
                         read_only Texture2D %979 = OpLoad %646 
                                     sampler %980 = OpLoad %648 
                  read_only Texture2DSampled %981 = OpSampledImage %979 %980 
                                       f32_3 %982 = OpLoad %973 
                                         f32 %983 = OpCompositeExtract %982 2 
                                         f32 %984 = OpImageSampleDrefExplicitLod %981 %982 %983 Lod %6 
                                Private f32* %985 = OpAccessChain %462 %27 
                                                      OpStore %985 %984 
                                       f32_3 %987 = OpLoad %33 
                                       f32_2 %988 = OpVectorShuffle %987 %987 0 2 
                                         f32 %989 = OpLoad %59 
                                         f32 %990 = OpCompositeExtract %988 0 
                                         f32 %991 = OpCompositeExtract %988 1 
                                       f32_3 %992 = OpCompositeConstruct %990 %991 %989 
                                                      OpStore %986 %992 
                         read_only Texture2D %993 = OpLoad %646 
                                     sampler %994 = OpLoad %648 
                  read_only Texture2DSampled %995 = OpSampledImage %993 %994 
                                       f32_3 %996 = OpLoad %986 
                                         f32 %997 = OpCompositeExtract %996 2 
                                         f32 %998 = OpImageSampleDrefExplicitLod %995 %996 %997 Lod %6 
                                Private f32* %999 = OpAccessChain %33 %27 
                                                      OpStore %999 %998 
                               Private f32* %1000 = OpAccessChain %522 %149 
                                        f32 %1001 = OpLoad %1000 
                               Private f32* %1002 = OpAccessChain %33 %27 
                                        f32 %1003 = OpLoad %1002 
                                        f32 %1004 = OpFMul %1001 %1003 
                               Private f32* %1005 = OpAccessChain %9 %27 
                                        f32 %1006 = OpLoad %1005 
                                        f32 %1007 = OpFAdd %1004 %1006 
                               Private f32* %1008 = OpAccessChain %9 %27 
                                                      OpStore %1008 %1007 
                               Private f32* %1009 = OpAccessChain %522 %67 
                                        f32 %1010 = OpLoad %1009 
                               Private f32* %1011 = OpAccessChain %462 %27 
                                        f32 %1012 = OpLoad %1011 
                                        f32 %1013 = OpFMul %1010 %1012 
                               Private f32* %1014 = OpAccessChain %9 %27 
                                        f32 %1015 = OpLoad %1014 
                                        f32 %1016 = OpFAdd %1013 %1015 
                               Private f32* %1017 = OpAccessChain %9 %27 
                                                      OpStore %1017 %1016 
                                      f32_4 %1018 = OpLoad %81 
                                      f32_4 %1019 = OpVectorShuffle %1018 %1018 0 1 0 1 
                             Uniform f32_4* %1020 = OpAccessChain %40 %241 
                                      f32_4 %1021 = OpLoad %1020 
                                      f32_4 %1022 = OpVectorShuffle %1021 %1021 0 1 0 1 
                                      f32_4 %1023 = OpFMul %1019 %1022 
                                      f32_4 %1024 = OpLoad %165 
                                      f32_4 %1025 = OpVectorShuffle %1024 %1024 0 1 2 1 
                                      f32_4 %1026 = OpFAdd %1023 %1025 
                                                      OpStore %517 %1026 
                                      f32_4 %1027 = OpLoad %81 
                                      f32_2 %1028 = OpVectorShuffle %1027 %1027 0 1 
                             Uniform f32_4* %1029 = OpAccessChain %40 %241 
                                      f32_4 %1030 = OpLoad %1029 
                                      f32_2 %1031 = OpVectorShuffle %1030 %1030 0 1 
                                      f32_2 %1032 = OpFMul %1028 %1031 
                                      f32_4 %1033 = OpLoad %165 
                                      f32_2 %1034 = OpVectorShuffle %1033 %1033 3 1 
                                      f32_2 %1035 = OpFAdd %1032 %1034 
                                      f32_3 %1036 = OpLoad %33 
                                      f32_3 %1037 = OpVectorShuffle %1036 %1035 3 1 4 
                                                      OpStore %33 %1037 
                               Private f32* %1038 = OpAccessChain %165 %49 
                                        f32 %1039 = OpLoad %1038 
                               Private f32* %1040 = OpAccessChain %260 %49 
                                                      OpStore %1040 %1039 
                                      f32_4 %1041 = OpLoad %81 
                                      f32_2 %1042 = OpVectorShuffle %1041 %1041 0 1 
                             Uniform f32_4* %1043 = OpAccessChain %40 %241 
                                      f32_4 %1044 = OpLoad %1043 
                                      f32_2 %1045 = OpVectorShuffle %1044 %1044 0 1 
                                      f32_2 %1046 = OpFMul %1042 %1045 
                                      f32_4 %1047 = OpLoad %260 
                                      f32_2 %1048 = OpVectorShuffle %1047 %1047 0 1 
                                      f32_2 %1049 = OpFAdd %1046 %1048 
                                      f32_4 %1050 = OpLoad %81 
                                      f32_4 %1051 = OpVectorShuffle %1050 %1049 4 5 2 3 
                                                      OpStore %81 %1051 
                                      f32_4 %1053 = OpLoad %81 
                                      f32_2 %1054 = OpVectorShuffle %1053 %1053 0 1 
                                        f32 %1055 = OpLoad %59 
                                        f32 %1056 = OpCompositeExtract %1054 0 
                                        f32 %1057 = OpCompositeExtract %1054 1 
                                      f32_3 %1058 = OpCompositeConstruct %1056 %1057 %1055 
                                                      OpStore %1052 %1058 
                        read_only Texture2D %1059 = OpLoad %646 
                                    sampler %1060 = OpLoad %648 
                 read_only Texture2DSampled %1061 = OpSampledImage %1059 %1060 
                                      f32_3 %1062 = OpLoad %1052 
                                        f32 %1063 = OpCompositeExtract %1062 2 
                                        f32 %1064 = OpImageSampleDrefExplicitLod %1061 %1062 %1063 Lod %6 
                               Private f32* %1065 = OpAccessChain %81 %27 
                                                      OpStore %1065 %1064 
                                      f32_3 %1067 = OpLoad %33 
                                      f32_2 %1068 = OpVectorShuffle %1067 %1067 0 2 
                                        f32 %1069 = OpLoad %59 
                                        f32 %1070 = OpCompositeExtract %1068 0 
                                        f32 %1071 = OpCompositeExtract %1068 1 
                                      f32_3 %1072 = OpCompositeConstruct %1070 %1071 %1069 
                                                      OpStore %1066 %1072 
                        read_only Texture2D %1073 = OpLoad %646 
                                    sampler %1074 = OpLoad %648 
                 read_only Texture2DSampled %1075 = OpSampledImage %1073 %1074 
                                      f32_3 %1076 = OpLoad %1066 
                                        f32 %1077 = OpCompositeExtract %1076 2 
                                        f32 %1078 = OpImageSampleDrefExplicitLod %1075 %1076 %1077 Lod %6 
                               Private f32* %1079 = OpAccessChain %33 %27 
                                                      OpStore %1079 %1078 
                                      f32_4 %1081 = OpLoad %517 
                                      f32_2 %1082 = OpVectorShuffle %1081 %1081 0 1 
                                        f32 %1083 = OpLoad %59 
                                        f32 %1084 = OpCompositeExtract %1082 0 
                                        f32 %1085 = OpCompositeExtract %1082 1 
                                      f32_3 %1086 = OpCompositeConstruct %1084 %1085 %1083 
                                                      OpStore %1080 %1086 
                        read_only Texture2D %1087 = OpLoad %646 
                                    sampler %1088 = OpLoad %648 
                 read_only Texture2DSampled %1089 = OpSampledImage %1087 %1088 
                                      f32_3 %1090 = OpLoad %1080 
                                        f32 %1091 = OpCompositeExtract %1090 2 
                                        f32 %1092 = OpImageSampleDrefExplicitLod %1089 %1090 %1091 Lod %6 
                                                      OpStore %422 %1092 
                                      f32_4 %1094 = OpLoad %517 
                                      f32_2 %1095 = OpVectorShuffle %1094 %1094 2 3 
                                        f32 %1096 = OpLoad %59 
                                        f32 %1097 = OpCompositeExtract %1095 0 
                                        f32 %1098 = OpCompositeExtract %1095 1 
                                      f32_3 %1099 = OpCompositeConstruct %1097 %1098 %1096 
                                                      OpStore %1093 %1099 
                        read_only Texture2D %1100 = OpLoad %646 
                                    sampler %1101 = OpLoad %648 
                 read_only Texture2DSampled %1102 = OpSampledImage %1100 %1101 
                                      f32_3 %1103 = OpLoad %1093 
                                        f32 %1104 = OpCompositeExtract %1103 2 
                                        f32 %1105 = OpImageSampleDrefExplicitLod %1102 %1103 %1104 Lod %6 
                                                      OpStore %59 %1105 
                               Private f32* %1106 = OpAccessChain %498 %27 
                                        f32 %1107 = OpLoad %1106 
                                        f32 %1108 = OpLoad %422 
                                        f32 %1109 = OpFMul %1107 %1108 
                               Private f32* %1110 = OpAccessChain %9 %27 
                                        f32 %1111 = OpLoad %1110 
                                        f32 %1112 = OpFAdd %1109 %1111 
                               Private f32* %1113 = OpAccessChain %9 %27 
                                                      OpStore %1113 %1112 
                               Private f32* %1114 = OpAccessChain %498 %49 
                                        f32 %1115 = OpLoad %1114 
                                        f32 %1116 = OpLoad %59 
                                        f32 %1117 = OpFMul %1115 %1116 
                               Private f32* %1118 = OpAccessChain %9 %27 
                                        f32 %1119 = OpLoad %1118 
                                        f32 %1120 = OpFAdd %1117 %1119 
                               Private f32* %1121 = OpAccessChain %9 %27 
                                                      OpStore %1121 %1120 
                               Private f32* %1122 = OpAccessChain %498 %149 
                                        f32 %1123 = OpLoad %1122 
                               Private f32* %1124 = OpAccessChain %33 %27 
                                        f32 %1125 = OpLoad %1124 
                                        f32 %1126 = OpFMul %1123 %1125 
                               Private f32* %1127 = OpAccessChain %9 %27 
                                        f32 %1128 = OpLoad %1127 
                                        f32 %1129 = OpFAdd %1126 %1128 
                               Private f32* %1130 = OpAccessChain %9 %27 
                                                      OpStore %1130 %1129 
                               Private f32* %1131 = OpAccessChain %498 %67 
                                        f32 %1132 = OpLoad %1131 
                               Private f32* %1133 = OpAccessChain %81 %27 
                                        f32 %1134 = OpLoad %1133 
                                        f32 %1135 = OpFMul %1132 %1134 
                               Private f32* %1136 = OpAccessChain %9 %27 
                                        f32 %1137 = OpLoad %1136 
                                        f32 %1138 = OpFAdd %1135 %1137 
                               Private f32* %1139 = OpAccessChain %9 %27 
                                                      OpStore %1139 %1138 
                               Uniform f32* %1140 = OpAccessChain %40 %229 %27 
                                        f32 %1141 = OpLoad %1140 
                                        f32 %1142 = OpFNegate %1141 
                                        f32 %1143 = OpFAdd %1142 %54 
                               Private f32* %1144 = OpAccessChain %33 %27 
                                                      OpStore %1144 %1143 
                                      f32_4 %1147 = OpLoad %9 
                                      f32_4 %1148 = OpVectorShuffle %1147 %1147 0 0 0 0 
                                      f32_3 %1149 = OpLoad %33 
                                      f32_4 %1150 = OpVectorShuffle %1149 %1149 0 0 0 0 
                                      f32_4 %1151 = OpFMul %1148 %1150 
                             Uniform f32_4* %1152 = OpAccessChain %40 %229 
                                      f32_4 %1153 = OpLoad %1152 
                                      f32_4 %1154 = OpVectorShuffle %1153 %1153 0 0 0 0 
                                      f32_4 %1155 = OpFAdd %1151 %1154 
                                                      OpStore %1146 %1155 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "SHADOWS_SPLIT_SPHERES" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "SHADOWS_SPLIT_SPHERES" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraInvProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in  vec4 in_POSITION0;
in  vec2 in_TEXCOORD0;
in  vec3 in_TEXCOORD1;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_CameraInvProjection[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_CameraInvProjection[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    vs_TEXCOORD0.zw = u_xlat1.zz + u_xlat1.xw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = in_TEXCOORD1.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-hlslcc_mtx4x4unity_CameraInvProjection[2].xyz);
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[2].xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;
    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;
    u_xlat1.w = (-u_xlat1.z);
    vs_TEXCOORD2.xyz = u_xlat1.xyw;
    u_xlat0.w = (-u_xlat0.z);
    vs_TEXCOORD3.xyz = u_xlat0.xyw;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	vec4 _LightShadowData;
uniform 	vec4 _ShadowMapTexture_TexelSize;
UNITY_LOCATION(0) uniform  sampler2D _CameraDepthTexture;
UNITY_LOCATION(1) uniform  sampler2D _ShadowMapTexture;
UNITY_LOCATION(2) uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec3 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD3;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
bvec4 u_xlatb1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
vec4 u_xlat6;
vec4 u_xlat7;
vec3 u_xlat8;
vec3 u_xlat9;
float u_xlat16;
vec2 u_xlat17;
float u_xlat24;
void main()
{
    u_xlat0 = texture(_CameraDepthTexture, vs_TEXCOORD0.xy);
    u_xlat8.x = _ZBufferParams.x * u_xlat0.x + _ZBufferParams.y;
    u_xlat8.x = float(1.0) / u_xlat8.x;
    u_xlat16 = (-u_xlat8.x) + u_xlat0.x;
    u_xlat8.x = unity_OrthoParams.w * u_xlat16 + u_xlat8.x;
    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + vs_TEXCOORD3.xyz;
    u_xlat0.xzw = u_xlat0.xxx * u_xlat1.xyz + vs_TEXCOORD2.xyz;
    u_xlat0.xzw = (-vs_TEXCOORD1.xyz) * u_xlat8.xxx + u_xlat0.xzw;
    u_xlat1.xyz = u_xlat8.xxx * vs_TEXCOORD1.xyz;
    u_xlat0.xyz = unity_OrthoParams.www * u_xlat0.xzw + u_xlat1.xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_CameraToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_CameraToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_CameraToWorld[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_CameraToWorld[3];
    u_xlat1.xyz = u_xlat0.xyz + (-unity_ShadowSplitSpheres[0].xyz);
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat2.xyz = u_xlat0.xyz + (-unity_ShadowSplitSpheres[1].xyz);
    u_xlat1.y = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat2.xyz = u_xlat0.xyz + (-unity_ShadowSplitSpheres[2].xyz);
    u_xlat1.z = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat2.xyz = u_xlat0.xyz + (-unity_ShadowSplitSpheres[3].xyz);
    u_xlat1.w = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlatb1 = lessThan(u_xlat1, unity_ShadowSplitSqRadii);
    u_xlat2.x = (u_xlatb1.x) ? float(-1.0) : float(-0.0);
    u_xlat2.y = (u_xlatb1.y) ? float(-1.0) : float(-0.0);
    u_xlat2.z = (u_xlatb1.z) ? float(-1.0) : float(-0.0);
    u_xlat1.x = u_xlatb1.x ? float(1.0) : 0.0;
    u_xlat1.y = u_xlatb1.y ? float(1.0) : 0.0;
    u_xlat1.z = u_xlatb1.z ? float(1.0) : 0.0;
    u_xlat1.w = u_xlatb1.w ? float(1.0) : 0.0;
;
    u_xlat9.xyz = u_xlat2.xyz + u_xlat1.yzw;
    u_xlat9.xyz = max(u_xlat9.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[5].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[4].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[6].xyz * u_xlat0.zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[7].xyz * u_xlat0.www + u_xlat2.xyz;
    u_xlat2.xyz = u_xlat9.xxx * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * u_xlat0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * u_xlat0.zzz + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[3].xyz * u_xlat0.www + u_xlat3.xyz;
    u_xlat2.xyz = u_xlat3.xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat3.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[9].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[8].xyz * u_xlat0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[10].xyz * u_xlat0.zzz + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[11].xyz * u_xlat0.www + u_xlat3.xyz;
    u_xlat1.xyz = u_xlat3.xyz * u_xlat9.yyy + u_xlat2.xyz;
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[13].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[12].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[14].xyz * u_xlat0.zzz + u_xlat2.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[15].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat9.zzz + u_xlat1.xyz;
    u_xlat1.xy = u_xlat0.xy * _ShadowMapTexture_TexelSize.zw + vec2(0.5, 0.5);
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlat0.xy = u_xlat0.xy * _ShadowMapTexture_TexelSize.zw + (-u_xlat1.xy);
    u_xlat17.xy = (-u_xlat0.xy) + vec2(1.0, 1.0);
    u_xlat2.xy = min(u_xlat0.xy, vec2(0.0, 0.0));
    u_xlat17.xy = (-u_xlat2.xy) * u_xlat2.xy + u_xlat17.xy;
    u_xlat17.xy = u_xlat17.xy + vec2(2.0, 2.0);
    u_xlat2.xy = u_xlat17.xy * vec2(0.0816320032, 0.0816320032);
    u_xlat3.y = u_xlat2.x;
    u_xlat17.xy = max(u_xlat0.xy, vec2(0.0, 0.0));
    u_xlat4 = u_xlat0.xxyy + vec4(0.5, 1.0, 0.5, 1.0);
    u_xlat17.xy = (-u_xlat17.xy) * u_xlat17.xy + u_xlat4.yw;
    u_xlat4 = u_xlat4.xxzz * u_xlat4.xxzz;
    u_xlat17.xy = u_xlat17.xy + vec2(2.0, 2.0);
    u_xlat5.z = u_xlat17.x * 0.0816320032;
    u_xlat6.z = u_xlat17.y * 0.0816320032;
    u_xlat17.xy = u_xlat4.xz * vec2(0.5, 0.5) + (-u_xlat0.xy);
    u_xlat4.xy = u_xlat4.yw * vec2(0.0408160016, 0.0408160016);
    u_xlat6.xy = u_xlat17.yx * vec2(0.0816320032, 0.0816320032);
    u_xlat5.x = u_xlat6.y;
    u_xlat5.yw = u_xlat0.xx * vec2(-0.0816320032, 0.0816320032) + vec2(0.163264006, 0.0816320032);
    u_xlat3.xz = u_xlat0.xx * vec2(-0.0816320032, 0.0816320032) + vec2(0.0816320032, 0.163264006);
    u_xlat3.w = u_xlat4.x;
    u_xlat2.w = u_xlat4.y;
    u_xlat4 = u_xlat3 + u_xlat5;
    u_xlat3 = u_xlat3 / u_xlat4;
    u_xlat3 = u_xlat3 + vec4(-3.5, -1.5, 0.5, 2.5);
    u_xlat3 = u_xlat3.wxyz * _ShadowMapTexture_TexelSize.xxxx;
    u_xlat5.xzw = u_xlat3.yzw;
    u_xlat6.yw = u_xlat0.yy * vec2(-0.0816320032, 0.0816320032) + vec2(0.163264006, 0.0816320032);
    u_xlat2.xz = u_xlat0.yy * vec2(-0.0816320032, 0.0816320032) + vec2(0.0816320032, 0.163264006);
    u_xlat6 = u_xlat2 + u_xlat6;
    u_xlat2 = u_xlat2 / u_xlat6;
    u_xlat2 = u_xlat2 + vec4(-3.5, -1.5, 0.5, 2.5);
    u_xlat2 = u_xlat2.xwyz * _ShadowMapTexture_TexelSize.yyyy;
    u_xlat5.y = u_xlat2.x;
    u_xlat7 = u_xlat1.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat5.xyzy;
    vec3 txVec0 = vec3(u_xlat7.xy,u_xlat0.z);
    u_xlat0.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
    vec3 txVec1 = vec3(u_xlat7.zw,u_xlat0.z);
    u_xlat8.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec1, 0.0);
    u_xlat7 = u_xlat4 * u_xlat6.xxxx;
    u_xlat8.x = u_xlat8.x * u_xlat7.y;
    u_xlat0.x = u_xlat7.x * u_xlat0.x + u_xlat8.x;
    u_xlat8.xz = u_xlat1.xy * _ShadowMapTexture_TexelSize.xy + u_xlat5.wy;
    u_xlat3.y = u_xlat5.y;
    u_xlat17.xy = u_xlat1.xy * _ShadowMapTexture_TexelSize.xy + u_xlat3.xy;
    vec3 txVec2 = vec3(u_xlat17.xy,u_xlat0.z);
    u_xlat17.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec2, 0.0);
    vec3 txVec3 = vec3(u_xlat8.xz,u_xlat0.z);
    u_xlat8.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec3, 0.0);
    u_xlat0.x = u_xlat7.z * u_xlat8.x + u_xlat0.x;
    u_xlat0.x = u_xlat7.w * u_xlat17.x + u_xlat0.x;
    u_xlat5.y = u_xlat2.z;
    u_xlat7 = u_xlat1.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat5.xyzy;
    vec3 txVec4 = vec3(u_xlat7.xy,u_xlat0.z);
    u_xlat8.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec4, 0.0);
    vec3 txVec5 = vec3(u_xlat7.zw,u_xlat0.z);
    u_xlat24 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec5, 0.0);
    u_xlat7 = u_xlat4 * u_xlat6.yyyy;
    u_xlat0.x = u_xlat7.x * u_xlat8.x + u_xlat0.x;
    u_xlat0.x = u_xlat7.y * u_xlat24 + u_xlat0.x;
    u_xlat8.xz = u_xlat1.xy * _ShadowMapTexture_TexelSize.xy + u_xlat5.wy;
    u_xlat3.z = u_xlat5.y;
    u_xlat17.xy = u_xlat1.xy * _ShadowMapTexture_TexelSize.xy + u_xlat3.xz;
    vec3 txVec6 = vec3(u_xlat17.xy,u_xlat0.z);
    u_xlat17.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec6, 0.0);
    vec3 txVec7 = vec3(u_xlat8.xz,u_xlat0.z);
    u_xlat8.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec7, 0.0);
    u_xlat0.x = u_xlat7.z * u_xlat8.x + u_xlat0.x;
    u_xlat0.x = u_xlat7.w * u_xlat17.x + u_xlat0.x;
    u_xlat5.y = u_xlat2.w;
    u_xlat7 = u_xlat1.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat5.xyzy;
    vec3 txVec8 = vec3(u_xlat7.xy,u_xlat0.z);
    u_xlat8.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec8, 0.0);
    vec3 txVec9 = vec3(u_xlat7.zw,u_xlat0.z);
    u_xlat24 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec9, 0.0);
    u_xlat7 = u_xlat4 * u_xlat6.zzzz;
    u_xlat4 = u_xlat4 * u_xlat6.wwww;
    u_xlat0.x = u_xlat7.x * u_xlat8.x + u_xlat0.x;
    u_xlat0.x = u_xlat7.y * u_xlat24 + u_xlat0.x;
    u_xlat8.xz = u_xlat1.xy * _ShadowMapTexture_TexelSize.xy + u_xlat5.wy;
    u_xlat2.xzw = u_xlat5.xzw;
    u_xlat3.w = u_xlat5.y;
    u_xlat17.xy = u_xlat1.xy * _ShadowMapTexture_TexelSize.xy + u_xlat3.xw;
    vec3 txVec10 = vec3(u_xlat17.xy,u_xlat0.z);
    u_xlat17.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec10, 0.0);
    vec3 txVec11 = vec3(u_xlat8.xz,u_xlat0.z);
    u_xlat8.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec11, 0.0);
    u_xlat0.x = u_xlat7.z * u_xlat8.x + u_xlat0.x;
    u_xlat0.x = u_xlat7.w * u_xlat17.x + u_xlat0.x;
    u_xlat5 = u_xlat1.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat2.xyzy;
    u_xlat8.xz = u_xlat1.xy * _ShadowMapTexture_TexelSize.xy + u_xlat2.wy;
    u_xlat3.y = u_xlat2.y;
    u_xlat1.xy = u_xlat1.xy * _ShadowMapTexture_TexelSize.xy + u_xlat3.xy;
    vec3 txVec12 = vec3(u_xlat1.xy,u_xlat0.z);
    u_xlat1.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec12, 0.0);
    vec3 txVec13 = vec3(u_xlat8.xz,u_xlat0.z);
    u_xlat8.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec13, 0.0);
    vec3 txVec14 = vec3(u_xlat5.xy,u_xlat0.z);
    u_xlat24 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec14, 0.0);
    vec3 txVec15 = vec3(u_xlat5.zw,u_xlat0.z);
    u_xlat16 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec15, 0.0);
    u_xlat0.x = u_xlat4.x * u_xlat24 + u_xlat0.x;
    u_xlat0.x = u_xlat4.y * u_xlat16 + u_xlat0.x;
    u_xlat0.x = u_xlat4.z * u_xlat8.x + u_xlat0.x;
    u_xlat0.x = u_xlat4.w * u_xlat1.x + u_xlat0.x;
    u_xlat8.x = (-_LightShadowData.x) + 1.0;
    SV_Target0 = u_xlat0.xxxx * u_xlat8.xxxx + _LightShadowData.xxxx;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "SHADOWS_SPLIT_SPHERES" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 193
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %80 %119 %129 %134 %136 %177 %184 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpMemberDecorate %78 0 BuiltIn 78 
                                                      OpMemberDecorate %78 1 BuiltIn 78 
                                                      OpMemberDecorate %78 2 BuiltIn 78 
                                                      OpDecorate %78 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 119 
                                                      OpDecorate %129 Location 129 
                                                      OpDecorate vs_TEXCOORD1 Location 134 
                                                      OpDecorate %136 Location 136 
                                                      OpDecorate vs_TEXCOORD2 Location 177 
                                                      OpDecorate vs_TEXCOORD3 Location 184 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %16 %17 %18 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4];}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 2 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %29 = OpConstant 0 
                                          i32 %45 = OpConstant 3 
                               Private f32_4* %49 = OpVariable Private 
                                          u32 %76 = OpConstant 1 
                                              %77 = OpTypeArray %6 %76 
                                              %78 = OpTypeStruct %7 %6 %77 
                                              %79 = OpTypePointer Output %78 
         Output struct {f32_4; f32; f32[1];}* %80 = OpVariable Output 
                                              %82 = OpTypePointer Output %7 
                                              %84 = OpTypePointer Private %6 
                                          u32 %87 = OpConstant 0 
                                              %88 = OpTypePointer Uniform %6 
                                              %93 = OpTypeVector %6 3 
                                          f32 %96 = OpConstant 3.674022E-40 
                                        f32_3 %97 = OpConstantComposite %96 %96 %96 
                                             %101 = OpTypePointer Private %93 
                              Private f32_3* %102 = OpVariable Private 
                       Output f32_4* vs_TEXCOORD0 = OpVariable Output 
                                             %120 = OpTypeVector %6 2 
                                             %128 = OpTypePointer Input %120 
                                Input f32_2* %129 = OpVariable Input 
                                             %133 = OpTypePointer Output %93 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                                             %135 = OpTypePointer Input %93 
                                Input f32_3* %136 = OpVariable Input 
                                         u32 %171 = OpConstant 2 
                                         u32 %175 = OpConstant 3 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                       Output f32_3* vs_TEXCOORD3 = OpVariable Output 
                                             %187 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %30 = OpAccessChain %21 %23 %29 
                                        f32_4 %31 = OpLoad %30 
                                        f32_4 %32 = OpLoad %11 
                                        f32_4 %33 = OpVectorShuffle %32 %32 0 0 0 0 
                                        f32_4 %34 = OpFMul %31 %33 
                                        f32_4 %35 = OpLoad %9 
                                        f32_4 %36 = OpFAdd %34 %35 
                                                      OpStore %9 %36 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %23 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %44 = OpLoad %9 
                               Uniform f32_4* %46 = OpAccessChain %21 %23 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_4 %48 = OpFAdd %44 %47 
                                                      OpStore %9 %48 
                                        f32_4 %50 = OpLoad %9 
                                        f32_4 %51 = OpVectorShuffle %50 %50 1 1 1 1 
                               Uniform f32_4* %52 = OpAccessChain %21 %45 %24 
                                        f32_4 %53 = OpLoad %52 
                                        f32_4 %54 = OpFMul %51 %53 
                                                      OpStore %49 %54 
                               Uniform f32_4* %55 = OpAccessChain %21 %45 %29 
                                        f32_4 %56 = OpLoad %55 
                                        f32_4 %57 = OpLoad %9 
                                        f32_4 %58 = OpVectorShuffle %57 %57 0 0 0 0 
                                        f32_4 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %49 
                                        f32_4 %61 = OpFAdd %59 %60 
                                                      OpStore %49 %61 
                               Uniform f32_4* %62 = OpAccessChain %21 %45 %23 
                                        f32_4 %63 = OpLoad %62 
                                        f32_4 %64 = OpLoad %9 
                                        f32_4 %65 = OpVectorShuffle %64 %64 2 2 2 2 
                                        f32_4 %66 = OpFMul %63 %65 
                                        f32_4 %67 = OpLoad %49 
                                        f32_4 %68 = OpFAdd %66 %67 
                                                      OpStore %49 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %45 %45 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %9 
                                        f32_4 %72 = OpVectorShuffle %71 %71 3 3 3 3 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %49 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %9 %75 
                                        f32_4 %81 = OpLoad %9 
                                Output f32_4* %83 = OpAccessChain %80 %29 
                                                      OpStore %83 %81 
                                 Private f32* %85 = OpAccessChain %9 %76 
                                          f32 %86 = OpLoad %85 
                                 Uniform f32* %89 = OpAccessChain %21 %29 %87 
                                          f32 %90 = OpLoad %89 
                                          f32 %91 = OpFMul %86 %90 
                                 Private f32* %92 = OpAccessChain %9 %76 
                                                      OpStore %92 %91 
                                        f32_4 %94 = OpLoad %9 
                                        f32_3 %95 = OpVectorShuffle %94 %94 0 3 1 
                                        f32_3 %98 = OpFMul %95 %97 
                                        f32_4 %99 = OpLoad %49 
                                       f32_4 %100 = OpVectorShuffle %99 %98 4 1 5 6 
                                                      OpStore %49 %100 
                                       f32_4 %103 = OpLoad %9 
                                       f32_3 %104 = OpVectorShuffle %103 %103 1 1 1 
                              Uniform f32_4* %105 = OpAccessChain %21 %24 %24 
                                       f32_4 %106 = OpLoad %105 
                                       f32_3 %107 = OpVectorShuffle %106 %106 0 1 2 
                                       f32_3 %108 = OpFMul %104 %107 
                                                      OpStore %102 %108 
                              Uniform f32_4* %109 = OpAccessChain %21 %24 %29 
                                       f32_4 %110 = OpLoad %109 
                                       f32_3 %111 = OpVectorShuffle %110 %110 0 1 2 
                                       f32_4 %112 = OpLoad %9 
                                       f32_3 %113 = OpVectorShuffle %112 %112 0 0 0 
                                       f32_3 %114 = OpFMul %111 %113 
                                       f32_3 %115 = OpLoad %102 
                                       f32_3 %116 = OpFAdd %114 %115 
                                       f32_4 %117 = OpLoad %9 
                                       f32_4 %118 = OpVectorShuffle %117 %116 4 5 6 3 
                                                      OpStore %9 %118 
                                       f32_4 %121 = OpLoad %49 
                                       f32_2 %122 = OpVectorShuffle %121 %121 2 2 
                                       f32_4 %123 = OpLoad %49 
                                       f32_2 %124 = OpVectorShuffle %123 %123 0 3 
                                       f32_2 %125 = OpFAdd %122 %124 
                                       f32_4 %126 = OpLoad vs_TEXCOORD0 
                                       f32_4 %127 = OpVectorShuffle %126 %125 0 1 4 5 
                                                      OpStore vs_TEXCOORD0 %127 
                                       f32_2 %130 = OpLoad %129 
                                       f32_4 %131 = OpLoad vs_TEXCOORD0 
                                       f32_4 %132 = OpVectorShuffle %131 %130 4 5 2 3 
                                                      OpStore vs_TEXCOORD0 %132 
                                       f32_3 %137 = OpLoad %136 
                                                      OpStore vs_TEXCOORD1 %137 
                                       f32_4 %138 = OpLoad %9 
                                       f32_3 %139 = OpVectorShuffle %138 %138 0 1 2 
                              Uniform f32_4* %140 = OpAccessChain %21 %24 %23 
                                       f32_4 %141 = OpLoad %140 
                                       f32_3 %142 = OpVectorShuffle %141 %141 0 1 2 
                                       f32_3 %143 = OpFNegate %142 
                                       f32_3 %144 = OpFAdd %139 %143 
                                       f32_4 %145 = OpLoad %49 
                                       f32_4 %146 = OpVectorShuffle %145 %144 4 5 6 3 
                                                      OpStore %49 %146 
                                       f32_4 %147 = OpLoad %9 
                                       f32_3 %148 = OpVectorShuffle %147 %147 0 1 2 
                              Uniform f32_4* %149 = OpAccessChain %21 %24 %23 
                                       f32_4 %150 = OpLoad %149 
                                       f32_3 %151 = OpVectorShuffle %150 %150 0 1 2 
                                       f32_3 %152 = OpFAdd %148 %151 
                                       f32_4 %153 = OpLoad %9 
                                       f32_4 %154 = OpVectorShuffle %153 %152 4 5 6 3 
                                                      OpStore %9 %154 
                                       f32_4 %155 = OpLoad %9 
                                       f32_3 %156 = OpVectorShuffle %155 %155 0 1 2 
                              Uniform f32_4* %157 = OpAccessChain %21 %24 %45 
                                       f32_4 %158 = OpLoad %157 
                                       f32_3 %159 = OpVectorShuffle %158 %158 0 1 2 
                                       f32_3 %160 = OpFAdd %156 %159 
                                       f32_4 %161 = OpLoad %9 
                                       f32_4 %162 = OpVectorShuffle %161 %160 4 5 6 3 
                                                      OpStore %9 %162 
                                       f32_4 %163 = OpLoad %49 
                                       f32_3 %164 = OpVectorShuffle %163 %163 0 1 2 
                              Uniform f32_4* %165 = OpAccessChain %21 %24 %45 
                                       f32_4 %166 = OpLoad %165 
                                       f32_3 %167 = OpVectorShuffle %166 %166 0 1 2 
                                       f32_3 %168 = OpFAdd %164 %167 
                                       f32_4 %169 = OpLoad %49 
                                       f32_4 %170 = OpVectorShuffle %169 %168 4 5 6 3 
                                                      OpStore %49 %170 
                                Private f32* %172 = OpAccessChain %49 %171 
                                         f32 %173 = OpLoad %172 
                                         f32 %174 = OpFNegate %173 
                                Private f32* %176 = OpAccessChain %49 %175 
                                                      OpStore %176 %174 
                                       f32_4 %178 = OpLoad %49 
                                       f32_3 %179 = OpVectorShuffle %178 %178 0 1 3 
                                                      OpStore vs_TEXCOORD2 %179 
                                Private f32* %180 = OpAccessChain %9 %171 
                                         f32 %181 = OpLoad %180 
                                         f32 %182 = OpFNegate %181 
                                Private f32* %183 = OpAccessChain %9 %175 
                                                      OpStore %183 %182 
                                       f32_4 %185 = OpLoad %9 
                                       f32_3 %186 = OpVectorShuffle %185 %185 0 1 3 
                                                      OpStore vs_TEXCOORD3 %186 
                                 Output f32* %188 = OpAccessChain %80 %29 %76 
                                         f32 %189 = OpLoad %188 
                                         f32 %190 = OpFNegate %189 
                                 Output f32* %191 = OpAccessChain %80 %29 %76 
                                                      OpStore %191 %190 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 1236
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %21 %84 %87 %101 %1225 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpDecorate %12 DescriptorSet 12 
                                                      OpDecorate %12 Binding 12 
                                                      OpDecorate %16 DescriptorSet 16 
                                                      OpDecorate %16 Binding 16 
                                                      OpDecorate vs_TEXCOORD0 Location 21 
                                                      OpDecorate %35 ArrayStride 35 
                                                      OpDecorate %36 ArrayStride 36 
                                                      OpDecorate %38 ArrayStride 38 
                                                      OpMemberDecorate %39 0 Offset 39 
                                                      OpMemberDecorate %39 1 Offset 39 
                                                      OpMemberDecorate %39 2 Offset 39 
                                                      OpMemberDecorate %39 3 Offset 39 
                                                      OpMemberDecorate %39 4 Offset 39 
                                                      OpMemberDecorate %39 5 Offset 39 
                                                      OpMemberDecorate %39 6 Offset 39 
                                                      OpMemberDecorate %39 7 Offset 39 
                                                      OpDecorate %39 Block 
                                                      OpDecorate %41 DescriptorSet 41 
                                                      OpDecorate %41 Binding 41 
                                                      OpDecorate vs_TEXCOORD2 Location 84 
                                                      OpDecorate vs_TEXCOORD3 Location 87 
                                                      OpDecorate vs_TEXCOORD1 Location 101 
                                                      OpDecorate %723 DescriptorSet 723 
                                                      OpDecorate %723 Binding 723 
                                                      OpDecorate %725 DescriptorSet 725 
                                                      OpDecorate %725 Binding 725 
                                                      OpDecorate %1225 Location 1225 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypePointer UniformConstant %10 
         UniformConstant read_only Texture2D* %12 = OpVariable UniformConstant 
                                              %14 = OpTypeSampler 
                                              %15 = OpTypePointer UniformConstant %14 
                     UniformConstant sampler* %16 = OpVariable UniformConstant 
                                              %18 = OpTypeSampledImage %10 
                                              %20 = OpTypePointer Input %7 
                        Input f32_4* vs_TEXCOORD0 = OpVariable Input 
                                              %22 = OpTypeVector %6 2 
                                              %26 = OpTypeInt 32 0 
                                          u32 %27 = OpConstant 0 
                                              %29 = OpTypePointer Private %6 
                                              %31 = OpTypeVector %6 3 
                                              %32 = OpTypePointer Private %31 
                               Private f32_3* %33 = OpVariable Private 
                                          u32 %34 = OpConstant 4 
                                              %35 = OpTypeArray %7 %34 
                                              %36 = OpTypeArray %7 %34 
                                          u32 %37 = OpConstant 16 
                                              %38 = OpTypeArray %7 %37 
                                              %39 = OpTypeStruct %7 %7 %35 %36 %7 %38 %7 %7 
                                              %40 = OpTypePointer Uniform %39 
Uniform struct {f32_4; f32_4; f32_4[4]; f32_4[4]; f32_4; f32_4[16]; f32_4; f32_4;}* %41 = OpVariable Uniform 
                                              %42 = OpTypeInt 32 1 
                                          i32 %43 = OpConstant 0 
                                              %44 = OpTypePointer Uniform %6 
                                          u32 %50 = OpConstant 1 
                                          f32 %55 = OpConstant 3.674022E-40 
                                 Private f32* %60 = OpVariable Private 
                                          i32 %67 = OpConstant 1 
                                          u32 %68 = OpConstant 3 
                               Private f32_4* %82 = OpVariable Private 
                                              %83 = OpTypePointer Input %31 
                        Input f32_3* vs_TEXCOORD2 = OpVariable Input 
                        Input f32_3* vs_TEXCOORD3 = OpVariable Input 
                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                                             %118 = OpTypePointer Uniform %7 
                                         i32 %132 = OpConstant 2 
                                         i32 %151 = OpConstant 3 
                              Private f32_4* %170 = OpVariable Private 
                                         u32 %200 = OpConstant 2 
                                             %217 = OpTypeBool 
                                             %218 = OpTypeVector %217 4 
                                             %219 = OpTypePointer Private %218 
                             Private bool_4* %220 = OpVariable Private 
                                         i32 %222 = OpConstant 4 
                                             %226 = OpTypePointer Private %217 
                                         f32 %229 = OpConstant 3.674022E-40 
                                         f32 %230 = OpConstant 3.674022E-40 
                                         f32 %243 = OpConstant 3.674022E-40 
                                       f32_3 %267 = OpConstantComposite %243 %243 %243 
                                         i32 %273 = OpConstant 5 
                                         i32 %291 = OpConstant 6 
                                         i32 %303 = OpConstant 7 
                              Private f32_4* %322 = OpVariable Private 
                                       f32_4 %375 = OpConstantComposite %55 %55 %55 %55 
                                         i32 %380 = OpConstant 9 
                                         i32 %387 = OpConstant 8 
                                         i32 %399 = OpConstant 10 
                                         i32 %411 = OpConstant 11 
                                         i32 %435 = OpConstant 13 
                                         i32 %442 = OpConstant 12 
                                         i32 %454 = OpConstant 14 
                                         i32 %466 = OpConstant 15 
                                             %488 = OpTypePointer Private %22 
                              Private f32_2* %489 = OpVariable Private 
                                         f32 %496 = OpConstant 3.674022E-40 
                                       f32_2 %497 = OpConstantComposite %496 %496 
                                       f32_2 %523 = OpConstantComposite %55 %55 
                                       f32_2 %529 = OpConstantComposite %243 %243 
                                         f32 %546 = OpConstant 3.674022E-40 
                                       f32_2 %547 = OpConstantComposite %546 %546 
                                         f32 %553 = OpConstant 3.674022E-40 
                                       f32_2 %554 = OpConstantComposite %553 %553 
                              Private f32_4* %566 = OpVariable Private 
                                       f32_4 %569 = OpConstantComposite %496 %55 %496 %55 
                              Private f32_4* %592 = OpVariable Private 
                              Private f32_4* %597 = OpVariable Private 
                                         f32 %604 = OpConstant 3.674022E-40 
                                       f32_2 %605 = OpConstantComposite %604 %553 
                                         f32 %607 = OpConstant 3.674022E-40 
                                       f32_2 %608 = OpConstantComposite %607 %553 
                                         f32 %623 = OpConstant 3.674022E-40 
                                       f32_2 %624 = OpConstantComposite %623 %623 
                                       f32_2 %639 = OpConstantComposite %553 %607 
                                         f32 %656 = OpConstant 3.674022E-40 
                                         f32 %657 = OpConstant 3.674022E-40 
                                         f32 %658 = OpConstant 3.674022E-40 
                                       f32_4 %659 = OpConstantComposite %656 %657 %496 %658 
                              Private f32_4* %697 = OpVariable Private 
                              Private f32_4* %705 = OpVariable Private 
                                             %715 = OpTypePointer Function %31 
        UniformConstant read_only Texture2D* %723 = OpVariable UniformConstant 
                    UniformConstant sampler* %725 = OpVariable UniformConstant 
                                             %727 = OpTypeImage %6 Dim2D 1 0 0 1 Unknown 
                                             %728 = OpTypeSampledImage %727 
                                Private f32* %869 = OpVariable Private 
                                            %1224 = OpTypePointer Output %7 
                              Output f32_4* %1225 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %716 = OpVariable Function 
                             Function f32_3* %734 = OpVariable Function 
                             Function f32_3* %786 = OpVariable Function 
                             Function f32_3* %800 = OpVariable Function 
                             Function f32_3* %848 = OpVariable Function 
                             Function f32_3* %862 = OpVariable Function 
                             Function f32_3* %916 = OpVariable Function 
                             Function f32_3* %930 = OpVariable Function 
                             Function f32_3* %982 = OpVariable Function 
                             Function f32_3* %996 = OpVariable Function 
                            Function f32_3* %1053 = OpVariable Function 
                            Function f32_3* %1067 = OpVariable Function 
                            Function f32_3* %1131 = OpVariable Function 
                            Function f32_3* %1145 = OpVariable Function 
                            Function f32_3* %1159 = OpVariable Function 
                            Function f32_3* %1172 = OpVariable Function 
                          read_only Texture2D %13 = OpLoad %12 
                                      sampler %17 = OpLoad %16 
                   read_only Texture2DSampled %19 = OpSampledImage %13 %17 
                                        f32_4 %23 = OpLoad vs_TEXCOORD0 
                                        f32_2 %24 = OpVectorShuffle %23 %23 0 1 
                                        f32_4 %25 = OpImageSampleImplicitLod %19 %24 
                                          f32 %28 = OpCompositeExtract %25 0 
                                 Private f32* %30 = OpAccessChain %9 %27 
                                                      OpStore %30 %28 
                                 Uniform f32* %45 = OpAccessChain %41 %43 %27 
                                          f32 %46 = OpLoad %45 
                                 Private f32* %47 = OpAccessChain %9 %27 
                                          f32 %48 = OpLoad %47 
                                          f32 %49 = OpFMul %46 %48 
                                 Uniform f32* %51 = OpAccessChain %41 %43 %50 
                                          f32 %52 = OpLoad %51 
                                          f32 %53 = OpFAdd %49 %52 
                                 Private f32* %54 = OpAccessChain %33 %27 
                                                      OpStore %54 %53 
                                 Private f32* %56 = OpAccessChain %33 %27 
                                          f32 %57 = OpLoad %56 
                                          f32 %58 = OpFDiv %55 %57 
                                 Private f32* %59 = OpAccessChain %33 %27 
                                                      OpStore %59 %58 
                                 Private f32* %61 = OpAccessChain %33 %27 
                                          f32 %62 = OpLoad %61 
                                          f32 %63 = OpFNegate %62 
                                 Private f32* %64 = OpAccessChain %9 %27 
                                          f32 %65 = OpLoad %64 
                                          f32 %66 = OpFAdd %63 %65 
                                                      OpStore %60 %66 
                                 Uniform f32* %69 = OpAccessChain %41 %67 %68 
                                          f32 %70 = OpLoad %69 
                                          f32 %71 = OpLoad %60 
                                          f32 %72 = OpFMul %70 %71 
                                 Private f32* %73 = OpAccessChain %33 %27 
                                          f32 %74 = OpLoad %73 
                                          f32 %75 = OpFAdd %72 %74 
                                 Private f32* %76 = OpAccessChain %33 %27 
                                                      OpStore %76 %75 
                                 Private f32* %77 = OpAccessChain %9 %27 
                                          f32 %78 = OpLoad %77 
                                          f32 %79 = OpFNegate %78 
                                          f32 %80 = OpFAdd %79 %55 
                                 Private f32* %81 = OpAccessChain %9 %27 
                                                      OpStore %81 %80 
                                        f32_3 %85 = OpLoad vs_TEXCOORD2 
                                        f32_3 %86 = OpFNegate %85 
                                        f32_3 %88 = OpLoad vs_TEXCOORD3 
                                        f32_3 %89 = OpFAdd %86 %88 
                                        f32_4 %90 = OpLoad %82 
                                        f32_4 %91 = OpVectorShuffle %90 %89 4 5 6 3 
                                                      OpStore %82 %91 
                                        f32_4 %92 = OpLoad %9 
                                        f32_3 %93 = OpVectorShuffle %92 %92 0 0 0 
                                        f32_4 %94 = OpLoad %82 
                                        f32_3 %95 = OpVectorShuffle %94 %94 0 1 2 
                                        f32_3 %96 = OpFMul %93 %95 
                                        f32_3 %97 = OpLoad vs_TEXCOORD2 
                                        f32_3 %98 = OpFAdd %96 %97 
                                        f32_4 %99 = OpLoad %9 
                                       f32_4 %100 = OpVectorShuffle %99 %98 4 1 5 6 
                                                      OpStore %9 %100 
                                       f32_3 %102 = OpLoad vs_TEXCOORD1 
                                       f32_3 %103 = OpFNegate %102 
                                       f32_3 %104 = OpLoad %33 
                                       f32_3 %105 = OpVectorShuffle %104 %104 0 0 0 
                                       f32_3 %106 = OpFMul %103 %105 
                                       f32_4 %107 = OpLoad %9 
                                       f32_3 %108 = OpVectorShuffle %107 %107 0 2 3 
                                       f32_3 %109 = OpFAdd %106 %108 
                                       f32_4 %110 = OpLoad %9 
                                       f32_4 %111 = OpVectorShuffle %110 %109 4 1 5 6 
                                                      OpStore %9 %111 
                                       f32_3 %112 = OpLoad %33 
                                       f32_3 %113 = OpVectorShuffle %112 %112 0 0 0 
                                       f32_3 %114 = OpLoad vs_TEXCOORD1 
                                       f32_3 %115 = OpFMul %113 %114 
                                       f32_4 %116 = OpLoad %82 
                                       f32_4 %117 = OpVectorShuffle %116 %115 4 5 6 3 
                                                      OpStore %82 %117 
                              Uniform f32_4* %119 = OpAccessChain %41 %67 
                                       f32_4 %120 = OpLoad %119 
                                       f32_3 %121 = OpVectorShuffle %120 %120 3 3 3 
                                       f32_4 %122 = OpLoad %9 
                                       f32_3 %123 = OpVectorShuffle %122 %122 0 2 3 
                                       f32_3 %124 = OpFMul %121 %123 
                                       f32_4 %125 = OpLoad %82 
                                       f32_3 %126 = OpVectorShuffle %125 %125 0 1 2 
                                       f32_3 %127 = OpFAdd %124 %126 
                                       f32_4 %128 = OpLoad %9 
                                       f32_4 %129 = OpVectorShuffle %128 %127 4 5 6 3 
                                                      OpStore %9 %129 
                                       f32_4 %130 = OpLoad %9 
                                       f32_4 %131 = OpVectorShuffle %130 %130 1 1 1 1 
                              Uniform f32_4* %133 = OpAccessChain %41 %132 %67 
                                       f32_4 %134 = OpLoad %133 
                                       f32_4 %135 = OpFMul %131 %134 
                                                      OpStore %82 %135 
                              Uniform f32_4* %136 = OpAccessChain %41 %132 %43 
                                       f32_4 %137 = OpLoad %136 
                                       f32_4 %138 = OpLoad %9 
                                       f32_4 %139 = OpVectorShuffle %138 %138 0 0 0 0 
                                       f32_4 %140 = OpFMul %137 %139 
                                       f32_4 %141 = OpLoad %82 
                                       f32_4 %142 = OpFAdd %140 %141 
                                                      OpStore %82 %142 
                              Uniform f32_4* %143 = OpAccessChain %41 %132 %132 
                                       f32_4 %144 = OpLoad %143 
                                       f32_4 %145 = OpLoad %9 
                                       f32_4 %146 = OpVectorShuffle %145 %145 2 2 2 2 
                                       f32_4 %147 = OpFMul %144 %146 
                                       f32_4 %148 = OpLoad %82 
                                       f32_4 %149 = OpFAdd %147 %148 
                                                      OpStore %9 %149 
                                       f32_4 %150 = OpLoad %9 
                              Uniform f32_4* %152 = OpAccessChain %41 %132 %151 
                                       f32_4 %153 = OpLoad %152 
                                       f32_4 %154 = OpFAdd %150 %153 
                                                      OpStore %9 %154 
                                       f32_4 %155 = OpLoad %9 
                                       f32_3 %156 = OpVectorShuffle %155 %155 0 1 2 
                              Uniform f32_4* %157 = OpAccessChain %41 %151 %43 
                                       f32_4 %158 = OpLoad %157 
                                       f32_3 %159 = OpVectorShuffle %158 %158 0 1 2 
                                       f32_3 %160 = OpFNegate %159 
                                       f32_3 %161 = OpFAdd %156 %160 
                                       f32_4 %162 = OpLoad %82 
                                       f32_4 %163 = OpVectorShuffle %162 %161 4 5 6 3 
                                                      OpStore %82 %163 
                                       f32_4 %164 = OpLoad %82 
                                       f32_3 %165 = OpVectorShuffle %164 %164 0 1 2 
                                       f32_4 %166 = OpLoad %82 
                                       f32_3 %167 = OpVectorShuffle %166 %166 0 1 2 
                                         f32 %168 = OpDot %165 %167 
                                Private f32* %169 = OpAccessChain %82 %27 
                                                      OpStore %169 %168 
                                       f32_4 %171 = OpLoad %9 
                                       f32_3 %172 = OpVectorShuffle %171 %171 0 1 2 
                              Uniform f32_4* %173 = OpAccessChain %41 %151 %67 
                                       f32_4 %174 = OpLoad %173 
                                       f32_3 %175 = OpVectorShuffle %174 %174 0 1 2 
                                       f32_3 %176 = OpFNegate %175 
                                       f32_3 %177 = OpFAdd %172 %176 
                                       f32_4 %178 = OpLoad %170 
                                       f32_4 %179 = OpVectorShuffle %178 %177 4 5 6 3 
                                                      OpStore %170 %179 
                                       f32_4 %180 = OpLoad %170 
                                       f32_3 %181 = OpVectorShuffle %180 %180 0 1 2 
                                       f32_4 %182 = OpLoad %170 
                                       f32_3 %183 = OpVectorShuffle %182 %182 0 1 2 
                                         f32 %184 = OpDot %181 %183 
                                Private f32* %185 = OpAccessChain %82 %50 
                                                      OpStore %185 %184 
                                       f32_4 %186 = OpLoad %9 
                                       f32_3 %187 = OpVectorShuffle %186 %186 0 1 2 
                              Uniform f32_4* %188 = OpAccessChain %41 %151 %132 
                                       f32_4 %189 = OpLoad %188 
                                       f32_3 %190 = OpVectorShuffle %189 %189 0 1 2 
                                       f32_3 %191 = OpFNegate %190 
                                       f32_3 %192 = OpFAdd %187 %191 
                                       f32_4 %193 = OpLoad %170 
                                       f32_4 %194 = OpVectorShuffle %193 %192 4 5 6 3 
                                                      OpStore %170 %194 
                                       f32_4 %195 = OpLoad %170 
                                       f32_3 %196 = OpVectorShuffle %195 %195 0 1 2 
                                       f32_4 %197 = OpLoad %170 
                                       f32_3 %198 = OpVectorShuffle %197 %197 0 1 2 
                                         f32 %199 = OpDot %196 %198 
                                Private f32* %201 = OpAccessChain %82 %200 
                                                      OpStore %201 %199 
                                       f32_4 %202 = OpLoad %9 
                                       f32_3 %203 = OpVectorShuffle %202 %202 0 1 2 
                              Uniform f32_4* %204 = OpAccessChain %41 %151 %151 
                                       f32_4 %205 = OpLoad %204 
                                       f32_3 %206 = OpVectorShuffle %205 %205 0 1 2 
                                       f32_3 %207 = OpFNegate %206 
                                       f32_3 %208 = OpFAdd %203 %207 
                                       f32_4 %209 = OpLoad %170 
                                       f32_4 %210 = OpVectorShuffle %209 %208 4 5 6 3 
                                                      OpStore %170 %210 
                                       f32_4 %211 = OpLoad %170 
                                       f32_3 %212 = OpVectorShuffle %211 %211 0 1 2 
                                       f32_4 %213 = OpLoad %170 
                                       f32_3 %214 = OpVectorShuffle %213 %213 0 1 2 
                                         f32 %215 = OpDot %212 %214 
                                Private f32* %216 = OpAccessChain %82 %68 
                                                      OpStore %216 %215 
                                       f32_4 %221 = OpLoad %82 
                              Uniform f32_4* %223 = OpAccessChain %41 %222 
                                       f32_4 %224 = OpLoad %223 
                                      bool_4 %225 = OpFOrdLessThan %221 %224 
                                                      OpStore %220 %225 
                               Private bool* %227 = OpAccessChain %220 %27 
                                        bool %228 = OpLoad %227 
                                         f32 %231 = OpSelect %228 %229 %230 
                                Private f32* %232 = OpAccessChain %170 %27 
                                                      OpStore %232 %231 
                               Private bool* %233 = OpAccessChain %220 %50 
                                        bool %234 = OpLoad %233 
                                         f32 %235 = OpSelect %234 %229 %230 
                                Private f32* %236 = OpAccessChain %170 %50 
                                                      OpStore %236 %235 
                               Private bool* %237 = OpAccessChain %220 %200 
                                        bool %238 = OpLoad %237 
                                         f32 %239 = OpSelect %238 %229 %230 
                                Private f32* %240 = OpAccessChain %170 %200 
                                                      OpStore %240 %239 
                               Private bool* %241 = OpAccessChain %220 %27 
                                        bool %242 = OpLoad %241 
                                         f32 %244 = OpSelect %242 %55 %243 
                                Private f32* %245 = OpAccessChain %82 %27 
                                                      OpStore %245 %244 
                               Private bool* %246 = OpAccessChain %220 %50 
                                        bool %247 = OpLoad %246 
                                         f32 %248 = OpSelect %247 %55 %243 
                                Private f32* %249 = OpAccessChain %82 %50 
                                                      OpStore %249 %248 
                               Private bool* %250 = OpAccessChain %220 %200 
                                        bool %251 = OpLoad %250 
                                         f32 %252 = OpSelect %251 %55 %243 
                                Private f32* %253 = OpAccessChain %82 %200 
                                                      OpStore %253 %252 
                               Private bool* %254 = OpAccessChain %220 %68 
                                        bool %255 = OpLoad %254 
                                         f32 %256 = OpSelect %255 %55 %243 
                                Private f32* %257 = OpAccessChain %82 %68 
                                                      OpStore %257 %256 
                                       f32_4 %258 = OpLoad %170 
                                       f32_3 %259 = OpVectorShuffle %258 %258 0 1 2 
                                       f32_4 %260 = OpLoad %82 
                                       f32_3 %261 = OpVectorShuffle %260 %260 1 2 3 
                                       f32_3 %262 = OpFAdd %259 %261 
                                       f32_4 %263 = OpLoad %170 
                                       f32_4 %264 = OpVectorShuffle %263 %262 4 5 6 3 
                                                      OpStore %170 %264 
                                       f32_4 %265 = OpLoad %170 
                                       f32_3 %266 = OpVectorShuffle %265 %265 0 1 2 
                                       f32_3 %268 = OpExtInst %1 40 %266 %267 
                                       f32_4 %269 = OpLoad %82 
                                       f32_4 %270 = OpVectorShuffle %269 %268 0 4 5 6 
                                                      OpStore %82 %270 
                                       f32_4 %271 = OpLoad %9 
                                       f32_3 %272 = OpVectorShuffle %271 %271 1 1 1 
                              Uniform f32_4* %274 = OpAccessChain %41 %273 %273 
                                       f32_4 %275 = OpLoad %274 
                                       f32_3 %276 = OpVectorShuffle %275 %275 0 1 2 
                                       f32_3 %277 = OpFMul %272 %276 
                                       f32_4 %278 = OpLoad %170 
                                       f32_4 %279 = OpVectorShuffle %278 %277 4 5 6 3 
                                                      OpStore %170 %279 
                              Uniform f32_4* %280 = OpAccessChain %41 %273 %222 
                                       f32_4 %281 = OpLoad %280 
                                       f32_3 %282 = OpVectorShuffle %281 %281 0 1 2 
                                       f32_4 %283 = OpLoad %9 
                                       f32_3 %284 = OpVectorShuffle %283 %283 0 0 0 
                                       f32_3 %285 = OpFMul %282 %284 
                                       f32_4 %286 = OpLoad %170 
                                       f32_3 %287 = OpVectorShuffle %286 %286 0 1 2 
                                       f32_3 %288 = OpFAdd %285 %287 
                                       f32_4 %289 = OpLoad %170 
                                       f32_4 %290 = OpVectorShuffle %289 %288 4 5 6 3 
                                                      OpStore %170 %290 
                              Uniform f32_4* %292 = OpAccessChain %41 %273 %291 
                                       f32_4 %293 = OpLoad %292 
                                       f32_3 %294 = OpVectorShuffle %293 %293 0 1 2 
                                       f32_4 %295 = OpLoad %9 
                                       f32_3 %296 = OpVectorShuffle %295 %295 2 2 2 
                                       f32_3 %297 = OpFMul %294 %296 
                                       f32_4 %298 = OpLoad %170 
                                       f32_3 %299 = OpVectorShuffle %298 %298 0 1 2 
                                       f32_3 %300 = OpFAdd %297 %299 
                                       f32_4 %301 = OpLoad %170 
                                       f32_4 %302 = OpVectorShuffle %301 %300 4 5 6 3 
                                                      OpStore %170 %302 
                              Uniform f32_4* %304 = OpAccessChain %41 %273 %303 
                                       f32_4 %305 = OpLoad %304 
                                       f32_3 %306 = OpVectorShuffle %305 %305 0 1 2 
                                       f32_4 %307 = OpLoad %9 
                                       f32_3 %308 = OpVectorShuffle %307 %307 3 3 3 
                                       f32_3 %309 = OpFMul %306 %308 
                                       f32_4 %310 = OpLoad %170 
                                       f32_3 %311 = OpVectorShuffle %310 %310 0 1 2 
                                       f32_3 %312 = OpFAdd %309 %311 
                                       f32_4 %313 = OpLoad %170 
                                       f32_4 %314 = OpVectorShuffle %313 %312 4 5 6 3 
                                                      OpStore %170 %314 
                                       f32_4 %315 = OpLoad %82 
                                       f32_3 %316 = OpVectorShuffle %315 %315 1 1 1 
                                       f32_4 %317 = OpLoad %170 
                                       f32_3 %318 = OpVectorShuffle %317 %317 0 1 2 
                                       f32_3 %319 = OpFMul %316 %318 
                                       f32_4 %320 = OpLoad %170 
                                       f32_4 %321 = OpVectorShuffle %320 %319 4 5 6 3 
                                                      OpStore %170 %321 
                                       f32_4 %323 = OpLoad %9 
                                       f32_3 %324 = OpVectorShuffle %323 %323 1 1 1 
                              Uniform f32_4* %325 = OpAccessChain %41 %273 %67 
                                       f32_4 %326 = OpLoad %325 
                                       f32_3 %327 = OpVectorShuffle %326 %326 0 1 2 
                                       f32_3 %328 = OpFMul %324 %327 
                                       f32_4 %329 = OpLoad %322 
                                       f32_4 %330 = OpVectorShuffle %329 %328 4 5 6 3 
                                                      OpStore %322 %330 
                              Uniform f32_4* %331 = OpAccessChain %41 %273 %43 
                                       f32_4 %332 = OpLoad %331 
                                       f32_3 %333 = OpVectorShuffle %332 %332 0 1 2 
                                       f32_4 %334 = OpLoad %9 
                                       f32_3 %335 = OpVectorShuffle %334 %334 0 0 0 
                                       f32_3 %336 = OpFMul %333 %335 
                                       f32_4 %337 = OpLoad %322 
                                       f32_3 %338 = OpVectorShuffle %337 %337 0 1 2 
                                       f32_3 %339 = OpFAdd %336 %338 
                                       f32_4 %340 = OpLoad %322 
                                       f32_4 %341 = OpVectorShuffle %340 %339 4 5 6 3 
                                                      OpStore %322 %341 
                              Uniform f32_4* %342 = OpAccessChain %41 %273 %132 
                                       f32_4 %343 = OpLoad %342 
                                       f32_3 %344 = OpVectorShuffle %343 %343 0 1 2 
                                       f32_4 %345 = OpLoad %9 
                                       f32_3 %346 = OpVectorShuffle %345 %345 2 2 2 
                                       f32_3 %347 = OpFMul %344 %346 
                                       f32_4 %348 = OpLoad %322 
                                       f32_3 %349 = OpVectorShuffle %348 %348 0 1 2 
                                       f32_3 %350 = OpFAdd %347 %349 
                                       f32_4 %351 = OpLoad %322 
                                       f32_4 %352 = OpVectorShuffle %351 %350 4 5 6 3 
                                                      OpStore %322 %352 
                              Uniform f32_4* %353 = OpAccessChain %41 %273 %151 
                                       f32_4 %354 = OpLoad %353 
                                       f32_3 %355 = OpVectorShuffle %354 %354 0 1 2 
                                       f32_4 %356 = OpLoad %9 
                                       f32_3 %357 = OpVectorShuffle %356 %356 3 3 3 
                                       f32_3 %358 = OpFMul %355 %357 
                                       f32_4 %359 = OpLoad %322 
                                       f32_3 %360 = OpVectorShuffle %359 %359 0 1 2 
                                       f32_3 %361 = OpFAdd %358 %360 
                                       f32_4 %362 = OpLoad %322 
                                       f32_4 %363 = OpVectorShuffle %362 %361 4 5 6 3 
                                                      OpStore %322 %363 
                                       f32_4 %364 = OpLoad %322 
                                       f32_3 %365 = OpVectorShuffle %364 %364 0 1 2 
                                       f32_4 %366 = OpLoad %82 
                                       f32_3 %367 = OpVectorShuffle %366 %366 0 0 0 
                                       f32_3 %368 = OpFMul %365 %367 
                                       f32_4 %369 = OpLoad %170 
                                       f32_3 %370 = OpVectorShuffle %369 %369 0 1 2 
                                       f32_3 %371 = OpFAdd %368 %370 
                                       f32_4 %372 = OpLoad %170 
                                       f32_4 %373 = OpVectorShuffle %372 %371 4 5 6 3 
                                                      OpStore %170 %373 
                                       f32_4 %374 = OpLoad %82 
                                         f32 %376 = OpDot %374 %375 
                                Private f32* %377 = OpAccessChain %82 %27 
                                                      OpStore %377 %376 
                                       f32_4 %378 = OpLoad %9 
                                       f32_3 %379 = OpVectorShuffle %378 %378 1 1 1 
                              Uniform f32_4* %381 = OpAccessChain %41 %273 %380 
                                       f32_4 %382 = OpLoad %381 
                                       f32_3 %383 = OpVectorShuffle %382 %382 0 1 2 
                                       f32_3 %384 = OpFMul %379 %383 
                                       f32_4 %385 = OpLoad %322 
                                       f32_4 %386 = OpVectorShuffle %385 %384 4 5 6 3 
                                                      OpStore %322 %386 
                              Uniform f32_4* %388 = OpAccessChain %41 %273 %387 
                                       f32_4 %389 = OpLoad %388 
                                       f32_3 %390 = OpVectorShuffle %389 %389 0 1 2 
                                       f32_4 %391 = OpLoad %9 
                                       f32_3 %392 = OpVectorShuffle %391 %391 0 0 0 
                                       f32_3 %393 = OpFMul %390 %392 
                                       f32_4 %394 = OpLoad %322 
                                       f32_3 %395 = OpVectorShuffle %394 %394 0 1 2 
                                       f32_3 %396 = OpFAdd %393 %395 
                                       f32_4 %397 = OpLoad %322 
                                       f32_4 %398 = OpVectorShuffle %397 %396 4 5 6 3 
                                                      OpStore %322 %398 
                              Uniform f32_4* %400 = OpAccessChain %41 %273 %399 
                                       f32_4 %401 = OpLoad %400 
                                       f32_3 %402 = OpVectorShuffle %401 %401 0 1 2 
                                       f32_4 %403 = OpLoad %9 
                                       f32_3 %404 = OpVectorShuffle %403 %403 2 2 2 
                                       f32_3 %405 = OpFMul %402 %404 
                                       f32_4 %406 = OpLoad %322 
                                       f32_3 %407 = OpVectorShuffle %406 %406 0 1 2 
                                       f32_3 %408 = OpFAdd %405 %407 
                                       f32_4 %409 = OpLoad %322 
                                       f32_4 %410 = OpVectorShuffle %409 %408 4 5 6 3 
                                                      OpStore %322 %410 
                              Uniform f32_4* %412 = OpAccessChain %41 %273 %411 
                                       f32_4 %413 = OpLoad %412 
                                       f32_3 %414 = OpVectorShuffle %413 %413 0 1 2 
                                       f32_4 %415 = OpLoad %9 
                                       f32_3 %416 = OpVectorShuffle %415 %415 3 3 3 
                                       f32_3 %417 = OpFMul %414 %416 
                                       f32_4 %418 = OpLoad %322 
                                       f32_3 %419 = OpVectorShuffle %418 %418 0 1 2 
                                       f32_3 %420 = OpFAdd %417 %419 
                                       f32_4 %421 = OpLoad %322 
                                       f32_4 %422 = OpVectorShuffle %421 %420 4 5 6 3 
                                                      OpStore %322 %422 
                                       f32_4 %423 = OpLoad %322 
                                       f32_3 %424 = OpVectorShuffle %423 %423 0 1 2 
                                       f32_4 %425 = OpLoad %82 
                                       f32_3 %426 = OpVectorShuffle %425 %425 2 2 2 
                                       f32_3 %427 = OpFMul %424 %426 
                                       f32_4 %428 = OpLoad %170 
                                       f32_3 %429 = OpVectorShuffle %428 %428 0 1 2 
                                       f32_3 %430 = OpFAdd %427 %429 
                                       f32_4 %431 = OpLoad %170 
                                       f32_4 %432 = OpVectorShuffle %431 %430 4 5 6 3 
                                                      OpStore %170 %432 
                                       f32_4 %433 = OpLoad %9 
                                       f32_3 %434 = OpVectorShuffle %433 %433 1 1 1 
                              Uniform f32_4* %436 = OpAccessChain %41 %273 %435 
                                       f32_4 %437 = OpLoad %436 
                                       f32_3 %438 = OpVectorShuffle %437 %437 0 1 2 
                                       f32_3 %439 = OpFMul %434 %438 
                                       f32_4 %440 = OpLoad %322 
                                       f32_4 %441 = OpVectorShuffle %440 %439 4 5 6 3 
                                                      OpStore %322 %441 
                              Uniform f32_4* %443 = OpAccessChain %41 %273 %442 
                                       f32_4 %444 = OpLoad %443 
                                       f32_3 %445 = OpVectorShuffle %444 %444 0 1 2 
                                       f32_4 %446 = OpLoad %9 
                                       f32_3 %447 = OpVectorShuffle %446 %446 0 0 0 
                                       f32_3 %448 = OpFMul %445 %447 
                                       f32_4 %449 = OpLoad %322 
                                       f32_3 %450 = OpVectorShuffle %449 %449 0 1 2 
                                       f32_3 %451 = OpFAdd %448 %450 
                                       f32_4 %452 = OpLoad %322 
                                       f32_4 %453 = OpVectorShuffle %452 %451 4 5 6 3 
                                                      OpStore %322 %453 
                              Uniform f32_4* %455 = OpAccessChain %41 %273 %454 
                                       f32_4 %456 = OpLoad %455 
                                       f32_3 %457 = OpVectorShuffle %456 %456 0 1 2 
                                       f32_4 %458 = OpLoad %9 
                                       f32_3 %459 = OpVectorShuffle %458 %458 2 2 2 
                                       f32_3 %460 = OpFMul %457 %459 
                                       f32_4 %461 = OpLoad %322 
                                       f32_3 %462 = OpVectorShuffle %461 %461 0 1 2 
                                       f32_3 %463 = OpFAdd %460 %462 
                                       f32_4 %464 = OpLoad %9 
                                       f32_4 %465 = OpVectorShuffle %464 %463 4 5 6 3 
                                                      OpStore %9 %465 
                              Uniform f32_4* %467 = OpAccessChain %41 %273 %466 
                                       f32_4 %468 = OpLoad %467 
                                       f32_3 %469 = OpVectorShuffle %468 %468 0 1 2 
                                       f32_4 %470 = OpLoad %9 
                                       f32_3 %471 = OpVectorShuffle %470 %470 3 3 3 
                                       f32_3 %472 = OpFMul %469 %471 
                                       f32_4 %473 = OpLoad %9 
                                       f32_3 %474 = OpVectorShuffle %473 %473 0 1 2 
                                       f32_3 %475 = OpFAdd %472 %474 
                                       f32_4 %476 = OpLoad %9 
                                       f32_4 %477 = OpVectorShuffle %476 %475 4 5 6 3 
                                                      OpStore %9 %477 
                                       f32_4 %478 = OpLoad %9 
                                       f32_3 %479 = OpVectorShuffle %478 %478 0 1 2 
                                       f32_4 %480 = OpLoad %82 
                                       f32_3 %481 = OpVectorShuffle %480 %480 3 3 3 
                                       f32_3 %482 = OpFMul %479 %481 
                                       f32_4 %483 = OpLoad %170 
                                       f32_3 %484 = OpVectorShuffle %483 %483 0 1 2 
                                       f32_3 %485 = OpFAdd %482 %484 
                                       f32_4 %486 = OpLoad %9 
                                       f32_4 %487 = OpVectorShuffle %486 %485 4 5 6 3 
                                                      OpStore %9 %487 
                                       f32_4 %490 = OpLoad %9 
                                       f32_2 %491 = OpVectorShuffle %490 %490 0 1 
                              Uniform f32_4* %492 = OpAccessChain %41 %303 
                                       f32_4 %493 = OpLoad %492 
                                       f32_2 %494 = OpVectorShuffle %493 %493 2 3 
                                       f32_2 %495 = OpFMul %491 %494 
                                       f32_2 %498 = OpFAdd %495 %497 
                                                      OpStore %489 %498 
                                       f32_2 %499 = OpLoad %489 
                                       f32_2 %500 = OpExtInst %1 8 %499 
                                                      OpStore %489 %500 
                                       f32_4 %501 = OpLoad %9 
                                       f32_2 %502 = OpVectorShuffle %501 %501 0 1 
                              Uniform f32_4* %503 = OpAccessChain %41 %303 
                                       f32_4 %504 = OpLoad %503 
                                       f32_2 %505 = OpVectorShuffle %504 %504 2 3 
                                       f32_2 %506 = OpFMul %502 %505 
                                       f32_2 %507 = OpLoad %489 
                                       f32_2 %508 = OpFNegate %507 
                                       f32_2 %509 = OpFAdd %506 %508 
                                       f32_4 %510 = OpLoad %9 
                                       f32_4 %511 = OpVectorShuffle %510 %509 4 5 2 3 
                                                      OpStore %9 %511 
                                Private f32* %512 = OpAccessChain %82 %27 
                                         f32 %513 = OpLoad %512 
                                         f32 %514 = OpFNegate %513 
                                Private f32* %515 = OpAccessChain %9 %200 
                                         f32 %516 = OpLoad %515 
                                         f32 %517 = OpFAdd %514 %516 
                                                      OpStore %60 %517 
                                         f32 %518 = OpLoad %60 
                                         f32 %519 = OpFAdd %518 %55 
                                                      OpStore %60 %519 
                                       f32_4 %520 = OpLoad %9 
                                       f32_2 %521 = OpVectorShuffle %520 %520 0 1 
                                       f32_2 %522 = OpFNegate %521 
                                       f32_2 %524 = OpFAdd %522 %523 
                                       f32_4 %525 = OpLoad %82 
                                       f32_4 %526 = OpVectorShuffle %525 %524 4 1 2 5 
                                                      OpStore %82 %526 
                                       f32_4 %527 = OpLoad %9 
                                       f32_2 %528 = OpVectorShuffle %527 %527 0 1 
                                       f32_2 %530 = OpExtInst %1 37 %528 %529 
                                       f32_4 %531 = OpLoad %170 
                                       f32_4 %532 = OpVectorShuffle %531 %530 4 5 2 3 
                                                      OpStore %170 %532 
                                       f32_4 %533 = OpLoad %170 
                                       f32_2 %534 = OpVectorShuffle %533 %533 0 1 
                                       f32_2 %535 = OpFNegate %534 
                                       f32_4 %536 = OpLoad %170 
                                       f32_2 %537 = OpVectorShuffle %536 %536 0 1 
                                       f32_2 %538 = OpFMul %535 %537 
                                       f32_4 %539 = OpLoad %82 
                                       f32_2 %540 = OpVectorShuffle %539 %539 0 3 
                                       f32_2 %541 = OpFAdd %538 %540 
                                       f32_4 %542 = OpLoad %82 
                                       f32_4 %543 = OpVectorShuffle %542 %541 4 1 2 5 
                                                      OpStore %82 %543 
                                       f32_4 %544 = OpLoad %82 
                                       f32_2 %545 = OpVectorShuffle %544 %544 0 3 
                                       f32_2 %548 = OpFAdd %545 %547 
                                       f32_4 %549 = OpLoad %82 
                                       f32_4 %550 = OpVectorShuffle %549 %548 4 1 2 5 
                                                      OpStore %82 %550 
                                       f32_4 %551 = OpLoad %82 
                                       f32_2 %552 = OpVectorShuffle %551 %551 0 3 
                                       f32_2 %555 = OpFMul %552 %554 
                                       f32_4 %556 = OpLoad %170 
                                       f32_4 %557 = OpVectorShuffle %556 %555 4 5 2 3 
                                                      OpStore %170 %557 
                                Private f32* %558 = OpAccessChain %170 %27 
                                         f32 %559 = OpLoad %558 
                                Private f32* %560 = OpAccessChain %322 %50 
                                                      OpStore %560 %559 
                                       f32_4 %561 = OpLoad %9 
                                       f32_2 %562 = OpVectorShuffle %561 %561 0 1 
                                       f32_2 %563 = OpExtInst %1 40 %562 %529 
                                       f32_4 %564 = OpLoad %82 
                                       f32_4 %565 = OpVectorShuffle %564 %563 4 1 2 5 
                                                      OpStore %82 %565 
                                       f32_4 %567 = OpLoad %9 
                                       f32_4 %568 = OpVectorShuffle %567 %567 0 0 1 1 
                                       f32_4 %570 = OpFAdd %568 %569 
                                                      OpStore %566 %570 
                                       f32_4 %571 = OpLoad %82 
                                       f32_2 %572 = OpVectorShuffle %571 %571 0 3 
                                       f32_2 %573 = OpFNegate %572 
                                       f32_4 %574 = OpLoad %82 
                                       f32_2 %575 = OpVectorShuffle %574 %574 0 3 
                                       f32_2 %576 = OpFMul %573 %575 
                                       f32_4 %577 = OpLoad %566 
                                       f32_2 %578 = OpVectorShuffle %577 %577 1 3 
                                       f32_2 %579 = OpFAdd %576 %578 
                                       f32_4 %580 = OpLoad %82 
                                       f32_4 %581 = OpVectorShuffle %580 %579 4 1 2 5 
                                                      OpStore %82 %581 
                                       f32_4 %582 = OpLoad %566 
                                       f32_4 %583 = OpVectorShuffle %582 %582 0 0 2 2 
                                       f32_4 %584 = OpLoad %566 
                                       f32_4 %585 = OpVectorShuffle %584 %584 0 0 2 2 
                                       f32_4 %586 = OpFMul %583 %585 
                                                      OpStore %566 %586 
                                       f32_4 %587 = OpLoad %82 
                                       f32_2 %588 = OpVectorShuffle %587 %587 0 3 
                                       f32_2 %589 = OpFAdd %588 %547 
                                       f32_4 %590 = OpLoad %82 
                                       f32_4 %591 = OpVectorShuffle %590 %589 4 1 2 5 
                                                      OpStore %82 %591 
                                Private f32* %593 = OpAccessChain %82 %27 
                                         f32 %594 = OpLoad %593 
                                         f32 %595 = OpFMul %594 %553 
                                Private f32* %596 = OpAccessChain %592 %200 
                                                      OpStore %596 %595 
                                Private f32* %598 = OpAccessChain %82 %68 
                                         f32 %599 = OpLoad %598 
                                         f32 %600 = OpFMul %599 %553 
                                Private f32* %601 = OpAccessChain %597 %200 
                                                      OpStore %601 %600 
                                       f32_4 %602 = OpLoad %9 
                                       f32_2 %603 = OpVectorShuffle %602 %602 0 0 
                                       f32_2 %606 = OpFMul %603 %605 
                                       f32_2 %609 = OpFAdd %606 %608 
                                       f32_4 %610 = OpLoad %592 
                                       f32_4 %611 = OpVectorShuffle %610 %609 0 4 2 5 
                                                      OpStore %592 %611 
                                       f32_4 %612 = OpLoad %566 
                                       f32_2 %613 = OpVectorShuffle %612 %612 0 2 
                                       f32_2 %614 = OpFMul %613 %497 
                                       f32_4 %615 = OpLoad %9 
                                       f32_2 %616 = OpVectorShuffle %615 %615 0 1 
                                       f32_2 %617 = OpFNegate %616 
                                       f32_2 %618 = OpFAdd %614 %617 
                                       f32_4 %619 = OpLoad %82 
                                       f32_4 %620 = OpVectorShuffle %619 %618 4 1 2 5 
                                                      OpStore %82 %620 
                                       f32_4 %621 = OpLoad %566 
                                       f32_2 %622 = OpVectorShuffle %621 %621 1 3 
                                       f32_2 %625 = OpFMul %622 %624 
                                       f32_4 %626 = OpLoad %566 
                                       f32_4 %627 = OpVectorShuffle %626 %625 4 5 2 3 
                                                      OpStore %566 %627 
                                       f32_4 %628 = OpLoad %82 
                                       f32_2 %629 = OpVectorShuffle %628 %628 3 0 
                                       f32_2 %630 = OpFMul %629 %554 
                                       f32_4 %631 = OpLoad %597 
                                       f32_4 %632 = OpVectorShuffle %631 %630 4 5 2 3 
                                                      OpStore %597 %632 
                                Private f32* %633 = OpAccessChain %597 %50 
                                         f32 %634 = OpLoad %633 
                                Private f32* %635 = OpAccessChain %592 %27 
                                                      OpStore %635 %634 
                                       f32_4 %636 = OpLoad %9 
                                       f32_2 %637 = OpVectorShuffle %636 %636 0 0 
                                       f32_2 %638 = OpFMul %637 %605 
                                       f32_2 %640 = OpFAdd %638 %639 
                                       f32_4 %641 = OpLoad %322 
                                       f32_4 %642 = OpVectorShuffle %641 %640 4 1 5 3 
                                                      OpStore %322 %642 
                                Private f32* %643 = OpAccessChain %566 %27 
                                         f32 %644 = OpLoad %643 
                                Private f32* %645 = OpAccessChain %322 %68 
                                                      OpStore %645 %644 
                                Private f32* %646 = OpAccessChain %566 %50 
                                         f32 %647 = OpLoad %646 
                                Private f32* %648 = OpAccessChain %170 %68 
                                                      OpStore %648 %647 
                                       f32_4 %649 = OpLoad %322 
                                       f32_4 %650 = OpLoad %592 
                                       f32_4 %651 = OpFAdd %649 %650 
                                                      OpStore %566 %651 
                                       f32_4 %652 = OpLoad %322 
                                       f32_4 %653 = OpLoad %566 
                                       f32_4 %654 = OpFDiv %652 %653 
                                                      OpStore %322 %654 
                                       f32_4 %655 = OpLoad %322 
                                       f32_4 %660 = OpFAdd %655 %659 
                                                      OpStore %322 %660 
                                       f32_4 %661 = OpLoad %322 
                                       f32_4 %662 = OpVectorShuffle %661 %661 3 0 1 2 
                              Uniform f32_4* %663 = OpAccessChain %41 %303 
                                       f32_4 %664 = OpLoad %663 
                                       f32_4 %665 = OpVectorShuffle %664 %664 0 0 0 0 
                                       f32_4 %666 = OpFMul %662 %665 
                                                      OpStore %322 %666 
                                       f32_4 %667 = OpLoad %9 
                                       f32_2 %668 = OpVectorShuffle %667 %667 1 1 
                                       f32_2 %669 = OpFMul %668 %605 
                                       f32_2 %670 = OpFAdd %669 %608 
                                       f32_4 %671 = OpLoad %597 
                                       f32_4 %672 = OpVectorShuffle %671 %670 0 4 2 5 
                                                      OpStore %597 %672 
                                       f32_4 %673 = OpLoad %9 
                                       f32_2 %674 = OpVectorShuffle %673 %673 1 1 
                                       f32_2 %675 = OpFMul %674 %605 
                                       f32_2 %676 = OpFAdd %675 %639 
                                       f32_4 %677 = OpLoad %170 
                                       f32_4 %678 = OpVectorShuffle %677 %676 4 1 5 3 
                                                      OpStore %170 %678 
                                       f32_4 %679 = OpLoad %170 
                                       f32_4 %680 = OpLoad %597 
                                       f32_4 %681 = OpFAdd %679 %680 
                                                      OpStore %592 %681 
                                       f32_4 %682 = OpLoad %170 
                                       f32_4 %683 = OpLoad %592 
                                       f32_4 %684 = OpFDiv %682 %683 
                                                      OpStore %170 %684 
                                       f32_4 %685 = OpLoad %170 
                                       f32_4 %686 = OpFAdd %685 %659 
                                                      OpStore %170 %686 
                                       f32_4 %687 = OpLoad %170 
                                       f32_4 %688 = OpVectorShuffle %687 %687 0 3 1 2 
                              Uniform f32_4* %689 = OpAccessChain %41 %303 
                                       f32_4 %690 = OpLoad %689 
                                       f32_4 %691 = OpVectorShuffle %690 %690 1 1 1 1 
                                       f32_4 %692 = OpFMul %688 %691 
                                                      OpStore %170 %692 
                                       f32_4 %693 = OpLoad %566 
                                       f32_4 %694 = OpLoad %592 
                                       f32_4 %695 = OpVectorShuffle %694 %694 0 0 0 0 
                                       f32_4 %696 = OpFMul %693 %695 
                                                      OpStore %597 %696 
                                       f32_4 %698 = OpLoad %322 
                                       f32_3 %699 = OpVectorShuffle %698 %698 1 2 3 
                                       f32_4 %700 = OpLoad %697 
                                       f32_4 %701 = OpVectorShuffle %700 %699 4 1 5 6 
                                                      OpStore %697 %701 
                                Private f32* %702 = OpAccessChain %170 %27 
                                         f32 %703 = OpLoad %702 
                                Private f32* %704 = OpAccessChain %697 %50 
                                                      OpStore %704 %703 
                                       f32_2 %706 = OpLoad %489 
                                       f32_4 %707 = OpVectorShuffle %706 %706 0 1 0 1 
                              Uniform f32_4* %708 = OpAccessChain %41 %303 
                                       f32_4 %709 = OpLoad %708 
                                       f32_4 %710 = OpVectorShuffle %709 %709 0 1 0 1 
                                       f32_4 %711 = OpFMul %707 %710 
                                       f32_4 %712 = OpLoad %697 
                                       f32_4 %713 = OpVectorShuffle %712 %712 0 1 2 1 
                                       f32_4 %714 = OpFAdd %711 %713 
                                                      OpStore %705 %714 
                                       f32_4 %717 = OpLoad %705 
                                       f32_2 %718 = OpVectorShuffle %717 %717 0 1 
                                         f32 %719 = OpLoad %60 
                                         f32 %720 = OpCompositeExtract %718 0 
                                         f32 %721 = OpCompositeExtract %718 1 
                                       f32_3 %722 = OpCompositeConstruct %720 %721 %719 
                                                      OpStore %716 %722 
                         read_only Texture2D %724 = OpLoad %723 
                                     sampler %726 = OpLoad %725 
                  read_only Texture2DSampled %729 = OpSampledImage %724 %726 
                                       f32_3 %730 = OpLoad %716 
                                         f32 %731 = OpCompositeExtract %730 2 
                                         f32 %732 = OpImageSampleDrefExplicitLod %729 %730 %731 Lod %6 
                                Private f32* %733 = OpAccessChain %9 %27 
                                                      OpStore %733 %732 
                                       f32_4 %735 = OpLoad %705 
                                       f32_2 %736 = OpVectorShuffle %735 %735 2 3 
                                         f32 %737 = OpLoad %60 
                                         f32 %738 = OpCompositeExtract %736 0 
                                         f32 %739 = OpCompositeExtract %736 1 
                                       f32_3 %740 = OpCompositeConstruct %738 %739 %737 
                                                      OpStore %734 %740 
                         read_only Texture2D %741 = OpLoad %723 
                                     sampler %742 = OpLoad %725 
                  read_only Texture2DSampled %743 = OpSampledImage %741 %742 
                                       f32_3 %744 = OpLoad %734 
                                         f32 %745 = OpCompositeExtract %744 2 
                                         f32 %746 = OpImageSampleDrefExplicitLod %743 %744 %745 Lod %6 
                                Private f32* %747 = OpAccessChain %33 %27 
                                                      OpStore %747 %746 
                                Private f32* %748 = OpAccessChain %33 %27 
                                         f32 %749 = OpLoad %748 
                                Private f32* %750 = OpAccessChain %597 %50 
                                         f32 %751 = OpLoad %750 
                                         f32 %752 = OpFMul %749 %751 
                                Private f32* %753 = OpAccessChain %33 %27 
                                                      OpStore %753 %752 
                                Private f32* %754 = OpAccessChain %597 %27 
                                         f32 %755 = OpLoad %754 
                                Private f32* %756 = OpAccessChain %9 %27 
                                         f32 %757 = OpLoad %756 
                                         f32 %758 = OpFMul %755 %757 
                                Private f32* %759 = OpAccessChain %33 %27 
                                         f32 %760 = OpLoad %759 
                                         f32 %761 = OpFAdd %758 %760 
                                Private f32* %762 = OpAccessChain %9 %27 
                                                      OpStore %762 %761 
                                       f32_2 %763 = OpLoad %489 
                              Uniform f32_4* %764 = OpAccessChain %41 %303 
                                       f32_4 %765 = OpLoad %764 
                                       f32_2 %766 = OpVectorShuffle %765 %765 0 1 
                                       f32_2 %767 = OpFMul %763 %766 
                                       f32_4 %768 = OpLoad %697 
                                       f32_2 %769 = OpVectorShuffle %768 %768 3 1 
                                       f32_2 %770 = OpFAdd %767 %769 
                                       f32_3 %771 = OpLoad %33 
                                       f32_3 %772 = OpVectorShuffle %771 %770 3 1 4 
                                                      OpStore %33 %772 
                                Private f32* %773 = OpAccessChain %697 %50 
                                         f32 %774 = OpLoad %773 
                                Private f32* %775 = OpAccessChain %322 %50 
                                                      OpStore %775 %774 
                                       f32_2 %776 = OpLoad %489 
                              Uniform f32_4* %777 = OpAccessChain %41 %303 
                                       f32_4 %778 = OpLoad %777 
                                       f32_2 %779 = OpVectorShuffle %778 %778 0 1 
                                       f32_2 %780 = OpFMul %776 %779 
                                       f32_4 %781 = OpLoad %322 
                                       f32_2 %782 = OpVectorShuffle %781 %781 0 1 
                                       f32_2 %783 = OpFAdd %780 %782 
                                       f32_4 %784 = OpLoad %82 
                                       f32_4 %785 = OpVectorShuffle %784 %783 4 1 2 5 
                                                      OpStore %82 %785 
                                       f32_4 %787 = OpLoad %82 
                                       f32_2 %788 = OpVectorShuffle %787 %787 0 3 
                                         f32 %789 = OpLoad %60 
                                         f32 %790 = OpCompositeExtract %788 0 
                                         f32 %791 = OpCompositeExtract %788 1 
                                       f32_3 %792 = OpCompositeConstruct %790 %791 %789 
                                                      OpStore %786 %792 
                         read_only Texture2D %793 = OpLoad %723 
                                     sampler %794 = OpLoad %725 
                  read_only Texture2DSampled %795 = OpSampledImage %793 %794 
                                       f32_3 %796 = OpLoad %786 
                                         f32 %797 = OpCompositeExtract %796 2 
                                         f32 %798 = OpImageSampleDrefExplicitLod %795 %796 %797 Lod %6 
                                Private f32* %799 = OpAccessChain %82 %27 
                                                      OpStore %799 %798 
                                       f32_3 %801 = OpLoad %33 
                                       f32_2 %802 = OpVectorShuffle %801 %801 0 2 
                                         f32 %803 = OpLoad %60 
                                         f32 %804 = OpCompositeExtract %802 0 
                                         f32 %805 = OpCompositeExtract %802 1 
                                       f32_3 %806 = OpCompositeConstruct %804 %805 %803 
                                                      OpStore %800 %806 
                         read_only Texture2D %807 = OpLoad %723 
                                     sampler %808 = OpLoad %725 
                  read_only Texture2DSampled %809 = OpSampledImage %807 %808 
                                       f32_3 %810 = OpLoad %800 
                                         f32 %811 = OpCompositeExtract %810 2 
                                         f32 %812 = OpImageSampleDrefExplicitLod %809 %810 %811 Lod %6 
                                Private f32* %813 = OpAccessChain %33 %27 
                                                      OpStore %813 %812 
                                Private f32* %814 = OpAccessChain %597 %200 
                                         f32 %815 = OpLoad %814 
                                Private f32* %816 = OpAccessChain %33 %27 
                                         f32 %817 = OpLoad %816 
                                         f32 %818 = OpFMul %815 %817 
                                Private f32* %819 = OpAccessChain %9 %27 
                                         f32 %820 = OpLoad %819 
                                         f32 %821 = OpFAdd %818 %820 
                                Private f32* %822 = OpAccessChain %9 %27 
                                                      OpStore %822 %821 
                                Private f32* %823 = OpAccessChain %597 %68 
                                         f32 %824 = OpLoad %823 
                                Private f32* %825 = OpAccessChain %82 %27 
                                         f32 %826 = OpLoad %825 
                                         f32 %827 = OpFMul %824 %826 
                                Private f32* %828 = OpAccessChain %9 %27 
                                         f32 %829 = OpLoad %828 
                                         f32 %830 = OpFAdd %827 %829 
                                Private f32* %831 = OpAccessChain %9 %27 
                                                      OpStore %831 %830 
                                       f32_4 %832 = OpLoad %566 
                                       f32_4 %833 = OpLoad %592 
                                       f32_4 %834 = OpVectorShuffle %833 %833 1 1 1 1 
                                       f32_4 %835 = OpFMul %832 %834 
                                                      OpStore %597 %835 
                                Private f32* %836 = OpAccessChain %170 %200 
                                         f32 %837 = OpLoad %836 
                                Private f32* %838 = OpAccessChain %697 %50 
                                                      OpStore %838 %837 
                                       f32_2 %839 = OpLoad %489 
                                       f32_4 %840 = OpVectorShuffle %839 %839 0 1 0 1 
                              Uniform f32_4* %841 = OpAccessChain %41 %303 
                                       f32_4 %842 = OpLoad %841 
                                       f32_4 %843 = OpVectorShuffle %842 %842 0 1 0 1 
                                       f32_4 %844 = OpFMul %840 %843 
                                       f32_4 %845 = OpLoad %697 
                                       f32_4 %846 = OpVectorShuffle %845 %845 0 1 2 1 
                                       f32_4 %847 = OpFAdd %844 %846 
                                                      OpStore %705 %847 
                                       f32_4 %849 = OpLoad %705 
                                       f32_2 %850 = OpVectorShuffle %849 %849 0 1 
                                         f32 %851 = OpLoad %60 
                                         f32 %852 = OpCompositeExtract %850 0 
                                         f32 %853 = OpCompositeExtract %850 1 
                                       f32_3 %854 = OpCompositeConstruct %852 %853 %851 
                                                      OpStore %848 %854 
                         read_only Texture2D %855 = OpLoad %723 
                                     sampler %856 = OpLoad %725 
                  read_only Texture2DSampled %857 = OpSampledImage %855 %856 
                                       f32_3 %858 = OpLoad %848 
                                         f32 %859 = OpCompositeExtract %858 2 
                                         f32 %860 = OpImageSampleDrefExplicitLod %857 %858 %859 Lod %6 
                                Private f32* %861 = OpAccessChain %33 %27 
                                                      OpStore %861 %860 
                                       f32_4 %863 = OpLoad %705 
                                       f32_2 %864 = OpVectorShuffle %863 %863 2 3 
                                         f32 %865 = OpLoad %60 
                                         f32 %866 = OpCompositeExtract %864 0 
                                         f32 %867 = OpCompositeExtract %864 1 
                                       f32_3 %868 = OpCompositeConstruct %866 %867 %865 
                                                      OpStore %862 %868 
                         read_only Texture2D %870 = OpLoad %723 
                                     sampler %871 = OpLoad %725 
                  read_only Texture2DSampled %872 = OpSampledImage %870 %871 
                                       f32_3 %873 = OpLoad %862 
                                         f32 %874 = OpCompositeExtract %873 2 
                                         f32 %875 = OpImageSampleDrefExplicitLod %872 %873 %874 Lod %6 
                                                      OpStore %869 %875 
                                Private f32* %876 = OpAccessChain %597 %27 
                                         f32 %877 = OpLoad %876 
                                Private f32* %878 = OpAccessChain %33 %27 
                                         f32 %879 = OpLoad %878 
                                         f32 %880 = OpFMul %877 %879 
                                Private f32* %881 = OpAccessChain %9 %27 
                                         f32 %882 = OpLoad %881 
                                         f32 %883 = OpFAdd %880 %882 
                                Private f32* %884 = OpAccessChain %9 %27 
                                                      OpStore %884 %883 
                                Private f32* %885 = OpAccessChain %597 %50 
                                         f32 %886 = OpLoad %885 
                                         f32 %887 = OpLoad %869 
                                         f32 %888 = OpFMul %886 %887 
                                Private f32* %889 = OpAccessChain %9 %27 
                                         f32 %890 = OpLoad %889 
                                         f32 %891 = OpFAdd %888 %890 
                                Private f32* %892 = OpAccessChain %9 %27 
                                                      OpStore %892 %891 
                                       f32_2 %893 = OpLoad %489 
                              Uniform f32_4* %894 = OpAccessChain %41 %303 
                                       f32_4 %895 = OpLoad %894 
                                       f32_2 %896 = OpVectorShuffle %895 %895 0 1 
                                       f32_2 %897 = OpFMul %893 %896 
                                       f32_4 %898 = OpLoad %697 
                                       f32_2 %899 = OpVectorShuffle %898 %898 3 1 
                                       f32_2 %900 = OpFAdd %897 %899 
                                       f32_3 %901 = OpLoad %33 
                                       f32_3 %902 = OpVectorShuffle %901 %900 3 1 4 
                                                      OpStore %33 %902 
                                Private f32* %903 = OpAccessChain %697 %50 
                                         f32 %904 = OpLoad %903 
                                Private f32* %905 = OpAccessChain %322 %200 
                                                      OpStore %905 %904 
                                       f32_2 %906 = OpLoad %489 
                              Uniform f32_4* %907 = OpAccessChain %41 %303 
                                       f32_4 %908 = OpLoad %907 
                                       f32_2 %909 = OpVectorShuffle %908 %908 0 1 
                                       f32_2 %910 = OpFMul %906 %909 
                                       f32_4 %911 = OpLoad %322 
                                       f32_2 %912 = OpVectorShuffle %911 %911 0 2 
                                       f32_2 %913 = OpFAdd %910 %912 
                                       f32_4 %914 = OpLoad %82 
                                       f32_4 %915 = OpVectorShuffle %914 %913 4 1 2 5 
                                                      OpStore %82 %915 
                                       f32_4 %917 = OpLoad %82 
                                       f32_2 %918 = OpVectorShuffle %917 %917 0 3 
                                         f32 %919 = OpLoad %60 
                                         f32 %920 = OpCompositeExtract %918 0 
                                         f32 %921 = OpCompositeExtract %918 1 
                                       f32_3 %922 = OpCompositeConstruct %920 %921 %919 
                                                      OpStore %916 %922 
                         read_only Texture2D %923 = OpLoad %723 
                                     sampler %924 = OpLoad %725 
                  read_only Texture2DSampled %925 = OpSampledImage %923 %924 
                                       f32_3 %926 = OpLoad %916 
                                         f32 %927 = OpCompositeExtract %926 2 
                                         f32 %928 = OpImageSampleDrefExplicitLod %925 %926 %927 Lod %6 
                                Private f32* %929 = OpAccessChain %82 %27 
                                                      OpStore %929 %928 
                                       f32_3 %931 = OpLoad %33 
                                       f32_2 %932 = OpVectorShuffle %931 %931 0 2 
                                         f32 %933 = OpLoad %60 
                                         f32 %934 = OpCompositeExtract %932 0 
                                         f32 %935 = OpCompositeExtract %932 1 
                                       f32_3 %936 = OpCompositeConstruct %934 %935 %933 
                                                      OpStore %930 %936 
                         read_only Texture2D %937 = OpLoad %723 
                                     sampler %938 = OpLoad %725 
                  read_only Texture2DSampled %939 = OpSampledImage %937 %938 
                                       f32_3 %940 = OpLoad %930 
                                         f32 %941 = OpCompositeExtract %940 2 
                                         f32 %942 = OpImageSampleDrefExplicitLod %939 %940 %941 Lod %6 
                                Private f32* %943 = OpAccessChain %33 %27 
                                                      OpStore %943 %942 
                                Private f32* %944 = OpAccessChain %597 %200 
                                         f32 %945 = OpLoad %944 
                                Private f32* %946 = OpAccessChain %33 %27 
                                         f32 %947 = OpLoad %946 
                                         f32 %948 = OpFMul %945 %947 
                                Private f32* %949 = OpAccessChain %9 %27 
                                         f32 %950 = OpLoad %949 
                                         f32 %951 = OpFAdd %948 %950 
                                Private f32* %952 = OpAccessChain %9 %27 
                                                      OpStore %952 %951 
                                Private f32* %953 = OpAccessChain %597 %68 
                                         f32 %954 = OpLoad %953 
                                Private f32* %955 = OpAccessChain %82 %27 
                                         f32 %956 = OpLoad %955 
                                         f32 %957 = OpFMul %954 %956 
                                Private f32* %958 = OpAccessChain %9 %27 
                                         f32 %959 = OpLoad %958 
                                         f32 %960 = OpFAdd %957 %959 
                                Private f32* %961 = OpAccessChain %9 %27 
                                                      OpStore %961 %960 
                                       f32_4 %962 = OpLoad %566 
                                       f32_4 %963 = OpLoad %592 
                                       f32_4 %964 = OpVectorShuffle %963 %963 2 2 2 2 
                                       f32_4 %965 = OpFMul %962 %964 
                                                      OpStore %597 %965 
                                       f32_4 %966 = OpLoad %566 
                                       f32_4 %967 = OpLoad %592 
                                       f32_4 %968 = OpVectorShuffle %967 %967 3 3 3 3 
                                       f32_4 %969 = OpFMul %966 %968 
                                                      OpStore %566 %969 
                                Private f32* %970 = OpAccessChain %170 %68 
                                         f32 %971 = OpLoad %970 
                                Private f32* %972 = OpAccessChain %697 %50 
                                                      OpStore %972 %971 
                                       f32_2 %973 = OpLoad %489 
                                       f32_4 %974 = OpVectorShuffle %973 %973 0 1 0 1 
                              Uniform f32_4* %975 = OpAccessChain %41 %303 
                                       f32_4 %976 = OpLoad %975 
                                       f32_4 %977 = OpVectorShuffle %976 %976 0 1 0 1 
                                       f32_4 %978 = OpFMul %974 %977 
                                       f32_4 %979 = OpLoad %697 
                                       f32_4 %980 = OpVectorShuffle %979 %979 0 1 2 1 
                                       f32_4 %981 = OpFAdd %978 %980 
                                                      OpStore %592 %981 
                                       f32_4 %983 = OpLoad %592 
                                       f32_2 %984 = OpVectorShuffle %983 %983 0 1 
                                         f32 %985 = OpLoad %60 
                                         f32 %986 = OpCompositeExtract %984 0 
                                         f32 %987 = OpCompositeExtract %984 1 
                                       f32_3 %988 = OpCompositeConstruct %986 %987 %985 
                                                      OpStore %982 %988 
                         read_only Texture2D %989 = OpLoad %723 
                                     sampler %990 = OpLoad %725 
                  read_only Texture2DSampled %991 = OpSampledImage %989 %990 
                                       f32_3 %992 = OpLoad %982 
                                         f32 %993 = OpCompositeExtract %992 2 
                                         f32 %994 = OpImageSampleDrefExplicitLod %991 %992 %993 Lod %6 
                                Private f32* %995 = OpAccessChain %33 %27 
                                                      OpStore %995 %994 
                                       f32_4 %997 = OpLoad %592 
                                       f32_2 %998 = OpVectorShuffle %997 %997 2 3 
                                         f32 %999 = OpLoad %60 
                                        f32 %1000 = OpCompositeExtract %998 0 
                                        f32 %1001 = OpCompositeExtract %998 1 
                                      f32_3 %1002 = OpCompositeConstruct %1000 %1001 %999 
                                                      OpStore %996 %1002 
                        read_only Texture2D %1003 = OpLoad %723 
                                    sampler %1004 = OpLoad %725 
                 read_only Texture2DSampled %1005 = OpSampledImage %1003 %1004 
                                      f32_3 %1006 = OpLoad %996 
                                        f32 %1007 = OpCompositeExtract %1006 2 
                                        f32 %1008 = OpImageSampleDrefExplicitLod %1005 %1006 %1007 Lod %6 
                                                      OpStore %869 %1008 
                               Private f32* %1009 = OpAccessChain %597 %27 
                                        f32 %1010 = OpLoad %1009 
                               Private f32* %1011 = OpAccessChain %33 %27 
                                        f32 %1012 = OpLoad %1011 
                                        f32 %1013 = OpFMul %1010 %1012 
                               Private f32* %1014 = OpAccessChain %9 %27 
                                        f32 %1015 = OpLoad %1014 
                                        f32 %1016 = OpFAdd %1013 %1015 
                               Private f32* %1017 = OpAccessChain %9 %27 
                                                      OpStore %1017 %1016 
                               Private f32* %1018 = OpAccessChain %597 %50 
                                        f32 %1019 = OpLoad %1018 
                                        f32 %1020 = OpLoad %869 
                                        f32 %1021 = OpFMul %1019 %1020 
                               Private f32* %1022 = OpAccessChain %9 %27 
                                        f32 %1023 = OpLoad %1022 
                                        f32 %1024 = OpFAdd %1021 %1023 
                               Private f32* %1025 = OpAccessChain %9 %27 
                                                      OpStore %1025 %1024 
                                      f32_2 %1026 = OpLoad %489 
                             Uniform f32_4* %1027 = OpAccessChain %41 %303 
                                      f32_4 %1028 = OpLoad %1027 
                                      f32_2 %1029 = OpVectorShuffle %1028 %1028 0 1 
                                      f32_2 %1030 = OpFMul %1026 %1029 
                                      f32_4 %1031 = OpLoad %697 
                                      f32_2 %1032 = OpVectorShuffle %1031 %1031 3 1 
                                      f32_2 %1033 = OpFAdd %1030 %1032 
                                      f32_3 %1034 = OpLoad %33 
                                      f32_3 %1035 = OpVectorShuffle %1034 %1033 3 1 4 
                                                      OpStore %33 %1035 
                                      f32_4 %1036 = OpLoad %697 
                                      f32_3 %1037 = OpVectorShuffle %1036 %1036 0 2 3 
                                      f32_4 %1038 = OpLoad %170 
                                      f32_4 %1039 = OpVectorShuffle %1038 %1037 4 1 5 6 
                                                      OpStore %170 %1039 
                               Private f32* %1040 = OpAccessChain %697 %50 
                                        f32 %1041 = OpLoad %1040 
                               Private f32* %1042 = OpAccessChain %322 %68 
                                                      OpStore %1042 %1041 
                                      f32_2 %1043 = OpLoad %489 
                             Uniform f32_4* %1044 = OpAccessChain %41 %303 
                                      f32_4 %1045 = OpLoad %1044 
                                      f32_2 %1046 = OpVectorShuffle %1045 %1045 0 1 
                                      f32_2 %1047 = OpFMul %1043 %1046 
                                      f32_4 %1048 = OpLoad %322 
                                      f32_2 %1049 = OpVectorShuffle %1048 %1048 0 3 
                                      f32_2 %1050 = OpFAdd %1047 %1049 
                                      f32_4 %1051 = OpLoad %82 
                                      f32_4 %1052 = OpVectorShuffle %1051 %1050 4 1 2 5 
                                                      OpStore %82 %1052 
                                      f32_4 %1054 = OpLoad %82 
                                      f32_2 %1055 = OpVectorShuffle %1054 %1054 0 3 
                                        f32 %1056 = OpLoad %60 
                                        f32 %1057 = OpCompositeExtract %1055 0 
                                        f32 %1058 = OpCompositeExtract %1055 1 
                                      f32_3 %1059 = OpCompositeConstruct %1057 %1058 %1056 
                                                      OpStore %1053 %1059 
                        read_only Texture2D %1060 = OpLoad %723 
                                    sampler %1061 = OpLoad %725 
                 read_only Texture2DSampled %1062 = OpSampledImage %1060 %1061 
                                      f32_3 %1063 = OpLoad %1053 
                                        f32 %1064 = OpCompositeExtract %1063 2 
                                        f32 %1065 = OpImageSampleDrefExplicitLod %1062 %1063 %1064 Lod %6 
                               Private f32* %1066 = OpAccessChain %82 %27 
                                                      OpStore %1066 %1065 
                                      f32_3 %1068 = OpLoad %33 
                                      f32_2 %1069 = OpVectorShuffle %1068 %1068 0 2 
                                        f32 %1070 = OpLoad %60 
                                        f32 %1071 = OpCompositeExtract %1069 0 
                                        f32 %1072 = OpCompositeExtract %1069 1 
                                      f32_3 %1073 = OpCompositeConstruct %1071 %1072 %1070 
                                                      OpStore %1067 %1073 
                        read_only Texture2D %1074 = OpLoad %723 
                                    sampler %1075 = OpLoad %725 
                 read_only Texture2DSampled %1076 = OpSampledImage %1074 %1075 
                                      f32_3 %1077 = OpLoad %1067 
                                        f32 %1078 = OpCompositeExtract %1077 2 
                                        f32 %1079 = OpImageSampleDrefExplicitLod %1076 %1077 %1078 Lod %6 
                               Private f32* %1080 = OpAccessChain %33 %27 
                                                      OpStore %1080 %1079 
                               Private f32* %1081 = OpAccessChain %597 %200 
                                        f32 %1082 = OpLoad %1081 
                               Private f32* %1083 = OpAccessChain %33 %27 
                                        f32 %1084 = OpLoad %1083 
                                        f32 %1085 = OpFMul %1082 %1084 
                               Private f32* %1086 = OpAccessChain %9 %27 
                                        f32 %1087 = OpLoad %1086 
                                        f32 %1088 = OpFAdd %1085 %1087 
                               Private f32* %1089 = OpAccessChain %9 %27 
                                                      OpStore %1089 %1088 
                               Private f32* %1090 = OpAccessChain %597 %68 
                                        f32 %1091 = OpLoad %1090 
                               Private f32* %1092 = OpAccessChain %82 %27 
                                        f32 %1093 = OpLoad %1092 
                                        f32 %1094 = OpFMul %1091 %1093 
                               Private f32* %1095 = OpAccessChain %9 %27 
                                        f32 %1096 = OpLoad %1095 
                                        f32 %1097 = OpFAdd %1094 %1096 
                               Private f32* %1098 = OpAccessChain %9 %27 
                                                      OpStore %1098 %1097 
                                      f32_2 %1099 = OpLoad %489 
                                      f32_4 %1100 = OpVectorShuffle %1099 %1099 0 1 0 1 
                             Uniform f32_4* %1101 = OpAccessChain %41 %303 
                                      f32_4 %1102 = OpLoad %1101 
                                      f32_4 %1103 = OpVectorShuffle %1102 %1102 0 1 0 1 
                                      f32_4 %1104 = OpFMul %1100 %1103 
                                      f32_4 %1105 = OpLoad %170 
                                      f32_4 %1106 = OpVectorShuffle %1105 %1105 0 1 2 1 
                                      f32_4 %1107 = OpFAdd %1104 %1106 
                                                      OpStore %592 %1107 
                                      f32_2 %1108 = OpLoad %489 
                             Uniform f32_4* %1109 = OpAccessChain %41 %303 
                                      f32_4 %1110 = OpLoad %1109 
                                      f32_2 %1111 = OpVectorShuffle %1110 %1110 0 1 
                                      f32_2 %1112 = OpFMul %1108 %1111 
                                      f32_4 %1113 = OpLoad %170 
                                      f32_2 %1114 = OpVectorShuffle %1113 %1113 3 1 
                                      f32_2 %1115 = OpFAdd %1112 %1114 
                                      f32_3 %1116 = OpLoad %33 
                                      f32_3 %1117 = OpVectorShuffle %1116 %1115 3 1 4 
                                                      OpStore %33 %1117 
                               Private f32* %1118 = OpAccessChain %170 %50 
                                        f32 %1119 = OpLoad %1118 
                               Private f32* %1120 = OpAccessChain %322 %50 
                                                      OpStore %1120 %1119 
                                      f32_2 %1121 = OpLoad %489 
                             Uniform f32_4* %1122 = OpAccessChain %41 %303 
                                      f32_4 %1123 = OpLoad %1122 
                                      f32_2 %1124 = OpVectorShuffle %1123 %1123 0 1 
                                      f32_2 %1125 = OpFMul %1121 %1124 
                                      f32_4 %1126 = OpLoad %322 
                                      f32_2 %1127 = OpVectorShuffle %1126 %1126 0 1 
                                      f32_2 %1128 = OpFAdd %1125 %1127 
                                      f32_4 %1129 = OpLoad %82 
                                      f32_4 %1130 = OpVectorShuffle %1129 %1128 4 5 2 3 
                                                      OpStore %82 %1130 
                                      f32_4 %1132 = OpLoad %82 
                                      f32_2 %1133 = OpVectorShuffle %1132 %1132 0 1 
                                        f32 %1134 = OpLoad %60 
                                        f32 %1135 = OpCompositeExtract %1133 0 
                                        f32 %1136 = OpCompositeExtract %1133 1 
                                      f32_3 %1137 = OpCompositeConstruct %1135 %1136 %1134 
                                                      OpStore %1131 %1137 
                        read_only Texture2D %1138 = OpLoad %723 
                                    sampler %1139 = OpLoad %725 
                 read_only Texture2DSampled %1140 = OpSampledImage %1138 %1139 
                                      f32_3 %1141 = OpLoad %1131 
                                        f32 %1142 = OpCompositeExtract %1141 2 
                                        f32 %1143 = OpImageSampleDrefExplicitLod %1140 %1141 %1142 Lod %6 
                               Private f32* %1144 = OpAccessChain %82 %27 
                                                      OpStore %1144 %1143 
                                      f32_3 %1146 = OpLoad %33 
                                      f32_2 %1147 = OpVectorShuffle %1146 %1146 0 2 
                                        f32 %1148 = OpLoad %60 
                                        f32 %1149 = OpCompositeExtract %1147 0 
                                        f32 %1150 = OpCompositeExtract %1147 1 
                                      f32_3 %1151 = OpCompositeConstruct %1149 %1150 %1148 
                                                      OpStore %1145 %1151 
                        read_only Texture2D %1152 = OpLoad %723 
                                    sampler %1153 = OpLoad %725 
                 read_only Texture2DSampled %1154 = OpSampledImage %1152 %1153 
                                      f32_3 %1155 = OpLoad %1145 
                                        f32 %1156 = OpCompositeExtract %1155 2 
                                        f32 %1157 = OpImageSampleDrefExplicitLod %1154 %1155 %1156 Lod %6 
                               Private f32* %1158 = OpAccessChain %33 %27 
                                                      OpStore %1158 %1157 
                                      f32_4 %1160 = OpLoad %592 
                                      f32_2 %1161 = OpVectorShuffle %1160 %1160 0 1 
                                        f32 %1162 = OpLoad %60 
                                        f32 %1163 = OpCompositeExtract %1161 0 
                                        f32 %1164 = OpCompositeExtract %1161 1 
                                      f32_3 %1165 = OpCompositeConstruct %1163 %1164 %1162 
                                                      OpStore %1159 %1165 
                        read_only Texture2D %1166 = OpLoad %723 
                                    sampler %1167 = OpLoad %725 
                 read_only Texture2DSampled %1168 = OpSampledImage %1166 %1167 
                                      f32_3 %1169 = OpLoad %1159 
                                        f32 %1170 = OpCompositeExtract %1169 2 
                                        f32 %1171 = OpImageSampleDrefExplicitLod %1168 %1169 %1170 Lod %6 
                                                      OpStore %869 %1171 
                                      f32_4 %1173 = OpLoad %592 
                                      f32_2 %1174 = OpVectorShuffle %1173 %1173 2 3 
                                        f32 %1175 = OpLoad %60 
                                        f32 %1176 = OpCompositeExtract %1174 0 
                                        f32 %1177 = OpCompositeExtract %1174 1 
                                      f32_3 %1178 = OpCompositeConstruct %1176 %1177 %1175 
                                                      OpStore %1172 %1178 
                        read_only Texture2D %1179 = OpLoad %723 
                                    sampler %1180 = OpLoad %725 
                 read_only Texture2DSampled %1181 = OpSampledImage %1179 %1180 
                                      f32_3 %1182 = OpLoad %1172 
                                        f32 %1183 = OpCompositeExtract %1182 2 
                                        f32 %1184 = OpImageSampleDrefExplicitLod %1181 %1182 %1183 Lod %6 
                                                      OpStore %60 %1184 
                               Private f32* %1185 = OpAccessChain %566 %27 
                                        f32 %1186 = OpLoad %1185 
                                        f32 %1187 = OpLoad %869 
                                        f32 %1188 = OpFMul %1186 %1187 
                               Private f32* %1189 = OpAccessChain %9 %27 
                                        f32 %1190 = OpLoad %1189 
                                        f32 %1191 = OpFAdd %1188 %1190 
                               Private f32* %1192 = OpAccessChain %9 %27 
                                                      OpStore %1192 %1191 
                               Private f32* %1193 = OpAccessChain %566 %50 
                                        f32 %1194 = OpLoad %1193 
                                        f32 %1195 = OpLoad %60 
                                        f32 %1196 = OpFMul %1194 %1195 
                               Private f32* %1197 = OpAccessChain %9 %27 
                                        f32 %1198 = OpLoad %1197 
                                        f32 %1199 = OpFAdd %1196 %1198 
                               Private f32* %1200 = OpAccessChain %9 %27 
                                                      OpStore %1200 %1199 
                               Private f32* %1201 = OpAccessChain %566 %200 
                                        f32 %1202 = OpLoad %1201 
                               Private f32* %1203 = OpAccessChain %33 %27 
                                        f32 %1204 = OpLoad %1203 
                                        f32 %1205 = OpFMul %1202 %1204 
                               Private f32* %1206 = OpAccessChain %9 %27 
                                        f32 %1207 = OpLoad %1206 
                                        f32 %1208 = OpFAdd %1205 %1207 
                               Private f32* %1209 = OpAccessChain %9 %27 
                                                      OpStore %1209 %1208 
                               Private f32* %1210 = OpAccessChain %566 %68 
                                        f32 %1211 = OpLoad %1210 
                               Private f32* %1212 = OpAccessChain %82 %27 
                                        f32 %1213 = OpLoad %1212 
                                        f32 %1214 = OpFMul %1211 %1213 
                               Private f32* %1215 = OpAccessChain %9 %27 
                                        f32 %1216 = OpLoad %1215 
                                        f32 %1217 = OpFAdd %1214 %1216 
                               Private f32* %1218 = OpAccessChain %9 %27 
                                                      OpStore %1218 %1217 
                               Uniform f32* %1219 = OpAccessChain %41 %291 %27 
                                        f32 %1220 = OpLoad %1219 
                                        f32 %1221 = OpFNegate %1220 
                                        f32 %1222 = OpFAdd %1221 %55 
                               Private f32* %1223 = OpAccessChain %33 %27 
                                                      OpStore %1223 %1222 
                                      f32_4 %1226 = OpLoad %9 
                                      f32_4 %1227 = OpVectorShuffle %1226 %1226 0 0 0 0 
                                      f32_3 %1228 = OpLoad %33 
                                      f32_4 %1229 = OpVectorShuffle %1228 %1228 0 0 0 0 
                                      f32_4 %1230 = OpFMul %1227 %1229 
                             Uniform f32_4* %1231 = OpAccessChain %41 %291 
                                      f32_4 %1232 = OpLoad %1231 
                                      f32_4 %1233 = OpVectorShuffle %1232 %1232 0 0 0 0 
                                      f32_4 %1234 = OpFAdd %1230 %1233 
                                                      OpStore %1225 %1234 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "SHADOWS_SINGLE_CASCADE" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "SHADOWS_SINGLE_CASCADE" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraInvProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in  vec4 in_POSITION0;
in  vec2 in_TEXCOORD0;
in  vec3 in_TEXCOORD1;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_CameraInvProjection[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_CameraInvProjection[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    vs_TEXCOORD0.zw = u_xlat1.zz + u_xlat1.xw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = in_TEXCOORD1.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-hlslcc_mtx4x4unity_CameraInvProjection[2].xyz);
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[2].xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;
    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;
    u_xlat1.w = (-u_xlat1.z);
    vs_TEXCOORD2.xyz = u_xlat1.xyw;
    u_xlat0.w = (-u_xlat0.z);
    vs_TEXCOORD3.xyz = u_xlat0.xyw;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	vec4 _LightShadowData;
uniform 	vec4 _ShadowMapTexture_TexelSize;
UNITY_LOCATION(0) uniform  sampler2D _CameraDepthTexture;
UNITY_LOCATION(1) uniform  sampler2D _ShadowMapTexture;
UNITY_LOCATION(2) uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec3 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD3;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
vec4 u_xlat6;
vec4 u_xlat7;
vec3 u_xlat8;
float u_xlat16;
vec2 u_xlat17;
float u_xlat24;
void main()
{
    u_xlat0 = texture(_CameraDepthTexture, vs_TEXCOORD0.xy);
    u_xlat8.x = _ZBufferParams.x * u_xlat0.x + _ZBufferParams.y;
    u_xlat8.x = float(1.0) / u_xlat8.x;
    u_xlat16 = (-u_xlat8.x) + u_xlat0.x;
    u_xlat8.x = unity_OrthoParams.w * u_xlat16 + u_xlat8.x;
    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + vs_TEXCOORD3.xyz;
    u_xlat0.xzw = u_xlat0.xxx * u_xlat1.xyz + vs_TEXCOORD2.xyz;
    u_xlat0.xzw = (-vs_TEXCOORD1.xyz) * u_xlat8.xxx + u_xlat0.xzw;
    u_xlat1.xyz = u_xlat8.xxx * vs_TEXCOORD1.xyz;
    u_xlat0.xyz = unity_OrthoParams.www * u_xlat0.xzw + u_xlat1.xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_CameraToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_CameraToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_CameraToWorld[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_CameraToWorld[3];
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xy = u_xlat0.xy * _ShadowMapTexture_TexelSize.zw + vec2(0.5, 0.5);
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlat0.xy = u_xlat0.xy * _ShadowMapTexture_TexelSize.zw + (-u_xlat1.xy);
    u_xlat17.xy = (-u_xlat0.xy) + vec2(1.0, 1.0);
    u_xlat2.xy = min(u_xlat0.xy, vec2(0.0, 0.0));
    u_xlat17.xy = (-u_xlat2.xy) * u_xlat2.xy + u_xlat17.xy;
    u_xlat17.xy = u_xlat17.xy + vec2(2.0, 2.0);
    u_xlat2.xy = u_xlat17.xy * vec2(0.0816320032, 0.0816320032);
    u_xlat3.y = u_xlat2.x;
    u_xlat17.xy = max(u_xlat0.xy, vec2(0.0, 0.0));
    u_xlat4 = u_xlat0.xxyy + vec4(0.5, 1.0, 0.5, 1.0);
    u_xlat17.xy = (-u_xlat17.xy) * u_xlat17.xy + u_xlat4.yw;
    u_xlat4 = u_xlat4.xxzz * u_xlat4.xxzz;
    u_xlat17.xy = u_xlat17.xy + vec2(2.0, 2.0);
    u_xlat5.z = u_xlat17.x * 0.0816320032;
    u_xlat6.z = u_xlat17.y * 0.0816320032;
    u_xlat17.xy = u_xlat4.xz * vec2(0.5, 0.5) + (-u_xlat0.xy);
    u_xlat3.zw = u_xlat4.wy * vec2(0.0408160016, 0.0408160016);
    u_xlat6.xy = u_xlat17.yx * vec2(0.0816320032, 0.0816320032);
    u_xlat5.x = u_xlat6.y;
    u_xlat2.w = u_xlat3.z;
    u_xlat5.yw = u_xlat0.xx * vec2(-0.0816320032, 0.0816320032) + vec2(0.163264006, 0.0816320032);
    u_xlat3.xz = u_xlat0.xx * vec2(-0.0816320032, 0.0816320032) + vec2(0.0816320032, 0.163264006);
    u_xlat4 = u_xlat3 + u_xlat5;
    u_xlat3 = u_xlat3 / u_xlat4;
    u_xlat3 = u_xlat3 + vec4(-3.5, -1.5, 0.5, 2.5);
    u_xlat3 = u_xlat3.wxyz * _ShadowMapTexture_TexelSize.xxxx;
    u_xlat5.xzw = u_xlat3.yzw;
    u_xlat6.yw = u_xlat0.yy * vec2(-0.0816320032, 0.0816320032) + vec2(0.163264006, 0.0816320032);
    u_xlat2.xz = u_xlat0.yy * vec2(-0.0816320032, 0.0816320032) + vec2(0.0816320032, 0.163264006);
    u_xlat6 = u_xlat2 + u_xlat6;
    u_xlat2 = u_xlat2 / u_xlat6;
    u_xlat2 = u_xlat2 + vec4(-3.5, -1.5, 0.5, 2.5);
    u_xlat2 = u_xlat2.xwyz * _ShadowMapTexture_TexelSize.yyyy;
    u_xlat5.y = u_xlat2.x;
    u_xlat7 = u_xlat1.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat5.xyzy;
    vec3 txVec0 = vec3(u_xlat7.zw,u_xlat0.z);
    u_xlat0.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
    vec3 txVec1 = vec3(u_xlat7.xy,u_xlat0.z);
    u_xlat8.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec1, 0.0);
    u_xlat7 = u_xlat4 * u_xlat6.xxxx;
    u_xlat0.x = u_xlat0.x * u_xlat7.y;
    u_xlat0.x = u_xlat7.x * u_xlat8.x + u_xlat0.x;
    u_xlat8.xz = u_xlat1.xy * _ShadowMapTexture_TexelSize.xy + u_xlat5.wy;
    u_xlat3.y = u_xlat5.y;
    u_xlat17.xy = u_xlat1.xy * _ShadowMapTexture_TexelSize.xy + u_xlat3.xy;
    vec3 txVec2 = vec3(u_xlat17.xy,u_xlat0.z);
    u_xlat17.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec2, 0.0);
    vec3 txVec3 = vec3(u_xlat8.xz,u_xlat0.z);
    u_xlat8.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec3, 0.0);
    u_xlat0.x = u_xlat7.z * u_xlat8.x + u_xlat0.x;
    u_xlat0.x = u_xlat7.w * u_xlat17.x + u_xlat0.x;
    u_xlat5.y = u_xlat2.z;
    u_xlat7 = u_xlat1.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat5.xyzy;
    vec3 txVec4 = vec3(u_xlat7.xy,u_xlat0.z);
    u_xlat8.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec4, 0.0);
    vec3 txVec5 = vec3(u_xlat7.zw,u_xlat0.z);
    u_xlat24 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec5, 0.0);
    u_xlat7 = u_xlat4 * u_xlat6.yyyy;
    u_xlat0.x = u_xlat7.x * u_xlat8.x + u_xlat0.x;
    u_xlat0.x = u_xlat7.y * u_xlat24 + u_xlat0.x;
    u_xlat8.xz = u_xlat1.xy * _ShadowMapTexture_TexelSize.xy + u_xlat5.wy;
    u_xlat3.z = u_xlat5.y;
    u_xlat17.xy = u_xlat1.xy * _ShadowMapTexture_TexelSize.xy + u_xlat3.xz;
    vec3 txVec6 = vec3(u_xlat17.xy,u_xlat0.z);
    u_xlat17.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec6, 0.0);
    vec3 txVec7 = vec3(u_xlat8.xz,u_xlat0.z);
    u_xlat8.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec7, 0.0);
    u_xlat0.x = u_xlat7.z * u_xlat8.x + u_xlat0.x;
    u_xlat0.x = u_xlat7.w * u_xlat17.x + u_xlat0.x;
    u_xlat5.y = u_xlat2.w;
    u_xlat7 = u_xlat1.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat5.xyzy;
    vec3 txVec8 = vec3(u_xlat7.xy,u_xlat0.z);
    u_xlat8.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec8, 0.0);
    vec3 txVec9 = vec3(u_xlat7.zw,u_xlat0.z);
    u_xlat24 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec9, 0.0);
    u_xlat7 = u_xlat4 * u_xlat6.zzzz;
    u_xlat4 = u_xlat4 * u_xlat6.wwww;
    u_xlat0.x = u_xlat7.x * u_xlat8.x + u_xlat0.x;
    u_xlat0.x = u_xlat7.y * u_xlat24 + u_xlat0.x;
    u_xlat8.xz = u_xlat1.xy * _ShadowMapTexture_TexelSize.xy + u_xlat5.wy;
    u_xlat2.xzw = u_xlat5.xzw;
    u_xlat3.w = u_xlat5.y;
    u_xlat17.xy = u_xlat1.xy * _ShadowMapTexture_TexelSize.xy + u_xlat3.xw;
    vec3 txVec10 = vec3(u_xlat17.xy,u_xlat0.z);
    u_xlat17.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec10, 0.0);
    vec3 txVec11 = vec3(u_xlat8.xz,u_xlat0.z);
    u_xlat8.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec11, 0.0);
    u_xlat0.x = u_xlat7.z * u_xlat8.x + u_xlat0.x;
    u_xlat0.x = u_xlat7.w * u_xlat17.x + u_xlat0.x;
    u_xlat5 = u_xlat1.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat2.xyzy;
    u_xlat8.xz = u_xlat1.xy * _ShadowMapTexture_TexelSize.xy + u_xlat2.wy;
    u_xlat3.y = u_xlat2.y;
    u_xlat1.xy = u_xlat1.xy * _ShadowMapTexture_TexelSize.xy + u_xlat3.xy;
    vec3 txVec12 = vec3(u_xlat1.xy,u_xlat0.z);
    u_xlat1.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec12, 0.0);
    vec3 txVec13 = vec3(u_xlat8.xz,u_xlat0.z);
    u_xlat8.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec13, 0.0);
    vec3 txVec14 = vec3(u_xlat5.xy,u_xlat0.z);
    u_xlat24 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec14, 0.0);
    vec3 txVec15 = vec3(u_xlat5.zw,u_xlat0.z);
    u_xlat16 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec15, 0.0);
    u_xlat0.x = u_xlat4.x * u_xlat24 + u_xlat0.x;
    u_xlat0.x = u_xlat4.y * u_xlat16 + u_xlat0.x;
    u_xlat0.x = u_xlat4.z * u_xlat8.x + u_xlat0.x;
    u_xlat0.x = u_xlat4.w * u_xlat1.x + u_xlat0.x;
    u_xlat8.x = (-_LightShadowData.x) + 1.0;
    SV_Target0 = u_xlat0.xxxx * u_xlat8.xxxx + _LightShadowData.xxxx;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "SHADOWS_SINGLE_CASCADE" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 193
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %80 %119 %129 %134 %136 %177 %184 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpMemberDecorate %78 0 BuiltIn 78 
                                                      OpMemberDecorate %78 1 BuiltIn 78 
                                                      OpMemberDecorate %78 2 BuiltIn 78 
                                                      OpDecorate %78 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 119 
                                                      OpDecorate %129 Location 129 
                                                      OpDecorate vs_TEXCOORD1 Location 134 
                                                      OpDecorate %136 Location 136 
                                                      OpDecorate vs_TEXCOORD2 Location 177 
                                                      OpDecorate vs_TEXCOORD3 Location 184 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %16 %17 %18 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4];}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 2 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %29 = OpConstant 0 
                                          i32 %45 = OpConstant 3 
                               Private f32_4* %49 = OpVariable Private 
                                          u32 %76 = OpConstant 1 
                                              %77 = OpTypeArray %6 %76 
                                              %78 = OpTypeStruct %7 %6 %77 
                                              %79 = OpTypePointer Output %78 
         Output struct {f32_4; f32; f32[1];}* %80 = OpVariable Output 
                                              %82 = OpTypePointer Output %7 
                                              %84 = OpTypePointer Private %6 
                                          u32 %87 = OpConstant 0 
                                              %88 = OpTypePointer Uniform %6 
                                              %93 = OpTypeVector %6 3 
                                          f32 %96 = OpConstant 3.674022E-40 
                                        f32_3 %97 = OpConstantComposite %96 %96 %96 
                                             %101 = OpTypePointer Private %93 
                              Private f32_3* %102 = OpVariable Private 
                       Output f32_4* vs_TEXCOORD0 = OpVariable Output 
                                             %120 = OpTypeVector %6 2 
                                             %128 = OpTypePointer Input %120 
                                Input f32_2* %129 = OpVariable Input 
                                             %133 = OpTypePointer Output %93 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                                             %135 = OpTypePointer Input %93 
                                Input f32_3* %136 = OpVariable Input 
                                         u32 %171 = OpConstant 2 
                                         u32 %175 = OpConstant 3 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                       Output f32_3* vs_TEXCOORD3 = OpVariable Output 
                                             %187 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %30 = OpAccessChain %21 %23 %29 
                                        f32_4 %31 = OpLoad %30 
                                        f32_4 %32 = OpLoad %11 
                                        f32_4 %33 = OpVectorShuffle %32 %32 0 0 0 0 
                                        f32_4 %34 = OpFMul %31 %33 
                                        f32_4 %35 = OpLoad %9 
                                        f32_4 %36 = OpFAdd %34 %35 
                                                      OpStore %9 %36 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %23 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %44 = OpLoad %9 
                               Uniform f32_4* %46 = OpAccessChain %21 %23 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_4 %48 = OpFAdd %44 %47 
                                                      OpStore %9 %48 
                                        f32_4 %50 = OpLoad %9 
                                        f32_4 %51 = OpVectorShuffle %50 %50 1 1 1 1 
                               Uniform f32_4* %52 = OpAccessChain %21 %45 %24 
                                        f32_4 %53 = OpLoad %52 
                                        f32_4 %54 = OpFMul %51 %53 
                                                      OpStore %49 %54 
                               Uniform f32_4* %55 = OpAccessChain %21 %45 %29 
                                        f32_4 %56 = OpLoad %55 
                                        f32_4 %57 = OpLoad %9 
                                        f32_4 %58 = OpVectorShuffle %57 %57 0 0 0 0 
                                        f32_4 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %49 
                                        f32_4 %61 = OpFAdd %59 %60 
                                                      OpStore %49 %61 
                               Uniform f32_4* %62 = OpAccessChain %21 %45 %23 
                                        f32_4 %63 = OpLoad %62 
                                        f32_4 %64 = OpLoad %9 
                                        f32_4 %65 = OpVectorShuffle %64 %64 2 2 2 2 
                                        f32_4 %66 = OpFMul %63 %65 
                                        f32_4 %67 = OpLoad %49 
                                        f32_4 %68 = OpFAdd %66 %67 
                                                      OpStore %49 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %45 %45 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %9 
                                        f32_4 %72 = OpVectorShuffle %71 %71 3 3 3 3 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %49 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %9 %75 
                                        f32_4 %81 = OpLoad %9 
                                Output f32_4* %83 = OpAccessChain %80 %29 
                                                      OpStore %83 %81 
                                 Private f32* %85 = OpAccessChain %9 %76 
                                          f32 %86 = OpLoad %85 
                                 Uniform f32* %89 = OpAccessChain %21 %29 %87 
                                          f32 %90 = OpLoad %89 
                                          f32 %91 = OpFMul %86 %90 
                                 Private f32* %92 = OpAccessChain %9 %76 
                                                      OpStore %92 %91 
                                        f32_4 %94 = OpLoad %9 
                                        f32_3 %95 = OpVectorShuffle %94 %94 0 3 1 
                                        f32_3 %98 = OpFMul %95 %97 
                                        f32_4 %99 = OpLoad %49 
                                       f32_4 %100 = OpVectorShuffle %99 %98 4 1 5 6 
                                                      OpStore %49 %100 
                                       f32_4 %103 = OpLoad %9 
                                       f32_3 %104 = OpVectorShuffle %103 %103 1 1 1 
                              Uniform f32_4* %105 = OpAccessChain %21 %24 %24 
                                       f32_4 %106 = OpLoad %105 
                                       f32_3 %107 = OpVectorShuffle %106 %106 0 1 2 
                                       f32_3 %108 = OpFMul %104 %107 
                                                      OpStore %102 %108 
                              Uniform f32_4* %109 = OpAccessChain %21 %24 %29 
                                       f32_4 %110 = OpLoad %109 
                                       f32_3 %111 = OpVectorShuffle %110 %110 0 1 2 
                                       f32_4 %112 = OpLoad %9 
                                       f32_3 %113 = OpVectorShuffle %112 %112 0 0 0 
                                       f32_3 %114 = OpFMul %111 %113 
                                       f32_3 %115 = OpLoad %102 
                                       f32_3 %116 = OpFAdd %114 %115 
                                       f32_4 %117 = OpLoad %9 
                                       f32_4 %118 = OpVectorShuffle %117 %116 4 5 6 3 
                                                      OpStore %9 %118 
                                       f32_4 %121 = OpLoad %49 
                                       f32_2 %122 = OpVectorShuffle %121 %121 2 2 
                                       f32_4 %123 = OpLoad %49 
                                       f32_2 %124 = OpVectorShuffle %123 %123 0 3 
                                       f32_2 %125 = OpFAdd %122 %124 
                                       f32_4 %126 = OpLoad vs_TEXCOORD0 
                                       f32_4 %127 = OpVectorShuffle %126 %125 0 1 4 5 
                                                      OpStore vs_TEXCOORD0 %127 
                                       f32_2 %130 = OpLoad %129 
                                       f32_4 %131 = OpLoad vs_TEXCOORD0 
                                       f32_4 %132 = OpVectorShuffle %131 %130 4 5 2 3 
                                                      OpStore vs_TEXCOORD0 %132 
                                       f32_3 %137 = OpLoad %136 
                                                      OpStore vs_TEXCOORD1 %137 
                                       f32_4 %138 = OpLoad %9 
                                       f32_3 %139 = OpVectorShuffle %138 %138 0 1 2 
                              Uniform f32_4* %140 = OpAccessChain %21 %24 %23 
                                       f32_4 %141 = OpLoad %140 
                                       f32_3 %142 = OpVectorShuffle %141 %141 0 1 2 
                                       f32_3 %143 = OpFNegate %142 
                                       f32_3 %144 = OpFAdd %139 %143 
                                       f32_4 %145 = OpLoad %49 
                                       f32_4 %146 = OpVectorShuffle %145 %144 4 5 6 3 
                                                      OpStore %49 %146 
                                       f32_4 %147 = OpLoad %9 
                                       f32_3 %148 = OpVectorShuffle %147 %147 0 1 2 
                              Uniform f32_4* %149 = OpAccessChain %21 %24 %23 
                                       f32_4 %150 = OpLoad %149 
                                       f32_3 %151 = OpVectorShuffle %150 %150 0 1 2 
                                       f32_3 %152 = OpFAdd %148 %151 
                                       f32_4 %153 = OpLoad %9 
                                       f32_4 %154 = OpVectorShuffle %153 %152 4 5 6 3 
                                                      OpStore %9 %154 
                                       f32_4 %155 = OpLoad %9 
                                       f32_3 %156 = OpVectorShuffle %155 %155 0 1 2 
                              Uniform f32_4* %157 = OpAccessChain %21 %24 %45 
                                       f32_4 %158 = OpLoad %157 
                                       f32_3 %159 = OpVectorShuffle %158 %158 0 1 2 
                                       f32_3 %160 = OpFAdd %156 %159 
                                       f32_4 %161 = OpLoad %9 
                                       f32_4 %162 = OpVectorShuffle %161 %160 4 5 6 3 
                                                      OpStore %9 %162 
                                       f32_4 %163 = OpLoad %49 
                                       f32_3 %164 = OpVectorShuffle %163 %163 0 1 2 
                              Uniform f32_4* %165 = OpAccessChain %21 %24 %45 
                                       f32_4 %166 = OpLoad %165 
                                       f32_3 %167 = OpVectorShuffle %166 %166 0 1 2 
                                       f32_3 %168 = OpFAdd %164 %167 
                                       f32_4 %169 = OpLoad %49 
                                       f32_4 %170 = OpVectorShuffle %169 %168 4 5 6 3 
                                                      OpStore %49 %170 
                                Private f32* %172 = OpAccessChain %49 %171 
                                         f32 %173 = OpLoad %172 
                                         f32 %174 = OpFNegate %173 
                                Private f32* %176 = OpAccessChain %49 %175 
                                                      OpStore %176 %174 
                                       f32_4 %178 = OpLoad %49 
                                       f32_3 %179 = OpVectorShuffle %178 %178 0 1 3 
                                                      OpStore vs_TEXCOORD2 %179 
                                Private f32* %180 = OpAccessChain %9 %171 
                                         f32 %181 = OpLoad %180 
                                         f32 %182 = OpFNegate %181 
                                Private f32* %183 = OpAccessChain %9 %175 
                                                      OpStore %183 %182 
                                       f32_4 %185 = OpLoad %9 
                                       f32_3 %186 = OpVectorShuffle %185 %185 0 1 3 
                                                      OpStore vs_TEXCOORD3 %186 
                                 Output f32* %188 = OpAccessChain %80 %29 %76 
                                         f32 %189 = OpLoad %188 
                                         f32 %190 = OpFNegate %189 
                                 Output f32* %191 = OpAccessChain %80 %29 %76 
                                                      OpStore %191 %190 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 938
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %21 %83 %86 %100 %927 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpDecorate %12 DescriptorSet 12 
                                                      OpDecorate %12 Binding 12 
                                                      OpDecorate %16 DescriptorSet 16 
                                                      OpDecorate %16 Binding 16 
                                                      OpDecorate vs_TEXCOORD0 Location 21 
                                                      OpDecorate %35 ArrayStride 35 
                                                      OpDecorate %37 ArrayStride 37 
                                                      OpMemberDecorate %38 0 Offset 38 
                                                      OpMemberDecorate %38 1 Offset 38 
                                                      OpMemberDecorate %38 2 Offset 38 
                                                      OpMemberDecorate %38 3 Offset 38 
                                                      OpMemberDecorate %38 4 Offset 38 
                                                      OpMemberDecorate %38 5 Offset 38 
                                                      OpDecorate %38 Block 
                                                      OpDecorate %40 DescriptorSet 40 
                                                      OpDecorate %40 Binding 40 
                                                      OpDecorate vs_TEXCOORD2 Location 83 
                                                      OpDecorate vs_TEXCOORD3 Location 86 
                                                      OpDecorate vs_TEXCOORD1 Location 100 
                                                      OpDecorate %406 DescriptorSet 406 
                                                      OpDecorate %406 Binding 406 
                                                      OpDecorate %408 DescriptorSet 408 
                                                      OpDecorate %408 Binding 408 
                                                      OpDecorate %927 Location 927 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypePointer UniformConstant %10 
         UniformConstant read_only Texture2D* %12 = OpVariable UniformConstant 
                                              %14 = OpTypeSampler 
                                              %15 = OpTypePointer UniformConstant %14 
                     UniformConstant sampler* %16 = OpVariable UniformConstant 
                                              %18 = OpTypeSampledImage %10 
                                              %20 = OpTypePointer Input %7 
                        Input f32_4* vs_TEXCOORD0 = OpVariable Input 
                                              %22 = OpTypeVector %6 2 
                                              %26 = OpTypeInt 32 0 
                                          u32 %27 = OpConstant 0 
                                              %29 = OpTypePointer Private %6 
                                              %31 = OpTypeVector %6 3 
                                              %32 = OpTypePointer Private %31 
                               Private f32_3* %33 = OpVariable Private 
                                          u32 %34 = OpConstant 4 
                                              %35 = OpTypeArray %7 %34 
                                          u32 %36 = OpConstant 16 
                                              %37 = OpTypeArray %7 %36 
                                              %38 = OpTypeStruct %7 %7 %35 %37 %7 %7 
                                              %39 = OpTypePointer Uniform %38 
Uniform struct {f32_4; f32_4; f32_4[4]; f32_4[16]; f32_4; f32_4;}* %40 = OpVariable Uniform 
                                              %41 = OpTypeInt 32 1 
                                          i32 %42 = OpConstant 0 
                                              %43 = OpTypePointer Uniform %6 
                                          u32 %49 = OpConstant 1 
                                          f32 %54 = OpConstant 3.674022E-40 
                                 Private f32* %59 = OpVariable Private 
                                          i32 %66 = OpConstant 1 
                                          u32 %67 = OpConstant 3 
                               Private f32_4* %81 = OpVariable Private 
                                              %82 = OpTypePointer Input %31 
                        Input f32_3* vs_TEXCOORD2 = OpVariable Input 
                        Input f32_3* vs_TEXCOORD3 = OpVariable Input 
                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                                             %117 = OpTypePointer Uniform %7 
                                         i32 %131 = OpConstant 2 
                                         i32 %150 = OpConstant 3 
                                         i32 %197 = OpConstant 5 
                                         f32 %202 = OpConstant 3.674022E-40 
                                       f32_2 %203 = OpConstantComposite %202 %202 
                                             %224 = OpTypePointer Private %22 
                              Private f32_2* %225 = OpVariable Private 
                                       f32_2 %229 = OpConstantComposite %54 %54 
                              Private f32_4* %231 = OpVariable Private 
                                         f32 %234 = OpConstant 3.674022E-40 
                                       f32_2 %235 = OpConstantComposite %234 %234 
                                         f32 %248 = OpConstant 3.674022E-40 
                                       f32_2 %249 = OpConstantComposite %248 %248 
                                         f32 %252 = OpConstant 3.674022E-40 
                                       f32_2 %253 = OpConstantComposite %252 %252 
                              Private f32_4* %257 = OpVariable Private 
                              Private f32_4* %264 = OpVariable Private 
                                       f32_4 %267 = OpConstantComposite %202 %54 %202 %54 
                              Private f32_4* %283 = OpVariable Private 
                                         u32 %287 = OpConstant 2 
                              Private f32_4* %289 = OpVariable Private 
                                         f32 %303 = OpConstant 3.674022E-40 
                                       f32_2 %304 = OpConstantComposite %303 %303 
                                         f32 %321 = OpConstant 3.674022E-40 
                                       f32_2 %322 = OpConstantComposite %321 %252 
                                         f32 %324 = OpConstant 3.674022E-40 
                                       f32_2 %325 = OpConstantComposite %324 %252 
                                       f32_2 %332 = OpConstantComposite %252 %324 
                                         f32 %343 = OpConstant 3.674022E-40 
                                         f32 %344 = OpConstant 3.674022E-40 
                                         f32 %345 = OpConstant 3.674022E-40 
                                       f32_4 %346 = OpConstantComposite %343 %344 %202 %345 
                              Private f32_4* %387 = OpVariable Private 
                                             %397 = OpTypePointer Function %31 
        UniformConstant read_only Texture2D* %406 = OpVariable UniformConstant 
                    UniformConstant sampler* %408 = OpVariable UniformConstant 
                                             %410 = OpTypeImage %6 Dim2D 1 0 0 1 Unknown 
                                             %411 = OpTypeSampledImage %410 
                                Private f32* %556 = OpVariable Private 
                                         i32 %920 = OpConstant 4 
                                             %926 = OpTypePointer Output %7 
                               Output f32_4* %927 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %398 = OpVariable Function 
                             Function f32_3* %417 = OpVariable Function 
                             Function f32_3* %474 = OpVariable Function 
                             Function f32_3* %488 = OpVariable Function 
                             Function f32_3* %533 = OpVariable Function 
                             Function f32_3* %548 = OpVariable Function 
                             Function f32_3* %607 = OpVariable Function 
                             Function f32_3* %621 = OpVariable Function 
                             Function f32_3* %666 = OpVariable Function 
                             Function f32_3* %681 = OpVariable Function 
                             Function f32_3* %747 = OpVariable Function 
                             Function f32_3* %761 = OpVariable Function 
                             Function f32_3* %828 = OpVariable Function 
                             Function f32_3* %843 = OpVariable Function 
                             Function f32_3* %858 = OpVariable Function 
                             Function f32_3* %872 = OpVariable Function 
                          read_only Texture2D %13 = OpLoad %12 
                                      sampler %17 = OpLoad %16 
                   read_only Texture2DSampled %19 = OpSampledImage %13 %17 
                                        f32_4 %23 = OpLoad vs_TEXCOORD0 
                                        f32_2 %24 = OpVectorShuffle %23 %23 0 1 
                                        f32_4 %25 = OpImageSampleImplicitLod %19 %24 
                                          f32 %28 = OpCompositeExtract %25 0 
                                 Private f32* %30 = OpAccessChain %9 %27 
                                                      OpStore %30 %28 
                                 Uniform f32* %44 = OpAccessChain %40 %42 %27 
                                          f32 %45 = OpLoad %44 
                                 Private f32* %46 = OpAccessChain %9 %27 
                                          f32 %47 = OpLoad %46 
                                          f32 %48 = OpFMul %45 %47 
                                 Uniform f32* %50 = OpAccessChain %40 %42 %49 
                                          f32 %51 = OpLoad %50 
                                          f32 %52 = OpFAdd %48 %51 
                                 Private f32* %53 = OpAccessChain %33 %27 
                                                      OpStore %53 %52 
                                 Private f32* %55 = OpAccessChain %33 %27 
                                          f32 %56 = OpLoad %55 
                                          f32 %57 = OpFDiv %54 %56 
                                 Private f32* %58 = OpAccessChain %33 %27 
                                                      OpStore %58 %57 
                                 Private f32* %60 = OpAccessChain %33 %27 
                                          f32 %61 = OpLoad %60 
                                          f32 %62 = OpFNegate %61 
                                 Private f32* %63 = OpAccessChain %9 %27 
                                          f32 %64 = OpLoad %63 
                                          f32 %65 = OpFAdd %62 %64 
                                                      OpStore %59 %65 
                                 Uniform f32* %68 = OpAccessChain %40 %66 %67 
                                          f32 %69 = OpLoad %68 
                                          f32 %70 = OpLoad %59 
                                          f32 %71 = OpFMul %69 %70 
                                 Private f32* %72 = OpAccessChain %33 %27 
                                          f32 %73 = OpLoad %72 
                                          f32 %74 = OpFAdd %71 %73 
                                 Private f32* %75 = OpAccessChain %33 %27 
                                                      OpStore %75 %74 
                                 Private f32* %76 = OpAccessChain %9 %27 
                                          f32 %77 = OpLoad %76 
                                          f32 %78 = OpFNegate %77 
                                          f32 %79 = OpFAdd %78 %54 
                                 Private f32* %80 = OpAccessChain %9 %27 
                                                      OpStore %80 %79 
                                        f32_3 %84 = OpLoad vs_TEXCOORD2 
                                        f32_3 %85 = OpFNegate %84 
                                        f32_3 %87 = OpLoad vs_TEXCOORD3 
                                        f32_3 %88 = OpFAdd %85 %87 
                                        f32_4 %89 = OpLoad %81 
                                        f32_4 %90 = OpVectorShuffle %89 %88 4 5 6 3 
                                                      OpStore %81 %90 
                                        f32_4 %91 = OpLoad %9 
                                        f32_3 %92 = OpVectorShuffle %91 %91 0 0 0 
                                        f32_4 %93 = OpLoad %81 
                                        f32_3 %94 = OpVectorShuffle %93 %93 0 1 2 
                                        f32_3 %95 = OpFMul %92 %94 
                                        f32_3 %96 = OpLoad vs_TEXCOORD2 
                                        f32_3 %97 = OpFAdd %95 %96 
                                        f32_4 %98 = OpLoad %9 
                                        f32_4 %99 = OpVectorShuffle %98 %97 4 1 5 6 
                                                      OpStore %9 %99 
                                       f32_3 %101 = OpLoad vs_TEXCOORD1 
                                       f32_3 %102 = OpFNegate %101 
                                       f32_3 %103 = OpLoad %33 
                                       f32_3 %104 = OpVectorShuffle %103 %103 0 0 0 
                                       f32_3 %105 = OpFMul %102 %104 
                                       f32_4 %106 = OpLoad %9 
                                       f32_3 %107 = OpVectorShuffle %106 %106 0 2 3 
                                       f32_3 %108 = OpFAdd %105 %107 
                                       f32_4 %109 = OpLoad %9 
                                       f32_4 %110 = OpVectorShuffle %109 %108 4 1 5 6 
                                                      OpStore %9 %110 
                                       f32_3 %111 = OpLoad %33 
                                       f32_3 %112 = OpVectorShuffle %111 %111 0 0 0 
                                       f32_3 %113 = OpLoad vs_TEXCOORD1 
                                       f32_3 %114 = OpFMul %112 %113 
                                       f32_4 %115 = OpLoad %81 
                                       f32_4 %116 = OpVectorShuffle %115 %114 4 5 6 3 
                                                      OpStore %81 %116 
                              Uniform f32_4* %118 = OpAccessChain %40 %66 
                                       f32_4 %119 = OpLoad %118 
                                       f32_3 %120 = OpVectorShuffle %119 %119 3 3 3 
                                       f32_4 %121 = OpLoad %9 
                                       f32_3 %122 = OpVectorShuffle %121 %121 0 2 3 
                                       f32_3 %123 = OpFMul %120 %122 
                                       f32_4 %124 = OpLoad %81 
                                       f32_3 %125 = OpVectorShuffle %124 %124 0 1 2 
                                       f32_3 %126 = OpFAdd %123 %125 
                                       f32_4 %127 = OpLoad %9 
                                       f32_4 %128 = OpVectorShuffle %127 %126 4 5 6 3 
                                                      OpStore %9 %128 
                                       f32_4 %129 = OpLoad %9 
                                       f32_4 %130 = OpVectorShuffle %129 %129 1 1 1 1 
                              Uniform f32_4* %132 = OpAccessChain %40 %131 %66 
                                       f32_4 %133 = OpLoad %132 
                                       f32_4 %134 = OpFMul %130 %133 
                                                      OpStore %81 %134 
                              Uniform f32_4* %135 = OpAccessChain %40 %131 %42 
                                       f32_4 %136 = OpLoad %135 
                                       f32_4 %137 = OpLoad %9 
                                       f32_4 %138 = OpVectorShuffle %137 %137 0 0 0 0 
                                       f32_4 %139 = OpFMul %136 %138 
                                       f32_4 %140 = OpLoad %81 
                                       f32_4 %141 = OpFAdd %139 %140 
                                                      OpStore %81 %141 
                              Uniform f32_4* %142 = OpAccessChain %40 %131 %131 
                                       f32_4 %143 = OpLoad %142 
                                       f32_4 %144 = OpLoad %9 
                                       f32_4 %145 = OpVectorShuffle %144 %144 2 2 2 2 
                                       f32_4 %146 = OpFMul %143 %145 
                                       f32_4 %147 = OpLoad %81 
                                       f32_4 %148 = OpFAdd %146 %147 
                                                      OpStore %9 %148 
                                       f32_4 %149 = OpLoad %9 
                              Uniform f32_4* %151 = OpAccessChain %40 %131 %150 
                                       f32_4 %152 = OpLoad %151 
                                       f32_4 %153 = OpFAdd %149 %152 
                                                      OpStore %9 %153 
                                       f32_4 %154 = OpLoad %9 
                                       f32_3 %155 = OpVectorShuffle %154 %154 1 1 1 
                              Uniform f32_4* %156 = OpAccessChain %40 %150 %66 
                                       f32_4 %157 = OpLoad %156 
                                       f32_3 %158 = OpVectorShuffle %157 %157 0 1 2 
                                       f32_3 %159 = OpFMul %155 %158 
                                       f32_4 %160 = OpLoad %81 
                                       f32_4 %161 = OpVectorShuffle %160 %159 4 5 6 3 
                                                      OpStore %81 %161 
                              Uniform f32_4* %162 = OpAccessChain %40 %150 %42 
                                       f32_4 %163 = OpLoad %162 
                                       f32_3 %164 = OpVectorShuffle %163 %163 0 1 2 
                                       f32_4 %165 = OpLoad %9 
                                       f32_3 %166 = OpVectorShuffle %165 %165 0 0 0 
                                       f32_3 %167 = OpFMul %164 %166 
                                       f32_4 %168 = OpLoad %81 
                                       f32_3 %169 = OpVectorShuffle %168 %168 0 1 2 
                                       f32_3 %170 = OpFAdd %167 %169 
                                       f32_4 %171 = OpLoad %81 
                                       f32_4 %172 = OpVectorShuffle %171 %170 4 5 6 3 
                                                      OpStore %81 %172 
                              Uniform f32_4* %173 = OpAccessChain %40 %150 %131 
                                       f32_4 %174 = OpLoad %173 
                                       f32_3 %175 = OpVectorShuffle %174 %174 0 1 2 
                                       f32_4 %176 = OpLoad %9 
                                       f32_3 %177 = OpVectorShuffle %176 %176 2 2 2 
                                       f32_3 %178 = OpFMul %175 %177 
                                       f32_4 %179 = OpLoad %81 
                                       f32_3 %180 = OpVectorShuffle %179 %179 0 1 2 
                                       f32_3 %181 = OpFAdd %178 %180 
                                       f32_4 %182 = OpLoad %9 
                                       f32_4 %183 = OpVectorShuffle %182 %181 4 5 6 3 
                                                      OpStore %9 %183 
                              Uniform f32_4* %184 = OpAccessChain %40 %150 %150 
                                       f32_4 %185 = OpLoad %184 
                                       f32_3 %186 = OpVectorShuffle %185 %185 0 1 2 
                                       f32_4 %187 = OpLoad %9 
                                       f32_3 %188 = OpVectorShuffle %187 %187 3 3 3 
                                       f32_3 %189 = OpFMul %186 %188 
                                       f32_4 %190 = OpLoad %9 
                                       f32_3 %191 = OpVectorShuffle %190 %190 0 1 2 
                                       f32_3 %192 = OpFAdd %189 %191 
                                       f32_4 %193 = OpLoad %9 
                                       f32_4 %194 = OpVectorShuffle %193 %192 4 5 6 3 
                                                      OpStore %9 %194 
                                       f32_4 %195 = OpLoad %9 
                                       f32_2 %196 = OpVectorShuffle %195 %195 0 1 
                              Uniform f32_4* %198 = OpAccessChain %40 %197 
                                       f32_4 %199 = OpLoad %198 
                                       f32_2 %200 = OpVectorShuffle %199 %199 2 3 
                                       f32_2 %201 = OpFMul %196 %200 
                                       f32_2 %204 = OpFAdd %201 %203 
                                       f32_4 %205 = OpLoad %81 
                                       f32_4 %206 = OpVectorShuffle %205 %204 4 5 2 3 
                                                      OpStore %81 %206 
                                       f32_4 %207 = OpLoad %81 
                                       f32_2 %208 = OpVectorShuffle %207 %207 0 1 
                                       f32_2 %209 = OpExtInst %1 8 %208 
                                       f32_4 %210 = OpLoad %81 
                                       f32_4 %211 = OpVectorShuffle %210 %209 4 5 2 3 
                                                      OpStore %81 %211 
                                       f32_4 %212 = OpLoad %9 
                                       f32_2 %213 = OpVectorShuffle %212 %212 0 1 
                              Uniform f32_4* %214 = OpAccessChain %40 %197 
                                       f32_4 %215 = OpLoad %214 
                                       f32_2 %216 = OpVectorShuffle %215 %215 2 3 
                                       f32_2 %217 = OpFMul %213 %216 
                                       f32_4 %218 = OpLoad %81 
                                       f32_2 %219 = OpVectorShuffle %218 %218 0 1 
                                       f32_2 %220 = OpFNegate %219 
                                       f32_2 %221 = OpFAdd %217 %220 
                                       f32_4 %222 = OpLoad %9 
                                       f32_4 %223 = OpVectorShuffle %222 %221 4 5 2 3 
                                                      OpStore %9 %223 
                                       f32_4 %226 = OpLoad %9 
                                       f32_2 %227 = OpVectorShuffle %226 %226 0 1 
                                       f32_2 %228 = OpFNegate %227 
                                       f32_2 %230 = OpFAdd %228 %229 
                                                      OpStore %225 %230 
                                       f32_4 %232 = OpLoad %9 
                                       f32_2 %233 = OpVectorShuffle %232 %232 0 1 
                                       f32_2 %236 = OpExtInst %1 37 %233 %235 
                                       f32_4 %237 = OpLoad %231 
                                       f32_4 %238 = OpVectorShuffle %237 %236 4 5 2 3 
                                                      OpStore %231 %238 
                                       f32_4 %239 = OpLoad %231 
                                       f32_2 %240 = OpVectorShuffle %239 %239 0 1 
                                       f32_2 %241 = OpFNegate %240 
                                       f32_4 %242 = OpLoad %231 
                                       f32_2 %243 = OpVectorShuffle %242 %242 0 1 
                                       f32_2 %244 = OpFMul %241 %243 
                                       f32_2 %245 = OpLoad %225 
                                       f32_2 %246 = OpFAdd %244 %245 
                                                      OpStore %225 %246 
                                       f32_2 %247 = OpLoad %225 
                                       f32_2 %250 = OpFAdd %247 %249 
                                                      OpStore %225 %250 
                                       f32_2 %251 = OpLoad %225 
                                       f32_2 %254 = OpFMul %251 %253 
                                       f32_4 %255 = OpLoad %231 
                                       f32_4 %256 = OpVectorShuffle %255 %254 4 5 2 3 
                                                      OpStore %231 %256 
                                Private f32* %258 = OpAccessChain %231 %27 
                                         f32 %259 = OpLoad %258 
                                Private f32* %260 = OpAccessChain %257 %49 
                                                      OpStore %260 %259 
                                       f32_4 %261 = OpLoad %9 
                                       f32_2 %262 = OpVectorShuffle %261 %261 0 1 
                                       f32_2 %263 = OpExtInst %1 40 %262 %235 
                                                      OpStore %225 %263 
                                       f32_4 %265 = OpLoad %9 
                                       f32_4 %266 = OpVectorShuffle %265 %265 0 0 1 1 
                                       f32_4 %268 = OpFAdd %266 %267 
                                                      OpStore %264 %268 
                                       f32_2 %269 = OpLoad %225 
                                       f32_2 %270 = OpFNegate %269 
                                       f32_2 %271 = OpLoad %225 
                                       f32_2 %272 = OpFMul %270 %271 
                                       f32_4 %273 = OpLoad %264 
                                       f32_2 %274 = OpVectorShuffle %273 %273 1 3 
                                       f32_2 %275 = OpFAdd %272 %274 
                                                      OpStore %225 %275 
                                       f32_4 %276 = OpLoad %264 
                                       f32_4 %277 = OpVectorShuffle %276 %276 0 0 2 2 
                                       f32_4 %278 = OpLoad %264 
                                       f32_4 %279 = OpVectorShuffle %278 %278 0 0 2 2 
                                       f32_4 %280 = OpFMul %277 %279 
                                                      OpStore %264 %280 
                                       f32_2 %281 = OpLoad %225 
                                       f32_2 %282 = OpFAdd %281 %249 
                                                      OpStore %225 %282 
                                Private f32* %284 = OpAccessChain %225 %27 
                                         f32 %285 = OpLoad %284 
                                         f32 %286 = OpFMul %285 %252 
                                Private f32* %288 = OpAccessChain %283 %287 
                                                      OpStore %288 %286 
                                Private f32* %290 = OpAccessChain %225 %49 
                                         f32 %291 = OpLoad %290 
                                         f32 %292 = OpFMul %291 %252 
                                Private f32* %293 = OpAccessChain %289 %287 
                                                      OpStore %293 %292 
                                       f32_4 %294 = OpLoad %264 
                                       f32_2 %295 = OpVectorShuffle %294 %294 0 2 
                                       f32_2 %296 = OpFMul %295 %203 
                                       f32_4 %297 = OpLoad %9 
                                       f32_2 %298 = OpVectorShuffle %297 %297 0 1 
                                       f32_2 %299 = OpFNegate %298 
                                       f32_2 %300 = OpFAdd %296 %299 
                                                      OpStore %225 %300 
                                       f32_4 %301 = OpLoad %264 
                                       f32_2 %302 = OpVectorShuffle %301 %301 3 1 
                                       f32_2 %305 = OpFMul %302 %304 
                                       f32_4 %306 = OpLoad %257 
                                       f32_4 %307 = OpVectorShuffle %306 %305 0 1 4 5 
                                                      OpStore %257 %307 
                                       f32_2 %308 = OpLoad %225 
                                       f32_2 %309 = OpVectorShuffle %308 %308 1 0 
                                       f32_2 %310 = OpFMul %309 %253 
                                       f32_4 %311 = OpLoad %289 
                                       f32_4 %312 = OpVectorShuffle %311 %310 4 5 2 3 
                                                      OpStore %289 %312 
                                Private f32* %313 = OpAccessChain %289 %49 
                                         f32 %314 = OpLoad %313 
                                Private f32* %315 = OpAccessChain %283 %27 
                                                      OpStore %315 %314 
                                Private f32* %316 = OpAccessChain %257 %287 
                                         f32 %317 = OpLoad %316 
                                Private f32* %318 = OpAccessChain %231 %67 
                                                      OpStore %318 %317 
                                       f32_4 %319 = OpLoad %9 
                                       f32_2 %320 = OpVectorShuffle %319 %319 0 0 
                                       f32_2 %323 = OpFMul %320 %322 
                                       f32_2 %326 = OpFAdd %323 %325 
                                       f32_4 %327 = OpLoad %283 
                                       f32_4 %328 = OpVectorShuffle %327 %326 0 4 2 5 
                                                      OpStore %283 %328 
                                       f32_4 %329 = OpLoad %9 
                                       f32_2 %330 = OpVectorShuffle %329 %329 0 0 
                                       f32_2 %331 = OpFMul %330 %322 
                                       f32_2 %333 = OpFAdd %331 %332 
                                       f32_4 %334 = OpLoad %257 
                                       f32_4 %335 = OpVectorShuffle %334 %333 4 1 5 3 
                                                      OpStore %257 %335 
                                       f32_4 %336 = OpLoad %257 
                                       f32_4 %337 = OpLoad %283 
                                       f32_4 %338 = OpFAdd %336 %337 
                                                      OpStore %264 %338 
                                       f32_4 %339 = OpLoad %257 
                                       f32_4 %340 = OpLoad %264 
                                       f32_4 %341 = OpFDiv %339 %340 
                                                      OpStore %257 %341 
                                       f32_4 %342 = OpLoad %257 
                                       f32_4 %347 = OpFAdd %342 %346 
                                                      OpStore %257 %347 
                                       f32_4 %348 = OpLoad %257 
                                       f32_4 %349 = OpVectorShuffle %348 %348 3 0 1 2 
                              Uniform f32_4* %350 = OpAccessChain %40 %197 
                                       f32_4 %351 = OpLoad %350 
                                       f32_4 %352 = OpVectorShuffle %351 %351 0 0 0 0 
                                       f32_4 %353 = OpFMul %349 %352 
                                                      OpStore %257 %353 
                                       f32_4 %354 = OpLoad %257 
                                       f32_3 %355 = OpVectorShuffle %354 %354 1 2 3 
                                       f32_4 %356 = OpLoad %283 
                                       f32_4 %357 = OpVectorShuffle %356 %355 4 1 5 6 
                                                      OpStore %283 %357 
                                       f32_4 %358 = OpLoad %9 
                                       f32_2 %359 = OpVectorShuffle %358 %358 1 1 
                                       f32_2 %360 = OpFMul %359 %322 
                                       f32_2 %361 = OpFAdd %360 %325 
                                       f32_4 %362 = OpLoad %289 
                                       f32_4 %363 = OpVectorShuffle %362 %361 0 4 2 5 
                                                      OpStore %289 %363 
                                       f32_4 %364 = OpLoad %9 
                                       f32_2 %365 = OpVectorShuffle %364 %364 1 1 
                                       f32_2 %366 = OpFMul %365 %322 
                                       f32_2 %367 = OpFAdd %366 %332 
                                       f32_4 %368 = OpLoad %231 
                                       f32_4 %369 = OpVectorShuffle %368 %367 4 1 5 3 
                                                      OpStore %231 %369 
                                       f32_4 %370 = OpLoad %231 
                                       f32_4 %371 = OpLoad %289 
                                       f32_4 %372 = OpFAdd %370 %371 
                                                      OpStore %289 %372 
                                       f32_4 %373 = OpLoad %231 
                                       f32_4 %374 = OpLoad %289 
                                       f32_4 %375 = OpFDiv %373 %374 
                                                      OpStore %231 %375 
                                       f32_4 %376 = OpLoad %231 
                                       f32_4 %377 = OpFAdd %376 %346 
                                                      OpStore %231 %377 
                                       f32_4 %378 = OpLoad %231 
                                       f32_4 %379 = OpVectorShuffle %378 %378 0 3 1 2 
                              Uniform f32_4* %380 = OpAccessChain %40 %197 
                                       f32_4 %381 = OpLoad %380 
                                       f32_4 %382 = OpVectorShuffle %381 %381 1 1 1 1 
                                       f32_4 %383 = OpFMul %379 %382 
                                                      OpStore %231 %383 
                                Private f32* %384 = OpAccessChain %231 %27 
                                         f32 %385 = OpLoad %384 
                                Private f32* %386 = OpAccessChain %283 %49 
                                                      OpStore %386 %385 
                                       f32_4 %388 = OpLoad %81 
                                       f32_4 %389 = OpVectorShuffle %388 %388 0 1 0 1 
                              Uniform f32_4* %390 = OpAccessChain %40 %197 
                                       f32_4 %391 = OpLoad %390 
                                       f32_4 %392 = OpVectorShuffle %391 %391 0 1 0 1 
                                       f32_4 %393 = OpFMul %389 %392 
                                       f32_4 %394 = OpLoad %283 
                                       f32_4 %395 = OpVectorShuffle %394 %394 0 1 2 1 
                                       f32_4 %396 = OpFAdd %393 %395 
                                                      OpStore %387 %396 
                                       f32_4 %399 = OpLoad %387 
                                       f32_2 %400 = OpVectorShuffle %399 %399 2 3 
                                Private f32* %401 = OpAccessChain %9 %287 
                                         f32 %402 = OpLoad %401 
                                         f32 %403 = OpCompositeExtract %400 0 
                                         f32 %404 = OpCompositeExtract %400 1 
                                       f32_3 %405 = OpCompositeConstruct %403 %404 %402 
                                                      OpStore %398 %405 
                         read_only Texture2D %407 = OpLoad %406 
                                     sampler %409 = OpLoad %408 
                  read_only Texture2DSampled %412 = OpSampledImage %407 %409 
                                       f32_3 %413 = OpLoad %398 
                                         f32 %414 = OpCompositeExtract %413 2 
                                         f32 %415 = OpImageSampleDrefExplicitLod %412 %413 %414 Lod %6 
                                Private f32* %416 = OpAccessChain %9 %27 
                                                      OpStore %416 %415 
                                       f32_4 %418 = OpLoad %387 
                                       f32_2 %419 = OpVectorShuffle %418 %418 0 1 
                                Private f32* %420 = OpAccessChain %9 %287 
                                         f32 %421 = OpLoad %420 
                                         f32 %422 = OpCompositeExtract %419 0 
                                         f32 %423 = OpCompositeExtract %419 1 
                                       f32_3 %424 = OpCompositeConstruct %422 %423 %421 
                                                      OpStore %417 %424 
                         read_only Texture2D %425 = OpLoad %406 
                                     sampler %426 = OpLoad %408 
                  read_only Texture2DSampled %427 = OpSampledImage %425 %426 
                                       f32_3 %428 = OpLoad %417 
                                         f32 %429 = OpCompositeExtract %428 2 
                                         f32 %430 = OpImageSampleDrefExplicitLod %427 %428 %429 Lod %6 
                                Private f32* %431 = OpAccessChain %33 %27 
                                                      OpStore %431 %430 
                                       f32_4 %432 = OpLoad %264 
                                       f32_4 %433 = OpLoad %289 
                                       f32_4 %434 = OpVectorShuffle %433 %433 0 0 0 0 
                                       f32_4 %435 = OpFMul %432 %434 
                                                      OpStore %387 %435 
                                Private f32* %436 = OpAccessChain %9 %27 
                                         f32 %437 = OpLoad %436 
                                Private f32* %438 = OpAccessChain %387 %49 
                                         f32 %439 = OpLoad %438 
                                         f32 %440 = OpFMul %437 %439 
                                Private f32* %441 = OpAccessChain %9 %27 
                                                      OpStore %441 %440 
                                Private f32* %442 = OpAccessChain %387 %27 
                                         f32 %443 = OpLoad %442 
                                Private f32* %444 = OpAccessChain %33 %27 
                                         f32 %445 = OpLoad %444 
                                         f32 %446 = OpFMul %443 %445 
                                Private f32* %447 = OpAccessChain %9 %27 
                                         f32 %448 = OpLoad %447 
                                         f32 %449 = OpFAdd %446 %448 
                                Private f32* %450 = OpAccessChain %9 %27 
                                                      OpStore %450 %449 
                                       f32_4 %451 = OpLoad %81 
                                       f32_2 %452 = OpVectorShuffle %451 %451 0 1 
                              Uniform f32_4* %453 = OpAccessChain %40 %197 
                                       f32_4 %454 = OpLoad %453 
                                       f32_2 %455 = OpVectorShuffle %454 %454 0 1 
                                       f32_2 %456 = OpFMul %452 %455 
                                       f32_4 %457 = OpLoad %283 
                                       f32_2 %458 = OpVectorShuffle %457 %457 3 1 
                                       f32_2 %459 = OpFAdd %456 %458 
                                       f32_3 %460 = OpLoad %33 
                                       f32_3 %461 = OpVectorShuffle %460 %459 3 1 4 
                                                      OpStore %33 %461 
                                Private f32* %462 = OpAccessChain %283 %49 
                                         f32 %463 = OpLoad %462 
                                Private f32* %464 = OpAccessChain %257 %49 
                                                      OpStore %464 %463 
                                       f32_4 %465 = OpLoad %81 
                                       f32_2 %466 = OpVectorShuffle %465 %465 0 1 
                              Uniform f32_4* %467 = OpAccessChain %40 %197 
                                       f32_4 %468 = OpLoad %467 
                                       f32_2 %469 = OpVectorShuffle %468 %468 0 1 
                                       f32_2 %470 = OpFMul %466 %469 
                                       f32_4 %471 = OpLoad %257 
                                       f32_2 %472 = OpVectorShuffle %471 %471 0 1 
                                       f32_2 %473 = OpFAdd %470 %472 
                                                      OpStore %225 %473 
                                       f32_2 %475 = OpLoad %225 
                                Private f32* %476 = OpAccessChain %9 %287 
                                         f32 %477 = OpLoad %476 
                                         f32 %478 = OpCompositeExtract %475 0 
                                         f32 %479 = OpCompositeExtract %475 1 
                                       f32_3 %480 = OpCompositeConstruct %478 %479 %477 
                                                      OpStore %474 %480 
                         read_only Texture2D %481 = OpLoad %406 
                                     sampler %482 = OpLoad %408 
                  read_only Texture2DSampled %483 = OpSampledImage %481 %482 
                                       f32_3 %484 = OpLoad %474 
                                         f32 %485 = OpCompositeExtract %484 2 
                                         f32 %486 = OpImageSampleDrefExplicitLod %483 %484 %485 Lod %6 
                                Private f32* %487 = OpAccessChain %225 %27 
                                                      OpStore %487 %486 
                                       f32_3 %489 = OpLoad %33 
                                       f32_2 %490 = OpVectorShuffle %489 %489 0 2 
                                Private f32* %491 = OpAccessChain %9 %287 
                                         f32 %492 = OpLoad %491 
                                         f32 %493 = OpCompositeExtract %490 0 
                                         f32 %494 = OpCompositeExtract %490 1 
                                       f32_3 %495 = OpCompositeConstruct %493 %494 %492 
                                                      OpStore %488 %495 
                         read_only Texture2D %496 = OpLoad %406 
                                     sampler %497 = OpLoad %408 
                  read_only Texture2DSampled %498 = OpSampledImage %496 %497 
                                       f32_3 %499 = OpLoad %488 
                                         f32 %500 = OpCompositeExtract %499 2 
                                         f32 %501 = OpImageSampleDrefExplicitLod %498 %499 %500 Lod %6 
                                Private f32* %502 = OpAccessChain %33 %27 
                                                      OpStore %502 %501 
                                Private f32* %503 = OpAccessChain %387 %287 
                                         f32 %504 = OpLoad %503 
                                Private f32* %505 = OpAccessChain %33 %27 
                                         f32 %506 = OpLoad %505 
                                         f32 %507 = OpFMul %504 %506 
                                Private f32* %508 = OpAccessChain %9 %27 
                                         f32 %509 = OpLoad %508 
                                         f32 %510 = OpFAdd %507 %509 
                                Private f32* %511 = OpAccessChain %9 %27 
                                                      OpStore %511 %510 
                                Private f32* %512 = OpAccessChain %387 %67 
                                         f32 %513 = OpLoad %512 
                                Private f32* %514 = OpAccessChain %225 %27 
                                         f32 %515 = OpLoad %514 
                                         f32 %516 = OpFMul %513 %515 
                                Private f32* %517 = OpAccessChain %9 %27 
                                         f32 %518 = OpLoad %517 
                                         f32 %519 = OpFAdd %516 %518 
                                Private f32* %520 = OpAccessChain %9 %27 
                                                      OpStore %520 %519 
                                Private f32* %521 = OpAccessChain %231 %287 
                                         f32 %522 = OpLoad %521 
                                Private f32* %523 = OpAccessChain %283 %49 
                                                      OpStore %523 %522 
                                       f32_4 %524 = OpLoad %81 
                                       f32_4 %525 = OpVectorShuffle %524 %524 0 1 0 1 
                              Uniform f32_4* %526 = OpAccessChain %40 %197 
                                       f32_4 %527 = OpLoad %526 
                                       f32_4 %528 = OpVectorShuffle %527 %527 0 1 0 1 
                                       f32_4 %529 = OpFMul %525 %528 
                                       f32_4 %530 = OpLoad %283 
                                       f32_4 %531 = OpVectorShuffle %530 %530 0 1 2 1 
                                       f32_4 %532 = OpFAdd %529 %531 
                                                      OpStore %387 %532 
                                       f32_4 %534 = OpLoad %387 
                                       f32_2 %535 = OpVectorShuffle %534 %534 0 1 
                                Private f32* %536 = OpAccessChain %9 %287 
                                         f32 %537 = OpLoad %536 
                                         f32 %538 = OpCompositeExtract %535 0 
                                         f32 %539 = OpCompositeExtract %535 1 
                                       f32_3 %540 = OpCompositeConstruct %538 %539 %537 
                                                      OpStore %533 %540 
                         read_only Texture2D %541 = OpLoad %406 
                                     sampler %542 = OpLoad %408 
                  read_only Texture2DSampled %543 = OpSampledImage %541 %542 
                                       f32_3 %544 = OpLoad %533 
                                         f32 %545 = OpCompositeExtract %544 2 
                                         f32 %546 = OpImageSampleDrefExplicitLod %543 %544 %545 Lod %6 
                                Private f32* %547 = OpAccessChain %33 %27 
                                                      OpStore %547 %546 
                                       f32_4 %549 = OpLoad %387 
                                       f32_2 %550 = OpVectorShuffle %549 %549 2 3 
                                Private f32* %551 = OpAccessChain %9 %287 
                                         f32 %552 = OpLoad %551 
                                         f32 %553 = OpCompositeExtract %550 0 
                                         f32 %554 = OpCompositeExtract %550 1 
                                       f32_3 %555 = OpCompositeConstruct %553 %554 %552 
                                                      OpStore %548 %555 
                         read_only Texture2D %557 = OpLoad %406 
                                     sampler %558 = OpLoad %408 
                  read_only Texture2DSampled %559 = OpSampledImage %557 %558 
                                       f32_3 %560 = OpLoad %548 
                                         f32 %561 = OpCompositeExtract %560 2 
                                         f32 %562 = OpImageSampleDrefExplicitLod %559 %560 %561 Lod %6 
                                                      OpStore %556 %562 
                                       f32_4 %563 = OpLoad %264 
                                       f32_4 %564 = OpLoad %289 
                                       f32_4 %565 = OpVectorShuffle %564 %564 1 1 1 1 
                                       f32_4 %566 = OpFMul %563 %565 
                                                      OpStore %387 %566 
                                Private f32* %567 = OpAccessChain %387 %27 
                                         f32 %568 = OpLoad %567 
                                Private f32* %569 = OpAccessChain %33 %27 
                                         f32 %570 = OpLoad %569 
                                         f32 %571 = OpFMul %568 %570 
                                Private f32* %572 = OpAccessChain %9 %27 
                                         f32 %573 = OpLoad %572 
                                         f32 %574 = OpFAdd %571 %573 
                                Private f32* %575 = OpAccessChain %9 %27 
                                                      OpStore %575 %574 
                                Private f32* %576 = OpAccessChain %387 %49 
                                         f32 %577 = OpLoad %576 
                                         f32 %578 = OpLoad %556 
                                         f32 %579 = OpFMul %577 %578 
                                Private f32* %580 = OpAccessChain %9 %27 
                                         f32 %581 = OpLoad %580 
                                         f32 %582 = OpFAdd %579 %581 
                                Private f32* %583 = OpAccessChain %9 %27 
                                                      OpStore %583 %582 
                                       f32_4 %584 = OpLoad %81 
                                       f32_2 %585 = OpVectorShuffle %584 %584 0 1 
                              Uniform f32_4* %586 = OpAccessChain %40 %197 
                                       f32_4 %587 = OpLoad %586 
                                       f32_2 %588 = OpVectorShuffle %587 %587 0 1 
                                       f32_2 %589 = OpFMul %585 %588 
                                       f32_4 %590 = OpLoad %283 
                                       f32_2 %591 = OpVectorShuffle %590 %590 3 1 
                                       f32_2 %592 = OpFAdd %589 %591 
                                       f32_3 %593 = OpLoad %33 
                                       f32_3 %594 = OpVectorShuffle %593 %592 3 1 4 
                                                      OpStore %33 %594 
                                Private f32* %595 = OpAccessChain %283 %49 
                                         f32 %596 = OpLoad %595 
                                Private f32* %597 = OpAccessChain %257 %287 
                                                      OpStore %597 %596 
                                       f32_4 %598 = OpLoad %81 
                                       f32_2 %599 = OpVectorShuffle %598 %598 0 1 
                              Uniform f32_4* %600 = OpAccessChain %40 %197 
                                       f32_4 %601 = OpLoad %600 
                                       f32_2 %602 = OpVectorShuffle %601 %601 0 1 
                                       f32_2 %603 = OpFMul %599 %602 
                                       f32_4 %604 = OpLoad %257 
                                       f32_2 %605 = OpVectorShuffle %604 %604 0 2 
                                       f32_2 %606 = OpFAdd %603 %605 
                                                      OpStore %225 %606 
                                       f32_2 %608 = OpLoad %225 
                                Private f32* %609 = OpAccessChain %9 %287 
                                         f32 %610 = OpLoad %609 
                                         f32 %611 = OpCompositeExtract %608 0 
                                         f32 %612 = OpCompositeExtract %608 1 
                                       f32_3 %613 = OpCompositeConstruct %611 %612 %610 
                                                      OpStore %607 %613 
                         read_only Texture2D %614 = OpLoad %406 
                                     sampler %615 = OpLoad %408 
                  read_only Texture2DSampled %616 = OpSampledImage %614 %615 
                                       f32_3 %617 = OpLoad %607 
                                         f32 %618 = OpCompositeExtract %617 2 
                                         f32 %619 = OpImageSampleDrefExplicitLod %616 %617 %618 Lod %6 
                                Private f32* %620 = OpAccessChain %225 %27 
                                                      OpStore %620 %619 
                                       f32_3 %622 = OpLoad %33 
                                       f32_2 %623 = OpVectorShuffle %622 %622 0 2 
                                Private f32* %624 = OpAccessChain %9 %287 
                                         f32 %625 = OpLoad %624 
                                         f32 %626 = OpCompositeExtract %623 0 
                                         f32 %627 = OpCompositeExtract %623 1 
                                       f32_3 %628 = OpCompositeConstruct %626 %627 %625 
                                                      OpStore %621 %628 
                         read_only Texture2D %629 = OpLoad %406 
                                     sampler %630 = OpLoad %408 
                  read_only Texture2DSampled %631 = OpSampledImage %629 %630 
                                       f32_3 %632 = OpLoad %621 
                                         f32 %633 = OpCompositeExtract %632 2 
                                         f32 %634 = OpImageSampleDrefExplicitLod %631 %632 %633 Lod %6 
                                Private f32* %635 = OpAccessChain %33 %27 
                                                      OpStore %635 %634 
                                Private f32* %636 = OpAccessChain %387 %287 
                                         f32 %637 = OpLoad %636 
                                Private f32* %638 = OpAccessChain %33 %27 
                                         f32 %639 = OpLoad %638 
                                         f32 %640 = OpFMul %637 %639 
                                Private f32* %641 = OpAccessChain %9 %27 
                                         f32 %642 = OpLoad %641 
                                         f32 %643 = OpFAdd %640 %642 
                                Private f32* %644 = OpAccessChain %9 %27 
                                                      OpStore %644 %643 
                                Private f32* %645 = OpAccessChain %387 %67 
                                         f32 %646 = OpLoad %645 
                                Private f32* %647 = OpAccessChain %225 %27 
                                         f32 %648 = OpLoad %647 
                                         f32 %649 = OpFMul %646 %648 
                                Private f32* %650 = OpAccessChain %9 %27 
                                         f32 %651 = OpLoad %650 
                                         f32 %652 = OpFAdd %649 %651 
                                Private f32* %653 = OpAccessChain %9 %27 
                                                      OpStore %653 %652 
                                Private f32* %654 = OpAccessChain %231 %67 
                                         f32 %655 = OpLoad %654 
                                Private f32* %656 = OpAccessChain %283 %49 
                                                      OpStore %656 %655 
                                       f32_4 %657 = OpLoad %81 
                                       f32_4 %658 = OpVectorShuffle %657 %657 0 1 0 1 
                              Uniform f32_4* %659 = OpAccessChain %40 %197 
                                       f32_4 %660 = OpLoad %659 
                                       f32_4 %661 = OpVectorShuffle %660 %660 0 1 0 1 
                                       f32_4 %662 = OpFMul %658 %661 
                                       f32_4 %663 = OpLoad %283 
                                       f32_4 %664 = OpVectorShuffle %663 %663 0 1 2 1 
                                       f32_4 %665 = OpFAdd %662 %664 
                                                      OpStore %387 %665 
                                       f32_4 %667 = OpLoad %387 
                                       f32_2 %668 = OpVectorShuffle %667 %667 0 1 
                                Private f32* %669 = OpAccessChain %9 %287 
                                         f32 %670 = OpLoad %669 
                                         f32 %671 = OpCompositeExtract %668 0 
                                         f32 %672 = OpCompositeExtract %668 1 
                                       f32_3 %673 = OpCompositeConstruct %671 %672 %670 
                                                      OpStore %666 %673 
                         read_only Texture2D %674 = OpLoad %406 
                                     sampler %675 = OpLoad %408 
                  read_only Texture2DSampled %676 = OpSampledImage %674 %675 
                                       f32_3 %677 = OpLoad %666 
                                         f32 %678 = OpCompositeExtract %677 2 
                                         f32 %679 = OpImageSampleDrefExplicitLod %676 %677 %678 Lod %6 
                                Private f32* %680 = OpAccessChain %33 %27 
                                                      OpStore %680 %679 
                                       f32_4 %682 = OpLoad %387 
                                       f32_2 %683 = OpVectorShuffle %682 %682 2 3 
                                Private f32* %684 = OpAccessChain %9 %287 
                                         f32 %685 = OpLoad %684 
                                         f32 %686 = OpCompositeExtract %683 0 
                                         f32 %687 = OpCompositeExtract %683 1 
                                       f32_3 %688 = OpCompositeConstruct %686 %687 %685 
                                                      OpStore %681 %688 
                         read_only Texture2D %689 = OpLoad %406 
                                     sampler %690 = OpLoad %408 
                  read_only Texture2DSampled %691 = OpSampledImage %689 %690 
                                       f32_3 %692 = OpLoad %681 
                                         f32 %693 = OpCompositeExtract %692 2 
                                         f32 %694 = OpImageSampleDrefExplicitLod %691 %692 %693 Lod %6 
                                                      OpStore %556 %694 
                                       f32_4 %695 = OpLoad %264 
                                       f32_4 %696 = OpLoad %289 
                                       f32_4 %697 = OpVectorShuffle %696 %696 2 2 2 2 
                                       f32_4 %698 = OpFMul %695 %697 
                                                      OpStore %387 %698 
                                       f32_4 %699 = OpLoad %264 
                                       f32_4 %700 = OpLoad %289 
                                       f32_4 %701 = OpVectorShuffle %700 %700 3 3 3 3 
                                       f32_4 %702 = OpFMul %699 %701 
                                                      OpStore %264 %702 
                                Private f32* %703 = OpAccessChain %387 %27 
                                         f32 %704 = OpLoad %703 
                                Private f32* %705 = OpAccessChain %33 %27 
                                         f32 %706 = OpLoad %705 
                                         f32 %707 = OpFMul %704 %706 
                                Private f32* %708 = OpAccessChain %9 %27 
                                         f32 %709 = OpLoad %708 
                                         f32 %710 = OpFAdd %707 %709 
                                Private f32* %711 = OpAccessChain %9 %27 
                                                      OpStore %711 %710 
                                Private f32* %712 = OpAccessChain %387 %49 
                                         f32 %713 = OpLoad %712 
                                         f32 %714 = OpLoad %556 
                                         f32 %715 = OpFMul %713 %714 
                                Private f32* %716 = OpAccessChain %9 %27 
                                         f32 %717 = OpLoad %716 
                                         f32 %718 = OpFAdd %715 %717 
                                Private f32* %719 = OpAccessChain %9 %27 
                                                      OpStore %719 %718 
                                       f32_4 %720 = OpLoad %81 
                                       f32_2 %721 = OpVectorShuffle %720 %720 0 1 
                              Uniform f32_4* %722 = OpAccessChain %40 %197 
                                       f32_4 %723 = OpLoad %722 
                                       f32_2 %724 = OpVectorShuffle %723 %723 0 1 
                                       f32_2 %725 = OpFMul %721 %724 
                                       f32_4 %726 = OpLoad %283 
                                       f32_2 %727 = OpVectorShuffle %726 %726 3 1 
                                       f32_2 %728 = OpFAdd %725 %727 
                                       f32_3 %729 = OpLoad %33 
                                       f32_3 %730 = OpVectorShuffle %729 %728 3 1 4 
                                                      OpStore %33 %730 
                                       f32_4 %731 = OpLoad %283 
                                       f32_3 %732 = OpVectorShuffle %731 %731 0 2 3 
                                       f32_4 %733 = OpLoad %231 
                                       f32_4 %734 = OpVectorShuffle %733 %732 4 1 5 6 
                                                      OpStore %231 %734 
                                Private f32* %735 = OpAccessChain %283 %49 
                                         f32 %736 = OpLoad %735 
                                Private f32* %737 = OpAccessChain %257 %67 
                                                      OpStore %737 %736 
                                       f32_4 %738 = OpLoad %81 
                                       f32_2 %739 = OpVectorShuffle %738 %738 0 1 
                              Uniform f32_4* %740 = OpAccessChain %40 %197 
                                       f32_4 %741 = OpLoad %740 
                                       f32_2 %742 = OpVectorShuffle %741 %741 0 1 
                                       f32_2 %743 = OpFMul %739 %742 
                                       f32_4 %744 = OpLoad %257 
                                       f32_2 %745 = OpVectorShuffle %744 %744 0 3 
                                       f32_2 %746 = OpFAdd %743 %745 
                                                      OpStore %225 %746 
                                       f32_2 %748 = OpLoad %225 
                                Private f32* %749 = OpAccessChain %9 %287 
                                         f32 %750 = OpLoad %749 
                                         f32 %751 = OpCompositeExtract %748 0 
                                         f32 %752 = OpCompositeExtract %748 1 
                                       f32_3 %753 = OpCompositeConstruct %751 %752 %750 
                                                      OpStore %747 %753 
                         read_only Texture2D %754 = OpLoad %406 
                                     sampler %755 = OpLoad %408 
                  read_only Texture2DSampled %756 = OpSampledImage %754 %755 
                                       f32_3 %757 = OpLoad %747 
                                         f32 %758 = OpCompositeExtract %757 2 
                                         f32 %759 = OpImageSampleDrefExplicitLod %756 %757 %758 Lod %6 
                                Private f32* %760 = OpAccessChain %225 %27 
                                                      OpStore %760 %759 
                                       f32_3 %762 = OpLoad %33 
                                       f32_2 %763 = OpVectorShuffle %762 %762 0 2 
                                Private f32* %764 = OpAccessChain %9 %287 
                                         f32 %765 = OpLoad %764 
                                         f32 %766 = OpCompositeExtract %763 0 
                                         f32 %767 = OpCompositeExtract %763 1 
                                       f32_3 %768 = OpCompositeConstruct %766 %767 %765 
                                                      OpStore %761 %768 
                         read_only Texture2D %769 = OpLoad %406 
                                     sampler %770 = OpLoad %408 
                  read_only Texture2DSampled %771 = OpSampledImage %769 %770 
                                       f32_3 %772 = OpLoad %761 
                                         f32 %773 = OpCompositeExtract %772 2 
                                         f32 %774 = OpImageSampleDrefExplicitLod %771 %772 %773 Lod %6 
                                Private f32* %775 = OpAccessChain %33 %27 
                                                      OpStore %775 %774 
                                Private f32* %776 = OpAccessChain %387 %287 
                                         f32 %777 = OpLoad %776 
                                Private f32* %778 = OpAccessChain %33 %27 
                                         f32 %779 = OpLoad %778 
                                         f32 %780 = OpFMul %777 %779 
                                Private f32* %781 = OpAccessChain %9 %27 
                                         f32 %782 = OpLoad %781 
                                         f32 %783 = OpFAdd %780 %782 
                                Private f32* %784 = OpAccessChain %9 %27 
                                                      OpStore %784 %783 
                                Private f32* %785 = OpAccessChain %387 %67 
                                         f32 %786 = OpLoad %785 
                                Private f32* %787 = OpAccessChain %225 %27 
                                         f32 %788 = OpLoad %787 
                                         f32 %789 = OpFMul %786 %788 
                                Private f32* %790 = OpAccessChain %9 %27 
                                         f32 %791 = OpLoad %790 
                                         f32 %792 = OpFAdd %789 %791 
                                Private f32* %793 = OpAccessChain %9 %27 
                                                      OpStore %793 %792 
                                       f32_4 %794 = OpLoad %81 
                                       f32_4 %795 = OpVectorShuffle %794 %794 0 1 0 1 
                              Uniform f32_4* %796 = OpAccessChain %40 %197 
                                       f32_4 %797 = OpLoad %796 
                                       f32_4 %798 = OpVectorShuffle %797 %797 0 1 0 1 
                                       f32_4 %799 = OpFMul %795 %798 
                                       f32_4 %800 = OpLoad %231 
                                       f32_4 %801 = OpVectorShuffle %800 %800 0 1 2 1 
                                       f32_4 %802 = OpFAdd %799 %801 
                                                      OpStore %283 %802 
                                       f32_4 %803 = OpLoad %81 
                                       f32_2 %804 = OpVectorShuffle %803 %803 0 1 
                              Uniform f32_4* %805 = OpAccessChain %40 %197 
                                       f32_4 %806 = OpLoad %805 
                                       f32_2 %807 = OpVectorShuffle %806 %806 0 1 
                                       f32_2 %808 = OpFMul %804 %807 
                                       f32_4 %809 = OpLoad %231 
                                       f32_2 %810 = OpVectorShuffle %809 %809 3 1 
                                       f32_2 %811 = OpFAdd %808 %810 
                                       f32_3 %812 = OpLoad %33 
                                       f32_3 %813 = OpVectorShuffle %812 %811 3 1 4 
                                                      OpStore %33 %813 
                                Private f32* %814 = OpAccessChain %231 %49 
                                         f32 %815 = OpLoad %814 
                                Private f32* %816 = OpAccessChain %257 %49 
                                                      OpStore %816 %815 
                                       f32_4 %817 = OpLoad %81 
                                       f32_2 %818 = OpVectorShuffle %817 %817 0 1 
                              Uniform f32_4* %819 = OpAccessChain %40 %197 
                                       f32_4 %820 = OpLoad %819 
                                       f32_2 %821 = OpVectorShuffle %820 %820 0 1 
                                       f32_2 %822 = OpFMul %818 %821 
                                       f32_4 %823 = OpLoad %257 
                                       f32_2 %824 = OpVectorShuffle %823 %823 0 1 
                                       f32_2 %825 = OpFAdd %822 %824 
                                       f32_4 %826 = OpLoad %81 
                                       f32_4 %827 = OpVectorShuffle %826 %825 4 5 2 3 
                                                      OpStore %81 %827 
                                       f32_4 %829 = OpLoad %81 
                                       f32_2 %830 = OpVectorShuffle %829 %829 0 1 
                                Private f32* %831 = OpAccessChain %9 %287 
                                         f32 %832 = OpLoad %831 
                                         f32 %833 = OpCompositeExtract %830 0 
                                         f32 %834 = OpCompositeExtract %830 1 
                                       f32_3 %835 = OpCompositeConstruct %833 %834 %832 
                                                      OpStore %828 %835 
                         read_only Texture2D %836 = OpLoad %406 
                                     sampler %837 = OpLoad %408 
                  read_only Texture2DSampled %838 = OpSampledImage %836 %837 
                                       f32_3 %839 = OpLoad %828 
                                         f32 %840 = OpCompositeExtract %839 2 
                                         f32 %841 = OpImageSampleDrefExplicitLod %838 %839 %840 Lod %6 
                                Private f32* %842 = OpAccessChain %81 %27 
                                                      OpStore %842 %841 
                                       f32_3 %844 = OpLoad %33 
                                       f32_2 %845 = OpVectorShuffle %844 %844 0 2 
                                Private f32* %846 = OpAccessChain %9 %287 
                                         f32 %847 = OpLoad %846 
                                         f32 %848 = OpCompositeExtract %845 0 
                                         f32 %849 = OpCompositeExtract %845 1 
                                       f32_3 %850 = OpCompositeConstruct %848 %849 %847 
                                                      OpStore %843 %850 
                         read_only Texture2D %851 = OpLoad %406 
                                     sampler %852 = OpLoad %408 
                  read_only Texture2DSampled %853 = OpSampledImage %851 %852 
                                       f32_3 %854 = OpLoad %843 
                                         f32 %855 = OpCompositeExtract %854 2 
                                         f32 %856 = OpImageSampleDrefExplicitLod %853 %854 %855 Lod %6 
                                Private f32* %857 = OpAccessChain %33 %27 
                                                      OpStore %857 %856 
                                       f32_4 %859 = OpLoad %283 
                                       f32_2 %860 = OpVectorShuffle %859 %859 0 1 
                                Private f32* %861 = OpAccessChain %9 %287 
                                         f32 %862 = OpLoad %861 
                                         f32 %863 = OpCompositeExtract %860 0 
                                         f32 %864 = OpCompositeExtract %860 1 
                                       f32_3 %865 = OpCompositeConstruct %863 %864 %862 
                                                      OpStore %858 %865 
                         read_only Texture2D %866 = OpLoad %406 
                                     sampler %867 = OpLoad %408 
                  read_only Texture2DSampled %868 = OpSampledImage %866 %867 
                                       f32_3 %869 = OpLoad %858 
                                         f32 %870 = OpCompositeExtract %869 2 
                                         f32 %871 = OpImageSampleDrefExplicitLod %868 %869 %870 Lod %6 
                                                      OpStore %556 %871 
                                       f32_4 %873 = OpLoad %283 
                                       f32_2 %874 = OpVectorShuffle %873 %873 2 3 
                                Private f32* %875 = OpAccessChain %9 %287 
                                         f32 %876 = OpLoad %875 
                                         f32 %877 = OpCompositeExtract %874 0 
                                         f32 %878 = OpCompositeExtract %874 1 
                                       f32_3 %879 = OpCompositeConstruct %877 %878 %876 
                                                      OpStore %872 %879 
                         read_only Texture2D %880 = OpLoad %406 
                                     sampler %881 = OpLoad %408 
                  read_only Texture2DSampled %882 = OpSampledImage %880 %881 
                                       f32_3 %883 = OpLoad %872 
                                         f32 %884 = OpCompositeExtract %883 2 
                                         f32 %885 = OpImageSampleDrefExplicitLod %882 %883 %884 Lod %6 
                                                      OpStore %59 %885 
                                Private f32* %886 = OpAccessChain %264 %27 
                                         f32 %887 = OpLoad %886 
                                         f32 %888 = OpLoad %556 
                                         f32 %889 = OpFMul %887 %888 
                                Private f32* %890 = OpAccessChain %9 %27 
                                         f32 %891 = OpLoad %890 
                                         f32 %892 = OpFAdd %889 %891 
                                Private f32* %893 = OpAccessChain %9 %27 
                                                      OpStore %893 %892 
                                Private f32* %894 = OpAccessChain %264 %49 
                                         f32 %895 = OpLoad %894 
                                         f32 %896 = OpLoad %59 
                                         f32 %897 = OpFMul %895 %896 
                                Private f32* %898 = OpAccessChain %9 %27 
                                         f32 %899 = OpLoad %898 
                                         f32 %900 = OpFAdd %897 %899 
                                Private f32* %901 = OpAccessChain %9 %27 
                                                      OpStore %901 %900 
                                Private f32* %902 = OpAccessChain %264 %287 
                                         f32 %903 = OpLoad %902 
                                Private f32* %904 = OpAccessChain %33 %27 
                                         f32 %905 = OpLoad %904 
                                         f32 %906 = OpFMul %903 %905 
                                Private f32* %907 = OpAccessChain %9 %27 
                                         f32 %908 = OpLoad %907 
                                         f32 %909 = OpFAdd %906 %908 
                                Private f32* %910 = OpAccessChain %9 %27 
                                                      OpStore %910 %909 
                                Private f32* %911 = OpAccessChain %264 %67 
                                         f32 %912 = OpLoad %911 
                                Private f32* %913 = OpAccessChain %81 %27 
                                         f32 %914 = OpLoad %913 
                                         f32 %915 = OpFMul %912 %914 
                                Private f32* %916 = OpAccessChain %9 %27 
                                         f32 %917 = OpLoad %916 
                                         f32 %918 = OpFAdd %915 %917 
                                Private f32* %919 = OpAccessChain %9 %27 
                                                      OpStore %919 %918 
                                Uniform f32* %921 = OpAccessChain %40 %920 %27 
                                         f32 %922 = OpLoad %921 
                                         f32 %923 = OpFNegate %922 
                                         f32 %924 = OpFAdd %923 %54 
                                Private f32* %925 = OpAccessChain %33 %27 
                                                      OpStore %925 %924 
                                       f32_4 %928 = OpLoad %9 
                                       f32_4 %929 = OpVectorShuffle %928 %928 0 0 0 0 
                                       f32_3 %930 = OpLoad %33 
                                       f32_4 %931 = OpVectorShuffle %930 %930 0 0 0 0 
                                       f32_4 %932 = OpFMul %929 %931 
                              Uniform f32_4* %933 = OpAccessChain %40 %920 
                                       f32_4 %934 = OpLoad %933 
                                       f32_4 %935 = OpVectorShuffle %934 %934 0 0 0 0 
                                       f32_4 %936 = OpFAdd %932 %935 
                                                      OpStore %927 %936 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "SHADOWS_SINGLE_CASCADE" "SHADOWS_SPLIT_SPHERES" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "SHADOWS_SINGLE_CASCADE" "SHADOWS_SPLIT_SPHERES" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraInvProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in  vec4 in_POSITION0;
in  vec2 in_TEXCOORD0;
in  vec3 in_TEXCOORD1;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_CameraInvProjection[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_CameraInvProjection[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    vs_TEXCOORD0.zw = u_xlat1.zz + u_xlat1.xw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = in_TEXCOORD1.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-hlslcc_mtx4x4unity_CameraInvProjection[2].xyz);
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[2].xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;
    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;
    u_xlat1.w = (-u_xlat1.z);
    vs_TEXCOORD2.xyz = u_xlat1.xyw;
    u_xlat0.w = (-u_xlat0.z);
    vs_TEXCOORD3.xyz = u_xlat0.xyw;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	vec4 _LightShadowData;
uniform 	vec4 _ShadowMapTexture_TexelSize;
UNITY_LOCATION(0) uniform  sampler2D _CameraDepthTexture;
UNITY_LOCATION(1) uniform  sampler2D _ShadowMapTexture;
UNITY_LOCATION(2) uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec3 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD3;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
vec4 u_xlat6;
vec4 u_xlat7;
vec3 u_xlat8;
float u_xlat16;
vec2 u_xlat17;
float u_xlat24;
void main()
{
    u_xlat0 = texture(_CameraDepthTexture, vs_TEXCOORD0.xy);
    u_xlat8.x = _ZBufferParams.x * u_xlat0.x + _ZBufferParams.y;
    u_xlat8.x = float(1.0) / u_xlat8.x;
    u_xlat16 = (-u_xlat8.x) + u_xlat0.x;
    u_xlat8.x = unity_OrthoParams.w * u_xlat16 + u_xlat8.x;
    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + vs_TEXCOORD3.xyz;
    u_xlat0.xzw = u_xlat0.xxx * u_xlat1.xyz + vs_TEXCOORD2.xyz;
    u_xlat0.xzw = (-vs_TEXCOORD1.xyz) * u_xlat8.xxx + u_xlat0.xzw;
    u_xlat1.xyz = u_xlat8.xxx * vs_TEXCOORD1.xyz;
    u_xlat0.xyz = unity_OrthoParams.www * u_xlat0.xzw + u_xlat1.xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_CameraToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_CameraToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_CameraToWorld[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_CameraToWorld[3];
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xy = u_xlat0.xy * _ShadowMapTexture_TexelSize.zw + vec2(0.5, 0.5);
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlat0.xy = u_xlat0.xy * _ShadowMapTexture_TexelSize.zw + (-u_xlat1.xy);
    u_xlat17.xy = (-u_xlat0.xy) + vec2(1.0, 1.0);
    u_xlat2.xy = min(u_xlat0.xy, vec2(0.0, 0.0));
    u_xlat17.xy = (-u_xlat2.xy) * u_xlat2.xy + u_xlat17.xy;
    u_xlat17.xy = u_xlat17.xy + vec2(2.0, 2.0);
    u_xlat2.xy = u_xlat17.xy * vec2(0.0816320032, 0.0816320032);
    u_xlat3.y = u_xlat2.x;
    u_xlat17.xy = max(u_xlat0.xy, vec2(0.0, 0.0));
    u_xlat4 = u_xlat0.xxyy + vec4(0.5, 1.0, 0.5, 1.0);
    u_xlat17.xy = (-u_xlat17.xy) * u_xlat17.xy + u_xlat4.yw;
    u_xlat4 = u_xlat4.xxzz * u_xlat4.xxzz;
    u_xlat17.xy = u_xlat17.xy + vec2(2.0, 2.0);
    u_xlat5.z = u_xlat17.x * 0.0816320032;
    u_xlat6.z = u_xlat17.y * 0.0816320032;
    u_xlat17.xy = u_xlat4.xz * vec2(0.5, 0.5) + (-u_xlat0.xy);
    u_xlat3.zw = u_xlat4.wy * vec2(0.0408160016, 0.0408160016);
    u_xlat6.xy = u_xlat17.yx * vec2(0.0816320032, 0.0816320032);
    u_xlat5.x = u_xlat6.y;
    u_xlat2.w = u_xlat3.z;
    u_xlat5.yw = u_xlat0.xx * vec2(-0.0816320032, 0.0816320032) + vec2(0.163264006, 0.0816320032);
    u_xlat3.xz = u_xlat0.xx * vec2(-0.0816320032, 0.0816320032) + vec2(0.0816320032, 0.163264006);
    u_xlat4 = u_xlat3 + u_xlat5;
    u_xlat3 = u_xlat3 / u_xlat4;
    u_xlat3 = u_xlat3 + vec4(-3.5, -1.5, 0.5, 2.5);
    u_xlat3 = u_xlat3.wxyz * _ShadowMapTexture_TexelSize.xxxx;
    u_xlat5.xzw = u_xlat3.yzw;
    u_xlat6.yw = u_xlat0.yy * vec2(-0.0816320032, 0.0816320032) + vec2(0.163264006, 0.0816320032);
    u_xlat2.xz = u_xlat0.yy * vec2(-0.0816320032, 0.0816320032) + vec2(0.0816320032, 0.163264006);
    u_xlat6 = u_xlat2 + u_xlat6;
    u_xlat2 = u_xlat2 / u_xlat6;
    u_xlat2 = u_xlat2 + vec4(-3.5, -1.5, 0.5, 2.5);
    u_xlat2 = u_xlat2.xwyz * _ShadowMapTexture_TexelSize.yyyy;
    u_xlat5.y = u_xlat2.x;
    u_xlat7 = u_xlat1.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat5.xyzy;
    vec3 txVec0 = vec3(u_xlat7.zw,u_xlat0.z);
    u_xlat0.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
    vec3 txVec1 = vec3(u_xlat7.xy,u_xlat0.z);
    u_xlat8.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec1, 0.0);
    u_xlat7 = u_xlat4 * u_xlat6.xxxx;
    u_xlat0.x = u_xlat0.x * u_xlat7.y;
    u_xlat0.x = u_xlat7.x * u_xlat8.x + u_xlat0.x;
    u_xlat8.xz = u_xlat1.xy * _ShadowMapTexture_TexelSize.xy + u_xlat5.wy;
    u_xlat3.y = u_xlat5.y;
    u_xlat17.xy = u_xlat1.xy * _ShadowMapTexture_TexelSize.xy + u_xlat3.xy;
    vec3 txVec2 = vec3(u_xlat17.xy,u_xlat0.z);
    u_xlat17.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec2, 0.0);
    vec3 txVec3 = vec3(u_xlat8.xz,u_xlat0.z);
    u_xlat8.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec3, 0.0);
    u_xlat0.x = u_xlat7.z * u_xlat8.x + u_xlat0.x;
    u_xlat0.x = u_xlat7.w * u_xlat17.x + u_xlat0.x;
    u_xlat5.y = u_xlat2.z;
    u_xlat7 = u_xlat1.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat5.xyzy;
    vec3 txVec4 = vec3(u_xlat7.xy,u_xlat0.z);
    u_xlat8.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec4, 0.0);
    vec3 txVec5 = vec3(u_xlat7.zw,u_xlat0.z);
    u_xlat24 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec5, 0.0);
    u_xlat7 = u_xlat4 * u_xlat6.yyyy;
    u_xlat0.x = u_xlat7.x * u_xlat8.x + u_xlat0.x;
    u_xlat0.x = u_xlat7.y * u_xlat24 + u_xlat0.x;
    u_xlat8.xz = u_xlat1.xy * _ShadowMapTexture_TexelSize.xy + u_xlat5.wy;
    u_xlat3.z = u_xlat5.y;
    u_xlat17.xy = u_xlat1.xy * _ShadowMapTexture_TexelSize.xy + u_xlat3.xz;
    vec3 txVec6 = vec3(u_xlat17.xy,u_xlat0.z);
    u_xlat17.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec6, 0.0);
    vec3 txVec7 = vec3(u_xlat8.xz,u_xlat0.z);
    u_xlat8.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec7, 0.0);
    u_xlat0.x = u_xlat7.z * u_xlat8.x + u_xlat0.x;
    u_xlat0.x = u_xlat7.w * u_xlat17.x + u_xlat0.x;
    u_xlat5.y = u_xlat2.w;
    u_xlat7 = u_xlat1.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat5.xyzy;
    vec3 txVec8 = vec3(u_xlat7.xy,u_xlat0.z);
    u_xlat8.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec8, 0.0);
    vec3 txVec9 = vec3(u_xlat7.zw,u_xlat0.z);
    u_xlat24 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec9, 0.0);
    u_xlat7 = u_xlat4 * u_xlat6.zzzz;
    u_xlat4 = u_xlat4 * u_xlat6.wwww;
    u_xlat0.x = u_xlat7.x * u_xlat8.x + u_xlat0.x;
    u_xlat0.x = u_xlat7.y * u_xlat24 + u_xlat0.x;
    u_xlat8.xz = u_xlat1.xy * _ShadowMapTexture_TexelSize.xy + u_xlat5.wy;
    u_xlat2.xzw = u_xlat5.xzw;
    u_xlat3.w = u_xlat5.y;
    u_xlat17.xy = u_xlat1.xy * _ShadowMapTexture_TexelSize.xy + u_xlat3.xw;
    vec3 txVec10 = vec3(u_xlat17.xy,u_xlat0.z);
    u_xlat17.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec10, 0.0);
    vec3 txVec11 = vec3(u_xlat8.xz,u_xlat0.z);
    u_xlat8.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec11, 0.0);
    u_xlat0.x = u_xlat7.z * u_xlat8.x + u_xlat0.x;
    u_xlat0.x = u_xlat7.w * u_xlat17.x + u_xlat0.x;
    u_xlat5 = u_xlat1.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat2.xyzy;
    u_xlat8.xz = u_xlat1.xy * _ShadowMapTexture_TexelSize.xy + u_xlat2.wy;
    u_xlat3.y = u_xlat2.y;
    u_xlat1.xy = u_xlat1.xy * _ShadowMapTexture_TexelSize.xy + u_xlat3.xy;
    vec3 txVec12 = vec3(u_xlat1.xy,u_xlat0.z);
    u_xlat1.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec12, 0.0);
    vec3 txVec13 = vec3(u_xlat8.xz,u_xlat0.z);
    u_xlat8.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec13, 0.0);
    vec3 txVec14 = vec3(u_xlat5.xy,u_xlat0.z);
    u_xlat24 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec14, 0.0);
    vec3 txVec15 = vec3(u_xlat5.zw,u_xlat0.z);
    u_xlat16 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec15, 0.0);
    u_xlat0.x = u_xlat4.x * u_xlat24 + u_xlat0.x;
    u_xlat0.x = u_xlat4.y * u_xlat16 + u_xlat0.x;
    u_xlat0.x = u_xlat4.z * u_xlat8.x + u_xlat0.x;
    u_xlat0.x = u_xlat4.w * u_xlat1.x + u_xlat0.x;
    u_xlat8.x = (-_LightShadowData.x) + 1.0;
    SV_Target0 = u_xlat0.xxxx * u_xlat8.xxxx + _LightShadowData.xxxx;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "SHADOWS_SINGLE_CASCADE" "SHADOWS_SPLIT_SPHERES" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 193
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %80 %119 %129 %134 %136 %177 %184 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpMemberDecorate %78 0 BuiltIn 78 
                                                      OpMemberDecorate %78 1 BuiltIn 78 
                                                      OpMemberDecorate %78 2 BuiltIn 78 
                                                      OpDecorate %78 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 119 
                                                      OpDecorate %129 Location 129 
                                                      OpDecorate vs_TEXCOORD1 Location 134 
                                                      OpDecorate %136 Location 136 
                                                      OpDecorate vs_TEXCOORD2 Location 177 
                                                      OpDecorate vs_TEXCOORD3 Location 184 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %16 %17 %18 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4];}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 2 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %29 = OpConstant 0 
                                          i32 %45 = OpConstant 3 
                               Private f32_4* %49 = OpVariable Private 
                                          u32 %76 = OpConstant 1 
                                              %77 = OpTypeArray %6 %76 
                                              %78 = OpTypeStruct %7 %6 %77 
                                              %79 = OpTypePointer Output %78 
         Output struct {f32_4; f32; f32[1];}* %80 = OpVariable Output 
                                              %82 = OpTypePointer Output %7 
                                              %84 = OpTypePointer Private %6 
                                          u32 %87 = OpConstant 0 
                                              %88 = OpTypePointer Uniform %6 
                                              %93 = OpTypeVector %6 3 
                                          f32 %96 = OpConstant 3.674022E-40 
                                        f32_3 %97 = OpConstantComposite %96 %96 %96 
                                             %101 = OpTypePointer Private %93 
                              Private f32_3* %102 = OpVariable Private 
                       Output f32_4* vs_TEXCOORD0 = OpVariable Output 
                                             %120 = OpTypeVector %6 2 
                                             %128 = OpTypePointer Input %120 
                                Input f32_2* %129 = OpVariable Input 
                                             %133 = OpTypePointer Output %93 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                                             %135 = OpTypePointer Input %93 
                                Input f32_3* %136 = OpVariable Input 
                                         u32 %171 = OpConstant 2 
                                         u32 %175 = OpConstant 3 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                       Output f32_3* vs_TEXCOORD3 = OpVariable Output 
                                             %187 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %30 = OpAccessChain %21 %23 %29 
                                        f32_4 %31 = OpLoad %30 
                                        f32_4 %32 = OpLoad %11 
                                        f32_4 %33 = OpVectorShuffle %32 %32 0 0 0 0 
                                        f32_4 %34 = OpFMul %31 %33 
                                        f32_4 %35 = OpLoad %9 
                                        f32_4 %36 = OpFAdd %34 %35 
                                                      OpStore %9 %36 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %23 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %44 = OpLoad %9 
                               Uniform f32_4* %46 = OpAccessChain %21 %23 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_4 %48 = OpFAdd %44 %47 
                                                      OpStore %9 %48 
                                        f32_4 %50 = OpLoad %9 
                                        f32_4 %51 = OpVectorShuffle %50 %50 1 1 1 1 
                               Uniform f32_4* %52 = OpAccessChain %21 %45 %24 
                                        f32_4 %53 = OpLoad %52 
                                        f32_4 %54 = OpFMul %51 %53 
                                                      OpStore %49 %54 
                               Uniform f32_4* %55 = OpAccessChain %21 %45 %29 
                                        f32_4 %56 = OpLoad %55 
                                        f32_4 %57 = OpLoad %9 
                                        f32_4 %58 = OpVectorShuffle %57 %57 0 0 0 0 
                                        f32_4 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %49 
                                        f32_4 %61 = OpFAdd %59 %60 
                                                      OpStore %49 %61 
                               Uniform f32_4* %62 = OpAccessChain %21 %45 %23 
                                        f32_4 %63 = OpLoad %62 
                                        f32_4 %64 = OpLoad %9 
                                        f32_4 %65 = OpVectorShuffle %64 %64 2 2 2 2 
                                        f32_4 %66 = OpFMul %63 %65 
                                        f32_4 %67 = OpLoad %49 
                                        f32_4 %68 = OpFAdd %66 %67 
                                                      OpStore %49 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %45 %45 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %9 
                                        f32_4 %72 = OpVectorShuffle %71 %71 3 3 3 3 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %49 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %9 %75 
                                        f32_4 %81 = OpLoad %9 
                                Output f32_4* %83 = OpAccessChain %80 %29 
                                                      OpStore %83 %81 
                                 Private f32* %85 = OpAccessChain %9 %76 
                                          f32 %86 = OpLoad %85 
                                 Uniform f32* %89 = OpAccessChain %21 %29 %87 
                                          f32 %90 = OpLoad %89 
                                          f32 %91 = OpFMul %86 %90 
                                 Private f32* %92 = OpAccessChain %9 %76 
                                                      OpStore %92 %91 
                                        f32_4 %94 = OpLoad %9 
                                        f32_3 %95 = OpVectorShuffle %94 %94 0 3 1 
                                        f32_3 %98 = OpFMul %95 %97 
                                        f32_4 %99 = OpLoad %49 
                                       f32_4 %100 = OpVectorShuffle %99 %98 4 1 5 6 
                                                      OpStore %49 %100 
                                       f32_4 %103 = OpLoad %9 
                                       f32_3 %104 = OpVectorShuffle %103 %103 1 1 1 
                              Uniform f32_4* %105 = OpAccessChain %21 %24 %24 
                                       f32_4 %106 = OpLoad %105 
                                       f32_3 %107 = OpVectorShuffle %106 %106 0 1 2 
                                       f32_3 %108 = OpFMul %104 %107 
                                                      OpStore %102 %108 
                              Uniform f32_4* %109 = OpAccessChain %21 %24 %29 
                                       f32_4 %110 = OpLoad %109 
                                       f32_3 %111 = OpVectorShuffle %110 %110 0 1 2 
                                       f32_4 %112 = OpLoad %9 
                                       f32_3 %113 = OpVectorShuffle %112 %112 0 0 0 
                                       f32_3 %114 = OpFMul %111 %113 
                                       f32_3 %115 = OpLoad %102 
                                       f32_3 %116 = OpFAdd %114 %115 
                                       f32_4 %117 = OpLoad %9 
                                       f32_4 %118 = OpVectorShuffle %117 %116 4 5 6 3 
                                                      OpStore %9 %118 
                                       f32_4 %121 = OpLoad %49 
                                       f32_2 %122 = OpVectorShuffle %121 %121 2 2 
                                       f32_4 %123 = OpLoad %49 
                                       f32_2 %124 = OpVectorShuffle %123 %123 0 3 
                                       f32_2 %125 = OpFAdd %122 %124 
                                       f32_4 %126 = OpLoad vs_TEXCOORD0 
                                       f32_4 %127 = OpVectorShuffle %126 %125 0 1 4 5 
                                                      OpStore vs_TEXCOORD0 %127 
                                       f32_2 %130 = OpLoad %129 
                                       f32_4 %131 = OpLoad vs_TEXCOORD0 
                                       f32_4 %132 = OpVectorShuffle %131 %130 4 5 2 3 
                                                      OpStore vs_TEXCOORD0 %132 
                                       f32_3 %137 = OpLoad %136 
                                                      OpStore vs_TEXCOORD1 %137 
                                       f32_4 %138 = OpLoad %9 
                                       f32_3 %139 = OpVectorShuffle %138 %138 0 1 2 
                              Uniform f32_4* %140 = OpAccessChain %21 %24 %23 
                                       f32_4 %141 = OpLoad %140 
                                       f32_3 %142 = OpVectorShuffle %141 %141 0 1 2 
                                       f32_3 %143 = OpFNegate %142 
                                       f32_3 %144 = OpFAdd %139 %143 
                                       f32_4 %145 = OpLoad %49 
                                       f32_4 %146 = OpVectorShuffle %145 %144 4 5 6 3 
                                                      OpStore %49 %146 
                                       f32_4 %147 = OpLoad %9 
                                       f32_3 %148 = OpVectorShuffle %147 %147 0 1 2 
                              Uniform f32_4* %149 = OpAccessChain %21 %24 %23 
                                       f32_4 %150 = OpLoad %149 
                                       f32_3 %151 = OpVectorShuffle %150 %150 0 1 2 
                                       f32_3 %152 = OpFAdd %148 %151 
                                       f32_4 %153 = OpLoad %9 
                                       f32_4 %154 = OpVectorShuffle %153 %152 4 5 6 3 
                                                      OpStore %9 %154 
                                       f32_4 %155 = OpLoad %9 
                                       f32_3 %156 = OpVectorShuffle %155 %155 0 1 2 
                              Uniform f32_4* %157 = OpAccessChain %21 %24 %45 
                                       f32_4 %158 = OpLoad %157 
                                       f32_3 %159 = OpVectorShuffle %158 %158 0 1 2 
                                       f32_3 %160 = OpFAdd %156 %159 
                                       f32_4 %161 = OpLoad %9 
                                       f32_4 %162 = OpVectorShuffle %161 %160 4 5 6 3 
                                                      OpStore %9 %162 
                                       f32_4 %163 = OpLoad %49 
                                       f32_3 %164 = OpVectorShuffle %163 %163 0 1 2 
                              Uniform f32_4* %165 = OpAccessChain %21 %24 %45 
                                       f32_4 %166 = OpLoad %165 
                                       f32_3 %167 = OpVectorShuffle %166 %166 0 1 2 
                                       f32_3 %168 = OpFAdd %164 %167 
                                       f32_4 %169 = OpLoad %49 
                                       f32_4 %170 = OpVectorShuffle %169 %168 4 5 6 3 
                                                      OpStore %49 %170 
                                Private f32* %172 = OpAccessChain %49 %171 
                                         f32 %173 = OpLoad %172 
                                         f32 %174 = OpFNegate %173 
                                Private f32* %176 = OpAccessChain %49 %175 
                                                      OpStore %176 %174 
                                       f32_4 %178 = OpLoad %49 
                                       f32_3 %179 = OpVectorShuffle %178 %178 0 1 3 
                                                      OpStore vs_TEXCOORD2 %179 
                                Private f32* %180 = OpAccessChain %9 %171 
                                         f32 %181 = OpLoad %180 
                                         f32 %182 = OpFNegate %181 
                                Private f32* %183 = OpAccessChain %9 %175 
                                                      OpStore %183 %182 
                                       f32_4 %185 = OpLoad %9 
                                       f32_3 %186 = OpVectorShuffle %185 %185 0 1 3 
                                                      OpStore vs_TEXCOORD3 %186 
                                 Output f32* %188 = OpAccessChain %80 %29 %76 
                                         f32 %189 = OpLoad %188 
                                         f32 %190 = OpFNegate %189 
                                 Output f32* %191 = OpAccessChain %80 %29 %76 
                                                      OpStore %191 %190 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 938
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %21 %83 %86 %100 %927 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpDecorate %12 DescriptorSet 12 
                                                      OpDecorate %12 Binding 12 
                                                      OpDecorate %16 DescriptorSet 16 
                                                      OpDecorate %16 Binding 16 
                                                      OpDecorate vs_TEXCOORD0 Location 21 
                                                      OpDecorate %35 ArrayStride 35 
                                                      OpDecorate %37 ArrayStride 37 
                                                      OpMemberDecorate %38 0 Offset 38 
                                                      OpMemberDecorate %38 1 Offset 38 
                                                      OpMemberDecorate %38 2 Offset 38 
                                                      OpMemberDecorate %38 3 Offset 38 
                                                      OpMemberDecorate %38 4 Offset 38 
                                                      OpMemberDecorate %38 5 Offset 38 
                                                      OpDecorate %38 Block 
                                                      OpDecorate %40 DescriptorSet 40 
                                                      OpDecorate %40 Binding 40 
                                                      OpDecorate vs_TEXCOORD2 Location 83 
                                                      OpDecorate vs_TEXCOORD3 Location 86 
                                                      OpDecorate vs_TEXCOORD1 Location 100 
                                                      OpDecorate %406 DescriptorSet 406 
                                                      OpDecorate %406 Binding 406 
                                                      OpDecorate %408 DescriptorSet 408 
                                                      OpDecorate %408 Binding 408 
                                                      OpDecorate %927 Location 927 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypePointer UniformConstant %10 
         UniformConstant read_only Texture2D* %12 = OpVariable UniformConstant 
                                              %14 = OpTypeSampler 
                                              %15 = OpTypePointer UniformConstant %14 
                     UniformConstant sampler* %16 = OpVariable UniformConstant 
                                              %18 = OpTypeSampledImage %10 
                                              %20 = OpTypePointer Input %7 
                        Input f32_4* vs_TEXCOORD0 = OpVariable Input 
                                              %22 = OpTypeVector %6 2 
                                              %26 = OpTypeInt 32 0 
                                          u32 %27 = OpConstant 0 
                                              %29 = OpTypePointer Private %6 
                                              %31 = OpTypeVector %6 3 
                                              %32 = OpTypePointer Private %31 
                               Private f32_3* %33 = OpVariable Private 
                                          u32 %34 = OpConstant 4 
                                              %35 = OpTypeArray %7 %34 
                                          u32 %36 = OpConstant 16 
                                              %37 = OpTypeArray %7 %36 
                                              %38 = OpTypeStruct %7 %7 %35 %37 %7 %7 
                                              %39 = OpTypePointer Uniform %38 
Uniform struct {f32_4; f32_4; f32_4[4]; f32_4[16]; f32_4; f32_4;}* %40 = OpVariable Uniform 
                                              %41 = OpTypeInt 32 1 
                                          i32 %42 = OpConstant 0 
                                              %43 = OpTypePointer Uniform %6 
                                          u32 %49 = OpConstant 1 
                                          f32 %54 = OpConstant 3.674022E-40 
                                 Private f32* %59 = OpVariable Private 
                                          i32 %66 = OpConstant 1 
                                          u32 %67 = OpConstant 3 
                               Private f32_4* %81 = OpVariable Private 
                                              %82 = OpTypePointer Input %31 
                        Input f32_3* vs_TEXCOORD2 = OpVariable Input 
                        Input f32_3* vs_TEXCOORD3 = OpVariable Input 
                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                                             %117 = OpTypePointer Uniform %7 
                                         i32 %131 = OpConstant 2 
                                         i32 %150 = OpConstant 3 
                                         i32 %197 = OpConstant 5 
                                         f32 %202 = OpConstant 3.674022E-40 
                                       f32_2 %203 = OpConstantComposite %202 %202 
                                             %224 = OpTypePointer Private %22 
                              Private f32_2* %225 = OpVariable Private 
                                       f32_2 %229 = OpConstantComposite %54 %54 
                              Private f32_4* %231 = OpVariable Private 
                                         f32 %234 = OpConstant 3.674022E-40 
                                       f32_2 %235 = OpConstantComposite %234 %234 
                                         f32 %248 = OpConstant 3.674022E-40 
                                       f32_2 %249 = OpConstantComposite %248 %248 
                                         f32 %252 = OpConstant 3.674022E-40 
                                       f32_2 %253 = OpConstantComposite %252 %252 
                              Private f32_4* %257 = OpVariable Private 
                              Private f32_4* %264 = OpVariable Private 
                                       f32_4 %267 = OpConstantComposite %202 %54 %202 %54 
                              Private f32_4* %283 = OpVariable Private 
                                         u32 %287 = OpConstant 2 
                              Private f32_4* %289 = OpVariable Private 
                                         f32 %303 = OpConstant 3.674022E-40 
                                       f32_2 %304 = OpConstantComposite %303 %303 
                                         f32 %321 = OpConstant 3.674022E-40 
                                       f32_2 %322 = OpConstantComposite %321 %252 
                                         f32 %324 = OpConstant 3.674022E-40 
                                       f32_2 %325 = OpConstantComposite %324 %252 
                                       f32_2 %332 = OpConstantComposite %252 %324 
                                         f32 %343 = OpConstant 3.674022E-40 
                                         f32 %344 = OpConstant 3.674022E-40 
                                         f32 %345 = OpConstant 3.674022E-40 
                                       f32_4 %346 = OpConstantComposite %343 %344 %202 %345 
                              Private f32_4* %387 = OpVariable Private 
                                             %397 = OpTypePointer Function %31 
        UniformConstant read_only Texture2D* %406 = OpVariable UniformConstant 
                    UniformConstant sampler* %408 = OpVariable UniformConstant 
                                             %410 = OpTypeImage %6 Dim2D 1 0 0 1 Unknown 
                                             %411 = OpTypeSampledImage %410 
                                Private f32* %556 = OpVariable Private 
                                         i32 %920 = OpConstant 4 
                                             %926 = OpTypePointer Output %7 
                               Output f32_4* %927 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %398 = OpVariable Function 
                             Function f32_3* %417 = OpVariable Function 
                             Function f32_3* %474 = OpVariable Function 
                             Function f32_3* %488 = OpVariable Function 
                             Function f32_3* %533 = OpVariable Function 
                             Function f32_3* %548 = OpVariable Function 
                             Function f32_3* %607 = OpVariable Function 
                             Function f32_3* %621 = OpVariable Function 
                             Function f32_3* %666 = OpVariable Function 
                             Function f32_3* %681 = OpVariable Function 
                             Function f32_3* %747 = OpVariable Function 
                             Function f32_3* %761 = OpVariable Function 
                             Function f32_3* %828 = OpVariable Function 
                             Function f32_3* %843 = OpVariable Function 
                             Function f32_3* %858 = OpVariable Function 
                             Function f32_3* %872 = OpVariable Function 
                          read_only Texture2D %13 = OpLoad %12 
                                      sampler %17 = OpLoad %16 
                   read_only Texture2DSampled %19 = OpSampledImage %13 %17 
                                        f32_4 %23 = OpLoad vs_TEXCOORD0 
                                        f32_2 %24 = OpVectorShuffle %23 %23 0 1 
                                        f32_4 %25 = OpImageSampleImplicitLod %19 %24 
                                          f32 %28 = OpCompositeExtract %25 0 
                                 Private f32* %30 = OpAccessChain %9 %27 
                                                      OpStore %30 %28 
                                 Uniform f32* %44 = OpAccessChain %40 %42 %27 
                                          f32 %45 = OpLoad %44 
                                 Private f32* %46 = OpAccessChain %9 %27 
                                          f32 %47 = OpLoad %46 
                                          f32 %48 = OpFMul %45 %47 
                                 Uniform f32* %50 = OpAccessChain %40 %42 %49 
                                          f32 %51 = OpLoad %50 
                                          f32 %52 = OpFAdd %48 %51 
                                 Private f32* %53 = OpAccessChain %33 %27 
                                                      OpStore %53 %52 
                                 Private f32* %55 = OpAccessChain %33 %27 
                                          f32 %56 = OpLoad %55 
                                          f32 %57 = OpFDiv %54 %56 
                                 Private f32* %58 = OpAccessChain %33 %27 
                                                      OpStore %58 %57 
                                 Private f32* %60 = OpAccessChain %33 %27 
                                          f32 %61 = OpLoad %60 
                                          f32 %62 = OpFNegate %61 
                                 Private f32* %63 = OpAccessChain %9 %27 
                                          f32 %64 = OpLoad %63 
                                          f32 %65 = OpFAdd %62 %64 
                                                      OpStore %59 %65 
                                 Uniform f32* %68 = OpAccessChain %40 %66 %67 
                                          f32 %69 = OpLoad %68 
                                          f32 %70 = OpLoad %59 
                                          f32 %71 = OpFMul %69 %70 
                                 Private f32* %72 = OpAccessChain %33 %27 
                                          f32 %73 = OpLoad %72 
                                          f32 %74 = OpFAdd %71 %73 
                                 Private f32* %75 = OpAccessChain %33 %27 
                                                      OpStore %75 %74 
                                 Private f32* %76 = OpAccessChain %9 %27 
                                          f32 %77 = OpLoad %76 
                                          f32 %78 = OpFNegate %77 
                                          f32 %79 = OpFAdd %78 %54 
                                 Private f32* %80 = OpAccessChain %9 %27 
                                                      OpStore %80 %79 
                                        f32_3 %84 = OpLoad vs_TEXCOORD2 
                                        f32_3 %85 = OpFNegate %84 
                                        f32_3 %87 = OpLoad vs_TEXCOORD3 
                                        f32_3 %88 = OpFAdd %85 %87 
                                        f32_4 %89 = OpLoad %81 
                                        f32_4 %90 = OpVectorShuffle %89 %88 4 5 6 3 
                                                      OpStore %81 %90 
                                        f32_4 %91 = OpLoad %9 
                                        f32_3 %92 = OpVectorShuffle %91 %91 0 0 0 
                                        f32_4 %93 = OpLoad %81 
                                        f32_3 %94 = OpVectorShuffle %93 %93 0 1 2 
                                        f32_3 %95 = OpFMul %92 %94 
                                        f32_3 %96 = OpLoad vs_TEXCOORD2 
                                        f32_3 %97 = OpFAdd %95 %96 
                                        f32_4 %98 = OpLoad %9 
                                        f32_4 %99 = OpVectorShuffle %98 %97 4 1 5 6 
                                                      OpStore %9 %99 
                                       f32_3 %101 = OpLoad vs_TEXCOORD1 
                                       f32_3 %102 = OpFNegate %101 
                                       f32_3 %103 = OpLoad %33 
                                       f32_3 %104 = OpVectorShuffle %103 %103 0 0 0 
                                       f32_3 %105 = OpFMul %102 %104 
                                       f32_4 %106 = OpLoad %9 
                                       f32_3 %107 = OpVectorShuffle %106 %106 0 2 3 
                                       f32_3 %108 = OpFAdd %105 %107 
                                       f32_4 %109 = OpLoad %9 
                                       f32_4 %110 = OpVectorShuffle %109 %108 4 1 5 6 
                                                      OpStore %9 %110 
                                       f32_3 %111 = OpLoad %33 
                                       f32_3 %112 = OpVectorShuffle %111 %111 0 0 0 
                                       f32_3 %113 = OpLoad vs_TEXCOORD1 
                                       f32_3 %114 = OpFMul %112 %113 
                                       f32_4 %115 = OpLoad %81 
                                       f32_4 %116 = OpVectorShuffle %115 %114 4 5 6 3 
                                                      OpStore %81 %116 
                              Uniform f32_4* %118 = OpAccessChain %40 %66 
                                       f32_4 %119 = OpLoad %118 
                                       f32_3 %120 = OpVectorShuffle %119 %119 3 3 3 
                                       f32_4 %121 = OpLoad %9 
                                       f32_3 %122 = OpVectorShuffle %121 %121 0 2 3 
                                       f32_3 %123 = OpFMul %120 %122 
                                       f32_4 %124 = OpLoad %81 
                                       f32_3 %125 = OpVectorShuffle %124 %124 0 1 2 
                                       f32_3 %126 = OpFAdd %123 %125 
                                       f32_4 %127 = OpLoad %9 
                                       f32_4 %128 = OpVectorShuffle %127 %126 4 5 6 3 
                                                      OpStore %9 %128 
                                       f32_4 %129 = OpLoad %9 
                                       f32_4 %130 = OpVectorShuffle %129 %129 1 1 1 1 
                              Uniform f32_4* %132 = OpAccessChain %40 %131 %66 
                                       f32_4 %133 = OpLoad %132 
                                       f32_4 %134 = OpFMul %130 %133 
                                                      OpStore %81 %134 
                              Uniform f32_4* %135 = OpAccessChain %40 %131 %42 
                                       f32_4 %136 = OpLoad %135 
                                       f32_4 %137 = OpLoad %9 
                                       f32_4 %138 = OpVectorShuffle %137 %137 0 0 0 0 
                                       f32_4 %139 = OpFMul %136 %138 
                                       f32_4 %140 = OpLoad %81 
                                       f32_4 %141 = OpFAdd %139 %140 
                                                      OpStore %81 %141 
                              Uniform f32_4* %142 = OpAccessChain %40 %131 %131 
                                       f32_4 %143 = OpLoad %142 
                                       f32_4 %144 = OpLoad %9 
                                       f32_4 %145 = OpVectorShuffle %144 %144 2 2 2 2 
                                       f32_4 %146 = OpFMul %143 %145 
                                       f32_4 %147 = OpLoad %81 
                                       f32_4 %148 = OpFAdd %146 %147 
                                                      OpStore %9 %148 
                                       f32_4 %149 = OpLoad %9 
                              Uniform f32_4* %151 = OpAccessChain %40 %131 %150 
                                       f32_4 %152 = OpLoad %151 
                                       f32_4 %153 = OpFAdd %149 %152 
                                                      OpStore %9 %153 
                                       f32_4 %154 = OpLoad %9 
                                       f32_3 %155 = OpVectorShuffle %154 %154 1 1 1 
                              Uniform f32_4* %156 = OpAccessChain %40 %150 %66 
                                       f32_4 %157 = OpLoad %156 
                                       f32_3 %158 = OpVectorShuffle %157 %157 0 1 2 
                                       f32_3 %159 = OpFMul %155 %158 
                                       f32_4 %160 = OpLoad %81 
                                       f32_4 %161 = OpVectorShuffle %160 %159 4 5 6 3 
                                                      OpStore %81 %161 
                              Uniform f32_4* %162 = OpAccessChain %40 %150 %42 
                                       f32_4 %163 = OpLoad %162 
                                       f32_3 %164 = OpVectorShuffle %163 %163 0 1 2 
                                       f32_4 %165 = OpLoad %9 
                                       f32_3 %166 = OpVectorShuffle %165 %165 0 0 0 
                                       f32_3 %167 = OpFMul %164 %166 
                                       f32_4 %168 = OpLoad %81 
                                       f32_3 %169 = OpVectorShuffle %168 %168 0 1 2 
                                       f32_3 %170 = OpFAdd %167 %169 
                                       f32_4 %171 = OpLoad %81 
                                       f32_4 %172 = OpVectorShuffle %171 %170 4 5 6 3 
                                                      OpStore %81 %172 
                              Uniform f32_4* %173 = OpAccessChain %40 %150 %131 
                                       f32_4 %174 = OpLoad %173 
                                       f32_3 %175 = OpVectorShuffle %174 %174 0 1 2 
                                       f32_4 %176 = OpLoad %9 
                                       f32_3 %177 = OpVectorShuffle %176 %176 2 2 2 
                                       f32_3 %178 = OpFMul %175 %177 
                                       f32_4 %179 = OpLoad %81 
                                       f32_3 %180 = OpVectorShuffle %179 %179 0 1 2 
                                       f32_3 %181 = OpFAdd %178 %180 
                                       f32_4 %182 = OpLoad %9 
                                       f32_4 %183 = OpVectorShuffle %182 %181 4 5 6 3 
                                                      OpStore %9 %183 
                              Uniform f32_4* %184 = OpAccessChain %40 %150 %150 
                                       f32_4 %185 = OpLoad %184 
                                       f32_3 %186 = OpVectorShuffle %185 %185 0 1 2 
                                       f32_4 %187 = OpLoad %9 
                                       f32_3 %188 = OpVectorShuffle %187 %187 3 3 3 
                                       f32_3 %189 = OpFMul %186 %188 
                                       f32_4 %190 = OpLoad %9 
                                       f32_3 %191 = OpVectorShuffle %190 %190 0 1 2 
                                       f32_3 %192 = OpFAdd %189 %191 
                                       f32_4 %193 = OpLoad %9 
                                       f32_4 %194 = OpVectorShuffle %193 %192 4 5 6 3 
                                                      OpStore %9 %194 
                                       f32_4 %195 = OpLoad %9 
                                       f32_2 %196 = OpVectorShuffle %195 %195 0 1 
                              Uniform f32_4* %198 = OpAccessChain %40 %197 
                                       f32_4 %199 = OpLoad %198 
                                       f32_2 %200 = OpVectorShuffle %199 %199 2 3 
                                       f32_2 %201 = OpFMul %196 %200 
                                       f32_2 %204 = OpFAdd %201 %203 
                                       f32_4 %205 = OpLoad %81 
                                       f32_4 %206 = OpVectorShuffle %205 %204 4 5 2 3 
                                                      OpStore %81 %206 
                                       f32_4 %207 = OpLoad %81 
                                       f32_2 %208 = OpVectorShuffle %207 %207 0 1 
                                       f32_2 %209 = OpExtInst %1 8 %208 
                                       f32_4 %210 = OpLoad %81 
                                       f32_4 %211 = OpVectorShuffle %210 %209 4 5 2 3 
                                                      OpStore %81 %211 
                                       f32_4 %212 = OpLoad %9 
                                       f32_2 %213 = OpVectorShuffle %212 %212 0 1 
                              Uniform f32_4* %214 = OpAccessChain %40 %197 
                                       f32_4 %215 = OpLoad %214 
                                       f32_2 %216 = OpVectorShuffle %215 %215 2 3 
                                       f32_2 %217 = OpFMul %213 %216 
                                       f32_4 %218 = OpLoad %81 
                                       f32_2 %219 = OpVectorShuffle %218 %218 0 1 
                                       f32_2 %220 = OpFNegate %219 
                                       f32_2 %221 = OpFAdd %217 %220 
                                       f32_4 %222 = OpLoad %9 
                                       f32_4 %223 = OpVectorShuffle %222 %221 4 5 2 3 
                                                      OpStore %9 %223 
                                       f32_4 %226 = OpLoad %9 
                                       f32_2 %227 = OpVectorShuffle %226 %226 0 1 
                                       f32_2 %228 = OpFNegate %227 
                                       f32_2 %230 = OpFAdd %228 %229 
                                                      OpStore %225 %230 
                                       f32_4 %232 = OpLoad %9 
                                       f32_2 %233 = OpVectorShuffle %232 %232 0 1 
                                       f32_2 %236 = OpExtInst %1 37 %233 %235 
                                       f32_4 %237 = OpLoad %231 
                                       f32_4 %238 = OpVectorShuffle %237 %236 4 5 2 3 
                                                      OpStore %231 %238 
                                       f32_4 %239 = OpLoad %231 
                                       f32_2 %240 = OpVectorShuffle %239 %239 0 1 
                                       f32_2 %241 = OpFNegate %240 
                                       f32_4 %242 = OpLoad %231 
                                       f32_2 %243 = OpVectorShuffle %242 %242 0 1 
                                       f32_2 %244 = OpFMul %241 %243 
                                       f32_2 %245 = OpLoad %225 
                                       f32_2 %246 = OpFAdd %244 %245 
                                                      OpStore %225 %246 
                                       f32_2 %247 = OpLoad %225 
                                       f32_2 %250 = OpFAdd %247 %249 
                                                      OpStore %225 %250 
                                       f32_2 %251 = OpLoad %225 
                                       f32_2 %254 = OpFMul %251 %253 
                                       f32_4 %255 = OpLoad %231 
                                       f32_4 %256 = OpVectorShuffle %255 %254 4 5 2 3 
                                                      OpStore %231 %256 
                                Private f32* %258 = OpAccessChain %231 %27 
                                         f32 %259 = OpLoad %258 
                                Private f32* %260 = OpAccessChain %257 %49 
                                                      OpStore %260 %259 
                                       f32_4 %261 = OpLoad %9 
                                       f32_2 %262 = OpVectorShuffle %261 %261 0 1 
                                       f32_2 %263 = OpExtInst %1 40 %262 %235 
                                                      OpStore %225 %263 
                                       f32_4 %265 = OpLoad %9 
                                       f32_4 %266 = OpVectorShuffle %265 %265 0 0 1 1 
                                       f32_4 %268 = OpFAdd %266 %267 
                                                      OpStore %264 %268 
                                       f32_2 %269 = OpLoad %225 
                                       f32_2 %270 = OpFNegate %269 
                                       f32_2 %271 = OpLoad %225 
                                       f32_2 %272 = OpFMul %270 %271 
                                       f32_4 %273 = OpLoad %264 
                                       f32_2 %274 = OpVectorShuffle %273 %273 1 3 
                                       f32_2 %275 = OpFAdd %272 %274 
                                                      OpStore %225 %275 
                                       f32_4 %276 = OpLoad %264 
                                       f32_4 %277 = OpVectorShuffle %276 %276 0 0 2 2 
                                       f32_4 %278 = OpLoad %264 
                                       f32_4 %279 = OpVectorShuffle %278 %278 0 0 2 2 
                                       f32_4 %280 = OpFMul %277 %279 
                                                      OpStore %264 %280 
                                       f32_2 %281 = OpLoad %225 
                                       f32_2 %282 = OpFAdd %281 %249 
                                                      OpStore %225 %282 
                                Private f32* %284 = OpAccessChain %225 %27 
                                         f32 %285 = OpLoad %284 
                                         f32 %286 = OpFMul %285 %252 
                                Private f32* %288 = OpAccessChain %283 %287 
                                                      OpStore %288 %286 
                                Private f32* %290 = OpAccessChain %225 %49 
                                         f32 %291 = OpLoad %290 
                                         f32 %292 = OpFMul %291 %252 
                                Private f32* %293 = OpAccessChain %289 %287 
                                                      OpStore %293 %292 
                                       f32_4 %294 = OpLoad %264 
                                       f32_2 %295 = OpVectorShuffle %294 %294 0 2 
                                       f32_2 %296 = OpFMul %295 %203 
                                       f32_4 %297 = OpLoad %9 
                                       f32_2 %298 = OpVectorShuffle %297 %297 0 1 
                                       f32_2 %299 = OpFNegate %298 
                                       f32_2 %300 = OpFAdd %296 %299 
                                                      OpStore %225 %300 
                                       f32_4 %301 = OpLoad %264 
                                       f32_2 %302 = OpVectorShuffle %301 %301 3 1 
                                       f32_2 %305 = OpFMul %302 %304 
                                       f32_4 %306 = OpLoad %257 
                                       f32_4 %307 = OpVectorShuffle %306 %305 0 1 4 5 
                                                      OpStore %257 %307 
                                       f32_2 %308 = OpLoad %225 
                                       f32_2 %309 = OpVectorShuffle %308 %308 1 0 
                                       f32_2 %310 = OpFMul %309 %253 
                                       f32_4 %311 = OpLoad %289 
                                       f32_4 %312 = OpVectorShuffle %311 %310 4 5 2 3 
                                                      OpStore %289 %312 
                                Private f32* %313 = OpAccessChain %289 %49 
                                         f32 %314 = OpLoad %313 
                                Private f32* %315 = OpAccessChain %283 %27 
                                                      OpStore %315 %314 
                                Private f32* %316 = OpAccessChain %257 %287 
                                         f32 %317 = OpLoad %316 
                                Private f32* %318 = OpAccessChain %231 %67 
                                                      OpStore %318 %317 
                                       f32_4 %319 = OpLoad %9 
                                       f32_2 %320 = OpVectorShuffle %319 %319 0 0 
                                       f32_2 %323 = OpFMul %320 %322 
                                       f32_2 %326 = OpFAdd %323 %325 
                                       f32_4 %327 = OpLoad %283 
                                       f32_4 %328 = OpVectorShuffle %327 %326 0 4 2 5 
                                                      OpStore %283 %328 
                                       f32_4 %329 = OpLoad %9 
                                       f32_2 %330 = OpVectorShuffle %329 %329 0 0 
                                       f32_2 %331 = OpFMul %330 %322 
                                       f32_2 %333 = OpFAdd %331 %332 
                                       f32_4 %334 = OpLoad %257 
                                       f32_4 %335 = OpVectorShuffle %334 %333 4 1 5 3 
                                                      OpStore %257 %335 
                                       f32_4 %336 = OpLoad %257 
                                       f32_4 %337 = OpLoad %283 
                                       f32_4 %338 = OpFAdd %336 %337 
                                                      OpStore %264 %338 
                                       f32_4 %339 = OpLoad %257 
                                       f32_4 %340 = OpLoad %264 
                                       f32_4 %341 = OpFDiv %339 %340 
                                                      OpStore %257 %341 
                                       f32_4 %342 = OpLoad %257 
                                       f32_4 %347 = OpFAdd %342 %346 
                                                      OpStore %257 %347 
                                       f32_4 %348 = OpLoad %257 
                                       f32_4 %349 = OpVectorShuffle %348 %348 3 0 1 2 
                              Uniform f32_4* %350 = OpAccessChain %40 %197 
                                       f32_4 %351 = OpLoad %350 
                                       f32_4 %352 = OpVectorShuffle %351 %351 0 0 0 0 
                                       f32_4 %353 = OpFMul %349 %352 
                                                      OpStore %257 %353 
                                       f32_4 %354 = OpLoad %257 
                                       f32_3 %355 = OpVectorShuffle %354 %354 1 2 3 
                                       f32_4 %356 = OpLoad %283 
                                       f32_4 %357 = OpVectorShuffle %356 %355 4 1 5 6 
                                                      OpStore %283 %357 
                                       f32_4 %358 = OpLoad %9 
                                       f32_2 %359 = OpVectorShuffle %358 %358 1 1 
                                       f32_2 %360 = OpFMul %359 %322 
                                       f32_2 %361 = OpFAdd %360 %325 
                                       f32_4 %362 = OpLoad %289 
                                       f32_4 %363 = OpVectorShuffle %362 %361 0 4 2 5 
                                                      OpStore %289 %363 
                                       f32_4 %364 = OpLoad %9 
                                       f32_2 %365 = OpVectorShuffle %364 %364 1 1 
                                       f32_2 %366 = OpFMul %365 %322 
                                       f32_2 %367 = OpFAdd %366 %332 
                                       f32_4 %368 = OpLoad %231 
                                       f32_4 %369 = OpVectorShuffle %368 %367 4 1 5 3 
                                                      OpStore %231 %369 
                                       f32_4 %370 = OpLoad %231 
                                       f32_4 %371 = OpLoad %289 
                                       f32_4 %372 = OpFAdd %370 %371 
                                                      OpStore %289 %372 
                                       f32_4 %373 = OpLoad %231 
                                       f32_4 %374 = OpLoad %289 
                                       f32_4 %375 = OpFDiv %373 %374 
                                                      OpStore %231 %375 
                                       f32_4 %376 = OpLoad %231 
                                       f32_4 %377 = OpFAdd %376 %346 
                                                      OpStore %231 %377 
                                       f32_4 %378 = OpLoad %231 
                                       f32_4 %379 = OpVectorShuffle %378 %378 0 3 1 2 
                              Uniform f32_4* %380 = OpAccessChain %40 %197 
                                       f32_4 %381 = OpLoad %380 
                                       f32_4 %382 = OpVectorShuffle %381 %381 1 1 1 1 
                                       f32_4 %383 = OpFMul %379 %382 
                                                      OpStore %231 %383 
                                Private f32* %384 = OpAccessChain %231 %27 
                                         f32 %385 = OpLoad %384 
                                Private f32* %386 = OpAccessChain %283 %49 
                                                      OpStore %386 %385 
                                       f32_4 %388 = OpLoad %81 
                                       f32_4 %389 = OpVectorShuffle %388 %388 0 1 0 1 
                              Uniform f32_4* %390 = OpAccessChain %40 %197 
                                       f32_4 %391 = OpLoad %390 
                                       f32_4 %392 = OpVectorShuffle %391 %391 0 1 0 1 
                                       f32_4 %393 = OpFMul %389 %392 
                                       f32_4 %394 = OpLoad %283 
                                       f32_4 %395 = OpVectorShuffle %394 %394 0 1 2 1 
                                       f32_4 %396 = OpFAdd %393 %395 
                                                      OpStore %387 %396 
                                       f32_4 %399 = OpLoad %387 
                                       f32_2 %400 = OpVectorShuffle %399 %399 2 3 
                                Private f32* %401 = OpAccessChain %9 %287 
                                         f32 %402 = OpLoad %401 
                                         f32 %403 = OpCompositeExtract %400 0 
                                         f32 %404 = OpCompositeExtract %400 1 
                                       f32_3 %405 = OpCompositeConstruct %403 %404 %402 
                                                      OpStore %398 %405 
                         read_only Texture2D %407 = OpLoad %406 
                                     sampler %409 = OpLoad %408 
                  read_only Texture2DSampled %412 = OpSampledImage %407 %409 
                                       f32_3 %413 = OpLoad %398 
                                         f32 %414 = OpCompositeExtract %413 2 
                                         f32 %415 = OpImageSampleDrefExplicitLod %412 %413 %414 Lod %6 
                                Private f32* %416 = OpAccessChain %9 %27 
                                                      OpStore %416 %415 
                                       f32_4 %418 = OpLoad %387 
                                       f32_2 %419 = OpVectorShuffle %418 %418 0 1 
                                Private f32* %420 = OpAccessChain %9 %287 
                                         f32 %421 = OpLoad %420 
                                         f32 %422 = OpCompositeExtract %419 0 
                                         f32 %423 = OpCompositeExtract %419 1 
                                       f32_3 %424 = OpCompositeConstruct %422 %423 %421 
                                                      OpStore %417 %424 
                         read_only Texture2D %425 = OpLoad %406 
                                     sampler %426 = OpLoad %408 
                  read_only Texture2DSampled %427 = OpSampledImage %425 %426 
                                       f32_3 %428 = OpLoad %417 
                                         f32 %429 = OpCompositeExtract %428 2 
                                         f32 %430 = OpImageSampleDrefExplicitLod %427 %428 %429 Lod %6 
                                Private f32* %431 = OpAccessChain %33 %27 
                                                      OpStore %431 %430 
                                       f32_4 %432 = OpLoad %264 
                                       f32_4 %433 = OpLoad %289 
                                       f32_4 %434 = OpVectorShuffle %433 %433 0 0 0 0 
                                       f32_4 %435 = OpFMul %432 %434 
                                                      OpStore %387 %435 
                                Private f32* %436 = OpAccessChain %9 %27 
                                         f32 %437 = OpLoad %436 
                                Private f32* %438 = OpAccessChain %387 %49 
                                         f32 %439 = OpLoad %438 
                                         f32 %440 = OpFMul %437 %439 
                                Private f32* %441 = OpAccessChain %9 %27 
                                                      OpStore %441 %440 
                                Private f32* %442 = OpAccessChain %387 %27 
                                         f32 %443 = OpLoad %442 
                                Private f32* %444 = OpAccessChain %33 %27 
                                         f32 %445 = OpLoad %444 
                                         f32 %446 = OpFMul %443 %445 
                                Private f32* %447 = OpAccessChain %9 %27 
                                         f32 %448 = OpLoad %447 
                                         f32 %449 = OpFAdd %446 %448 
                                Private f32* %450 = OpAccessChain %9 %27 
                                                      OpStore %450 %449 
                                       f32_4 %451 = OpLoad %81 
                                       f32_2 %452 = OpVectorShuffle %451 %451 0 1 
                              Uniform f32_4* %453 = OpAccessChain %40 %197 
                                       f32_4 %454 = OpLoad %453 
                                       f32_2 %455 = OpVectorShuffle %454 %454 0 1 
                                       f32_2 %456 = OpFMul %452 %455 
                                       f32_4 %457 = OpLoad %283 
                                       f32_2 %458 = OpVectorShuffle %457 %457 3 1 
                                       f32_2 %459 = OpFAdd %456 %458 
                                       f32_3 %460 = OpLoad %33 
                                       f32_3 %461 = OpVectorShuffle %460 %459 3 1 4 
                                                      OpStore %33 %461 
                                Private f32* %462 = OpAccessChain %283 %49 
                                         f32 %463 = OpLoad %462 
                                Private f32* %464 = OpAccessChain %257 %49 
                                                      OpStore %464 %463 
                                       f32_4 %465 = OpLoad %81 
                                       f32_2 %466 = OpVectorShuffle %465 %465 0 1 
                              Uniform f32_4* %467 = OpAccessChain %40 %197 
                                       f32_4 %468 = OpLoad %467 
                                       f32_2 %469 = OpVectorShuffle %468 %468 0 1 
                                       f32_2 %470 = OpFMul %466 %469 
                                       f32_4 %471 = OpLoad %257 
                                       f32_2 %472 = OpVectorShuffle %471 %471 0 1 
                                       f32_2 %473 = OpFAdd %470 %472 
                                                      OpStore %225 %473 
                                       f32_2 %475 = OpLoad %225 
                                Private f32* %476 = OpAccessChain %9 %287 
                                         f32 %477 = OpLoad %476 
                                         f32 %478 = OpCompositeExtract %475 0 
                                         f32 %479 = OpCompositeExtract %475 1 
                                       f32_3 %480 = OpCompositeConstruct %478 %479 %477 
                                                      OpStore %474 %480 
                         read_only Texture2D %481 = OpLoad %406 
                                     sampler %482 = OpLoad %408 
                  read_only Texture2DSampled %483 = OpSampledImage %481 %482 
                                       f32_3 %484 = OpLoad %474 
                                         f32 %485 = OpCompositeExtract %484 2 
                                         f32 %486 = OpImageSampleDrefExplicitLod %483 %484 %485 Lod %6 
                                Private f32* %487 = OpAccessChain %225 %27 
                                                      OpStore %487 %486 
                                       f32_3 %489 = OpLoad %33 
                                       f32_2 %490 = OpVectorShuffle %489 %489 0 2 
                                Private f32* %491 = OpAccessChain %9 %287 
                                         f32 %492 = OpLoad %491 
                                         f32 %493 = OpCompositeExtract %490 0 
                                         f32 %494 = OpCompositeExtract %490 1 
                                       f32_3 %495 = OpCompositeConstruct %493 %494 %492 
                                                      OpStore %488 %495 
                         read_only Texture2D %496 = OpLoad %406 
                                     sampler %497 = OpLoad %408 
                  read_only Texture2DSampled %498 = OpSampledImage %496 %497 
                                       f32_3 %499 = OpLoad %488 
                                         f32 %500 = OpCompositeExtract %499 2 
                                         f32 %501 = OpImageSampleDrefExplicitLod %498 %499 %500 Lod %6 
                                Private f32* %502 = OpAccessChain %33 %27 
                                                      OpStore %502 %501 
                                Private f32* %503 = OpAccessChain %387 %287 
                                         f32 %504 = OpLoad %503 
                                Private f32* %505 = OpAccessChain %33 %27 
                                         f32 %506 = OpLoad %505 
                                         f32 %507 = OpFMul %504 %506 
                                Private f32* %508 = OpAccessChain %9 %27 
                                         f32 %509 = OpLoad %508 
                                         f32 %510 = OpFAdd %507 %509 
                                Private f32* %511 = OpAccessChain %9 %27 
                                                      OpStore %511 %510 
                                Private f32* %512 = OpAccessChain %387 %67 
                                         f32 %513 = OpLoad %512 
                                Private f32* %514 = OpAccessChain %225 %27 
                                         f32 %515 = OpLoad %514 
                                         f32 %516 = OpFMul %513 %515 
                                Private f32* %517 = OpAccessChain %9 %27 
                                         f32 %518 = OpLoad %517 
                                         f32 %519 = OpFAdd %516 %518 
                                Private f32* %520 = OpAccessChain %9 %27 
                                                      OpStore %520 %519 
                                Private f32* %521 = OpAccessChain %231 %287 
                                         f32 %522 = OpLoad %521 
                                Private f32* %523 = OpAccessChain %283 %49 
                                                      OpStore %523 %522 
                                       f32_4 %524 = OpLoad %81 
                                       f32_4 %525 = OpVectorShuffle %524 %524 0 1 0 1 
                              Uniform f32_4* %526 = OpAccessChain %40 %197 
                                       f32_4 %527 = OpLoad %526 
                                       f32_4 %528 = OpVectorShuffle %527 %527 0 1 0 1 
                                       f32_4 %529 = OpFMul %525 %528 
                                       f32_4 %530 = OpLoad %283 
                                       f32_4 %531 = OpVectorShuffle %530 %530 0 1 2 1 
                                       f32_4 %532 = OpFAdd %529 %531 
                                                      OpStore %387 %532 
                                       f32_4 %534 = OpLoad %387 
                                       f32_2 %535 = OpVectorShuffle %534 %534 0 1 
                                Private f32* %536 = OpAccessChain %9 %287 
                                         f32 %537 = OpLoad %536 
                                         f32 %538 = OpCompositeExtract %535 0 
                                         f32 %539 = OpCompositeExtract %535 1 
                                       f32_3 %540 = OpCompositeConstruct %538 %539 %537 
                                                      OpStore %533 %540 
                         read_only Texture2D %541 = OpLoad %406 
                                     sampler %542 = OpLoad %408 
                  read_only Texture2DSampled %543 = OpSampledImage %541 %542 
                                       f32_3 %544 = OpLoad %533 
                                         f32 %545 = OpCompositeExtract %544 2 
                                         f32 %546 = OpImageSampleDrefExplicitLod %543 %544 %545 Lod %6 
                                Private f32* %547 = OpAccessChain %33 %27 
                                                      OpStore %547 %546 
                                       f32_4 %549 = OpLoad %387 
                                       f32_2 %550 = OpVectorShuffle %549 %549 2 3 
                                Private f32* %551 = OpAccessChain %9 %287 
                                         f32 %552 = OpLoad %551 
                                         f32 %553 = OpCompositeExtract %550 0 
                                         f32 %554 = OpCompositeExtract %550 1 
                                       f32_3 %555 = OpCompositeConstruct %553 %554 %552 
                                                      OpStore %548 %555 
                         read_only Texture2D %557 = OpLoad %406 
                                     sampler %558 = OpLoad %408 
                  read_only Texture2DSampled %559 = OpSampledImage %557 %558 
                                       f32_3 %560 = OpLoad %548 
                                         f32 %561 = OpCompositeExtract %560 2 
                                         f32 %562 = OpImageSampleDrefExplicitLod %559 %560 %561 Lod %6 
                                                      OpStore %556 %562 
                                       f32_4 %563 = OpLoad %264 
                                       f32_4 %564 = OpLoad %289 
                                       f32_4 %565 = OpVectorShuffle %564 %564 1 1 1 1 
                                       f32_4 %566 = OpFMul %563 %565 
                                                      OpStore %387 %566 
                                Private f32* %567 = OpAccessChain %387 %27 
                                         f32 %568 = OpLoad %567 
                                Private f32* %569 = OpAccessChain %33 %27 
                                         f32 %570 = OpLoad %569 
                                         f32 %571 = OpFMul %568 %570 
                                Private f32* %572 = OpAccessChain %9 %27 
                                         f32 %573 = OpLoad %572 
                                         f32 %574 = OpFAdd %571 %573 
                                Private f32* %575 = OpAccessChain %9 %27 
                                                      OpStore %575 %574 
                                Private f32* %576 = OpAccessChain %387 %49 
                                         f32 %577 = OpLoad %576 
                                         f32 %578 = OpLoad %556 
                                         f32 %579 = OpFMul %577 %578 
                                Private f32* %580 = OpAccessChain %9 %27 
                                         f32 %581 = OpLoad %580 
                                         f32 %582 = OpFAdd %579 %581 
                                Private f32* %583 = OpAccessChain %9 %27 
                                                      OpStore %583 %582 
                                       f32_4 %584 = OpLoad %81 
                                       f32_2 %585 = OpVectorShuffle %584 %584 0 1 
                              Uniform f32_4* %586 = OpAccessChain %40 %197 
                                       f32_4 %587 = OpLoad %586 
                                       f32_2 %588 = OpVectorShuffle %587 %587 0 1 
                                       f32_2 %589 = OpFMul %585 %588 
                                       f32_4 %590 = OpLoad %283 
                                       f32_2 %591 = OpVectorShuffle %590 %590 3 1 
                                       f32_2 %592 = OpFAdd %589 %591 
                                       f32_3 %593 = OpLoad %33 
                                       f32_3 %594 = OpVectorShuffle %593 %592 3 1 4 
                                                      OpStore %33 %594 
                                Private f32* %595 = OpAccessChain %283 %49 
                                         f32 %596 = OpLoad %595 
                                Private f32* %597 = OpAccessChain %257 %287 
                                                      OpStore %597 %596 
                                       f32_4 %598 = OpLoad %81 
                                       f32_2 %599 = OpVectorShuffle %598 %598 0 1 
                              Uniform f32_4* %600 = OpAccessChain %40 %197 
                                       f32_4 %601 = OpLoad %600 
                                       f32_2 %602 = OpVectorShuffle %601 %601 0 1 
                                       f32_2 %603 = OpFMul %599 %602 
                                       f32_4 %604 = OpLoad %257 
                                       f32_2 %605 = OpVectorShuffle %604 %604 0 2 
                                       f32_2 %606 = OpFAdd %603 %605 
                                                      OpStore %225 %606 
                                       f32_2 %608 = OpLoad %225 
                                Private f32* %609 = OpAccessChain %9 %287 
                                         f32 %610 = OpLoad %609 
                                         f32 %611 = OpCompositeExtract %608 0 
                                         f32 %612 = OpCompositeExtract %608 1 
                                       f32_3 %613 = OpCompositeConstruct %611 %612 %610 
                                                      OpStore %607 %613 
                         read_only Texture2D %614 = OpLoad %406 
                                     sampler %615 = OpLoad %408 
                  read_only Texture2DSampled %616 = OpSampledImage %614 %615 
                                       f32_3 %617 = OpLoad %607 
                                         f32 %618 = OpCompositeExtract %617 2 
                                         f32 %619 = OpImageSampleDrefExplicitLod %616 %617 %618 Lod %6 
                                Private f32* %620 = OpAccessChain %225 %27 
                                                      OpStore %620 %619 
                                       f32_3 %622 = OpLoad %33 
                                       f32_2 %623 = OpVectorShuffle %622 %622 0 2 
                                Private f32* %624 = OpAccessChain %9 %287 
                                         f32 %625 = OpLoad %624 
                                         f32 %626 = OpCompositeExtract %623 0 
                                         f32 %627 = OpCompositeExtract %623 1 
                                       f32_3 %628 = OpCompositeConstruct %626 %627 %625 
                                                      OpStore %621 %628 
                         read_only Texture2D %629 = OpLoad %406 
                                     sampler %630 = OpLoad %408 
                  read_only Texture2DSampled %631 = OpSampledImage %629 %630 
                                       f32_3 %632 = OpLoad %621 
                                         f32 %633 = OpCompositeExtract %632 2 
                                         f32 %634 = OpImageSampleDrefExplicitLod %631 %632 %633 Lod %6 
                                Private f32* %635 = OpAccessChain %33 %27 
                                                      OpStore %635 %634 
                                Private f32* %636 = OpAccessChain %387 %287 
                                         f32 %637 = OpLoad %636 
                                Private f32* %638 = OpAccessChain %33 %27 
                                         f32 %639 = OpLoad %638 
                                         f32 %640 = OpFMul %637 %639 
                                Private f32* %641 = OpAccessChain %9 %27 
                                         f32 %642 = OpLoad %641 
                                         f32 %643 = OpFAdd %640 %642 
                                Private f32* %644 = OpAccessChain %9 %27 
                                                      OpStore %644 %643 
                                Private f32* %645 = OpAccessChain %387 %67 
                                         f32 %646 = OpLoad %645 
                                Private f32* %647 = OpAccessChain %225 %27 
                                         f32 %648 = OpLoad %647 
                                         f32 %649 = OpFMul %646 %648 
                                Private f32* %650 = OpAccessChain %9 %27 
                                         f32 %651 = OpLoad %650 
                                         f32 %652 = OpFAdd %649 %651 
                                Private f32* %653 = OpAccessChain %9 %27 
                                                      OpStore %653 %652 
                                Private f32* %654 = OpAccessChain %231 %67 
                                         f32 %655 = OpLoad %654 
                                Private f32* %656 = OpAccessChain %283 %49 
                                                      OpStore %656 %655 
                                       f32_4 %657 = OpLoad %81 
                                       f32_4 %658 = OpVectorShuffle %657 %657 0 1 0 1 
                              Uniform f32_4* %659 = OpAccessChain %40 %197 
                                       f32_4 %660 = OpLoad %659 
                                       f32_4 %661 = OpVectorShuffle %660 %660 0 1 0 1 
                                       f32_4 %662 = OpFMul %658 %661 
                                       f32_4 %663 = OpLoad %283 
                                       f32_4 %664 = OpVectorShuffle %663 %663 0 1 2 1 
                                       f32_4 %665 = OpFAdd %662 %664 
                                                      OpStore %387 %665 
                                       f32_4 %667 = OpLoad %387 
                                       f32_2 %668 = OpVectorShuffle %667 %667 0 1 
                                Private f32* %669 = OpAccessChain %9 %287 
                                         f32 %670 = OpLoad %669 
                                         f32 %671 = OpCompositeExtract %668 0 
                                         f32 %672 = OpCompositeExtract %668 1 
                                       f32_3 %673 = OpCompositeConstruct %671 %672 %670 
                                                      OpStore %666 %673 
                         read_only Texture2D %674 = OpLoad %406 
                                     sampler %675 = OpLoad %408 
                  read_only Texture2DSampled %676 = OpSampledImage %674 %675 
                                       f32_3 %677 = OpLoad %666 
                                         f32 %678 = OpCompositeExtract %677 2 
                                         f32 %679 = OpImageSampleDrefExplicitLod %676 %677 %678 Lod %6 
                                Private f32* %680 = OpAccessChain %33 %27 
                                                      OpStore %680 %679 
                                       f32_4 %682 = OpLoad %387 
                                       f32_2 %683 = OpVectorShuffle %682 %682 2 3 
                                Private f32* %684 = OpAccessChain %9 %287 
                                         f32 %685 = OpLoad %684 
                                         f32 %686 = OpCompositeExtract %683 0 
                                         f32 %687 = OpCompositeExtract %683 1 
                                       f32_3 %688 = OpCompositeConstruct %686 %687 %685 
                                                      OpStore %681 %688 
                         read_only Texture2D %689 = OpLoad %406 
                                     sampler %690 = OpLoad %408 
                  read_only Texture2DSampled %691 = OpSampledImage %689 %690 
                                       f32_3 %692 = OpLoad %681 
                                         f32 %693 = OpCompositeExtract %692 2 
                                         f32 %694 = OpImageSampleDrefExplicitLod %691 %692 %693 Lod %6 
                                                      OpStore %556 %694 
                                       f32_4 %695 = OpLoad %264 
                                       f32_4 %696 = OpLoad %289 
                                       f32_4 %697 = OpVectorShuffle %696 %696 2 2 2 2 
                                       f32_4 %698 = OpFMul %695 %697 
                                                      OpStore %387 %698 
                                       f32_4 %699 = OpLoad %264 
                                       f32_4 %700 = OpLoad %289 
                                       f32_4 %701 = OpVectorShuffle %700 %700 3 3 3 3 
                                       f32_4 %702 = OpFMul %699 %701 
                                                      OpStore %264 %702 
                                Private f32* %703 = OpAccessChain %387 %27 
                                         f32 %704 = OpLoad %703 
                                Private f32* %705 = OpAccessChain %33 %27 
                                         f32 %706 = OpLoad %705 
                                         f32 %707 = OpFMul %704 %706 
                                Private f32* %708 = OpAccessChain %9 %27 
                                         f32 %709 = OpLoad %708 
                                         f32 %710 = OpFAdd %707 %709 
                                Private f32* %711 = OpAccessChain %9 %27 
                                                      OpStore %711 %710 
                                Private f32* %712 = OpAccessChain %387 %49 
                                         f32 %713 = OpLoad %712 
                                         f32 %714 = OpLoad %556 
                                         f32 %715 = OpFMul %713 %714 
                                Private f32* %716 = OpAccessChain %9 %27 
                                         f32 %717 = OpLoad %716 
                                         f32 %718 = OpFAdd %715 %717 
                                Private f32* %719 = OpAccessChain %9 %27 
                                                      OpStore %719 %718 
                                       f32_4 %720 = OpLoad %81 
                                       f32_2 %721 = OpVectorShuffle %720 %720 0 1 
                              Uniform f32_4* %722 = OpAccessChain %40 %197 
                                       f32_4 %723 = OpLoad %722 
                                       f32_2 %724 = OpVectorShuffle %723 %723 0 1 
                                       f32_2 %725 = OpFMul %721 %724 
                                       f32_4 %726 = OpLoad %283 
                                       f32_2 %727 = OpVectorShuffle %726 %726 3 1 
                                       f32_2 %728 = OpFAdd %725 %727 
                                       f32_3 %729 = OpLoad %33 
                                       f32_3 %730 = OpVectorShuffle %729 %728 3 1 4 
                                                      OpStore %33 %730 
                                       f32_4 %731 = OpLoad %283 
                                       f32_3 %732 = OpVectorShuffle %731 %731 0 2 3 
                                       f32_4 %733 = OpLoad %231 
                                       f32_4 %734 = OpVectorShuffle %733 %732 4 1 5 6 
                                                      OpStore %231 %734 
                                Private f32* %735 = OpAccessChain %283 %49 
                                         f32 %736 = OpLoad %735 
                                Private f32* %737 = OpAccessChain %257 %67 
                                                      OpStore %737 %736 
                                       f32_4 %738 = OpLoad %81 
                                       f32_2 %739 = OpVectorShuffle %738 %738 0 1 
                              Uniform f32_4* %740 = OpAccessChain %40 %197 
                                       f32_4 %741 = OpLoad %740 
                                       f32_2 %742 = OpVectorShuffle %741 %741 0 1 
                                       f32_2 %743 = OpFMul %739 %742 
                                       f32_4 %744 = OpLoad %257 
                                       f32_2 %745 = OpVectorShuffle %744 %744 0 3 
                                       f32_2 %746 = OpFAdd %743 %745 
                                                      OpStore %225 %746 
                                       f32_2 %748 = OpLoad %225 
                                Private f32* %749 = OpAccessChain %9 %287 
                                         f32 %750 = OpLoad %749 
                                         f32 %751 = OpCompositeExtract %748 0 
                                         f32 %752 = OpCompositeExtract %748 1 
                                       f32_3 %753 = OpCompositeConstruct %751 %752 %750 
                                                      OpStore %747 %753 
                         read_only Texture2D %754 = OpLoad %406 
                                     sampler %755 = OpLoad %408 
                  read_only Texture2DSampled %756 = OpSampledImage %754 %755 
                                       f32_3 %757 = OpLoad %747 
                                         f32 %758 = OpCompositeExtract %757 2 
                                         f32 %759 = OpImageSampleDrefExplicitLod %756 %757 %758 Lod %6 
                                Private f32* %760 = OpAccessChain %225 %27 
                                                      OpStore %760 %759 
                                       f32_3 %762 = OpLoad %33 
                                       f32_2 %763 = OpVectorShuffle %762 %762 0 2 
                                Private f32* %764 = OpAccessChain %9 %287 
                                         f32 %765 = OpLoad %764 
                                         f32 %766 = OpCompositeExtract %763 0 
                                         f32 %767 = OpCompositeExtract %763 1 
                                       f32_3 %768 = OpCompositeConstruct %766 %767 %765 
                                                      OpStore %761 %768 
                         read_only Texture2D %769 = OpLoad %406 
                                     sampler %770 = OpLoad %408 
                  read_only Texture2DSampled %771 = OpSampledImage %769 %770 
                                       f32_3 %772 = OpLoad %761 
                                         f32 %773 = OpCompositeExtract %772 2 
                                         f32 %774 = OpImageSampleDrefExplicitLod %771 %772 %773 Lod %6 
                                Private f32* %775 = OpAccessChain %33 %27 
                                                      OpStore %775 %774 
                                Private f32* %776 = OpAccessChain %387 %287 
                                         f32 %777 = OpLoad %776 
                                Private f32* %778 = OpAccessChain %33 %27 
                                         f32 %779 = OpLoad %778 
                                         f32 %780 = OpFMul %777 %779 
                                Private f32* %781 = OpAccessChain %9 %27 
                                         f32 %782 = OpLoad %781 
                                         f32 %783 = OpFAdd %780 %782 
                                Private f32* %784 = OpAccessChain %9 %27 
                                                      OpStore %784 %783 
                                Private f32* %785 = OpAccessChain %387 %67 
                                         f32 %786 = OpLoad %785 
                                Private f32* %787 = OpAccessChain %225 %27 
                                         f32 %788 = OpLoad %787 
                                         f32 %789 = OpFMul %786 %788 
                                Private f32* %790 = OpAccessChain %9 %27 
                                         f32 %791 = OpLoad %790 
                                         f32 %792 = OpFAdd %789 %791 
                                Private f32* %793 = OpAccessChain %9 %27 
                                                      OpStore %793 %792 
                                       f32_4 %794 = OpLoad %81 
                                       f32_4 %795 = OpVectorShuffle %794 %794 0 1 0 1 
                              Uniform f32_4* %796 = OpAccessChain %40 %197 
                                       f32_4 %797 = OpLoad %796 
                                       f32_4 %798 = OpVectorShuffle %797 %797 0 1 0 1 
                                       f32_4 %799 = OpFMul %795 %798 
                                       f32_4 %800 = OpLoad %231 
                                       f32_4 %801 = OpVectorShuffle %800 %800 0 1 2 1 
                                       f32_4 %802 = OpFAdd %799 %801 
                                                      OpStore %283 %802 
                                       f32_4 %803 = OpLoad %81 
                                       f32_2 %804 = OpVectorShuffle %803 %803 0 1 
                              Uniform f32_4* %805 = OpAccessChain %40 %197 
                                       f32_4 %806 = OpLoad %805 
                                       f32_2 %807 = OpVectorShuffle %806 %806 0 1 
                                       f32_2 %808 = OpFMul %804 %807 
                                       f32_4 %809 = OpLoad %231 
                                       f32_2 %810 = OpVectorShuffle %809 %809 3 1 
                                       f32_2 %811 = OpFAdd %808 %810 
                                       f32_3 %812 = OpLoad %33 
                                       f32_3 %813 = OpVectorShuffle %812 %811 3 1 4 
                                                      OpStore %33 %813 
                                Private f32* %814 = OpAccessChain %231 %49 
                                         f32 %815 = OpLoad %814 
                                Private f32* %816 = OpAccessChain %257 %49 
                                                      OpStore %816 %815 
                                       f32_4 %817 = OpLoad %81 
                                       f32_2 %818 = OpVectorShuffle %817 %817 0 1 
                              Uniform f32_4* %819 = OpAccessChain %40 %197 
                                       f32_4 %820 = OpLoad %819 
                                       f32_2 %821 = OpVectorShuffle %820 %820 0 1 
                                       f32_2 %822 = OpFMul %818 %821 
                                       f32_4 %823 = OpLoad %257 
                                       f32_2 %824 = OpVectorShuffle %823 %823 0 1 
                                       f32_2 %825 = OpFAdd %822 %824 
                                       f32_4 %826 = OpLoad %81 
                                       f32_4 %827 = OpVectorShuffle %826 %825 4 5 2 3 
                                                      OpStore %81 %827 
                                       f32_4 %829 = OpLoad %81 
                                       f32_2 %830 = OpVectorShuffle %829 %829 0 1 
                                Private f32* %831 = OpAccessChain %9 %287 
                                         f32 %832 = OpLoad %831 
                                         f32 %833 = OpCompositeExtract %830 0 
                                         f32 %834 = OpCompositeExtract %830 1 
                                       f32_3 %835 = OpCompositeConstruct %833 %834 %832 
                                                      OpStore %828 %835 
                         read_only Texture2D %836 = OpLoad %406 
                                     sampler %837 = OpLoad %408 
                  read_only Texture2DSampled %838 = OpSampledImage %836 %837 
                                       f32_3 %839 = OpLoad %828 
                                         f32 %840 = OpCompositeExtract %839 2 
                                         f32 %841 = OpImageSampleDrefExplicitLod %838 %839 %840 Lod %6 
                                Private f32* %842 = OpAccessChain %81 %27 
                                                      OpStore %842 %841 
                                       f32_3 %844 = OpLoad %33 
                                       f32_2 %845 = OpVectorShuffle %844 %844 0 2 
                                Private f32* %846 = OpAccessChain %9 %287 
                                         f32 %847 = OpLoad %846 
                                         f32 %848 = OpCompositeExtract %845 0 
                                         f32 %849 = OpCompositeExtract %845 1 
                                       f32_3 %850 = OpCompositeConstruct %848 %849 %847 
                                                      OpStore %843 %850 
                         read_only Texture2D %851 = OpLoad %406 
                                     sampler %852 = OpLoad %408 
                  read_only Texture2DSampled %853 = OpSampledImage %851 %852 
                                       f32_3 %854 = OpLoad %843 
                                         f32 %855 = OpCompositeExtract %854 2 
                                         f32 %856 = OpImageSampleDrefExplicitLod %853 %854 %855 Lod %6 
                                Private f32* %857 = OpAccessChain %33 %27 
                                                      OpStore %857 %856 
                                       f32_4 %859 = OpLoad %283 
                                       f32_2 %860 = OpVectorShuffle %859 %859 0 1 
                                Private f32* %861 = OpAccessChain %9 %287 
                                         f32 %862 = OpLoad %861 
                                         f32 %863 = OpCompositeExtract %860 0 
                                         f32 %864 = OpCompositeExtract %860 1 
                                       f32_3 %865 = OpCompositeConstruct %863 %864 %862 
                                                      OpStore %858 %865 
                         read_only Texture2D %866 = OpLoad %406 
                                     sampler %867 = OpLoad %408 
                  read_only Texture2DSampled %868 = OpSampledImage %866 %867 
                                       f32_3 %869 = OpLoad %858 
                                         f32 %870 = OpCompositeExtract %869 2 
                                         f32 %871 = OpImageSampleDrefExplicitLod %868 %869 %870 Lod %6 
                                                      OpStore %556 %871 
                                       f32_4 %873 = OpLoad %283 
                                       f32_2 %874 = OpVectorShuffle %873 %873 2 3 
                                Private f32* %875 = OpAccessChain %9 %287 
                                         f32 %876 = OpLoad %875 
                                         f32 %877 = OpCompositeExtract %874 0 
                                         f32 %878 = OpCompositeExtract %874 1 
                                       f32_3 %879 = OpCompositeConstruct %877 %878 %876 
                                                      OpStore %872 %879 
                         read_only Texture2D %880 = OpLoad %406 
                                     sampler %881 = OpLoad %408 
                  read_only Texture2DSampled %882 = OpSampledImage %880 %881 
                                       f32_3 %883 = OpLoad %872 
                                         f32 %884 = OpCompositeExtract %883 2 
                                         f32 %885 = OpImageSampleDrefExplicitLod %882 %883 %884 Lod %6 
                                                      OpStore %59 %885 
                                Private f32* %886 = OpAccessChain %264 %27 
                                         f32 %887 = OpLoad %886 
                                         f32 %888 = OpLoad %556 
                                         f32 %889 = OpFMul %887 %888 
                                Private f32* %890 = OpAccessChain %9 %27 
                                         f32 %891 = OpLoad %890 
                                         f32 %892 = OpFAdd %889 %891 
                                Private f32* %893 = OpAccessChain %9 %27 
                                                      OpStore %893 %892 
                                Private f32* %894 = OpAccessChain %264 %49 
                                         f32 %895 = OpLoad %894 
                                         f32 %896 = OpLoad %59 
                                         f32 %897 = OpFMul %895 %896 
                                Private f32* %898 = OpAccessChain %9 %27 
                                         f32 %899 = OpLoad %898 
                                         f32 %900 = OpFAdd %897 %899 
                                Private f32* %901 = OpAccessChain %9 %27 
                                                      OpStore %901 %900 
                                Private f32* %902 = OpAccessChain %264 %287 
                                         f32 %903 = OpLoad %902 
                                Private f32* %904 = OpAccessChain %33 %27 
                                         f32 %905 = OpLoad %904 
                                         f32 %906 = OpFMul %903 %905 
                                Private f32* %907 = OpAccessChain %9 %27 
                                         f32 %908 = OpLoad %907 
                                         f32 %909 = OpFAdd %906 %908 
                                Private f32* %910 = OpAccessChain %9 %27 
                                                      OpStore %910 %909 
                                Private f32* %911 = OpAccessChain %264 %67 
                                         f32 %912 = OpLoad %911 
                                Private f32* %913 = OpAccessChain %81 %27 
                                         f32 %914 = OpLoad %913 
                                         f32 %915 = OpFMul %912 %914 
                                Private f32* %916 = OpAccessChain %9 %27 
                                         f32 %917 = OpLoad %916 
                                         f32 %918 = OpFAdd %915 %917 
                                Private f32* %919 = OpAccessChain %9 %27 
                                                      OpStore %919 %918 
                                Uniform f32* %921 = OpAccessChain %40 %920 %27 
                                         f32 %922 = OpLoad %921 
                                         f32 %923 = OpFNegate %922 
                                         f32 %924 = OpFAdd %923 %54 
                                Private f32* %925 = OpAccessChain %33 %27 
                                                      OpStore %925 %924 
                                       f32_4 %928 = OpLoad %9 
                                       f32_4 %929 = OpVectorShuffle %928 %928 0 0 0 0 
                                       f32_3 %930 = OpLoad %33 
                                       f32_4 %931 = OpVectorShuffle %930 %930 0 0 0 0 
                                       f32_4 %932 = OpFMul %929 %931 
                              Uniform f32_4* %933 = OpAccessChain %40 %920 
                                       f32_4 %934 = OpLoad %933 
                                       f32_4 %935 = OpVectorShuffle %934 %934 0 0 0 0 
                                       f32_4 %936 = OpFAdd %932 %935 
                                                      OpStore %927 %936 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
}
Program "fp" {
SubProgram "d3d11 " {
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
""
}
SubProgram "vulkan " {
""
}
SubProgram "d3d11 " {
Keywords { "SHADOWS_SPLIT_SPHERES" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "SHADOWS_SPLIT_SPHERES" }
""
}
SubProgram "vulkan " {
Keywords { "SHADOWS_SPLIT_SPHERES" }
""
}
SubProgram "d3d11 " {
Keywords { "SHADOWS_SINGLE_CASCADE" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "SHADOWS_SINGLE_CASCADE" }
""
}
SubProgram "vulkan " {
Keywords { "SHADOWS_SINGLE_CASCADE" }
""
}
SubProgram "d3d11 " {
Keywords { "SHADOWS_SINGLE_CASCADE" "SHADOWS_SPLIT_SPHERES" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "SHADOWS_SINGLE_CASCADE" "SHADOWS_SPLIT_SPHERES" }
""
}
SubProgram "vulkan " {
Keywords { "SHADOWS_SINGLE_CASCADE" "SHADOWS_SPLIT_SPHERES" }
""
}
}
}
}
SubShader {
 Tags { "ShadowmapFilter" = "PCF_SOFT_FORCE_INV_PROJECTION_IN_PS" }
 Pass {
  Tags { "ShadowmapFilter" = "PCF_SOFT_FORCE_INV_PROJECTION_IN_PS" }
  ZTest Always
  ZWrite Off
  Cull Off
  GpuProgramID 202046
Program "vp" {
SubProgram "d3d11 " {
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraInvProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in  vec4 in_POSITION0;
in  vec2 in_TEXCOORD0;
in  vec3 in_TEXCOORD1;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_CameraInvProjection[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_CameraInvProjection[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    vs_TEXCOORD0.zw = u_xlat1.zz + u_xlat1.xw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = in_TEXCOORD1.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-hlslcc_mtx4x4unity_CameraInvProjection[2].xyz);
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[2].xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;
    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;
    u_xlat1.w = (-u_xlat1.z);
    vs_TEXCOORD2.xyz = u_xlat1.xyw;
    u_xlat0.w = (-u_xlat0.z);
    vs_TEXCOORD3.xyz = u_xlat0.xyw;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_CameraInvProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	vec4 _LightShadowData;
uniform 	vec4 _ShadowMapTexture_TexelSize;
UNITY_LOCATION(0) uniform  sampler2D _CameraDepthTexture;
UNITY_LOCATION(1) uniform  sampler2D _ShadowMapTexture;
UNITY_LOCATION(2) uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
in  vec4 vs_TEXCOORD0;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
bvec4 u_xlatb1;
vec4 u_xlat2;
bvec4 u_xlatb2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
vec4 u_xlat6;
vec4 u_xlat7;
vec3 u_xlat8;
float u_xlat16;
vec2 u_xlat17;
float u_xlat24;
void main()
{
    u_xlat0 = texture(_CameraDepthTexture, vs_TEXCOORD0.xy).yzxw;
    u_xlat0.xy = vs_TEXCOORD0.zw;
    u_xlat0.xyz = u_xlat0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_CameraInvProjection[1];
    u_xlat1 = hlslcc_mtx4x4unity_CameraInvProjection[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_CameraInvProjection[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_CameraInvProjection[3];
    u_xlat0.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlatb1 = greaterThanEqual((-u_xlat0.zzzz), _LightSplitsNear);
    u_xlat1.x = u_xlatb1.x ? float(1.0) : 0.0;
    u_xlat1.y = u_xlatb1.y ? float(1.0) : 0.0;
    u_xlat1.z = u_xlatb1.z ? float(1.0) : 0.0;
    u_xlat1.w = u_xlatb1.w ? float(1.0) : 0.0;
;
    u_xlatb2 = lessThan((-u_xlat0.zzzz), _LightSplitsFar);
    u_xlat2.x = u_xlatb2.x ? float(1.0) : 0.0;
    u_xlat2.y = u_xlatb2.y ? float(1.0) : 0.0;
    u_xlat2.z = u_xlatb2.z ? float(1.0) : 0.0;
    u_xlat2.w = u_xlatb2.w ? float(1.0) : 0.0;
;
    u_xlat1 = u_xlat1 * u_xlat2;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4unity_CameraToWorld[1];
    u_xlat2 = hlslcc_mtx4x4unity_CameraToWorld[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4unity_CameraToWorld[2] * (-u_xlat0.zzzz) + u_xlat2;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_CameraToWorld[3];
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[5].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[4].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[6].xyz * u_xlat0.zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[7].xyz * u_xlat0.www + u_xlat2.xyz;
    u_xlat2.xyz = u_xlat1.yyy * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * u_xlat0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * u_xlat0.zzz + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[3].xyz * u_xlat0.www + u_xlat3.xyz;
    u_xlat2.xyz = u_xlat3.xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat3.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[9].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[8].xyz * u_xlat0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[10].xyz * u_xlat0.zzz + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[11].xyz * u_xlat0.www + u_xlat3.xyz;
    u_xlat1.xyz = u_xlat3.xyz * u_xlat1.zzz + u_xlat2.xyz;
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[13].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[12].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[14].xyz * u_xlat0.zzz + u_xlat2.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[15].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat1.xy = u_xlat0.xy * _ShadowMapTexture_TexelSize.zw + vec2(0.5, 0.5);
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlat0.xy = u_xlat0.xy * _ShadowMapTexture_TexelSize.zw + (-u_xlat1.xy);
    u_xlat17.xy = (-u_xlat0.xy) + vec2(1.0, 1.0);
    u_xlat2.xy = min(u_xlat0.xy, vec2(0.0, 0.0));
    u_xlat17.xy = (-u_xlat2.xy) * u_xlat2.xy + u_xlat17.xy;
    u_xlat17.xy = u_xlat17.xy + vec2(2.0, 2.0);
    u_xlat2.xy = u_xlat17.xy * vec2(0.0816320032, 0.0816320032);
    u_xlat3.y = u_xlat2.x;
    u_xlat17.xy = max(u_xlat0.xy, vec2(0.0, 0.0));
    u_xlat4 = u_xlat0.xxyy + vec4(0.5, 1.0, 0.5, 1.0);
    u_xlat17.xy = (-u_xlat17.xy) * u_xlat17.xy + u_xlat4.yw;
    u_xlat4 = u_xlat4.xxzz * u_xlat4.xxzz;
    u_xlat17.xy = u_xlat17.xy + vec2(2.0, 2.0);
    u_xlat5.z = u_xlat17.x * 0.0816320032;
    u_xlat6.z = u_xlat17.y * 0.0816320032;
    u_xlat17.xy = u_xlat4.xz * vec2(0.5, 0.5) + (-u_xlat0.xy);
    u_xlat4.xy = u_xlat4.yw * vec2(0.0408160016, 0.0408160016);
    u_xlat6.xy = u_xlat17.yx * vec2(0.0816320032, 0.0816320032);
    u_xlat5.x = u_xlat6.y;
    u_xlat5.yw = u_xlat0.xx * vec2(-0.0816320032, 0.0816320032) + vec2(0.163264006, 0.0816320032);
    u_xlat3.xz = u_xlat0.xx * vec2(-0.0816320032, 0.0816320032) + vec2(0.0816320032, 0.163264006);
    u_xlat3.w = u_xlat4.x;
    u_xlat2.w = u_xlat4.y;
    u_xlat4 = u_xlat3 + u_xlat5;
    u_xlat3 = u_xlat3 / u_xlat4;
    u_xlat3 = u_xlat3 + vec4(-3.5, -1.5, 0.5, 2.5);
    u_xlat3 = u_xlat3.wxyz * _ShadowMapTexture_TexelSize.xxxx;
    u_xlat5.xzw = u_xlat3.yzw;
    u_xlat6.yw = u_xlat0.yy * vec2(-0.0816320032, 0.0816320032) + vec2(0.163264006, 0.0816320032);
    u_xlat2.xz = u_xlat0.yy * vec2(-0.0816320032, 0.0816320032) + vec2(0.0816320032, 0.163264006);
    u_xlat6 = u_xlat2 + u_xlat6;
    u_xlat2 = u_xlat2 / u_xlat6;
    u_xlat2 = u_xlat2 + vec4(-3.5, -1.5, 0.5, 2.5);
    u_xlat2 = u_xlat2.xwyz * _ShadowMapTexture_TexelSize.yyyy;
    u_xlat5.y = u_xlat2.x;
    u_xlat7 = u_xlat1.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat5.xyzy;
    vec3 txVec0 = vec3(u_xlat7.zw,u_xlat0.z);
    u_xlat0.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
    vec3 txVec1 = vec3(u_xlat7.xy,u_xlat0.z);
    u_xlat8.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec1, 0.0);
    u_xlat7 = u_xlat4 * u_xlat6.xxxx;
    u_xlat0.x = u_xlat0.x * u_xlat7.y;
    u_xlat0.x = u_xlat7.x * u_xlat8.x + u_xlat0.x;
    u_xlat8.xz = u_xlat1.xy * _ShadowMapTexture_TexelSize.xy + u_xlat5.wy;
    u_xlat3.y = u_xlat5.y;
    u_xlat17.xy = u_xlat1.xy * _ShadowMapTexture_TexelSize.xy + u_xlat3.xy;
    vec3 txVec2 = vec3(u_xlat17.xy,u_xlat0.z);
    u_xlat17.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec2, 0.0);
    vec3 txVec3 = vec3(u_xlat8.xz,u_xlat0.z);
    u_xlat8.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec3, 0.0);
    u_xlat0.x = u_xlat7.z * u_xlat8.x + u_xlat0.x;
    u_xlat0.x = u_xlat7.w * u_xlat17.x + u_xlat0.x;
    u_xlat5.y = u_xlat2.z;
    u_xlat7 = u_xlat1.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat5.xyzy;
    vec3 txVec4 = vec3(u_xlat7.xy,u_xlat0.z);
    u_xlat8.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec4, 0.0);
    vec3 txVec5 = vec3(u_xlat7.zw,u_xlat0.z);
    u_xlat24 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec5, 0.0);
    u_xlat7 = u_xlat4 * u_xlat6.yyyy;
    u_xlat0.x = u_xlat7.x * u_xlat8.x + u_xlat0.x;
    u_xlat0.x = u_xlat7.y * u_xlat24 + u_xlat0.x;
    u_xlat8.xz = u_xlat1.xy * _ShadowMapTexture_TexelSize.xy + u_xlat5.wy;
    u_xlat3.z = u_xlat5.y;
    u_xlat17.xy = u_xlat1.xy * _ShadowMapTexture_TexelSize.xy + u_xlat3.xz;
    vec3 txVec6 = vec3(u_xlat17.xy,u_xlat0.z);
    u_xlat17.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec6, 0.0);
    vec3 txVec7 = vec3(u_xlat8.xz,u_xlat0.z);
    u_xlat8.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec7, 0.0);
    u_xlat0.x = u_xlat7.z * u_xlat8.x + u_xlat0.x;
    u_xlat0.x = u_xlat7.w * u_xlat17.x + u_xlat0.x;
    u_xlat5.y = u_xlat2.w;
    u_xlat7 = u_xlat1.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat5.xyzy;
    vec3 txVec8 = vec3(u_xlat7.xy,u_xlat0.z);
    u_xlat8.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec8, 0.0);
    vec3 txVec9 = vec3(u_xlat7.zw,u_xlat0.z);
    u_xlat24 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec9, 0.0);
    u_xlat7 = u_xlat4 * u_xlat6.zzzz;
    u_xlat4 = u_xlat4 * u_xlat6.wwww;
    u_xlat0.x = u_xlat7.x * u_xlat8.x + u_xlat0.x;
    u_xlat0.x = u_xlat7.y * u_xlat24 + u_xlat0.x;
    u_xlat8.xz = u_xlat1.xy * _ShadowMapTexture_TexelSize.xy + u_xlat5.wy;
    u_xlat2.xzw = u_xlat5.xzw;
    u_xlat3.w = u_xlat5.y;
    u_xlat17.xy = u_xlat1.xy * _ShadowMapTexture_TexelSize.xy + u_xlat3.xw;
    vec3 txVec10 = vec3(u_xlat17.xy,u_xlat0.z);
    u_xlat17.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec10, 0.0);
    vec3 txVec11 = vec3(u_xlat8.xz,u_xlat0.z);
    u_xlat8.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec11, 0.0);
    u_xlat0.x = u_xlat7.z * u_xlat8.x + u_xlat0.x;
    u_xlat0.x = u_xlat7.w * u_xlat17.x + u_xlat0.x;
    u_xlat5 = u_xlat1.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat2.xyzy;
    u_xlat8.xz = u_xlat1.xy * _ShadowMapTexture_TexelSize.xy + u_xlat2.wy;
    u_xlat3.y = u_xlat2.y;
    u_xlat1.xy = u_xlat1.xy * _ShadowMapTexture_TexelSize.xy + u_xlat3.xy;
    vec3 txVec12 = vec3(u_xlat1.xy,u_xlat0.z);
    u_xlat1.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec12, 0.0);
    vec3 txVec13 = vec3(u_xlat8.xz,u_xlat0.z);
    u_xlat8.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec13, 0.0);
    vec3 txVec14 = vec3(u_xlat5.xy,u_xlat0.z);
    u_xlat24 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec14, 0.0);
    vec3 txVec15 = vec3(u_xlat5.zw,u_xlat0.z);
    u_xlat16 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec15, 0.0);
    u_xlat0.x = u_xlat4.x * u_xlat24 + u_xlat0.x;
    u_xlat0.x = u_xlat4.y * u_xlat16 + u_xlat0.x;
    u_xlat0.x = u_xlat4.z * u_xlat8.x + u_xlat0.x;
    u_xlat0.x = u_xlat4.w * u_xlat1.x + u_xlat0.x;
    u_xlat8.x = (-_LightShadowData.x) + 1.0;
    SV_Target0 = u_xlat0.xxxx * u_xlat8.xxxx + _LightShadowData.xxxx;
    return;
}

#endif
"
}
SubProgram "vulkan " {
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 193
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %80 %119 %129 %134 %136 %177 %184 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpMemberDecorate %78 0 BuiltIn 78 
                                                      OpMemberDecorate %78 1 BuiltIn 78 
                                                      OpMemberDecorate %78 2 BuiltIn 78 
                                                      OpDecorate %78 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 119 
                                                      OpDecorate %129 Location 129 
                                                      OpDecorate vs_TEXCOORD1 Location 134 
                                                      OpDecorate %136 Location 136 
                                                      OpDecorate vs_TEXCOORD2 Location 177 
                                                      OpDecorate vs_TEXCOORD3 Location 184 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %16 %17 %18 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4];}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 2 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %29 = OpConstant 0 
                                          i32 %45 = OpConstant 3 
                               Private f32_4* %49 = OpVariable Private 
                                          u32 %76 = OpConstant 1 
                                              %77 = OpTypeArray %6 %76 
                                              %78 = OpTypeStruct %7 %6 %77 
                                              %79 = OpTypePointer Output %78 
         Output struct {f32_4; f32; f32[1];}* %80 = OpVariable Output 
                                              %82 = OpTypePointer Output %7 
                                              %84 = OpTypePointer Private %6 
                                          u32 %87 = OpConstant 0 
                                              %88 = OpTypePointer Uniform %6 
                                              %93 = OpTypeVector %6 3 
                                          f32 %96 = OpConstant 3.674022E-40 
                                        f32_3 %97 = OpConstantComposite %96 %96 %96 
                                             %101 = OpTypePointer Private %93 
                              Private f32_3* %102 = OpVariable Private 
                       Output f32_4* vs_TEXCOORD0 = OpVariable Output 
                                             %120 = OpTypeVector %6 2 
                                             %128 = OpTypePointer Input %120 
                                Input f32_2* %129 = OpVariable Input 
                                             %133 = OpTypePointer Output %93 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                                             %135 = OpTypePointer Input %93 
                                Input f32_3* %136 = OpVariable Input 
                                         u32 %171 = OpConstant 2 
                                         u32 %175 = OpConstant 3 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                       Output f32_3* vs_TEXCOORD3 = OpVariable Output 
                                             %187 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %30 = OpAccessChain %21 %23 %29 
                                        f32_4 %31 = OpLoad %30 
                                        f32_4 %32 = OpLoad %11 
                                        f32_4 %33 = OpVectorShuffle %32 %32 0 0 0 0 
                                        f32_4 %34 = OpFMul %31 %33 
                                        f32_4 %35 = OpLoad %9 
                                        f32_4 %36 = OpFAdd %34 %35 
                                                      OpStore %9 %36 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %23 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %44 = OpLoad %9 
                               Uniform f32_4* %46 = OpAccessChain %21 %23 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_4 %48 = OpFAdd %44 %47 
                                                      OpStore %9 %48 
                                        f32_4 %50 = OpLoad %9 
                                        f32_4 %51 = OpVectorShuffle %50 %50 1 1 1 1 
                               Uniform f32_4* %52 = OpAccessChain %21 %45 %24 
                                        f32_4 %53 = OpLoad %52 
                                        f32_4 %54 = OpFMul %51 %53 
                                                      OpStore %49 %54 
                               Uniform f32_4* %55 = OpAccessChain %21 %45 %29 
                                        f32_4 %56 = OpLoad %55 
                                        f32_4 %57 = OpLoad %9 
                                        f32_4 %58 = OpVectorShuffle %57 %57 0 0 0 0 
                                        f32_4 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %49 
                                        f32_4 %61 = OpFAdd %59 %60 
                                                      OpStore %49 %61 
                               Uniform f32_4* %62 = OpAccessChain %21 %45 %23 
                                        f32_4 %63 = OpLoad %62 
                                        f32_4 %64 = OpLoad %9 
                                        f32_4 %65 = OpVectorShuffle %64 %64 2 2 2 2 
                                        f32_4 %66 = OpFMul %63 %65 
                                        f32_4 %67 = OpLoad %49 
                                        f32_4 %68 = OpFAdd %66 %67 
                                                      OpStore %49 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %45 %45 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %9 
                                        f32_4 %72 = OpVectorShuffle %71 %71 3 3 3 3 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %49 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %9 %75 
                                        f32_4 %81 = OpLoad %9 
                                Output f32_4* %83 = OpAccessChain %80 %29 
                                                      OpStore %83 %81 
                                 Private f32* %85 = OpAccessChain %9 %76 
                                          f32 %86 = OpLoad %85 
                                 Uniform f32* %89 = OpAccessChain %21 %29 %87 
                                          f32 %90 = OpLoad %89 
                                          f32 %91 = OpFMul %86 %90 
                                 Private f32* %92 = OpAccessChain %9 %76 
                                                      OpStore %92 %91 
                                        f32_4 %94 = OpLoad %9 
                                        f32_3 %95 = OpVectorShuffle %94 %94 0 3 1 
                                        f32_3 %98 = OpFMul %95 %97 
                                        f32_4 %99 = OpLoad %49 
                                       f32_4 %100 = OpVectorShuffle %99 %98 4 1 5 6 
                                                      OpStore %49 %100 
                                       f32_4 %103 = OpLoad %9 
                                       f32_3 %104 = OpVectorShuffle %103 %103 1 1 1 
                              Uniform f32_4* %105 = OpAccessChain %21 %24 %24 
                                       f32_4 %106 = OpLoad %105 
                                       f32_3 %107 = OpVectorShuffle %106 %106 0 1 2 
                                       f32_3 %108 = OpFMul %104 %107 
                                                      OpStore %102 %108 
                              Uniform f32_4* %109 = OpAccessChain %21 %24 %29 
                                       f32_4 %110 = OpLoad %109 
                                       f32_3 %111 = OpVectorShuffle %110 %110 0 1 2 
                                       f32_4 %112 = OpLoad %9 
                                       f32_3 %113 = OpVectorShuffle %112 %112 0 0 0 
                                       f32_3 %114 = OpFMul %111 %113 
                                       f32_3 %115 = OpLoad %102 
                                       f32_3 %116 = OpFAdd %114 %115 
                                       f32_4 %117 = OpLoad %9 
                                       f32_4 %118 = OpVectorShuffle %117 %116 4 5 6 3 
                                                      OpStore %9 %118 
                                       f32_4 %121 = OpLoad %49 
                                       f32_2 %122 = OpVectorShuffle %121 %121 2 2 
                                       f32_4 %123 = OpLoad %49 
                                       f32_2 %124 = OpVectorShuffle %123 %123 0 3 
                                       f32_2 %125 = OpFAdd %122 %124 
                                       f32_4 %126 = OpLoad vs_TEXCOORD0 
                                       f32_4 %127 = OpVectorShuffle %126 %125 0 1 4 5 
                                                      OpStore vs_TEXCOORD0 %127 
                                       f32_2 %130 = OpLoad %129 
                                       f32_4 %131 = OpLoad vs_TEXCOORD0 
                                       f32_4 %132 = OpVectorShuffle %131 %130 4 5 2 3 
                                                      OpStore vs_TEXCOORD0 %132 
                                       f32_3 %137 = OpLoad %136 
                                                      OpStore vs_TEXCOORD1 %137 
                                       f32_4 %138 = OpLoad %9 
                                       f32_3 %139 = OpVectorShuffle %138 %138 0 1 2 
                              Uniform f32_4* %140 = OpAccessChain %21 %24 %23 
                                       f32_4 %141 = OpLoad %140 
                                       f32_3 %142 = OpVectorShuffle %141 %141 0 1 2 
                                       f32_3 %143 = OpFNegate %142 
                                       f32_3 %144 = OpFAdd %139 %143 
                                       f32_4 %145 = OpLoad %49 
                                       f32_4 %146 = OpVectorShuffle %145 %144 4 5 6 3 
                                                      OpStore %49 %146 
                                       f32_4 %147 = OpLoad %9 
                                       f32_3 %148 = OpVectorShuffle %147 %147 0 1 2 
                              Uniform f32_4* %149 = OpAccessChain %21 %24 %23 
                                       f32_4 %150 = OpLoad %149 
                                       f32_3 %151 = OpVectorShuffle %150 %150 0 1 2 
                                       f32_3 %152 = OpFAdd %148 %151 
                                       f32_4 %153 = OpLoad %9 
                                       f32_4 %154 = OpVectorShuffle %153 %152 4 5 6 3 
                                                      OpStore %9 %154 
                                       f32_4 %155 = OpLoad %9 
                                       f32_3 %156 = OpVectorShuffle %155 %155 0 1 2 
                              Uniform f32_4* %157 = OpAccessChain %21 %24 %45 
                                       f32_4 %158 = OpLoad %157 
                                       f32_3 %159 = OpVectorShuffle %158 %158 0 1 2 
                                       f32_3 %160 = OpFAdd %156 %159 
                                       f32_4 %161 = OpLoad %9 
                                       f32_4 %162 = OpVectorShuffle %161 %160 4 5 6 3 
                                                      OpStore %9 %162 
                                       f32_4 %163 = OpLoad %49 
                                       f32_3 %164 = OpVectorShuffle %163 %163 0 1 2 
                              Uniform f32_4* %165 = OpAccessChain %21 %24 %45 
                                       f32_4 %166 = OpLoad %165 
                                       f32_3 %167 = OpVectorShuffle %166 %166 0 1 2 
                                       f32_3 %168 = OpFAdd %164 %167 
                                       f32_4 %169 = OpLoad %49 
                                       f32_4 %170 = OpVectorShuffle %169 %168 4 5 6 3 
                                                      OpStore %49 %170 
                                Private f32* %172 = OpAccessChain %49 %171 
                                         f32 %173 = OpLoad %172 
                                         f32 %174 = OpFNegate %173 
                                Private f32* %176 = OpAccessChain %49 %175 
                                                      OpStore %176 %174 
                                       f32_4 %178 = OpLoad %49 
                                       f32_3 %179 = OpVectorShuffle %178 %178 0 1 3 
                                                      OpStore vs_TEXCOORD2 %179 
                                Private f32* %180 = OpAccessChain %9 %171 
                                         f32 %181 = OpLoad %180 
                                         f32 %182 = OpFNegate %181 
                                Private f32* %183 = OpAccessChain %9 %175 
                                                      OpStore %183 %182 
                                       f32_4 %185 = OpLoad %9 
                                       f32_3 %186 = OpVectorShuffle %185 %185 0 1 3 
                                                      OpStore vs_TEXCOORD3 %186 
                                 Output f32* %188 = OpAccessChain %80 %29 %76 
                                         f32 %189 = OpLoad %188 
                                         f32 %190 = OpFNegate %189 
                                 Output f32* %191 = OpAccessChain %80 %29 %76 
                                                      OpStore %191 %190 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 1131
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %21 %1120 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpDecorate %12 DescriptorSet 12 
                                                      OpDecorate %12 Binding 12 
                                                      OpDecorate %16 DescriptorSet 16 
                                                      OpDecorate %16 Binding 16 
                                                      OpDecorate vs_TEXCOORD0 Location 21 
                                                      OpDecorate %57 ArrayStride 57 
                                                      OpDecorate %58 ArrayStride 58 
                                                      OpDecorate %60 ArrayStride 60 
                                                      OpMemberDecorate %61 0 Offset 61 
                                                      OpMemberDecorate %61 1 Offset 61 
                                                      OpMemberDecorate %61 2 Offset 61 
                                                      OpMemberDecorate %61 3 Offset 61 
                                                      OpMemberDecorate %61 4 Offset 61 
                                                      OpMemberDecorate %61 5 Offset 61 
                                                      OpMemberDecorate %61 6 Offset 61 
                                                      OpDecorate %61 Block 
                                                      OpDecorate %63 DescriptorSet 63 
                                                      OpDecorate %63 Binding 63 
                                                      OpDecorate %617 DescriptorSet 617 
                                                      OpDecorate %617 Binding 617 
                                                      OpDecorate %619 DescriptorSet 619 
                                                      OpDecorate %619 Binding 619 
                                                      OpDecorate %1120 Location 1120 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypePointer UniformConstant %10 
         UniformConstant read_only Texture2D* %12 = OpVariable UniformConstant 
                                              %14 = OpTypeSampler 
                                              %15 = OpTypePointer UniformConstant %14 
                     UniformConstant sampler* %16 = OpVariable UniformConstant 
                                              %18 = OpTypeSampledImage %10 
                                              %20 = OpTypePointer Input %7 
                        Input f32_4* vs_TEXCOORD0 = OpVariable Input 
                                              %22 = OpTypeVector %6 2 
                                              %26 = OpTypeInt 32 0 
                                          u32 %27 = OpConstant 0 
                                              %29 = OpTypePointer Private %6 
                                          f32 %34 = OpConstant 3.674022E-40 
                                          u32 %36 = OpConstant 2 
                                              %42 = OpTypeVector %6 3 
                                          f32 %45 = OpConstant 3.674022E-40 
                                        f32_3 %46 = OpConstantComposite %45 %45 %45 
                                          f32 %48 = OpConstant 3.674022E-40 
                                        f32_3 %49 = OpConstantComposite %48 %48 %48 
                               Private f32_4* %53 = OpVariable Private 
                                          u32 %56 = OpConstant 4 
                                              %57 = OpTypeArray %7 %56 
                                              %58 = OpTypeArray %7 %56 
                                          u32 %59 = OpConstant 16 
                                              %60 = OpTypeArray %7 %59 
                                              %61 = OpTypeStruct %57 %58 %7 %7 %60 %7 %7 
                                              %62 = OpTypePointer Uniform %61 
Uniform struct {f32_4[4]; f32_4[4]; f32_4; f32_4; f32_4[16]; f32_4; f32_4;}* %63 = OpVariable Uniform 
                                              %64 = OpTypeInt 32 1 
                                          i32 %65 = OpConstant 0 
                                          i32 %66 = OpConstant 1 
                                              %67 = OpTypePointer Uniform %7 
                                          i32 %78 = OpConstant 2 
                                          i32 %87 = OpConstant 3 
                                              %98 = OpTypeBool 
                                              %99 = OpTypeVector %98 4 
                                             %100 = OpTypePointer Private %99 
                             Private bool_4* %101 = OpVariable Private 
                                             %108 = OpTypePointer Private %98 
                                         f32 %111 = OpConstant 3.674022E-40 
                                         u32 %114 = OpConstant 1 
                                         u32 %123 = OpConstant 3 
                             Private bool_4* %128 = OpVariable Private 
                              Private f32_4* %135 = OpVariable Private 
                                         i32 %181 = OpConstant 4 
                                         i32 %182 = OpConstant 5 
                                         i32 %200 = OpConstant 6 
                                         i32 %212 = OpConstant 7 
                              Private f32_4* %231 = OpVariable Private 
                                         i32 %285 = OpConstant 9 
                                         i32 %292 = OpConstant 8 
                                         i32 %304 = OpConstant 10 
                                         i32 %316 = OpConstant 11 
                                         i32 %340 = OpConstant 13 
                                         i32 %347 = OpConstant 12 
                                         i32 %359 = OpConstant 14 
                                         i32 %371 = OpConstant 15 
                                Private f32* %393 = OpVariable Private 
                                       f32_4 %395 = OpConstantComposite %34 %34 %34 %34 
                                Private f32* %397 = OpVariable Private 
                                         f32 %411 = OpConstant 3.674022E-40 
                                       f32_2 %412 = OpConstantComposite %411 %411 
                                             %433 = OpTypePointer Private %22 
                              Private f32_2* %434 = OpVariable Private 
                                       f32_2 %438 = OpConstantComposite %34 %34 
                                       f32_2 %442 = OpConstantComposite %111 %111 
                                       f32_2 %455 = OpConstantComposite %45 %45 
                                         f32 %458 = OpConstant 3.674022E-40 
                                       f32_2 %459 = OpConstantComposite %458 %458 
                              Private f32_4* %469 = OpVariable Private 
                                       f32_4 %472 = OpConstantComposite %411 %34 %411 %34 
                              Private f32_4* %488 = OpVariable Private 
                              Private f32_4* %493 = OpVariable Private 
                                         f32 %507 = OpConstant 3.674022E-40 
                                       f32_2 %508 = OpConstantComposite %507 %507 
                                         f32 %522 = OpConstant 3.674022E-40 
                                       f32_2 %523 = OpConstantComposite %522 %458 
                                         f32 %525 = OpConstant 3.674022E-40 
                                       f32_2 %526 = OpConstantComposite %525 %458 
                                       f32_2 %533 = OpConstantComposite %458 %525 
                                         f32 %550 = OpConstant 3.674022E-40 
                                         f32 %551 = OpConstant 3.674022E-40 
                                         f32 %552 = OpConstant 3.674022E-40 
                                       f32_4 %553 = OpConstantComposite %550 %551 %411 %552 
                              Private f32_4* %591 = OpVariable Private 
                              Private f32_4* %599 = OpVariable Private 
                                             %609 = OpTypePointer Function %42 
        UniformConstant read_only Texture2D* %617 = OpVariable UniformConstant 
                    UniformConstant sampler* %619 = OpVariable UniformConstant 
                                             %621 = OpTypeImage %6 Dim2D 1 0 0 1 Unknown 
                                             %622 = OpTypeSampledImage %621 
                                             %635 = OpTypePointer Private %42 
                              Private f32_3* %636 = OpVariable Private 
                                            %1113 = OpTypePointer Uniform %6 
                                            %1119 = OpTypePointer Output %7 
                              Output f32_4* %1120 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %610 = OpVariable Function 
                             Function f32_3* %628 = OpVariable Function 
                             Function f32_3* %682 = OpVariable Function 
                             Function f32_3* %695 = OpVariable Function 
                             Function f32_3* %743 = OpVariable Function 
                             Function f32_3* %757 = OpVariable Function 
                             Function f32_3* %810 = OpVariable Function 
                             Function f32_3* %823 = OpVariable Function 
                             Function f32_3* %875 = OpVariable Function 
                             Function f32_3* %889 = OpVariable Function 
                             Function f32_3* %946 = OpVariable Function 
                             Function f32_3* %959 = OpVariable Function 
                            Function f32_3* %1025 = OpVariable Function 
                            Function f32_3* %1039 = OpVariable Function 
                            Function f32_3* %1053 = OpVariable Function 
                            Function f32_3* %1066 = OpVariable Function 
                          read_only Texture2D %13 = OpLoad %12 
                                      sampler %17 = OpLoad %16 
                   read_only Texture2DSampled %19 = OpSampledImage %13 %17 
                                        f32_4 %23 = OpLoad vs_TEXCOORD0 
                                        f32_2 %24 = OpVectorShuffle %23 %23 0 1 
                                        f32_4 %25 = OpImageSampleImplicitLod %19 %24 
                                          f32 %28 = OpCompositeExtract %25 0 
                                 Private f32* %30 = OpAccessChain %9 %27 
                                                      OpStore %30 %28 
                                 Private f32* %31 = OpAccessChain %9 %27 
                                          f32 %32 = OpLoad %31 
                                          f32 %33 = OpFNegate %32 
                                          f32 %35 = OpFAdd %33 %34 
                                 Private f32* %37 = OpAccessChain %9 %36 
                                                      OpStore %37 %35 
                                        f32_4 %38 = OpLoad vs_TEXCOORD0 
                                        f32_2 %39 = OpVectorShuffle %38 %38 2 3 
                                        f32_4 %40 = OpLoad %9 
                                        f32_4 %41 = OpVectorShuffle %40 %39 4 5 2 3 
                                                      OpStore %9 %41 
                                        f32_4 %43 = OpLoad %9 
                                        f32_3 %44 = OpVectorShuffle %43 %43 0 1 2 
                                        f32_3 %47 = OpFMul %44 %46 
                                        f32_3 %50 = OpFAdd %47 %49 
                                        f32_4 %51 = OpLoad %9 
                                        f32_4 %52 = OpVectorShuffle %51 %50 4 5 6 3 
                                                      OpStore %9 %52 
                                        f32_4 %54 = OpLoad %9 
                                        f32_4 %55 = OpVectorShuffle %54 %54 1 1 1 1 
                               Uniform f32_4* %68 = OpAccessChain %63 %65 %66 
                                        f32_4 %69 = OpLoad %68 
                                        f32_4 %70 = OpFMul %55 %69 
                                                      OpStore %53 %70 
                               Uniform f32_4* %71 = OpAccessChain %63 %65 %65 
                                        f32_4 %72 = OpLoad %71 
                                        f32_4 %73 = OpLoad %9 
                                        f32_4 %74 = OpVectorShuffle %73 %73 0 0 0 0 
                                        f32_4 %75 = OpFMul %72 %74 
                                        f32_4 %76 = OpLoad %53 
                                        f32_4 %77 = OpFAdd %75 %76 
                                                      OpStore %53 %77 
                               Uniform f32_4* %79 = OpAccessChain %63 %65 %78 
                                        f32_4 %80 = OpLoad %79 
                                        f32_4 %81 = OpLoad %9 
                                        f32_4 %82 = OpVectorShuffle %81 %81 2 2 2 2 
                                        f32_4 %83 = OpFMul %80 %82 
                                        f32_4 %84 = OpLoad %53 
                                        f32_4 %85 = OpFAdd %83 %84 
                                                      OpStore %9 %85 
                                        f32_4 %86 = OpLoad %9 
                               Uniform f32_4* %88 = OpAccessChain %63 %65 %87 
                                        f32_4 %89 = OpLoad %88 
                                        f32_4 %90 = OpFAdd %86 %89 
                                                      OpStore %9 %90 
                                        f32_4 %91 = OpLoad %9 
                                        f32_3 %92 = OpVectorShuffle %91 %91 0 1 2 
                                        f32_4 %93 = OpLoad %9 
                                        f32_3 %94 = OpVectorShuffle %93 %93 3 3 3 
                                        f32_3 %95 = OpFDiv %92 %94 
                                        f32_4 %96 = OpLoad %9 
                                        f32_4 %97 = OpVectorShuffle %96 %95 4 5 6 3 
                                                      OpStore %9 %97 
                                       f32_4 %102 = OpLoad %9 
                                       f32_4 %103 = OpVectorShuffle %102 %102 2 2 2 2 
                                       f32_4 %104 = OpFNegate %103 
                              Uniform f32_4* %105 = OpAccessChain %63 %78 
                                       f32_4 %106 = OpLoad %105 
                                      bool_4 %107 = OpFOrdGreaterThanEqual %104 %106 
                                                      OpStore %101 %107 
                               Private bool* %109 = OpAccessChain %101 %27 
                                        bool %110 = OpLoad %109 
                                         f32 %112 = OpSelect %110 %34 %111 
                                Private f32* %113 = OpAccessChain %53 %27 
                                                      OpStore %113 %112 
                               Private bool* %115 = OpAccessChain %101 %114 
                                        bool %116 = OpLoad %115 
                                         f32 %117 = OpSelect %116 %34 %111 
                                Private f32* %118 = OpAccessChain %53 %114 
                                                      OpStore %118 %117 
                               Private bool* %119 = OpAccessChain %101 %36 
                                        bool %120 = OpLoad %119 
                                         f32 %121 = OpSelect %120 %34 %111 
                                Private f32* %122 = OpAccessChain %53 %36 
                                                      OpStore %122 %121 
                               Private bool* %124 = OpAccessChain %101 %123 
                                        bool %125 = OpLoad %124 
                                         f32 %126 = OpSelect %125 %34 %111 
                                Private f32* %127 = OpAccessChain %53 %123 
                                                      OpStore %127 %126 
                                       f32_4 %129 = OpLoad %9 
                                       f32_4 %130 = OpVectorShuffle %129 %129 2 2 2 2 
                                       f32_4 %131 = OpFNegate %130 
                              Uniform f32_4* %132 = OpAccessChain %63 %87 
                                       f32_4 %133 = OpLoad %132 
                                      bool_4 %134 = OpFOrdLessThan %131 %133 
                                                      OpStore %128 %134 
                               Private bool* %136 = OpAccessChain %128 %27 
                                        bool %137 = OpLoad %136 
                                         f32 %138 = OpSelect %137 %34 %111 
                                Private f32* %139 = OpAccessChain %135 %27 
                                                      OpStore %139 %138 
                               Private bool* %140 = OpAccessChain %128 %114 
                                        bool %141 = OpLoad %140 
                                         f32 %142 = OpSelect %141 %34 %111 
                                Private f32* %143 = OpAccessChain %135 %114 
                                                      OpStore %143 %142 
                               Private bool* %144 = OpAccessChain %128 %36 
                                        bool %145 = OpLoad %144 
                                         f32 %146 = OpSelect %145 %34 %111 
                                Private f32* %147 = OpAccessChain %135 %36 
                                                      OpStore %147 %146 
                               Private bool* %148 = OpAccessChain %128 %123 
                                        bool %149 = OpLoad %148 
                                         f32 %150 = OpSelect %149 %34 %111 
                                Private f32* %151 = OpAccessChain %135 %123 
                                                      OpStore %151 %150 
                                       f32_4 %152 = OpLoad %53 
                                       f32_4 %153 = OpLoad %135 
                                       f32_4 %154 = OpFMul %152 %153 
                                                      OpStore %53 %154 
                                       f32_4 %155 = OpLoad %9 
                                       f32_4 %156 = OpVectorShuffle %155 %155 1 1 1 1 
                              Uniform f32_4* %157 = OpAccessChain %63 %66 %66 
                                       f32_4 %158 = OpLoad %157 
                                       f32_4 %159 = OpFMul %156 %158 
                                                      OpStore %135 %159 
                              Uniform f32_4* %160 = OpAccessChain %63 %66 %65 
                                       f32_4 %161 = OpLoad %160 
                                       f32_4 %162 = OpLoad %9 
                                       f32_4 %163 = OpVectorShuffle %162 %162 0 0 0 0 
                                       f32_4 %164 = OpFMul %161 %163 
                                       f32_4 %165 = OpLoad %135 
                                       f32_4 %166 = OpFAdd %164 %165 
                                                      OpStore %135 %166 
                              Uniform f32_4* %167 = OpAccessChain %63 %66 %78 
                                       f32_4 %168 = OpLoad %167 
                                       f32_4 %169 = OpLoad %9 
                                       f32_4 %170 = OpVectorShuffle %169 %169 2 2 2 2 
                                       f32_4 %171 = OpFNegate %170 
                                       f32_4 %172 = OpFMul %168 %171 
                                       f32_4 %173 = OpLoad %135 
                                       f32_4 %174 = OpFAdd %172 %173 
                                                      OpStore %9 %174 
                                       f32_4 %175 = OpLoad %9 
                              Uniform f32_4* %176 = OpAccessChain %63 %66 %87 
                                       f32_4 %177 = OpLoad %176 
                                       f32_4 %178 = OpFAdd %175 %177 
                                                      OpStore %9 %178 
                                       f32_4 %179 = OpLoad %9 
                                       f32_3 %180 = OpVectorShuffle %179 %179 1 1 1 
                              Uniform f32_4* %183 = OpAccessChain %63 %181 %182 
                                       f32_4 %184 = OpLoad %183 
                                       f32_3 %185 = OpVectorShuffle %184 %184 0 1 2 
                                       f32_3 %186 = OpFMul %180 %185 
                                       f32_4 %187 = OpLoad %135 
                                       f32_4 %188 = OpVectorShuffle %187 %186 4 5 6 3 
                                                      OpStore %135 %188 
                              Uniform f32_4* %189 = OpAccessChain %63 %181 %181 
                                       f32_4 %190 = OpLoad %189 
                                       f32_3 %191 = OpVectorShuffle %190 %190 0 1 2 
                                       f32_4 %192 = OpLoad %9 
                                       f32_3 %193 = OpVectorShuffle %192 %192 0 0 0 
                                       f32_3 %194 = OpFMul %191 %193 
                                       f32_4 %195 = OpLoad %135 
                                       f32_3 %196 = OpVectorShuffle %195 %195 0 1 2 
                                       f32_3 %197 = OpFAdd %194 %196 
                                       f32_4 %198 = OpLoad %135 
                                       f32_4 %199 = OpVectorShuffle %198 %197 4 5 6 3 
                                                      OpStore %135 %199 
                              Uniform f32_4* %201 = OpAccessChain %63 %181 %200 
                                       f32_4 %202 = OpLoad %201 
                                       f32_3 %203 = OpVectorShuffle %202 %202 0 1 2 
                                       f32_4 %204 = OpLoad %9 
                                       f32_3 %205 = OpVectorShuffle %204 %204 2 2 2 
                                       f32_3 %206 = OpFMul %203 %205 
                                       f32_4 %207 = OpLoad %135 
                                       f32_3 %208 = OpVectorShuffle %207 %207 0 1 2 
                                       f32_3 %209 = OpFAdd %206 %208 
                                       f32_4 %210 = OpLoad %135 
                                       f32_4 %211 = OpVectorShuffle %210 %209 4 5 6 3 
                                                      OpStore %135 %211 
                              Uniform f32_4* %213 = OpAccessChain %63 %181 %212 
                                       f32_4 %214 = OpLoad %213 
                                       f32_3 %215 = OpVectorShuffle %214 %214 0 1 2 
                                       f32_4 %216 = OpLoad %9 
                                       f32_3 %217 = OpVectorShuffle %216 %216 3 3 3 
                                       f32_3 %218 = OpFMul %215 %217 
                                       f32_4 %219 = OpLoad %135 
                                       f32_3 %220 = OpVectorShuffle %219 %219 0 1 2 
                                       f32_3 %221 = OpFAdd %218 %220 
                                       f32_4 %222 = OpLoad %135 
                                       f32_4 %223 = OpVectorShuffle %222 %221 4 5 6 3 
                                                      OpStore %135 %223 
                                       f32_4 %224 = OpLoad %53 
                                       f32_3 %225 = OpVectorShuffle %224 %224 1 1 1 
                                       f32_4 %226 = OpLoad %135 
                                       f32_3 %227 = OpVectorShuffle %226 %226 0 1 2 
                                       f32_3 %228 = OpFMul %225 %227 
                                       f32_4 %229 = OpLoad %135 
                                       f32_4 %230 = OpVectorShuffle %229 %228 4 5 6 3 
                                                      OpStore %135 %230 
                                       f32_4 %232 = OpLoad %9 
                                       f32_3 %233 = OpVectorShuffle %232 %232 1 1 1 
                              Uniform f32_4* %234 = OpAccessChain %63 %181 %66 
                                       f32_4 %235 = OpLoad %234 
                                       f32_3 %236 = OpVectorShuffle %235 %235 0 1 2 
                                       f32_3 %237 = OpFMul %233 %236 
                                       f32_4 %238 = OpLoad %231 
                                       f32_4 %239 = OpVectorShuffle %238 %237 4 5 6 3 
                                                      OpStore %231 %239 
                              Uniform f32_4* %240 = OpAccessChain %63 %181 %65 
                                       f32_4 %241 = OpLoad %240 
                                       f32_3 %242 = OpVectorShuffle %241 %241 0 1 2 
                                       f32_4 %243 = OpLoad %9 
                                       f32_3 %244 = OpVectorShuffle %243 %243 0 0 0 
                                       f32_3 %245 = OpFMul %242 %244 
                                       f32_4 %246 = OpLoad %231 
                                       f32_3 %247 = OpVectorShuffle %246 %246 0 1 2 
                                       f32_3 %248 = OpFAdd %245 %247 
                                       f32_4 %249 = OpLoad %231 
                                       f32_4 %250 = OpVectorShuffle %249 %248 4 5 6 3 
                                                      OpStore %231 %250 
                              Uniform f32_4* %251 = OpAccessChain %63 %181 %78 
                                       f32_4 %252 = OpLoad %251 
                                       f32_3 %253 = OpVectorShuffle %252 %252 0 1 2 
                                       f32_4 %254 = OpLoad %9 
                                       f32_3 %255 = OpVectorShuffle %254 %254 2 2 2 
                                       f32_3 %256 = OpFMul %253 %255 
                                       f32_4 %257 = OpLoad %231 
                                       f32_3 %258 = OpVectorShuffle %257 %257 0 1 2 
                                       f32_3 %259 = OpFAdd %256 %258 
                                       f32_4 %260 = OpLoad %231 
                                       f32_4 %261 = OpVectorShuffle %260 %259 4 5 6 3 
                                                      OpStore %231 %261 
                              Uniform f32_4* %262 = OpAccessChain %63 %181 %87 
                                       f32_4 %263 = OpLoad %262 
                                       f32_3 %264 = OpVectorShuffle %263 %263 0 1 2 
                                       f32_4 %265 = OpLoad %9 
                                       f32_3 %266 = OpVectorShuffle %265 %265 3 3 3 
                                       f32_3 %267 = OpFMul %264 %266 
                                       f32_4 %268 = OpLoad %231 
                                       f32_3 %269 = OpVectorShuffle %268 %268 0 1 2 
                                       f32_3 %270 = OpFAdd %267 %269 
                                       f32_4 %271 = OpLoad %231 
                                       f32_4 %272 = OpVectorShuffle %271 %270 4 5 6 3 
                                                      OpStore %231 %272 
                                       f32_4 %273 = OpLoad %231 
                                       f32_3 %274 = OpVectorShuffle %273 %273 0 1 2 
                                       f32_4 %275 = OpLoad %53 
                                       f32_3 %276 = OpVectorShuffle %275 %275 0 0 0 
                                       f32_3 %277 = OpFMul %274 %276 
                                       f32_4 %278 = OpLoad %135 
                                       f32_3 %279 = OpVectorShuffle %278 %278 0 1 2 
                                       f32_3 %280 = OpFAdd %277 %279 
                                       f32_4 %281 = OpLoad %135 
                                       f32_4 %282 = OpVectorShuffle %281 %280 4 5 6 3 
                                                      OpStore %135 %282 
                                       f32_4 %283 = OpLoad %9 
                                       f32_3 %284 = OpVectorShuffle %283 %283 1 1 1 
                              Uniform f32_4* %286 = OpAccessChain %63 %181 %285 
                                       f32_4 %287 = OpLoad %286 
                                       f32_3 %288 = OpVectorShuffle %287 %287 0 1 2 
                                       f32_3 %289 = OpFMul %284 %288 
                                       f32_4 %290 = OpLoad %231 
                                       f32_4 %291 = OpVectorShuffle %290 %289 4 5 6 3 
                                                      OpStore %231 %291 
                              Uniform f32_4* %293 = OpAccessChain %63 %181 %292 
                                       f32_4 %294 = OpLoad %293 
                                       f32_3 %295 = OpVectorShuffle %294 %294 0 1 2 
                                       f32_4 %296 = OpLoad %9 
                                       f32_3 %297 = OpVectorShuffle %296 %296 0 0 0 
                                       f32_3 %298 = OpFMul %295 %297 
                                       f32_4 %299 = OpLoad %231 
                                       f32_3 %300 = OpVectorShuffle %299 %299 0 1 2 
                                       f32_3 %301 = OpFAdd %298 %300 
                                       f32_4 %302 = OpLoad %231 
                                       f32_4 %303 = OpVectorShuffle %302 %301 4 5 6 3 
                                                      OpStore %231 %303 
                              Uniform f32_4* %305 = OpAccessChain %63 %181 %304 
                                       f32_4 %306 = OpLoad %305 
                                       f32_3 %307 = OpVectorShuffle %306 %306 0 1 2 
                                       f32_4 %308 = OpLoad %9 
                                       f32_3 %309 = OpVectorShuffle %308 %308 2 2 2 
                                       f32_3 %310 = OpFMul %307 %309 
                                       f32_4 %311 = OpLoad %231 
                                       f32_3 %312 = OpVectorShuffle %311 %311 0 1 2 
                                       f32_3 %313 = OpFAdd %310 %312 
                                       f32_4 %314 = OpLoad %231 
                                       f32_4 %315 = OpVectorShuffle %314 %313 4 5 6 3 
                                                      OpStore %231 %315 
                              Uniform f32_4* %317 = OpAccessChain %63 %181 %316 
                                       f32_4 %318 = OpLoad %317 
                                       f32_3 %319 = OpVectorShuffle %318 %318 0 1 2 
                                       f32_4 %320 = OpLoad %9 
                                       f32_3 %321 = OpVectorShuffle %320 %320 3 3 3 
                                       f32_3 %322 = OpFMul %319 %321 
                                       f32_4 %323 = OpLoad %231 
                                       f32_3 %324 = OpVectorShuffle %323 %323 0 1 2 
                                       f32_3 %325 = OpFAdd %322 %324 
                                       f32_4 %326 = OpLoad %231 
                                       f32_4 %327 = OpVectorShuffle %326 %325 4 5 6 3 
                                                      OpStore %231 %327 
                                       f32_4 %328 = OpLoad %231 
                                       f32_3 %329 = OpVectorShuffle %328 %328 0 1 2 
                                       f32_4 %330 = OpLoad %53 
                                       f32_3 %331 = OpVectorShuffle %330 %330 2 2 2 
                                       f32_3 %332 = OpFMul %329 %331 
                                       f32_4 %333 = OpLoad %135 
                                       f32_3 %334 = OpVectorShuffle %333 %333 0 1 2 
                                       f32_3 %335 = OpFAdd %332 %334 
                                       f32_4 %336 = OpLoad %135 
                                       f32_4 %337 = OpVectorShuffle %336 %335 4 5 6 3 
                                                      OpStore %135 %337 
                                       f32_4 %338 = OpLoad %9 
                                       f32_3 %339 = OpVectorShuffle %338 %338 1 1 1 
                              Uniform f32_4* %341 = OpAccessChain %63 %181 %340 
                                       f32_4 %342 = OpLoad %341 
                                       f32_3 %343 = OpVectorShuffle %342 %342 0 1 2 
                                       f32_3 %344 = OpFMul %339 %343 
                                       f32_4 %345 = OpLoad %231 
                                       f32_4 %346 = OpVectorShuffle %345 %344 4 5 6 3 
                                                      OpStore %231 %346 
                              Uniform f32_4* %348 = OpAccessChain %63 %181 %347 
                                       f32_4 %349 = OpLoad %348 
                                       f32_3 %350 = OpVectorShuffle %349 %349 0 1 2 
                                       f32_4 %351 = OpLoad %9 
                                       f32_3 %352 = OpVectorShuffle %351 %351 0 0 0 
                                       f32_3 %353 = OpFMul %350 %352 
                                       f32_4 %354 = OpLoad %231 
                                       f32_3 %355 = OpVectorShuffle %354 %354 0 1 2 
                                       f32_3 %356 = OpFAdd %353 %355 
                                       f32_4 %357 = OpLoad %231 
                                       f32_4 %358 = OpVectorShuffle %357 %356 4 5 6 3 
                                                      OpStore %231 %358 
                              Uniform f32_4* %360 = OpAccessChain %63 %181 %359 
                                       f32_4 %361 = OpLoad %360 
                                       f32_3 %362 = OpVectorShuffle %361 %361 0 1 2 
                                       f32_4 %363 = OpLoad %9 
                                       f32_3 %364 = OpVectorShuffle %363 %363 2 2 2 
                                       f32_3 %365 = OpFMul %362 %364 
                                       f32_4 %366 = OpLoad %231 
                                       f32_3 %367 = OpVectorShuffle %366 %366 0 1 2 
                                       f32_3 %368 = OpFAdd %365 %367 
                                       f32_4 %369 = OpLoad %9 
                                       f32_4 %370 = OpVectorShuffle %369 %368 4 5 6 3 
                                                      OpStore %9 %370 
                              Uniform f32_4* %372 = OpAccessChain %63 %181 %371 
                                       f32_4 %373 = OpLoad %372 
                                       f32_3 %374 = OpVectorShuffle %373 %373 0 1 2 
                                       f32_4 %375 = OpLoad %9 
                                       f32_3 %376 = OpVectorShuffle %375 %375 3 3 3 
                                       f32_3 %377 = OpFMul %374 %376 
                                       f32_4 %378 = OpLoad %9 
                                       f32_3 %379 = OpVectorShuffle %378 %378 0 1 2 
                                       f32_3 %380 = OpFAdd %377 %379 
                                       f32_4 %381 = OpLoad %9 
                                       f32_4 %382 = OpVectorShuffle %381 %380 4 5 6 3 
                                                      OpStore %9 %382 
                                       f32_4 %383 = OpLoad %9 
                                       f32_3 %384 = OpVectorShuffle %383 %383 0 1 2 
                                       f32_4 %385 = OpLoad %53 
                                       f32_3 %386 = OpVectorShuffle %385 %385 3 3 3 
                                       f32_3 %387 = OpFMul %384 %386 
                                       f32_4 %388 = OpLoad %135 
                                       f32_3 %389 = OpVectorShuffle %388 %388 0 1 2 
                                       f32_3 %390 = OpFAdd %387 %389 
                                       f32_4 %391 = OpLoad %9 
                                       f32_4 %392 = OpVectorShuffle %391 %390 4 5 6 3 
                                                      OpStore %9 %392 
                                       f32_4 %394 = OpLoad %53 
                                         f32 %396 = OpDot %394 %395 
                                                      OpStore %393 %396 
                                         f32 %398 = OpLoad %393 
                                         f32 %399 = OpFNegate %398 
                                Private f32* %400 = OpAccessChain %9 %36 
                                         f32 %401 = OpLoad %400 
                                         f32 %402 = OpFAdd %399 %401 
                                                      OpStore %397 %402 
                                         f32 %403 = OpLoad %397 
                                         f32 %404 = OpFAdd %403 %34 
                                                      OpStore %397 %404 
                                       f32_4 %405 = OpLoad %9 
                                       f32_2 %406 = OpVectorShuffle %405 %405 0 1 
                              Uniform f32_4* %407 = OpAccessChain %63 %200 
                                       f32_4 %408 = OpLoad %407 
                                       f32_2 %409 = OpVectorShuffle %408 %408 2 3 
                                       f32_2 %410 = OpFMul %406 %409 
                                       f32_2 %413 = OpFAdd %410 %412 
                                       f32_4 %414 = OpLoad %53 
                                       f32_4 %415 = OpVectorShuffle %414 %413 4 5 2 3 
                                                      OpStore %53 %415 
                                       f32_4 %416 = OpLoad %53 
                                       f32_2 %417 = OpVectorShuffle %416 %416 0 1 
                                       f32_2 %418 = OpExtInst %1 8 %417 
                                       f32_4 %419 = OpLoad %53 
                                       f32_4 %420 = OpVectorShuffle %419 %418 4 5 2 3 
                                                      OpStore %53 %420 
                                       f32_4 %421 = OpLoad %9 
                                       f32_2 %422 = OpVectorShuffle %421 %421 0 1 
                              Uniform f32_4* %423 = OpAccessChain %63 %200 
                                       f32_4 %424 = OpLoad %423 
                                       f32_2 %425 = OpVectorShuffle %424 %424 2 3 
                                       f32_2 %426 = OpFMul %422 %425 
                                       f32_4 %427 = OpLoad %53 
                                       f32_2 %428 = OpVectorShuffle %427 %427 0 1 
                                       f32_2 %429 = OpFNegate %428 
                                       f32_2 %430 = OpFAdd %426 %429 
                                       f32_4 %431 = OpLoad %9 
                                       f32_4 %432 = OpVectorShuffle %431 %430 4 5 2 3 
                                                      OpStore %9 %432 
                                       f32_4 %435 = OpLoad %9 
                                       f32_2 %436 = OpVectorShuffle %435 %435 0 1 
                                       f32_2 %437 = OpFNegate %436 
                                       f32_2 %439 = OpFAdd %437 %438 
                                                      OpStore %434 %439 
                                       f32_4 %440 = OpLoad %9 
                                       f32_2 %441 = OpVectorShuffle %440 %440 0 1 
                                       f32_2 %443 = OpExtInst %1 37 %441 %442 
                                       f32_4 %444 = OpLoad %135 
                                       f32_4 %445 = OpVectorShuffle %444 %443 4 5 2 3 
                                                      OpStore %135 %445 
                                       f32_4 %446 = OpLoad %135 
                                       f32_2 %447 = OpVectorShuffle %446 %446 0 1 
                                       f32_2 %448 = OpFNegate %447 
                                       f32_4 %449 = OpLoad %135 
                                       f32_2 %450 = OpVectorShuffle %449 %449 0 1 
                                       f32_2 %451 = OpFMul %448 %450 
                                       f32_2 %452 = OpLoad %434 
                                       f32_2 %453 = OpFAdd %451 %452 
                                                      OpStore %434 %453 
                                       f32_2 %454 = OpLoad %434 
                                       f32_2 %456 = OpFAdd %454 %455 
                                                      OpStore %434 %456 
                                       f32_2 %457 = OpLoad %434 
                                       f32_2 %460 = OpFMul %457 %459 
                                       f32_4 %461 = OpLoad %135 
                                       f32_4 %462 = OpVectorShuffle %461 %460 4 5 2 3 
                                                      OpStore %135 %462 
                                Private f32* %463 = OpAccessChain %135 %27 
                                         f32 %464 = OpLoad %463 
                                Private f32* %465 = OpAccessChain %231 %114 
                                                      OpStore %465 %464 
                                       f32_4 %466 = OpLoad %9 
                                       f32_2 %467 = OpVectorShuffle %466 %466 0 1 
                                       f32_2 %468 = OpExtInst %1 40 %467 %442 
                                                      OpStore %434 %468 
                                       f32_4 %470 = OpLoad %9 
                                       f32_4 %471 = OpVectorShuffle %470 %470 0 0 1 1 
                                       f32_4 %473 = OpFAdd %471 %472 
                                                      OpStore %469 %473 
                                       f32_2 %474 = OpLoad %434 
                                       f32_2 %475 = OpFNegate %474 
                                       f32_2 %476 = OpLoad %434 
                                       f32_2 %477 = OpFMul %475 %476 
                                       f32_4 %478 = OpLoad %469 
                                       f32_2 %479 = OpVectorShuffle %478 %478 1 3 
                                       f32_2 %480 = OpFAdd %477 %479 
                                                      OpStore %434 %480 
                                       f32_4 %481 = OpLoad %469 
                                       f32_4 %482 = OpVectorShuffle %481 %481 0 0 2 2 
                                       f32_4 %483 = OpLoad %469 
                                       f32_4 %484 = OpVectorShuffle %483 %483 0 0 2 2 
                                       f32_4 %485 = OpFMul %482 %484 
                                                      OpStore %469 %485 
                                       f32_2 %486 = OpLoad %434 
                                       f32_2 %487 = OpFAdd %486 %455 
                                                      OpStore %434 %487 
                                Private f32* %489 = OpAccessChain %434 %27 
                                         f32 %490 = OpLoad %489 
                                         f32 %491 = OpFMul %490 %458 
                                Private f32* %492 = OpAccessChain %488 %36 
                                                      OpStore %492 %491 
                                Private f32* %494 = OpAccessChain %434 %114 
                                         f32 %495 = OpLoad %494 
                                         f32 %496 = OpFMul %495 %458 
                                Private f32* %497 = OpAccessChain %493 %36 
                                                      OpStore %497 %496 
                                       f32_4 %498 = OpLoad %469 
                                       f32_2 %499 = OpVectorShuffle %498 %498 0 2 
                                       f32_2 %500 = OpFMul %499 %412 
                                       f32_4 %501 = OpLoad %9 
                                       f32_2 %502 = OpVectorShuffle %501 %501 0 1 
                                       f32_2 %503 = OpFNegate %502 
                                       f32_2 %504 = OpFAdd %500 %503 
                                                      OpStore %434 %504 
                                       f32_4 %505 = OpLoad %469 
                                       f32_2 %506 = OpVectorShuffle %505 %505 1 3 
                                       f32_2 %509 = OpFMul %506 %508 
                                       f32_4 %510 = OpLoad %469 
                                       f32_4 %511 = OpVectorShuffle %510 %509 4 5 2 3 
                                                      OpStore %469 %511 
                                       f32_2 %512 = OpLoad %434 
                                       f32_2 %513 = OpVectorShuffle %512 %512 1 0 
                                       f32_2 %514 = OpFMul %513 %459 
                                       f32_4 %515 = OpLoad %493 
                                       f32_4 %516 = OpVectorShuffle %515 %514 4 5 2 3 
                                                      OpStore %493 %516 
                                Private f32* %517 = OpAccessChain %493 %114 
                                         f32 %518 = OpLoad %517 
                                Private f32* %519 = OpAccessChain %488 %27 
                                                      OpStore %519 %518 
                                       f32_4 %520 = OpLoad %9 
                                       f32_2 %521 = OpVectorShuffle %520 %520 0 0 
                                       f32_2 %524 = OpFMul %521 %523 
                                       f32_2 %527 = OpFAdd %524 %526 
                                       f32_4 %528 = OpLoad %488 
                                       f32_4 %529 = OpVectorShuffle %528 %527 0 4 2 5 
                                                      OpStore %488 %529 
                                       f32_4 %530 = OpLoad %9 
                                       f32_2 %531 = OpVectorShuffle %530 %530 0 0 
                                       f32_2 %532 = OpFMul %531 %523 
                                       f32_2 %534 = OpFAdd %532 %533 
                                       f32_4 %535 = OpLoad %231 
                                       f32_4 %536 = OpVectorShuffle %535 %534 4 1 5 3 
                                                      OpStore %231 %536 
                                Private f32* %537 = OpAccessChain %469 %27 
                                         f32 %538 = OpLoad %537 
                                Private f32* %539 = OpAccessChain %231 %123 
                                                      OpStore %539 %538 
                                Private f32* %540 = OpAccessChain %469 %114 
                                         f32 %541 = OpLoad %540 
                                Private f32* %542 = OpAccessChain %135 %123 
                                                      OpStore %542 %541 
                                       f32_4 %543 = OpLoad %231 
                                       f32_4 %544 = OpLoad %488 
                                       f32_4 %545 = OpFAdd %543 %544 
                                                      OpStore %469 %545 
                                       f32_4 %546 = OpLoad %231 
                                       f32_4 %547 = OpLoad %469 
                                       f32_4 %548 = OpFDiv %546 %547 
                                                      OpStore %231 %548 
                                       f32_4 %549 = OpLoad %231 
                                       f32_4 %554 = OpFAdd %549 %553 
                                                      OpStore %231 %554 
                                       f32_4 %555 = OpLoad %231 
                                       f32_4 %556 = OpVectorShuffle %555 %555 3 0 1 2 
                              Uniform f32_4* %557 = OpAccessChain %63 %200 
                                       f32_4 %558 = OpLoad %557 
                                       f32_4 %559 = OpVectorShuffle %558 %558 0 0 0 0 
                                       f32_4 %560 = OpFMul %556 %559 
                                                      OpStore %231 %560 
                                       f32_4 %561 = OpLoad %9 
                                       f32_2 %562 = OpVectorShuffle %561 %561 1 1 
                                       f32_2 %563 = OpFMul %562 %523 
                                       f32_2 %564 = OpFAdd %563 %526 
                                       f32_4 %565 = OpLoad %493 
                                       f32_4 %566 = OpVectorShuffle %565 %564 0 4 2 5 
                                                      OpStore %493 %566 
                                       f32_4 %567 = OpLoad %9 
                                       f32_2 %568 = OpVectorShuffle %567 %567 1 1 
                                       f32_2 %569 = OpFMul %568 %523 
                                       f32_2 %570 = OpFAdd %569 %533 
                                       f32_4 %571 = OpLoad %135 
                                       f32_4 %572 = OpVectorShuffle %571 %570 4 1 5 3 
                                                      OpStore %135 %572 
                                       f32_4 %573 = OpLoad %135 
                                       f32_4 %574 = OpLoad %493 
                                       f32_4 %575 = OpFAdd %573 %574 
                                                      OpStore %488 %575 
                                       f32_4 %576 = OpLoad %135 
                                       f32_4 %577 = OpLoad %488 
                                       f32_4 %578 = OpFDiv %576 %577 
                                                      OpStore %135 %578 
                                       f32_4 %579 = OpLoad %135 
                                       f32_4 %580 = OpFAdd %579 %553 
                                                      OpStore %135 %580 
                                       f32_4 %581 = OpLoad %135 
                                       f32_4 %582 = OpVectorShuffle %581 %581 0 3 1 2 
                              Uniform f32_4* %583 = OpAccessChain %63 %200 
                                       f32_4 %584 = OpLoad %583 
                                       f32_4 %585 = OpVectorShuffle %584 %584 1 1 1 1 
                                       f32_4 %586 = OpFMul %582 %585 
                                                      OpStore %135 %586 
                                       f32_4 %587 = OpLoad %469 
                                       f32_4 %588 = OpLoad %488 
                                       f32_4 %589 = OpVectorShuffle %588 %588 0 0 0 0 
                                       f32_4 %590 = OpFMul %587 %589 
                                                      OpStore %493 %590 
                                       f32_4 %592 = OpLoad %231 
                                       f32_3 %593 = OpVectorShuffle %592 %592 1 2 3 
                                       f32_4 %594 = OpLoad %591 
                                       f32_4 %595 = OpVectorShuffle %594 %593 4 1 5 6 
                                                      OpStore %591 %595 
                                Private f32* %596 = OpAccessChain %135 %27 
                                         f32 %597 = OpLoad %596 
                                Private f32* %598 = OpAccessChain %591 %114 
                                                      OpStore %598 %597 
                                       f32_4 %600 = OpLoad %53 
                                       f32_4 %601 = OpVectorShuffle %600 %600 0 1 0 1 
                              Uniform f32_4* %602 = OpAccessChain %63 %200 
                                       f32_4 %603 = OpLoad %602 
                                       f32_4 %604 = OpVectorShuffle %603 %603 0 1 0 1 
                                       f32_4 %605 = OpFMul %601 %604 
                                       f32_4 %606 = OpLoad %591 
                                       f32_4 %607 = OpVectorShuffle %606 %606 0 1 2 1 
                                       f32_4 %608 = OpFAdd %605 %607 
                                                      OpStore %599 %608 
                                       f32_4 %611 = OpLoad %599 
                                       f32_2 %612 = OpVectorShuffle %611 %611 0 1 
                                         f32 %613 = OpLoad %397 
                                         f32 %614 = OpCompositeExtract %612 0 
                                         f32 %615 = OpCompositeExtract %612 1 
                                       f32_3 %616 = OpCompositeConstruct %614 %615 %613 
                                                      OpStore %610 %616 
                         read_only Texture2D %618 = OpLoad %617 
                                     sampler %620 = OpLoad %619 
                  read_only Texture2DSampled %623 = OpSampledImage %618 %620 
                                       f32_3 %624 = OpLoad %610 
                                         f32 %625 = OpCompositeExtract %624 2 
                                         f32 %626 = OpImageSampleDrefExplicitLod %623 %624 %625 Lod %6 
                                Private f32* %627 = OpAccessChain %9 %27 
                                                      OpStore %627 %626 
                                       f32_4 %629 = OpLoad %599 
                                       f32_2 %630 = OpVectorShuffle %629 %629 2 3 
                                         f32 %631 = OpLoad %397 
                                         f32 %632 = OpCompositeExtract %630 0 
                                         f32 %633 = OpCompositeExtract %630 1 
                                       f32_3 %634 = OpCompositeConstruct %632 %633 %631 
                                                      OpStore %628 %634 
                         read_only Texture2D %637 = OpLoad %617 
                                     sampler %638 = OpLoad %619 
                  read_only Texture2DSampled %639 = OpSampledImage %637 %638 
                                       f32_3 %640 = OpLoad %628 
                                         f32 %641 = OpCompositeExtract %640 2 
                                         f32 %642 = OpImageSampleDrefExplicitLod %639 %640 %641 Lod %6 
                                Private f32* %643 = OpAccessChain %636 %27 
                                                      OpStore %643 %642 
                                Private f32* %644 = OpAccessChain %636 %27 
                                         f32 %645 = OpLoad %644 
                                Private f32* %646 = OpAccessChain %493 %114 
                                         f32 %647 = OpLoad %646 
                                         f32 %648 = OpFMul %645 %647 
                                Private f32* %649 = OpAccessChain %636 %27 
                                                      OpStore %649 %648 
                                Private f32* %650 = OpAccessChain %493 %27 
                                         f32 %651 = OpLoad %650 
                                Private f32* %652 = OpAccessChain %9 %27 
                                         f32 %653 = OpLoad %652 
                                         f32 %654 = OpFMul %651 %653 
                                Private f32* %655 = OpAccessChain %636 %27 
                                         f32 %656 = OpLoad %655 
                                         f32 %657 = OpFAdd %654 %656 
                                Private f32* %658 = OpAccessChain %9 %27 
                                                      OpStore %658 %657 
                                       f32_4 %659 = OpLoad %53 
                                       f32_2 %660 = OpVectorShuffle %659 %659 0 1 
                              Uniform f32_4* %661 = OpAccessChain %63 %200 
                                       f32_4 %662 = OpLoad %661 
                                       f32_2 %663 = OpVectorShuffle %662 %662 0 1 
                                       f32_2 %664 = OpFMul %660 %663 
                                       f32_4 %665 = OpLoad %591 
                                       f32_2 %666 = OpVectorShuffle %665 %665 3 1 
                                       f32_2 %667 = OpFAdd %664 %666 
                                       f32_3 %668 = OpLoad %636 
                                       f32_3 %669 = OpVectorShuffle %668 %667 3 1 4 
                                                      OpStore %636 %669 
                                Private f32* %670 = OpAccessChain %591 %114 
                                         f32 %671 = OpLoad %670 
                                Private f32* %672 = OpAccessChain %231 %114 
                                                      OpStore %672 %671 
                                       f32_4 %673 = OpLoad %53 
                                       f32_2 %674 = OpVectorShuffle %673 %673 0 1 
                              Uniform f32_4* %675 = OpAccessChain %63 %200 
                                       f32_4 %676 = OpLoad %675 
                                       f32_2 %677 = OpVectorShuffle %676 %676 0 1 
                                       f32_2 %678 = OpFMul %674 %677 
                                       f32_4 %679 = OpLoad %231 
                                       f32_2 %680 = OpVectorShuffle %679 %679 0 1 
                                       f32_2 %681 = OpFAdd %678 %680 
                                                      OpStore %434 %681 
                                       f32_2 %683 = OpLoad %434 
                                         f32 %684 = OpLoad %397 
                                         f32 %685 = OpCompositeExtract %683 0 
                                         f32 %686 = OpCompositeExtract %683 1 
                                       f32_3 %687 = OpCompositeConstruct %685 %686 %684 
                                                      OpStore %682 %687 
                         read_only Texture2D %688 = OpLoad %617 
                                     sampler %689 = OpLoad %619 
                  read_only Texture2DSampled %690 = OpSampledImage %688 %689 
                                       f32_3 %691 = OpLoad %682 
                                         f32 %692 = OpCompositeExtract %691 2 
                                         f32 %693 = OpImageSampleDrefExplicitLod %690 %691 %692 Lod %6 
                                Private f32* %694 = OpAccessChain %434 %27 
                                                      OpStore %694 %693 
                                       f32_3 %696 = OpLoad %636 
                                       f32_2 %697 = OpVectorShuffle %696 %696 0 2 
                                         f32 %698 = OpLoad %397 
                                         f32 %699 = OpCompositeExtract %697 0 
                                         f32 %700 = OpCompositeExtract %697 1 
                                       f32_3 %701 = OpCompositeConstruct %699 %700 %698 
                                                      OpStore %695 %701 
                         read_only Texture2D %702 = OpLoad %617 
                                     sampler %703 = OpLoad %619 
                  read_only Texture2DSampled %704 = OpSampledImage %702 %703 
                                       f32_3 %705 = OpLoad %695 
                                         f32 %706 = OpCompositeExtract %705 2 
                                         f32 %707 = OpImageSampleDrefExplicitLod %704 %705 %706 Lod %6 
                                Private f32* %708 = OpAccessChain %636 %27 
                                                      OpStore %708 %707 
                                Private f32* %709 = OpAccessChain %493 %36 
                                         f32 %710 = OpLoad %709 
                                Private f32* %711 = OpAccessChain %636 %27 
                                         f32 %712 = OpLoad %711 
                                         f32 %713 = OpFMul %710 %712 
                                Private f32* %714 = OpAccessChain %9 %27 
                                         f32 %715 = OpLoad %714 
                                         f32 %716 = OpFAdd %713 %715 
                                Private f32* %717 = OpAccessChain %9 %27 
                                                      OpStore %717 %716 
                                Private f32* %718 = OpAccessChain %493 %123 
                                         f32 %719 = OpLoad %718 
                                Private f32* %720 = OpAccessChain %434 %27 
                                         f32 %721 = OpLoad %720 
                                         f32 %722 = OpFMul %719 %721 
                                Private f32* %723 = OpAccessChain %9 %27 
                                         f32 %724 = OpLoad %723 
                                         f32 %725 = OpFAdd %722 %724 
                                Private f32* %726 = OpAccessChain %9 %27 
                                                      OpStore %726 %725 
                                       f32_4 %727 = OpLoad %469 
                                       f32_4 %728 = OpLoad %488 
                                       f32_4 %729 = OpVectorShuffle %728 %728 1 1 1 1 
                                       f32_4 %730 = OpFMul %727 %729 
                                                      OpStore %493 %730 
                                Private f32* %731 = OpAccessChain %135 %36 
                                         f32 %732 = OpLoad %731 
                                Private f32* %733 = OpAccessChain %591 %114 
                                                      OpStore %733 %732 
                                       f32_4 %734 = OpLoad %53 
                                       f32_4 %735 = OpVectorShuffle %734 %734 0 1 0 1 
                              Uniform f32_4* %736 = OpAccessChain %63 %200 
                                       f32_4 %737 = OpLoad %736 
                                       f32_4 %738 = OpVectorShuffle %737 %737 0 1 0 1 
                                       f32_4 %739 = OpFMul %735 %738 
                                       f32_4 %740 = OpLoad %591 
                                       f32_4 %741 = OpVectorShuffle %740 %740 0 1 2 1 
                                       f32_4 %742 = OpFAdd %739 %741 
                                                      OpStore %599 %742 
                                       f32_4 %744 = OpLoad %599 
                                       f32_2 %745 = OpVectorShuffle %744 %744 0 1 
                                         f32 %746 = OpLoad %397 
                                         f32 %747 = OpCompositeExtract %745 0 
                                         f32 %748 = OpCompositeExtract %745 1 
                                       f32_3 %749 = OpCompositeConstruct %747 %748 %746 
                                                      OpStore %743 %749 
                         read_only Texture2D %750 = OpLoad %617 
                                     sampler %751 = OpLoad %619 
                  read_only Texture2DSampled %752 = OpSampledImage %750 %751 
                                       f32_3 %753 = OpLoad %743 
                                         f32 %754 = OpCompositeExtract %753 2 
                                         f32 %755 = OpImageSampleDrefExplicitLod %752 %753 %754 Lod %6 
                                Private f32* %756 = OpAccessChain %636 %27 
                                                      OpStore %756 %755 
                                       f32_4 %758 = OpLoad %599 
                                       f32_2 %759 = OpVectorShuffle %758 %758 2 3 
                                         f32 %760 = OpLoad %397 
                                         f32 %761 = OpCompositeExtract %759 0 
                                         f32 %762 = OpCompositeExtract %759 1 
                                       f32_3 %763 = OpCompositeConstruct %761 %762 %760 
                                                      OpStore %757 %763 
                         read_only Texture2D %764 = OpLoad %617 
                                     sampler %765 = OpLoad %619 
                  read_only Texture2DSampled %766 = OpSampledImage %764 %765 
                                       f32_3 %767 = OpLoad %757 
                                         f32 %768 = OpCompositeExtract %767 2 
                                         f32 %769 = OpImageSampleDrefExplicitLod %766 %767 %768 Lod %6 
                                                      OpStore %393 %769 
                                Private f32* %770 = OpAccessChain %493 %27 
                                         f32 %771 = OpLoad %770 
                                Private f32* %772 = OpAccessChain %636 %27 
                                         f32 %773 = OpLoad %772 
                                         f32 %774 = OpFMul %771 %773 
                                Private f32* %775 = OpAccessChain %9 %27 
                                         f32 %776 = OpLoad %775 
                                         f32 %777 = OpFAdd %774 %776 
                                Private f32* %778 = OpAccessChain %9 %27 
                                                      OpStore %778 %777 
                                Private f32* %779 = OpAccessChain %493 %114 
                                         f32 %780 = OpLoad %779 
                                         f32 %781 = OpLoad %393 
                                         f32 %782 = OpFMul %780 %781 
                                Private f32* %783 = OpAccessChain %9 %27 
                                         f32 %784 = OpLoad %783 
                                         f32 %785 = OpFAdd %782 %784 
                                Private f32* %786 = OpAccessChain %9 %27 
                                                      OpStore %786 %785 
                                       f32_4 %787 = OpLoad %53 
                                       f32_2 %788 = OpVectorShuffle %787 %787 0 1 
                              Uniform f32_4* %789 = OpAccessChain %63 %200 
                                       f32_4 %790 = OpLoad %789 
                                       f32_2 %791 = OpVectorShuffle %790 %790 0 1 
                                       f32_2 %792 = OpFMul %788 %791 
                                       f32_4 %793 = OpLoad %591 
                                       f32_2 %794 = OpVectorShuffle %793 %793 3 1 
                                       f32_2 %795 = OpFAdd %792 %794 
                                       f32_3 %796 = OpLoad %636 
                                       f32_3 %797 = OpVectorShuffle %796 %795 3 1 4 
                                                      OpStore %636 %797 
                                Private f32* %798 = OpAccessChain %591 %114 
                                         f32 %799 = OpLoad %798 
                                Private f32* %800 = OpAccessChain %231 %36 
                                                      OpStore %800 %799 
                                       f32_4 %801 = OpLoad %53 
                                       f32_2 %802 = OpVectorShuffle %801 %801 0 1 
                              Uniform f32_4* %803 = OpAccessChain %63 %200 
                                       f32_4 %804 = OpLoad %803 
                                       f32_2 %805 = OpVectorShuffle %804 %804 0 1 
                                       f32_2 %806 = OpFMul %802 %805 
                                       f32_4 %807 = OpLoad %231 
                                       f32_2 %808 = OpVectorShuffle %807 %807 0 2 
                                       f32_2 %809 = OpFAdd %806 %808 
                                                      OpStore %434 %809 
                                       f32_2 %811 = OpLoad %434 
                                         f32 %812 = OpLoad %397 
                                         f32 %813 = OpCompositeExtract %811 0 
                                         f32 %814 = OpCompositeExtract %811 1 
                                       f32_3 %815 = OpCompositeConstruct %813 %814 %812 
                                                      OpStore %810 %815 
                         read_only Texture2D %816 = OpLoad %617 
                                     sampler %817 = OpLoad %619 
                  read_only Texture2DSampled %818 = OpSampledImage %816 %817 
                                       f32_3 %819 = OpLoad %810 
                                         f32 %820 = OpCompositeExtract %819 2 
                                         f32 %821 = OpImageSampleDrefExplicitLod %818 %819 %820 Lod %6 
                                Private f32* %822 = OpAccessChain %434 %27 
                                                      OpStore %822 %821 
                                       f32_3 %824 = OpLoad %636 
                                       f32_2 %825 = OpVectorShuffle %824 %824 0 2 
                                         f32 %826 = OpLoad %397 
                                         f32 %827 = OpCompositeExtract %825 0 
                                         f32 %828 = OpCompositeExtract %825 1 
                                       f32_3 %829 = OpCompositeConstruct %827 %828 %826 
                                                      OpStore %823 %829 
                         read_only Texture2D %830 = OpLoad %617 
                                     sampler %831 = OpLoad %619 
                  read_only Texture2DSampled %832 = OpSampledImage %830 %831 
                                       f32_3 %833 = OpLoad %823 
                                         f32 %834 = OpCompositeExtract %833 2 
                                         f32 %835 = OpImageSampleDrefExplicitLod %832 %833 %834 Lod %6 
                                Private f32* %836 = OpAccessChain %636 %27 
                                                      OpStore %836 %835 
                                Private f32* %837 = OpAccessChain %493 %36 
                                         f32 %838 = OpLoad %837 
                                Private f32* %839 = OpAccessChain %636 %27 
                                         f32 %840 = OpLoad %839 
                                         f32 %841 = OpFMul %838 %840 
                                Private f32* %842 = OpAccessChain %9 %27 
                                         f32 %843 = OpLoad %842 
                                         f32 %844 = OpFAdd %841 %843 
                                Private f32* %845 = OpAccessChain %9 %27 
                                                      OpStore %845 %844 
                                Private f32* %846 = OpAccessChain %493 %123 
                                         f32 %847 = OpLoad %846 
                                Private f32* %848 = OpAccessChain %434 %27 
                                         f32 %849 = OpLoad %848 
                                         f32 %850 = OpFMul %847 %849 
                                Private f32* %851 = OpAccessChain %9 %27 
                                         f32 %852 = OpLoad %851 
                                         f32 %853 = OpFAdd %850 %852 
                                Private f32* %854 = OpAccessChain %9 %27 
                                                      OpStore %854 %853 
                                       f32_4 %855 = OpLoad %469 
                                       f32_4 %856 = OpLoad %488 
                                       f32_4 %857 = OpVectorShuffle %856 %856 2 2 2 2 
                                       f32_4 %858 = OpFMul %855 %857 
                                                      OpStore %493 %858 
                                       f32_4 %859 = OpLoad %469 
                                       f32_4 %860 = OpLoad %488 
                                       f32_4 %861 = OpVectorShuffle %860 %860 3 3 3 3 
                                       f32_4 %862 = OpFMul %859 %861 
                                                      OpStore %469 %862 
                                Private f32* %863 = OpAccessChain %135 %123 
                                         f32 %864 = OpLoad %863 
                                Private f32* %865 = OpAccessChain %591 %114 
                                                      OpStore %865 %864 
                                       f32_4 %866 = OpLoad %53 
                                       f32_4 %867 = OpVectorShuffle %866 %866 0 1 0 1 
                              Uniform f32_4* %868 = OpAccessChain %63 %200 
                                       f32_4 %869 = OpLoad %868 
                                       f32_4 %870 = OpVectorShuffle %869 %869 0 1 0 1 
                                       f32_4 %871 = OpFMul %867 %870 
                                       f32_4 %872 = OpLoad %591 
                                       f32_4 %873 = OpVectorShuffle %872 %872 0 1 2 1 
                                       f32_4 %874 = OpFAdd %871 %873 
                                                      OpStore %488 %874 
                                       f32_4 %876 = OpLoad %488 
                                       f32_2 %877 = OpVectorShuffle %876 %876 0 1 
                                         f32 %878 = OpLoad %397 
                                         f32 %879 = OpCompositeExtract %877 0 
                                         f32 %880 = OpCompositeExtract %877 1 
                                       f32_3 %881 = OpCompositeConstruct %879 %880 %878 
                                                      OpStore %875 %881 
                         read_only Texture2D %882 = OpLoad %617 
                                     sampler %883 = OpLoad %619 
                  read_only Texture2DSampled %884 = OpSampledImage %882 %883 
                                       f32_3 %885 = OpLoad %875 
                                         f32 %886 = OpCompositeExtract %885 2 
                                         f32 %887 = OpImageSampleDrefExplicitLod %884 %885 %886 Lod %6 
                                Private f32* %888 = OpAccessChain %636 %27 
                                                      OpStore %888 %887 
                                       f32_4 %890 = OpLoad %488 
                                       f32_2 %891 = OpVectorShuffle %890 %890 2 3 
                                         f32 %892 = OpLoad %397 
                                         f32 %893 = OpCompositeExtract %891 0 
                                         f32 %894 = OpCompositeExtract %891 1 
                                       f32_3 %895 = OpCompositeConstruct %893 %894 %892 
                                                      OpStore %889 %895 
                         read_only Texture2D %896 = OpLoad %617 
                                     sampler %897 = OpLoad %619 
                  read_only Texture2DSampled %898 = OpSampledImage %896 %897 
                                       f32_3 %899 = OpLoad %889 
                                         f32 %900 = OpCompositeExtract %899 2 
                                         f32 %901 = OpImageSampleDrefExplicitLod %898 %899 %900 Lod %6 
                                                      OpStore %393 %901 
                                Private f32* %902 = OpAccessChain %493 %27 
                                         f32 %903 = OpLoad %902 
                                Private f32* %904 = OpAccessChain %636 %27 
                                         f32 %905 = OpLoad %904 
                                         f32 %906 = OpFMul %903 %905 
                                Private f32* %907 = OpAccessChain %9 %27 
                                         f32 %908 = OpLoad %907 
                                         f32 %909 = OpFAdd %906 %908 
                                Private f32* %910 = OpAccessChain %9 %27 
                                                      OpStore %910 %909 
                                Private f32* %911 = OpAccessChain %493 %114 
                                         f32 %912 = OpLoad %911 
                                         f32 %913 = OpLoad %393 
                                         f32 %914 = OpFMul %912 %913 
                                Private f32* %915 = OpAccessChain %9 %27 
                                         f32 %916 = OpLoad %915 
                                         f32 %917 = OpFAdd %914 %916 
                                Private f32* %918 = OpAccessChain %9 %27 
                                                      OpStore %918 %917 
                                       f32_4 %919 = OpLoad %53 
                                       f32_2 %920 = OpVectorShuffle %919 %919 0 1 
                              Uniform f32_4* %921 = OpAccessChain %63 %200 
                                       f32_4 %922 = OpLoad %921 
                                       f32_2 %923 = OpVectorShuffle %922 %922 0 1 
                                       f32_2 %924 = OpFMul %920 %923 
                                       f32_4 %925 = OpLoad %591 
                                       f32_2 %926 = OpVectorShuffle %925 %925 3 1 
                                       f32_2 %927 = OpFAdd %924 %926 
                                       f32_3 %928 = OpLoad %636 
                                       f32_3 %929 = OpVectorShuffle %928 %927 3 1 4 
                                                      OpStore %636 %929 
                                       f32_4 %930 = OpLoad %591 
                                       f32_3 %931 = OpVectorShuffle %930 %930 0 2 3 
                                       f32_4 %932 = OpLoad %135 
                                       f32_4 %933 = OpVectorShuffle %932 %931 4 1 5 6 
                                                      OpStore %135 %933 
                                Private f32* %934 = OpAccessChain %591 %114 
                                         f32 %935 = OpLoad %934 
                                Private f32* %936 = OpAccessChain %231 %123 
                                                      OpStore %936 %935 
                                       f32_4 %937 = OpLoad %53 
                                       f32_2 %938 = OpVectorShuffle %937 %937 0 1 
                              Uniform f32_4* %939 = OpAccessChain %63 %200 
                                       f32_4 %940 = OpLoad %939 
                                       f32_2 %941 = OpVectorShuffle %940 %940 0 1 
                                       f32_2 %942 = OpFMul %938 %941 
                                       f32_4 %943 = OpLoad %231 
                                       f32_2 %944 = OpVectorShuffle %943 %943 0 3 
                                       f32_2 %945 = OpFAdd %942 %944 
                                                      OpStore %434 %945 
                                       f32_2 %947 = OpLoad %434 
                                         f32 %948 = OpLoad %397 
                                         f32 %949 = OpCompositeExtract %947 0 
                                         f32 %950 = OpCompositeExtract %947 1 
                                       f32_3 %951 = OpCompositeConstruct %949 %950 %948 
                                                      OpStore %946 %951 
                         read_only Texture2D %952 = OpLoad %617 
                                     sampler %953 = OpLoad %619 
                  read_only Texture2DSampled %954 = OpSampledImage %952 %953 
                                       f32_3 %955 = OpLoad %946 
                                         f32 %956 = OpCompositeExtract %955 2 
                                         f32 %957 = OpImageSampleDrefExplicitLod %954 %955 %956 Lod %6 
                                Private f32* %958 = OpAccessChain %434 %27 
                                                      OpStore %958 %957 
                                       f32_3 %960 = OpLoad %636 
                                       f32_2 %961 = OpVectorShuffle %960 %960 0 2 
                                         f32 %962 = OpLoad %397 
                                         f32 %963 = OpCompositeExtract %961 0 
                                         f32 %964 = OpCompositeExtract %961 1 
                                       f32_3 %965 = OpCompositeConstruct %963 %964 %962 
                                                      OpStore %959 %965 
                         read_only Texture2D %966 = OpLoad %617 
                                     sampler %967 = OpLoad %619 
                  read_only Texture2DSampled %968 = OpSampledImage %966 %967 
                                       f32_3 %969 = OpLoad %959 
                                         f32 %970 = OpCompositeExtract %969 2 
                                         f32 %971 = OpImageSampleDrefExplicitLod %968 %969 %970 Lod %6 
                                Private f32* %972 = OpAccessChain %636 %27 
                                                      OpStore %972 %971 
                                Private f32* %973 = OpAccessChain %493 %36 
                                         f32 %974 = OpLoad %973 
                                Private f32* %975 = OpAccessChain %636 %27 
                                         f32 %976 = OpLoad %975 
                                         f32 %977 = OpFMul %974 %976 
                                Private f32* %978 = OpAccessChain %9 %27 
                                         f32 %979 = OpLoad %978 
                                         f32 %980 = OpFAdd %977 %979 
                                Private f32* %981 = OpAccessChain %9 %27 
                                                      OpStore %981 %980 
                                Private f32* %982 = OpAccessChain %493 %123 
                                         f32 %983 = OpLoad %982 
                                Private f32* %984 = OpAccessChain %434 %27 
                                         f32 %985 = OpLoad %984 
                                         f32 %986 = OpFMul %983 %985 
                                Private f32* %987 = OpAccessChain %9 %27 
                                         f32 %988 = OpLoad %987 
                                         f32 %989 = OpFAdd %986 %988 
                                Private f32* %990 = OpAccessChain %9 %27 
                                                      OpStore %990 %989 
                                       f32_4 %991 = OpLoad %53 
                                       f32_4 %992 = OpVectorShuffle %991 %991 0 1 0 1 
                              Uniform f32_4* %993 = OpAccessChain %63 %200 
                                       f32_4 %994 = OpLoad %993 
                                       f32_4 %995 = OpVectorShuffle %994 %994 0 1 0 1 
                                       f32_4 %996 = OpFMul %992 %995 
                                       f32_4 %997 = OpLoad %135 
                                       f32_4 %998 = OpVectorShuffle %997 %997 0 1 2 1 
                                       f32_4 %999 = OpFAdd %996 %998 
                                                      OpStore %488 %999 
                                      f32_4 %1000 = OpLoad %53 
                                      f32_2 %1001 = OpVectorShuffle %1000 %1000 0 1 
                             Uniform f32_4* %1002 = OpAccessChain %63 %200 
                                      f32_4 %1003 = OpLoad %1002 
                                      f32_2 %1004 = OpVectorShuffle %1003 %1003 0 1 
                                      f32_2 %1005 = OpFMul %1001 %1004 
                                      f32_4 %1006 = OpLoad %135 
                                      f32_2 %1007 = OpVectorShuffle %1006 %1006 3 1 
                                      f32_2 %1008 = OpFAdd %1005 %1007 
                                      f32_3 %1009 = OpLoad %636 
                                      f32_3 %1010 = OpVectorShuffle %1009 %1008 3 1 4 
                                                      OpStore %636 %1010 
                               Private f32* %1011 = OpAccessChain %135 %114 
                                        f32 %1012 = OpLoad %1011 
                               Private f32* %1013 = OpAccessChain %231 %114 
                                                      OpStore %1013 %1012 
                                      f32_4 %1014 = OpLoad %53 
                                      f32_2 %1015 = OpVectorShuffle %1014 %1014 0 1 
                             Uniform f32_4* %1016 = OpAccessChain %63 %200 
                                      f32_4 %1017 = OpLoad %1016 
                                      f32_2 %1018 = OpVectorShuffle %1017 %1017 0 1 
                                      f32_2 %1019 = OpFMul %1015 %1018 
                                      f32_4 %1020 = OpLoad %231 
                                      f32_2 %1021 = OpVectorShuffle %1020 %1020 0 1 
                                      f32_2 %1022 = OpFAdd %1019 %1021 
                                      f32_4 %1023 = OpLoad %53 
                                      f32_4 %1024 = OpVectorShuffle %1023 %1022 4 5 2 3 
                                                      OpStore %53 %1024 
                                      f32_4 %1026 = OpLoad %53 
                                      f32_2 %1027 = OpVectorShuffle %1026 %1026 0 1 
                                        f32 %1028 = OpLoad %397 
                                        f32 %1029 = OpCompositeExtract %1027 0 
                                        f32 %1030 = OpCompositeExtract %1027 1 
                                      f32_3 %1031 = OpCompositeConstruct %1029 %1030 %1028 
                                                      OpStore %1025 %1031 
                        read_only Texture2D %1032 = OpLoad %617 
                                    sampler %1033 = OpLoad %619 
                 read_only Texture2DSampled %1034 = OpSampledImage %1032 %1033 
                                      f32_3 %1035 = OpLoad %1025 
                                        f32 %1036 = OpCompositeExtract %1035 2 
                                        f32 %1037 = OpImageSampleDrefExplicitLod %1034 %1035 %1036 Lod %6 
                               Private f32* %1038 = OpAccessChain %53 %27 
                                                      OpStore %1038 %1037 
                                      f32_3 %1040 = OpLoad %636 
                                      f32_2 %1041 = OpVectorShuffle %1040 %1040 0 2 
                                        f32 %1042 = OpLoad %397 
                                        f32 %1043 = OpCompositeExtract %1041 0 
                                        f32 %1044 = OpCompositeExtract %1041 1 
                                      f32_3 %1045 = OpCompositeConstruct %1043 %1044 %1042 
                                                      OpStore %1039 %1045 
                        read_only Texture2D %1046 = OpLoad %617 
                                    sampler %1047 = OpLoad %619 
                 read_only Texture2DSampled %1048 = OpSampledImage %1046 %1047 
                                      f32_3 %1049 = OpLoad %1039 
                                        f32 %1050 = OpCompositeExtract %1049 2 
                                        f32 %1051 = OpImageSampleDrefExplicitLod %1048 %1049 %1050 Lod %6 
                               Private f32* %1052 = OpAccessChain %636 %27 
                                                      OpStore %1052 %1051 
                                      f32_4 %1054 = OpLoad %488 
                                      f32_2 %1055 = OpVectorShuffle %1054 %1054 0 1 
                                        f32 %1056 = OpLoad %397 
                                        f32 %1057 = OpCompositeExtract %1055 0 
                                        f32 %1058 = OpCompositeExtract %1055 1 
                                      f32_3 %1059 = OpCompositeConstruct %1057 %1058 %1056 
                                                      OpStore %1053 %1059 
                        read_only Texture2D %1060 = OpLoad %617 
                                    sampler %1061 = OpLoad %619 
                 read_only Texture2DSampled %1062 = OpSampledImage %1060 %1061 
                                      f32_3 %1063 = OpLoad %1053 
                                        f32 %1064 = OpCompositeExtract %1063 2 
                                        f32 %1065 = OpImageSampleDrefExplicitLod %1062 %1063 %1064 Lod %6 
                                                      OpStore %393 %1065 
                                      f32_4 %1067 = OpLoad %488 
                                      f32_2 %1068 = OpVectorShuffle %1067 %1067 2 3 
                                        f32 %1069 = OpLoad %397 
                                        f32 %1070 = OpCompositeExtract %1068 0 
                                        f32 %1071 = OpCompositeExtract %1068 1 
                                      f32_3 %1072 = OpCompositeConstruct %1070 %1071 %1069 
                                                      OpStore %1066 %1072 
                        read_only Texture2D %1073 = OpLoad %617 
                                    sampler %1074 = OpLoad %619 
                 read_only Texture2DSampled %1075 = OpSampledImage %1073 %1074 
                                      f32_3 %1076 = OpLoad %1066 
                                        f32 %1077 = OpCompositeExtract %1076 2 
                                        f32 %1078 = OpImageSampleDrefExplicitLod %1075 %1076 %1077 Lod %6 
                                                      OpStore %397 %1078 
                               Private f32* %1079 = OpAccessChain %469 %27 
                                        f32 %1080 = OpLoad %1079 
                                        f32 %1081 = OpLoad %393 
                                        f32 %1082 = OpFMul %1080 %1081 
                               Private f32* %1083 = OpAccessChain %9 %27 
                                        f32 %1084 = OpLoad %1083 
                                        f32 %1085 = OpFAdd %1082 %1084 
                               Private f32* %1086 = OpAccessChain %9 %27 
                                                      OpStore %1086 %1085 
                               Private f32* %1087 = OpAccessChain %469 %114 
                                        f32 %1088 = OpLoad %1087 
                                        f32 %1089 = OpLoad %397 
                                        f32 %1090 = OpFMul %1088 %1089 
                               Private f32* %1091 = OpAccessChain %9 %27 
                                        f32 %1092 = OpLoad %1091 
                                        f32 %1093 = OpFAdd %1090 %1092 
                               Private f32* %1094 = OpAccessChain %9 %27 
                                                      OpStore %1094 %1093 
                               Private f32* %1095 = OpAccessChain %469 %36 
                                        f32 %1096 = OpLoad %1095 
                               Private f32* %1097 = OpAccessChain %636 %27 
                                        f32 %1098 = OpLoad %1097 
                                        f32 %1099 = OpFMul %1096 %1098 
                               Private f32* %1100 = OpAccessChain %9 %27 
                                        f32 %1101 = OpLoad %1100 
                                        f32 %1102 = OpFAdd %1099 %1101 
                               Private f32* %1103 = OpAccessChain %9 %27 
                                                      OpStore %1103 %1102 
                               Private f32* %1104 = OpAccessChain %469 %123 
                                        f32 %1105 = OpLoad %1104 
                               Private f32* %1106 = OpAccessChain %53 %27 
                                        f32 %1107 = OpLoad %1106 
                                        f32 %1108 = OpFMul %1105 %1107 
                               Private f32* %1109 = OpAccessChain %9 %27 
                                        f32 %1110 = OpLoad %1109 
                                        f32 %1111 = OpFAdd %1108 %1110 
                               Private f32* %1112 = OpAccessChain %9 %27 
                                                      OpStore %1112 %1111 
                               Uniform f32* %1114 = OpAccessChain %63 %182 %27 
                                        f32 %1115 = OpLoad %1114 
                                        f32 %1116 = OpFNegate %1115 
                                        f32 %1117 = OpFAdd %1116 %34 
                               Private f32* %1118 = OpAccessChain %636 %27 
                                                      OpStore %1118 %1117 
                                      f32_4 %1121 = OpLoad %9 
                                      f32_4 %1122 = OpVectorShuffle %1121 %1121 0 0 0 0 
                                      f32_3 %1123 = OpLoad %636 
                                      f32_4 %1124 = OpVectorShuffle %1123 %1123 0 0 0 0 
                                      f32_4 %1125 = OpFMul %1122 %1124 
                             Uniform f32_4* %1126 = OpAccessChain %63 %182 
                                      f32_4 %1127 = OpLoad %1126 
                                      f32_4 %1128 = OpVectorShuffle %1127 %1127 0 0 0 0 
                                      f32_4 %1129 = OpFAdd %1125 %1128 
                                                      OpStore %1120 %1129 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "SHADOWS_SPLIT_SPHERES" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "SHADOWS_SPLIT_SPHERES" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraInvProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in  vec4 in_POSITION0;
in  vec2 in_TEXCOORD0;
in  vec3 in_TEXCOORD1;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_CameraInvProjection[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_CameraInvProjection[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    vs_TEXCOORD0.zw = u_xlat1.zz + u_xlat1.xw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = in_TEXCOORD1.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-hlslcc_mtx4x4unity_CameraInvProjection[2].xyz);
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[2].xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;
    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;
    u_xlat1.w = (-u_xlat1.z);
    vs_TEXCOORD2.xyz = u_xlat1.xyw;
    u_xlat0.w = (-u_xlat0.z);
    vs_TEXCOORD3.xyz = u_xlat0.xyw;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_CameraInvProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	vec4 _LightShadowData;
uniform 	vec4 _ShadowMapTexture_TexelSize;
UNITY_LOCATION(0) uniform  sampler2D _CameraDepthTexture;
UNITY_LOCATION(1) uniform  sampler2D _ShadowMapTexture;
UNITY_LOCATION(2) uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
in  vec4 vs_TEXCOORD0;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
bvec4 u_xlatb1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
vec4 u_xlat6;
vec4 u_xlat7;
vec3 u_xlat8;
vec3 u_xlat9;
float u_xlat16;
vec2 u_xlat17;
float u_xlat24;
void main()
{
    u_xlat0 = texture(_CameraDepthTexture, vs_TEXCOORD0.xy).yzxw;
    u_xlat0.xy = vs_TEXCOORD0.zw;
    u_xlat0.xyz = u_xlat0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_CameraInvProjection[1];
    u_xlat1 = hlslcc_mtx4x4unity_CameraInvProjection[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_CameraInvProjection[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_CameraInvProjection[3];
    u_xlat0.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_CameraToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_CameraToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_CameraToWorld[2] * (-u_xlat0.zzzz) + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_CameraToWorld[3];
    u_xlat1.xyz = u_xlat0.xyz + (-unity_ShadowSplitSpheres[0].xyz);
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat2.xyz = u_xlat0.xyz + (-unity_ShadowSplitSpheres[1].xyz);
    u_xlat1.y = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat2.xyz = u_xlat0.xyz + (-unity_ShadowSplitSpheres[2].xyz);
    u_xlat1.z = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat2.xyz = u_xlat0.xyz + (-unity_ShadowSplitSpheres[3].xyz);
    u_xlat1.w = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlatb1 = lessThan(u_xlat1, unity_ShadowSplitSqRadii);
    u_xlat2.x = (u_xlatb1.x) ? float(-1.0) : float(-0.0);
    u_xlat2.y = (u_xlatb1.y) ? float(-1.0) : float(-0.0);
    u_xlat2.z = (u_xlatb1.z) ? float(-1.0) : float(-0.0);
    u_xlat1.x = u_xlatb1.x ? float(1.0) : 0.0;
    u_xlat1.y = u_xlatb1.y ? float(1.0) : 0.0;
    u_xlat1.z = u_xlatb1.z ? float(1.0) : 0.0;
    u_xlat1.w = u_xlatb1.w ? float(1.0) : 0.0;
;
    u_xlat9.xyz = u_xlat2.xyz + u_xlat1.yzw;
    u_xlat9.xyz = max(u_xlat9.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[5].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[4].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[6].xyz * u_xlat0.zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[7].xyz * u_xlat0.www + u_xlat2.xyz;
    u_xlat2.xyz = u_xlat9.xxx * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * u_xlat0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * u_xlat0.zzz + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[3].xyz * u_xlat0.www + u_xlat3.xyz;
    u_xlat2.xyz = u_xlat3.xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat3.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[9].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[8].xyz * u_xlat0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[10].xyz * u_xlat0.zzz + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[11].xyz * u_xlat0.www + u_xlat3.xyz;
    u_xlat1.xyz = u_xlat3.xyz * u_xlat9.yyy + u_xlat2.xyz;
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[13].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[12].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[14].xyz * u_xlat0.zzz + u_xlat2.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[15].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat9.zzz + u_xlat1.xyz;
    u_xlat1.xy = u_xlat0.xy * _ShadowMapTexture_TexelSize.zw + vec2(0.5, 0.5);
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlat0.xy = u_xlat0.xy * _ShadowMapTexture_TexelSize.zw + (-u_xlat1.xy);
    u_xlat17.xy = (-u_xlat0.xy) + vec2(1.0, 1.0);
    u_xlat2.xy = min(u_xlat0.xy, vec2(0.0, 0.0));
    u_xlat17.xy = (-u_xlat2.xy) * u_xlat2.xy + u_xlat17.xy;
    u_xlat17.xy = u_xlat17.xy + vec2(2.0, 2.0);
    u_xlat2.xy = u_xlat17.xy * vec2(0.0816320032, 0.0816320032);
    u_xlat3.y = u_xlat2.x;
    u_xlat17.xy = max(u_xlat0.xy, vec2(0.0, 0.0));
    u_xlat4 = u_xlat0.xxyy + vec4(0.5, 1.0, 0.5, 1.0);
    u_xlat17.xy = (-u_xlat17.xy) * u_xlat17.xy + u_xlat4.yw;
    u_xlat4 = u_xlat4.xxzz * u_xlat4.xxzz;
    u_xlat17.xy = u_xlat17.xy + vec2(2.0, 2.0);
    u_xlat5.z = u_xlat17.x * 0.0816320032;
    u_xlat6.z = u_xlat17.y * 0.0816320032;
    u_xlat17.xy = u_xlat4.xz * vec2(0.5, 0.5) + (-u_xlat0.xy);
    u_xlat4.xy = u_xlat4.yw * vec2(0.0408160016, 0.0408160016);
    u_xlat6.xy = u_xlat17.yx * vec2(0.0816320032, 0.0816320032);
    u_xlat5.x = u_xlat6.y;
    u_xlat5.yw = u_xlat0.xx * vec2(-0.0816320032, 0.0816320032) + vec2(0.163264006, 0.0816320032);
    u_xlat3.xz = u_xlat0.xx * vec2(-0.0816320032, 0.0816320032) + vec2(0.0816320032, 0.163264006);
    u_xlat3.w = u_xlat4.x;
    u_xlat2.w = u_xlat4.y;
    u_xlat4 = u_xlat3 + u_xlat5;
    u_xlat3 = u_xlat3 / u_xlat4;
    u_xlat3 = u_xlat3 + vec4(-3.5, -1.5, 0.5, 2.5);
    u_xlat3 = u_xlat3.wxyz * _ShadowMapTexture_TexelSize.xxxx;
    u_xlat5.xzw = u_xlat3.yzw;
    u_xlat6.yw = u_xlat0.yy * vec2(-0.0816320032, 0.0816320032) + vec2(0.163264006, 0.0816320032);
    u_xlat2.xz = u_xlat0.yy * vec2(-0.0816320032, 0.0816320032) + vec2(0.0816320032, 0.163264006);
    u_xlat6 = u_xlat2 + u_xlat6;
    u_xlat2 = u_xlat2 / u_xlat6;
    u_xlat2 = u_xlat2 + vec4(-3.5, -1.5, 0.5, 2.5);
    u_xlat2 = u_xlat2.xwyz * _ShadowMapTexture_TexelSize.yyyy;
    u_xlat5.y = u_xlat2.x;
    u_xlat7 = u_xlat1.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat5.xyzy;
    vec3 txVec0 = vec3(u_xlat7.zw,u_xlat0.z);
    u_xlat0.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
    vec3 txVec1 = vec3(u_xlat7.xy,u_xlat0.z);
    u_xlat8.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec1, 0.0);
    u_xlat7 = u_xlat4 * u_xlat6.xxxx;
    u_xlat0.x = u_xlat0.x * u_xlat7.y;
    u_xlat0.x = u_xlat7.x * u_xlat8.x + u_xlat0.x;
    u_xlat8.xz = u_xlat1.xy * _ShadowMapTexture_TexelSize.xy + u_xlat5.wy;
    u_xlat3.y = u_xlat5.y;
    u_xlat17.xy = u_xlat1.xy * _ShadowMapTexture_TexelSize.xy + u_xlat3.xy;
    vec3 txVec2 = vec3(u_xlat17.xy,u_xlat0.z);
    u_xlat17.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec2, 0.0);
    vec3 txVec3 = vec3(u_xlat8.xz,u_xlat0.z);
    u_xlat8.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec3, 0.0);
    u_xlat0.x = u_xlat7.z * u_xlat8.x + u_xlat0.x;
    u_xlat0.x = u_xlat7.w * u_xlat17.x + u_xlat0.x;
    u_xlat5.y = u_xlat2.z;
    u_xlat7 = u_xlat1.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat5.xyzy;
    vec3 txVec4 = vec3(u_xlat7.xy,u_xlat0.z);
    u_xlat8.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec4, 0.0);
    vec3 txVec5 = vec3(u_xlat7.zw,u_xlat0.z);
    u_xlat24 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec5, 0.0);
    u_xlat7 = u_xlat4 * u_xlat6.yyyy;
    u_xlat0.x = u_xlat7.x * u_xlat8.x + u_xlat0.x;
    u_xlat0.x = u_xlat7.y * u_xlat24 + u_xlat0.x;
    u_xlat8.xz = u_xlat1.xy * _ShadowMapTexture_TexelSize.xy + u_xlat5.wy;
    u_xlat3.z = u_xlat5.y;
    u_xlat17.xy = u_xlat1.xy * _ShadowMapTexture_TexelSize.xy + u_xlat3.xz;
    vec3 txVec6 = vec3(u_xlat17.xy,u_xlat0.z);
    u_xlat17.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec6, 0.0);
    vec3 txVec7 = vec3(u_xlat8.xz,u_xlat0.z);
    u_xlat8.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec7, 0.0);
    u_xlat0.x = u_xlat7.z * u_xlat8.x + u_xlat0.x;
    u_xlat0.x = u_xlat7.w * u_xlat17.x + u_xlat0.x;
    u_xlat5.y = u_xlat2.w;
    u_xlat7 = u_xlat1.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat5.xyzy;
    vec3 txVec8 = vec3(u_xlat7.xy,u_xlat0.z);
    u_xlat8.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec8, 0.0);
    vec3 txVec9 = vec3(u_xlat7.zw,u_xlat0.z);
    u_xlat24 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec9, 0.0);
    u_xlat7 = u_xlat4 * u_xlat6.zzzz;
    u_xlat4 = u_xlat4 * u_xlat6.wwww;
    u_xlat0.x = u_xlat7.x * u_xlat8.x + u_xlat0.x;
    u_xlat0.x = u_xlat7.y * u_xlat24 + u_xlat0.x;
    u_xlat8.xz = u_xlat1.xy * _ShadowMapTexture_TexelSize.xy + u_xlat5.wy;
    u_xlat2.xzw = u_xlat5.xzw;
    u_xlat3.w = u_xlat5.y;
    u_xlat17.xy = u_xlat1.xy * _ShadowMapTexture_TexelSize.xy + u_xlat3.xw;
    vec3 txVec10 = vec3(u_xlat17.xy,u_xlat0.z);
    u_xlat17.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec10, 0.0);
    vec3 txVec11 = vec3(u_xlat8.xz,u_xlat0.z);
    u_xlat8.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec11, 0.0);
    u_xlat0.x = u_xlat7.z * u_xlat8.x + u_xlat0.x;
    u_xlat0.x = u_xlat7.w * u_xlat17.x + u_xlat0.x;
    u_xlat5 = u_xlat1.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat2.xyzy;
    u_xlat8.xz = u_xlat1.xy * _ShadowMapTexture_TexelSize.xy + u_xlat2.wy;
    u_xlat3.y = u_xlat2.y;
    u_xlat1.xy = u_xlat1.xy * _ShadowMapTexture_TexelSize.xy + u_xlat3.xy;
    vec3 txVec12 = vec3(u_xlat1.xy,u_xlat0.z);
    u_xlat1.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec12, 0.0);
    vec3 txVec13 = vec3(u_xlat8.xz,u_xlat0.z);
    u_xlat8.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec13, 0.0);
    vec3 txVec14 = vec3(u_xlat5.xy,u_xlat0.z);
    u_xlat24 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec14, 0.0);
    vec3 txVec15 = vec3(u_xlat5.zw,u_xlat0.z);
    u_xlat16 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec15, 0.0);
    u_xlat0.x = u_xlat4.x * u_xlat24 + u_xlat0.x;
    u_xlat0.x = u_xlat4.y * u_xlat16 + u_xlat0.x;
    u_xlat0.x = u_xlat4.z * u_xlat8.x + u_xlat0.x;
    u_xlat0.x = u_xlat4.w * u_xlat1.x + u_xlat0.x;
    u_xlat8.x = (-_LightShadowData.x) + 1.0;
    SV_Target0 = u_xlat0.xxxx * u_xlat8.xxxx + _LightShadowData.xxxx;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "SHADOWS_SPLIT_SPHERES" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 193
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %80 %119 %129 %134 %136 %177 %184 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpMemberDecorate %78 0 BuiltIn 78 
                                                      OpMemberDecorate %78 1 BuiltIn 78 
                                                      OpMemberDecorate %78 2 BuiltIn 78 
                                                      OpDecorate %78 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 119 
                                                      OpDecorate %129 Location 129 
                                                      OpDecorate vs_TEXCOORD1 Location 134 
                                                      OpDecorate %136 Location 136 
                                                      OpDecorate vs_TEXCOORD2 Location 177 
                                                      OpDecorate vs_TEXCOORD3 Location 184 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %16 %17 %18 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4];}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 2 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %29 = OpConstant 0 
                                          i32 %45 = OpConstant 3 
                               Private f32_4* %49 = OpVariable Private 
                                          u32 %76 = OpConstant 1 
                                              %77 = OpTypeArray %6 %76 
                                              %78 = OpTypeStruct %7 %6 %77 
                                              %79 = OpTypePointer Output %78 
         Output struct {f32_4; f32; f32[1];}* %80 = OpVariable Output 
                                              %82 = OpTypePointer Output %7 
                                              %84 = OpTypePointer Private %6 
                                          u32 %87 = OpConstant 0 
                                              %88 = OpTypePointer Uniform %6 
                                              %93 = OpTypeVector %6 3 
                                          f32 %96 = OpConstant 3.674022E-40 
                                        f32_3 %97 = OpConstantComposite %96 %96 %96 
                                             %101 = OpTypePointer Private %93 
                              Private f32_3* %102 = OpVariable Private 
                       Output f32_4* vs_TEXCOORD0 = OpVariable Output 
                                             %120 = OpTypeVector %6 2 
                                             %128 = OpTypePointer Input %120 
                                Input f32_2* %129 = OpVariable Input 
                                             %133 = OpTypePointer Output %93 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                                             %135 = OpTypePointer Input %93 
                                Input f32_3* %136 = OpVariable Input 
                                         u32 %171 = OpConstant 2 
                                         u32 %175 = OpConstant 3 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                       Output f32_3* vs_TEXCOORD3 = OpVariable Output 
                                             %187 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %30 = OpAccessChain %21 %23 %29 
                                        f32_4 %31 = OpLoad %30 
                                        f32_4 %32 = OpLoad %11 
                                        f32_4 %33 = OpVectorShuffle %32 %32 0 0 0 0 
                                        f32_4 %34 = OpFMul %31 %33 
                                        f32_4 %35 = OpLoad %9 
                                        f32_4 %36 = OpFAdd %34 %35 
                                                      OpStore %9 %36 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %23 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %44 = OpLoad %9 
                               Uniform f32_4* %46 = OpAccessChain %21 %23 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_4 %48 = OpFAdd %44 %47 
                                                      OpStore %9 %48 
                                        f32_4 %50 = OpLoad %9 
                                        f32_4 %51 = OpVectorShuffle %50 %50 1 1 1 1 
                               Uniform f32_4* %52 = OpAccessChain %21 %45 %24 
                                        f32_4 %53 = OpLoad %52 
                                        f32_4 %54 = OpFMul %51 %53 
                                                      OpStore %49 %54 
                               Uniform f32_4* %55 = OpAccessChain %21 %45 %29 
                                        f32_4 %56 = OpLoad %55 
                                        f32_4 %57 = OpLoad %9 
                                        f32_4 %58 = OpVectorShuffle %57 %57 0 0 0 0 
                                        f32_4 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %49 
                                        f32_4 %61 = OpFAdd %59 %60 
                                                      OpStore %49 %61 
                               Uniform f32_4* %62 = OpAccessChain %21 %45 %23 
                                        f32_4 %63 = OpLoad %62 
                                        f32_4 %64 = OpLoad %9 
                                        f32_4 %65 = OpVectorShuffle %64 %64 2 2 2 2 
                                        f32_4 %66 = OpFMul %63 %65 
                                        f32_4 %67 = OpLoad %49 
                                        f32_4 %68 = OpFAdd %66 %67 
                                                      OpStore %49 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %45 %45 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %9 
                                        f32_4 %72 = OpVectorShuffle %71 %71 3 3 3 3 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %49 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %9 %75 
                                        f32_4 %81 = OpLoad %9 
                                Output f32_4* %83 = OpAccessChain %80 %29 
                                                      OpStore %83 %81 
                                 Private f32* %85 = OpAccessChain %9 %76 
                                          f32 %86 = OpLoad %85 
                                 Uniform f32* %89 = OpAccessChain %21 %29 %87 
                                          f32 %90 = OpLoad %89 
                                          f32 %91 = OpFMul %86 %90 
                                 Private f32* %92 = OpAccessChain %9 %76 
                                                      OpStore %92 %91 
                                        f32_4 %94 = OpLoad %9 
                                        f32_3 %95 = OpVectorShuffle %94 %94 0 3 1 
                                        f32_3 %98 = OpFMul %95 %97 
                                        f32_4 %99 = OpLoad %49 
                                       f32_4 %100 = OpVectorShuffle %99 %98 4 1 5 6 
                                                      OpStore %49 %100 
                                       f32_4 %103 = OpLoad %9 
                                       f32_3 %104 = OpVectorShuffle %103 %103 1 1 1 
                              Uniform f32_4* %105 = OpAccessChain %21 %24 %24 
                                       f32_4 %106 = OpLoad %105 
                                       f32_3 %107 = OpVectorShuffle %106 %106 0 1 2 
                                       f32_3 %108 = OpFMul %104 %107 
                                                      OpStore %102 %108 
                              Uniform f32_4* %109 = OpAccessChain %21 %24 %29 
                                       f32_4 %110 = OpLoad %109 
                                       f32_3 %111 = OpVectorShuffle %110 %110 0 1 2 
                                       f32_4 %112 = OpLoad %9 
                                       f32_3 %113 = OpVectorShuffle %112 %112 0 0 0 
                                       f32_3 %114 = OpFMul %111 %113 
                                       f32_3 %115 = OpLoad %102 
                                       f32_3 %116 = OpFAdd %114 %115 
                                       f32_4 %117 = OpLoad %9 
                                       f32_4 %118 = OpVectorShuffle %117 %116 4 5 6 3 
                                                      OpStore %9 %118 
                                       f32_4 %121 = OpLoad %49 
                                       f32_2 %122 = OpVectorShuffle %121 %121 2 2 
                                       f32_4 %123 = OpLoad %49 
                                       f32_2 %124 = OpVectorShuffle %123 %123 0 3 
                                       f32_2 %125 = OpFAdd %122 %124 
                                       f32_4 %126 = OpLoad vs_TEXCOORD0 
                                       f32_4 %127 = OpVectorShuffle %126 %125 0 1 4 5 
                                                      OpStore vs_TEXCOORD0 %127 
                                       f32_2 %130 = OpLoad %129 
                                       f32_4 %131 = OpLoad vs_TEXCOORD0 
                                       f32_4 %132 = OpVectorShuffle %131 %130 4 5 2 3 
                                                      OpStore vs_TEXCOORD0 %132 
                                       f32_3 %137 = OpLoad %136 
                                                      OpStore vs_TEXCOORD1 %137 
                                       f32_4 %138 = OpLoad %9 
                                       f32_3 %139 = OpVectorShuffle %138 %138 0 1 2 
                              Uniform f32_4* %140 = OpAccessChain %21 %24 %23 
                                       f32_4 %141 = OpLoad %140 
                                       f32_3 %142 = OpVectorShuffle %141 %141 0 1 2 
                                       f32_3 %143 = OpFNegate %142 
                                       f32_3 %144 = OpFAdd %139 %143 
                                       f32_4 %145 = OpLoad %49 
                                       f32_4 %146 = OpVectorShuffle %145 %144 4 5 6 3 
                                                      OpStore %49 %146 
                                       f32_4 %147 = OpLoad %9 
                                       f32_3 %148 = OpVectorShuffle %147 %147 0 1 2 
                              Uniform f32_4* %149 = OpAccessChain %21 %24 %23 
                                       f32_4 %150 = OpLoad %149 
                                       f32_3 %151 = OpVectorShuffle %150 %150 0 1 2 
                                       f32_3 %152 = OpFAdd %148 %151 
                                       f32_4 %153 = OpLoad %9 
                                       f32_4 %154 = OpVectorShuffle %153 %152 4 5 6 3 
                                                      OpStore %9 %154 
                                       f32_4 %155 = OpLoad %9 
                                       f32_3 %156 = OpVectorShuffle %155 %155 0 1 2 
                              Uniform f32_4* %157 = OpAccessChain %21 %24 %45 
                                       f32_4 %158 = OpLoad %157 
                                       f32_3 %159 = OpVectorShuffle %158 %158 0 1 2 
                                       f32_3 %160 = OpFAdd %156 %159 
                                       f32_4 %161 = OpLoad %9 
                                       f32_4 %162 = OpVectorShuffle %161 %160 4 5 6 3 
                                                      OpStore %9 %162 
                                       f32_4 %163 = OpLoad %49 
                                       f32_3 %164 = OpVectorShuffle %163 %163 0 1 2 
                              Uniform f32_4* %165 = OpAccessChain %21 %24 %45 
                                       f32_4 %166 = OpLoad %165 
                                       f32_3 %167 = OpVectorShuffle %166 %166 0 1 2 
                                       f32_3 %168 = OpFAdd %164 %167 
                                       f32_4 %169 = OpLoad %49 
                                       f32_4 %170 = OpVectorShuffle %169 %168 4 5 6 3 
                                                      OpStore %49 %170 
                                Private f32* %172 = OpAccessChain %49 %171 
                                         f32 %173 = OpLoad %172 
                                         f32 %174 = OpFNegate %173 
                                Private f32* %176 = OpAccessChain %49 %175 
                                                      OpStore %176 %174 
                                       f32_4 %178 = OpLoad %49 
                                       f32_3 %179 = OpVectorShuffle %178 %178 0 1 3 
                                                      OpStore vs_TEXCOORD2 %179 
                                Private f32* %180 = OpAccessChain %9 %171 
                                         f32 %181 = OpLoad %180 
                                         f32 %182 = OpFNegate %181 
                                Private f32* %183 = OpAccessChain %9 %175 
                                                      OpStore %183 %182 
                                       f32_4 %185 = OpLoad %9 
                                       f32_3 %186 = OpVectorShuffle %185 %185 0 1 3 
                                                      OpStore vs_TEXCOORD3 %186 
                                 Output f32* %188 = OpAccessChain %80 %29 %76 
                                         f32 %189 = OpLoad %188 
                                         f32 %190 = OpFNegate %189 
                                 Output f32* %191 = OpAccessChain %80 %29 %76 
                                                      OpStore %191 %190 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 1207
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %21 %1196 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpDecorate %12 DescriptorSet 12 
                                                      OpDecorate %12 Binding 12 
                                                      OpDecorate %16 DescriptorSet 16 
                                                      OpDecorate %16 Binding 16 
                                                      OpDecorate vs_TEXCOORD0 Location 21 
                                                      OpDecorate %57 ArrayStride 57 
                                                      OpDecorate %58 ArrayStride 58 
                                                      OpDecorate %59 ArrayStride 59 
                                                      OpDecorate %61 ArrayStride 61 
                                                      OpMemberDecorate %62 0 Offset 62 
                                                      OpMemberDecorate %62 1 Offset 62 
                                                      OpMemberDecorate %62 2 Offset 62 
                                                      OpMemberDecorate %62 3 Offset 62 
                                                      OpMemberDecorate %62 4 Offset 62 
                                                      OpMemberDecorate %62 5 Offset 62 
                                                      OpMemberDecorate %62 6 Offset 62 
                                                      OpDecorate %62 Block 
                                                      OpDecorate %64 DescriptorSet 64 
                                                      OpDecorate %64 Binding 64 
                                                      OpDecorate %691 DescriptorSet 691 
                                                      OpDecorate %691 Binding 691 
                                                      OpDecorate %693 DescriptorSet 693 
                                                      OpDecorate %693 Binding 693 
                                                      OpDecorate %1196 Location 1196 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypePointer UniformConstant %10 
         UniformConstant read_only Texture2D* %12 = OpVariable UniformConstant 
                                              %14 = OpTypeSampler 
                                              %15 = OpTypePointer UniformConstant %14 
                     UniformConstant sampler* %16 = OpVariable UniformConstant 
                                              %18 = OpTypeSampledImage %10 
                                              %20 = OpTypePointer Input %7 
                        Input f32_4* vs_TEXCOORD0 = OpVariable Input 
                                              %22 = OpTypeVector %6 2 
                                              %26 = OpTypeInt 32 0 
                                          u32 %27 = OpConstant 0 
                                              %29 = OpTypePointer Private %6 
                                          f32 %34 = OpConstant 3.674022E-40 
                                          u32 %36 = OpConstant 2 
                                              %42 = OpTypeVector %6 3 
                                          f32 %45 = OpConstant 3.674022E-40 
                                        f32_3 %46 = OpConstantComposite %45 %45 %45 
                                          f32 %48 = OpConstant 3.674022E-40 
                                        f32_3 %49 = OpConstantComposite %48 %48 %48 
                               Private f32_4* %53 = OpVariable Private 
                                          u32 %56 = OpConstant 4 
                                              %57 = OpTypeArray %7 %56 
                                              %58 = OpTypeArray %7 %56 
                                              %59 = OpTypeArray %7 %56 
                                          u32 %60 = OpConstant 16 
                                              %61 = OpTypeArray %7 %60 
                                              %62 = OpTypeStruct %57 %58 %59 %7 %61 %7 %7 
                                              %63 = OpTypePointer Uniform %62 
Uniform struct {f32_4[4]; f32_4[4]; f32_4[4]; f32_4; f32_4[16]; f32_4; f32_4;}* %64 = OpVariable Uniform 
                                              %65 = OpTypeInt 32 1 
                                          i32 %66 = OpConstant 0 
                                          i32 %67 = OpConstant 1 
                                              %68 = OpTypePointer Uniform %7 
                                          i32 %79 = OpConstant 2 
                                          i32 %88 = OpConstant 3 
                              Private f32_4* %138 = OpVariable Private 
                                         u32 %153 = OpConstant 1 
                                         u32 %184 = OpConstant 3 
                                             %186 = OpTypeBool 
                                             %187 = OpTypeVector %186 4 
                                             %188 = OpTypePointer Private %187 
                             Private bool_4* %189 = OpVariable Private 
                                             %194 = OpTypePointer Private %186 
                                         f32 %197 = OpConstant 3.674022E-40 
                                         f32 %210 = OpConstant 3.674022E-40 
                                       f32_3 %234 = OpConstantComposite %210 %210 %210 
                                         i32 %240 = OpConstant 4 
                                         i32 %241 = OpConstant 5 
                                         i32 %259 = OpConstant 6 
                                         i32 %271 = OpConstant 7 
                              Private f32_4* %290 = OpVariable Private 
                                       f32_4 %343 = OpConstantComposite %34 %34 %34 %34 
                                         i32 %348 = OpConstant 9 
                                         i32 %355 = OpConstant 8 
                                         i32 %367 = OpConstant 10 
                                         i32 %379 = OpConstant 11 
                                         i32 %403 = OpConstant 13 
                                         i32 %410 = OpConstant 12 
                                         i32 %422 = OpConstant 14 
                                         i32 %434 = OpConstant 15 
                                             %456 = OpTypePointer Private %22 
                              Private f32_2* %457 = OpVariable Private 
                                         f32 %464 = OpConstant 3.674022E-40 
                                       f32_2 %465 = OpConstantComposite %464 %464 
                                Private f32* %480 = OpVariable Private 
                                       f32_2 %492 = OpConstantComposite %34 %34 
                                       f32_2 %498 = OpConstantComposite %210 %210 
                                       f32_2 %515 = OpConstantComposite %45 %45 
                                         f32 %521 = OpConstant 3.674022E-40 
                                       f32_2 %522 = OpConstantComposite %521 %521 
                              Private f32_4* %534 = OpVariable Private 
                                       f32_4 %537 = OpConstantComposite %464 %34 %464 %34 
                              Private f32_4* %560 = OpVariable Private 
                              Private f32_4* %565 = OpVariable Private 
                                         f32 %572 = OpConstant 3.674022E-40 
                                       f32_2 %573 = OpConstantComposite %572 %521 
                                         f32 %575 = OpConstant 3.674022E-40 
                                       f32_2 %576 = OpConstantComposite %575 %521 
                                         f32 %591 = OpConstant 3.674022E-40 
                                       f32_2 %592 = OpConstantComposite %591 %591 
                                       f32_2 %607 = OpConstantComposite %521 %575 
                                         f32 %624 = OpConstant 3.674022E-40 
                                         f32 %625 = OpConstant 3.674022E-40 
                                         f32 %626 = OpConstant 3.674022E-40 
                                       f32_4 %627 = OpConstantComposite %624 %625 %464 %626 
                              Private f32_4* %665 = OpVariable Private 
                              Private f32_4* %673 = OpVariable Private 
                                             %683 = OpTypePointer Function %42 
        UniformConstant read_only Texture2D* %691 = OpVariable UniformConstant 
                    UniformConstant sampler* %693 = OpVariable UniformConstant 
                                             %695 = OpTypeImage %6 Dim2D 1 0 0 1 Unknown 
                                             %696 = OpTypeSampledImage %695 
                                             %709 = OpTypePointer Private %42 
                              Private f32_3* %710 = OpVariable Private 
                                Private f32* %839 = OpVariable Private 
                                            %1189 = OpTypePointer Uniform %6 
                                            %1195 = OpTypePointer Output %7 
                              Output f32_4* %1196 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %684 = OpVariable Function 
                             Function f32_3* %702 = OpVariable Function 
                             Function f32_3* %756 = OpVariable Function 
                             Function f32_3* %770 = OpVariable Function 
                             Function f32_3* %818 = OpVariable Function 
                             Function f32_3* %832 = OpVariable Function 
                             Function f32_3* %886 = OpVariable Function 
                             Function f32_3* %900 = OpVariable Function 
                             Function f32_3* %952 = OpVariable Function 
                             Function f32_3* %966 = OpVariable Function 
                            Function f32_3* %1023 = OpVariable Function 
                            Function f32_3* %1037 = OpVariable Function 
                            Function f32_3* %1101 = OpVariable Function 
                            Function f32_3* %1115 = OpVariable Function 
                            Function f32_3* %1129 = OpVariable Function 
                            Function f32_3* %1142 = OpVariable Function 
                          read_only Texture2D %13 = OpLoad %12 
                                      sampler %17 = OpLoad %16 
                   read_only Texture2DSampled %19 = OpSampledImage %13 %17 
                                        f32_4 %23 = OpLoad vs_TEXCOORD0 
                                        f32_2 %24 = OpVectorShuffle %23 %23 0 1 
                                        f32_4 %25 = OpImageSampleImplicitLod %19 %24 
                                          f32 %28 = OpCompositeExtract %25 0 
                                 Private f32* %30 = OpAccessChain %9 %27 
                                                      OpStore %30 %28 
                                 Private f32* %31 = OpAccessChain %9 %27 
                                          f32 %32 = OpLoad %31 
                                          f32 %33 = OpFNegate %32 
                                          f32 %35 = OpFAdd %33 %34 
                                 Private f32* %37 = OpAccessChain %9 %36 
                                                      OpStore %37 %35 
                                        f32_4 %38 = OpLoad vs_TEXCOORD0 
                                        f32_2 %39 = OpVectorShuffle %38 %38 2 3 
                                        f32_4 %40 = OpLoad %9 
                                        f32_4 %41 = OpVectorShuffle %40 %39 4 5 2 3 
                                                      OpStore %9 %41 
                                        f32_4 %43 = OpLoad %9 
                                        f32_3 %44 = OpVectorShuffle %43 %43 0 1 2 
                                        f32_3 %47 = OpFMul %44 %46 
                                        f32_3 %50 = OpFAdd %47 %49 
                                        f32_4 %51 = OpLoad %9 
                                        f32_4 %52 = OpVectorShuffle %51 %50 4 5 6 3 
                                                      OpStore %9 %52 
                                        f32_4 %54 = OpLoad %9 
                                        f32_4 %55 = OpVectorShuffle %54 %54 1 1 1 1 
                               Uniform f32_4* %69 = OpAccessChain %64 %66 %67 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpFMul %55 %70 
                                                      OpStore %53 %71 
                               Uniform f32_4* %72 = OpAccessChain %64 %66 %66 
                                        f32_4 %73 = OpLoad %72 
                                        f32_4 %74 = OpLoad %9 
                                        f32_4 %75 = OpVectorShuffle %74 %74 0 0 0 0 
                                        f32_4 %76 = OpFMul %73 %75 
                                        f32_4 %77 = OpLoad %53 
                                        f32_4 %78 = OpFAdd %76 %77 
                                                      OpStore %53 %78 
                               Uniform f32_4* %80 = OpAccessChain %64 %66 %79 
                                        f32_4 %81 = OpLoad %80 
                                        f32_4 %82 = OpLoad %9 
                                        f32_4 %83 = OpVectorShuffle %82 %82 2 2 2 2 
                                        f32_4 %84 = OpFMul %81 %83 
                                        f32_4 %85 = OpLoad %53 
                                        f32_4 %86 = OpFAdd %84 %85 
                                                      OpStore %9 %86 
                                        f32_4 %87 = OpLoad %9 
                               Uniform f32_4* %89 = OpAccessChain %64 %66 %88 
                                        f32_4 %90 = OpLoad %89 
                                        f32_4 %91 = OpFAdd %87 %90 
                                                      OpStore %9 %91 
                                        f32_4 %92 = OpLoad %9 
                                        f32_3 %93 = OpVectorShuffle %92 %92 0 1 2 
                                        f32_4 %94 = OpLoad %9 
                                        f32_3 %95 = OpVectorShuffle %94 %94 3 3 3 
                                        f32_3 %96 = OpFDiv %93 %95 
                                        f32_4 %97 = OpLoad %9 
                                        f32_4 %98 = OpVectorShuffle %97 %96 4 5 6 3 
                                                      OpStore %9 %98 
                                        f32_4 %99 = OpLoad %9 
                                       f32_4 %100 = OpVectorShuffle %99 %99 1 1 1 1 
                              Uniform f32_4* %101 = OpAccessChain %64 %67 %67 
                                       f32_4 %102 = OpLoad %101 
                                       f32_4 %103 = OpFMul %100 %102 
                                                      OpStore %53 %103 
                              Uniform f32_4* %104 = OpAccessChain %64 %67 %66 
                                       f32_4 %105 = OpLoad %104 
                                       f32_4 %106 = OpLoad %9 
                                       f32_4 %107 = OpVectorShuffle %106 %106 0 0 0 0 
                                       f32_4 %108 = OpFMul %105 %107 
                                       f32_4 %109 = OpLoad %53 
                                       f32_4 %110 = OpFAdd %108 %109 
                                                      OpStore %53 %110 
                              Uniform f32_4* %111 = OpAccessChain %64 %67 %79 
                                       f32_4 %112 = OpLoad %111 
                                       f32_4 %113 = OpLoad %9 
                                       f32_4 %114 = OpVectorShuffle %113 %113 2 2 2 2 
                                       f32_4 %115 = OpFNegate %114 
                                       f32_4 %116 = OpFMul %112 %115 
                                       f32_4 %117 = OpLoad %53 
                                       f32_4 %118 = OpFAdd %116 %117 
                                                      OpStore %9 %118 
                                       f32_4 %119 = OpLoad %9 
                              Uniform f32_4* %120 = OpAccessChain %64 %67 %88 
                                       f32_4 %121 = OpLoad %120 
                                       f32_4 %122 = OpFAdd %119 %121 
                                                      OpStore %9 %122 
                                       f32_4 %123 = OpLoad %9 
                                       f32_3 %124 = OpVectorShuffle %123 %123 0 1 2 
                              Uniform f32_4* %125 = OpAccessChain %64 %79 %66 
                                       f32_4 %126 = OpLoad %125 
                                       f32_3 %127 = OpVectorShuffle %126 %126 0 1 2 
                                       f32_3 %128 = OpFNegate %127 
                                       f32_3 %129 = OpFAdd %124 %128 
                                       f32_4 %130 = OpLoad %53 
                                       f32_4 %131 = OpVectorShuffle %130 %129 4 5 6 3 
                                                      OpStore %53 %131 
                                       f32_4 %132 = OpLoad %53 
                                       f32_3 %133 = OpVectorShuffle %132 %132 0 1 2 
                                       f32_4 %134 = OpLoad %53 
                                       f32_3 %135 = OpVectorShuffle %134 %134 0 1 2 
                                         f32 %136 = OpDot %133 %135 
                                Private f32* %137 = OpAccessChain %53 %27 
                                                      OpStore %137 %136 
                                       f32_4 %139 = OpLoad %9 
                                       f32_3 %140 = OpVectorShuffle %139 %139 0 1 2 
                              Uniform f32_4* %141 = OpAccessChain %64 %79 %67 
                                       f32_4 %142 = OpLoad %141 
                                       f32_3 %143 = OpVectorShuffle %142 %142 0 1 2 
                                       f32_3 %144 = OpFNegate %143 
                                       f32_3 %145 = OpFAdd %140 %144 
                                       f32_4 %146 = OpLoad %138 
                                       f32_4 %147 = OpVectorShuffle %146 %145 4 5 6 3 
                                                      OpStore %138 %147 
                                       f32_4 %148 = OpLoad %138 
                                       f32_3 %149 = OpVectorShuffle %148 %148 0 1 2 
                                       f32_4 %150 = OpLoad %138 
                                       f32_3 %151 = OpVectorShuffle %150 %150 0 1 2 
                                         f32 %152 = OpDot %149 %151 
                                Private f32* %154 = OpAccessChain %53 %153 
                                                      OpStore %154 %152 
                                       f32_4 %155 = OpLoad %9 
                                       f32_3 %156 = OpVectorShuffle %155 %155 0 1 2 
                              Uniform f32_4* %157 = OpAccessChain %64 %79 %79 
                                       f32_4 %158 = OpLoad %157 
                                       f32_3 %159 = OpVectorShuffle %158 %158 0 1 2 
                                       f32_3 %160 = OpFNegate %159 
                                       f32_3 %161 = OpFAdd %156 %160 
                                       f32_4 %162 = OpLoad %138 
                                       f32_4 %163 = OpVectorShuffle %162 %161 4 5 6 3 
                                                      OpStore %138 %163 
                                       f32_4 %164 = OpLoad %138 
                                       f32_3 %165 = OpVectorShuffle %164 %164 0 1 2 
                                       f32_4 %166 = OpLoad %138 
                                       f32_3 %167 = OpVectorShuffle %166 %166 0 1 2 
                                         f32 %168 = OpDot %165 %167 
                                Private f32* %169 = OpAccessChain %53 %36 
                                                      OpStore %169 %168 
                                       f32_4 %170 = OpLoad %9 
                                       f32_3 %171 = OpVectorShuffle %170 %170 0 1 2 
                              Uniform f32_4* %172 = OpAccessChain %64 %79 %88 
                                       f32_4 %173 = OpLoad %172 
                                       f32_3 %174 = OpVectorShuffle %173 %173 0 1 2 
                                       f32_3 %175 = OpFNegate %174 
                                       f32_3 %176 = OpFAdd %171 %175 
                                       f32_4 %177 = OpLoad %138 
                                       f32_4 %178 = OpVectorShuffle %177 %176 4 5 6 3 
                                                      OpStore %138 %178 
                                       f32_4 %179 = OpLoad %138 
                                       f32_3 %180 = OpVectorShuffle %179 %179 0 1 2 
                                       f32_4 %181 = OpLoad %138 
                                       f32_3 %182 = OpVectorShuffle %181 %181 0 1 2 
                                         f32 %183 = OpDot %180 %182 
                                Private f32* %185 = OpAccessChain %53 %184 
                                                      OpStore %185 %183 
                                       f32_4 %190 = OpLoad %53 
                              Uniform f32_4* %191 = OpAccessChain %64 %88 
                                       f32_4 %192 = OpLoad %191 
                                      bool_4 %193 = OpFOrdLessThan %190 %192 
                                                      OpStore %189 %193 
                               Private bool* %195 = OpAccessChain %189 %27 
                                        bool %196 = OpLoad %195 
                                         f32 %198 = OpSelect %196 %48 %197 
                                Private f32* %199 = OpAccessChain %138 %27 
                                                      OpStore %199 %198 
                               Private bool* %200 = OpAccessChain %189 %153 
                                        bool %201 = OpLoad %200 
                                         f32 %202 = OpSelect %201 %48 %197 
                                Private f32* %203 = OpAccessChain %138 %153 
                                                      OpStore %203 %202 
                               Private bool* %204 = OpAccessChain %189 %36 
                                        bool %205 = OpLoad %204 
                                         f32 %206 = OpSelect %205 %48 %197 
                                Private f32* %207 = OpAccessChain %138 %36 
                                                      OpStore %207 %206 
                               Private bool* %208 = OpAccessChain %189 %27 
                                        bool %209 = OpLoad %208 
                                         f32 %211 = OpSelect %209 %34 %210 
                                Private f32* %212 = OpAccessChain %53 %27 
                                                      OpStore %212 %211 
                               Private bool* %213 = OpAccessChain %189 %153 
                                        bool %214 = OpLoad %213 
                                         f32 %215 = OpSelect %214 %34 %210 
                                Private f32* %216 = OpAccessChain %53 %153 
                                                      OpStore %216 %215 
                               Private bool* %217 = OpAccessChain %189 %36 
                                        bool %218 = OpLoad %217 
                                         f32 %219 = OpSelect %218 %34 %210 
                                Private f32* %220 = OpAccessChain %53 %36 
                                                      OpStore %220 %219 
                               Private bool* %221 = OpAccessChain %189 %184 
                                        bool %222 = OpLoad %221 
                                         f32 %223 = OpSelect %222 %34 %210 
                                Private f32* %224 = OpAccessChain %53 %184 
                                                      OpStore %224 %223 
                                       f32_4 %225 = OpLoad %138 
                                       f32_3 %226 = OpVectorShuffle %225 %225 0 1 2 
                                       f32_4 %227 = OpLoad %53 
                                       f32_3 %228 = OpVectorShuffle %227 %227 1 2 3 
                                       f32_3 %229 = OpFAdd %226 %228 
                                       f32_4 %230 = OpLoad %138 
                                       f32_4 %231 = OpVectorShuffle %230 %229 4 5 6 3 
                                                      OpStore %138 %231 
                                       f32_4 %232 = OpLoad %138 
                                       f32_3 %233 = OpVectorShuffle %232 %232 0 1 2 
                                       f32_3 %235 = OpExtInst %1 40 %233 %234 
                                       f32_4 %236 = OpLoad %53 
                                       f32_4 %237 = OpVectorShuffle %236 %235 0 4 5 6 
                                                      OpStore %53 %237 
                                       f32_4 %238 = OpLoad %9 
                                       f32_3 %239 = OpVectorShuffle %238 %238 1 1 1 
                              Uniform f32_4* %242 = OpAccessChain %64 %240 %241 
                                       f32_4 %243 = OpLoad %242 
                                       f32_3 %244 = OpVectorShuffle %243 %243 0 1 2 
                                       f32_3 %245 = OpFMul %239 %244 
                                       f32_4 %246 = OpLoad %138 
                                       f32_4 %247 = OpVectorShuffle %246 %245 4 5 6 3 
                                                      OpStore %138 %247 
                              Uniform f32_4* %248 = OpAccessChain %64 %240 %240 
                                       f32_4 %249 = OpLoad %248 
                                       f32_3 %250 = OpVectorShuffle %249 %249 0 1 2 
                                       f32_4 %251 = OpLoad %9 
                                       f32_3 %252 = OpVectorShuffle %251 %251 0 0 0 
                                       f32_3 %253 = OpFMul %250 %252 
                                       f32_4 %254 = OpLoad %138 
                                       f32_3 %255 = OpVectorShuffle %254 %254 0 1 2 
                                       f32_3 %256 = OpFAdd %253 %255 
                                       f32_4 %257 = OpLoad %138 
                                       f32_4 %258 = OpVectorShuffle %257 %256 4 5 6 3 
                                                      OpStore %138 %258 
                              Uniform f32_4* %260 = OpAccessChain %64 %240 %259 
                                       f32_4 %261 = OpLoad %260 
                                       f32_3 %262 = OpVectorShuffle %261 %261 0 1 2 
                                       f32_4 %263 = OpLoad %9 
                                       f32_3 %264 = OpVectorShuffle %263 %263 2 2 2 
                                       f32_3 %265 = OpFMul %262 %264 
                                       f32_4 %266 = OpLoad %138 
                                       f32_3 %267 = OpVectorShuffle %266 %266 0 1 2 
                                       f32_3 %268 = OpFAdd %265 %267 
                                       f32_4 %269 = OpLoad %138 
                                       f32_4 %270 = OpVectorShuffle %269 %268 4 5 6 3 
                                                      OpStore %138 %270 
                              Uniform f32_4* %272 = OpAccessChain %64 %240 %271 
                                       f32_4 %273 = OpLoad %272 
                                       f32_3 %274 = OpVectorShuffle %273 %273 0 1 2 
                                       f32_4 %275 = OpLoad %9 
                                       f32_3 %276 = OpVectorShuffle %275 %275 3 3 3 
                                       f32_3 %277 = OpFMul %274 %276 
                                       f32_4 %278 = OpLoad %138 
                                       f32_3 %279 = OpVectorShuffle %278 %278 0 1 2 
                                       f32_3 %280 = OpFAdd %277 %279 
                                       f32_4 %281 = OpLoad %138 
                                       f32_4 %282 = OpVectorShuffle %281 %280 4 5 6 3 
                                                      OpStore %138 %282 
                                       f32_4 %283 = OpLoad %53 
                                       f32_3 %284 = OpVectorShuffle %283 %283 1 1 1 
                                       f32_4 %285 = OpLoad %138 
                                       f32_3 %286 = OpVectorShuffle %285 %285 0 1 2 
                                       f32_3 %287 = OpFMul %284 %286 
                                       f32_4 %288 = OpLoad %138 
                                       f32_4 %289 = OpVectorShuffle %288 %287 4 5 6 3 
                                                      OpStore %138 %289 
                                       f32_4 %291 = OpLoad %9 
                                       f32_3 %292 = OpVectorShuffle %291 %291 1 1 1 
                              Uniform f32_4* %293 = OpAccessChain %64 %240 %67 
                                       f32_4 %294 = OpLoad %293 
                                       f32_3 %295 = OpVectorShuffle %294 %294 0 1 2 
                                       f32_3 %296 = OpFMul %292 %295 
                                       f32_4 %297 = OpLoad %290 
                                       f32_4 %298 = OpVectorShuffle %297 %296 4 5 6 3 
                                                      OpStore %290 %298 
                              Uniform f32_4* %299 = OpAccessChain %64 %240 %66 
                                       f32_4 %300 = OpLoad %299 
                                       f32_3 %301 = OpVectorShuffle %300 %300 0 1 2 
                                       f32_4 %302 = OpLoad %9 
                                       f32_3 %303 = OpVectorShuffle %302 %302 0 0 0 
                                       f32_3 %304 = OpFMul %301 %303 
                                       f32_4 %305 = OpLoad %290 
                                       f32_3 %306 = OpVectorShuffle %305 %305 0 1 2 
                                       f32_3 %307 = OpFAdd %304 %306 
                                       f32_4 %308 = OpLoad %290 
                                       f32_4 %309 = OpVectorShuffle %308 %307 4 5 6 3 
                                                      OpStore %290 %309 
                              Uniform f32_4* %310 = OpAccessChain %64 %240 %79 
                                       f32_4 %311 = OpLoad %310 
                                       f32_3 %312 = OpVectorShuffle %311 %311 0 1 2 
                                       f32_4 %313 = OpLoad %9 
                                       f32_3 %314 = OpVectorShuffle %313 %313 2 2 2 
                                       f32_3 %315 = OpFMul %312 %314 
                                       f32_4 %316 = OpLoad %290 
                                       f32_3 %317 = OpVectorShuffle %316 %316 0 1 2 
                                       f32_3 %318 = OpFAdd %315 %317 
                                       f32_4 %319 = OpLoad %290 
                                       f32_4 %320 = OpVectorShuffle %319 %318 4 5 6 3 
                                                      OpStore %290 %320 
                              Uniform f32_4* %321 = OpAccessChain %64 %240 %88 
                                       f32_4 %322 = OpLoad %321 
                                       f32_3 %323 = OpVectorShuffle %322 %322 0 1 2 
                                       f32_4 %324 = OpLoad %9 
                                       f32_3 %325 = OpVectorShuffle %324 %324 3 3 3 
                                       f32_3 %326 = OpFMul %323 %325 
                                       f32_4 %327 = OpLoad %290 
                                       f32_3 %328 = OpVectorShuffle %327 %327 0 1 2 
                                       f32_3 %329 = OpFAdd %326 %328 
                                       f32_4 %330 = OpLoad %290 
                                       f32_4 %331 = OpVectorShuffle %330 %329 4 5 6 3 
                                                      OpStore %290 %331 
                                       f32_4 %332 = OpLoad %290 
                                       f32_3 %333 = OpVectorShuffle %332 %332 0 1 2 
                                       f32_4 %334 = OpLoad %53 
                                       f32_3 %335 = OpVectorShuffle %334 %334 0 0 0 
                                       f32_3 %336 = OpFMul %333 %335 
                                       f32_4 %337 = OpLoad %138 
                                       f32_3 %338 = OpVectorShuffle %337 %337 0 1 2 
                                       f32_3 %339 = OpFAdd %336 %338 
                                       f32_4 %340 = OpLoad %138 
                                       f32_4 %341 = OpVectorShuffle %340 %339 4 5 6 3 
                                                      OpStore %138 %341 
                                       f32_4 %342 = OpLoad %53 
                                         f32 %344 = OpDot %342 %343 
                                Private f32* %345 = OpAccessChain %53 %27 
                                                      OpStore %345 %344 
                                       f32_4 %346 = OpLoad %9 
                                       f32_3 %347 = OpVectorShuffle %346 %346 1 1 1 
                              Uniform f32_4* %349 = OpAccessChain %64 %240 %348 
                                       f32_4 %350 = OpLoad %349 
                                       f32_3 %351 = OpVectorShuffle %350 %350 0 1 2 
                                       f32_3 %352 = OpFMul %347 %351 
                                       f32_4 %353 = OpLoad %290 
                                       f32_4 %354 = OpVectorShuffle %353 %352 4 5 6 3 
                                                      OpStore %290 %354 
                              Uniform f32_4* %356 = OpAccessChain %64 %240 %355 
                                       f32_4 %357 = OpLoad %356 
                                       f32_3 %358 = OpVectorShuffle %357 %357 0 1 2 
                                       f32_4 %359 = OpLoad %9 
                                       f32_3 %360 = OpVectorShuffle %359 %359 0 0 0 
                                       f32_3 %361 = OpFMul %358 %360 
                                       f32_4 %362 = OpLoad %290 
                                       f32_3 %363 = OpVectorShuffle %362 %362 0 1 2 
                                       f32_3 %364 = OpFAdd %361 %363 
                                       f32_4 %365 = OpLoad %290 
                                       f32_4 %366 = OpVectorShuffle %365 %364 4 5 6 3 
                                                      OpStore %290 %366 
                              Uniform f32_4* %368 = OpAccessChain %64 %240 %367 
                                       f32_4 %369 = OpLoad %368 
                                       f32_3 %370 = OpVectorShuffle %369 %369 0 1 2 
                                       f32_4 %371 = OpLoad %9 
                                       f32_3 %372 = OpVectorShuffle %371 %371 2 2 2 
                                       f32_3 %373 = OpFMul %370 %372 
                                       f32_4 %374 = OpLoad %290 
                                       f32_3 %375 = OpVectorShuffle %374 %374 0 1 2 
                                       f32_3 %376 = OpFAdd %373 %375 
                                       f32_4 %377 = OpLoad %290 
                                       f32_4 %378 = OpVectorShuffle %377 %376 4 5 6 3 
                                                      OpStore %290 %378 
                              Uniform f32_4* %380 = OpAccessChain %64 %240 %379 
                                       f32_4 %381 = OpLoad %380 
                                       f32_3 %382 = OpVectorShuffle %381 %381 0 1 2 
                                       f32_4 %383 = OpLoad %9 
                                       f32_3 %384 = OpVectorShuffle %383 %383 3 3 3 
                                       f32_3 %385 = OpFMul %382 %384 
                                       f32_4 %386 = OpLoad %290 
                                       f32_3 %387 = OpVectorShuffle %386 %386 0 1 2 
                                       f32_3 %388 = OpFAdd %385 %387 
                                       f32_4 %389 = OpLoad %290 
                                       f32_4 %390 = OpVectorShuffle %389 %388 4 5 6 3 
                                                      OpStore %290 %390 
                                       f32_4 %391 = OpLoad %290 
                                       f32_3 %392 = OpVectorShuffle %391 %391 0 1 2 
                                       f32_4 %393 = OpLoad %53 
                                       f32_3 %394 = OpVectorShuffle %393 %393 2 2 2 
                                       f32_3 %395 = OpFMul %392 %394 
                                       f32_4 %396 = OpLoad %138 
                                       f32_3 %397 = OpVectorShuffle %396 %396 0 1 2 
                                       f32_3 %398 = OpFAdd %395 %397 
                                       f32_4 %399 = OpLoad %138 
                                       f32_4 %400 = OpVectorShuffle %399 %398 4 5 6 3 
                                                      OpStore %138 %400 
                                       f32_4 %401 = OpLoad %9 
                                       f32_3 %402 = OpVectorShuffle %401 %401 1 1 1 
                              Uniform f32_4* %404 = OpAccessChain %64 %240 %403 
                                       f32_4 %405 = OpLoad %404 
                                       f32_3 %406 = OpVectorShuffle %405 %405 0 1 2 
                                       f32_3 %407 = OpFMul %402 %406 
                                       f32_4 %408 = OpLoad %290 
                                       f32_4 %409 = OpVectorShuffle %408 %407 4 5 6 3 
                                                      OpStore %290 %409 
                              Uniform f32_4* %411 = OpAccessChain %64 %240 %410 
                                       f32_4 %412 = OpLoad %411 
                                       f32_3 %413 = OpVectorShuffle %412 %412 0 1 2 
                                       f32_4 %414 = OpLoad %9 
                                       f32_3 %415 = OpVectorShuffle %414 %414 0 0 0 
                                       f32_3 %416 = OpFMul %413 %415 
                                       f32_4 %417 = OpLoad %290 
                                       f32_3 %418 = OpVectorShuffle %417 %417 0 1 2 
                                       f32_3 %419 = OpFAdd %416 %418 
                                       f32_4 %420 = OpLoad %290 
                                       f32_4 %421 = OpVectorShuffle %420 %419 4 5 6 3 
                                                      OpStore %290 %421 
                              Uniform f32_4* %423 = OpAccessChain %64 %240 %422 
                                       f32_4 %424 = OpLoad %423 
                                       f32_3 %425 = OpVectorShuffle %424 %424 0 1 2 
                                       f32_4 %426 = OpLoad %9 
                                       f32_3 %427 = OpVectorShuffle %426 %426 2 2 2 
                                       f32_3 %428 = OpFMul %425 %427 
                                       f32_4 %429 = OpLoad %290 
                                       f32_3 %430 = OpVectorShuffle %429 %429 0 1 2 
                                       f32_3 %431 = OpFAdd %428 %430 
                                       f32_4 %432 = OpLoad %9 
                                       f32_4 %433 = OpVectorShuffle %432 %431 4 5 6 3 
                                                      OpStore %9 %433 
                              Uniform f32_4* %435 = OpAccessChain %64 %240 %434 
                                       f32_4 %436 = OpLoad %435 
                                       f32_3 %437 = OpVectorShuffle %436 %436 0 1 2 
                                       f32_4 %438 = OpLoad %9 
                                       f32_3 %439 = OpVectorShuffle %438 %438 3 3 3 
                                       f32_3 %440 = OpFMul %437 %439 
                                       f32_4 %441 = OpLoad %9 
                                       f32_3 %442 = OpVectorShuffle %441 %441 0 1 2 
                                       f32_3 %443 = OpFAdd %440 %442 
                                       f32_4 %444 = OpLoad %9 
                                       f32_4 %445 = OpVectorShuffle %444 %443 4 5 6 3 
                                                      OpStore %9 %445 
                                       f32_4 %446 = OpLoad %9 
                                       f32_3 %447 = OpVectorShuffle %446 %446 0 1 2 
                                       f32_4 %448 = OpLoad %53 
                                       f32_3 %449 = OpVectorShuffle %448 %448 3 3 3 
                                       f32_3 %450 = OpFMul %447 %449 
                                       f32_4 %451 = OpLoad %138 
                                       f32_3 %452 = OpVectorShuffle %451 %451 0 1 2 
                                       f32_3 %453 = OpFAdd %450 %452 
                                       f32_4 %454 = OpLoad %9 
                                       f32_4 %455 = OpVectorShuffle %454 %453 4 5 6 3 
                                                      OpStore %9 %455 
                                       f32_4 %458 = OpLoad %9 
                                       f32_2 %459 = OpVectorShuffle %458 %458 0 1 
                              Uniform f32_4* %460 = OpAccessChain %64 %259 
                                       f32_4 %461 = OpLoad %460 
                                       f32_2 %462 = OpVectorShuffle %461 %461 2 3 
                                       f32_2 %463 = OpFMul %459 %462 
                                       f32_2 %466 = OpFAdd %463 %465 
                                                      OpStore %457 %466 
                                       f32_2 %467 = OpLoad %457 
                                       f32_2 %468 = OpExtInst %1 8 %467 
                                                      OpStore %457 %468 
                                       f32_4 %469 = OpLoad %9 
                                       f32_2 %470 = OpVectorShuffle %469 %469 0 1 
                              Uniform f32_4* %471 = OpAccessChain %64 %259 
                                       f32_4 %472 = OpLoad %471 
                                       f32_2 %473 = OpVectorShuffle %472 %472 2 3 
                                       f32_2 %474 = OpFMul %470 %473 
                                       f32_2 %475 = OpLoad %457 
                                       f32_2 %476 = OpFNegate %475 
                                       f32_2 %477 = OpFAdd %474 %476 
                                       f32_4 %478 = OpLoad %9 
                                       f32_4 %479 = OpVectorShuffle %478 %477 4 5 2 3 
                                                      OpStore %9 %479 
                                Private f32* %481 = OpAccessChain %53 %27 
                                         f32 %482 = OpLoad %481 
                                         f32 %483 = OpFNegate %482 
                                Private f32* %484 = OpAccessChain %9 %36 
                                         f32 %485 = OpLoad %484 
                                         f32 %486 = OpFAdd %483 %485 
                                                      OpStore %480 %486 
                                         f32 %487 = OpLoad %480 
                                         f32 %488 = OpFAdd %487 %34 
                                                      OpStore %480 %488 
                                       f32_4 %489 = OpLoad %9 
                                       f32_2 %490 = OpVectorShuffle %489 %489 0 1 
                                       f32_2 %491 = OpFNegate %490 
                                       f32_2 %493 = OpFAdd %491 %492 
                                       f32_4 %494 = OpLoad %53 
                                       f32_4 %495 = OpVectorShuffle %494 %493 4 1 2 5 
                                                      OpStore %53 %495 
                                       f32_4 %496 = OpLoad %9 
                                       f32_2 %497 = OpVectorShuffle %496 %496 0 1 
                                       f32_2 %499 = OpExtInst %1 37 %497 %498 
                                       f32_4 %500 = OpLoad %138 
                                       f32_4 %501 = OpVectorShuffle %500 %499 4 5 2 3 
                                                      OpStore %138 %501 
                                       f32_4 %502 = OpLoad %138 
                                       f32_2 %503 = OpVectorShuffle %502 %502 0 1 
                                       f32_2 %504 = OpFNegate %503 
                                       f32_4 %505 = OpLoad %138 
                                       f32_2 %506 = OpVectorShuffle %505 %505 0 1 
                                       f32_2 %507 = OpFMul %504 %506 
                                       f32_4 %508 = OpLoad %53 
                                       f32_2 %509 = OpVectorShuffle %508 %508 0 3 
                                       f32_2 %510 = OpFAdd %507 %509 
                                       f32_4 %511 = OpLoad %53 
                                       f32_4 %512 = OpVectorShuffle %511 %510 4 1 2 5 
                                                      OpStore %53 %512 
                                       f32_4 %513 = OpLoad %53 
                                       f32_2 %514 = OpVectorShuffle %513 %513 0 3 
                                       f32_2 %516 = OpFAdd %514 %515 
                                       f32_4 %517 = OpLoad %53 
                                       f32_4 %518 = OpVectorShuffle %517 %516 4 1 2 5 
                                                      OpStore %53 %518 
                                       f32_4 %519 = OpLoad %53 
                                       f32_2 %520 = OpVectorShuffle %519 %519 0 3 
                                       f32_2 %523 = OpFMul %520 %522 
                                       f32_4 %524 = OpLoad %138 
                                       f32_4 %525 = OpVectorShuffle %524 %523 4 5 2 3 
                                                      OpStore %138 %525 
                                Private f32* %526 = OpAccessChain %138 %27 
                                         f32 %527 = OpLoad %526 
                                Private f32* %528 = OpAccessChain %290 %153 
                                                      OpStore %528 %527 
                                       f32_4 %529 = OpLoad %9 
                                       f32_2 %530 = OpVectorShuffle %529 %529 0 1 
                                       f32_2 %531 = OpExtInst %1 40 %530 %498 
                                       f32_4 %532 = OpLoad %53 
                                       f32_4 %533 = OpVectorShuffle %532 %531 4 1 2 5 
                                                      OpStore %53 %533 
                                       f32_4 %535 = OpLoad %9 
                                       f32_4 %536 = OpVectorShuffle %535 %535 0 0 1 1 
                                       f32_4 %538 = OpFAdd %536 %537 
                                                      OpStore %534 %538 
                                       f32_4 %539 = OpLoad %53 
                                       f32_2 %540 = OpVectorShuffle %539 %539 0 3 
                                       f32_2 %541 = OpFNegate %540 
                                       f32_4 %542 = OpLoad %53 
                                       f32_2 %543 = OpVectorShuffle %542 %542 0 3 
                                       f32_2 %544 = OpFMul %541 %543 
                                       f32_4 %545 = OpLoad %534 
                                       f32_2 %546 = OpVectorShuffle %545 %545 1 3 
                                       f32_2 %547 = OpFAdd %544 %546 
                                       f32_4 %548 = OpLoad %53 
                                       f32_4 %549 = OpVectorShuffle %548 %547 4 1 2 5 
                                                      OpStore %53 %549 
                                       f32_4 %550 = OpLoad %534 
                                       f32_4 %551 = OpVectorShuffle %550 %550 0 0 2 2 
                                       f32_4 %552 = OpLoad %534 
                                       f32_4 %553 = OpVectorShuffle %552 %552 0 0 2 2 
                                       f32_4 %554 = OpFMul %551 %553 
                                                      OpStore %534 %554 
                                       f32_4 %555 = OpLoad %53 
                                       f32_2 %556 = OpVectorShuffle %555 %555 0 3 
                                       f32_2 %557 = OpFAdd %556 %515 
                                       f32_4 %558 = OpLoad %53 
                                       f32_4 %559 = OpVectorShuffle %558 %557 4 1 2 5 
                                                      OpStore %53 %559 
                                Private f32* %561 = OpAccessChain %53 %27 
                                         f32 %562 = OpLoad %561 
                                         f32 %563 = OpFMul %562 %521 
                                Private f32* %564 = OpAccessChain %560 %36 
                                                      OpStore %564 %563 
                                Private f32* %566 = OpAccessChain %53 %184 
                                         f32 %567 = OpLoad %566 
                                         f32 %568 = OpFMul %567 %521 
                                Private f32* %569 = OpAccessChain %565 %36 
                                                      OpStore %569 %568 
                                       f32_4 %570 = OpLoad %9 
                                       f32_2 %571 = OpVectorShuffle %570 %570 0 0 
                                       f32_2 %574 = OpFMul %571 %573 
                                       f32_2 %577 = OpFAdd %574 %576 
                                       f32_4 %578 = OpLoad %560 
                                       f32_4 %579 = OpVectorShuffle %578 %577 0 4 2 5 
                                                      OpStore %560 %579 
                                       f32_4 %580 = OpLoad %534 
                                       f32_2 %581 = OpVectorShuffle %580 %580 0 2 
                                       f32_2 %582 = OpFMul %581 %465 
                                       f32_4 %583 = OpLoad %9 
                                       f32_2 %584 = OpVectorShuffle %583 %583 0 1 
                                       f32_2 %585 = OpFNegate %584 
                                       f32_2 %586 = OpFAdd %582 %585 
                                       f32_4 %587 = OpLoad %53 
                                       f32_4 %588 = OpVectorShuffle %587 %586 4 1 2 5 
                                                      OpStore %53 %588 
                                       f32_4 %589 = OpLoad %534 
                                       f32_2 %590 = OpVectorShuffle %589 %589 1 3 
                                       f32_2 %593 = OpFMul %590 %592 
                                       f32_4 %594 = OpLoad %534 
                                       f32_4 %595 = OpVectorShuffle %594 %593 4 5 2 3 
                                                      OpStore %534 %595 
                                       f32_4 %596 = OpLoad %53 
                                       f32_2 %597 = OpVectorShuffle %596 %596 3 0 
                                       f32_2 %598 = OpFMul %597 %522 
                                       f32_4 %599 = OpLoad %565 
                                       f32_4 %600 = OpVectorShuffle %599 %598 4 5 2 3 
                                                      OpStore %565 %600 
                                Private f32* %601 = OpAccessChain %565 %153 
                                         f32 %602 = OpLoad %601 
                                Private f32* %603 = OpAccessChain %560 %27 
                                                      OpStore %603 %602 
                                       f32_4 %604 = OpLoad %9 
                                       f32_2 %605 = OpVectorShuffle %604 %604 0 0 
                                       f32_2 %606 = OpFMul %605 %573 
                                       f32_2 %608 = OpFAdd %606 %607 
                                       f32_4 %609 = OpLoad %290 
                                       f32_4 %610 = OpVectorShuffle %609 %608 4 1 5 3 
                                                      OpStore %290 %610 
                                Private f32* %611 = OpAccessChain %534 %27 
                                         f32 %612 = OpLoad %611 
                                Private f32* %613 = OpAccessChain %290 %184 
                                                      OpStore %613 %612 
                                Private f32* %614 = OpAccessChain %534 %153 
                                         f32 %615 = OpLoad %614 
                                Private f32* %616 = OpAccessChain %138 %184 
                                                      OpStore %616 %615 
                                       f32_4 %617 = OpLoad %290 
                                       f32_4 %618 = OpLoad %560 
                                       f32_4 %619 = OpFAdd %617 %618 
                                                      OpStore %534 %619 
                                       f32_4 %620 = OpLoad %290 
                                       f32_4 %621 = OpLoad %534 
                                       f32_4 %622 = OpFDiv %620 %621 
                                                      OpStore %290 %622 
                                       f32_4 %623 = OpLoad %290 
                                       f32_4 %628 = OpFAdd %623 %627 
                                                      OpStore %290 %628 
                                       f32_4 %629 = OpLoad %290 
                                       f32_4 %630 = OpVectorShuffle %629 %629 3 0 1 2 
                              Uniform f32_4* %631 = OpAccessChain %64 %259 
                                       f32_4 %632 = OpLoad %631 
                                       f32_4 %633 = OpVectorShuffle %632 %632 0 0 0 0 
                                       f32_4 %634 = OpFMul %630 %633 
                                                      OpStore %290 %634 
                                       f32_4 %635 = OpLoad %9 
                                       f32_2 %636 = OpVectorShuffle %635 %635 1 1 
                                       f32_2 %637 = OpFMul %636 %573 
                                       f32_2 %638 = OpFAdd %637 %576 
                                       f32_4 %639 = OpLoad %565 
                                       f32_4 %640 = OpVectorShuffle %639 %638 0 4 2 5 
                                                      OpStore %565 %640 
                                       f32_4 %641 = OpLoad %9 
                                       f32_2 %642 = OpVectorShuffle %641 %641 1 1 
                                       f32_2 %643 = OpFMul %642 %573 
                                       f32_2 %644 = OpFAdd %643 %607 
                                       f32_4 %645 = OpLoad %138 
                                       f32_4 %646 = OpVectorShuffle %645 %644 4 1 5 3 
                                                      OpStore %138 %646 
                                       f32_4 %647 = OpLoad %138 
                                       f32_4 %648 = OpLoad %565 
                                       f32_4 %649 = OpFAdd %647 %648 
                                                      OpStore %560 %649 
                                       f32_4 %650 = OpLoad %138 
                                       f32_4 %651 = OpLoad %560 
                                       f32_4 %652 = OpFDiv %650 %651 
                                                      OpStore %138 %652 
                                       f32_4 %653 = OpLoad %138 
                                       f32_4 %654 = OpFAdd %653 %627 
                                                      OpStore %138 %654 
                                       f32_4 %655 = OpLoad %138 
                                       f32_4 %656 = OpVectorShuffle %655 %655 0 3 1 2 
                              Uniform f32_4* %657 = OpAccessChain %64 %259 
                                       f32_4 %658 = OpLoad %657 
                                       f32_4 %659 = OpVectorShuffle %658 %658 1 1 1 1 
                                       f32_4 %660 = OpFMul %656 %659 
                                                      OpStore %138 %660 
                                       f32_4 %661 = OpLoad %534 
                                       f32_4 %662 = OpLoad %560 
                                       f32_4 %663 = OpVectorShuffle %662 %662 0 0 0 0 
                                       f32_4 %664 = OpFMul %661 %663 
                                                      OpStore %565 %664 
                                       f32_4 %666 = OpLoad %290 
                                       f32_3 %667 = OpVectorShuffle %666 %666 1 2 3 
                                       f32_4 %668 = OpLoad %665 
                                       f32_4 %669 = OpVectorShuffle %668 %667 4 1 5 6 
                                                      OpStore %665 %669 
                                Private f32* %670 = OpAccessChain %138 %27 
                                         f32 %671 = OpLoad %670 
                                Private f32* %672 = OpAccessChain %665 %153 
                                                      OpStore %672 %671 
                                       f32_2 %674 = OpLoad %457 
                                       f32_4 %675 = OpVectorShuffle %674 %674 0 1 0 1 
                              Uniform f32_4* %676 = OpAccessChain %64 %259 
                                       f32_4 %677 = OpLoad %676 
                                       f32_4 %678 = OpVectorShuffle %677 %677 0 1 0 1 
                                       f32_4 %679 = OpFMul %675 %678 
                                       f32_4 %680 = OpLoad %665 
                                       f32_4 %681 = OpVectorShuffle %680 %680 0 1 2 1 
                                       f32_4 %682 = OpFAdd %679 %681 
                                                      OpStore %673 %682 
                                       f32_4 %685 = OpLoad %673 
                                       f32_2 %686 = OpVectorShuffle %685 %685 0 1 
                                         f32 %687 = OpLoad %480 
                                         f32 %688 = OpCompositeExtract %686 0 
                                         f32 %689 = OpCompositeExtract %686 1 
                                       f32_3 %690 = OpCompositeConstruct %688 %689 %687 
                                                      OpStore %684 %690 
                         read_only Texture2D %692 = OpLoad %691 
                                     sampler %694 = OpLoad %693 
                  read_only Texture2DSampled %697 = OpSampledImage %692 %694 
                                       f32_3 %698 = OpLoad %684 
                                         f32 %699 = OpCompositeExtract %698 2 
                                         f32 %700 = OpImageSampleDrefExplicitLod %697 %698 %699 Lod %6 
                                Private f32* %701 = OpAccessChain %9 %27 
                                                      OpStore %701 %700 
                                       f32_4 %703 = OpLoad %673 
                                       f32_2 %704 = OpVectorShuffle %703 %703 2 3 
                                         f32 %705 = OpLoad %480 
                                         f32 %706 = OpCompositeExtract %704 0 
                                         f32 %707 = OpCompositeExtract %704 1 
                                       f32_3 %708 = OpCompositeConstruct %706 %707 %705 
                                                      OpStore %702 %708 
                         read_only Texture2D %711 = OpLoad %691 
                                     sampler %712 = OpLoad %693 
                  read_only Texture2DSampled %713 = OpSampledImage %711 %712 
                                       f32_3 %714 = OpLoad %702 
                                         f32 %715 = OpCompositeExtract %714 2 
                                         f32 %716 = OpImageSampleDrefExplicitLod %713 %714 %715 Lod %6 
                                Private f32* %717 = OpAccessChain %710 %27 
                                                      OpStore %717 %716 
                                Private f32* %718 = OpAccessChain %710 %27 
                                         f32 %719 = OpLoad %718 
                                Private f32* %720 = OpAccessChain %565 %153 
                                         f32 %721 = OpLoad %720 
                                         f32 %722 = OpFMul %719 %721 
                                Private f32* %723 = OpAccessChain %710 %27 
                                                      OpStore %723 %722 
                                Private f32* %724 = OpAccessChain %565 %27 
                                         f32 %725 = OpLoad %724 
                                Private f32* %726 = OpAccessChain %9 %27 
                                         f32 %727 = OpLoad %726 
                                         f32 %728 = OpFMul %725 %727 
                                Private f32* %729 = OpAccessChain %710 %27 
                                         f32 %730 = OpLoad %729 
                                         f32 %731 = OpFAdd %728 %730 
                                Private f32* %732 = OpAccessChain %9 %27 
                                                      OpStore %732 %731 
                                       f32_2 %733 = OpLoad %457 
                              Uniform f32_4* %734 = OpAccessChain %64 %259 
                                       f32_4 %735 = OpLoad %734 
                                       f32_2 %736 = OpVectorShuffle %735 %735 0 1 
                                       f32_2 %737 = OpFMul %733 %736 
                                       f32_4 %738 = OpLoad %665 
                                       f32_2 %739 = OpVectorShuffle %738 %738 3 1 
                                       f32_2 %740 = OpFAdd %737 %739 
                                       f32_3 %741 = OpLoad %710 
                                       f32_3 %742 = OpVectorShuffle %741 %740 3 1 4 
                                                      OpStore %710 %742 
                                Private f32* %743 = OpAccessChain %665 %153 
                                         f32 %744 = OpLoad %743 
                                Private f32* %745 = OpAccessChain %290 %153 
                                                      OpStore %745 %744 
                                       f32_2 %746 = OpLoad %457 
                              Uniform f32_4* %747 = OpAccessChain %64 %259 
                                       f32_4 %748 = OpLoad %747 
                                       f32_2 %749 = OpVectorShuffle %748 %748 0 1 
                                       f32_2 %750 = OpFMul %746 %749 
                                       f32_4 %751 = OpLoad %290 
                                       f32_2 %752 = OpVectorShuffle %751 %751 0 1 
                                       f32_2 %753 = OpFAdd %750 %752 
                                       f32_4 %754 = OpLoad %53 
                                       f32_4 %755 = OpVectorShuffle %754 %753 4 1 2 5 
                                                      OpStore %53 %755 
                                       f32_4 %757 = OpLoad %53 
                                       f32_2 %758 = OpVectorShuffle %757 %757 0 3 
                                         f32 %759 = OpLoad %480 
                                         f32 %760 = OpCompositeExtract %758 0 
                                         f32 %761 = OpCompositeExtract %758 1 
                                       f32_3 %762 = OpCompositeConstruct %760 %761 %759 
                                                      OpStore %756 %762 
                         read_only Texture2D %763 = OpLoad %691 
                                     sampler %764 = OpLoad %693 
                  read_only Texture2DSampled %765 = OpSampledImage %763 %764 
                                       f32_3 %766 = OpLoad %756 
                                         f32 %767 = OpCompositeExtract %766 2 
                                         f32 %768 = OpImageSampleDrefExplicitLod %765 %766 %767 Lod %6 
                                Private f32* %769 = OpAccessChain %53 %27 
                                                      OpStore %769 %768 
                                       f32_3 %771 = OpLoad %710 
                                       f32_2 %772 = OpVectorShuffle %771 %771 0 2 
                                         f32 %773 = OpLoad %480 
                                         f32 %774 = OpCompositeExtract %772 0 
                                         f32 %775 = OpCompositeExtract %772 1 
                                       f32_3 %776 = OpCompositeConstruct %774 %775 %773 
                                                      OpStore %770 %776 
                         read_only Texture2D %777 = OpLoad %691 
                                     sampler %778 = OpLoad %693 
                  read_only Texture2DSampled %779 = OpSampledImage %777 %778 
                                       f32_3 %780 = OpLoad %770 
                                         f32 %781 = OpCompositeExtract %780 2 
                                         f32 %782 = OpImageSampleDrefExplicitLod %779 %780 %781 Lod %6 
                                Private f32* %783 = OpAccessChain %710 %27 
                                                      OpStore %783 %782 
                                Private f32* %784 = OpAccessChain %565 %36 
                                         f32 %785 = OpLoad %784 
                                Private f32* %786 = OpAccessChain %710 %27 
                                         f32 %787 = OpLoad %786 
                                         f32 %788 = OpFMul %785 %787 
                                Private f32* %789 = OpAccessChain %9 %27 
                                         f32 %790 = OpLoad %789 
                                         f32 %791 = OpFAdd %788 %790 
                                Private f32* %792 = OpAccessChain %9 %27 
                                                      OpStore %792 %791 
                                Private f32* %793 = OpAccessChain %565 %184 
                                         f32 %794 = OpLoad %793 
                                Private f32* %795 = OpAccessChain %53 %27 
                                         f32 %796 = OpLoad %795 
                                         f32 %797 = OpFMul %794 %796 
                                Private f32* %798 = OpAccessChain %9 %27 
                                         f32 %799 = OpLoad %798 
                                         f32 %800 = OpFAdd %797 %799 
                                Private f32* %801 = OpAccessChain %9 %27 
                                                      OpStore %801 %800 
                                       f32_4 %802 = OpLoad %534 
                                       f32_4 %803 = OpLoad %560 
                                       f32_4 %804 = OpVectorShuffle %803 %803 1 1 1 1 
                                       f32_4 %805 = OpFMul %802 %804 
                                                      OpStore %565 %805 
                                Private f32* %806 = OpAccessChain %138 %36 
                                         f32 %807 = OpLoad %806 
                                Private f32* %808 = OpAccessChain %665 %153 
                                                      OpStore %808 %807 
                                       f32_2 %809 = OpLoad %457 
                                       f32_4 %810 = OpVectorShuffle %809 %809 0 1 0 1 
                              Uniform f32_4* %811 = OpAccessChain %64 %259 
                                       f32_4 %812 = OpLoad %811 
                                       f32_4 %813 = OpVectorShuffle %812 %812 0 1 0 1 
                                       f32_4 %814 = OpFMul %810 %813 
                                       f32_4 %815 = OpLoad %665 
                                       f32_4 %816 = OpVectorShuffle %815 %815 0 1 2 1 
                                       f32_4 %817 = OpFAdd %814 %816 
                                                      OpStore %673 %817 
                                       f32_4 %819 = OpLoad %673 
                                       f32_2 %820 = OpVectorShuffle %819 %819 0 1 
                                         f32 %821 = OpLoad %480 
                                         f32 %822 = OpCompositeExtract %820 0 
                                         f32 %823 = OpCompositeExtract %820 1 
                                       f32_3 %824 = OpCompositeConstruct %822 %823 %821 
                                                      OpStore %818 %824 
                         read_only Texture2D %825 = OpLoad %691 
                                     sampler %826 = OpLoad %693 
                  read_only Texture2DSampled %827 = OpSampledImage %825 %826 
                                       f32_3 %828 = OpLoad %818 
                                         f32 %829 = OpCompositeExtract %828 2 
                                         f32 %830 = OpImageSampleDrefExplicitLod %827 %828 %829 Lod %6 
                                Private f32* %831 = OpAccessChain %710 %27 
                                                      OpStore %831 %830 
                                       f32_4 %833 = OpLoad %673 
                                       f32_2 %834 = OpVectorShuffle %833 %833 2 3 
                                         f32 %835 = OpLoad %480 
                                         f32 %836 = OpCompositeExtract %834 0 
                                         f32 %837 = OpCompositeExtract %834 1 
                                       f32_3 %838 = OpCompositeConstruct %836 %837 %835 
                                                      OpStore %832 %838 
                         read_only Texture2D %840 = OpLoad %691 
                                     sampler %841 = OpLoad %693 
                  read_only Texture2DSampled %842 = OpSampledImage %840 %841 
                                       f32_3 %843 = OpLoad %832 
                                         f32 %844 = OpCompositeExtract %843 2 
                                         f32 %845 = OpImageSampleDrefExplicitLod %842 %843 %844 Lod %6 
                                                      OpStore %839 %845 
                                Private f32* %846 = OpAccessChain %565 %27 
                                         f32 %847 = OpLoad %846 
                                Private f32* %848 = OpAccessChain %710 %27 
                                         f32 %849 = OpLoad %848 
                                         f32 %850 = OpFMul %847 %849 
                                Private f32* %851 = OpAccessChain %9 %27 
                                         f32 %852 = OpLoad %851 
                                         f32 %853 = OpFAdd %850 %852 
                                Private f32* %854 = OpAccessChain %9 %27 
                                                      OpStore %854 %853 
                                Private f32* %855 = OpAccessChain %565 %153 
                                         f32 %856 = OpLoad %855 
                                         f32 %857 = OpLoad %839 
                                         f32 %858 = OpFMul %856 %857 
                                Private f32* %859 = OpAccessChain %9 %27 
                                         f32 %860 = OpLoad %859 
                                         f32 %861 = OpFAdd %858 %860 
                                Private f32* %862 = OpAccessChain %9 %27 
                                                      OpStore %862 %861 
                                       f32_2 %863 = OpLoad %457 
                              Uniform f32_4* %864 = OpAccessChain %64 %259 
                                       f32_4 %865 = OpLoad %864 
                                       f32_2 %866 = OpVectorShuffle %865 %865 0 1 
                                       f32_2 %867 = OpFMul %863 %866 
                                       f32_4 %868 = OpLoad %665 
                                       f32_2 %869 = OpVectorShuffle %868 %868 3 1 
                                       f32_2 %870 = OpFAdd %867 %869 
                                       f32_3 %871 = OpLoad %710 
                                       f32_3 %872 = OpVectorShuffle %871 %870 3 1 4 
                                                      OpStore %710 %872 
                                Private f32* %873 = OpAccessChain %665 %153 
                                         f32 %874 = OpLoad %873 
                                Private f32* %875 = OpAccessChain %290 %36 
                                                      OpStore %875 %874 
                                       f32_2 %876 = OpLoad %457 
                              Uniform f32_4* %877 = OpAccessChain %64 %259 
                                       f32_4 %878 = OpLoad %877 
                                       f32_2 %879 = OpVectorShuffle %878 %878 0 1 
                                       f32_2 %880 = OpFMul %876 %879 
                                       f32_4 %881 = OpLoad %290 
                                       f32_2 %882 = OpVectorShuffle %881 %881 0 2 
                                       f32_2 %883 = OpFAdd %880 %882 
                                       f32_4 %884 = OpLoad %53 
                                       f32_4 %885 = OpVectorShuffle %884 %883 4 1 2 5 
                                                      OpStore %53 %885 
                                       f32_4 %887 = OpLoad %53 
                                       f32_2 %888 = OpVectorShuffle %887 %887 0 3 
                                         f32 %889 = OpLoad %480 
                                         f32 %890 = OpCompositeExtract %888 0 
                                         f32 %891 = OpCompositeExtract %888 1 
                                       f32_3 %892 = OpCompositeConstruct %890 %891 %889 
                                                      OpStore %886 %892 
                         read_only Texture2D %893 = OpLoad %691 
                                     sampler %894 = OpLoad %693 
                  read_only Texture2DSampled %895 = OpSampledImage %893 %894 
                                       f32_3 %896 = OpLoad %886 
                                         f32 %897 = OpCompositeExtract %896 2 
                                         f32 %898 = OpImageSampleDrefExplicitLod %895 %896 %897 Lod %6 
                                Private f32* %899 = OpAccessChain %53 %27 
                                                      OpStore %899 %898 
                                       f32_3 %901 = OpLoad %710 
                                       f32_2 %902 = OpVectorShuffle %901 %901 0 2 
                                         f32 %903 = OpLoad %480 
                                         f32 %904 = OpCompositeExtract %902 0 
                                         f32 %905 = OpCompositeExtract %902 1 
                                       f32_3 %906 = OpCompositeConstruct %904 %905 %903 
                                                      OpStore %900 %906 
                         read_only Texture2D %907 = OpLoad %691 
                                     sampler %908 = OpLoad %693 
                  read_only Texture2DSampled %909 = OpSampledImage %907 %908 
                                       f32_3 %910 = OpLoad %900 
                                         f32 %911 = OpCompositeExtract %910 2 
                                         f32 %912 = OpImageSampleDrefExplicitLod %909 %910 %911 Lod %6 
                                Private f32* %913 = OpAccessChain %710 %27 
                                                      OpStore %913 %912 
                                Private f32* %914 = OpAccessChain %565 %36 
                                         f32 %915 = OpLoad %914 
                                Private f32* %916 = OpAccessChain %710 %27 
                                         f32 %917 = OpLoad %916 
                                         f32 %918 = OpFMul %915 %917 
                                Private f32* %919 = OpAccessChain %9 %27 
                                         f32 %920 = OpLoad %919 
                                         f32 %921 = OpFAdd %918 %920 
                                Private f32* %922 = OpAccessChain %9 %27 
                                                      OpStore %922 %921 
                                Private f32* %923 = OpAccessChain %565 %184 
                                         f32 %924 = OpLoad %923 
                                Private f32* %925 = OpAccessChain %53 %27 
                                         f32 %926 = OpLoad %925 
                                         f32 %927 = OpFMul %924 %926 
                                Private f32* %928 = OpAccessChain %9 %27 
                                         f32 %929 = OpLoad %928 
                                         f32 %930 = OpFAdd %927 %929 
                                Private f32* %931 = OpAccessChain %9 %27 
                                                      OpStore %931 %930 
                                       f32_4 %932 = OpLoad %534 
                                       f32_4 %933 = OpLoad %560 
                                       f32_4 %934 = OpVectorShuffle %933 %933 2 2 2 2 
                                       f32_4 %935 = OpFMul %932 %934 
                                                      OpStore %565 %935 
                                       f32_4 %936 = OpLoad %534 
                                       f32_4 %937 = OpLoad %560 
                                       f32_4 %938 = OpVectorShuffle %937 %937 3 3 3 3 
                                       f32_4 %939 = OpFMul %936 %938 
                                                      OpStore %534 %939 
                                Private f32* %940 = OpAccessChain %138 %184 
                                         f32 %941 = OpLoad %940 
                                Private f32* %942 = OpAccessChain %665 %153 
                                                      OpStore %942 %941 
                                       f32_2 %943 = OpLoad %457 
                                       f32_4 %944 = OpVectorShuffle %943 %943 0 1 0 1 
                              Uniform f32_4* %945 = OpAccessChain %64 %259 
                                       f32_4 %946 = OpLoad %945 
                                       f32_4 %947 = OpVectorShuffle %946 %946 0 1 0 1 
                                       f32_4 %948 = OpFMul %944 %947 
                                       f32_4 %949 = OpLoad %665 
                                       f32_4 %950 = OpVectorShuffle %949 %949 0 1 2 1 
                                       f32_4 %951 = OpFAdd %948 %950 
                                                      OpStore %560 %951 
                                       f32_4 %953 = OpLoad %560 
                                       f32_2 %954 = OpVectorShuffle %953 %953 0 1 
                                         f32 %955 = OpLoad %480 
                                         f32 %956 = OpCompositeExtract %954 0 
                                         f32 %957 = OpCompositeExtract %954 1 
                                       f32_3 %958 = OpCompositeConstruct %956 %957 %955 
                                                      OpStore %952 %958 
                         read_only Texture2D %959 = OpLoad %691 
                                     sampler %960 = OpLoad %693 
                  read_only Texture2DSampled %961 = OpSampledImage %959 %960 
                                       f32_3 %962 = OpLoad %952 
                                         f32 %963 = OpCompositeExtract %962 2 
                                         f32 %964 = OpImageSampleDrefExplicitLod %961 %962 %963 Lod %6 
                                Private f32* %965 = OpAccessChain %710 %27 
                                                      OpStore %965 %964 
                                       f32_4 %967 = OpLoad %560 
                                       f32_2 %968 = OpVectorShuffle %967 %967 2 3 
                                         f32 %969 = OpLoad %480 
                                         f32 %970 = OpCompositeExtract %968 0 
                                         f32 %971 = OpCompositeExtract %968 1 
                                       f32_3 %972 = OpCompositeConstruct %970 %971 %969 
                                                      OpStore %966 %972 
                         read_only Texture2D %973 = OpLoad %691 
                                     sampler %974 = OpLoad %693 
                  read_only Texture2DSampled %975 = OpSampledImage %973 %974 
                                       f32_3 %976 = OpLoad %966 
                                         f32 %977 = OpCompositeExtract %976 2 
                                         f32 %978 = OpImageSampleDrefExplicitLod %975 %976 %977 Lod %6 
                                                      OpStore %839 %978 
                                Private f32* %979 = OpAccessChain %565 %27 
                                         f32 %980 = OpLoad %979 
                                Private f32* %981 = OpAccessChain %710 %27 
                                         f32 %982 = OpLoad %981 
                                         f32 %983 = OpFMul %980 %982 
                                Private f32* %984 = OpAccessChain %9 %27 
                                         f32 %985 = OpLoad %984 
                                         f32 %986 = OpFAdd %983 %985 
                                Private f32* %987 = OpAccessChain %9 %27 
                                                      OpStore %987 %986 
                                Private f32* %988 = OpAccessChain %565 %153 
                                         f32 %989 = OpLoad %988 
                                         f32 %990 = OpLoad %839 
                                         f32 %991 = OpFMul %989 %990 
                                Private f32* %992 = OpAccessChain %9 %27 
                                         f32 %993 = OpLoad %992 
                                         f32 %994 = OpFAdd %991 %993 
                                Private f32* %995 = OpAccessChain %9 %27 
                                                      OpStore %995 %994 
                                       f32_2 %996 = OpLoad %457 
                              Uniform f32_4* %997 = OpAccessChain %64 %259 
                                       f32_4 %998 = OpLoad %997 
                                       f32_2 %999 = OpVectorShuffle %998 %998 0 1 
                                      f32_2 %1000 = OpFMul %996 %999 
                                      f32_4 %1001 = OpLoad %665 
                                      f32_2 %1002 = OpVectorShuffle %1001 %1001 3 1 
                                      f32_2 %1003 = OpFAdd %1000 %1002 
                                      f32_3 %1004 = OpLoad %710 
                                      f32_3 %1005 = OpVectorShuffle %1004 %1003 3 1 4 
                                                      OpStore %710 %1005 
                                      f32_4 %1006 = OpLoad %665 
                                      f32_3 %1007 = OpVectorShuffle %1006 %1006 0 2 3 
                                      f32_4 %1008 = OpLoad %138 
                                      f32_4 %1009 = OpVectorShuffle %1008 %1007 4 1 5 6 
                                                      OpStore %138 %1009 
                               Private f32* %1010 = OpAccessChain %665 %153 
                                        f32 %1011 = OpLoad %1010 
                               Private f32* %1012 = OpAccessChain %290 %184 
                                                      OpStore %1012 %1011 
                                      f32_2 %1013 = OpLoad %457 
                             Uniform f32_4* %1014 = OpAccessChain %64 %259 
                                      f32_4 %1015 = OpLoad %1014 
                                      f32_2 %1016 = OpVectorShuffle %1015 %1015 0 1 
                                      f32_2 %1017 = OpFMul %1013 %1016 
                                      f32_4 %1018 = OpLoad %290 
                                      f32_2 %1019 = OpVectorShuffle %1018 %1018 0 3 
                                      f32_2 %1020 = OpFAdd %1017 %1019 
                                      f32_4 %1021 = OpLoad %53 
                                      f32_4 %1022 = OpVectorShuffle %1021 %1020 4 1 2 5 
                                                      OpStore %53 %1022 
                                      f32_4 %1024 = OpLoad %53 
                                      f32_2 %1025 = OpVectorShuffle %1024 %1024 0 3 
                                        f32 %1026 = OpLoad %480 
                                        f32 %1027 = OpCompositeExtract %1025 0 
                                        f32 %1028 = OpCompositeExtract %1025 1 
                                      f32_3 %1029 = OpCompositeConstruct %1027 %1028 %1026 
                                                      OpStore %1023 %1029 
                        read_only Texture2D %1030 = OpLoad %691 
                                    sampler %1031 = OpLoad %693 
                 read_only Texture2DSampled %1032 = OpSampledImage %1030 %1031 
                                      f32_3 %1033 = OpLoad %1023 
                                        f32 %1034 = OpCompositeExtract %1033 2 
                                        f32 %1035 = OpImageSampleDrefExplicitLod %1032 %1033 %1034 Lod %6 
                               Private f32* %1036 = OpAccessChain %53 %27 
                                                      OpStore %1036 %1035 
                                      f32_3 %1038 = OpLoad %710 
                                      f32_2 %1039 = OpVectorShuffle %1038 %1038 0 2 
                                        f32 %1040 = OpLoad %480 
                                        f32 %1041 = OpCompositeExtract %1039 0 
                                        f32 %1042 = OpCompositeExtract %1039 1 
                                      f32_3 %1043 = OpCompositeConstruct %1041 %1042 %1040 
                                                      OpStore %1037 %1043 
                        read_only Texture2D %1044 = OpLoad %691 
                                    sampler %1045 = OpLoad %693 
                 read_only Texture2DSampled %1046 = OpSampledImage %1044 %1045 
                                      f32_3 %1047 = OpLoad %1037 
                                        f32 %1048 = OpCompositeExtract %1047 2 
                                        f32 %1049 = OpImageSampleDrefExplicitLod %1046 %1047 %1048 Lod %6 
                               Private f32* %1050 = OpAccessChain %710 %27 
                                                      OpStore %1050 %1049 
                               Private f32* %1051 = OpAccessChain %565 %36 
                                        f32 %1052 = OpLoad %1051 
                               Private f32* %1053 = OpAccessChain %710 %27 
                                        f32 %1054 = OpLoad %1053 
                                        f32 %1055 = OpFMul %1052 %1054 
                               Private f32* %1056 = OpAccessChain %9 %27 
                                        f32 %1057 = OpLoad %1056 
                                        f32 %1058 = OpFAdd %1055 %1057 
                               Private f32* %1059 = OpAccessChain %9 %27 
                                                      OpStore %1059 %1058 
                               Private f32* %1060 = OpAccessChain %565 %184 
                                        f32 %1061 = OpLoad %1060 
                               Private f32* %1062 = OpAccessChain %53 %27 
                                        f32 %1063 = OpLoad %1062 
                                        f32 %1064 = OpFMul %1061 %1063 
                               Private f32* %1065 = OpAccessChain %9 %27 
                                        f32 %1066 = OpLoad %1065 
                                        f32 %1067 = OpFAdd %1064 %1066 
                               Private f32* %1068 = OpAccessChain %9 %27 
                                                      OpStore %1068 %1067 
                                      f32_2 %1069 = OpLoad %457 
                                      f32_4 %1070 = OpVectorShuffle %1069 %1069 0 1 0 1 
                             Uniform f32_4* %1071 = OpAccessChain %64 %259 
                                      f32_4 %1072 = OpLoad %1071 
                                      f32_4 %1073 = OpVectorShuffle %1072 %1072 0 1 0 1 
                                      f32_4 %1074 = OpFMul %1070 %1073 
                                      f32_4 %1075 = OpLoad %138 
                                      f32_4 %1076 = OpVectorShuffle %1075 %1075 0 1 2 1 
                                      f32_4 %1077 = OpFAdd %1074 %1076 
                                                      OpStore %560 %1077 
                                      f32_2 %1078 = OpLoad %457 
                             Uniform f32_4* %1079 = OpAccessChain %64 %259 
                                      f32_4 %1080 = OpLoad %1079 
                                      f32_2 %1081 = OpVectorShuffle %1080 %1080 0 1 
                                      f32_2 %1082 = OpFMul %1078 %1081 
                                      f32_4 %1083 = OpLoad %138 
                                      f32_2 %1084 = OpVectorShuffle %1083 %1083 3 1 
                                      f32_2 %1085 = OpFAdd %1082 %1084 
                                      f32_3 %1086 = OpLoad %710 
                                      f32_3 %1087 = OpVectorShuffle %1086 %1085 3 1 4 
                                                      OpStore %710 %1087 
                               Private f32* %1088 = OpAccessChain %138 %153 
                                        f32 %1089 = OpLoad %1088 
                               Private f32* %1090 = OpAccessChain %290 %153 
                                                      OpStore %1090 %1089 
                                      f32_2 %1091 = OpLoad %457 
                             Uniform f32_4* %1092 = OpAccessChain %64 %259 
                                      f32_4 %1093 = OpLoad %1092 
                                      f32_2 %1094 = OpVectorShuffle %1093 %1093 0 1 
                                      f32_2 %1095 = OpFMul %1091 %1094 
                                      f32_4 %1096 = OpLoad %290 
                                      f32_2 %1097 = OpVectorShuffle %1096 %1096 0 1 
                                      f32_2 %1098 = OpFAdd %1095 %1097 
                                      f32_4 %1099 = OpLoad %53 
                                      f32_4 %1100 = OpVectorShuffle %1099 %1098 4 5 2 3 
                                                      OpStore %53 %1100 
                                      f32_4 %1102 = OpLoad %53 
                                      f32_2 %1103 = OpVectorShuffle %1102 %1102 0 1 
                                        f32 %1104 = OpLoad %480 
                                        f32 %1105 = OpCompositeExtract %1103 0 
                                        f32 %1106 = OpCompositeExtract %1103 1 
                                      f32_3 %1107 = OpCompositeConstruct %1105 %1106 %1104 
                                                      OpStore %1101 %1107 
                        read_only Texture2D %1108 = OpLoad %691 
                                    sampler %1109 = OpLoad %693 
                 read_only Texture2DSampled %1110 = OpSampledImage %1108 %1109 
                                      f32_3 %1111 = OpLoad %1101 
                                        f32 %1112 = OpCompositeExtract %1111 2 
                                        f32 %1113 = OpImageSampleDrefExplicitLod %1110 %1111 %1112 Lod %6 
                               Private f32* %1114 = OpAccessChain %53 %27 
                                                      OpStore %1114 %1113 
                                      f32_3 %1116 = OpLoad %710 
                                      f32_2 %1117 = OpVectorShuffle %1116 %1116 0 2 
                                        f32 %1118 = OpLoad %480 
                                        f32 %1119 = OpCompositeExtract %1117 0 
                                        f32 %1120 = OpCompositeExtract %1117 1 
                                      f32_3 %1121 = OpCompositeConstruct %1119 %1120 %1118 
                                                      OpStore %1115 %1121 
                        read_only Texture2D %1122 = OpLoad %691 
                                    sampler %1123 = OpLoad %693 
                 read_only Texture2DSampled %1124 = OpSampledImage %1122 %1123 
                                      f32_3 %1125 = OpLoad %1115 
                                        f32 %1126 = OpCompositeExtract %1125 2 
                                        f32 %1127 = OpImageSampleDrefExplicitLod %1124 %1125 %1126 Lod %6 
                               Private f32* %1128 = OpAccessChain %710 %27 
                                                      OpStore %1128 %1127 
                                      f32_4 %1130 = OpLoad %560 
                                      f32_2 %1131 = OpVectorShuffle %1130 %1130 0 1 
                                        f32 %1132 = OpLoad %480 
                                        f32 %1133 = OpCompositeExtract %1131 0 
                                        f32 %1134 = OpCompositeExtract %1131 1 
                                      f32_3 %1135 = OpCompositeConstruct %1133 %1134 %1132 
                                                      OpStore %1129 %1135 
                        read_only Texture2D %1136 = OpLoad %691 
                                    sampler %1137 = OpLoad %693 
                 read_only Texture2DSampled %1138 = OpSampledImage %1136 %1137 
                                      f32_3 %1139 = OpLoad %1129 
                                        f32 %1140 = OpCompositeExtract %1139 2 
                                        f32 %1141 = OpImageSampleDrefExplicitLod %1138 %1139 %1140 Lod %6 
                                                      OpStore %839 %1141 
                                      f32_4 %1143 = OpLoad %560 
                                      f32_2 %1144 = OpVectorShuffle %1143 %1143 2 3 
                                        f32 %1145 = OpLoad %480 
                                        f32 %1146 = OpCompositeExtract %1144 0 
                                        f32 %1147 = OpCompositeExtract %1144 1 
                                      f32_3 %1148 = OpCompositeConstruct %1146 %1147 %1145 
                                                      OpStore %1142 %1148 
                        read_only Texture2D %1149 = OpLoad %691 
                                    sampler %1150 = OpLoad %693 
                 read_only Texture2DSampled %1151 = OpSampledImage %1149 %1150 
                                      f32_3 %1152 = OpLoad %1142 
                                        f32 %1153 = OpCompositeExtract %1152 2 
                                        f32 %1154 = OpImageSampleDrefExplicitLod %1151 %1152 %1153 Lod %6 
                                                      OpStore %480 %1154 
                               Private f32* %1155 = OpAccessChain %534 %27 
                                        f32 %1156 = OpLoad %1155 
                                        f32 %1157 = OpLoad %839 
                                        f32 %1158 = OpFMul %1156 %1157 
                               Private f32* %1159 = OpAccessChain %9 %27 
                                        f32 %1160 = OpLoad %1159 
                                        f32 %1161 = OpFAdd %1158 %1160 
                               Private f32* %1162 = OpAccessChain %9 %27 
                                                      OpStore %1162 %1161 
                               Private f32* %1163 = OpAccessChain %534 %153 
                                        f32 %1164 = OpLoad %1163 
                                        f32 %1165 = OpLoad %480 
                                        f32 %1166 = OpFMul %1164 %1165 
                               Private f32* %1167 = OpAccessChain %9 %27 
                                        f32 %1168 = OpLoad %1167 
                                        f32 %1169 = OpFAdd %1166 %1168 
                               Private f32* %1170 = OpAccessChain %9 %27 
                                                      OpStore %1170 %1169 
                               Private f32* %1171 = OpAccessChain %534 %36 
                                        f32 %1172 = OpLoad %1171 
                               Private f32* %1173 = OpAccessChain %710 %27 
                                        f32 %1174 = OpLoad %1173 
                                        f32 %1175 = OpFMul %1172 %1174 
                               Private f32* %1176 = OpAccessChain %9 %27 
                                        f32 %1177 = OpLoad %1176 
                                        f32 %1178 = OpFAdd %1175 %1177 
                               Private f32* %1179 = OpAccessChain %9 %27 
                                                      OpStore %1179 %1178 
                               Private f32* %1180 = OpAccessChain %534 %184 
                                        f32 %1181 = OpLoad %1180 
                               Private f32* %1182 = OpAccessChain %53 %27 
                                        f32 %1183 = OpLoad %1182 
                                        f32 %1184 = OpFMul %1181 %1183 
                               Private f32* %1185 = OpAccessChain %9 %27 
                                        f32 %1186 = OpLoad %1185 
                                        f32 %1187 = OpFAdd %1184 %1186 
                               Private f32* %1188 = OpAccessChain %9 %27 
                                                      OpStore %1188 %1187 
                               Uniform f32* %1190 = OpAccessChain %64 %241 %27 
                                        f32 %1191 = OpLoad %1190 
                                        f32 %1192 = OpFNegate %1191 
                                        f32 %1193 = OpFAdd %1192 %34 
                               Private f32* %1194 = OpAccessChain %710 %27 
                                                      OpStore %1194 %1193 
                                      f32_4 %1197 = OpLoad %9 
                                      f32_4 %1198 = OpVectorShuffle %1197 %1197 0 0 0 0 
                                      f32_3 %1199 = OpLoad %710 
                                      f32_4 %1200 = OpVectorShuffle %1199 %1199 0 0 0 0 
                                      f32_4 %1201 = OpFMul %1198 %1200 
                             Uniform f32_4* %1202 = OpAccessChain %64 %241 
                                      f32_4 %1203 = OpLoad %1202 
                                      f32_4 %1204 = OpVectorShuffle %1203 %1203 0 0 0 0 
                                      f32_4 %1205 = OpFAdd %1201 %1204 
                                                      OpStore %1196 %1205 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "SHADOWS_SINGLE_CASCADE" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "SHADOWS_SINGLE_CASCADE" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraInvProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in  vec4 in_POSITION0;
in  vec2 in_TEXCOORD0;
in  vec3 in_TEXCOORD1;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_CameraInvProjection[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_CameraInvProjection[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    vs_TEXCOORD0.zw = u_xlat1.zz + u_xlat1.xw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = in_TEXCOORD1.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-hlslcc_mtx4x4unity_CameraInvProjection[2].xyz);
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[2].xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;
    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;
    u_xlat1.w = (-u_xlat1.z);
    vs_TEXCOORD2.xyz = u_xlat1.xyw;
    u_xlat0.w = (-u_xlat0.z);
    vs_TEXCOORD3.xyz = u_xlat0.xyw;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_CameraInvProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	vec4 _LightShadowData;
uniform 	vec4 _ShadowMapTexture_TexelSize;
UNITY_LOCATION(0) uniform  sampler2D _CameraDepthTexture;
UNITY_LOCATION(1) uniform  sampler2D _ShadowMapTexture;
UNITY_LOCATION(2) uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
in  vec4 vs_TEXCOORD0;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
vec4 u_xlat6;
vec4 u_xlat7;
vec3 u_xlat8;
float u_xlat16;
vec2 u_xlat17;
float u_xlat24;
void main()
{
    u_xlat0 = texture(_CameraDepthTexture, vs_TEXCOORD0.xy).yzxw;
    u_xlat0.xy = vs_TEXCOORD0.zw;
    u_xlat0.xyz = u_xlat0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_CameraInvProjection[1];
    u_xlat1 = hlslcc_mtx4x4unity_CameraInvProjection[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_CameraInvProjection[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_CameraInvProjection[3];
    u_xlat0.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_CameraToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_CameraToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_CameraToWorld[2] * (-u_xlat0.zzzz) + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_CameraToWorld[3];
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xy = u_xlat0.xy * _ShadowMapTexture_TexelSize.zw + vec2(0.5, 0.5);
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlat0.xy = u_xlat0.xy * _ShadowMapTexture_TexelSize.zw + (-u_xlat1.xy);
    u_xlat17.xy = (-u_xlat0.xy) + vec2(1.0, 1.0);
    u_xlat2.xy = min(u_xlat0.xy, vec2(0.0, 0.0));
    u_xlat17.xy = (-u_xlat2.xy) * u_xlat2.xy + u_xlat17.xy;
    u_xlat17.xy = u_xlat17.xy + vec2(2.0, 2.0);
    u_xlat2.xy = u_xlat17.xy * vec2(0.0816320032, 0.0816320032);
    u_xlat3.y = u_xlat2.x;
    u_xlat17.xy = max(u_xlat0.xy, vec2(0.0, 0.0));
    u_xlat4 = u_xlat0.xxyy + vec4(0.5, 1.0, 0.5, 1.0);
    u_xlat17.xy = (-u_xlat17.xy) * u_xlat17.xy + u_xlat4.yw;
    u_xlat4 = u_xlat4.xxzz * u_xlat4.xxzz;
    u_xlat17.xy = u_xlat17.xy + vec2(2.0, 2.0);
    u_xlat5.z = u_xlat17.x * 0.0816320032;
    u_xlat6.z = u_xlat17.y * 0.0816320032;
    u_xlat17.xy = u_xlat4.xz * vec2(0.5, 0.5) + (-u_xlat0.xy);
    u_xlat3.zw = u_xlat4.wy * vec2(0.0408160016, 0.0408160016);
    u_xlat6.xy = u_xlat17.yx * vec2(0.0816320032, 0.0816320032);
    u_xlat5.x = u_xlat6.y;
    u_xlat2.w = u_xlat3.z;
    u_xlat5.yw = u_xlat0.xx * vec2(-0.0816320032, 0.0816320032) + vec2(0.163264006, 0.0816320032);
    u_xlat3.xz = u_xlat0.xx * vec2(-0.0816320032, 0.0816320032) + vec2(0.0816320032, 0.163264006);
    u_xlat4 = u_xlat3 + u_xlat5;
    u_xlat3 = u_xlat3 / u_xlat4;
    u_xlat3 = u_xlat3 + vec4(-3.5, -1.5, 0.5, 2.5);
    u_xlat3 = u_xlat3.wxyz * _ShadowMapTexture_TexelSize.xxxx;
    u_xlat5.xzw = u_xlat3.yzw;
    u_xlat6.yw = u_xlat0.yy * vec2(-0.0816320032, 0.0816320032) + vec2(0.163264006, 0.0816320032);
    u_xlat2.xz = u_xlat0.yy * vec2(-0.0816320032, 0.0816320032) + vec2(0.0816320032, 0.163264006);
    u_xlat6 = u_xlat2 + u_xlat6;
    u_xlat2 = u_xlat2 / u_xlat6;
    u_xlat2 = u_xlat2 + vec4(-3.5, -1.5, 0.5, 2.5);
    u_xlat2 = u_xlat2.xwyz * _ShadowMapTexture_TexelSize.yyyy;
    u_xlat5.y = u_xlat2.x;
    u_xlat7 = u_xlat1.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat5.xyzy;
    vec3 txVec0 = vec3(u_xlat7.zw,u_xlat0.z);
    u_xlat0.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
    vec3 txVec1 = vec3(u_xlat7.xy,u_xlat0.z);
    u_xlat8.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec1, 0.0);
    u_xlat7 = u_xlat4 * u_xlat6.xxxx;
    u_xlat0.x = u_xlat0.x * u_xlat7.y;
    u_xlat0.x = u_xlat7.x * u_xlat8.x + u_xlat0.x;
    u_xlat8.xz = u_xlat1.xy * _ShadowMapTexture_TexelSize.xy + u_xlat5.wy;
    u_xlat3.y = u_xlat5.y;
    u_xlat17.xy = u_xlat1.xy * _ShadowMapTexture_TexelSize.xy + u_xlat3.xy;
    vec3 txVec2 = vec3(u_xlat17.xy,u_xlat0.z);
    u_xlat17.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec2, 0.0);
    vec3 txVec3 = vec3(u_xlat8.xz,u_xlat0.z);
    u_xlat8.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec3, 0.0);
    u_xlat0.x = u_xlat7.z * u_xlat8.x + u_xlat0.x;
    u_xlat0.x = u_xlat7.w * u_xlat17.x + u_xlat0.x;
    u_xlat5.y = u_xlat2.z;
    u_xlat7 = u_xlat1.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat5.xyzy;
    vec3 txVec4 = vec3(u_xlat7.xy,u_xlat0.z);
    u_xlat8.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec4, 0.0);
    vec3 txVec5 = vec3(u_xlat7.zw,u_xlat0.z);
    u_xlat24 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec5, 0.0);
    u_xlat7 = u_xlat4 * u_xlat6.yyyy;
    u_xlat0.x = u_xlat7.x * u_xlat8.x + u_xlat0.x;
    u_xlat0.x = u_xlat7.y * u_xlat24 + u_xlat0.x;
    u_xlat8.xz = u_xlat1.xy * _ShadowMapTexture_TexelSize.xy + u_xlat5.wy;
    u_xlat3.z = u_xlat5.y;
    u_xlat17.xy = u_xlat1.xy * _ShadowMapTexture_TexelSize.xy + u_xlat3.xz;
    vec3 txVec6 = vec3(u_xlat17.xy,u_xlat0.z);
    u_xlat17.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec6, 0.0);
    vec3 txVec7 = vec3(u_xlat8.xz,u_xlat0.z);
    u_xlat8.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec7, 0.0);
    u_xlat0.x = u_xlat7.z * u_xlat8.x + u_xlat0.x;
    u_xlat0.x = u_xlat7.w * u_xlat17.x + u_xlat0.x;
    u_xlat5.y = u_xlat2.w;
    u_xlat7 = u_xlat1.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat5.xyzy;
    vec3 txVec8 = vec3(u_xlat7.xy,u_xlat0.z);
    u_xlat8.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec8, 0.0);
    vec3 txVec9 = vec3(u_xlat7.zw,u_xlat0.z);
    u_xlat24 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec9, 0.0);
    u_xlat7 = u_xlat4 * u_xlat6.zzzz;
    u_xlat4 = u_xlat4 * u_xlat6.wwww;
    u_xlat0.x = u_xlat7.x * u_xlat8.x + u_xlat0.x;
    u_xlat0.x = u_xlat7.y * u_xlat24 + u_xlat0.x;
    u_xlat8.xz = u_xlat1.xy * _ShadowMapTexture_TexelSize.xy + u_xlat5.wy;
    u_xlat2.xzw = u_xlat5.xzw;
    u_xlat3.w = u_xlat5.y;
    u_xlat17.xy = u_xlat1.xy * _ShadowMapTexture_TexelSize.xy + u_xlat3.xw;
    vec3 txVec10 = vec3(u_xlat17.xy,u_xlat0.z);
    u_xlat17.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec10, 0.0);
    vec3 txVec11 = vec3(u_xlat8.xz,u_xlat0.z);
    u_xlat8.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec11, 0.0);
    u_xlat0.x = u_xlat7.z * u_xlat8.x + u_xlat0.x;
    u_xlat0.x = u_xlat7.w * u_xlat17.x + u_xlat0.x;
    u_xlat5 = u_xlat1.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat2.xyzy;
    u_xlat8.xz = u_xlat1.xy * _ShadowMapTexture_TexelSize.xy + u_xlat2.wy;
    u_xlat3.y = u_xlat2.y;
    u_xlat1.xy = u_xlat1.xy * _ShadowMapTexture_TexelSize.xy + u_xlat3.xy;
    vec3 txVec12 = vec3(u_xlat1.xy,u_xlat0.z);
    u_xlat1.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec12, 0.0);
    vec3 txVec13 = vec3(u_xlat8.xz,u_xlat0.z);
    u_xlat8.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec13, 0.0);
    vec3 txVec14 = vec3(u_xlat5.xy,u_xlat0.z);
    u_xlat24 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec14, 0.0);
    vec3 txVec15 = vec3(u_xlat5.zw,u_xlat0.z);
    u_xlat16 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec15, 0.0);
    u_xlat0.x = u_xlat4.x * u_xlat24 + u_xlat0.x;
    u_xlat0.x = u_xlat4.y * u_xlat16 + u_xlat0.x;
    u_xlat0.x = u_xlat4.z * u_xlat8.x + u_xlat0.x;
    u_xlat0.x = u_xlat4.w * u_xlat1.x + u_xlat0.x;
    u_xlat8.x = (-_LightShadowData.x) + 1.0;
    SV_Target0 = u_xlat0.xxxx * u_xlat8.xxxx + _LightShadowData.xxxx;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "SHADOWS_SINGLE_CASCADE" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 193
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %80 %119 %129 %134 %136 %177 %184 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpMemberDecorate %78 0 BuiltIn 78 
                                                      OpMemberDecorate %78 1 BuiltIn 78 
                                                      OpMemberDecorate %78 2 BuiltIn 78 
                                                      OpDecorate %78 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 119 
                                                      OpDecorate %129 Location 129 
                                                      OpDecorate vs_TEXCOORD1 Location 134 
                                                      OpDecorate %136 Location 136 
                                                      OpDecorate vs_TEXCOORD2 Location 177 
                                                      OpDecorate vs_TEXCOORD3 Location 184 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %16 %17 %18 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4];}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 2 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %29 = OpConstant 0 
                                          i32 %45 = OpConstant 3 
                               Private f32_4* %49 = OpVariable Private 
                                          u32 %76 = OpConstant 1 
                                              %77 = OpTypeArray %6 %76 
                                              %78 = OpTypeStruct %7 %6 %77 
                                              %79 = OpTypePointer Output %78 
         Output struct {f32_4; f32; f32[1];}* %80 = OpVariable Output 
                                              %82 = OpTypePointer Output %7 
                                              %84 = OpTypePointer Private %6 
                                          u32 %87 = OpConstant 0 
                                              %88 = OpTypePointer Uniform %6 
                                              %93 = OpTypeVector %6 3 
                                          f32 %96 = OpConstant 3.674022E-40 
                                        f32_3 %97 = OpConstantComposite %96 %96 %96 
                                             %101 = OpTypePointer Private %93 
                              Private f32_3* %102 = OpVariable Private 
                       Output f32_4* vs_TEXCOORD0 = OpVariable Output 
                                             %120 = OpTypeVector %6 2 
                                             %128 = OpTypePointer Input %120 
                                Input f32_2* %129 = OpVariable Input 
                                             %133 = OpTypePointer Output %93 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                                             %135 = OpTypePointer Input %93 
                                Input f32_3* %136 = OpVariable Input 
                                         u32 %171 = OpConstant 2 
                                         u32 %175 = OpConstant 3 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                       Output f32_3* vs_TEXCOORD3 = OpVariable Output 
                                             %187 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %30 = OpAccessChain %21 %23 %29 
                                        f32_4 %31 = OpLoad %30 
                                        f32_4 %32 = OpLoad %11 
                                        f32_4 %33 = OpVectorShuffle %32 %32 0 0 0 0 
                                        f32_4 %34 = OpFMul %31 %33 
                                        f32_4 %35 = OpLoad %9 
                                        f32_4 %36 = OpFAdd %34 %35 
                                                      OpStore %9 %36 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %23 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %44 = OpLoad %9 
                               Uniform f32_4* %46 = OpAccessChain %21 %23 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_4 %48 = OpFAdd %44 %47 
                                                      OpStore %9 %48 
                                        f32_4 %50 = OpLoad %9 
                                        f32_4 %51 = OpVectorShuffle %50 %50 1 1 1 1 
                               Uniform f32_4* %52 = OpAccessChain %21 %45 %24 
                                        f32_4 %53 = OpLoad %52 
                                        f32_4 %54 = OpFMul %51 %53 
                                                      OpStore %49 %54 
                               Uniform f32_4* %55 = OpAccessChain %21 %45 %29 
                                        f32_4 %56 = OpLoad %55 
                                        f32_4 %57 = OpLoad %9 
                                        f32_4 %58 = OpVectorShuffle %57 %57 0 0 0 0 
                                        f32_4 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %49 
                                        f32_4 %61 = OpFAdd %59 %60 
                                                      OpStore %49 %61 
                               Uniform f32_4* %62 = OpAccessChain %21 %45 %23 
                                        f32_4 %63 = OpLoad %62 
                                        f32_4 %64 = OpLoad %9 
                                        f32_4 %65 = OpVectorShuffle %64 %64 2 2 2 2 
                                        f32_4 %66 = OpFMul %63 %65 
                                        f32_4 %67 = OpLoad %49 
                                        f32_4 %68 = OpFAdd %66 %67 
                                                      OpStore %49 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %45 %45 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %9 
                                        f32_4 %72 = OpVectorShuffle %71 %71 3 3 3 3 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %49 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %9 %75 
                                        f32_4 %81 = OpLoad %9 
                                Output f32_4* %83 = OpAccessChain %80 %29 
                                                      OpStore %83 %81 
                                 Private f32* %85 = OpAccessChain %9 %76 
                                          f32 %86 = OpLoad %85 
                                 Uniform f32* %89 = OpAccessChain %21 %29 %87 
                                          f32 %90 = OpLoad %89 
                                          f32 %91 = OpFMul %86 %90 
                                 Private f32* %92 = OpAccessChain %9 %76 
                                                      OpStore %92 %91 
                                        f32_4 %94 = OpLoad %9 
                                        f32_3 %95 = OpVectorShuffle %94 %94 0 3 1 
                                        f32_3 %98 = OpFMul %95 %97 
                                        f32_4 %99 = OpLoad %49 
                                       f32_4 %100 = OpVectorShuffle %99 %98 4 1 5 6 
                                                      OpStore %49 %100 
                                       f32_4 %103 = OpLoad %9 
                                       f32_3 %104 = OpVectorShuffle %103 %103 1 1 1 
                              Uniform f32_4* %105 = OpAccessChain %21 %24 %24 
                                       f32_4 %106 = OpLoad %105 
                                       f32_3 %107 = OpVectorShuffle %106 %106 0 1 2 
                                       f32_3 %108 = OpFMul %104 %107 
                                                      OpStore %102 %108 
                              Uniform f32_4* %109 = OpAccessChain %21 %24 %29 
                                       f32_4 %110 = OpLoad %109 
                                       f32_3 %111 = OpVectorShuffle %110 %110 0 1 2 
                                       f32_4 %112 = OpLoad %9 
                                       f32_3 %113 = OpVectorShuffle %112 %112 0 0 0 
                                       f32_3 %114 = OpFMul %111 %113 
                                       f32_3 %115 = OpLoad %102 
                                       f32_3 %116 = OpFAdd %114 %115 
                                       f32_4 %117 = OpLoad %9 
                                       f32_4 %118 = OpVectorShuffle %117 %116 4 5 6 3 
                                                      OpStore %9 %118 
                                       f32_4 %121 = OpLoad %49 
                                       f32_2 %122 = OpVectorShuffle %121 %121 2 2 
                                       f32_4 %123 = OpLoad %49 
                                       f32_2 %124 = OpVectorShuffle %123 %123 0 3 
                                       f32_2 %125 = OpFAdd %122 %124 
                                       f32_4 %126 = OpLoad vs_TEXCOORD0 
                                       f32_4 %127 = OpVectorShuffle %126 %125 0 1 4 5 
                                                      OpStore vs_TEXCOORD0 %127 
                                       f32_2 %130 = OpLoad %129 
                                       f32_4 %131 = OpLoad vs_TEXCOORD0 
                                       f32_4 %132 = OpVectorShuffle %131 %130 4 5 2 3 
                                                      OpStore vs_TEXCOORD0 %132 
                                       f32_3 %137 = OpLoad %136 
                                                      OpStore vs_TEXCOORD1 %137 
                                       f32_4 %138 = OpLoad %9 
                                       f32_3 %139 = OpVectorShuffle %138 %138 0 1 2 
                              Uniform f32_4* %140 = OpAccessChain %21 %24 %23 
                                       f32_4 %141 = OpLoad %140 
                                       f32_3 %142 = OpVectorShuffle %141 %141 0 1 2 
                                       f32_3 %143 = OpFNegate %142 
                                       f32_3 %144 = OpFAdd %139 %143 
                                       f32_4 %145 = OpLoad %49 
                                       f32_4 %146 = OpVectorShuffle %145 %144 4 5 6 3 
                                                      OpStore %49 %146 
                                       f32_4 %147 = OpLoad %9 
                                       f32_3 %148 = OpVectorShuffle %147 %147 0 1 2 
                              Uniform f32_4* %149 = OpAccessChain %21 %24 %23 
                                       f32_4 %150 = OpLoad %149 
                                       f32_3 %151 = OpVectorShuffle %150 %150 0 1 2 
                                       f32_3 %152 = OpFAdd %148 %151 
                                       f32_4 %153 = OpLoad %9 
                                       f32_4 %154 = OpVectorShuffle %153 %152 4 5 6 3 
                                                      OpStore %9 %154 
                                       f32_4 %155 = OpLoad %9 
                                       f32_3 %156 = OpVectorShuffle %155 %155 0 1 2 
                              Uniform f32_4* %157 = OpAccessChain %21 %24 %45 
                                       f32_4 %158 = OpLoad %157 
                                       f32_3 %159 = OpVectorShuffle %158 %158 0 1 2 
                                       f32_3 %160 = OpFAdd %156 %159 
                                       f32_4 %161 = OpLoad %9 
                                       f32_4 %162 = OpVectorShuffle %161 %160 4 5 6 3 
                                                      OpStore %9 %162 
                                       f32_4 %163 = OpLoad %49 
                                       f32_3 %164 = OpVectorShuffle %163 %163 0 1 2 
                              Uniform f32_4* %165 = OpAccessChain %21 %24 %45 
                                       f32_4 %166 = OpLoad %165 
                                       f32_3 %167 = OpVectorShuffle %166 %166 0 1 2 
                                       f32_3 %168 = OpFAdd %164 %167 
                                       f32_4 %169 = OpLoad %49 
                                       f32_4 %170 = OpVectorShuffle %169 %168 4 5 6 3 
                                                      OpStore %49 %170 
                                Private f32* %172 = OpAccessChain %49 %171 
                                         f32 %173 = OpLoad %172 
                                         f32 %174 = OpFNegate %173 
                                Private f32* %176 = OpAccessChain %49 %175 
                                                      OpStore %176 %174 
                                       f32_4 %178 = OpLoad %49 
                                       f32_3 %179 = OpVectorShuffle %178 %178 0 1 3 
                                                      OpStore vs_TEXCOORD2 %179 
                                Private f32* %180 = OpAccessChain %9 %171 
                                         f32 %181 = OpLoad %180 
                                         f32 %182 = OpFNegate %181 
                                Private f32* %183 = OpAccessChain %9 %175 
                                                      OpStore %183 %182 
                                       f32_4 %185 = OpLoad %9 
                                       f32_3 %186 = OpVectorShuffle %185 %185 0 1 3 
                                                      OpStore vs_TEXCOORD3 %186 
                                 Output f32* %188 = OpAccessChain %80 %29 %76 
                                         f32 %189 = OpLoad %188 
                                         f32 %190 = OpFNegate %189 
                                 Output f32* %191 = OpAccessChain %80 %29 %76 
                                                      OpStore %191 %190 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 909
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %21 %898 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpDecorate %12 DescriptorSet 12 
                                                      OpDecorate %12 Binding 12 
                                                      OpDecorate %16 DescriptorSet 16 
                                                      OpDecorate %16 Binding 16 
                                                      OpDecorate vs_TEXCOORD0 Location 21 
                                                      OpDecorate %57 ArrayStride 57 
                                                      OpDecorate %58 ArrayStride 58 
                                                      OpDecorate %60 ArrayStride 60 
                                                      OpMemberDecorate %61 0 Offset 61 
                                                      OpMemberDecorate %61 1 Offset 61 
                                                      OpMemberDecorate %61 2 Offset 61 
                                                      OpMemberDecorate %61 3 Offset 61 
                                                      OpMemberDecorate %61 4 Offset 61 
                                                      OpDecorate %61 Block 
                                                      OpDecorate %63 DescriptorSet 63 
                                                      OpDecorate %63 Binding 63 
                                                      OpDecorate %374 DescriptorSet 374 
                                                      OpDecorate %374 Binding 374 
                                                      OpDecorate %376 DescriptorSet 376 
                                                      OpDecorate %376 Binding 376 
                                                      OpDecorate %898 Location 898 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypePointer UniformConstant %10 
         UniformConstant read_only Texture2D* %12 = OpVariable UniformConstant 
                                              %14 = OpTypeSampler 
                                              %15 = OpTypePointer UniformConstant %14 
                     UniformConstant sampler* %16 = OpVariable UniformConstant 
                                              %18 = OpTypeSampledImage %10 
                                              %20 = OpTypePointer Input %7 
                        Input f32_4* vs_TEXCOORD0 = OpVariable Input 
                                              %22 = OpTypeVector %6 2 
                                              %26 = OpTypeInt 32 0 
                                          u32 %27 = OpConstant 0 
                                              %29 = OpTypePointer Private %6 
                                          f32 %34 = OpConstant 3.674022E-40 
                                          u32 %36 = OpConstant 2 
                                              %42 = OpTypeVector %6 3 
                                          f32 %45 = OpConstant 3.674022E-40 
                                        f32_3 %46 = OpConstantComposite %45 %45 %45 
                                          f32 %48 = OpConstant 3.674022E-40 
                                        f32_3 %49 = OpConstantComposite %48 %48 %48 
                               Private f32_4* %53 = OpVariable Private 
                                          u32 %56 = OpConstant 4 
                                              %57 = OpTypeArray %7 %56 
                                              %58 = OpTypeArray %7 %56 
                                          u32 %59 = OpConstant 16 
                                              %60 = OpTypeArray %7 %59 
                                              %61 = OpTypeStruct %57 %58 %60 %7 %7 
                                              %62 = OpTypePointer Uniform %61 
Uniform struct {f32_4[4]; f32_4[4]; f32_4[16]; f32_4; f32_4;}* %63 = OpVariable Uniform 
                                              %64 = OpTypeInt 32 1 
                                          i32 %65 = OpConstant 0 
                                          i32 %66 = OpConstant 1 
                                              %67 = OpTypePointer Uniform %7 
                                          i32 %78 = OpConstant 2 
                                          i32 %87 = OpConstant 3 
                                         i32 %165 = OpConstant 4 
                                         f32 %170 = OpConstant 3.674022E-40 
                                       f32_2 %171 = OpConstantComposite %170 %170 
                                             %192 = OpTypePointer Private %22 
                              Private f32_2* %193 = OpVariable Private 
                                       f32_2 %197 = OpConstantComposite %34 %34 
                              Private f32_4* %199 = OpVariable Private 
                                         f32 %202 = OpConstant 3.674022E-40 
                                       f32_2 %203 = OpConstantComposite %202 %202 
                                       f32_2 %216 = OpConstantComposite %45 %45 
                                         f32 %219 = OpConstant 3.674022E-40 
                                       f32_2 %220 = OpConstantComposite %219 %219 
                              Private f32_4* %224 = OpVariable Private 
                                         u32 %227 = OpConstant 1 
                              Private f32_4* %232 = OpVariable Private 
                                       f32_4 %235 = OpConstantComposite %170 %34 %170 %34 
                              Private f32_4* %251 = OpVariable Private 
                              Private f32_4* %256 = OpVariable Private 
                                         f32 %270 = OpConstant 3.674022E-40 
                                       f32_2 %271 = OpConstantComposite %270 %270 
                                         u32 %285 = OpConstant 3 
                                         f32 %289 = OpConstant 3.674022E-40 
                                       f32_2 %290 = OpConstantComposite %289 %219 
                                         f32 %292 = OpConstant 3.674022E-40 
                                       f32_2 %293 = OpConstantComposite %292 %219 
                                       f32_2 %300 = OpConstantComposite %219 %292 
                                         f32 %311 = OpConstant 3.674022E-40 
                                         f32 %312 = OpConstant 3.674022E-40 
                                         f32 %313 = OpConstant 3.674022E-40 
                                       f32_4 %314 = OpConstantComposite %311 %312 %170 %313 
                              Private f32_4* %355 = OpVariable Private 
                                             %365 = OpTypePointer Function %42 
        UniformConstant read_only Texture2D* %374 = OpVariable UniformConstant 
                    UniformConstant sampler* %376 = OpVariable UniformConstant 
                                             %378 = OpTypeImage %6 Dim2D 1 0 0 1 Unknown 
                                             %379 = OpTypeSampledImage %378 
                                             %393 = OpTypePointer Private %42 
                              Private f32_3* %394 = OpVariable Private 
                                Private f32* %526 = OpVariable Private 
                                Private f32* %850 = OpVariable Private 
                                             %891 = OpTypePointer Uniform %6 
                                             %897 = OpTypePointer Output %7 
                               Output f32_4* %898 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %366 = OpVariable Function 
                             Function f32_3* %385 = OpVariable Function 
                             Function f32_3* %444 = OpVariable Function 
                             Function f32_3* %458 = OpVariable Function 
                             Function f32_3* %503 = OpVariable Function 
                             Function f32_3* %518 = OpVariable Function 
                             Function f32_3* %577 = OpVariable Function 
                             Function f32_3* %591 = OpVariable Function 
                             Function f32_3* %636 = OpVariable Function 
                             Function f32_3* %651 = OpVariable Function 
                             Function f32_3* %717 = OpVariable Function 
                             Function f32_3* %731 = OpVariable Function 
                             Function f32_3* %798 = OpVariable Function 
                             Function f32_3* %813 = OpVariable Function 
                             Function f32_3* %828 = OpVariable Function 
                             Function f32_3* %842 = OpVariable Function 
                          read_only Texture2D %13 = OpLoad %12 
                                      sampler %17 = OpLoad %16 
                   read_only Texture2DSampled %19 = OpSampledImage %13 %17 
                                        f32_4 %23 = OpLoad vs_TEXCOORD0 
                                        f32_2 %24 = OpVectorShuffle %23 %23 0 1 
                                        f32_4 %25 = OpImageSampleImplicitLod %19 %24 
                                          f32 %28 = OpCompositeExtract %25 0 
                                 Private f32* %30 = OpAccessChain %9 %27 
                                                      OpStore %30 %28 
                                 Private f32* %31 = OpAccessChain %9 %27 
                                          f32 %32 = OpLoad %31 
                                          f32 %33 = OpFNegate %32 
                                          f32 %35 = OpFAdd %33 %34 
                                 Private f32* %37 = OpAccessChain %9 %36 
                                                      OpStore %37 %35 
                                        f32_4 %38 = OpLoad vs_TEXCOORD0 
                                        f32_2 %39 = OpVectorShuffle %38 %38 2 3 
                                        f32_4 %40 = OpLoad %9 
                                        f32_4 %41 = OpVectorShuffle %40 %39 4 5 2 3 
                                                      OpStore %9 %41 
                                        f32_4 %43 = OpLoad %9 
                                        f32_3 %44 = OpVectorShuffle %43 %43 0 1 2 
                                        f32_3 %47 = OpFMul %44 %46 
                                        f32_3 %50 = OpFAdd %47 %49 
                                        f32_4 %51 = OpLoad %9 
                                        f32_4 %52 = OpVectorShuffle %51 %50 4 5 6 3 
                                                      OpStore %9 %52 
                                        f32_4 %54 = OpLoad %9 
                                        f32_4 %55 = OpVectorShuffle %54 %54 1 1 1 1 
                               Uniform f32_4* %68 = OpAccessChain %63 %65 %66 
                                        f32_4 %69 = OpLoad %68 
                                        f32_4 %70 = OpFMul %55 %69 
                                                      OpStore %53 %70 
                               Uniform f32_4* %71 = OpAccessChain %63 %65 %65 
                                        f32_4 %72 = OpLoad %71 
                                        f32_4 %73 = OpLoad %9 
                                        f32_4 %74 = OpVectorShuffle %73 %73 0 0 0 0 
                                        f32_4 %75 = OpFMul %72 %74 
                                        f32_4 %76 = OpLoad %53 
                                        f32_4 %77 = OpFAdd %75 %76 
                                                      OpStore %53 %77 
                               Uniform f32_4* %79 = OpAccessChain %63 %65 %78 
                                        f32_4 %80 = OpLoad %79 
                                        f32_4 %81 = OpLoad %9 
                                        f32_4 %82 = OpVectorShuffle %81 %81 2 2 2 2 
                                        f32_4 %83 = OpFMul %80 %82 
                                        f32_4 %84 = OpLoad %53 
                                        f32_4 %85 = OpFAdd %83 %84 
                                                      OpStore %9 %85 
                                        f32_4 %86 = OpLoad %9 
                               Uniform f32_4* %88 = OpAccessChain %63 %65 %87 
                                        f32_4 %89 = OpLoad %88 
                                        f32_4 %90 = OpFAdd %86 %89 
                                                      OpStore %9 %90 
                                        f32_4 %91 = OpLoad %9 
                                        f32_3 %92 = OpVectorShuffle %91 %91 0 1 2 
                                        f32_4 %93 = OpLoad %9 
                                        f32_3 %94 = OpVectorShuffle %93 %93 3 3 3 
                                        f32_3 %95 = OpFDiv %92 %94 
                                        f32_4 %96 = OpLoad %9 
                                        f32_4 %97 = OpVectorShuffle %96 %95 4 5 6 3 
                                                      OpStore %9 %97 
                                        f32_4 %98 = OpLoad %9 
                                        f32_4 %99 = OpVectorShuffle %98 %98 1 1 1 1 
                              Uniform f32_4* %100 = OpAccessChain %63 %66 %66 
                                       f32_4 %101 = OpLoad %100 
                                       f32_4 %102 = OpFMul %99 %101 
                                                      OpStore %53 %102 
                              Uniform f32_4* %103 = OpAccessChain %63 %66 %65 
                                       f32_4 %104 = OpLoad %103 
                                       f32_4 %105 = OpLoad %9 
                                       f32_4 %106 = OpVectorShuffle %105 %105 0 0 0 0 
                                       f32_4 %107 = OpFMul %104 %106 
                                       f32_4 %108 = OpLoad %53 
                                       f32_4 %109 = OpFAdd %107 %108 
                                                      OpStore %53 %109 
                              Uniform f32_4* %110 = OpAccessChain %63 %66 %78 
                                       f32_4 %111 = OpLoad %110 
                                       f32_4 %112 = OpLoad %9 
                                       f32_4 %113 = OpVectorShuffle %112 %112 2 2 2 2 
                                       f32_4 %114 = OpFNegate %113 
                                       f32_4 %115 = OpFMul %111 %114 
                                       f32_4 %116 = OpLoad %53 
                                       f32_4 %117 = OpFAdd %115 %116 
                                                      OpStore %9 %117 
                                       f32_4 %118 = OpLoad %9 
                              Uniform f32_4* %119 = OpAccessChain %63 %66 %87 
                                       f32_4 %120 = OpLoad %119 
                                       f32_4 %121 = OpFAdd %118 %120 
                                                      OpStore %9 %121 
                                       f32_4 %122 = OpLoad %9 
                                       f32_3 %123 = OpVectorShuffle %122 %122 1 1 1 
                              Uniform f32_4* %124 = OpAccessChain %63 %78 %66 
                                       f32_4 %125 = OpLoad %124 
                                       f32_3 %126 = OpVectorShuffle %125 %125 0 1 2 
                                       f32_3 %127 = OpFMul %123 %126 
                                       f32_4 %128 = OpLoad %53 
                                       f32_4 %129 = OpVectorShuffle %128 %127 4 5 6 3 
                                                      OpStore %53 %129 
                              Uniform f32_4* %130 = OpAccessChain %63 %78 %65 
                                       f32_4 %131 = OpLoad %130 
                                       f32_3 %132 = OpVectorShuffle %131 %131 0 1 2 
                                       f32_4 %133 = OpLoad %9 
                                       f32_3 %134 = OpVectorShuffle %133 %133 0 0 0 
                                       f32_3 %135 = OpFMul %132 %134 
                                       f32_4 %136 = OpLoad %53 
                                       f32_3 %137 = OpVectorShuffle %136 %136 0 1 2 
                                       f32_3 %138 = OpFAdd %135 %137 
                                       f32_4 %139 = OpLoad %53 
                                       f32_4 %140 = OpVectorShuffle %139 %138 4 5 6 3 
                                                      OpStore %53 %140 
                              Uniform f32_4* %141 = OpAccessChain %63 %78 %78 
                                       f32_4 %142 = OpLoad %141 
                                       f32_3 %143 = OpVectorShuffle %142 %142 0 1 2 
                                       f32_4 %144 = OpLoad %9 
                                       f32_3 %145 = OpVectorShuffle %144 %144 2 2 2 
                                       f32_3 %146 = OpFMul %143 %145 
                                       f32_4 %147 = OpLoad %53 
                                       f32_3 %148 = OpVectorShuffle %147 %147 0 1 2 
                                       f32_3 %149 = OpFAdd %146 %148 
                                       f32_4 %150 = OpLoad %9 
                                       f32_4 %151 = OpVectorShuffle %150 %149 4 5 6 3 
                                                      OpStore %9 %151 
                              Uniform f32_4* %152 = OpAccessChain %63 %78 %87 
                                       f32_4 %153 = OpLoad %152 
                                       f32_3 %154 = OpVectorShuffle %153 %153 0 1 2 
                                       f32_4 %155 = OpLoad %9 
                                       f32_3 %156 = OpVectorShuffle %155 %155 3 3 3 
                                       f32_3 %157 = OpFMul %154 %156 
                                       f32_4 %158 = OpLoad %9 
                                       f32_3 %159 = OpVectorShuffle %158 %158 0 1 2 
                                       f32_3 %160 = OpFAdd %157 %159 
                                       f32_4 %161 = OpLoad %9 
                                       f32_4 %162 = OpVectorShuffle %161 %160 4 5 6 3 
                                                      OpStore %9 %162 
                                       f32_4 %163 = OpLoad %9 
                                       f32_2 %164 = OpVectorShuffle %163 %163 0 1 
                              Uniform f32_4* %166 = OpAccessChain %63 %165 
                                       f32_4 %167 = OpLoad %166 
                                       f32_2 %168 = OpVectorShuffle %167 %167 2 3 
                                       f32_2 %169 = OpFMul %164 %168 
                                       f32_2 %172 = OpFAdd %169 %171 
                                       f32_4 %173 = OpLoad %53 
                                       f32_4 %174 = OpVectorShuffle %173 %172 4 5 2 3 
                                                      OpStore %53 %174 
                                       f32_4 %175 = OpLoad %53 
                                       f32_2 %176 = OpVectorShuffle %175 %175 0 1 
                                       f32_2 %177 = OpExtInst %1 8 %176 
                                       f32_4 %178 = OpLoad %53 
                                       f32_4 %179 = OpVectorShuffle %178 %177 4 5 2 3 
                                                      OpStore %53 %179 
                                       f32_4 %180 = OpLoad %9 
                                       f32_2 %181 = OpVectorShuffle %180 %180 0 1 
                              Uniform f32_4* %182 = OpAccessChain %63 %165 
                                       f32_4 %183 = OpLoad %182 
                                       f32_2 %184 = OpVectorShuffle %183 %183 2 3 
                                       f32_2 %185 = OpFMul %181 %184 
                                       f32_4 %186 = OpLoad %53 
                                       f32_2 %187 = OpVectorShuffle %186 %186 0 1 
                                       f32_2 %188 = OpFNegate %187 
                                       f32_2 %189 = OpFAdd %185 %188 
                                       f32_4 %190 = OpLoad %9 
                                       f32_4 %191 = OpVectorShuffle %190 %189 4 5 2 3 
                                                      OpStore %9 %191 
                                       f32_4 %194 = OpLoad %9 
                                       f32_2 %195 = OpVectorShuffle %194 %194 0 1 
                                       f32_2 %196 = OpFNegate %195 
                                       f32_2 %198 = OpFAdd %196 %197 
                                                      OpStore %193 %198 
                                       f32_4 %200 = OpLoad %9 
                                       f32_2 %201 = OpVectorShuffle %200 %200 0 1 
                                       f32_2 %204 = OpExtInst %1 37 %201 %203 
                                       f32_4 %205 = OpLoad %199 
                                       f32_4 %206 = OpVectorShuffle %205 %204 4 5 2 3 
                                                      OpStore %199 %206 
                                       f32_4 %207 = OpLoad %199 
                                       f32_2 %208 = OpVectorShuffle %207 %207 0 1 
                                       f32_2 %209 = OpFNegate %208 
                                       f32_4 %210 = OpLoad %199 
                                       f32_2 %211 = OpVectorShuffle %210 %210 0 1 
                                       f32_2 %212 = OpFMul %209 %211 
                                       f32_2 %213 = OpLoad %193 
                                       f32_2 %214 = OpFAdd %212 %213 
                                                      OpStore %193 %214 
                                       f32_2 %215 = OpLoad %193 
                                       f32_2 %217 = OpFAdd %215 %216 
                                                      OpStore %193 %217 
                                       f32_2 %218 = OpLoad %193 
                                       f32_2 %221 = OpFMul %218 %220 
                                       f32_4 %222 = OpLoad %199 
                                       f32_4 %223 = OpVectorShuffle %222 %221 4 5 2 3 
                                                      OpStore %199 %223 
                                Private f32* %225 = OpAccessChain %199 %27 
                                         f32 %226 = OpLoad %225 
                                Private f32* %228 = OpAccessChain %224 %227 
                                                      OpStore %228 %226 
                                       f32_4 %229 = OpLoad %9 
                                       f32_2 %230 = OpVectorShuffle %229 %229 0 1 
                                       f32_2 %231 = OpExtInst %1 40 %230 %203 
                                                      OpStore %193 %231 
                                       f32_4 %233 = OpLoad %9 
                                       f32_4 %234 = OpVectorShuffle %233 %233 0 0 1 1 
                                       f32_4 %236 = OpFAdd %234 %235 
                                                      OpStore %232 %236 
                                       f32_2 %237 = OpLoad %193 
                                       f32_2 %238 = OpFNegate %237 
                                       f32_2 %239 = OpLoad %193 
                                       f32_2 %240 = OpFMul %238 %239 
                                       f32_4 %241 = OpLoad %232 
                                       f32_2 %242 = OpVectorShuffle %241 %241 1 3 
                                       f32_2 %243 = OpFAdd %240 %242 
                                                      OpStore %193 %243 
                                       f32_4 %244 = OpLoad %232 
                                       f32_4 %245 = OpVectorShuffle %244 %244 0 0 2 2 
                                       f32_4 %246 = OpLoad %232 
                                       f32_4 %247 = OpVectorShuffle %246 %246 0 0 2 2 
                                       f32_4 %248 = OpFMul %245 %247 
                                                      OpStore %232 %248 
                                       f32_2 %249 = OpLoad %193 
                                       f32_2 %250 = OpFAdd %249 %216 
                                                      OpStore %193 %250 
                                Private f32* %252 = OpAccessChain %193 %27 
                                         f32 %253 = OpLoad %252 
                                         f32 %254 = OpFMul %253 %219 
                                Private f32* %255 = OpAccessChain %251 %36 
                                                      OpStore %255 %254 
                                Private f32* %257 = OpAccessChain %193 %227 
                                         f32 %258 = OpLoad %257 
                                         f32 %259 = OpFMul %258 %219 
                                Private f32* %260 = OpAccessChain %256 %36 
                                                      OpStore %260 %259 
                                       f32_4 %261 = OpLoad %232 
                                       f32_2 %262 = OpVectorShuffle %261 %261 0 2 
                                       f32_2 %263 = OpFMul %262 %171 
                                       f32_4 %264 = OpLoad %9 
                                       f32_2 %265 = OpVectorShuffle %264 %264 0 1 
                                       f32_2 %266 = OpFNegate %265 
                                       f32_2 %267 = OpFAdd %263 %266 
                                                      OpStore %193 %267 
                                       f32_4 %268 = OpLoad %232 
                                       f32_2 %269 = OpVectorShuffle %268 %268 3 1 
                                       f32_2 %272 = OpFMul %269 %271 
                                       f32_4 %273 = OpLoad %224 
                                       f32_4 %274 = OpVectorShuffle %273 %272 0 1 4 5 
                                                      OpStore %224 %274 
                                       f32_2 %275 = OpLoad %193 
                                       f32_2 %276 = OpVectorShuffle %275 %275 1 0 
                                       f32_2 %277 = OpFMul %276 %220 
                                       f32_4 %278 = OpLoad %256 
                                       f32_4 %279 = OpVectorShuffle %278 %277 4 5 2 3 
                                                      OpStore %256 %279 
                                Private f32* %280 = OpAccessChain %256 %227 
                                         f32 %281 = OpLoad %280 
                                Private f32* %282 = OpAccessChain %251 %27 
                                                      OpStore %282 %281 
                                Private f32* %283 = OpAccessChain %224 %36 
                                         f32 %284 = OpLoad %283 
                                Private f32* %286 = OpAccessChain %199 %285 
                                                      OpStore %286 %284 
                                       f32_4 %287 = OpLoad %9 
                                       f32_2 %288 = OpVectorShuffle %287 %287 0 0 
                                       f32_2 %291 = OpFMul %288 %290 
                                       f32_2 %294 = OpFAdd %291 %293 
                                       f32_4 %295 = OpLoad %251 
                                       f32_4 %296 = OpVectorShuffle %295 %294 0 4 2 5 
                                                      OpStore %251 %296 
                                       f32_4 %297 = OpLoad %9 
                                       f32_2 %298 = OpVectorShuffle %297 %297 0 0 
                                       f32_2 %299 = OpFMul %298 %290 
                                       f32_2 %301 = OpFAdd %299 %300 
                                       f32_4 %302 = OpLoad %224 
                                       f32_4 %303 = OpVectorShuffle %302 %301 4 1 5 3 
                                                      OpStore %224 %303 
                                       f32_4 %304 = OpLoad %224 
                                       f32_4 %305 = OpLoad %251 
                                       f32_4 %306 = OpFAdd %304 %305 
                                                      OpStore %232 %306 
                                       f32_4 %307 = OpLoad %224 
                                       f32_4 %308 = OpLoad %232 
                                       f32_4 %309 = OpFDiv %307 %308 
                                                      OpStore %224 %309 
                                       f32_4 %310 = OpLoad %224 
                                       f32_4 %315 = OpFAdd %310 %314 
                                                      OpStore %224 %315 
                                       f32_4 %316 = OpLoad %224 
                                       f32_4 %317 = OpVectorShuffle %316 %316 3 0 1 2 
                              Uniform f32_4* %318 = OpAccessChain %63 %165 
                                       f32_4 %319 = OpLoad %318 
                                       f32_4 %320 = OpVectorShuffle %319 %319 0 0 0 0 
                                       f32_4 %321 = OpFMul %317 %320 
                                                      OpStore %224 %321 
                                       f32_4 %322 = OpLoad %224 
                                       f32_3 %323 = OpVectorShuffle %322 %322 1 2 3 
                                       f32_4 %324 = OpLoad %251 
                                       f32_4 %325 = OpVectorShuffle %324 %323 4 1 5 6 
                                                      OpStore %251 %325 
                                       f32_4 %326 = OpLoad %9 
                                       f32_2 %327 = OpVectorShuffle %326 %326 1 1 
                                       f32_2 %328 = OpFMul %327 %290 
                                       f32_2 %329 = OpFAdd %328 %293 
                                       f32_4 %330 = OpLoad %256 
                                       f32_4 %331 = OpVectorShuffle %330 %329 0 4 2 5 
                                                      OpStore %256 %331 
                                       f32_4 %332 = OpLoad %9 
                                       f32_2 %333 = OpVectorShuffle %332 %332 1 1 
                                       f32_2 %334 = OpFMul %333 %290 
                                       f32_2 %335 = OpFAdd %334 %300 
                                       f32_4 %336 = OpLoad %199 
                                       f32_4 %337 = OpVectorShuffle %336 %335 4 1 5 3 
                                                      OpStore %199 %337 
                                       f32_4 %338 = OpLoad %199 
                                       f32_4 %339 = OpLoad %256 
                                       f32_4 %340 = OpFAdd %338 %339 
                                                      OpStore %256 %340 
                                       f32_4 %341 = OpLoad %199 
                                       f32_4 %342 = OpLoad %256 
                                       f32_4 %343 = OpFDiv %341 %342 
                                                      OpStore %199 %343 
                                       f32_4 %344 = OpLoad %199 
                                       f32_4 %345 = OpFAdd %344 %314 
                                                      OpStore %199 %345 
                                       f32_4 %346 = OpLoad %199 
                                       f32_4 %347 = OpVectorShuffle %346 %346 0 3 1 2 
                              Uniform f32_4* %348 = OpAccessChain %63 %165 
                                       f32_4 %349 = OpLoad %348 
                                       f32_4 %350 = OpVectorShuffle %349 %349 1 1 1 1 
                                       f32_4 %351 = OpFMul %347 %350 
                                                      OpStore %199 %351 
                                Private f32* %352 = OpAccessChain %199 %27 
                                         f32 %353 = OpLoad %352 
                                Private f32* %354 = OpAccessChain %251 %227 
                                                      OpStore %354 %353 
                                       f32_4 %356 = OpLoad %53 
                                       f32_4 %357 = OpVectorShuffle %356 %356 0 1 0 1 
                              Uniform f32_4* %358 = OpAccessChain %63 %165 
                                       f32_4 %359 = OpLoad %358 
                                       f32_4 %360 = OpVectorShuffle %359 %359 0 1 0 1 
                                       f32_4 %361 = OpFMul %357 %360 
                                       f32_4 %362 = OpLoad %251 
                                       f32_4 %363 = OpVectorShuffle %362 %362 0 1 2 1 
                                       f32_4 %364 = OpFAdd %361 %363 
                                                      OpStore %355 %364 
                                       f32_4 %367 = OpLoad %355 
                                       f32_2 %368 = OpVectorShuffle %367 %367 2 3 
                                Private f32* %369 = OpAccessChain %9 %36 
                                         f32 %370 = OpLoad %369 
                                         f32 %371 = OpCompositeExtract %368 0 
                                         f32 %372 = OpCompositeExtract %368 1 
                                       f32_3 %373 = OpCompositeConstruct %371 %372 %370 
                                                      OpStore %366 %373 
                         read_only Texture2D %375 = OpLoad %374 
                                     sampler %377 = OpLoad %376 
                  read_only Texture2DSampled %380 = OpSampledImage %375 %377 
                                       f32_3 %381 = OpLoad %366 
                                         f32 %382 = OpCompositeExtract %381 2 
                                         f32 %383 = OpImageSampleDrefExplicitLod %380 %381 %382 Lod %6 
                                Private f32* %384 = OpAccessChain %9 %27 
                                                      OpStore %384 %383 
                                       f32_4 %386 = OpLoad %355 
                                       f32_2 %387 = OpVectorShuffle %386 %386 0 1 
                                Private f32* %388 = OpAccessChain %9 %36 
                                         f32 %389 = OpLoad %388 
                                         f32 %390 = OpCompositeExtract %387 0 
                                         f32 %391 = OpCompositeExtract %387 1 
                                       f32_3 %392 = OpCompositeConstruct %390 %391 %389 
                                                      OpStore %385 %392 
                         read_only Texture2D %395 = OpLoad %374 
                                     sampler %396 = OpLoad %376 
                  read_only Texture2DSampled %397 = OpSampledImage %395 %396 
                                       f32_3 %398 = OpLoad %385 
                                         f32 %399 = OpCompositeExtract %398 2 
                                         f32 %400 = OpImageSampleDrefExplicitLod %397 %398 %399 Lod %6 
                                Private f32* %401 = OpAccessChain %394 %27 
                                                      OpStore %401 %400 
                                       f32_4 %402 = OpLoad %232 
                                       f32_4 %403 = OpLoad %256 
                                       f32_4 %404 = OpVectorShuffle %403 %403 0 0 0 0 
                                       f32_4 %405 = OpFMul %402 %404 
                                                      OpStore %355 %405 
                                Private f32* %406 = OpAccessChain %9 %27 
                                         f32 %407 = OpLoad %406 
                                Private f32* %408 = OpAccessChain %355 %227 
                                         f32 %409 = OpLoad %408 
                                         f32 %410 = OpFMul %407 %409 
                                Private f32* %411 = OpAccessChain %9 %27 
                                                      OpStore %411 %410 
                                Private f32* %412 = OpAccessChain %355 %27 
                                         f32 %413 = OpLoad %412 
                                Private f32* %414 = OpAccessChain %394 %27 
                                         f32 %415 = OpLoad %414 
                                         f32 %416 = OpFMul %413 %415 
                                Private f32* %417 = OpAccessChain %9 %27 
                                         f32 %418 = OpLoad %417 
                                         f32 %419 = OpFAdd %416 %418 
                                Private f32* %420 = OpAccessChain %9 %27 
                                                      OpStore %420 %419 
                                       f32_4 %421 = OpLoad %53 
                                       f32_2 %422 = OpVectorShuffle %421 %421 0 1 
                              Uniform f32_4* %423 = OpAccessChain %63 %165 
                                       f32_4 %424 = OpLoad %423 
                                       f32_2 %425 = OpVectorShuffle %424 %424 0 1 
                                       f32_2 %426 = OpFMul %422 %425 
                                       f32_4 %427 = OpLoad %251 
                                       f32_2 %428 = OpVectorShuffle %427 %427 3 1 
                                       f32_2 %429 = OpFAdd %426 %428 
                                       f32_3 %430 = OpLoad %394 
                                       f32_3 %431 = OpVectorShuffle %430 %429 3 1 4 
                                                      OpStore %394 %431 
                                Private f32* %432 = OpAccessChain %251 %227 
                                         f32 %433 = OpLoad %432 
                                Private f32* %434 = OpAccessChain %224 %227 
                                                      OpStore %434 %433 
                                       f32_4 %435 = OpLoad %53 
                                       f32_2 %436 = OpVectorShuffle %435 %435 0 1 
                              Uniform f32_4* %437 = OpAccessChain %63 %165 
                                       f32_4 %438 = OpLoad %437 
                                       f32_2 %439 = OpVectorShuffle %438 %438 0 1 
                                       f32_2 %440 = OpFMul %436 %439 
                                       f32_4 %441 = OpLoad %224 
                                       f32_2 %442 = OpVectorShuffle %441 %441 0 1 
                                       f32_2 %443 = OpFAdd %440 %442 
                                                      OpStore %193 %443 
                                       f32_2 %445 = OpLoad %193 
                                Private f32* %446 = OpAccessChain %9 %36 
                                         f32 %447 = OpLoad %446 
                                         f32 %448 = OpCompositeExtract %445 0 
                                         f32 %449 = OpCompositeExtract %445 1 
                                       f32_3 %450 = OpCompositeConstruct %448 %449 %447 
                                                      OpStore %444 %450 
                         read_only Texture2D %451 = OpLoad %374 
                                     sampler %452 = OpLoad %376 
                  read_only Texture2DSampled %453 = OpSampledImage %451 %452 
                                       f32_3 %454 = OpLoad %444 
                                         f32 %455 = OpCompositeExtract %454 2 
                                         f32 %456 = OpImageSampleDrefExplicitLod %453 %454 %455 Lod %6 
                                Private f32* %457 = OpAccessChain %193 %27 
                                                      OpStore %457 %456 
                                       f32_3 %459 = OpLoad %394 
                                       f32_2 %460 = OpVectorShuffle %459 %459 0 2 
                                Private f32* %461 = OpAccessChain %9 %36 
                                         f32 %462 = OpLoad %461 
                                         f32 %463 = OpCompositeExtract %460 0 
                                         f32 %464 = OpCompositeExtract %460 1 
                                       f32_3 %465 = OpCompositeConstruct %463 %464 %462 
                                                      OpStore %458 %465 
                         read_only Texture2D %466 = OpLoad %374 
                                     sampler %467 = OpLoad %376 
                  read_only Texture2DSampled %468 = OpSampledImage %466 %467 
                                       f32_3 %469 = OpLoad %458 
                                         f32 %470 = OpCompositeExtract %469 2 
                                         f32 %471 = OpImageSampleDrefExplicitLod %468 %469 %470 Lod %6 
                                Private f32* %472 = OpAccessChain %394 %27 
                                                      OpStore %472 %471 
                                Private f32* %473 = OpAccessChain %355 %36 
                                         f32 %474 = OpLoad %473 
                                Private f32* %475 = OpAccessChain %394 %27 
                                         f32 %476 = OpLoad %475 
                                         f32 %477 = OpFMul %474 %476 
                                Private f32* %478 = OpAccessChain %9 %27 
                                         f32 %479 = OpLoad %478 
                                         f32 %480 = OpFAdd %477 %479 
                                Private f32* %481 = OpAccessChain %9 %27 
                                                      OpStore %481 %480 
                                Private f32* %482 = OpAccessChain %355 %285 
                                         f32 %483 = OpLoad %482 
                                Private f32* %484 = OpAccessChain %193 %27 
                                         f32 %485 = OpLoad %484 
                                         f32 %486 = OpFMul %483 %485 
                                Private f32* %487 = OpAccessChain %9 %27 
                                         f32 %488 = OpLoad %487 
                                         f32 %489 = OpFAdd %486 %488 
                                Private f32* %490 = OpAccessChain %9 %27 
                                                      OpStore %490 %489 
                                Private f32* %491 = OpAccessChain %199 %36 
                                         f32 %492 = OpLoad %491 
                                Private f32* %493 = OpAccessChain %251 %227 
                                                      OpStore %493 %492 
                                       f32_4 %494 = OpLoad %53 
                                       f32_4 %495 = OpVectorShuffle %494 %494 0 1 0 1 
                              Uniform f32_4* %496 = OpAccessChain %63 %165 
                                       f32_4 %497 = OpLoad %496 
                                       f32_4 %498 = OpVectorShuffle %497 %497 0 1 0 1 
                                       f32_4 %499 = OpFMul %495 %498 
                                       f32_4 %500 = OpLoad %251 
                                       f32_4 %501 = OpVectorShuffle %500 %500 0 1 2 1 
                                       f32_4 %502 = OpFAdd %499 %501 
                                                      OpStore %355 %502 
                                       f32_4 %504 = OpLoad %355 
                                       f32_2 %505 = OpVectorShuffle %504 %504 0 1 
                                Private f32* %506 = OpAccessChain %9 %36 
                                         f32 %507 = OpLoad %506 
                                         f32 %508 = OpCompositeExtract %505 0 
                                         f32 %509 = OpCompositeExtract %505 1 
                                       f32_3 %510 = OpCompositeConstruct %508 %509 %507 
                                                      OpStore %503 %510 
                         read_only Texture2D %511 = OpLoad %374 
                                     sampler %512 = OpLoad %376 
                  read_only Texture2DSampled %513 = OpSampledImage %511 %512 
                                       f32_3 %514 = OpLoad %503 
                                         f32 %515 = OpCompositeExtract %514 2 
                                         f32 %516 = OpImageSampleDrefExplicitLod %513 %514 %515 Lod %6 
                                Private f32* %517 = OpAccessChain %394 %27 
                                                      OpStore %517 %516 
                                       f32_4 %519 = OpLoad %355 
                                       f32_2 %520 = OpVectorShuffle %519 %519 2 3 
                                Private f32* %521 = OpAccessChain %9 %36 
                                         f32 %522 = OpLoad %521 
                                         f32 %523 = OpCompositeExtract %520 0 
                                         f32 %524 = OpCompositeExtract %520 1 
                                       f32_3 %525 = OpCompositeConstruct %523 %524 %522 
                                                      OpStore %518 %525 
                         read_only Texture2D %527 = OpLoad %374 
                                     sampler %528 = OpLoad %376 
                  read_only Texture2DSampled %529 = OpSampledImage %527 %528 
                                       f32_3 %530 = OpLoad %518 
                                         f32 %531 = OpCompositeExtract %530 2 
                                         f32 %532 = OpImageSampleDrefExplicitLod %529 %530 %531 Lod %6 
                                                      OpStore %526 %532 
                                       f32_4 %533 = OpLoad %232 
                                       f32_4 %534 = OpLoad %256 
                                       f32_4 %535 = OpVectorShuffle %534 %534 1 1 1 1 
                                       f32_4 %536 = OpFMul %533 %535 
                                                      OpStore %355 %536 
                                Private f32* %537 = OpAccessChain %355 %27 
                                         f32 %538 = OpLoad %537 
                                Private f32* %539 = OpAccessChain %394 %27 
                                         f32 %540 = OpLoad %539 
                                         f32 %541 = OpFMul %538 %540 
                                Private f32* %542 = OpAccessChain %9 %27 
                                         f32 %543 = OpLoad %542 
                                         f32 %544 = OpFAdd %541 %543 
                                Private f32* %545 = OpAccessChain %9 %27 
                                                      OpStore %545 %544 
                                Private f32* %546 = OpAccessChain %355 %227 
                                         f32 %547 = OpLoad %546 
                                         f32 %548 = OpLoad %526 
                                         f32 %549 = OpFMul %547 %548 
                                Private f32* %550 = OpAccessChain %9 %27 
                                         f32 %551 = OpLoad %550 
                                         f32 %552 = OpFAdd %549 %551 
                                Private f32* %553 = OpAccessChain %9 %27 
                                                      OpStore %553 %552 
                                       f32_4 %554 = OpLoad %53 
                                       f32_2 %555 = OpVectorShuffle %554 %554 0 1 
                              Uniform f32_4* %556 = OpAccessChain %63 %165 
                                       f32_4 %557 = OpLoad %556 
                                       f32_2 %558 = OpVectorShuffle %557 %557 0 1 
                                       f32_2 %559 = OpFMul %555 %558 
                                       f32_4 %560 = OpLoad %251 
                                       f32_2 %561 = OpVectorShuffle %560 %560 3 1 
                                       f32_2 %562 = OpFAdd %559 %561 
                                       f32_3 %563 = OpLoad %394 
                                       f32_3 %564 = OpVectorShuffle %563 %562 3 1 4 
                                                      OpStore %394 %564 
                                Private f32* %565 = OpAccessChain %251 %227 
                                         f32 %566 = OpLoad %565 
                                Private f32* %567 = OpAccessChain %224 %36 
                                                      OpStore %567 %566 
                                       f32_4 %568 = OpLoad %53 
                                       f32_2 %569 = OpVectorShuffle %568 %568 0 1 
                              Uniform f32_4* %570 = OpAccessChain %63 %165 
                                       f32_4 %571 = OpLoad %570 
                                       f32_2 %572 = OpVectorShuffle %571 %571 0 1 
                                       f32_2 %573 = OpFMul %569 %572 
                                       f32_4 %574 = OpLoad %224 
                                       f32_2 %575 = OpVectorShuffle %574 %574 0 2 
                                       f32_2 %576 = OpFAdd %573 %575 
                                                      OpStore %193 %576 
                                       f32_2 %578 = OpLoad %193 
                                Private f32* %579 = OpAccessChain %9 %36 
                                         f32 %580 = OpLoad %579 
                                         f32 %581 = OpCompositeExtract %578 0 
                                         f32 %582 = OpCompositeExtract %578 1 
                                       f32_3 %583 = OpCompositeConstruct %581 %582 %580 
                                                      OpStore %577 %583 
                         read_only Texture2D %584 = OpLoad %374 
                                     sampler %585 = OpLoad %376 
                  read_only Texture2DSampled %586 = OpSampledImage %584 %585 
                                       f32_3 %587 = OpLoad %577 
                                         f32 %588 = OpCompositeExtract %587 2 
                                         f32 %589 = OpImageSampleDrefExplicitLod %586 %587 %588 Lod %6 
                                Private f32* %590 = OpAccessChain %193 %27 
                                                      OpStore %590 %589 
                                       f32_3 %592 = OpLoad %394 
                                       f32_2 %593 = OpVectorShuffle %592 %592 0 2 
                                Private f32* %594 = OpAccessChain %9 %36 
                                         f32 %595 = OpLoad %594 
                                         f32 %596 = OpCompositeExtract %593 0 
                                         f32 %597 = OpCompositeExtract %593 1 
                                       f32_3 %598 = OpCompositeConstruct %596 %597 %595 
                                                      OpStore %591 %598 
                         read_only Texture2D %599 = OpLoad %374 
                                     sampler %600 = OpLoad %376 
                  read_only Texture2DSampled %601 = OpSampledImage %599 %600 
                                       f32_3 %602 = OpLoad %591 
                                         f32 %603 = OpCompositeExtract %602 2 
                                         f32 %604 = OpImageSampleDrefExplicitLod %601 %602 %603 Lod %6 
                                Private f32* %605 = OpAccessChain %394 %27 
                                                      OpStore %605 %604 
                                Private f32* %606 = OpAccessChain %355 %36 
                                         f32 %607 = OpLoad %606 
                                Private f32* %608 = OpAccessChain %394 %27 
                                         f32 %609 = OpLoad %608 
                                         f32 %610 = OpFMul %607 %609 
                                Private f32* %611 = OpAccessChain %9 %27 
                                         f32 %612 = OpLoad %611 
                                         f32 %613 = OpFAdd %610 %612 
                                Private f32* %614 = OpAccessChain %9 %27 
                                                      OpStore %614 %613 
                                Private f32* %615 = OpAccessChain %355 %285 
                                         f32 %616 = OpLoad %615 
                                Private f32* %617 = OpAccessChain %193 %27 
                                         f32 %618 = OpLoad %617 
                                         f32 %619 = OpFMul %616 %618 
                                Private f32* %620 = OpAccessChain %9 %27 
                                         f32 %621 = OpLoad %620 
                                         f32 %622 = OpFAdd %619 %621 
                                Private f32* %623 = OpAccessChain %9 %27 
                                                      OpStore %623 %622 
                                Private f32* %624 = OpAccessChain %199 %285 
                                         f32 %625 = OpLoad %624 
                                Private f32* %626 = OpAccessChain %251 %227 
                                                      OpStore %626 %625 
                                       f32_4 %627 = OpLoad %53 
                                       f32_4 %628 = OpVectorShuffle %627 %627 0 1 0 1 
                              Uniform f32_4* %629 = OpAccessChain %63 %165 
                                       f32_4 %630 = OpLoad %629 
                                       f32_4 %631 = OpVectorShuffle %630 %630 0 1 0 1 
                                       f32_4 %632 = OpFMul %628 %631 
                                       f32_4 %633 = OpLoad %251 
                                       f32_4 %634 = OpVectorShuffle %633 %633 0 1 2 1 
                                       f32_4 %635 = OpFAdd %632 %634 
                                                      OpStore %355 %635 
                                       f32_4 %637 = OpLoad %355 
                                       f32_2 %638 = OpVectorShuffle %637 %637 0 1 
                                Private f32* %639 = OpAccessChain %9 %36 
                                         f32 %640 = OpLoad %639 
                                         f32 %641 = OpCompositeExtract %638 0 
                                         f32 %642 = OpCompositeExtract %638 1 
                                       f32_3 %643 = OpCompositeConstruct %641 %642 %640 
                                                      OpStore %636 %643 
                         read_only Texture2D %644 = OpLoad %374 
                                     sampler %645 = OpLoad %376 
                  read_only Texture2DSampled %646 = OpSampledImage %644 %645 
                                       f32_3 %647 = OpLoad %636 
                                         f32 %648 = OpCompositeExtract %647 2 
                                         f32 %649 = OpImageSampleDrefExplicitLod %646 %647 %648 Lod %6 
                                Private f32* %650 = OpAccessChain %394 %27 
                                                      OpStore %650 %649 
                                       f32_4 %652 = OpLoad %355 
                                       f32_2 %653 = OpVectorShuffle %652 %652 2 3 
                                Private f32* %654 = OpAccessChain %9 %36 
                                         f32 %655 = OpLoad %654 
                                         f32 %656 = OpCompositeExtract %653 0 
                                         f32 %657 = OpCompositeExtract %653 1 
                                       f32_3 %658 = OpCompositeConstruct %656 %657 %655 
                                                      OpStore %651 %658 
                         read_only Texture2D %659 = OpLoad %374 
                                     sampler %660 = OpLoad %376 
                  read_only Texture2DSampled %661 = OpSampledImage %659 %660 
                                       f32_3 %662 = OpLoad %651 
                                         f32 %663 = OpCompositeExtract %662 2 
                                         f32 %664 = OpImageSampleDrefExplicitLod %661 %662 %663 Lod %6 
                                                      OpStore %526 %664 
                                       f32_4 %665 = OpLoad %232 
                                       f32_4 %666 = OpLoad %256 
                                       f32_4 %667 = OpVectorShuffle %666 %666 2 2 2 2 
                                       f32_4 %668 = OpFMul %665 %667 
                                                      OpStore %355 %668 
                                       f32_4 %669 = OpLoad %232 
                                       f32_4 %670 = OpLoad %256 
                                       f32_4 %671 = OpVectorShuffle %670 %670 3 3 3 3 
                                       f32_4 %672 = OpFMul %669 %671 
                                                      OpStore %232 %672 
                                Private f32* %673 = OpAccessChain %355 %27 
                                         f32 %674 = OpLoad %673 
                                Private f32* %675 = OpAccessChain %394 %27 
                                         f32 %676 = OpLoad %675 
                                         f32 %677 = OpFMul %674 %676 
                                Private f32* %678 = OpAccessChain %9 %27 
                                         f32 %679 = OpLoad %678 
                                         f32 %680 = OpFAdd %677 %679 
                                Private f32* %681 = OpAccessChain %9 %27 
                                                      OpStore %681 %680 
                                Private f32* %682 = OpAccessChain %355 %227 
                                         f32 %683 = OpLoad %682 
                                         f32 %684 = OpLoad %526 
                                         f32 %685 = OpFMul %683 %684 
                                Private f32* %686 = OpAccessChain %9 %27 
                                         f32 %687 = OpLoad %686 
                                         f32 %688 = OpFAdd %685 %687 
                                Private f32* %689 = OpAccessChain %9 %27 
                                                      OpStore %689 %688 
                                       f32_4 %690 = OpLoad %53 
                                       f32_2 %691 = OpVectorShuffle %690 %690 0 1 
                              Uniform f32_4* %692 = OpAccessChain %63 %165 
                                       f32_4 %693 = OpLoad %692 
                                       f32_2 %694 = OpVectorShuffle %693 %693 0 1 
                                       f32_2 %695 = OpFMul %691 %694 
                                       f32_4 %696 = OpLoad %251 
                                       f32_2 %697 = OpVectorShuffle %696 %696 3 1 
                                       f32_2 %698 = OpFAdd %695 %697 
                                       f32_3 %699 = OpLoad %394 
                                       f32_3 %700 = OpVectorShuffle %699 %698 3 1 4 
                                                      OpStore %394 %700 
                                       f32_4 %701 = OpLoad %251 
                                       f32_3 %702 = OpVectorShuffle %701 %701 0 2 3 
                                       f32_4 %703 = OpLoad %199 
                                       f32_4 %704 = OpVectorShuffle %703 %702 4 1 5 6 
                                                      OpStore %199 %704 
                                Private f32* %705 = OpAccessChain %251 %227 
                                         f32 %706 = OpLoad %705 
                                Private f32* %707 = OpAccessChain %224 %285 
                                                      OpStore %707 %706 
                                       f32_4 %708 = OpLoad %53 
                                       f32_2 %709 = OpVectorShuffle %708 %708 0 1 
                              Uniform f32_4* %710 = OpAccessChain %63 %165 
                                       f32_4 %711 = OpLoad %710 
                                       f32_2 %712 = OpVectorShuffle %711 %711 0 1 
                                       f32_2 %713 = OpFMul %709 %712 
                                       f32_4 %714 = OpLoad %224 
                                       f32_2 %715 = OpVectorShuffle %714 %714 0 3 
                                       f32_2 %716 = OpFAdd %713 %715 
                                                      OpStore %193 %716 
                                       f32_2 %718 = OpLoad %193 
                                Private f32* %719 = OpAccessChain %9 %36 
                                         f32 %720 = OpLoad %719 
                                         f32 %721 = OpCompositeExtract %718 0 
                                         f32 %722 = OpCompositeExtract %718 1 
                                       f32_3 %723 = OpCompositeConstruct %721 %722 %720 
                                                      OpStore %717 %723 
                         read_only Texture2D %724 = OpLoad %374 
                                     sampler %725 = OpLoad %376 
                  read_only Texture2DSampled %726 = OpSampledImage %724 %725 
                                       f32_3 %727 = OpLoad %717 
                                         f32 %728 = OpCompositeExtract %727 2 
                                         f32 %729 = OpImageSampleDrefExplicitLod %726 %727 %728 Lod %6 
                                Private f32* %730 = OpAccessChain %193 %27 
                                                      OpStore %730 %729 
                                       f32_3 %732 = OpLoad %394 
                                       f32_2 %733 = OpVectorShuffle %732 %732 0 2 
                                Private f32* %734 = OpAccessChain %9 %36 
                                         f32 %735 = OpLoad %734 
                                         f32 %736 = OpCompositeExtract %733 0 
                                         f32 %737 = OpCompositeExtract %733 1 
                                       f32_3 %738 = OpCompositeConstruct %736 %737 %735 
                                                      OpStore %731 %738 
                         read_only Texture2D %739 = OpLoad %374 
                                     sampler %740 = OpLoad %376 
                  read_only Texture2DSampled %741 = OpSampledImage %739 %740 
                                       f32_3 %742 = OpLoad %731 
                                         f32 %743 = OpCompositeExtract %742 2 
                                         f32 %744 = OpImageSampleDrefExplicitLod %741 %742 %743 Lod %6 
                                Private f32* %745 = OpAccessChain %394 %27 
                                                      OpStore %745 %744 
                                Private f32* %746 = OpAccessChain %355 %36 
                                         f32 %747 = OpLoad %746 
                                Private f32* %748 = OpAccessChain %394 %27 
                                         f32 %749 = OpLoad %748 
                                         f32 %750 = OpFMul %747 %749 
                                Private f32* %751 = OpAccessChain %9 %27 
                                         f32 %752 = OpLoad %751 
                                         f32 %753 = OpFAdd %750 %752 
                                Private f32* %754 = OpAccessChain %9 %27 
                                                      OpStore %754 %753 
                                Private f32* %755 = OpAccessChain %355 %285 
                                         f32 %756 = OpLoad %755 
                                Private f32* %757 = OpAccessChain %193 %27 
                                         f32 %758 = OpLoad %757 
                                         f32 %759 = OpFMul %756 %758 
                                Private f32* %760 = OpAccessChain %9 %27 
                                         f32 %761 = OpLoad %760 
                                         f32 %762 = OpFAdd %759 %761 
                                Private f32* %763 = OpAccessChain %9 %27 
                                                      OpStore %763 %762 
                                       f32_4 %764 = OpLoad %53 
                                       f32_4 %765 = OpVectorShuffle %764 %764 0 1 0 1 
                              Uniform f32_4* %766 = OpAccessChain %63 %165 
                                       f32_4 %767 = OpLoad %766 
                                       f32_4 %768 = OpVectorShuffle %767 %767 0 1 0 1 
                                       f32_4 %769 = OpFMul %765 %768 
                                       f32_4 %770 = OpLoad %199 
                                       f32_4 %771 = OpVectorShuffle %770 %770 0 1 2 1 
                                       f32_4 %772 = OpFAdd %769 %771 
                                                      OpStore %251 %772 
                                       f32_4 %773 = OpLoad %53 
                                       f32_2 %774 = OpVectorShuffle %773 %773 0 1 
                              Uniform f32_4* %775 = OpAccessChain %63 %165 
                                       f32_4 %776 = OpLoad %775 
                                       f32_2 %777 = OpVectorShuffle %776 %776 0 1 
                                       f32_2 %778 = OpFMul %774 %777 
                                       f32_4 %779 = OpLoad %199 
                                       f32_2 %780 = OpVectorShuffle %779 %779 3 1 
                                       f32_2 %781 = OpFAdd %778 %780 
                                       f32_3 %782 = OpLoad %394 
                                       f32_3 %783 = OpVectorShuffle %782 %781 3 1 4 
                                                      OpStore %394 %783 
                                Private f32* %784 = OpAccessChain %199 %227 
                                         f32 %785 = OpLoad %784 
                                Private f32* %786 = OpAccessChain %224 %227 
                                                      OpStore %786 %785 
                                       f32_4 %787 = OpLoad %53 
                                       f32_2 %788 = OpVectorShuffle %787 %787 0 1 
                              Uniform f32_4* %789 = OpAccessChain %63 %165 
                                       f32_4 %790 = OpLoad %789 
                                       f32_2 %791 = OpVectorShuffle %790 %790 0 1 
                                       f32_2 %792 = OpFMul %788 %791 
                                       f32_4 %793 = OpLoad %224 
                                       f32_2 %794 = OpVectorShuffle %793 %793 0 1 
                                       f32_2 %795 = OpFAdd %792 %794 
                                       f32_4 %796 = OpLoad %53 
                                       f32_4 %797 = OpVectorShuffle %796 %795 4 5 2 3 
                                                      OpStore %53 %797 
                                       f32_4 %799 = OpLoad %53 
                                       f32_2 %800 = OpVectorShuffle %799 %799 0 1 
                                Private f32* %801 = OpAccessChain %9 %36 
                                         f32 %802 = OpLoad %801 
                                         f32 %803 = OpCompositeExtract %800 0 
                                         f32 %804 = OpCompositeExtract %800 1 
                                       f32_3 %805 = OpCompositeConstruct %803 %804 %802 
                                                      OpStore %798 %805 
                         read_only Texture2D %806 = OpLoad %374 
                                     sampler %807 = OpLoad %376 
                  read_only Texture2DSampled %808 = OpSampledImage %806 %807 
                                       f32_3 %809 = OpLoad %798 
                                         f32 %810 = OpCompositeExtract %809 2 
                                         f32 %811 = OpImageSampleDrefExplicitLod %808 %809 %810 Lod %6 
                                Private f32* %812 = OpAccessChain %53 %27 
                                                      OpStore %812 %811 
                                       f32_3 %814 = OpLoad %394 
                                       f32_2 %815 = OpVectorShuffle %814 %814 0 2 
                                Private f32* %816 = OpAccessChain %9 %36 
                                         f32 %817 = OpLoad %816 
                                         f32 %818 = OpCompositeExtract %815 0 
                                         f32 %819 = OpCompositeExtract %815 1 
                                       f32_3 %820 = OpCompositeConstruct %818 %819 %817 
                                                      OpStore %813 %820 
                         read_only Texture2D %821 = OpLoad %374 
                                     sampler %822 = OpLoad %376 
                  read_only Texture2DSampled %823 = OpSampledImage %821 %822 
                                       f32_3 %824 = OpLoad %813 
                                         f32 %825 = OpCompositeExtract %824 2 
                                         f32 %826 = OpImageSampleDrefExplicitLod %823 %824 %825 Lod %6 
                                Private f32* %827 = OpAccessChain %394 %27 
                                                      OpStore %827 %826 
                                       f32_4 %829 = OpLoad %251 
                                       f32_2 %830 = OpVectorShuffle %829 %829 0 1 
                                Private f32* %831 = OpAccessChain %9 %36 
                                         f32 %832 = OpLoad %831 
                                         f32 %833 = OpCompositeExtract %830 0 
                                         f32 %834 = OpCompositeExtract %830 1 
                                       f32_3 %835 = OpCompositeConstruct %833 %834 %832 
                                                      OpStore %828 %835 
                         read_only Texture2D %836 = OpLoad %374 
                                     sampler %837 = OpLoad %376 
                  read_only Texture2DSampled %838 = OpSampledImage %836 %837 
                                       f32_3 %839 = OpLoad %828 
                                         f32 %840 = OpCompositeExtract %839 2 
                                         f32 %841 = OpImageSampleDrefExplicitLod %838 %839 %840 Lod %6 
                                                      OpStore %526 %841 
                                       f32_4 %843 = OpLoad %251 
                                       f32_2 %844 = OpVectorShuffle %843 %843 2 3 
                                Private f32* %845 = OpAccessChain %9 %36 
                                         f32 %846 = OpLoad %845 
                                         f32 %847 = OpCompositeExtract %844 0 
                                         f32 %848 = OpCompositeExtract %844 1 
                                       f32_3 %849 = OpCompositeConstruct %847 %848 %846 
                                                      OpStore %842 %849 
                         read_only Texture2D %851 = OpLoad %374 
                                     sampler %852 = OpLoad %376 
                  read_only Texture2DSampled %853 = OpSampledImage %851 %852 
                                       f32_3 %854 = OpLoad %842 
                                         f32 %855 = OpCompositeExtract %854 2 
                                         f32 %856 = OpImageSampleDrefExplicitLod %853 %854 %855 Lod %6 
                                                      OpStore %850 %856 
                                Private f32* %857 = OpAccessChain %232 %27 
                                         f32 %858 = OpLoad %857 
                                         f32 %859 = OpLoad %526 
                                         f32 %860 = OpFMul %858 %859 
                                Private f32* %861 = OpAccessChain %9 %27 
                                         f32 %862 = OpLoad %861 
                                         f32 %863 = OpFAdd %860 %862 
                                Private f32* %864 = OpAccessChain %9 %27 
                                                      OpStore %864 %863 
                                Private f32* %865 = OpAccessChain %232 %227 
                                         f32 %866 = OpLoad %865 
                                         f32 %867 = OpLoad %850 
                                         f32 %868 = OpFMul %866 %867 
                                Private f32* %869 = OpAccessChain %9 %27 
                                         f32 %870 = OpLoad %869 
                                         f32 %871 = OpFAdd %868 %870 
                                Private f32* %872 = OpAccessChain %9 %27 
                                                      OpStore %872 %871 
                                Private f32* %873 = OpAccessChain %232 %36 
                                         f32 %874 = OpLoad %873 
                                Private f32* %875 = OpAccessChain %394 %27 
                                         f32 %876 = OpLoad %875 
                                         f32 %877 = OpFMul %874 %876 
                                Private f32* %878 = OpAccessChain %9 %27 
                                         f32 %879 = OpLoad %878 
                                         f32 %880 = OpFAdd %877 %879 
                                Private f32* %881 = OpAccessChain %9 %27 
                                                      OpStore %881 %880 
                                Private f32* %882 = OpAccessChain %232 %285 
                                         f32 %883 = OpLoad %882 
                                Private f32* %884 = OpAccessChain %53 %27 
                                         f32 %885 = OpLoad %884 
                                         f32 %886 = OpFMul %883 %885 
                                Private f32* %887 = OpAccessChain %9 %27 
                                         f32 %888 = OpLoad %887 
                                         f32 %889 = OpFAdd %886 %888 
                                Private f32* %890 = OpAccessChain %9 %27 
                                                      OpStore %890 %889 
                                Uniform f32* %892 = OpAccessChain %63 %87 %27 
                                         f32 %893 = OpLoad %892 
                                         f32 %894 = OpFNegate %893 
                                         f32 %895 = OpFAdd %894 %34 
                                Private f32* %896 = OpAccessChain %394 %27 
                                                      OpStore %896 %895 
                                       f32_4 %899 = OpLoad %9 
                                       f32_4 %900 = OpVectorShuffle %899 %899 0 0 0 0 
                                       f32_3 %901 = OpLoad %394 
                                       f32_4 %902 = OpVectorShuffle %901 %901 0 0 0 0 
                                       f32_4 %903 = OpFMul %900 %902 
                              Uniform f32_4* %904 = OpAccessChain %63 %87 
                                       f32_4 %905 = OpLoad %904 
                                       f32_4 %906 = OpVectorShuffle %905 %905 0 0 0 0 
                                       f32_4 %907 = OpFAdd %903 %906 
                                                      OpStore %898 %907 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "SHADOWS_SINGLE_CASCADE" "SHADOWS_SPLIT_SPHERES" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "SHADOWS_SINGLE_CASCADE" "SHADOWS_SPLIT_SPHERES" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraInvProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in  vec4 in_POSITION0;
in  vec2 in_TEXCOORD0;
in  vec3 in_TEXCOORD1;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_CameraInvProjection[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_CameraInvProjection[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    vs_TEXCOORD0.zw = u_xlat1.zz + u_xlat1.xw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = in_TEXCOORD1.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-hlslcc_mtx4x4unity_CameraInvProjection[2].xyz);
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[2].xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;
    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;
    u_xlat1.w = (-u_xlat1.z);
    vs_TEXCOORD2.xyz = u_xlat1.xyw;
    u_xlat0.w = (-u_xlat0.z);
    vs_TEXCOORD3.xyz = u_xlat0.xyw;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_CameraInvProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	vec4 _LightShadowData;
uniform 	vec4 _ShadowMapTexture_TexelSize;
UNITY_LOCATION(0) uniform  sampler2D _CameraDepthTexture;
UNITY_LOCATION(1) uniform  sampler2D _ShadowMapTexture;
UNITY_LOCATION(2) uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
in  vec4 vs_TEXCOORD0;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
vec4 u_xlat6;
vec4 u_xlat7;
vec3 u_xlat8;
float u_xlat16;
vec2 u_xlat17;
float u_xlat24;
void main()
{
    u_xlat0 = texture(_CameraDepthTexture, vs_TEXCOORD0.xy).yzxw;
    u_xlat0.xy = vs_TEXCOORD0.zw;
    u_xlat0.xyz = u_xlat0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_CameraInvProjection[1];
    u_xlat1 = hlslcc_mtx4x4unity_CameraInvProjection[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_CameraInvProjection[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_CameraInvProjection[3];
    u_xlat0.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_CameraToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_CameraToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_CameraToWorld[2] * (-u_xlat0.zzzz) + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_CameraToWorld[3];
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xy = u_xlat0.xy * _ShadowMapTexture_TexelSize.zw + vec2(0.5, 0.5);
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlat0.xy = u_xlat0.xy * _ShadowMapTexture_TexelSize.zw + (-u_xlat1.xy);
    u_xlat17.xy = (-u_xlat0.xy) + vec2(1.0, 1.0);
    u_xlat2.xy = min(u_xlat0.xy, vec2(0.0, 0.0));
    u_xlat17.xy = (-u_xlat2.xy) * u_xlat2.xy + u_xlat17.xy;
    u_xlat17.xy = u_xlat17.xy + vec2(2.0, 2.0);
    u_xlat2.xy = u_xlat17.xy * vec2(0.0816320032, 0.0816320032);
    u_xlat3.y = u_xlat2.x;
    u_xlat17.xy = max(u_xlat0.xy, vec2(0.0, 0.0));
    u_xlat4 = u_xlat0.xxyy + vec4(0.5, 1.0, 0.5, 1.0);
    u_xlat17.xy = (-u_xlat17.xy) * u_xlat17.xy + u_xlat4.yw;
    u_xlat4 = u_xlat4.xxzz * u_xlat4.xxzz;
    u_xlat17.xy = u_xlat17.xy + vec2(2.0, 2.0);
    u_xlat5.z = u_xlat17.x * 0.0816320032;
    u_xlat6.z = u_xlat17.y * 0.0816320032;
    u_xlat17.xy = u_xlat4.xz * vec2(0.5, 0.5) + (-u_xlat0.xy);
    u_xlat3.zw = u_xlat4.wy * vec2(0.0408160016, 0.0408160016);
    u_xlat6.xy = u_xlat17.yx * vec2(0.0816320032, 0.0816320032);
    u_xlat5.x = u_xlat6.y;
    u_xlat2.w = u_xlat3.z;
    u_xlat5.yw = u_xlat0.xx * vec2(-0.0816320032, 0.0816320032) + vec2(0.163264006, 0.0816320032);
    u_xlat3.xz = u_xlat0.xx * vec2(-0.0816320032, 0.0816320032) + vec2(0.0816320032, 0.163264006);
    u_xlat4 = u_xlat3 + u_xlat5;
    u_xlat3 = u_xlat3 / u_xlat4;
    u_xlat3 = u_xlat3 + vec4(-3.5, -1.5, 0.5, 2.5);
    u_xlat3 = u_xlat3.wxyz * _ShadowMapTexture_TexelSize.xxxx;
    u_xlat5.xzw = u_xlat3.yzw;
    u_xlat6.yw = u_xlat0.yy * vec2(-0.0816320032, 0.0816320032) + vec2(0.163264006, 0.0816320032);
    u_xlat2.xz = u_xlat0.yy * vec2(-0.0816320032, 0.0816320032) + vec2(0.0816320032, 0.163264006);
    u_xlat6 = u_xlat2 + u_xlat6;
    u_xlat2 = u_xlat2 / u_xlat6;
    u_xlat2 = u_xlat2 + vec4(-3.5, -1.5, 0.5, 2.5);
    u_xlat2 = u_xlat2.xwyz * _ShadowMapTexture_TexelSize.yyyy;
    u_xlat5.y = u_xlat2.x;
    u_xlat7 = u_xlat1.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat5.xyzy;
    vec3 txVec0 = vec3(u_xlat7.zw,u_xlat0.z);
    u_xlat0.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
    vec3 txVec1 = vec3(u_xlat7.xy,u_xlat0.z);
    u_xlat8.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec1, 0.0);
    u_xlat7 = u_xlat4 * u_xlat6.xxxx;
    u_xlat0.x = u_xlat0.x * u_xlat7.y;
    u_xlat0.x = u_xlat7.x * u_xlat8.x + u_xlat0.x;
    u_xlat8.xz = u_xlat1.xy * _ShadowMapTexture_TexelSize.xy + u_xlat5.wy;
    u_xlat3.y = u_xlat5.y;
    u_xlat17.xy = u_xlat1.xy * _ShadowMapTexture_TexelSize.xy + u_xlat3.xy;
    vec3 txVec2 = vec3(u_xlat17.xy,u_xlat0.z);
    u_xlat17.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec2, 0.0);
    vec3 txVec3 = vec3(u_xlat8.xz,u_xlat0.z);
    u_xlat8.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec3, 0.0);
    u_xlat0.x = u_xlat7.z * u_xlat8.x + u_xlat0.x;
    u_xlat0.x = u_xlat7.w * u_xlat17.x + u_xlat0.x;
    u_xlat5.y = u_xlat2.z;
    u_xlat7 = u_xlat1.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat5.xyzy;
    vec3 txVec4 = vec3(u_xlat7.xy,u_xlat0.z);
    u_xlat8.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec4, 0.0);
    vec3 txVec5 = vec3(u_xlat7.zw,u_xlat0.z);
    u_xlat24 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec5, 0.0);
    u_xlat7 = u_xlat4 * u_xlat6.yyyy;
    u_xlat0.x = u_xlat7.x * u_xlat8.x + u_xlat0.x;
    u_xlat0.x = u_xlat7.y * u_xlat24 + u_xlat0.x;
    u_xlat8.xz = u_xlat1.xy * _ShadowMapTexture_TexelSize.xy + u_xlat5.wy;
    u_xlat3.z = u_xlat5.y;
    u_xlat17.xy = u_xlat1.xy * _ShadowMapTexture_TexelSize.xy + u_xlat3.xz;
    vec3 txVec6 = vec3(u_xlat17.xy,u_xlat0.z);
    u_xlat17.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec6, 0.0);
    vec3 txVec7 = vec3(u_xlat8.xz,u_xlat0.z);
    u_xlat8.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec7, 0.0);
    u_xlat0.x = u_xlat7.z * u_xlat8.x + u_xlat0.x;
    u_xlat0.x = u_xlat7.w * u_xlat17.x + u_xlat0.x;
    u_xlat5.y = u_xlat2.w;
    u_xlat7 = u_xlat1.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat5.xyzy;
    vec3 txVec8 = vec3(u_xlat7.xy,u_xlat0.z);
    u_xlat8.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec8, 0.0);
    vec3 txVec9 = vec3(u_xlat7.zw,u_xlat0.z);
    u_xlat24 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec9, 0.0);
    u_xlat7 = u_xlat4 * u_xlat6.zzzz;
    u_xlat4 = u_xlat4 * u_xlat6.wwww;
    u_xlat0.x = u_xlat7.x * u_xlat8.x + u_xlat0.x;
    u_xlat0.x = u_xlat7.y * u_xlat24 + u_xlat0.x;
    u_xlat8.xz = u_xlat1.xy * _ShadowMapTexture_TexelSize.xy + u_xlat5.wy;
    u_xlat2.xzw = u_xlat5.xzw;
    u_xlat3.w = u_xlat5.y;
    u_xlat17.xy = u_xlat1.xy * _ShadowMapTexture_TexelSize.xy + u_xlat3.xw;
    vec3 txVec10 = vec3(u_xlat17.xy,u_xlat0.z);
    u_xlat17.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec10, 0.0);
    vec3 txVec11 = vec3(u_xlat8.xz,u_xlat0.z);
    u_xlat8.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec11, 0.0);
    u_xlat0.x = u_xlat7.z * u_xlat8.x + u_xlat0.x;
    u_xlat0.x = u_xlat7.w * u_xlat17.x + u_xlat0.x;
    u_xlat5 = u_xlat1.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat2.xyzy;
    u_xlat8.xz = u_xlat1.xy * _ShadowMapTexture_TexelSize.xy + u_xlat2.wy;
    u_xlat3.y = u_xlat2.y;
    u_xlat1.xy = u_xlat1.xy * _ShadowMapTexture_TexelSize.xy + u_xlat3.xy;
    vec3 txVec12 = vec3(u_xlat1.xy,u_xlat0.z);
    u_xlat1.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec12, 0.0);
    vec3 txVec13 = vec3(u_xlat8.xz,u_xlat0.z);
    u_xlat8.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec13, 0.0);
    vec3 txVec14 = vec3(u_xlat5.xy,u_xlat0.z);
    u_xlat24 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec14, 0.0);
    vec3 txVec15 = vec3(u_xlat5.zw,u_xlat0.z);
    u_xlat16 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec15, 0.0);
    u_xlat0.x = u_xlat4.x * u_xlat24 + u_xlat0.x;
    u_xlat0.x = u_xlat4.y * u_xlat16 + u_xlat0.x;
    u_xlat0.x = u_xlat4.z * u_xlat8.x + u_xlat0.x;
    u_xlat0.x = u_xlat4.w * u_xlat1.x + u_xlat0.x;
    u_xlat8.x = (-_LightShadowData.x) + 1.0;
    SV_Target0 = u_xlat0.xxxx * u_xlat8.xxxx + _LightShadowData.xxxx;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "SHADOWS_SINGLE_CASCADE" "SHADOWS_SPLIT_SPHERES" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 193
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %80 %119 %129 %134 %136 %177 %184 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpMemberDecorate %78 0 BuiltIn 78 
                                                      OpMemberDecorate %78 1 BuiltIn 78 
                                                      OpMemberDecorate %78 2 BuiltIn 78 
                                                      OpDecorate %78 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 119 
                                                      OpDecorate %129 Location 129 
                                                      OpDecorate vs_TEXCOORD1 Location 134 
                                                      OpDecorate %136 Location 136 
                                                      OpDecorate vs_TEXCOORD2 Location 177 
                                                      OpDecorate vs_TEXCOORD3 Location 184 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %16 %17 %18 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4];}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 2 
                                          i32 %24 = OpConstant 1 
                                              %25 = OpTypePointer Uniform %7 
                                          i32 %29 = OpConstant 0 
                                          i32 %45 = OpConstant 3 
                               Private f32_4* %49 = OpVariable Private 
                                          u32 %76 = OpConstant 1 
                                              %77 = OpTypeArray %6 %76 
                                              %78 = OpTypeStruct %7 %6 %77 
                                              %79 = OpTypePointer Output %78 
         Output struct {f32_4; f32; f32[1];}* %80 = OpVariable Output 
                                              %82 = OpTypePointer Output %7 
                                              %84 = OpTypePointer Private %6 
                                          u32 %87 = OpConstant 0 
                                              %88 = OpTypePointer Uniform %6 
                                              %93 = OpTypeVector %6 3 
                                          f32 %96 = OpConstant 3.674022E-40 
                                        f32_3 %97 = OpConstantComposite %96 %96 %96 
                                             %101 = OpTypePointer Private %93 
                              Private f32_3* %102 = OpVariable Private 
                       Output f32_4* vs_TEXCOORD0 = OpVariable Output 
                                             %120 = OpTypeVector %6 2 
                                             %128 = OpTypePointer Input %120 
                                Input f32_2* %129 = OpVariable Input 
                                             %133 = OpTypePointer Output %93 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                                             %135 = OpTypePointer Input %93 
                                Input f32_3* %136 = OpVariable Input 
                                         u32 %171 = OpConstant 2 
                                         u32 %175 = OpConstant 3 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                       Output f32_3* vs_TEXCOORD3 = OpVariable Output 
                                             %187 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %26 = OpAccessChain %21 %23 %24 
                                        f32_4 %27 = OpLoad %26 
                                        f32_4 %28 = OpFMul %13 %27 
                                                      OpStore %9 %28 
                               Uniform f32_4* %30 = OpAccessChain %21 %23 %29 
                                        f32_4 %31 = OpLoad %30 
                                        f32_4 %32 = OpLoad %11 
                                        f32_4 %33 = OpVectorShuffle %32 %32 0 0 0 0 
                                        f32_4 %34 = OpFMul %31 %33 
                                        f32_4 %35 = OpLoad %9 
                                        f32_4 %36 = OpFAdd %34 %35 
                                                      OpStore %9 %36 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %23 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %44 = OpLoad %9 
                               Uniform f32_4* %46 = OpAccessChain %21 %23 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_4 %48 = OpFAdd %44 %47 
                                                      OpStore %9 %48 
                                        f32_4 %50 = OpLoad %9 
                                        f32_4 %51 = OpVectorShuffle %50 %50 1 1 1 1 
                               Uniform f32_4* %52 = OpAccessChain %21 %45 %24 
                                        f32_4 %53 = OpLoad %52 
                                        f32_4 %54 = OpFMul %51 %53 
                                                      OpStore %49 %54 
                               Uniform f32_4* %55 = OpAccessChain %21 %45 %29 
                                        f32_4 %56 = OpLoad %55 
                                        f32_4 %57 = OpLoad %9 
                                        f32_4 %58 = OpVectorShuffle %57 %57 0 0 0 0 
                                        f32_4 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %49 
                                        f32_4 %61 = OpFAdd %59 %60 
                                                      OpStore %49 %61 
                               Uniform f32_4* %62 = OpAccessChain %21 %45 %23 
                                        f32_4 %63 = OpLoad %62 
                                        f32_4 %64 = OpLoad %9 
                                        f32_4 %65 = OpVectorShuffle %64 %64 2 2 2 2 
                                        f32_4 %66 = OpFMul %63 %65 
                                        f32_4 %67 = OpLoad %49 
                                        f32_4 %68 = OpFAdd %66 %67 
                                                      OpStore %49 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %45 %45 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %9 
                                        f32_4 %72 = OpVectorShuffle %71 %71 3 3 3 3 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %49 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %9 %75 
                                        f32_4 %81 = OpLoad %9 
                                Output f32_4* %83 = OpAccessChain %80 %29 
                                                      OpStore %83 %81 
                                 Private f32* %85 = OpAccessChain %9 %76 
                                          f32 %86 = OpLoad %85 
                                 Uniform f32* %89 = OpAccessChain %21 %29 %87 
                                          f32 %90 = OpLoad %89 
                                          f32 %91 = OpFMul %86 %90 
                                 Private f32* %92 = OpAccessChain %9 %76 
                                                      OpStore %92 %91 
                                        f32_4 %94 = OpLoad %9 
                                        f32_3 %95 = OpVectorShuffle %94 %94 0 3 1 
                                        f32_3 %98 = OpFMul %95 %97 
                                        f32_4 %99 = OpLoad %49 
                                       f32_4 %100 = OpVectorShuffle %99 %98 4 1 5 6 
                                                      OpStore %49 %100 
                                       f32_4 %103 = OpLoad %9 
                                       f32_3 %104 = OpVectorShuffle %103 %103 1 1 1 
                              Uniform f32_4* %105 = OpAccessChain %21 %24 %24 
                                       f32_4 %106 = OpLoad %105 
                                       f32_3 %107 = OpVectorShuffle %106 %106 0 1 2 
                                       f32_3 %108 = OpFMul %104 %107 
                                                      OpStore %102 %108 
                              Uniform f32_4* %109 = OpAccessChain %21 %24 %29 
                                       f32_4 %110 = OpLoad %109 
                                       f32_3 %111 = OpVectorShuffle %110 %110 0 1 2 
                                       f32_4 %112 = OpLoad %9 
                                       f32_3 %113 = OpVectorShuffle %112 %112 0 0 0 
                                       f32_3 %114 = OpFMul %111 %113 
                                       f32_3 %115 = OpLoad %102 
                                       f32_3 %116 = OpFAdd %114 %115 
                                       f32_4 %117 = OpLoad %9 
                                       f32_4 %118 = OpVectorShuffle %117 %116 4 5 6 3 
                                                      OpStore %9 %118 
                                       f32_4 %121 = OpLoad %49 
                                       f32_2 %122 = OpVectorShuffle %121 %121 2 2 
                                       f32_4 %123 = OpLoad %49 
                                       f32_2 %124 = OpVectorShuffle %123 %123 0 3 
                                       f32_2 %125 = OpFAdd %122 %124 
                                       f32_4 %126 = OpLoad vs_TEXCOORD0 
                                       f32_4 %127 = OpVectorShuffle %126 %125 0 1 4 5 
                                                      OpStore vs_TEXCOORD0 %127 
                                       f32_2 %130 = OpLoad %129 
                                       f32_4 %131 = OpLoad vs_TEXCOORD0 
                                       f32_4 %132 = OpVectorShuffle %131 %130 4 5 2 3 
                                                      OpStore vs_TEXCOORD0 %132 
                                       f32_3 %137 = OpLoad %136 
                                                      OpStore vs_TEXCOORD1 %137 
                                       f32_4 %138 = OpLoad %9 
                                       f32_3 %139 = OpVectorShuffle %138 %138 0 1 2 
                              Uniform f32_4* %140 = OpAccessChain %21 %24 %23 
                                       f32_4 %141 = OpLoad %140 
                                       f32_3 %142 = OpVectorShuffle %141 %141 0 1 2 
                                       f32_3 %143 = OpFNegate %142 
                                       f32_3 %144 = OpFAdd %139 %143 
                                       f32_4 %145 = OpLoad %49 
                                       f32_4 %146 = OpVectorShuffle %145 %144 4 5 6 3 
                                                      OpStore %49 %146 
                                       f32_4 %147 = OpLoad %9 
                                       f32_3 %148 = OpVectorShuffle %147 %147 0 1 2 
                              Uniform f32_4* %149 = OpAccessChain %21 %24 %23 
                                       f32_4 %150 = OpLoad %149 
                                       f32_3 %151 = OpVectorShuffle %150 %150 0 1 2 
                                       f32_3 %152 = OpFAdd %148 %151 
                                       f32_4 %153 = OpLoad %9 
                                       f32_4 %154 = OpVectorShuffle %153 %152 4 5 6 3 
                                                      OpStore %9 %154 
                                       f32_4 %155 = OpLoad %9 
                                       f32_3 %156 = OpVectorShuffle %155 %155 0 1 2 
                              Uniform f32_4* %157 = OpAccessChain %21 %24 %45 
                                       f32_4 %158 = OpLoad %157 
                                       f32_3 %159 = OpVectorShuffle %158 %158 0 1 2 
                                       f32_3 %160 = OpFAdd %156 %159 
                                       f32_4 %161 = OpLoad %9 
                                       f32_4 %162 = OpVectorShuffle %161 %160 4 5 6 3 
                                                      OpStore %9 %162 
                                       f32_4 %163 = OpLoad %49 
                                       f32_3 %164 = OpVectorShuffle %163 %163 0 1 2 
                              Uniform f32_4* %165 = OpAccessChain %21 %24 %45 
                                       f32_4 %166 = OpLoad %165 
                                       f32_3 %167 = OpVectorShuffle %166 %166 0 1 2 
                                       f32_3 %168 = OpFAdd %164 %167 
                                       f32_4 %169 = OpLoad %49 
                                       f32_4 %170 = OpVectorShuffle %169 %168 4 5 6 3 
                                                      OpStore %49 %170 
                                Private f32* %172 = OpAccessChain %49 %171 
                                         f32 %173 = OpLoad %172 
                                         f32 %174 = OpFNegate %173 
                                Private f32* %176 = OpAccessChain %49 %175 
                                                      OpStore %176 %174 
                                       f32_4 %178 = OpLoad %49 
                                       f32_3 %179 = OpVectorShuffle %178 %178 0 1 3 
                                                      OpStore vs_TEXCOORD2 %179 
                                Private f32* %180 = OpAccessChain %9 %171 
                                         f32 %181 = OpLoad %180 
                                         f32 %182 = OpFNegate %181 
                                Private f32* %183 = OpAccessChain %9 %175 
                                                      OpStore %183 %182 
                                       f32_4 %185 = OpLoad %9 
                                       f32_3 %186 = OpVectorShuffle %185 %185 0 1 3 
                                                      OpStore vs_TEXCOORD3 %186 
                                 Output f32* %188 = OpAccessChain %80 %29 %76 
                                         f32 %189 = OpLoad %188 
                                         f32 %190 = OpFNegate %189 
                                 Output f32* %191 = OpAccessChain %80 %29 %76 
                                                      OpStore %191 %190 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 909
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %21 %898 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpDecorate %12 DescriptorSet 12 
                                                      OpDecorate %12 Binding 12 
                                                      OpDecorate %16 DescriptorSet 16 
                                                      OpDecorate %16 Binding 16 
                                                      OpDecorate vs_TEXCOORD0 Location 21 
                                                      OpDecorate %57 ArrayStride 57 
                                                      OpDecorate %58 ArrayStride 58 
                                                      OpDecorate %60 ArrayStride 60 
                                                      OpMemberDecorate %61 0 Offset 61 
                                                      OpMemberDecorate %61 1 Offset 61 
                                                      OpMemberDecorate %61 2 Offset 61 
                                                      OpMemberDecorate %61 3 Offset 61 
                                                      OpMemberDecorate %61 4 Offset 61 
                                                      OpDecorate %61 Block 
                                                      OpDecorate %63 DescriptorSet 63 
                                                      OpDecorate %63 Binding 63 
                                                      OpDecorate %374 DescriptorSet 374 
                                                      OpDecorate %374 Binding 374 
                                                      OpDecorate %376 DescriptorSet 376 
                                                      OpDecorate %376 Binding 376 
                                                      OpDecorate %898 Location 898 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %11 = OpTypePointer UniformConstant %10 
         UniformConstant read_only Texture2D* %12 = OpVariable UniformConstant 
                                              %14 = OpTypeSampler 
                                              %15 = OpTypePointer UniformConstant %14 
                     UniformConstant sampler* %16 = OpVariable UniformConstant 
                                              %18 = OpTypeSampledImage %10 
                                              %20 = OpTypePointer Input %7 
                        Input f32_4* vs_TEXCOORD0 = OpVariable Input 
                                              %22 = OpTypeVector %6 2 
                                              %26 = OpTypeInt 32 0 
                                          u32 %27 = OpConstant 0 
                                              %29 = OpTypePointer Private %6 
                                          f32 %34 = OpConstant 3.674022E-40 
                                          u32 %36 = OpConstant 2 
                                              %42 = OpTypeVector %6 3 
                                          f32 %45 = OpConstant 3.674022E-40 
                                        f32_3 %46 = OpConstantComposite %45 %45 %45 
                                          f32 %48 = OpConstant 3.674022E-40 
                                        f32_3 %49 = OpConstantComposite %48 %48 %48 
                               Private f32_4* %53 = OpVariable Private 
                                          u32 %56 = OpConstant 4 
                                              %57 = OpTypeArray %7 %56 
                                              %58 = OpTypeArray %7 %56 
                                          u32 %59 = OpConstant 16 
                                              %60 = OpTypeArray %7 %59 
                                              %61 = OpTypeStruct %57 %58 %60 %7 %7 
                                              %62 = OpTypePointer Uniform %61 
Uniform struct {f32_4[4]; f32_4[4]; f32_4[16]; f32_4; f32_4;}* %63 = OpVariable Uniform 
                                              %64 = OpTypeInt 32 1 
                                          i32 %65 = OpConstant 0 
                                          i32 %66 = OpConstant 1 
                                              %67 = OpTypePointer Uniform %7 
                                          i32 %78 = OpConstant 2 
                                          i32 %87 = OpConstant 3 
                                         i32 %165 = OpConstant 4 
                                         f32 %170 = OpConstant 3.674022E-40 
                                       f32_2 %171 = OpConstantComposite %170 %170 
                                             %192 = OpTypePointer Private %22 
                              Private f32_2* %193 = OpVariable Private 
                                       f32_2 %197 = OpConstantComposite %34 %34 
                              Private f32_4* %199 = OpVariable Private 
                                         f32 %202 = OpConstant 3.674022E-40 
                                       f32_2 %203 = OpConstantComposite %202 %202 
                                       f32_2 %216 = OpConstantComposite %45 %45 
                                         f32 %219 = OpConstant 3.674022E-40 
                                       f32_2 %220 = OpConstantComposite %219 %219 
                              Private f32_4* %224 = OpVariable Private 
                                         u32 %227 = OpConstant 1 
                              Private f32_4* %232 = OpVariable Private 
                                       f32_4 %235 = OpConstantComposite %170 %34 %170 %34 
                              Private f32_4* %251 = OpVariable Private 
                              Private f32_4* %256 = OpVariable Private 
                                         f32 %270 = OpConstant 3.674022E-40 
                                       f32_2 %271 = OpConstantComposite %270 %270 
                                         u32 %285 = OpConstant 3 
                                         f32 %289 = OpConstant 3.674022E-40 
                                       f32_2 %290 = OpConstantComposite %289 %219 
                                         f32 %292 = OpConstant 3.674022E-40 
                                       f32_2 %293 = OpConstantComposite %292 %219 
                                       f32_2 %300 = OpConstantComposite %219 %292 
                                         f32 %311 = OpConstant 3.674022E-40 
                                         f32 %312 = OpConstant 3.674022E-40 
                                         f32 %313 = OpConstant 3.674022E-40 
                                       f32_4 %314 = OpConstantComposite %311 %312 %170 %313 
                              Private f32_4* %355 = OpVariable Private 
                                             %365 = OpTypePointer Function %42 
        UniformConstant read_only Texture2D* %374 = OpVariable UniformConstant 
                    UniformConstant sampler* %376 = OpVariable UniformConstant 
                                             %378 = OpTypeImage %6 Dim2D 1 0 0 1 Unknown 
                                             %379 = OpTypeSampledImage %378 
                                             %393 = OpTypePointer Private %42 
                              Private f32_3* %394 = OpVariable Private 
                                Private f32* %526 = OpVariable Private 
                                Private f32* %850 = OpVariable Private 
                                             %891 = OpTypePointer Uniform %6 
                                             %897 = OpTypePointer Output %7 
                               Output f32_4* %898 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %366 = OpVariable Function 
                             Function f32_3* %385 = OpVariable Function 
                             Function f32_3* %444 = OpVariable Function 
                             Function f32_3* %458 = OpVariable Function 
                             Function f32_3* %503 = OpVariable Function 
                             Function f32_3* %518 = OpVariable Function 
                             Function f32_3* %577 = OpVariable Function 
                             Function f32_3* %591 = OpVariable Function 
                             Function f32_3* %636 = OpVariable Function 
                             Function f32_3* %651 = OpVariable Function 
                             Function f32_3* %717 = OpVariable Function 
                             Function f32_3* %731 = OpVariable Function 
                             Function f32_3* %798 = OpVariable Function 
                             Function f32_3* %813 = OpVariable Function 
                             Function f32_3* %828 = OpVariable Function 
                             Function f32_3* %842 = OpVariable Function 
                          read_only Texture2D %13 = OpLoad %12 
                                      sampler %17 = OpLoad %16 
                   read_only Texture2DSampled %19 = OpSampledImage %13 %17 
                                        f32_4 %23 = OpLoad vs_TEXCOORD0 
                                        f32_2 %24 = OpVectorShuffle %23 %23 0 1 
                                        f32_4 %25 = OpImageSampleImplicitLod %19 %24 
                                          f32 %28 = OpCompositeExtract %25 0 
                                 Private f32* %30 = OpAccessChain %9 %27 
                                                      OpStore %30 %28 
                                 Private f32* %31 = OpAccessChain %9 %27 
                                          f32 %32 = OpLoad %31 
                                          f32 %33 = OpFNegate %32 
                                          f32 %35 = OpFAdd %33 %34 
                                 Private f32* %37 = OpAccessChain %9 %36 
                                                      OpStore %37 %35 
                                        f32_4 %38 = OpLoad vs_TEXCOORD0 
                                        f32_2 %39 = OpVectorShuffle %38 %38 2 3 
                                        f32_4 %40 = OpLoad %9 
                                        f32_4 %41 = OpVectorShuffle %40 %39 4 5 2 3 
                                                      OpStore %9 %41 
                                        f32_4 %43 = OpLoad %9 
                                        f32_3 %44 = OpVectorShuffle %43 %43 0 1 2 
                                        f32_3 %47 = OpFMul %44 %46 
                                        f32_3 %50 = OpFAdd %47 %49 
                                        f32_4 %51 = OpLoad %9 
                                        f32_4 %52 = OpVectorShuffle %51 %50 4 5 6 3 
                                                      OpStore %9 %52 
                                        f32_4 %54 = OpLoad %9 
                                        f32_4 %55 = OpVectorShuffle %54 %54 1 1 1 1 
                               Uniform f32_4* %68 = OpAccessChain %63 %65 %66 
                                        f32_4 %69 = OpLoad %68 
                                        f32_4 %70 = OpFMul %55 %69 
                                                      OpStore %53 %70 
                               Uniform f32_4* %71 = OpAccessChain %63 %65 %65 
                                        f32_4 %72 = OpLoad %71 
                                        f32_4 %73 = OpLoad %9 
                                        f32_4 %74 = OpVectorShuffle %73 %73 0 0 0 0 
                                        f32_4 %75 = OpFMul %72 %74 
                                        f32_4 %76 = OpLoad %53 
                                        f32_4 %77 = OpFAdd %75 %76 
                                                      OpStore %53 %77 
                               Uniform f32_4* %79 = OpAccessChain %63 %65 %78 
                                        f32_4 %80 = OpLoad %79 
                                        f32_4 %81 = OpLoad %9 
                                        f32_4 %82 = OpVectorShuffle %81 %81 2 2 2 2 
                                        f32_4 %83 = OpFMul %80 %82 
                                        f32_4 %84 = OpLoad %53 
                                        f32_4 %85 = OpFAdd %83 %84 
                                                      OpStore %9 %85 
                                        f32_4 %86 = OpLoad %9 
                               Uniform f32_4* %88 = OpAccessChain %63 %65 %87 
                                        f32_4 %89 = OpLoad %88 
                                        f32_4 %90 = OpFAdd %86 %89 
                                                      OpStore %9 %90 
                                        f32_4 %91 = OpLoad %9 
                                        f32_3 %92 = OpVectorShuffle %91 %91 0 1 2 
                                        f32_4 %93 = OpLoad %9 
                                        f32_3 %94 = OpVectorShuffle %93 %93 3 3 3 
                                        f32_3 %95 = OpFDiv %92 %94 
                                        f32_4 %96 = OpLoad %9 
                                        f32_4 %97 = OpVectorShuffle %96 %95 4 5 6 3 
                                                      OpStore %9 %97 
                                        f32_4 %98 = OpLoad %9 
                                        f32_4 %99 = OpVectorShuffle %98 %98 1 1 1 1 
                              Uniform f32_4* %100 = OpAccessChain %63 %66 %66 
                                       f32_4 %101 = OpLoad %100 
                                       f32_4 %102 = OpFMul %99 %101 
                                                      OpStore %53 %102 
                              Uniform f32_4* %103 = OpAccessChain %63 %66 %65 
                                       f32_4 %104 = OpLoad %103 
                                       f32_4 %105 = OpLoad %9 
                                       f32_4 %106 = OpVectorShuffle %105 %105 0 0 0 0 
                                       f32_4 %107 = OpFMul %104 %106 
                                       f32_4 %108 = OpLoad %53 
                                       f32_4 %109 = OpFAdd %107 %108 
                                                      OpStore %53 %109 
                              Uniform f32_4* %110 = OpAccessChain %63 %66 %78 
                                       f32_4 %111 = OpLoad %110 
                                       f32_4 %112 = OpLoad %9 
                                       f32_4 %113 = OpVectorShuffle %112 %112 2 2 2 2 
                                       f32_4 %114 = OpFNegate %113 
                                       f32_4 %115 = OpFMul %111 %114 
                                       f32_4 %116 = OpLoad %53 
                                       f32_4 %117 = OpFAdd %115 %116 
                                                      OpStore %9 %117 
                                       f32_4 %118 = OpLoad %9 
                              Uniform f32_4* %119 = OpAccessChain %63 %66 %87 
                                       f32_4 %120 = OpLoad %119 
                                       f32_4 %121 = OpFAdd %118 %120 
                                                      OpStore %9 %121 
                                       f32_4 %122 = OpLoad %9 
                                       f32_3 %123 = OpVectorShuffle %122 %122 1 1 1 
                              Uniform f32_4* %124 = OpAccessChain %63 %78 %66 
                                       f32_4 %125 = OpLoad %124 
                                       f32_3 %126 = OpVectorShuffle %125 %125 0 1 2 
                                       f32_3 %127 = OpFMul %123 %126 
                                       f32_4 %128 = OpLoad %53 
                                       f32_4 %129 = OpVectorShuffle %128 %127 4 5 6 3 
                                                      OpStore %53 %129 
                              Uniform f32_4* %130 = OpAccessChain %63 %78 %65 
                                       f32_4 %131 = OpLoad %130 
                                       f32_3 %132 = OpVectorShuffle %131 %131 0 1 2 
                                       f32_4 %133 = OpLoad %9 
                                       f32_3 %134 = OpVectorShuffle %133 %133 0 0 0 
                                       f32_3 %135 = OpFMul %132 %134 
                                       f32_4 %136 = OpLoad %53 
                                       f32_3 %137 = OpVectorShuffle %136 %136 0 1 2 
                                       f32_3 %138 = OpFAdd %135 %137 
                                       f32_4 %139 = OpLoad %53 
                                       f32_4 %140 = OpVectorShuffle %139 %138 4 5 6 3 
                                                      OpStore %53 %140 
                              Uniform f32_4* %141 = OpAccessChain %63 %78 %78 
                                       f32_4 %142 = OpLoad %141 
                                       f32_3 %143 = OpVectorShuffle %142 %142 0 1 2 
                                       f32_4 %144 = OpLoad %9 
                                       f32_3 %145 = OpVectorShuffle %144 %144 2 2 2 
                                       f32_3 %146 = OpFMul %143 %145 
                                       f32_4 %147 = OpLoad %53 
                                       f32_3 %148 = OpVectorShuffle %147 %147 0 1 2 
                                       f32_3 %149 = OpFAdd %146 %148 
                                       f32_4 %150 = OpLoad %9 
                                       f32_4 %151 = OpVectorShuffle %150 %149 4 5 6 3 
                                                      OpStore %9 %151 
                              Uniform f32_4* %152 = OpAccessChain %63 %78 %87 
                                       f32_4 %153 = OpLoad %152 
                                       f32_3 %154 = OpVectorShuffle %153 %153 0 1 2 
                                       f32_4 %155 = OpLoad %9 
                                       f32_3 %156 = OpVectorShuffle %155 %155 3 3 3 
                                       f32_3 %157 = OpFMul %154 %156 
                                       f32_4 %158 = OpLoad %9 
                                       f32_3 %159 = OpVectorShuffle %158 %158 0 1 2 
                                       f32_3 %160 = OpFAdd %157 %159 
                                       f32_4 %161 = OpLoad %9 
                                       f32_4 %162 = OpVectorShuffle %161 %160 4 5 6 3 
                                                      OpStore %9 %162 
                                       f32_4 %163 = OpLoad %9 
                                       f32_2 %164 = OpVectorShuffle %163 %163 0 1 
                              Uniform f32_4* %166 = OpAccessChain %63 %165 
                                       f32_4 %167 = OpLoad %166 
                                       f32_2 %168 = OpVectorShuffle %167 %167 2 3 
                                       f32_2 %169 = OpFMul %164 %168 
                                       f32_2 %172 = OpFAdd %169 %171 
                                       f32_4 %173 = OpLoad %53 
                                       f32_4 %174 = OpVectorShuffle %173 %172 4 5 2 3 
                                                      OpStore %53 %174 
                                       f32_4 %175 = OpLoad %53 
                                       f32_2 %176 = OpVectorShuffle %175 %175 0 1 
                                       f32_2 %177 = OpExtInst %1 8 %176 
                                       f32_4 %178 = OpLoad %53 
                                       f32_4 %179 = OpVectorShuffle %178 %177 4 5 2 3 
                                                      OpStore %53 %179 
                                       f32_4 %180 = OpLoad %9 
                                       f32_2 %181 = OpVectorShuffle %180 %180 0 1 
                              Uniform f32_4* %182 = OpAccessChain %63 %165 
                                       f32_4 %183 = OpLoad %182 
                                       f32_2 %184 = OpVectorShuffle %183 %183 2 3 
                                       f32_2 %185 = OpFMul %181 %184 
                                       f32_4 %186 = OpLoad %53 
                                       f32_2 %187 = OpVectorShuffle %186 %186 0 1 
                                       f32_2 %188 = OpFNegate %187 
                                       f32_2 %189 = OpFAdd %185 %188 
                                       f32_4 %190 = OpLoad %9 
                                       f32_4 %191 = OpVectorShuffle %190 %189 4 5 2 3 
                                                      OpStore %9 %191 
                                       f32_4 %194 = OpLoad %9 
                                       f32_2 %195 = OpVectorShuffle %194 %194 0 1 
                                       f32_2 %196 = OpFNegate %195 
                                       f32_2 %198 = OpFAdd %196 %197 
                                                      OpStore %193 %198 
                                       f32_4 %200 = OpLoad %9 
                                       f32_2 %201 = OpVectorShuffle %200 %200 0 1 
                                       f32_2 %204 = OpExtInst %1 37 %201 %203 
                                       f32_4 %205 = OpLoad %199 
                                       f32_4 %206 = OpVectorShuffle %205 %204 4 5 2 3 
                                                      OpStore %199 %206 
                                       f32_4 %207 = OpLoad %199 
                                       f32_2 %208 = OpVectorShuffle %207 %207 0 1 
                                       f32_2 %209 = OpFNegate %208 
                                       f32_4 %210 = OpLoad %199 
                                       f32_2 %211 = OpVectorShuffle %210 %210 0 1 
                                       f32_2 %212 = OpFMul %209 %211 
                                       f32_2 %213 = OpLoad %193 
                                       f32_2 %214 = OpFAdd %212 %213 
                                                      OpStore %193 %214 
                                       f32_2 %215 = OpLoad %193 
                                       f32_2 %217 = OpFAdd %215 %216 
                                                      OpStore %193 %217 
                                       f32_2 %218 = OpLoad %193 
                                       f32_2 %221 = OpFMul %218 %220 
                                       f32_4 %222 = OpLoad %199 
                                       f32_4 %223 = OpVectorShuffle %222 %221 4 5 2 3 
                                                      OpStore %199 %223 
                                Private f32* %225 = OpAccessChain %199 %27 
                                         f32 %226 = OpLoad %225 
                                Private f32* %228 = OpAccessChain %224 %227 
                                                      OpStore %228 %226 
                                       f32_4 %229 = OpLoad %9 
                                       f32_2 %230 = OpVectorShuffle %229 %229 0 1 
                                       f32_2 %231 = OpExtInst %1 40 %230 %203 
                                                      OpStore %193 %231 
                                       f32_4 %233 = OpLoad %9 
                                       f32_4 %234 = OpVectorShuffle %233 %233 0 0 1 1 
                                       f32_4 %236 = OpFAdd %234 %235 
                                                      OpStore %232 %236 
                                       f32_2 %237 = OpLoad %193 
                                       f32_2 %238 = OpFNegate %237 
                                       f32_2 %239 = OpLoad %193 
                                       f32_2 %240 = OpFMul %238 %239 
                                       f32_4 %241 = OpLoad %232 
                                       f32_2 %242 = OpVectorShuffle %241 %241 1 3 
                                       f32_2 %243 = OpFAdd %240 %242 
                                                      OpStore %193 %243 
                                       f32_4 %244 = OpLoad %232 
                                       f32_4 %245 = OpVectorShuffle %244 %244 0 0 2 2 
                                       f32_4 %246 = OpLoad %232 
                                       f32_4 %247 = OpVectorShuffle %246 %246 0 0 2 2 
                                       f32_4 %248 = OpFMul %245 %247 
                                                      OpStore %232 %248 
                                       f32_2 %249 = OpLoad %193 
                                       f32_2 %250 = OpFAdd %249 %216 
                                                      OpStore %193 %250 
                                Private f32* %252 = OpAccessChain %193 %27 
                                         f32 %253 = OpLoad %252 
                                         f32 %254 = OpFMul %253 %219 
                                Private f32* %255 = OpAccessChain %251 %36 
                                                      OpStore %255 %254 
                                Private f32* %257 = OpAccessChain %193 %227 
                                         f32 %258 = OpLoad %257 
                                         f32 %259 = OpFMul %258 %219 
                                Private f32* %260 = OpAccessChain %256 %36 
                                                      OpStore %260 %259 
                                       f32_4 %261 = OpLoad %232 
                                       f32_2 %262 = OpVectorShuffle %261 %261 0 2 
                                       f32_2 %263 = OpFMul %262 %171 
                                       f32_4 %264 = OpLoad %9 
                                       f32_2 %265 = OpVectorShuffle %264 %264 0 1 
                                       f32_2 %266 = OpFNegate %265 
                                       f32_2 %267 = OpFAdd %263 %266 
                                                      OpStore %193 %267 
                                       f32_4 %268 = OpLoad %232 
                                       f32_2 %269 = OpVectorShuffle %268 %268 3 1 
                                       f32_2 %272 = OpFMul %269 %271 
                                       f32_4 %273 = OpLoad %224 
                                       f32_4 %274 = OpVectorShuffle %273 %272 0 1 4 5 
                                                      OpStore %224 %274 
                                       f32_2 %275 = OpLoad %193 
                                       f32_2 %276 = OpVectorShuffle %275 %275 1 0 
                                       f32_2 %277 = OpFMul %276 %220 
                                       f32_4 %278 = OpLoad %256 
                                       f32_4 %279 = OpVectorShuffle %278 %277 4 5 2 3 
                                                      OpStore %256 %279 
                                Private f32* %280 = OpAccessChain %256 %227 
                                         f32 %281 = OpLoad %280 
                                Private f32* %282 = OpAccessChain %251 %27 
                                                      OpStore %282 %281 
                                Private f32* %283 = OpAccessChain %224 %36 
                                         f32 %284 = OpLoad %283 
                                Private f32* %286 = OpAccessChain %199 %285 
                                                      OpStore %286 %284 
                                       f32_4 %287 = OpLoad %9 
                                       f32_2 %288 = OpVectorShuffle %287 %287 0 0 
                                       f32_2 %291 = OpFMul %288 %290 
                                       f32_2 %294 = OpFAdd %291 %293 
                                       f32_4 %295 = OpLoad %251 
                                       f32_4 %296 = OpVectorShuffle %295 %294 0 4 2 5 
                                                      OpStore %251 %296 
                                       f32_4 %297 = OpLoad %9 
                                       f32_2 %298 = OpVectorShuffle %297 %297 0 0 
                                       f32_2 %299 = OpFMul %298 %290 
                                       f32_2 %301 = OpFAdd %299 %300 
                                       f32_4 %302 = OpLoad %224 
                                       f32_4 %303 = OpVectorShuffle %302 %301 4 1 5 3 
                                                      OpStore %224 %303 
                                       f32_4 %304 = OpLoad %224 
                                       f32_4 %305 = OpLoad %251 
                                       f32_4 %306 = OpFAdd %304 %305 
                                                      OpStore %232 %306 
                                       f32_4 %307 = OpLoad %224 
                                       f32_4 %308 = OpLoad %232 
                                       f32_4 %309 = OpFDiv %307 %308 
                                                      OpStore %224 %309 
                                       f32_4 %310 = OpLoad %224 
                                       f32_4 %315 = OpFAdd %310 %314 
                                                      OpStore %224 %315 
                                       f32_4 %316 = OpLoad %224 
                                       f32_4 %317 = OpVectorShuffle %316 %316 3 0 1 2 
                              Uniform f32_4* %318 = OpAccessChain %63 %165 
                                       f32_4 %319 = OpLoad %318 
                                       f32_4 %320 = OpVectorShuffle %319 %319 0 0 0 0 
                                       f32_4 %321 = OpFMul %317 %320 
                                                      OpStore %224 %321 
                                       f32_4 %322 = OpLoad %224 
                                       f32_3 %323 = OpVectorShuffle %322 %322 1 2 3 
                                       f32_4 %324 = OpLoad %251 
                                       f32_4 %325 = OpVectorShuffle %324 %323 4 1 5 6 
                                                      OpStore %251 %325 
                                       f32_4 %326 = OpLoad %9 
                                       f32_2 %327 = OpVectorShuffle %326 %326 1 1 
                                       f32_2 %328 = OpFMul %327 %290 
                                       f32_2 %329 = OpFAdd %328 %293 
                                       f32_4 %330 = OpLoad %256 
                                       f32_4 %331 = OpVectorShuffle %330 %329 0 4 2 5 
                                                      OpStore %256 %331 
                                       f32_4 %332 = OpLoad %9 
                                       f32_2 %333 = OpVectorShuffle %332 %332 1 1 
                                       f32_2 %334 = OpFMul %333 %290 
                                       f32_2 %335 = OpFAdd %334 %300 
                                       f32_4 %336 = OpLoad %199 
                                       f32_4 %337 = OpVectorShuffle %336 %335 4 1 5 3 
                                                      OpStore %199 %337 
                                       f32_4 %338 = OpLoad %199 
                                       f32_4 %339 = OpLoad %256 
                                       f32_4 %340 = OpFAdd %338 %339 
                                                      OpStore %256 %340 
                                       f32_4 %341 = OpLoad %199 
                                       f32_4 %342 = OpLoad %256 
                                       f32_4 %343 = OpFDiv %341 %342 
                                                      OpStore %199 %343 
                                       f32_4 %344 = OpLoad %199 
                                       f32_4 %345 = OpFAdd %344 %314 
                                                      OpStore %199 %345 
                                       f32_4 %346 = OpLoad %199 
                                       f32_4 %347 = OpVectorShuffle %346 %346 0 3 1 2 
                              Uniform f32_4* %348 = OpAccessChain %63 %165 
                                       f32_4 %349 = OpLoad %348 
                                       f32_4 %350 = OpVectorShuffle %349 %349 1 1 1 1 
                                       f32_4 %351 = OpFMul %347 %350 
                                                      OpStore %199 %351 
                                Private f32* %352 = OpAccessChain %199 %27 
                                         f32 %353 = OpLoad %352 
                                Private f32* %354 = OpAccessChain %251 %227 
                                                      OpStore %354 %353 
                                       f32_4 %356 = OpLoad %53 
                                       f32_4 %357 = OpVectorShuffle %356 %356 0 1 0 1 
                              Uniform f32_4* %358 = OpAccessChain %63 %165 
                                       f32_4 %359 = OpLoad %358 
                                       f32_4 %360 = OpVectorShuffle %359 %359 0 1 0 1 
                                       f32_4 %361 = OpFMul %357 %360 
                                       f32_4 %362 = OpLoad %251 
                                       f32_4 %363 = OpVectorShuffle %362 %362 0 1 2 1 
                                       f32_4 %364 = OpFAdd %361 %363 
                                                      OpStore %355 %364 
                                       f32_4 %367 = OpLoad %355 
                                       f32_2 %368 = OpVectorShuffle %367 %367 2 3 
                                Private f32* %369 = OpAccessChain %9 %36 
                                         f32 %370 = OpLoad %369 
                                         f32 %371 = OpCompositeExtract %368 0 
                                         f32 %372 = OpCompositeExtract %368 1 
                                       f32_3 %373 = OpCompositeConstruct %371 %372 %370 
                                                      OpStore %366 %373 
                         read_only Texture2D %375 = OpLoad %374 
                                     sampler %377 = OpLoad %376 
                  read_only Texture2DSampled %380 = OpSampledImage %375 %377 
                                       f32_3 %381 = OpLoad %366 
                                         f32 %382 = OpCompositeExtract %381 2 
                                         f32 %383 = OpImageSampleDrefExplicitLod %380 %381 %382 Lod %6 
                                Private f32* %384 = OpAccessChain %9 %27 
                                                      OpStore %384 %383 
                                       f32_4 %386 = OpLoad %355 
                                       f32_2 %387 = OpVectorShuffle %386 %386 0 1 
                                Private f32* %388 = OpAccessChain %9 %36 
                                         f32 %389 = OpLoad %388 
                                         f32 %390 = OpCompositeExtract %387 0 
                                         f32 %391 = OpCompositeExtract %387 1 
                                       f32_3 %392 = OpCompositeConstruct %390 %391 %389 
                                                      OpStore %385 %392 
                         read_only Texture2D %395 = OpLoad %374 
                                     sampler %396 = OpLoad %376 
                  read_only Texture2DSampled %397 = OpSampledImage %395 %396 
                                       f32_3 %398 = OpLoad %385 
                                         f32 %399 = OpCompositeExtract %398 2 
                                         f32 %400 = OpImageSampleDrefExplicitLod %397 %398 %399 Lod %6 
                                Private f32* %401 = OpAccessChain %394 %27 
                                                      OpStore %401 %400 
                                       f32_4 %402 = OpLoad %232 
                                       f32_4 %403 = OpLoad %256 
                                       f32_4 %404 = OpVectorShuffle %403 %403 0 0 0 0 
                                       f32_4 %405 = OpFMul %402 %404 
                                                      OpStore %355 %405 
                                Private f32* %406 = OpAccessChain %9 %27 
                                         f32 %407 = OpLoad %406 
                                Private f32* %408 = OpAccessChain %355 %227 
                                         f32 %409 = OpLoad %408 
                                         f32 %410 = OpFMul %407 %409 
                                Private f32* %411 = OpAccessChain %9 %27 
                                                      OpStore %411 %410 
                                Private f32* %412 = OpAccessChain %355 %27 
                                         f32 %413 = OpLoad %412 
                                Private f32* %414 = OpAccessChain %394 %27 
                                         f32 %415 = OpLoad %414 
                                         f32 %416 = OpFMul %413 %415 
                                Private f32* %417 = OpAccessChain %9 %27 
                                         f32 %418 = OpLoad %417 
                                         f32 %419 = OpFAdd %416 %418 
                                Private f32* %420 = OpAccessChain %9 %27 
                                                      OpStore %420 %419 
                                       f32_4 %421 = OpLoad %53 
                                       f32_2 %422 = OpVectorShuffle %421 %421 0 1 
                              Uniform f32_4* %423 = OpAccessChain %63 %165 
                                       f32_4 %424 = OpLoad %423 
                                       f32_2 %425 = OpVectorShuffle %424 %424 0 1 
                                       f32_2 %426 = OpFMul %422 %425 
                                       f32_4 %427 = OpLoad %251 
                                       f32_2 %428 = OpVectorShuffle %427 %427 3 1 
                                       f32_2 %429 = OpFAdd %426 %428 
                                       f32_3 %430 = OpLoad %394 
                                       f32_3 %431 = OpVectorShuffle %430 %429 3 1 4 
                                                      OpStore %394 %431 
                                Private f32* %432 = OpAccessChain %251 %227 
                                         f32 %433 = OpLoad %432 
                                Private f32* %434 = OpAccessChain %224 %227 
                                                      OpStore %434 %433 
                                       f32_4 %435 = OpLoad %53 
                                       f32_2 %436 = OpVectorShuffle %435 %435 0 1 
                              Uniform f32_4* %437 = OpAccessChain %63 %165 
                                       f32_4 %438 = OpLoad %437 
                                       f32_2 %439 = OpVectorShuffle %438 %438 0 1 
                                       f32_2 %440 = OpFMul %436 %439 
                                       f32_4 %441 = OpLoad %224 
                                       f32_2 %442 = OpVectorShuffle %441 %441 0 1 
                                       f32_2 %443 = OpFAdd %440 %442 
                                                      OpStore %193 %443 
                                       f32_2 %445 = OpLoad %193 
                                Private f32* %446 = OpAccessChain %9 %36 
                                         f32 %447 = OpLoad %446 
                                         f32 %448 = OpCompositeExtract %445 0 
                                         f32 %449 = OpCompositeExtract %445 1 
                                       f32_3 %450 = OpCompositeConstruct %448 %449 %447 
                                                      OpStore %444 %450 
                         read_only Texture2D %451 = OpLoad %374 
                                     sampler %452 = OpLoad %376 
                  read_only Texture2DSampled %453 = OpSampledImage %451 %452 
                                       f32_3 %454 = OpLoad %444 
                                         f32 %455 = OpCompositeExtract %454 2 
                                         f32 %456 = OpImageSampleDrefExplicitLod %453 %454 %455 Lod %6 
                                Private f32* %457 = OpAccessChain %193 %27 
                                                      OpStore %457 %456 
                                       f32_3 %459 = OpLoad %394 
                                       f32_2 %460 = OpVectorShuffle %459 %459 0 2 
                                Private f32* %461 = OpAccessChain %9 %36 
                                         f32 %462 = OpLoad %461 
                                         f32 %463 = OpCompositeExtract %460 0 
                                         f32 %464 = OpCompositeExtract %460 1 
                                       f32_3 %465 = OpCompositeConstruct %463 %464 %462 
                                                      OpStore %458 %465 
                         read_only Texture2D %466 = OpLoad %374 
                                     sampler %467 = OpLoad %376 
                  read_only Texture2DSampled %468 = OpSampledImage %466 %467 
                                       f32_3 %469 = OpLoad %458 
                                         f32 %470 = OpCompositeExtract %469 2 
                                         f32 %471 = OpImageSampleDrefExplicitLod %468 %469 %470 Lod %6 
                                Private f32* %472 = OpAccessChain %394 %27 
                                                      OpStore %472 %471 
                                Private f32* %473 = OpAccessChain %355 %36 
                                         f32 %474 = OpLoad %473 
                                Private f32* %475 = OpAccessChain %394 %27 
                                         f32 %476 = OpLoad %475 
                                         f32 %477 = OpFMul %474 %476 
                                Private f32* %478 = OpAccessChain %9 %27 
                                         f32 %479 = OpLoad %478 
                                         f32 %480 = OpFAdd %477 %479 
                                Private f32* %481 = OpAccessChain %9 %27 
                                                      OpStore %481 %480 
                                Private f32* %482 = OpAccessChain %355 %285 
                                         f32 %483 = OpLoad %482 
                                Private f32* %484 = OpAccessChain %193 %27 
                                         f32 %485 = OpLoad %484 
                                         f32 %486 = OpFMul %483 %485 
                                Private f32* %487 = OpAccessChain %9 %27 
                                         f32 %488 = OpLoad %487 
                                         f32 %489 = OpFAdd %486 %488 
                                Private f32* %490 = OpAccessChain %9 %27 
                                                      OpStore %490 %489 
                                Private f32* %491 = OpAccessChain %199 %36 
                                         f32 %492 = OpLoad %491 
                                Private f32* %493 = OpAccessChain %251 %227 
                                                      OpStore %493 %492 
                                       f32_4 %494 = OpLoad %53 
                                       f32_4 %495 = OpVectorShuffle %494 %494 0 1 0 1 
                              Uniform f32_4* %496 = OpAccessChain %63 %165 
                                       f32_4 %497 = OpLoad %496 
                                       f32_4 %498 = OpVectorShuffle %497 %497 0 1 0 1 
                                       f32_4 %499 = OpFMul %495 %498 
                                       f32_4 %500 = OpLoad %251 
                                       f32_4 %501 = OpVectorShuffle %500 %500 0 1 2 1 
                                       f32_4 %502 = OpFAdd %499 %501 
                                                      OpStore %355 %502 
                                       f32_4 %504 = OpLoad %355 
                                       f32_2 %505 = OpVectorShuffle %504 %504 0 1 
                                Private f32* %506 = OpAccessChain %9 %36 
                                         f32 %507 = OpLoad %506 
                                         f32 %508 = OpCompositeExtract %505 0 
                                         f32 %509 = OpCompositeExtract %505 1 
                                       f32_3 %510 = OpCompositeConstruct %508 %509 %507 
                                                      OpStore %503 %510 
                         read_only Texture2D %511 = OpLoad %374 
                                     sampler %512 = OpLoad %376 
                  read_only Texture2DSampled %513 = OpSampledImage %511 %512 
                                       f32_3 %514 = OpLoad %503 
                                         f32 %515 = OpCompositeExtract %514 2 
                                         f32 %516 = OpImageSampleDrefExplicitLod %513 %514 %515 Lod %6 
                                Private f32* %517 = OpAccessChain %394 %27 
                                                      OpStore %517 %516 
                                       f32_4 %519 = OpLoad %355 
                                       f32_2 %520 = OpVectorShuffle %519 %519 2 3 
                                Private f32* %521 = OpAccessChain %9 %36 
                                         f32 %522 = OpLoad %521 
                                         f32 %523 = OpCompositeExtract %520 0 
                                         f32 %524 = OpCompositeExtract %520 1 
                                       f32_3 %525 = OpCompositeConstruct %523 %524 %522 
                                                      OpStore %518 %525 
                         read_only Texture2D %527 = OpLoad %374 
                                     sampler %528 = OpLoad %376 
                  read_only Texture2DSampled %529 = OpSampledImage %527 %528 
                                       f32_3 %530 = OpLoad %518 
                                         f32 %531 = OpCompositeExtract %530 2 
                                         f32 %532 = OpImageSampleDrefExplicitLod %529 %530 %531 Lod %6 
                                                      OpStore %526 %532 
                                       f32_4 %533 = OpLoad %232 
                                       f32_4 %534 = OpLoad %256 
                                       f32_4 %535 = OpVectorShuffle %534 %534 1 1 1 1 
                                       f32_4 %536 = OpFMul %533 %535 
                                                      OpStore %355 %536 
                                Private f32* %537 = OpAccessChain %355 %27 
                                         f32 %538 = OpLoad %537 
                                Private f32* %539 = OpAccessChain %394 %27 
                                         f32 %540 = OpLoad %539 
                                         f32 %541 = OpFMul %538 %540 
                                Private f32* %542 = OpAccessChain %9 %27 
                                         f32 %543 = OpLoad %542 
                                         f32 %544 = OpFAdd %541 %543 
                                Private f32* %545 = OpAccessChain %9 %27 
                                                      OpStore %545 %544 
                                Private f32* %546 = OpAccessChain %355 %227 
                                         f32 %547 = OpLoad %546 
                                         f32 %548 = OpLoad %526 
                                         f32 %549 = OpFMul %547 %548 
                                Private f32* %550 = OpAccessChain %9 %27 
                                         f32 %551 = OpLoad %550 
                                         f32 %552 = OpFAdd %549 %551 
                                Private f32* %553 = OpAccessChain %9 %27 
                                                      OpStore %553 %552 
                                       f32_4 %554 = OpLoad %53 
                                       f32_2 %555 = OpVectorShuffle %554 %554 0 1 
                              Uniform f32_4* %556 = OpAccessChain %63 %165 
                                       f32_4 %557 = OpLoad %556 
                                       f32_2 %558 = OpVectorShuffle %557 %557 0 1 
                                       f32_2 %559 = OpFMul %555 %558 
                                       f32_4 %560 = OpLoad %251 
                                       f32_2 %561 = OpVectorShuffle %560 %560 3 1 
                                       f32_2 %562 = OpFAdd %559 %561 
                                       f32_3 %563 = OpLoad %394 
                                       f32_3 %564 = OpVectorShuffle %563 %562 3 1 4 
                                                      OpStore %394 %564 
                                Private f32* %565 = OpAccessChain %251 %227 
                                         f32 %566 = OpLoad %565 
                                Private f32* %567 = OpAccessChain %224 %36 
                                                      OpStore %567 %566 
                                       f32_4 %568 = OpLoad %53 
                                       f32_2 %569 = OpVectorShuffle %568 %568 0 1 
                              Uniform f32_4* %570 = OpAccessChain %63 %165 
                                       f32_4 %571 = OpLoad %570 
                                       f32_2 %572 = OpVectorShuffle %571 %571 0 1 
                                       f32_2 %573 = OpFMul %569 %572 
                                       f32_4 %574 = OpLoad %224 
                                       f32_2 %575 = OpVectorShuffle %574 %574 0 2 
                                       f32_2 %576 = OpFAdd %573 %575 
                                                      OpStore %193 %576 
                                       f32_2 %578 = OpLoad %193 
                                Private f32* %579 = OpAccessChain %9 %36 
                                         f32 %580 = OpLoad %579 
                                         f32 %581 = OpCompositeExtract %578 0 
                                         f32 %582 = OpCompositeExtract %578 1 
                                       f32_3 %583 = OpCompositeConstruct %581 %582 %580 
                                                      OpStore %577 %583 
                         read_only Texture2D %584 = OpLoad %374 
                                     sampler %585 = OpLoad %376 
                  read_only Texture2DSampled %586 = OpSampledImage %584 %585 
                                       f32_3 %587 = OpLoad %577 
                                         f32 %588 = OpCompositeExtract %587 2 
                                         f32 %589 = OpImageSampleDrefExplicitLod %586 %587 %588 Lod %6 
                                Private f32* %590 = OpAccessChain %193 %27 
                                                      OpStore %590 %589 
                                       f32_3 %592 = OpLoad %394 
                                       f32_2 %593 = OpVectorShuffle %592 %592 0 2 
                                Private f32* %594 = OpAccessChain %9 %36 
                                         f32 %595 = OpLoad %594 
                                         f32 %596 = OpCompositeExtract %593 0 
                                         f32 %597 = OpCompositeExtract %593 1 
                                       f32_3 %598 = OpCompositeConstruct %596 %597 %595 
                                                      OpStore %591 %598 
                         read_only Texture2D %599 = OpLoad %374 
                                     sampler %600 = OpLoad %376 
                  read_only Texture2DSampled %601 = OpSampledImage %599 %600 
                                       f32_3 %602 = OpLoad %591 
                                         f32 %603 = OpCompositeExtract %602 2 
                                         f32 %604 = OpImageSampleDrefExplicitLod %601 %602 %603 Lod %6 
                                Private f32* %605 = OpAccessChain %394 %27 
                                                      OpStore %605 %604 
                                Private f32* %606 = OpAccessChain %355 %36 
                                         f32 %607 = OpLoad %606 
                                Private f32* %608 = OpAccessChain %394 %27 
                                         f32 %609 = OpLoad %608 
                                         f32 %610 = OpFMul %607 %609 
                                Private f32* %611 = OpAccessChain %9 %27 
                                         f32 %612 = OpLoad %611 
                                         f32 %613 = OpFAdd %610 %612 
                                Private f32* %614 = OpAccessChain %9 %27 
                                                      OpStore %614 %613 
                                Private f32* %615 = OpAccessChain %355 %285 
                                         f32 %616 = OpLoad %615 
                                Private f32* %617 = OpAccessChain %193 %27 
                                         f32 %618 = OpLoad %617 
                                         f32 %619 = OpFMul %616 %618 
                                Private f32* %620 = OpAccessChain %9 %27 
                                         f32 %621 = OpLoad %620 
                                         f32 %622 = OpFAdd %619 %621 
                                Private f32* %623 = OpAccessChain %9 %27 
                                                      OpStore %623 %622 
                                Private f32* %624 = OpAccessChain %199 %285 
                                         f32 %625 = OpLoad %624 
                                Private f32* %626 = OpAccessChain %251 %227 
                                                      OpStore %626 %625 
                                       f32_4 %627 = OpLoad %53 
                                       f32_4 %628 = OpVectorShuffle %627 %627 0 1 0 1 
                              Uniform f32_4* %629 = OpAccessChain %63 %165 
                                       f32_4 %630 = OpLoad %629 
                                       f32_4 %631 = OpVectorShuffle %630 %630 0 1 0 1 
                                       f32_4 %632 = OpFMul %628 %631 
                                       f32_4 %633 = OpLoad %251 
                                       f32_4 %634 = OpVectorShuffle %633 %633 0 1 2 1 
                                       f32_4 %635 = OpFAdd %632 %634 
                                                      OpStore %355 %635 
                                       f32_4 %637 = OpLoad %355 
                                       f32_2 %638 = OpVectorShuffle %637 %637 0 1 
                                Private f32* %639 = OpAccessChain %9 %36 
                                         f32 %640 = OpLoad %639 
                                         f32 %641 = OpCompositeExtract %638 0 
                                         f32 %642 = OpCompositeExtract %638 1 
                                       f32_3 %643 = OpCompositeConstruct %641 %642 %640 
                                                      OpStore %636 %643 
                         read_only Texture2D %644 = OpLoad %374 
                                     sampler %645 = OpLoad %376 
                  read_only Texture2DSampled %646 = OpSampledImage %644 %645 
                                       f32_3 %647 = OpLoad %636 
                                         f32 %648 = OpCompositeExtract %647 2 
                                         f32 %649 = OpImageSampleDrefExplicitLod %646 %647 %648 Lod %6 
                                Private f32* %650 = OpAccessChain %394 %27 
                                                      OpStore %650 %649 
                                       f32_4 %652 = OpLoad %355 
                                       f32_2 %653 = OpVectorShuffle %652 %652 2 3 
                                Private f32* %654 = OpAccessChain %9 %36 
                                         f32 %655 = OpLoad %654 
                                         f32 %656 = OpCompositeExtract %653 0 
                                         f32 %657 = OpCompositeExtract %653 1 
                                       f32_3 %658 = OpCompositeConstruct %656 %657 %655 
                                                      OpStore %651 %658 
                         read_only Texture2D %659 = OpLoad %374 
                                     sampler %660 = OpLoad %376 
                  read_only Texture2DSampled %661 = OpSampledImage %659 %660 
                                       f32_3 %662 = OpLoad %651 
                                         f32 %663 = OpCompositeExtract %662 2 
                                         f32 %664 = OpImageSampleDrefExplicitLod %661 %662 %663 Lod %6 
                                                      OpStore %526 %664 
                                       f32_4 %665 = OpLoad %232 
                                       f32_4 %666 = OpLoad %256 
                                       f32_4 %667 = OpVectorShuffle %666 %666 2 2 2 2 
                                       f32_4 %668 = OpFMul %665 %667 
                                                      OpStore %355 %668 
                                       f32_4 %669 = OpLoad %232 
                                       f32_4 %670 = OpLoad %256 
                                       f32_4 %671 = OpVectorShuffle %670 %670 3 3 3 3 
                                       f32_4 %672 = OpFMul %669 %671 
                                                      OpStore %232 %672 
                                Private f32* %673 = OpAccessChain %355 %27 
                                         f32 %674 = OpLoad %673 
                                Private f32* %675 = OpAccessChain %394 %27 
                                         f32 %676 = OpLoad %675 
                                         f32 %677 = OpFMul %674 %676 
                                Private f32* %678 = OpAccessChain %9 %27 
                                         f32 %679 = OpLoad %678 
                                         f32 %680 = OpFAdd %677 %679 
                                Private f32* %681 = OpAccessChain %9 %27 
                                                      OpStore %681 %680 
                                Private f32* %682 = OpAccessChain %355 %227 
                                         f32 %683 = OpLoad %682 
                                         f32 %684 = OpLoad %526 
                                         f32 %685 = OpFMul %683 %684 
                                Private f32* %686 = OpAccessChain %9 %27 
                                         f32 %687 = OpLoad %686 
                                         f32 %688 = OpFAdd %685 %687 
                                Private f32* %689 = OpAccessChain %9 %27 
                                                      OpStore %689 %688 
                                       f32_4 %690 = OpLoad %53 
                                       f32_2 %691 = OpVectorShuffle %690 %690 0 1 
                              Uniform f32_4* %692 = OpAccessChain %63 %165 
                                       f32_4 %693 = OpLoad %692 
                                       f32_2 %694 = OpVectorShuffle %693 %693 0 1 
                                       f32_2 %695 = OpFMul %691 %694 
                                       f32_4 %696 = OpLoad %251 
                                       f32_2 %697 = OpVectorShuffle %696 %696 3 1 
                                       f32_2 %698 = OpFAdd %695 %697 
                                       f32_3 %699 = OpLoad %394 
                                       f32_3 %700 = OpVectorShuffle %699 %698 3 1 4 
                                                      OpStore %394 %700 
                                       f32_4 %701 = OpLoad %251 
                                       f32_3 %702 = OpVectorShuffle %701 %701 0 2 3 
                                       f32_4 %703 = OpLoad %199 
                                       f32_4 %704 = OpVectorShuffle %703 %702 4 1 5 6 
                                                      OpStore %199 %704 
                                Private f32* %705 = OpAccessChain %251 %227 
                                         f32 %706 = OpLoad %705 
                                Private f32* %707 = OpAccessChain %224 %285 
                                                      OpStore %707 %706 
                                       f32_4 %708 = OpLoad %53 
                                       f32_2 %709 = OpVectorShuffle %708 %708 0 1 
                              Uniform f32_4* %710 = OpAccessChain %63 %165 
                                       f32_4 %711 = OpLoad %710 
                                       f32_2 %712 = OpVectorShuffle %711 %711 0 1 
                                       f32_2 %713 = OpFMul %709 %712 
                                       f32_4 %714 = OpLoad %224 
                                       f32_2 %715 = OpVectorShuffle %714 %714 0 3 
                                       f32_2 %716 = OpFAdd %713 %715 
                                                      OpStore %193 %716 
                                       f32_2 %718 = OpLoad %193 
                                Private f32* %719 = OpAccessChain %9 %36 
                                         f32 %720 = OpLoad %719 
                                         f32 %721 = OpCompositeExtract %718 0 
                                         f32 %722 = OpCompositeExtract %718 1 
                                       f32_3 %723 = OpCompositeConstruct %721 %722 %720 
                                                      OpStore %717 %723 
                         read_only Texture2D %724 = OpLoad %374 
                                     sampler %725 = OpLoad %376 
                  read_only Texture2DSampled %726 = OpSampledImage %724 %725 
                                       f32_3 %727 = OpLoad %717 
                                         f32 %728 = OpCompositeExtract %727 2 
                                         f32 %729 = OpImageSampleDrefExplicitLod %726 %727 %728 Lod %6 
                                Private f32* %730 = OpAccessChain %193 %27 
                                                      OpStore %730 %729 
                                       f32_3 %732 = OpLoad %394 
                                       f32_2 %733 = OpVectorShuffle %732 %732 0 2 
                                Private f32* %734 = OpAccessChain %9 %36 
                                         f32 %735 = OpLoad %734 
                                         f32 %736 = OpCompositeExtract %733 0 
                                         f32 %737 = OpCompositeExtract %733 1 
                                       f32_3 %738 = OpCompositeConstruct %736 %737 %735 
                                                      OpStore %731 %738 
                         read_only Texture2D %739 = OpLoad %374 
                                     sampler %740 = OpLoad %376 
                  read_only Texture2DSampled %741 = OpSampledImage %739 %740 
                                       f32_3 %742 = OpLoad %731 
                                         f32 %743 = OpCompositeExtract %742 2 
                                         f32 %744 = OpImageSampleDrefExplicitLod %741 %742 %743 Lod %6 
                                Private f32* %745 = OpAccessChain %394 %27 
                                                      OpStore %745 %744 
                                Private f32* %746 = OpAccessChain %355 %36 
                                         f32 %747 = OpLoad %746 
                                Private f32* %748 = OpAccessChain %394 %27 
                                         f32 %749 = OpLoad %748 
                                         f32 %750 = OpFMul %747 %749 
                                Private f32* %751 = OpAccessChain %9 %27 
                                         f32 %752 = OpLoad %751 
                                         f32 %753 = OpFAdd %750 %752 
                                Private f32* %754 = OpAccessChain %9 %27 
                                                      OpStore %754 %753 
                                Private f32* %755 = OpAccessChain %355 %285 
                                         f32 %756 = OpLoad %755 
                                Private f32* %757 = OpAccessChain %193 %27 
                                         f32 %758 = OpLoad %757 
                                         f32 %759 = OpFMul %756 %758 
                                Private f32* %760 = OpAccessChain %9 %27 
                                         f32 %761 = OpLoad %760 
                                         f32 %762 = OpFAdd %759 %761 
                                Private f32* %763 = OpAccessChain %9 %27 
                                                      OpStore %763 %762 
                                       f32_4 %764 = OpLoad %53 
                                       f32_4 %765 = OpVectorShuffle %764 %764 0 1 0 1 
                              Uniform f32_4* %766 = OpAccessChain %63 %165 
                                       f32_4 %767 = OpLoad %766 
                                       f32_4 %768 = OpVectorShuffle %767 %767 0 1 0 1 
                                       f32_4 %769 = OpFMul %765 %768 
                                       f32_4 %770 = OpLoad %199 
                                       f32_4 %771 = OpVectorShuffle %770 %770 0 1 2 1 
                                       f32_4 %772 = OpFAdd %769 %771 
                                                      OpStore %251 %772 
                                       f32_4 %773 = OpLoad %53 
                                       f32_2 %774 = OpVectorShuffle %773 %773 0 1 
                              Uniform f32_4* %775 = OpAccessChain %63 %165 
                                       f32_4 %776 = OpLoad %775 
                                       f32_2 %777 = OpVectorShuffle %776 %776 0 1 
                                       f32_2 %778 = OpFMul %774 %777 
                                       f32_4 %779 = OpLoad %199 
                                       f32_2 %780 = OpVectorShuffle %779 %779 3 1 
                                       f32_2 %781 = OpFAdd %778 %780 
                                       f32_3 %782 = OpLoad %394 
                                       f32_3 %783 = OpVectorShuffle %782 %781 3 1 4 
                                                      OpStore %394 %783 
                                Private f32* %784 = OpAccessChain %199 %227 
                                         f32 %785 = OpLoad %784 
                                Private f32* %786 = OpAccessChain %224 %227 
                                                      OpStore %786 %785 
                                       f32_4 %787 = OpLoad %53 
                                       f32_2 %788 = OpVectorShuffle %787 %787 0 1 
                              Uniform f32_4* %789 = OpAccessChain %63 %165 
                                       f32_4 %790 = OpLoad %789 
                                       f32_2 %791 = OpVectorShuffle %790 %790 0 1 
                                       f32_2 %792 = OpFMul %788 %791 
                                       f32_4 %793 = OpLoad %224 
                                       f32_2 %794 = OpVectorShuffle %793 %793 0 1 
                                       f32_2 %795 = OpFAdd %792 %794 
                                       f32_4 %796 = OpLoad %53 
                                       f32_4 %797 = OpVectorShuffle %796 %795 4 5 2 3 
                                                      OpStore %53 %797 
                                       f32_4 %799 = OpLoad %53 
                                       f32_2 %800 = OpVectorShuffle %799 %799 0 1 
                                Private f32* %801 = OpAccessChain %9 %36 
                                         f32 %802 = OpLoad %801 
                                         f32 %803 = OpCompositeExtract %800 0 
                                         f32 %804 = OpCompositeExtract %800 1 
                                       f32_3 %805 = OpCompositeConstruct %803 %804 %802 
                                                      OpStore %798 %805 
                         read_only Texture2D %806 = OpLoad %374 
                                     sampler %807 = OpLoad %376 
                  read_only Texture2DSampled %808 = OpSampledImage %806 %807 
                                       f32_3 %809 = OpLoad %798 
                                         f32 %810 = OpCompositeExtract %809 2 
                                         f32 %811 = OpImageSampleDrefExplicitLod %808 %809 %810 Lod %6 
                                Private f32* %812 = OpAccessChain %53 %27 
                                                      OpStore %812 %811 
                                       f32_3 %814 = OpLoad %394 
                                       f32_2 %815 = OpVectorShuffle %814 %814 0 2 
                                Private f32* %816 = OpAccessChain %9 %36 
                                         f32 %817 = OpLoad %816 
                                         f32 %818 = OpCompositeExtract %815 0 
                                         f32 %819 = OpCompositeExtract %815 1 
                                       f32_3 %820 = OpCompositeConstruct %818 %819 %817 
                                                      OpStore %813 %820 
                         read_only Texture2D %821 = OpLoad %374 
                                     sampler %822 = OpLoad %376 
                  read_only Texture2DSampled %823 = OpSampledImage %821 %822 
                                       f32_3 %824 = OpLoad %813 
                                         f32 %825 = OpCompositeExtract %824 2 
                                         f32 %826 = OpImageSampleDrefExplicitLod %823 %824 %825 Lod %6 
                                Private f32* %827 = OpAccessChain %394 %27 
                                                      OpStore %827 %826 
                                       f32_4 %829 = OpLoad %251 
                                       f32_2 %830 = OpVectorShuffle %829 %829 0 1 
                                Private f32* %831 = OpAccessChain %9 %36 
                                         f32 %832 = OpLoad %831 
                                         f32 %833 = OpCompositeExtract %830 0 
                                         f32 %834 = OpCompositeExtract %830 1 
                                       f32_3 %835 = OpCompositeConstruct %833 %834 %832 
                                                      OpStore %828 %835 
                         read_only Texture2D %836 = OpLoad %374 
                                     sampler %837 = OpLoad %376 
                  read_only Texture2DSampled %838 = OpSampledImage %836 %837 
                                       f32_3 %839 = OpLoad %828 
                                         f32 %840 = OpCompositeExtract %839 2 
                                         f32 %841 = OpImageSampleDrefExplicitLod %838 %839 %840 Lod %6 
                                                      OpStore %526 %841 
                                       f32_4 %843 = OpLoad %251 
                                       f32_2 %844 = OpVectorShuffle %843 %843 2 3 
                                Private f32* %845 = OpAccessChain %9 %36 
                                         f32 %846 = OpLoad %845 
                                         f32 %847 = OpCompositeExtract %844 0 
                                         f32 %848 = OpCompositeExtract %844 1 
                                       f32_3 %849 = OpCompositeConstruct %847 %848 %846 
                                                      OpStore %842 %849 
                         read_only Texture2D %851 = OpLoad %374 
                                     sampler %852 = OpLoad %376 
                  read_only Texture2DSampled %853 = OpSampledImage %851 %852 
                                       f32_3 %854 = OpLoad %842 
                                         f32 %855 = OpCompositeExtract %854 2 
                                         f32 %856 = OpImageSampleDrefExplicitLod %853 %854 %855 Lod %6 
                                                      OpStore %850 %856 
                                Private f32* %857 = OpAccessChain %232 %27 
                                         f32 %858 = OpLoad %857 
                                         f32 %859 = OpLoad %526 
                                         f32 %860 = OpFMul %858 %859 
                                Private f32* %861 = OpAccessChain %9 %27 
                                         f32 %862 = OpLoad %861 
                                         f32 %863 = OpFAdd %860 %862 
                                Private f32* %864 = OpAccessChain %9 %27 
                                                      OpStore %864 %863 
                                Private f32* %865 = OpAccessChain %232 %227 
                                         f32 %866 = OpLoad %865 
                                         f32 %867 = OpLoad %850 
                                         f32 %868 = OpFMul %866 %867 
                                Private f32* %869 = OpAccessChain %9 %27 
                                         f32 %870 = OpLoad %869 
                                         f32 %871 = OpFAdd %868 %870 
                                Private f32* %872 = OpAccessChain %9 %27 
                                                      OpStore %872 %871 
                                Private f32* %873 = OpAccessChain %232 %36 
                                         f32 %874 = OpLoad %873 
                                Private f32* %875 = OpAccessChain %394 %27 
                                         f32 %876 = OpLoad %875 
                                         f32 %877 = OpFMul %874 %876 
                                Private f32* %878 = OpAccessChain %9 %27 
                                         f32 %879 = OpLoad %878 
                                         f32 %880 = OpFAdd %877 %879 
                                Private f32* %881 = OpAccessChain %9 %27 
                                                      OpStore %881 %880 
                                Private f32* %882 = OpAccessChain %232 %285 
                                         f32 %883 = OpLoad %882 
                                Private f32* %884 = OpAccessChain %53 %27 
                                         f32 %885 = OpLoad %884 
                                         f32 %886 = OpFMul %883 %885 
                                Private f32* %887 = OpAccessChain %9 %27 
                                         f32 %888 = OpLoad %887 
                                         f32 %889 = OpFAdd %886 %888 
                                Private f32* %890 = OpAccessChain %9 %27 
                                                      OpStore %890 %889 
                                Uniform f32* %892 = OpAccessChain %63 %87 %27 
                                         f32 %893 = OpLoad %892 
                                         f32 %894 = OpFNegate %893 
                                         f32 %895 = OpFAdd %894 %34 
                                Private f32* %896 = OpAccessChain %394 %27 
                                                      OpStore %896 %895 
                                       f32_4 %899 = OpLoad %9 
                                       f32_4 %900 = OpVectorShuffle %899 %899 0 0 0 0 
                                       f32_3 %901 = OpLoad %394 
                                       f32_4 %902 = OpVectorShuffle %901 %901 0 0 0 0 
                                       f32_4 %903 = OpFMul %900 %902 
                              Uniform f32_4* %904 = OpAccessChain %63 %87 
                                       f32_4 %905 = OpLoad %904 
                                       f32_4 %906 = OpVectorShuffle %905 %905 0 0 0 0 
                                       f32_4 %907 = OpFAdd %903 %906 
                                                      OpStore %898 %907 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
}
Program "fp" {
SubProgram "d3d11 " {
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
""
}
SubProgram "vulkan " {
""
}
SubProgram "d3d11 " {
Keywords { "SHADOWS_SPLIT_SPHERES" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "SHADOWS_SPLIT_SPHERES" }
""
}
SubProgram "vulkan " {
Keywords { "SHADOWS_SPLIT_SPHERES" }
""
}
SubProgram "d3d11 " {
Keywords { "SHADOWS_SINGLE_CASCADE" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "SHADOWS_SINGLE_CASCADE" }
""
}
SubProgram "vulkan " {
Keywords { "SHADOWS_SINGLE_CASCADE" }
""
}
SubProgram "d3d11 " {
Keywords { "SHADOWS_SINGLE_CASCADE" "SHADOWS_SPLIT_SPHERES" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "SHADOWS_SINGLE_CASCADE" "SHADOWS_SPLIT_SPHERES" }
""
}
SubProgram "vulkan " {
Keywords { "SHADOWS_SINGLE_CASCADE" "SHADOWS_SPLIT_SPHERES" }
""
}
}
}
}
}