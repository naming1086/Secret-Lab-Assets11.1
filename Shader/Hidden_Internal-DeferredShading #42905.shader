//////////////////////////////////////////
//
// NOTE: This is *not* a valid shader file
//
///////////////////////////////////////////
Shader "Hidden/Internal-DeferredShading" {
Properties {
_LightTexture0 ("", any) = "" { }
_LightTextureB0 ("", 2D) = "" { }
_ShadowMapTexture ("", any) = "" { }
_SrcBlend ("", Float) = 1
_DstBlend ("", Float) = 1
}
SubShader {
 Pass {
  Tags { "SHADOWSUPPORT" = "true" }
  Blend Zero Zero, Zero Zero
  ZWrite Off
  GpuProgramID 7517
Program "vp" {
SubProgram "d3d11 " {
Keywords { "POINT" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "POINT" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
UNITY_LOCATION(0) uniform  sampler2D _CameraDepthTexture;
UNITY_LOCATION(1) uniform  sampler2D _LightTextureB0;
UNITY_LOCATION(2) uniform  sampler2D _CameraGBufferTexture0;
UNITY_LOCATION(3) uniform  sampler2D _CameraGBufferTexture1;
UNITY_LOCATION(4) uniform  sampler2D _CameraGBufferTexture2;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
float u_xlat6;
float u_xlat7;
float u_xlat12;
float u_xlat13;
float u_xlat18;
bool u_xlatb18;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat2 = texture(_CameraDepthTexture, u_xlat1.xy);
    u_xlat18 = _ZBufferParams.x * u_xlat2.x + _ZBufferParams.y;
    u_xlat18 = float(1.0) / u_xlat18;
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat0.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat2.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat0.xyz = u_xlat0.xyz + (-_LightPos.xyz);
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat13 = inversesqrt(u_xlat18);
    u_xlat18 = u_xlat18 * _LightPos.w;
    u_xlat3 = texture(_LightTextureB0, vec2(u_xlat18));
    u_xlat3.xyz = u_xlat3.xxx * _LightColor.xyz;
    u_xlat4.xyz = (-u_xlat0.xyz) * vec3(u_xlat13) + (-u_xlat2.xyz);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat13);
    u_xlat18 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat18 = max(u_xlat18, 0.00100000005);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat4.xyz = vec3(u_xlat18) * u_xlat4.xyz;
    u_xlat5 = texture(_CameraGBufferTexture2, u_xlat1.xy);
    u_xlat5.xyz = u_xlat5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat18 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat5.xyz = vec3(u_xlat18) * u_xlat5.xyz;
    u_xlat18 = dot(u_xlat5.xyz, u_xlat4.xyz);
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
    u_xlat13 = dot((-u_xlat0.xyz), u_xlat4.xyz);
    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
    u_xlat0.x = dot(u_xlat5.xyz, (-u_xlat0.xyz));
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat6 = dot(u_xlat5.xyz, (-u_xlat2.xyz));
    u_xlat2 = texture(_CameraGBufferTexture1, u_xlat1.xy);
    u_xlat4 = texture(_CameraGBufferTexture0, u_xlat1.xy);
    u_xlat5 = (-u_xlat2.wxyz) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat12 = u_xlat5.x * u_xlat5.x;
    u_xlat12 = max(u_xlat12, 0.00200000009);
    u_xlat1.x = u_xlat12 * u_xlat12;
    u_xlat7 = u_xlat18 * u_xlat1.x + (-u_xlat18);
    u_xlat18 = u_xlat7 * u_xlat18 + 1.0;
    u_xlat18 = u_xlat18 * u_xlat18 + 1.00000001e-07;
    u_xlat1.x = u_xlat1.x * 0.318309873;
    u_xlat18 = u_xlat1.x / u_xlat18;
    u_xlat1.x = (-u_xlat12) + 1.0;
    u_xlat7 = abs(u_xlat6) * u_xlat1.x + u_xlat12;
    u_xlat12 = u_xlat0.x * u_xlat1.x + u_xlat12;
    u_xlat12 = u_xlat12 * abs(u_xlat6);
    u_xlat6 = -abs(u_xlat6) + 1.0;
    u_xlat12 = u_xlat0.x * u_xlat7 + u_xlat12;
    u_xlat12 = u_xlat12 + 9.99999975e-06;
    u_xlat12 = 0.5 / u_xlat12;
    u_xlat12 = u_xlat18 * u_xlat12;
    u_xlat12 = u_xlat12 * 3.14159274;
    u_xlat12 = u_xlat0.x * u_xlat12;
    u_xlat12 = max(u_xlat12, 0.0);
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlatb18 = u_xlat18!=0.0;
    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
    u_xlat12 = u_xlat18 * u_xlat12;
    u_xlat1.xyw = u_xlat3.xyz * vec3(u_xlat12);
    u_xlat12 = (-u_xlat13) + 1.0;
    u_xlat18 = u_xlat12 * u_xlat12;
    u_xlat18 = u_xlat18 * u_xlat18;
    u_xlat12 = u_xlat12 * u_xlat18;
    u_xlat2.xyz = u_xlat5.yzw * vec3(u_xlat12) + u_xlat2.xyz;
    u_xlat1.xyw = u_xlat1.xyw * u_xlat2.xyz;
    u_xlat12 = u_xlat6 * u_xlat6;
    u_xlat12 = u_xlat12 * u_xlat12;
    u_xlat6 = u_xlat6 * u_xlat12;
    u_xlat12 = u_xlat13 + u_xlat13;
    u_xlat12 = u_xlat13 * u_xlat12;
    u_xlat12 = u_xlat12 * u_xlat5.x + -0.5;
    u_xlat6 = u_xlat12 * u_xlat6 + 1.0;
    u_xlat18 = (-u_xlat0.x) + 1.0;
    u_xlat13 = u_xlat18 * u_xlat18;
    u_xlat13 = u_xlat13 * u_xlat13;
    u_xlat18 = u_xlat18 * u_xlat13;
    u_xlat12 = u_xlat12 * u_xlat18 + 1.0;
    u_xlat6 = u_xlat6 * u_xlat12;
    u_xlat0.x = u_xlat0.x * u_xlat6;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat0.xyz = u_xlat4.xyz * u_xlat0.xyz + u_xlat1.xyw;
    u_xlat0.w = 1.0;
    SV_Target0 = exp2((-u_xlat0));
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "POINT" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 192
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %80 %102 %169 %175 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpMemberDecorate %78 0 BuiltIn 78 
                                                      OpMemberDecorate %78 1 BuiltIn 78 
                                                      OpMemberDecorate %78 2 BuiltIn 78 
                                                      OpDecorate %78 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 102 
                                                      OpDecorate %169 Location 169 
                                                      OpDecorate vs_TEXCOORD1 Location 175 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %16 %17 %18 %6 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 1 
                                              %24 = OpTypePointer Uniform %7 
                                          i32 %28 = OpConstant 0 
                                          i32 %36 = OpConstant 2 
                                          i32 %45 = OpConstant 3 
                               Private f32_4* %49 = OpVariable Private 
                                          u32 %76 = OpConstant 1 
                                              %77 = OpTypeArray %6 %76 
                                              %78 = OpTypeStruct %7 %6 %77 
                                              %79 = OpTypePointer Output %78 
         Output struct {f32_4; f32; f32[1];}* %80 = OpVariable Output 
                                              %82 = OpTypePointer Output %7 
                                              %84 = OpTypePointer Private %6 
                                          u32 %87 = OpConstant 0 
                                              %88 = OpTypePointer Uniform %6 
                               Private f32_4* %93 = OpVariable Private 
                                              %94 = OpTypeVector %6 3 
                                          f32 %97 = OpConstant 3.674022E-40 
                                        f32_3 %98 = OpConstantComposite %97 %97 %97 
                       Output f32_4* vs_TEXCOORD0 = OpVariable Output 
                                             %103 = OpTypeVector %6 2 
                                         f32 %158 = OpConstant 3.674022E-40 
                                         f32 %159 = OpConstant 3.674022E-40 
                                       f32_3 %160 = OpConstantComposite %158 %158 %159 
                                             %168 = OpTypePointer Input %94 
                                Input f32_3* %169 = OpVariable Input 
                                             %174 = OpTypePointer Output %94 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                                         i32 %176 = OpConstant 4 
                                             %186 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %25 = OpAccessChain %21 %23 %23 
                                        f32_4 %26 = OpLoad %25 
                                        f32_4 %27 = OpFMul %13 %26 
                                                      OpStore %9 %27 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %28 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %44 = OpLoad %9 
                               Uniform f32_4* %46 = OpAccessChain %21 %23 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_4 %48 = OpFAdd %44 %47 
                                                      OpStore %9 %48 
                                        f32_4 %50 = OpLoad %9 
                                        f32_4 %51 = OpVectorShuffle %50 %50 1 1 1 1 
                               Uniform f32_4* %52 = OpAccessChain %21 %45 %23 
                                        f32_4 %53 = OpLoad %52 
                                        f32_4 %54 = OpFMul %51 %53 
                                                      OpStore %49 %54 
                               Uniform f32_4* %55 = OpAccessChain %21 %45 %28 
                                        f32_4 %56 = OpLoad %55 
                                        f32_4 %57 = OpLoad %9 
                                        f32_4 %58 = OpVectorShuffle %57 %57 0 0 0 0 
                                        f32_4 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %49 
                                        f32_4 %61 = OpFAdd %59 %60 
                                                      OpStore %49 %61 
                               Uniform f32_4* %62 = OpAccessChain %21 %45 %36 
                                        f32_4 %63 = OpLoad %62 
                                        f32_4 %64 = OpLoad %9 
                                        f32_4 %65 = OpVectorShuffle %64 %64 2 2 2 2 
                                        f32_4 %66 = OpFMul %63 %65 
                                        f32_4 %67 = OpLoad %49 
                                        f32_4 %68 = OpFAdd %66 %67 
                                                      OpStore %49 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %45 %45 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %9 
                                        f32_4 %72 = OpVectorShuffle %71 %71 3 3 3 3 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %49 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %49 %75 
                                        f32_4 %81 = OpLoad %49 
                                Output f32_4* %83 = OpAccessChain %80 %28 
                                                      OpStore %83 %81 
                                 Private f32* %85 = OpAccessChain %49 %76 
                                          f32 %86 = OpLoad %85 
                                 Uniform f32* %89 = OpAccessChain %21 %28 %87 
                                          f32 %90 = OpLoad %89 
                                          f32 %91 = OpFMul %86 %90 
                                 Private f32* %92 = OpAccessChain %49 %76 
                                                      OpStore %92 %91 
                                        f32_4 %95 = OpLoad %49 
                                        f32_3 %96 = OpVectorShuffle %95 %95 0 3 1 
                                        f32_3 %99 = OpFMul %96 %98 
                                       f32_4 %100 = OpLoad %93 
                                       f32_4 %101 = OpVectorShuffle %100 %99 4 1 5 6 
                                                      OpStore %93 %101 
                                       f32_4 %104 = OpLoad %49 
                                       f32_2 %105 = OpVectorShuffle %104 %104 2 3 
                                       f32_4 %106 = OpLoad vs_TEXCOORD0 
                                       f32_4 %107 = OpVectorShuffle %106 %105 0 1 4 5 
                                                      OpStore vs_TEXCOORD0 %107 
                                       f32_4 %108 = OpLoad %93 
                                       f32_2 %109 = OpVectorShuffle %108 %108 2 2 
                                       f32_4 %110 = OpLoad %93 
                                       f32_2 %111 = OpVectorShuffle %110 %110 0 3 
                                       f32_2 %112 = OpFAdd %109 %111 
                                       f32_4 %113 = OpLoad vs_TEXCOORD0 
                                       f32_4 %114 = OpVectorShuffle %113 %112 4 5 2 3 
                                                      OpStore vs_TEXCOORD0 %114 
                                       f32_4 %115 = OpLoad %9 
                                       f32_3 %116 = OpVectorShuffle %115 %115 1 1 1 
                              Uniform f32_4* %117 = OpAccessChain %21 %36 %23 
                                       f32_4 %118 = OpLoad %117 
                                       f32_3 %119 = OpVectorShuffle %118 %118 0 1 2 
                                       f32_3 %120 = OpFMul %116 %119 
                                       f32_4 %121 = OpLoad %49 
                                       f32_4 %122 = OpVectorShuffle %121 %120 4 5 6 3 
                                                      OpStore %49 %122 
                              Uniform f32_4* %123 = OpAccessChain %21 %36 %28 
                                       f32_4 %124 = OpLoad %123 
                                       f32_3 %125 = OpVectorShuffle %124 %124 0 1 2 
                                       f32_4 %126 = OpLoad %9 
                                       f32_3 %127 = OpVectorShuffle %126 %126 0 0 0 
                                       f32_3 %128 = OpFMul %125 %127 
                                       f32_4 %129 = OpLoad %49 
                                       f32_3 %130 = OpVectorShuffle %129 %129 0 1 2 
                                       f32_3 %131 = OpFAdd %128 %130 
                                       f32_4 %132 = OpLoad %49 
                                       f32_4 %133 = OpVectorShuffle %132 %131 4 5 6 3 
                                                      OpStore %49 %133 
                              Uniform f32_4* %134 = OpAccessChain %21 %36 %36 
                                       f32_4 %135 = OpLoad %134 
                                       f32_3 %136 = OpVectorShuffle %135 %135 0 1 2 
                                       f32_4 %137 = OpLoad %9 
                                       f32_3 %138 = OpVectorShuffle %137 %137 2 2 2 
                                       f32_3 %139 = OpFMul %136 %138 
                                       f32_4 %140 = OpLoad %49 
                                       f32_3 %141 = OpVectorShuffle %140 %140 0 1 2 
                                       f32_3 %142 = OpFAdd %139 %141 
                                       f32_4 %143 = OpLoad %9 
                                       f32_4 %144 = OpVectorShuffle %143 %142 4 5 6 3 
                                                      OpStore %9 %144 
                              Uniform f32_4* %145 = OpAccessChain %21 %36 %45 
                                       f32_4 %146 = OpLoad %145 
                                       f32_3 %147 = OpVectorShuffle %146 %146 0 1 2 
                                       f32_4 %148 = OpLoad %9 
                                       f32_3 %149 = OpVectorShuffle %148 %148 3 3 3 
                                       f32_3 %150 = OpFMul %147 %149 
                                       f32_4 %151 = OpLoad %9 
                                       f32_3 %152 = OpVectorShuffle %151 %151 0 1 2 
                                       f32_3 %153 = OpFAdd %150 %152 
                                       f32_4 %154 = OpLoad %9 
                                       f32_4 %155 = OpVectorShuffle %154 %153 4 5 6 3 
                                                      OpStore %9 %155 
                                       f32_4 %156 = OpLoad %9 
                                       f32_3 %157 = OpVectorShuffle %156 %156 0 1 2 
                                       f32_3 %161 = OpFMul %157 %160 
                                       f32_4 %162 = OpLoad %49 
                                       f32_4 %163 = OpVectorShuffle %162 %161 4 5 6 3 
                                                      OpStore %49 %163 
                                       f32_4 %164 = OpLoad %9 
                                       f32_3 %165 = OpVectorShuffle %164 %164 0 1 2 
                                       f32_3 %166 = OpFNegate %165 
                                       f32_3 %167 = OpFMul %166 %160 
                                       f32_3 %170 = OpLoad %169 
                                       f32_3 %171 = OpFAdd %167 %170 
                                       f32_4 %172 = OpLoad %9 
                                       f32_4 %173 = OpVectorShuffle %172 %171 4 5 6 3 
                                                      OpStore %9 %173 
                                Uniform f32* %177 = OpAccessChain %21 %176 
                                         f32 %178 = OpLoad %177 
                                       f32_3 %179 = OpCompositeConstruct %178 %178 %178 
                                       f32_4 %180 = OpLoad %9 
                                       f32_3 %181 = OpVectorShuffle %180 %180 0 1 2 
                                       f32_3 %182 = OpFMul %179 %181 
                                       f32_4 %183 = OpLoad %49 
                                       f32_3 %184 = OpVectorShuffle %183 %183 0 1 2 
                                       f32_3 %185 = OpFAdd %182 %184 
                                                      OpStore vs_TEXCOORD1 %185 
                                 Output f32* %187 = OpAccessChain %80 %28 %76 
                                         f32 %188 = OpLoad %187 
                                         f32 %189 = OpFNegate %188 
                                 Output f32* %190 = OpAccessChain %80 %28 %76 
                                                      OpStore %190 %189 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 508
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %24 %40 %503 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpDecorate %13 ArrayStride 13 
                                                      OpMemberDecorate %14 0 Offset 14 
                                                      OpMemberDecorate %14 1 Offset 14 
                                                      OpMemberDecorate %14 2 Offset 14 
                                                      OpMemberDecorate %14 3 Offset 14 
                                                      OpMemberDecorate %14 4 Offset 14 
                                                      OpMemberDecorate %14 5 Offset 14 
                                                      OpDecorate %14 Block 
                                                      OpDecorate %16 DescriptorSet 16 
                                                      OpDecorate %16 Binding 16 
                                                      OpDecorate vs_TEXCOORD1 Location 24 
                                                      OpDecorate vs_TEXCOORD0 Location 40 
                                                      OpDecorate %52 DescriptorSet 52 
                                                      OpDecorate %52 Binding 52 
                                                      OpDecorate %56 DescriptorSet 56 
                                                      OpDecorate %56 Binding 56 
                                                      OpDecorate %171 DescriptorSet 171 
                                                      OpDecorate %171 Binding 171 
                                                      OpDecorate %173 DescriptorSet 173 
                                                      OpDecorate %173 Binding 173 
                                                      OpDecorate %227 DescriptorSet 227 
                                                      OpDecorate %227 Binding 227 
                                                      OpDecorate %229 DescriptorSet 229 
                                                      OpDecorate %229 Binding 229 
                                                      OpDecorate %283 DescriptorSet 283 
                                                      OpDecorate %283 Binding 283 
                                                      OpDecorate %285 DescriptorSet 285 
                                                      OpDecorate %285 Binding 285 
                                                      OpDecorate %291 DescriptorSet 291 
                                                      OpDecorate %291 Binding 291 
                                                      OpDecorate %293 DescriptorSet 293 
                                                      OpDecorate %293 Binding 293 
                                                      OpDecorate %503 Location 503 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 3 
                                              %11 = OpTypeInt 32 0 
                                          u32 %12 = OpConstant 4 
                                              %13 = OpTypeArray %7 %12 
                                              %14 = OpTypeStruct %10 %7 %7 %13 %7 %7 
                                              %15 = OpTypePointer Uniform %14 
Uniform struct {f32_3; f32_4; f32_4; f32_4[4]; f32_4; f32_4;}* %16 = OpVariable Uniform 
                                              %17 = OpTypeInt 32 1 
                                          i32 %18 = OpConstant 1 
                                          u32 %19 = OpConstant 2 
                                              %20 = OpTypePointer Uniform %6 
                                              %23 = OpTypePointer Input %10 
                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                                              %25 = OpTypePointer Input %6 
                                          u32 %29 = OpConstant 0 
                                              %30 = OpTypePointer Private %6 
                               Private f32_4* %38 = OpVariable Private 
                                              %39 = OpTypePointer Input %7 
                        Input f32_4* vs_TEXCOORD0 = OpVariable Input 
                                              %41 = OpTypeVector %6 2 
                                 Private f32* %49 = OpVariable Private 
                                              %50 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %51 = OpTypePointer UniformConstant %50 
         UniformConstant read_only Texture2D* %52 = OpVariable UniformConstant 
                                              %54 = OpTypeSampler 
                                              %55 = OpTypePointer UniformConstant %54 
                     UniformConstant sampler* %56 = OpVariable UniformConstant 
                                              %58 = OpTypeSampledImage %50 
                                          i32 %64 = OpConstant 2 
                                          u32 %69 = OpConstant 1 
                                          f32 %73 = OpConstant 3.674022E-40 
                               Private f32_4* %83 = OpVariable Private 
                                          i32 %86 = OpConstant 3 
                                              %87 = OpTypePointer Uniform %7 
                                          i32 %94 = OpConstant 0 
                                             %127 = OpTypePointer Uniform %10 
                                         i32 %136 = OpConstant 4 
                                Private f32* %163 = OpVariable Private 
                                         u32 %167 = OpConstant 3 
        UniformConstant read_only Texture2D* %171 = OpVariable UniformConstant 
                    UniformConstant sampler* %173 = OpVariable UniformConstant 
                                             %180 = OpTypePointer Private %10 
                              Private f32_3* %181 = OpVariable Private 
                                         i32 %184 = OpConstant 5 
                              Private f32_4* %189 = OpVariable Private 
                                         f32 %215 = OpConstant 3.674022E-40 
                              Private f32_3* %226 = OpVariable Private 
        UniformConstant read_only Texture2D* %227 = OpVariable UniformConstant 
                    UniformConstant sampler* %229 = OpVariable UniformConstant 
                                         f32 %237 = OpConstant 3.674022E-40 
                                       f32_3 %238 = OpConstantComposite %237 %237 %237 
                                         f32 %240 = OpConstant 3.674022E-40 
                                       f32_3 %241 = OpConstantComposite %240 %240 %240 
                                         f32 %257 = OpConstant 3.674022E-40 
                                Private f32* %277 = OpVariable Private 
        UniformConstant read_only Texture2D* %283 = OpVariable UniformConstant 
                    UniformConstant sampler* %285 = OpVariable UniformConstant 
        UniformConstant read_only Texture2D* %291 = OpVariable UniformConstant 
                    UniformConstant sampler* %293 = OpVariable UniformConstant 
                                       f32_4 %305 = OpConstantComposite %73 %73 %73 %73 
                                Private f32* %307 = OpVariable Private 
                                         f32 %314 = OpConstant 3.674022E-40 
                                Private f32* %316 = OpVariable Private 
                                Private f32* %320 = OpVariable Private 
                                         f32 %334 = OpConstant 3.674022E-40 
                                         f32 %337 = OpConstant 3.674022E-40 
                                         f32 %372 = OpConstant 3.674022E-40 
                                         f32 %374 = OpConstant 3.674022E-40 
                                         f32 %385 = OpConstant 3.674022E-40 
                                             %394 = OpTypeBool 
                                             %395 = OpTypePointer Private %394 
                               Private bool* %396 = OpVariable Private 
                                         f32 %420 = OpConstant 3.674022E-40 
                                             %502 = OpTypePointer Output %7 
                               Output f32_4* %503 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                 Uniform f32* %21 = OpAccessChain %16 %18 %19 
                                          f32 %22 = OpLoad %21 
                                   Input f32* %26 = OpAccessChain vs_TEXCOORD1 %19 
                                          f32 %27 = OpLoad %26 
                                          f32 %28 = OpFDiv %22 %27 
                                 Private f32* %31 = OpAccessChain %9 %29 
                                                      OpStore %31 %28 
                                        f32_4 %32 = OpLoad %9 
                                        f32_3 %33 = OpVectorShuffle %32 %32 0 0 0 
                                        f32_3 %34 = OpLoad vs_TEXCOORD1 
                                        f32_3 %35 = OpFMul %33 %34 
                                        f32_4 %36 = OpLoad %9 
                                        f32_4 %37 = OpVectorShuffle %36 %35 4 5 6 3 
                                                      OpStore %9 %37 
                                        f32_4 %42 = OpLoad vs_TEXCOORD0 
                                        f32_2 %43 = OpVectorShuffle %42 %42 0 1 
                                        f32_4 %44 = OpLoad vs_TEXCOORD0 
                                        f32_2 %45 = OpVectorShuffle %44 %44 3 3 
                                        f32_2 %46 = OpFDiv %43 %45 
                                        f32_4 %47 = OpLoad %38 
                                        f32_4 %48 = OpVectorShuffle %47 %46 4 5 2 3 
                                                      OpStore %38 %48 
                          read_only Texture2D %53 = OpLoad %52 
                                      sampler %57 = OpLoad %56 
                   read_only Texture2DSampled %59 = OpSampledImage %53 %57 
                                        f32_4 %60 = OpLoad %38 
                                        f32_2 %61 = OpVectorShuffle %60 %60 0 1 
                                        f32_4 %62 = OpImageSampleImplicitLod %59 %61 
                                          f32 %63 = OpCompositeExtract %62 0 
                                                      OpStore %49 %63 
                                 Uniform f32* %65 = OpAccessChain %16 %64 %29 
                                          f32 %66 = OpLoad %65 
                                          f32 %67 = OpLoad %49 
                                          f32 %68 = OpFMul %66 %67 
                                 Uniform f32* %70 = OpAccessChain %16 %64 %69 
                                          f32 %71 = OpLoad %70 
                                          f32 %72 = OpFAdd %68 %71 
                                                      OpStore %49 %72 
                                          f32 %74 = OpLoad %49 
                                          f32 %75 = OpFDiv %73 %74 
                                                      OpStore %49 %75 
                                          f32 %76 = OpLoad %49 
                                        f32_3 %77 = OpCompositeConstruct %76 %76 %76 
                                        f32_4 %78 = OpLoad %9 
                                        f32_3 %79 = OpVectorShuffle %78 %78 0 1 2 
                                        f32_3 %80 = OpFMul %77 %79 
                                        f32_4 %81 = OpLoad %9 
                                        f32_4 %82 = OpVectorShuffle %81 %80 4 5 6 3 
                                                      OpStore %9 %82 
                                        f32_4 %84 = OpLoad %9 
                                        f32_3 %85 = OpVectorShuffle %84 %84 1 1 1 
                               Uniform f32_4* %88 = OpAccessChain %16 %86 %18 
                                        f32_4 %89 = OpLoad %88 
                                        f32_3 %90 = OpVectorShuffle %89 %89 0 1 2 
                                        f32_3 %91 = OpFMul %85 %90 
                                        f32_4 %92 = OpLoad %83 
                                        f32_4 %93 = OpVectorShuffle %92 %91 4 5 6 3 
                                                      OpStore %83 %93 
                               Uniform f32_4* %95 = OpAccessChain %16 %86 %94 
                                        f32_4 %96 = OpLoad %95 
                                        f32_3 %97 = OpVectorShuffle %96 %96 0 1 2 
                                        f32_4 %98 = OpLoad %9 
                                        f32_3 %99 = OpVectorShuffle %98 %98 0 0 0 
                                       f32_3 %100 = OpFMul %97 %99 
                                       f32_4 %101 = OpLoad %83 
                                       f32_3 %102 = OpVectorShuffle %101 %101 0 1 2 
                                       f32_3 %103 = OpFAdd %100 %102 
                                       f32_4 %104 = OpLoad %9 
                                       f32_4 %105 = OpVectorShuffle %104 %103 4 5 2 6 
                                                      OpStore %9 %105 
                              Uniform f32_4* %106 = OpAccessChain %16 %86 %64 
                                       f32_4 %107 = OpLoad %106 
                                       f32_3 %108 = OpVectorShuffle %107 %107 0 1 2 
                                       f32_4 %109 = OpLoad %9 
                                       f32_3 %110 = OpVectorShuffle %109 %109 2 2 2 
                                       f32_3 %111 = OpFMul %108 %110 
                                       f32_4 %112 = OpLoad %9 
                                       f32_3 %113 = OpVectorShuffle %112 %112 0 1 3 
                                       f32_3 %114 = OpFAdd %111 %113 
                                       f32_4 %115 = OpLoad %9 
                                       f32_4 %116 = OpVectorShuffle %115 %114 4 5 6 3 
                                                      OpStore %9 %116 
                                       f32_4 %117 = OpLoad %9 
                                       f32_3 %118 = OpVectorShuffle %117 %117 0 1 2 
                              Uniform f32_4* %119 = OpAccessChain %16 %86 %86 
                                       f32_4 %120 = OpLoad %119 
                                       f32_3 %121 = OpVectorShuffle %120 %120 0 1 2 
                                       f32_3 %122 = OpFAdd %118 %121 
                                       f32_4 %123 = OpLoad %9 
                                       f32_4 %124 = OpVectorShuffle %123 %122 4 5 6 3 
                                                      OpStore %9 %124 
                                       f32_4 %125 = OpLoad %9 
                                       f32_3 %126 = OpVectorShuffle %125 %125 0 1 2 
                              Uniform f32_3* %128 = OpAccessChain %16 %94 
                                       f32_3 %129 = OpLoad %128 
                                       f32_3 %130 = OpFNegate %129 
                                       f32_3 %131 = OpFAdd %126 %130 
                                       f32_4 %132 = OpLoad %83 
                                       f32_4 %133 = OpVectorShuffle %132 %131 4 5 6 3 
                                                      OpStore %83 %133 
                                       f32_4 %134 = OpLoad %9 
                                       f32_3 %135 = OpVectorShuffle %134 %134 0 1 2 
                              Uniform f32_4* %137 = OpAccessChain %16 %136 
                                       f32_4 %138 = OpLoad %137 
                                       f32_3 %139 = OpVectorShuffle %138 %138 0 1 2 
                                       f32_3 %140 = OpFNegate %139 
                                       f32_3 %141 = OpFAdd %135 %140 
                                       f32_4 %142 = OpLoad %9 
                                       f32_4 %143 = OpVectorShuffle %142 %141 4 5 6 3 
                                                      OpStore %9 %143 
                                       f32_4 %144 = OpLoad %83 
                                       f32_3 %145 = OpVectorShuffle %144 %144 0 1 2 
                                       f32_4 %146 = OpLoad %83 
                                       f32_3 %147 = OpVectorShuffle %146 %146 0 1 2 
                                         f32 %148 = OpDot %145 %147 
                                                      OpStore %49 %148 
                                         f32 %149 = OpLoad %49 
                                         f32 %150 = OpExtInst %1 32 %149 
                                                      OpStore %49 %150 
                                         f32 %151 = OpLoad %49 
                                       f32_3 %152 = OpCompositeConstruct %151 %151 %151 
                                       f32_4 %153 = OpLoad %83 
                                       f32_3 %154 = OpVectorShuffle %153 %153 0 1 2 
                                       f32_3 %155 = OpFMul %152 %154 
                                       f32_4 %156 = OpLoad %83 
                                       f32_4 %157 = OpVectorShuffle %156 %155 4 5 6 3 
                                                      OpStore %83 %157 
                                       f32_4 %158 = OpLoad %9 
                                       f32_3 %159 = OpVectorShuffle %158 %158 0 1 2 
                                       f32_4 %160 = OpLoad %9 
                                       f32_3 %161 = OpVectorShuffle %160 %160 0 1 2 
                                         f32 %162 = OpDot %159 %161 
                                                      OpStore %49 %162 
                                         f32 %164 = OpLoad %49 
                                         f32 %165 = OpExtInst %1 32 %164 
                                                      OpStore %163 %165 
                                         f32 %166 = OpLoad %49 
                                Uniform f32* %168 = OpAccessChain %16 %136 %167 
                                         f32 %169 = OpLoad %168 
                                         f32 %170 = OpFMul %166 %169 
                                                      OpStore %49 %170 
                         read_only Texture2D %172 = OpLoad %171 
                                     sampler %174 = OpLoad %173 
                  read_only Texture2DSampled %175 = OpSampledImage %172 %174 
                                         f32 %176 = OpLoad %49 
                                       f32_2 %177 = OpCompositeConstruct %176 %176 
                                       f32_4 %178 = OpImageSampleImplicitLod %175 %177 
                                         f32 %179 = OpCompositeExtract %178 0 
                                                      OpStore %49 %179 
                                         f32 %182 = OpLoad %49 
                                       f32_3 %183 = OpCompositeConstruct %182 %182 %182 
                              Uniform f32_4* %185 = OpAccessChain %16 %184 
                                       f32_4 %186 = OpLoad %185 
                                       f32_3 %187 = OpVectorShuffle %186 %186 0 1 2 
                                       f32_3 %188 = OpFMul %183 %187 
                                                      OpStore %181 %188 
                                       f32_4 %190 = OpLoad %9 
                                       f32_3 %191 = OpVectorShuffle %190 %190 0 1 2 
                                       f32_3 %192 = OpFNegate %191 
                                         f32 %193 = OpLoad %163 
                                       f32_3 %194 = OpCompositeConstruct %193 %193 %193 
                                       f32_3 %195 = OpFMul %192 %194 
                                       f32_4 %196 = OpLoad %83 
                                       f32_3 %197 = OpVectorShuffle %196 %196 0 1 2 
                                       f32_3 %198 = OpFNegate %197 
                                       f32_3 %199 = OpFAdd %195 %198 
                                       f32_4 %200 = OpLoad %189 
                                       f32_4 %201 = OpVectorShuffle %200 %199 4 5 6 3 
                                                      OpStore %189 %201 
                                       f32_4 %202 = OpLoad %9 
                                       f32_3 %203 = OpVectorShuffle %202 %202 0 1 2 
                                         f32 %204 = OpLoad %163 
                                       f32_3 %205 = OpCompositeConstruct %204 %204 %204 
                                       f32_3 %206 = OpFMul %203 %205 
                                       f32_4 %207 = OpLoad %9 
                                       f32_4 %208 = OpVectorShuffle %207 %206 4 5 6 3 
                                                      OpStore %9 %208 
                                       f32_4 %209 = OpLoad %189 
                                       f32_3 %210 = OpVectorShuffle %209 %209 0 1 2 
                                       f32_4 %211 = OpLoad %189 
                                       f32_3 %212 = OpVectorShuffle %211 %211 0 1 2 
                                         f32 %213 = OpDot %210 %212 
                                                      OpStore %49 %213 
                                         f32 %214 = OpLoad %49 
                                         f32 %216 = OpExtInst %1 40 %214 %215 
                                                      OpStore %49 %216 
                                         f32 %217 = OpLoad %49 
                                         f32 %218 = OpExtInst %1 32 %217 
                                                      OpStore %49 %218 
                                         f32 %219 = OpLoad %49 
                                       f32_3 %220 = OpCompositeConstruct %219 %219 %219 
                                       f32_4 %221 = OpLoad %189 
                                       f32_3 %222 = OpVectorShuffle %221 %221 0 1 2 
                                       f32_3 %223 = OpFMul %220 %222 
                                       f32_4 %224 = OpLoad %189 
                                       f32_4 %225 = OpVectorShuffle %224 %223 4 5 6 3 
                                                      OpStore %189 %225 
                         read_only Texture2D %228 = OpLoad %227 
                                     sampler %230 = OpLoad %229 
                  read_only Texture2DSampled %231 = OpSampledImage %228 %230 
                                       f32_4 %232 = OpLoad %38 
                                       f32_2 %233 = OpVectorShuffle %232 %232 0 1 
                                       f32_4 %234 = OpImageSampleImplicitLod %231 %233 
                                       f32_3 %235 = OpVectorShuffle %234 %234 0 1 2 
                                                      OpStore %226 %235 
                                       f32_3 %236 = OpLoad %226 
                                       f32_3 %239 = OpFMul %236 %238 
                                       f32_3 %242 = OpFAdd %239 %241 
                                                      OpStore %226 %242 
                                       f32_3 %243 = OpLoad %226 
                                       f32_3 %244 = OpLoad %226 
                                         f32 %245 = OpDot %243 %244 
                                                      OpStore %49 %245 
                                         f32 %246 = OpLoad %49 
                                         f32 %247 = OpExtInst %1 32 %246 
                                                      OpStore %49 %247 
                                         f32 %248 = OpLoad %49 
                                       f32_3 %249 = OpCompositeConstruct %248 %248 %248 
                                       f32_3 %250 = OpLoad %226 
                                       f32_3 %251 = OpFMul %249 %250 
                                                      OpStore %226 %251 
                                       f32_3 %252 = OpLoad %226 
                                       f32_4 %253 = OpLoad %189 
                                       f32_3 %254 = OpVectorShuffle %253 %253 0 1 2 
                                         f32 %255 = OpDot %252 %254 
                                                      OpStore %49 %255 
                                         f32 %256 = OpLoad %49 
                                         f32 %258 = OpExtInst %1 43 %256 %257 %73 
                                                      OpStore %49 %258 
                                       f32_4 %259 = OpLoad %9 
                                       f32_3 %260 = OpVectorShuffle %259 %259 0 1 2 
                                       f32_3 %261 = OpFNegate %260 
                                       f32_4 %262 = OpLoad %189 
                                       f32_3 %263 = OpVectorShuffle %262 %262 0 1 2 
                                         f32 %264 = OpDot %261 %263 
                                                      OpStore %163 %264 
                                         f32 %265 = OpLoad %163 
                                         f32 %266 = OpExtInst %1 43 %265 %257 %73 
                                                      OpStore %163 %266 
                                       f32_3 %267 = OpLoad %226 
                                       f32_4 %268 = OpLoad %9 
                                       f32_3 %269 = OpVectorShuffle %268 %268 0 1 2 
                                       f32_3 %270 = OpFNegate %269 
                                         f32 %271 = OpDot %267 %270 
                                Private f32* %272 = OpAccessChain %9 %29 
                                                      OpStore %272 %271 
                                Private f32* %273 = OpAccessChain %9 %29 
                                         f32 %274 = OpLoad %273 
                                         f32 %275 = OpExtInst %1 43 %274 %257 %73 
                                Private f32* %276 = OpAccessChain %9 %29 
                                                      OpStore %276 %275 
                                       f32_3 %278 = OpLoad %226 
                                       f32_4 %279 = OpLoad %83 
                                       f32_3 %280 = OpVectorShuffle %279 %279 0 1 2 
                                       f32_3 %281 = OpFNegate %280 
                                         f32 %282 = OpDot %278 %281 
                                                      OpStore %277 %282 
                         read_only Texture2D %284 = OpLoad %283 
                                     sampler %286 = OpLoad %285 
                  read_only Texture2DSampled %287 = OpSampledImage %284 %286 
                                       f32_4 %288 = OpLoad %38 
                                       f32_2 %289 = OpVectorShuffle %288 %288 0 1 
                                       f32_4 %290 = OpImageSampleImplicitLod %287 %289 
                                                      OpStore %83 %290 
                         read_only Texture2D %292 = OpLoad %291 
                                     sampler %294 = OpLoad %293 
                  read_only Texture2DSampled %295 = OpSampledImage %292 %294 
                                       f32_4 %296 = OpLoad %38 
                                       f32_2 %297 = OpVectorShuffle %296 %296 0 1 
                                       f32_4 %298 = OpImageSampleImplicitLod %295 %297 
                                       f32_3 %299 = OpVectorShuffle %298 %298 0 1 2 
                                       f32_4 %300 = OpLoad %38 
                                       f32_4 %301 = OpVectorShuffle %300 %299 4 5 2 6 
                                                      OpStore %38 %301 
                                       f32_4 %302 = OpLoad %83 
                                       f32_4 %303 = OpVectorShuffle %302 %302 3 0 1 2 
                                       f32_4 %304 = OpFNegate %303 
                                       f32_4 %306 = OpFAdd %304 %305 
                                                      OpStore %189 %306 
                                Private f32* %308 = OpAccessChain %189 %29 
                                         f32 %309 = OpLoad %308 
                                Private f32* %310 = OpAccessChain %189 %29 
                                         f32 %311 = OpLoad %310 
                                         f32 %312 = OpFMul %309 %311 
                                                      OpStore %307 %312 
                                         f32 %313 = OpLoad %307 
                                         f32 %315 = OpExtInst %1 40 %313 %314 
                                                      OpStore %307 %315 
                                         f32 %317 = OpLoad %307 
                                         f32 %318 = OpLoad %307 
                                         f32 %319 = OpFMul %317 %318 
                                                      OpStore %316 %319 
                                         f32 %321 = OpLoad %49 
                                         f32 %322 = OpLoad %316 
                                         f32 %323 = OpFMul %321 %322 
                                         f32 %324 = OpLoad %49 
                                         f32 %325 = OpFNegate %324 
                                         f32 %326 = OpFAdd %323 %325 
                                                      OpStore %320 %326 
                                         f32 %327 = OpLoad %320 
                                         f32 %328 = OpLoad %49 
                                         f32 %329 = OpFMul %327 %328 
                                         f32 %330 = OpFAdd %329 %73 
                                                      OpStore %49 %330 
                                         f32 %331 = OpLoad %49 
                                         f32 %332 = OpLoad %49 
                                         f32 %333 = OpFMul %331 %332 
                                         f32 %335 = OpFAdd %333 %334 
                                                      OpStore %49 %335 
                                         f32 %336 = OpLoad %316 
                                         f32 %338 = OpFMul %336 %337 
                                                      OpStore %316 %338 
                                         f32 %339 = OpLoad %316 
                                         f32 %340 = OpLoad %49 
                                         f32 %341 = OpFDiv %339 %340 
                                                      OpStore %49 %341 
                                         f32 %342 = OpLoad %307 
                                         f32 %343 = OpFNegate %342 
                                         f32 %344 = OpFAdd %343 %73 
                                                      OpStore %316 %344 
                                         f32 %345 = OpLoad %277 
                                         f32 %346 = OpExtInst %1 4 %345 
                                         f32 %347 = OpLoad %316 
                                         f32 %348 = OpFMul %346 %347 
                                         f32 %349 = OpLoad %307 
                                         f32 %350 = OpFAdd %348 %349 
                                                      OpStore %320 %350 
                                Private f32* %351 = OpAccessChain %9 %29 
                                         f32 %352 = OpLoad %351 
                                         f32 %353 = OpLoad %316 
                                         f32 %354 = OpFMul %352 %353 
                                         f32 %355 = OpLoad %307 
                                         f32 %356 = OpFAdd %354 %355 
                                                      OpStore %307 %356 
                                         f32 %357 = OpLoad %307 
                                         f32 %358 = OpLoad %277 
                                         f32 %359 = OpExtInst %1 4 %358 
                                         f32 %360 = OpFMul %357 %359 
                                                      OpStore %307 %360 
                                         f32 %361 = OpLoad %277 
                                         f32 %362 = OpExtInst %1 4 %361 
                                         f32 %363 = OpFNegate %362 
                                         f32 %364 = OpFAdd %363 %73 
                                                      OpStore %277 %364 
                                Private f32* %365 = OpAccessChain %9 %29 
                                         f32 %366 = OpLoad %365 
                                         f32 %367 = OpLoad %320 
                                         f32 %368 = OpFMul %366 %367 
                                         f32 %369 = OpLoad %307 
                                         f32 %370 = OpFAdd %368 %369 
                                                      OpStore %307 %370 
                                         f32 %371 = OpLoad %307 
                                         f32 %373 = OpFAdd %371 %372 
                                                      OpStore %307 %373 
                                         f32 %375 = OpLoad %307 
                                         f32 %376 = OpFDiv %374 %375 
                                                      OpStore %307 %376 
                                         f32 %377 = OpLoad %49 
                                         f32 %378 = OpLoad %307 
                                         f32 %379 = OpFMul %377 %378 
                                                      OpStore %307 %379 
                                Private f32* %380 = OpAccessChain %9 %29 
                                         f32 %381 = OpLoad %380 
                                         f32 %382 = OpLoad %307 
                                         f32 %383 = OpFMul %381 %382 
                                                      OpStore %307 %383 
                                         f32 %384 = OpLoad %307 
                                         f32 %386 = OpFMul %384 %385 
                                                      OpStore %307 %386 
                                         f32 %387 = OpLoad %307 
                                         f32 %388 = OpExtInst %1 40 %387 %257 
                                                      OpStore %307 %388 
                                       f32_4 %389 = OpLoad %83 
                                       f32_3 %390 = OpVectorShuffle %389 %389 0 1 2 
                                       f32_4 %391 = OpLoad %83 
                                       f32_3 %392 = OpVectorShuffle %391 %391 0 1 2 
                                         f32 %393 = OpDot %390 %392 
                                                      OpStore %49 %393 
                                         f32 %397 = OpLoad %49 
                                        bool %398 = OpFOrdNotEqual %397 %257 
                                                      OpStore %396 %398 
                                        bool %399 = OpLoad %396 
                                         f32 %400 = OpSelect %399 %73 %257 
                                                      OpStore %49 %400 
                                         f32 %401 = OpLoad %49 
                                         f32 %402 = OpLoad %307 
                                         f32 %403 = OpFMul %401 %402 
                                                      OpStore %307 %403 
                                       f32_3 %404 = OpLoad %181 
                                         f32 %405 = OpLoad %307 
                                       f32_3 %406 = OpCompositeConstruct %405 %405 %405 
                                       f32_3 %407 = OpFMul %404 %406 
                                                      OpStore %226 %407 
                                         f32 %408 = OpLoad %163 
                                         f32 %409 = OpFNegate %408 
                                         f32 %410 = OpFAdd %409 %73 
                                                      OpStore %307 %410 
                                         f32 %411 = OpLoad %163 
                                         f32 %412 = OpLoad %163 
                                         f32 %413 = OpFMul %411 %412 
                                                      OpStore %49 %413 
                                         f32 %414 = OpLoad %49 
                                       f32_2 %415 = OpCompositeConstruct %414 %414 
                                       f32_4 %416 = OpLoad %189 
                                       f32_2 %417 = OpVectorShuffle %416 %416 0 0 
                                         f32 %418 = OpDot %415 %417 
                                                      OpStore %49 %418 
                                         f32 %419 = OpLoad %49 
                                         f32 %421 = OpFAdd %419 %420 
                                                      OpStore %49 %421 
                                         f32 %422 = OpLoad %307 
                                         f32 %423 = OpLoad %307 
                                         f32 %424 = OpFMul %422 %423 
                                                      OpStore %163 %424 
                                         f32 %425 = OpLoad %163 
                                         f32 %426 = OpLoad %163 
                                         f32 %427 = OpFMul %425 %426 
                                                      OpStore %163 %427 
                                         f32 %428 = OpLoad %307 
                                         f32 %429 = OpLoad %163 
                                         f32 %430 = OpFMul %428 %429 
                                                      OpStore %307 %430 
                                       f32_4 %431 = OpLoad %189 
                                       f32_3 %432 = OpVectorShuffle %431 %431 1 2 3 
                                         f32 %433 = OpLoad %307 
                                       f32_3 %434 = OpCompositeConstruct %433 %433 %433 
                                       f32_3 %435 = OpFMul %432 %434 
                                       f32_4 %436 = OpLoad %83 
                                       f32_3 %437 = OpVectorShuffle %436 %436 0 1 2 
                                       f32_3 %438 = OpFAdd %435 %437 
                                       f32_4 %439 = OpLoad %83 
                                       f32_4 %440 = OpVectorShuffle %439 %438 4 5 6 3 
                                                      OpStore %83 %440 
                                       f32_4 %441 = OpLoad %83 
                                       f32_3 %442 = OpVectorShuffle %441 %441 0 1 2 
                                       f32_3 %443 = OpLoad %226 
                                       f32_3 %444 = OpFMul %442 %443 
                                       f32_4 %445 = OpLoad %83 
                                       f32_4 %446 = OpVectorShuffle %445 %444 4 5 6 3 
                                                      OpStore %83 %446 
                                         f32 %447 = OpLoad %277 
                                         f32 %448 = OpLoad %277 
                                         f32 %449 = OpFMul %447 %448 
                                                      OpStore %307 %449 
                                         f32 %450 = OpLoad %307 
                                         f32 %451 = OpLoad %307 
                                         f32 %452 = OpFMul %450 %451 
                                                      OpStore %307 %452 
                                         f32 %453 = OpLoad %277 
                                         f32 %454 = OpLoad %307 
                                         f32 %455 = OpFMul %453 %454 
                                                      OpStore %277 %455 
                                         f32 %456 = OpLoad %49 
                                         f32 %457 = OpLoad %277 
                                         f32 %458 = OpFMul %456 %457 
                                         f32 %459 = OpFAdd %458 %73 
                                                      OpStore %277 %459 
                                Private f32* %460 = OpAccessChain %9 %29 
                                         f32 %461 = OpLoad %460 
                                         f32 %462 = OpFNegate %461 
                                         f32 %463 = OpFAdd %462 %73 
                                                      OpStore %307 %463 
                                         f32 %464 = OpLoad %307 
                                         f32 %465 = OpLoad %307 
                                         f32 %466 = OpFMul %464 %465 
                                                      OpStore %163 %466 
                                         f32 %467 = OpLoad %163 
                                         f32 %468 = OpLoad %163 
                                         f32 %469 = OpFMul %467 %468 
                                                      OpStore %163 %469 
                                         f32 %470 = OpLoad %307 
                                         f32 %471 = OpLoad %163 
                                         f32 %472 = OpFMul %470 %471 
                                                      OpStore %307 %472 
                                         f32 %473 = OpLoad %49 
                                         f32 %474 = OpLoad %307 
                                         f32 %475 = OpFMul %473 %474 
                                         f32 %476 = OpFAdd %475 %73 
                                                      OpStore %307 %476 
                                         f32 %477 = OpLoad %277 
                                         f32 %478 = OpLoad %307 
                                         f32 %479 = OpFMul %477 %478 
                                                      OpStore %277 %479 
                                Private f32* %480 = OpAccessChain %9 %29 
                                         f32 %481 = OpLoad %480 
                                         f32 %482 = OpLoad %277 
                                         f32 %483 = OpFMul %481 %482 
                                Private f32* %484 = OpAccessChain %9 %29 
                                                      OpStore %484 %483 
                                       f32_4 %485 = OpLoad %9 
                                       f32_3 %486 = OpVectorShuffle %485 %485 0 0 0 
                                       f32_3 %487 = OpLoad %181 
                                       f32_3 %488 = OpFMul %486 %487 
                                       f32_4 %489 = OpLoad %9 
                                       f32_4 %490 = OpVectorShuffle %489 %488 4 5 6 3 
                                                      OpStore %9 %490 
                                       f32_4 %491 = OpLoad %38 
                                       f32_3 %492 = OpVectorShuffle %491 %491 0 1 3 
                                       f32_4 %493 = OpLoad %9 
                                       f32_3 %494 = OpVectorShuffle %493 %493 0 1 2 
                                       f32_3 %495 = OpFMul %492 %494 
                                       f32_4 %496 = OpLoad %83 
                                       f32_3 %497 = OpVectorShuffle %496 %496 0 1 2 
                                       f32_3 %498 = OpFAdd %495 %497 
                                       f32_4 %499 = OpLoad %9 
                                       f32_4 %500 = OpVectorShuffle %499 %498 4 5 6 3 
                                                      OpStore %9 %500 
                                Private f32* %501 = OpAccessChain %9 %167 
                                                      OpStore %501 %73 
                                       f32_4 %504 = OpLoad %9 
                                       f32_4 %505 = OpFNegate %504 
                                       f32_4 %506 = OpExtInst %1 29 %505 
                                                      OpStore %503 %506 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _LightDir;
uniform 	vec4 _LightColor;
UNITY_LOCATION(0) uniform  sampler2D _CameraDepthTexture;
UNITY_LOCATION(1) uniform  sampler2D _CameraGBufferTexture0;
UNITY_LOCATION(2) uniform  sampler2D _CameraGBufferTexture1;
UNITY_LOCATION(3) uniform  sampler2D _CameraGBufferTexture2;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
float u_xlat6;
float u_xlat7;
float u_xlat12;
float u_xlat13;
float u_xlat18;
bool u_xlatb18;
float u_xlat19;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat2 = texture(_CameraDepthTexture, u_xlat1.xy);
    u_xlat18 = _ZBufferParams.x * u_xlat2.x + _ZBufferParams.y;
    u_xlat18 = float(1.0) / u_xlat18;
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat0.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat0.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = (-u_xlat0.xyz) * vec3(u_xlat18) + (-_LightDir.xyz);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = max(u_xlat18, 0.00100000005);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
    u_xlat3 = texture(_CameraGBufferTexture2, u_xlat1.xy);
    u_xlat3.xyz = u_xlat3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz;
    u_xlat18 = dot(u_xlat3.xyz, u_xlat2.xyz);
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
    u_xlat13 = dot((-_LightDir.xyz), u_xlat2.xyz);
    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
    u_xlat2 = texture(_CameraGBufferTexture1, u_xlat1.xy);
    u_xlat4 = texture(_CameraGBufferTexture0, u_xlat1.xy);
    u_xlat5 = (-u_xlat2.wxyz) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat1.x = u_xlat5.x * u_xlat5.x;
    u_xlat1.x = max(u_xlat1.x, 0.00200000009);
    u_xlat7 = u_xlat1.x * u_xlat1.x;
    u_xlat19 = u_xlat18 * u_xlat7 + (-u_xlat18);
    u_xlat18 = u_xlat19 * u_xlat18 + 1.0;
    u_xlat18 = u_xlat18 * u_xlat18 + 1.00000001e-07;
    u_xlat7 = u_xlat7 * 0.318309873;
    u_xlat18 = u_xlat7 / u_xlat18;
    u_xlat0.x = dot(u_xlat3.xyz, (-u_xlat0.xyz));
    u_xlat6 = dot(u_xlat3.xyz, (-_LightDir.xyz));
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
    u_xlat12 = (-u_xlat1.x) + 1.0;
    u_xlat7 = abs(u_xlat0.x) * u_xlat12 + u_xlat1.x;
    u_xlat12 = u_xlat6 * u_xlat12 + u_xlat1.x;
    u_xlat12 = u_xlat12 * abs(u_xlat0.x);
    u_xlat0.x = -abs(u_xlat0.x) + 1.0;
    u_xlat12 = u_xlat6 * u_xlat7 + u_xlat12;
    u_xlat12 = u_xlat12 + 9.99999975e-06;
    u_xlat12 = 0.5 / u_xlat12;
    u_xlat12 = u_xlat18 * u_xlat12;
    u_xlat12 = u_xlat12 * 3.14159274;
    u_xlat12 = u_xlat6 * u_xlat12;
    u_xlat12 = max(u_xlat12, 0.0);
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlatb18 = u_xlat18!=0.0;
    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
    u_xlat12 = u_xlat18 * u_xlat12;
    u_xlat1.xyw = vec3(u_xlat12) * _LightColor.xyz;
    u_xlat12 = (-u_xlat13) + 1.0;
    u_xlat18 = u_xlat12 * u_xlat12;
    u_xlat18 = u_xlat18 * u_xlat18;
    u_xlat12 = u_xlat12 * u_xlat18;
    u_xlat2.xyz = u_xlat5.yzw * vec3(u_xlat12) + u_xlat2.xyz;
    u_xlat1.xyw = u_xlat1.xyw * u_xlat2.xyz;
    u_xlat12 = u_xlat13 + u_xlat13;
    u_xlat12 = u_xlat13 * u_xlat12;
    u_xlat12 = u_xlat12 * u_xlat5.x + -0.5;
    u_xlat18 = u_xlat0.x * u_xlat0.x;
    u_xlat18 = u_xlat18 * u_xlat18;
    u_xlat0.x = u_xlat0.x * u_xlat18;
    u_xlat0.x = u_xlat12 * u_xlat0.x + 1.0;
    u_xlat18 = (-u_xlat6) + 1.0;
    u_xlat13 = u_xlat18 * u_xlat18;
    u_xlat13 = u_xlat13 * u_xlat13;
    u_xlat18 = u_xlat18 * u_xlat13;
    u_xlat12 = u_xlat12 * u_xlat18 + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat12;
    u_xlat0.x = u_xlat6 * u_xlat0.x;
    u_xlat0.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat0.xyz = u_xlat4.xyz * u_xlat0.xyz + u_xlat1.xyw;
    u_xlat0.w = 1.0;
    SV_Target0 = exp2((-u_xlat0));
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 192
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %80 %102 %169 %175 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpMemberDecorate %78 0 BuiltIn 78 
                                                      OpMemberDecorate %78 1 BuiltIn 78 
                                                      OpMemberDecorate %78 2 BuiltIn 78 
                                                      OpDecorate %78 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 102 
                                                      OpDecorate %169 Location 169 
                                                      OpDecorate vs_TEXCOORD1 Location 175 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %16 %17 %18 %6 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 1 
                                              %24 = OpTypePointer Uniform %7 
                                          i32 %28 = OpConstant 0 
                                          i32 %36 = OpConstant 2 
                                          i32 %45 = OpConstant 3 
                               Private f32_4* %49 = OpVariable Private 
                                          u32 %76 = OpConstant 1 
                                              %77 = OpTypeArray %6 %76 
                                              %78 = OpTypeStruct %7 %6 %77 
                                              %79 = OpTypePointer Output %78 
         Output struct {f32_4; f32; f32[1];}* %80 = OpVariable Output 
                                              %82 = OpTypePointer Output %7 
                                              %84 = OpTypePointer Private %6 
                                          u32 %87 = OpConstant 0 
                                              %88 = OpTypePointer Uniform %6 
                               Private f32_4* %93 = OpVariable Private 
                                              %94 = OpTypeVector %6 3 
                                          f32 %97 = OpConstant 3.674022E-40 
                                        f32_3 %98 = OpConstantComposite %97 %97 %97 
                       Output f32_4* vs_TEXCOORD0 = OpVariable Output 
                                             %103 = OpTypeVector %6 2 
                                         f32 %158 = OpConstant 3.674022E-40 
                                         f32 %159 = OpConstant 3.674022E-40 
                                       f32_3 %160 = OpConstantComposite %158 %158 %159 
                                             %168 = OpTypePointer Input %94 
                                Input f32_3* %169 = OpVariable Input 
                                             %174 = OpTypePointer Output %94 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                                         i32 %176 = OpConstant 4 
                                             %186 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %25 = OpAccessChain %21 %23 %23 
                                        f32_4 %26 = OpLoad %25 
                                        f32_4 %27 = OpFMul %13 %26 
                                                      OpStore %9 %27 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %28 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %44 = OpLoad %9 
                               Uniform f32_4* %46 = OpAccessChain %21 %23 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_4 %48 = OpFAdd %44 %47 
                                                      OpStore %9 %48 
                                        f32_4 %50 = OpLoad %9 
                                        f32_4 %51 = OpVectorShuffle %50 %50 1 1 1 1 
                               Uniform f32_4* %52 = OpAccessChain %21 %45 %23 
                                        f32_4 %53 = OpLoad %52 
                                        f32_4 %54 = OpFMul %51 %53 
                                                      OpStore %49 %54 
                               Uniform f32_4* %55 = OpAccessChain %21 %45 %28 
                                        f32_4 %56 = OpLoad %55 
                                        f32_4 %57 = OpLoad %9 
                                        f32_4 %58 = OpVectorShuffle %57 %57 0 0 0 0 
                                        f32_4 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %49 
                                        f32_4 %61 = OpFAdd %59 %60 
                                                      OpStore %49 %61 
                               Uniform f32_4* %62 = OpAccessChain %21 %45 %36 
                                        f32_4 %63 = OpLoad %62 
                                        f32_4 %64 = OpLoad %9 
                                        f32_4 %65 = OpVectorShuffle %64 %64 2 2 2 2 
                                        f32_4 %66 = OpFMul %63 %65 
                                        f32_4 %67 = OpLoad %49 
                                        f32_4 %68 = OpFAdd %66 %67 
                                                      OpStore %49 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %45 %45 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %9 
                                        f32_4 %72 = OpVectorShuffle %71 %71 3 3 3 3 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %49 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %49 %75 
                                        f32_4 %81 = OpLoad %49 
                                Output f32_4* %83 = OpAccessChain %80 %28 
                                                      OpStore %83 %81 
                                 Private f32* %85 = OpAccessChain %49 %76 
                                          f32 %86 = OpLoad %85 
                                 Uniform f32* %89 = OpAccessChain %21 %28 %87 
                                          f32 %90 = OpLoad %89 
                                          f32 %91 = OpFMul %86 %90 
                                 Private f32* %92 = OpAccessChain %49 %76 
                                                      OpStore %92 %91 
                                        f32_4 %95 = OpLoad %49 
                                        f32_3 %96 = OpVectorShuffle %95 %95 0 3 1 
                                        f32_3 %99 = OpFMul %96 %98 
                                       f32_4 %100 = OpLoad %93 
                                       f32_4 %101 = OpVectorShuffle %100 %99 4 1 5 6 
                                                      OpStore %93 %101 
                                       f32_4 %104 = OpLoad %49 
                                       f32_2 %105 = OpVectorShuffle %104 %104 2 3 
                                       f32_4 %106 = OpLoad vs_TEXCOORD0 
                                       f32_4 %107 = OpVectorShuffle %106 %105 0 1 4 5 
                                                      OpStore vs_TEXCOORD0 %107 
                                       f32_4 %108 = OpLoad %93 
                                       f32_2 %109 = OpVectorShuffle %108 %108 2 2 
                                       f32_4 %110 = OpLoad %93 
                                       f32_2 %111 = OpVectorShuffle %110 %110 0 3 
                                       f32_2 %112 = OpFAdd %109 %111 
                                       f32_4 %113 = OpLoad vs_TEXCOORD0 
                                       f32_4 %114 = OpVectorShuffle %113 %112 4 5 2 3 
                                                      OpStore vs_TEXCOORD0 %114 
                                       f32_4 %115 = OpLoad %9 
                                       f32_3 %116 = OpVectorShuffle %115 %115 1 1 1 
                              Uniform f32_4* %117 = OpAccessChain %21 %36 %23 
                                       f32_4 %118 = OpLoad %117 
                                       f32_3 %119 = OpVectorShuffle %118 %118 0 1 2 
                                       f32_3 %120 = OpFMul %116 %119 
                                       f32_4 %121 = OpLoad %49 
                                       f32_4 %122 = OpVectorShuffle %121 %120 4 5 6 3 
                                                      OpStore %49 %122 
                              Uniform f32_4* %123 = OpAccessChain %21 %36 %28 
                                       f32_4 %124 = OpLoad %123 
                                       f32_3 %125 = OpVectorShuffle %124 %124 0 1 2 
                                       f32_4 %126 = OpLoad %9 
                                       f32_3 %127 = OpVectorShuffle %126 %126 0 0 0 
                                       f32_3 %128 = OpFMul %125 %127 
                                       f32_4 %129 = OpLoad %49 
                                       f32_3 %130 = OpVectorShuffle %129 %129 0 1 2 
                                       f32_3 %131 = OpFAdd %128 %130 
                                       f32_4 %132 = OpLoad %49 
                                       f32_4 %133 = OpVectorShuffle %132 %131 4 5 6 3 
                                                      OpStore %49 %133 
                              Uniform f32_4* %134 = OpAccessChain %21 %36 %36 
                                       f32_4 %135 = OpLoad %134 
                                       f32_3 %136 = OpVectorShuffle %135 %135 0 1 2 
                                       f32_4 %137 = OpLoad %9 
                                       f32_3 %138 = OpVectorShuffle %137 %137 2 2 2 
                                       f32_3 %139 = OpFMul %136 %138 
                                       f32_4 %140 = OpLoad %49 
                                       f32_3 %141 = OpVectorShuffle %140 %140 0 1 2 
                                       f32_3 %142 = OpFAdd %139 %141 
                                       f32_4 %143 = OpLoad %9 
                                       f32_4 %144 = OpVectorShuffle %143 %142 4 5 6 3 
                                                      OpStore %9 %144 
                              Uniform f32_4* %145 = OpAccessChain %21 %36 %45 
                                       f32_4 %146 = OpLoad %145 
                                       f32_3 %147 = OpVectorShuffle %146 %146 0 1 2 
                                       f32_4 %148 = OpLoad %9 
                                       f32_3 %149 = OpVectorShuffle %148 %148 3 3 3 
                                       f32_3 %150 = OpFMul %147 %149 
                                       f32_4 %151 = OpLoad %9 
                                       f32_3 %152 = OpVectorShuffle %151 %151 0 1 2 
                                       f32_3 %153 = OpFAdd %150 %152 
                                       f32_4 %154 = OpLoad %9 
                                       f32_4 %155 = OpVectorShuffle %154 %153 4 5 6 3 
                                                      OpStore %9 %155 
                                       f32_4 %156 = OpLoad %9 
                                       f32_3 %157 = OpVectorShuffle %156 %156 0 1 2 
                                       f32_3 %161 = OpFMul %157 %160 
                                       f32_4 %162 = OpLoad %49 
                                       f32_4 %163 = OpVectorShuffle %162 %161 4 5 6 3 
                                                      OpStore %49 %163 
                                       f32_4 %164 = OpLoad %9 
                                       f32_3 %165 = OpVectorShuffle %164 %164 0 1 2 
                                       f32_3 %166 = OpFNegate %165 
                                       f32_3 %167 = OpFMul %166 %160 
                                       f32_3 %170 = OpLoad %169 
                                       f32_3 %171 = OpFAdd %167 %170 
                                       f32_4 %172 = OpLoad %9 
                                       f32_4 %173 = OpVectorShuffle %172 %171 4 5 6 3 
                                                      OpStore %9 %173 
                                Uniform f32* %177 = OpAccessChain %21 %176 
                                         f32 %178 = OpLoad %177 
                                       f32_3 %179 = OpCompositeConstruct %178 %178 %178 
                                       f32_4 %180 = OpLoad %9 
                                       f32_3 %181 = OpVectorShuffle %180 %180 0 1 2 
                                       f32_3 %182 = OpFMul %179 %181 
                                       f32_4 %183 = OpLoad %49 
                                       f32_3 %184 = OpVectorShuffle %183 %183 0 1 2 
                                       f32_3 %185 = OpFAdd %182 %184 
                                                      OpStore vs_TEXCOORD1 %185 
                                 Output f32* %187 = OpAccessChain %80 %28 %76 
                                         f32 %188 = OpLoad %187 
                                         f32 %189 = OpFNegate %188 
                                 Output f32* %190 = OpAccessChain %80 %28 %76 
                                                      OpStore %190 %189 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 481
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %24 %40 %476 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpDecorate %13 ArrayStride 13 
                                                      OpMemberDecorate %14 0 Offset 14 
                                                      OpMemberDecorate %14 1 Offset 14 
                                                      OpMemberDecorate %14 2 Offset 14 
                                                      OpMemberDecorate %14 3 Offset 14 
                                                      OpMemberDecorate %14 4 Offset 14 
                                                      OpMemberDecorate %14 5 Offset 14 
                                                      OpDecorate %14 Block 
                                                      OpDecorate %16 DescriptorSet 16 
                                                      OpDecorate %16 Binding 16 
                                                      OpDecorate vs_TEXCOORD1 Location 24 
                                                      OpDecorate vs_TEXCOORD0 Location 40 
                                                      OpDecorate %52 DescriptorSet 52 
                                                      OpDecorate %52 Binding 52 
                                                      OpDecorate %56 DescriptorSet 56 
                                                      OpDecorate %56 Binding 56 
                                                      OpDecorate %181 DescriptorSet 181 
                                                      OpDecorate %181 Binding 181 
                                                      OpDecorate %183 DescriptorSet 183 
                                                      OpDecorate %183 Binding 183 
                                                      OpDecorate %223 DescriptorSet 223 
                                                      OpDecorate %223 Binding 223 
                                                      OpDecorate %225 DescriptorSet 225 
                                                      OpDecorate %225 Binding 225 
                                                      OpDecorate %231 DescriptorSet 231 
                                                      OpDecorate %231 Binding 231 
                                                      OpDecorate %233 DescriptorSet 233 
                                                      OpDecorate %233 Binding 233 
                                                      OpDecorate %476 Location 476 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 3 
                                              %11 = OpTypeInt 32 0 
                                          u32 %12 = OpConstant 4 
                                              %13 = OpTypeArray %7 %12 
                                              %14 = OpTypeStruct %10 %7 %7 %13 %7 %7 
                                              %15 = OpTypePointer Uniform %14 
Uniform struct {f32_3; f32_4; f32_4; f32_4[4]; f32_4; f32_4;}* %16 = OpVariable Uniform 
                                              %17 = OpTypeInt 32 1 
                                          i32 %18 = OpConstant 1 
                                          u32 %19 = OpConstant 2 
                                              %20 = OpTypePointer Uniform %6 
                                              %23 = OpTypePointer Input %10 
                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                                              %25 = OpTypePointer Input %6 
                                          u32 %29 = OpConstant 0 
                                              %30 = OpTypePointer Private %6 
                               Private f32_4* %38 = OpVariable Private 
                                              %39 = OpTypePointer Input %7 
                        Input f32_4* vs_TEXCOORD0 = OpVariable Input 
                                              %41 = OpTypeVector %6 2 
                                 Private f32* %49 = OpVariable Private 
                                              %50 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %51 = OpTypePointer UniformConstant %50 
         UniformConstant read_only Texture2D* %52 = OpVariable UniformConstant 
                                              %54 = OpTypeSampler 
                                              %55 = OpTypePointer UniformConstant %54 
                     UniformConstant sampler* %56 = OpVariable UniformConstant 
                                              %58 = OpTypeSampledImage %50 
                                          i32 %64 = OpConstant 2 
                                          u32 %69 = OpConstant 1 
                                          f32 %73 = OpConstant 3.674022E-40 
                               Private f32_4* %83 = OpVariable Private 
                                          i32 %86 = OpConstant 3 
                                              %87 = OpTypePointer Uniform %7 
                                          i32 %94 = OpConstant 0 
                                             %127 = OpTypePointer Uniform %10 
                                         i32 %147 = OpConstant 4 
                                         f32 %168 = OpConstant 3.674022E-40 
                                             %179 = OpTypePointer Private %10 
                              Private f32_3* %180 = OpVariable Private 
        UniformConstant read_only Texture2D* %181 = OpVariable UniformConstant 
                    UniformConstant sampler* %183 = OpVariable UniformConstant 
                                         f32 %191 = OpConstant 3.674022E-40 
                                       f32_3 %192 = OpConstantComposite %191 %191 %191 
                                         f32 %194 = OpConstant 3.674022E-40 
                                       f32_3 %195 = OpConstantComposite %194 %194 %194 
                                         f32 %211 = OpConstant 3.674022E-40 
                                Private f32* %213 = OpVariable Private 
        UniformConstant read_only Texture2D* %223 = OpVariable UniformConstant 
                    UniformConstant sampler* %225 = OpVariable UniformConstant 
        UniformConstant read_only Texture2D* %231 = OpVariable UniformConstant 
                    UniformConstant sampler* %233 = OpVariable UniformConstant 
                              Private f32_4* %242 = OpVariable Private 
                                       f32_4 %246 = OpConstantComposite %73 %73 %73 %73 
                                Private f32* %248 = OpVariable Private 
                                         f32 %255 = OpConstant 3.674022E-40 
                                Private f32* %257 = OpVariable Private 
                                Private f32* %261 = OpVariable Private 
                                         f32 %275 = OpConstant 3.674022E-40 
                                         f32 %278 = OpConstant 3.674022E-40 
                                Private f32* %289 = OpVariable Private 
                                Private f32* %298 = OpVariable Private 
                                         f32 %333 = OpConstant 3.674022E-40 
                                         f32 %335 = OpConstant 3.674022E-40 
                                         f32 %345 = OpConstant 3.674022E-40 
                                             %354 = OpTypeBool 
                                             %355 = OpTypePointer Private %354 
                               Private bool* %356 = OpVariable Private 
                                         i32 %366 = OpConstant 5 
                                         f32 %383 = OpConstant 3.674022E-40 
                                         u32 %473 = OpConstant 3 
                                             %475 = OpTypePointer Output %7 
                               Output f32_4* %476 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                 Uniform f32* %21 = OpAccessChain %16 %18 %19 
                                          f32 %22 = OpLoad %21 
                                   Input f32* %26 = OpAccessChain vs_TEXCOORD1 %19 
                                          f32 %27 = OpLoad %26 
                                          f32 %28 = OpFDiv %22 %27 
                                 Private f32* %31 = OpAccessChain %9 %29 
                                                      OpStore %31 %28 
                                        f32_4 %32 = OpLoad %9 
                                        f32_3 %33 = OpVectorShuffle %32 %32 0 0 0 
                                        f32_3 %34 = OpLoad vs_TEXCOORD1 
                                        f32_3 %35 = OpFMul %33 %34 
                                        f32_4 %36 = OpLoad %9 
                                        f32_4 %37 = OpVectorShuffle %36 %35 4 5 6 3 
                                                      OpStore %9 %37 
                                        f32_4 %42 = OpLoad vs_TEXCOORD0 
                                        f32_2 %43 = OpVectorShuffle %42 %42 0 1 
                                        f32_4 %44 = OpLoad vs_TEXCOORD0 
                                        f32_2 %45 = OpVectorShuffle %44 %44 3 3 
                                        f32_2 %46 = OpFDiv %43 %45 
                                        f32_4 %47 = OpLoad %38 
                                        f32_4 %48 = OpVectorShuffle %47 %46 4 5 2 3 
                                                      OpStore %38 %48 
                          read_only Texture2D %53 = OpLoad %52 
                                      sampler %57 = OpLoad %56 
                   read_only Texture2DSampled %59 = OpSampledImage %53 %57 
                                        f32_4 %60 = OpLoad %38 
                                        f32_2 %61 = OpVectorShuffle %60 %60 0 1 
                                        f32_4 %62 = OpImageSampleImplicitLod %59 %61 
                                          f32 %63 = OpCompositeExtract %62 0 
                                                      OpStore %49 %63 
                                 Uniform f32* %65 = OpAccessChain %16 %64 %29 
                                          f32 %66 = OpLoad %65 
                                          f32 %67 = OpLoad %49 
                                          f32 %68 = OpFMul %66 %67 
                                 Uniform f32* %70 = OpAccessChain %16 %64 %69 
                                          f32 %71 = OpLoad %70 
                                          f32 %72 = OpFAdd %68 %71 
                                                      OpStore %49 %72 
                                          f32 %74 = OpLoad %49 
                                          f32 %75 = OpFDiv %73 %74 
                                                      OpStore %49 %75 
                                          f32 %76 = OpLoad %49 
                                        f32_3 %77 = OpCompositeConstruct %76 %76 %76 
                                        f32_4 %78 = OpLoad %9 
                                        f32_3 %79 = OpVectorShuffle %78 %78 0 1 2 
                                        f32_3 %80 = OpFMul %77 %79 
                                        f32_4 %81 = OpLoad %9 
                                        f32_4 %82 = OpVectorShuffle %81 %80 4 5 6 3 
                                                      OpStore %9 %82 
                                        f32_4 %84 = OpLoad %9 
                                        f32_3 %85 = OpVectorShuffle %84 %84 1 1 1 
                               Uniform f32_4* %88 = OpAccessChain %16 %86 %18 
                                        f32_4 %89 = OpLoad %88 
                                        f32_3 %90 = OpVectorShuffle %89 %89 0 1 2 
                                        f32_3 %91 = OpFMul %85 %90 
                                        f32_4 %92 = OpLoad %83 
                                        f32_4 %93 = OpVectorShuffle %92 %91 4 5 6 3 
                                                      OpStore %83 %93 
                               Uniform f32_4* %95 = OpAccessChain %16 %86 %94 
                                        f32_4 %96 = OpLoad %95 
                                        f32_3 %97 = OpVectorShuffle %96 %96 0 1 2 
                                        f32_4 %98 = OpLoad %9 
                                        f32_3 %99 = OpVectorShuffle %98 %98 0 0 0 
                                       f32_3 %100 = OpFMul %97 %99 
                                       f32_4 %101 = OpLoad %83 
                                       f32_3 %102 = OpVectorShuffle %101 %101 0 1 2 
                                       f32_3 %103 = OpFAdd %100 %102 
                                       f32_4 %104 = OpLoad %9 
                                       f32_4 %105 = OpVectorShuffle %104 %103 4 5 2 6 
                                                      OpStore %9 %105 
                              Uniform f32_4* %106 = OpAccessChain %16 %86 %64 
                                       f32_4 %107 = OpLoad %106 
                                       f32_3 %108 = OpVectorShuffle %107 %107 0 1 2 
                                       f32_4 %109 = OpLoad %9 
                                       f32_3 %110 = OpVectorShuffle %109 %109 2 2 2 
                                       f32_3 %111 = OpFMul %108 %110 
                                       f32_4 %112 = OpLoad %9 
                                       f32_3 %113 = OpVectorShuffle %112 %112 0 1 3 
                                       f32_3 %114 = OpFAdd %111 %113 
                                       f32_4 %115 = OpLoad %9 
                                       f32_4 %116 = OpVectorShuffle %115 %114 4 5 6 3 
                                                      OpStore %9 %116 
                                       f32_4 %117 = OpLoad %9 
                                       f32_3 %118 = OpVectorShuffle %117 %117 0 1 2 
                              Uniform f32_4* %119 = OpAccessChain %16 %86 %86 
                                       f32_4 %120 = OpLoad %119 
                                       f32_3 %121 = OpVectorShuffle %120 %120 0 1 2 
                                       f32_3 %122 = OpFAdd %118 %121 
                                       f32_4 %123 = OpLoad %9 
                                       f32_4 %124 = OpVectorShuffle %123 %122 4 5 6 3 
                                                      OpStore %9 %124 
                                       f32_4 %125 = OpLoad %9 
                                       f32_3 %126 = OpVectorShuffle %125 %125 0 1 2 
                              Uniform f32_3* %128 = OpAccessChain %16 %94 
                                       f32_3 %129 = OpLoad %128 
                                       f32_3 %130 = OpFNegate %129 
                                       f32_3 %131 = OpFAdd %126 %130 
                                       f32_4 %132 = OpLoad %9 
                                       f32_4 %133 = OpVectorShuffle %132 %131 4 5 6 3 
                                                      OpStore %9 %133 
                                       f32_4 %134 = OpLoad %9 
                                       f32_3 %135 = OpVectorShuffle %134 %134 0 1 2 
                                       f32_4 %136 = OpLoad %9 
                                       f32_3 %137 = OpVectorShuffle %136 %136 0 1 2 
                                         f32 %138 = OpDot %135 %137 
                                                      OpStore %49 %138 
                                         f32 %139 = OpLoad %49 
                                         f32 %140 = OpExtInst %1 32 %139 
                                                      OpStore %49 %140 
                                       f32_4 %141 = OpLoad %9 
                                       f32_3 %142 = OpVectorShuffle %141 %141 0 1 2 
                                       f32_3 %143 = OpFNegate %142 
                                         f32 %144 = OpLoad %49 
                                       f32_3 %145 = OpCompositeConstruct %144 %144 %144 
                                       f32_3 %146 = OpFMul %143 %145 
                              Uniform f32_4* %148 = OpAccessChain %16 %147 
                                       f32_4 %149 = OpLoad %148 
                                       f32_3 %150 = OpVectorShuffle %149 %149 0 1 2 
                                       f32_3 %151 = OpFNegate %150 
                                       f32_3 %152 = OpFAdd %146 %151 
                                       f32_4 %153 = OpLoad %83 
                                       f32_4 %154 = OpVectorShuffle %153 %152 4 5 6 3 
                                                      OpStore %83 %154 
                                         f32 %155 = OpLoad %49 
                                       f32_3 %156 = OpCompositeConstruct %155 %155 %155 
                                       f32_4 %157 = OpLoad %9 
                                       f32_3 %158 = OpVectorShuffle %157 %157 0 1 2 
                                       f32_3 %159 = OpFMul %156 %158 
                                       f32_4 %160 = OpLoad %9 
                                       f32_4 %161 = OpVectorShuffle %160 %159 4 5 6 3 
                                                      OpStore %9 %161 
                                       f32_4 %162 = OpLoad %83 
                                       f32_3 %163 = OpVectorShuffle %162 %162 0 1 2 
                                       f32_4 %164 = OpLoad %83 
                                       f32_3 %165 = OpVectorShuffle %164 %164 0 1 2 
                                         f32 %166 = OpDot %163 %165 
                                                      OpStore %49 %166 
                                         f32 %167 = OpLoad %49 
                                         f32 %169 = OpExtInst %1 40 %167 %168 
                                                      OpStore %49 %169 
                                         f32 %170 = OpLoad %49 
                                         f32 %171 = OpExtInst %1 32 %170 
                                                      OpStore %49 %171 
                                         f32 %172 = OpLoad %49 
                                       f32_3 %173 = OpCompositeConstruct %172 %172 %172 
                                       f32_4 %174 = OpLoad %83 
                                       f32_3 %175 = OpVectorShuffle %174 %174 0 1 2 
                                       f32_3 %176 = OpFMul %173 %175 
                                       f32_4 %177 = OpLoad %83 
                                       f32_4 %178 = OpVectorShuffle %177 %176 4 5 6 3 
                                                      OpStore %83 %178 
                         read_only Texture2D %182 = OpLoad %181 
                                     sampler %184 = OpLoad %183 
                  read_only Texture2DSampled %185 = OpSampledImage %182 %184 
                                       f32_4 %186 = OpLoad %38 
                                       f32_2 %187 = OpVectorShuffle %186 %186 0 1 
                                       f32_4 %188 = OpImageSampleImplicitLod %185 %187 
                                       f32_3 %189 = OpVectorShuffle %188 %188 0 1 2 
                                                      OpStore %180 %189 
                                       f32_3 %190 = OpLoad %180 
                                       f32_3 %193 = OpFMul %190 %192 
                                       f32_3 %196 = OpFAdd %193 %195 
                                                      OpStore %180 %196 
                                       f32_3 %197 = OpLoad %180 
                                       f32_3 %198 = OpLoad %180 
                                         f32 %199 = OpDot %197 %198 
                                                      OpStore %49 %199 
                                         f32 %200 = OpLoad %49 
                                         f32 %201 = OpExtInst %1 32 %200 
                                                      OpStore %49 %201 
                                         f32 %202 = OpLoad %49 
                                       f32_3 %203 = OpCompositeConstruct %202 %202 %202 
                                       f32_3 %204 = OpLoad %180 
                                       f32_3 %205 = OpFMul %203 %204 
                                                      OpStore %180 %205 
                                       f32_3 %206 = OpLoad %180 
                                       f32_4 %207 = OpLoad %83 
                                       f32_3 %208 = OpVectorShuffle %207 %207 0 1 2 
                                         f32 %209 = OpDot %206 %208 
                                                      OpStore %49 %209 
                                         f32 %210 = OpLoad %49 
                                         f32 %212 = OpExtInst %1 43 %210 %211 %73 
                                                      OpStore %49 %212 
                              Uniform f32_4* %214 = OpAccessChain %16 %147 
                                       f32_4 %215 = OpLoad %214 
                                       f32_3 %216 = OpVectorShuffle %215 %215 0 1 2 
                                       f32_3 %217 = OpFNegate %216 
                                       f32_4 %218 = OpLoad %83 
                                       f32_3 %219 = OpVectorShuffle %218 %218 0 1 2 
                                         f32 %220 = OpDot %217 %219 
                                                      OpStore %213 %220 
                                         f32 %221 = OpLoad %213 
                                         f32 %222 = OpExtInst %1 43 %221 %211 %73 
                                                      OpStore %213 %222 
                         read_only Texture2D %224 = OpLoad %223 
                                     sampler %226 = OpLoad %225 
                  read_only Texture2DSampled %227 = OpSampledImage %224 %226 
                                       f32_4 %228 = OpLoad %38 
                                       f32_2 %229 = OpVectorShuffle %228 %228 0 1 
                                       f32_4 %230 = OpImageSampleImplicitLod %227 %229 
                                                      OpStore %83 %230 
                         read_only Texture2D %232 = OpLoad %231 
                                     sampler %234 = OpLoad %233 
                  read_only Texture2DSampled %235 = OpSampledImage %232 %234 
                                       f32_4 %236 = OpLoad %38 
                                       f32_2 %237 = OpVectorShuffle %236 %236 0 1 
                                       f32_4 %238 = OpImageSampleImplicitLod %235 %237 
                                       f32_3 %239 = OpVectorShuffle %238 %238 0 1 2 
                                       f32_4 %240 = OpLoad %38 
                                       f32_4 %241 = OpVectorShuffle %240 %239 4 5 2 6 
                                                      OpStore %38 %241 
                                       f32_4 %243 = OpLoad %83 
                                       f32_4 %244 = OpVectorShuffle %243 %243 3 0 1 2 
                                       f32_4 %245 = OpFNegate %244 
                                       f32_4 %247 = OpFAdd %245 %246 
                                                      OpStore %242 %247 
                                Private f32* %249 = OpAccessChain %242 %29 
                                         f32 %250 = OpLoad %249 
                                Private f32* %251 = OpAccessChain %242 %29 
                                         f32 %252 = OpLoad %251 
                                         f32 %253 = OpFMul %250 %252 
                                                      OpStore %248 %253 
                                         f32 %254 = OpLoad %248 
                                         f32 %256 = OpExtInst %1 40 %254 %255 
                                                      OpStore %248 %256 
                                         f32 %258 = OpLoad %248 
                                         f32 %259 = OpLoad %248 
                                         f32 %260 = OpFMul %258 %259 
                                                      OpStore %257 %260 
                                         f32 %262 = OpLoad %49 
                                         f32 %263 = OpLoad %257 
                                         f32 %264 = OpFMul %262 %263 
                                         f32 %265 = OpLoad %49 
                                         f32 %266 = OpFNegate %265 
                                         f32 %267 = OpFAdd %264 %266 
                                                      OpStore %261 %267 
                                         f32 %268 = OpLoad %261 
                                         f32 %269 = OpLoad %49 
                                         f32 %270 = OpFMul %268 %269 
                                         f32 %271 = OpFAdd %270 %73 
                                                      OpStore %49 %271 
                                         f32 %272 = OpLoad %49 
                                         f32 %273 = OpLoad %49 
                                         f32 %274 = OpFMul %272 %273 
                                         f32 %276 = OpFAdd %274 %275 
                                                      OpStore %49 %276 
                                         f32 %277 = OpLoad %257 
                                         f32 %279 = OpFMul %277 %278 
                                                      OpStore %257 %279 
                                         f32 %280 = OpLoad %257 
                                         f32 %281 = OpLoad %49 
                                         f32 %282 = OpFDiv %280 %281 
                                                      OpStore %49 %282 
                                       f32_3 %283 = OpLoad %180 
                                       f32_4 %284 = OpLoad %9 
                                       f32_3 %285 = OpVectorShuffle %284 %284 0 1 2 
                                       f32_3 %286 = OpFNegate %285 
                                         f32 %287 = OpDot %283 %286 
                                Private f32* %288 = OpAccessChain %9 %29 
                                                      OpStore %288 %287 
                                       f32_3 %290 = OpLoad %180 
                              Uniform f32_4* %291 = OpAccessChain %16 %147 
                                       f32_4 %292 = OpLoad %291 
                                       f32_3 %293 = OpVectorShuffle %292 %292 0 1 2 
                                       f32_3 %294 = OpFNegate %293 
                                         f32 %295 = OpDot %290 %294 
                                                      OpStore %289 %295 
                                         f32 %296 = OpLoad %289 
                                         f32 %297 = OpExtInst %1 43 %296 %211 %73 
                                                      OpStore %289 %297 
                                         f32 %299 = OpLoad %248 
                                         f32 %300 = OpFNegate %299 
                                         f32 %301 = OpFAdd %300 %73 
                                                      OpStore %298 %301 
                                Private f32* %302 = OpAccessChain %9 %29 
                                         f32 %303 = OpLoad %302 
                                         f32 %304 = OpExtInst %1 4 %303 
                                         f32 %305 = OpLoad %298 
                                         f32 %306 = OpFMul %304 %305 
                                         f32 %307 = OpLoad %248 
                                         f32 %308 = OpFAdd %306 %307 
                                Private f32* %309 = OpAccessChain %180 %29 
                                                      OpStore %309 %308 
                                         f32 %310 = OpLoad %289 
                                         f32 %311 = OpLoad %298 
                                         f32 %312 = OpFMul %310 %311 
                                         f32 %313 = OpLoad %248 
                                         f32 %314 = OpFAdd %312 %313 
                                                      OpStore %298 %314 
                                         f32 %315 = OpLoad %298 
                                Private f32* %316 = OpAccessChain %9 %29 
                                         f32 %317 = OpLoad %316 
                                         f32 %318 = OpExtInst %1 4 %317 
                                         f32 %319 = OpFMul %315 %318 
                                                      OpStore %298 %319 
                                Private f32* %320 = OpAccessChain %9 %29 
                                         f32 %321 = OpLoad %320 
                                         f32 %322 = OpExtInst %1 4 %321 
                                         f32 %323 = OpFNegate %322 
                                         f32 %324 = OpFAdd %323 %73 
                                Private f32* %325 = OpAccessChain %9 %29 
                                                      OpStore %325 %324 
                                         f32 %326 = OpLoad %289 
                                Private f32* %327 = OpAccessChain %180 %29 
                                         f32 %328 = OpLoad %327 
                                         f32 %329 = OpFMul %326 %328 
                                         f32 %330 = OpLoad %298 
                                         f32 %331 = OpFAdd %329 %330 
                                                      OpStore %298 %331 
                                         f32 %332 = OpLoad %298 
                                         f32 %334 = OpFAdd %332 %333 
                                                      OpStore %298 %334 
                                         f32 %336 = OpLoad %298 
                                         f32 %337 = OpFDiv %335 %336 
                                                      OpStore %298 %337 
                                         f32 %338 = OpLoad %49 
                                         f32 %339 = OpLoad %298 
                                         f32 %340 = OpFMul %338 %339 
                                                      OpStore %298 %340 
                                         f32 %341 = OpLoad %289 
                                         f32 %342 = OpLoad %298 
                                         f32 %343 = OpFMul %341 %342 
                                                      OpStore %298 %343 
                                         f32 %344 = OpLoad %298 
                                         f32 %346 = OpFMul %344 %345 
                                                      OpStore %298 %346 
                                         f32 %347 = OpLoad %298 
                                         f32 %348 = OpExtInst %1 40 %347 %211 
                                                      OpStore %298 %348 
                                       f32_4 %349 = OpLoad %83 
                                       f32_3 %350 = OpVectorShuffle %349 %349 0 1 2 
                                       f32_4 %351 = OpLoad %83 
                                       f32_3 %352 = OpVectorShuffle %351 %351 0 1 2 
                                         f32 %353 = OpDot %350 %352 
                                                      OpStore %49 %353 
                                         f32 %357 = OpLoad %49 
                                        bool %358 = OpFOrdNotEqual %357 %211 
                                                      OpStore %356 %358 
                                        bool %359 = OpLoad %356 
                                         f32 %360 = OpSelect %359 %73 %211 
                                                      OpStore %49 %360 
                                         f32 %361 = OpLoad %49 
                                         f32 %362 = OpLoad %298 
                                         f32 %363 = OpFMul %361 %362 
                                                      OpStore %298 %363 
                                         f32 %364 = OpLoad %298 
                                       f32_3 %365 = OpCompositeConstruct %364 %364 %364 
                              Uniform f32_4* %367 = OpAccessChain %16 %366 
                                       f32_4 %368 = OpLoad %367 
                                       f32_3 %369 = OpVectorShuffle %368 %368 0 1 2 
                                       f32_3 %370 = OpFMul %365 %369 
                                                      OpStore %180 %370 
                                         f32 %371 = OpLoad %213 
                                         f32 %372 = OpFNegate %371 
                                         f32 %373 = OpFAdd %372 %73 
                                                      OpStore %298 %373 
                                         f32 %374 = OpLoad %213 
                                         f32 %375 = OpLoad %213 
                                         f32 %376 = OpFMul %374 %375 
                                                      OpStore %49 %376 
                                         f32 %377 = OpLoad %49 
                                       f32_2 %378 = OpCompositeConstruct %377 %377 
                                       f32_4 %379 = OpLoad %242 
                                       f32_2 %380 = OpVectorShuffle %379 %379 0 0 
                                         f32 %381 = OpDot %378 %380 
                                                      OpStore %49 %381 
                                         f32 %382 = OpLoad %49 
                                         f32 %384 = OpFAdd %382 %383 
                                                      OpStore %49 %384 
                                         f32 %385 = OpLoad %298 
                                         f32 %386 = OpLoad %298 
                                         f32 %387 = OpFMul %385 %386 
                                                      OpStore %213 %387 
                                         f32 %388 = OpLoad %213 
                                         f32 %389 = OpLoad %213 
                                         f32 %390 = OpFMul %388 %389 
                                                      OpStore %213 %390 
                                         f32 %391 = OpLoad %298 
                                         f32 %392 = OpLoad %213 
                                         f32 %393 = OpFMul %391 %392 
                                                      OpStore %298 %393 
                                       f32_4 %394 = OpLoad %242 
                                       f32_3 %395 = OpVectorShuffle %394 %394 1 2 3 
                                         f32 %396 = OpLoad %298 
                                       f32_3 %397 = OpCompositeConstruct %396 %396 %396 
                                       f32_3 %398 = OpFMul %395 %397 
                                       f32_4 %399 = OpLoad %83 
                                       f32_3 %400 = OpVectorShuffle %399 %399 0 1 2 
                                       f32_3 %401 = OpFAdd %398 %400 
                                       f32_4 %402 = OpLoad %83 
                                       f32_4 %403 = OpVectorShuffle %402 %401 4 5 6 3 
                                                      OpStore %83 %403 
                                       f32_4 %404 = OpLoad %83 
                                       f32_3 %405 = OpVectorShuffle %404 %404 0 1 2 
                                       f32_3 %406 = OpLoad %180 
                                       f32_3 %407 = OpFMul %405 %406 
                                       f32_4 %408 = OpLoad %83 
                                       f32_4 %409 = OpVectorShuffle %408 %407 4 5 6 3 
                                                      OpStore %83 %409 
                                Private f32* %410 = OpAccessChain %9 %29 
                                         f32 %411 = OpLoad %410 
                                Private f32* %412 = OpAccessChain %9 %29 
                                         f32 %413 = OpLoad %412 
                                         f32 %414 = OpFMul %411 %413 
                                                      OpStore %298 %414 
                                         f32 %415 = OpLoad %298 
                                         f32 %416 = OpLoad %298 
                                         f32 %417 = OpFMul %415 %416 
                                                      OpStore %298 %417 
                                Private f32* %418 = OpAccessChain %9 %29 
                                         f32 %419 = OpLoad %418 
                                         f32 %420 = OpLoad %298 
                                         f32 %421 = OpFMul %419 %420 
                                Private f32* %422 = OpAccessChain %9 %29 
                                                      OpStore %422 %421 
                                         f32 %423 = OpLoad %49 
                                Private f32* %424 = OpAccessChain %9 %29 
                                         f32 %425 = OpLoad %424 
                                         f32 %426 = OpFMul %423 %425 
                                         f32 %427 = OpFAdd %426 %73 
                                Private f32* %428 = OpAccessChain %9 %29 
                                                      OpStore %428 %427 
                                         f32 %429 = OpLoad %289 
                                         f32 %430 = OpFNegate %429 
                                         f32 %431 = OpFAdd %430 %73 
                                                      OpStore %298 %431 
                                         f32 %432 = OpLoad %298 
                                         f32 %433 = OpLoad %298 
                                         f32 %434 = OpFMul %432 %433 
                                                      OpStore %213 %434 
                                         f32 %435 = OpLoad %213 
                                         f32 %436 = OpLoad %213 
                                         f32 %437 = OpFMul %435 %436 
                                                      OpStore %213 %437 
                                         f32 %438 = OpLoad %298 
                                         f32 %439 = OpLoad %213 
                                         f32 %440 = OpFMul %438 %439 
                                                      OpStore %298 %440 
                                         f32 %441 = OpLoad %49 
                                         f32 %442 = OpLoad %298 
                                         f32 %443 = OpFMul %441 %442 
                                         f32 %444 = OpFAdd %443 %73 
                                                      OpStore %298 %444 
                                Private f32* %445 = OpAccessChain %9 %29 
                                         f32 %446 = OpLoad %445 
                                         f32 %447 = OpLoad %298 
                                         f32 %448 = OpFMul %446 %447 
                                Private f32* %449 = OpAccessChain %9 %29 
                                                      OpStore %449 %448 
                                         f32 %450 = OpLoad %289 
                                Private f32* %451 = OpAccessChain %9 %29 
                                         f32 %452 = OpLoad %451 
                                         f32 %453 = OpFMul %450 %452 
                                Private f32* %454 = OpAccessChain %9 %29 
                                                      OpStore %454 %453 
                                       f32_4 %455 = OpLoad %9 
                                       f32_3 %456 = OpVectorShuffle %455 %455 0 0 0 
                              Uniform f32_4* %457 = OpAccessChain %16 %366 
                                       f32_4 %458 = OpLoad %457 
                                       f32_3 %459 = OpVectorShuffle %458 %458 0 1 2 
                                       f32_3 %460 = OpFMul %456 %459 
                                       f32_4 %461 = OpLoad %9 
                                       f32_4 %462 = OpVectorShuffle %461 %460 4 5 6 3 
                                                      OpStore %9 %462 
                                       f32_4 %463 = OpLoad %38 
                                       f32_3 %464 = OpVectorShuffle %463 %463 0 1 3 
                                       f32_4 %465 = OpLoad %9 
                                       f32_3 %466 = OpVectorShuffle %465 %465 0 1 2 
                                       f32_3 %467 = OpFMul %464 %466 
                                       f32_4 %468 = OpLoad %83 
                                       f32_3 %469 = OpVectorShuffle %468 %468 0 1 2 
                                       f32_3 %470 = OpFAdd %467 %469 
                                       f32_4 %471 = OpLoad %9 
                                       f32_4 %472 = OpVectorShuffle %471 %470 4 5 6 3 
                                                      OpStore %9 %472 
                                Private f32* %474 = OpAccessChain %9 %473 
                                                      OpStore %474 %73 
                                       f32_4 %477 = OpLoad %9 
                                       f32_4 %478 = OpFNegate %477 
                                       f32_4 %479 = OpExtInst %1 29 %478 
                                                      OpStore %476 %479 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "SPOT" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "SPOT" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
UNITY_LOCATION(0) uniform  sampler2D _CameraDepthTexture;
UNITY_LOCATION(1) uniform  sampler2D _LightTexture0;
UNITY_LOCATION(2) uniform  sampler2D _LightTextureB0;
UNITY_LOCATION(3) uniform  sampler2D _CameraGBufferTexture0;
UNITY_LOCATION(4) uniform  sampler2D _CameraGBufferTexture1;
UNITY_LOCATION(5) uniform  sampler2D _CameraGBufferTexture2;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec2 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
vec4 u_xlat6;
float u_xlat8;
float u_xlat9;
vec3 u_xlat11;
float u_xlat14;
bool u_xlatb14;
float u_xlat15;
float u_xlat21;
float u_xlat22;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat2 = texture(_CameraDepthTexture, u_xlat1.xy);
    u_xlat21 = _ZBufferParams.x * u_xlat2.x + _ZBufferParams.y;
    u_xlat21 = float(1.0) / u_xlat21;
    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat0.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat2.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
    u_xlat3.xyz = (-u_xlat0.xyz) + _LightPos.xyz;
    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat15 = inversesqrt(u_xlat21);
    u_xlat21 = u_xlat21 * _LightPos.w;
    u_xlat4 = texture(_LightTextureB0, vec2(u_xlat21));
    u_xlat11.xyz = u_xlat3.xyz * vec3(u_xlat15) + (-u_xlat2.xyz);
    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz;
    u_xlat21 = dot(u_xlat11.xyz, u_xlat11.xyz);
    u_xlat21 = max(u_xlat21, 0.00100000005);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat11.xyz = vec3(u_xlat21) * u_xlat11.xyz;
    u_xlat5 = texture(_CameraGBufferTexture2, u_xlat1.xy);
    u_xlat5.xyz = u_xlat5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat21 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat5.xyz = vec3(u_xlat21) * u_xlat5.xyz;
    u_xlat21 = dot(u_xlat5.xyz, u_xlat11.xyz);
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
    u_xlat15 = dot(u_xlat3.xyz, u_xlat11.xyz);
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
    u_xlat22 = dot(u_xlat5.xyz, u_xlat3.xyz);
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
    u_xlat2.x = dot(u_xlat5.xyz, (-u_xlat2.xyz));
    u_xlat3 = texture(_CameraGBufferTexture1, u_xlat1.xy);
    u_xlat5 = texture(_CameraGBufferTexture0, u_xlat1.xy);
    u_xlat6 = (-u_xlat3.wxyz) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat1.x = u_xlat6.x * u_xlat6.x;
    u_xlat1.x = max(u_xlat1.x, 0.00200000009);
    u_xlat8 = u_xlat1.x * u_xlat1.x;
    u_xlat9 = u_xlat21 * u_xlat8 + (-u_xlat21);
    u_xlat21 = u_xlat9 * u_xlat21 + 1.0;
    u_xlat21 = u_xlat21 * u_xlat21 + 1.00000001e-07;
    u_xlat8 = u_xlat8 * 0.318309873;
    u_xlat21 = u_xlat8 / u_xlat21;
    u_xlat8 = (-u_xlat1.x) + 1.0;
    u_xlat9 = abs(u_xlat2.x) * u_xlat8 + u_xlat1.x;
    u_xlat1.x = u_xlat22 * u_xlat8 + u_xlat1.x;
    u_xlat1.x = u_xlat1.x * abs(u_xlat2.x);
    u_xlat8 = -abs(u_xlat2.x) + 1.0;
    u_xlat1.x = u_xlat22 * u_xlat9 + u_xlat1.x;
    u_xlat1.x = u_xlat1.x + 9.99999975e-06;
    u_xlat1.x = 0.5 / u_xlat1.x;
    u_xlat21 = u_xlat21 * u_xlat1.x;
    u_xlat21 = u_xlat21 * 3.14159274;
    u_xlat21 = u_xlat22 * u_xlat21;
    u_xlat21 = max(u_xlat21, 0.0);
    u_xlat1.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlatb1 = u_xlat1.x!=0.0;
    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
    u_xlat21 = u_xlat21 * u_xlat1.x;
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyw;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyw * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyw * u_xlat0.zzz + u_xlat2.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyw;
    u_xlat0.xy = u_xlat0.xy / u_xlat0.zz;
    u_xlatb14 = u_xlat0.z<0.0;
    u_xlat14 = u_xlatb14 ? 1.0 : float(0.0);
    u_xlat2 = texture(_LightTexture0, u_xlat0.xy, -8.0);
    u_xlat0.x = u_xlat14 * u_xlat2.w;
    u_xlat0.x = u_xlat4.x * u_xlat0.x;
    u_xlat0.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat2.xyz = u_xlat0.xyz * vec3(u_xlat21);
    u_xlat21 = (-u_xlat15) + 1.0;
    u_xlat1.x = u_xlat21 * u_xlat21;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat21 = u_xlat21 * u_xlat1.x;
    u_xlat3.xyz = u_xlat6.yzw * vec3(u_xlat21) + u_xlat3.xyz;
    u_xlat2.xyz = u_xlat2.xyz * u_xlat3.xyz;
    u_xlat21 = u_xlat8 * u_xlat8;
    u_xlat21 = u_xlat21 * u_xlat21;
    u_xlat21 = u_xlat8 * u_xlat21;
    u_xlat1.x = u_xlat15 + u_xlat15;
    u_xlat1.x = u_xlat15 * u_xlat1.x;
    u_xlat1.x = u_xlat1.x * u_xlat6.x + -0.5;
    u_xlat21 = u_xlat1.x * u_xlat21 + 1.0;
    u_xlat8 = (-u_xlat22) + 1.0;
    u_xlat15 = u_xlat8 * u_xlat8;
    u_xlat15 = u_xlat15 * u_xlat15;
    u_xlat8 = u_xlat8 * u_xlat15;
    u_xlat1.x = u_xlat1.x * u_xlat8 + 1.0;
    u_xlat21 = u_xlat21 * u_xlat1.x;
    u_xlat21 = u_xlat22 * u_xlat21;
    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat0.xyz = u_xlat5.xyz * u_xlat0.xyz + u_xlat2.xyz;
    u_xlat0.w = 1.0;
    SV_Target0 = exp2((-u_xlat0));
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "SPOT" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 192
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %80 %102 %169 %175 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpMemberDecorate %78 0 BuiltIn 78 
                                                      OpMemberDecorate %78 1 BuiltIn 78 
                                                      OpMemberDecorate %78 2 BuiltIn 78 
                                                      OpDecorate %78 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 102 
                                                      OpDecorate %169 Location 169 
                                                      OpDecorate vs_TEXCOORD1 Location 175 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %16 %17 %18 %6 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 1 
                                              %24 = OpTypePointer Uniform %7 
                                          i32 %28 = OpConstant 0 
                                          i32 %36 = OpConstant 2 
                                          i32 %45 = OpConstant 3 
                               Private f32_4* %49 = OpVariable Private 
                                          u32 %76 = OpConstant 1 
                                              %77 = OpTypeArray %6 %76 
                                              %78 = OpTypeStruct %7 %6 %77 
                                              %79 = OpTypePointer Output %78 
         Output struct {f32_4; f32; f32[1];}* %80 = OpVariable Output 
                                              %82 = OpTypePointer Output %7 
                                              %84 = OpTypePointer Private %6 
                                          u32 %87 = OpConstant 0 
                                              %88 = OpTypePointer Uniform %6 
                               Private f32_4* %93 = OpVariable Private 
                                              %94 = OpTypeVector %6 3 
                                          f32 %97 = OpConstant 3.674022E-40 
                                        f32_3 %98 = OpConstantComposite %97 %97 %97 
                       Output f32_4* vs_TEXCOORD0 = OpVariable Output 
                                             %103 = OpTypeVector %6 2 
                                         f32 %158 = OpConstant 3.674022E-40 
                                         f32 %159 = OpConstant 3.674022E-40 
                                       f32_3 %160 = OpConstantComposite %158 %158 %159 
                                             %168 = OpTypePointer Input %94 
                                Input f32_3* %169 = OpVariable Input 
                                             %174 = OpTypePointer Output %94 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                                         i32 %176 = OpConstant 4 
                                             %186 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %25 = OpAccessChain %21 %23 %23 
                                        f32_4 %26 = OpLoad %25 
                                        f32_4 %27 = OpFMul %13 %26 
                                                      OpStore %9 %27 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %28 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %44 = OpLoad %9 
                               Uniform f32_4* %46 = OpAccessChain %21 %23 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_4 %48 = OpFAdd %44 %47 
                                                      OpStore %9 %48 
                                        f32_4 %50 = OpLoad %9 
                                        f32_4 %51 = OpVectorShuffle %50 %50 1 1 1 1 
                               Uniform f32_4* %52 = OpAccessChain %21 %45 %23 
                                        f32_4 %53 = OpLoad %52 
                                        f32_4 %54 = OpFMul %51 %53 
                                                      OpStore %49 %54 
                               Uniform f32_4* %55 = OpAccessChain %21 %45 %28 
                                        f32_4 %56 = OpLoad %55 
                                        f32_4 %57 = OpLoad %9 
                                        f32_4 %58 = OpVectorShuffle %57 %57 0 0 0 0 
                                        f32_4 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %49 
                                        f32_4 %61 = OpFAdd %59 %60 
                                                      OpStore %49 %61 
                               Uniform f32_4* %62 = OpAccessChain %21 %45 %36 
                                        f32_4 %63 = OpLoad %62 
                                        f32_4 %64 = OpLoad %9 
                                        f32_4 %65 = OpVectorShuffle %64 %64 2 2 2 2 
                                        f32_4 %66 = OpFMul %63 %65 
                                        f32_4 %67 = OpLoad %49 
                                        f32_4 %68 = OpFAdd %66 %67 
                                                      OpStore %49 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %45 %45 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %9 
                                        f32_4 %72 = OpVectorShuffle %71 %71 3 3 3 3 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %49 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %49 %75 
                                        f32_4 %81 = OpLoad %49 
                                Output f32_4* %83 = OpAccessChain %80 %28 
                                                      OpStore %83 %81 
                                 Private f32* %85 = OpAccessChain %49 %76 
                                          f32 %86 = OpLoad %85 
                                 Uniform f32* %89 = OpAccessChain %21 %28 %87 
                                          f32 %90 = OpLoad %89 
                                          f32 %91 = OpFMul %86 %90 
                                 Private f32* %92 = OpAccessChain %49 %76 
                                                      OpStore %92 %91 
                                        f32_4 %95 = OpLoad %49 
                                        f32_3 %96 = OpVectorShuffle %95 %95 0 3 1 
                                        f32_3 %99 = OpFMul %96 %98 
                                       f32_4 %100 = OpLoad %93 
                                       f32_4 %101 = OpVectorShuffle %100 %99 4 1 5 6 
                                                      OpStore %93 %101 
                                       f32_4 %104 = OpLoad %49 
                                       f32_2 %105 = OpVectorShuffle %104 %104 2 3 
                                       f32_4 %106 = OpLoad vs_TEXCOORD0 
                                       f32_4 %107 = OpVectorShuffle %106 %105 0 1 4 5 
                                                      OpStore vs_TEXCOORD0 %107 
                                       f32_4 %108 = OpLoad %93 
                                       f32_2 %109 = OpVectorShuffle %108 %108 2 2 
                                       f32_4 %110 = OpLoad %93 
                                       f32_2 %111 = OpVectorShuffle %110 %110 0 3 
                                       f32_2 %112 = OpFAdd %109 %111 
                                       f32_4 %113 = OpLoad vs_TEXCOORD0 
                                       f32_4 %114 = OpVectorShuffle %113 %112 4 5 2 3 
                                                      OpStore vs_TEXCOORD0 %114 
                                       f32_4 %115 = OpLoad %9 
                                       f32_3 %116 = OpVectorShuffle %115 %115 1 1 1 
                              Uniform f32_4* %117 = OpAccessChain %21 %36 %23 
                                       f32_4 %118 = OpLoad %117 
                                       f32_3 %119 = OpVectorShuffle %118 %118 0 1 2 
                                       f32_3 %120 = OpFMul %116 %119 
                                       f32_4 %121 = OpLoad %49 
                                       f32_4 %122 = OpVectorShuffle %121 %120 4 5 6 3 
                                                      OpStore %49 %122 
                              Uniform f32_4* %123 = OpAccessChain %21 %36 %28 
                                       f32_4 %124 = OpLoad %123 
                                       f32_3 %125 = OpVectorShuffle %124 %124 0 1 2 
                                       f32_4 %126 = OpLoad %9 
                                       f32_3 %127 = OpVectorShuffle %126 %126 0 0 0 
                                       f32_3 %128 = OpFMul %125 %127 
                                       f32_4 %129 = OpLoad %49 
                                       f32_3 %130 = OpVectorShuffle %129 %129 0 1 2 
                                       f32_3 %131 = OpFAdd %128 %130 
                                       f32_4 %132 = OpLoad %49 
                                       f32_4 %133 = OpVectorShuffle %132 %131 4 5 6 3 
                                                      OpStore %49 %133 
                              Uniform f32_4* %134 = OpAccessChain %21 %36 %36 
                                       f32_4 %135 = OpLoad %134 
                                       f32_3 %136 = OpVectorShuffle %135 %135 0 1 2 
                                       f32_4 %137 = OpLoad %9 
                                       f32_3 %138 = OpVectorShuffle %137 %137 2 2 2 
                                       f32_3 %139 = OpFMul %136 %138 
                                       f32_4 %140 = OpLoad %49 
                                       f32_3 %141 = OpVectorShuffle %140 %140 0 1 2 
                                       f32_3 %142 = OpFAdd %139 %141 
                                       f32_4 %143 = OpLoad %9 
                                       f32_4 %144 = OpVectorShuffle %143 %142 4 5 6 3 
                                                      OpStore %9 %144 
                              Uniform f32_4* %145 = OpAccessChain %21 %36 %45 
                                       f32_4 %146 = OpLoad %145 
                                       f32_3 %147 = OpVectorShuffle %146 %146 0 1 2 
                                       f32_4 %148 = OpLoad %9 
                                       f32_3 %149 = OpVectorShuffle %148 %148 3 3 3 
                                       f32_3 %150 = OpFMul %147 %149 
                                       f32_4 %151 = OpLoad %9 
                                       f32_3 %152 = OpVectorShuffle %151 %151 0 1 2 
                                       f32_3 %153 = OpFAdd %150 %152 
                                       f32_4 %154 = OpLoad %9 
                                       f32_4 %155 = OpVectorShuffle %154 %153 4 5 6 3 
                                                      OpStore %9 %155 
                                       f32_4 %156 = OpLoad %9 
                                       f32_3 %157 = OpVectorShuffle %156 %156 0 1 2 
                                       f32_3 %161 = OpFMul %157 %160 
                                       f32_4 %162 = OpLoad %49 
                                       f32_4 %163 = OpVectorShuffle %162 %161 4 5 6 3 
                                                      OpStore %49 %163 
                                       f32_4 %164 = OpLoad %9 
                                       f32_3 %165 = OpVectorShuffle %164 %164 0 1 2 
                                       f32_3 %166 = OpFNegate %165 
                                       f32_3 %167 = OpFMul %166 %160 
                                       f32_3 %170 = OpLoad %169 
                                       f32_3 %171 = OpFAdd %167 %170 
                                       f32_4 %172 = OpLoad %9 
                                       f32_4 %173 = OpVectorShuffle %172 %171 4 5 6 3 
                                                      OpStore %9 %173 
                                Uniform f32* %177 = OpAccessChain %21 %176 
                                         f32 %178 = OpLoad %177 
                                       f32_3 %179 = OpCompositeConstruct %178 %178 %178 
                                       f32_4 %180 = OpLoad %9 
                                       f32_3 %181 = OpVectorShuffle %180 %180 0 1 2 
                                       f32_3 %182 = OpFMul %179 %181 
                                       f32_4 %183 = OpLoad %49 
                                       f32_3 %184 = OpVectorShuffle %183 %183 0 1 2 
                                       f32_3 %185 = OpFAdd %182 %184 
                                                      OpStore vs_TEXCOORD1 %185 
                                 Output f32* %187 = OpAccessChain %80 %28 %76 
                                         f32 %188 = OpLoad %187 
                                         f32 %189 = OpFNegate %188 
                                 Output f32* %190 = OpAccessChain %80 %28 %76 
                                                      OpStore %190 %189 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 589
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %25 %43 %584 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpDecorate %13 ArrayStride 13 
                                                      OpDecorate %14 ArrayStride 14 
                                                      OpMemberDecorate %15 0 Offset 15 
                                                      OpMemberDecorate %15 1 Offset 15 
                                                      OpMemberDecorate %15 2 Offset 15 
                                                      OpMemberDecorate %15 3 Offset 15 
                                                      OpMemberDecorate %15 4 Offset 15 
                                                      OpMemberDecorate %15 5 Offset 15 
                                                      OpMemberDecorate %15 6 Offset 15 
                                                      OpDecorate %15 Block 
                                                      OpDecorate %17 DescriptorSet 17 
                                                      OpDecorate %17 Binding 17 
                                                      OpDecorate vs_TEXCOORD1 Location 25 
                                                      OpDecorate vs_TEXCOORD0 Location 43 
                                                      OpDecorate %52 DescriptorSet 52 
                                                      OpDecorate %52 Binding 52 
                                                      OpDecorate %56 DescriptorSet 56 
                                                      OpDecorate %56 Binding 56 
                                                      OpDecorate %162 DescriptorSet 162 
                                                      OpDecorate %162 Binding 162 
                                                      OpDecorate %164 DescriptorSet 164 
                                                      OpDecorate %164 Binding 164 
                                                      OpDecorate %200 DescriptorSet 200 
                                                      OpDecorate %200 Binding 200 
                                                      OpDecorate %202 DescriptorSet 202 
                                                      OpDecorate %202 Binding 202 
                                                      OpDecorate %262 DescriptorSet 262 
                                                      OpDecorate %262 Binding 262 
                                                      OpDecorate %264 DescriptorSet 264 
                                                      OpDecorate %264 Binding 264 
                                                      OpDecorate %269 DescriptorSet 269 
                                                      OpDecorate %269 Binding 269 
                                                      OpDecorate %271 DescriptorSet 271 
                                                      OpDecorate %271 Binding 271 
                                                      OpDecorate %452 DescriptorSet 452 
                                                      OpDecorate %452 Binding 452 
                                                      OpDecorate %454 DescriptorSet 454 
                                                      OpDecorate %454 Binding 454 
                                                      OpDecorate %584 Location 584 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 3 
                                              %11 = OpTypeInt 32 0 
                                          u32 %12 = OpConstant 4 
                                              %13 = OpTypeArray %7 %12 
                                              %14 = OpTypeArray %7 %12 
                                              %15 = OpTypeStruct %10 %7 %7 %13 %7 %7 %14 
                                              %16 = OpTypePointer Uniform %15 
Uniform struct {f32_3; f32_4; f32_4; f32_4[4]; f32_4; f32_4; f32_4[4];}* %17 = OpVariable Uniform 
                                              %18 = OpTypeInt 32 1 
                                          i32 %19 = OpConstant 1 
                                          u32 %20 = OpConstant 2 
                                              %21 = OpTypePointer Uniform %6 
                                              %24 = OpTypePointer Input %10 
                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                                              %26 = OpTypePointer Input %6 
                                          u32 %30 = OpConstant 0 
                                              %31 = OpTypePointer Private %6 
                                              %39 = OpTypeVector %6 2 
                                              %40 = OpTypePointer Private %39 
                               Private f32_2* %41 = OpVariable Private 
                                              %42 = OpTypePointer Input %7 
                        Input f32_4* vs_TEXCOORD0 = OpVariable Input 
                                 Private f32* %49 = OpVariable Private 
                                              %50 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %51 = OpTypePointer UniformConstant %50 
         UniformConstant read_only Texture2D* %52 = OpVariable UniformConstant 
                                              %54 = OpTypeSampler 
                                              %55 = OpTypePointer UniformConstant %54 
                     UniformConstant sampler* %56 = OpVariable UniformConstant 
                                              %58 = OpTypeSampledImage %50 
                                          i32 %63 = OpConstant 2 
                                          u32 %68 = OpConstant 1 
                                          f32 %72 = OpConstant 3.674022E-40 
                                              %82 = OpTypePointer Private %10 
                               Private f32_3* %83 = OpVariable Private 
                                          i32 %86 = OpConstant 3 
                                              %87 = OpTypePointer Uniform %7 
                                          i32 %92 = OpConstant 0 
                                             %124 = OpTypePointer Uniform %10 
                              Private f32_4* %138 = OpVariable Private 
                                         i32 %142 = OpConstant 4 
                                Private f32* %154 = OpVariable Private 
                                         u32 %158 = OpConstant 3 
        UniformConstant read_only Texture2D* %162 = OpVariable UniformConstant 
                    UniformConstant sampler* %164 = OpVariable UniformConstant 
                              Private f32_3* %171 = OpVariable Private 
                                         f32 %191 = OpConstant 3.674022E-40 
                              Private f32_4* %199 = OpVariable Private 
        UniformConstant read_only Texture2D* %200 = OpVariable UniformConstant 
                    UniformConstant sampler* %202 = OpVariable UniformConstant 
                                         f32 %212 = OpConstant 3.674022E-40 
                                       f32_3 %213 = OpConstantComposite %212 %212 %212 
                                         f32 %215 = OpConstant 3.674022E-40 
                                       f32_3 %216 = OpConstantComposite %215 %215 %215 
                                         f32 %239 = OpConstant 3.674022E-40 
                                Private f32* %241 = OpVariable Private 
                                Private f32* %248 = OpVariable Private 
        UniformConstant read_only Texture2D* %262 = OpVariable UniformConstant 
                    UniformConstant sampler* %264 = OpVariable UniformConstant 
        UniformConstant read_only Texture2D* %269 = OpVariable UniformConstant 
                    UniformConstant sampler* %271 = OpVariable UniformConstant 
                                       f32_4 %280 = OpConstantComposite %72 %72 %72 %72 
                                         f32 %290 = OpConstant 3.674022E-40 
                                Private f32* %293 = OpVariable Private 
                                Private f32* %299 = OpVariable Private 
                                         f32 %313 = OpConstant 3.674022E-40 
                                         f32 %316 = OpConstant 3.674022E-40 
                                         f32 %361 = OpConstant 3.674022E-40 
                                         f32 %364 = OpConstant 3.674022E-40 
                                         f32 %381 = OpConstant 3.674022E-40 
                                             %393 = OpTypeBool 
                                             %394 = OpTypePointer Private %393 
                               Private bool* %395 = OpVariable Private 
                                         i32 %407 = OpConstant 6 
                               Private bool* %445 = OpVariable Private 
                                Private f32* %449 = OpVariable Private 
        UniformConstant read_only Texture2D* %452 = OpVariable UniformConstant 
                    UniformConstant sampler* %454 = OpVariable UniformConstant 
                                         f32 %459 = OpConstant 3.674022E-40 
                                         i32 %475 = OpConstant 5 
                                         f32 %502 = OpConstant 3.674022E-40 
                                             %583 = OpTypePointer Output %7 
                               Output f32_4* %584 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                 Uniform f32* %22 = OpAccessChain %17 %19 %20 
                                          f32 %23 = OpLoad %22 
                                   Input f32* %27 = OpAccessChain vs_TEXCOORD1 %20 
                                          f32 %28 = OpLoad %27 
                                          f32 %29 = OpFDiv %23 %28 
                                 Private f32* %32 = OpAccessChain %9 %30 
                                                      OpStore %32 %29 
                                        f32_4 %33 = OpLoad %9 
                                        f32_3 %34 = OpVectorShuffle %33 %33 0 0 0 
                                        f32_3 %35 = OpLoad vs_TEXCOORD1 
                                        f32_3 %36 = OpFMul %34 %35 
                                        f32_4 %37 = OpLoad %9 
                                        f32_4 %38 = OpVectorShuffle %37 %36 4 5 6 3 
                                                      OpStore %9 %38 
                                        f32_4 %44 = OpLoad vs_TEXCOORD0 
                                        f32_2 %45 = OpVectorShuffle %44 %44 0 1 
                                        f32_4 %46 = OpLoad vs_TEXCOORD0 
                                        f32_2 %47 = OpVectorShuffle %46 %46 3 3 
                                        f32_2 %48 = OpFDiv %45 %47 
                                                      OpStore %41 %48 
                          read_only Texture2D %53 = OpLoad %52 
                                      sampler %57 = OpLoad %56 
                   read_only Texture2DSampled %59 = OpSampledImage %53 %57 
                                        f32_2 %60 = OpLoad %41 
                                        f32_4 %61 = OpImageSampleImplicitLod %59 %60 
                                          f32 %62 = OpCompositeExtract %61 0 
                                                      OpStore %49 %62 
                                 Uniform f32* %64 = OpAccessChain %17 %63 %30 
                                          f32 %65 = OpLoad %64 
                                          f32 %66 = OpLoad %49 
                                          f32 %67 = OpFMul %65 %66 
                                 Uniform f32* %69 = OpAccessChain %17 %63 %68 
                                          f32 %70 = OpLoad %69 
                                          f32 %71 = OpFAdd %67 %70 
                                                      OpStore %49 %71 
                                          f32 %73 = OpLoad %49 
                                          f32 %74 = OpFDiv %72 %73 
                                                      OpStore %49 %74 
                                          f32 %75 = OpLoad %49 
                                        f32_3 %76 = OpCompositeConstruct %75 %75 %75 
                                        f32_4 %77 = OpLoad %9 
                                        f32_3 %78 = OpVectorShuffle %77 %77 0 1 2 
                                        f32_3 %79 = OpFMul %76 %78 
                                        f32_4 %80 = OpLoad %9 
                                        f32_4 %81 = OpVectorShuffle %80 %79 4 5 6 3 
                                                      OpStore %9 %81 
                                        f32_4 %84 = OpLoad %9 
                                        f32_3 %85 = OpVectorShuffle %84 %84 1 1 1 
                               Uniform f32_4* %88 = OpAccessChain %17 %86 %19 
                                        f32_4 %89 = OpLoad %88 
                                        f32_3 %90 = OpVectorShuffle %89 %89 0 1 2 
                                        f32_3 %91 = OpFMul %85 %90 
                                                      OpStore %83 %91 
                               Uniform f32_4* %93 = OpAccessChain %17 %86 %92 
                                        f32_4 %94 = OpLoad %93 
                                        f32_3 %95 = OpVectorShuffle %94 %94 0 1 2 
                                        f32_4 %96 = OpLoad %9 
                                        f32_3 %97 = OpVectorShuffle %96 %96 0 0 0 
                                        f32_3 %98 = OpFMul %95 %97 
                                        f32_3 %99 = OpLoad %83 
                                       f32_3 %100 = OpFAdd %98 %99 
                                       f32_4 %101 = OpLoad %9 
                                       f32_4 %102 = OpVectorShuffle %101 %100 4 5 2 6 
                                                      OpStore %9 %102 
                              Uniform f32_4* %103 = OpAccessChain %17 %86 %63 
                                       f32_4 %104 = OpLoad %103 
                                       f32_3 %105 = OpVectorShuffle %104 %104 0 1 2 
                                       f32_4 %106 = OpLoad %9 
                                       f32_3 %107 = OpVectorShuffle %106 %106 2 2 2 
                                       f32_3 %108 = OpFMul %105 %107 
                                       f32_4 %109 = OpLoad %9 
                                       f32_3 %110 = OpVectorShuffle %109 %109 0 1 3 
                                       f32_3 %111 = OpFAdd %108 %110 
                                       f32_4 %112 = OpLoad %9 
                                       f32_4 %113 = OpVectorShuffle %112 %111 4 5 6 3 
                                                      OpStore %9 %113 
                                       f32_4 %114 = OpLoad %9 
                                       f32_3 %115 = OpVectorShuffle %114 %114 0 1 2 
                              Uniform f32_4* %116 = OpAccessChain %17 %86 %86 
                                       f32_4 %117 = OpLoad %116 
                                       f32_3 %118 = OpVectorShuffle %117 %117 0 1 2 
                                       f32_3 %119 = OpFAdd %115 %118 
                                       f32_4 %120 = OpLoad %9 
                                       f32_4 %121 = OpVectorShuffle %120 %119 4 5 6 3 
                                                      OpStore %9 %121 
                                       f32_4 %122 = OpLoad %9 
                                       f32_3 %123 = OpVectorShuffle %122 %122 0 1 2 
                              Uniform f32_3* %125 = OpAccessChain %17 %92 
                                       f32_3 %126 = OpLoad %125 
                                       f32_3 %127 = OpFNegate %126 
                                       f32_3 %128 = OpFAdd %123 %127 
                                                      OpStore %83 %128 
                                       f32_3 %129 = OpLoad %83 
                                       f32_3 %130 = OpLoad %83 
                                         f32 %131 = OpDot %129 %130 
                                                      OpStore %49 %131 
                                         f32 %132 = OpLoad %49 
                                         f32 %133 = OpExtInst %1 32 %132 
                                                      OpStore %49 %133 
                                         f32 %134 = OpLoad %49 
                                       f32_3 %135 = OpCompositeConstruct %134 %134 %134 
                                       f32_3 %136 = OpLoad %83 
                                       f32_3 %137 = OpFMul %135 %136 
                                                      OpStore %83 %137 
                                       f32_4 %139 = OpLoad %9 
                                       f32_3 %140 = OpVectorShuffle %139 %139 0 1 2 
                                       f32_3 %141 = OpFNegate %140 
                              Uniform f32_4* %143 = OpAccessChain %17 %142 
                                       f32_4 %144 = OpLoad %143 
                                       f32_3 %145 = OpVectorShuffle %144 %144 0 1 2 
                                       f32_3 %146 = OpFAdd %141 %145 
                                       f32_4 %147 = OpLoad %138 
                                       f32_4 %148 = OpVectorShuffle %147 %146 4 5 6 3 
                                                      OpStore %138 %148 
                                       f32_4 %149 = OpLoad %138 
                                       f32_3 %150 = OpVectorShuffle %149 %149 0 1 2 
                                       f32_4 %151 = OpLoad %138 
                                       f32_3 %152 = OpVectorShuffle %151 %151 0 1 2 
                                         f32 %153 = OpDot %150 %152 
                                                      OpStore %49 %153 
                                         f32 %155 = OpLoad %49 
                                         f32 %156 = OpExtInst %1 32 %155 
                                                      OpStore %154 %156 
                                         f32 %157 = OpLoad %49 
                                Uniform f32* %159 = OpAccessChain %17 %142 %158 
                                         f32 %160 = OpLoad %159 
                                         f32 %161 = OpFMul %157 %160 
                                                      OpStore %49 %161 
                         read_only Texture2D %163 = OpLoad %162 
                                     sampler %165 = OpLoad %164 
                  read_only Texture2DSampled %166 = OpSampledImage %163 %165 
                                         f32 %167 = OpLoad %49 
                                       f32_2 %168 = OpCompositeConstruct %167 %167 
                                       f32_4 %169 = OpImageSampleImplicitLod %166 %168 
                                         f32 %170 = OpCompositeExtract %169 0 
                                                      OpStore %49 %170 
                                       f32_4 %172 = OpLoad %138 
                                       f32_3 %173 = OpVectorShuffle %172 %172 0 1 2 
                                         f32 %174 = OpLoad %154 
                                       f32_3 %175 = OpCompositeConstruct %174 %174 %174 
                                       f32_3 %176 = OpFMul %173 %175 
                                       f32_3 %177 = OpLoad %83 
                                       f32_3 %178 = OpFNegate %177 
                                       f32_3 %179 = OpFAdd %176 %178 
                                                      OpStore %171 %179 
                                         f32 %180 = OpLoad %154 
                                       f32_3 %181 = OpCompositeConstruct %180 %180 %180 
                                       f32_4 %182 = OpLoad %138 
                                       f32_3 %183 = OpVectorShuffle %182 %182 0 1 2 
                                       f32_3 %184 = OpFMul %181 %183 
                                       f32_4 %185 = OpLoad %138 
                                       f32_4 %186 = OpVectorShuffle %185 %184 4 5 6 3 
                                                      OpStore %138 %186 
                                       f32_3 %187 = OpLoad %171 
                                       f32_3 %188 = OpLoad %171 
                                         f32 %189 = OpDot %187 %188 
                                                      OpStore %154 %189 
                                         f32 %190 = OpLoad %154 
                                         f32 %192 = OpExtInst %1 40 %190 %191 
                                                      OpStore %154 %192 
                                         f32 %193 = OpLoad %154 
                                         f32 %194 = OpExtInst %1 32 %193 
                                                      OpStore %154 %194 
                                         f32 %195 = OpLoad %154 
                                       f32_3 %196 = OpCompositeConstruct %195 %195 %195 
                                       f32_3 %197 = OpLoad %171 
                                       f32_3 %198 = OpFMul %196 %197 
                                                      OpStore %171 %198 
                         read_only Texture2D %201 = OpLoad %200 
                                     sampler %203 = OpLoad %202 
                  read_only Texture2DSampled %204 = OpSampledImage %201 %203 
                                       f32_2 %205 = OpLoad %41 
                                       f32_4 %206 = OpImageSampleImplicitLod %204 %205 
                                       f32_3 %207 = OpVectorShuffle %206 %206 0 1 2 
                                       f32_4 %208 = OpLoad %199 
                                       f32_4 %209 = OpVectorShuffle %208 %207 4 5 6 3 
                                                      OpStore %199 %209 
                                       f32_4 %210 = OpLoad %199 
                                       f32_3 %211 = OpVectorShuffle %210 %210 0 1 2 
                                       f32_3 %214 = OpFMul %211 %213 
                                       f32_3 %217 = OpFAdd %214 %216 
                                       f32_4 %218 = OpLoad %199 
                                       f32_4 %219 = OpVectorShuffle %218 %217 4 5 6 3 
                                                      OpStore %199 %219 
                                       f32_4 %220 = OpLoad %199 
                                       f32_3 %221 = OpVectorShuffle %220 %220 0 1 2 
                                       f32_4 %222 = OpLoad %199 
                                       f32_3 %223 = OpVectorShuffle %222 %222 0 1 2 
                                         f32 %224 = OpDot %221 %223 
                                                      OpStore %154 %224 
                                         f32 %225 = OpLoad %154 
                                         f32 %226 = OpExtInst %1 32 %225 
                                                      OpStore %154 %226 
                                         f32 %227 = OpLoad %154 
                                       f32_3 %228 = OpCompositeConstruct %227 %227 %227 
                                       f32_4 %229 = OpLoad %199 
                                       f32_3 %230 = OpVectorShuffle %229 %229 0 1 2 
                                       f32_3 %231 = OpFMul %228 %230 
                                       f32_4 %232 = OpLoad %199 
                                       f32_4 %233 = OpVectorShuffle %232 %231 4 5 6 3 
                                                      OpStore %199 %233 
                                       f32_4 %234 = OpLoad %199 
                                       f32_3 %235 = OpVectorShuffle %234 %234 0 1 2 
                                       f32_3 %236 = OpLoad %171 
                                         f32 %237 = OpDot %235 %236 
                                                      OpStore %154 %237 
                                         f32 %238 = OpLoad %154 
                                         f32 %240 = OpExtInst %1 43 %238 %239 %72 
                                                      OpStore %154 %240 
                                       f32_4 %242 = OpLoad %138 
                                       f32_3 %243 = OpVectorShuffle %242 %242 0 1 2 
                                       f32_3 %244 = OpLoad %171 
                                         f32 %245 = OpDot %243 %244 
                                                      OpStore %241 %245 
                                         f32 %246 = OpLoad %241 
                                         f32 %247 = OpExtInst %1 43 %246 %239 %72 
                                                      OpStore %241 %247 
                                       f32_4 %249 = OpLoad %199 
                                       f32_3 %250 = OpVectorShuffle %249 %249 0 1 2 
                                       f32_4 %251 = OpLoad %138 
                                       f32_3 %252 = OpVectorShuffle %251 %251 0 1 2 
                                         f32 %253 = OpDot %250 %252 
                                                      OpStore %248 %253 
                                         f32 %254 = OpLoad %248 
                                         f32 %255 = OpExtInst %1 43 %254 %239 %72 
                                                      OpStore %248 %255 
                                       f32_4 %256 = OpLoad %199 
                                       f32_3 %257 = OpVectorShuffle %256 %256 0 1 2 
                                       f32_3 %258 = OpLoad %83 
                                       f32_3 %259 = OpFNegate %258 
                                         f32 %260 = OpDot %257 %259 
                                Private f32* %261 = OpAccessChain %83 %30 
                                                      OpStore %261 %260 
                         read_only Texture2D %263 = OpLoad %262 
                                     sampler %265 = OpLoad %264 
                  read_only Texture2DSampled %266 = OpSampledImage %263 %265 
                                       f32_2 %267 = OpLoad %41 
                                       f32_4 %268 = OpImageSampleImplicitLod %266 %267 
                                                      OpStore %138 %268 
                         read_only Texture2D %270 = OpLoad %269 
                                     sampler %272 = OpLoad %271 
                  read_only Texture2DSampled %273 = OpSampledImage %270 %272 
                                       f32_2 %274 = OpLoad %41 
                                       f32_4 %275 = OpImageSampleImplicitLod %273 %274 
                                       f32_3 %276 = OpVectorShuffle %275 %275 0 1 2 
                                                      OpStore %171 %276 
                                       f32_4 %277 = OpLoad %138 
                                       f32_4 %278 = OpVectorShuffle %277 %277 3 0 1 2 
                                       f32_4 %279 = OpFNegate %278 
                                       f32_4 %281 = OpFAdd %279 %280 
                                                      OpStore %199 %281 
                                Private f32* %282 = OpAccessChain %199 %30 
                                         f32 %283 = OpLoad %282 
                                Private f32* %284 = OpAccessChain %199 %30 
                                         f32 %285 = OpLoad %284 
                                         f32 %286 = OpFMul %283 %285 
                                Private f32* %287 = OpAccessChain %41 %30 
                                                      OpStore %287 %286 
                                Private f32* %288 = OpAccessChain %41 %30 
                                         f32 %289 = OpLoad %288 
                                         f32 %291 = OpExtInst %1 40 %289 %290 
                                Private f32* %292 = OpAccessChain %41 %30 
                                                      OpStore %292 %291 
                                Private f32* %294 = OpAccessChain %41 %30 
                                         f32 %295 = OpLoad %294 
                                Private f32* %296 = OpAccessChain %41 %30 
                                         f32 %297 = OpLoad %296 
                                         f32 %298 = OpFMul %295 %297 
                                                      OpStore %293 %298 
                                         f32 %300 = OpLoad %154 
                                         f32 %301 = OpLoad %293 
                                         f32 %302 = OpFMul %300 %301 
                                         f32 %303 = OpLoad %154 
                                         f32 %304 = OpFNegate %303 
                                         f32 %305 = OpFAdd %302 %304 
                                                      OpStore %299 %305 
                                         f32 %306 = OpLoad %299 
                                         f32 %307 = OpLoad %154 
                                         f32 %308 = OpFMul %306 %307 
                                         f32 %309 = OpFAdd %308 %72 
                                                      OpStore %154 %309 
                                         f32 %310 = OpLoad %154 
                                         f32 %311 = OpLoad %154 
                                         f32 %312 = OpFMul %310 %311 
                                         f32 %314 = OpFAdd %312 %313 
                                                      OpStore %154 %314 
                                         f32 %315 = OpLoad %293 
                                         f32 %317 = OpFMul %315 %316 
                                                      OpStore %293 %317 
                                         f32 %318 = OpLoad %293 
                                         f32 %319 = OpLoad %154 
                                         f32 %320 = OpFDiv %318 %319 
                                                      OpStore %293 %320 
                                Private f32* %321 = OpAccessChain %41 %30 
                                         f32 %322 = OpLoad %321 
                                         f32 %323 = OpFNegate %322 
                                         f32 %324 = OpFAdd %323 %72 
                                                      OpStore %154 %324 
                                Private f32* %325 = OpAccessChain %83 %30 
                                         f32 %326 = OpLoad %325 
                                         f32 %327 = OpExtInst %1 4 %326 
                                         f32 %328 = OpLoad %154 
                                         f32 %329 = OpFMul %327 %328 
                                Private f32* %330 = OpAccessChain %41 %30 
                                         f32 %331 = OpLoad %330 
                                         f32 %332 = OpFAdd %329 %331 
                                                      OpStore %299 %332 
                                         f32 %333 = OpLoad %248 
                                         f32 %334 = OpLoad %154 
                                         f32 %335 = OpFMul %333 %334 
                                Private f32* %336 = OpAccessChain %41 %30 
                                         f32 %337 = OpLoad %336 
                                         f32 %338 = OpFAdd %335 %337 
                                Private f32* %339 = OpAccessChain %41 %30 
                                                      OpStore %339 %338 
                                Private f32* %340 = OpAccessChain %41 %30 
                                         f32 %341 = OpLoad %340 
                                Private f32* %342 = OpAccessChain %83 %30 
                                         f32 %343 = OpLoad %342 
                                         f32 %344 = OpExtInst %1 4 %343 
                                         f32 %345 = OpFMul %341 %344 
                                Private f32* %346 = OpAccessChain %41 %30 
                                                      OpStore %346 %345 
                                Private f32* %347 = OpAccessChain %83 %30 
                                         f32 %348 = OpLoad %347 
                                         f32 %349 = OpExtInst %1 4 %348 
                                         f32 %350 = OpFNegate %349 
                                         f32 %351 = OpFAdd %350 %72 
                                                      OpStore %154 %351 
                                         f32 %352 = OpLoad %248 
                                         f32 %353 = OpLoad %299 
                                         f32 %354 = OpFMul %352 %353 
                                Private f32* %355 = OpAccessChain %41 %30 
                                         f32 %356 = OpLoad %355 
                                         f32 %357 = OpFAdd %354 %356 
                                Private f32* %358 = OpAccessChain %41 %30 
                                                      OpStore %358 %357 
                                Private f32* %359 = OpAccessChain %41 %30 
                                         f32 %360 = OpLoad %359 
                                         f32 %362 = OpFAdd %360 %361 
                                Private f32* %363 = OpAccessChain %41 %30 
                                                      OpStore %363 %362 
                                Private f32* %365 = OpAccessChain %41 %30 
                                         f32 %366 = OpLoad %365 
                                         f32 %367 = OpFDiv %364 %366 
                                Private f32* %368 = OpAccessChain %41 %30 
                                                      OpStore %368 %367 
                                         f32 %369 = OpLoad %293 
                                Private f32* %370 = OpAccessChain %41 %30 
                                         f32 %371 = OpLoad %370 
                                         f32 %372 = OpFMul %369 %371 
                                Private f32* %373 = OpAccessChain %41 %30 
                                                      OpStore %373 %372 
                                         f32 %374 = OpLoad %248 
                                Private f32* %375 = OpAccessChain %41 %30 
                                         f32 %376 = OpLoad %375 
                                         f32 %377 = OpFMul %374 %376 
                                Private f32* %378 = OpAccessChain %41 %30 
                                                      OpStore %378 %377 
                                Private f32* %379 = OpAccessChain %41 %30 
                                         f32 %380 = OpLoad %379 
                                         f32 %382 = OpFMul %380 %381 
                                Private f32* %383 = OpAccessChain %41 %30 
                                                      OpStore %383 %382 
                                Private f32* %384 = OpAccessChain %41 %30 
                                         f32 %385 = OpLoad %384 
                                         f32 %386 = OpExtInst %1 40 %385 %239 
                                Private f32* %387 = OpAccessChain %41 %30 
                                                      OpStore %387 %386 
                                       f32_4 %388 = OpLoad %138 
                                       f32_3 %389 = OpVectorShuffle %388 %388 0 1 2 
                                       f32_4 %390 = OpLoad %138 
                                       f32_3 %391 = OpVectorShuffle %390 %390 0 1 2 
                                         f32 %392 = OpDot %389 %391 
                                                      OpStore %293 %392 
                                         f32 %396 = OpLoad %293 
                                        bool %397 = OpFOrdNotEqual %396 %239 
                                                      OpStore %395 %397 
                                        bool %398 = OpLoad %395 
                                         f32 %399 = OpSelect %398 %72 %239 
                                                      OpStore %293 %399 
                                         f32 %400 = OpLoad %293 
                                Private f32* %401 = OpAccessChain %41 %30 
                                         f32 %402 = OpLoad %401 
                                         f32 %403 = OpFMul %400 %402 
                                Private f32* %404 = OpAccessChain %41 %30 
                                                      OpStore %404 %403 
                                       f32_4 %405 = OpLoad %9 
                                       f32_3 %406 = OpVectorShuffle %405 %405 1 1 1 
                              Uniform f32_4* %408 = OpAccessChain %17 %407 %19 
                                       f32_4 %409 = OpLoad %408 
                                       f32_3 %410 = OpVectorShuffle %409 %409 0 1 3 
                                       f32_3 %411 = OpFMul %406 %410 
                                                      OpStore %83 %411 
                              Uniform f32_4* %412 = OpAccessChain %17 %407 %92 
                                       f32_4 %413 = OpLoad %412 
                                       f32_3 %414 = OpVectorShuffle %413 %413 0 1 3 
                                       f32_4 %415 = OpLoad %9 
                                       f32_3 %416 = OpVectorShuffle %415 %415 0 0 0 
                                       f32_3 %417 = OpFMul %414 %416 
                                       f32_3 %418 = OpLoad %83 
                                       f32_3 %419 = OpFAdd %417 %418 
                                                      OpStore %83 %419 
                              Uniform f32_4* %420 = OpAccessChain %17 %407 %63 
                                       f32_4 %421 = OpLoad %420 
                                       f32_3 %422 = OpVectorShuffle %421 %421 0 1 3 
                                       f32_4 %423 = OpLoad %9 
                                       f32_3 %424 = OpVectorShuffle %423 %423 2 2 2 
                                       f32_3 %425 = OpFMul %422 %424 
                                       f32_3 %426 = OpLoad %83 
                                       f32_3 %427 = OpFAdd %425 %426 
                                       f32_4 %428 = OpLoad %9 
                                       f32_4 %429 = OpVectorShuffle %428 %427 4 5 6 3 
                                                      OpStore %9 %429 
                                       f32_4 %430 = OpLoad %9 
                                       f32_3 %431 = OpVectorShuffle %430 %430 0 1 2 
                              Uniform f32_4* %432 = OpAccessChain %17 %407 %86 
                                       f32_4 %433 = OpLoad %432 
                                       f32_3 %434 = OpVectorShuffle %433 %433 0 1 3 
                                       f32_3 %435 = OpFAdd %431 %434 
                                       f32_4 %436 = OpLoad %9 
                                       f32_4 %437 = OpVectorShuffle %436 %435 4 5 6 3 
                                                      OpStore %9 %437 
                                       f32_4 %438 = OpLoad %9 
                                       f32_2 %439 = OpVectorShuffle %438 %438 0 1 
                                       f32_4 %440 = OpLoad %9 
                                       f32_2 %441 = OpVectorShuffle %440 %440 2 2 
                                       f32_2 %442 = OpFDiv %439 %441 
                                       f32_4 %443 = OpLoad %9 
                                       f32_4 %444 = OpVectorShuffle %443 %442 4 5 2 3 
                                                      OpStore %9 %444 
                                Private f32* %446 = OpAccessChain %9 %20 
                                         f32 %447 = OpLoad %446 
                                        bool %448 = OpFOrdLessThan %447 %239 
                                                      OpStore %445 %448 
                                        bool %450 = OpLoad %445 
                                         f32 %451 = OpSelect %450 %72 %239 
                                                      OpStore %449 %451 
                         read_only Texture2D %453 = OpLoad %452 
                                     sampler %455 = OpLoad %454 
                  read_only Texture2DSampled %456 = OpSampledImage %453 %455 
                                       f32_4 %457 = OpLoad %9 
                                       f32_2 %458 = OpVectorShuffle %457 %457 0 1 
                                       f32_4 %460 = OpImageSampleImplicitLod %456 %458 Bias %7 
                                         f32 %461 = OpCompositeExtract %460 3 
                                Private f32* %462 = OpAccessChain %9 %30 
                                                      OpStore %462 %461 
                                         f32 %463 = OpLoad %449 
                                Private f32* %464 = OpAccessChain %9 %30 
                                         f32 %465 = OpLoad %464 
                                         f32 %466 = OpFMul %463 %465 
                                Private f32* %467 = OpAccessChain %9 %30 
                                                      OpStore %467 %466 
                                         f32 %468 = OpLoad %49 
                                Private f32* %469 = OpAccessChain %9 %30 
                                         f32 %470 = OpLoad %469 
                                         f32 %471 = OpFMul %468 %470 
                                Private f32* %472 = OpAccessChain %9 %30 
                                                      OpStore %472 %471 
                                       f32_4 %473 = OpLoad %9 
                                       f32_3 %474 = OpVectorShuffle %473 %473 0 0 0 
                              Uniform f32_4* %476 = OpAccessChain %17 %475 
                                       f32_4 %477 = OpLoad %476 
                                       f32_3 %478 = OpVectorShuffle %477 %477 0 1 2 
                                       f32_3 %479 = OpFMul %474 %478 
                                       f32_4 %480 = OpLoad %9 
                                       f32_4 %481 = OpVectorShuffle %480 %479 4 5 6 3 
                                                      OpStore %9 %481 
                                       f32_4 %482 = OpLoad %9 
                                       f32_3 %483 = OpVectorShuffle %482 %482 0 1 2 
                                       f32_2 %484 = OpLoad %41 
                                       f32_3 %485 = OpVectorShuffle %484 %484 0 0 0 
                                       f32_3 %486 = OpFMul %483 %485 
                                                      OpStore %83 %486 
                                         f32 %487 = OpLoad %241 
                                         f32 %488 = OpFNegate %487 
                                         f32 %489 = OpFAdd %488 %72 
                                                      OpStore %49 %489 
                                         f32 %490 = OpLoad %241 
                                         f32 %491 = OpLoad %241 
                                         f32 %492 = OpFMul %490 %491 
                                Private f32* %493 = OpAccessChain %41 %30 
                                                      OpStore %493 %492 
                                       f32_2 %494 = OpLoad %41 
                                       f32_2 %495 = OpVectorShuffle %494 %494 0 0 
                                       f32_4 %496 = OpLoad %199 
                                       f32_2 %497 = OpVectorShuffle %496 %496 0 0 
                                         f32 %498 = OpDot %495 %497 
                                Private f32* %499 = OpAccessChain %41 %30 
                                                      OpStore %499 %498 
                                Private f32* %500 = OpAccessChain %41 %30 
                                         f32 %501 = OpLoad %500 
                                         f32 %503 = OpFAdd %501 %502 
                                Private f32* %504 = OpAccessChain %41 %30 
                                                      OpStore %504 %503 
                                         f32 %505 = OpLoad %49 
                                         f32 %506 = OpLoad %49 
                                         f32 %507 = OpFMul %505 %506 
                                                      OpStore %293 %507 
                                         f32 %508 = OpLoad %293 
                                         f32 %509 = OpLoad %293 
                                         f32 %510 = OpFMul %508 %509 
                                                      OpStore %293 %510 
                                         f32 %511 = OpLoad %49 
                                         f32 %512 = OpLoad %293 
                                         f32 %513 = OpFMul %511 %512 
                                                      OpStore %49 %513 
                                       f32_4 %514 = OpLoad %199 
                                       f32_3 %515 = OpVectorShuffle %514 %514 1 2 3 
                                         f32 %516 = OpLoad %49 
                                       f32_3 %517 = OpCompositeConstruct %516 %516 %516 
                                       f32_3 %518 = OpFMul %515 %517 
                                       f32_4 %519 = OpLoad %138 
                                       f32_3 %520 = OpVectorShuffle %519 %519 0 1 2 
                                       f32_3 %521 = OpFAdd %518 %520 
                                       f32_4 %522 = OpLoad %138 
                                       f32_4 %523 = OpVectorShuffle %522 %521 4 5 6 3 
                                                      OpStore %138 %523 
                                       f32_3 %524 = OpLoad %83 
                                       f32_4 %525 = OpLoad %138 
                                       f32_3 %526 = OpVectorShuffle %525 %525 0 1 2 
                                       f32_3 %527 = OpFMul %524 %526 
                                                      OpStore %83 %527 
                                         f32 %528 = OpLoad %154 
                                         f32 %529 = OpLoad %154 
                                         f32 %530 = OpFMul %528 %529 
                                                      OpStore %49 %530 
                                         f32 %531 = OpLoad %49 
                                         f32 %532 = OpLoad %49 
                                         f32 %533 = OpFMul %531 %532 
                                                      OpStore %49 %533 
                                         f32 %534 = OpLoad %154 
                                         f32 %535 = OpLoad %49 
                                         f32 %536 = OpFMul %534 %535 
                                                      OpStore %49 %536 
                                Private f32* %537 = OpAccessChain %41 %30 
                                         f32 %538 = OpLoad %537 
                                         f32 %539 = OpLoad %49 
                                         f32 %540 = OpFMul %538 %539 
                                         f32 %541 = OpFAdd %540 %72 
                                                      OpStore %49 %541 
                                         f32 %542 = OpLoad %248 
                                         f32 %543 = OpFNegate %542 
                                         f32 %544 = OpFAdd %543 %72 
                                                      OpStore %293 %544 
                                         f32 %545 = OpLoad %293 
                                         f32 %546 = OpLoad %293 
                                         f32 %547 = OpFMul %545 %546 
                                                      OpStore %154 %547 
                                         f32 %548 = OpLoad %154 
                                         f32 %549 = OpLoad %154 
                                         f32 %550 = OpFMul %548 %549 
                                                      OpStore %154 %550 
                                         f32 %551 = OpLoad %293 
                                         f32 %552 = OpLoad %154 
                                         f32 %553 = OpFMul %551 %552 
                                                      OpStore %293 %553 
                                Private f32* %554 = OpAccessChain %41 %30 
                                         f32 %555 = OpLoad %554 
                                         f32 %556 = OpLoad %293 
                                         f32 %557 = OpFMul %555 %556 
                                         f32 %558 = OpFAdd %557 %72 
                                Private f32* %559 = OpAccessChain %41 %30 
                                                      OpStore %559 %558 
                                         f32 %560 = OpLoad %49 
                                Private f32* %561 = OpAccessChain %41 %30 
                                         f32 %562 = OpLoad %561 
                                         f32 %563 = OpFMul %560 %562 
                                                      OpStore %49 %563 
                                         f32 %564 = OpLoad %248 
                                         f32 %565 = OpLoad %49 
                                         f32 %566 = OpFMul %564 %565 
                                                      OpStore %49 %566 
                                         f32 %567 = OpLoad %49 
                                       f32_3 %568 = OpCompositeConstruct %567 %567 %567 
                                       f32_4 %569 = OpLoad %9 
                                       f32_3 %570 = OpVectorShuffle %569 %569 0 1 2 
                                       f32_3 %571 = OpFMul %568 %570 
                                       f32_4 %572 = OpLoad %9 
                                       f32_4 %573 = OpVectorShuffle %572 %571 4 5 6 3 
                                                      OpStore %9 %573 
                                       f32_3 %574 = OpLoad %171 
                                       f32_4 %575 = OpLoad %9 
                                       f32_3 %576 = OpVectorShuffle %575 %575 0 1 2 
                                       f32_3 %577 = OpFMul %574 %576 
                                       f32_3 %578 = OpLoad %83 
                                       f32_3 %579 = OpFAdd %577 %578 
                                       f32_4 %580 = OpLoad %9 
                                       f32_4 %581 = OpVectorShuffle %580 %579 4 5 6 3 
                                                      OpStore %9 %581 
                                Private f32* %582 = OpAccessChain %9 %158 
                                                      OpStore %582 %72 
                                       f32_4 %585 = OpLoad %9 
                                       f32_4 %586 = OpFNegate %585 
                                       f32_4 %587 = OpExtInst %1 29 %586 
                                                      OpStore %584 %587 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "POINT_COOKIE" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "POINT_COOKIE" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
UNITY_LOCATION(0) uniform  sampler2D _CameraDepthTexture;
UNITY_LOCATION(1) uniform  sampler2D _LightTextureB0;
UNITY_LOCATION(2) uniform  samplerCube _LightTexture0;
UNITY_LOCATION(3) uniform  sampler2D _CameraGBufferTexture0;
UNITY_LOCATION(4) uniform  sampler2D _CameraGBufferTexture1;
UNITY_LOCATION(5) uniform  sampler2D _CameraGBufferTexture2;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec2 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
vec4 u_xlat6;
float u_xlat8;
float u_xlat9;
vec3 u_xlat11;
float u_xlat15;
float u_xlat21;
float u_xlat22;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat2 = texture(_CameraDepthTexture, u_xlat1.xy);
    u_xlat21 = _ZBufferParams.x * u_xlat2.x + _ZBufferParams.y;
    u_xlat21 = float(1.0) / u_xlat21;
    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat0.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat2.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat0.xyz + (-_LightPos.xyz);
    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat15 = inversesqrt(u_xlat21);
    u_xlat21 = u_xlat21 * _LightPos.w;
    u_xlat4 = texture(_LightTextureB0, vec2(u_xlat21));
    u_xlat11.xyz = (-u_xlat3.xyz) * vec3(u_xlat15) + (-u_xlat2.xyz);
    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz;
    u_xlat21 = dot(u_xlat11.xyz, u_xlat11.xyz);
    u_xlat21 = max(u_xlat21, 0.00100000005);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat11.xyz = vec3(u_xlat21) * u_xlat11.xyz;
    u_xlat5 = texture(_CameraGBufferTexture2, u_xlat1.xy);
    u_xlat5.xyz = u_xlat5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat21 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat5.xyz = vec3(u_xlat21) * u_xlat5.xyz;
    u_xlat21 = dot(u_xlat5.xyz, u_xlat11.xyz);
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
    u_xlat15 = dot((-u_xlat3.xyz), u_xlat11.xyz);
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
    u_xlat22 = dot(u_xlat5.xyz, (-u_xlat3.xyz));
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
    u_xlat2.x = dot(u_xlat5.xyz, (-u_xlat2.xyz));
    u_xlat3 = texture(_CameraGBufferTexture1, u_xlat1.xy);
    u_xlat5 = texture(_CameraGBufferTexture0, u_xlat1.xy);
    u_xlat6 = (-u_xlat3.wxyz) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat1.x = u_xlat6.x * u_xlat6.x;
    u_xlat1.x = max(u_xlat1.x, 0.00200000009);
    u_xlat8 = u_xlat1.x * u_xlat1.x;
    u_xlat9 = u_xlat21 * u_xlat8 + (-u_xlat21);
    u_xlat21 = u_xlat9 * u_xlat21 + 1.0;
    u_xlat21 = u_xlat21 * u_xlat21 + 1.00000001e-07;
    u_xlat8 = u_xlat8 * 0.318309873;
    u_xlat21 = u_xlat8 / u_xlat21;
    u_xlat8 = (-u_xlat1.x) + 1.0;
    u_xlat9 = abs(u_xlat2.x) * u_xlat8 + u_xlat1.x;
    u_xlat1.x = u_xlat22 * u_xlat8 + u_xlat1.x;
    u_xlat1.x = u_xlat1.x * abs(u_xlat2.x);
    u_xlat8 = -abs(u_xlat2.x) + 1.0;
    u_xlat1.x = u_xlat22 * u_xlat9 + u_xlat1.x;
    u_xlat1.x = u_xlat1.x + 9.99999975e-06;
    u_xlat1.x = 0.5 / u_xlat1.x;
    u_xlat21 = u_xlat21 * u_xlat1.x;
    u_xlat21 = u_xlat21 * 3.14159274;
    u_xlat21 = u_xlat22 * u_xlat21;
    u_xlat21 = max(u_xlat21, 0.0);
    u_xlat1.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlatb1 = u_xlat1.x!=0.0;
    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
    u_xlat21 = u_xlat21 * u_xlat1.x;
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlat2 = texture(_LightTexture0, u_xlat0.xyz, -8.0);
    u_xlat0.x = u_xlat2.w * u_xlat4.x;
    u_xlat0.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat2.xyz = u_xlat0.xyz * vec3(u_xlat21);
    u_xlat21 = (-u_xlat15) + 1.0;
    u_xlat1.x = u_xlat21 * u_xlat21;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat21 = u_xlat21 * u_xlat1.x;
    u_xlat3.xyz = u_xlat6.yzw * vec3(u_xlat21) + u_xlat3.xyz;
    u_xlat2.xyz = u_xlat2.xyz * u_xlat3.xyz;
    u_xlat21 = u_xlat8 * u_xlat8;
    u_xlat21 = u_xlat21 * u_xlat21;
    u_xlat21 = u_xlat8 * u_xlat21;
    u_xlat1.x = u_xlat15 + u_xlat15;
    u_xlat1.x = u_xlat15 * u_xlat1.x;
    u_xlat1.x = u_xlat1.x * u_xlat6.x + -0.5;
    u_xlat21 = u_xlat1.x * u_xlat21 + 1.0;
    u_xlat8 = (-u_xlat22) + 1.0;
    u_xlat15 = u_xlat8 * u_xlat8;
    u_xlat15 = u_xlat15 * u_xlat15;
    u_xlat8 = u_xlat8 * u_xlat15;
    u_xlat1.x = u_xlat1.x * u_xlat8 + 1.0;
    u_xlat21 = u_xlat21 * u_xlat1.x;
    u_xlat21 = u_xlat22 * u_xlat21;
    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat0.xyz = u_xlat5.xyz * u_xlat0.xyz + u_xlat2.xyz;
    u_xlat0.w = 1.0;
    SV_Target0 = exp2((-u_xlat0));
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "POINT_COOKIE" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 192
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %80 %102 %169 %175 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpMemberDecorate %78 0 BuiltIn 78 
                                                      OpMemberDecorate %78 1 BuiltIn 78 
                                                      OpMemberDecorate %78 2 BuiltIn 78 
                                                      OpDecorate %78 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 102 
                                                      OpDecorate %169 Location 169 
                                                      OpDecorate vs_TEXCOORD1 Location 175 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %16 %17 %18 %6 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 1 
                                              %24 = OpTypePointer Uniform %7 
                                          i32 %28 = OpConstant 0 
                                          i32 %36 = OpConstant 2 
                                          i32 %45 = OpConstant 3 
                               Private f32_4* %49 = OpVariable Private 
                                          u32 %76 = OpConstant 1 
                                              %77 = OpTypeArray %6 %76 
                                              %78 = OpTypeStruct %7 %6 %77 
                                              %79 = OpTypePointer Output %78 
         Output struct {f32_4; f32; f32[1];}* %80 = OpVariable Output 
                                              %82 = OpTypePointer Output %7 
                                              %84 = OpTypePointer Private %6 
                                          u32 %87 = OpConstant 0 
                                              %88 = OpTypePointer Uniform %6 
                               Private f32_4* %93 = OpVariable Private 
                                              %94 = OpTypeVector %6 3 
                                          f32 %97 = OpConstant 3.674022E-40 
                                        f32_3 %98 = OpConstantComposite %97 %97 %97 
                       Output f32_4* vs_TEXCOORD0 = OpVariable Output 
                                             %103 = OpTypeVector %6 2 
                                         f32 %158 = OpConstant 3.674022E-40 
                                         f32 %159 = OpConstant 3.674022E-40 
                                       f32_3 %160 = OpConstantComposite %158 %158 %159 
                                             %168 = OpTypePointer Input %94 
                                Input f32_3* %169 = OpVariable Input 
                                             %174 = OpTypePointer Output %94 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                                         i32 %176 = OpConstant 4 
                                             %186 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %25 = OpAccessChain %21 %23 %23 
                                        f32_4 %26 = OpLoad %25 
                                        f32_4 %27 = OpFMul %13 %26 
                                                      OpStore %9 %27 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %28 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %44 = OpLoad %9 
                               Uniform f32_4* %46 = OpAccessChain %21 %23 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_4 %48 = OpFAdd %44 %47 
                                                      OpStore %9 %48 
                                        f32_4 %50 = OpLoad %9 
                                        f32_4 %51 = OpVectorShuffle %50 %50 1 1 1 1 
                               Uniform f32_4* %52 = OpAccessChain %21 %45 %23 
                                        f32_4 %53 = OpLoad %52 
                                        f32_4 %54 = OpFMul %51 %53 
                                                      OpStore %49 %54 
                               Uniform f32_4* %55 = OpAccessChain %21 %45 %28 
                                        f32_4 %56 = OpLoad %55 
                                        f32_4 %57 = OpLoad %9 
                                        f32_4 %58 = OpVectorShuffle %57 %57 0 0 0 0 
                                        f32_4 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %49 
                                        f32_4 %61 = OpFAdd %59 %60 
                                                      OpStore %49 %61 
                               Uniform f32_4* %62 = OpAccessChain %21 %45 %36 
                                        f32_4 %63 = OpLoad %62 
                                        f32_4 %64 = OpLoad %9 
                                        f32_4 %65 = OpVectorShuffle %64 %64 2 2 2 2 
                                        f32_4 %66 = OpFMul %63 %65 
                                        f32_4 %67 = OpLoad %49 
                                        f32_4 %68 = OpFAdd %66 %67 
                                                      OpStore %49 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %45 %45 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %9 
                                        f32_4 %72 = OpVectorShuffle %71 %71 3 3 3 3 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %49 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %49 %75 
                                        f32_4 %81 = OpLoad %49 
                                Output f32_4* %83 = OpAccessChain %80 %28 
                                                      OpStore %83 %81 
                                 Private f32* %85 = OpAccessChain %49 %76 
                                          f32 %86 = OpLoad %85 
                                 Uniform f32* %89 = OpAccessChain %21 %28 %87 
                                          f32 %90 = OpLoad %89 
                                          f32 %91 = OpFMul %86 %90 
                                 Private f32* %92 = OpAccessChain %49 %76 
                                                      OpStore %92 %91 
                                        f32_4 %95 = OpLoad %49 
                                        f32_3 %96 = OpVectorShuffle %95 %95 0 3 1 
                                        f32_3 %99 = OpFMul %96 %98 
                                       f32_4 %100 = OpLoad %93 
                                       f32_4 %101 = OpVectorShuffle %100 %99 4 1 5 6 
                                                      OpStore %93 %101 
                                       f32_4 %104 = OpLoad %49 
                                       f32_2 %105 = OpVectorShuffle %104 %104 2 3 
                                       f32_4 %106 = OpLoad vs_TEXCOORD0 
                                       f32_4 %107 = OpVectorShuffle %106 %105 0 1 4 5 
                                                      OpStore vs_TEXCOORD0 %107 
                                       f32_4 %108 = OpLoad %93 
                                       f32_2 %109 = OpVectorShuffle %108 %108 2 2 
                                       f32_4 %110 = OpLoad %93 
                                       f32_2 %111 = OpVectorShuffle %110 %110 0 3 
                                       f32_2 %112 = OpFAdd %109 %111 
                                       f32_4 %113 = OpLoad vs_TEXCOORD0 
                                       f32_4 %114 = OpVectorShuffle %113 %112 4 5 2 3 
                                                      OpStore vs_TEXCOORD0 %114 
                                       f32_4 %115 = OpLoad %9 
                                       f32_3 %116 = OpVectorShuffle %115 %115 1 1 1 
                              Uniform f32_4* %117 = OpAccessChain %21 %36 %23 
                                       f32_4 %118 = OpLoad %117 
                                       f32_3 %119 = OpVectorShuffle %118 %118 0 1 2 
                                       f32_3 %120 = OpFMul %116 %119 
                                       f32_4 %121 = OpLoad %49 
                                       f32_4 %122 = OpVectorShuffle %121 %120 4 5 6 3 
                                                      OpStore %49 %122 
                              Uniform f32_4* %123 = OpAccessChain %21 %36 %28 
                                       f32_4 %124 = OpLoad %123 
                                       f32_3 %125 = OpVectorShuffle %124 %124 0 1 2 
                                       f32_4 %126 = OpLoad %9 
                                       f32_3 %127 = OpVectorShuffle %126 %126 0 0 0 
                                       f32_3 %128 = OpFMul %125 %127 
                                       f32_4 %129 = OpLoad %49 
                                       f32_3 %130 = OpVectorShuffle %129 %129 0 1 2 
                                       f32_3 %131 = OpFAdd %128 %130 
                                       f32_4 %132 = OpLoad %49 
                                       f32_4 %133 = OpVectorShuffle %132 %131 4 5 6 3 
                                                      OpStore %49 %133 
                              Uniform f32_4* %134 = OpAccessChain %21 %36 %36 
                                       f32_4 %135 = OpLoad %134 
                                       f32_3 %136 = OpVectorShuffle %135 %135 0 1 2 
                                       f32_4 %137 = OpLoad %9 
                                       f32_3 %138 = OpVectorShuffle %137 %137 2 2 2 
                                       f32_3 %139 = OpFMul %136 %138 
                                       f32_4 %140 = OpLoad %49 
                                       f32_3 %141 = OpVectorShuffle %140 %140 0 1 2 
                                       f32_3 %142 = OpFAdd %139 %141 
                                       f32_4 %143 = OpLoad %9 
                                       f32_4 %144 = OpVectorShuffle %143 %142 4 5 6 3 
                                                      OpStore %9 %144 
                              Uniform f32_4* %145 = OpAccessChain %21 %36 %45 
                                       f32_4 %146 = OpLoad %145 
                                       f32_3 %147 = OpVectorShuffle %146 %146 0 1 2 
                                       f32_4 %148 = OpLoad %9 
                                       f32_3 %149 = OpVectorShuffle %148 %148 3 3 3 
                                       f32_3 %150 = OpFMul %147 %149 
                                       f32_4 %151 = OpLoad %9 
                                       f32_3 %152 = OpVectorShuffle %151 %151 0 1 2 
                                       f32_3 %153 = OpFAdd %150 %152 
                                       f32_4 %154 = OpLoad %9 
                                       f32_4 %155 = OpVectorShuffle %154 %153 4 5 6 3 
                                                      OpStore %9 %155 
                                       f32_4 %156 = OpLoad %9 
                                       f32_3 %157 = OpVectorShuffle %156 %156 0 1 2 
                                       f32_3 %161 = OpFMul %157 %160 
                                       f32_4 %162 = OpLoad %49 
                                       f32_4 %163 = OpVectorShuffle %162 %161 4 5 6 3 
                                                      OpStore %49 %163 
                                       f32_4 %164 = OpLoad %9 
                                       f32_3 %165 = OpVectorShuffle %164 %164 0 1 2 
                                       f32_3 %166 = OpFNegate %165 
                                       f32_3 %167 = OpFMul %166 %160 
                                       f32_3 %170 = OpLoad %169 
                                       f32_3 %171 = OpFAdd %167 %170 
                                       f32_4 %172 = OpLoad %9 
                                       f32_4 %173 = OpVectorShuffle %172 %171 4 5 6 3 
                                                      OpStore %9 %173 
                                Uniform f32* %177 = OpAccessChain %21 %176 
                                         f32 %178 = OpLoad %177 
                                       f32_3 %179 = OpCompositeConstruct %178 %178 %178 
                                       f32_4 %180 = OpLoad %9 
                                       f32_3 %181 = OpVectorShuffle %180 %180 0 1 2 
                                       f32_3 %182 = OpFMul %179 %181 
                                       f32_4 %183 = OpLoad %49 
                                       f32_3 %184 = OpVectorShuffle %183 %183 0 1 2 
                                       f32_3 %185 = OpFAdd %182 %184 
                                                      OpStore vs_TEXCOORD1 %185 
                                 Output f32* %187 = OpAccessChain %80 %28 %76 
                                         f32 %188 = OpLoad %187 
                                         f32 %189 = OpFNegate %188 
                                 Output f32* %190 = OpAccessChain %80 %28 %76 
                                                      OpStore %190 %189 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 576
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %25 %43 %571 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpDecorate %13 ArrayStride 13 
                                                      OpDecorate %14 ArrayStride 14 
                                                      OpMemberDecorate %15 0 Offset 15 
                                                      OpMemberDecorate %15 1 Offset 15 
                                                      OpMemberDecorate %15 2 Offset 15 
                                                      OpMemberDecorate %15 3 Offset 15 
                                                      OpMemberDecorate %15 4 Offset 15 
                                                      OpMemberDecorate %15 5 Offset 15 
                                                      OpMemberDecorate %15 6 Offset 15 
                                                      OpDecorate %15 Block 
                                                      OpDecorate %17 DescriptorSet 17 
                                                      OpDecorate %17 Binding 17 
                                                      OpDecorate vs_TEXCOORD1 Location 25 
                                                      OpDecorate vs_TEXCOORD0 Location 43 
                                                      OpDecorate %52 DescriptorSet 52 
                                                      OpDecorate %52 Binding 52 
                                                      OpDecorate %56 DescriptorSet 56 
                                                      OpDecorate %56 Binding 56 
                                                      OpDecorate %162 DescriptorSet 162 
                                                      OpDecorate %162 Binding 162 
                                                      OpDecorate %164 DescriptorSet 164 
                                                      OpDecorate %164 Binding 164 
                                                      OpDecorate %201 DescriptorSet 201 
                                                      OpDecorate %201 Binding 201 
                                                      OpDecorate %203 DescriptorSet 203 
                                                      OpDecorate %203 Binding 203 
                                                      OpDecorate %265 DescriptorSet 265 
                                                      OpDecorate %265 Binding 265 
                                                      OpDecorate %267 DescriptorSet 267 
                                                      OpDecorate %267 Binding 267 
                                                      OpDecorate %272 DescriptorSet 272 
                                                      OpDecorate %272 Binding 272 
                                                      OpDecorate %274 DescriptorSet 274 
                                                      OpDecorate %274 Binding 274 
                                                      OpDecorate %443 DescriptorSet 443 
                                                      OpDecorate %443 Binding 443 
                                                      OpDecorate %445 DescriptorSet 445 
                                                      OpDecorate %445 Binding 445 
                                                      OpDecorate %571 Location 571 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 3 
                                              %11 = OpTypeInt 32 0 
                                          u32 %12 = OpConstant 4 
                                              %13 = OpTypeArray %7 %12 
                                              %14 = OpTypeArray %7 %12 
                                              %15 = OpTypeStruct %10 %7 %7 %13 %7 %7 %14 
                                              %16 = OpTypePointer Uniform %15 
Uniform struct {f32_3; f32_4; f32_4; f32_4[4]; f32_4; f32_4; f32_4[4];}* %17 = OpVariable Uniform 
                                              %18 = OpTypeInt 32 1 
                                          i32 %19 = OpConstant 1 
                                          u32 %20 = OpConstant 2 
                                              %21 = OpTypePointer Uniform %6 
                                              %24 = OpTypePointer Input %10 
                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                                              %26 = OpTypePointer Input %6 
                                          u32 %30 = OpConstant 0 
                                              %31 = OpTypePointer Private %6 
                                              %39 = OpTypeVector %6 2 
                                              %40 = OpTypePointer Private %39 
                               Private f32_2* %41 = OpVariable Private 
                                              %42 = OpTypePointer Input %7 
                        Input f32_4* vs_TEXCOORD0 = OpVariable Input 
                                 Private f32* %49 = OpVariable Private 
                                              %50 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %51 = OpTypePointer UniformConstant %50 
         UniformConstant read_only Texture2D* %52 = OpVariable UniformConstant 
                                              %54 = OpTypeSampler 
                                              %55 = OpTypePointer UniformConstant %54 
                     UniformConstant sampler* %56 = OpVariable UniformConstant 
                                              %58 = OpTypeSampledImage %50 
                                          i32 %63 = OpConstant 2 
                                          u32 %68 = OpConstant 1 
                                          f32 %72 = OpConstant 3.674022E-40 
                                              %82 = OpTypePointer Private %10 
                               Private f32_3* %83 = OpVariable Private 
                                          i32 %86 = OpConstant 3 
                                              %87 = OpTypePointer Uniform %7 
                                          i32 %92 = OpConstant 0 
                                             %124 = OpTypePointer Uniform %10 
                              Private f32_4* %138 = OpVariable Private 
                                         i32 %141 = OpConstant 4 
                                Private f32* %154 = OpVariable Private 
                                         u32 %158 = OpConstant 3 
        UniformConstant read_only Texture2D* %162 = OpVariable UniformConstant 
                    UniformConstant sampler* %164 = OpVariable UniformConstant 
                              Private f32_3* %171 = OpVariable Private 
                                         f32 %192 = OpConstant 3.674022E-40 
                              Private f32_4* %200 = OpVariable Private 
        UniformConstant read_only Texture2D* %201 = OpVariable UniformConstant 
                    UniformConstant sampler* %203 = OpVariable UniformConstant 
                                         f32 %213 = OpConstant 3.674022E-40 
                                       f32_3 %214 = OpConstantComposite %213 %213 %213 
                                         f32 %216 = OpConstant 3.674022E-40 
                                       f32_3 %217 = OpConstantComposite %216 %216 %216 
                                         f32 %240 = OpConstant 3.674022E-40 
                                Private f32* %242 = OpVariable Private 
                                Private f32* %250 = OpVariable Private 
        UniformConstant read_only Texture2D* %265 = OpVariable UniformConstant 
                    UniformConstant sampler* %267 = OpVariable UniformConstant 
        UniformConstant read_only Texture2D* %272 = OpVariable UniformConstant 
                    UniformConstant sampler* %274 = OpVariable UniformConstant 
                                       f32_4 %283 = OpConstantComposite %72 %72 %72 %72 
                                         f32 %293 = OpConstant 3.674022E-40 
                                Private f32* %296 = OpVariable Private 
                                Private f32* %302 = OpVariable Private 
                                         f32 %316 = OpConstant 3.674022E-40 
                                         f32 %319 = OpConstant 3.674022E-40 
                                         f32 %364 = OpConstant 3.674022E-40 
                                         f32 %367 = OpConstant 3.674022E-40 
                                         f32 %384 = OpConstant 3.674022E-40 
                                             %396 = OpTypeBool 
                                             %397 = OpTypePointer Private %396 
                               Private bool* %398 = OpVariable Private 
                                         i32 %410 = OpConstant 6 
                                             %441 = OpTypeImage %6 Cube 0 0 0 1 Unknown 
                                             %442 = OpTypePointer UniformConstant %441 
      UniformConstant read_only TextureCube* %443 = OpVariable UniformConstant 
                    UniformConstant sampler* %445 = OpVariable UniformConstant 
                                             %447 = OpTypeSampledImage %441 
                                         f32 %451 = OpConstant 3.674022E-40 
                                         i32 %462 = OpConstant 5 
                                         f32 %489 = OpConstant 3.674022E-40 
                                             %570 = OpTypePointer Output %7 
                               Output f32_4* %571 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                 Uniform f32* %22 = OpAccessChain %17 %19 %20 
                                          f32 %23 = OpLoad %22 
                                   Input f32* %27 = OpAccessChain vs_TEXCOORD1 %20 
                                          f32 %28 = OpLoad %27 
                                          f32 %29 = OpFDiv %23 %28 
                                 Private f32* %32 = OpAccessChain %9 %30 
                                                      OpStore %32 %29 
                                        f32_4 %33 = OpLoad %9 
                                        f32_3 %34 = OpVectorShuffle %33 %33 0 0 0 
                                        f32_3 %35 = OpLoad vs_TEXCOORD1 
                                        f32_3 %36 = OpFMul %34 %35 
                                        f32_4 %37 = OpLoad %9 
                                        f32_4 %38 = OpVectorShuffle %37 %36 4 5 6 3 
                                                      OpStore %9 %38 
                                        f32_4 %44 = OpLoad vs_TEXCOORD0 
                                        f32_2 %45 = OpVectorShuffle %44 %44 0 1 
                                        f32_4 %46 = OpLoad vs_TEXCOORD0 
                                        f32_2 %47 = OpVectorShuffle %46 %46 3 3 
                                        f32_2 %48 = OpFDiv %45 %47 
                                                      OpStore %41 %48 
                          read_only Texture2D %53 = OpLoad %52 
                                      sampler %57 = OpLoad %56 
                   read_only Texture2DSampled %59 = OpSampledImage %53 %57 
                                        f32_2 %60 = OpLoad %41 
                                        f32_4 %61 = OpImageSampleImplicitLod %59 %60 
                                          f32 %62 = OpCompositeExtract %61 0 
                                                      OpStore %49 %62 
                                 Uniform f32* %64 = OpAccessChain %17 %63 %30 
                                          f32 %65 = OpLoad %64 
                                          f32 %66 = OpLoad %49 
                                          f32 %67 = OpFMul %65 %66 
                                 Uniform f32* %69 = OpAccessChain %17 %63 %68 
                                          f32 %70 = OpLoad %69 
                                          f32 %71 = OpFAdd %67 %70 
                                                      OpStore %49 %71 
                                          f32 %73 = OpLoad %49 
                                          f32 %74 = OpFDiv %72 %73 
                                                      OpStore %49 %74 
                                          f32 %75 = OpLoad %49 
                                        f32_3 %76 = OpCompositeConstruct %75 %75 %75 
                                        f32_4 %77 = OpLoad %9 
                                        f32_3 %78 = OpVectorShuffle %77 %77 0 1 2 
                                        f32_3 %79 = OpFMul %76 %78 
                                        f32_4 %80 = OpLoad %9 
                                        f32_4 %81 = OpVectorShuffle %80 %79 4 5 6 3 
                                                      OpStore %9 %81 
                                        f32_4 %84 = OpLoad %9 
                                        f32_3 %85 = OpVectorShuffle %84 %84 1 1 1 
                               Uniform f32_4* %88 = OpAccessChain %17 %86 %19 
                                        f32_4 %89 = OpLoad %88 
                                        f32_3 %90 = OpVectorShuffle %89 %89 0 1 2 
                                        f32_3 %91 = OpFMul %85 %90 
                                                      OpStore %83 %91 
                               Uniform f32_4* %93 = OpAccessChain %17 %86 %92 
                                        f32_4 %94 = OpLoad %93 
                                        f32_3 %95 = OpVectorShuffle %94 %94 0 1 2 
                                        f32_4 %96 = OpLoad %9 
                                        f32_3 %97 = OpVectorShuffle %96 %96 0 0 0 
                                        f32_3 %98 = OpFMul %95 %97 
                                        f32_3 %99 = OpLoad %83 
                                       f32_3 %100 = OpFAdd %98 %99 
                                       f32_4 %101 = OpLoad %9 
                                       f32_4 %102 = OpVectorShuffle %101 %100 4 5 2 6 
                                                      OpStore %9 %102 
                              Uniform f32_4* %103 = OpAccessChain %17 %86 %63 
                                       f32_4 %104 = OpLoad %103 
                                       f32_3 %105 = OpVectorShuffle %104 %104 0 1 2 
                                       f32_4 %106 = OpLoad %9 
                                       f32_3 %107 = OpVectorShuffle %106 %106 2 2 2 
                                       f32_3 %108 = OpFMul %105 %107 
                                       f32_4 %109 = OpLoad %9 
                                       f32_3 %110 = OpVectorShuffle %109 %109 0 1 3 
                                       f32_3 %111 = OpFAdd %108 %110 
                                       f32_4 %112 = OpLoad %9 
                                       f32_4 %113 = OpVectorShuffle %112 %111 4 5 6 3 
                                                      OpStore %9 %113 
                                       f32_4 %114 = OpLoad %9 
                                       f32_3 %115 = OpVectorShuffle %114 %114 0 1 2 
                              Uniform f32_4* %116 = OpAccessChain %17 %86 %86 
                                       f32_4 %117 = OpLoad %116 
                                       f32_3 %118 = OpVectorShuffle %117 %117 0 1 2 
                                       f32_3 %119 = OpFAdd %115 %118 
                                       f32_4 %120 = OpLoad %9 
                                       f32_4 %121 = OpVectorShuffle %120 %119 4 5 6 3 
                                                      OpStore %9 %121 
                                       f32_4 %122 = OpLoad %9 
                                       f32_3 %123 = OpVectorShuffle %122 %122 0 1 2 
                              Uniform f32_3* %125 = OpAccessChain %17 %92 
                                       f32_3 %126 = OpLoad %125 
                                       f32_3 %127 = OpFNegate %126 
                                       f32_3 %128 = OpFAdd %123 %127 
                                                      OpStore %83 %128 
                                       f32_3 %129 = OpLoad %83 
                                       f32_3 %130 = OpLoad %83 
                                         f32 %131 = OpDot %129 %130 
                                                      OpStore %49 %131 
                                         f32 %132 = OpLoad %49 
                                         f32 %133 = OpExtInst %1 32 %132 
                                                      OpStore %49 %133 
                                         f32 %134 = OpLoad %49 
                                       f32_3 %135 = OpCompositeConstruct %134 %134 %134 
                                       f32_3 %136 = OpLoad %83 
                                       f32_3 %137 = OpFMul %135 %136 
                                                      OpStore %83 %137 
                                       f32_4 %139 = OpLoad %9 
                                       f32_3 %140 = OpVectorShuffle %139 %139 0 1 2 
                              Uniform f32_4* %142 = OpAccessChain %17 %141 
                                       f32_4 %143 = OpLoad %142 
                                       f32_3 %144 = OpVectorShuffle %143 %143 0 1 2 
                                       f32_3 %145 = OpFNegate %144 
                                       f32_3 %146 = OpFAdd %140 %145 
                                       f32_4 %147 = OpLoad %138 
                                       f32_4 %148 = OpVectorShuffle %147 %146 4 5 6 3 
                                                      OpStore %138 %148 
                                       f32_4 %149 = OpLoad %138 
                                       f32_3 %150 = OpVectorShuffle %149 %149 0 1 2 
                                       f32_4 %151 = OpLoad %138 
                                       f32_3 %152 = OpVectorShuffle %151 %151 0 1 2 
                                         f32 %153 = OpDot %150 %152 
                                                      OpStore %49 %153 
                                         f32 %155 = OpLoad %49 
                                         f32 %156 = OpExtInst %1 32 %155 
                                                      OpStore %154 %156 
                                         f32 %157 = OpLoad %49 
                                Uniform f32* %159 = OpAccessChain %17 %141 %158 
                                         f32 %160 = OpLoad %159 
                                         f32 %161 = OpFMul %157 %160 
                                                      OpStore %49 %161 
                         read_only Texture2D %163 = OpLoad %162 
                                     sampler %165 = OpLoad %164 
                  read_only Texture2DSampled %166 = OpSampledImage %163 %165 
                                         f32 %167 = OpLoad %49 
                                       f32_2 %168 = OpCompositeConstruct %167 %167 
                                       f32_4 %169 = OpImageSampleImplicitLod %166 %168 
                                         f32 %170 = OpCompositeExtract %169 0 
                                                      OpStore %49 %170 
                                       f32_4 %172 = OpLoad %138 
                                       f32_3 %173 = OpVectorShuffle %172 %172 0 1 2 
                                       f32_3 %174 = OpFNegate %173 
                                         f32 %175 = OpLoad %154 
                                       f32_3 %176 = OpCompositeConstruct %175 %175 %175 
                                       f32_3 %177 = OpFMul %174 %176 
                                       f32_3 %178 = OpLoad %83 
                                       f32_3 %179 = OpFNegate %178 
                                       f32_3 %180 = OpFAdd %177 %179 
                                                      OpStore %171 %180 
                                         f32 %181 = OpLoad %154 
                                       f32_3 %182 = OpCompositeConstruct %181 %181 %181 
                                       f32_4 %183 = OpLoad %138 
                                       f32_3 %184 = OpVectorShuffle %183 %183 0 1 2 
                                       f32_3 %185 = OpFMul %182 %184 
                                       f32_4 %186 = OpLoad %138 
                                       f32_4 %187 = OpVectorShuffle %186 %185 4 5 6 3 
                                                      OpStore %138 %187 
                                       f32_3 %188 = OpLoad %171 
                                       f32_3 %189 = OpLoad %171 
                                         f32 %190 = OpDot %188 %189 
                                                      OpStore %154 %190 
                                         f32 %191 = OpLoad %154 
                                         f32 %193 = OpExtInst %1 40 %191 %192 
                                                      OpStore %154 %193 
                                         f32 %194 = OpLoad %154 
                                         f32 %195 = OpExtInst %1 32 %194 
                                                      OpStore %154 %195 
                                         f32 %196 = OpLoad %154 
                                       f32_3 %197 = OpCompositeConstruct %196 %196 %196 
                                       f32_3 %198 = OpLoad %171 
                                       f32_3 %199 = OpFMul %197 %198 
                                                      OpStore %171 %199 
                         read_only Texture2D %202 = OpLoad %201 
                                     sampler %204 = OpLoad %203 
                  read_only Texture2DSampled %205 = OpSampledImage %202 %204 
                                       f32_2 %206 = OpLoad %41 
                                       f32_4 %207 = OpImageSampleImplicitLod %205 %206 
                                       f32_3 %208 = OpVectorShuffle %207 %207 0 1 2 
                                       f32_4 %209 = OpLoad %200 
                                       f32_4 %210 = OpVectorShuffle %209 %208 4 5 6 3 
                                                      OpStore %200 %210 
                                       f32_4 %211 = OpLoad %200 
                                       f32_3 %212 = OpVectorShuffle %211 %211 0 1 2 
                                       f32_3 %215 = OpFMul %212 %214 
                                       f32_3 %218 = OpFAdd %215 %217 
                                       f32_4 %219 = OpLoad %200 
                                       f32_4 %220 = OpVectorShuffle %219 %218 4 5 6 3 
                                                      OpStore %200 %220 
                                       f32_4 %221 = OpLoad %200 
                                       f32_3 %222 = OpVectorShuffle %221 %221 0 1 2 
                                       f32_4 %223 = OpLoad %200 
                                       f32_3 %224 = OpVectorShuffle %223 %223 0 1 2 
                                         f32 %225 = OpDot %222 %224 
                                                      OpStore %154 %225 
                                         f32 %226 = OpLoad %154 
                                         f32 %227 = OpExtInst %1 32 %226 
                                                      OpStore %154 %227 
                                         f32 %228 = OpLoad %154 
                                       f32_3 %229 = OpCompositeConstruct %228 %228 %228 
                                       f32_4 %230 = OpLoad %200 
                                       f32_3 %231 = OpVectorShuffle %230 %230 0 1 2 
                                       f32_3 %232 = OpFMul %229 %231 
                                       f32_4 %233 = OpLoad %200 
                                       f32_4 %234 = OpVectorShuffle %233 %232 4 5 6 3 
                                                      OpStore %200 %234 
                                       f32_4 %235 = OpLoad %200 
                                       f32_3 %236 = OpVectorShuffle %235 %235 0 1 2 
                                       f32_3 %237 = OpLoad %171 
                                         f32 %238 = OpDot %236 %237 
                                                      OpStore %154 %238 
                                         f32 %239 = OpLoad %154 
                                         f32 %241 = OpExtInst %1 43 %239 %240 %72 
                                                      OpStore %154 %241 
                                       f32_4 %243 = OpLoad %138 
                                       f32_3 %244 = OpVectorShuffle %243 %243 0 1 2 
                                       f32_3 %245 = OpFNegate %244 
                                       f32_3 %246 = OpLoad %171 
                                         f32 %247 = OpDot %245 %246 
                                                      OpStore %242 %247 
                                         f32 %248 = OpLoad %242 
                                         f32 %249 = OpExtInst %1 43 %248 %240 %72 
                                                      OpStore %242 %249 
                                       f32_4 %251 = OpLoad %200 
                                       f32_3 %252 = OpVectorShuffle %251 %251 0 1 2 
                                       f32_4 %253 = OpLoad %138 
                                       f32_3 %254 = OpVectorShuffle %253 %253 0 1 2 
                                       f32_3 %255 = OpFNegate %254 
                                         f32 %256 = OpDot %252 %255 
                                                      OpStore %250 %256 
                                         f32 %257 = OpLoad %250 
                                         f32 %258 = OpExtInst %1 43 %257 %240 %72 
                                                      OpStore %250 %258 
                                       f32_4 %259 = OpLoad %200 
                                       f32_3 %260 = OpVectorShuffle %259 %259 0 1 2 
                                       f32_3 %261 = OpLoad %83 
                                       f32_3 %262 = OpFNegate %261 
                                         f32 %263 = OpDot %260 %262 
                                Private f32* %264 = OpAccessChain %83 %30 
                                                      OpStore %264 %263 
                         read_only Texture2D %266 = OpLoad %265 
                                     sampler %268 = OpLoad %267 
                  read_only Texture2DSampled %269 = OpSampledImage %266 %268 
                                       f32_2 %270 = OpLoad %41 
                                       f32_4 %271 = OpImageSampleImplicitLod %269 %270 
                                                      OpStore %138 %271 
                         read_only Texture2D %273 = OpLoad %272 
                                     sampler %275 = OpLoad %274 
                  read_only Texture2DSampled %276 = OpSampledImage %273 %275 
                                       f32_2 %277 = OpLoad %41 
                                       f32_4 %278 = OpImageSampleImplicitLod %276 %277 
                                       f32_3 %279 = OpVectorShuffle %278 %278 0 1 2 
                                                      OpStore %171 %279 
                                       f32_4 %280 = OpLoad %138 
                                       f32_4 %281 = OpVectorShuffle %280 %280 3 0 1 2 
                                       f32_4 %282 = OpFNegate %281 
                                       f32_4 %284 = OpFAdd %282 %283 
                                                      OpStore %200 %284 
                                Private f32* %285 = OpAccessChain %200 %30 
                                         f32 %286 = OpLoad %285 
                                Private f32* %287 = OpAccessChain %200 %30 
                                         f32 %288 = OpLoad %287 
                                         f32 %289 = OpFMul %286 %288 
                                Private f32* %290 = OpAccessChain %41 %30 
                                                      OpStore %290 %289 
                                Private f32* %291 = OpAccessChain %41 %30 
                                         f32 %292 = OpLoad %291 
                                         f32 %294 = OpExtInst %1 40 %292 %293 
                                Private f32* %295 = OpAccessChain %41 %30 
                                                      OpStore %295 %294 
                                Private f32* %297 = OpAccessChain %41 %30 
                                         f32 %298 = OpLoad %297 
                                Private f32* %299 = OpAccessChain %41 %30 
                                         f32 %300 = OpLoad %299 
                                         f32 %301 = OpFMul %298 %300 
                                                      OpStore %296 %301 
                                         f32 %303 = OpLoad %154 
                                         f32 %304 = OpLoad %296 
                                         f32 %305 = OpFMul %303 %304 
                                         f32 %306 = OpLoad %154 
                                         f32 %307 = OpFNegate %306 
                                         f32 %308 = OpFAdd %305 %307 
                                                      OpStore %302 %308 
                                         f32 %309 = OpLoad %302 
                                         f32 %310 = OpLoad %154 
                                         f32 %311 = OpFMul %309 %310 
                                         f32 %312 = OpFAdd %311 %72 
                                                      OpStore %154 %312 
                                         f32 %313 = OpLoad %154 
                                         f32 %314 = OpLoad %154 
                                         f32 %315 = OpFMul %313 %314 
                                         f32 %317 = OpFAdd %315 %316 
                                                      OpStore %154 %317 
                                         f32 %318 = OpLoad %296 
                                         f32 %320 = OpFMul %318 %319 
                                                      OpStore %296 %320 
                                         f32 %321 = OpLoad %296 
                                         f32 %322 = OpLoad %154 
                                         f32 %323 = OpFDiv %321 %322 
                                                      OpStore %296 %323 
                                Private f32* %324 = OpAccessChain %41 %30 
                                         f32 %325 = OpLoad %324 
                                         f32 %326 = OpFNegate %325 
                                         f32 %327 = OpFAdd %326 %72 
                                                      OpStore %154 %327 
                                Private f32* %328 = OpAccessChain %83 %30 
                                         f32 %329 = OpLoad %328 
                                         f32 %330 = OpExtInst %1 4 %329 
                                         f32 %331 = OpLoad %154 
                                         f32 %332 = OpFMul %330 %331 
                                Private f32* %333 = OpAccessChain %41 %30 
                                         f32 %334 = OpLoad %333 
                                         f32 %335 = OpFAdd %332 %334 
                                                      OpStore %302 %335 
                                         f32 %336 = OpLoad %250 
                                         f32 %337 = OpLoad %154 
                                         f32 %338 = OpFMul %336 %337 
                                Private f32* %339 = OpAccessChain %41 %30 
                                         f32 %340 = OpLoad %339 
                                         f32 %341 = OpFAdd %338 %340 
                                Private f32* %342 = OpAccessChain %41 %30 
                                                      OpStore %342 %341 
                                Private f32* %343 = OpAccessChain %41 %30 
                                         f32 %344 = OpLoad %343 
                                Private f32* %345 = OpAccessChain %83 %30 
                                         f32 %346 = OpLoad %345 
                                         f32 %347 = OpExtInst %1 4 %346 
                                         f32 %348 = OpFMul %344 %347 
                                Private f32* %349 = OpAccessChain %41 %30 
                                                      OpStore %349 %348 
                                Private f32* %350 = OpAccessChain %83 %30 
                                         f32 %351 = OpLoad %350 
                                         f32 %352 = OpExtInst %1 4 %351 
                                         f32 %353 = OpFNegate %352 
                                         f32 %354 = OpFAdd %353 %72 
                                                      OpStore %154 %354 
                                         f32 %355 = OpLoad %250 
                                         f32 %356 = OpLoad %302 
                                         f32 %357 = OpFMul %355 %356 
                                Private f32* %358 = OpAccessChain %41 %30 
                                         f32 %359 = OpLoad %358 
                                         f32 %360 = OpFAdd %357 %359 
                                Private f32* %361 = OpAccessChain %41 %30 
                                                      OpStore %361 %360 
                                Private f32* %362 = OpAccessChain %41 %30 
                                         f32 %363 = OpLoad %362 
                                         f32 %365 = OpFAdd %363 %364 
                                Private f32* %366 = OpAccessChain %41 %30 
                                                      OpStore %366 %365 
                                Private f32* %368 = OpAccessChain %41 %30 
                                         f32 %369 = OpLoad %368 
                                         f32 %370 = OpFDiv %367 %369 
                                Private f32* %371 = OpAccessChain %41 %30 
                                                      OpStore %371 %370 
                                         f32 %372 = OpLoad %296 
                                Private f32* %373 = OpAccessChain %41 %30 
                                         f32 %374 = OpLoad %373 
                                         f32 %375 = OpFMul %372 %374 
                                Private f32* %376 = OpAccessChain %41 %30 
                                                      OpStore %376 %375 
                                         f32 %377 = OpLoad %250 
                                Private f32* %378 = OpAccessChain %41 %30 
                                         f32 %379 = OpLoad %378 
                                         f32 %380 = OpFMul %377 %379 
                                Private f32* %381 = OpAccessChain %41 %30 
                                                      OpStore %381 %380 
                                Private f32* %382 = OpAccessChain %41 %30 
                                         f32 %383 = OpLoad %382 
                                         f32 %385 = OpFMul %383 %384 
                                Private f32* %386 = OpAccessChain %41 %30 
                                                      OpStore %386 %385 
                                Private f32* %387 = OpAccessChain %41 %30 
                                         f32 %388 = OpLoad %387 
                                         f32 %389 = OpExtInst %1 40 %388 %240 
                                Private f32* %390 = OpAccessChain %41 %30 
                                                      OpStore %390 %389 
                                       f32_4 %391 = OpLoad %138 
                                       f32_3 %392 = OpVectorShuffle %391 %391 0 1 2 
                                       f32_4 %393 = OpLoad %138 
                                       f32_3 %394 = OpVectorShuffle %393 %393 0 1 2 
                                         f32 %395 = OpDot %392 %394 
                                                      OpStore %296 %395 
                                         f32 %399 = OpLoad %296 
                                        bool %400 = OpFOrdNotEqual %399 %240 
                                                      OpStore %398 %400 
                                        bool %401 = OpLoad %398 
                                         f32 %402 = OpSelect %401 %72 %240 
                                                      OpStore %296 %402 
                                         f32 %403 = OpLoad %296 
                                Private f32* %404 = OpAccessChain %41 %30 
                                         f32 %405 = OpLoad %404 
                                         f32 %406 = OpFMul %403 %405 
                                Private f32* %407 = OpAccessChain %41 %30 
                                                      OpStore %407 %406 
                                       f32_4 %408 = OpLoad %9 
                                       f32_3 %409 = OpVectorShuffle %408 %408 1 1 1 
                              Uniform f32_4* %411 = OpAccessChain %17 %410 %19 
                                       f32_4 %412 = OpLoad %411 
                                       f32_3 %413 = OpVectorShuffle %412 %412 0 1 2 
                                       f32_3 %414 = OpFMul %409 %413 
                                                      OpStore %83 %414 
                              Uniform f32_4* %415 = OpAccessChain %17 %410 %92 
                                       f32_4 %416 = OpLoad %415 
                                       f32_3 %417 = OpVectorShuffle %416 %416 0 1 2 
                                       f32_4 %418 = OpLoad %9 
                                       f32_3 %419 = OpVectorShuffle %418 %418 0 0 0 
                                       f32_3 %420 = OpFMul %417 %419 
                                       f32_3 %421 = OpLoad %83 
                                       f32_3 %422 = OpFAdd %420 %421 
                                                      OpStore %83 %422 
                              Uniform f32_4* %423 = OpAccessChain %17 %410 %63 
                                       f32_4 %424 = OpLoad %423 
                                       f32_3 %425 = OpVectorShuffle %424 %424 0 1 2 
                                       f32_4 %426 = OpLoad %9 
                                       f32_3 %427 = OpVectorShuffle %426 %426 2 2 2 
                                       f32_3 %428 = OpFMul %425 %427 
                                       f32_3 %429 = OpLoad %83 
                                       f32_3 %430 = OpFAdd %428 %429 
                                       f32_4 %431 = OpLoad %9 
                                       f32_4 %432 = OpVectorShuffle %431 %430 4 5 6 3 
                                                      OpStore %9 %432 
                                       f32_4 %433 = OpLoad %9 
                                       f32_3 %434 = OpVectorShuffle %433 %433 0 1 2 
                              Uniform f32_4* %435 = OpAccessChain %17 %410 %86 
                                       f32_4 %436 = OpLoad %435 
                                       f32_3 %437 = OpVectorShuffle %436 %436 0 1 2 
                                       f32_3 %438 = OpFAdd %434 %437 
                                       f32_4 %439 = OpLoad %9 
                                       f32_4 %440 = OpVectorShuffle %439 %438 4 5 6 3 
                                                      OpStore %9 %440 
                       read_only TextureCube %444 = OpLoad %443 
                                     sampler %446 = OpLoad %445 
                read_only TextureCubeSampled %448 = OpSampledImage %444 %446 
                                       f32_4 %449 = OpLoad %9 
                                       f32_3 %450 = OpVectorShuffle %449 %449 0 1 2 
                                       f32_4 %452 = OpImageSampleImplicitLod %448 %450 Bias %7 
                                         f32 %453 = OpCompositeExtract %452 3 
                                Private f32* %454 = OpAccessChain %9 %30 
                                                      OpStore %454 %453 
                                Private f32* %455 = OpAccessChain %9 %30 
                                         f32 %456 = OpLoad %455 
                                         f32 %457 = OpLoad %49 
                                         f32 %458 = OpFMul %456 %457 
                                Private f32* %459 = OpAccessChain %9 %30 
                                                      OpStore %459 %458 
                                       f32_4 %460 = OpLoad %9 
                                       f32_3 %461 = OpVectorShuffle %460 %460 0 0 0 
                              Uniform f32_4* %463 = OpAccessChain %17 %462 
                                       f32_4 %464 = OpLoad %463 
                                       f32_3 %465 = OpVectorShuffle %464 %464 0 1 2 
                                       f32_3 %466 = OpFMul %461 %465 
                                       f32_4 %467 = OpLoad %9 
                                       f32_4 %468 = OpVectorShuffle %467 %466 4 5 6 3 
                                                      OpStore %9 %468 
                                       f32_4 %469 = OpLoad %9 
                                       f32_3 %470 = OpVectorShuffle %469 %469 0 1 2 
                                       f32_2 %471 = OpLoad %41 
                                       f32_3 %472 = OpVectorShuffle %471 %471 0 0 0 
                                       f32_3 %473 = OpFMul %470 %472 
                                                      OpStore %83 %473 
                                         f32 %474 = OpLoad %242 
                                         f32 %475 = OpFNegate %474 
                                         f32 %476 = OpFAdd %475 %72 
                                                      OpStore %49 %476 
                                         f32 %477 = OpLoad %242 
                                         f32 %478 = OpLoad %242 
                                         f32 %479 = OpFMul %477 %478 
                                Private f32* %480 = OpAccessChain %41 %30 
                                                      OpStore %480 %479 
                                       f32_2 %481 = OpLoad %41 
                                       f32_2 %482 = OpVectorShuffle %481 %481 0 0 
                                       f32_4 %483 = OpLoad %200 
                                       f32_2 %484 = OpVectorShuffle %483 %483 0 0 
                                         f32 %485 = OpDot %482 %484 
                                Private f32* %486 = OpAccessChain %41 %30 
                                                      OpStore %486 %485 
                                Private f32* %487 = OpAccessChain %41 %30 
                                         f32 %488 = OpLoad %487 
                                         f32 %490 = OpFAdd %488 %489 
                                Private f32* %491 = OpAccessChain %41 %30 
                                                      OpStore %491 %490 
                                         f32 %492 = OpLoad %49 
                                         f32 %493 = OpLoad %49 
                                         f32 %494 = OpFMul %492 %493 
                                                      OpStore %296 %494 
                                         f32 %495 = OpLoad %296 
                                         f32 %496 = OpLoad %296 
                                         f32 %497 = OpFMul %495 %496 
                                                      OpStore %296 %497 
                                         f32 %498 = OpLoad %49 
                                         f32 %499 = OpLoad %296 
                                         f32 %500 = OpFMul %498 %499 
                                                      OpStore %49 %500 
                                       f32_4 %501 = OpLoad %200 
                                       f32_3 %502 = OpVectorShuffle %501 %501 1 2 3 
                                         f32 %503 = OpLoad %49 
                                       f32_3 %504 = OpCompositeConstruct %503 %503 %503 
                                       f32_3 %505 = OpFMul %502 %504 
                                       f32_4 %506 = OpLoad %138 
                                       f32_3 %507 = OpVectorShuffle %506 %506 0 1 2 
                                       f32_3 %508 = OpFAdd %505 %507 
                                       f32_4 %509 = OpLoad %138 
                                       f32_4 %510 = OpVectorShuffle %509 %508 4 5 6 3 
                                                      OpStore %138 %510 
                                       f32_3 %511 = OpLoad %83 
                                       f32_4 %512 = OpLoad %138 
                                       f32_3 %513 = OpVectorShuffle %512 %512 0 1 2 
                                       f32_3 %514 = OpFMul %511 %513 
                                                      OpStore %83 %514 
                                         f32 %515 = OpLoad %154 
                                         f32 %516 = OpLoad %154 
                                         f32 %517 = OpFMul %515 %516 
                                                      OpStore %49 %517 
                                         f32 %518 = OpLoad %49 
                                         f32 %519 = OpLoad %49 
                                         f32 %520 = OpFMul %518 %519 
                                                      OpStore %49 %520 
                                         f32 %521 = OpLoad %154 
                                         f32 %522 = OpLoad %49 
                                         f32 %523 = OpFMul %521 %522 
                                                      OpStore %49 %523 
                                Private f32* %524 = OpAccessChain %41 %30 
                                         f32 %525 = OpLoad %524 
                                         f32 %526 = OpLoad %49 
                                         f32 %527 = OpFMul %525 %526 
                                         f32 %528 = OpFAdd %527 %72 
                                                      OpStore %49 %528 
                                         f32 %529 = OpLoad %250 
                                         f32 %530 = OpFNegate %529 
                                         f32 %531 = OpFAdd %530 %72 
                                                      OpStore %296 %531 
                                         f32 %532 = OpLoad %296 
                                         f32 %533 = OpLoad %296 
                                         f32 %534 = OpFMul %532 %533 
                                                      OpStore %154 %534 
                                         f32 %535 = OpLoad %154 
                                         f32 %536 = OpLoad %154 
                                         f32 %537 = OpFMul %535 %536 
                                                      OpStore %154 %537 
                                         f32 %538 = OpLoad %296 
                                         f32 %539 = OpLoad %154 
                                         f32 %540 = OpFMul %538 %539 
                                                      OpStore %296 %540 
                                Private f32* %541 = OpAccessChain %41 %30 
                                         f32 %542 = OpLoad %541 
                                         f32 %543 = OpLoad %296 
                                         f32 %544 = OpFMul %542 %543 
                                         f32 %545 = OpFAdd %544 %72 
                                Private f32* %546 = OpAccessChain %41 %30 
                                                      OpStore %546 %545 
                                         f32 %547 = OpLoad %49 
                                Private f32* %548 = OpAccessChain %41 %30 
                                         f32 %549 = OpLoad %548 
                                         f32 %550 = OpFMul %547 %549 
                                                      OpStore %49 %550 
                                         f32 %551 = OpLoad %250 
                                         f32 %552 = OpLoad %49 
                                         f32 %553 = OpFMul %551 %552 
                                                      OpStore %49 %553 
                                         f32 %554 = OpLoad %49 
                                       f32_3 %555 = OpCompositeConstruct %554 %554 %554 
                                       f32_4 %556 = OpLoad %9 
                                       f32_3 %557 = OpVectorShuffle %556 %556 0 1 2 
                                       f32_3 %558 = OpFMul %555 %557 
                                       f32_4 %559 = OpLoad %9 
                                       f32_4 %560 = OpVectorShuffle %559 %558 4 5 6 3 
                                                      OpStore %9 %560 
                                       f32_3 %561 = OpLoad %171 
                                       f32_4 %562 = OpLoad %9 
                                       f32_3 %563 = OpVectorShuffle %562 %562 0 1 2 
                                       f32_3 %564 = OpFMul %561 %563 
                                       f32_3 %565 = OpLoad %83 
                                       f32_3 %566 = OpFAdd %564 %565 
                                       f32_4 %567 = OpLoad %9 
                                       f32_4 %568 = OpVectorShuffle %567 %566 4 5 6 3 
                                                      OpStore %9 %568 
                                Private f32* %569 = OpAccessChain %9 %158 
                                                      OpStore %569 %72 
                                       f32_4 %572 = OpLoad %9 
                                       f32_4 %573 = OpFNegate %572 
                                       f32_4 %574 = OpExtInst %1 29 %573 
                                                      OpStore %571 %574 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL_COOKIE" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL_COOKIE" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _LightDir;
uniform 	vec4 _LightColor;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
UNITY_LOCATION(0) uniform  sampler2D _CameraDepthTexture;
UNITY_LOCATION(1) uniform  sampler2D _LightTexture0;
UNITY_LOCATION(2) uniform  sampler2D _CameraGBufferTexture0;
UNITY_LOCATION(3) uniform  sampler2D _CameraGBufferTexture1;
UNITY_LOCATION(4) uniform  sampler2D _CameraGBufferTexture2;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec2 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
vec4 u_xlat6;
float u_xlat8;
float u_xlat9;
float u_xlat15;
float u_xlat21;
float u_xlat22;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat2 = texture(_CameraDepthTexture, u_xlat1.xy);
    u_xlat21 = _ZBufferParams.x * u_xlat2.x + _ZBufferParams.y;
    u_xlat21 = float(1.0) / u_xlat21;
    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat0.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat2.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat3.xyz = (-u_xlat2.xyz) * vec3(u_xlat21) + (-_LightDir.xyz);
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat21 = max(u_xlat21, 0.00100000005);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz;
    u_xlat4 = texture(_CameraGBufferTexture2, u_xlat1.xy);
    u_xlat4.xyz = u_xlat4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat21 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;
    u_xlat21 = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
    u_xlat15 = dot((-_LightDir.xyz), u_xlat3.xyz);
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
    u_xlat3 = texture(_CameraGBufferTexture1, u_xlat1.xy);
    u_xlat5 = texture(_CameraGBufferTexture0, u_xlat1.xy);
    u_xlat6 = (-u_xlat3.wxyz) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat1.x = u_xlat6.x * u_xlat6.x;
    u_xlat1.x = max(u_xlat1.x, 0.00200000009);
    u_xlat8 = u_xlat1.x * u_xlat1.x;
    u_xlat22 = u_xlat21 * u_xlat8 + (-u_xlat21);
    u_xlat21 = u_xlat22 * u_xlat21 + 1.0;
    u_xlat21 = u_xlat21 * u_xlat21 + 1.00000001e-07;
    u_xlat8 = u_xlat8 * 0.318309873;
    u_xlat21 = u_xlat8 / u_xlat21;
    u_xlat8 = dot(u_xlat4.xyz, (-u_xlat2.xyz));
    u_xlat22 = dot(u_xlat4.xyz, (-_LightDir.xyz));
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
    u_xlat2.x = (-u_xlat1.x) + 1.0;
    u_xlat9 = abs(u_xlat8) * u_xlat2.x + u_xlat1.x;
    u_xlat1.x = u_xlat22 * u_xlat2.x + u_xlat1.x;
    u_xlat1.x = u_xlat1.x * abs(u_xlat8);
    u_xlat8 = -abs(u_xlat8) + 1.0;
    u_xlat1.x = u_xlat22 * u_xlat9 + u_xlat1.x;
    u_xlat1.x = u_xlat1.x + 9.99999975e-06;
    u_xlat1.x = 0.5 / u_xlat1.x;
    u_xlat21 = u_xlat21 * u_xlat1.x;
    u_xlat21 = u_xlat21 * 3.14159274;
    u_xlat21 = u_xlat22 * u_xlat21;
    u_xlat21 = max(u_xlat21, 0.0);
    u_xlat1.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlatb1 = u_xlat1.x!=0.0;
    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
    u_xlat21 = u_xlat21 * u_xlat1.x;
    u_xlat2.xy = u_xlat0.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat0.xx + u_xlat2.xy;
    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat0.zz + u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy + hlslcc_mtx4x4unity_WorldToLight[3].xy;
    u_xlat2 = texture(_LightTexture0, u_xlat0.xy, -8.0);
    u_xlat0.xyz = u_xlat2.www * _LightColor.xyz;
    u_xlat2.xyz = u_xlat0.xyz * vec3(u_xlat21);
    u_xlat21 = (-u_xlat15) + 1.0;
    u_xlat1.x = u_xlat21 * u_xlat21;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat21 = u_xlat21 * u_xlat1.x;
    u_xlat3.xyz = u_xlat6.yzw * vec3(u_xlat21) + u_xlat3.xyz;
    u_xlat2.xyz = u_xlat2.xyz * u_xlat3.xyz;
    u_xlat21 = u_xlat15 + u_xlat15;
    u_xlat21 = u_xlat15 * u_xlat21;
    u_xlat21 = u_xlat21 * u_xlat6.x + -0.5;
    u_xlat1.x = u_xlat8 * u_xlat8;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat1.x = u_xlat8 * u_xlat1.x;
    u_xlat1.x = u_xlat21 * u_xlat1.x + 1.0;
    u_xlat8 = (-u_xlat22) + 1.0;
    u_xlat15 = u_xlat8 * u_xlat8;
    u_xlat15 = u_xlat15 * u_xlat15;
    u_xlat8 = u_xlat8 * u_xlat15;
    u_xlat21 = u_xlat21 * u_xlat8 + 1.0;
    u_xlat21 = u_xlat1.x * u_xlat21;
    u_xlat21 = u_xlat22 * u_xlat21;
    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat0.xyz = u_xlat5.xyz * u_xlat0.xyz + u_xlat2.xyz;
    u_xlat0.w = 1.0;
    SV_Target0 = exp2((-u_xlat0));
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL_COOKIE" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 192
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %80 %102 %169 %175 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpMemberDecorate %78 0 BuiltIn 78 
                                                      OpMemberDecorate %78 1 BuiltIn 78 
                                                      OpMemberDecorate %78 2 BuiltIn 78 
                                                      OpDecorate %78 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 102 
                                                      OpDecorate %169 Location 169 
                                                      OpDecorate vs_TEXCOORD1 Location 175 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %16 %17 %18 %6 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 1 
                                              %24 = OpTypePointer Uniform %7 
                                          i32 %28 = OpConstant 0 
                                          i32 %36 = OpConstant 2 
                                          i32 %45 = OpConstant 3 
                               Private f32_4* %49 = OpVariable Private 
                                          u32 %76 = OpConstant 1 
                                              %77 = OpTypeArray %6 %76 
                                              %78 = OpTypeStruct %7 %6 %77 
                                              %79 = OpTypePointer Output %78 
         Output struct {f32_4; f32; f32[1];}* %80 = OpVariable Output 
                                              %82 = OpTypePointer Output %7 
                                              %84 = OpTypePointer Private %6 
                                          u32 %87 = OpConstant 0 
                                              %88 = OpTypePointer Uniform %6 
                               Private f32_4* %93 = OpVariable Private 
                                              %94 = OpTypeVector %6 3 
                                          f32 %97 = OpConstant 3.674022E-40 
                                        f32_3 %98 = OpConstantComposite %97 %97 %97 
                       Output f32_4* vs_TEXCOORD0 = OpVariable Output 
                                             %103 = OpTypeVector %6 2 
                                         f32 %158 = OpConstant 3.674022E-40 
                                         f32 %159 = OpConstant 3.674022E-40 
                                       f32_3 %160 = OpConstantComposite %158 %158 %159 
                                             %168 = OpTypePointer Input %94 
                                Input f32_3* %169 = OpVariable Input 
                                             %174 = OpTypePointer Output %94 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                                         i32 %176 = OpConstant 4 
                                             %186 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %25 = OpAccessChain %21 %23 %23 
                                        f32_4 %26 = OpLoad %25 
                                        f32_4 %27 = OpFMul %13 %26 
                                                      OpStore %9 %27 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %28 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %44 = OpLoad %9 
                               Uniform f32_4* %46 = OpAccessChain %21 %23 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_4 %48 = OpFAdd %44 %47 
                                                      OpStore %9 %48 
                                        f32_4 %50 = OpLoad %9 
                                        f32_4 %51 = OpVectorShuffle %50 %50 1 1 1 1 
                               Uniform f32_4* %52 = OpAccessChain %21 %45 %23 
                                        f32_4 %53 = OpLoad %52 
                                        f32_4 %54 = OpFMul %51 %53 
                                                      OpStore %49 %54 
                               Uniform f32_4* %55 = OpAccessChain %21 %45 %28 
                                        f32_4 %56 = OpLoad %55 
                                        f32_4 %57 = OpLoad %9 
                                        f32_4 %58 = OpVectorShuffle %57 %57 0 0 0 0 
                                        f32_4 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %49 
                                        f32_4 %61 = OpFAdd %59 %60 
                                                      OpStore %49 %61 
                               Uniform f32_4* %62 = OpAccessChain %21 %45 %36 
                                        f32_4 %63 = OpLoad %62 
                                        f32_4 %64 = OpLoad %9 
                                        f32_4 %65 = OpVectorShuffle %64 %64 2 2 2 2 
                                        f32_4 %66 = OpFMul %63 %65 
                                        f32_4 %67 = OpLoad %49 
                                        f32_4 %68 = OpFAdd %66 %67 
                                                      OpStore %49 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %45 %45 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %9 
                                        f32_4 %72 = OpVectorShuffle %71 %71 3 3 3 3 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %49 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %49 %75 
                                        f32_4 %81 = OpLoad %49 
                                Output f32_4* %83 = OpAccessChain %80 %28 
                                                      OpStore %83 %81 
                                 Private f32* %85 = OpAccessChain %49 %76 
                                          f32 %86 = OpLoad %85 
                                 Uniform f32* %89 = OpAccessChain %21 %28 %87 
                                          f32 %90 = OpLoad %89 
                                          f32 %91 = OpFMul %86 %90 
                                 Private f32* %92 = OpAccessChain %49 %76 
                                                      OpStore %92 %91 
                                        f32_4 %95 = OpLoad %49 
                                        f32_3 %96 = OpVectorShuffle %95 %95 0 3 1 
                                        f32_3 %99 = OpFMul %96 %98 
                                       f32_4 %100 = OpLoad %93 
                                       f32_4 %101 = OpVectorShuffle %100 %99 4 1 5 6 
                                                      OpStore %93 %101 
                                       f32_4 %104 = OpLoad %49 
                                       f32_2 %105 = OpVectorShuffle %104 %104 2 3 
                                       f32_4 %106 = OpLoad vs_TEXCOORD0 
                                       f32_4 %107 = OpVectorShuffle %106 %105 0 1 4 5 
                                                      OpStore vs_TEXCOORD0 %107 
                                       f32_4 %108 = OpLoad %93 
                                       f32_2 %109 = OpVectorShuffle %108 %108 2 2 
                                       f32_4 %110 = OpLoad %93 
                                       f32_2 %111 = OpVectorShuffle %110 %110 0 3 
                                       f32_2 %112 = OpFAdd %109 %111 
                                       f32_4 %113 = OpLoad vs_TEXCOORD0 
                                       f32_4 %114 = OpVectorShuffle %113 %112 4 5 2 3 
                                                      OpStore vs_TEXCOORD0 %114 
                                       f32_4 %115 = OpLoad %9 
                                       f32_3 %116 = OpVectorShuffle %115 %115 1 1 1 
                              Uniform f32_4* %117 = OpAccessChain %21 %36 %23 
                                       f32_4 %118 = OpLoad %117 
                                       f32_3 %119 = OpVectorShuffle %118 %118 0 1 2 
                                       f32_3 %120 = OpFMul %116 %119 
                                       f32_4 %121 = OpLoad %49 
                                       f32_4 %122 = OpVectorShuffle %121 %120 4 5 6 3 
                                                      OpStore %49 %122 
                              Uniform f32_4* %123 = OpAccessChain %21 %36 %28 
                                       f32_4 %124 = OpLoad %123 
                                       f32_3 %125 = OpVectorShuffle %124 %124 0 1 2 
                                       f32_4 %126 = OpLoad %9 
                                       f32_3 %127 = OpVectorShuffle %126 %126 0 0 0 
                                       f32_3 %128 = OpFMul %125 %127 
                                       f32_4 %129 = OpLoad %49 
                                       f32_3 %130 = OpVectorShuffle %129 %129 0 1 2 
                                       f32_3 %131 = OpFAdd %128 %130 
                                       f32_4 %132 = OpLoad %49 
                                       f32_4 %133 = OpVectorShuffle %132 %131 4 5 6 3 
                                                      OpStore %49 %133 
                              Uniform f32_4* %134 = OpAccessChain %21 %36 %36 
                                       f32_4 %135 = OpLoad %134 
                                       f32_3 %136 = OpVectorShuffle %135 %135 0 1 2 
                                       f32_4 %137 = OpLoad %9 
                                       f32_3 %138 = OpVectorShuffle %137 %137 2 2 2 
                                       f32_3 %139 = OpFMul %136 %138 
                                       f32_4 %140 = OpLoad %49 
                                       f32_3 %141 = OpVectorShuffle %140 %140 0 1 2 
                                       f32_3 %142 = OpFAdd %139 %141 
                                       f32_4 %143 = OpLoad %9 
                                       f32_4 %144 = OpVectorShuffle %143 %142 4 5 6 3 
                                                      OpStore %9 %144 
                              Uniform f32_4* %145 = OpAccessChain %21 %36 %45 
                                       f32_4 %146 = OpLoad %145 
                                       f32_3 %147 = OpVectorShuffle %146 %146 0 1 2 
                                       f32_4 %148 = OpLoad %9 
                                       f32_3 %149 = OpVectorShuffle %148 %148 3 3 3 
                                       f32_3 %150 = OpFMul %147 %149 
                                       f32_4 %151 = OpLoad %9 
                                       f32_3 %152 = OpVectorShuffle %151 %151 0 1 2 
                                       f32_3 %153 = OpFAdd %150 %152 
                                       f32_4 %154 = OpLoad %9 
                                       f32_4 %155 = OpVectorShuffle %154 %153 4 5 6 3 
                                                      OpStore %9 %155 
                                       f32_4 %156 = OpLoad %9 
                                       f32_3 %157 = OpVectorShuffle %156 %156 0 1 2 
                                       f32_3 %161 = OpFMul %157 %160 
                                       f32_4 %162 = OpLoad %49 
                                       f32_4 %163 = OpVectorShuffle %162 %161 4 5 6 3 
                                                      OpStore %49 %163 
                                       f32_4 %164 = OpLoad %9 
                                       f32_3 %165 = OpVectorShuffle %164 %164 0 1 2 
                                       f32_3 %166 = OpFNegate %165 
                                       f32_3 %167 = OpFMul %166 %160 
                                       f32_3 %170 = OpLoad %169 
                                       f32_3 %171 = OpFAdd %167 %170 
                                       f32_4 %172 = OpLoad %9 
                                       f32_4 %173 = OpVectorShuffle %172 %171 4 5 6 3 
                                                      OpStore %9 %173 
                                Uniform f32* %177 = OpAccessChain %21 %176 
                                         f32 %178 = OpLoad %177 
                                       f32_3 %179 = OpCompositeConstruct %178 %178 %178 
                                       f32_4 %180 = OpLoad %9 
                                       f32_3 %181 = OpVectorShuffle %180 %180 0 1 2 
                                       f32_3 %182 = OpFMul %179 %181 
                                       f32_4 %183 = OpLoad %49 
                                       f32_3 %184 = OpVectorShuffle %183 %183 0 1 2 
                                       f32_3 %185 = OpFAdd %182 %184 
                                                      OpStore vs_TEXCOORD1 %185 
                                 Output f32* %187 = OpAccessChain %80 %28 %76 
                                         f32 %188 = OpLoad %187 
                                         f32 %189 = OpFNegate %188 
                                 Output f32* %190 = OpAccessChain %80 %28 %76 
                                                      OpStore %190 %189 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 549
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %25 %41 %544 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpDecorate %13 ArrayStride 13 
                                                      OpDecorate %14 ArrayStride 14 
                                                      OpMemberDecorate %15 0 Offset 15 
                                                      OpMemberDecorate %15 1 Offset 15 
                                                      OpMemberDecorate %15 2 Offset 15 
                                                      OpMemberDecorate %15 3 Offset 15 
                                                      OpMemberDecorate %15 4 Offset 15 
                                                      OpMemberDecorate %15 5 Offset 15 
                                                      OpMemberDecorate %15 6 Offset 15 
                                                      OpDecorate %15 Block 
                                                      OpDecorate %17 DescriptorSet 17 
                                                      OpDecorate %17 Binding 17 
                                                      OpDecorate vs_TEXCOORD1 Location 25 
                                                      OpDecorate vs_TEXCOORD0 Location 41 
                                                      OpDecorate %53 DescriptorSet 53 
                                                      OpDecorate %53 Binding 53 
                                                      OpDecorate %57 DescriptorSet 57 
                                                      OpDecorate %57 Binding 57 
                                                      OpDecorate %172 DescriptorSet 172 
                                                      OpDecorate %172 Binding 172 
                                                      OpDecorate %174 DescriptorSet 174 
                                                      OpDecorate %174 Binding 174 
                                                      OpDecorate %214 DescriptorSet 214 
                                                      OpDecorate %214 Binding 214 
                                                      OpDecorate %216 DescriptorSet 216 
                                                      OpDecorate %216 Binding 216 
                                                      OpDecorate %222 DescriptorSet 222 
                                                      OpDecorate %222 Binding 222 
                                                      OpDecorate %224 DescriptorSet 224 
                                                      OpDecorate %224 Binding 224 
                                                      OpDecorate %406 DescriptorSet 406 
                                                      OpDecorate %406 Binding 406 
                                                      OpDecorate %408 DescriptorSet 408 
                                                      OpDecorate %408 Binding 408 
                                                      OpDecorate %544 Location 544 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 3 
                                              %11 = OpTypeInt 32 0 
                                          u32 %12 = OpConstant 4 
                                              %13 = OpTypeArray %7 %12 
                                              %14 = OpTypeArray %7 %12 
                                              %15 = OpTypeStruct %10 %7 %7 %13 %7 %7 %14 
                                              %16 = OpTypePointer Uniform %15 
Uniform struct {f32_3; f32_4; f32_4; f32_4[4]; f32_4; f32_4; f32_4[4];}* %17 = OpVariable Uniform 
                                              %18 = OpTypeInt 32 1 
                                          i32 %19 = OpConstant 1 
                                          u32 %20 = OpConstant 2 
                                              %21 = OpTypePointer Uniform %6 
                                              %24 = OpTypePointer Input %10 
                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                                              %26 = OpTypePointer Input %6 
                                          u32 %30 = OpConstant 0 
                                              %31 = OpTypePointer Private %6 
                               Private f32_4* %39 = OpVariable Private 
                                              %40 = OpTypePointer Input %7 
                        Input f32_4* vs_TEXCOORD0 = OpVariable Input 
                                              %42 = OpTypeVector %6 2 
                                 Private f32* %50 = OpVariable Private 
                                              %51 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %52 = OpTypePointer UniformConstant %51 
         UniformConstant read_only Texture2D* %53 = OpVariable UniformConstant 
                                              %55 = OpTypeSampler 
                                              %56 = OpTypePointer UniformConstant %55 
                     UniformConstant sampler* %57 = OpVariable UniformConstant 
                                              %59 = OpTypeSampledImage %51 
                                          i32 %65 = OpConstant 2 
                                          u32 %70 = OpConstant 1 
                                          f32 %74 = OpConstant 3.674022E-40 
                                              %84 = OpTypePointer Private %10 
                               Private f32_3* %85 = OpVariable Private 
                                          i32 %88 = OpConstant 3 
                                              %89 = OpTypePointer Uniform %7 
                                          i32 %94 = OpConstant 0 
                                             %126 = OpTypePointer Uniform %10 
                              Private f32_4* %136 = OpVariable Private 
                                         i32 %142 = OpConstant 4 
                                         f32 %160 = OpConstant 3.674022E-40 
                              Private f32_3* %171 = OpVariable Private 
        UniformConstant read_only Texture2D* %172 = OpVariable UniformConstant 
                    UniformConstant sampler* %174 = OpVariable UniformConstant 
                                         f32 %182 = OpConstant 3.674022E-40 
                                       f32_3 %183 = OpConstantComposite %182 %182 %182 
                                         f32 %185 = OpConstant 3.674022E-40 
                                       f32_3 %186 = OpConstantComposite %185 %185 %185 
                                         f32 %202 = OpConstant 3.674022E-40 
                                Private f32* %204 = OpVariable Private 
        UniformConstant read_only Texture2D* %214 = OpVariable UniformConstant 
                    UniformConstant sampler* %216 = OpVariable UniformConstant 
        UniformConstant read_only Texture2D* %222 = OpVariable UniformConstant 
                    UniformConstant sampler* %224 = OpVariable UniformConstant 
                              Private f32_4* %233 = OpVariable Private 
                                       f32_4 %237 = OpConstantComposite %74 %74 %74 %74 
                                Private f32* %239 = OpVariable Private 
                                         f32 %246 = OpConstant 3.674022E-40 
                                Private f32* %248 = OpVariable Private 
                                Private f32* %252 = OpVariable Private 
                                         f32 %266 = OpConstant 3.674022E-40 
                                         f32 %269 = OpConstant 3.674022E-40 
                                Private f32* %279 = OpVariable Private 
                                             %288 = OpTypePointer Private %42 
                              Private f32_2* %289 = OpVariable Private 
                                         f32 %331 = OpConstant 3.674022E-40 
                                         f32 %334 = OpConstant 3.674022E-40 
                                         f32 %347 = OpConstant 3.674022E-40 
                                             %357 = OpTypeBool 
                                             %358 = OpTypePointer Private %357 
                               Private bool* %359 = OpVariable Private 
                                         i32 %372 = OpConstant 6 
        UniformConstant read_only Texture2D* %406 = OpVariable UniformConstant 
                    UniformConstant sampler* %408 = OpVariable UniformConstant 
                                         f32 %413 = OpConstant 3.674022E-40 
                                         u32 %415 = OpConstant 3 
                                         i32 %420 = OpConstant 5 
                                         f32 %444 = OpConstant 3.674022E-40 
                                             %543 = OpTypePointer Output %7 
                               Output f32_4* %544 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                 Uniform f32* %22 = OpAccessChain %17 %19 %20 
                                          f32 %23 = OpLoad %22 
                                   Input f32* %27 = OpAccessChain vs_TEXCOORD1 %20 
                                          f32 %28 = OpLoad %27 
                                          f32 %29 = OpFDiv %23 %28 
                                 Private f32* %32 = OpAccessChain %9 %30 
                                                      OpStore %32 %29 
                                        f32_4 %33 = OpLoad %9 
                                        f32_3 %34 = OpVectorShuffle %33 %33 0 0 0 
                                        f32_3 %35 = OpLoad vs_TEXCOORD1 
                                        f32_3 %36 = OpFMul %34 %35 
                                        f32_4 %37 = OpLoad %9 
                                        f32_4 %38 = OpVectorShuffle %37 %36 4 5 6 3 
                                                      OpStore %9 %38 
                                        f32_4 %43 = OpLoad vs_TEXCOORD0 
                                        f32_2 %44 = OpVectorShuffle %43 %43 0 1 
                                        f32_4 %45 = OpLoad vs_TEXCOORD0 
                                        f32_2 %46 = OpVectorShuffle %45 %45 3 3 
                                        f32_2 %47 = OpFDiv %44 %46 
                                        f32_4 %48 = OpLoad %39 
                                        f32_4 %49 = OpVectorShuffle %48 %47 4 5 2 3 
                                                      OpStore %39 %49 
                          read_only Texture2D %54 = OpLoad %53 
                                      sampler %58 = OpLoad %57 
                   read_only Texture2DSampled %60 = OpSampledImage %54 %58 
                                        f32_4 %61 = OpLoad %39 
                                        f32_2 %62 = OpVectorShuffle %61 %61 0 1 
                                        f32_4 %63 = OpImageSampleImplicitLod %60 %62 
                                          f32 %64 = OpCompositeExtract %63 0 
                                                      OpStore %50 %64 
                                 Uniform f32* %66 = OpAccessChain %17 %65 %30 
                                          f32 %67 = OpLoad %66 
                                          f32 %68 = OpLoad %50 
                                          f32 %69 = OpFMul %67 %68 
                                 Uniform f32* %71 = OpAccessChain %17 %65 %70 
                                          f32 %72 = OpLoad %71 
                                          f32 %73 = OpFAdd %69 %72 
                                                      OpStore %50 %73 
                                          f32 %75 = OpLoad %50 
                                          f32 %76 = OpFDiv %74 %75 
                                                      OpStore %50 %76 
                                          f32 %77 = OpLoad %50 
                                        f32_3 %78 = OpCompositeConstruct %77 %77 %77 
                                        f32_4 %79 = OpLoad %9 
                                        f32_3 %80 = OpVectorShuffle %79 %79 0 1 2 
                                        f32_3 %81 = OpFMul %78 %80 
                                        f32_4 %82 = OpLoad %9 
                                        f32_4 %83 = OpVectorShuffle %82 %81 4 5 6 3 
                                                      OpStore %9 %83 
                                        f32_4 %86 = OpLoad %9 
                                        f32_3 %87 = OpVectorShuffle %86 %86 1 1 1 
                               Uniform f32_4* %90 = OpAccessChain %17 %88 %19 
                                        f32_4 %91 = OpLoad %90 
                                        f32_3 %92 = OpVectorShuffle %91 %91 0 1 2 
                                        f32_3 %93 = OpFMul %87 %92 
                                                      OpStore %85 %93 
                               Uniform f32_4* %95 = OpAccessChain %17 %88 %94 
                                        f32_4 %96 = OpLoad %95 
                                        f32_3 %97 = OpVectorShuffle %96 %96 0 1 2 
                                        f32_4 %98 = OpLoad %9 
                                        f32_3 %99 = OpVectorShuffle %98 %98 0 0 0 
                                       f32_3 %100 = OpFMul %97 %99 
                                       f32_3 %101 = OpLoad %85 
                                       f32_3 %102 = OpFAdd %100 %101 
                                       f32_4 %103 = OpLoad %9 
                                       f32_4 %104 = OpVectorShuffle %103 %102 4 5 2 6 
                                                      OpStore %9 %104 
                              Uniform f32_4* %105 = OpAccessChain %17 %88 %65 
                                       f32_4 %106 = OpLoad %105 
                                       f32_3 %107 = OpVectorShuffle %106 %106 0 1 2 
                                       f32_4 %108 = OpLoad %9 
                                       f32_3 %109 = OpVectorShuffle %108 %108 2 2 2 
                                       f32_3 %110 = OpFMul %107 %109 
                                       f32_4 %111 = OpLoad %9 
                                       f32_3 %112 = OpVectorShuffle %111 %111 0 1 3 
                                       f32_3 %113 = OpFAdd %110 %112 
                                       f32_4 %114 = OpLoad %9 
                                       f32_4 %115 = OpVectorShuffle %114 %113 4 5 6 3 
                                                      OpStore %9 %115 
                                       f32_4 %116 = OpLoad %9 
                                       f32_3 %117 = OpVectorShuffle %116 %116 0 1 2 
                              Uniform f32_4* %118 = OpAccessChain %17 %88 %88 
                                       f32_4 %119 = OpLoad %118 
                                       f32_3 %120 = OpVectorShuffle %119 %119 0 1 2 
                                       f32_3 %121 = OpFAdd %117 %120 
                                       f32_4 %122 = OpLoad %9 
                                       f32_4 %123 = OpVectorShuffle %122 %121 4 5 6 3 
                                                      OpStore %9 %123 
                                       f32_4 %124 = OpLoad %9 
                                       f32_3 %125 = OpVectorShuffle %124 %124 0 1 2 
                              Uniform f32_3* %127 = OpAccessChain %17 %94 
                                       f32_3 %128 = OpLoad %127 
                                       f32_3 %129 = OpFNegate %128 
                                       f32_3 %130 = OpFAdd %125 %129 
                                                      OpStore %85 %130 
                                       f32_3 %131 = OpLoad %85 
                                       f32_3 %132 = OpLoad %85 
                                         f32 %133 = OpDot %131 %132 
                                                      OpStore %50 %133 
                                         f32 %134 = OpLoad %50 
                                         f32 %135 = OpExtInst %1 32 %134 
                                                      OpStore %50 %135 
                                       f32_3 %137 = OpLoad %85 
                                       f32_3 %138 = OpFNegate %137 
                                         f32 %139 = OpLoad %50 
                                       f32_3 %140 = OpCompositeConstruct %139 %139 %139 
                                       f32_3 %141 = OpFMul %138 %140 
                              Uniform f32_4* %143 = OpAccessChain %17 %142 
                                       f32_4 %144 = OpLoad %143 
                                       f32_3 %145 = OpVectorShuffle %144 %144 0 1 2 
                                       f32_3 %146 = OpFNegate %145 
                                       f32_3 %147 = OpFAdd %141 %146 
                                       f32_4 %148 = OpLoad %136 
                                       f32_4 %149 = OpVectorShuffle %148 %147 4 5 6 3 
                                                      OpStore %136 %149 
                                         f32 %150 = OpLoad %50 
                                       f32_3 %151 = OpCompositeConstruct %150 %150 %150 
                                       f32_3 %152 = OpLoad %85 
                                       f32_3 %153 = OpFMul %151 %152 
                                                      OpStore %85 %153 
                                       f32_4 %154 = OpLoad %136 
                                       f32_3 %155 = OpVectorShuffle %154 %154 0 1 2 
                                       f32_4 %156 = OpLoad %136 
                                       f32_3 %157 = OpVectorShuffle %156 %156 0 1 2 
                                         f32 %158 = OpDot %155 %157 
                                                      OpStore %50 %158 
                                         f32 %159 = OpLoad %50 
                                         f32 %161 = OpExtInst %1 40 %159 %160 
                                                      OpStore %50 %161 
                                         f32 %162 = OpLoad %50 
                                         f32 %163 = OpExtInst %1 32 %162 
                                                      OpStore %50 %163 
                                         f32 %164 = OpLoad %50 
                                       f32_3 %165 = OpCompositeConstruct %164 %164 %164 
                                       f32_4 %166 = OpLoad %136 
                                       f32_3 %167 = OpVectorShuffle %166 %166 0 1 2 
                                       f32_3 %168 = OpFMul %165 %167 
                                       f32_4 %169 = OpLoad %136 
                                       f32_4 %170 = OpVectorShuffle %169 %168 4 5 6 3 
                                                      OpStore %136 %170 
                         read_only Texture2D %173 = OpLoad %172 
                                     sampler %175 = OpLoad %174 
                  read_only Texture2DSampled %176 = OpSampledImage %173 %175 
                                       f32_4 %177 = OpLoad %39 
                                       f32_2 %178 = OpVectorShuffle %177 %177 0 1 
                                       f32_4 %179 = OpImageSampleImplicitLod %176 %178 
                                       f32_3 %180 = OpVectorShuffle %179 %179 0 1 2 
                                                      OpStore %171 %180 
                                       f32_3 %181 = OpLoad %171 
                                       f32_3 %184 = OpFMul %181 %183 
                                       f32_3 %187 = OpFAdd %184 %186 
                                                      OpStore %171 %187 
                                       f32_3 %188 = OpLoad %171 
                                       f32_3 %189 = OpLoad %171 
                                         f32 %190 = OpDot %188 %189 
                                                      OpStore %50 %190 
                                         f32 %191 = OpLoad %50 
                                         f32 %192 = OpExtInst %1 32 %191 
                                                      OpStore %50 %192 
                                         f32 %193 = OpLoad %50 
                                       f32_3 %194 = OpCompositeConstruct %193 %193 %193 
                                       f32_3 %195 = OpLoad %171 
                                       f32_3 %196 = OpFMul %194 %195 
                                                      OpStore %171 %196 
                                       f32_3 %197 = OpLoad %171 
                                       f32_4 %198 = OpLoad %136 
                                       f32_3 %199 = OpVectorShuffle %198 %198 0 1 2 
                                         f32 %200 = OpDot %197 %199 
                                                      OpStore %50 %200 
                                         f32 %201 = OpLoad %50 
                                         f32 %203 = OpExtInst %1 43 %201 %202 %74 
                                                      OpStore %50 %203 
                              Uniform f32_4* %205 = OpAccessChain %17 %142 
                                       f32_4 %206 = OpLoad %205 
                                       f32_3 %207 = OpVectorShuffle %206 %206 0 1 2 
                                       f32_3 %208 = OpFNegate %207 
                                       f32_4 %209 = OpLoad %136 
                                       f32_3 %210 = OpVectorShuffle %209 %209 0 1 2 
                                         f32 %211 = OpDot %208 %210 
                                                      OpStore %204 %211 
                                         f32 %212 = OpLoad %204 
                                         f32 %213 = OpExtInst %1 43 %212 %202 %74 
                                                      OpStore %204 %213 
                         read_only Texture2D %215 = OpLoad %214 
                                     sampler %217 = OpLoad %216 
                  read_only Texture2DSampled %218 = OpSampledImage %215 %217 
                                       f32_4 %219 = OpLoad %39 
                                       f32_2 %220 = OpVectorShuffle %219 %219 0 1 
                                       f32_4 %221 = OpImageSampleImplicitLod %218 %220 
                                                      OpStore %136 %221 
                         read_only Texture2D %223 = OpLoad %222 
                                     sampler %225 = OpLoad %224 
                  read_only Texture2DSampled %226 = OpSampledImage %223 %225 
                                       f32_4 %227 = OpLoad %39 
                                       f32_2 %228 = OpVectorShuffle %227 %227 0 1 
                                       f32_4 %229 = OpImageSampleImplicitLod %226 %228 
                                       f32_3 %230 = OpVectorShuffle %229 %229 0 1 2 
                                       f32_4 %231 = OpLoad %39 
                                       f32_4 %232 = OpVectorShuffle %231 %230 4 5 2 6 
                                                      OpStore %39 %232 
                                       f32_4 %234 = OpLoad %136 
                                       f32_4 %235 = OpVectorShuffle %234 %234 3 0 1 2 
                                       f32_4 %236 = OpFNegate %235 
                                       f32_4 %238 = OpFAdd %236 %237 
                                                      OpStore %233 %238 
                                Private f32* %240 = OpAccessChain %233 %30 
                                         f32 %241 = OpLoad %240 
                                Private f32* %242 = OpAccessChain %233 %30 
                                         f32 %243 = OpLoad %242 
                                         f32 %244 = OpFMul %241 %243 
                                                      OpStore %239 %244 
                                         f32 %245 = OpLoad %239 
                                         f32 %247 = OpExtInst %1 40 %245 %246 
                                                      OpStore %239 %247 
                                         f32 %249 = OpLoad %239 
                                         f32 %250 = OpLoad %239 
                                         f32 %251 = OpFMul %249 %250 
                                                      OpStore %248 %251 
                                         f32 %253 = OpLoad %50 
                                         f32 %254 = OpLoad %248 
                                         f32 %255 = OpFMul %253 %254 
                                         f32 %256 = OpLoad %50 
                                         f32 %257 = OpFNegate %256 
                                         f32 %258 = OpFAdd %255 %257 
                                                      OpStore %252 %258 
                                         f32 %259 = OpLoad %252 
                                         f32 %260 = OpLoad %50 
                                         f32 %261 = OpFMul %259 %260 
                                         f32 %262 = OpFAdd %261 %74 
                                                      OpStore %50 %262 
                                         f32 %263 = OpLoad %50 
                                         f32 %264 = OpLoad %50 
                                         f32 %265 = OpFMul %263 %264 
                                         f32 %267 = OpFAdd %265 %266 
                                                      OpStore %50 %267 
                                         f32 %268 = OpLoad %248 
                                         f32 %270 = OpFMul %268 %269 
                                                      OpStore %248 %270 
                                         f32 %271 = OpLoad %248 
                                         f32 %272 = OpLoad %50 
                                         f32 %273 = OpFDiv %271 %272 
                                                      OpStore %50 %273 
                                       f32_3 %274 = OpLoad %171 
                                       f32_3 %275 = OpLoad %85 
                                       f32_3 %276 = OpFNegate %275 
                                         f32 %277 = OpDot %274 %276 
                                Private f32* %278 = OpAccessChain %85 %30 
                                                      OpStore %278 %277 
                                       f32_3 %280 = OpLoad %171 
                              Uniform f32_4* %281 = OpAccessChain %17 %142 
                                       f32_4 %282 = OpLoad %281 
                                       f32_3 %283 = OpVectorShuffle %282 %282 0 1 2 
                                       f32_3 %284 = OpFNegate %283 
                                         f32 %285 = OpDot %280 %284 
                                                      OpStore %279 %285 
                                         f32 %286 = OpLoad %279 
                                         f32 %287 = OpExtInst %1 43 %286 %202 %74 
                                                      OpStore %279 %287 
                                         f32 %290 = OpLoad %239 
                                         f32 %291 = OpFNegate %290 
                                         f32 %292 = OpFAdd %291 %74 
                                Private f32* %293 = OpAccessChain %289 %30 
                                                      OpStore %293 %292 
                                Private f32* %294 = OpAccessChain %85 %30 
                                         f32 %295 = OpLoad %294 
                                         f32 %296 = OpExtInst %1 4 %295 
                                Private f32* %297 = OpAccessChain %289 %30 
                                         f32 %298 = OpLoad %297 
                                         f32 %299 = OpFMul %296 %298 
                                         f32 %300 = OpLoad %239 
                                         f32 %301 = OpFAdd %299 %300 
                                                      OpStore %248 %301 
                                         f32 %302 = OpLoad %279 
                                Private f32* %303 = OpAccessChain %289 %30 
                                         f32 %304 = OpLoad %303 
                                         f32 %305 = OpFMul %302 %304 
                                         f32 %306 = OpLoad %239 
                                         f32 %307 = OpFAdd %305 %306 
                                Private f32* %308 = OpAccessChain %289 %30 
                                                      OpStore %308 %307 
                                Private f32* %309 = OpAccessChain %289 %30 
                                         f32 %310 = OpLoad %309 
                                Private f32* %311 = OpAccessChain %85 %30 
                                         f32 %312 = OpLoad %311 
                                         f32 %313 = OpExtInst %1 4 %312 
                                         f32 %314 = OpFMul %310 %313 
                                Private f32* %315 = OpAccessChain %289 %30 
                                                      OpStore %315 %314 
                                Private f32* %316 = OpAccessChain %85 %30 
                                         f32 %317 = OpLoad %316 
                                         f32 %318 = OpExtInst %1 4 %317 
                                         f32 %319 = OpFNegate %318 
                                         f32 %320 = OpFAdd %319 %74 
                                Private f32* %321 = OpAccessChain %85 %30 
                                                      OpStore %321 %320 
                                         f32 %322 = OpLoad %279 
                                         f32 %323 = OpLoad %248 
                                         f32 %324 = OpFMul %322 %323 
                                Private f32* %325 = OpAccessChain %289 %30 
                                         f32 %326 = OpLoad %325 
                                         f32 %327 = OpFAdd %324 %326 
                                Private f32* %328 = OpAccessChain %289 %30 
                                                      OpStore %328 %327 
                                Private f32* %329 = OpAccessChain %289 %30 
                                         f32 %330 = OpLoad %329 
                                         f32 %332 = OpFAdd %330 %331 
                                Private f32* %333 = OpAccessChain %289 %30 
                                                      OpStore %333 %332 
                                Private f32* %335 = OpAccessChain %289 %30 
                                         f32 %336 = OpLoad %335 
                                         f32 %337 = OpFDiv %334 %336 
                                Private f32* %338 = OpAccessChain %289 %30 
                                                      OpStore %338 %337 
                                         f32 %339 = OpLoad %50 
                                Private f32* %340 = OpAccessChain %289 %30 
                                         f32 %341 = OpLoad %340 
                                         f32 %342 = OpFMul %339 %341 
                                                      OpStore %50 %342 
                                         f32 %343 = OpLoad %279 
                                         f32 %344 = OpLoad %50 
                                         f32 %345 = OpFMul %343 %344 
                                                      OpStore %50 %345 
                                         f32 %346 = OpLoad %50 
                                         f32 %348 = OpFMul %346 %347 
                                                      OpStore %50 %348 
                                         f32 %349 = OpLoad %50 
                                         f32 %350 = OpExtInst %1 40 %349 %202 
                                                      OpStore %50 %350 
                                       f32_4 %351 = OpLoad %136 
                                       f32_3 %352 = OpVectorShuffle %351 %351 0 1 2 
                                       f32_4 %353 = OpLoad %136 
                                       f32_3 %354 = OpVectorShuffle %353 %353 0 1 2 
                                         f32 %355 = OpDot %352 %354 
                                Private f32* %356 = OpAccessChain %289 %30 
                                                      OpStore %356 %355 
                                Private f32* %360 = OpAccessChain %289 %30 
                                         f32 %361 = OpLoad %360 
                                        bool %362 = OpFOrdNotEqual %361 %202 
                                                      OpStore %359 %362 
                                        bool %363 = OpLoad %359 
                                         f32 %364 = OpSelect %363 %74 %202 
                                Private f32* %365 = OpAccessChain %289 %30 
                                                      OpStore %365 %364 
                                         f32 %366 = OpLoad %50 
                                Private f32* %367 = OpAccessChain %289 %30 
                                         f32 %368 = OpLoad %367 
                                         f32 %369 = OpFMul %366 %368 
                                                      OpStore %50 %369 
                                       f32_4 %370 = OpLoad %9 
                                       f32_2 %371 = OpVectorShuffle %370 %370 1 1 
                              Uniform f32_4* %373 = OpAccessChain %17 %372 %19 
                                       f32_4 %374 = OpLoad %373 
                                       f32_2 %375 = OpVectorShuffle %374 %374 0 1 
                                       f32_2 %376 = OpFMul %371 %375 
                                                      OpStore %289 %376 
                              Uniform f32_4* %377 = OpAccessChain %17 %372 %94 
                                       f32_4 %378 = OpLoad %377 
                                       f32_2 %379 = OpVectorShuffle %378 %378 0 1 
                                       f32_4 %380 = OpLoad %9 
                                       f32_2 %381 = OpVectorShuffle %380 %380 0 0 
                                       f32_2 %382 = OpFMul %379 %381 
                                       f32_2 %383 = OpLoad %289 
                                       f32_2 %384 = OpFAdd %382 %383 
                                       f32_4 %385 = OpLoad %9 
                                       f32_4 %386 = OpVectorShuffle %385 %384 4 5 2 3 
                                                      OpStore %9 %386 
                              Uniform f32_4* %387 = OpAccessChain %17 %372 %65 
                                       f32_4 %388 = OpLoad %387 
                                       f32_2 %389 = OpVectorShuffle %388 %388 0 1 
                                       f32_4 %390 = OpLoad %9 
                                       f32_2 %391 = OpVectorShuffle %390 %390 2 2 
                                       f32_2 %392 = OpFMul %389 %391 
                                       f32_4 %393 = OpLoad %9 
                                       f32_2 %394 = OpVectorShuffle %393 %393 0 1 
                                       f32_2 %395 = OpFAdd %392 %394 
                                       f32_4 %396 = OpLoad %9 
                                       f32_4 %397 = OpVectorShuffle %396 %395 4 5 2 3 
                                                      OpStore %9 %397 
                                       f32_4 %398 = OpLoad %9 
                                       f32_2 %399 = OpVectorShuffle %398 %398 0 1 
                              Uniform f32_4* %400 = OpAccessChain %17 %372 %88 
                                       f32_4 %401 = OpLoad %400 
                                       f32_2 %402 = OpVectorShuffle %401 %401 0 1 
                                       f32_2 %403 = OpFAdd %399 %402 
                                       f32_4 %404 = OpLoad %9 
                                       f32_4 %405 = OpVectorShuffle %404 %403 4 5 2 3 
                                                      OpStore %9 %405 
                         read_only Texture2D %407 = OpLoad %406 
                                     sampler %409 = OpLoad %408 
                  read_only Texture2DSampled %410 = OpSampledImage %407 %409 
                                       f32_4 %411 = OpLoad %9 
                                       f32_2 %412 = OpVectorShuffle %411 %411 0 1 
                                       f32_4 %414 = OpImageSampleImplicitLod %410 %412 Bias %7 
                                         f32 %416 = OpCompositeExtract %414 3 
                                Private f32* %417 = OpAccessChain %9 %30 
                                                      OpStore %417 %416 
                                       f32_4 %418 = OpLoad %9 
                                       f32_3 %419 = OpVectorShuffle %418 %418 0 0 0 
                              Uniform f32_4* %421 = OpAccessChain %17 %420 
                                       f32_4 %422 = OpLoad %421 
                                       f32_3 %423 = OpVectorShuffle %422 %422 0 1 2 
                                       f32_3 %424 = OpFMul %419 %423 
                                       f32_4 %425 = OpLoad %9 
                                       f32_4 %426 = OpVectorShuffle %425 %424 4 5 6 3 
                                                      OpStore %9 %426 
                                       f32_4 %427 = OpLoad %9 
                                       f32_3 %428 = OpVectorShuffle %427 %427 0 1 2 
                                         f32 %429 = OpLoad %50 
                                       f32_3 %430 = OpCompositeConstruct %429 %429 %429 
                                       f32_3 %431 = OpFMul %428 %430 
                                                      OpStore %171 %431 
                                         f32 %432 = OpLoad %204 
                                         f32 %433 = OpFNegate %432 
                                         f32 %434 = OpFAdd %433 %74 
                                                      OpStore %50 %434 
                                         f32 %435 = OpLoad %204 
                                         f32 %436 = OpLoad %204 
                                         f32 %437 = OpFMul %435 %436 
                                                      OpStore %204 %437 
                                         f32 %438 = OpLoad %204 
                                       f32_2 %439 = OpCompositeConstruct %438 %438 
                                       f32_4 %440 = OpLoad %233 
                                       f32_2 %441 = OpVectorShuffle %440 %440 0 0 
                                         f32 %442 = OpDot %439 %441 
                                                      OpStore %204 %442 
                                         f32 %443 = OpLoad %204 
                                         f32 %445 = OpFAdd %443 %444 
                                                      OpStore %204 %445 
                                         f32 %446 = OpLoad %50 
                                         f32 %447 = OpLoad %50 
                                         f32 %448 = OpFMul %446 %447 
                                Private f32* %449 = OpAccessChain %289 %30 
                                                      OpStore %449 %448 
                                Private f32* %450 = OpAccessChain %289 %30 
                                         f32 %451 = OpLoad %450 
                                Private f32* %452 = OpAccessChain %289 %30 
                                         f32 %453 = OpLoad %452 
                                         f32 %454 = OpFMul %451 %453 
                                Private f32* %455 = OpAccessChain %289 %30 
                                                      OpStore %455 %454 
                                         f32 %456 = OpLoad %50 
                                Private f32* %457 = OpAccessChain %289 %30 
                                         f32 %458 = OpLoad %457 
                                         f32 %459 = OpFMul %456 %458 
                                                      OpStore %50 %459 
                                       f32_4 %460 = OpLoad %233 
                                       f32_3 %461 = OpVectorShuffle %460 %460 1 2 3 
                                         f32 %462 = OpLoad %50 
                                       f32_3 %463 = OpCompositeConstruct %462 %462 %462 
                                       f32_3 %464 = OpFMul %461 %463 
                                       f32_4 %465 = OpLoad %136 
                                       f32_3 %466 = OpVectorShuffle %465 %465 0 1 2 
                                       f32_3 %467 = OpFAdd %464 %466 
                                       f32_4 %468 = OpLoad %136 
                                       f32_4 %469 = OpVectorShuffle %468 %467 4 5 6 3 
                                                      OpStore %136 %469 
                                       f32_4 %470 = OpLoad %136 
                                       f32_3 %471 = OpVectorShuffle %470 %470 0 1 2 
                                       f32_3 %472 = OpLoad %171 
                                       f32_3 %473 = OpFMul %471 %472 
                                       f32_4 %474 = OpLoad %136 
                                       f32_4 %475 = OpVectorShuffle %474 %473 4 5 6 3 
                                                      OpStore %136 %475 
                                Private f32* %476 = OpAccessChain %85 %30 
                                         f32 %477 = OpLoad %476 
                                Private f32* %478 = OpAccessChain %85 %30 
                                         f32 %479 = OpLoad %478 
                                         f32 %480 = OpFMul %477 %479 
                                                      OpStore %50 %480 
                                         f32 %481 = OpLoad %50 
                                         f32 %482 = OpLoad %50 
                                         f32 %483 = OpFMul %481 %482 
                                                      OpStore %50 %483 
                                Private f32* %484 = OpAccessChain %85 %30 
                                         f32 %485 = OpLoad %484 
                                         f32 %486 = OpLoad %50 
                                         f32 %487 = OpFMul %485 %486 
                                                      OpStore %50 %487 
                                         f32 %488 = OpLoad %204 
                                         f32 %489 = OpLoad %50 
                                         f32 %490 = OpFMul %488 %489 
                                         f32 %491 = OpFAdd %490 %74 
                                                      OpStore %50 %491 
                                         f32 %492 = OpLoad %279 
                                         f32 %493 = OpFNegate %492 
                                         f32 %494 = OpFAdd %493 %74 
                                Private f32* %495 = OpAccessChain %85 %30 
                                                      OpStore %495 %494 
                                Private f32* %496 = OpAccessChain %85 %30 
                                         f32 %497 = OpLoad %496 
                                Private f32* %498 = OpAccessChain %85 %30 
                                         f32 %499 = OpLoad %498 
                                         f32 %500 = OpFMul %497 %499 
                                Private f32* %501 = OpAccessChain %289 %30 
                                                      OpStore %501 %500 
                                Private f32* %502 = OpAccessChain %289 %30 
                                         f32 %503 = OpLoad %502 
                                Private f32* %504 = OpAccessChain %289 %30 
                                         f32 %505 = OpLoad %504 
                                         f32 %506 = OpFMul %503 %505 
                                Private f32* %507 = OpAccessChain %289 %30 
                                                      OpStore %507 %506 
                                Private f32* %508 = OpAccessChain %85 %30 
                                         f32 %509 = OpLoad %508 
                                Private f32* %510 = OpAccessChain %289 %30 
                                         f32 %511 = OpLoad %510 
                                         f32 %512 = OpFMul %509 %511 
                                Private f32* %513 = OpAccessChain %85 %30 
                                                      OpStore %513 %512 
                                         f32 %514 = OpLoad %204 
                                Private f32* %515 = OpAccessChain %85 %30 
                                         f32 %516 = OpLoad %515 
                                         f32 %517 = OpFMul %514 %516 
                                         f32 %518 = OpFAdd %517 %74 
                                                      OpStore %204 %518 
                                         f32 %519 = OpLoad %50 
                                         f32 %520 = OpLoad %204 
                                         f32 %521 = OpFMul %519 %520 
                                                      OpStore %50 %521 
                                         f32 %522 = OpLoad %279 
                                         f32 %523 = OpLoad %50 
                                         f32 %524 = OpFMul %522 %523 
                                                      OpStore %50 %524 
                                         f32 %525 = OpLoad %50 
                                       f32_3 %526 = OpCompositeConstruct %525 %525 %525 
                                       f32_4 %527 = OpLoad %9 
                                       f32_3 %528 = OpVectorShuffle %527 %527 0 1 2 
                                       f32_3 %529 = OpFMul %526 %528 
                                       f32_4 %530 = OpLoad %9 
                                       f32_4 %531 = OpVectorShuffle %530 %529 4 5 6 3 
                                                      OpStore %9 %531 
                                       f32_4 %532 = OpLoad %39 
                                       f32_3 %533 = OpVectorShuffle %532 %532 0 1 3 
                                       f32_4 %534 = OpLoad %9 
                                       f32_3 %535 = OpVectorShuffle %534 %534 0 1 2 
                                       f32_3 %536 = OpFMul %533 %535 
                                       f32_4 %537 = OpLoad %136 
                                       f32_3 %538 = OpVectorShuffle %537 %537 0 1 2 
                                       f32_3 %539 = OpFAdd %536 %538 
                                       f32_4 %540 = OpLoad %9 
                                       f32_4 %541 = OpVectorShuffle %540 %539 4 5 6 3 
                                                      OpStore %9 %541 
                                Private f32* %542 = OpAccessChain %9 %415 
                                                      OpStore %542 %74 
                                       f32_4 %545 = OpLoad %9 
                                       f32_4 %546 = OpFNegate %545 
                                       f32_4 %547 = OpExtInst %1 29 %546 
                                                      OpStore %544 %547 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "SHADOWS_DEPTH" "SPOT" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "SHADOWS_DEPTH" "SPOT" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
UNITY_LOCATION(0) uniform  sampler2D _CameraDepthTexture;
UNITY_LOCATION(1) uniform  sampler2D _LightTexture0;
UNITY_LOCATION(2) uniform  sampler2D _LightTextureB0;
UNITY_LOCATION(3) uniform  sampler2D _CameraGBufferTexture0;
UNITY_LOCATION(4) uniform  sampler2D _CameraGBufferTexture1;
UNITY_LOCATION(5) uniform  sampler2D _CameraGBufferTexture2;
UNITY_LOCATION(6) uniform  sampler2D _ShadowMapTexture;
UNITY_LOCATION(7) uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec2 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
vec3 u_xlat6;
float u_xlat7;
float u_xlat8;
float u_xlat12;
float u_xlat13;
float u_xlat18;
bool u_xlatb18;
float u_xlat19;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat2 = texture(_CameraDepthTexture, u_xlat1.xy);
    u_xlat18 = _ZBufferParams.x * u_xlat2.x + _ZBufferParams.y;
    u_xlat18 = float(1.0) / u_xlat18;
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat18 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
    u_xlat3 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat2.wwww + u_xlat3;
    u_xlat3 = u_xlat3 + hlslcc_mtx4x4unity_WorldToShadow[3];
    u_xlat6.xyz = u_xlat3.xyz / u_xlat3.www;
    vec3 txVec0 = vec3(u_xlat6.xy,u_xlat6.z);
    u_xlat6.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
    u_xlat12 = (-_LightShadowData.x) + 1.0;
    u_xlat6.x = u_xlat6.x * u_xlat12 + _LightShadowData.x;
    u_xlat12 = (-u_xlat6.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat12 + u_xlat6.x;
    u_xlat6.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyw;
    u_xlat6.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyw * u_xlat2.xxx + u_xlat6.xyz;
    u_xlat6.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyw * u_xlat2.www + u_xlat6.xyz;
    u_xlat6.xyz = u_xlat6.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyw;
    u_xlat6.xy = u_xlat6.xy / u_xlat6.zz;
    u_xlatb18 = u_xlat6.z<0.0;
    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
    u_xlat3 = texture(_LightTexture0, u_xlat6.xy, -8.0);
    u_xlat6.x = u_xlat18 * u_xlat3.w;
    u_xlat3.xyz = (-u_xlat2.xyw) + _LightPos.xyz;
    u_xlat2.xyz = u_xlat2.xyw + (-_WorldSpaceCameraPos.xyz);
    u_xlat12 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat18 = u_xlat12 * _LightPos.w;
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat4 = texture(_LightTextureB0, vec2(u_xlat18));
    u_xlat6.x = u_xlat6.x * u_xlat4.x;
    u_xlat0.x = u_xlat0.x * u_xlat6.x;
    u_xlat0.xyw = u_xlat0.xxx * _LightColor.xyz;
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat12) + (-u_xlat2.xyz);
    u_xlat3.xyz = vec3(u_xlat12) * u_xlat3.xyz;
    u_xlat12 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat12 = max(u_xlat12, 0.00100000005);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat4.xyz = vec3(u_xlat12) * u_xlat4.xyz;
    u_xlat5 = texture(_CameraGBufferTexture2, u_xlat1.xy);
    u_xlat5.xyz = u_xlat5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat12 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat5.xyz = vec3(u_xlat12) * u_xlat5.xyz;
    u_xlat12 = dot(u_xlat5.xyz, u_xlat4.xyz);
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
    u_xlat13 = dot(u_xlat3.xyz, u_xlat4.xyz);
    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
    u_xlat19 = dot(u_xlat5.xyz, u_xlat3.xyz);
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
    u_xlat2.x = dot(u_xlat5.xyz, (-u_xlat2.xyz));
    u_xlat3 = texture(_CameraGBufferTexture1, u_xlat1.xy);
    u_xlat4 = texture(_CameraGBufferTexture0, u_xlat1.xy);
    u_xlat5 = (-u_xlat3.wxyz) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat1.x = u_xlat5.x * u_xlat5.x;
    u_xlat1.x = max(u_xlat1.x, 0.00200000009);
    u_xlat7 = u_xlat1.x * u_xlat1.x;
    u_xlat8 = u_xlat12 * u_xlat7 + (-u_xlat12);
    u_xlat12 = u_xlat8 * u_xlat12 + 1.0;
    u_xlat12 = u_xlat12 * u_xlat12 + 1.00000001e-07;
    u_xlat7 = u_xlat7 * 0.318309873;
    u_xlat12 = u_xlat7 / u_xlat12;
    u_xlat7 = (-u_xlat1.x) + 1.0;
    u_xlat8 = abs(u_xlat2.x) * u_xlat7 + u_xlat1.x;
    u_xlat1.x = u_xlat19 * u_xlat7 + u_xlat1.x;
    u_xlat1.x = u_xlat1.x * abs(u_xlat2.x);
    u_xlat7 = -abs(u_xlat2.x) + 1.0;
    u_xlat1.x = u_xlat19 * u_xlat8 + u_xlat1.x;
    u_xlat1.x = u_xlat1.x + 9.99999975e-06;
    u_xlat1.x = 0.5 / u_xlat1.x;
    u_xlat12 = u_xlat12 * u_xlat1.x;
    u_xlat12 = u_xlat12 * 3.14159274;
    u_xlat12 = u_xlat19 * u_xlat12;
    u_xlat12 = max(u_xlat12, 0.0);
    u_xlat1.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlatb1 = u_xlat1.x!=0.0;
    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
    u_xlat12 = u_xlat12 * u_xlat1.x;
    u_xlat2.xyz = u_xlat0.xyw * vec3(u_xlat12);
    u_xlat12 = (-u_xlat13) + 1.0;
    u_xlat1.x = u_xlat12 * u_xlat12;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat12 = u_xlat12 * u_xlat1.x;
    u_xlat3.xyz = u_xlat5.yzw * vec3(u_xlat12) + u_xlat3.xyz;
    u_xlat2.xyz = u_xlat2.xyz * u_xlat3.xyz;
    u_xlat12 = u_xlat7 * u_xlat7;
    u_xlat12 = u_xlat12 * u_xlat12;
    u_xlat12 = u_xlat7 * u_xlat12;
    u_xlat1.x = u_xlat13 + u_xlat13;
    u_xlat1.x = u_xlat13 * u_xlat1.x;
    u_xlat1.x = u_xlat1.x * u_xlat5.x + -0.5;
    u_xlat12 = u_xlat1.x * u_xlat12 + 1.0;
    u_xlat7 = (-u_xlat19) + 1.0;
    u_xlat13 = u_xlat7 * u_xlat7;
    u_xlat13 = u_xlat13 * u_xlat13;
    u_xlat7 = u_xlat7 * u_xlat13;
    u_xlat1.x = u_xlat1.x * u_xlat7 + 1.0;
    u_xlat12 = u_xlat12 * u_xlat1.x;
    u_xlat12 = u_xlat19 * u_xlat12;
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyw;
    u_xlat0.xyz = u_xlat4.xyz * u_xlat0.xyz + u_xlat2.xyz;
    u_xlat0.w = 1.0;
    SV_Target0 = exp2((-u_xlat0));
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "SHADOWS_DEPTH" "SPOT" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 192
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %80 %102 %169 %175 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpMemberDecorate %78 0 BuiltIn 78 
                                                      OpMemberDecorate %78 1 BuiltIn 78 
                                                      OpMemberDecorate %78 2 BuiltIn 78 
                                                      OpDecorate %78 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 102 
                                                      OpDecorate %169 Location 169 
                                                      OpDecorate vs_TEXCOORD1 Location 175 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %16 %17 %18 %6 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 1 
                                              %24 = OpTypePointer Uniform %7 
                                          i32 %28 = OpConstant 0 
                                          i32 %36 = OpConstant 2 
                                          i32 %45 = OpConstant 3 
                               Private f32_4* %49 = OpVariable Private 
                                          u32 %76 = OpConstant 1 
                                              %77 = OpTypeArray %6 %76 
                                              %78 = OpTypeStruct %7 %6 %77 
                                              %79 = OpTypePointer Output %78 
         Output struct {f32_4; f32; f32[1];}* %80 = OpVariable Output 
                                              %82 = OpTypePointer Output %7 
                                              %84 = OpTypePointer Private %6 
                                          u32 %87 = OpConstant 0 
                                              %88 = OpTypePointer Uniform %6 
                               Private f32_4* %93 = OpVariable Private 
                                              %94 = OpTypeVector %6 3 
                                          f32 %97 = OpConstant 3.674022E-40 
                                        f32_3 %98 = OpConstantComposite %97 %97 %97 
                       Output f32_4* vs_TEXCOORD0 = OpVariable Output 
                                             %103 = OpTypeVector %6 2 
                                         f32 %158 = OpConstant 3.674022E-40 
                                         f32 %159 = OpConstant 3.674022E-40 
                                       f32_3 %160 = OpConstantComposite %158 %158 %159 
                                             %168 = OpTypePointer Input %94 
                                Input f32_3* %169 = OpVariable Input 
                                             %174 = OpTypePointer Output %94 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                                         i32 %176 = OpConstant 4 
                                             %186 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %25 = OpAccessChain %21 %23 %23 
                                        f32_4 %26 = OpLoad %25 
                                        f32_4 %27 = OpFMul %13 %26 
                                                      OpStore %9 %27 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %28 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %44 = OpLoad %9 
                               Uniform f32_4* %46 = OpAccessChain %21 %23 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_4 %48 = OpFAdd %44 %47 
                                                      OpStore %9 %48 
                                        f32_4 %50 = OpLoad %9 
                                        f32_4 %51 = OpVectorShuffle %50 %50 1 1 1 1 
                               Uniform f32_4* %52 = OpAccessChain %21 %45 %23 
                                        f32_4 %53 = OpLoad %52 
                                        f32_4 %54 = OpFMul %51 %53 
                                                      OpStore %49 %54 
                               Uniform f32_4* %55 = OpAccessChain %21 %45 %28 
                                        f32_4 %56 = OpLoad %55 
                                        f32_4 %57 = OpLoad %9 
                                        f32_4 %58 = OpVectorShuffle %57 %57 0 0 0 0 
                                        f32_4 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %49 
                                        f32_4 %61 = OpFAdd %59 %60 
                                                      OpStore %49 %61 
                               Uniform f32_4* %62 = OpAccessChain %21 %45 %36 
                                        f32_4 %63 = OpLoad %62 
                                        f32_4 %64 = OpLoad %9 
                                        f32_4 %65 = OpVectorShuffle %64 %64 2 2 2 2 
                                        f32_4 %66 = OpFMul %63 %65 
                                        f32_4 %67 = OpLoad %49 
                                        f32_4 %68 = OpFAdd %66 %67 
                                                      OpStore %49 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %45 %45 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %9 
                                        f32_4 %72 = OpVectorShuffle %71 %71 3 3 3 3 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %49 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %49 %75 
                                        f32_4 %81 = OpLoad %49 
                                Output f32_4* %83 = OpAccessChain %80 %28 
                                                      OpStore %83 %81 
                                 Private f32* %85 = OpAccessChain %49 %76 
                                          f32 %86 = OpLoad %85 
                                 Uniform f32* %89 = OpAccessChain %21 %28 %87 
                                          f32 %90 = OpLoad %89 
                                          f32 %91 = OpFMul %86 %90 
                                 Private f32* %92 = OpAccessChain %49 %76 
                                                      OpStore %92 %91 
                                        f32_4 %95 = OpLoad %49 
                                        f32_3 %96 = OpVectorShuffle %95 %95 0 3 1 
                                        f32_3 %99 = OpFMul %96 %98 
                                       f32_4 %100 = OpLoad %93 
                                       f32_4 %101 = OpVectorShuffle %100 %99 4 1 5 6 
                                                      OpStore %93 %101 
                                       f32_4 %104 = OpLoad %49 
                                       f32_2 %105 = OpVectorShuffle %104 %104 2 3 
                                       f32_4 %106 = OpLoad vs_TEXCOORD0 
                                       f32_4 %107 = OpVectorShuffle %106 %105 0 1 4 5 
                                                      OpStore vs_TEXCOORD0 %107 
                                       f32_4 %108 = OpLoad %93 
                                       f32_2 %109 = OpVectorShuffle %108 %108 2 2 
                                       f32_4 %110 = OpLoad %93 
                                       f32_2 %111 = OpVectorShuffle %110 %110 0 3 
                                       f32_2 %112 = OpFAdd %109 %111 
                                       f32_4 %113 = OpLoad vs_TEXCOORD0 
                                       f32_4 %114 = OpVectorShuffle %113 %112 4 5 2 3 
                                                      OpStore vs_TEXCOORD0 %114 
                                       f32_4 %115 = OpLoad %9 
                                       f32_3 %116 = OpVectorShuffle %115 %115 1 1 1 
                              Uniform f32_4* %117 = OpAccessChain %21 %36 %23 
                                       f32_4 %118 = OpLoad %117 
                                       f32_3 %119 = OpVectorShuffle %118 %118 0 1 2 
                                       f32_3 %120 = OpFMul %116 %119 
                                       f32_4 %121 = OpLoad %49 
                                       f32_4 %122 = OpVectorShuffle %121 %120 4 5 6 3 
                                                      OpStore %49 %122 
                              Uniform f32_4* %123 = OpAccessChain %21 %36 %28 
                                       f32_4 %124 = OpLoad %123 
                                       f32_3 %125 = OpVectorShuffle %124 %124 0 1 2 
                                       f32_4 %126 = OpLoad %9 
                                       f32_3 %127 = OpVectorShuffle %126 %126 0 0 0 
                                       f32_3 %128 = OpFMul %125 %127 
                                       f32_4 %129 = OpLoad %49 
                                       f32_3 %130 = OpVectorShuffle %129 %129 0 1 2 
                                       f32_3 %131 = OpFAdd %128 %130 
                                       f32_4 %132 = OpLoad %49 
                                       f32_4 %133 = OpVectorShuffle %132 %131 4 5 6 3 
                                                      OpStore %49 %133 
                              Uniform f32_4* %134 = OpAccessChain %21 %36 %36 
                                       f32_4 %135 = OpLoad %134 
                                       f32_3 %136 = OpVectorShuffle %135 %135 0 1 2 
                                       f32_4 %137 = OpLoad %9 
                                       f32_3 %138 = OpVectorShuffle %137 %137 2 2 2 
                                       f32_3 %139 = OpFMul %136 %138 
                                       f32_4 %140 = OpLoad %49 
                                       f32_3 %141 = OpVectorShuffle %140 %140 0 1 2 
                                       f32_3 %142 = OpFAdd %139 %141 
                                       f32_4 %143 = OpLoad %9 
                                       f32_4 %144 = OpVectorShuffle %143 %142 4 5 6 3 
                                                      OpStore %9 %144 
                              Uniform f32_4* %145 = OpAccessChain %21 %36 %45 
                                       f32_4 %146 = OpLoad %145 
                                       f32_3 %147 = OpVectorShuffle %146 %146 0 1 2 
                                       f32_4 %148 = OpLoad %9 
                                       f32_3 %149 = OpVectorShuffle %148 %148 3 3 3 
                                       f32_3 %150 = OpFMul %147 %149 
                                       f32_4 %151 = OpLoad %9 
                                       f32_3 %152 = OpVectorShuffle %151 %151 0 1 2 
                                       f32_3 %153 = OpFAdd %150 %152 
                                       f32_4 %154 = OpLoad %9 
                                       f32_4 %155 = OpVectorShuffle %154 %153 4 5 6 3 
                                                      OpStore %9 %155 
                                       f32_4 %156 = OpLoad %9 
                                       f32_3 %157 = OpVectorShuffle %156 %156 0 1 2 
                                       f32_3 %161 = OpFMul %157 %160 
                                       f32_4 %162 = OpLoad %49 
                                       f32_4 %163 = OpVectorShuffle %162 %161 4 5 6 3 
                                                      OpStore %49 %163 
                                       f32_4 %164 = OpLoad %9 
                                       f32_3 %165 = OpVectorShuffle %164 %164 0 1 2 
                                       f32_3 %166 = OpFNegate %165 
                                       f32_3 %167 = OpFMul %166 %160 
                                       f32_3 %170 = OpLoad %169 
                                       f32_3 %171 = OpFAdd %167 %170 
                                       f32_4 %172 = OpLoad %9 
                                       f32_4 %173 = OpVectorShuffle %172 %171 4 5 6 3 
                                                      OpStore %9 %173 
                                Uniform f32* %177 = OpAccessChain %21 %176 
                                         f32 %178 = OpLoad %177 
                                       f32_3 %179 = OpCompositeConstruct %178 %178 %178 
                                       f32_4 %180 = OpLoad %9 
                                       f32_3 %181 = OpVectorShuffle %180 %180 0 1 2 
                                       f32_3 %182 = OpFMul %179 %181 
                                       f32_4 %183 = OpLoad %49 
                                       f32_3 %184 = OpVectorShuffle %183 %183 0 1 2 
                                       f32_3 %185 = OpFAdd %182 %184 
                                                      OpStore vs_TEXCOORD1 %185 
                                 Output f32* %187 = OpAccessChain %80 %28 %76 
                                         f32 %188 = OpLoad %187 
                                         f32 %189 = OpFNegate %188 
                                 Output f32* %190 = OpAccessChain %80 %28 %76 
                                                      OpStore %190 %189 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 724
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %27 %45 %719 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpDecorate %13 ArrayStride 13 
                                                      OpDecorate %15 ArrayStride 15 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpMemberDecorate %17 0 Offset 17 
                                                      OpMemberDecorate %17 1 Offset 17 
                                                      OpMemberDecorate %17 2 Offset 17 
                                                      OpMemberDecorate %17 3 Offset 17 
                                                      OpMemberDecorate %17 4 Offset 17 
                                                      OpMemberDecorate %17 5 Offset 17 
                                                      OpMemberDecorate %17 6 Offset 17 
                                                      OpMemberDecorate %17 7 Offset 17 
                                                      OpMemberDecorate %17 8 Offset 17 
                                                      OpMemberDecorate %17 9 Offset 17 
                                                      OpDecorate %17 Block 
                                                      OpDecorate %19 DescriptorSet 19 
                                                      OpDecorate %19 Binding 19 
                                                      OpDecorate vs_TEXCOORD1 Location 27 
                                                      OpDecorate vs_TEXCOORD0 Location 45 
                                                      OpDecorate %54 DescriptorSet 54 
                                                      OpDecorate %54 Binding 54 
                                                      OpDecorate %58 DescriptorSet 58 
                                                      OpDecorate %58 Binding 58 
                                                      OpDecorate %221 DescriptorSet 221 
                                                      OpDecorate %221 Binding 221 
                                                      OpDecorate %223 DescriptorSet 223 
                                                      OpDecorate %223 Binding 223 
                                                      OpDecorate %300 DescriptorSet 300 
                                                      OpDecorate %300 Binding 300 
                                                      OpDecorate %302 DescriptorSet 302 
                                                      OpDecorate %302 Binding 302 
                                                      OpDecorate %346 DescriptorSet 346 
                                                      OpDecorate %346 Binding 346 
                                                      OpDecorate %348 DescriptorSet 348 
                                                      OpDecorate %348 Binding 348 
                                                      OpDecorate %427 DescriptorSet 427 
                                                      OpDecorate %427 Binding 427 
                                                      OpDecorate %429 DescriptorSet 429 
                                                      OpDecorate %429 Binding 429 
                                                      OpDecorate %477 DescriptorSet 477 
                                                      OpDecorate %477 Binding 477 
                                                      OpDecorate %479 DescriptorSet 479 
                                                      OpDecorate %479 Binding 479 
                                                      OpDecorate %485 DescriptorSet 485 
                                                      OpDecorate %485 Binding 485 
                                                      OpDecorate %487 DescriptorSet 487 
                                                      OpDecorate %487 Binding 487 
                                                      OpDecorate %719 Location 719 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 3 
                                              %11 = OpTypeInt 32 0 
                                          u32 %12 = OpConstant 4 
                                              %13 = OpTypeArray %7 %12 
                                          u32 %14 = OpConstant 16 
                                              %15 = OpTypeArray %7 %14 
                                              %16 = OpTypeArray %7 %12 
                                              %17 = OpTypeStruct %10 %7 %7 %13 %15 %7 %7 %7 %7 %16 
                                              %18 = OpTypePointer Uniform %17 
Uniform struct {f32_3; f32_4; f32_4; f32_4[4]; f32_4[16]; f32_4; f32_4; f32_4; f32_4; f32_4[4];}* %19 = OpVariable Uniform 
                                              %20 = OpTypeInt 32 1 
                                          i32 %21 = OpConstant 1 
                                          u32 %22 = OpConstant 2 
                                              %23 = OpTypePointer Uniform %6 
                                              %26 = OpTypePointer Input %10 
                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                                              %28 = OpTypePointer Input %6 
                                          u32 %32 = OpConstant 0 
                                              %33 = OpTypePointer Private %6 
                                              %41 = OpTypeVector %6 2 
                                              %42 = OpTypePointer Private %41 
                               Private f32_2* %43 = OpVariable Private 
                                              %44 = OpTypePointer Input %7 
                        Input f32_4* vs_TEXCOORD0 = OpVariable Input 
                                 Private f32* %51 = OpVariable Private 
                                              %52 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %53 = OpTypePointer UniformConstant %52 
         UniformConstant read_only Texture2D* %54 = OpVariable UniformConstant 
                                              %56 = OpTypeSampler 
                                              %57 = OpTypePointer UniformConstant %56 
                     UniformConstant sampler* %58 = OpVariable UniformConstant 
                                              %60 = OpTypeSampledImage %52 
                                          i32 %65 = OpConstant 2 
                                          u32 %70 = OpConstant 1 
                                          f32 %74 = OpConstant 3.674022E-40 
                               Private f32_4* %77 = OpVariable Private 
                               Private f32_4* %85 = OpVariable Private 
                                          i32 %88 = OpConstant 3 
                                              %89 = OpTypePointer Uniform %7 
                                          i32 %96 = OpConstant 0 
                                         i32 %129 = OpConstant 6 
                                         u32 %156 = OpConstant 3 
                                         i32 %168 = OpConstant 5 
                                         f32 %178 = OpConstant 3.674022E-40 
                                         i32 %183 = OpConstant 4 
                                             %205 = OpTypePointer Private %10 
                              Private f32_3* %206 = OpVariable Private 
                                             %212 = OpTypePointer Function %10 
        UniformConstant read_only Texture2D* %221 = OpVariable UniformConstant 
                    UniformConstant sampler* %223 = OpVariable UniformConstant 
                                             %225 = OpTypeImage %6 Dim2D 1 0 0 1 Unknown 
                                             %226 = OpTypeSampledImage %225 
                                Private f32* %232 = OpVariable Private 
                                         i32 %259 = OpConstant 9 
                                             %292 = OpTypeBool 
                                             %293 = OpTypePointer Private %292 
                               Private bool* %294 = OpVariable Private 
        UniformConstant read_only Texture2D* %300 = OpVariable UniformConstant 
                    UniformConstant sampler* %302 = OpVariable UniformConstant 
                                         f32 %307 = OpConstant 3.674022E-40 
                                         i32 %319 = OpConstant 7 
                                             %328 = OpTypePointer Uniform %10 
        UniformConstant read_only Texture2D* %346 = OpVariable UniformConstant 
                    UniformConstant sampler* %348 = OpVariable UniformConstant 
                                         i32 %368 = OpConstant 8 
                                Private f32* %375 = OpVariable Private 
                              Private f32_4* %390 = OpVariable Private 
                                         f32 %415 = OpConstant 3.674022E-40 
                              Private f32_3* %426 = OpVariable Private 
        UniformConstant read_only Texture2D* %427 = OpVariable UniformConstant 
                    UniformConstant sampler* %429 = OpVariable UniformConstant 
                                         f32 %436 = OpConstant 3.674022E-40 
                                       f32_3 %437 = OpConstantComposite %436 %436 %436 
                                         f32 %439 = OpConstant 3.674022E-40 
                                       f32_3 %440 = OpConstantComposite %439 %439 %439 
                                Private f32* %464 = OpVariable Private 
        UniformConstant read_only Texture2D* %477 = OpVariable UniformConstant 
                    UniformConstant sampler* %479 = OpVariable UniformConstant 
                              Private f32_3* %484 = OpVariable Private 
        UniformConstant read_only Texture2D* %485 = OpVariable UniformConstant 
                    UniformConstant sampler* %487 = OpVariable UniformConstant 
                                       f32_4 %496 = OpConstantComposite %74 %74 %74 %74 
                                         f32 %506 = OpConstant 3.674022E-40 
                                Private f32* %509 = OpVariable Private 
                                Private f32* %515 = OpVariable Private 
                                         f32 %529 = OpConstant 3.674022E-40 
                                         f32 %532 = OpConstant 3.674022E-40 
                                         f32 %577 = OpConstant 3.674022E-40 
                                         f32 %580 = OpConstant 3.674022E-40 
                                         f32 %593 = OpConstant 3.674022E-40 
                               Private bool* %603 = OpVariable Private 
                                         f32 %634 = OpConstant 3.674022E-40 
                                             %718 = OpTypePointer Output %7 
                               Output f32_4* %719 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %213 = OpVariable Function 
                                 Uniform f32* %24 = OpAccessChain %19 %21 %22 
                                          f32 %25 = OpLoad %24 
                                   Input f32* %29 = OpAccessChain vs_TEXCOORD1 %22 
                                          f32 %30 = OpLoad %29 
                                          f32 %31 = OpFDiv %25 %30 
                                 Private f32* %34 = OpAccessChain %9 %32 
                                                      OpStore %34 %31 
                                        f32_4 %35 = OpLoad %9 
                                        f32_3 %36 = OpVectorShuffle %35 %35 0 0 0 
                                        f32_3 %37 = OpLoad vs_TEXCOORD1 
                                        f32_3 %38 = OpFMul %36 %37 
                                        f32_4 %39 = OpLoad %9 
                                        f32_4 %40 = OpVectorShuffle %39 %38 4 5 6 3 
                                                      OpStore %9 %40 
                                        f32_4 %46 = OpLoad vs_TEXCOORD0 
                                        f32_2 %47 = OpVectorShuffle %46 %46 0 1 
                                        f32_4 %48 = OpLoad vs_TEXCOORD0 
                                        f32_2 %49 = OpVectorShuffle %48 %48 3 3 
                                        f32_2 %50 = OpFDiv %47 %49 
                                                      OpStore %43 %50 
                          read_only Texture2D %55 = OpLoad %54 
                                      sampler %59 = OpLoad %58 
                   read_only Texture2DSampled %61 = OpSampledImage %55 %59 
                                        f32_2 %62 = OpLoad %43 
                                        f32_4 %63 = OpImageSampleImplicitLod %61 %62 
                                          f32 %64 = OpCompositeExtract %63 0 
                                                      OpStore %51 %64 
                                 Uniform f32* %66 = OpAccessChain %19 %65 %32 
                                          f32 %67 = OpLoad %66 
                                          f32 %68 = OpLoad %51 
                                          f32 %69 = OpFMul %67 %68 
                                 Uniform f32* %71 = OpAccessChain %19 %65 %70 
                                          f32 %72 = OpLoad %71 
                                          f32 %73 = OpFAdd %69 %72 
                                                      OpStore %51 %73 
                                          f32 %75 = OpLoad %51 
                                          f32 %76 = OpFDiv %74 %75 
                                                      OpStore %51 %76 
                                          f32 %78 = OpLoad %51 
                                        f32_3 %79 = OpCompositeConstruct %78 %78 %78 
                                        f32_4 %80 = OpLoad %9 
                                        f32_3 %81 = OpVectorShuffle %80 %80 0 1 2 
                                        f32_3 %82 = OpFMul %79 %81 
                                        f32_4 %83 = OpLoad %77 
                                        f32_4 %84 = OpVectorShuffle %83 %82 4 5 6 3 
                                                      OpStore %77 %84 
                                        f32_4 %86 = OpLoad %77 
                                        f32_3 %87 = OpVectorShuffle %86 %86 1 1 1 
                               Uniform f32_4* %90 = OpAccessChain %19 %88 %21 
                                        f32_4 %91 = OpLoad %90 
                                        f32_3 %92 = OpVectorShuffle %91 %91 0 1 2 
                                        f32_3 %93 = OpFMul %87 %92 
                                        f32_4 %94 = OpLoad %85 
                                        f32_4 %95 = OpVectorShuffle %94 %93 4 5 6 3 
                                                      OpStore %85 %95 
                               Uniform f32_4* %97 = OpAccessChain %19 %88 %96 
                                        f32_4 %98 = OpLoad %97 
                                        f32_3 %99 = OpVectorShuffle %98 %98 0 1 2 
                                       f32_4 %100 = OpLoad %77 
                                       f32_3 %101 = OpVectorShuffle %100 %100 0 0 0 
                                       f32_3 %102 = OpFMul %99 %101 
                                       f32_4 %103 = OpLoad %85 
                                       f32_3 %104 = OpVectorShuffle %103 %103 0 1 2 
                                       f32_3 %105 = OpFAdd %102 %104 
                                       f32_4 %106 = OpLoad %77 
                                       f32_4 %107 = OpVectorShuffle %106 %105 4 5 2 6 
                                                      OpStore %77 %107 
                              Uniform f32_4* %108 = OpAccessChain %19 %88 %65 
                                       f32_4 %109 = OpLoad %108 
                                       f32_3 %110 = OpVectorShuffle %109 %109 0 1 2 
                                       f32_4 %111 = OpLoad %77 
                                       f32_3 %112 = OpVectorShuffle %111 %111 2 2 2 
                                       f32_3 %113 = OpFMul %110 %112 
                                       f32_4 %114 = OpLoad %77 
                                       f32_3 %115 = OpVectorShuffle %114 %114 0 1 3 
                                       f32_3 %116 = OpFAdd %113 %115 
                                       f32_4 %117 = OpLoad %77 
                                       f32_4 %118 = OpVectorShuffle %117 %116 4 5 2 6 
                                                      OpStore %77 %118 
                                       f32_4 %119 = OpLoad %77 
                                       f32_3 %120 = OpVectorShuffle %119 %119 0 1 3 
                              Uniform f32_4* %121 = OpAccessChain %19 %88 %88 
                                       f32_4 %122 = OpLoad %121 
                                       f32_3 %123 = OpVectorShuffle %122 %122 0 1 2 
                                       f32_3 %124 = OpFAdd %120 %123 
                                       f32_4 %125 = OpLoad %77 
                                       f32_4 %126 = OpVectorShuffle %125 %124 4 5 2 6 
                                                      OpStore %77 %126 
                                       f32_4 %127 = OpLoad %77 
                                       f32_3 %128 = OpVectorShuffle %127 %127 0 1 3 
                              Uniform f32_4* %130 = OpAccessChain %19 %129 
                                       f32_4 %131 = OpLoad %130 
                                       f32_3 %132 = OpVectorShuffle %131 %131 0 1 2 
                                       f32_3 %133 = OpFNegate %132 
                                       f32_3 %134 = OpFAdd %128 %133 
                                       f32_4 %135 = OpLoad %85 
                                       f32_4 %136 = OpVectorShuffle %135 %134 4 5 6 3 
                                                      OpStore %85 %136 
                                       f32_4 %137 = OpLoad %85 
                                       f32_3 %138 = OpVectorShuffle %137 %137 0 1 2 
                                       f32_4 %139 = OpLoad %85 
                                       f32_3 %140 = OpVectorShuffle %139 %139 0 1 2 
                                         f32 %141 = OpDot %138 %140 
                                Private f32* %142 = OpAccessChain %9 %32 
                                                      OpStore %142 %141 
                                Private f32* %143 = OpAccessChain %9 %32 
                                         f32 %144 = OpLoad %143 
                                         f32 %145 = OpExtInst %1 31 %144 
                                Private f32* %146 = OpAccessChain %9 %32 
                                                      OpStore %146 %145 
                                Private f32* %147 = OpAccessChain %9 %22 
                                         f32 %148 = OpLoad %147 
                                         f32 %149 = OpFNegate %148 
                                         f32 %150 = OpLoad %51 
                                         f32 %151 = OpFMul %149 %150 
                                Private f32* %152 = OpAccessChain %9 %32 
                                         f32 %153 = OpLoad %152 
                                         f32 %154 = OpFAdd %151 %153 
                                Private f32* %155 = OpAccessChain %9 %32 
                                                      OpStore %155 %154 
                                Uniform f32* %157 = OpAccessChain %19 %129 %156 
                                         f32 %158 = OpLoad %157 
                                Private f32* %159 = OpAccessChain %9 %32 
                                         f32 %160 = OpLoad %159 
                                         f32 %161 = OpFMul %158 %160 
                                Private f32* %162 = OpAccessChain %77 %22 
                                         f32 %163 = OpLoad %162 
                                         f32 %164 = OpFAdd %161 %163 
                                Private f32* %165 = OpAccessChain %9 %32 
                                                      OpStore %165 %164 
                                Private f32* %166 = OpAccessChain %9 %32 
                                         f32 %167 = OpLoad %166 
                                Uniform f32* %169 = OpAccessChain %19 %168 %22 
                                         f32 %170 = OpLoad %169 
                                         f32 %171 = OpFMul %167 %170 
                                Uniform f32* %172 = OpAccessChain %19 %168 %156 
                                         f32 %173 = OpLoad %172 
                                         f32 %174 = OpFAdd %171 %173 
                                Private f32* %175 = OpAccessChain %9 %32 
                                                      OpStore %175 %174 
                                Private f32* %176 = OpAccessChain %9 %32 
                                         f32 %177 = OpLoad %176 
                                         f32 %179 = OpExtInst %1 43 %177 %178 %74 
                                Private f32* %180 = OpAccessChain %9 %32 
                                                      OpStore %180 %179 
                                       f32_4 %181 = OpLoad %77 
                                       f32_4 %182 = OpVectorShuffle %181 %181 1 1 1 1 
                              Uniform f32_4* %184 = OpAccessChain %19 %183 %21 
                                       f32_4 %185 = OpLoad %184 
                                       f32_4 %186 = OpFMul %182 %185 
                                                      OpStore %85 %186 
                              Uniform f32_4* %187 = OpAccessChain %19 %183 %96 
                                       f32_4 %188 = OpLoad %187 
                                       f32_4 %189 = OpLoad %77 
                                       f32_4 %190 = OpVectorShuffle %189 %189 0 0 0 0 
                                       f32_4 %191 = OpFMul %188 %190 
                                       f32_4 %192 = OpLoad %85 
                                       f32_4 %193 = OpFAdd %191 %192 
                                                      OpStore %85 %193 
                              Uniform f32_4* %194 = OpAccessChain %19 %183 %65 
                                       f32_4 %195 = OpLoad %194 
                                       f32_4 %196 = OpLoad %77 
                                       f32_4 %197 = OpVectorShuffle %196 %196 3 3 3 3 
                                       f32_4 %198 = OpFMul %195 %197 
                                       f32_4 %199 = OpLoad %85 
                                       f32_4 %200 = OpFAdd %198 %199 
                                                      OpStore %85 %200 
                                       f32_4 %201 = OpLoad %85 
                              Uniform f32_4* %202 = OpAccessChain %19 %183 %88 
                                       f32_4 %203 = OpLoad %202 
                                       f32_4 %204 = OpFAdd %201 %203 
                                                      OpStore %85 %204 
                                       f32_4 %207 = OpLoad %85 
                                       f32_3 %208 = OpVectorShuffle %207 %207 0 1 2 
                                       f32_4 %209 = OpLoad %85 
                                       f32_3 %210 = OpVectorShuffle %209 %209 3 3 3 
                                       f32_3 %211 = OpFDiv %208 %210 
                                                      OpStore %206 %211 
                                       f32_3 %214 = OpLoad %206 
                                       f32_2 %215 = OpVectorShuffle %214 %214 0 1 
                                Private f32* %216 = OpAccessChain %206 %22 
                                         f32 %217 = OpLoad %216 
                                         f32 %218 = OpCompositeExtract %215 0 
                                         f32 %219 = OpCompositeExtract %215 1 
                                       f32_3 %220 = OpCompositeConstruct %218 %219 %217 
                                                      OpStore %213 %220 
                         read_only Texture2D %222 = OpLoad %221 
                                     sampler %224 = OpLoad %223 
                  read_only Texture2DSampled %227 = OpSampledImage %222 %224 
                                       f32_3 %228 = OpLoad %213 
                                         f32 %229 = OpCompositeExtract %228 2 
                                         f32 %230 = OpImageSampleDrefExplicitLod %227 %228 %229 Lod %6 
                                Private f32* %231 = OpAccessChain %206 %32 
                                                      OpStore %231 %230 
                                Uniform f32* %233 = OpAccessChain %19 %168 %32 
                                         f32 %234 = OpLoad %233 
                                         f32 %235 = OpFNegate %234 
                                         f32 %236 = OpFAdd %235 %74 
                                                      OpStore %232 %236 
                                Private f32* %237 = OpAccessChain %206 %32 
                                         f32 %238 = OpLoad %237 
                                         f32 %239 = OpLoad %232 
                                         f32 %240 = OpFMul %238 %239 
                                Uniform f32* %241 = OpAccessChain %19 %168 %32 
                                         f32 %242 = OpLoad %241 
                                         f32 %243 = OpFAdd %240 %242 
                                Private f32* %244 = OpAccessChain %206 %32 
                                                      OpStore %244 %243 
                                Private f32* %245 = OpAccessChain %206 %32 
                                         f32 %246 = OpLoad %245 
                                         f32 %247 = OpFNegate %246 
                                         f32 %248 = OpFAdd %247 %74 
                                                      OpStore %232 %248 
                                Private f32* %249 = OpAccessChain %9 %32 
                                         f32 %250 = OpLoad %249 
                                         f32 %251 = OpLoad %232 
                                         f32 %252 = OpFMul %250 %251 
                                Private f32* %253 = OpAccessChain %206 %32 
                                         f32 %254 = OpLoad %253 
                                         f32 %255 = OpFAdd %252 %254 
                                Private f32* %256 = OpAccessChain %9 %32 
                                                      OpStore %256 %255 
                                       f32_4 %257 = OpLoad %77 
                                       f32_3 %258 = OpVectorShuffle %257 %257 1 1 1 
                              Uniform f32_4* %260 = OpAccessChain %19 %259 %21 
                                       f32_4 %261 = OpLoad %260 
                                       f32_3 %262 = OpVectorShuffle %261 %261 0 1 3 
                                       f32_3 %263 = OpFMul %258 %262 
                                                      OpStore %206 %263 
                              Uniform f32_4* %264 = OpAccessChain %19 %259 %96 
                                       f32_4 %265 = OpLoad %264 
                                       f32_3 %266 = OpVectorShuffle %265 %265 0 1 3 
                                       f32_4 %267 = OpLoad %77 
                                       f32_3 %268 = OpVectorShuffle %267 %267 0 0 0 
                                       f32_3 %269 = OpFMul %266 %268 
                                       f32_3 %270 = OpLoad %206 
                                       f32_3 %271 = OpFAdd %269 %270 
                                                      OpStore %206 %271 
                              Uniform f32_4* %272 = OpAccessChain %19 %259 %65 
                                       f32_4 %273 = OpLoad %272 
                                       f32_3 %274 = OpVectorShuffle %273 %273 0 1 3 
                                       f32_4 %275 = OpLoad %77 
                                       f32_3 %276 = OpVectorShuffle %275 %275 3 3 3 
                                       f32_3 %277 = OpFMul %274 %276 
                                       f32_3 %278 = OpLoad %206 
                                       f32_3 %279 = OpFAdd %277 %278 
                                                      OpStore %206 %279 
                                       f32_3 %280 = OpLoad %206 
                              Uniform f32_4* %281 = OpAccessChain %19 %259 %88 
                                       f32_4 %282 = OpLoad %281 
                                       f32_3 %283 = OpVectorShuffle %282 %282 0 1 3 
                                       f32_3 %284 = OpFAdd %280 %283 
                                                      OpStore %206 %284 
                                       f32_3 %285 = OpLoad %206 
                                       f32_2 %286 = OpVectorShuffle %285 %285 0 1 
                                       f32_3 %287 = OpLoad %206 
                                       f32_2 %288 = OpVectorShuffle %287 %287 2 2 
                                       f32_2 %289 = OpFDiv %286 %288 
                                       f32_3 %290 = OpLoad %206 
                                       f32_3 %291 = OpVectorShuffle %290 %289 3 4 2 
                                                      OpStore %206 %291 
                                Private f32* %295 = OpAccessChain %206 %22 
                                         f32 %296 = OpLoad %295 
                                        bool %297 = OpFOrdLessThan %296 %178 
                                                      OpStore %294 %297 
                                        bool %298 = OpLoad %294 
                                         f32 %299 = OpSelect %298 %74 %178 
                                                      OpStore %51 %299 
                         read_only Texture2D %301 = OpLoad %300 
                                     sampler %303 = OpLoad %302 
                  read_only Texture2DSampled %304 = OpSampledImage %301 %303 
                                       f32_3 %305 = OpLoad %206 
                                       f32_2 %306 = OpVectorShuffle %305 %305 0 1 
                                       f32_4 %308 = OpImageSampleImplicitLod %304 %306 Bias %7 
                                         f32 %309 = OpCompositeExtract %308 3 
                                Private f32* %310 = OpAccessChain %206 %32 
                                                      OpStore %310 %309 
                                         f32 %311 = OpLoad %51 
                                Private f32* %312 = OpAccessChain %206 %32 
                                         f32 %313 = OpLoad %312 
                                         f32 %314 = OpFMul %311 %313 
                                Private f32* %315 = OpAccessChain %206 %32 
                                                      OpStore %315 %314 
                                       f32_4 %316 = OpLoad %77 
                                       f32_3 %317 = OpVectorShuffle %316 %316 0 1 3 
                                       f32_3 %318 = OpFNegate %317 
                              Uniform f32_4* %320 = OpAccessChain %19 %319 
                                       f32_4 %321 = OpLoad %320 
                                       f32_3 %322 = OpVectorShuffle %321 %321 0 1 2 
                                       f32_3 %323 = OpFAdd %318 %322 
                                       f32_4 %324 = OpLoad %85 
                                       f32_4 %325 = OpVectorShuffle %324 %323 4 5 6 3 
                                                      OpStore %85 %325 
                                       f32_4 %326 = OpLoad %77 
                                       f32_3 %327 = OpVectorShuffle %326 %326 0 1 3 
                              Uniform f32_3* %329 = OpAccessChain %19 %96 
                                       f32_3 %330 = OpLoad %329 
                                       f32_3 %331 = OpFNegate %330 
                                       f32_3 %332 = OpFAdd %327 %331 
                                       f32_4 %333 = OpLoad %77 
                                       f32_4 %334 = OpVectorShuffle %333 %332 4 5 6 3 
                                                      OpStore %77 %334 
                                       f32_4 %335 = OpLoad %85 
                                       f32_3 %336 = OpVectorShuffle %335 %335 0 1 2 
                                       f32_4 %337 = OpLoad %85 
                                       f32_3 %338 = OpVectorShuffle %337 %337 0 1 2 
                                         f32 %339 = OpDot %336 %338 
                                                      OpStore %232 %339 
                                         f32 %340 = OpLoad %232 
                                Uniform f32* %341 = OpAccessChain %19 %319 %156 
                                         f32 %342 = OpLoad %341 
                                         f32 %343 = OpFMul %340 %342 
                                                      OpStore %51 %343 
                                         f32 %344 = OpLoad %232 
                                         f32 %345 = OpExtInst %1 32 %344 
                                                      OpStore %232 %345 
                         read_only Texture2D %347 = OpLoad %346 
                                     sampler %349 = OpLoad %348 
                  read_only Texture2DSampled %350 = OpSampledImage %347 %349 
                                         f32 %351 = OpLoad %51 
                                       f32_2 %352 = OpCompositeConstruct %351 %351 
                                       f32_4 %353 = OpImageSampleImplicitLod %350 %352 
                                         f32 %354 = OpCompositeExtract %353 0 
                                                      OpStore %51 %354 
                                         f32 %355 = OpLoad %51 
                                Private f32* %356 = OpAccessChain %206 %32 
                                         f32 %357 = OpLoad %356 
                                         f32 %358 = OpFMul %355 %357 
                                Private f32* %359 = OpAccessChain %206 %32 
                                                      OpStore %359 %358 
                                Private f32* %360 = OpAccessChain %9 %32 
                                         f32 %361 = OpLoad %360 
                                Private f32* %362 = OpAccessChain %206 %32 
                                         f32 %363 = OpLoad %362 
                                         f32 %364 = OpFMul %361 %363 
                                Private f32* %365 = OpAccessChain %9 %32 
                                                      OpStore %365 %364 
                                       f32_4 %366 = OpLoad %9 
                                       f32_3 %367 = OpVectorShuffle %366 %366 0 0 0 
                              Uniform f32_4* %369 = OpAccessChain %19 %368 
                                       f32_4 %370 = OpLoad %369 
                                       f32_3 %371 = OpVectorShuffle %370 %370 0 1 2 
                                       f32_3 %372 = OpFMul %367 %371 
                                       f32_4 %373 = OpLoad %9 
                                       f32_4 %374 = OpVectorShuffle %373 %372 4 5 2 6 
                                                      OpStore %9 %374 
                                       f32_4 %376 = OpLoad %77 
                                       f32_3 %377 = OpVectorShuffle %376 %376 0 1 2 
                                       f32_4 %378 = OpLoad %77 
                                       f32_3 %379 = OpVectorShuffle %378 %378 0 1 2 
                                         f32 %380 = OpDot %377 %379 
                                                      OpStore %375 %380 
                                         f32 %381 = OpLoad %375 
                                         f32 %382 = OpExtInst %1 32 %381 
                                                      OpStore %375 %382 
                                         f32 %383 = OpLoad %375 
                                       f32_3 %384 = OpCompositeConstruct %383 %383 %383 
                                       f32_4 %385 = OpLoad %77 
                                       f32_3 %386 = OpVectorShuffle %385 %385 0 1 2 
                                       f32_3 %387 = OpFMul %384 %386 
                                       f32_4 %388 = OpLoad %77 
                                       f32_4 %389 = OpVectorShuffle %388 %387 4 5 6 3 
                                                      OpStore %77 %389 
                                       f32_4 %391 = OpLoad %85 
                                       f32_3 %392 = OpVectorShuffle %391 %391 0 1 2 
                                         f32 %393 = OpLoad %232 
                                       f32_3 %394 = OpCompositeConstruct %393 %393 %393 
                                       f32_3 %395 = OpFMul %392 %394 
                                       f32_4 %396 = OpLoad %77 
                                       f32_3 %397 = OpVectorShuffle %396 %396 0 1 2 
                                       f32_3 %398 = OpFNegate %397 
                                       f32_3 %399 = OpFAdd %395 %398 
                                       f32_4 %400 = OpLoad %390 
                                       f32_4 %401 = OpVectorShuffle %400 %399 4 5 6 3 
                                                      OpStore %390 %401 
                                         f32 %402 = OpLoad %232 
                                       f32_3 %403 = OpCompositeConstruct %402 %402 %402 
                                       f32_4 %404 = OpLoad %85 
                                       f32_3 %405 = OpVectorShuffle %404 %404 0 1 2 
                                       f32_3 %406 = OpFMul %403 %405 
                                       f32_4 %407 = OpLoad %85 
                                       f32_4 %408 = OpVectorShuffle %407 %406 4 5 6 3 
                                                      OpStore %85 %408 
                                       f32_4 %409 = OpLoad %390 
                                       f32_3 %410 = OpVectorShuffle %409 %409 0 1 2 
                                       f32_4 %411 = OpLoad %390 
                                       f32_3 %412 = OpVectorShuffle %411 %411 0 1 2 
                                         f32 %413 = OpDot %410 %412 
                                                      OpStore %232 %413 
                                         f32 %414 = OpLoad %232 
                                         f32 %416 = OpExtInst %1 40 %414 %415 
                                                      OpStore %232 %416 
                                         f32 %417 = OpLoad %232 
                                         f32 %418 = OpExtInst %1 32 %417 
                                                      OpStore %232 %418 
                                         f32 %419 = OpLoad %232 
                                       f32_3 %420 = OpCompositeConstruct %419 %419 %419 
                                       f32_4 %421 = OpLoad %390 
                                       f32_3 %422 = OpVectorShuffle %421 %421 0 1 2 
                                       f32_3 %423 = OpFMul %420 %422 
                                       f32_4 %424 = OpLoad %390 
                                       f32_4 %425 = OpVectorShuffle %424 %423 4 5 6 3 
                                                      OpStore %390 %425 
                         read_only Texture2D %428 = OpLoad %427 
                                     sampler %430 = OpLoad %429 
                  read_only Texture2DSampled %431 = OpSampledImage %428 %430 
                                       f32_2 %432 = OpLoad %43 
                                       f32_4 %433 = OpImageSampleImplicitLod %431 %432 
                                       f32_3 %434 = OpVectorShuffle %433 %433 0 1 2 
                                                      OpStore %426 %434 
                                       f32_3 %435 = OpLoad %426 
                                       f32_3 %438 = OpFMul %435 %437 
                                       f32_3 %441 = OpFAdd %438 %440 
                                                      OpStore %426 %441 
                                       f32_3 %442 = OpLoad %426 
                                       f32_3 %443 = OpLoad %426 
                                         f32 %444 = OpDot %442 %443 
                                                      OpStore %232 %444 
                                         f32 %445 = OpLoad %232 
                                         f32 %446 = OpExtInst %1 32 %445 
                                                      OpStore %232 %446 
                                         f32 %447 = OpLoad %232 
                                       f32_3 %448 = OpCompositeConstruct %447 %447 %447 
                                       f32_3 %449 = OpLoad %426 
                                       f32_3 %450 = OpFMul %448 %449 
                                                      OpStore %426 %450 
                                       f32_3 %451 = OpLoad %426 
                                       f32_4 %452 = OpLoad %390 
                                       f32_3 %453 = OpVectorShuffle %452 %452 0 1 2 
                                         f32 %454 = OpDot %451 %453 
                                                      OpStore %232 %454 
                                         f32 %455 = OpLoad %232 
                                         f32 %456 = OpExtInst %1 43 %455 %178 %74 
                                                      OpStore %232 %456 
                                       f32_4 %457 = OpLoad %85 
                                       f32_3 %458 = OpVectorShuffle %457 %457 0 1 2 
                                       f32_4 %459 = OpLoad %390 
                                       f32_3 %460 = OpVectorShuffle %459 %459 0 1 2 
                                         f32 %461 = OpDot %458 %460 
                                                      OpStore %375 %461 
                                         f32 %462 = OpLoad %375 
                                         f32 %463 = OpExtInst %1 43 %462 %178 %74 
                                                      OpStore %375 %463 
                                       f32_3 %465 = OpLoad %426 
                                       f32_4 %466 = OpLoad %85 
                                       f32_3 %467 = OpVectorShuffle %466 %466 0 1 2 
                                         f32 %468 = OpDot %465 %467 
                                                      OpStore %464 %468 
                                         f32 %469 = OpLoad %464 
                                         f32 %470 = OpExtInst %1 43 %469 %178 %74 
                                                      OpStore %464 %470 
                                       f32_3 %471 = OpLoad %426 
                                       f32_4 %472 = OpLoad %77 
                                       f32_3 %473 = OpVectorShuffle %472 %472 0 1 2 
                                       f32_3 %474 = OpFNegate %473 
                                         f32 %475 = OpDot %471 %474 
                                Private f32* %476 = OpAccessChain %77 %32 
                                                      OpStore %476 %475 
                         read_only Texture2D %478 = OpLoad %477 
                                     sampler %480 = OpLoad %479 
                  read_only Texture2DSampled %481 = OpSampledImage %478 %480 
                                       f32_2 %482 = OpLoad %43 
                                       f32_4 %483 = OpImageSampleImplicitLod %481 %482 
                                                      OpStore %85 %483 
                         read_only Texture2D %486 = OpLoad %485 
                                     sampler %488 = OpLoad %487 
                  read_only Texture2DSampled %489 = OpSampledImage %486 %488 
                                       f32_2 %490 = OpLoad %43 
                                       f32_4 %491 = OpImageSampleImplicitLod %489 %490 
                                       f32_3 %492 = OpVectorShuffle %491 %491 0 1 2 
                                                      OpStore %484 %492 
                                       f32_4 %493 = OpLoad %85 
                                       f32_4 %494 = OpVectorShuffle %493 %493 3 0 1 2 
                                       f32_4 %495 = OpFNegate %494 
                                       f32_4 %497 = OpFAdd %495 %496 
                                                      OpStore %390 %497 
                                Private f32* %498 = OpAccessChain %390 %32 
                                         f32 %499 = OpLoad %498 
                                Private f32* %500 = OpAccessChain %390 %32 
                                         f32 %501 = OpLoad %500 
                                         f32 %502 = OpFMul %499 %501 
                                Private f32* %503 = OpAccessChain %43 %32 
                                                      OpStore %503 %502 
                                Private f32* %504 = OpAccessChain %43 %32 
                                         f32 %505 = OpLoad %504 
                                         f32 %507 = OpExtInst %1 40 %505 %506 
                                Private f32* %508 = OpAccessChain %43 %32 
                                                      OpStore %508 %507 
                                Private f32* %510 = OpAccessChain %43 %32 
                                         f32 %511 = OpLoad %510 
                                Private f32* %512 = OpAccessChain %43 %32 
                                         f32 %513 = OpLoad %512 
                                         f32 %514 = OpFMul %511 %513 
                                                      OpStore %509 %514 
                                         f32 %516 = OpLoad %232 
                                         f32 %517 = OpLoad %509 
                                         f32 %518 = OpFMul %516 %517 
                                         f32 %519 = OpLoad %232 
                                         f32 %520 = OpFNegate %519 
                                         f32 %521 = OpFAdd %518 %520 
                                                      OpStore %515 %521 
                                         f32 %522 = OpLoad %515 
                                         f32 %523 = OpLoad %232 
                                         f32 %524 = OpFMul %522 %523 
                                         f32 %525 = OpFAdd %524 %74 
                                                      OpStore %232 %525 
                                         f32 %526 = OpLoad %232 
                                         f32 %527 = OpLoad %232 
                                         f32 %528 = OpFMul %526 %527 
                                         f32 %530 = OpFAdd %528 %529 
                                                      OpStore %232 %530 
                                         f32 %531 = OpLoad %509 
                                         f32 %533 = OpFMul %531 %532 
                                                      OpStore %509 %533 
                                         f32 %534 = OpLoad %509 
                                         f32 %535 = OpLoad %232 
                                         f32 %536 = OpFDiv %534 %535 
                                                      OpStore %232 %536 
                                Private f32* %537 = OpAccessChain %43 %32 
                                         f32 %538 = OpLoad %537 
                                         f32 %539 = OpFNegate %538 
                                         f32 %540 = OpFAdd %539 %74 
                                                      OpStore %509 %540 
                                Private f32* %541 = OpAccessChain %77 %32 
                                         f32 %542 = OpLoad %541 
                                         f32 %543 = OpExtInst %1 4 %542 
                                         f32 %544 = OpLoad %509 
                                         f32 %545 = OpFMul %543 %544 
                                Private f32* %546 = OpAccessChain %43 %32 
                                         f32 %547 = OpLoad %546 
                                         f32 %548 = OpFAdd %545 %547 
                                                      OpStore %515 %548 
                                         f32 %549 = OpLoad %464 
                                         f32 %550 = OpLoad %509 
                                         f32 %551 = OpFMul %549 %550 
                                Private f32* %552 = OpAccessChain %43 %32 
                                         f32 %553 = OpLoad %552 
                                         f32 %554 = OpFAdd %551 %553 
                                Private f32* %555 = OpAccessChain %43 %32 
                                                      OpStore %555 %554 
                                Private f32* %556 = OpAccessChain %43 %32 
                                         f32 %557 = OpLoad %556 
                                Private f32* %558 = OpAccessChain %77 %32 
                                         f32 %559 = OpLoad %558 
                                         f32 %560 = OpExtInst %1 4 %559 
                                         f32 %561 = OpFMul %557 %560 
                                Private f32* %562 = OpAccessChain %43 %32 
                                                      OpStore %562 %561 
                                Private f32* %563 = OpAccessChain %77 %32 
                                         f32 %564 = OpLoad %563 
                                         f32 %565 = OpExtInst %1 4 %564 
                                         f32 %566 = OpFNegate %565 
                                         f32 %567 = OpFAdd %566 %74 
                                                      OpStore %509 %567 
                                         f32 %568 = OpLoad %464 
                                         f32 %569 = OpLoad %515 
                                         f32 %570 = OpFMul %568 %569 
                                Private f32* %571 = OpAccessChain %43 %32 
                                         f32 %572 = OpLoad %571 
                                         f32 %573 = OpFAdd %570 %572 
                                Private f32* %574 = OpAccessChain %43 %32 
                                                      OpStore %574 %573 
                                Private f32* %575 = OpAccessChain %43 %32 
                                         f32 %576 = OpLoad %575 
                                         f32 %578 = OpFAdd %576 %577 
                                Private f32* %579 = OpAccessChain %43 %32 
                                                      OpStore %579 %578 
                                Private f32* %581 = OpAccessChain %43 %32 
                                         f32 %582 = OpLoad %581 
                                         f32 %583 = OpFDiv %580 %582 
                                Private f32* %584 = OpAccessChain %43 %32 
                                                      OpStore %584 %583 
                                         f32 %585 = OpLoad %232 
                                Private f32* %586 = OpAccessChain %43 %32 
                                         f32 %587 = OpLoad %586 
                                         f32 %588 = OpFMul %585 %587 
                                                      OpStore %232 %588 
                                         f32 %589 = OpLoad %464 
                                         f32 %590 = OpLoad %232 
                                         f32 %591 = OpFMul %589 %590 
                                                      OpStore %232 %591 
                                         f32 %592 = OpLoad %232 
                                         f32 %594 = OpFMul %592 %593 
                                                      OpStore %232 %594 
                                         f32 %595 = OpLoad %232 
                                         f32 %596 = OpExtInst %1 40 %595 %178 
                                                      OpStore %232 %596 
                                       f32_4 %597 = OpLoad %85 
                                       f32_3 %598 = OpVectorShuffle %597 %597 0 1 2 
                                       f32_4 %599 = OpLoad %85 
                                       f32_3 %600 = OpVectorShuffle %599 %599 0 1 2 
                                         f32 %601 = OpDot %598 %600 
                                Private f32* %602 = OpAccessChain %43 %32 
                                                      OpStore %602 %601 
                                Private f32* %604 = OpAccessChain %43 %32 
                                         f32 %605 = OpLoad %604 
                                        bool %606 = OpFOrdNotEqual %605 %178 
                                                      OpStore %603 %606 
                                        bool %607 = OpLoad %603 
                                         f32 %608 = OpSelect %607 %74 %178 
                                Private f32* %609 = OpAccessChain %43 %32 
                                                      OpStore %609 %608 
                                         f32 %610 = OpLoad %232 
                                Private f32* %611 = OpAccessChain %43 %32 
                                         f32 %612 = OpLoad %611 
                                         f32 %613 = OpFMul %610 %612 
                                                      OpStore %232 %613 
                                       f32_4 %614 = OpLoad %9 
                                       f32_3 %615 = OpVectorShuffle %614 %614 0 1 3 
                                         f32 %616 = OpLoad %232 
                                       f32_3 %617 = OpCompositeConstruct %616 %616 %616 
                                       f32_3 %618 = OpFMul %615 %617 
                                                      OpStore %426 %618 
                                         f32 %619 = OpLoad %375 
                                         f32 %620 = OpFNegate %619 
                                         f32 %621 = OpFAdd %620 %74 
                                                      OpStore %232 %621 
                                         f32 %622 = OpLoad %375 
                                         f32 %623 = OpLoad %375 
                                         f32 %624 = OpFMul %622 %623 
                                Private f32* %625 = OpAccessChain %43 %32 
                                                      OpStore %625 %624 
                                       f32_2 %626 = OpLoad %43 
                                       f32_2 %627 = OpVectorShuffle %626 %626 0 0 
                                       f32_4 %628 = OpLoad %390 
                                       f32_2 %629 = OpVectorShuffle %628 %628 0 0 
                                         f32 %630 = OpDot %627 %629 
                                Private f32* %631 = OpAccessChain %43 %32 
                                                      OpStore %631 %630 
                                Private f32* %632 = OpAccessChain %43 %32 
                                         f32 %633 = OpLoad %632 
                                         f32 %635 = OpFAdd %633 %634 
                                Private f32* %636 = OpAccessChain %43 %32 
                                                      OpStore %636 %635 
                                         f32 %637 = OpLoad %232 
                                         f32 %638 = OpLoad %232 
                                         f32 %639 = OpFMul %637 %638 
                                                      OpStore %375 %639 
                                         f32 %640 = OpLoad %375 
                                         f32 %641 = OpLoad %375 
                                         f32 %642 = OpFMul %640 %641 
                                                      OpStore %375 %642 
                                         f32 %643 = OpLoad %232 
                                         f32 %644 = OpLoad %375 
                                         f32 %645 = OpFMul %643 %644 
                                                      OpStore %232 %645 
                                       f32_4 %646 = OpLoad %390 
                                       f32_3 %647 = OpVectorShuffle %646 %646 1 2 3 
                                         f32 %648 = OpLoad %232 
                                       f32_3 %649 = OpCompositeConstruct %648 %648 %648 
                                       f32_3 %650 = OpFMul %647 %649 
                                       f32_4 %651 = OpLoad %85 
                                       f32_3 %652 = OpVectorShuffle %651 %651 0 1 2 
                                       f32_3 %653 = OpFAdd %650 %652 
                                       f32_4 %654 = OpLoad %85 
                                       f32_4 %655 = OpVectorShuffle %654 %653 4 5 6 3 
                                                      OpStore %85 %655 
                                       f32_4 %656 = OpLoad %85 
                                       f32_3 %657 = OpVectorShuffle %656 %656 0 1 2 
                                       f32_3 %658 = OpLoad %426 
                                       f32_3 %659 = OpFMul %657 %658 
                                       f32_4 %660 = OpLoad %85 
                                       f32_4 %661 = OpVectorShuffle %660 %659 4 5 6 3 
                                                      OpStore %85 %661 
                                         f32 %662 = OpLoad %509 
                                         f32 %663 = OpLoad %509 
                                         f32 %664 = OpFMul %662 %663 
                                                      OpStore %232 %664 
                                         f32 %665 = OpLoad %232 
                                         f32 %666 = OpLoad %232 
                                         f32 %667 = OpFMul %665 %666 
                                                      OpStore %232 %667 
                                         f32 %668 = OpLoad %509 
                                         f32 %669 = OpLoad %232 
                                         f32 %670 = OpFMul %668 %669 
                                                      OpStore %232 %670 
                                Private f32* %671 = OpAccessChain %43 %32 
                                         f32 %672 = OpLoad %671 
                                         f32 %673 = OpLoad %232 
                                         f32 %674 = OpFMul %672 %673 
                                         f32 %675 = OpFAdd %674 %74 
                                                      OpStore %232 %675 
                                         f32 %676 = OpLoad %464 
                                         f32 %677 = OpFNegate %676 
                                         f32 %678 = OpFAdd %677 %74 
                                                      OpStore %509 %678 
                                         f32 %679 = OpLoad %509 
                                         f32 %680 = OpLoad %509 
                                         f32 %681 = OpFMul %679 %680 
                                                      OpStore %375 %681 
                                         f32 %682 = OpLoad %375 
                                         f32 %683 = OpLoad %375 
                                         f32 %684 = OpFMul %682 %683 
                                                      OpStore %375 %684 
                                         f32 %685 = OpLoad %509 
                                         f32 %686 = OpLoad %375 
                                         f32 %687 = OpFMul %685 %686 
                                                      OpStore %509 %687 
                                Private f32* %688 = OpAccessChain %43 %32 
                                         f32 %689 = OpLoad %688 
                                         f32 %690 = OpLoad %509 
                                         f32 %691 = OpFMul %689 %690 
                                         f32 %692 = OpFAdd %691 %74 
                                Private f32* %693 = OpAccessChain %43 %32 
                                                      OpStore %693 %692 
                                         f32 %694 = OpLoad %232 
                                Private f32* %695 = OpAccessChain %43 %32 
                                         f32 %696 = OpLoad %695 
                                         f32 %697 = OpFMul %694 %696 
                                                      OpStore %232 %697 
                                         f32 %698 = OpLoad %464 
                                         f32 %699 = OpLoad %232 
                                         f32 %700 = OpFMul %698 %699 
                                                      OpStore %232 %700 
                                         f32 %701 = OpLoad %232 
                                       f32_3 %702 = OpCompositeConstruct %701 %701 %701 
                                       f32_4 %703 = OpLoad %9 
                                       f32_3 %704 = OpVectorShuffle %703 %703 0 1 3 
                                       f32_3 %705 = OpFMul %702 %704 
                                       f32_4 %706 = OpLoad %9 
                                       f32_4 %707 = OpVectorShuffle %706 %705 4 5 6 3 
                                                      OpStore %9 %707 
                                       f32_3 %708 = OpLoad %484 
                                       f32_4 %709 = OpLoad %9 
                                       f32_3 %710 = OpVectorShuffle %709 %709 0 1 2 
                                       f32_3 %711 = OpFMul %708 %710 
                                       f32_4 %712 = OpLoad %85 
                                       f32_3 %713 = OpVectorShuffle %712 %712 0 1 2 
                                       f32_3 %714 = OpFAdd %711 %713 
                                       f32_4 %715 = OpLoad %9 
                                       f32_4 %716 = OpVectorShuffle %715 %714 4 5 6 3 
                                                      OpStore %9 %716 
                                Private f32* %717 = OpAccessChain %9 %156 
                                                      OpStore %717 %74 
                                       f32_4 %720 = OpLoad %9 
                                       f32_4 %721 = OpFNegate %720 
                                       f32_4 %722 = OpExtInst %1 29 %721 
                                                      OpStore %719 %722 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "SHADOWS_DEPTH" "SHADOWS_SOFT" "SPOT" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "SHADOWS_DEPTH" "SHADOWS_SOFT" "SPOT" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	vec4 _ShadowMapTexture_TexelSize;
UNITY_LOCATION(0) uniform  sampler2D _CameraDepthTexture;
UNITY_LOCATION(1) uniform  sampler2D _LightTexture0;
UNITY_LOCATION(2) uniform  sampler2D _LightTextureB0;
UNITY_LOCATION(3) uniform  sampler2D _CameraGBufferTexture0;
UNITY_LOCATION(4) uniform  sampler2D _CameraGBufferTexture1;
UNITY_LOCATION(5) uniform  sampler2D _CameraGBufferTexture2;
UNITY_LOCATION(6) uniform  sampler2D _ShadowMapTexture;
UNITY_LOCATION(7) uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec3 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
vec4 u_xlat6;
vec4 u_xlat7;
vec4 u_xlat8;
vec4 u_xlat9;
vec3 u_xlat10;
float u_xlat11;
float u_xlat20;
float u_xlat21;
float u_xlat22;
bool u_xlatb22;
vec2 u_xlat25;
float u_xlat30;
bool u_xlatb30;
float u_xlat31;
float u_xlat33;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat2 = texture(_CameraDepthTexture, u_xlat1.xy);
    u_xlat30 = _ZBufferParams.x * u_xlat2.x + _ZBufferParams.y;
    u_xlat30 = float(1.0) / u_xlat30;
    u_xlat2.xyz = vec3(u_xlat30) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat30 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat10.xyz = (-u_xlat2.xyw) + _LightPos.xyz;
    u_xlat21 = dot(u_xlat10.xyz, u_xlat10.xyz);
    u_xlat31 = inversesqrt(u_xlat21);
    u_xlat3.xyz = u_xlat10.xyz * vec3(u_xlat31);
    u_xlat4.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyw;
    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyw * u_xlat2.xxx + u_xlat4.xyz;
    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyw * u_xlat2.www + u_xlat4.xyz;
    u_xlat4.xyz = u_xlat4.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyw;
    u_xlat4.xy = u_xlat4.xy / u_xlat4.zz;
    u_xlat5 = texture(_LightTexture0, u_xlat4.xy, -8.0);
    u_xlatb22 = u_xlat4.z<0.0;
    u_xlat22 = u_xlatb22 ? 1.0 : float(0.0);
    u_xlat22 = u_xlat22 * u_xlat5.w;
    u_xlat21 = u_xlat21 * _LightPos.w;
    u_xlat4 = texture(_LightTextureB0, vec2(u_xlat21));
    u_xlat21 = u_xlat22 * u_xlat4.x;
    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlatb22 = u_xlat0.x<0.99000001;
    if(u_xlatb22){
        u_xlat4 = u_xlat2.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
        u_xlat4 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat2.xxxx + u_xlat4;
        u_xlat4 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat2.wwww + u_xlat4;
        u_xlat4 = u_xlat4 + hlslcc_mtx4x4unity_WorldToShadow[3];
        u_xlat4.xyz = u_xlat4.xyz / u_xlat4.www;
        u_xlat5.xy = u_xlat4.xy * _ShadowMapTexture_TexelSize.zw + vec2(0.5, 0.5);
        u_xlat5.xy = floor(u_xlat5.xy);
        u_xlat4.xy = u_xlat4.xy * _ShadowMapTexture_TexelSize.zw + (-u_xlat5.xy);
        u_xlat6 = u_xlat4.xxyy + vec4(0.5, 1.0, 0.5, 1.0);
        u_xlat7.xw = u_xlat6.xz * u_xlat6.xz;
        u_xlat25.xy = u_xlat7.xw * vec2(0.5, 0.5) + (-u_xlat4.xy);
        u_xlat6.xz = (-u_xlat4.xy) + vec2(1.0, 1.0);
        u_xlat8.xy = min(u_xlat4.xy, vec2(0.0, 0.0));
        u_xlat6.xz = (-u_xlat8.xy) * u_xlat8.xy + u_xlat6.xz;
        u_xlat4.xy = max(u_xlat4.xy, vec2(0.0, 0.0));
        u_xlat4.xy = (-u_xlat4.xy) * u_xlat4.xy + u_xlat6.yw;
        u_xlat8.x = u_xlat25.x;
        u_xlat8.y = u_xlat6.x;
        u_xlat8.z = u_xlat4.x;
        u_xlat8.w = u_xlat7.x;
        u_xlat8 = u_xlat8 * vec4(0.444440007, 0.444440007, 0.444440007, 0.222220004);
        u_xlat7.x = u_xlat25.y;
        u_xlat7.y = u_xlat6.z;
        u_xlat7.z = u_xlat4.y;
        u_xlat6 = u_xlat7 * vec4(0.444440007, 0.444440007, 0.444440007, 0.222220004);
        u_xlat7 = u_xlat8.ywyw + u_xlat8.xzxz;
        u_xlat9 = u_xlat6.yyww + u_xlat6.xxzz;
        u_xlat4.xy = u_xlat8.yw / u_xlat7.zw;
        u_xlat4.xy = u_xlat4.xy + vec2(-1.5, 0.5);
        u_xlat25.xy = u_xlat6.yw / u_xlat9.yw;
        u_xlat25.xy = u_xlat25.xy + vec2(-1.5, 0.5);
        u_xlat6.xy = u_xlat4.xy * _ShadowMapTexture_TexelSize.xx;
        u_xlat6.zw = u_xlat25.xy * _ShadowMapTexture_TexelSize.yy;
        u_xlat7 = u_xlat7 * u_xlat9;
        u_xlat8 = u_xlat5.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat6.xzyz;
        vec3 txVec0 = vec3(u_xlat8.xy,u_xlat4.z);
        u_xlat22 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
        vec3 txVec1 = vec3(u_xlat8.zw,u_xlat4.z);
        u_xlat33 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec1, 0.0);
        u_xlat33 = u_xlat33 * u_xlat7.y;
        u_xlat22 = u_xlat7.x * u_xlat22 + u_xlat33;
        u_xlat5 = u_xlat5.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat6.xwyw;
        vec3 txVec2 = vec3(u_xlat5.xy,u_xlat4.z);
        u_xlat33 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec2, 0.0);
        u_xlat22 = u_xlat7.z * u_xlat33 + u_xlat22;
        vec3 txVec3 = vec3(u_xlat5.zw,u_xlat4.z);
        u_xlat33 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec3, 0.0);
        u_xlat22 = u_xlat7.w * u_xlat33 + u_xlat22;
        u_xlat33 = (-_LightShadowData.x) + 1.0;
        u_xlat22 = u_xlat22 * u_xlat33 + _LightShadowData.x;
    } else {
        u_xlat22 = 1.0;
    }
    u_xlat33 = (-u_xlat22) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat33 + u_xlat22;
    u_xlat0.x = u_xlat0.x * u_xlat21;
    u_xlat4.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat5 = texture(_CameraGBufferTexture0, u_xlat1.xy);
    u_xlat6 = texture(_CameraGBufferTexture1, u_xlat1.xy);
    u_xlat7 = texture(_CameraGBufferTexture2, u_xlat1.xy);
    u_xlat1.xyz = u_xlat7.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat2.xyw + (-_WorldSpaceCameraPos.xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat7 = (-u_xlat6.wxyz) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0.xyz = u_xlat10.xyz * vec3(u_xlat31) + (-u_xlat2.xyz);
    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat30 = max(u_xlat30, 0.00100000005);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
    u_xlat30 = dot(u_xlat1.xyz, (-u_xlat2.xyz));
    u_xlat31 = dot(u_xlat1.xyz, u_xlat3.xyz);
    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat10.x = u_xlat0.x * u_xlat0.x;
    u_xlat10.x = dot(u_xlat10.xx, u_xlat7.xx);
    u_xlat10.x = u_xlat10.x + -0.5;
    u_xlat20 = (-u_xlat31) + 1.0;
    u_xlat11 = u_xlat20 * u_xlat20;
    u_xlat11 = u_xlat11 * u_xlat11;
    u_xlat20 = u_xlat20 * u_xlat11;
    u_xlat20 = u_xlat10.x * u_xlat20 + 1.0;
    u_xlat11 = -abs(u_xlat30) + 1.0;
    u_xlat21 = u_xlat11 * u_xlat11;
    u_xlat21 = u_xlat21 * u_xlat21;
    u_xlat11 = u_xlat11 * u_xlat21;
    u_xlat10.x = u_xlat10.x * u_xlat11 + 1.0;
    u_xlat10.x = u_xlat10.x * u_xlat20;
    u_xlat20 = u_xlat7.x * u_xlat7.x;
    u_xlat20 = max(u_xlat20, 0.00200000009);
    u_xlat11 = (-u_xlat20) + 1.0;
    u_xlat21 = abs(u_xlat30) * u_xlat11 + u_xlat20;
    u_xlat11 = u_xlat31 * u_xlat11 + u_xlat20;
    u_xlat30 = abs(u_xlat30) * u_xlat11;
    u_xlat30 = u_xlat31 * u_xlat21 + u_xlat30;
    u_xlat30 = u_xlat30 + 9.99999975e-06;
    u_xlat30 = 0.5 / u_xlat30;
    u_xlat20 = u_xlat20 * u_xlat20;
    u_xlat11 = u_xlat1.x * u_xlat20 + (-u_xlat1.x);
    u_xlat1.x = u_xlat11 * u_xlat1.x + 1.0;
    u_xlat20 = u_xlat20 * 0.318309873;
    u_xlat1.x = u_xlat1.x * u_xlat1.x + 1.00000001e-07;
    u_xlat20 = u_xlat20 / u_xlat1.x;
    u_xlat20 = u_xlat20 * u_xlat30;
    u_xlat10.y = u_xlat20 * 3.14159274;
    u_xlat10.xy = vec2(u_xlat31) * u_xlat10.xy;
    u_xlat20 = max(u_xlat10.y, 0.0);
    u_xlat30 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlatb30 = u_xlat30!=0.0;
    u_xlat30 = u_xlatb30 ? 1.0 : float(0.0);
    u_xlat20 = u_xlat30 * u_xlat20;
    u_xlat1.xyz = u_xlat10.xxx * u_xlat4.xyz;
    u_xlat10.xyz = u_xlat4.xyz * vec3(u_xlat20);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat31 = u_xlat0.x * u_xlat0.x;
    u_xlat31 = u_xlat31 * u_xlat31;
    u_xlat0.x = u_xlat0.x * u_xlat31;
    u_xlat2.xyz = u_xlat7.yzw * u_xlat0.xxx + u_xlat6.xyz;
    u_xlat0.xyz = u_xlat10.xyz * u_xlat2.xyz;
    u_xlat0.xyz = u_xlat5.xyz * u_xlat1.xyz + u_xlat0.xyz;
    u_xlat0.w = 1.0;
    SV_Target0 = exp2((-u_xlat0));
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "SHADOWS_DEPTH" "SHADOWS_SOFT" "SPOT" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 192
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %80 %102 %169 %175 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpMemberDecorate %78 0 BuiltIn 78 
                                                      OpMemberDecorate %78 1 BuiltIn 78 
                                                      OpMemberDecorate %78 2 BuiltIn 78 
                                                      OpDecorate %78 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 102 
                                                      OpDecorate %169 Location 169 
                                                      OpDecorate vs_TEXCOORD1 Location 175 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %16 %17 %18 %6 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 1 
                                              %24 = OpTypePointer Uniform %7 
                                          i32 %28 = OpConstant 0 
                                          i32 %36 = OpConstant 2 
                                          i32 %45 = OpConstant 3 
                               Private f32_4* %49 = OpVariable Private 
                                          u32 %76 = OpConstant 1 
                                              %77 = OpTypeArray %6 %76 
                                              %78 = OpTypeStruct %7 %6 %77 
                                              %79 = OpTypePointer Output %78 
         Output struct {f32_4; f32; f32[1];}* %80 = OpVariable Output 
                                              %82 = OpTypePointer Output %7 
                                              %84 = OpTypePointer Private %6 
                                          u32 %87 = OpConstant 0 
                                              %88 = OpTypePointer Uniform %6 
                               Private f32_4* %93 = OpVariable Private 
                                              %94 = OpTypeVector %6 3 
                                          f32 %97 = OpConstant 3.674022E-40 
                                        f32_3 %98 = OpConstantComposite %97 %97 %97 
                       Output f32_4* vs_TEXCOORD0 = OpVariable Output 
                                             %103 = OpTypeVector %6 2 
                                         f32 %158 = OpConstant 3.674022E-40 
                                         f32 %159 = OpConstant 3.674022E-40 
                                       f32_3 %160 = OpConstantComposite %158 %158 %159 
                                             %168 = OpTypePointer Input %94 
                                Input f32_3* %169 = OpVariable Input 
                                             %174 = OpTypePointer Output %94 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                                         i32 %176 = OpConstant 4 
                                             %186 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %25 = OpAccessChain %21 %23 %23 
                                        f32_4 %26 = OpLoad %25 
                                        f32_4 %27 = OpFMul %13 %26 
                                                      OpStore %9 %27 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %28 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %44 = OpLoad %9 
                               Uniform f32_4* %46 = OpAccessChain %21 %23 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_4 %48 = OpFAdd %44 %47 
                                                      OpStore %9 %48 
                                        f32_4 %50 = OpLoad %9 
                                        f32_4 %51 = OpVectorShuffle %50 %50 1 1 1 1 
                               Uniform f32_4* %52 = OpAccessChain %21 %45 %23 
                                        f32_4 %53 = OpLoad %52 
                                        f32_4 %54 = OpFMul %51 %53 
                                                      OpStore %49 %54 
                               Uniform f32_4* %55 = OpAccessChain %21 %45 %28 
                                        f32_4 %56 = OpLoad %55 
                                        f32_4 %57 = OpLoad %9 
                                        f32_4 %58 = OpVectorShuffle %57 %57 0 0 0 0 
                                        f32_4 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %49 
                                        f32_4 %61 = OpFAdd %59 %60 
                                                      OpStore %49 %61 
                               Uniform f32_4* %62 = OpAccessChain %21 %45 %36 
                                        f32_4 %63 = OpLoad %62 
                                        f32_4 %64 = OpLoad %9 
                                        f32_4 %65 = OpVectorShuffle %64 %64 2 2 2 2 
                                        f32_4 %66 = OpFMul %63 %65 
                                        f32_4 %67 = OpLoad %49 
                                        f32_4 %68 = OpFAdd %66 %67 
                                                      OpStore %49 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %45 %45 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %9 
                                        f32_4 %72 = OpVectorShuffle %71 %71 3 3 3 3 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %49 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %49 %75 
                                        f32_4 %81 = OpLoad %49 
                                Output f32_4* %83 = OpAccessChain %80 %28 
                                                      OpStore %83 %81 
                                 Private f32* %85 = OpAccessChain %49 %76 
                                          f32 %86 = OpLoad %85 
                                 Uniform f32* %89 = OpAccessChain %21 %28 %87 
                                          f32 %90 = OpLoad %89 
                                          f32 %91 = OpFMul %86 %90 
                                 Private f32* %92 = OpAccessChain %49 %76 
                                                      OpStore %92 %91 
                                        f32_4 %95 = OpLoad %49 
                                        f32_3 %96 = OpVectorShuffle %95 %95 0 3 1 
                                        f32_3 %99 = OpFMul %96 %98 
                                       f32_4 %100 = OpLoad %93 
                                       f32_4 %101 = OpVectorShuffle %100 %99 4 1 5 6 
                                                      OpStore %93 %101 
                                       f32_4 %104 = OpLoad %49 
                                       f32_2 %105 = OpVectorShuffle %104 %104 2 3 
                                       f32_4 %106 = OpLoad vs_TEXCOORD0 
                                       f32_4 %107 = OpVectorShuffle %106 %105 0 1 4 5 
                                                      OpStore vs_TEXCOORD0 %107 
                                       f32_4 %108 = OpLoad %93 
                                       f32_2 %109 = OpVectorShuffle %108 %108 2 2 
                                       f32_4 %110 = OpLoad %93 
                                       f32_2 %111 = OpVectorShuffle %110 %110 0 3 
                                       f32_2 %112 = OpFAdd %109 %111 
                                       f32_4 %113 = OpLoad vs_TEXCOORD0 
                                       f32_4 %114 = OpVectorShuffle %113 %112 4 5 2 3 
                                                      OpStore vs_TEXCOORD0 %114 
                                       f32_4 %115 = OpLoad %9 
                                       f32_3 %116 = OpVectorShuffle %115 %115 1 1 1 
                              Uniform f32_4* %117 = OpAccessChain %21 %36 %23 
                                       f32_4 %118 = OpLoad %117 
                                       f32_3 %119 = OpVectorShuffle %118 %118 0 1 2 
                                       f32_3 %120 = OpFMul %116 %119 
                                       f32_4 %121 = OpLoad %49 
                                       f32_4 %122 = OpVectorShuffle %121 %120 4 5 6 3 
                                                      OpStore %49 %122 
                              Uniform f32_4* %123 = OpAccessChain %21 %36 %28 
                                       f32_4 %124 = OpLoad %123 
                                       f32_3 %125 = OpVectorShuffle %124 %124 0 1 2 
                                       f32_4 %126 = OpLoad %9 
                                       f32_3 %127 = OpVectorShuffle %126 %126 0 0 0 
                                       f32_3 %128 = OpFMul %125 %127 
                                       f32_4 %129 = OpLoad %49 
                                       f32_3 %130 = OpVectorShuffle %129 %129 0 1 2 
                                       f32_3 %131 = OpFAdd %128 %130 
                                       f32_4 %132 = OpLoad %49 
                                       f32_4 %133 = OpVectorShuffle %132 %131 4 5 6 3 
                                                      OpStore %49 %133 
                              Uniform f32_4* %134 = OpAccessChain %21 %36 %36 
                                       f32_4 %135 = OpLoad %134 
                                       f32_3 %136 = OpVectorShuffle %135 %135 0 1 2 
                                       f32_4 %137 = OpLoad %9 
                                       f32_3 %138 = OpVectorShuffle %137 %137 2 2 2 
                                       f32_3 %139 = OpFMul %136 %138 
                                       f32_4 %140 = OpLoad %49 
                                       f32_3 %141 = OpVectorShuffle %140 %140 0 1 2 
                                       f32_3 %142 = OpFAdd %139 %141 
                                       f32_4 %143 = OpLoad %9 
                                       f32_4 %144 = OpVectorShuffle %143 %142 4 5 6 3 
                                                      OpStore %9 %144 
                              Uniform f32_4* %145 = OpAccessChain %21 %36 %45 
                                       f32_4 %146 = OpLoad %145 
                                       f32_3 %147 = OpVectorShuffle %146 %146 0 1 2 
                                       f32_4 %148 = OpLoad %9 
                                       f32_3 %149 = OpVectorShuffle %148 %148 3 3 3 
                                       f32_3 %150 = OpFMul %147 %149 
                                       f32_4 %151 = OpLoad %9 
                                       f32_3 %152 = OpVectorShuffle %151 %151 0 1 2 
                                       f32_3 %153 = OpFAdd %150 %152 
                                       f32_4 %154 = OpLoad %9 
                                       f32_4 %155 = OpVectorShuffle %154 %153 4 5 6 3 
                                                      OpStore %9 %155 
                                       f32_4 %156 = OpLoad %9 
                                       f32_3 %157 = OpVectorShuffle %156 %156 0 1 2 
                                       f32_3 %161 = OpFMul %157 %160 
                                       f32_4 %162 = OpLoad %49 
                                       f32_4 %163 = OpVectorShuffle %162 %161 4 5 6 3 
                                                      OpStore %49 %163 
                                       f32_4 %164 = OpLoad %9 
                                       f32_3 %165 = OpVectorShuffle %164 %164 0 1 2 
                                       f32_3 %166 = OpFNegate %165 
                                       f32_3 %167 = OpFMul %166 %160 
                                       f32_3 %170 = OpLoad %169 
                                       f32_3 %171 = OpFAdd %167 %170 
                                       f32_4 %172 = OpLoad %9 
                                       f32_4 %173 = OpVectorShuffle %172 %171 4 5 6 3 
                                                      OpStore %9 %173 
                                Uniform f32* %177 = OpAccessChain %21 %176 
                                         f32 %178 = OpLoad %177 
                                       f32_3 %179 = OpCompositeConstruct %178 %178 %178 
                                       f32_4 %180 = OpLoad %9 
                                       f32_3 %181 = OpVectorShuffle %180 %180 0 1 2 
                                       f32_3 %182 = OpFMul %179 %181 
                                       f32_4 %183 = OpLoad %49 
                                       f32_3 %184 = OpVectorShuffle %183 %183 0 1 2 
                                       f32_3 %185 = OpFAdd %182 %184 
                                                      OpStore vs_TEXCOORD1 %185 
                                 Output f32* %187 = OpAccessChain %80 %28 %76 
                                         f32 %188 = OpLoad %187 
                                         f32 %189 = OpFNegate %188 
                                 Output f32* %190 = OpAccessChain %80 %28 %76 
                                                      OpStore %190 %189 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 980
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %27 %44 %975 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpDecorate %13 ArrayStride 13 
                                                      OpDecorate %15 ArrayStride 15 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpMemberDecorate %17 0 Offset 17 
                                                      OpMemberDecorate %17 1 Offset 17 
                                                      OpMemberDecorate %17 2 Offset 17 
                                                      OpMemberDecorate %17 3 Offset 17 
                                                      OpMemberDecorate %17 4 Offset 17 
                                                      OpMemberDecorate %17 5 Offset 17 
                                                      OpMemberDecorate %17 6 Offset 17 
                                                      OpMemberDecorate %17 7 Offset 17 
                                                      OpMemberDecorate %17 8 Offset 17 
                                                      OpMemberDecorate %17 9 Offset 17 
                                                      OpMemberDecorate %17 10 Offset 17 
                                                      OpDecorate %17 Block 
                                                      OpDecorate %19 DescriptorSet 19 
                                                      OpDecorate %19 Binding 19 
                                                      OpDecorate vs_TEXCOORD1 Location 27 
                                                      OpDecorate vs_TEXCOORD0 Location 44 
                                                      OpDecorate %56 DescriptorSet 56 
                                                      OpDecorate %56 Binding 56 
                                                      OpDecorate %60 DescriptorSet 60 
                                                      OpDecorate %60 Binding 60 
                                                      OpDecorate %230 DescriptorSet 230 
                                                      OpDecorate %230 Binding 230 
                                                      OpDecorate %232 DescriptorSet 232 
                                                      OpDecorate %232 Binding 232 
                                                      OpDecorate %257 DescriptorSet 257 
                                                      OpDecorate %257 Binding 257 
                                                      OpDecorate %259 DescriptorSet 259 
                                                      OpDecorate %259 Binding 259 
                                                      OpDecorate %511 DescriptorSet 511 
                                                      OpDecorate %511 Binding 511 
                                                      OpDecorate %513 DescriptorSet 513 
                                                      OpDecorate %513 Binding 513 
                                                      OpDecorate %629 DescriptorSet 629 
                                                      OpDecorate %629 Binding 629 
                                                      OpDecorate %631 DescriptorSet 631 
                                                      OpDecorate %631 Binding 631 
                                                      OpDecorate %640 DescriptorSet 640 
                                                      OpDecorate %640 Binding 640 
                                                      OpDecorate %642 DescriptorSet 642 
                                                      OpDecorate %642 Binding 642 
                                                      OpDecorate %648 DescriptorSet 648 
                                                      OpDecorate %648 Binding 648 
                                                      OpDecorate %650 DescriptorSet 650 
                                                      OpDecorate %650 Binding 650 
                                                      OpDecorate %975 Location 975 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 3 
                                              %11 = OpTypeInt 32 0 
                                          u32 %12 = OpConstant 4 
                                              %13 = OpTypeArray %7 %12 
                                          u32 %14 = OpConstant 16 
                                              %15 = OpTypeArray %7 %14 
                                              %16 = OpTypeArray %7 %12 
                                              %17 = OpTypeStruct %10 %7 %7 %13 %15 %7 %7 %7 %7 %16 %7 
                                              %18 = OpTypePointer Uniform %17 
Uniform struct {f32_3; f32_4; f32_4; f32_4[4]; f32_4[16]; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4;}* %19 = OpVariable Uniform 
                                              %20 = OpTypeInt 32 1 
                                          i32 %21 = OpConstant 1 
                                          u32 %22 = OpConstant 2 
                                              %23 = OpTypePointer Uniform %6 
                                              %26 = OpTypePointer Input %10 
                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                                              %28 = OpTypePointer Input %6 
                                          u32 %32 = OpConstant 0 
                                              %33 = OpTypePointer Private %6 
                                              %41 = OpTypePointer Private %10 
                               Private f32_3* %42 = OpVariable Private 
                                              %43 = OpTypePointer Input %7 
                        Input f32_4* vs_TEXCOORD0 = OpVariable Input 
                                              %45 = OpTypeVector %6 2 
                                 Private f32* %53 = OpVariable Private 
                                              %54 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %55 = OpTypePointer UniformConstant %54 
         UniformConstant read_only Texture2D* %56 = OpVariable UniformConstant 
                                              %58 = OpTypeSampler 
                                              %59 = OpTypePointer UniformConstant %58 
                     UniformConstant sampler* %60 = OpVariable UniformConstant 
                                              %62 = OpTypeSampledImage %54 
                                          i32 %68 = OpConstant 2 
                                          u32 %73 = OpConstant 1 
                                          f32 %77 = OpConstant 3.674022E-40 
                               Private f32_4* %80 = OpVariable Private 
                               Private f32_3* %88 = OpVariable Private 
                                          i32 %91 = OpConstant 3 
                                              %92 = OpTypePointer Uniform %7 
                                          i32 %97 = OpConstant 0 
                                         i32 %129 = OpConstant 6 
                                         u32 %152 = OpConstant 3 
                              Private f32_3* %162 = OpVariable Private 
                                         i32 %166 = OpConstant 7 
                                Private f32* %171 = OpVariable Private 
                                Private f32* %175 = OpVariable Private 
                              Private f32_4* %182 = OpVariable Private 
                                         i32 %185 = OpConstant 9 
                                Private f32* %229 = OpVariable Private 
        UniformConstant read_only Texture2D* %230 = OpVariable UniformConstant 
                    UniformConstant sampler* %232 = OpVariable UniformConstant 
                                         f32 %237 = OpConstant 3.674022E-40 
                                             %240 = OpTypeBool 
                                             %241 = OpTypePointer Private %240 
                               Private bool* %242 = OpVariable Private 
                                         f32 %245 = OpConstant 3.674022E-40 
                                Private f32* %247 = OpVariable Private 
        UniformConstant read_only Texture2D* %257 = OpVariable UniformConstant 
                    UniformConstant sampler* %259 = OpVariable UniformConstant 
                                         i32 %271 = OpConstant 5 
                               Private bool* %283 = OpVariable Private 
                                         f32 %286 = OpConstant 3.674022E-40 
                                         i32 %293 = OpConstant 4 
                              Private f32_4* %322 = OpVariable Private 
                                         i32 %325 = OpConstant 10 
                                         f32 %330 = OpConstant 3.674022E-40 
                                       f32_2 %331 = OpConstantComposite %330 %330 
                              Private f32_4* %352 = OpVariable Private 
                                       f32_4 %355 = OpConstantComposite %330 %77 %330 %77 
                              Private f32_4* %357 = OpVariable Private 
                                             %365 = OpTypePointer Private %45 
                              Private f32_2* %366 = OpVariable Private 
                                       f32_2 %377 = OpConstantComposite %77 %77 
                              Private f32_4* %381 = OpVariable Private 
                                       f32_2 %384 = OpConstantComposite %245 %245 
                                         f32 %428 = OpConstant 3.674022E-40 
                                         f32 %429 = OpConstant 3.674022E-40 
                                       f32_4 %430 = OpConstantComposite %428 %428 %428 %429 
                              Private f32_4* %448 = OpVariable Private 
                                         f32 %463 = OpConstant 3.674022E-40 
                                       f32_2 %464 = OpConstantComposite %463 %330 
                                             %502 = OpTypePointer Function %10 
        UniformConstant read_only Texture2D* %511 = OpVariable UniformConstant 
                    UniformConstant sampler* %513 = OpVariable UniformConstant 
                                             %515 = OpTypeImage %6 Dim2D 1 0 0 1 Unknown 
                                             %516 = OpTypeSampledImage %515 
                                         i32 %622 = OpConstant 8 
        UniformConstant read_only Texture2D* %629 = OpVariable UniformConstant 
                    UniformConstant sampler* %631 = OpVariable UniformConstant 
        UniformConstant read_only Texture2D* %640 = OpVariable UniformConstant 
                    UniformConstant sampler* %642 = OpVariable UniformConstant 
        UniformConstant read_only Texture2D* %648 = OpVariable UniformConstant 
                    UniformConstant sampler* %650 = OpVariable UniformConstant 
                                         f32 %658 = OpConstant 3.674022E-40 
                                       f32_3 %659 = OpConstantComposite %658 %658 %658 
                                         f32 %661 = OpConstant 3.674022E-40 
                                       f32_3 %662 = OpConstantComposite %661 %661 %661 
                                             %678 = OpTypePointer Uniform %10 
                                       f32_4 %705 = OpConstantComposite %77 %77 %77 %77 
                                         f32 %723 = OpConstant 3.674022E-40 
                                         f32 %776 = OpConstant 3.674022E-40 
                                Private f32* %779 = OpVariable Private 
                                Private f32* %783 = OpVariable Private 
                                         f32 %828 = OpConstant 3.674022E-40 
                                         f32 %854 = OpConstant 3.674022E-40 
                                         f32 %876 = OpConstant 3.674022E-40 
                                         f32 %883 = OpConstant 3.674022E-40 
                                         f32 %903 = OpConstant 3.674022E-40 
                               Private bool* %912 = OpVariable Private 
                                             %974 = OpTypePointer Output %7 
                               Output f32_4* %975 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %503 = OpVariable Function 
                             Function f32_3* %521 = OpVariable Function 
                             Function f32_3* %554 = OpVariable Function 
                             Function f32_3* %574 = OpVariable Function 
                                 Uniform f32* %24 = OpAccessChain %19 %21 %22 
                                          f32 %25 = OpLoad %24 
                                   Input f32* %29 = OpAccessChain vs_TEXCOORD1 %22 
                                          f32 %30 = OpLoad %29 
                                          f32 %31 = OpFDiv %25 %30 
                                 Private f32* %34 = OpAccessChain %9 %32 
                                                      OpStore %34 %31 
                                        f32_4 %35 = OpLoad %9 
                                        f32_3 %36 = OpVectorShuffle %35 %35 0 0 0 
                                        f32_3 %37 = OpLoad vs_TEXCOORD1 
                                        f32_3 %38 = OpFMul %36 %37 
                                        f32_4 %39 = OpLoad %9 
                                        f32_4 %40 = OpVectorShuffle %39 %38 4 5 6 3 
                                                      OpStore %9 %40 
                                        f32_4 %46 = OpLoad vs_TEXCOORD0 
                                        f32_2 %47 = OpVectorShuffle %46 %46 0 1 
                                        f32_4 %48 = OpLoad vs_TEXCOORD0 
                                        f32_2 %49 = OpVectorShuffle %48 %48 3 3 
                                        f32_2 %50 = OpFDiv %47 %49 
                                        f32_3 %51 = OpLoad %42 
                                        f32_3 %52 = OpVectorShuffle %51 %50 3 4 2 
                                                      OpStore %42 %52 
                          read_only Texture2D %57 = OpLoad %56 
                                      sampler %61 = OpLoad %60 
                   read_only Texture2DSampled %63 = OpSampledImage %57 %61 
                                        f32_3 %64 = OpLoad %42 
                                        f32_2 %65 = OpVectorShuffle %64 %64 0 1 
                                        f32_4 %66 = OpImageSampleImplicitLod %63 %65 
                                          f32 %67 = OpCompositeExtract %66 0 
                                                      OpStore %53 %67 
                                 Uniform f32* %69 = OpAccessChain %19 %68 %32 
                                          f32 %70 = OpLoad %69 
                                          f32 %71 = OpLoad %53 
                                          f32 %72 = OpFMul %70 %71 
                                 Uniform f32* %74 = OpAccessChain %19 %68 %73 
                                          f32 %75 = OpLoad %74 
                                          f32 %76 = OpFAdd %72 %75 
                                                      OpStore %53 %76 
                                          f32 %78 = OpLoad %53 
                                          f32 %79 = OpFDiv %77 %78 
                                                      OpStore %53 %79 
                                          f32 %81 = OpLoad %53 
                                        f32_3 %82 = OpCompositeConstruct %81 %81 %81 
                                        f32_4 %83 = OpLoad %9 
                                        f32_3 %84 = OpVectorShuffle %83 %83 0 1 2 
                                        f32_3 %85 = OpFMul %82 %84 
                                        f32_4 %86 = OpLoad %80 
                                        f32_4 %87 = OpVectorShuffle %86 %85 4 5 6 3 
                                                      OpStore %80 %87 
                                        f32_4 %89 = OpLoad %80 
                                        f32_3 %90 = OpVectorShuffle %89 %89 1 1 1 
                               Uniform f32_4* %93 = OpAccessChain %19 %91 %21 
                                        f32_4 %94 = OpLoad %93 
                                        f32_3 %95 = OpVectorShuffle %94 %94 0 1 2 
                                        f32_3 %96 = OpFMul %90 %95 
                                                      OpStore %88 %96 
                               Uniform f32_4* %98 = OpAccessChain %19 %91 %97 
                                        f32_4 %99 = OpLoad %98 
                                       f32_3 %100 = OpVectorShuffle %99 %99 0 1 2 
                                       f32_4 %101 = OpLoad %80 
                                       f32_3 %102 = OpVectorShuffle %101 %101 0 0 0 
                                       f32_3 %103 = OpFMul %100 %102 
                                       f32_3 %104 = OpLoad %88 
                                       f32_3 %105 = OpFAdd %103 %104 
                                       f32_4 %106 = OpLoad %80 
                                       f32_4 %107 = OpVectorShuffle %106 %105 4 5 2 6 
                                                      OpStore %80 %107 
                              Uniform f32_4* %108 = OpAccessChain %19 %91 %68 
                                       f32_4 %109 = OpLoad %108 
                                       f32_3 %110 = OpVectorShuffle %109 %109 0 1 2 
                                       f32_4 %111 = OpLoad %80 
                                       f32_3 %112 = OpVectorShuffle %111 %111 2 2 2 
                                       f32_3 %113 = OpFMul %110 %112 
                                       f32_4 %114 = OpLoad %80 
                                       f32_3 %115 = OpVectorShuffle %114 %114 0 1 3 
                                       f32_3 %116 = OpFAdd %113 %115 
                                       f32_4 %117 = OpLoad %80 
                                       f32_4 %118 = OpVectorShuffle %117 %116 4 5 2 6 
                                                      OpStore %80 %118 
                                       f32_4 %119 = OpLoad %80 
                                       f32_3 %120 = OpVectorShuffle %119 %119 0 1 3 
                              Uniform f32_4* %121 = OpAccessChain %19 %91 %91 
                                       f32_4 %122 = OpLoad %121 
                                       f32_3 %123 = OpVectorShuffle %122 %122 0 1 2 
                                       f32_3 %124 = OpFAdd %120 %123 
                                       f32_4 %125 = OpLoad %80 
                                       f32_4 %126 = OpVectorShuffle %125 %124 4 5 2 6 
                                                      OpStore %80 %126 
                                       f32_4 %127 = OpLoad %80 
                                       f32_3 %128 = OpVectorShuffle %127 %127 0 1 3 
                              Uniform f32_4* %130 = OpAccessChain %19 %129 
                                       f32_4 %131 = OpLoad %130 
                                       f32_3 %132 = OpVectorShuffle %131 %131 0 1 2 
                                       f32_3 %133 = OpFNegate %132 
                                       f32_3 %134 = OpFAdd %128 %133 
                                                      OpStore %88 %134 
                                       f32_3 %135 = OpLoad %88 
                                       f32_3 %136 = OpLoad %88 
                                         f32 %137 = OpDot %135 %136 
                                Private f32* %138 = OpAccessChain %9 %32 
                                                      OpStore %138 %137 
                                Private f32* %139 = OpAccessChain %9 %32 
                                         f32 %140 = OpLoad %139 
                                         f32 %141 = OpExtInst %1 31 %140 
                                Private f32* %142 = OpAccessChain %9 %32 
                                                      OpStore %142 %141 
                                Private f32* %143 = OpAccessChain %9 %22 
                                         f32 %144 = OpLoad %143 
                                         f32 %145 = OpFNegate %144 
                                         f32 %146 = OpLoad %53 
                                         f32 %147 = OpFMul %145 %146 
                                Private f32* %148 = OpAccessChain %9 %32 
                                         f32 %149 = OpLoad %148 
                                         f32 %150 = OpFAdd %147 %149 
                                Private f32* %151 = OpAccessChain %9 %32 
                                                      OpStore %151 %150 
                                Uniform f32* %153 = OpAccessChain %19 %129 %152 
                                         f32 %154 = OpLoad %153 
                                Private f32* %155 = OpAccessChain %9 %32 
                                         f32 %156 = OpLoad %155 
                                         f32 %157 = OpFMul %154 %156 
                                Private f32* %158 = OpAccessChain %80 %22 
                                         f32 %159 = OpLoad %158 
                                         f32 %160 = OpFAdd %157 %159 
                                Private f32* %161 = OpAccessChain %9 %32 
                                                      OpStore %161 %160 
                                       f32_4 %163 = OpLoad %80 
                                       f32_3 %164 = OpVectorShuffle %163 %163 0 1 3 
                                       f32_3 %165 = OpFNegate %164 
                              Uniform f32_4* %167 = OpAccessChain %19 %166 
                                       f32_4 %168 = OpLoad %167 
                                       f32_3 %169 = OpVectorShuffle %168 %168 0 1 2 
                                       f32_3 %170 = OpFAdd %165 %169 
                                                      OpStore %162 %170 
                                       f32_3 %172 = OpLoad %162 
                                       f32_3 %173 = OpLoad %162 
                                         f32 %174 = OpDot %172 %173 
                                                      OpStore %171 %174 
                                         f32 %176 = OpLoad %171 
                                         f32 %177 = OpExtInst %1 32 %176 
                                                      OpStore %175 %177 
                                       f32_3 %178 = OpLoad %162 
                                         f32 %179 = OpLoad %175 
                                       f32_3 %180 = OpCompositeConstruct %179 %179 %179 
                                       f32_3 %181 = OpFMul %178 %180 
                                                      OpStore %88 %181 
                                       f32_4 %183 = OpLoad %80 
                                       f32_3 %184 = OpVectorShuffle %183 %183 1 1 1 
                              Uniform f32_4* %186 = OpAccessChain %19 %185 %21 
                                       f32_4 %187 = OpLoad %186 
                                       f32_3 %188 = OpVectorShuffle %187 %187 0 1 3 
                                       f32_3 %189 = OpFMul %184 %188 
                                       f32_4 %190 = OpLoad %182 
                                       f32_4 %191 = OpVectorShuffle %190 %189 4 5 6 3 
                                                      OpStore %182 %191 
                              Uniform f32_4* %192 = OpAccessChain %19 %185 %97 
                                       f32_4 %193 = OpLoad %192 
                                       f32_3 %194 = OpVectorShuffle %193 %193 0 1 3 
                                       f32_4 %195 = OpLoad %80 
                                       f32_3 %196 = OpVectorShuffle %195 %195 0 0 0 
                                       f32_3 %197 = OpFMul %194 %196 
                                       f32_4 %198 = OpLoad %182 
                                       f32_3 %199 = OpVectorShuffle %198 %198 0 1 2 
                                       f32_3 %200 = OpFAdd %197 %199 
                                       f32_4 %201 = OpLoad %182 
                                       f32_4 %202 = OpVectorShuffle %201 %200 4 5 6 3 
                                                      OpStore %182 %202 
                              Uniform f32_4* %203 = OpAccessChain %19 %185 %68 
                                       f32_4 %204 = OpLoad %203 
                                       f32_3 %205 = OpVectorShuffle %204 %204 0 1 3 
                                       f32_4 %206 = OpLoad %80 
                                       f32_3 %207 = OpVectorShuffle %206 %206 3 3 3 
                                       f32_3 %208 = OpFMul %205 %207 
                                       f32_4 %209 = OpLoad %182 
                                       f32_3 %210 = OpVectorShuffle %209 %209 0 1 2 
                                       f32_3 %211 = OpFAdd %208 %210 
                                       f32_4 %212 = OpLoad %182 
                                       f32_4 %213 = OpVectorShuffle %212 %211 4 5 6 3 
                                                      OpStore %182 %213 
                                       f32_4 %214 = OpLoad %182 
                                       f32_3 %215 = OpVectorShuffle %214 %214 0 1 2 
                              Uniform f32_4* %216 = OpAccessChain %19 %185 %91 
                                       f32_4 %217 = OpLoad %216 
                                       f32_3 %218 = OpVectorShuffle %217 %217 0 1 3 
                                       f32_3 %219 = OpFAdd %215 %218 
                                       f32_4 %220 = OpLoad %182 
                                       f32_4 %221 = OpVectorShuffle %220 %219 4 5 6 3 
                                                      OpStore %182 %221 
                                       f32_4 %222 = OpLoad %182 
                                       f32_2 %223 = OpVectorShuffle %222 %222 0 1 
                                       f32_4 %224 = OpLoad %182 
                                       f32_2 %225 = OpVectorShuffle %224 %224 2 2 
                                       f32_2 %226 = OpFDiv %223 %225 
                                       f32_4 %227 = OpLoad %182 
                                       f32_4 %228 = OpVectorShuffle %227 %226 4 5 2 3 
                                                      OpStore %182 %228 
                         read_only Texture2D %231 = OpLoad %230 
                                     sampler %233 = OpLoad %232 
                  read_only Texture2DSampled %234 = OpSampledImage %231 %233 
                                       f32_4 %235 = OpLoad %182 
                                       f32_2 %236 = OpVectorShuffle %235 %235 0 1 
                                       f32_4 %238 = OpImageSampleImplicitLod %234 %236 Bias %7 
                                         f32 %239 = OpCompositeExtract %238 3 
                                                      OpStore %229 %239 
                                Private f32* %243 = OpAccessChain %182 %22 
                                         f32 %244 = OpLoad %243 
                                        bool %246 = OpFOrdLessThan %244 %245 
                                                      OpStore %242 %246 
                                        bool %248 = OpLoad %242 
                                         f32 %249 = OpSelect %248 %77 %245 
                                                      OpStore %247 %249 
                                         f32 %250 = OpLoad %229 
                                         f32 %251 = OpLoad %247 
                                         f32 %252 = OpFMul %250 %251 
                                                      OpStore %229 %252 
                                         f32 %253 = OpLoad %171 
                                Uniform f32* %254 = OpAccessChain %19 %166 %152 
                                         f32 %255 = OpLoad %254 
                                         f32 %256 = OpFMul %253 %255 
                                                      OpStore %171 %256 
                         read_only Texture2D %258 = OpLoad %257 
                                     sampler %260 = OpLoad %259 
                  read_only Texture2DSampled %261 = OpSampledImage %258 %260 
                                         f32 %262 = OpLoad %171 
                                       f32_2 %263 = OpCompositeConstruct %262 %262 
                                       f32_4 %264 = OpImageSampleImplicitLod %261 %263 
                                         f32 %265 = OpCompositeExtract %264 0 
                                                      OpStore %171 %265 
                                         f32 %266 = OpLoad %171 
                                         f32 %267 = OpLoad %229 
                                         f32 %268 = OpFMul %266 %267 
                                                      OpStore %171 %268 
                                Private f32* %269 = OpAccessChain %9 %32 
                                         f32 %270 = OpLoad %269 
                                Uniform f32* %272 = OpAccessChain %19 %271 %22 
                                         f32 %273 = OpLoad %272 
                                         f32 %274 = OpFMul %270 %273 
                                Uniform f32* %275 = OpAccessChain %19 %271 %152 
                                         f32 %276 = OpLoad %275 
                                         f32 %277 = OpFAdd %274 %276 
                                Private f32* %278 = OpAccessChain %9 %32 
                                                      OpStore %278 %277 
                                Private f32* %279 = OpAccessChain %9 %32 
                                         f32 %280 = OpLoad %279 
                                         f32 %281 = OpExtInst %1 43 %280 %245 %77 
                                Private f32* %282 = OpAccessChain %9 %32 
                                                      OpStore %282 %281 
                                Private f32* %284 = OpAccessChain %9 %32 
                                         f32 %285 = OpLoad %284 
                                        bool %287 = OpFOrdLessThan %285 %286 
                                                      OpStore %283 %287 
                                        bool %288 = OpLoad %283 
                                                      OpSelectionMerge %290 None 
                                                      OpBranchConditional %288 %289 %604 
                                             %289 = OpLabel 
                                       f32_4 %291 = OpLoad %80 
                                       f32_4 %292 = OpVectorShuffle %291 %291 1 1 1 1 
                              Uniform f32_4* %294 = OpAccessChain %19 %293 %21 
                                       f32_4 %295 = OpLoad %294 
                                       f32_4 %296 = OpFMul %292 %295 
                                                      OpStore %182 %296 
                              Uniform f32_4* %297 = OpAccessChain %19 %293 %97 
                                       f32_4 %298 = OpLoad %297 
                                       f32_4 %299 = OpLoad %80 
                                       f32_4 %300 = OpVectorShuffle %299 %299 0 0 0 0 
                                       f32_4 %301 = OpFMul %298 %300 
                                       f32_4 %302 = OpLoad %182 
                                       f32_4 %303 = OpFAdd %301 %302 
                                                      OpStore %182 %303 
                              Uniform f32_4* %304 = OpAccessChain %19 %293 %68 
                                       f32_4 %305 = OpLoad %304 
                                       f32_4 %306 = OpLoad %80 
                                       f32_4 %307 = OpVectorShuffle %306 %306 3 3 3 3 
                                       f32_4 %308 = OpFMul %305 %307 
                                       f32_4 %309 = OpLoad %182 
                                       f32_4 %310 = OpFAdd %308 %309 
                                                      OpStore %182 %310 
                                       f32_4 %311 = OpLoad %182 
                              Uniform f32_4* %312 = OpAccessChain %19 %293 %91 
                                       f32_4 %313 = OpLoad %312 
                                       f32_4 %314 = OpFAdd %311 %313 
                                                      OpStore %182 %314 
                                       f32_4 %315 = OpLoad %182 
                                       f32_3 %316 = OpVectorShuffle %315 %315 0 1 2 
                                       f32_4 %317 = OpLoad %182 
                                       f32_3 %318 = OpVectorShuffle %317 %317 3 3 3 
                                       f32_3 %319 = OpFDiv %316 %318 
                                       f32_4 %320 = OpLoad %182 
                                       f32_4 %321 = OpVectorShuffle %320 %319 4 5 6 3 
                                                      OpStore %182 %321 
                                       f32_4 %323 = OpLoad %182 
                                       f32_2 %324 = OpVectorShuffle %323 %323 0 1 
                              Uniform f32_4* %326 = OpAccessChain %19 %325 
                                       f32_4 %327 = OpLoad %326 
                                       f32_2 %328 = OpVectorShuffle %327 %327 2 3 
                                       f32_2 %329 = OpFMul %324 %328 
                                       f32_2 %332 = OpFAdd %329 %331 
                                       f32_4 %333 = OpLoad %322 
                                       f32_4 %334 = OpVectorShuffle %333 %332 4 5 2 3 
                                                      OpStore %322 %334 
                                       f32_4 %335 = OpLoad %322 
                                       f32_2 %336 = OpVectorShuffle %335 %335 0 1 
                                       f32_2 %337 = OpExtInst %1 8 %336 
                                       f32_4 %338 = OpLoad %322 
                                       f32_4 %339 = OpVectorShuffle %338 %337 4 5 2 3 
                                                      OpStore %322 %339 
                                       f32_4 %340 = OpLoad %182 
                                       f32_2 %341 = OpVectorShuffle %340 %340 0 1 
                              Uniform f32_4* %342 = OpAccessChain %19 %325 
                                       f32_4 %343 = OpLoad %342 
                                       f32_2 %344 = OpVectorShuffle %343 %343 2 3 
                                       f32_2 %345 = OpFMul %341 %344 
                                       f32_4 %346 = OpLoad %322 
                                       f32_2 %347 = OpVectorShuffle %346 %346 0 1 
                                       f32_2 %348 = OpFNegate %347 
                                       f32_2 %349 = OpFAdd %345 %348 
                                       f32_4 %350 = OpLoad %182 
                                       f32_4 %351 = OpVectorShuffle %350 %349 4 5 2 3 
                                                      OpStore %182 %351 
                                       f32_4 %353 = OpLoad %182 
                                       f32_4 %354 = OpVectorShuffle %353 %353 0 0 1 1 
                                       f32_4 %356 = OpFAdd %354 %355 
                                                      OpStore %352 %356 
                                       f32_4 %358 = OpLoad %352 
                                       f32_2 %359 = OpVectorShuffle %358 %358 0 2 
                                       f32_4 %360 = OpLoad %352 
                                       f32_2 %361 = OpVectorShuffle %360 %360 0 2 
                                       f32_2 %362 = OpFMul %359 %361 
                                       f32_4 %363 = OpLoad %357 
                                       f32_4 %364 = OpVectorShuffle %363 %362 4 1 2 5 
                                                      OpStore %357 %364 
                                       f32_4 %367 = OpLoad %357 
                                       f32_2 %368 = OpVectorShuffle %367 %367 0 3 
                                       f32_2 %369 = OpFMul %368 %331 
                                       f32_4 %370 = OpLoad %182 
                                       f32_2 %371 = OpVectorShuffle %370 %370 0 1 
                                       f32_2 %372 = OpFNegate %371 
                                       f32_2 %373 = OpFAdd %369 %372 
                                                      OpStore %366 %373 
                                       f32_4 %374 = OpLoad %182 
                                       f32_2 %375 = OpVectorShuffle %374 %374 0 1 
                                       f32_2 %376 = OpFNegate %375 
                                       f32_2 %378 = OpFAdd %376 %377 
                                       f32_4 %379 = OpLoad %352 
                                       f32_4 %380 = OpVectorShuffle %379 %378 4 1 5 3 
                                                      OpStore %352 %380 
                                       f32_4 %382 = OpLoad %182 
                                       f32_2 %383 = OpVectorShuffle %382 %382 0 1 
                                       f32_2 %385 = OpExtInst %1 37 %383 %384 
                                       f32_4 %386 = OpLoad %381 
                                       f32_4 %387 = OpVectorShuffle %386 %385 4 5 2 3 
                                                      OpStore %381 %387 
                                       f32_4 %388 = OpLoad %381 
                                       f32_2 %389 = OpVectorShuffle %388 %388 0 1 
                                       f32_2 %390 = OpFNegate %389 
                                       f32_4 %391 = OpLoad %381 
                                       f32_2 %392 = OpVectorShuffle %391 %391 0 1 
                                       f32_2 %393 = OpFMul %390 %392 
                                       f32_4 %394 = OpLoad %352 
                                       f32_2 %395 = OpVectorShuffle %394 %394 0 2 
                                       f32_2 %396 = OpFAdd %393 %395 
                                       f32_4 %397 = OpLoad %352 
                                       f32_4 %398 = OpVectorShuffle %397 %396 4 1 5 3 
                                                      OpStore %352 %398 
                                       f32_4 %399 = OpLoad %182 
                                       f32_2 %400 = OpVectorShuffle %399 %399 0 1 
                                       f32_2 %401 = OpExtInst %1 40 %400 %384 
                                       f32_4 %402 = OpLoad %182 
                                       f32_4 %403 = OpVectorShuffle %402 %401 4 5 2 3 
                                                      OpStore %182 %403 
                                       f32_4 %404 = OpLoad %182 
                                       f32_2 %405 = OpVectorShuffle %404 %404 0 1 
                                       f32_2 %406 = OpFNegate %405 
                                       f32_4 %407 = OpLoad %182 
                                       f32_2 %408 = OpVectorShuffle %407 %407 0 1 
                                       f32_2 %409 = OpFMul %406 %408 
                                       f32_4 %410 = OpLoad %352 
                                       f32_2 %411 = OpVectorShuffle %410 %410 1 3 
                                       f32_2 %412 = OpFAdd %409 %411 
                                       f32_4 %413 = OpLoad %182 
                                       f32_4 %414 = OpVectorShuffle %413 %412 4 5 2 3 
                                                      OpStore %182 %414 
                                Private f32* %415 = OpAccessChain %366 %32 
                                         f32 %416 = OpLoad %415 
                                Private f32* %417 = OpAccessChain %381 %32 
                                                      OpStore %417 %416 
                                Private f32* %418 = OpAccessChain %352 %32 
                                         f32 %419 = OpLoad %418 
                                Private f32* %420 = OpAccessChain %381 %73 
                                                      OpStore %420 %419 
                                Private f32* %421 = OpAccessChain %182 %32 
                                         f32 %422 = OpLoad %421 
                                Private f32* %423 = OpAccessChain %381 %22 
                                                      OpStore %423 %422 
                                Private f32* %424 = OpAccessChain %357 %32 
                                         f32 %425 = OpLoad %424 
                                Private f32* %426 = OpAccessChain %381 %152 
                                                      OpStore %426 %425 
                                       f32_4 %427 = OpLoad %381 
                                       f32_4 %431 = OpFMul %427 %430 
                                                      OpStore %381 %431 
                                Private f32* %432 = OpAccessChain %366 %73 
                                         f32 %433 = OpLoad %432 
                                Private f32* %434 = OpAccessChain %357 %32 
                                                      OpStore %434 %433 
                                Private f32* %435 = OpAccessChain %352 %22 
                                         f32 %436 = OpLoad %435 
                                Private f32* %437 = OpAccessChain %357 %73 
                                                      OpStore %437 %436 
                                Private f32* %438 = OpAccessChain %182 %73 
                                         f32 %439 = OpLoad %438 
                                Private f32* %440 = OpAccessChain %357 %22 
                                                      OpStore %440 %439 
                                       f32_4 %441 = OpLoad %357 
                                       f32_4 %442 = OpFMul %441 %430 
                                                      OpStore %352 %442 
                                       f32_4 %443 = OpLoad %381 
                                       f32_4 %444 = OpVectorShuffle %443 %443 1 3 1 3 
                                       f32_4 %445 = OpLoad %381 
                                       f32_4 %446 = OpVectorShuffle %445 %445 0 2 0 2 
                                       f32_4 %447 = OpFAdd %444 %446 
                                                      OpStore %357 %447 
                                       f32_4 %449 = OpLoad %352 
                                       f32_4 %450 = OpVectorShuffle %449 %449 1 1 3 3 
                                       f32_4 %451 = OpLoad %352 
                                       f32_4 %452 = OpVectorShuffle %451 %451 0 0 2 2 
                                       f32_4 %453 = OpFAdd %450 %452 
                                                      OpStore %448 %453 
                                       f32_4 %454 = OpLoad %381 
                                       f32_2 %455 = OpVectorShuffle %454 %454 1 3 
                                       f32_4 %456 = OpLoad %357 
                                       f32_2 %457 = OpVectorShuffle %456 %456 2 3 
                                       f32_2 %458 = OpFDiv %455 %457 
                                       f32_4 %459 = OpLoad %182 
                                       f32_4 %460 = OpVectorShuffle %459 %458 4 5 2 3 
                                                      OpStore %182 %460 
                                       f32_4 %461 = OpLoad %182 
                                       f32_2 %462 = OpVectorShuffle %461 %461 0 1 
                                       f32_2 %465 = OpFAdd %462 %464 
                                       f32_4 %466 = OpLoad %182 
                                       f32_4 %467 = OpVectorShuffle %466 %465 4 5 2 3 
                                                      OpStore %182 %467 
                                       f32_4 %468 = OpLoad %352 
                                       f32_2 %469 = OpVectorShuffle %468 %468 1 3 
                                       f32_4 %470 = OpLoad %448 
                                       f32_2 %471 = OpVectorShuffle %470 %470 1 3 
                                       f32_2 %472 = OpFDiv %469 %471 
                                                      OpStore %366 %472 
                                       f32_2 %473 = OpLoad %366 
                                       f32_2 %474 = OpFAdd %473 %464 
                                                      OpStore %366 %474 
                                       f32_4 %475 = OpLoad %182 
                                       f32_2 %476 = OpVectorShuffle %475 %475 0 1 
                              Uniform f32_4* %477 = OpAccessChain %19 %325 
                                       f32_4 %478 = OpLoad %477 
                                       f32_2 %479 = OpVectorShuffle %478 %478 0 0 
                                       f32_2 %480 = OpFMul %476 %479 
                                       f32_4 %481 = OpLoad %352 
                                       f32_4 %482 = OpVectorShuffle %481 %480 4 5 2 3 
                                                      OpStore %352 %482 
                                       f32_2 %483 = OpLoad %366 
                              Uniform f32_4* %484 = OpAccessChain %19 %325 
                                       f32_4 %485 = OpLoad %484 
                                       f32_2 %486 = OpVectorShuffle %485 %485 1 1 
                                       f32_2 %487 = OpFMul %483 %486 
                                       f32_4 %488 = OpLoad %352 
                                       f32_4 %489 = OpVectorShuffle %488 %487 0 1 4 5 
                                                      OpStore %352 %489 
                                       f32_4 %490 = OpLoad %357 
                                       f32_4 %491 = OpLoad %448 
                                       f32_4 %492 = OpFMul %490 %491 
                                                      OpStore %357 %492 
                                       f32_4 %493 = OpLoad %322 
                                       f32_4 %494 = OpVectorShuffle %493 %493 0 1 0 1 
                              Uniform f32_4* %495 = OpAccessChain %19 %325 
                                       f32_4 %496 = OpLoad %495 
                                       f32_4 %497 = OpVectorShuffle %496 %496 0 1 0 1 
                                       f32_4 %498 = OpFMul %494 %497 
                                       f32_4 %499 = OpLoad %352 
                                       f32_4 %500 = OpVectorShuffle %499 %499 0 2 1 2 
                                       f32_4 %501 = OpFAdd %498 %500 
                                                      OpStore %381 %501 
                                       f32_4 %504 = OpLoad %381 
                                       f32_2 %505 = OpVectorShuffle %504 %504 0 1 
                                Private f32* %506 = OpAccessChain %182 %22 
                                         f32 %507 = OpLoad %506 
                                         f32 %508 = OpCompositeExtract %505 0 
                                         f32 %509 = OpCompositeExtract %505 1 
                                       f32_3 %510 = OpCompositeConstruct %508 %509 %507 
                                                      OpStore %503 %510 
                         read_only Texture2D %512 = OpLoad %511 
                                     sampler %514 = OpLoad %513 
                  read_only Texture2DSampled %517 = OpSampledImage %512 %514 
                                       f32_3 %518 = OpLoad %503 
                                         f32 %519 = OpCompositeExtract %518 2 
                                         f32 %520 = OpImageSampleDrefExplicitLod %517 %518 %519 Lod %6 
                                                      OpStore %229 %520 
                                       f32_4 %522 = OpLoad %381 
                                       f32_2 %523 = OpVectorShuffle %522 %522 2 3 
                                Private f32* %524 = OpAccessChain %182 %22 
                                         f32 %525 = OpLoad %524 
                                         f32 %526 = OpCompositeExtract %523 0 
                                         f32 %527 = OpCompositeExtract %523 1 
                                       f32_3 %528 = OpCompositeConstruct %526 %527 %525 
                                                      OpStore %521 %528 
                         read_only Texture2D %529 = OpLoad %511 
                                     sampler %530 = OpLoad %513 
                  read_only Texture2DSampled %531 = OpSampledImage %529 %530 
                                       f32_3 %532 = OpLoad %521 
                                         f32 %533 = OpCompositeExtract %532 2 
                                         f32 %534 = OpImageSampleDrefExplicitLod %531 %532 %533 Lod %6 
                                                      OpStore %247 %534 
                                         f32 %535 = OpLoad %247 
                                Private f32* %536 = OpAccessChain %357 %73 
                                         f32 %537 = OpLoad %536 
                                         f32 %538 = OpFMul %535 %537 
                                                      OpStore %247 %538 
                                Private f32* %539 = OpAccessChain %357 %32 
                                         f32 %540 = OpLoad %539 
                                         f32 %541 = OpLoad %229 
                                         f32 %542 = OpFMul %540 %541 
                                         f32 %543 = OpLoad %247 
                                         f32 %544 = OpFAdd %542 %543 
                                                      OpStore %229 %544 
                                       f32_4 %545 = OpLoad %322 
                                       f32_4 %546 = OpVectorShuffle %545 %545 0 1 0 1 
                              Uniform f32_4* %547 = OpAccessChain %19 %325 
                                       f32_4 %548 = OpLoad %547 
                                       f32_4 %549 = OpVectorShuffle %548 %548 0 1 0 1 
                                       f32_4 %550 = OpFMul %546 %549 
                                       f32_4 %551 = OpLoad %352 
                                       f32_4 %552 = OpVectorShuffle %551 %551 0 3 1 3 
                                       f32_4 %553 = OpFAdd %550 %552 
                                                      OpStore %322 %553 
                                       f32_4 %555 = OpLoad %322 
                                       f32_2 %556 = OpVectorShuffle %555 %555 0 1 
                                Private f32* %557 = OpAccessChain %182 %22 
                                         f32 %558 = OpLoad %557 
                                         f32 %559 = OpCompositeExtract %556 0 
                                         f32 %560 = OpCompositeExtract %556 1 
                                       f32_3 %561 = OpCompositeConstruct %559 %560 %558 
                                                      OpStore %554 %561 
                         read_only Texture2D %562 = OpLoad %511 
                                     sampler %563 = OpLoad %513 
                  read_only Texture2DSampled %564 = OpSampledImage %562 %563 
                                       f32_3 %565 = OpLoad %554 
                                         f32 %566 = OpCompositeExtract %565 2 
                                         f32 %567 = OpImageSampleDrefExplicitLod %564 %565 %566 Lod %6 
                                                      OpStore %247 %567 
                                Private f32* %568 = OpAccessChain %357 %22 
                                         f32 %569 = OpLoad %568 
                                         f32 %570 = OpLoad %247 
                                         f32 %571 = OpFMul %569 %570 
                                         f32 %572 = OpLoad %229 
                                         f32 %573 = OpFAdd %571 %572 
                                                      OpStore %229 %573 
                                       f32_4 %575 = OpLoad %322 
                                       f32_2 %576 = OpVectorShuffle %575 %575 2 3 
                                Private f32* %577 = OpAccessChain %182 %22 
                                         f32 %578 = OpLoad %577 
                                         f32 %579 = OpCompositeExtract %576 0 
                                         f32 %580 = OpCompositeExtract %576 1 
                                       f32_3 %581 = OpCompositeConstruct %579 %580 %578 
                                                      OpStore %574 %581 
                         read_only Texture2D %582 = OpLoad %511 
                                     sampler %583 = OpLoad %513 
                  read_only Texture2DSampled %584 = OpSampledImage %582 %583 
                                       f32_3 %585 = OpLoad %574 
                                         f32 %586 = OpCompositeExtract %585 2 
                                         f32 %587 = OpImageSampleDrefExplicitLod %584 %585 %586 Lod %6 
                                                      OpStore %247 %587 
                                Private f32* %588 = OpAccessChain %357 %152 
                                         f32 %589 = OpLoad %588 
                                         f32 %590 = OpLoad %247 
                                         f32 %591 = OpFMul %589 %590 
                                         f32 %592 = OpLoad %229 
                                         f32 %593 = OpFAdd %591 %592 
                                                      OpStore %229 %593 
                                Uniform f32* %594 = OpAccessChain %19 %271 %32 
                                         f32 %595 = OpLoad %594 
                                         f32 %596 = OpFNegate %595 
                                         f32 %597 = OpFAdd %596 %77 
                                                      OpStore %247 %597 
                                         f32 %598 = OpLoad %229 
                                         f32 %599 = OpLoad %247 
                                         f32 %600 = OpFMul %598 %599 
                                Uniform f32* %601 = OpAccessChain %19 %271 %32 
                                         f32 %602 = OpLoad %601 
                                         f32 %603 = OpFAdd %600 %602 
                                                      OpStore %229 %603 
                                                      OpBranch %290 
                                             %604 = OpLabel 
                                                      OpStore %229 %77 
                                                      OpBranch %290 
                                             %290 = OpLabel 
                                         f32 %605 = OpLoad %229 
                                         f32 %606 = OpFNegate %605 
                                         f32 %607 = OpFAdd %606 %77 
                                                      OpStore %247 %607 
                                Private f32* %608 = OpAccessChain %9 %32 
                                         f32 %609 = OpLoad %608 
                                         f32 %610 = OpLoad %247 
                                         f32 %611 = OpFMul %609 %610 
                                         f32 %612 = OpLoad %229 
                                         f32 %613 = OpFAdd %611 %612 
                                Private f32* %614 = OpAccessChain %9 %32 
                                                      OpStore %614 %613 
                                Private f32* %615 = OpAccessChain %9 %32 
                                         f32 %616 = OpLoad %615 
                                         f32 %617 = OpLoad %171 
                                         f32 %618 = OpFMul %616 %617 
                                Private f32* %619 = OpAccessChain %9 %32 
                                                      OpStore %619 %618 
                                       f32_4 %620 = OpLoad %9 
                                       f32_3 %621 = OpVectorShuffle %620 %620 0 0 0 
                              Uniform f32_4* %623 = OpAccessChain %19 %622 
                                       f32_4 %624 = OpLoad %623 
                                       f32_3 %625 = OpVectorShuffle %624 %624 0 1 2 
                                       f32_3 %626 = OpFMul %621 %625 
                                       f32_4 %627 = OpLoad %182 
                                       f32_4 %628 = OpVectorShuffle %627 %626 4 5 6 3 
                                                      OpStore %182 %628 
                         read_only Texture2D %630 = OpLoad %629 
                                     sampler %632 = OpLoad %631 
                  read_only Texture2DSampled %633 = OpSampledImage %630 %632 
                                       f32_3 %634 = OpLoad %42 
                                       f32_2 %635 = OpVectorShuffle %634 %634 0 1 
                                       f32_4 %636 = OpImageSampleImplicitLod %633 %635 
                                       f32_3 %637 = OpVectorShuffle %636 %636 0 1 2 
                                       f32_4 %638 = OpLoad %322 
                                       f32_4 %639 = OpVectorShuffle %638 %637 4 5 6 3 
                                                      OpStore %322 %639 
                         read_only Texture2D %641 = OpLoad %640 
                                     sampler %643 = OpLoad %642 
                  read_only Texture2DSampled %644 = OpSampledImage %641 %643 
                                       f32_3 %645 = OpLoad %42 
                                       f32_2 %646 = OpVectorShuffle %645 %645 0 1 
                                       f32_4 %647 = OpImageSampleImplicitLod %644 %646 
                                                      OpStore %352 %647 
                         read_only Texture2D %649 = OpLoad %648 
                                     sampler %651 = OpLoad %650 
                  read_only Texture2DSampled %652 = OpSampledImage %649 %651 
                                       f32_3 %653 = OpLoad %42 
                                       f32_2 %654 = OpVectorShuffle %653 %653 0 1 
                                       f32_4 %655 = OpImageSampleImplicitLod %652 %654 
                                       f32_3 %656 = OpVectorShuffle %655 %655 0 1 2 
                                                      OpStore %42 %656 
                                       f32_3 %657 = OpLoad %42 
                                       f32_3 %660 = OpFMul %657 %659 
                                       f32_3 %663 = OpFAdd %660 %662 
                                                      OpStore %42 %663 
                                       f32_3 %664 = OpLoad %42 
                                       f32_3 %665 = OpLoad %42 
                                         f32 %666 = OpDot %664 %665 
                                Private f32* %667 = OpAccessChain %9 %32 
                                                      OpStore %667 %666 
                                Private f32* %668 = OpAccessChain %9 %32 
                                         f32 %669 = OpLoad %668 
                                         f32 %670 = OpExtInst %1 32 %669 
                                Private f32* %671 = OpAccessChain %9 %32 
                                                      OpStore %671 %670 
                                       f32_4 %672 = OpLoad %9 
                                       f32_3 %673 = OpVectorShuffle %672 %672 0 0 0 
                                       f32_3 %674 = OpLoad %42 
                                       f32_3 %675 = OpFMul %673 %674 
                                                      OpStore %42 %675 
                                       f32_4 %676 = OpLoad %80 
                                       f32_3 %677 = OpVectorShuffle %676 %676 0 1 3 
                              Uniform f32_3* %679 = OpAccessChain %19 %97 
                                       f32_3 %680 = OpLoad %679 
                                       f32_3 %681 = OpFNegate %680 
                                       f32_3 %682 = OpFAdd %677 %681 
                                       f32_4 %683 = OpLoad %80 
                                       f32_4 %684 = OpVectorShuffle %683 %682 4 5 6 3 
                                                      OpStore %80 %684 
                                       f32_4 %685 = OpLoad %80 
                                       f32_3 %686 = OpVectorShuffle %685 %685 0 1 2 
                                       f32_4 %687 = OpLoad %80 
                                       f32_3 %688 = OpVectorShuffle %687 %687 0 1 2 
                                         f32 %689 = OpDot %686 %688 
                                Private f32* %690 = OpAccessChain %9 %32 
                                                      OpStore %690 %689 
                                Private f32* %691 = OpAccessChain %9 %32 
                                         f32 %692 = OpLoad %691 
                                         f32 %693 = OpExtInst %1 32 %692 
                                Private f32* %694 = OpAccessChain %9 %32 
                                                      OpStore %694 %693 
                                       f32_4 %695 = OpLoad %9 
                                       f32_3 %696 = OpVectorShuffle %695 %695 0 0 0 
                                       f32_4 %697 = OpLoad %80 
                                       f32_3 %698 = OpVectorShuffle %697 %697 0 1 2 
                                       f32_3 %699 = OpFMul %696 %698 
                                       f32_4 %700 = OpLoad %80 
                                       f32_4 %701 = OpVectorShuffle %700 %699 4 5 6 3 
                                                      OpStore %80 %701 
                                       f32_4 %702 = OpLoad %352 
                                       f32_4 %703 = OpVectorShuffle %702 %702 3 0 1 2 
                                       f32_4 %704 = OpFNegate %703 
                                       f32_4 %706 = OpFAdd %704 %705 
                                                      OpStore %357 %706 
                                       f32_3 %707 = OpLoad %162 
                                         f32 %708 = OpLoad %175 
                                       f32_3 %709 = OpCompositeConstruct %708 %708 %708 
                                       f32_3 %710 = OpFMul %707 %709 
                                       f32_4 %711 = OpLoad %80 
                                       f32_3 %712 = OpVectorShuffle %711 %711 0 1 2 
                                       f32_3 %713 = OpFNegate %712 
                                       f32_3 %714 = OpFAdd %710 %713 
                                       f32_4 %715 = OpLoad %9 
                                       f32_4 %716 = OpVectorShuffle %715 %714 4 5 6 3 
                                                      OpStore %9 %716 
                                       f32_4 %717 = OpLoad %9 
                                       f32_3 %718 = OpVectorShuffle %717 %717 0 1 2 
                                       f32_4 %719 = OpLoad %9 
                                       f32_3 %720 = OpVectorShuffle %719 %719 0 1 2 
                                         f32 %721 = OpDot %718 %720 
                                                      OpStore %53 %721 
                                         f32 %722 = OpLoad %53 
                                         f32 %724 = OpExtInst %1 40 %722 %723 
                                                      OpStore %53 %724 
                                         f32 %725 = OpLoad %53 
                                         f32 %726 = OpExtInst %1 32 %725 
                                                      OpStore %53 %726 
                                         f32 %727 = OpLoad %53 
                                       f32_3 %728 = OpCompositeConstruct %727 %727 %727 
                                       f32_4 %729 = OpLoad %9 
                                       f32_3 %730 = OpVectorShuffle %729 %729 0 1 2 
                                       f32_3 %731 = OpFMul %728 %730 
                                       f32_4 %732 = OpLoad %9 
                                       f32_4 %733 = OpVectorShuffle %732 %731 4 5 6 3 
                                                      OpStore %9 %733 
                                       f32_3 %734 = OpLoad %42 
                                       f32_4 %735 = OpLoad %80 
                                       f32_3 %736 = OpVectorShuffle %735 %735 0 1 2 
                                       f32_3 %737 = OpFNegate %736 
                                         f32 %738 = OpDot %734 %737 
                                                      OpStore %53 %738 
                                       f32_3 %739 = OpLoad %42 
                                       f32_3 %740 = OpLoad %88 
                                         f32 %741 = OpDot %739 %740 
                                                      OpStore %175 %741 
                                         f32 %742 = OpLoad %175 
                                         f32 %743 = OpExtInst %1 43 %742 %245 %77 
                                                      OpStore %175 %743 
                                       f32_3 %744 = OpLoad %42 
                                       f32_4 %745 = OpLoad %9 
                                       f32_3 %746 = OpVectorShuffle %745 %745 0 1 2 
                                         f32 %747 = OpDot %744 %746 
                                Private f32* %748 = OpAccessChain %42 %32 
                                                      OpStore %748 %747 
                                Private f32* %749 = OpAccessChain %42 %32 
                                         f32 %750 = OpLoad %749 
                                         f32 %751 = OpExtInst %1 43 %750 %245 %77 
                                Private f32* %752 = OpAccessChain %42 %32 
                                                      OpStore %752 %751 
                                       f32_3 %753 = OpLoad %88 
                                       f32_4 %754 = OpLoad %9 
                                       f32_3 %755 = OpVectorShuffle %754 %754 0 1 2 
                                         f32 %756 = OpDot %753 %755 
                                Private f32* %757 = OpAccessChain %9 %32 
                                                      OpStore %757 %756 
                                Private f32* %758 = OpAccessChain %9 %32 
                                         f32 %759 = OpLoad %758 
                                         f32 %760 = OpExtInst %1 43 %759 %245 %77 
                                Private f32* %761 = OpAccessChain %9 %32 
                                                      OpStore %761 %760 
                                Private f32* %762 = OpAccessChain %9 %32 
                                         f32 %763 = OpLoad %762 
                                Private f32* %764 = OpAccessChain %9 %32 
                                         f32 %765 = OpLoad %764 
                                         f32 %766 = OpFMul %763 %765 
                                Private f32* %767 = OpAccessChain %162 %32 
                                                      OpStore %767 %766 
                                       f32_3 %768 = OpLoad %162 
                                       f32_2 %769 = OpVectorShuffle %768 %768 0 0 
                                       f32_4 %770 = OpLoad %357 
                                       f32_2 %771 = OpVectorShuffle %770 %770 0 0 
                                         f32 %772 = OpDot %769 %771 
                                Private f32* %773 = OpAccessChain %162 %32 
                                                      OpStore %773 %772 
                                Private f32* %774 = OpAccessChain %162 %32 
                                         f32 %775 = OpLoad %774 
                                         f32 %777 = OpFAdd %775 %776 
                                Private f32* %778 = OpAccessChain %162 %32 
                                                      OpStore %778 %777 
                                         f32 %780 = OpLoad %175 
                                         f32 %781 = OpFNegate %780 
                                         f32 %782 = OpFAdd %781 %77 
                                                      OpStore %779 %782 
                                         f32 %784 = OpLoad %779 
                                         f32 %785 = OpLoad %779 
                                         f32 %786 = OpFMul %784 %785 
                                                      OpStore %783 %786 
                                         f32 %787 = OpLoad %783 
                                         f32 %788 = OpLoad %783 
                                         f32 %789 = OpFMul %787 %788 
                                                      OpStore %783 %789 
                                         f32 %790 = OpLoad %779 
                                         f32 %791 = OpLoad %783 
                                         f32 %792 = OpFMul %790 %791 
                                                      OpStore %779 %792 
                                Private f32* %793 = OpAccessChain %162 %32 
                                         f32 %794 = OpLoad %793 
                                         f32 %795 = OpLoad %779 
                                         f32 %796 = OpFMul %794 %795 
                                         f32 %797 = OpFAdd %796 %77 
                                                      OpStore %779 %797 
                                         f32 %798 = OpLoad %53 
                                         f32 %799 = OpExtInst %1 4 %798 
                                         f32 %800 = OpFNegate %799 
                                         f32 %801 = OpFAdd %800 %77 
                                                      OpStore %783 %801 
                                         f32 %802 = OpLoad %783 
                                         f32 %803 = OpLoad %783 
                                         f32 %804 = OpFMul %802 %803 
                                                      OpStore %171 %804 
                                         f32 %805 = OpLoad %171 
                                         f32 %806 = OpLoad %171 
                                         f32 %807 = OpFMul %805 %806 
                                                      OpStore %171 %807 
                                         f32 %808 = OpLoad %783 
                                         f32 %809 = OpLoad %171 
                                         f32 %810 = OpFMul %808 %809 
                                                      OpStore %783 %810 
                                Private f32* %811 = OpAccessChain %162 %32 
                                         f32 %812 = OpLoad %811 
                                         f32 %813 = OpLoad %783 
                                         f32 %814 = OpFMul %812 %813 
                                         f32 %815 = OpFAdd %814 %77 
                                Private f32* %816 = OpAccessChain %162 %32 
                                                      OpStore %816 %815 
                                Private f32* %817 = OpAccessChain %162 %32 
                                         f32 %818 = OpLoad %817 
                                         f32 %819 = OpLoad %779 
                                         f32 %820 = OpFMul %818 %819 
                                Private f32* %821 = OpAccessChain %162 %32 
                                                      OpStore %821 %820 
                                Private f32* %822 = OpAccessChain %357 %32 
                                         f32 %823 = OpLoad %822 
                                Private f32* %824 = OpAccessChain %357 %32 
                                         f32 %825 = OpLoad %824 
                                         f32 %826 = OpFMul %823 %825 
                                                      OpStore %779 %826 
                                         f32 %827 = OpLoad %779 
                                         f32 %829 = OpExtInst %1 40 %827 %828 
                                                      OpStore %779 %829 
                                         f32 %830 = OpLoad %779 
                                         f32 %831 = OpFNegate %830 
                                         f32 %832 = OpFAdd %831 %77 
                                                      OpStore %783 %832 
                                         f32 %833 = OpLoad %53 
                                         f32 %834 = OpExtInst %1 4 %833 
                                         f32 %835 = OpLoad %783 
                                         f32 %836 = OpFMul %834 %835 
                                         f32 %837 = OpLoad %779 
                                         f32 %838 = OpFAdd %836 %837 
                                                      OpStore %171 %838 
                                         f32 %839 = OpLoad %175 
                                         f32 %840 = OpLoad %783 
                                         f32 %841 = OpFMul %839 %840 
                                         f32 %842 = OpLoad %779 
                                         f32 %843 = OpFAdd %841 %842 
                                                      OpStore %783 %843 
                                         f32 %844 = OpLoad %53 
                                         f32 %845 = OpExtInst %1 4 %844 
                                         f32 %846 = OpLoad %783 
                                         f32 %847 = OpFMul %845 %846 
                                                      OpStore %53 %847 
                                         f32 %848 = OpLoad %175 
                                         f32 %849 = OpLoad %171 
                                         f32 %850 = OpFMul %848 %849 
                                         f32 %851 = OpLoad %53 
                                         f32 %852 = OpFAdd %850 %851 
                                                      OpStore %53 %852 
                                         f32 %853 = OpLoad %53 
                                         f32 %855 = OpFAdd %853 %854 
                                                      OpStore %53 %855 
                                         f32 %856 = OpLoad %53 
                                         f32 %857 = OpFDiv %330 %856 
                                                      OpStore %53 %857 
                                         f32 %858 = OpLoad %779 
                                         f32 %859 = OpLoad %779 
                                         f32 %860 = OpFMul %858 %859 
                                                      OpStore %779 %860 
                                Private f32* %861 = OpAccessChain %42 %32 
                                         f32 %862 = OpLoad %861 
                                         f32 %863 = OpLoad %779 
                                         f32 %864 = OpFMul %862 %863 
                                Private f32* %865 = OpAccessChain %42 %32 
                                         f32 %866 = OpLoad %865 
                                         f32 %867 = OpFNegate %866 
                                         f32 %868 = OpFAdd %864 %867 
                                                      OpStore %783 %868 
                                         f32 %869 = OpLoad %783 
                                Private f32* %870 = OpAccessChain %42 %32 
                                         f32 %871 = OpLoad %870 
                                         f32 %872 = OpFMul %869 %871 
                                         f32 %873 = OpFAdd %872 %77 
                                Private f32* %874 = OpAccessChain %42 %32 
                                                      OpStore %874 %873 
                                         f32 %875 = OpLoad %779 
                                         f32 %877 = OpFMul %875 %876 
                                                      OpStore %779 %877 
                                Private f32* %878 = OpAccessChain %42 %32 
                                         f32 %879 = OpLoad %878 
                                Private f32* %880 = OpAccessChain %42 %32 
                                         f32 %881 = OpLoad %880 
                                         f32 %882 = OpFMul %879 %881 
                                         f32 %884 = OpFAdd %882 %883 
                                Private f32* %885 = OpAccessChain %42 %32 
                                                      OpStore %885 %884 
                                         f32 %886 = OpLoad %779 
                                Private f32* %887 = OpAccessChain %42 %32 
                                         f32 %888 = OpLoad %887 
                                         f32 %889 = OpFDiv %886 %888 
                                                      OpStore %779 %889 
                                         f32 %890 = OpLoad %779 
                                         f32 %891 = OpLoad %53 
                                         f32 %892 = OpFMul %890 %891 
                                Private f32* %893 = OpAccessChain %162 %73 
                                                      OpStore %893 %892 
                                         f32 %894 = OpLoad %175 
                                       f32_2 %895 = OpCompositeConstruct %894 %894 
                                       f32_3 %896 = OpLoad %162 
                                       f32_2 %897 = OpVectorShuffle %896 %896 0 1 
                                       f32_2 %898 = OpFMul %895 %897 
                                       f32_3 %899 = OpLoad %162 
                                       f32_3 %900 = OpVectorShuffle %899 %898 3 4 2 
                                                      OpStore %162 %900 
                                Private f32* %901 = OpAccessChain %162 %73 
                                         f32 %902 = OpLoad %901 
                                         f32 %904 = OpFMul %902 %903 
                                                      OpStore %779 %904 
                                         f32 %905 = OpLoad %779 
                                         f32 %906 = OpExtInst %1 40 %905 %245 
                                                      OpStore %779 %906 
                                       f32_4 %907 = OpLoad %352 
                                       f32_3 %908 = OpVectorShuffle %907 %907 0 1 2 
                                       f32_4 %909 = OpLoad %352 
                                       f32_3 %910 = OpVectorShuffle %909 %909 0 1 2 
                                         f32 %911 = OpDot %908 %910 
                                                      OpStore %53 %911 
                                         f32 %913 = OpLoad %53 
                                        bool %914 = OpFOrdNotEqual %913 %245 
                                                      OpStore %912 %914 
                                        bool %915 = OpLoad %912 
                                         f32 %916 = OpSelect %915 %77 %245 
                                                      OpStore %53 %916 
                                         f32 %917 = OpLoad %53 
                                         f32 %918 = OpLoad %779 
                                         f32 %919 = OpFMul %917 %918 
                                                      OpStore %779 %919 
                                       f32_3 %920 = OpLoad %162 
                                       f32_3 %921 = OpVectorShuffle %920 %920 0 0 0 
                                       f32_4 %922 = OpLoad %182 
                                       f32_3 %923 = OpVectorShuffle %922 %922 0 1 2 
                                       f32_3 %924 = OpFMul %921 %923 
                                                      OpStore %42 %924 
                                       f32_4 %925 = OpLoad %182 
                                       f32_3 %926 = OpVectorShuffle %925 %925 0 1 2 
                                         f32 %927 = OpLoad %779 
                                       f32_3 %928 = OpCompositeConstruct %927 %927 %927 
                                       f32_3 %929 = OpFMul %926 %928 
                                                      OpStore %162 %929 
                                Private f32* %930 = OpAccessChain %9 %32 
                                         f32 %931 = OpLoad %930 
                                         f32 %932 = OpFNegate %931 
                                         f32 %933 = OpFAdd %932 %77 
                                Private f32* %934 = OpAccessChain %9 %32 
                                                      OpStore %934 %933 
                                Private f32* %935 = OpAccessChain %9 %32 
                                         f32 %936 = OpLoad %935 
                                Private f32* %937 = OpAccessChain %9 %32 
                                         f32 %938 = OpLoad %937 
                                         f32 %939 = OpFMul %936 %938 
                                                      OpStore %175 %939 
                                         f32 %940 = OpLoad %175 
                                         f32 %941 = OpLoad %175 
                                         f32 %942 = OpFMul %940 %941 
                                                      OpStore %175 %942 
                                Private f32* %943 = OpAccessChain %9 %32 
                                         f32 %944 = OpLoad %943 
                                         f32 %945 = OpLoad %175 
                                         f32 %946 = OpFMul %944 %945 
                                Private f32* %947 = OpAccessChain %9 %32 
                                                      OpStore %947 %946 
                                       f32_4 %948 = OpLoad %357 
                                       f32_3 %949 = OpVectorShuffle %948 %948 1 2 3 
                                       f32_4 %950 = OpLoad %9 
                                       f32_3 %951 = OpVectorShuffle %950 %950 0 0 0 
                                       f32_3 %952 = OpFMul %949 %951 
                                       f32_4 %953 = OpLoad %352 
                                       f32_3 %954 = OpVectorShuffle %953 %953 0 1 2 
                                       f32_3 %955 = OpFAdd %952 %954 
                                       f32_4 %956 = OpLoad %80 
                                       f32_4 %957 = OpVectorShuffle %956 %955 4 5 6 3 
                                                      OpStore %80 %957 
                                       f32_3 %958 = OpLoad %162 
                                       f32_4 %959 = OpLoad %80 
                                       f32_3 %960 = OpVectorShuffle %959 %959 0 1 2 
                                       f32_3 %961 = OpFMul %958 %960 
                                       f32_4 %962 = OpLoad %9 
                                       f32_4 %963 = OpVectorShuffle %962 %961 4 5 6 3 
                                                      OpStore %9 %963 
                                       f32_4 %964 = OpLoad %322 
                                       f32_3 %965 = OpVectorShuffle %964 %964 0 1 2 
                                       f32_3 %966 = OpLoad %42 
                                       f32_3 %967 = OpFMul %965 %966 
                                       f32_4 %968 = OpLoad %9 
                                       f32_3 %969 = OpVectorShuffle %968 %968 0 1 2 
                                       f32_3 %970 = OpFAdd %967 %969 
                                       f32_4 %971 = OpLoad %9 
                                       f32_4 %972 = OpVectorShuffle %971 %970 4 5 6 3 
                                                      OpStore %9 %972 
                                Private f32* %973 = OpAccessChain %9 %152 
                                                      OpStore %973 %77 
                                       f32_4 %976 = OpLoad %9 
                                       f32_4 %977 = OpFNegate %976 
                                       f32_4 %978 = OpExtInst %1 29 %977 
                                                      OpStore %975 %978 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightColor;
UNITY_LOCATION(0) uniform  sampler2D _CameraDepthTexture;
UNITY_LOCATION(1) uniform  sampler2D _ShadowMapTexture;
UNITY_LOCATION(2) uniform  sampler2D _CameraGBufferTexture0;
UNITY_LOCATION(3) uniform  sampler2D _CameraGBufferTexture1;
UNITY_LOCATION(4) uniform  sampler2D _CameraGBufferTexture2;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec3 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
vec3 u_xlat6;
float u_xlat12;
float u_xlat13;
bool u_xlatb13;
float u_xlat18;
float u_xlat19;
float u_xlat20;
float u_xlat21;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat2 = texture(_CameraDepthTexture, u_xlat1.xy);
    u_xlat18 = _ZBufferParams.x * u_xlat2.x + _ZBufferParams.y;
    u_xlat18 = float(1.0) / u_xlat18;
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.xyw = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat2.xyw, u_xlat2.xyw);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat18 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat6.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat2.xyz = (-u_xlat3.xyz) * u_xlat6.xxx + (-_LightDir.xyz);
    u_xlat6.xyz = u_xlat6.xxx * u_xlat3.xyz;
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat13 = max(u_xlat13, 0.00100000005);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
    u_xlat3 = texture(_CameraGBufferTexture2, u_xlat1.xy);
    u_xlat3.xyz = u_xlat3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat13 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
    u_xlat13 = dot(u_xlat3.xyz, u_xlat2.xyz);
    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
    u_xlat19 = dot((-_LightDir.xyz), u_xlat2.xyz);
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
    u_xlat2 = texture(_CameraGBufferTexture1, u_xlat1.xy);
    u_xlat4 = (-u_xlat2.wxyz) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat20 = u_xlat4.x * u_xlat4.x;
    u_xlat20 = max(u_xlat20, 0.00200000009);
    u_xlat21 = u_xlat20 * u_xlat20;
    u_xlat5.x = u_xlat13 * u_xlat21 + (-u_xlat13);
    u_xlat13 = u_xlat5.x * u_xlat13 + 1.0;
    u_xlat13 = u_xlat13 * u_xlat13 + 1.00000001e-07;
    u_xlat21 = u_xlat21 * 0.318309873;
    u_xlat13 = u_xlat21 / u_xlat13;
    u_xlat6.x = dot(u_xlat3.xyz, (-u_xlat6.xyz));
    u_xlat12 = dot(u_xlat3.xyz, (-_LightDir.xyz));
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
    u_xlat18 = (-u_xlat20) + 1.0;
    u_xlat3.x = abs(u_xlat6.x) * u_xlat18 + u_xlat20;
    u_xlat18 = u_xlat12 * u_xlat18 + u_xlat20;
    u_xlat18 = u_xlat18 * abs(u_xlat6.x);
    u_xlat6.x = -abs(u_xlat6.x) + 1.0;
    u_xlat18 = u_xlat12 * u_xlat3.x + u_xlat18;
    u_xlat18 = u_xlat18 + 9.99999975e-06;
    u_xlat18 = 0.5 / u_xlat18;
    u_xlat18 = u_xlat13 * u_xlat18;
    u_xlat18 = u_xlat18 * 3.14159274;
    u_xlat18 = u_xlat12 * u_xlat18;
    u_xlat18 = max(u_xlat18, 0.0);
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlatb13 = u_xlat13!=0.0;
    u_xlat13 = u_xlatb13 ? 1.0 : float(0.0);
    u_xlat18 = u_xlat18 * u_xlat13;
    u_xlat3 = texture(_ShadowMapTexture, u_xlat1.xy);
    u_xlat5 = texture(_CameraGBufferTexture0, u_xlat1.xy);
    u_xlat1.x = (-u_xlat3.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat1.x + u_xlat3.x;
    u_xlat1.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat3.xyz = vec3(u_xlat18) * u_xlat1.xyz;
    u_xlat0.x = (-u_xlat19) + 1.0;
    u_xlat18 = u_xlat19 * u_xlat19;
    u_xlat18 = dot(vec2(u_xlat18), u_xlat4.xx);
    u_xlat18 = u_xlat18 + -0.5;
    u_xlat19 = u_xlat0.x * u_xlat0.x;
    u_xlat19 = u_xlat19 * u_xlat19;
    u_xlat0.x = u_xlat0.x * u_xlat19;
    u_xlat2.xyz = u_xlat4.yzw * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz * u_xlat3.xyz;
    u_xlat0.x = u_xlat6.x * u_xlat6.x;
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat0.x = u_xlat6.x * u_xlat0.x;
    u_xlat0.x = u_xlat18 * u_xlat0.x + 1.0;
    u_xlat6.x = (-u_xlat12) + 1.0;
    u_xlat19 = u_xlat6.x * u_xlat6.x;
    u_xlat19 = u_xlat19 * u_xlat19;
    u_xlat6.x = u_xlat6.x * u_xlat19;
    u_xlat6.x = u_xlat18 * u_xlat6.x + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat6.x;
    u_xlat0.x = u_xlat12 * u_xlat0.x;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
    u_xlat0.xyz = u_xlat5.xyz * u_xlat0.xyz + u_xlat2.xyz;
    u_xlat0.w = 1.0;
    SV_Target0 = exp2((-u_xlat0));
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 192
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %80 %102 %169 %175 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpMemberDecorate %78 0 BuiltIn 78 
                                                      OpMemberDecorate %78 1 BuiltIn 78 
                                                      OpMemberDecorate %78 2 BuiltIn 78 
                                                      OpDecorate %78 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 102 
                                                      OpDecorate %169 Location 169 
                                                      OpDecorate vs_TEXCOORD1 Location 175 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %16 %17 %18 %6 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 1 
                                              %24 = OpTypePointer Uniform %7 
                                          i32 %28 = OpConstant 0 
                                          i32 %36 = OpConstant 2 
                                          i32 %45 = OpConstant 3 
                               Private f32_4* %49 = OpVariable Private 
                                          u32 %76 = OpConstant 1 
                                              %77 = OpTypeArray %6 %76 
                                              %78 = OpTypeStruct %7 %6 %77 
                                              %79 = OpTypePointer Output %78 
         Output struct {f32_4; f32; f32[1];}* %80 = OpVariable Output 
                                              %82 = OpTypePointer Output %7 
                                              %84 = OpTypePointer Private %6 
                                          u32 %87 = OpConstant 0 
                                              %88 = OpTypePointer Uniform %6 
                               Private f32_4* %93 = OpVariable Private 
                                              %94 = OpTypeVector %6 3 
                                          f32 %97 = OpConstant 3.674022E-40 
                                        f32_3 %98 = OpConstantComposite %97 %97 %97 
                       Output f32_4* vs_TEXCOORD0 = OpVariable Output 
                                             %103 = OpTypeVector %6 2 
                                         f32 %158 = OpConstant 3.674022E-40 
                                         f32 %159 = OpConstant 3.674022E-40 
                                       f32_3 %160 = OpConstantComposite %158 %158 %159 
                                             %168 = OpTypePointer Input %94 
                                Input f32_3* %169 = OpVariable Input 
                                             %174 = OpTypePointer Output %94 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                                         i32 %176 = OpConstant 4 
                                             %186 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %25 = OpAccessChain %21 %23 %23 
                                        f32_4 %26 = OpLoad %25 
                                        f32_4 %27 = OpFMul %13 %26 
                                                      OpStore %9 %27 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %28 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %44 = OpLoad %9 
                               Uniform f32_4* %46 = OpAccessChain %21 %23 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_4 %48 = OpFAdd %44 %47 
                                                      OpStore %9 %48 
                                        f32_4 %50 = OpLoad %9 
                                        f32_4 %51 = OpVectorShuffle %50 %50 1 1 1 1 
                               Uniform f32_4* %52 = OpAccessChain %21 %45 %23 
                                        f32_4 %53 = OpLoad %52 
                                        f32_4 %54 = OpFMul %51 %53 
                                                      OpStore %49 %54 
                               Uniform f32_4* %55 = OpAccessChain %21 %45 %28 
                                        f32_4 %56 = OpLoad %55 
                                        f32_4 %57 = OpLoad %9 
                                        f32_4 %58 = OpVectorShuffle %57 %57 0 0 0 0 
                                        f32_4 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %49 
                                        f32_4 %61 = OpFAdd %59 %60 
                                                      OpStore %49 %61 
                               Uniform f32_4* %62 = OpAccessChain %21 %45 %36 
                                        f32_4 %63 = OpLoad %62 
                                        f32_4 %64 = OpLoad %9 
                                        f32_4 %65 = OpVectorShuffle %64 %64 2 2 2 2 
                                        f32_4 %66 = OpFMul %63 %65 
                                        f32_4 %67 = OpLoad %49 
                                        f32_4 %68 = OpFAdd %66 %67 
                                                      OpStore %49 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %45 %45 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %9 
                                        f32_4 %72 = OpVectorShuffle %71 %71 3 3 3 3 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %49 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %49 %75 
                                        f32_4 %81 = OpLoad %49 
                                Output f32_4* %83 = OpAccessChain %80 %28 
                                                      OpStore %83 %81 
                                 Private f32* %85 = OpAccessChain %49 %76 
                                          f32 %86 = OpLoad %85 
                                 Uniform f32* %89 = OpAccessChain %21 %28 %87 
                                          f32 %90 = OpLoad %89 
                                          f32 %91 = OpFMul %86 %90 
                                 Private f32* %92 = OpAccessChain %49 %76 
                                                      OpStore %92 %91 
                                        f32_4 %95 = OpLoad %49 
                                        f32_3 %96 = OpVectorShuffle %95 %95 0 3 1 
                                        f32_3 %99 = OpFMul %96 %98 
                                       f32_4 %100 = OpLoad %93 
                                       f32_4 %101 = OpVectorShuffle %100 %99 4 1 5 6 
                                                      OpStore %93 %101 
                                       f32_4 %104 = OpLoad %49 
                                       f32_2 %105 = OpVectorShuffle %104 %104 2 3 
                                       f32_4 %106 = OpLoad vs_TEXCOORD0 
                                       f32_4 %107 = OpVectorShuffle %106 %105 0 1 4 5 
                                                      OpStore vs_TEXCOORD0 %107 
                                       f32_4 %108 = OpLoad %93 
                                       f32_2 %109 = OpVectorShuffle %108 %108 2 2 
                                       f32_4 %110 = OpLoad %93 
                                       f32_2 %111 = OpVectorShuffle %110 %110 0 3 
                                       f32_2 %112 = OpFAdd %109 %111 
                                       f32_4 %113 = OpLoad vs_TEXCOORD0 
                                       f32_4 %114 = OpVectorShuffle %113 %112 4 5 2 3 
                                                      OpStore vs_TEXCOORD0 %114 
                                       f32_4 %115 = OpLoad %9 
                                       f32_3 %116 = OpVectorShuffle %115 %115 1 1 1 
                              Uniform f32_4* %117 = OpAccessChain %21 %36 %23 
                                       f32_4 %118 = OpLoad %117 
                                       f32_3 %119 = OpVectorShuffle %118 %118 0 1 2 
                                       f32_3 %120 = OpFMul %116 %119 
                                       f32_4 %121 = OpLoad %49 
                                       f32_4 %122 = OpVectorShuffle %121 %120 4 5 6 3 
                                                      OpStore %49 %122 
                              Uniform f32_4* %123 = OpAccessChain %21 %36 %28 
                                       f32_4 %124 = OpLoad %123 
                                       f32_3 %125 = OpVectorShuffle %124 %124 0 1 2 
                                       f32_4 %126 = OpLoad %9 
                                       f32_3 %127 = OpVectorShuffle %126 %126 0 0 0 
                                       f32_3 %128 = OpFMul %125 %127 
                                       f32_4 %129 = OpLoad %49 
                                       f32_3 %130 = OpVectorShuffle %129 %129 0 1 2 
                                       f32_3 %131 = OpFAdd %128 %130 
                                       f32_4 %132 = OpLoad %49 
                                       f32_4 %133 = OpVectorShuffle %132 %131 4 5 6 3 
                                                      OpStore %49 %133 
                              Uniform f32_4* %134 = OpAccessChain %21 %36 %36 
                                       f32_4 %135 = OpLoad %134 
                                       f32_3 %136 = OpVectorShuffle %135 %135 0 1 2 
                                       f32_4 %137 = OpLoad %9 
                                       f32_3 %138 = OpVectorShuffle %137 %137 2 2 2 
                                       f32_3 %139 = OpFMul %136 %138 
                                       f32_4 %140 = OpLoad %49 
                                       f32_3 %141 = OpVectorShuffle %140 %140 0 1 2 
                                       f32_3 %142 = OpFAdd %139 %141 
                                       f32_4 %143 = OpLoad %9 
                                       f32_4 %144 = OpVectorShuffle %143 %142 4 5 6 3 
                                                      OpStore %9 %144 
                              Uniform f32_4* %145 = OpAccessChain %21 %36 %45 
                                       f32_4 %146 = OpLoad %145 
                                       f32_3 %147 = OpVectorShuffle %146 %146 0 1 2 
                                       f32_4 %148 = OpLoad %9 
                                       f32_3 %149 = OpVectorShuffle %148 %148 3 3 3 
                                       f32_3 %150 = OpFMul %147 %149 
                                       f32_4 %151 = OpLoad %9 
                                       f32_3 %152 = OpVectorShuffle %151 %151 0 1 2 
                                       f32_3 %153 = OpFAdd %150 %152 
                                       f32_4 %154 = OpLoad %9 
                                       f32_4 %155 = OpVectorShuffle %154 %153 4 5 6 3 
                                                      OpStore %9 %155 
                                       f32_4 %156 = OpLoad %9 
                                       f32_3 %157 = OpVectorShuffle %156 %156 0 1 2 
                                       f32_3 %161 = OpFMul %157 %160 
                                       f32_4 %162 = OpLoad %49 
                                       f32_4 %163 = OpVectorShuffle %162 %161 4 5 6 3 
                                                      OpStore %49 %163 
                                       f32_4 %164 = OpLoad %9 
                                       f32_3 %165 = OpVectorShuffle %164 %164 0 1 2 
                                       f32_3 %166 = OpFNegate %165 
                                       f32_3 %167 = OpFMul %166 %160 
                                       f32_3 %170 = OpLoad %169 
                                       f32_3 %171 = OpFAdd %167 %170 
                                       f32_4 %172 = OpLoad %9 
                                       f32_4 %173 = OpVectorShuffle %172 %171 4 5 6 3 
                                                      OpStore %9 %173 
                                Uniform f32* %177 = OpAccessChain %21 %176 
                                         f32 %178 = OpLoad %177 
                                       f32_3 %179 = OpCompositeConstruct %178 %178 %178 
                                       f32_4 %180 = OpLoad %9 
                                       f32_3 %181 = OpVectorShuffle %180 %180 0 1 2 
                                       f32_3 %182 = OpFMul %179 %181 
                                       f32_4 %183 = OpLoad %49 
                                       f32_3 %184 = OpVectorShuffle %183 %183 0 1 2 
                                       f32_3 %185 = OpFAdd %182 %184 
                                                      OpStore vs_TEXCOORD1 %185 
                                 Output f32* %187 = OpAccessChain %80 %28 %76 
                                         f32 %188 = OpLoad %187 
                                         f32 %189 = OpFNegate %188 
                                 Output f32* %190 = OpAccessChain %80 %28 %76 
                                                      OpStore %190 %189 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 565
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %24 %41 %560 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpDecorate %13 ArrayStride 13 
                                                      OpMemberDecorate %14 0 Offset 14 
                                                      OpMemberDecorate %14 1 Offset 14 
                                                      OpMemberDecorate %14 2 Offset 14 
                                                      OpMemberDecorate %14 3 Offset 14 
                                                      OpMemberDecorate %14 4 Offset 14 
                                                      OpMemberDecorate %14 5 Offset 14 
                                                      OpMemberDecorate %14 6 Offset 14 
                                                      OpMemberDecorate %14 7 Offset 14 
                                                      OpDecorate %14 Block 
                                                      OpDecorate %16 DescriptorSet 16 
                                                      OpDecorate %16 Binding 16 
                                                      OpDecorate vs_TEXCOORD1 Location 24 
                                                      OpDecorate vs_TEXCOORD0 Location 41 
                                                      OpDecorate %53 DescriptorSet 53 
                                                      OpDecorate %53 Binding 53 
                                                      OpDecorate %57 DescriptorSet 57 
                                                      OpDecorate %57 Binding 57 
                                                      OpDecorate %229 DescriptorSet 229 
                                                      OpDecorate %229 Binding 229 
                                                      OpDecorate %231 DescriptorSet 231 
                                                      OpDecorate %231 Binding 231 
                                                      OpDecorate %270 DescriptorSet 270 
                                                      OpDecorate %270 Binding 270 
                                                      OpDecorate %272 DescriptorSet 272 
                                                      OpDecorate %272 Binding 272 
                                                      OpDecorate %400 DescriptorSet 400 
                                                      OpDecorate %400 Binding 400 
                                                      OpDecorate %402 DescriptorSet 402 
                                                      OpDecorate %402 Binding 402 
                                                      OpDecorate %409 DescriptorSet 409 
                                                      OpDecorate %409 Binding 409 
                                                      OpDecorate %411 DescriptorSet 411 
                                                      OpDecorate %411 Binding 411 
                                                      OpDecorate %560 Location 560 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 3 
                                              %11 = OpTypeInt 32 0 
                                          u32 %12 = OpConstant 4 
                                              %13 = OpTypeArray %7 %12 
                                              %14 = OpTypeStruct %10 %7 %7 %13 %7 %7 %7 %7 
                                              %15 = OpTypePointer Uniform %14 
Uniform struct {f32_3; f32_4; f32_4; f32_4[4]; f32_4; f32_4; f32_4; f32_4;}* %16 = OpVariable Uniform 
                                              %17 = OpTypeInt 32 1 
                                          i32 %18 = OpConstant 1 
                                          u32 %19 = OpConstant 2 
                                              %20 = OpTypePointer Uniform %6 
                                              %23 = OpTypePointer Input %10 
                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                                              %25 = OpTypePointer Input %6 
                                          u32 %29 = OpConstant 0 
                                              %30 = OpTypePointer Private %6 
                                              %38 = OpTypePointer Private %10 
                               Private f32_3* %39 = OpVariable Private 
                                              %40 = OpTypePointer Input %7 
                        Input f32_4* vs_TEXCOORD0 = OpVariable Input 
                                              %42 = OpTypeVector %6 2 
                                 Private f32* %50 = OpVariable Private 
                                              %51 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %52 = OpTypePointer UniformConstant %51 
         UniformConstant read_only Texture2D* %53 = OpVariable UniformConstant 
                                              %55 = OpTypeSampler 
                                              %56 = OpTypePointer UniformConstant %55 
                     UniformConstant sampler* %57 = OpVariable UniformConstant 
                                              %59 = OpTypeSampledImage %51 
                                          i32 %65 = OpConstant 2 
                                          u32 %70 = OpConstant 1 
                                          f32 %74 = OpConstant 3.674022E-40 
                               Private f32_4* %77 = OpVariable Private 
                               Private f32_3* %85 = OpVariable Private 
                                          i32 %88 = OpConstant 3 
                                              %89 = OpTypePointer Uniform %7 
                                          i32 %94 = OpConstant 0 
                                             %126 = OpTypePointer Uniform %10 
                                         i32 %133 = OpConstant 5 
                                         u32 %160 = OpConstant 3 
                                         i32 %172 = OpConstant 4 
                                         f32 %182 = OpConstant 3.674022E-40 
                              Private f32_3* %185 = OpVariable Private 
                                         i32 %199 = OpConstant 6 
                                Private f32* %211 = OpVariable Private 
                                         f32 %218 = OpConstant 3.674022E-40 
        UniformConstant read_only Texture2D* %229 = OpVariable UniformConstant 
                    UniformConstant sampler* %231 = OpVariable UniformConstant 
                                         f32 %239 = OpConstant 3.674022E-40 
                                       f32_3 %240 = OpConstantComposite %239 %239 %239 
                                         f32 %242 = OpConstant 3.674022E-40 
                                       f32_3 %243 = OpConstantComposite %242 %242 %242 
                                Private f32* %260 = OpVariable Private 
        UniformConstant read_only Texture2D* %270 = OpVariable UniformConstant 
                    UniformConstant sampler* %272 = OpVariable UniformConstant 
                              Private f32_4* %278 = OpVariable Private 
                                       f32_4 %282 = OpConstantComposite %74 %74 %74 %74 
                                Private f32* %284 = OpVariable Private 
                                         f32 %291 = OpConstant 3.674022E-40 
                                Private f32* %293 = OpVariable Private 
                              Private f32_3* %297 = OpVariable Private 
                                         f32 %313 = OpConstant 3.674022E-40 
                                         f32 %316 = OpConstant 3.674022E-40 
                                Private f32* %326 = OpVariable Private 
                                         f32 %369 = OpConstant 3.674022E-40 
                                         f32 %371 = OpConstant 3.674022E-40 
                                         f32 %381 = OpConstant 3.674022E-40 
                                             %390 = OpTypeBool 
                                             %391 = OpTypePointer Private %390 
                               Private bool* %392 = OpVariable Private 
        UniformConstant read_only Texture2D* %400 = OpVariable UniformConstant 
                    UniformConstant sampler* %402 = OpVariable UniformConstant 
        UniformConstant read_only Texture2D* %409 = OpVariable UniformConstant 
                    UniformConstant sampler* %411 = OpVariable UniformConstant 
                                         i32 %432 = OpConstant 7 
                                         f32 %454 = OpConstant 3.674022E-40 
                                             %559 = OpTypePointer Output %7 
                               Output f32_4* %560 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                 Uniform f32* %21 = OpAccessChain %16 %18 %19 
                                          f32 %22 = OpLoad %21 
                                   Input f32* %26 = OpAccessChain vs_TEXCOORD1 %19 
                                          f32 %27 = OpLoad %26 
                                          f32 %28 = OpFDiv %22 %27 
                                 Private f32* %31 = OpAccessChain %9 %29 
                                                      OpStore %31 %28 
                                        f32_4 %32 = OpLoad %9 
                                        f32_3 %33 = OpVectorShuffle %32 %32 0 0 0 
                                        f32_3 %34 = OpLoad vs_TEXCOORD1 
                                        f32_3 %35 = OpFMul %33 %34 
                                        f32_4 %36 = OpLoad %9 
                                        f32_4 %37 = OpVectorShuffle %36 %35 4 5 6 3 
                                                      OpStore %9 %37 
                                        f32_4 %43 = OpLoad vs_TEXCOORD0 
                                        f32_2 %44 = OpVectorShuffle %43 %43 0 1 
                                        f32_4 %45 = OpLoad vs_TEXCOORD0 
                                        f32_2 %46 = OpVectorShuffle %45 %45 3 3 
                                        f32_2 %47 = OpFDiv %44 %46 
                                        f32_3 %48 = OpLoad %39 
                                        f32_3 %49 = OpVectorShuffle %48 %47 3 4 2 
                                                      OpStore %39 %49 
                          read_only Texture2D %54 = OpLoad %53 
                                      sampler %58 = OpLoad %57 
                   read_only Texture2DSampled %60 = OpSampledImage %54 %58 
                                        f32_3 %61 = OpLoad %39 
                                        f32_2 %62 = OpVectorShuffle %61 %61 0 1 
                                        f32_4 %63 = OpImageSampleImplicitLod %60 %62 
                                          f32 %64 = OpCompositeExtract %63 0 
                                                      OpStore %50 %64 
                                 Uniform f32* %66 = OpAccessChain %16 %65 %29 
                                          f32 %67 = OpLoad %66 
                                          f32 %68 = OpLoad %50 
                                          f32 %69 = OpFMul %67 %68 
                                 Uniform f32* %71 = OpAccessChain %16 %65 %70 
                                          f32 %72 = OpLoad %71 
                                          f32 %73 = OpFAdd %69 %72 
                                                      OpStore %50 %73 
                                          f32 %75 = OpLoad %50 
                                          f32 %76 = OpFDiv %74 %75 
                                                      OpStore %50 %76 
                                          f32 %78 = OpLoad %50 
                                        f32_3 %79 = OpCompositeConstruct %78 %78 %78 
                                        f32_4 %80 = OpLoad %9 
                                        f32_3 %81 = OpVectorShuffle %80 %80 0 1 2 
                                        f32_3 %82 = OpFMul %79 %81 
                                        f32_4 %83 = OpLoad %77 
                                        f32_4 %84 = OpVectorShuffle %83 %82 4 5 6 3 
                                                      OpStore %77 %84 
                                        f32_4 %86 = OpLoad %77 
                                        f32_3 %87 = OpVectorShuffle %86 %86 1 1 1 
                               Uniform f32_4* %90 = OpAccessChain %16 %88 %18 
                                        f32_4 %91 = OpLoad %90 
                                        f32_3 %92 = OpVectorShuffle %91 %91 0 1 2 
                                        f32_3 %93 = OpFMul %87 %92 
                                                      OpStore %85 %93 
                               Uniform f32_4* %95 = OpAccessChain %16 %88 %94 
                                        f32_4 %96 = OpLoad %95 
                                        f32_3 %97 = OpVectorShuffle %96 %96 0 1 2 
                                        f32_4 %98 = OpLoad %77 
                                        f32_3 %99 = OpVectorShuffle %98 %98 0 0 0 
                                       f32_3 %100 = OpFMul %97 %99 
                                       f32_3 %101 = OpLoad %85 
                                       f32_3 %102 = OpFAdd %100 %101 
                                       f32_4 %103 = OpLoad %77 
                                       f32_4 %104 = OpVectorShuffle %103 %102 4 5 2 6 
                                                      OpStore %77 %104 
                              Uniform f32_4* %105 = OpAccessChain %16 %88 %65 
                                       f32_4 %106 = OpLoad %105 
                                       f32_3 %107 = OpVectorShuffle %106 %106 0 1 2 
                                       f32_4 %108 = OpLoad %77 
                                       f32_3 %109 = OpVectorShuffle %108 %108 2 2 2 
                                       f32_3 %110 = OpFMul %107 %109 
                                       f32_4 %111 = OpLoad %77 
                                       f32_3 %112 = OpVectorShuffle %111 %111 0 1 3 
                                       f32_3 %113 = OpFAdd %110 %112 
                                       f32_4 %114 = OpLoad %77 
                                       f32_4 %115 = OpVectorShuffle %114 %113 4 5 2 6 
                                                      OpStore %77 %115 
                                       f32_4 %116 = OpLoad %77 
                                       f32_3 %117 = OpVectorShuffle %116 %116 0 1 3 
                              Uniform f32_4* %118 = OpAccessChain %16 %88 %88 
                                       f32_4 %119 = OpLoad %118 
                                       f32_3 %120 = OpVectorShuffle %119 %119 0 1 2 
                                       f32_3 %121 = OpFAdd %117 %120 
                                       f32_4 %122 = OpLoad %77 
                                       f32_4 %123 = OpVectorShuffle %122 %121 4 5 2 6 
                                                      OpStore %77 %123 
                                       f32_4 %124 = OpLoad %77 
                                       f32_3 %125 = OpVectorShuffle %124 %124 0 1 3 
                              Uniform f32_3* %127 = OpAccessChain %16 %94 
                                       f32_3 %128 = OpLoad %127 
                                       f32_3 %129 = OpFNegate %128 
                                       f32_3 %130 = OpFAdd %125 %129 
                                                      OpStore %85 %130 
                                       f32_4 %131 = OpLoad %77 
                                       f32_3 %132 = OpVectorShuffle %131 %131 0 1 3 
                              Uniform f32_4* %134 = OpAccessChain %16 %133 
                                       f32_4 %135 = OpLoad %134 
                                       f32_3 %136 = OpVectorShuffle %135 %135 0 1 2 
                                       f32_3 %137 = OpFNegate %136 
                                       f32_3 %138 = OpFAdd %132 %137 
                                       f32_4 %139 = OpLoad %77 
                                       f32_4 %140 = OpVectorShuffle %139 %138 4 5 2 6 
                                                      OpStore %77 %140 
                                       f32_4 %141 = OpLoad %77 
                                       f32_3 %142 = OpVectorShuffle %141 %141 0 1 3 
                                       f32_4 %143 = OpLoad %77 
                                       f32_3 %144 = OpVectorShuffle %143 %143 0 1 3 
                                         f32 %145 = OpDot %142 %144 
                                Private f32* %146 = OpAccessChain %9 %29 
                                                      OpStore %146 %145 
                                Private f32* %147 = OpAccessChain %9 %29 
                                         f32 %148 = OpLoad %147 
                                         f32 %149 = OpExtInst %1 31 %148 
                                Private f32* %150 = OpAccessChain %9 %29 
                                                      OpStore %150 %149 
                                Private f32* %151 = OpAccessChain %9 %19 
                                         f32 %152 = OpLoad %151 
                                         f32 %153 = OpFNegate %152 
                                         f32 %154 = OpLoad %50 
                                         f32 %155 = OpFMul %153 %154 
                                Private f32* %156 = OpAccessChain %9 %29 
                                         f32 %157 = OpLoad %156 
                                         f32 %158 = OpFAdd %155 %157 
                                Private f32* %159 = OpAccessChain %9 %29 
                                                      OpStore %159 %158 
                                Uniform f32* %161 = OpAccessChain %16 %133 %160 
                                         f32 %162 = OpLoad %161 
                                Private f32* %163 = OpAccessChain %9 %29 
                                         f32 %164 = OpLoad %163 
                                         f32 %165 = OpFMul %162 %164 
                                Private f32* %166 = OpAccessChain %77 %19 
                                         f32 %167 = OpLoad %166 
                                         f32 %168 = OpFAdd %165 %167 
                                Private f32* %169 = OpAccessChain %9 %29 
                                                      OpStore %169 %168 
                                Private f32* %170 = OpAccessChain %9 %29 
                                         f32 %171 = OpLoad %170 
                                Uniform f32* %173 = OpAccessChain %16 %172 %19 
                                         f32 %174 = OpLoad %173 
                                         f32 %175 = OpFMul %171 %174 
                                Uniform f32* %176 = OpAccessChain %16 %172 %160 
                                         f32 %177 = OpLoad %176 
                                         f32 %178 = OpFAdd %175 %177 
                                Private f32* %179 = OpAccessChain %9 %29 
                                                      OpStore %179 %178 
                                Private f32* %180 = OpAccessChain %9 %29 
                                         f32 %181 = OpLoad %180 
                                         f32 %183 = OpExtInst %1 43 %181 %182 %74 
                                Private f32* %184 = OpAccessChain %9 %29 
                                                      OpStore %184 %183 
                                       f32_3 %186 = OpLoad %85 
                                       f32_3 %187 = OpLoad %85 
                                         f32 %188 = OpDot %186 %187 
                                Private f32* %189 = OpAccessChain %185 %29 
                                                      OpStore %189 %188 
                                Private f32* %190 = OpAccessChain %185 %29 
                                         f32 %191 = OpLoad %190 
                                         f32 %192 = OpExtInst %1 32 %191 
                                Private f32* %193 = OpAccessChain %185 %29 
                                                      OpStore %193 %192 
                                       f32_3 %194 = OpLoad %85 
                                       f32_3 %195 = OpFNegate %194 
                                       f32_3 %196 = OpLoad %185 
                                       f32_3 %197 = OpVectorShuffle %196 %196 0 0 0 
                                       f32_3 %198 = OpFMul %195 %197 
                              Uniform f32_4* %200 = OpAccessChain %16 %199 
                                       f32_4 %201 = OpLoad %200 
                                       f32_3 %202 = OpVectorShuffle %201 %201 0 1 2 
                                       f32_3 %203 = OpFNegate %202 
                                       f32_3 %204 = OpFAdd %198 %203 
                                       f32_4 %205 = OpLoad %77 
                                       f32_4 %206 = OpVectorShuffle %205 %204 4 5 6 3 
                                                      OpStore %77 %206 
                                       f32_3 %207 = OpLoad %185 
                                       f32_3 %208 = OpVectorShuffle %207 %207 0 0 0 
                                       f32_3 %209 = OpLoad %85 
                                       f32_3 %210 = OpFMul %208 %209 
                                                      OpStore %185 %210 
                                       f32_4 %212 = OpLoad %77 
                                       f32_3 %213 = OpVectorShuffle %212 %212 0 1 2 
                                       f32_4 %214 = OpLoad %77 
                                       f32_3 %215 = OpVectorShuffle %214 %214 0 1 2 
                                         f32 %216 = OpDot %213 %215 
                                                      OpStore %211 %216 
                                         f32 %217 = OpLoad %211 
                                         f32 %219 = OpExtInst %1 40 %217 %218 
                                                      OpStore %211 %219 
                                         f32 %220 = OpLoad %211 
                                         f32 %221 = OpExtInst %1 32 %220 
                                                      OpStore %211 %221 
                                         f32 %222 = OpLoad %211 
                                       f32_3 %223 = OpCompositeConstruct %222 %222 %222 
                                       f32_4 %224 = OpLoad %77 
                                       f32_3 %225 = OpVectorShuffle %224 %224 0 1 2 
                                       f32_3 %226 = OpFMul %223 %225 
                                       f32_4 %227 = OpLoad %77 
                                       f32_4 %228 = OpVectorShuffle %227 %226 4 5 6 3 
                                                      OpStore %77 %228 
                         read_only Texture2D %230 = OpLoad %229 
                                     sampler %232 = OpLoad %231 
                  read_only Texture2DSampled %233 = OpSampledImage %230 %232 
                                       f32_3 %234 = OpLoad %39 
                                       f32_2 %235 = OpVectorShuffle %234 %234 0 1 
                                       f32_4 %236 = OpImageSampleImplicitLod %233 %235 
                                       f32_3 %237 = OpVectorShuffle %236 %236 0 1 2 
                                                      OpStore %85 %237 
                                       f32_3 %238 = OpLoad %85 
                                       f32_3 %241 = OpFMul %238 %240 
                                       f32_3 %244 = OpFAdd %241 %243 
                                                      OpStore %85 %244 
                                       f32_3 %245 = OpLoad %85 
                                       f32_3 %246 = OpLoad %85 
                                         f32 %247 = OpDot %245 %246 
                                                      OpStore %211 %247 
                                         f32 %248 = OpLoad %211 
                                         f32 %249 = OpExtInst %1 32 %248 
                                                      OpStore %211 %249 
                                         f32 %250 = OpLoad %211 
                                       f32_3 %251 = OpCompositeConstruct %250 %250 %250 
                                       f32_3 %252 = OpLoad %85 
                                       f32_3 %253 = OpFMul %251 %252 
                                                      OpStore %85 %253 
                                       f32_3 %254 = OpLoad %85 
                                       f32_4 %255 = OpLoad %77 
                                       f32_3 %256 = OpVectorShuffle %255 %255 0 1 2 
                                         f32 %257 = OpDot %254 %256 
                                                      OpStore %211 %257 
                                         f32 %258 = OpLoad %211 
                                         f32 %259 = OpExtInst %1 43 %258 %182 %74 
                                                      OpStore %211 %259 
                              Uniform f32_4* %261 = OpAccessChain %16 %199 
                                       f32_4 %262 = OpLoad %261 
                                       f32_3 %263 = OpVectorShuffle %262 %262 0 1 2 
                                       f32_3 %264 = OpFNegate %263 
                                       f32_4 %265 = OpLoad %77 
                                       f32_3 %266 = OpVectorShuffle %265 %265 0 1 2 
                                         f32 %267 = OpDot %264 %266 
                                                      OpStore %260 %267 
                                         f32 %268 = OpLoad %260 
                                         f32 %269 = OpExtInst %1 43 %268 %182 %74 
                                                      OpStore %260 %269 
                         read_only Texture2D %271 = OpLoad %270 
                                     sampler %273 = OpLoad %272 
                  read_only Texture2DSampled %274 = OpSampledImage %271 %273 
                                       f32_3 %275 = OpLoad %39 
                                       f32_2 %276 = OpVectorShuffle %275 %275 0 1 
                                       f32_4 %277 = OpImageSampleImplicitLod %274 %276 
                                                      OpStore %77 %277 
                                       f32_4 %279 = OpLoad %77 
                                       f32_4 %280 = OpVectorShuffle %279 %279 3 0 1 2 
                                       f32_4 %281 = OpFNegate %280 
                                       f32_4 %283 = OpFAdd %281 %282 
                                                      OpStore %278 %283 
                                Private f32* %285 = OpAccessChain %278 %29 
                                         f32 %286 = OpLoad %285 
                                Private f32* %287 = OpAccessChain %278 %29 
                                         f32 %288 = OpLoad %287 
                                         f32 %289 = OpFMul %286 %288 
                                                      OpStore %284 %289 
                                         f32 %290 = OpLoad %284 
                                         f32 %292 = OpExtInst %1 40 %290 %291 
                                                      OpStore %284 %292 
                                         f32 %294 = OpLoad %284 
                                         f32 %295 = OpLoad %284 
                                         f32 %296 = OpFMul %294 %295 
                                                      OpStore %293 %296 
                                         f32 %298 = OpLoad %211 
                                         f32 %299 = OpLoad %293 
                                         f32 %300 = OpFMul %298 %299 
                                         f32 %301 = OpLoad %211 
                                         f32 %302 = OpFNegate %301 
                                         f32 %303 = OpFAdd %300 %302 
                                Private f32* %304 = OpAccessChain %297 %29 
                                                      OpStore %304 %303 
                                Private f32* %305 = OpAccessChain %297 %29 
                                         f32 %306 = OpLoad %305 
                                         f32 %307 = OpLoad %211 
                                         f32 %308 = OpFMul %306 %307 
                                         f32 %309 = OpFAdd %308 %74 
                                                      OpStore %211 %309 
                                         f32 %310 = OpLoad %211 
                                         f32 %311 = OpLoad %211 
                                         f32 %312 = OpFMul %310 %311 
                                         f32 %314 = OpFAdd %312 %313 
                                                      OpStore %211 %314 
                                         f32 %315 = OpLoad %293 
                                         f32 %317 = OpFMul %315 %316 
                                                      OpStore %293 %317 
                                         f32 %318 = OpLoad %293 
                                         f32 %319 = OpLoad %211 
                                         f32 %320 = OpFDiv %318 %319 
                                                      OpStore %211 %320 
                                       f32_3 %321 = OpLoad %85 
                                       f32_3 %322 = OpLoad %185 
                                       f32_3 %323 = OpFNegate %322 
                                         f32 %324 = OpDot %321 %323 
                                Private f32* %325 = OpAccessChain %185 %29 
                                                      OpStore %325 %324 
                                       f32_3 %327 = OpLoad %85 
                              Uniform f32_4* %328 = OpAccessChain %16 %199 
                                       f32_4 %329 = OpLoad %328 
                                       f32_3 %330 = OpVectorShuffle %329 %329 0 1 2 
                                       f32_3 %331 = OpFNegate %330 
                                         f32 %332 = OpDot %327 %331 
                                                      OpStore %326 %332 
                                         f32 %333 = OpLoad %326 
                                         f32 %334 = OpExtInst %1 43 %333 %182 %74 
                                                      OpStore %326 %334 
                                         f32 %335 = OpLoad %284 
                                         f32 %336 = OpFNegate %335 
                                         f32 %337 = OpFAdd %336 %74 
                                                      OpStore %50 %337 
                                Private f32* %338 = OpAccessChain %185 %29 
                                         f32 %339 = OpLoad %338 
                                         f32 %340 = OpExtInst %1 4 %339 
                                         f32 %341 = OpLoad %50 
                                         f32 %342 = OpFMul %340 %341 
                                         f32 %343 = OpLoad %284 
                                         f32 %344 = OpFAdd %342 %343 
                                Private f32* %345 = OpAccessChain %85 %29 
                                                      OpStore %345 %344 
                                         f32 %346 = OpLoad %326 
                                         f32 %347 = OpLoad %50 
                                         f32 %348 = OpFMul %346 %347 
                                         f32 %349 = OpLoad %284 
                                         f32 %350 = OpFAdd %348 %349 
                                                      OpStore %50 %350 
                                         f32 %351 = OpLoad %50 
                                Private f32* %352 = OpAccessChain %185 %29 
                                         f32 %353 = OpLoad %352 
                                         f32 %354 = OpExtInst %1 4 %353 
                                         f32 %355 = OpFMul %351 %354 
                                                      OpStore %50 %355 
                                Private f32* %356 = OpAccessChain %185 %29 
                                         f32 %357 = OpLoad %356 
                                         f32 %358 = OpExtInst %1 4 %357 
                                         f32 %359 = OpFNegate %358 
                                         f32 %360 = OpFAdd %359 %74 
                                Private f32* %361 = OpAccessChain %185 %29 
                                                      OpStore %361 %360 
                                         f32 %362 = OpLoad %326 
                                Private f32* %363 = OpAccessChain %85 %29 
                                         f32 %364 = OpLoad %363 
                                         f32 %365 = OpFMul %362 %364 
                                         f32 %366 = OpLoad %50 
                                         f32 %367 = OpFAdd %365 %366 
                                                      OpStore %50 %367 
                                         f32 %368 = OpLoad %50 
                                         f32 %370 = OpFAdd %368 %369 
                                                      OpStore %50 %370 
                                         f32 %372 = OpLoad %50 
                                         f32 %373 = OpFDiv %371 %372 
                                                      OpStore %50 %373 
                                         f32 %374 = OpLoad %211 
                                         f32 %375 = OpLoad %50 
                                         f32 %376 = OpFMul %374 %375 
                                                      OpStore %50 %376 
                                         f32 %377 = OpLoad %326 
                                         f32 %378 = OpLoad %50 
                                         f32 %379 = OpFMul %377 %378 
                                                      OpStore %50 %379 
                                         f32 %380 = OpLoad %50 
                                         f32 %382 = OpFMul %380 %381 
                                                      OpStore %50 %382 
                                         f32 %383 = OpLoad %50 
                                         f32 %384 = OpExtInst %1 40 %383 %182 
                                                      OpStore %50 %384 
                                       f32_4 %385 = OpLoad %77 
                                       f32_3 %386 = OpVectorShuffle %385 %385 0 1 2 
                                       f32_4 %387 = OpLoad %77 
                                       f32_3 %388 = OpVectorShuffle %387 %387 0 1 2 
                                         f32 %389 = OpDot %386 %388 
                                                      OpStore %211 %389 
                                         f32 %393 = OpLoad %211 
                                        bool %394 = OpFOrdNotEqual %393 %182 
                                                      OpStore %392 %394 
                                        bool %395 = OpLoad %392 
                                         f32 %396 = OpSelect %395 %74 %182 
                                                      OpStore %211 %396 
                                         f32 %397 = OpLoad %50 
                                         f32 %398 = OpLoad %211 
                                         f32 %399 = OpFMul %397 %398 
                                                      OpStore %50 %399 
                         read_only Texture2D %401 = OpLoad %400 
                                     sampler %403 = OpLoad %402 
                  read_only Texture2DSampled %404 = OpSampledImage %401 %403 
                                       f32_3 %405 = OpLoad %39 
                                       f32_2 %406 = OpVectorShuffle %405 %405 0 1 
                                       f32_4 %407 = OpImageSampleImplicitLod %404 %406 
                                         f32 %408 = OpCompositeExtract %407 0 
                                                      OpStore %211 %408 
                         read_only Texture2D %410 = OpLoad %409 
                                     sampler %412 = OpLoad %411 
                  read_only Texture2DSampled %413 = OpSampledImage %410 %412 
                                       f32_3 %414 = OpLoad %39 
                                       f32_2 %415 = OpVectorShuffle %414 %414 0 1 
                                       f32_4 %416 = OpImageSampleImplicitLod %413 %415 
                                       f32_3 %417 = OpVectorShuffle %416 %416 0 1 2 
                                                      OpStore %85 %417 
                                         f32 %418 = OpLoad %211 
                                         f32 %419 = OpFNegate %418 
                                         f32 %420 = OpFAdd %419 %74 
                                Private f32* %421 = OpAccessChain %39 %29 
                                                      OpStore %421 %420 
                                Private f32* %422 = OpAccessChain %9 %29 
                                         f32 %423 = OpLoad %422 
                                Private f32* %424 = OpAccessChain %39 %29 
                                         f32 %425 = OpLoad %424 
                                         f32 %426 = OpFMul %423 %425 
                                         f32 %427 = OpLoad %211 
                                         f32 %428 = OpFAdd %426 %427 
                                Private f32* %429 = OpAccessChain %9 %29 
                                                      OpStore %429 %428 
                                       f32_4 %430 = OpLoad %9 
                                       f32_3 %431 = OpVectorShuffle %430 %430 0 0 0 
                              Uniform f32_4* %433 = OpAccessChain %16 %432 
                                       f32_4 %434 = OpLoad %433 
                                       f32_3 %435 = OpVectorShuffle %434 %434 0 1 2 
                                       f32_3 %436 = OpFMul %431 %435 
                                                      OpStore %39 %436 
                                         f32 %437 = OpLoad %50 
                                       f32_3 %438 = OpCompositeConstruct %437 %437 %437 
                                       f32_3 %439 = OpLoad %39 
                                       f32_3 %440 = OpFMul %438 %439 
                                                      OpStore %297 %440 
                                         f32 %441 = OpLoad %260 
                                         f32 %442 = OpFNegate %441 
                                         f32 %443 = OpFAdd %442 %74 
                                Private f32* %444 = OpAccessChain %9 %29 
                                                      OpStore %444 %443 
                                         f32 %445 = OpLoad %260 
                                         f32 %446 = OpLoad %260 
                                         f32 %447 = OpFMul %445 %446 
                                                      OpStore %50 %447 
                                         f32 %448 = OpLoad %50 
                                       f32_2 %449 = OpCompositeConstruct %448 %448 
                                       f32_4 %450 = OpLoad %278 
                                       f32_2 %451 = OpVectorShuffle %450 %450 0 0 
                                         f32 %452 = OpDot %449 %451 
                                                      OpStore %50 %452 
                                         f32 %453 = OpLoad %50 
                                         f32 %455 = OpFAdd %453 %454 
                                                      OpStore %50 %455 
                                Private f32* %456 = OpAccessChain %9 %29 
                                         f32 %457 = OpLoad %456 
                                Private f32* %458 = OpAccessChain %9 %29 
                                         f32 %459 = OpLoad %458 
                                         f32 %460 = OpFMul %457 %459 
                                                      OpStore %260 %460 
                                         f32 %461 = OpLoad %260 
                                         f32 %462 = OpLoad %260 
                                         f32 %463 = OpFMul %461 %462 
                                                      OpStore %260 %463 
                                Private f32* %464 = OpAccessChain %9 %29 
                                         f32 %465 = OpLoad %464 
                                         f32 %466 = OpLoad %260 
                                         f32 %467 = OpFMul %465 %466 
                                Private f32* %468 = OpAccessChain %9 %29 
                                                      OpStore %468 %467 
                                       f32_4 %469 = OpLoad %278 
                                       f32_3 %470 = OpVectorShuffle %469 %469 1 2 3 
                                       f32_4 %471 = OpLoad %9 
                                       f32_3 %472 = OpVectorShuffle %471 %471 0 0 0 
                                       f32_3 %473 = OpFMul %470 %472 
                                       f32_4 %474 = OpLoad %77 
                                       f32_3 %475 = OpVectorShuffle %474 %474 0 1 2 
                                       f32_3 %476 = OpFAdd %473 %475 
                                       f32_4 %477 = OpLoad %77 
                                       f32_4 %478 = OpVectorShuffle %477 %476 4 5 6 3 
                                                      OpStore %77 %478 
                                       f32_4 %479 = OpLoad %77 
                                       f32_3 %480 = OpVectorShuffle %479 %479 0 1 2 
                                       f32_3 %481 = OpLoad %297 
                                       f32_3 %482 = OpFMul %480 %481 
                                       f32_4 %483 = OpLoad %77 
                                       f32_4 %484 = OpVectorShuffle %483 %482 4 5 6 3 
                                                      OpStore %77 %484 
                                Private f32* %485 = OpAccessChain %185 %29 
                                         f32 %486 = OpLoad %485 
                                Private f32* %487 = OpAccessChain %185 %29 
                                         f32 %488 = OpLoad %487 
                                         f32 %489 = OpFMul %486 %488 
                                Private f32* %490 = OpAccessChain %9 %29 
                                                      OpStore %490 %489 
                                Private f32* %491 = OpAccessChain %9 %29 
                                         f32 %492 = OpLoad %491 
                                Private f32* %493 = OpAccessChain %9 %29 
                                         f32 %494 = OpLoad %493 
                                         f32 %495 = OpFMul %492 %494 
                                Private f32* %496 = OpAccessChain %9 %29 
                                                      OpStore %496 %495 
                                Private f32* %497 = OpAccessChain %185 %29 
                                         f32 %498 = OpLoad %497 
                                Private f32* %499 = OpAccessChain %9 %29 
                                         f32 %500 = OpLoad %499 
                                         f32 %501 = OpFMul %498 %500 
                                Private f32* %502 = OpAccessChain %9 %29 
                                                      OpStore %502 %501 
                                         f32 %503 = OpLoad %50 
                                Private f32* %504 = OpAccessChain %9 %29 
                                         f32 %505 = OpLoad %504 
                                         f32 %506 = OpFMul %503 %505 
                                         f32 %507 = OpFAdd %506 %74 
                                Private f32* %508 = OpAccessChain %9 %29 
                                                      OpStore %508 %507 
                                         f32 %509 = OpLoad %326 
                                         f32 %510 = OpFNegate %509 
                                         f32 %511 = OpFAdd %510 %74 
                                Private f32* %512 = OpAccessChain %185 %29 
                                                      OpStore %512 %511 
                                Private f32* %513 = OpAccessChain %185 %29 
                                         f32 %514 = OpLoad %513 
                                Private f32* %515 = OpAccessChain %185 %29 
                                         f32 %516 = OpLoad %515 
                                         f32 %517 = OpFMul %514 %516 
                                                      OpStore %260 %517 
                                         f32 %518 = OpLoad %260 
                                         f32 %519 = OpLoad %260 
                                         f32 %520 = OpFMul %518 %519 
                                                      OpStore %260 %520 
                                Private f32* %521 = OpAccessChain %185 %29 
                                         f32 %522 = OpLoad %521 
                                         f32 %523 = OpLoad %260 
                                         f32 %524 = OpFMul %522 %523 
                                Private f32* %525 = OpAccessChain %185 %29 
                                                      OpStore %525 %524 
                                         f32 %526 = OpLoad %50 
                                Private f32* %527 = OpAccessChain %185 %29 
                                         f32 %528 = OpLoad %527 
                                         f32 %529 = OpFMul %526 %528 
                                         f32 %530 = OpFAdd %529 %74 
                                Private f32* %531 = OpAccessChain %185 %29 
                                                      OpStore %531 %530 
                                Private f32* %532 = OpAccessChain %9 %29 
                                         f32 %533 = OpLoad %532 
                                Private f32* %534 = OpAccessChain %185 %29 
                                         f32 %535 = OpLoad %534 
                                         f32 %536 = OpFMul %533 %535 
                                Private f32* %537 = OpAccessChain %9 %29 
                                                      OpStore %537 %536 
                                         f32 %538 = OpLoad %326 
                                Private f32* %539 = OpAccessChain %9 %29 
                                         f32 %540 = OpLoad %539 
                                         f32 %541 = OpFMul %538 %540 
                                Private f32* %542 = OpAccessChain %9 %29 
                                                      OpStore %542 %541 
                                       f32_4 %543 = OpLoad %9 
                                       f32_3 %544 = OpVectorShuffle %543 %543 0 0 0 
                                       f32_3 %545 = OpLoad %39 
                                       f32_3 %546 = OpFMul %544 %545 
                                       f32_4 %547 = OpLoad %9 
                                       f32_4 %548 = OpVectorShuffle %547 %546 4 5 6 3 
                                                      OpStore %9 %548 
                                       f32_3 %549 = OpLoad %85 
                                       f32_4 %550 = OpLoad %9 
                                       f32_3 %551 = OpVectorShuffle %550 %550 0 1 2 
                                       f32_3 %552 = OpFMul %549 %551 
                                       f32_4 %553 = OpLoad %77 
                                       f32_3 %554 = OpVectorShuffle %553 %553 0 1 2 
                                       f32_3 %555 = OpFAdd %552 %554 
                                       f32_4 %556 = OpLoad %9 
                                       f32_4 %557 = OpVectorShuffle %556 %555 4 5 6 3 
                                                      OpStore %9 %557 
                                Private f32* %558 = OpAccessChain %9 %160 
                                                      OpStore %558 %74 
                                       f32_4 %561 = OpLoad %9 
                                       f32_4 %562 = OpFNegate %561 
                                       f32_4 %563 = OpExtInst %1 29 %562 
                                                      OpStore %560 %563 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightColor;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
UNITY_LOCATION(0) uniform  sampler2D _CameraDepthTexture;
UNITY_LOCATION(1) uniform  sampler2D _ShadowMapTexture;
UNITY_LOCATION(2) uniform  sampler2D _LightTexture0;
UNITY_LOCATION(3) uniform  sampler2D _CameraGBufferTexture0;
UNITY_LOCATION(4) uniform  sampler2D _CameraGBufferTexture1;
UNITY_LOCATION(5) uniform  sampler2D _CameraGBufferTexture2;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec2 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
vec4 u_xlat6;
vec2 u_xlat7;
float u_xlat8;
float u_xlat9;
float u_xlat15;
float u_xlat21;
float u_xlat22;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat2 = texture(_CameraDepthTexture, u_xlat1.xy);
    u_xlat21 = _ZBufferParams.x * u_xlat2.x + _ZBufferParams.y;
    u_xlat21 = float(1.0) / u_xlat21;
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat21 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat3 = texture(_ShadowMapTexture, u_xlat1.xy);
    u_xlat7.x = (-u_xlat3.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat7.x + u_xlat3.x;
    u_xlat7.xy = u_xlat2.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
    u_xlat7.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat2.xx + u_xlat7.xy;
    u_xlat7.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat2.ww + u_xlat7.xy;
    u_xlat2.xyz = u_xlat2.xyw + (-_WorldSpaceCameraPos.xyz);
    u_xlat7.xy = u_xlat7.xy + hlslcc_mtx4x4unity_WorldToLight[3].xy;
    u_xlat3 = texture(_LightTexture0, u_xlat7.xy, -8.0);
    u_xlat0.x = u_xlat0.x * u_xlat3.w;
    u_xlat0.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat3.xyz = (-u_xlat2.xyz) * vec3(u_xlat21) + (-_LightDir.xyz);
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat21 = max(u_xlat21, 0.00100000005);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz;
    u_xlat4 = texture(_CameraGBufferTexture2, u_xlat1.xy);
    u_xlat4.xyz = u_xlat4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat21 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;
    u_xlat21 = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
    u_xlat15 = dot((-_LightDir.xyz), u_xlat3.xyz);
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
    u_xlat3 = texture(_CameraGBufferTexture1, u_xlat1.xy);
    u_xlat5 = texture(_CameraGBufferTexture0, u_xlat1.xy);
    u_xlat6 = (-u_xlat3.wxyz) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat1.x = u_xlat6.x * u_xlat6.x;
    u_xlat1.x = max(u_xlat1.x, 0.00200000009);
    u_xlat8 = u_xlat1.x * u_xlat1.x;
    u_xlat22 = u_xlat21 * u_xlat8 + (-u_xlat21);
    u_xlat21 = u_xlat22 * u_xlat21 + 1.0;
    u_xlat21 = u_xlat21 * u_xlat21 + 1.00000001e-07;
    u_xlat8 = u_xlat8 * 0.318309873;
    u_xlat21 = u_xlat8 / u_xlat21;
    u_xlat8 = dot(u_xlat4.xyz, (-u_xlat2.xyz));
    u_xlat22 = dot(u_xlat4.xyz, (-_LightDir.xyz));
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
    u_xlat2.x = (-u_xlat1.x) + 1.0;
    u_xlat9 = abs(u_xlat8) * u_xlat2.x + u_xlat1.x;
    u_xlat1.x = u_xlat22 * u_xlat2.x + u_xlat1.x;
    u_xlat1.x = u_xlat1.x * abs(u_xlat8);
    u_xlat8 = -abs(u_xlat8) + 1.0;
    u_xlat1.x = u_xlat22 * u_xlat9 + u_xlat1.x;
    u_xlat1.x = u_xlat1.x + 9.99999975e-06;
    u_xlat1.x = 0.5 / u_xlat1.x;
    u_xlat21 = u_xlat21 * u_xlat1.x;
    u_xlat21 = u_xlat21 * 3.14159274;
    u_xlat21 = u_xlat22 * u_xlat21;
    u_xlat21 = max(u_xlat21, 0.0);
    u_xlat1.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlatb1 = u_xlat1.x!=0.0;
    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
    u_xlat21 = u_xlat21 * u_xlat1.x;
    u_xlat2.xyz = u_xlat0.xyz * vec3(u_xlat21);
    u_xlat21 = (-u_xlat15) + 1.0;
    u_xlat1.x = u_xlat15 * u_xlat15;
    u_xlat1.x = dot(u_xlat1.xx, u_xlat6.xx);
    u_xlat1.x = u_xlat1.x + -0.5;
    u_xlat15 = u_xlat21 * u_xlat21;
    u_xlat15 = u_xlat15 * u_xlat15;
    u_xlat21 = u_xlat21 * u_xlat15;
    u_xlat3.xyz = u_xlat6.yzw * vec3(u_xlat21) + u_xlat3.xyz;
    u_xlat2.xyz = u_xlat2.xyz * u_xlat3.xyz;
    u_xlat21 = u_xlat8 * u_xlat8;
    u_xlat21 = u_xlat21 * u_xlat21;
    u_xlat21 = u_xlat8 * u_xlat21;
    u_xlat21 = u_xlat1.x * u_xlat21 + 1.0;
    u_xlat8 = (-u_xlat22) + 1.0;
    u_xlat15 = u_xlat8 * u_xlat8;
    u_xlat15 = u_xlat15 * u_xlat15;
    u_xlat8 = u_xlat8 * u_xlat15;
    u_xlat1.x = u_xlat1.x * u_xlat8 + 1.0;
    u_xlat21 = u_xlat21 * u_xlat1.x;
    u_xlat21 = u_xlat22 * u_xlat21;
    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat0.xyz = u_xlat5.xyz * u_xlat0.xyz + u_xlat2.xyz;
    u_xlat0.w = 1.0;
    SV_Target0 = exp2((-u_xlat0));
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 192
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %80 %102 %169 %175 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpMemberDecorate %78 0 BuiltIn 78 
                                                      OpMemberDecorate %78 1 BuiltIn 78 
                                                      OpMemberDecorate %78 2 BuiltIn 78 
                                                      OpDecorate %78 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 102 
                                                      OpDecorate %169 Location 169 
                                                      OpDecorate vs_TEXCOORD1 Location 175 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %16 %17 %18 %6 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 1 
                                              %24 = OpTypePointer Uniform %7 
                                          i32 %28 = OpConstant 0 
                                          i32 %36 = OpConstant 2 
                                          i32 %45 = OpConstant 3 
                               Private f32_4* %49 = OpVariable Private 
                                          u32 %76 = OpConstant 1 
                                              %77 = OpTypeArray %6 %76 
                                              %78 = OpTypeStruct %7 %6 %77 
                                              %79 = OpTypePointer Output %78 
         Output struct {f32_4; f32; f32[1];}* %80 = OpVariable Output 
                                              %82 = OpTypePointer Output %7 
                                              %84 = OpTypePointer Private %6 
                                          u32 %87 = OpConstant 0 
                                              %88 = OpTypePointer Uniform %6 
                               Private f32_4* %93 = OpVariable Private 
                                              %94 = OpTypeVector %6 3 
                                          f32 %97 = OpConstant 3.674022E-40 
                                        f32_3 %98 = OpConstantComposite %97 %97 %97 
                       Output f32_4* vs_TEXCOORD0 = OpVariable Output 
                                             %103 = OpTypeVector %6 2 
                                         f32 %158 = OpConstant 3.674022E-40 
                                         f32 %159 = OpConstant 3.674022E-40 
                                       f32_3 %160 = OpConstantComposite %158 %158 %159 
                                             %168 = OpTypePointer Input %94 
                                Input f32_3* %169 = OpVariable Input 
                                             %174 = OpTypePointer Output %94 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                                         i32 %176 = OpConstant 4 
                                             %186 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %25 = OpAccessChain %21 %23 %23 
                                        f32_4 %26 = OpLoad %25 
                                        f32_4 %27 = OpFMul %13 %26 
                                                      OpStore %9 %27 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %28 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %44 = OpLoad %9 
                               Uniform f32_4* %46 = OpAccessChain %21 %23 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_4 %48 = OpFAdd %44 %47 
                                                      OpStore %9 %48 
                                        f32_4 %50 = OpLoad %9 
                                        f32_4 %51 = OpVectorShuffle %50 %50 1 1 1 1 
                               Uniform f32_4* %52 = OpAccessChain %21 %45 %23 
                                        f32_4 %53 = OpLoad %52 
                                        f32_4 %54 = OpFMul %51 %53 
                                                      OpStore %49 %54 
                               Uniform f32_4* %55 = OpAccessChain %21 %45 %28 
                                        f32_4 %56 = OpLoad %55 
                                        f32_4 %57 = OpLoad %9 
                                        f32_4 %58 = OpVectorShuffle %57 %57 0 0 0 0 
                                        f32_4 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %49 
                                        f32_4 %61 = OpFAdd %59 %60 
                                                      OpStore %49 %61 
                               Uniform f32_4* %62 = OpAccessChain %21 %45 %36 
                                        f32_4 %63 = OpLoad %62 
                                        f32_4 %64 = OpLoad %9 
                                        f32_4 %65 = OpVectorShuffle %64 %64 2 2 2 2 
                                        f32_4 %66 = OpFMul %63 %65 
                                        f32_4 %67 = OpLoad %49 
                                        f32_4 %68 = OpFAdd %66 %67 
                                                      OpStore %49 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %45 %45 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %9 
                                        f32_4 %72 = OpVectorShuffle %71 %71 3 3 3 3 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %49 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %49 %75 
                                        f32_4 %81 = OpLoad %49 
                                Output f32_4* %83 = OpAccessChain %80 %28 
                                                      OpStore %83 %81 
                                 Private f32* %85 = OpAccessChain %49 %76 
                                          f32 %86 = OpLoad %85 
                                 Uniform f32* %89 = OpAccessChain %21 %28 %87 
                                          f32 %90 = OpLoad %89 
                                          f32 %91 = OpFMul %86 %90 
                                 Private f32* %92 = OpAccessChain %49 %76 
                                                      OpStore %92 %91 
                                        f32_4 %95 = OpLoad %49 
                                        f32_3 %96 = OpVectorShuffle %95 %95 0 3 1 
                                        f32_3 %99 = OpFMul %96 %98 
                                       f32_4 %100 = OpLoad %93 
                                       f32_4 %101 = OpVectorShuffle %100 %99 4 1 5 6 
                                                      OpStore %93 %101 
                                       f32_4 %104 = OpLoad %49 
                                       f32_2 %105 = OpVectorShuffle %104 %104 2 3 
                                       f32_4 %106 = OpLoad vs_TEXCOORD0 
                                       f32_4 %107 = OpVectorShuffle %106 %105 0 1 4 5 
                                                      OpStore vs_TEXCOORD0 %107 
                                       f32_4 %108 = OpLoad %93 
                                       f32_2 %109 = OpVectorShuffle %108 %108 2 2 
                                       f32_4 %110 = OpLoad %93 
                                       f32_2 %111 = OpVectorShuffle %110 %110 0 3 
                                       f32_2 %112 = OpFAdd %109 %111 
                                       f32_4 %113 = OpLoad vs_TEXCOORD0 
                                       f32_4 %114 = OpVectorShuffle %113 %112 4 5 2 3 
                                                      OpStore vs_TEXCOORD0 %114 
                                       f32_4 %115 = OpLoad %9 
                                       f32_3 %116 = OpVectorShuffle %115 %115 1 1 1 
                              Uniform f32_4* %117 = OpAccessChain %21 %36 %23 
                                       f32_4 %118 = OpLoad %117 
                                       f32_3 %119 = OpVectorShuffle %118 %118 0 1 2 
                                       f32_3 %120 = OpFMul %116 %119 
                                       f32_4 %121 = OpLoad %49 
                                       f32_4 %122 = OpVectorShuffle %121 %120 4 5 6 3 
                                                      OpStore %49 %122 
                              Uniform f32_4* %123 = OpAccessChain %21 %36 %28 
                                       f32_4 %124 = OpLoad %123 
                                       f32_3 %125 = OpVectorShuffle %124 %124 0 1 2 
                                       f32_4 %126 = OpLoad %9 
                                       f32_3 %127 = OpVectorShuffle %126 %126 0 0 0 
                                       f32_3 %128 = OpFMul %125 %127 
                                       f32_4 %129 = OpLoad %49 
                                       f32_3 %130 = OpVectorShuffle %129 %129 0 1 2 
                                       f32_3 %131 = OpFAdd %128 %130 
                                       f32_4 %132 = OpLoad %49 
                                       f32_4 %133 = OpVectorShuffle %132 %131 4 5 6 3 
                                                      OpStore %49 %133 
                              Uniform f32_4* %134 = OpAccessChain %21 %36 %36 
                                       f32_4 %135 = OpLoad %134 
                                       f32_3 %136 = OpVectorShuffle %135 %135 0 1 2 
                                       f32_4 %137 = OpLoad %9 
                                       f32_3 %138 = OpVectorShuffle %137 %137 2 2 2 
                                       f32_3 %139 = OpFMul %136 %138 
                                       f32_4 %140 = OpLoad %49 
                                       f32_3 %141 = OpVectorShuffle %140 %140 0 1 2 
                                       f32_3 %142 = OpFAdd %139 %141 
                                       f32_4 %143 = OpLoad %9 
                                       f32_4 %144 = OpVectorShuffle %143 %142 4 5 6 3 
                                                      OpStore %9 %144 
                              Uniform f32_4* %145 = OpAccessChain %21 %36 %45 
                                       f32_4 %146 = OpLoad %145 
                                       f32_3 %147 = OpVectorShuffle %146 %146 0 1 2 
                                       f32_4 %148 = OpLoad %9 
                                       f32_3 %149 = OpVectorShuffle %148 %148 3 3 3 
                                       f32_3 %150 = OpFMul %147 %149 
                                       f32_4 %151 = OpLoad %9 
                                       f32_3 %152 = OpVectorShuffle %151 %151 0 1 2 
                                       f32_3 %153 = OpFAdd %150 %152 
                                       f32_4 %154 = OpLoad %9 
                                       f32_4 %155 = OpVectorShuffle %154 %153 4 5 6 3 
                                                      OpStore %9 %155 
                                       f32_4 %156 = OpLoad %9 
                                       f32_3 %157 = OpVectorShuffle %156 %156 0 1 2 
                                       f32_3 %161 = OpFMul %157 %160 
                                       f32_4 %162 = OpLoad %49 
                                       f32_4 %163 = OpVectorShuffle %162 %161 4 5 6 3 
                                                      OpStore %49 %163 
                                       f32_4 %164 = OpLoad %9 
                                       f32_3 %165 = OpVectorShuffle %164 %164 0 1 2 
                                       f32_3 %166 = OpFNegate %165 
                                       f32_3 %167 = OpFMul %166 %160 
                                       f32_3 %170 = OpLoad %169 
                                       f32_3 %171 = OpFAdd %167 %170 
                                       f32_4 %172 = OpLoad %9 
                                       f32_4 %173 = OpVectorShuffle %172 %171 4 5 6 3 
                                                      OpStore %9 %173 
                                Uniform f32* %177 = OpAccessChain %21 %176 
                                         f32 %178 = OpLoad %177 
                                       f32_3 %179 = OpCompositeConstruct %178 %178 %178 
                                       f32_4 %180 = OpLoad %9 
                                       f32_3 %181 = OpVectorShuffle %180 %180 0 1 2 
                                       f32_3 %182 = OpFMul %179 %181 
                                       f32_4 %183 = OpLoad %49 
                                       f32_3 %184 = OpVectorShuffle %183 %183 0 1 2 
                                       f32_3 %185 = OpFAdd %182 %184 
                                                      OpStore vs_TEXCOORD1 %185 
                                 Output f32* %187 = OpAccessChain %80 %28 %76 
                                         f32 %188 = OpLoad %187 
                                         f32 %189 = OpFNegate %188 
                                 Output f32* %190 = OpAccessChain %80 %28 %76 
                                                      OpStore %190 %189 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 607
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %25 %41 %602 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpDecorate %13 ArrayStride 13 
                                                      OpDecorate %14 ArrayStride 14 
                                                      OpMemberDecorate %15 0 Offset 15 
                                                      OpMemberDecorate %15 1 Offset 15 
                                                      OpMemberDecorate %15 2 Offset 15 
                                                      OpMemberDecorate %15 3 Offset 15 
                                                      OpMemberDecorate %15 4 Offset 15 
                                                      OpMemberDecorate %15 5 Offset 15 
                                                      OpMemberDecorate %15 6 Offset 15 
                                                      OpMemberDecorate %15 7 Offset 15 
                                                      OpMemberDecorate %15 8 Offset 15 
                                                      OpDecorate %15 Block 
                                                      OpDecorate %17 DescriptorSet 17 
                                                      OpDecorate %17 Binding 17 
                                                      OpDecorate vs_TEXCOORD1 Location 25 
                                                      OpDecorate vs_TEXCOORD0 Location 41 
                                                      OpDecorate %53 DescriptorSet 53 
                                                      OpDecorate %53 Binding 53 
                                                      OpDecorate %57 DescriptorSet 57 
                                                      OpDecorate %57 Binding 57 
                                                      OpDecorate %183 DescriptorSet 183 
                                                      OpDecorate %183 Binding 183 
                                                      OpDecorate %185 DescriptorSet 185 
                                                      OpDecorate %185 Binding 185 
                                                      OpDecorate %243 DescriptorSet 243 
                                                      OpDecorate %243 Binding 243 
                                                      OpDecorate %245 DescriptorSet 245 
                                                      OpDecorate %245 Binding 245 
                                                      OpDecorate %315 DescriptorSet 315 
                                                      OpDecorate %315 Binding 315 
                                                      OpDecorate %317 DescriptorSet 317 
                                                      OpDecorate %317 Binding 317 
                                                      OpDecorate %356 DescriptorSet 356 
                                                      OpDecorate %356 Binding 356 
                                                      OpDecorate %358 DescriptorSet 358 
                                                      OpDecorate %358 Binding 358 
                                                      OpDecorate %364 DescriptorSet 364 
                                                      OpDecorate %364 Binding 364 
                                                      OpDecorate %366 DescriptorSet 366 
                                                      OpDecorate %366 Binding 366 
                                                      OpDecorate %602 Location 602 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 3 
                                              %11 = OpTypeInt 32 0 
                                          u32 %12 = OpConstant 4 
                                              %13 = OpTypeArray %7 %12 
                                              %14 = OpTypeArray %7 %12 
                                              %15 = OpTypeStruct %10 %7 %7 %13 %7 %7 %7 %7 %14 
                                              %16 = OpTypePointer Uniform %15 
Uniform struct {f32_3; f32_4; f32_4; f32_4[4]; f32_4; f32_4; f32_4; f32_4; f32_4[4];}* %17 = OpVariable Uniform 
                                              %18 = OpTypeInt 32 1 
                                          i32 %19 = OpConstant 1 
                                          u32 %20 = OpConstant 2 
                                              %21 = OpTypePointer Uniform %6 
                                              %24 = OpTypePointer Input %10 
                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                                              %26 = OpTypePointer Input %6 
                                          u32 %30 = OpConstant 0 
                                              %31 = OpTypePointer Private %6 
                               Private f32_4* %39 = OpVariable Private 
                                              %40 = OpTypePointer Input %7 
                        Input f32_4* vs_TEXCOORD0 = OpVariable Input 
                                              %42 = OpTypeVector %6 2 
                                 Private f32* %50 = OpVariable Private 
                                              %51 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %52 = OpTypePointer UniformConstant %51 
         UniformConstant read_only Texture2D* %53 = OpVariable UniformConstant 
                                              %55 = OpTypeSampler 
                                              %56 = OpTypePointer UniformConstant %55 
                     UniformConstant sampler* %57 = OpVariable UniformConstant 
                                              %59 = OpTypeSampledImage %51 
                                          i32 %65 = OpConstant 2 
                                          u32 %70 = OpConstant 1 
                                          f32 %74 = OpConstant 3.674022E-40 
                               Private f32_4* %77 = OpVariable Private 
                               Private f32_4* %85 = OpVariable Private 
                                          i32 %88 = OpConstant 3 
                                              %89 = OpTypePointer Uniform %7 
                                          i32 %96 = OpConstant 0 
                                         i32 %129 = OpConstant 5 
                                         u32 %156 = OpConstant 3 
                                         i32 %168 = OpConstant 4 
                                         f32 %178 = OpConstant 3.674022E-40 
                                             %181 = OpTypePointer Private %42 
                              Private f32_2* %182 = OpVariable Private 
        UniformConstant read_only Texture2D* %183 = OpVariable UniformConstant 
                    UniformConstant sampler* %185 = OpVariable UniformConstant 
                                Private f32* %193 = OpVariable Private 
                                         i32 %208 = OpConstant 8 
                                             %231 = OpTypePointer Uniform %10 
        UniformConstant read_only Texture2D* %243 = OpVariable UniformConstant 
                    UniformConstant sampler* %245 = OpVariable UniformConstant 
                                         f32 %249 = OpConstant 3.674022E-40 
                                         i32 %261 = OpConstant 7 
                                         i32 %281 = OpConstant 6 
                                         f32 %302 = OpConstant 3.674022E-40 
                                             %313 = OpTypePointer Private %10 
                              Private f32_3* %314 = OpVariable Private 
        UniformConstant read_only Texture2D* %315 = OpVariable UniformConstant 
                    UniformConstant sampler* %317 = OpVariable UniformConstant 
                                         f32 %325 = OpConstant 3.674022E-40 
                                       f32_3 %326 = OpConstantComposite %325 %325 %325 
                                         f32 %328 = OpConstant 3.674022E-40 
                                       f32_3 %329 = OpConstantComposite %328 %328 %328 
                                Private f32* %346 = OpVariable Private 
        UniformConstant read_only Texture2D* %356 = OpVariable UniformConstant 
                    UniformConstant sampler* %358 = OpVariable UniformConstant 
        UniformConstant read_only Texture2D* %364 = OpVariable UniformConstant 
                    UniformConstant sampler* %366 = OpVariable UniformConstant 
                              Private f32_4* %375 = OpVariable Private 
                                       f32_4 %379 = OpConstantComposite %74 %74 %74 %74 
                                Private f32* %381 = OpVariable Private 
                                         f32 %388 = OpConstant 3.674022E-40 
                                Private f32* %390 = OpVariable Private 
                                Private f32* %394 = OpVariable Private 
                                         f32 %408 = OpConstant 3.674022E-40 
                                         f32 %411 = OpConstant 3.674022E-40 
                                Private f32* %422 = OpVariable Private 
                                Private f32* %431 = OpVariable Private 
                                         f32 %464 = OpConstant 3.674022E-40 
                                         f32 %466 = OpConstant 3.674022E-40 
                                         f32 %476 = OpConstant 3.674022E-40 
                                             %485 = OpTypeBool 
                                             %486 = OpTypePointer Private %485 
                               Private bool* %487 = OpVariable Private 
                                         f32 %512 = OpConstant 3.674022E-40 
                                             %601 = OpTypePointer Output %7 
                               Output f32_4* %602 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                 Uniform f32* %22 = OpAccessChain %17 %19 %20 
                                          f32 %23 = OpLoad %22 
                                   Input f32* %27 = OpAccessChain vs_TEXCOORD1 %20 
                                          f32 %28 = OpLoad %27 
                                          f32 %29 = OpFDiv %23 %28 
                                 Private f32* %32 = OpAccessChain %9 %30 
                                                      OpStore %32 %29 
                                        f32_4 %33 = OpLoad %9 
                                        f32_3 %34 = OpVectorShuffle %33 %33 0 0 0 
                                        f32_3 %35 = OpLoad vs_TEXCOORD1 
                                        f32_3 %36 = OpFMul %34 %35 
                                        f32_4 %37 = OpLoad %9 
                                        f32_4 %38 = OpVectorShuffle %37 %36 4 5 6 3 
                                                      OpStore %9 %38 
                                        f32_4 %43 = OpLoad vs_TEXCOORD0 
                                        f32_2 %44 = OpVectorShuffle %43 %43 0 1 
                                        f32_4 %45 = OpLoad vs_TEXCOORD0 
                                        f32_2 %46 = OpVectorShuffle %45 %45 3 3 
                                        f32_2 %47 = OpFDiv %44 %46 
                                        f32_4 %48 = OpLoad %39 
                                        f32_4 %49 = OpVectorShuffle %48 %47 4 5 2 3 
                                                      OpStore %39 %49 
                          read_only Texture2D %54 = OpLoad %53 
                                      sampler %58 = OpLoad %57 
                   read_only Texture2DSampled %60 = OpSampledImage %54 %58 
                                        f32_4 %61 = OpLoad %39 
                                        f32_2 %62 = OpVectorShuffle %61 %61 0 1 
                                        f32_4 %63 = OpImageSampleImplicitLod %60 %62 
                                          f32 %64 = OpCompositeExtract %63 0 
                                                      OpStore %50 %64 
                                 Uniform f32* %66 = OpAccessChain %17 %65 %30 
                                          f32 %67 = OpLoad %66 
                                          f32 %68 = OpLoad %50 
                                          f32 %69 = OpFMul %67 %68 
                                 Uniform f32* %71 = OpAccessChain %17 %65 %70 
                                          f32 %72 = OpLoad %71 
                                          f32 %73 = OpFAdd %69 %72 
                                                      OpStore %50 %73 
                                          f32 %75 = OpLoad %50 
                                          f32 %76 = OpFDiv %74 %75 
                                                      OpStore %50 %76 
                                          f32 %78 = OpLoad %50 
                                        f32_3 %79 = OpCompositeConstruct %78 %78 %78 
                                        f32_4 %80 = OpLoad %9 
                                        f32_3 %81 = OpVectorShuffle %80 %80 0 1 2 
                                        f32_3 %82 = OpFMul %79 %81 
                                        f32_4 %83 = OpLoad %77 
                                        f32_4 %84 = OpVectorShuffle %83 %82 4 5 6 3 
                                                      OpStore %77 %84 
                                        f32_4 %86 = OpLoad %77 
                                        f32_3 %87 = OpVectorShuffle %86 %86 1 1 1 
                               Uniform f32_4* %90 = OpAccessChain %17 %88 %19 
                                        f32_4 %91 = OpLoad %90 
                                        f32_3 %92 = OpVectorShuffle %91 %91 0 1 2 
                                        f32_3 %93 = OpFMul %87 %92 
                                        f32_4 %94 = OpLoad %85 
                                        f32_4 %95 = OpVectorShuffle %94 %93 4 5 6 3 
                                                      OpStore %85 %95 
                               Uniform f32_4* %97 = OpAccessChain %17 %88 %96 
                                        f32_4 %98 = OpLoad %97 
                                        f32_3 %99 = OpVectorShuffle %98 %98 0 1 2 
                                       f32_4 %100 = OpLoad %77 
                                       f32_3 %101 = OpVectorShuffle %100 %100 0 0 0 
                                       f32_3 %102 = OpFMul %99 %101 
                                       f32_4 %103 = OpLoad %85 
                                       f32_3 %104 = OpVectorShuffle %103 %103 0 1 2 
                                       f32_3 %105 = OpFAdd %102 %104 
                                       f32_4 %106 = OpLoad %77 
                                       f32_4 %107 = OpVectorShuffle %106 %105 4 5 2 6 
                                                      OpStore %77 %107 
                              Uniform f32_4* %108 = OpAccessChain %17 %88 %65 
                                       f32_4 %109 = OpLoad %108 
                                       f32_3 %110 = OpVectorShuffle %109 %109 0 1 2 
                                       f32_4 %111 = OpLoad %77 
                                       f32_3 %112 = OpVectorShuffle %111 %111 2 2 2 
                                       f32_3 %113 = OpFMul %110 %112 
                                       f32_4 %114 = OpLoad %77 
                                       f32_3 %115 = OpVectorShuffle %114 %114 0 1 3 
                                       f32_3 %116 = OpFAdd %113 %115 
                                       f32_4 %117 = OpLoad %77 
                                       f32_4 %118 = OpVectorShuffle %117 %116 4 5 2 6 
                                                      OpStore %77 %118 
                                       f32_4 %119 = OpLoad %77 
                                       f32_3 %120 = OpVectorShuffle %119 %119 0 1 3 
                              Uniform f32_4* %121 = OpAccessChain %17 %88 %88 
                                       f32_4 %122 = OpLoad %121 
                                       f32_3 %123 = OpVectorShuffle %122 %122 0 1 2 
                                       f32_3 %124 = OpFAdd %120 %123 
                                       f32_4 %125 = OpLoad %77 
                                       f32_4 %126 = OpVectorShuffle %125 %124 4 5 2 6 
                                                      OpStore %77 %126 
                                       f32_4 %127 = OpLoad %77 
                                       f32_3 %128 = OpVectorShuffle %127 %127 0 1 3 
                              Uniform f32_4* %130 = OpAccessChain %17 %129 
                                       f32_4 %131 = OpLoad %130 
                                       f32_3 %132 = OpVectorShuffle %131 %131 0 1 2 
                                       f32_3 %133 = OpFNegate %132 
                                       f32_3 %134 = OpFAdd %128 %133 
                                       f32_4 %135 = OpLoad %85 
                                       f32_4 %136 = OpVectorShuffle %135 %134 4 5 6 3 
                                                      OpStore %85 %136 
                                       f32_4 %137 = OpLoad %85 
                                       f32_3 %138 = OpVectorShuffle %137 %137 0 1 2 
                                       f32_4 %139 = OpLoad %85 
                                       f32_3 %140 = OpVectorShuffle %139 %139 0 1 2 
                                         f32 %141 = OpDot %138 %140 
                                Private f32* %142 = OpAccessChain %9 %30 
                                                      OpStore %142 %141 
                                Private f32* %143 = OpAccessChain %9 %30 
                                         f32 %144 = OpLoad %143 
                                         f32 %145 = OpExtInst %1 31 %144 
                                Private f32* %146 = OpAccessChain %9 %30 
                                                      OpStore %146 %145 
                                Private f32* %147 = OpAccessChain %9 %20 
                                         f32 %148 = OpLoad %147 
                                         f32 %149 = OpFNegate %148 
                                         f32 %150 = OpLoad %50 
                                         f32 %151 = OpFMul %149 %150 
                                Private f32* %152 = OpAccessChain %9 %30 
                                         f32 %153 = OpLoad %152 
                                         f32 %154 = OpFAdd %151 %153 
                                Private f32* %155 = OpAccessChain %9 %30 
                                                      OpStore %155 %154 
                                Uniform f32* %157 = OpAccessChain %17 %129 %156 
                                         f32 %158 = OpLoad %157 
                                Private f32* %159 = OpAccessChain %9 %30 
                                         f32 %160 = OpLoad %159 
                                         f32 %161 = OpFMul %158 %160 
                                Private f32* %162 = OpAccessChain %77 %20 
                                         f32 %163 = OpLoad %162 
                                         f32 %164 = OpFAdd %161 %163 
                                Private f32* %165 = OpAccessChain %9 %30 
                                                      OpStore %165 %164 
                                Private f32* %166 = OpAccessChain %9 %30 
                                         f32 %167 = OpLoad %166 
                                Uniform f32* %169 = OpAccessChain %17 %168 %20 
                                         f32 %170 = OpLoad %169 
                                         f32 %171 = OpFMul %167 %170 
                                Uniform f32* %172 = OpAccessChain %17 %168 %156 
                                         f32 %173 = OpLoad %172 
                                         f32 %174 = OpFAdd %171 %173 
                                Private f32* %175 = OpAccessChain %9 %30 
                                                      OpStore %175 %174 
                                Private f32* %176 = OpAccessChain %9 %30 
                                         f32 %177 = OpLoad %176 
                                         f32 %179 = OpExtInst %1 43 %177 %178 %74 
                                Private f32* %180 = OpAccessChain %9 %30 
                                                      OpStore %180 %179 
                         read_only Texture2D %184 = OpLoad %183 
                                     sampler %186 = OpLoad %185 
                  read_only Texture2DSampled %187 = OpSampledImage %184 %186 
                                       f32_4 %188 = OpLoad %39 
                                       f32_2 %189 = OpVectorShuffle %188 %188 0 1 
                                       f32_4 %190 = OpImageSampleImplicitLod %187 %189 
                                         f32 %191 = OpCompositeExtract %190 0 
                                Private f32* %192 = OpAccessChain %182 %30 
                                                      OpStore %192 %191 
                                Private f32* %194 = OpAccessChain %182 %30 
                                         f32 %195 = OpLoad %194 
                                         f32 %196 = OpFNegate %195 
                                         f32 %197 = OpFAdd %196 %74 
                                                      OpStore %193 %197 
                                Private f32* %198 = OpAccessChain %9 %30 
                                         f32 %199 = OpLoad %198 
                                         f32 %200 = OpLoad %193 
                                         f32 %201 = OpFMul %199 %200 
                                Private f32* %202 = OpAccessChain %182 %30 
                                         f32 %203 = OpLoad %202 
                                         f32 %204 = OpFAdd %201 %203 
                                Private f32* %205 = OpAccessChain %9 %30 
                                                      OpStore %205 %204 
                                       f32_4 %206 = OpLoad %77 
                                       f32_2 %207 = OpVectorShuffle %206 %206 1 1 
                              Uniform f32_4* %209 = OpAccessChain %17 %208 %19 
                                       f32_4 %210 = OpLoad %209 
                                       f32_2 %211 = OpVectorShuffle %210 %210 0 1 
                                       f32_2 %212 = OpFMul %207 %211 
                                                      OpStore %182 %212 
                              Uniform f32_4* %213 = OpAccessChain %17 %208 %96 
                                       f32_4 %214 = OpLoad %213 
                                       f32_2 %215 = OpVectorShuffle %214 %214 0 1 
                                       f32_4 %216 = OpLoad %77 
                                       f32_2 %217 = OpVectorShuffle %216 %216 0 0 
                                       f32_2 %218 = OpFMul %215 %217 
                                       f32_2 %219 = OpLoad %182 
                                       f32_2 %220 = OpFAdd %218 %219 
                                                      OpStore %182 %220 
                              Uniform f32_4* %221 = OpAccessChain %17 %208 %65 
                                       f32_4 %222 = OpLoad %221 
                                       f32_2 %223 = OpVectorShuffle %222 %222 0 1 
                                       f32_4 %224 = OpLoad %77 
                                       f32_2 %225 = OpVectorShuffle %224 %224 3 3 
                                       f32_2 %226 = OpFMul %223 %225 
                                       f32_2 %227 = OpLoad %182 
                                       f32_2 %228 = OpFAdd %226 %227 
                                                      OpStore %182 %228 
                                       f32_4 %229 = OpLoad %77 
                                       f32_3 %230 = OpVectorShuffle %229 %229 0 1 3 
                              Uniform f32_3* %232 = OpAccessChain %17 %96 
                                       f32_3 %233 = OpLoad %232 
                                       f32_3 %234 = OpFNegate %233 
                                       f32_3 %235 = OpFAdd %230 %234 
                                       f32_4 %236 = OpLoad %77 
                                       f32_4 %237 = OpVectorShuffle %236 %235 4 5 6 3 
                                                      OpStore %77 %237 
                                       f32_2 %238 = OpLoad %182 
                              Uniform f32_4* %239 = OpAccessChain %17 %208 %88 
                                       f32_4 %240 = OpLoad %239 
                                       f32_2 %241 = OpVectorShuffle %240 %240 0 1 
                                       f32_2 %242 = OpFAdd %238 %241 
                                                      OpStore %182 %242 
                         read_only Texture2D %244 = OpLoad %243 
                                     sampler %246 = OpLoad %245 
                  read_only Texture2DSampled %247 = OpSampledImage %244 %246 
                                       f32_2 %248 = OpLoad %182 
                                       f32_4 %250 = OpImageSampleImplicitLod %247 %248 Bias %7 
                                         f32 %251 = OpCompositeExtract %250 3 
                                Private f32* %252 = OpAccessChain %182 %30 
                                                      OpStore %252 %251 
                                Private f32* %253 = OpAccessChain %182 %30 
                                         f32 %254 = OpLoad %253 
                                Private f32* %255 = OpAccessChain %9 %30 
                                         f32 %256 = OpLoad %255 
                                         f32 %257 = OpFMul %254 %256 
                                Private f32* %258 = OpAccessChain %9 %30 
                                                      OpStore %258 %257 
                                       f32_4 %259 = OpLoad %9 
                                       f32_3 %260 = OpVectorShuffle %259 %259 0 0 0 
                              Uniform f32_4* %262 = OpAccessChain %17 %261 
                                       f32_4 %263 = OpLoad %262 
                                       f32_3 %264 = OpVectorShuffle %263 %263 0 1 2 
                                       f32_3 %265 = OpFMul %260 %264 
                                       f32_4 %266 = OpLoad %9 
                                       f32_4 %267 = OpVectorShuffle %266 %265 4 5 6 3 
                                                      OpStore %9 %267 
                                       f32_4 %268 = OpLoad %77 
                                       f32_3 %269 = OpVectorShuffle %268 %268 0 1 2 
                                       f32_4 %270 = OpLoad %77 
                                       f32_3 %271 = OpVectorShuffle %270 %270 0 1 2 
                                         f32 %272 = OpDot %269 %271 
                                                      OpStore %50 %272 
                                         f32 %273 = OpLoad %50 
                                         f32 %274 = OpExtInst %1 32 %273 
                                                      OpStore %50 %274 
                                       f32_4 %275 = OpLoad %77 
                                       f32_3 %276 = OpVectorShuffle %275 %275 0 1 2 
                                       f32_3 %277 = OpFNegate %276 
                                         f32 %278 = OpLoad %50 
                                       f32_3 %279 = OpCompositeConstruct %278 %278 %278 
                                       f32_3 %280 = OpFMul %277 %279 
                              Uniform f32_4* %282 = OpAccessChain %17 %281 
                                       f32_4 %283 = OpLoad %282 
                                       f32_3 %284 = OpVectorShuffle %283 %283 0 1 2 
                                       f32_3 %285 = OpFNegate %284 
                                       f32_3 %286 = OpFAdd %280 %285 
                                       f32_4 %287 = OpLoad %85 
                                       f32_4 %288 = OpVectorShuffle %287 %286 4 5 6 3 
                                                      OpStore %85 %288 
                                         f32 %289 = OpLoad %50 
                                       f32_3 %290 = OpCompositeConstruct %289 %289 %289 
                                       f32_4 %291 = OpLoad %77 
                                       f32_3 %292 = OpVectorShuffle %291 %291 0 1 2 
                                       f32_3 %293 = OpFMul %290 %292 
                                       f32_4 %294 = OpLoad %77 
                                       f32_4 %295 = OpVectorShuffle %294 %293 4 5 6 3 
                                                      OpStore %77 %295 
                                       f32_4 %296 = OpLoad %85 
                                       f32_3 %297 = OpVectorShuffle %296 %296 0 1 2 
                                       f32_4 %298 = OpLoad %85 
                                       f32_3 %299 = OpVectorShuffle %298 %298 0 1 2 
                                         f32 %300 = OpDot %297 %299 
                                                      OpStore %50 %300 
                                         f32 %301 = OpLoad %50 
                                         f32 %303 = OpExtInst %1 40 %301 %302 
                                                      OpStore %50 %303 
                                         f32 %304 = OpLoad %50 
                                         f32 %305 = OpExtInst %1 32 %304 
                                                      OpStore %50 %305 
                                         f32 %306 = OpLoad %50 
                                       f32_3 %307 = OpCompositeConstruct %306 %306 %306 
                                       f32_4 %308 = OpLoad %85 
                                       f32_3 %309 = OpVectorShuffle %308 %308 0 1 2 
                                       f32_3 %310 = OpFMul %307 %309 
                                       f32_4 %311 = OpLoad %85 
                                       f32_4 %312 = OpVectorShuffle %311 %310 4 5 6 3 
                                                      OpStore %85 %312 
                         read_only Texture2D %316 = OpLoad %315 
                                     sampler %318 = OpLoad %317 
                  read_only Texture2DSampled %319 = OpSampledImage %316 %318 
                                       f32_4 %320 = OpLoad %39 
                                       f32_2 %321 = OpVectorShuffle %320 %320 0 1 
                                       f32_4 %322 = OpImageSampleImplicitLod %319 %321 
                                       f32_3 %323 = OpVectorShuffle %322 %322 0 1 2 
                                                      OpStore %314 %323 
                                       f32_3 %324 = OpLoad %314 
                                       f32_3 %327 = OpFMul %324 %326 
                                       f32_3 %330 = OpFAdd %327 %329 
                                                      OpStore %314 %330 
                                       f32_3 %331 = OpLoad %314 
                                       f32_3 %332 = OpLoad %314 
                                         f32 %333 = OpDot %331 %332 
                                                      OpStore %50 %333 
                                         f32 %334 = OpLoad %50 
                                         f32 %335 = OpExtInst %1 32 %334 
                                                      OpStore %50 %335 
                                         f32 %336 = OpLoad %50 
                                       f32_3 %337 = OpCompositeConstruct %336 %336 %336 
                                       f32_3 %338 = OpLoad %314 
                                       f32_3 %339 = OpFMul %337 %338 
                                                      OpStore %314 %339 
                                       f32_3 %340 = OpLoad %314 
                                       f32_4 %341 = OpLoad %85 
                                       f32_3 %342 = OpVectorShuffle %341 %341 0 1 2 
                                         f32 %343 = OpDot %340 %342 
                                                      OpStore %50 %343 
                                         f32 %344 = OpLoad %50 
                                         f32 %345 = OpExtInst %1 43 %344 %178 %74 
                                                      OpStore %50 %345 
                              Uniform f32_4* %347 = OpAccessChain %17 %281 
                                       f32_4 %348 = OpLoad %347 
                                       f32_3 %349 = OpVectorShuffle %348 %348 0 1 2 
                                       f32_3 %350 = OpFNegate %349 
                                       f32_4 %351 = OpLoad %85 
                                       f32_3 %352 = OpVectorShuffle %351 %351 0 1 2 
                                         f32 %353 = OpDot %350 %352 
                                                      OpStore %346 %353 
                                         f32 %354 = OpLoad %346 
                                         f32 %355 = OpExtInst %1 43 %354 %178 %74 
                                                      OpStore %346 %355 
                         read_only Texture2D %357 = OpLoad %356 
                                     sampler %359 = OpLoad %358 
                  read_only Texture2DSampled %360 = OpSampledImage %357 %359 
                                       f32_4 %361 = OpLoad %39 
                                       f32_2 %362 = OpVectorShuffle %361 %361 0 1 
                                       f32_4 %363 = OpImageSampleImplicitLod %360 %362 
                                                      OpStore %85 %363 
                         read_only Texture2D %365 = OpLoad %364 
                                     sampler %367 = OpLoad %366 
                  read_only Texture2DSampled %368 = OpSampledImage %365 %367 
                                       f32_4 %369 = OpLoad %39 
                                       f32_2 %370 = OpVectorShuffle %369 %369 0 1 
                                       f32_4 %371 = OpImageSampleImplicitLod %368 %370 
                                       f32_3 %372 = OpVectorShuffle %371 %371 0 1 2 
                                       f32_4 %373 = OpLoad %39 
                                       f32_4 %374 = OpVectorShuffle %373 %372 4 5 2 6 
                                                      OpStore %39 %374 
                                       f32_4 %376 = OpLoad %85 
                                       f32_4 %377 = OpVectorShuffle %376 %376 3 0 1 2 
                                       f32_4 %378 = OpFNegate %377 
                                       f32_4 %380 = OpFAdd %378 %379 
                                                      OpStore %375 %380 
                                Private f32* %382 = OpAccessChain %375 %30 
                                         f32 %383 = OpLoad %382 
                                Private f32* %384 = OpAccessChain %375 %30 
                                         f32 %385 = OpLoad %384 
                                         f32 %386 = OpFMul %383 %385 
                                                      OpStore %381 %386 
                                         f32 %387 = OpLoad %381 
                                         f32 %389 = OpExtInst %1 40 %387 %388 
                                                      OpStore %381 %389 
                                         f32 %391 = OpLoad %381 
                                         f32 %392 = OpLoad %381 
                                         f32 %393 = OpFMul %391 %392 
                                                      OpStore %390 %393 
                                         f32 %395 = OpLoad %50 
                                         f32 %396 = OpLoad %390 
                                         f32 %397 = OpFMul %395 %396 
                                         f32 %398 = OpLoad %50 
                                         f32 %399 = OpFNegate %398 
                                         f32 %400 = OpFAdd %397 %399 
                                                      OpStore %394 %400 
                                         f32 %401 = OpLoad %394 
                                         f32 %402 = OpLoad %50 
                                         f32 %403 = OpFMul %401 %402 
                                         f32 %404 = OpFAdd %403 %74 
                                                      OpStore %50 %404 
                                         f32 %405 = OpLoad %50 
                                         f32 %406 = OpLoad %50 
                                         f32 %407 = OpFMul %405 %406 
                                         f32 %409 = OpFAdd %407 %408 
                                                      OpStore %50 %409 
                                         f32 %410 = OpLoad %390 
                                         f32 %412 = OpFMul %410 %411 
                                                      OpStore %390 %412 
                                         f32 %413 = OpLoad %390 
                                         f32 %414 = OpLoad %50 
                                         f32 %415 = OpFDiv %413 %414 
                                                      OpStore %50 %415 
                                       f32_3 %416 = OpLoad %314 
                                       f32_4 %417 = OpLoad %77 
                                       f32_3 %418 = OpVectorShuffle %417 %417 0 1 2 
                                       f32_3 %419 = OpFNegate %418 
                                         f32 %420 = OpDot %416 %419 
                                Private f32* %421 = OpAccessChain %77 %30 
                                                      OpStore %421 %420 
                                       f32_3 %423 = OpLoad %314 
                              Uniform f32_4* %424 = OpAccessChain %17 %281 
                                       f32_4 %425 = OpLoad %424 
                                       f32_3 %426 = OpVectorShuffle %425 %425 0 1 2 
                                       f32_3 %427 = OpFNegate %426 
                                         f32 %428 = OpDot %423 %427 
                                                      OpStore %422 %428 
                                         f32 %429 = OpLoad %422 
                                         f32 %430 = OpExtInst %1 43 %429 %178 %74 
                                                      OpStore %422 %430 
                                         f32 %432 = OpLoad %381 
                                         f32 %433 = OpFNegate %432 
                                         f32 %434 = OpFAdd %433 %74 
                                                      OpStore %431 %434 
                                Private f32* %435 = OpAccessChain %77 %30 
                                         f32 %436 = OpLoad %435 
                                         f32 %437 = OpExtInst %1 4 %436 
                                         f32 %438 = OpLoad %431 
                                         f32 %439 = OpFMul %437 %438 
                                         f32 %440 = OpLoad %381 
                                         f32 %441 = OpFAdd %439 %440 
                                                      OpStore %390 %441 
                                         f32 %442 = OpLoad %422 
                                         f32 %443 = OpLoad %431 
                                         f32 %444 = OpFMul %442 %443 
                                         f32 %445 = OpLoad %381 
                                         f32 %446 = OpFAdd %444 %445 
                                                      OpStore %431 %446 
                                         f32 %447 = OpLoad %431 
                                Private f32* %448 = OpAccessChain %77 %30 
                                         f32 %449 = OpLoad %448 
                                         f32 %450 = OpExtInst %1 4 %449 
                                         f32 %451 = OpFMul %447 %450 
                                                      OpStore %431 %451 
                                Private f32* %452 = OpAccessChain %77 %30 
                                         f32 %453 = OpLoad %452 
                                         f32 %454 = OpExtInst %1 4 %453 
                                         f32 %455 = OpFNegate %454 
                                         f32 %456 = OpFAdd %455 %74 
                                Private f32* %457 = OpAccessChain %77 %30 
                                                      OpStore %457 %456 
                                         f32 %458 = OpLoad %422 
                                         f32 %459 = OpLoad %390 
                                         f32 %460 = OpFMul %458 %459 
                                         f32 %461 = OpLoad %431 
                                         f32 %462 = OpFAdd %460 %461 
                                                      OpStore %431 %462 
                                         f32 %463 = OpLoad %431 
                                         f32 %465 = OpFAdd %463 %464 
                                                      OpStore %431 %465 
                                         f32 %467 = OpLoad %431 
                                         f32 %468 = OpFDiv %466 %467 
                                                      OpStore %431 %468 
                                         f32 %469 = OpLoad %50 
                                         f32 %470 = OpLoad %431 
                                         f32 %471 = OpFMul %469 %470 
                                                      OpStore %50 %471 
                                         f32 %472 = OpLoad %422 
                                         f32 %473 = OpLoad %50 
                                         f32 %474 = OpFMul %472 %473 
                                                      OpStore %50 %474 
                                         f32 %475 = OpLoad %50 
                                         f32 %477 = OpFMul %475 %476 
                                                      OpStore %50 %477 
                                         f32 %478 = OpLoad %50 
                                         f32 %479 = OpExtInst %1 40 %478 %178 
                                                      OpStore %50 %479 
                                       f32_4 %480 = OpLoad %85 
                                       f32_3 %481 = OpVectorShuffle %480 %480 0 1 2 
                                       f32_4 %482 = OpLoad %85 
                                       f32_3 %483 = OpVectorShuffle %482 %482 0 1 2 
                                         f32 %484 = OpDot %481 %483 
                                                      OpStore %431 %484 
                                         f32 %488 = OpLoad %431 
                                        bool %489 = OpFOrdNotEqual %488 %178 
                                                      OpStore %487 %489 
                                        bool %490 = OpLoad %487 
                                         f32 %491 = OpSelect %490 %74 %178 
                                                      OpStore %431 %491 
                                         f32 %492 = OpLoad %50 
                                         f32 %493 = OpLoad %431 
                                         f32 %494 = OpFMul %492 %493 
                                                      OpStore %50 %494 
                                       f32_4 %495 = OpLoad %9 
                                       f32_3 %496 = OpVectorShuffle %495 %495 0 1 2 
                                         f32 %497 = OpLoad %50 
                                       f32_3 %498 = OpCompositeConstruct %497 %497 %497 
                                       f32_3 %499 = OpFMul %496 %498 
                                                      OpStore %314 %499 
                                         f32 %500 = OpLoad %346 
                                         f32 %501 = OpFNegate %500 
                                         f32 %502 = OpFAdd %501 %74 
                                                      OpStore %50 %502 
                                         f32 %503 = OpLoad %346 
                                         f32 %504 = OpLoad %346 
                                         f32 %505 = OpFMul %503 %504 
                                                      OpStore %346 %505 
                                         f32 %506 = OpLoad %346 
                                       f32_2 %507 = OpCompositeConstruct %506 %506 
                                       f32_4 %508 = OpLoad %375 
                                       f32_2 %509 = OpVectorShuffle %508 %508 0 0 
                                         f32 %510 = OpDot %507 %509 
                                                      OpStore %346 %510 
                                         f32 %511 = OpLoad %346 
                                         f32 %513 = OpFAdd %511 %512 
                                                      OpStore %346 %513 
                                         f32 %514 = OpLoad %50 
                                         f32 %515 = OpLoad %50 
                                         f32 %516 = OpFMul %514 %515 
                                                      OpStore %431 %516 
                                         f32 %517 = OpLoad %431 
                                         f32 %518 = OpLoad %431 
                                         f32 %519 = OpFMul %517 %518 
                                                      OpStore %431 %519 
                                         f32 %520 = OpLoad %50 
                                         f32 %521 = OpLoad %431 
                                         f32 %522 = OpFMul %520 %521 
                                                      OpStore %50 %522 
                                       f32_4 %523 = OpLoad %375 
                                       f32_3 %524 = OpVectorShuffle %523 %523 1 2 3 
                                         f32 %525 = OpLoad %50 
                                       f32_3 %526 = OpCompositeConstruct %525 %525 %525 
                                       f32_3 %527 = OpFMul %524 %526 
                                       f32_4 %528 = OpLoad %85 
                                       f32_3 %529 = OpVectorShuffle %528 %528 0 1 2 
                                       f32_3 %530 = OpFAdd %527 %529 
                                       f32_4 %531 = OpLoad %85 
                                       f32_4 %532 = OpVectorShuffle %531 %530 4 5 6 3 
                                                      OpStore %85 %532 
                                       f32_4 %533 = OpLoad %85 
                                       f32_3 %534 = OpVectorShuffle %533 %533 0 1 2 
                                       f32_3 %535 = OpLoad %314 
                                       f32_3 %536 = OpFMul %534 %535 
                                       f32_4 %537 = OpLoad %85 
                                       f32_4 %538 = OpVectorShuffle %537 %536 4 5 6 3 
                                                      OpStore %85 %538 
                                Private f32* %539 = OpAccessChain %77 %30 
                                         f32 %540 = OpLoad %539 
                                Private f32* %541 = OpAccessChain %77 %30 
                                         f32 %542 = OpLoad %541 
                                         f32 %543 = OpFMul %540 %542 
                                                      OpStore %50 %543 
                                         f32 %544 = OpLoad %50 
                                         f32 %545 = OpLoad %50 
                                         f32 %546 = OpFMul %544 %545 
                                                      OpStore %50 %546 
                                Private f32* %547 = OpAccessChain %77 %30 
                                         f32 %548 = OpLoad %547 
                                         f32 %549 = OpLoad %50 
                                         f32 %550 = OpFMul %548 %549 
                                                      OpStore %50 %550 
                                         f32 %551 = OpLoad %346 
                                         f32 %552 = OpLoad %50 
                                         f32 %553 = OpFMul %551 %552 
                                         f32 %554 = OpFAdd %553 %74 
                                                      OpStore %50 %554 
                                         f32 %555 = OpLoad %422 
                                         f32 %556 = OpFNegate %555 
                                         f32 %557 = OpFAdd %556 %74 
                                Private f32* %558 = OpAccessChain %77 %30 
                                                      OpStore %558 %557 
                                Private f32* %559 = OpAccessChain %77 %30 
                                         f32 %560 = OpLoad %559 
                                Private f32* %561 = OpAccessChain %77 %30 
                                         f32 %562 = OpLoad %561 
                                         f32 %563 = OpFMul %560 %562 
                                                      OpStore %431 %563 
                                         f32 %564 = OpLoad %431 
                                         f32 %565 = OpLoad %431 
                                         f32 %566 = OpFMul %564 %565 
                                                      OpStore %431 %566 
                                Private f32* %567 = OpAccessChain %77 %30 
                                         f32 %568 = OpLoad %567 
                                         f32 %569 = OpLoad %431 
                                         f32 %570 = OpFMul %568 %569 
                                Private f32* %571 = OpAccessChain %77 %30 
                                                      OpStore %571 %570 
                                         f32 %572 = OpLoad %346 
                                Private f32* %573 = OpAccessChain %77 %30 
                                         f32 %574 = OpLoad %573 
                                         f32 %575 = OpFMul %572 %574 
                                         f32 %576 = OpFAdd %575 %74 
                                                      OpStore %346 %576 
                                         f32 %577 = OpLoad %50 
                                         f32 %578 = OpLoad %346 
                                         f32 %579 = OpFMul %577 %578 
                                                      OpStore %50 %579 
                                         f32 %580 = OpLoad %422 
                                         f32 %581 = OpLoad %50 
                                         f32 %582 = OpFMul %580 %581 
                                                      OpStore %50 %582 
                                         f32 %583 = OpLoad %50 
                                       f32_3 %584 = OpCompositeConstruct %583 %583 %583 
                                       f32_4 %585 = OpLoad %9 
                                       f32_3 %586 = OpVectorShuffle %585 %585 0 1 2 
                                       f32_3 %587 = OpFMul %584 %586 
                                       f32_4 %588 = OpLoad %9 
                                       f32_4 %589 = OpVectorShuffle %588 %587 4 5 6 3 
                                                      OpStore %9 %589 
                                       f32_4 %590 = OpLoad %39 
                                       f32_3 %591 = OpVectorShuffle %590 %590 0 1 3 
                                       f32_4 %592 = OpLoad %9 
                                       f32_3 %593 = OpVectorShuffle %592 %592 0 1 2 
                                       f32_3 %594 = OpFMul %591 %593 
                                       f32_4 %595 = OpLoad %85 
                                       f32_3 %596 = OpVectorShuffle %595 %595 0 1 2 
                                       f32_3 %597 = OpFAdd %594 %596 
                                       f32_4 %598 = OpLoad %9 
                                       f32_4 %599 = OpVectorShuffle %598 %597 4 5 6 3 
                                                      OpStore %9 %599 
                                Private f32* %600 = OpAccessChain %9 %156 
                                                      OpStore %600 %74 
                                       f32_4 %603 = OpLoad %9 
                                       f32_4 %604 = OpFNegate %603 
                                       f32_4 %605 = OpExtInst %1 29 %604 
                                                      OpStore %602 %605 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "POINT" "SHADOWS_CUBE" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "POINT" "SHADOWS_CUBE" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _LightProjectionParams;
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
UNITY_LOCATION(0) uniform  sampler2D _CameraDepthTexture;
UNITY_LOCATION(1) uniform  sampler2D _LightTextureB0;
UNITY_LOCATION(2) uniform  sampler2D _CameraGBufferTexture0;
UNITY_LOCATION(3) uniform  sampler2D _CameraGBufferTexture1;
UNITY_LOCATION(4) uniform  sampler2D _CameraGBufferTexture2;
UNITY_LOCATION(5) uniform  samplerCube _ShadowMapTexture;
UNITY_LOCATION(6) uniform  samplerCubeShadow hlslcc_zcmp_ShadowMapTexture;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
vec3 u_xlat6;
float u_xlat7;
float u_xlat12;
float u_xlat13;
float u_xlat18;
bool u_xlatb18;
float u_xlat19;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat2 = texture(_CameraDepthTexture, u_xlat1.xy);
    u_xlat18 = _ZBufferParams.x * u_xlat2.x + _ZBufferParams.y;
    u_xlat18 = float(1.0) / u_xlat18;
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat18 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat6.xyz = u_xlat2.xyw + (-_LightPos.xyz);
    u_xlat2.xyz = u_xlat2.xyw + (-_WorldSpaceCameraPos.xyz);
    u_xlat13 = max(abs(u_xlat6.y), abs(u_xlat6.x));
    u_xlat13 = max(abs(u_xlat6.z), u_xlat13);
    u_xlat13 = u_xlat13 + (-_LightProjectionParams.z);
    u_xlat13 = max(u_xlat13, 9.99999975e-06);
    u_xlat13 = u_xlat13 * _LightProjectionParams.w;
    u_xlat13 = _LightProjectionParams.y / u_xlat13;
    u_xlat13 = u_xlat13 + (-_LightProjectionParams.x);
    vec4 txVec0 = vec4(u_xlat6.xyz,u_xlat13);
    u_xlat13 = texture(hlslcc_zcmp_ShadowMapTexture, txVec0);
    u_xlat19 = (-_LightShadowData.x) + 1.0;
    u_xlat13 = u_xlat13 * u_xlat19 + _LightShadowData.x;
    u_xlat19 = (-u_xlat13) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat19 + u_xlat13;
    u_xlat13 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat19 = u_xlat13 * _LightPos.w;
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat3 = texture(_LightTextureB0, vec2(u_xlat19));
    u_xlat0.x = u_xlat0.x * u_xlat3.x;
    u_xlat3.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat4.xyz = (-u_xlat6.xyz) * vec3(u_xlat13) + (-u_xlat2.xyz);
    u_xlat0.xyz = u_xlat6.xyz * vec3(u_xlat13);
    u_xlat18 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat18 = max(u_xlat18, 0.00100000005);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat4.xyz = vec3(u_xlat18) * u_xlat4.xyz;
    u_xlat5 = texture(_CameraGBufferTexture2, u_xlat1.xy);
    u_xlat5.xyz = u_xlat5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat18 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat5.xyz = vec3(u_xlat18) * u_xlat5.xyz;
    u_xlat18 = dot(u_xlat5.xyz, u_xlat4.xyz);
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
    u_xlat13 = dot((-u_xlat0.xyz), u_xlat4.xyz);
    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
    u_xlat0.x = dot(u_xlat5.xyz, (-u_xlat0.xyz));
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat6.x = dot(u_xlat5.xyz, (-u_xlat2.xyz));
    u_xlat2 = texture(_CameraGBufferTexture1, u_xlat1.xy);
    u_xlat4 = texture(_CameraGBufferTexture0, u_xlat1.xy);
    u_xlat5 = (-u_xlat2.wxyz) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat12 = u_xlat5.x * u_xlat5.x;
    u_xlat12 = max(u_xlat12, 0.00200000009);
    u_xlat1.x = u_xlat12 * u_xlat12;
    u_xlat7 = u_xlat18 * u_xlat1.x + (-u_xlat18);
    u_xlat18 = u_xlat7 * u_xlat18 + 1.0;
    u_xlat18 = u_xlat18 * u_xlat18 + 1.00000001e-07;
    u_xlat1.x = u_xlat1.x * 0.318309873;
    u_xlat18 = u_xlat1.x / u_xlat18;
    u_xlat1.x = (-u_xlat12) + 1.0;
    u_xlat7 = abs(u_xlat6.x) * u_xlat1.x + u_xlat12;
    u_xlat12 = u_xlat0.x * u_xlat1.x + u_xlat12;
    u_xlat12 = u_xlat12 * abs(u_xlat6.x);
    u_xlat6.x = -abs(u_xlat6.x) + 1.0;
    u_xlat12 = u_xlat0.x * u_xlat7 + u_xlat12;
    u_xlat12 = u_xlat12 + 9.99999975e-06;
    u_xlat12 = 0.5 / u_xlat12;
    u_xlat12 = u_xlat18 * u_xlat12;
    u_xlat12 = u_xlat12 * 3.14159274;
    u_xlat12 = u_xlat0.x * u_xlat12;
    u_xlat12 = max(u_xlat12, 0.0);
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlatb18 = u_xlat18!=0.0;
    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
    u_xlat12 = u_xlat18 * u_xlat12;
    u_xlat1.xyw = u_xlat3.xyz * vec3(u_xlat12);
    u_xlat12 = (-u_xlat13) + 1.0;
    u_xlat18 = u_xlat13 * u_xlat13;
    u_xlat18 = dot(vec2(u_xlat18), u_xlat5.xx);
    u_xlat18 = u_xlat18 + -0.5;
    u_xlat13 = u_xlat12 * u_xlat12;
    u_xlat13 = u_xlat13 * u_xlat13;
    u_xlat12 = u_xlat12 * u_xlat13;
    u_xlat2.xyz = u_xlat5.yzw * vec3(u_xlat12) + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat1.xyw * u_xlat2.xyz;
    u_xlat12 = u_xlat6.x * u_xlat6.x;
    u_xlat12 = u_xlat12 * u_xlat12;
    u_xlat6.x = u_xlat6.x * u_xlat12;
    u_xlat6.x = u_xlat18 * u_xlat6.x + 1.0;
    u_xlat12 = (-u_xlat0.x) + 1.0;
    u_xlat19 = u_xlat12 * u_xlat12;
    u_xlat19 = u_xlat19 * u_xlat19;
    u_xlat12 = u_xlat12 * u_xlat19;
    u_xlat12 = u_xlat18 * u_xlat12 + 1.0;
    u_xlat6.x = u_xlat6.x * u_xlat12;
    u_xlat0.x = u_xlat0.x * u_xlat6.x;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat0.xyz = u_xlat4.xyz * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat0.w = 1.0;
    SV_Target0 = exp2((-u_xlat0));
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "POINT" "SHADOWS_CUBE" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 192
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %80 %102 %169 %175 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpMemberDecorate %78 0 BuiltIn 78 
                                                      OpMemberDecorate %78 1 BuiltIn 78 
                                                      OpMemberDecorate %78 2 BuiltIn 78 
                                                      OpDecorate %78 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 102 
                                                      OpDecorate %169 Location 169 
                                                      OpDecorate vs_TEXCOORD1 Location 175 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %16 %17 %18 %6 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 1 
                                              %24 = OpTypePointer Uniform %7 
                                          i32 %28 = OpConstant 0 
                                          i32 %36 = OpConstant 2 
                                          i32 %45 = OpConstant 3 
                               Private f32_4* %49 = OpVariable Private 
                                          u32 %76 = OpConstant 1 
                                              %77 = OpTypeArray %6 %76 
                                              %78 = OpTypeStruct %7 %6 %77 
                                              %79 = OpTypePointer Output %78 
         Output struct {f32_4; f32; f32[1];}* %80 = OpVariable Output 
                                              %82 = OpTypePointer Output %7 
                                              %84 = OpTypePointer Private %6 
                                          u32 %87 = OpConstant 0 
                                              %88 = OpTypePointer Uniform %6 
                               Private f32_4* %93 = OpVariable Private 
                                              %94 = OpTypeVector %6 3 
                                          f32 %97 = OpConstant 3.674022E-40 
                                        f32_3 %98 = OpConstantComposite %97 %97 %97 
                       Output f32_4* vs_TEXCOORD0 = OpVariable Output 
                                             %103 = OpTypeVector %6 2 
                                         f32 %158 = OpConstant 3.674022E-40 
                                         f32 %159 = OpConstant 3.674022E-40 
                                       f32_3 %160 = OpConstantComposite %158 %158 %159 
                                             %168 = OpTypePointer Input %94 
                                Input f32_3* %169 = OpVariable Input 
                                             %174 = OpTypePointer Output %94 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                                         i32 %176 = OpConstant 4 
                                             %186 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %25 = OpAccessChain %21 %23 %23 
                                        f32_4 %26 = OpLoad %25 
                                        f32_4 %27 = OpFMul %13 %26 
                                                      OpStore %9 %27 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %28 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %44 = OpLoad %9 
                               Uniform f32_4* %46 = OpAccessChain %21 %23 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_4 %48 = OpFAdd %44 %47 
                                                      OpStore %9 %48 
                                        f32_4 %50 = OpLoad %9 
                                        f32_4 %51 = OpVectorShuffle %50 %50 1 1 1 1 
                               Uniform f32_4* %52 = OpAccessChain %21 %45 %23 
                                        f32_4 %53 = OpLoad %52 
                                        f32_4 %54 = OpFMul %51 %53 
                                                      OpStore %49 %54 
                               Uniform f32_4* %55 = OpAccessChain %21 %45 %28 
                                        f32_4 %56 = OpLoad %55 
                                        f32_4 %57 = OpLoad %9 
                                        f32_4 %58 = OpVectorShuffle %57 %57 0 0 0 0 
                                        f32_4 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %49 
                                        f32_4 %61 = OpFAdd %59 %60 
                                                      OpStore %49 %61 
                               Uniform f32_4* %62 = OpAccessChain %21 %45 %36 
                                        f32_4 %63 = OpLoad %62 
                                        f32_4 %64 = OpLoad %9 
                                        f32_4 %65 = OpVectorShuffle %64 %64 2 2 2 2 
                                        f32_4 %66 = OpFMul %63 %65 
                                        f32_4 %67 = OpLoad %49 
                                        f32_4 %68 = OpFAdd %66 %67 
                                                      OpStore %49 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %45 %45 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %9 
                                        f32_4 %72 = OpVectorShuffle %71 %71 3 3 3 3 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %49 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %49 %75 
                                        f32_4 %81 = OpLoad %49 
                                Output f32_4* %83 = OpAccessChain %80 %28 
                                                      OpStore %83 %81 
                                 Private f32* %85 = OpAccessChain %49 %76 
                                          f32 %86 = OpLoad %85 
                                 Uniform f32* %89 = OpAccessChain %21 %28 %87 
                                          f32 %90 = OpLoad %89 
                                          f32 %91 = OpFMul %86 %90 
                                 Private f32* %92 = OpAccessChain %49 %76 
                                                      OpStore %92 %91 
                                        f32_4 %95 = OpLoad %49 
                                        f32_3 %96 = OpVectorShuffle %95 %95 0 3 1 
                                        f32_3 %99 = OpFMul %96 %98 
                                       f32_4 %100 = OpLoad %93 
                                       f32_4 %101 = OpVectorShuffle %100 %99 4 1 5 6 
                                                      OpStore %93 %101 
                                       f32_4 %104 = OpLoad %49 
                                       f32_2 %105 = OpVectorShuffle %104 %104 2 3 
                                       f32_4 %106 = OpLoad vs_TEXCOORD0 
                                       f32_4 %107 = OpVectorShuffle %106 %105 0 1 4 5 
                                                      OpStore vs_TEXCOORD0 %107 
                                       f32_4 %108 = OpLoad %93 
                                       f32_2 %109 = OpVectorShuffle %108 %108 2 2 
                                       f32_4 %110 = OpLoad %93 
                                       f32_2 %111 = OpVectorShuffle %110 %110 0 3 
                                       f32_2 %112 = OpFAdd %109 %111 
                                       f32_4 %113 = OpLoad vs_TEXCOORD0 
                                       f32_4 %114 = OpVectorShuffle %113 %112 4 5 2 3 
                                                      OpStore vs_TEXCOORD0 %114 
                                       f32_4 %115 = OpLoad %9 
                                       f32_3 %116 = OpVectorShuffle %115 %115 1 1 1 
                              Uniform f32_4* %117 = OpAccessChain %21 %36 %23 
                                       f32_4 %118 = OpLoad %117 
                                       f32_3 %119 = OpVectorShuffle %118 %118 0 1 2 
                                       f32_3 %120 = OpFMul %116 %119 
                                       f32_4 %121 = OpLoad %49 
                                       f32_4 %122 = OpVectorShuffle %121 %120 4 5 6 3 
                                                      OpStore %49 %122 
                              Uniform f32_4* %123 = OpAccessChain %21 %36 %28 
                                       f32_4 %124 = OpLoad %123 
                                       f32_3 %125 = OpVectorShuffle %124 %124 0 1 2 
                                       f32_4 %126 = OpLoad %9 
                                       f32_3 %127 = OpVectorShuffle %126 %126 0 0 0 
                                       f32_3 %128 = OpFMul %125 %127 
                                       f32_4 %129 = OpLoad %49 
                                       f32_3 %130 = OpVectorShuffle %129 %129 0 1 2 
                                       f32_3 %131 = OpFAdd %128 %130 
                                       f32_4 %132 = OpLoad %49 
                                       f32_4 %133 = OpVectorShuffle %132 %131 4 5 6 3 
                                                      OpStore %49 %133 
                              Uniform f32_4* %134 = OpAccessChain %21 %36 %36 
                                       f32_4 %135 = OpLoad %134 
                                       f32_3 %136 = OpVectorShuffle %135 %135 0 1 2 
                                       f32_4 %137 = OpLoad %9 
                                       f32_3 %138 = OpVectorShuffle %137 %137 2 2 2 
                                       f32_3 %139 = OpFMul %136 %138 
                                       f32_4 %140 = OpLoad %49 
                                       f32_3 %141 = OpVectorShuffle %140 %140 0 1 2 
                                       f32_3 %142 = OpFAdd %139 %141 
                                       f32_4 %143 = OpLoad %9 
                                       f32_4 %144 = OpVectorShuffle %143 %142 4 5 6 3 
                                                      OpStore %9 %144 
                              Uniform f32_4* %145 = OpAccessChain %21 %36 %45 
                                       f32_4 %146 = OpLoad %145 
                                       f32_3 %147 = OpVectorShuffle %146 %146 0 1 2 
                                       f32_4 %148 = OpLoad %9 
                                       f32_3 %149 = OpVectorShuffle %148 %148 3 3 3 
                                       f32_3 %150 = OpFMul %147 %149 
                                       f32_4 %151 = OpLoad %9 
                                       f32_3 %152 = OpVectorShuffle %151 %151 0 1 2 
                                       f32_3 %153 = OpFAdd %150 %152 
                                       f32_4 %154 = OpLoad %9 
                                       f32_4 %155 = OpVectorShuffle %154 %153 4 5 6 3 
                                                      OpStore %9 %155 
                                       f32_4 %156 = OpLoad %9 
                                       f32_3 %157 = OpVectorShuffle %156 %156 0 1 2 
                                       f32_3 %161 = OpFMul %157 %160 
                                       f32_4 %162 = OpLoad %49 
                                       f32_4 %163 = OpVectorShuffle %162 %161 4 5 6 3 
                                                      OpStore %49 %163 
                                       f32_4 %164 = OpLoad %9 
                                       f32_3 %165 = OpVectorShuffle %164 %164 0 1 2 
                                       f32_3 %166 = OpFNegate %165 
                                       f32_3 %167 = OpFMul %166 %160 
                                       f32_3 %170 = OpLoad %169 
                                       f32_3 %171 = OpFAdd %167 %170 
                                       f32_4 %172 = OpLoad %9 
                                       f32_4 %173 = OpVectorShuffle %172 %171 4 5 6 3 
                                                      OpStore %9 %173 
                                Uniform f32* %177 = OpAccessChain %21 %176 
                                         f32 %178 = OpLoad %177 
                                       f32_3 %179 = OpCompositeConstruct %178 %178 %178 
                                       f32_4 %180 = OpLoad %9 
                                       f32_3 %181 = OpVectorShuffle %180 %180 0 1 2 
                                       f32_3 %182 = OpFMul %179 %181 
                                       f32_4 %183 = OpLoad %49 
                                       f32_3 %184 = OpVectorShuffle %183 %183 0 1 2 
                                       f32_3 %185 = OpFAdd %182 %184 
                                                      OpStore vs_TEXCOORD1 %185 
                                 Output f32* %187 = OpAccessChain %80 %28 %76 
                                         f32 %188 = OpLoad %187 
                                         f32 %189 = OpFNegate %188 
                                 Output f32* %190 = OpAccessChain %80 %28 %76 
                                                      OpStore %190 %189 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 646
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %24 %40 %641 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpDecorate %13 ArrayStride 13 
                                                      OpMemberDecorate %14 0 Offset 14 
                                                      OpMemberDecorate %14 1 Offset 14 
                                                      OpMemberDecorate %14 2 Offset 14 
                                                      OpMemberDecorate %14 3 Offset 14 
                                                      OpMemberDecorate %14 4 Offset 14 
                                                      OpMemberDecorate %14 5 Offset 14 
                                                      OpMemberDecorate %14 6 Offset 14 
                                                      OpMemberDecorate %14 7 Offset 14 
                                                      OpMemberDecorate %14 8 Offset 14 
                                                      OpDecorate %14 Block 
                                                      OpDecorate %16 DescriptorSet 16 
                                                      OpDecorate %16 Binding 16 
                                                      OpDecorate vs_TEXCOORD1 Location 24 
                                                      OpDecorate vs_TEXCOORD0 Location 40 
                                                      OpDecorate %52 DescriptorSet 52 
                                                      OpDecorate %52 Binding 52 
                                                      OpDecorate %56 DescriptorSet 56 
                                                      OpDecorate %56 Binding 56 
                                                      OpDecorate %240 DescriptorSet 240 
                                                      OpDecorate %240 Binding 240 
                                                      OpDecorate %242 DescriptorSet 242 
                                                      OpDecorate %242 Binding 242 
                                                      OpDecorate %280 DescriptorSet 280 
                                                      OpDecorate %280 Binding 280 
                                                      OpDecorate %282 DescriptorSet 282 
                                                      OpDecorate %282 Binding 282 
                                                      OpDecorate %354 DescriptorSet 354 
                                                      OpDecorate %354 Binding 354 
                                                      OpDecorate %356 DescriptorSet 356 
                                                      OpDecorate %356 Binding 356 
                                                      OpDecorate %409 DescriptorSet 409 
                                                      OpDecorate %409 Binding 409 
                                                      OpDecorate %411 DescriptorSet 411 
                                                      OpDecorate %411 Binding 411 
                                                      OpDecorate %417 DescriptorSet 417 
                                                      OpDecorate %417 Binding 417 
                                                      OpDecorate %419 DescriptorSet 419 
                                                      OpDecorate %419 Binding 419 
                                                      OpDecorate %641 Location 641 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 3 
                                              %11 = OpTypeInt 32 0 
                                          u32 %12 = OpConstant 4 
                                              %13 = OpTypeArray %7 %12 
                                              %14 = OpTypeStruct %10 %7 %7 %13 %7 %7 %7 %7 %7 
                                              %15 = OpTypePointer Uniform %14 
Uniform struct {f32_3; f32_4; f32_4; f32_4[4]; f32_4; f32_4; f32_4; f32_4; f32_4;}* %16 = OpVariable Uniform 
                                              %17 = OpTypeInt 32 1 
                                          i32 %18 = OpConstant 1 
                                          u32 %19 = OpConstant 2 
                                              %20 = OpTypePointer Uniform %6 
                                              %23 = OpTypePointer Input %10 
                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                                              %25 = OpTypePointer Input %6 
                                          u32 %29 = OpConstant 0 
                                              %30 = OpTypePointer Private %6 
                               Private f32_4* %38 = OpVariable Private 
                                              %39 = OpTypePointer Input %7 
                        Input f32_4* vs_TEXCOORD0 = OpVariable Input 
                                              %41 = OpTypeVector %6 2 
                                 Private f32* %49 = OpVariable Private 
                                              %50 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %51 = OpTypePointer UniformConstant %50 
         UniformConstant read_only Texture2D* %52 = OpVariable UniformConstant 
                                              %54 = OpTypeSampler 
                                              %55 = OpTypePointer UniformConstant %54 
                     UniformConstant sampler* %56 = OpVariable UniformConstant 
                                              %58 = OpTypeSampledImage %50 
                                          i32 %64 = OpConstant 2 
                                          u32 %69 = OpConstant 1 
                                          f32 %73 = OpConstant 3.674022E-40 
                               Private f32_4* %76 = OpVariable Private 
                                              %84 = OpTypePointer Private %10 
                               Private f32_3* %85 = OpVariable Private 
                                          i32 %88 = OpConstant 3 
                                              %89 = OpTypePointer Uniform %7 
                                          i32 %94 = OpConstant 0 
                                         i32 %126 = OpConstant 6 
                                         u32 %149 = OpConstant 3 
                                         i32 %161 = OpConstant 5 
                                         f32 %171 = OpConstant 3.674022E-40 
                              Private f32_3* %174 = OpVariable Private 
                                         i32 %177 = OpConstant 7 
                                             %185 = OpTypePointer Uniform %10 
                                Private f32* %192 = OpVariable Private 
                                         i32 %206 = OpConstant 4 
                                         f32 %212 = OpConstant 3.674022E-40 
                                             %230 = OpTypePointer Function %7 
                                             %238 = OpTypeImage %6 Cube 0 0 0 1 Unknown 
                                             %239 = OpTypePointer UniformConstant %238 
      UniformConstant read_only TextureCube* %240 = OpVariable UniformConstant 
                    UniformConstant sampler* %242 = OpVariable UniformConstant 
                                             %244 = OpTypeImage %6 Cube 1 0 0 1 Unknown 
                                             %245 = OpTypeSampledImage %244 
                                Private f32* %250 = OpVariable Private 
        UniformConstant read_only Texture2D* %280 = OpVariable UniformConstant 
                    UniformConstant sampler* %282 = OpVariable UniformConstant 
                                         i32 %296 = OpConstant 8 
                              Private f32_4* %318 = OpVariable Private 
                                         f32 %342 = OpConstant 3.674022E-40 
                              Private f32_3* %353 = OpVariable Private 
        UniformConstant read_only Texture2D* %354 = OpVariable UniformConstant 
                    UniformConstant sampler* %356 = OpVariable UniformConstant 
                                         f32 %364 = OpConstant 3.674022E-40 
                                       f32_3 %365 = OpConstantComposite %364 %364 %364 
                                         f32 %367 = OpConstant 3.674022E-40 
                                       f32_3 %368 = OpConstantComposite %367 %367 %367 
        UniformConstant read_only Texture2D* %409 = OpVariable UniformConstant 
                    UniformConstant sampler* %411 = OpVariable UniformConstant 
        UniformConstant read_only Texture2D* %417 = OpVariable UniformConstant 
                    UniformConstant sampler* %419 = OpVariable UniformConstant 
                                       f32_4 %431 = OpConstantComposite %73 %73 %73 %73 
                                Private f32* %433 = OpVariable Private 
                                         f32 %440 = OpConstant 3.674022E-40 
                                Private f32* %442 = OpVariable Private 
                                Private f32* %446 = OpVariable Private 
                                         f32 %460 = OpConstant 3.674022E-40 
                                         f32 %463 = OpConstant 3.674022E-40 
                                         f32 %503 = OpConstant 3.674022E-40 
                                         f32 %514 = OpConstant 3.674022E-40 
                                             %523 = OpTypeBool 
                                             %524 = OpTypePointer Private %523 
                               Private bool* %525 = OpVariable Private 
                                         f32 %549 = OpConstant 3.674022E-40 
                                             %640 = OpTypePointer Output %7 
                               Output f32_4* %641 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_4* %231 = OpVariable Function 
                                 Uniform f32* %21 = OpAccessChain %16 %18 %19 
                                          f32 %22 = OpLoad %21 
                                   Input f32* %26 = OpAccessChain vs_TEXCOORD1 %19 
                                          f32 %27 = OpLoad %26 
                                          f32 %28 = OpFDiv %22 %27 
                                 Private f32* %31 = OpAccessChain %9 %29 
                                                      OpStore %31 %28 
                                        f32_4 %32 = OpLoad %9 
                                        f32_3 %33 = OpVectorShuffle %32 %32 0 0 0 
                                        f32_3 %34 = OpLoad vs_TEXCOORD1 
                                        f32_3 %35 = OpFMul %33 %34 
                                        f32_4 %36 = OpLoad %9 
                                        f32_4 %37 = OpVectorShuffle %36 %35 4 5 6 3 
                                                      OpStore %9 %37 
                                        f32_4 %42 = OpLoad vs_TEXCOORD0 
                                        f32_2 %43 = OpVectorShuffle %42 %42 0 1 
                                        f32_4 %44 = OpLoad vs_TEXCOORD0 
                                        f32_2 %45 = OpVectorShuffle %44 %44 3 3 
                                        f32_2 %46 = OpFDiv %43 %45 
                                        f32_4 %47 = OpLoad %38 
                                        f32_4 %48 = OpVectorShuffle %47 %46 4 5 2 3 
                                                      OpStore %38 %48 
                          read_only Texture2D %53 = OpLoad %52 
                                      sampler %57 = OpLoad %56 
                   read_only Texture2DSampled %59 = OpSampledImage %53 %57 
                                        f32_4 %60 = OpLoad %38 
                                        f32_2 %61 = OpVectorShuffle %60 %60 0 1 
                                        f32_4 %62 = OpImageSampleImplicitLod %59 %61 
                                          f32 %63 = OpCompositeExtract %62 0 
                                                      OpStore %49 %63 
                                 Uniform f32* %65 = OpAccessChain %16 %64 %29 
                                          f32 %66 = OpLoad %65 
                                          f32 %67 = OpLoad %49 
                                          f32 %68 = OpFMul %66 %67 
                                 Uniform f32* %70 = OpAccessChain %16 %64 %69 
                                          f32 %71 = OpLoad %70 
                                          f32 %72 = OpFAdd %68 %71 
                                                      OpStore %49 %72 
                                          f32 %74 = OpLoad %49 
                                          f32 %75 = OpFDiv %73 %74 
                                                      OpStore %49 %75 
                                          f32 %77 = OpLoad %49 
                                        f32_3 %78 = OpCompositeConstruct %77 %77 %77 
                                        f32_4 %79 = OpLoad %9 
                                        f32_3 %80 = OpVectorShuffle %79 %79 0 1 2 
                                        f32_3 %81 = OpFMul %78 %80 
                                        f32_4 %82 = OpLoad %76 
                                        f32_4 %83 = OpVectorShuffle %82 %81 4 5 6 3 
                                                      OpStore %76 %83 
                                        f32_4 %86 = OpLoad %76 
                                        f32_3 %87 = OpVectorShuffle %86 %86 1 1 1 
                               Uniform f32_4* %90 = OpAccessChain %16 %88 %18 
                                        f32_4 %91 = OpLoad %90 
                                        f32_3 %92 = OpVectorShuffle %91 %91 0 1 2 
                                        f32_3 %93 = OpFMul %87 %92 
                                                      OpStore %85 %93 
                               Uniform f32_4* %95 = OpAccessChain %16 %88 %94 
                                        f32_4 %96 = OpLoad %95 
                                        f32_3 %97 = OpVectorShuffle %96 %96 0 1 2 
                                        f32_4 %98 = OpLoad %76 
                                        f32_3 %99 = OpVectorShuffle %98 %98 0 0 0 
                                       f32_3 %100 = OpFMul %97 %99 
                                       f32_3 %101 = OpLoad %85 
                                       f32_3 %102 = OpFAdd %100 %101 
                                       f32_4 %103 = OpLoad %76 
                                       f32_4 %104 = OpVectorShuffle %103 %102 4 5 2 6 
                                                      OpStore %76 %104 
                              Uniform f32_4* %105 = OpAccessChain %16 %88 %64 
                                       f32_4 %106 = OpLoad %105 
                                       f32_3 %107 = OpVectorShuffle %106 %106 0 1 2 
                                       f32_4 %108 = OpLoad %76 
                                       f32_3 %109 = OpVectorShuffle %108 %108 2 2 2 
                                       f32_3 %110 = OpFMul %107 %109 
                                       f32_4 %111 = OpLoad %76 
                                       f32_3 %112 = OpVectorShuffle %111 %111 0 1 3 
                                       f32_3 %113 = OpFAdd %110 %112 
                                       f32_4 %114 = OpLoad %76 
                                       f32_4 %115 = OpVectorShuffle %114 %113 4 5 2 6 
                                                      OpStore %76 %115 
                                       f32_4 %116 = OpLoad %76 
                                       f32_3 %117 = OpVectorShuffle %116 %116 0 1 3 
                              Uniform f32_4* %118 = OpAccessChain %16 %88 %88 
                                       f32_4 %119 = OpLoad %118 
                                       f32_3 %120 = OpVectorShuffle %119 %119 0 1 2 
                                       f32_3 %121 = OpFAdd %117 %120 
                                       f32_4 %122 = OpLoad %76 
                                       f32_4 %123 = OpVectorShuffle %122 %121 4 5 2 6 
                                                      OpStore %76 %123 
                                       f32_4 %124 = OpLoad %76 
                                       f32_3 %125 = OpVectorShuffle %124 %124 0 1 3 
                              Uniform f32_4* %127 = OpAccessChain %16 %126 
                                       f32_4 %128 = OpLoad %127 
                                       f32_3 %129 = OpVectorShuffle %128 %128 0 1 2 
                                       f32_3 %130 = OpFNegate %129 
                                       f32_3 %131 = OpFAdd %125 %130 
                                                      OpStore %85 %131 
                                       f32_3 %132 = OpLoad %85 
                                       f32_3 %133 = OpLoad %85 
                                         f32 %134 = OpDot %132 %133 
                                Private f32* %135 = OpAccessChain %9 %29 
                                                      OpStore %135 %134 
                                Private f32* %136 = OpAccessChain %9 %29 
                                         f32 %137 = OpLoad %136 
                                         f32 %138 = OpExtInst %1 31 %137 
                                Private f32* %139 = OpAccessChain %9 %29 
                                                      OpStore %139 %138 
                                Private f32* %140 = OpAccessChain %9 %19 
                                         f32 %141 = OpLoad %140 
                                         f32 %142 = OpFNegate %141 
                                         f32 %143 = OpLoad %49 
                                         f32 %144 = OpFMul %142 %143 
                                Private f32* %145 = OpAccessChain %9 %29 
                                         f32 %146 = OpLoad %145 
                                         f32 %147 = OpFAdd %144 %146 
                                Private f32* %148 = OpAccessChain %9 %29 
                                                      OpStore %148 %147 
                                Uniform f32* %150 = OpAccessChain %16 %126 %149 
                                         f32 %151 = OpLoad %150 
                                Private f32* %152 = OpAccessChain %9 %29 
                                         f32 %153 = OpLoad %152 
                                         f32 %154 = OpFMul %151 %153 
                                Private f32* %155 = OpAccessChain %76 %19 
                                         f32 %156 = OpLoad %155 
                                         f32 %157 = OpFAdd %154 %156 
                                Private f32* %158 = OpAccessChain %9 %29 
                                                      OpStore %158 %157 
                                Private f32* %159 = OpAccessChain %9 %29 
                                         f32 %160 = OpLoad %159 
                                Uniform f32* %162 = OpAccessChain %16 %161 %19 
                                         f32 %163 = OpLoad %162 
                                         f32 %164 = OpFMul %160 %163 
                                Uniform f32* %165 = OpAccessChain %16 %161 %149 
                                         f32 %166 = OpLoad %165 
                                         f32 %167 = OpFAdd %164 %166 
                                Private f32* %168 = OpAccessChain %9 %29 
                                                      OpStore %168 %167 
                                Private f32* %169 = OpAccessChain %9 %29 
                                         f32 %170 = OpLoad %169 
                                         f32 %172 = OpExtInst %1 43 %170 %171 %73 
                                Private f32* %173 = OpAccessChain %9 %29 
                                                      OpStore %173 %172 
                                       f32_4 %175 = OpLoad %76 
                                       f32_3 %176 = OpVectorShuffle %175 %175 0 1 3 
                              Uniform f32_4* %178 = OpAccessChain %16 %177 
                                       f32_4 %179 = OpLoad %178 
                                       f32_3 %180 = OpVectorShuffle %179 %179 0 1 2 
                                       f32_3 %181 = OpFNegate %180 
                                       f32_3 %182 = OpFAdd %176 %181 
                                                      OpStore %174 %182 
                                       f32_4 %183 = OpLoad %76 
                                       f32_3 %184 = OpVectorShuffle %183 %183 0 1 3 
                              Uniform f32_3* %186 = OpAccessChain %16 %94 
                                       f32_3 %187 = OpLoad %186 
                                       f32_3 %188 = OpFNegate %187 
                                       f32_3 %189 = OpFAdd %184 %188 
                                       f32_4 %190 = OpLoad %76 
                                       f32_4 %191 = OpVectorShuffle %190 %189 4 5 6 3 
                                                      OpStore %76 %191 
                                Private f32* %193 = OpAccessChain %174 %69 
                                         f32 %194 = OpLoad %193 
                                         f32 %195 = OpExtInst %1 4 %194 
                                Private f32* %196 = OpAccessChain %174 %29 
                                         f32 %197 = OpLoad %196 
                                         f32 %198 = OpExtInst %1 4 %197 
                                         f32 %199 = OpExtInst %1 40 %195 %198 
                                                      OpStore %192 %199 
                                Private f32* %200 = OpAccessChain %174 %19 
                                         f32 %201 = OpLoad %200 
                                         f32 %202 = OpExtInst %1 4 %201 
                                         f32 %203 = OpLoad %192 
                                         f32 %204 = OpExtInst %1 40 %202 %203 
                                                      OpStore %192 %204 
                                         f32 %205 = OpLoad %192 
                                Uniform f32* %207 = OpAccessChain %16 %206 %19 
                                         f32 %208 = OpLoad %207 
                                         f32 %209 = OpFNegate %208 
                                         f32 %210 = OpFAdd %205 %209 
                                                      OpStore %192 %210 
                                         f32 %211 = OpLoad %192 
                                         f32 %213 = OpExtInst %1 40 %211 %212 
                                                      OpStore %192 %213 
                                         f32 %214 = OpLoad %192 
                                Uniform f32* %215 = OpAccessChain %16 %206 %149 
                                         f32 %216 = OpLoad %215 
                                         f32 %217 = OpFMul %214 %216 
                                                      OpStore %192 %217 
                                Uniform f32* %218 = OpAccessChain %16 %206 %69 
                                         f32 %219 = OpLoad %218 
                                         f32 %220 = OpLoad %192 
                                         f32 %221 = OpFDiv %219 %220 
                                                      OpStore %192 %221 
                                         f32 %222 = OpLoad %192 
                                Uniform f32* %223 = OpAccessChain %16 %206 %29 
                                         f32 %224 = OpLoad %223 
                                         f32 %225 = OpFNegate %224 
                                         f32 %226 = OpFAdd %222 %225 
                                                      OpStore %192 %226 
                                         f32 %227 = OpLoad %192 
                                         f32 %228 = OpFNegate %227 
                                         f32 %229 = OpFAdd %228 %73 
                                                      OpStore %192 %229 
                                       f32_3 %232 = OpLoad %174 
                                         f32 %233 = OpLoad %192 
                                         f32 %234 = OpCompositeExtract %232 0 
                                         f32 %235 = OpCompositeExtract %232 1 
                                         f32 %236 = OpCompositeExtract %232 2 
                                       f32_4 %237 = OpCompositeConstruct %234 %235 %236 %233 
                                                      OpStore %231 %237 
                       read_only TextureCube %241 = OpLoad %240 
                                     sampler %243 = OpLoad %242 
                read_only TextureCubeSampled %246 = OpSampledImage %241 %243 
                                       f32_4 %247 = OpLoad %231 
                                         f32 %248 = OpCompositeExtract %247 3 
                                         f32 %249 = OpImageSampleDrefImplicitLod %246 %247 %248 
                                                      OpStore %192 %249 
                                Uniform f32* %251 = OpAccessChain %16 %161 %29 
                                         f32 %252 = OpLoad %251 
                                         f32 %253 = OpFNegate %252 
                                         f32 %254 = OpFAdd %253 %73 
                                                      OpStore %250 %254 
                                         f32 %255 = OpLoad %192 
                                         f32 %256 = OpLoad %250 
                                         f32 %257 = OpFMul %255 %256 
                                Uniform f32* %258 = OpAccessChain %16 %161 %29 
                                         f32 %259 = OpLoad %258 
                                         f32 %260 = OpFAdd %257 %259 
                                                      OpStore %192 %260 
                                         f32 %261 = OpLoad %192 
                                         f32 %262 = OpFNegate %261 
                                         f32 %263 = OpFAdd %262 %73 
                                                      OpStore %250 %263 
                                Private f32* %264 = OpAccessChain %9 %29 
                                         f32 %265 = OpLoad %264 
                                         f32 %266 = OpLoad %250 
                                         f32 %267 = OpFMul %265 %266 
                                         f32 %268 = OpLoad %192 
                                         f32 %269 = OpFAdd %267 %268 
                                Private f32* %270 = OpAccessChain %9 %29 
                                                      OpStore %270 %269 
                                       f32_3 %271 = OpLoad %174 
                                       f32_3 %272 = OpLoad %174 
                                         f32 %273 = OpDot %271 %272 
                                                      OpStore %192 %273 
                                         f32 %274 = OpLoad %192 
                                Uniform f32* %275 = OpAccessChain %16 %177 %149 
                                         f32 %276 = OpLoad %275 
                                         f32 %277 = OpFMul %274 %276 
                                                      OpStore %250 %277 
                                         f32 %278 = OpLoad %192 
                                         f32 %279 = OpExtInst %1 32 %278 
                                                      OpStore %192 %279 
                         read_only Texture2D %281 = OpLoad %280 
                                     sampler %283 = OpLoad %282 
                  read_only Texture2DSampled %284 = OpSampledImage %281 %283 
                                         f32 %285 = OpLoad %250 
                                       f32_2 %286 = OpCompositeConstruct %285 %285 
                                       f32_4 %287 = OpImageSampleImplicitLod %284 %286 
                                         f32 %288 = OpCompositeExtract %287 0 
                                                      OpStore %250 %288 
                                Private f32* %289 = OpAccessChain %9 %29 
                                         f32 %290 = OpLoad %289 
                                         f32 %291 = OpLoad %250 
                                         f32 %292 = OpFMul %290 %291 
                                Private f32* %293 = OpAccessChain %9 %29 
                                                      OpStore %293 %292 
                                       f32_4 %294 = OpLoad %9 
                                       f32_3 %295 = OpVectorShuffle %294 %294 0 0 0 
                              Uniform f32_4* %297 = OpAccessChain %16 %296 
                                       f32_4 %298 = OpLoad %297 
                                       f32_3 %299 = OpVectorShuffle %298 %298 0 1 2 
                                       f32_3 %300 = OpFMul %295 %299 
                                                      OpStore %85 %300 
                                       f32_4 %301 = OpLoad %76 
                                       f32_3 %302 = OpVectorShuffle %301 %301 0 1 2 
                                       f32_4 %303 = OpLoad %76 
                                       f32_3 %304 = OpVectorShuffle %303 %303 0 1 2 
                                         f32 %305 = OpDot %302 %304 
                                Private f32* %306 = OpAccessChain %9 %29 
                                                      OpStore %306 %305 
                                Private f32* %307 = OpAccessChain %9 %29 
                                         f32 %308 = OpLoad %307 
                                         f32 %309 = OpExtInst %1 32 %308 
                                Private f32* %310 = OpAccessChain %9 %29 
                                                      OpStore %310 %309 
                                       f32_4 %311 = OpLoad %9 
                                       f32_3 %312 = OpVectorShuffle %311 %311 0 0 0 
                                       f32_4 %313 = OpLoad %76 
                                       f32_3 %314 = OpVectorShuffle %313 %313 0 1 2 
                                       f32_3 %315 = OpFMul %312 %314 
                                       f32_4 %316 = OpLoad %76 
                                       f32_4 %317 = OpVectorShuffle %316 %315 4 5 6 3 
                                                      OpStore %76 %317 
                                       f32_3 %319 = OpLoad %174 
                                       f32_3 %320 = OpFNegate %319 
                                         f32 %321 = OpLoad %192 
                                       f32_3 %322 = OpCompositeConstruct %321 %321 %321 
                                       f32_3 %323 = OpFMul %320 %322 
                                       f32_4 %324 = OpLoad %76 
                                       f32_3 %325 = OpVectorShuffle %324 %324 0 1 2 
                                       f32_3 %326 = OpFNegate %325 
                                       f32_3 %327 = OpFAdd %323 %326 
                                       f32_4 %328 = OpLoad %318 
                                       f32_4 %329 = OpVectorShuffle %328 %327 4 5 6 3 
                                                      OpStore %318 %329 
                                       f32_3 %330 = OpLoad %174 
                                         f32 %331 = OpLoad %192 
                                       f32_3 %332 = OpCompositeConstruct %331 %331 %331 
                                       f32_3 %333 = OpFMul %330 %332 
                                       f32_4 %334 = OpLoad %9 
                                       f32_4 %335 = OpVectorShuffle %334 %333 4 5 6 3 
                                                      OpStore %9 %335 
                                       f32_4 %336 = OpLoad %318 
                                       f32_3 %337 = OpVectorShuffle %336 %336 0 1 2 
                                       f32_4 %338 = OpLoad %318 
                                       f32_3 %339 = OpVectorShuffle %338 %338 0 1 2 
                                         f32 %340 = OpDot %337 %339 
                                                      OpStore %49 %340 
                                         f32 %341 = OpLoad %49 
                                         f32 %343 = OpExtInst %1 40 %341 %342 
                                                      OpStore %49 %343 
                                         f32 %344 = OpLoad %49 
                                         f32 %345 = OpExtInst %1 32 %344 
                                                      OpStore %49 %345 
                                         f32 %346 = OpLoad %49 
                                       f32_3 %347 = OpCompositeConstruct %346 %346 %346 
                                       f32_4 %348 = OpLoad %318 
                                       f32_3 %349 = OpVectorShuffle %348 %348 0 1 2 
                                       f32_3 %350 = OpFMul %347 %349 
                                       f32_4 %351 = OpLoad %318 
                                       f32_4 %352 = OpVectorShuffle %351 %350 4 5 6 3 
                                                      OpStore %318 %352 
                         read_only Texture2D %355 = OpLoad %354 
                                     sampler %357 = OpLoad %356 
                  read_only Texture2DSampled %358 = OpSampledImage %355 %357 
                                       f32_4 %359 = OpLoad %38 
                                       f32_2 %360 = OpVectorShuffle %359 %359 0 1 
                                       f32_4 %361 = OpImageSampleImplicitLod %358 %360 
                                       f32_3 %362 = OpVectorShuffle %361 %361 0 1 2 
                                                      OpStore %353 %362 
                                       f32_3 %363 = OpLoad %353 
                                       f32_3 %366 = OpFMul %363 %365 
                                       f32_3 %369 = OpFAdd %366 %368 
                                                      OpStore %353 %369 
                                       f32_3 %370 = OpLoad %353 
                                       f32_3 %371 = OpLoad %353 
                                         f32 %372 = OpDot %370 %371 
                                                      OpStore %49 %372 
                                         f32 %373 = OpLoad %49 
                                         f32 %374 = OpExtInst %1 32 %373 
                                                      OpStore %49 %374 
                                         f32 %375 = OpLoad %49 
                                       f32_3 %376 = OpCompositeConstruct %375 %375 %375 
                                       f32_3 %377 = OpLoad %353 
                                       f32_3 %378 = OpFMul %376 %377 
                                                      OpStore %353 %378 
                                       f32_3 %379 = OpLoad %353 
                                       f32_4 %380 = OpLoad %318 
                                       f32_3 %381 = OpVectorShuffle %380 %380 0 1 2 
                                         f32 %382 = OpDot %379 %381 
                                                      OpStore %49 %382 
                                         f32 %383 = OpLoad %49 
                                         f32 %384 = OpExtInst %1 43 %383 %171 %73 
                                                      OpStore %49 %384 
                                       f32_4 %385 = OpLoad %9 
                                       f32_3 %386 = OpVectorShuffle %385 %385 0 1 2 
                                       f32_3 %387 = OpFNegate %386 
                                       f32_4 %388 = OpLoad %318 
                                       f32_3 %389 = OpVectorShuffle %388 %388 0 1 2 
                                         f32 %390 = OpDot %387 %389 
                                                      OpStore %192 %390 
                                         f32 %391 = OpLoad %192 
                                         f32 %392 = OpExtInst %1 43 %391 %171 %73 
                                                      OpStore %192 %392 
                                       f32_3 %393 = OpLoad %353 
                                       f32_4 %394 = OpLoad %9 
                                       f32_3 %395 = OpVectorShuffle %394 %394 0 1 2 
                                       f32_3 %396 = OpFNegate %395 
                                         f32 %397 = OpDot %393 %396 
                                Private f32* %398 = OpAccessChain %9 %29 
                                                      OpStore %398 %397 
                                Private f32* %399 = OpAccessChain %9 %29 
                                         f32 %400 = OpLoad %399 
                                         f32 %401 = OpExtInst %1 43 %400 %171 %73 
                                Private f32* %402 = OpAccessChain %9 %29 
                                                      OpStore %402 %401 
                                       f32_3 %403 = OpLoad %353 
                                       f32_4 %404 = OpLoad %76 
                                       f32_3 %405 = OpVectorShuffle %404 %404 0 1 2 
                                       f32_3 %406 = OpFNegate %405 
                                         f32 %407 = OpDot %403 %406 
                                Private f32* %408 = OpAccessChain %174 %29 
                                                      OpStore %408 %407 
                         read_only Texture2D %410 = OpLoad %409 
                                     sampler %412 = OpLoad %411 
                  read_only Texture2DSampled %413 = OpSampledImage %410 %412 
                                       f32_4 %414 = OpLoad %38 
                                       f32_2 %415 = OpVectorShuffle %414 %414 0 1 
                                       f32_4 %416 = OpImageSampleImplicitLod %413 %415 
                                                      OpStore %76 %416 
                         read_only Texture2D %418 = OpLoad %417 
                                     sampler %420 = OpLoad %419 
                  read_only Texture2DSampled %421 = OpSampledImage %418 %420 
                                       f32_4 %422 = OpLoad %38 
                                       f32_2 %423 = OpVectorShuffle %422 %422 0 1 
                                       f32_4 %424 = OpImageSampleImplicitLod %421 %423 
                                       f32_3 %425 = OpVectorShuffle %424 %424 0 1 2 
                                       f32_4 %426 = OpLoad %38 
                                       f32_4 %427 = OpVectorShuffle %426 %425 4 5 2 6 
                                                      OpStore %38 %427 
                                       f32_4 %428 = OpLoad %76 
                                       f32_4 %429 = OpVectorShuffle %428 %428 3 0 1 2 
                                       f32_4 %430 = OpFNegate %429 
                                       f32_4 %432 = OpFAdd %430 %431 
                                                      OpStore %318 %432 
                                Private f32* %434 = OpAccessChain %318 %29 
                                         f32 %435 = OpLoad %434 
                                Private f32* %436 = OpAccessChain %318 %29 
                                         f32 %437 = OpLoad %436 
                                         f32 %438 = OpFMul %435 %437 
                                                      OpStore %433 %438 
                                         f32 %439 = OpLoad %433 
                                         f32 %441 = OpExtInst %1 40 %439 %440 
                                                      OpStore %433 %441 
                                         f32 %443 = OpLoad %433 
                                         f32 %444 = OpLoad %433 
                                         f32 %445 = OpFMul %443 %444 
                                                      OpStore %442 %445 
                                         f32 %447 = OpLoad %49 
                                         f32 %448 = OpLoad %442 
                                         f32 %449 = OpFMul %447 %448 
                                         f32 %450 = OpLoad %49 
                                         f32 %451 = OpFNegate %450 
                                         f32 %452 = OpFAdd %449 %451 
                                                      OpStore %446 %452 
                                         f32 %453 = OpLoad %446 
                                         f32 %454 = OpLoad %49 
                                         f32 %455 = OpFMul %453 %454 
                                         f32 %456 = OpFAdd %455 %73 
                                                      OpStore %49 %456 
                                         f32 %457 = OpLoad %49 
                                         f32 %458 = OpLoad %49 
                                         f32 %459 = OpFMul %457 %458 
                                         f32 %461 = OpFAdd %459 %460 
                                                      OpStore %49 %461 
                                         f32 %462 = OpLoad %442 
                                         f32 %464 = OpFMul %462 %463 
                                                      OpStore %442 %464 
                                         f32 %465 = OpLoad %442 
                                         f32 %466 = OpLoad %49 
                                         f32 %467 = OpFDiv %465 %466 
                                                      OpStore %49 %467 
                                         f32 %468 = OpLoad %433 
                                         f32 %469 = OpFNegate %468 
                                         f32 %470 = OpFAdd %469 %73 
                                                      OpStore %442 %470 
                                Private f32* %471 = OpAccessChain %174 %29 
                                         f32 %472 = OpLoad %471 
                                         f32 %473 = OpExtInst %1 4 %472 
                                         f32 %474 = OpLoad %442 
                                         f32 %475 = OpFMul %473 %474 
                                         f32 %476 = OpLoad %433 
                                         f32 %477 = OpFAdd %475 %476 
                                                      OpStore %446 %477 
                                Private f32* %478 = OpAccessChain %9 %29 
                                         f32 %479 = OpLoad %478 
                                         f32 %480 = OpLoad %442 
                                         f32 %481 = OpFMul %479 %480 
                                         f32 %482 = OpLoad %433 
                                         f32 %483 = OpFAdd %481 %482 
                                                      OpStore %433 %483 
                                         f32 %484 = OpLoad %433 
                                Private f32* %485 = OpAccessChain %174 %29 
                                         f32 %486 = OpLoad %485 
                                         f32 %487 = OpExtInst %1 4 %486 
                                         f32 %488 = OpFMul %484 %487 
                                                      OpStore %433 %488 
                                Private f32* %489 = OpAccessChain %174 %29 
                                         f32 %490 = OpLoad %489 
                                         f32 %491 = OpExtInst %1 4 %490 
                                         f32 %492 = OpFNegate %491 
                                         f32 %493 = OpFAdd %492 %73 
                                Private f32* %494 = OpAccessChain %174 %29 
                                                      OpStore %494 %493 
                                Private f32* %495 = OpAccessChain %9 %29 
                                         f32 %496 = OpLoad %495 
                                         f32 %497 = OpLoad %446 
                                         f32 %498 = OpFMul %496 %497 
                                         f32 %499 = OpLoad %433 
                                         f32 %500 = OpFAdd %498 %499 
                                                      OpStore %433 %500 
                                         f32 %501 = OpLoad %433 
                                         f32 %502 = OpFAdd %501 %212 
                                                      OpStore %433 %502 
                                         f32 %504 = OpLoad %433 
                                         f32 %505 = OpFDiv %503 %504 
                                                      OpStore %433 %505 
                                         f32 %506 = OpLoad %49 
                                         f32 %507 = OpLoad %433 
                                         f32 %508 = OpFMul %506 %507 
                                                      OpStore %433 %508 
                                Private f32* %509 = OpAccessChain %9 %29 
                                         f32 %510 = OpLoad %509 
                                         f32 %511 = OpLoad %433 
                                         f32 %512 = OpFMul %510 %511 
                                                      OpStore %433 %512 
                                         f32 %513 = OpLoad %433 
                                         f32 %515 = OpFMul %513 %514 
                                                      OpStore %433 %515 
                                         f32 %516 = OpLoad %433 
                                         f32 %517 = OpExtInst %1 40 %516 %171 
                                                      OpStore %433 %517 
                                       f32_4 %518 = OpLoad %76 
                                       f32_3 %519 = OpVectorShuffle %518 %518 0 1 2 
                                       f32_4 %520 = OpLoad %76 
                                       f32_3 %521 = OpVectorShuffle %520 %520 0 1 2 
                                         f32 %522 = OpDot %519 %521 
                                                      OpStore %49 %522 
                                         f32 %526 = OpLoad %49 
                                        bool %527 = OpFOrdNotEqual %526 %171 
                                                      OpStore %525 %527 
                                        bool %528 = OpLoad %525 
                                         f32 %529 = OpSelect %528 %73 %171 
                                                      OpStore %49 %529 
                                         f32 %530 = OpLoad %49 
                                         f32 %531 = OpLoad %433 
                                         f32 %532 = OpFMul %530 %531 
                                                      OpStore %433 %532 
                                       f32_3 %533 = OpLoad %85 
                                         f32 %534 = OpLoad %433 
                                       f32_3 %535 = OpCompositeConstruct %534 %534 %534 
                                       f32_3 %536 = OpFMul %533 %535 
                                                      OpStore %353 %536 
                                         f32 %537 = OpLoad %192 
                                         f32 %538 = OpFNegate %537 
                                         f32 %539 = OpFAdd %538 %73 
                                                      OpStore %433 %539 
                                         f32 %540 = OpLoad %192 
                                         f32 %541 = OpLoad %192 
                                         f32 %542 = OpFMul %540 %541 
                                                      OpStore %49 %542 
                                         f32 %543 = OpLoad %49 
                                       f32_2 %544 = OpCompositeConstruct %543 %543 
                                       f32_4 %545 = OpLoad %318 
                                       f32_2 %546 = OpVectorShuffle %545 %545 0 0 
                                         f32 %547 = OpDot %544 %546 
                                                      OpStore %49 %547 
                                         f32 %548 = OpLoad %49 
                                         f32 %550 = OpFAdd %548 %549 
                                                      OpStore %49 %550 
                                         f32 %551 = OpLoad %433 
                                         f32 %552 = OpLoad %433 
                                         f32 %553 = OpFMul %551 %552 
                                                      OpStore %192 %553 
                                         f32 %554 = OpLoad %192 
                                         f32 %555 = OpLoad %192 
                                         f32 %556 = OpFMul %554 %555 
                                                      OpStore %192 %556 
                                         f32 %557 = OpLoad %433 
                                         f32 %558 = OpLoad %192 
                                         f32 %559 = OpFMul %557 %558 
                                                      OpStore %433 %559 
                                       f32_4 %560 = OpLoad %318 
                                       f32_3 %561 = OpVectorShuffle %560 %560 1 2 3 
                                         f32 %562 = OpLoad %433 
                                       f32_3 %563 = OpCompositeConstruct %562 %562 %562 
                                       f32_3 %564 = OpFMul %561 %563 
                                       f32_4 %565 = OpLoad %76 
                                       f32_3 %566 = OpVectorShuffle %565 %565 0 1 2 
                                       f32_3 %567 = OpFAdd %564 %566 
                                       f32_4 %568 = OpLoad %76 
                                       f32_4 %569 = OpVectorShuffle %568 %567 4 5 6 3 
                                                      OpStore %76 %569 
                                       f32_4 %570 = OpLoad %76 
                                       f32_3 %571 = OpVectorShuffle %570 %570 0 1 2 
                                       f32_3 %572 = OpLoad %353 
                                       f32_3 %573 = OpFMul %571 %572 
                                       f32_4 %574 = OpLoad %76 
                                       f32_4 %575 = OpVectorShuffle %574 %573 4 5 6 3 
                                                      OpStore %76 %575 
                                Private f32* %576 = OpAccessChain %174 %29 
                                         f32 %577 = OpLoad %576 
                                Private f32* %578 = OpAccessChain %174 %29 
                                         f32 %579 = OpLoad %578 
                                         f32 %580 = OpFMul %577 %579 
                                                      OpStore %433 %580 
                                         f32 %581 = OpLoad %433 
                                         f32 %582 = OpLoad %433 
                                         f32 %583 = OpFMul %581 %582 
                                                      OpStore %433 %583 
                                Private f32* %584 = OpAccessChain %174 %29 
                                         f32 %585 = OpLoad %584 
                                         f32 %586 = OpLoad %433 
                                         f32 %587 = OpFMul %585 %586 
                                Private f32* %588 = OpAccessChain %174 %29 
                                                      OpStore %588 %587 
                                         f32 %589 = OpLoad %49 
                                Private f32* %590 = OpAccessChain %174 %29 
                                         f32 %591 = OpLoad %590 
                                         f32 %592 = OpFMul %589 %591 
                                         f32 %593 = OpFAdd %592 %73 
                                Private f32* %594 = OpAccessChain %174 %29 
                                                      OpStore %594 %593 
                                Private f32* %595 = OpAccessChain %9 %29 
                                         f32 %596 = OpLoad %595 
                                         f32 %597 = OpFNegate %596 
                                         f32 %598 = OpFAdd %597 %73 
                                                      OpStore %433 %598 
                                         f32 %599 = OpLoad %433 
                                         f32 %600 = OpLoad %433 
                                         f32 %601 = OpFMul %599 %600 
                                                      OpStore %192 %601 
                                         f32 %602 = OpLoad %192 
                                         f32 %603 = OpLoad %192 
                                         f32 %604 = OpFMul %602 %603 
                                                      OpStore %192 %604 
                                         f32 %605 = OpLoad %433 
                                         f32 %606 = OpLoad %192 
                                         f32 %607 = OpFMul %605 %606 
                                                      OpStore %433 %607 
                                         f32 %608 = OpLoad %49 
                                         f32 %609 = OpLoad %433 
                                         f32 %610 = OpFMul %608 %609 
                                         f32 %611 = OpFAdd %610 %73 
                                                      OpStore %433 %611 
                                Private f32* %612 = OpAccessChain %174 %29 
                                         f32 %613 = OpLoad %612 
                                         f32 %614 = OpLoad %433 
                                         f32 %615 = OpFMul %613 %614 
                                Private f32* %616 = OpAccessChain %174 %29 
                                                      OpStore %616 %615 
                                Private f32* %617 = OpAccessChain %9 %29 
                                         f32 %618 = OpLoad %617 
                                Private f32* %619 = OpAccessChain %174 %29 
                                         f32 %620 = OpLoad %619 
                                         f32 %621 = OpFMul %618 %620 
                                Private f32* %622 = OpAccessChain %9 %29 
                                                      OpStore %622 %621 
                                       f32_4 %623 = OpLoad %9 
                                       f32_3 %624 = OpVectorShuffle %623 %623 0 0 0 
                                       f32_3 %625 = OpLoad %85 
                                       f32_3 %626 = OpFMul %624 %625 
                                       f32_4 %627 = OpLoad %9 
                                       f32_4 %628 = OpVectorShuffle %627 %626 4 5 6 3 
                                                      OpStore %9 %628 
                                       f32_4 %629 = OpLoad %38 
                                       f32_3 %630 = OpVectorShuffle %629 %629 0 1 3 
                                       f32_4 %631 = OpLoad %9 
                                       f32_3 %632 = OpVectorShuffle %631 %631 0 1 2 
                                       f32_3 %633 = OpFMul %630 %632 
                                       f32_4 %634 = OpLoad %76 
                                       f32_3 %635 = OpVectorShuffle %634 %634 0 1 2 
                                       f32_3 %636 = OpFAdd %633 %635 
                                       f32_4 %637 = OpLoad %9 
                                       f32_4 %638 = OpVectorShuffle %637 %636 4 5 6 3 
                                                      OpStore %9 %638 
                                Private f32* %639 = OpAccessChain %9 %149 
                                                      OpStore %639 %73 
                                       f32_4 %642 = OpLoad %9 
                                       f32_4 %643 = OpFNegate %642 
                                       f32_4 %644 = OpExtInst %1 29 %643 
                                                      OpStore %641 %644 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _LightProjectionParams;
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
UNITY_LOCATION(0) uniform  sampler2D _CameraDepthTexture;
UNITY_LOCATION(1) uniform  sampler2D _LightTextureB0;
UNITY_LOCATION(2) uniform  sampler2D _CameraGBufferTexture0;
UNITY_LOCATION(3) uniform  sampler2D _CameraGBufferTexture1;
UNITY_LOCATION(4) uniform  sampler2D _CameraGBufferTexture2;
UNITY_LOCATION(5) uniform  samplerCube _ShadowMapTexture;
UNITY_LOCATION(6) uniform  samplerCubeShadow hlslcc_zcmp_ShadowMapTexture;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec3 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
vec4 u_xlat6;
vec4 u_xlat7;
vec3 u_xlat8;
float u_xlat9;
vec3 u_xlat12;
float u_xlat16;
float u_xlat17;
bool u_xlatb17;
float u_xlat18;
float u_xlat24;
bool u_xlatb24;
float u_xlat25;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat2 = texture(_CameraDepthTexture, u_xlat1.xy);
    u_xlat24 = _ZBufferParams.x * u_xlat2.x + _ZBufferParams.y;
    u_xlat24 = float(1.0) / u_xlat24;
    u_xlat2.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat24 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat8.xyz = u_xlat2.xyw + (-_LightPos.xyz);
    u_xlat17 = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat25 = inversesqrt(u_xlat17);
    u_xlat3.xyz = u_xlat8.xyz * vec3(u_xlat25);
    u_xlat17 = u_xlat17 * _LightPos.w;
    u_xlat4 = texture(_LightTextureB0, vec2(u_xlat17));
    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlatb17 = u_xlat0.x<0.99000001;
    if(u_xlatb17){
        u_xlat17 = max(abs(u_xlat8.y), abs(u_xlat8.x));
        u_xlat17 = max(abs(u_xlat8.z), u_xlat17);
        u_xlat17 = u_xlat17 + (-_LightProjectionParams.z);
        u_xlat17 = max(u_xlat17, 9.99999975e-06);
        u_xlat17 = u_xlat17 * _LightProjectionParams.w;
        u_xlat17 = _LightProjectionParams.y / u_xlat17;
        u_xlat17 = u_xlat17 + (-_LightProjectionParams.x);
        u_xlat12.xyz = u_xlat8.xyz + vec3(0.0078125, 0.0078125, 0.0078125);
        vec4 txVec0 = vec4(u_xlat12.xyz,u_xlat17);
        u_xlat5.x = texture(hlslcc_zcmp_ShadowMapTexture, txVec0);
        u_xlat12.xyz = u_xlat8.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);
        vec4 txVec1 = vec4(u_xlat12.xyz,u_xlat17);
        u_xlat5.y = texture(hlslcc_zcmp_ShadowMapTexture, txVec1);
        u_xlat12.xyz = u_xlat8.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);
        vec4 txVec2 = vec4(u_xlat12.xyz,u_xlat17);
        u_xlat5.z = texture(hlslcc_zcmp_ShadowMapTexture, txVec2);
        u_xlat12.xyz = u_xlat8.xyz + vec3(0.0078125, -0.0078125, -0.0078125);
        vec4 txVec3 = vec4(u_xlat12.xyz,u_xlat17);
        u_xlat5.w = texture(hlslcc_zcmp_ShadowMapTexture, txVec3);
        u_xlat17 = dot(u_xlat5, vec4(0.25, 0.25, 0.25, 0.25));
        u_xlat18 = (-_LightShadowData.x) + 1.0;
        u_xlat17 = u_xlat17 * u_xlat18 + _LightShadowData.x;
    } else {
        u_xlat17 = 1.0;
    }
    u_xlat18 = (-u_xlat17) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat18 + u_xlat17;
    u_xlat0.x = u_xlat0.x * u_xlat4.x;
    u_xlat4.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat5 = texture(_CameraGBufferTexture0, u_xlat1.xy);
    u_xlat6 = texture(_CameraGBufferTexture1, u_xlat1.xy);
    u_xlat7 = texture(_CameraGBufferTexture2, u_xlat1.xy);
    u_xlat1.xyz = u_xlat7.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat2.xyw + (-_WorldSpaceCameraPos.xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat7 = (-u_xlat6.wxyz) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0.xyz = (-u_xlat8.xyz) * vec3(u_xlat25) + (-u_xlat2.xyz);
    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat24 = max(u_xlat24, 0.00100000005);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat0.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    u_xlat24 = dot(u_xlat1.xyz, (-u_xlat2.xyz));
    u_xlat25 = dot(u_xlat1.xyz, (-u_xlat3.xyz));
    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat0.x = dot((-u_xlat3.xyz), u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat8.x = u_xlat0.x + u_xlat0.x;
    u_xlat8.x = u_xlat0.x * u_xlat8.x;
    u_xlat8.x = u_xlat8.x * u_xlat7.x + -0.5;
    u_xlat16 = (-u_xlat25) + 1.0;
    u_xlat9 = u_xlat16 * u_xlat16;
    u_xlat9 = u_xlat9 * u_xlat9;
    u_xlat16 = u_xlat16 * u_xlat9;
    u_xlat16 = u_xlat8.x * u_xlat16 + 1.0;
    u_xlat9 = -abs(u_xlat24) + 1.0;
    u_xlat17 = u_xlat9 * u_xlat9;
    u_xlat17 = u_xlat17 * u_xlat17;
    u_xlat9 = u_xlat9 * u_xlat17;
    u_xlat8.x = u_xlat8.x * u_xlat9 + 1.0;
    u_xlat8.x = u_xlat8.x * u_xlat16;
    u_xlat16 = u_xlat7.x * u_xlat7.x;
    u_xlat16 = max(u_xlat16, 0.00200000009);
    u_xlat9 = (-u_xlat16) + 1.0;
    u_xlat17 = abs(u_xlat24) * u_xlat9 + u_xlat16;
    u_xlat9 = u_xlat25 * u_xlat9 + u_xlat16;
    u_xlat24 = abs(u_xlat24) * u_xlat9;
    u_xlat24 = u_xlat25 * u_xlat17 + u_xlat24;
    u_xlat24 = u_xlat24 + 9.99999975e-06;
    u_xlat24 = 0.5 / u_xlat24;
    u_xlat16 = u_xlat16 * u_xlat16;
    u_xlat9 = u_xlat1.x * u_xlat16 + (-u_xlat1.x);
    u_xlat1.x = u_xlat9 * u_xlat1.x + 1.0;
    u_xlat16 = u_xlat16 * 0.318309873;
    u_xlat1.x = u_xlat1.x * u_xlat1.x + 1.00000001e-07;
    u_xlat16 = u_xlat16 / u_xlat1.x;
    u_xlat16 = u_xlat16 * u_xlat24;
    u_xlat8.y = u_xlat16 * 3.14159274;
    u_xlat8.xy = vec2(u_xlat25) * u_xlat8.xy;
    u_xlat16 = max(u_xlat8.y, 0.0);
    u_xlat24 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlatb24 = u_xlat24!=0.0;
    u_xlat24 = u_xlatb24 ? 1.0 : float(0.0);
    u_xlat16 = u_xlat24 * u_xlat16;
    u_xlat1.xyz = u_xlat8.xxx * u_xlat4.xyz;
    u_xlat8.xyz = u_xlat4.xyz * vec3(u_xlat16);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat25 = u_xlat0.x * u_xlat0.x;
    u_xlat25 = u_xlat25 * u_xlat25;
    u_xlat0.x = u_xlat0.x * u_xlat25;
    u_xlat2.xyz = u_xlat7.yzw * u_xlat0.xxx + u_xlat6.xyz;
    u_xlat0.xyz = u_xlat8.xyz * u_xlat2.xyz;
    u_xlat0.xyz = u_xlat5.xyz * u_xlat1.xyz + u_xlat0.xyz;
    u_xlat0.w = 1.0;
    SV_Target0 = exp2((-u_xlat0));
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 192
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %80 %102 %169 %175 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpMemberDecorate %78 0 BuiltIn 78 
                                                      OpMemberDecorate %78 1 BuiltIn 78 
                                                      OpMemberDecorate %78 2 BuiltIn 78 
                                                      OpDecorate %78 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 102 
                                                      OpDecorate %169 Location 169 
                                                      OpDecorate vs_TEXCOORD1 Location 175 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %16 %17 %18 %6 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 1 
                                              %24 = OpTypePointer Uniform %7 
                                          i32 %28 = OpConstant 0 
                                          i32 %36 = OpConstant 2 
                                          i32 %45 = OpConstant 3 
                               Private f32_4* %49 = OpVariable Private 
                                          u32 %76 = OpConstant 1 
                                              %77 = OpTypeArray %6 %76 
                                              %78 = OpTypeStruct %7 %6 %77 
                                              %79 = OpTypePointer Output %78 
         Output struct {f32_4; f32; f32[1];}* %80 = OpVariable Output 
                                              %82 = OpTypePointer Output %7 
                                              %84 = OpTypePointer Private %6 
                                          u32 %87 = OpConstant 0 
                                              %88 = OpTypePointer Uniform %6 
                               Private f32_4* %93 = OpVariable Private 
                                              %94 = OpTypeVector %6 3 
                                          f32 %97 = OpConstant 3.674022E-40 
                                        f32_3 %98 = OpConstantComposite %97 %97 %97 
                       Output f32_4* vs_TEXCOORD0 = OpVariable Output 
                                             %103 = OpTypeVector %6 2 
                                         f32 %158 = OpConstant 3.674022E-40 
                                         f32 %159 = OpConstant 3.674022E-40 
                                       f32_3 %160 = OpConstantComposite %158 %158 %159 
                                             %168 = OpTypePointer Input %94 
                                Input f32_3* %169 = OpVariable Input 
                                             %174 = OpTypePointer Output %94 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                                         i32 %176 = OpConstant 4 
                                             %186 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %25 = OpAccessChain %21 %23 %23 
                                        f32_4 %26 = OpLoad %25 
                                        f32_4 %27 = OpFMul %13 %26 
                                                      OpStore %9 %27 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %28 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %44 = OpLoad %9 
                               Uniform f32_4* %46 = OpAccessChain %21 %23 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_4 %48 = OpFAdd %44 %47 
                                                      OpStore %9 %48 
                                        f32_4 %50 = OpLoad %9 
                                        f32_4 %51 = OpVectorShuffle %50 %50 1 1 1 1 
                               Uniform f32_4* %52 = OpAccessChain %21 %45 %23 
                                        f32_4 %53 = OpLoad %52 
                                        f32_4 %54 = OpFMul %51 %53 
                                                      OpStore %49 %54 
                               Uniform f32_4* %55 = OpAccessChain %21 %45 %28 
                                        f32_4 %56 = OpLoad %55 
                                        f32_4 %57 = OpLoad %9 
                                        f32_4 %58 = OpVectorShuffle %57 %57 0 0 0 0 
                                        f32_4 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %49 
                                        f32_4 %61 = OpFAdd %59 %60 
                                                      OpStore %49 %61 
                               Uniform f32_4* %62 = OpAccessChain %21 %45 %36 
                                        f32_4 %63 = OpLoad %62 
                                        f32_4 %64 = OpLoad %9 
                                        f32_4 %65 = OpVectorShuffle %64 %64 2 2 2 2 
                                        f32_4 %66 = OpFMul %63 %65 
                                        f32_4 %67 = OpLoad %49 
                                        f32_4 %68 = OpFAdd %66 %67 
                                                      OpStore %49 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %45 %45 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %9 
                                        f32_4 %72 = OpVectorShuffle %71 %71 3 3 3 3 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %49 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %49 %75 
                                        f32_4 %81 = OpLoad %49 
                                Output f32_4* %83 = OpAccessChain %80 %28 
                                                      OpStore %83 %81 
                                 Private f32* %85 = OpAccessChain %49 %76 
                                          f32 %86 = OpLoad %85 
                                 Uniform f32* %89 = OpAccessChain %21 %28 %87 
                                          f32 %90 = OpLoad %89 
                                          f32 %91 = OpFMul %86 %90 
                                 Private f32* %92 = OpAccessChain %49 %76 
                                                      OpStore %92 %91 
                                        f32_4 %95 = OpLoad %49 
                                        f32_3 %96 = OpVectorShuffle %95 %95 0 3 1 
                                        f32_3 %99 = OpFMul %96 %98 
                                       f32_4 %100 = OpLoad %93 
                                       f32_4 %101 = OpVectorShuffle %100 %99 4 1 5 6 
                                                      OpStore %93 %101 
                                       f32_4 %104 = OpLoad %49 
                                       f32_2 %105 = OpVectorShuffle %104 %104 2 3 
                                       f32_4 %106 = OpLoad vs_TEXCOORD0 
                                       f32_4 %107 = OpVectorShuffle %106 %105 0 1 4 5 
                                                      OpStore vs_TEXCOORD0 %107 
                                       f32_4 %108 = OpLoad %93 
                                       f32_2 %109 = OpVectorShuffle %108 %108 2 2 
                                       f32_4 %110 = OpLoad %93 
                                       f32_2 %111 = OpVectorShuffle %110 %110 0 3 
                                       f32_2 %112 = OpFAdd %109 %111 
                                       f32_4 %113 = OpLoad vs_TEXCOORD0 
                                       f32_4 %114 = OpVectorShuffle %113 %112 4 5 2 3 
                                                      OpStore vs_TEXCOORD0 %114 
                                       f32_4 %115 = OpLoad %9 
                                       f32_3 %116 = OpVectorShuffle %115 %115 1 1 1 
                              Uniform f32_4* %117 = OpAccessChain %21 %36 %23 
                                       f32_4 %118 = OpLoad %117 
                                       f32_3 %119 = OpVectorShuffle %118 %118 0 1 2 
                                       f32_3 %120 = OpFMul %116 %119 
                                       f32_4 %121 = OpLoad %49 
                                       f32_4 %122 = OpVectorShuffle %121 %120 4 5 6 3 
                                                      OpStore %49 %122 
                              Uniform f32_4* %123 = OpAccessChain %21 %36 %28 
                                       f32_4 %124 = OpLoad %123 
                                       f32_3 %125 = OpVectorShuffle %124 %124 0 1 2 
                                       f32_4 %126 = OpLoad %9 
                                       f32_3 %127 = OpVectorShuffle %126 %126 0 0 0 
                                       f32_3 %128 = OpFMul %125 %127 
                                       f32_4 %129 = OpLoad %49 
                                       f32_3 %130 = OpVectorShuffle %129 %129 0 1 2 
                                       f32_3 %131 = OpFAdd %128 %130 
                                       f32_4 %132 = OpLoad %49 
                                       f32_4 %133 = OpVectorShuffle %132 %131 4 5 6 3 
                                                      OpStore %49 %133 
                              Uniform f32_4* %134 = OpAccessChain %21 %36 %36 
                                       f32_4 %135 = OpLoad %134 
                                       f32_3 %136 = OpVectorShuffle %135 %135 0 1 2 
                                       f32_4 %137 = OpLoad %9 
                                       f32_3 %138 = OpVectorShuffle %137 %137 2 2 2 
                                       f32_3 %139 = OpFMul %136 %138 
                                       f32_4 %140 = OpLoad %49 
                                       f32_3 %141 = OpVectorShuffle %140 %140 0 1 2 
                                       f32_3 %142 = OpFAdd %139 %141 
                                       f32_4 %143 = OpLoad %9 
                                       f32_4 %144 = OpVectorShuffle %143 %142 4 5 6 3 
                                                      OpStore %9 %144 
                              Uniform f32_4* %145 = OpAccessChain %21 %36 %45 
                                       f32_4 %146 = OpLoad %145 
                                       f32_3 %147 = OpVectorShuffle %146 %146 0 1 2 
                                       f32_4 %148 = OpLoad %9 
                                       f32_3 %149 = OpVectorShuffle %148 %148 3 3 3 
                                       f32_3 %150 = OpFMul %147 %149 
                                       f32_4 %151 = OpLoad %9 
                                       f32_3 %152 = OpVectorShuffle %151 %151 0 1 2 
                                       f32_3 %153 = OpFAdd %150 %152 
                                       f32_4 %154 = OpLoad %9 
                                       f32_4 %155 = OpVectorShuffle %154 %153 4 5 6 3 
                                                      OpStore %9 %155 
                                       f32_4 %156 = OpLoad %9 
                                       f32_3 %157 = OpVectorShuffle %156 %156 0 1 2 
                                       f32_3 %161 = OpFMul %157 %160 
                                       f32_4 %162 = OpLoad %49 
                                       f32_4 %163 = OpVectorShuffle %162 %161 4 5 6 3 
                                                      OpStore %49 %163 
                                       f32_4 %164 = OpLoad %9 
                                       f32_3 %165 = OpVectorShuffle %164 %164 0 1 2 
                                       f32_3 %166 = OpFNegate %165 
                                       f32_3 %167 = OpFMul %166 %160 
                                       f32_3 %170 = OpLoad %169 
                                       f32_3 %171 = OpFAdd %167 %170 
                                       f32_4 %172 = OpLoad %9 
                                       f32_4 %173 = OpVectorShuffle %172 %171 4 5 6 3 
                                                      OpStore %9 %173 
                                Uniform f32* %177 = OpAccessChain %21 %176 
                                         f32 %178 = OpLoad %177 
                                       f32_3 %179 = OpCompositeConstruct %178 %178 %178 
                                       f32_4 %180 = OpLoad %9 
                                       f32_3 %181 = OpVectorShuffle %180 %180 0 1 2 
                                       f32_3 %182 = OpFMul %179 %181 
                                       f32_4 %183 = OpLoad %49 
                                       f32_3 %184 = OpVectorShuffle %183 %183 0 1 2 
                                       f32_3 %185 = OpFAdd %182 %184 
                                                      OpStore vs_TEXCOORD1 %185 
                                 Output f32* %187 = OpAccessChain %80 %28 %76 
                                         f32 %188 = OpLoad %187 
                                         f32 %189 = OpFNegate %188 
                                 Output f32* %190 = OpAccessChain %80 %28 %76 
                                                      OpStore %190 %189 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 730
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %24 %41 %725 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpDecorate %13 ArrayStride 13 
                                                      OpMemberDecorate %14 0 Offset 14 
                                                      OpMemberDecorate %14 1 Offset 14 
                                                      OpMemberDecorate %14 2 Offset 14 
                                                      OpMemberDecorate %14 3 Offset 14 
                                                      OpMemberDecorate %14 4 Offset 14 
                                                      OpMemberDecorate %14 5 Offset 14 
                                                      OpMemberDecorate %14 6 Offset 14 
                                                      OpMemberDecorate %14 7 Offset 14 
                                                      OpMemberDecorate %14 8 Offset 14 
                                                      OpDecorate %14 Block 
                                                      OpDecorate %16 DescriptorSet 16 
                                                      OpDecorate %16 Binding 16 
                                                      OpDecorate vs_TEXCOORD1 Location 24 
                                                      OpDecorate vs_TEXCOORD0 Location 41 
                                                      OpDecorate %53 DescriptorSet 53 
                                                      OpDecorate %53 Binding 53 
                                                      OpDecorate %57 DescriptorSet 57 
                                                      OpDecorate %57 Binding 57 
                                                      OpDecorate %183 DescriptorSet 183 
                                                      OpDecorate %183 Binding 183 
                                                      OpDecorate %185 DescriptorSet 185 
                                                      OpDecorate %185 Binding 185 
                                                      OpDecorate %273 DescriptorSet 273 
                                                      OpDecorate %273 Binding 273 
                                                      OpDecorate %275 DescriptorSet 275 
                                                      OpDecorate %275 Binding 275 
                                                      OpDecorate %377 DescriptorSet 377 
                                                      OpDecorate %377 Binding 377 
                                                      OpDecorate %379 DescriptorSet 379 
                                                      OpDecorate %379 Binding 379 
                                                      OpDecorate %387 DescriptorSet 387 
                                                      OpDecorate %387 Binding 387 
                                                      OpDecorate %389 DescriptorSet 389 
                                                      OpDecorate %389 Binding 389 
                                                      OpDecorate %395 DescriptorSet 395 
                                                      OpDecorate %395 Binding 395 
                                                      OpDecorate %397 DescriptorSet 397 
                                                      OpDecorate %397 Binding 397 
                                                      OpDecorate %725 Location 725 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 3 
                                              %11 = OpTypeInt 32 0 
                                          u32 %12 = OpConstant 4 
                                              %13 = OpTypeArray %7 %12 
                                              %14 = OpTypeStruct %10 %7 %7 %13 %7 %7 %7 %7 %7 
                                              %15 = OpTypePointer Uniform %14 
Uniform struct {f32_3; f32_4; f32_4; f32_4[4]; f32_4; f32_4; f32_4; f32_4; f32_4;}* %16 = OpVariable Uniform 
                                              %17 = OpTypeInt 32 1 
                                          i32 %18 = OpConstant 1 
                                          u32 %19 = OpConstant 2 
                                              %20 = OpTypePointer Uniform %6 
                                              %23 = OpTypePointer Input %10 
                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                                              %25 = OpTypePointer Input %6 
                                          u32 %29 = OpConstant 0 
                                              %30 = OpTypePointer Private %6 
                                              %38 = OpTypePointer Private %10 
                               Private f32_3* %39 = OpVariable Private 
                                              %40 = OpTypePointer Input %7 
                        Input f32_4* vs_TEXCOORD0 = OpVariable Input 
                                              %42 = OpTypeVector %6 2 
                                 Private f32* %50 = OpVariable Private 
                                              %51 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %52 = OpTypePointer UniformConstant %51 
         UniformConstant read_only Texture2D* %53 = OpVariable UniformConstant 
                                              %55 = OpTypeSampler 
                                              %56 = OpTypePointer UniformConstant %55 
                     UniformConstant sampler* %57 = OpVariable UniformConstant 
                                              %59 = OpTypeSampledImage %51 
                                          i32 %65 = OpConstant 2 
                                          u32 %70 = OpConstant 1 
                                          f32 %74 = OpConstant 3.674022E-40 
                               Private f32_4* %77 = OpVariable Private 
                               Private f32_3* %85 = OpVariable Private 
                                          i32 %88 = OpConstant 3 
                                              %89 = OpTypePointer Uniform %7 
                                          i32 %94 = OpConstant 0 
                                         i32 %126 = OpConstant 6 
                                         u32 %149 = OpConstant 3 
                              Private f32_3* %159 = OpVariable Private 
                                         i32 %162 = OpConstant 7 
                                Private f32* %168 = OpVariable Private 
                                Private f32* %172 = OpVariable Private 
        UniformConstant read_only Texture2D* %183 = OpVariable UniformConstant 
                    UniformConstant sampler* %185 = OpVariable UniformConstant 
                                         i32 %194 = OpConstant 5 
                                         f32 %204 = OpConstant 3.674022E-40 
                                             %207 = OpTypeBool 
                                             %208 = OpTypePointer Private %207 
                               Private bool* %209 = OpVariable Private 
                                         f32 %212 = OpConstant 3.674022E-40 
                                Private f32* %217 = OpVariable Private 
                                         i32 %231 = OpConstant 4 
                                         f32 %237 = OpConstant 3.674022E-40 
                              Private f32_4* %255 = OpVariable Private 
                                         f32 %257 = OpConstant 3.674022E-40 
                                       f32_3 %258 = OpConstantComposite %257 %257 %257 
                                             %262 = OpTypePointer Function %7 
                                             %271 = OpTypeImage %6 Cube 0 0 0 1 Unknown 
                                             %272 = OpTypePointer UniformConstant %271 
      UniformConstant read_only TextureCube* %273 = OpVariable UniformConstant 
                    UniformConstant sampler* %275 = OpVariable UniformConstant 
                                             %277 = OpTypeImage %6 Cube 1 0 0 1 Unknown 
                                             %278 = OpTypeSampledImage %277 
                              Private f32_3* %284 = OpVariable Private 
                                         f32 %286 = OpConstant 3.674022E-40 
                                       f32_3 %287 = OpConstantComposite %286 %286 %257 
                                       f32_3 %304 = OpConstantComposite %286 %257 %286 
                                       f32_3 %321 = OpConstantComposite %257 %286 %286 
                                         f32 %338 = OpConstant 3.674022E-40 
                                       f32_4 %339 = OpConstantComposite %338 %338 %338 %338 
                                Private f32* %341 = OpVariable Private 
                                         i32 %370 = OpConstant 8 
        UniformConstant read_only Texture2D* %377 = OpVariable UniformConstant 
                    UniformConstant sampler* %379 = OpVariable UniformConstant 
                              Private f32_4* %386 = OpVariable Private 
        UniformConstant read_only Texture2D* %387 = OpVariable UniformConstant 
                    UniformConstant sampler* %389 = OpVariable UniformConstant 
        UniformConstant read_only Texture2D* %395 = OpVariable UniformConstant 
                    UniformConstant sampler* %397 = OpVariable UniformConstant 
                                         f32 %405 = OpConstant 3.674022E-40 
                                       f32_3 %406 = OpConstantComposite %405 %405 %405 
                                         f32 %408 = OpConstant 3.674022E-40 
                                       f32_3 %409 = OpConstantComposite %408 %408 %408 
                                             %425 = OpTypePointer Uniform %10 
                              Private f32_4* %449 = OpVariable Private 
                                       f32_4 %453 = OpConstantComposite %74 %74 %74 %74 
                                         f32 %472 = OpConstant 3.674022E-40 
                                         f32 %527 = OpConstant 3.674022E-40 
                                Private f32* %530 = OpVariable Private 
                                Private f32* %534 = OpVariable Private 
                                         f32 %579 = OpConstant 3.674022E-40 
                                         f32 %606 = OpConstant 3.674022E-40 
                                         f32 %627 = OpConstant 3.674022E-40 
                                         f32 %634 = OpConstant 3.674022E-40 
                                         f32 %654 = OpConstant 3.674022E-40 
                               Private bool* %663 = OpVariable Private 
                                             %724 = OpTypePointer Output %7 
                               Output f32_4* %725 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_4* %263 = OpVariable Function 
                             Function f32_4* %289 = OpVariable Function 
                             Function f32_4* %306 = OpVariable Function 
                             Function f32_4* %323 = OpVariable Function 
                                 Uniform f32* %21 = OpAccessChain %16 %18 %19 
                                          f32 %22 = OpLoad %21 
                                   Input f32* %26 = OpAccessChain vs_TEXCOORD1 %19 
                                          f32 %27 = OpLoad %26 
                                          f32 %28 = OpFDiv %22 %27 
                                 Private f32* %31 = OpAccessChain %9 %29 
                                                      OpStore %31 %28 
                                        f32_4 %32 = OpLoad %9 
                                        f32_3 %33 = OpVectorShuffle %32 %32 0 0 0 
                                        f32_3 %34 = OpLoad vs_TEXCOORD1 
                                        f32_3 %35 = OpFMul %33 %34 
                                        f32_4 %36 = OpLoad %9 
                                        f32_4 %37 = OpVectorShuffle %36 %35 4 5 6 3 
                                                      OpStore %9 %37 
                                        f32_4 %43 = OpLoad vs_TEXCOORD0 
                                        f32_2 %44 = OpVectorShuffle %43 %43 0 1 
                                        f32_4 %45 = OpLoad vs_TEXCOORD0 
                                        f32_2 %46 = OpVectorShuffle %45 %45 3 3 
                                        f32_2 %47 = OpFDiv %44 %46 
                                        f32_3 %48 = OpLoad %39 
                                        f32_3 %49 = OpVectorShuffle %48 %47 3 4 2 
                                                      OpStore %39 %49 
                          read_only Texture2D %54 = OpLoad %53 
                                      sampler %58 = OpLoad %57 
                   read_only Texture2DSampled %60 = OpSampledImage %54 %58 
                                        f32_3 %61 = OpLoad %39 
                                        f32_2 %62 = OpVectorShuffle %61 %61 0 1 
                                        f32_4 %63 = OpImageSampleImplicitLod %60 %62 
                                          f32 %64 = OpCompositeExtract %63 0 
                                                      OpStore %50 %64 
                                 Uniform f32* %66 = OpAccessChain %16 %65 %29 
                                          f32 %67 = OpLoad %66 
                                          f32 %68 = OpLoad %50 
                                          f32 %69 = OpFMul %67 %68 
                                 Uniform f32* %71 = OpAccessChain %16 %65 %70 
                                          f32 %72 = OpLoad %71 
                                          f32 %73 = OpFAdd %69 %72 
                                                      OpStore %50 %73 
                                          f32 %75 = OpLoad %50 
                                          f32 %76 = OpFDiv %74 %75 
                                                      OpStore %50 %76 
                                          f32 %78 = OpLoad %50 
                                        f32_3 %79 = OpCompositeConstruct %78 %78 %78 
                                        f32_4 %80 = OpLoad %9 
                                        f32_3 %81 = OpVectorShuffle %80 %80 0 1 2 
                                        f32_3 %82 = OpFMul %79 %81 
                                        f32_4 %83 = OpLoad %77 
                                        f32_4 %84 = OpVectorShuffle %83 %82 4 5 6 3 
                                                      OpStore %77 %84 
                                        f32_4 %86 = OpLoad %77 
                                        f32_3 %87 = OpVectorShuffle %86 %86 1 1 1 
                               Uniform f32_4* %90 = OpAccessChain %16 %88 %18 
                                        f32_4 %91 = OpLoad %90 
                                        f32_3 %92 = OpVectorShuffle %91 %91 0 1 2 
                                        f32_3 %93 = OpFMul %87 %92 
                                                      OpStore %85 %93 
                               Uniform f32_4* %95 = OpAccessChain %16 %88 %94 
                                        f32_4 %96 = OpLoad %95 
                                        f32_3 %97 = OpVectorShuffle %96 %96 0 1 2 
                                        f32_4 %98 = OpLoad %77 
                                        f32_3 %99 = OpVectorShuffle %98 %98 0 0 0 
                                       f32_3 %100 = OpFMul %97 %99 
                                       f32_3 %101 = OpLoad %85 
                                       f32_3 %102 = OpFAdd %100 %101 
                                       f32_4 %103 = OpLoad %77 
                                       f32_4 %104 = OpVectorShuffle %103 %102 4 5 2 6 
                                                      OpStore %77 %104 
                              Uniform f32_4* %105 = OpAccessChain %16 %88 %65 
                                       f32_4 %106 = OpLoad %105 
                                       f32_3 %107 = OpVectorShuffle %106 %106 0 1 2 
                                       f32_4 %108 = OpLoad %77 
                                       f32_3 %109 = OpVectorShuffle %108 %108 2 2 2 
                                       f32_3 %110 = OpFMul %107 %109 
                                       f32_4 %111 = OpLoad %77 
                                       f32_3 %112 = OpVectorShuffle %111 %111 0 1 3 
                                       f32_3 %113 = OpFAdd %110 %112 
                                       f32_4 %114 = OpLoad %77 
                                       f32_4 %115 = OpVectorShuffle %114 %113 4 5 2 6 
                                                      OpStore %77 %115 
                                       f32_4 %116 = OpLoad %77 
                                       f32_3 %117 = OpVectorShuffle %116 %116 0 1 3 
                              Uniform f32_4* %118 = OpAccessChain %16 %88 %88 
                                       f32_4 %119 = OpLoad %118 
                                       f32_3 %120 = OpVectorShuffle %119 %119 0 1 2 
                                       f32_3 %121 = OpFAdd %117 %120 
                                       f32_4 %122 = OpLoad %77 
                                       f32_4 %123 = OpVectorShuffle %122 %121 4 5 2 6 
                                                      OpStore %77 %123 
                                       f32_4 %124 = OpLoad %77 
                                       f32_3 %125 = OpVectorShuffle %124 %124 0 1 3 
                              Uniform f32_4* %127 = OpAccessChain %16 %126 
                                       f32_4 %128 = OpLoad %127 
                                       f32_3 %129 = OpVectorShuffle %128 %128 0 1 2 
                                       f32_3 %130 = OpFNegate %129 
                                       f32_3 %131 = OpFAdd %125 %130 
                                                      OpStore %85 %131 
                                       f32_3 %132 = OpLoad %85 
                                       f32_3 %133 = OpLoad %85 
                                         f32 %134 = OpDot %132 %133 
                                Private f32* %135 = OpAccessChain %9 %29 
                                                      OpStore %135 %134 
                                Private f32* %136 = OpAccessChain %9 %29 
                                         f32 %137 = OpLoad %136 
                                         f32 %138 = OpExtInst %1 31 %137 
                                Private f32* %139 = OpAccessChain %9 %29 
                                                      OpStore %139 %138 
                                Private f32* %140 = OpAccessChain %9 %19 
                                         f32 %141 = OpLoad %140 
                                         f32 %142 = OpFNegate %141 
                                         f32 %143 = OpLoad %50 
                                         f32 %144 = OpFMul %142 %143 
                                Private f32* %145 = OpAccessChain %9 %29 
                                         f32 %146 = OpLoad %145 
                                         f32 %147 = OpFAdd %144 %146 
                                Private f32* %148 = OpAccessChain %9 %29 
                                                      OpStore %148 %147 
                                Uniform f32* %150 = OpAccessChain %16 %126 %149 
                                         f32 %151 = OpLoad %150 
                                Private f32* %152 = OpAccessChain %9 %29 
                                         f32 %153 = OpLoad %152 
                                         f32 %154 = OpFMul %151 %153 
                                Private f32* %155 = OpAccessChain %77 %19 
                                         f32 %156 = OpLoad %155 
                                         f32 %157 = OpFAdd %154 %156 
                                Private f32* %158 = OpAccessChain %9 %29 
                                                      OpStore %158 %157 
                                       f32_4 %160 = OpLoad %77 
                                       f32_3 %161 = OpVectorShuffle %160 %160 0 1 3 
                              Uniform f32_4* %163 = OpAccessChain %16 %162 
                                       f32_4 %164 = OpLoad %163 
                                       f32_3 %165 = OpVectorShuffle %164 %164 0 1 2 
                                       f32_3 %166 = OpFNegate %165 
                                       f32_3 %167 = OpFAdd %161 %166 
                                                      OpStore %159 %167 
                                       f32_3 %169 = OpLoad %159 
                                       f32_3 %170 = OpLoad %159 
                                         f32 %171 = OpDot %169 %170 
                                                      OpStore %168 %171 
                                         f32 %173 = OpLoad %168 
                                         f32 %174 = OpExtInst %1 32 %173 
                                                      OpStore %172 %174 
                                       f32_3 %175 = OpLoad %159 
                                         f32 %176 = OpLoad %172 
                                       f32_3 %177 = OpCompositeConstruct %176 %176 %176 
                                       f32_3 %178 = OpFMul %175 %177 
                                                      OpStore %85 %178 
                                         f32 %179 = OpLoad %168 
                                Uniform f32* %180 = OpAccessChain %16 %162 %149 
                                         f32 %181 = OpLoad %180 
                                         f32 %182 = OpFMul %179 %181 
                                                      OpStore %168 %182 
                         read_only Texture2D %184 = OpLoad %183 
                                     sampler %186 = OpLoad %185 
                  read_only Texture2DSampled %187 = OpSampledImage %184 %186 
                                         f32 %188 = OpLoad %168 
                                       f32_2 %189 = OpCompositeConstruct %188 %188 
                                       f32_4 %190 = OpImageSampleImplicitLod %187 %189 
                                         f32 %191 = OpCompositeExtract %190 0 
                                                      OpStore %168 %191 
                                Private f32* %192 = OpAccessChain %9 %29 
                                         f32 %193 = OpLoad %192 
                                Uniform f32* %195 = OpAccessChain %16 %194 %19 
                                         f32 %196 = OpLoad %195 
                                         f32 %197 = OpFMul %193 %196 
                                Uniform f32* %198 = OpAccessChain %16 %194 %149 
                                         f32 %199 = OpLoad %198 
                                         f32 %200 = OpFAdd %197 %199 
                                Private f32* %201 = OpAccessChain %9 %29 
                                                      OpStore %201 %200 
                                Private f32* %202 = OpAccessChain %9 %29 
                                         f32 %203 = OpLoad %202 
                                         f32 %205 = OpExtInst %1 43 %203 %204 %74 
                                Private f32* %206 = OpAccessChain %9 %29 
                                                      OpStore %206 %205 
                                Private f32* %210 = OpAccessChain %9 %29 
                                         f32 %211 = OpLoad %210 
                                        bool %213 = OpFOrdLessThan %211 %212 
                                                      OpStore %209 %213 
                                        bool %214 = OpLoad %209 
                                                      OpSelectionMerge %216 None 
                                                      OpBranchConditional %214 %215 %352 
                                             %215 = OpLabel 
                                Private f32* %218 = OpAccessChain %159 %70 
                                         f32 %219 = OpLoad %218 
                                         f32 %220 = OpExtInst %1 4 %219 
                                Private f32* %221 = OpAccessChain %159 %29 
                                         f32 %222 = OpLoad %221 
                                         f32 %223 = OpExtInst %1 4 %222 
                                         f32 %224 = OpExtInst %1 40 %220 %223 
                                                      OpStore %217 %224 
                                Private f32* %225 = OpAccessChain %159 %19 
                                         f32 %226 = OpLoad %225 
                                         f32 %227 = OpExtInst %1 4 %226 
                                         f32 %228 = OpLoad %217 
                                         f32 %229 = OpExtInst %1 40 %227 %228 
                                                      OpStore %217 %229 
                                         f32 %230 = OpLoad %217 
                                Uniform f32* %232 = OpAccessChain %16 %231 %19 
                                         f32 %233 = OpLoad %232 
                                         f32 %234 = OpFNegate %233 
                                         f32 %235 = OpFAdd %230 %234 
                                                      OpStore %217 %235 
                                         f32 %236 = OpLoad %217 
                                         f32 %238 = OpExtInst %1 40 %236 %237 
                                                      OpStore %217 %238 
                                         f32 %239 = OpLoad %217 
                                Uniform f32* %240 = OpAccessChain %16 %231 %149 
                                         f32 %241 = OpLoad %240 
                                         f32 %242 = OpFMul %239 %241 
                                                      OpStore %217 %242 
                                Uniform f32* %243 = OpAccessChain %16 %231 %70 
                                         f32 %244 = OpLoad %243 
                                         f32 %245 = OpLoad %217 
                                         f32 %246 = OpFDiv %244 %245 
                                                      OpStore %217 %246 
                                         f32 %247 = OpLoad %217 
                                Uniform f32* %248 = OpAccessChain %16 %231 %29 
                                         f32 %249 = OpLoad %248 
                                         f32 %250 = OpFNegate %249 
                                         f32 %251 = OpFAdd %247 %250 
                                                      OpStore %217 %251 
                                         f32 %252 = OpLoad %217 
                                         f32 %253 = OpFNegate %252 
                                         f32 %254 = OpFAdd %253 %74 
                                                      OpStore %217 %254 
                                       f32_3 %256 = OpLoad %159 
                                       f32_3 %259 = OpFAdd %256 %258 
                                       f32_4 %260 = OpLoad %255 
                                       f32_4 %261 = OpVectorShuffle %260 %259 4 5 6 3 
                                                      OpStore %255 %261 
                                       f32_4 %264 = OpLoad %255 
                                       f32_3 %265 = OpVectorShuffle %264 %264 0 1 2 
                                         f32 %266 = OpLoad %217 
                                         f32 %267 = OpCompositeExtract %265 0 
                                         f32 %268 = OpCompositeExtract %265 1 
                                         f32 %269 = OpCompositeExtract %265 2 
                                       f32_4 %270 = OpCompositeConstruct %267 %268 %269 %266 
                                                      OpStore %263 %270 
                       read_only TextureCube %274 = OpLoad %273 
                                     sampler %276 = OpLoad %275 
                read_only TextureCubeSampled %279 = OpSampledImage %274 %276 
                                       f32_4 %280 = OpLoad %263 
                                         f32 %281 = OpCompositeExtract %280 3 
                                         f32 %282 = OpImageSampleDrefImplicitLod %279 %280 %281 
                                Private f32* %283 = OpAccessChain %255 %29 
                                                      OpStore %283 %282 
                                       f32_3 %285 = OpLoad %159 
                                       f32_3 %288 = OpFAdd %285 %287 
                                                      OpStore %284 %288 
                                       f32_3 %290 = OpLoad %284 
                                         f32 %291 = OpLoad %217 
                                         f32 %292 = OpCompositeExtract %290 0 
                                         f32 %293 = OpCompositeExtract %290 1 
                                         f32 %294 = OpCompositeExtract %290 2 
                                       f32_4 %295 = OpCompositeConstruct %292 %293 %294 %291 
                                                      OpStore %289 %295 
                       read_only TextureCube %296 = OpLoad %273 
                                     sampler %297 = OpLoad %275 
                read_only TextureCubeSampled %298 = OpSampledImage %296 %297 
                                       f32_4 %299 = OpLoad %289 
                                         f32 %300 = OpCompositeExtract %299 3 
                                         f32 %301 = OpImageSampleDrefImplicitLod %298 %299 %300 
                                Private f32* %302 = OpAccessChain %255 %70 
                                                      OpStore %302 %301 
                                       f32_3 %303 = OpLoad %159 
                                       f32_3 %305 = OpFAdd %303 %304 
                                                      OpStore %284 %305 
                                       f32_3 %307 = OpLoad %284 
                                         f32 %308 = OpLoad %217 
                                         f32 %309 = OpCompositeExtract %307 0 
                                         f32 %310 = OpCompositeExtract %307 1 
                                         f32 %311 = OpCompositeExtract %307 2 
                                       f32_4 %312 = OpCompositeConstruct %309 %310 %311 %308 
                                                      OpStore %306 %312 
                       read_only TextureCube %313 = OpLoad %273 
                                     sampler %314 = OpLoad %275 
                read_only TextureCubeSampled %315 = OpSampledImage %313 %314 
                                       f32_4 %316 = OpLoad %306 
                                         f32 %317 = OpCompositeExtract %316 3 
                                         f32 %318 = OpImageSampleDrefImplicitLod %315 %316 %317 
                                Private f32* %319 = OpAccessChain %255 %19 
                                                      OpStore %319 %318 
                                       f32_3 %320 = OpLoad %159 
                                       f32_3 %322 = OpFAdd %320 %321 
                                                      OpStore %284 %322 
                                       f32_3 %324 = OpLoad %284 
                                         f32 %325 = OpLoad %217 
                                         f32 %326 = OpCompositeExtract %324 0 
                                         f32 %327 = OpCompositeExtract %324 1 
                                         f32 %328 = OpCompositeExtract %324 2 
                                       f32_4 %329 = OpCompositeConstruct %326 %327 %328 %325 
                                                      OpStore %323 %329 
                       read_only TextureCube %330 = OpLoad %273 
                                     sampler %331 = OpLoad %275 
                read_only TextureCubeSampled %332 = OpSampledImage %330 %331 
                                       f32_4 %333 = OpLoad %323 
                                         f32 %334 = OpCompositeExtract %333 3 
                                         f32 %335 = OpImageSampleDrefImplicitLod %332 %333 %334 
                                Private f32* %336 = OpAccessChain %255 %149 
                                                      OpStore %336 %335 
                                       f32_4 %337 = OpLoad %255 
                                         f32 %340 = OpDot %337 %339 
                                                      OpStore %217 %340 
                                Uniform f32* %342 = OpAccessChain %16 %194 %29 
                                         f32 %343 = OpLoad %342 
                                         f32 %344 = OpFNegate %343 
                                         f32 %345 = OpFAdd %344 %74 
                                                      OpStore %341 %345 
                                         f32 %346 = OpLoad %217 
                                         f32 %347 = OpLoad %341 
                                         f32 %348 = OpFMul %346 %347 
                                Uniform f32* %349 = OpAccessChain %16 %194 %29 
                                         f32 %350 = OpLoad %349 
                                         f32 %351 = OpFAdd %348 %350 
                                                      OpStore %217 %351 
                                                      OpBranch %216 
                                             %352 = OpLabel 
                                                      OpStore %217 %74 
                                                      OpBranch %216 
                                             %216 = OpLabel 
                                         f32 %353 = OpLoad %217 
                                         f32 %354 = OpFNegate %353 
                                         f32 %355 = OpFAdd %354 %74 
                                                      OpStore %341 %355 
                                Private f32* %356 = OpAccessChain %9 %29 
                                         f32 %357 = OpLoad %356 
                                         f32 %358 = OpLoad %341 
                                         f32 %359 = OpFMul %357 %358 
                                         f32 %360 = OpLoad %217 
                                         f32 %361 = OpFAdd %359 %360 
                                Private f32* %362 = OpAccessChain %9 %29 
                                                      OpStore %362 %361 
                                Private f32* %363 = OpAccessChain %9 %29 
                                         f32 %364 = OpLoad %363 
                                         f32 %365 = OpLoad %168 
                                         f32 %366 = OpFMul %364 %365 
                                Private f32* %367 = OpAccessChain %9 %29 
                                                      OpStore %367 %366 
                                       f32_4 %368 = OpLoad %9 
                                       f32_3 %369 = OpVectorShuffle %368 %368 0 0 0 
                              Uniform f32_4* %371 = OpAccessChain %16 %370 
                                       f32_4 %372 = OpLoad %371 
                                       f32_3 %373 = OpVectorShuffle %372 %372 0 1 2 
                                       f32_3 %374 = OpFMul %369 %373 
                                       f32_4 %375 = OpLoad %255 
                                       f32_4 %376 = OpVectorShuffle %375 %374 4 5 6 3 
                                                      OpStore %255 %376 
                         read_only Texture2D %378 = OpLoad %377 
                                     sampler %380 = OpLoad %379 
                  read_only Texture2DSampled %381 = OpSampledImage %378 %380 
                                       f32_3 %382 = OpLoad %39 
                                       f32_2 %383 = OpVectorShuffle %382 %382 0 1 
                                       f32_4 %384 = OpImageSampleImplicitLod %381 %383 
                                       f32_3 %385 = OpVectorShuffle %384 %384 0 1 2 
                                                      OpStore %284 %385 
                         read_only Texture2D %388 = OpLoad %387 
                                     sampler %390 = OpLoad %389 
                  read_only Texture2DSampled %391 = OpSampledImage %388 %390 
                                       f32_3 %392 = OpLoad %39 
                                       f32_2 %393 = OpVectorShuffle %392 %392 0 1 
                                       f32_4 %394 = OpImageSampleImplicitLod %391 %393 
                                                      OpStore %386 %394 
                         read_only Texture2D %396 = OpLoad %395 
                                     sampler %398 = OpLoad %397 
                  read_only Texture2DSampled %399 = OpSampledImage %396 %398 
                                       f32_3 %400 = OpLoad %39 
                                       f32_2 %401 = OpVectorShuffle %400 %400 0 1 
                                       f32_4 %402 = OpImageSampleImplicitLod %399 %401 
                                       f32_3 %403 = OpVectorShuffle %402 %402 0 1 2 
                                                      OpStore %39 %403 
                                       f32_3 %404 = OpLoad %39 
                                       f32_3 %407 = OpFMul %404 %406 
                                       f32_3 %410 = OpFAdd %407 %409 
                                                      OpStore %39 %410 
                                       f32_3 %411 = OpLoad %39 
                                       f32_3 %412 = OpLoad %39 
                                         f32 %413 = OpDot %411 %412 
                                Private f32* %414 = OpAccessChain %9 %29 
                                                      OpStore %414 %413 
                                Private f32* %415 = OpAccessChain %9 %29 
                                         f32 %416 = OpLoad %415 
                                         f32 %417 = OpExtInst %1 32 %416 
                                Private f32* %418 = OpAccessChain %9 %29 
                                                      OpStore %418 %417 
                                       f32_4 %419 = OpLoad %9 
                                       f32_3 %420 = OpVectorShuffle %419 %419 0 0 0 
                                       f32_3 %421 = OpLoad %39 
                                       f32_3 %422 = OpFMul %420 %421 
                                                      OpStore %39 %422 
                                       f32_4 %423 = OpLoad %77 
                                       f32_3 %424 = OpVectorShuffle %423 %423 0 1 3 
                              Uniform f32_3* %426 = OpAccessChain %16 %94 
                                       f32_3 %427 = OpLoad %426 
                                       f32_3 %428 = OpFNegate %427 
                                       f32_3 %429 = OpFAdd %424 %428 
                                       f32_4 %430 = OpLoad %77 
                                       f32_4 %431 = OpVectorShuffle %430 %429 4 5 6 3 
                                                      OpStore %77 %431 
                                       f32_4 %432 = OpLoad %77 
                                       f32_3 %433 = OpVectorShuffle %432 %432 0 1 2 
                                       f32_4 %434 = OpLoad %77 
                                       f32_3 %435 = OpVectorShuffle %434 %434 0 1 2 
                                         f32 %436 = OpDot %433 %435 
                                Private f32* %437 = OpAccessChain %9 %29 
                                                      OpStore %437 %436 
                                Private f32* %438 = OpAccessChain %9 %29 
                                         f32 %439 = OpLoad %438 
                                         f32 %440 = OpExtInst %1 32 %439 
                                Private f32* %441 = OpAccessChain %9 %29 
                                                      OpStore %441 %440 
                                       f32_4 %442 = OpLoad %9 
                                       f32_3 %443 = OpVectorShuffle %442 %442 0 0 0 
                                       f32_4 %444 = OpLoad %77 
                                       f32_3 %445 = OpVectorShuffle %444 %444 0 1 2 
                                       f32_3 %446 = OpFMul %443 %445 
                                       f32_4 %447 = OpLoad %77 
                                       f32_4 %448 = OpVectorShuffle %447 %446 4 5 6 3 
                                                      OpStore %77 %448 
                                       f32_4 %450 = OpLoad %386 
                                       f32_4 %451 = OpVectorShuffle %450 %450 3 0 1 2 
                                       f32_4 %452 = OpFNegate %451 
                                       f32_4 %454 = OpFAdd %452 %453 
                                                      OpStore %449 %454 
                                       f32_3 %455 = OpLoad %159 
                                       f32_3 %456 = OpFNegate %455 
                                         f32 %457 = OpLoad %172 
                                       f32_3 %458 = OpCompositeConstruct %457 %457 %457 
                                       f32_3 %459 = OpFMul %456 %458 
                                       f32_4 %460 = OpLoad %77 
                                       f32_3 %461 = OpVectorShuffle %460 %460 0 1 2 
                                       f32_3 %462 = OpFNegate %461 
                                       f32_3 %463 = OpFAdd %459 %462 
                                       f32_4 %464 = OpLoad %9 
                                       f32_4 %465 = OpVectorShuffle %464 %463 4 5 6 3 
                                                      OpStore %9 %465 
                                       f32_4 %466 = OpLoad %9 
                                       f32_3 %467 = OpVectorShuffle %466 %466 0 1 2 
                                       f32_4 %468 = OpLoad %9 
                                       f32_3 %469 = OpVectorShuffle %468 %468 0 1 2 
                                         f32 %470 = OpDot %467 %469 
                                                      OpStore %50 %470 
                                         f32 %471 = OpLoad %50 
                                         f32 %473 = OpExtInst %1 40 %471 %472 
                                                      OpStore %50 %473 
                                         f32 %474 = OpLoad %50 
                                         f32 %475 = OpExtInst %1 32 %474 
                                                      OpStore %50 %475 
                                         f32 %476 = OpLoad %50 
                                       f32_3 %477 = OpCompositeConstruct %476 %476 %476 
                                       f32_4 %478 = OpLoad %9 
                                       f32_3 %479 = OpVectorShuffle %478 %478 0 1 2 
                                       f32_3 %480 = OpFMul %477 %479 
                                       f32_4 %481 = OpLoad %9 
                                       f32_4 %482 = OpVectorShuffle %481 %480 4 5 6 3 
                                                      OpStore %9 %482 
                                       f32_3 %483 = OpLoad %39 
                                       f32_4 %484 = OpLoad %77 
                                       f32_3 %485 = OpVectorShuffle %484 %484 0 1 2 
                                       f32_3 %486 = OpFNegate %485 
                                         f32 %487 = OpDot %483 %486 
                                                      OpStore %50 %487 
                                       f32_3 %488 = OpLoad %39 
                                       f32_3 %489 = OpLoad %85 
                                       f32_3 %490 = OpFNegate %489 
                                         f32 %491 = OpDot %488 %490 
                                                      OpStore %172 %491 
                                         f32 %492 = OpLoad %172 
                                         f32 %493 = OpExtInst %1 43 %492 %204 %74 
                                                      OpStore %172 %493 
                                       f32_3 %494 = OpLoad %39 
                                       f32_4 %495 = OpLoad %9 
                                       f32_3 %496 = OpVectorShuffle %495 %495 0 1 2 
                                         f32 %497 = OpDot %494 %496 
                                Private f32* %498 = OpAccessChain %39 %29 
                                                      OpStore %498 %497 
                                Private f32* %499 = OpAccessChain %39 %29 
                                         f32 %500 = OpLoad %499 
                                         f32 %501 = OpExtInst %1 43 %500 %204 %74 
                                Private f32* %502 = OpAccessChain %39 %29 
                                                      OpStore %502 %501 
                                       f32_3 %503 = OpLoad %85 
                                       f32_3 %504 = OpFNegate %503 
                                       f32_4 %505 = OpLoad %9 
                                       f32_3 %506 = OpVectorShuffle %505 %505 0 1 2 
                                         f32 %507 = OpDot %504 %506 
                                Private f32* %508 = OpAccessChain %9 %29 
                                                      OpStore %508 %507 
                                Private f32* %509 = OpAccessChain %9 %29 
                                         f32 %510 = OpLoad %509 
                                         f32 %511 = OpExtInst %1 43 %510 %204 %74 
                                Private f32* %512 = OpAccessChain %9 %29 
                                                      OpStore %512 %511 
                                Private f32* %513 = OpAccessChain %9 %29 
                                         f32 %514 = OpLoad %513 
                                Private f32* %515 = OpAccessChain %9 %29 
                                         f32 %516 = OpLoad %515 
                                         f32 %517 = OpFMul %514 %516 
                                Private f32* %518 = OpAccessChain %159 %29 
                                                      OpStore %518 %517 
                                       f32_3 %519 = OpLoad %159 
                                       f32_2 %520 = OpVectorShuffle %519 %519 0 0 
                                       f32_4 %521 = OpLoad %449 
                                       f32_2 %522 = OpVectorShuffle %521 %521 0 0 
                                         f32 %523 = OpDot %520 %522 
                                Private f32* %524 = OpAccessChain %159 %29 
                                                      OpStore %524 %523 
                                Private f32* %525 = OpAccessChain %159 %29 
                                         f32 %526 = OpLoad %525 
                                         f32 %528 = OpFAdd %526 %527 
                                Private f32* %529 = OpAccessChain %159 %29 
                                                      OpStore %529 %528 
                                         f32 %531 = OpLoad %172 
                                         f32 %532 = OpFNegate %531 
                                         f32 %533 = OpFAdd %532 %74 
                                                      OpStore %530 %533 
                                         f32 %535 = OpLoad %530 
                                         f32 %536 = OpLoad %530 
                                         f32 %537 = OpFMul %535 %536 
                                                      OpStore %534 %537 
                                         f32 %538 = OpLoad %534 
                                         f32 %539 = OpLoad %534 
                                         f32 %540 = OpFMul %538 %539 
                                                      OpStore %534 %540 
                                         f32 %541 = OpLoad %530 
                                         f32 %542 = OpLoad %534 
                                         f32 %543 = OpFMul %541 %542 
                                                      OpStore %530 %543 
                                Private f32* %544 = OpAccessChain %159 %29 
                                         f32 %545 = OpLoad %544 
                                         f32 %546 = OpLoad %530 
                                         f32 %547 = OpFMul %545 %546 
                                         f32 %548 = OpFAdd %547 %74 
                                                      OpStore %530 %548 
                                         f32 %549 = OpLoad %50 
                                         f32 %550 = OpExtInst %1 4 %549 
                                         f32 %551 = OpFNegate %550 
                                         f32 %552 = OpFAdd %551 %74 
                                                      OpStore %534 %552 
                                         f32 %553 = OpLoad %534 
                                         f32 %554 = OpLoad %534 
                                         f32 %555 = OpFMul %553 %554 
                                                      OpStore %168 %555 
                                         f32 %556 = OpLoad %168 
                                         f32 %557 = OpLoad %168 
                                         f32 %558 = OpFMul %556 %557 
                                                      OpStore %168 %558 
                                         f32 %559 = OpLoad %534 
                                         f32 %560 = OpLoad %168 
                                         f32 %561 = OpFMul %559 %560 
                                                      OpStore %534 %561 
                                Private f32* %562 = OpAccessChain %159 %29 
                                         f32 %563 = OpLoad %562 
                                         f32 %564 = OpLoad %534 
                                         f32 %565 = OpFMul %563 %564 
                                         f32 %566 = OpFAdd %565 %74 
                                Private f32* %567 = OpAccessChain %159 %29 
                                                      OpStore %567 %566 
                                Private f32* %568 = OpAccessChain %159 %29 
                                         f32 %569 = OpLoad %568 
                                         f32 %570 = OpLoad %530 
                                         f32 %571 = OpFMul %569 %570 
                                Private f32* %572 = OpAccessChain %159 %29 
                                                      OpStore %572 %571 
                                Private f32* %573 = OpAccessChain %449 %29 
                                         f32 %574 = OpLoad %573 
                                Private f32* %575 = OpAccessChain %449 %29 
                                         f32 %576 = OpLoad %575 
                                         f32 %577 = OpFMul %574 %576 
                                                      OpStore %530 %577 
                                         f32 %578 = OpLoad %530 
                                         f32 %580 = OpExtInst %1 40 %578 %579 
                                                      OpStore %530 %580 
                                         f32 %581 = OpLoad %530 
                                         f32 %582 = OpFNegate %581 
                                         f32 %583 = OpFAdd %582 %74 
                                                      OpStore %534 %583 
                                         f32 %584 = OpLoad %50 
                                         f32 %585 = OpExtInst %1 4 %584 
                                         f32 %586 = OpLoad %534 
                                         f32 %587 = OpFMul %585 %586 
                                         f32 %588 = OpLoad %530 
                                         f32 %589 = OpFAdd %587 %588 
                                                      OpStore %168 %589 
                                         f32 %590 = OpLoad %172 
                                         f32 %591 = OpLoad %534 
                                         f32 %592 = OpFMul %590 %591 
                                         f32 %593 = OpLoad %530 
                                         f32 %594 = OpFAdd %592 %593 
                                                      OpStore %534 %594 
                                         f32 %595 = OpLoad %50 
                                         f32 %596 = OpExtInst %1 4 %595 
                                         f32 %597 = OpLoad %534 
                                         f32 %598 = OpFMul %596 %597 
                                                      OpStore %50 %598 
                                         f32 %599 = OpLoad %172 
                                         f32 %600 = OpLoad %168 
                                         f32 %601 = OpFMul %599 %600 
                                         f32 %602 = OpLoad %50 
                                         f32 %603 = OpFAdd %601 %602 
                                                      OpStore %50 %603 
                                         f32 %604 = OpLoad %50 
                                         f32 %605 = OpFAdd %604 %237 
                                                      OpStore %50 %605 
                                         f32 %607 = OpLoad %50 
                                         f32 %608 = OpFDiv %606 %607 
                                                      OpStore %50 %608 
                                         f32 %609 = OpLoad %530 
                                         f32 %610 = OpLoad %530 
                                         f32 %611 = OpFMul %609 %610 
                                                      OpStore %530 %611 
                                Private f32* %612 = OpAccessChain %39 %29 
                                         f32 %613 = OpLoad %612 
                                         f32 %614 = OpLoad %530 
                                         f32 %615 = OpFMul %613 %614 
                                Private f32* %616 = OpAccessChain %39 %29 
                                         f32 %617 = OpLoad %616 
                                         f32 %618 = OpFNegate %617 
                                         f32 %619 = OpFAdd %615 %618 
                                                      OpStore %534 %619 
                                         f32 %620 = OpLoad %534 
                                Private f32* %621 = OpAccessChain %39 %29 
                                         f32 %622 = OpLoad %621 
                                         f32 %623 = OpFMul %620 %622 
                                         f32 %624 = OpFAdd %623 %74 
                                Private f32* %625 = OpAccessChain %39 %29 
                                                      OpStore %625 %624 
                                         f32 %626 = OpLoad %530 
                                         f32 %628 = OpFMul %626 %627 
                                                      OpStore %530 %628 
                                Private f32* %629 = OpAccessChain %39 %29 
                                         f32 %630 = OpLoad %629 
                                Private f32* %631 = OpAccessChain %39 %29 
                                         f32 %632 = OpLoad %631 
                                         f32 %633 = OpFMul %630 %632 
                                         f32 %635 = OpFAdd %633 %634 
                                Private f32* %636 = OpAccessChain %39 %29 
                                                      OpStore %636 %635 
                                         f32 %637 = OpLoad %530 
                                Private f32* %638 = OpAccessChain %39 %29 
                                         f32 %639 = OpLoad %638 
                                         f32 %640 = OpFDiv %637 %639 
                                                      OpStore %530 %640 
                                         f32 %641 = OpLoad %530 
                                         f32 %642 = OpLoad %50 
                                         f32 %643 = OpFMul %641 %642 
                                Private f32* %644 = OpAccessChain %159 %70 
                                                      OpStore %644 %643 
                                         f32 %645 = OpLoad %172 
                                       f32_2 %646 = OpCompositeConstruct %645 %645 
                                       f32_3 %647 = OpLoad %159 
                                       f32_2 %648 = OpVectorShuffle %647 %647 0 1 
                                       f32_2 %649 = OpFMul %646 %648 
                                       f32_3 %650 = OpLoad %159 
                                       f32_3 %651 = OpVectorShuffle %650 %649 3 4 2 
                                                      OpStore %159 %651 
                                Private f32* %652 = OpAccessChain %159 %70 
                                         f32 %653 = OpLoad %652 
                                         f32 %655 = OpFMul %653 %654 
                                                      OpStore %530 %655 
                                         f32 %656 = OpLoad %530 
                                         f32 %657 = OpExtInst %1 40 %656 %204 
                                                      OpStore %530 %657 
                                       f32_4 %658 = OpLoad %386 
                                       f32_3 %659 = OpVectorShuffle %658 %658 0 1 2 
                                       f32_4 %660 = OpLoad %386 
                                       f32_3 %661 = OpVectorShuffle %660 %660 0 1 2 
                                         f32 %662 = OpDot %659 %661 
                                                      OpStore %50 %662 
                                         f32 %664 = OpLoad %50 
                                        bool %665 = OpFOrdNotEqual %664 %204 
                                                      OpStore %663 %665 
                                        bool %666 = OpLoad %663 
                                         f32 %667 = OpSelect %666 %74 %204 
                                                      OpStore %50 %667 
                                         f32 %668 = OpLoad %50 
                                         f32 %669 = OpLoad %530 
                                         f32 %670 = OpFMul %668 %669 
                                                      OpStore %530 %670 
                                       f32_3 %671 = OpLoad %159 
                                       f32_3 %672 = OpVectorShuffle %671 %671 0 0 0 
                                       f32_4 %673 = OpLoad %255 
                                       f32_3 %674 = OpVectorShuffle %673 %673 0 1 2 
                                       f32_3 %675 = OpFMul %672 %674 
                                                      OpStore %39 %675 
                                       f32_4 %676 = OpLoad %255 
                                       f32_3 %677 = OpVectorShuffle %676 %676 0 1 2 
                                         f32 %678 = OpLoad %530 
                                       f32_3 %679 = OpCompositeConstruct %678 %678 %678 
                                       f32_3 %680 = OpFMul %677 %679 
                                                      OpStore %159 %680 
                                Private f32* %681 = OpAccessChain %9 %29 
                                         f32 %682 = OpLoad %681 
                                         f32 %683 = OpFNegate %682 
                                         f32 %684 = OpFAdd %683 %74 
                                Private f32* %685 = OpAccessChain %9 %29 
                                                      OpStore %685 %684 
                                Private f32* %686 = OpAccessChain %9 %29 
                                         f32 %687 = OpLoad %686 
                                Private f32* %688 = OpAccessChain %9 %29 
                                         f32 %689 = OpLoad %688 
                                         f32 %690 = OpFMul %687 %689 
                                                      OpStore %172 %690 
                                         f32 %691 = OpLoad %172 
                                         f32 %692 = OpLoad %172 
                                         f32 %693 = OpFMul %691 %692 
                                                      OpStore %172 %693 
                                Private f32* %694 = OpAccessChain %9 %29 
                                         f32 %695 = OpLoad %694 
                                         f32 %696 = OpLoad %172 
                                         f32 %697 = OpFMul %695 %696 
                                Private f32* %698 = OpAccessChain %9 %29 
                                                      OpStore %698 %697 
                                       f32_4 %699 = OpLoad %449 
                                       f32_3 %700 = OpVectorShuffle %699 %699 1 2 3 
                                       f32_4 %701 = OpLoad %9 
                                       f32_3 %702 = OpVectorShuffle %701 %701 0 0 0 
                                       f32_3 %703 = OpFMul %700 %702 
                                       f32_4 %704 = OpLoad %386 
                                       f32_3 %705 = OpVectorShuffle %704 %704 0 1 2 
                                       f32_3 %706 = OpFAdd %703 %705 
                                       f32_4 %707 = OpLoad %77 
                                       f32_4 %708 = OpVectorShuffle %707 %706 4 5 6 3 
                                                      OpStore %77 %708 
                                       f32_3 %709 = OpLoad %159 
                                       f32_4 %710 = OpLoad %77 
                                       f32_3 %711 = OpVectorShuffle %710 %710 0 1 2 
                                       f32_3 %712 = OpFMul %709 %711 
                                       f32_4 %713 = OpLoad %9 
                                       f32_4 %714 = OpVectorShuffle %713 %712 4 5 6 3 
                                                      OpStore %9 %714 
                                       f32_3 %715 = OpLoad %284 
                                       f32_3 %716 = OpLoad %39 
                                       f32_3 %717 = OpFMul %715 %716 
                                       f32_4 %718 = OpLoad %9 
                                       f32_3 %719 = OpVectorShuffle %718 %718 0 1 2 
                                       f32_3 %720 = OpFAdd %717 %719 
                                       f32_4 %721 = OpLoad %9 
                                       f32_4 %722 = OpVectorShuffle %721 %720 4 5 6 3 
                                                      OpStore %9 %722 
                                Private f32* %723 = OpAccessChain %9 %149 
                                                      OpStore %723 %74 
                                       f32_4 %726 = OpLoad %9 
                                       f32_4 %727 = OpFNegate %726 
                                       f32_4 %728 = OpExtInst %1 29 %727 
                                                      OpStore %725 %728 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _LightProjectionParams;
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
UNITY_LOCATION(0) uniform  sampler2D _CameraDepthTexture;
UNITY_LOCATION(1) uniform  sampler2D _LightTextureB0;
UNITY_LOCATION(2) uniform  samplerCube _LightTexture0;
UNITY_LOCATION(3) uniform  sampler2D _CameraGBufferTexture0;
UNITY_LOCATION(4) uniform  sampler2D _CameraGBufferTexture1;
UNITY_LOCATION(5) uniform  sampler2D _CameraGBufferTexture2;
UNITY_LOCATION(6) uniform  samplerCube _ShadowMapTexture;
UNITY_LOCATION(7) uniform  samplerCubeShadow hlslcc_zcmp_ShadowMapTexture;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
vec3 u_xlat6;
float u_xlat7;
float u_xlat12;
float u_xlat13;
float u_xlat18;
bool u_xlatb18;
float u_xlat19;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat2 = texture(_CameraDepthTexture, u_xlat1.xy);
    u_xlat18 = _ZBufferParams.x * u_xlat2.x + _ZBufferParams.y;
    u_xlat18 = float(1.0) / u_xlat18;
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat18 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat6.xyz = u_xlat2.xyw + (-_LightPos.xyz);
    u_xlat13 = max(abs(u_xlat6.y), abs(u_xlat6.x));
    u_xlat13 = max(abs(u_xlat6.z), u_xlat13);
    u_xlat13 = u_xlat13 + (-_LightProjectionParams.z);
    u_xlat13 = max(u_xlat13, 9.99999975e-06);
    u_xlat13 = u_xlat13 * _LightProjectionParams.w;
    u_xlat13 = _LightProjectionParams.y / u_xlat13;
    u_xlat13 = u_xlat13 + (-_LightProjectionParams.x);
    vec4 txVec0 = vec4(u_xlat6.xyz,u_xlat13);
    u_xlat13 = texture(hlslcc_zcmp_ShadowMapTexture, txVec0);
    u_xlat19 = (-_LightShadowData.x) + 1.0;
    u_xlat13 = u_xlat13 * u_xlat19 + _LightShadowData.x;
    u_xlat19 = (-u_xlat13) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat19 + u_xlat13;
    u_xlat13 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat19 = u_xlat13 * _LightPos.w;
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat3 = texture(_LightTextureB0, vec2(u_xlat19));
    u_xlat0.x = u_xlat0.x * u_xlat3.x;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat2.www + u_xlat3.xyz;
    u_xlat2.xyz = u_xlat2.xyw + (-_WorldSpaceCameraPos.xyz);
    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlat3 = texture(_LightTexture0, u_xlat3.xyz, -8.0);
    u_xlat0.x = u_xlat0.x * u_xlat3.w;
    u_xlat3.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat4.xyz = (-u_xlat6.xyz) * vec3(u_xlat13) + (-u_xlat2.xyz);
    u_xlat0.xyz = u_xlat6.xyz * vec3(u_xlat13);
    u_xlat18 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat18 = max(u_xlat18, 0.00100000005);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat4.xyz = vec3(u_xlat18) * u_xlat4.xyz;
    u_xlat5 = texture(_CameraGBufferTexture2, u_xlat1.xy);
    u_xlat5.xyz = u_xlat5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat18 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat5.xyz = vec3(u_xlat18) * u_xlat5.xyz;
    u_xlat18 = dot(u_xlat5.xyz, u_xlat4.xyz);
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
    u_xlat13 = dot((-u_xlat0.xyz), u_xlat4.xyz);
    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
    u_xlat0.x = dot(u_xlat5.xyz, (-u_xlat0.xyz));
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat6.x = dot(u_xlat5.xyz, (-u_xlat2.xyz));
    u_xlat2 = texture(_CameraGBufferTexture1, u_xlat1.xy);
    u_xlat4 = texture(_CameraGBufferTexture0, u_xlat1.xy);
    u_xlat5 = (-u_xlat2.wxyz) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat12 = u_xlat5.x * u_xlat5.x;
    u_xlat12 = max(u_xlat12, 0.00200000009);
    u_xlat1.x = u_xlat12 * u_xlat12;
    u_xlat7 = u_xlat18 * u_xlat1.x + (-u_xlat18);
    u_xlat18 = u_xlat7 * u_xlat18 + 1.0;
    u_xlat18 = u_xlat18 * u_xlat18 + 1.00000001e-07;
    u_xlat1.x = u_xlat1.x * 0.318309873;
    u_xlat18 = u_xlat1.x / u_xlat18;
    u_xlat1.x = (-u_xlat12) + 1.0;
    u_xlat7 = abs(u_xlat6.x) * u_xlat1.x + u_xlat12;
    u_xlat12 = u_xlat0.x * u_xlat1.x + u_xlat12;
    u_xlat12 = u_xlat12 * abs(u_xlat6.x);
    u_xlat6.x = -abs(u_xlat6.x) + 1.0;
    u_xlat12 = u_xlat0.x * u_xlat7 + u_xlat12;
    u_xlat12 = u_xlat12 + 9.99999975e-06;
    u_xlat12 = 0.5 / u_xlat12;
    u_xlat12 = u_xlat18 * u_xlat12;
    u_xlat12 = u_xlat12 * 3.14159274;
    u_xlat12 = u_xlat0.x * u_xlat12;
    u_xlat12 = max(u_xlat12, 0.0);
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlatb18 = u_xlat18!=0.0;
    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
    u_xlat12 = u_xlat18 * u_xlat12;
    u_xlat1.xyw = u_xlat3.xyz * vec3(u_xlat12);
    u_xlat12 = (-u_xlat13) + 1.0;
    u_xlat18 = u_xlat13 * u_xlat13;
    u_xlat18 = dot(vec2(u_xlat18), u_xlat5.xx);
    u_xlat18 = u_xlat18 + -0.5;
    u_xlat13 = u_xlat12 * u_xlat12;
    u_xlat13 = u_xlat13 * u_xlat13;
    u_xlat12 = u_xlat12 * u_xlat13;
    u_xlat2.xyz = u_xlat5.yzw * vec3(u_xlat12) + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat1.xyw * u_xlat2.xyz;
    u_xlat12 = u_xlat6.x * u_xlat6.x;
    u_xlat12 = u_xlat12 * u_xlat12;
    u_xlat6.x = u_xlat6.x * u_xlat12;
    u_xlat6.x = u_xlat18 * u_xlat6.x + 1.0;
    u_xlat12 = (-u_xlat0.x) + 1.0;
    u_xlat19 = u_xlat12 * u_xlat12;
    u_xlat19 = u_xlat19 * u_xlat19;
    u_xlat12 = u_xlat12 * u_xlat19;
    u_xlat12 = u_xlat18 * u_xlat12 + 1.0;
    u_xlat6.x = u_xlat6.x * u_xlat12;
    u_xlat0.x = u_xlat0.x * u_xlat6.x;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat0.xyz = u_xlat4.xyz * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat0.w = 1.0;
    SV_Target0 = exp2((-u_xlat0));
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 192
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %80 %102 %169 %175 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpMemberDecorate %78 0 BuiltIn 78 
                                                      OpMemberDecorate %78 1 BuiltIn 78 
                                                      OpMemberDecorate %78 2 BuiltIn 78 
                                                      OpDecorate %78 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 102 
                                                      OpDecorate %169 Location 169 
                                                      OpDecorate vs_TEXCOORD1 Location 175 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %16 %17 %18 %6 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 1 
                                              %24 = OpTypePointer Uniform %7 
                                          i32 %28 = OpConstant 0 
                                          i32 %36 = OpConstant 2 
                                          i32 %45 = OpConstant 3 
                               Private f32_4* %49 = OpVariable Private 
                                          u32 %76 = OpConstant 1 
                                              %77 = OpTypeArray %6 %76 
                                              %78 = OpTypeStruct %7 %6 %77 
                                              %79 = OpTypePointer Output %78 
         Output struct {f32_4; f32; f32[1];}* %80 = OpVariable Output 
                                              %82 = OpTypePointer Output %7 
                                              %84 = OpTypePointer Private %6 
                                          u32 %87 = OpConstant 0 
                                              %88 = OpTypePointer Uniform %6 
                               Private f32_4* %93 = OpVariable Private 
                                              %94 = OpTypeVector %6 3 
                                          f32 %97 = OpConstant 3.674022E-40 
                                        f32_3 %98 = OpConstantComposite %97 %97 %97 
                       Output f32_4* vs_TEXCOORD0 = OpVariable Output 
                                             %103 = OpTypeVector %6 2 
                                         f32 %158 = OpConstant 3.674022E-40 
                                         f32 %159 = OpConstant 3.674022E-40 
                                       f32_3 %160 = OpConstantComposite %158 %158 %159 
                                             %168 = OpTypePointer Input %94 
                                Input f32_3* %169 = OpVariable Input 
                                             %174 = OpTypePointer Output %94 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                                         i32 %176 = OpConstant 4 
                                             %186 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %25 = OpAccessChain %21 %23 %23 
                                        f32_4 %26 = OpLoad %25 
                                        f32_4 %27 = OpFMul %13 %26 
                                                      OpStore %9 %27 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %28 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %44 = OpLoad %9 
                               Uniform f32_4* %46 = OpAccessChain %21 %23 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_4 %48 = OpFAdd %44 %47 
                                                      OpStore %9 %48 
                                        f32_4 %50 = OpLoad %9 
                                        f32_4 %51 = OpVectorShuffle %50 %50 1 1 1 1 
                               Uniform f32_4* %52 = OpAccessChain %21 %45 %23 
                                        f32_4 %53 = OpLoad %52 
                                        f32_4 %54 = OpFMul %51 %53 
                                                      OpStore %49 %54 
                               Uniform f32_4* %55 = OpAccessChain %21 %45 %28 
                                        f32_4 %56 = OpLoad %55 
                                        f32_4 %57 = OpLoad %9 
                                        f32_4 %58 = OpVectorShuffle %57 %57 0 0 0 0 
                                        f32_4 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %49 
                                        f32_4 %61 = OpFAdd %59 %60 
                                                      OpStore %49 %61 
                               Uniform f32_4* %62 = OpAccessChain %21 %45 %36 
                                        f32_4 %63 = OpLoad %62 
                                        f32_4 %64 = OpLoad %9 
                                        f32_4 %65 = OpVectorShuffle %64 %64 2 2 2 2 
                                        f32_4 %66 = OpFMul %63 %65 
                                        f32_4 %67 = OpLoad %49 
                                        f32_4 %68 = OpFAdd %66 %67 
                                                      OpStore %49 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %45 %45 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %9 
                                        f32_4 %72 = OpVectorShuffle %71 %71 3 3 3 3 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %49 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %49 %75 
                                        f32_4 %81 = OpLoad %49 
                                Output f32_4* %83 = OpAccessChain %80 %28 
                                                      OpStore %83 %81 
                                 Private f32* %85 = OpAccessChain %49 %76 
                                          f32 %86 = OpLoad %85 
                                 Uniform f32* %89 = OpAccessChain %21 %28 %87 
                                          f32 %90 = OpLoad %89 
                                          f32 %91 = OpFMul %86 %90 
                                 Private f32* %92 = OpAccessChain %49 %76 
                                                      OpStore %92 %91 
                                        f32_4 %95 = OpLoad %49 
                                        f32_3 %96 = OpVectorShuffle %95 %95 0 3 1 
                                        f32_3 %99 = OpFMul %96 %98 
                                       f32_4 %100 = OpLoad %93 
                                       f32_4 %101 = OpVectorShuffle %100 %99 4 1 5 6 
                                                      OpStore %93 %101 
                                       f32_4 %104 = OpLoad %49 
                                       f32_2 %105 = OpVectorShuffle %104 %104 2 3 
                                       f32_4 %106 = OpLoad vs_TEXCOORD0 
                                       f32_4 %107 = OpVectorShuffle %106 %105 0 1 4 5 
                                                      OpStore vs_TEXCOORD0 %107 
                                       f32_4 %108 = OpLoad %93 
                                       f32_2 %109 = OpVectorShuffle %108 %108 2 2 
                                       f32_4 %110 = OpLoad %93 
                                       f32_2 %111 = OpVectorShuffle %110 %110 0 3 
                                       f32_2 %112 = OpFAdd %109 %111 
                                       f32_4 %113 = OpLoad vs_TEXCOORD0 
                                       f32_4 %114 = OpVectorShuffle %113 %112 4 5 2 3 
                                                      OpStore vs_TEXCOORD0 %114 
                                       f32_4 %115 = OpLoad %9 
                                       f32_3 %116 = OpVectorShuffle %115 %115 1 1 1 
                              Uniform f32_4* %117 = OpAccessChain %21 %36 %23 
                                       f32_4 %118 = OpLoad %117 
                                       f32_3 %119 = OpVectorShuffle %118 %118 0 1 2 
                                       f32_3 %120 = OpFMul %116 %119 
                                       f32_4 %121 = OpLoad %49 
                                       f32_4 %122 = OpVectorShuffle %121 %120 4 5 6 3 
                                                      OpStore %49 %122 
                              Uniform f32_4* %123 = OpAccessChain %21 %36 %28 
                                       f32_4 %124 = OpLoad %123 
                                       f32_3 %125 = OpVectorShuffle %124 %124 0 1 2 
                                       f32_4 %126 = OpLoad %9 
                                       f32_3 %127 = OpVectorShuffle %126 %126 0 0 0 
                                       f32_3 %128 = OpFMul %125 %127 
                                       f32_4 %129 = OpLoad %49 
                                       f32_3 %130 = OpVectorShuffle %129 %129 0 1 2 
                                       f32_3 %131 = OpFAdd %128 %130 
                                       f32_4 %132 = OpLoad %49 
                                       f32_4 %133 = OpVectorShuffle %132 %131 4 5 6 3 
                                                      OpStore %49 %133 
                              Uniform f32_4* %134 = OpAccessChain %21 %36 %36 
                                       f32_4 %135 = OpLoad %134 
                                       f32_3 %136 = OpVectorShuffle %135 %135 0 1 2 
                                       f32_4 %137 = OpLoad %9 
                                       f32_3 %138 = OpVectorShuffle %137 %137 2 2 2 
                                       f32_3 %139 = OpFMul %136 %138 
                                       f32_4 %140 = OpLoad %49 
                                       f32_3 %141 = OpVectorShuffle %140 %140 0 1 2 
                                       f32_3 %142 = OpFAdd %139 %141 
                                       f32_4 %143 = OpLoad %9 
                                       f32_4 %144 = OpVectorShuffle %143 %142 4 5 6 3 
                                                      OpStore %9 %144 
                              Uniform f32_4* %145 = OpAccessChain %21 %36 %45 
                                       f32_4 %146 = OpLoad %145 
                                       f32_3 %147 = OpVectorShuffle %146 %146 0 1 2 
                                       f32_4 %148 = OpLoad %9 
                                       f32_3 %149 = OpVectorShuffle %148 %148 3 3 3 
                                       f32_3 %150 = OpFMul %147 %149 
                                       f32_4 %151 = OpLoad %9 
                                       f32_3 %152 = OpVectorShuffle %151 %151 0 1 2 
                                       f32_3 %153 = OpFAdd %150 %152 
                                       f32_4 %154 = OpLoad %9 
                                       f32_4 %155 = OpVectorShuffle %154 %153 4 5 6 3 
                                                      OpStore %9 %155 
                                       f32_4 %156 = OpLoad %9 
                                       f32_3 %157 = OpVectorShuffle %156 %156 0 1 2 
                                       f32_3 %161 = OpFMul %157 %160 
                                       f32_4 %162 = OpLoad %49 
                                       f32_4 %163 = OpVectorShuffle %162 %161 4 5 6 3 
                                                      OpStore %49 %163 
                                       f32_4 %164 = OpLoad %9 
                                       f32_3 %165 = OpVectorShuffle %164 %164 0 1 2 
                                       f32_3 %166 = OpFNegate %165 
                                       f32_3 %167 = OpFMul %166 %160 
                                       f32_3 %170 = OpLoad %169 
                                       f32_3 %171 = OpFAdd %167 %170 
                                       f32_4 %172 = OpLoad %9 
                                       f32_4 %173 = OpVectorShuffle %172 %171 4 5 6 3 
                                                      OpStore %9 %173 
                                Uniform f32* %177 = OpAccessChain %21 %176 
                                         f32 %178 = OpLoad %177 
                                       f32_3 %179 = OpCompositeConstruct %178 %178 %178 
                                       f32_4 %180 = OpLoad %9 
                                       f32_3 %181 = OpVectorShuffle %180 %180 0 1 2 
                                       f32_3 %182 = OpFMul %179 %181 
                                       f32_4 %183 = OpLoad %49 
                                       f32_3 %184 = OpVectorShuffle %183 %183 0 1 2 
                                       f32_3 %185 = OpFAdd %182 %184 
                                                      OpStore vs_TEXCOORD1 %185 
                                 Output f32* %187 = OpAccessChain %80 %28 %76 
                                         f32 %188 = OpLoad %187 
                                         f32 %189 = OpFNegate %188 
                                 Output f32* %190 = OpAccessChain %80 %28 %76 
                                                      OpStore %190 %189 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 690
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %25 %41 %685 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpDecorate %13 ArrayStride 13 
                                                      OpDecorate %14 ArrayStride 14 
                                                      OpMemberDecorate %15 0 Offset 15 
                                                      OpMemberDecorate %15 1 Offset 15 
                                                      OpMemberDecorate %15 2 Offset 15 
                                                      OpMemberDecorate %15 3 Offset 15 
                                                      OpMemberDecorate %15 4 Offset 15 
                                                      OpMemberDecorate %15 5 Offset 15 
                                                      OpMemberDecorate %15 6 Offset 15 
                                                      OpMemberDecorate %15 7 Offset 15 
                                                      OpMemberDecorate %15 8 Offset 15 
                                                      OpMemberDecorate %15 9 Offset 15 
                                                      OpDecorate %15 Block 
                                                      OpDecorate %17 DescriptorSet 17 
                                                      OpDecorate %17 Binding 17 
                                                      OpDecorate vs_TEXCOORD1 Location 25 
                                                      OpDecorate vs_TEXCOORD0 Location 41 
                                                      OpDecorate %53 DescriptorSet 53 
                                                      OpDecorate %53 Binding 53 
                                                      OpDecorate %57 DescriptorSet 57 
                                                      OpDecorate %57 Binding 57 
                                                      OpDecorate %232 DescriptorSet 232 
                                                      OpDecorate %232 Binding 232 
                                                      OpDecorate %234 DescriptorSet 234 
                                                      OpDecorate %234 Binding 234 
                                                      OpDecorate %272 DescriptorSet 272 
                                                      OpDecorate %272 Binding 272 
                                                      OpDecorate %274 DescriptorSet 274 
                                                      OpDecorate %274 Binding 274 
                                                      OpDecorate %323 DescriptorSet 323 
                                                      OpDecorate %323 Binding 323 
                                                      OpDecorate %325 DescriptorSet 325 
                                                      OpDecorate %325 Binding 325 
                                                      OpDecorate %398 DescriptorSet 398 
                                                      OpDecorate %398 Binding 398 
                                                      OpDecorate %400 DescriptorSet 400 
                                                      OpDecorate %400 Binding 400 
                                                      OpDecorate %453 DescriptorSet 453 
                                                      OpDecorate %453 Binding 453 
                                                      OpDecorate %455 DescriptorSet 455 
                                                      OpDecorate %455 Binding 455 
                                                      OpDecorate %461 DescriptorSet 461 
                                                      OpDecorate %461 Binding 461 
                                                      OpDecorate %463 DescriptorSet 463 
                                                      OpDecorate %463 Binding 463 
                                                      OpDecorate %685 Location 685 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 3 
                                              %11 = OpTypeInt 32 0 
                                          u32 %12 = OpConstant 4 
                                              %13 = OpTypeArray %7 %12 
                                              %14 = OpTypeArray %7 %12 
                                              %15 = OpTypeStruct %10 %7 %7 %13 %7 %7 %7 %7 %7 %14 
                                              %16 = OpTypePointer Uniform %15 
Uniform struct {f32_3; f32_4; f32_4; f32_4[4]; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[4];}* %17 = OpVariable Uniform 
                                              %18 = OpTypeInt 32 1 
                                          i32 %19 = OpConstant 1 
                                          u32 %20 = OpConstant 2 
                                              %21 = OpTypePointer Uniform %6 
                                              %24 = OpTypePointer Input %10 
                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                                              %26 = OpTypePointer Input %6 
                                          u32 %30 = OpConstant 0 
                                              %31 = OpTypePointer Private %6 
                               Private f32_4* %39 = OpVariable Private 
                                              %40 = OpTypePointer Input %7 
                        Input f32_4* vs_TEXCOORD0 = OpVariable Input 
                                              %42 = OpTypeVector %6 2 
                                 Private f32* %50 = OpVariable Private 
                                              %51 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %52 = OpTypePointer UniformConstant %51 
         UniformConstant read_only Texture2D* %53 = OpVariable UniformConstant 
                                              %55 = OpTypeSampler 
                                              %56 = OpTypePointer UniformConstant %55 
                     UniformConstant sampler* %57 = OpVariable UniformConstant 
                                              %59 = OpTypeSampledImage %51 
                                          i32 %65 = OpConstant 2 
                                          u32 %70 = OpConstant 1 
                                          f32 %74 = OpConstant 3.674022E-40 
                               Private f32_4* %77 = OpVariable Private 
                                              %85 = OpTypePointer Private %10 
                               Private f32_3* %86 = OpVariable Private 
                                          i32 %89 = OpConstant 3 
                                              %90 = OpTypePointer Uniform %7 
                                          i32 %95 = OpConstant 0 
                                         i32 %127 = OpConstant 6 
                                         u32 %150 = OpConstant 3 
                                         i32 %162 = OpConstant 5 
                                         f32 %172 = OpConstant 3.674022E-40 
                              Private f32_3* %175 = OpVariable Private 
                                         i32 %178 = OpConstant 7 
                                Private f32* %184 = OpVariable Private 
                                         i32 %198 = OpConstant 4 
                                         f32 %204 = OpConstant 3.674022E-40 
                                             %222 = OpTypePointer Function %7 
                                             %230 = OpTypeImage %6 Cube 0 0 0 1 Unknown 
                                             %231 = OpTypePointer UniformConstant %230 
      UniformConstant read_only TextureCube* %232 = OpVariable UniformConstant 
                    UniformConstant sampler* %234 = OpVariable UniformConstant 
                                             %236 = OpTypeImage %6 Cube 1 0 0 1 Unknown 
                                             %237 = OpTypeSampledImage %236 
                                Private f32* %242 = OpVariable Private 
        UniformConstant read_only Texture2D* %272 = OpVariable UniformConstant 
                    UniformConstant sampler* %274 = OpVariable UniformConstant 
                                         i32 %288 = OpConstant 9 
                                             %311 = OpTypePointer Uniform %10 
      UniformConstant read_only TextureCube* %323 = OpVariable UniformConstant 
                    UniformConstant sampler* %325 = OpVariable UniformConstant 
                                             %327 = OpTypeSampledImage %230 
                                         f32 %330 = OpConstant 3.674022E-40 
                                         i32 %340 = OpConstant 8 
                              Private f32_4* %362 = OpVariable Private 
                                         f32 %386 = OpConstant 3.674022E-40 
                              Private f32_3* %397 = OpVariable Private 
        UniformConstant read_only Texture2D* %398 = OpVariable UniformConstant 
                    UniformConstant sampler* %400 = OpVariable UniformConstant 
                                         f32 %408 = OpConstant 3.674022E-40 
                                       f32_3 %409 = OpConstantComposite %408 %408 %408 
                                         f32 %411 = OpConstant 3.674022E-40 
                                       f32_3 %412 = OpConstantComposite %411 %411 %411 
        UniformConstant read_only Texture2D* %453 = OpVariable UniformConstant 
                    UniformConstant sampler* %455 = OpVariable UniformConstant 
        UniformConstant read_only Texture2D* %461 = OpVariable UniformConstant 
                    UniformConstant sampler* %463 = OpVariable UniformConstant 
                                       f32_4 %475 = OpConstantComposite %74 %74 %74 %74 
                                Private f32* %477 = OpVariable Private 
                                         f32 %484 = OpConstant 3.674022E-40 
                                Private f32* %486 = OpVariable Private 
                                Private f32* %490 = OpVariable Private 
                                         f32 %504 = OpConstant 3.674022E-40 
                                         f32 %507 = OpConstant 3.674022E-40 
                                         f32 %547 = OpConstant 3.674022E-40 
                                         f32 %558 = OpConstant 3.674022E-40 
                                             %567 = OpTypeBool 
                                             %568 = OpTypePointer Private %567 
                               Private bool* %569 = OpVariable Private 
                                         f32 %593 = OpConstant 3.674022E-40 
                                             %684 = OpTypePointer Output %7 
                               Output f32_4* %685 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_4* %223 = OpVariable Function 
                                 Uniform f32* %22 = OpAccessChain %17 %19 %20 
                                          f32 %23 = OpLoad %22 
                                   Input f32* %27 = OpAccessChain vs_TEXCOORD1 %20 
                                          f32 %28 = OpLoad %27 
                                          f32 %29 = OpFDiv %23 %28 
                                 Private f32* %32 = OpAccessChain %9 %30 
                                                      OpStore %32 %29 
                                        f32_4 %33 = OpLoad %9 
                                        f32_3 %34 = OpVectorShuffle %33 %33 0 0 0 
                                        f32_3 %35 = OpLoad vs_TEXCOORD1 
                                        f32_3 %36 = OpFMul %34 %35 
                                        f32_4 %37 = OpLoad %9 
                                        f32_4 %38 = OpVectorShuffle %37 %36 4 5 6 3 
                                                      OpStore %9 %38 
                                        f32_4 %43 = OpLoad vs_TEXCOORD0 
                                        f32_2 %44 = OpVectorShuffle %43 %43 0 1 
                                        f32_4 %45 = OpLoad vs_TEXCOORD0 
                                        f32_2 %46 = OpVectorShuffle %45 %45 3 3 
                                        f32_2 %47 = OpFDiv %44 %46 
                                        f32_4 %48 = OpLoad %39 
                                        f32_4 %49 = OpVectorShuffle %48 %47 4 5 2 3 
                                                      OpStore %39 %49 
                          read_only Texture2D %54 = OpLoad %53 
                                      sampler %58 = OpLoad %57 
                   read_only Texture2DSampled %60 = OpSampledImage %54 %58 
                                        f32_4 %61 = OpLoad %39 
                                        f32_2 %62 = OpVectorShuffle %61 %61 0 1 
                                        f32_4 %63 = OpImageSampleImplicitLod %60 %62 
                                          f32 %64 = OpCompositeExtract %63 0 
                                                      OpStore %50 %64 
                                 Uniform f32* %66 = OpAccessChain %17 %65 %30 
                                          f32 %67 = OpLoad %66 
                                          f32 %68 = OpLoad %50 
                                          f32 %69 = OpFMul %67 %68 
                                 Uniform f32* %71 = OpAccessChain %17 %65 %70 
                                          f32 %72 = OpLoad %71 
                                          f32 %73 = OpFAdd %69 %72 
                                                      OpStore %50 %73 
                                          f32 %75 = OpLoad %50 
                                          f32 %76 = OpFDiv %74 %75 
                                                      OpStore %50 %76 
                                          f32 %78 = OpLoad %50 
                                        f32_3 %79 = OpCompositeConstruct %78 %78 %78 
                                        f32_4 %80 = OpLoad %9 
                                        f32_3 %81 = OpVectorShuffle %80 %80 0 1 2 
                                        f32_3 %82 = OpFMul %79 %81 
                                        f32_4 %83 = OpLoad %77 
                                        f32_4 %84 = OpVectorShuffle %83 %82 4 5 6 3 
                                                      OpStore %77 %84 
                                        f32_4 %87 = OpLoad %77 
                                        f32_3 %88 = OpVectorShuffle %87 %87 1 1 1 
                               Uniform f32_4* %91 = OpAccessChain %17 %89 %19 
                                        f32_4 %92 = OpLoad %91 
                                        f32_3 %93 = OpVectorShuffle %92 %92 0 1 2 
                                        f32_3 %94 = OpFMul %88 %93 
                                                      OpStore %86 %94 
                               Uniform f32_4* %96 = OpAccessChain %17 %89 %95 
                                        f32_4 %97 = OpLoad %96 
                                        f32_3 %98 = OpVectorShuffle %97 %97 0 1 2 
                                        f32_4 %99 = OpLoad %77 
                                       f32_3 %100 = OpVectorShuffle %99 %99 0 0 0 
                                       f32_3 %101 = OpFMul %98 %100 
                                       f32_3 %102 = OpLoad %86 
                                       f32_3 %103 = OpFAdd %101 %102 
                                       f32_4 %104 = OpLoad %77 
                                       f32_4 %105 = OpVectorShuffle %104 %103 4 5 2 6 
                                                      OpStore %77 %105 
                              Uniform f32_4* %106 = OpAccessChain %17 %89 %65 
                                       f32_4 %107 = OpLoad %106 
                                       f32_3 %108 = OpVectorShuffle %107 %107 0 1 2 
                                       f32_4 %109 = OpLoad %77 
                                       f32_3 %110 = OpVectorShuffle %109 %109 2 2 2 
                                       f32_3 %111 = OpFMul %108 %110 
                                       f32_4 %112 = OpLoad %77 
                                       f32_3 %113 = OpVectorShuffle %112 %112 0 1 3 
                                       f32_3 %114 = OpFAdd %111 %113 
                                       f32_4 %115 = OpLoad %77 
                                       f32_4 %116 = OpVectorShuffle %115 %114 4 5 2 6 
                                                      OpStore %77 %116 
                                       f32_4 %117 = OpLoad %77 
                                       f32_3 %118 = OpVectorShuffle %117 %117 0 1 3 
                              Uniform f32_4* %119 = OpAccessChain %17 %89 %89 
                                       f32_4 %120 = OpLoad %119 
                                       f32_3 %121 = OpVectorShuffle %120 %120 0 1 2 
                                       f32_3 %122 = OpFAdd %118 %121 
                                       f32_4 %123 = OpLoad %77 
                                       f32_4 %124 = OpVectorShuffle %123 %122 4 5 2 6 
                                                      OpStore %77 %124 
                                       f32_4 %125 = OpLoad %77 
                                       f32_3 %126 = OpVectorShuffle %125 %125 0 1 3 
                              Uniform f32_4* %128 = OpAccessChain %17 %127 
                                       f32_4 %129 = OpLoad %128 
                                       f32_3 %130 = OpVectorShuffle %129 %129 0 1 2 
                                       f32_3 %131 = OpFNegate %130 
                                       f32_3 %132 = OpFAdd %126 %131 
                                                      OpStore %86 %132 
                                       f32_3 %133 = OpLoad %86 
                                       f32_3 %134 = OpLoad %86 
                                         f32 %135 = OpDot %133 %134 
                                Private f32* %136 = OpAccessChain %9 %30 
                                                      OpStore %136 %135 
                                Private f32* %137 = OpAccessChain %9 %30 
                                         f32 %138 = OpLoad %137 
                                         f32 %139 = OpExtInst %1 31 %138 
                                Private f32* %140 = OpAccessChain %9 %30 
                                                      OpStore %140 %139 
                                Private f32* %141 = OpAccessChain %9 %20 
                                         f32 %142 = OpLoad %141 
                                         f32 %143 = OpFNegate %142 
                                         f32 %144 = OpLoad %50 
                                         f32 %145 = OpFMul %143 %144 
                                Private f32* %146 = OpAccessChain %9 %30 
                                         f32 %147 = OpLoad %146 
                                         f32 %148 = OpFAdd %145 %147 
                                Private f32* %149 = OpAccessChain %9 %30 
                                                      OpStore %149 %148 
                                Uniform f32* %151 = OpAccessChain %17 %127 %150 
                                         f32 %152 = OpLoad %151 
                                Private f32* %153 = OpAccessChain %9 %30 
                                         f32 %154 = OpLoad %153 
                                         f32 %155 = OpFMul %152 %154 
                                Private f32* %156 = OpAccessChain %77 %20 
                                         f32 %157 = OpLoad %156 
                                         f32 %158 = OpFAdd %155 %157 
                                Private f32* %159 = OpAccessChain %9 %30 
                                                      OpStore %159 %158 
                                Private f32* %160 = OpAccessChain %9 %30 
                                         f32 %161 = OpLoad %160 
                                Uniform f32* %163 = OpAccessChain %17 %162 %20 
                                         f32 %164 = OpLoad %163 
                                         f32 %165 = OpFMul %161 %164 
                                Uniform f32* %166 = OpAccessChain %17 %162 %150 
                                         f32 %167 = OpLoad %166 
                                         f32 %168 = OpFAdd %165 %167 
                                Private f32* %169 = OpAccessChain %9 %30 
                                                      OpStore %169 %168 
                                Private f32* %170 = OpAccessChain %9 %30 
                                         f32 %171 = OpLoad %170 
                                         f32 %173 = OpExtInst %1 43 %171 %172 %74 
                                Private f32* %174 = OpAccessChain %9 %30 
                                                      OpStore %174 %173 
                                       f32_4 %176 = OpLoad %77 
                                       f32_3 %177 = OpVectorShuffle %176 %176 0 1 3 
                              Uniform f32_4* %179 = OpAccessChain %17 %178 
                                       f32_4 %180 = OpLoad %179 
                                       f32_3 %181 = OpVectorShuffle %180 %180 0 1 2 
                                       f32_3 %182 = OpFNegate %181 
                                       f32_3 %183 = OpFAdd %177 %182 
                                                      OpStore %175 %183 
                                Private f32* %185 = OpAccessChain %175 %70 
                                         f32 %186 = OpLoad %185 
                                         f32 %187 = OpExtInst %1 4 %186 
                                Private f32* %188 = OpAccessChain %175 %30 
                                         f32 %189 = OpLoad %188 
                                         f32 %190 = OpExtInst %1 4 %189 
                                         f32 %191 = OpExtInst %1 40 %187 %190 
                                                      OpStore %184 %191 
                                Private f32* %192 = OpAccessChain %175 %20 
                                         f32 %193 = OpLoad %192 
                                         f32 %194 = OpExtInst %1 4 %193 
                                         f32 %195 = OpLoad %184 
                                         f32 %196 = OpExtInst %1 40 %194 %195 
                                                      OpStore %184 %196 
                                         f32 %197 = OpLoad %184 
                                Uniform f32* %199 = OpAccessChain %17 %198 %20 
                                         f32 %200 = OpLoad %199 
                                         f32 %201 = OpFNegate %200 
                                         f32 %202 = OpFAdd %197 %201 
                                                      OpStore %184 %202 
                                         f32 %203 = OpLoad %184 
                                         f32 %205 = OpExtInst %1 40 %203 %204 
                                                      OpStore %184 %205 
                                         f32 %206 = OpLoad %184 
                                Uniform f32* %207 = OpAccessChain %17 %198 %150 
                                         f32 %208 = OpLoad %207 
                                         f32 %209 = OpFMul %206 %208 
                                                      OpStore %184 %209 
                                Uniform f32* %210 = OpAccessChain %17 %198 %70 
                                         f32 %211 = OpLoad %210 
                                         f32 %212 = OpLoad %184 
                                         f32 %213 = OpFDiv %211 %212 
                                                      OpStore %184 %213 
                                         f32 %214 = OpLoad %184 
                                Uniform f32* %215 = OpAccessChain %17 %198 %30 
                                         f32 %216 = OpLoad %215 
                                         f32 %217 = OpFNegate %216 
                                         f32 %218 = OpFAdd %214 %217 
                                                      OpStore %184 %218 
                                         f32 %219 = OpLoad %184 
                                         f32 %220 = OpFNegate %219 
                                         f32 %221 = OpFAdd %220 %74 
                                                      OpStore %184 %221 
                                       f32_3 %224 = OpLoad %175 
                                         f32 %225 = OpLoad %184 
                                         f32 %226 = OpCompositeExtract %224 0 
                                         f32 %227 = OpCompositeExtract %224 1 
                                         f32 %228 = OpCompositeExtract %224 2 
                                       f32_4 %229 = OpCompositeConstruct %226 %227 %228 %225 
                                                      OpStore %223 %229 
                       read_only TextureCube %233 = OpLoad %232 
                                     sampler %235 = OpLoad %234 
                read_only TextureCubeSampled %238 = OpSampledImage %233 %235 
                                       f32_4 %239 = OpLoad %223 
                                         f32 %240 = OpCompositeExtract %239 3 
                                         f32 %241 = OpImageSampleDrefImplicitLod %238 %239 %240 
                                                      OpStore %184 %241 
                                Uniform f32* %243 = OpAccessChain %17 %162 %30 
                                         f32 %244 = OpLoad %243 
                                         f32 %245 = OpFNegate %244 
                                         f32 %246 = OpFAdd %245 %74 
                                                      OpStore %242 %246 
                                         f32 %247 = OpLoad %184 
                                         f32 %248 = OpLoad %242 
                                         f32 %249 = OpFMul %247 %248 
                                Uniform f32* %250 = OpAccessChain %17 %162 %30 
                                         f32 %251 = OpLoad %250 
                                         f32 %252 = OpFAdd %249 %251 
                                                      OpStore %184 %252 
                                         f32 %253 = OpLoad %184 
                                         f32 %254 = OpFNegate %253 
                                         f32 %255 = OpFAdd %254 %74 
                                                      OpStore %242 %255 
                                Private f32* %256 = OpAccessChain %9 %30 
                                         f32 %257 = OpLoad %256 
                                         f32 %258 = OpLoad %242 
                                         f32 %259 = OpFMul %257 %258 
                                         f32 %260 = OpLoad %184 
                                         f32 %261 = OpFAdd %259 %260 
                                Private f32* %262 = OpAccessChain %9 %30 
                                                      OpStore %262 %261 
                                       f32_3 %263 = OpLoad %175 
                                       f32_3 %264 = OpLoad %175 
                                         f32 %265 = OpDot %263 %264 
                                                      OpStore %184 %265 
                                         f32 %266 = OpLoad %184 
                                Uniform f32* %267 = OpAccessChain %17 %178 %150 
                                         f32 %268 = OpLoad %267 
                                         f32 %269 = OpFMul %266 %268 
                                                      OpStore %242 %269 
                                         f32 %270 = OpLoad %184 
                                         f32 %271 = OpExtInst %1 32 %270 
                                                      OpStore %184 %271 
                         read_only Texture2D %273 = OpLoad %272 
                                     sampler %275 = OpLoad %274 
                  read_only Texture2DSampled %276 = OpSampledImage %273 %275 
                                         f32 %277 = OpLoad %242 
                                       f32_2 %278 = OpCompositeConstruct %277 %277 
                                       f32_4 %279 = OpImageSampleImplicitLod %276 %278 
                                         f32 %280 = OpCompositeExtract %279 0 
                                                      OpStore %242 %280 
                                Private f32* %281 = OpAccessChain %9 %30 
                                         f32 %282 = OpLoad %281 
                                         f32 %283 = OpLoad %242 
                                         f32 %284 = OpFMul %282 %283 
                                Private f32* %285 = OpAccessChain %9 %30 
                                                      OpStore %285 %284 
                                       f32_4 %286 = OpLoad %77 
                                       f32_3 %287 = OpVectorShuffle %286 %286 1 1 1 
                              Uniform f32_4* %289 = OpAccessChain %17 %288 %19 
                                       f32_4 %290 = OpLoad %289 
                                       f32_3 %291 = OpVectorShuffle %290 %290 0 1 2 
                                       f32_3 %292 = OpFMul %287 %291 
                                                      OpStore %86 %292 
                              Uniform f32_4* %293 = OpAccessChain %17 %288 %95 
                                       f32_4 %294 = OpLoad %293 
                                       f32_3 %295 = OpVectorShuffle %294 %294 0 1 2 
                                       f32_4 %296 = OpLoad %77 
                                       f32_3 %297 = OpVectorShuffle %296 %296 0 0 0 
                                       f32_3 %298 = OpFMul %295 %297 
                                       f32_3 %299 = OpLoad %86 
                                       f32_3 %300 = OpFAdd %298 %299 
                                                      OpStore %86 %300 
                              Uniform f32_4* %301 = OpAccessChain %17 %288 %65 
                                       f32_4 %302 = OpLoad %301 
                                       f32_3 %303 = OpVectorShuffle %302 %302 0 1 2 
                                       f32_4 %304 = OpLoad %77 
                                       f32_3 %305 = OpVectorShuffle %304 %304 3 3 3 
                                       f32_3 %306 = OpFMul %303 %305 
                                       f32_3 %307 = OpLoad %86 
                                       f32_3 %308 = OpFAdd %306 %307 
                                                      OpStore %86 %308 
                                       f32_4 %309 = OpLoad %77 
                                       f32_3 %310 = OpVectorShuffle %309 %309 0 1 3 
                              Uniform f32_3* %312 = OpAccessChain %17 %95 
                                       f32_3 %313 = OpLoad %312 
                                       f32_3 %314 = OpFNegate %313 
                                       f32_3 %315 = OpFAdd %310 %314 
                                       f32_4 %316 = OpLoad %77 
                                       f32_4 %317 = OpVectorShuffle %316 %315 4 5 6 3 
                                                      OpStore %77 %317 
                                       f32_3 %318 = OpLoad %86 
                              Uniform f32_4* %319 = OpAccessChain %17 %288 %89 
                                       f32_4 %320 = OpLoad %319 
                                       f32_3 %321 = OpVectorShuffle %320 %320 0 1 2 
                                       f32_3 %322 = OpFAdd %318 %321 
                                                      OpStore %86 %322 
                       read_only TextureCube %324 = OpLoad %323 
                                     sampler %326 = OpLoad %325 
                read_only TextureCubeSampled %328 = OpSampledImage %324 %326 
                                       f32_3 %329 = OpLoad %86 
                                       f32_4 %331 = OpImageSampleImplicitLod %328 %329 Bias %7 
                                         f32 %332 = OpCompositeExtract %331 3 
                                                      OpStore %242 %332 
                                Private f32* %333 = OpAccessChain %9 %30 
                                         f32 %334 = OpLoad %333 
                                         f32 %335 = OpLoad %242 
                                         f32 %336 = OpFMul %334 %335 
                                Private f32* %337 = OpAccessChain %9 %30 
                                                      OpStore %337 %336 
                                       f32_4 %338 = OpLoad %9 
                                       f32_3 %339 = OpVectorShuffle %338 %338 0 0 0 
                              Uniform f32_4* %341 = OpAccessChain %17 %340 
                                       f32_4 %342 = OpLoad %341 
                                       f32_3 %343 = OpVectorShuffle %342 %342 0 1 2 
                                       f32_3 %344 = OpFMul %339 %343 
                                                      OpStore %86 %344 
                                       f32_4 %345 = OpLoad %77 
                                       f32_3 %346 = OpVectorShuffle %345 %345 0 1 2 
                                       f32_4 %347 = OpLoad %77 
                                       f32_3 %348 = OpVectorShuffle %347 %347 0 1 2 
                                         f32 %349 = OpDot %346 %348 
                                Private f32* %350 = OpAccessChain %9 %30 
                                                      OpStore %350 %349 
                                Private f32* %351 = OpAccessChain %9 %30 
                                         f32 %352 = OpLoad %351 
                                         f32 %353 = OpExtInst %1 32 %352 
                                Private f32* %354 = OpAccessChain %9 %30 
                                                      OpStore %354 %353 
                                       f32_4 %355 = OpLoad %9 
                                       f32_3 %356 = OpVectorShuffle %355 %355 0 0 0 
                                       f32_4 %357 = OpLoad %77 
                                       f32_3 %358 = OpVectorShuffle %357 %357 0 1 2 
                                       f32_3 %359 = OpFMul %356 %358 
                                       f32_4 %360 = OpLoad %77 
                                       f32_4 %361 = OpVectorShuffle %360 %359 4 5 6 3 
                                                      OpStore %77 %361 
                                       f32_3 %363 = OpLoad %175 
                                       f32_3 %364 = OpFNegate %363 
                                         f32 %365 = OpLoad %184 
                                       f32_3 %366 = OpCompositeConstruct %365 %365 %365 
                                       f32_3 %367 = OpFMul %364 %366 
                                       f32_4 %368 = OpLoad %77 
                                       f32_3 %369 = OpVectorShuffle %368 %368 0 1 2 
                                       f32_3 %370 = OpFNegate %369 
                                       f32_3 %371 = OpFAdd %367 %370 
                                       f32_4 %372 = OpLoad %362 
                                       f32_4 %373 = OpVectorShuffle %372 %371 4 5 6 3 
                                                      OpStore %362 %373 
                                       f32_3 %374 = OpLoad %175 
                                         f32 %375 = OpLoad %184 
                                       f32_3 %376 = OpCompositeConstruct %375 %375 %375 
                                       f32_3 %377 = OpFMul %374 %376 
                                       f32_4 %378 = OpLoad %9 
                                       f32_4 %379 = OpVectorShuffle %378 %377 4 5 6 3 
                                                      OpStore %9 %379 
                                       f32_4 %380 = OpLoad %362 
                                       f32_3 %381 = OpVectorShuffle %380 %380 0 1 2 
                                       f32_4 %382 = OpLoad %362 
                                       f32_3 %383 = OpVectorShuffle %382 %382 0 1 2 
                                         f32 %384 = OpDot %381 %383 
                                                      OpStore %50 %384 
                                         f32 %385 = OpLoad %50 
                                         f32 %387 = OpExtInst %1 40 %385 %386 
                                                      OpStore %50 %387 
                                         f32 %388 = OpLoad %50 
                                         f32 %389 = OpExtInst %1 32 %388 
                                                      OpStore %50 %389 
                                         f32 %390 = OpLoad %50 
                                       f32_3 %391 = OpCompositeConstruct %390 %390 %390 
                                       f32_4 %392 = OpLoad %362 
                                       f32_3 %393 = OpVectorShuffle %392 %392 0 1 2 
                                       f32_3 %394 = OpFMul %391 %393 
                                       f32_4 %395 = OpLoad %362 
                                       f32_4 %396 = OpVectorShuffle %395 %394 4 5 6 3 
                                                      OpStore %362 %396 
                         read_only Texture2D %399 = OpLoad %398 
                                     sampler %401 = OpLoad %400 
                  read_only Texture2DSampled %402 = OpSampledImage %399 %401 
                                       f32_4 %403 = OpLoad %39 
                                       f32_2 %404 = OpVectorShuffle %403 %403 0 1 
                                       f32_4 %405 = OpImageSampleImplicitLod %402 %404 
                                       f32_3 %406 = OpVectorShuffle %405 %405 0 1 2 
                                                      OpStore %397 %406 
                                       f32_3 %407 = OpLoad %397 
                                       f32_3 %410 = OpFMul %407 %409 
                                       f32_3 %413 = OpFAdd %410 %412 
                                                      OpStore %397 %413 
                                       f32_3 %414 = OpLoad %397 
                                       f32_3 %415 = OpLoad %397 
                                         f32 %416 = OpDot %414 %415 
                                                      OpStore %50 %416 
                                         f32 %417 = OpLoad %50 
                                         f32 %418 = OpExtInst %1 32 %417 
                                                      OpStore %50 %418 
                                         f32 %419 = OpLoad %50 
                                       f32_3 %420 = OpCompositeConstruct %419 %419 %419 
                                       f32_3 %421 = OpLoad %397 
                                       f32_3 %422 = OpFMul %420 %421 
                                                      OpStore %397 %422 
                                       f32_3 %423 = OpLoad %397 
                                       f32_4 %424 = OpLoad %362 
                                       f32_3 %425 = OpVectorShuffle %424 %424 0 1 2 
                                         f32 %426 = OpDot %423 %425 
                                                      OpStore %50 %426 
                                         f32 %427 = OpLoad %50 
                                         f32 %428 = OpExtInst %1 43 %427 %172 %74 
                                                      OpStore %50 %428 
                                       f32_4 %429 = OpLoad %9 
                                       f32_3 %430 = OpVectorShuffle %429 %429 0 1 2 
                                       f32_3 %431 = OpFNegate %430 
                                       f32_4 %432 = OpLoad %362 
                                       f32_3 %433 = OpVectorShuffle %432 %432 0 1 2 
                                         f32 %434 = OpDot %431 %433 
                                                      OpStore %184 %434 
                                         f32 %435 = OpLoad %184 
                                         f32 %436 = OpExtInst %1 43 %435 %172 %74 
                                                      OpStore %184 %436 
                                       f32_3 %437 = OpLoad %397 
                                       f32_4 %438 = OpLoad %9 
                                       f32_3 %439 = OpVectorShuffle %438 %438 0 1 2 
                                       f32_3 %440 = OpFNegate %439 
                                         f32 %441 = OpDot %437 %440 
                                Private f32* %442 = OpAccessChain %9 %30 
                                                      OpStore %442 %441 
                                Private f32* %443 = OpAccessChain %9 %30 
                                         f32 %444 = OpLoad %443 
                                         f32 %445 = OpExtInst %1 43 %444 %172 %74 
                                Private f32* %446 = OpAccessChain %9 %30 
                                                      OpStore %446 %445 
                                       f32_3 %447 = OpLoad %397 
                                       f32_4 %448 = OpLoad %77 
                                       f32_3 %449 = OpVectorShuffle %448 %448 0 1 2 
                                       f32_3 %450 = OpFNegate %449 
                                         f32 %451 = OpDot %447 %450 
                                Private f32* %452 = OpAccessChain %175 %30 
                                                      OpStore %452 %451 
                         read_only Texture2D %454 = OpLoad %453 
                                     sampler %456 = OpLoad %455 
                  read_only Texture2DSampled %457 = OpSampledImage %454 %456 
                                       f32_4 %458 = OpLoad %39 
                                       f32_2 %459 = OpVectorShuffle %458 %458 0 1 
                                       f32_4 %460 = OpImageSampleImplicitLod %457 %459 
                                                      OpStore %77 %460 
                         read_only Texture2D %462 = OpLoad %461 
                                     sampler %464 = OpLoad %463 
                  read_only Texture2DSampled %465 = OpSampledImage %462 %464 
                                       f32_4 %466 = OpLoad %39 
                                       f32_2 %467 = OpVectorShuffle %466 %466 0 1 
                                       f32_4 %468 = OpImageSampleImplicitLod %465 %467 
                                       f32_3 %469 = OpVectorShuffle %468 %468 0 1 2 
                                       f32_4 %470 = OpLoad %39 
                                       f32_4 %471 = OpVectorShuffle %470 %469 4 5 2 6 
                                                      OpStore %39 %471 
                                       f32_4 %472 = OpLoad %77 
                                       f32_4 %473 = OpVectorShuffle %472 %472 3 0 1 2 
                                       f32_4 %474 = OpFNegate %473 
                                       f32_4 %476 = OpFAdd %474 %475 
                                                      OpStore %362 %476 
                                Private f32* %478 = OpAccessChain %362 %30 
                                         f32 %479 = OpLoad %478 
                                Private f32* %480 = OpAccessChain %362 %30 
                                         f32 %481 = OpLoad %480 
                                         f32 %482 = OpFMul %479 %481 
                                                      OpStore %477 %482 
                                         f32 %483 = OpLoad %477 
                                         f32 %485 = OpExtInst %1 40 %483 %484 
                                                      OpStore %477 %485 
                                         f32 %487 = OpLoad %477 
                                         f32 %488 = OpLoad %477 
                                         f32 %489 = OpFMul %487 %488 
                                                      OpStore %486 %489 
                                         f32 %491 = OpLoad %50 
                                         f32 %492 = OpLoad %486 
                                         f32 %493 = OpFMul %491 %492 
                                         f32 %494 = OpLoad %50 
                                         f32 %495 = OpFNegate %494 
                                         f32 %496 = OpFAdd %493 %495 
                                                      OpStore %490 %496 
                                         f32 %497 = OpLoad %490 
                                         f32 %498 = OpLoad %50 
                                         f32 %499 = OpFMul %497 %498 
                                         f32 %500 = OpFAdd %499 %74 
                                                      OpStore %50 %500 
                                         f32 %501 = OpLoad %50 
                                         f32 %502 = OpLoad %50 
                                         f32 %503 = OpFMul %501 %502 
                                         f32 %505 = OpFAdd %503 %504 
                                                      OpStore %50 %505 
                                         f32 %506 = OpLoad %486 
                                         f32 %508 = OpFMul %506 %507 
                                                      OpStore %486 %508 
                                         f32 %509 = OpLoad %486 
                                         f32 %510 = OpLoad %50 
                                         f32 %511 = OpFDiv %509 %510 
                                                      OpStore %50 %511 
                                         f32 %512 = OpLoad %477 
                                         f32 %513 = OpFNegate %512 
                                         f32 %514 = OpFAdd %513 %74 
                                                      OpStore %486 %514 
                                Private f32* %515 = OpAccessChain %175 %30 
                                         f32 %516 = OpLoad %515 
                                         f32 %517 = OpExtInst %1 4 %516 
                                         f32 %518 = OpLoad %486 
                                         f32 %519 = OpFMul %517 %518 
                                         f32 %520 = OpLoad %477 
                                         f32 %521 = OpFAdd %519 %520 
                                                      OpStore %490 %521 
                                Private f32* %522 = OpAccessChain %9 %30 
                                         f32 %523 = OpLoad %522 
                                         f32 %524 = OpLoad %486 
                                         f32 %525 = OpFMul %523 %524 
                                         f32 %526 = OpLoad %477 
                                         f32 %527 = OpFAdd %525 %526 
                                                      OpStore %477 %527 
                                         f32 %528 = OpLoad %477 
                                Private f32* %529 = OpAccessChain %175 %30 
                                         f32 %530 = OpLoad %529 
                                         f32 %531 = OpExtInst %1 4 %530 
                                         f32 %532 = OpFMul %528 %531 
                                                      OpStore %477 %532 
                                Private f32* %533 = OpAccessChain %175 %30 
                                         f32 %534 = OpLoad %533 
                                         f32 %535 = OpExtInst %1 4 %534 
                                         f32 %536 = OpFNegate %535 
                                         f32 %537 = OpFAdd %536 %74 
                                Private f32* %538 = OpAccessChain %175 %30 
                                                      OpStore %538 %537 
                                Private f32* %539 = OpAccessChain %9 %30 
                                         f32 %540 = OpLoad %539 
                                         f32 %541 = OpLoad %490 
                                         f32 %542 = OpFMul %540 %541 
                                         f32 %543 = OpLoad %477 
                                         f32 %544 = OpFAdd %542 %543 
                                                      OpStore %477 %544 
                                         f32 %545 = OpLoad %477 
                                         f32 %546 = OpFAdd %545 %204 
                                                      OpStore %477 %546 
                                         f32 %548 = OpLoad %477 
                                         f32 %549 = OpFDiv %547 %548 
                                                      OpStore %477 %549 
                                         f32 %550 = OpLoad %50 
                                         f32 %551 = OpLoad %477 
                                         f32 %552 = OpFMul %550 %551 
                                                      OpStore %477 %552 
                                Private f32* %553 = OpAccessChain %9 %30 
                                         f32 %554 = OpLoad %553 
                                         f32 %555 = OpLoad %477 
                                         f32 %556 = OpFMul %554 %555 
                                                      OpStore %477 %556 
                                         f32 %557 = OpLoad %477 
                                         f32 %559 = OpFMul %557 %558 
                                                      OpStore %477 %559 
                                         f32 %560 = OpLoad %477 
                                         f32 %561 = OpExtInst %1 40 %560 %172 
                                                      OpStore %477 %561 
                                       f32_4 %562 = OpLoad %77 
                                       f32_3 %563 = OpVectorShuffle %562 %562 0 1 2 
                                       f32_4 %564 = OpLoad %77 
                                       f32_3 %565 = OpVectorShuffle %564 %564 0 1 2 
                                         f32 %566 = OpDot %563 %565 
                                                      OpStore %50 %566 
                                         f32 %570 = OpLoad %50 
                                        bool %571 = OpFOrdNotEqual %570 %172 
                                                      OpStore %569 %571 
                                        bool %572 = OpLoad %569 
                                         f32 %573 = OpSelect %572 %74 %172 
                                                      OpStore %50 %573 
                                         f32 %574 = OpLoad %50 
                                         f32 %575 = OpLoad %477 
                                         f32 %576 = OpFMul %574 %575 
                                                      OpStore %477 %576 
                                       f32_3 %577 = OpLoad %86 
                                         f32 %578 = OpLoad %477 
                                       f32_3 %579 = OpCompositeConstruct %578 %578 %578 
                                       f32_3 %580 = OpFMul %577 %579 
                                                      OpStore %397 %580 
                                         f32 %581 = OpLoad %184 
                                         f32 %582 = OpFNegate %581 
                                         f32 %583 = OpFAdd %582 %74 
                                                      OpStore %477 %583 
                                         f32 %584 = OpLoad %184 
                                         f32 %585 = OpLoad %184 
                                         f32 %586 = OpFMul %584 %585 
                                                      OpStore %50 %586 
                                         f32 %587 = OpLoad %50 
                                       f32_2 %588 = OpCompositeConstruct %587 %587 
                                       f32_4 %589 = OpLoad %362 
                                       f32_2 %590 = OpVectorShuffle %589 %589 0 0 
                                         f32 %591 = OpDot %588 %590 
                                                      OpStore %50 %591 
                                         f32 %592 = OpLoad %50 
                                         f32 %594 = OpFAdd %592 %593 
                                                      OpStore %50 %594 
                                         f32 %595 = OpLoad %477 
                                         f32 %596 = OpLoad %477 
                                         f32 %597 = OpFMul %595 %596 
                                                      OpStore %184 %597 
                                         f32 %598 = OpLoad %184 
                                         f32 %599 = OpLoad %184 
                                         f32 %600 = OpFMul %598 %599 
                                                      OpStore %184 %600 
                                         f32 %601 = OpLoad %477 
                                         f32 %602 = OpLoad %184 
                                         f32 %603 = OpFMul %601 %602 
                                                      OpStore %477 %603 
                                       f32_4 %604 = OpLoad %362 
                                       f32_3 %605 = OpVectorShuffle %604 %604 1 2 3 
                                         f32 %606 = OpLoad %477 
                                       f32_3 %607 = OpCompositeConstruct %606 %606 %606 
                                       f32_3 %608 = OpFMul %605 %607 
                                       f32_4 %609 = OpLoad %77 
                                       f32_3 %610 = OpVectorShuffle %609 %609 0 1 2 
                                       f32_3 %611 = OpFAdd %608 %610 
                                       f32_4 %612 = OpLoad %77 
                                       f32_4 %613 = OpVectorShuffle %612 %611 4 5 6 3 
                                                      OpStore %77 %613 
                                       f32_4 %614 = OpLoad %77 
                                       f32_3 %615 = OpVectorShuffle %614 %614 0 1 2 
                                       f32_3 %616 = OpLoad %397 
                                       f32_3 %617 = OpFMul %615 %616 
                                       f32_4 %618 = OpLoad %77 
                                       f32_4 %619 = OpVectorShuffle %618 %617 4 5 6 3 
                                                      OpStore %77 %619 
                                Private f32* %620 = OpAccessChain %175 %30 
                                         f32 %621 = OpLoad %620 
                                Private f32* %622 = OpAccessChain %175 %30 
                                         f32 %623 = OpLoad %622 
                                         f32 %624 = OpFMul %621 %623 
                                                      OpStore %477 %624 
                                         f32 %625 = OpLoad %477 
                                         f32 %626 = OpLoad %477 
                                         f32 %627 = OpFMul %625 %626 
                                                      OpStore %477 %627 
                                Private f32* %628 = OpAccessChain %175 %30 
                                         f32 %629 = OpLoad %628 
                                         f32 %630 = OpLoad %477 
                                         f32 %631 = OpFMul %629 %630 
                                Private f32* %632 = OpAccessChain %175 %30 
                                                      OpStore %632 %631 
                                         f32 %633 = OpLoad %50 
                                Private f32* %634 = OpAccessChain %175 %30 
                                         f32 %635 = OpLoad %634 
                                         f32 %636 = OpFMul %633 %635 
                                         f32 %637 = OpFAdd %636 %74 
                                Private f32* %638 = OpAccessChain %175 %30 
                                                      OpStore %638 %637 
                                Private f32* %639 = OpAccessChain %9 %30 
                                         f32 %640 = OpLoad %639 
                                         f32 %641 = OpFNegate %640 
                                         f32 %642 = OpFAdd %641 %74 
                                                      OpStore %477 %642 
                                         f32 %643 = OpLoad %477 
                                         f32 %644 = OpLoad %477 
                                         f32 %645 = OpFMul %643 %644 
                                                      OpStore %184 %645 
                                         f32 %646 = OpLoad %184 
                                         f32 %647 = OpLoad %184 
                                         f32 %648 = OpFMul %646 %647 
                                                      OpStore %184 %648 
                                         f32 %649 = OpLoad %477 
                                         f32 %650 = OpLoad %184 
                                         f32 %651 = OpFMul %649 %650 
                                                      OpStore %477 %651 
                                         f32 %652 = OpLoad %50 
                                         f32 %653 = OpLoad %477 
                                         f32 %654 = OpFMul %652 %653 
                                         f32 %655 = OpFAdd %654 %74 
                                                      OpStore %477 %655 
                                Private f32* %656 = OpAccessChain %175 %30 
                                         f32 %657 = OpLoad %656 
                                         f32 %658 = OpLoad %477 
                                         f32 %659 = OpFMul %657 %658 
                                Private f32* %660 = OpAccessChain %175 %30 
                                                      OpStore %660 %659 
                                Private f32* %661 = OpAccessChain %9 %30 
                                         f32 %662 = OpLoad %661 
                                Private f32* %663 = OpAccessChain %175 %30 
                                         f32 %664 = OpLoad %663 
                                         f32 %665 = OpFMul %662 %664 
                                Private f32* %666 = OpAccessChain %9 %30 
                                                      OpStore %666 %665 
                                       f32_4 %667 = OpLoad %9 
                                       f32_3 %668 = OpVectorShuffle %667 %667 0 0 0 
                                       f32_3 %669 = OpLoad %86 
                                       f32_3 %670 = OpFMul %668 %669 
                                       f32_4 %671 = OpLoad %9 
                                       f32_4 %672 = OpVectorShuffle %671 %670 4 5 6 3 
                                                      OpStore %9 %672 
                                       f32_4 %673 = OpLoad %39 
                                       f32_3 %674 = OpVectorShuffle %673 %673 0 1 3 
                                       f32_4 %675 = OpLoad %9 
                                       f32_3 %676 = OpVectorShuffle %675 %675 0 1 2 
                                       f32_3 %677 = OpFMul %674 %676 
                                       f32_4 %678 = OpLoad %77 
                                       f32_3 %679 = OpVectorShuffle %678 %678 0 1 2 
                                       f32_3 %680 = OpFAdd %677 %679 
                                       f32_4 %681 = OpLoad %9 
                                       f32_4 %682 = OpVectorShuffle %681 %680 4 5 6 3 
                                                      OpStore %9 %682 
                                Private f32* %683 = OpAccessChain %9 %150 
                                                      OpStore %683 %74 
                                       f32_4 %686 = OpLoad %9 
                                       f32_4 %687 = OpFNegate %686 
                                       f32_4 %688 = OpExtInst %1 29 %687 
                                                      OpStore %685 %688 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _LightProjectionParams;
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
UNITY_LOCATION(0) uniform  sampler2D _CameraDepthTexture;
UNITY_LOCATION(1) uniform  sampler2D _LightTextureB0;
UNITY_LOCATION(2) uniform  samplerCube _LightTexture0;
UNITY_LOCATION(3) uniform  sampler2D _CameraGBufferTexture0;
UNITY_LOCATION(4) uniform  sampler2D _CameraGBufferTexture1;
UNITY_LOCATION(5) uniform  sampler2D _CameraGBufferTexture2;
UNITY_LOCATION(6) uniform  samplerCube _ShadowMapTexture;
UNITY_LOCATION(7) uniform  samplerCubeShadow hlslcc_zcmp_ShadowMapTexture;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec3 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
vec4 u_xlat6;
vec4 u_xlat7;
vec3 u_xlat8;
float u_xlat9;
vec3 u_xlat12;
float u_xlat16;
float u_xlat17;
bool u_xlatb17;
float u_xlat18;
float u_xlat24;
bool u_xlatb24;
float u_xlat25;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat2 = texture(_CameraDepthTexture, u_xlat1.xy);
    u_xlat24 = _ZBufferParams.x * u_xlat2.x + _ZBufferParams.y;
    u_xlat24 = float(1.0) / u_xlat24;
    u_xlat2.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat24 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat8.xyz = u_xlat2.xyw + (-_LightPos.xyz);
    u_xlat17 = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat25 = inversesqrt(u_xlat17);
    u_xlat3.xyz = u_xlat8.xyz * vec3(u_xlat25);
    u_xlat17 = u_xlat17 * _LightPos.w;
    u_xlat4 = texture(_LightTextureB0, vec2(u_xlat17));
    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlatb17 = u_xlat0.x<0.99000001;
    if(u_xlatb17){
        u_xlat17 = max(abs(u_xlat8.y), abs(u_xlat8.x));
        u_xlat17 = max(abs(u_xlat8.z), u_xlat17);
        u_xlat17 = u_xlat17 + (-_LightProjectionParams.z);
        u_xlat17 = max(u_xlat17, 9.99999975e-06);
        u_xlat17 = u_xlat17 * _LightProjectionParams.w;
        u_xlat17 = _LightProjectionParams.y / u_xlat17;
        u_xlat17 = u_xlat17 + (-_LightProjectionParams.x);
        u_xlat12.xyz = u_xlat8.xyz + vec3(0.0078125, 0.0078125, 0.0078125);
        vec4 txVec0 = vec4(u_xlat12.xyz,u_xlat17);
        u_xlat5.x = texture(hlslcc_zcmp_ShadowMapTexture, txVec0);
        u_xlat12.xyz = u_xlat8.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);
        vec4 txVec1 = vec4(u_xlat12.xyz,u_xlat17);
        u_xlat5.y = texture(hlslcc_zcmp_ShadowMapTexture, txVec1);
        u_xlat12.xyz = u_xlat8.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);
        vec4 txVec2 = vec4(u_xlat12.xyz,u_xlat17);
        u_xlat5.z = texture(hlslcc_zcmp_ShadowMapTexture, txVec2);
        u_xlat12.xyz = u_xlat8.xyz + vec3(0.0078125, -0.0078125, -0.0078125);
        vec4 txVec3 = vec4(u_xlat12.xyz,u_xlat17);
        u_xlat5.w = texture(hlslcc_zcmp_ShadowMapTexture, txVec3);
        u_xlat17 = dot(u_xlat5, vec4(0.25, 0.25, 0.25, 0.25));
        u_xlat18 = (-_LightShadowData.x) + 1.0;
        u_xlat17 = u_xlat17 * u_xlat18 + _LightShadowData.x;
    } else {
        u_xlat17 = 1.0;
    }
    u_xlat18 = (-u_xlat17) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat18 + u_xlat17;
    u_xlat0.x = u_xlat0.x * u_xlat4.x;
    u_xlat4.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat2.xxx + u_xlat4.xyz;
    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat2.www + u_xlat4.xyz;
    u_xlat4.xyz = u_xlat4.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlat4 = texture(_LightTexture0, u_xlat4.xyz, -8.0);
    u_xlat0.x = u_xlat0.x * u_xlat4.w;
    u_xlat4.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat5 = texture(_CameraGBufferTexture0, u_xlat1.xy);
    u_xlat6 = texture(_CameraGBufferTexture1, u_xlat1.xy);
    u_xlat7 = texture(_CameraGBufferTexture2, u_xlat1.xy);
    u_xlat1.xyz = u_xlat7.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat2.xyw + (-_WorldSpaceCameraPos.xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat7 = (-u_xlat6.wxyz) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0.xyz = (-u_xlat8.xyz) * vec3(u_xlat25) + (-u_xlat2.xyz);
    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat24 = max(u_xlat24, 0.00100000005);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat0.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    u_xlat24 = dot(u_xlat1.xyz, (-u_xlat2.xyz));
    u_xlat25 = dot(u_xlat1.xyz, (-u_xlat3.xyz));
    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat0.x = dot((-u_xlat3.xyz), u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat8.x = u_xlat0.x + u_xlat0.x;
    u_xlat8.x = u_xlat0.x * u_xlat8.x;
    u_xlat8.x = u_xlat8.x * u_xlat7.x + -0.5;
    u_xlat16 = (-u_xlat25) + 1.0;
    u_xlat9 = u_xlat16 * u_xlat16;
    u_xlat9 = u_xlat9 * u_xlat9;
    u_xlat16 = u_xlat16 * u_xlat9;
    u_xlat16 = u_xlat8.x * u_xlat16 + 1.0;
    u_xlat9 = -abs(u_xlat24) + 1.0;
    u_xlat17 = u_xlat9 * u_xlat9;
    u_xlat17 = u_xlat17 * u_xlat17;
    u_xlat9 = u_xlat9 * u_xlat17;
    u_xlat8.x = u_xlat8.x * u_xlat9 + 1.0;
    u_xlat8.x = u_xlat8.x * u_xlat16;
    u_xlat16 = u_xlat7.x * u_xlat7.x;
    u_xlat16 = max(u_xlat16, 0.00200000009);
    u_xlat9 = (-u_xlat16) + 1.0;
    u_xlat17 = abs(u_xlat24) * u_xlat9 + u_xlat16;
    u_xlat9 = u_xlat25 * u_xlat9 + u_xlat16;
    u_xlat24 = abs(u_xlat24) * u_xlat9;
    u_xlat24 = u_xlat25 * u_xlat17 + u_xlat24;
    u_xlat24 = u_xlat24 + 9.99999975e-06;
    u_xlat24 = 0.5 / u_xlat24;
    u_xlat16 = u_xlat16 * u_xlat16;
    u_xlat9 = u_xlat1.x * u_xlat16 + (-u_xlat1.x);
    u_xlat1.x = u_xlat9 * u_xlat1.x + 1.0;
    u_xlat16 = u_xlat16 * 0.318309873;
    u_xlat1.x = u_xlat1.x * u_xlat1.x + 1.00000001e-07;
    u_xlat16 = u_xlat16 / u_xlat1.x;
    u_xlat16 = u_xlat16 * u_xlat24;
    u_xlat8.y = u_xlat16 * 3.14159274;
    u_xlat8.xy = vec2(u_xlat25) * u_xlat8.xy;
    u_xlat16 = max(u_xlat8.y, 0.0);
    u_xlat24 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlatb24 = u_xlat24!=0.0;
    u_xlat24 = u_xlatb24 ? 1.0 : float(0.0);
    u_xlat16 = u_xlat24 * u_xlat16;
    u_xlat1.xyz = u_xlat8.xxx * u_xlat4.xyz;
    u_xlat8.xyz = u_xlat4.xyz * vec3(u_xlat16);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat25 = u_xlat0.x * u_xlat0.x;
    u_xlat25 = u_xlat25 * u_xlat25;
    u_xlat0.x = u_xlat0.x * u_xlat25;
    u_xlat2.xyz = u_xlat7.yzw * u_xlat0.xxx + u_xlat6.xyz;
    u_xlat0.xyz = u_xlat8.xyz * u_xlat2.xyz;
    u_xlat0.xyz = u_xlat5.xyz * u_xlat1.xyz + u_xlat0.xyz;
    u_xlat0.w = 1.0;
    SV_Target0 = exp2((-u_xlat0));
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 192
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %80 %102 %169 %175 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpMemberDecorate %78 0 BuiltIn 78 
                                                      OpMemberDecorate %78 1 BuiltIn 78 
                                                      OpMemberDecorate %78 2 BuiltIn 78 
                                                      OpDecorate %78 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 102 
                                                      OpDecorate %169 Location 169 
                                                      OpDecorate vs_TEXCOORD1 Location 175 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %16 %17 %18 %6 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 1 
                                              %24 = OpTypePointer Uniform %7 
                                          i32 %28 = OpConstant 0 
                                          i32 %36 = OpConstant 2 
                                          i32 %45 = OpConstant 3 
                               Private f32_4* %49 = OpVariable Private 
                                          u32 %76 = OpConstant 1 
                                              %77 = OpTypeArray %6 %76 
                                              %78 = OpTypeStruct %7 %6 %77 
                                              %79 = OpTypePointer Output %78 
         Output struct {f32_4; f32; f32[1];}* %80 = OpVariable Output 
                                              %82 = OpTypePointer Output %7 
                                              %84 = OpTypePointer Private %6 
                                          u32 %87 = OpConstant 0 
                                              %88 = OpTypePointer Uniform %6 
                               Private f32_4* %93 = OpVariable Private 
                                              %94 = OpTypeVector %6 3 
                                          f32 %97 = OpConstant 3.674022E-40 
                                        f32_3 %98 = OpConstantComposite %97 %97 %97 
                       Output f32_4* vs_TEXCOORD0 = OpVariable Output 
                                             %103 = OpTypeVector %6 2 
                                         f32 %158 = OpConstant 3.674022E-40 
                                         f32 %159 = OpConstant 3.674022E-40 
                                       f32_3 %160 = OpConstantComposite %158 %158 %159 
                                             %168 = OpTypePointer Input %94 
                                Input f32_3* %169 = OpVariable Input 
                                             %174 = OpTypePointer Output %94 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                                         i32 %176 = OpConstant 4 
                                             %186 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %25 = OpAccessChain %21 %23 %23 
                                        f32_4 %26 = OpLoad %25 
                                        f32_4 %27 = OpFMul %13 %26 
                                                      OpStore %9 %27 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %28 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %44 = OpLoad %9 
                               Uniform f32_4* %46 = OpAccessChain %21 %23 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_4 %48 = OpFAdd %44 %47 
                                                      OpStore %9 %48 
                                        f32_4 %50 = OpLoad %9 
                                        f32_4 %51 = OpVectorShuffle %50 %50 1 1 1 1 
                               Uniform f32_4* %52 = OpAccessChain %21 %45 %23 
                                        f32_4 %53 = OpLoad %52 
                                        f32_4 %54 = OpFMul %51 %53 
                                                      OpStore %49 %54 
                               Uniform f32_4* %55 = OpAccessChain %21 %45 %28 
                                        f32_4 %56 = OpLoad %55 
                                        f32_4 %57 = OpLoad %9 
                                        f32_4 %58 = OpVectorShuffle %57 %57 0 0 0 0 
                                        f32_4 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %49 
                                        f32_4 %61 = OpFAdd %59 %60 
                                                      OpStore %49 %61 
                               Uniform f32_4* %62 = OpAccessChain %21 %45 %36 
                                        f32_4 %63 = OpLoad %62 
                                        f32_4 %64 = OpLoad %9 
                                        f32_4 %65 = OpVectorShuffle %64 %64 2 2 2 2 
                                        f32_4 %66 = OpFMul %63 %65 
                                        f32_4 %67 = OpLoad %49 
                                        f32_4 %68 = OpFAdd %66 %67 
                                                      OpStore %49 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %45 %45 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %9 
                                        f32_4 %72 = OpVectorShuffle %71 %71 3 3 3 3 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %49 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %49 %75 
                                        f32_4 %81 = OpLoad %49 
                                Output f32_4* %83 = OpAccessChain %80 %28 
                                                      OpStore %83 %81 
                                 Private f32* %85 = OpAccessChain %49 %76 
                                          f32 %86 = OpLoad %85 
                                 Uniform f32* %89 = OpAccessChain %21 %28 %87 
                                          f32 %90 = OpLoad %89 
                                          f32 %91 = OpFMul %86 %90 
                                 Private f32* %92 = OpAccessChain %49 %76 
                                                      OpStore %92 %91 
                                        f32_4 %95 = OpLoad %49 
                                        f32_3 %96 = OpVectorShuffle %95 %95 0 3 1 
                                        f32_3 %99 = OpFMul %96 %98 
                                       f32_4 %100 = OpLoad %93 
                                       f32_4 %101 = OpVectorShuffle %100 %99 4 1 5 6 
                                                      OpStore %93 %101 
                                       f32_4 %104 = OpLoad %49 
                                       f32_2 %105 = OpVectorShuffle %104 %104 2 3 
                                       f32_4 %106 = OpLoad vs_TEXCOORD0 
                                       f32_4 %107 = OpVectorShuffle %106 %105 0 1 4 5 
                                                      OpStore vs_TEXCOORD0 %107 
                                       f32_4 %108 = OpLoad %93 
                                       f32_2 %109 = OpVectorShuffle %108 %108 2 2 
                                       f32_4 %110 = OpLoad %93 
                                       f32_2 %111 = OpVectorShuffle %110 %110 0 3 
                                       f32_2 %112 = OpFAdd %109 %111 
                                       f32_4 %113 = OpLoad vs_TEXCOORD0 
                                       f32_4 %114 = OpVectorShuffle %113 %112 4 5 2 3 
                                                      OpStore vs_TEXCOORD0 %114 
                                       f32_4 %115 = OpLoad %9 
                                       f32_3 %116 = OpVectorShuffle %115 %115 1 1 1 
                              Uniform f32_4* %117 = OpAccessChain %21 %36 %23 
                                       f32_4 %118 = OpLoad %117 
                                       f32_3 %119 = OpVectorShuffle %118 %118 0 1 2 
                                       f32_3 %120 = OpFMul %116 %119 
                                       f32_4 %121 = OpLoad %49 
                                       f32_4 %122 = OpVectorShuffle %121 %120 4 5 6 3 
                                                      OpStore %49 %122 
                              Uniform f32_4* %123 = OpAccessChain %21 %36 %28 
                                       f32_4 %124 = OpLoad %123 
                                       f32_3 %125 = OpVectorShuffle %124 %124 0 1 2 
                                       f32_4 %126 = OpLoad %9 
                                       f32_3 %127 = OpVectorShuffle %126 %126 0 0 0 
                                       f32_3 %128 = OpFMul %125 %127 
                                       f32_4 %129 = OpLoad %49 
                                       f32_3 %130 = OpVectorShuffle %129 %129 0 1 2 
                                       f32_3 %131 = OpFAdd %128 %130 
                                       f32_4 %132 = OpLoad %49 
                                       f32_4 %133 = OpVectorShuffle %132 %131 4 5 6 3 
                                                      OpStore %49 %133 
                              Uniform f32_4* %134 = OpAccessChain %21 %36 %36 
                                       f32_4 %135 = OpLoad %134 
                                       f32_3 %136 = OpVectorShuffle %135 %135 0 1 2 
                                       f32_4 %137 = OpLoad %9 
                                       f32_3 %138 = OpVectorShuffle %137 %137 2 2 2 
                                       f32_3 %139 = OpFMul %136 %138 
                                       f32_4 %140 = OpLoad %49 
                                       f32_3 %141 = OpVectorShuffle %140 %140 0 1 2 
                                       f32_3 %142 = OpFAdd %139 %141 
                                       f32_4 %143 = OpLoad %9 
                                       f32_4 %144 = OpVectorShuffle %143 %142 4 5 6 3 
                                                      OpStore %9 %144 
                              Uniform f32_4* %145 = OpAccessChain %21 %36 %45 
                                       f32_4 %146 = OpLoad %145 
                                       f32_3 %147 = OpVectorShuffle %146 %146 0 1 2 
                                       f32_4 %148 = OpLoad %9 
                                       f32_3 %149 = OpVectorShuffle %148 %148 3 3 3 
                                       f32_3 %150 = OpFMul %147 %149 
                                       f32_4 %151 = OpLoad %9 
                                       f32_3 %152 = OpVectorShuffle %151 %151 0 1 2 
                                       f32_3 %153 = OpFAdd %150 %152 
                                       f32_4 %154 = OpLoad %9 
                                       f32_4 %155 = OpVectorShuffle %154 %153 4 5 6 3 
                                                      OpStore %9 %155 
                                       f32_4 %156 = OpLoad %9 
                                       f32_3 %157 = OpVectorShuffle %156 %156 0 1 2 
                                       f32_3 %161 = OpFMul %157 %160 
                                       f32_4 %162 = OpLoad %49 
                                       f32_4 %163 = OpVectorShuffle %162 %161 4 5 6 3 
                                                      OpStore %49 %163 
                                       f32_4 %164 = OpLoad %9 
                                       f32_3 %165 = OpVectorShuffle %164 %164 0 1 2 
                                       f32_3 %166 = OpFNegate %165 
                                       f32_3 %167 = OpFMul %166 %160 
                                       f32_3 %170 = OpLoad %169 
                                       f32_3 %171 = OpFAdd %167 %170 
                                       f32_4 %172 = OpLoad %9 
                                       f32_4 %173 = OpVectorShuffle %172 %171 4 5 6 3 
                                                      OpStore %9 %173 
                                Uniform f32* %177 = OpAccessChain %21 %176 
                                         f32 %178 = OpLoad %177 
                                       f32_3 %179 = OpCompositeConstruct %178 %178 %178 
                                       f32_4 %180 = OpLoad %9 
                                       f32_3 %181 = OpVectorShuffle %180 %180 0 1 2 
                                       f32_3 %182 = OpFMul %179 %181 
                                       f32_4 %183 = OpLoad %49 
                                       f32_3 %184 = OpVectorShuffle %183 %183 0 1 2 
                                       f32_3 %185 = OpFAdd %182 %184 
                                                      OpStore vs_TEXCOORD1 %185 
                                 Output f32* %187 = OpAccessChain %80 %28 %76 
                                         f32 %188 = OpLoad %187 
                                         f32 %189 = OpFNegate %188 
                                 Output f32* %190 = OpAccessChain %80 %28 %76 
                                                      OpStore %190 %189 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 786
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %25 %42 %781 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpDecorate %13 ArrayStride 13 
                                                      OpDecorate %14 ArrayStride 14 
                                                      OpMemberDecorate %15 0 Offset 15 
                                                      OpMemberDecorate %15 1 Offset 15 
                                                      OpMemberDecorate %15 2 Offset 15 
                                                      OpMemberDecorate %15 3 Offset 15 
                                                      OpMemberDecorate %15 4 Offset 15 
                                                      OpMemberDecorate %15 5 Offset 15 
                                                      OpMemberDecorate %15 6 Offset 15 
                                                      OpMemberDecorate %15 7 Offset 15 
                                                      OpMemberDecorate %15 8 Offset 15 
                                                      OpMemberDecorate %15 9 Offset 15 
                                                      OpDecorate %15 Block 
                                                      OpDecorate %17 DescriptorSet 17 
                                                      OpDecorate %17 Binding 17 
                                                      OpDecorate vs_TEXCOORD1 Location 25 
                                                      OpDecorate vs_TEXCOORD0 Location 42 
                                                      OpDecorate %54 DescriptorSet 54 
                                                      OpDecorate %54 Binding 54 
                                                      OpDecorate %58 DescriptorSet 58 
                                                      OpDecorate %58 Binding 58 
                                                      OpDecorate %184 DescriptorSet 184 
                                                      OpDecorate %184 Binding 184 
                                                      OpDecorate %186 DescriptorSet 186 
                                                      OpDecorate %186 Binding 186 
                                                      OpDecorate %274 DescriptorSet 274 
                                                      OpDecorate %274 Binding 274 
                                                      OpDecorate %276 DescriptorSet 276 
                                                      OpDecorate %276 Binding 276 
                                                      OpDecorate %408 DescriptorSet 408 
                                                      OpDecorate %408 Binding 408 
                                                      OpDecorate %410 DescriptorSet 410 
                                                      OpDecorate %410 Binding 410 
                                                      OpDecorate %433 DescriptorSet 433 
                                                      OpDecorate %433 Binding 433 
                                                      OpDecorate %435 DescriptorSet 435 
                                                      OpDecorate %435 Binding 435 
                                                      OpDecorate %443 DescriptorSet 443 
                                                      OpDecorate %443 Binding 443 
                                                      OpDecorate %445 DescriptorSet 445 
                                                      OpDecorate %445 Binding 445 
                                                      OpDecorate %451 DescriptorSet 451 
                                                      OpDecorate %451 Binding 451 
                                                      OpDecorate %453 DescriptorSet 453 
                                                      OpDecorate %453 Binding 453 
                                                      OpDecorate %781 Location 781 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 3 
                                              %11 = OpTypeInt 32 0 
                                          u32 %12 = OpConstant 4 
                                              %13 = OpTypeArray %7 %12 
                                              %14 = OpTypeArray %7 %12 
                                              %15 = OpTypeStruct %10 %7 %7 %13 %7 %7 %7 %7 %7 %14 
                                              %16 = OpTypePointer Uniform %15 
Uniform struct {f32_3; f32_4; f32_4; f32_4[4]; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[4];}* %17 = OpVariable Uniform 
                                              %18 = OpTypeInt 32 1 
                                          i32 %19 = OpConstant 1 
                                          u32 %20 = OpConstant 2 
                                              %21 = OpTypePointer Uniform %6 
                                              %24 = OpTypePointer Input %10 
                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                                              %26 = OpTypePointer Input %6 
                                          u32 %30 = OpConstant 0 
                                              %31 = OpTypePointer Private %6 
                                              %39 = OpTypePointer Private %10 
                               Private f32_3* %40 = OpVariable Private 
                                              %41 = OpTypePointer Input %7 
                        Input f32_4* vs_TEXCOORD0 = OpVariable Input 
                                              %43 = OpTypeVector %6 2 
                                 Private f32* %51 = OpVariable Private 
                                              %52 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %53 = OpTypePointer UniformConstant %52 
         UniformConstant read_only Texture2D* %54 = OpVariable UniformConstant 
                                              %56 = OpTypeSampler 
                                              %57 = OpTypePointer UniformConstant %56 
                     UniformConstant sampler* %58 = OpVariable UniformConstant 
                                              %60 = OpTypeSampledImage %52 
                                          i32 %66 = OpConstant 2 
                                          u32 %71 = OpConstant 1 
                                          f32 %75 = OpConstant 3.674022E-40 
                               Private f32_4* %78 = OpVariable Private 
                               Private f32_3* %86 = OpVariable Private 
                                          i32 %89 = OpConstant 3 
                                              %90 = OpTypePointer Uniform %7 
                                          i32 %95 = OpConstant 0 
                                         i32 %127 = OpConstant 6 
                                         u32 %150 = OpConstant 3 
                              Private f32_3* %160 = OpVariable Private 
                                         i32 %163 = OpConstant 7 
                                Private f32* %169 = OpVariable Private 
                                Private f32* %173 = OpVariable Private 
        UniformConstant read_only Texture2D* %184 = OpVariable UniformConstant 
                    UniformConstant sampler* %186 = OpVariable UniformConstant 
                                         i32 %195 = OpConstant 5 
                                         f32 %205 = OpConstant 3.674022E-40 
                                             %208 = OpTypeBool 
                                             %209 = OpTypePointer Private %208 
                               Private bool* %210 = OpVariable Private 
                                         f32 %213 = OpConstant 3.674022E-40 
                                Private f32* %218 = OpVariable Private 
                                         i32 %232 = OpConstant 4 
                                         f32 %238 = OpConstant 3.674022E-40 
                              Private f32_4* %256 = OpVariable Private 
                                         f32 %258 = OpConstant 3.674022E-40 
                                       f32_3 %259 = OpConstantComposite %258 %258 %258 
                                             %263 = OpTypePointer Function %7 
                                             %272 = OpTypeImage %6 Cube 0 0 0 1 Unknown 
                                             %273 = OpTypePointer UniformConstant %272 
      UniformConstant read_only TextureCube* %274 = OpVariable UniformConstant 
                    UniformConstant sampler* %276 = OpVariable UniformConstant 
                                             %278 = OpTypeImage %6 Cube 1 0 0 1 Unknown 
                                             %279 = OpTypeSampledImage %278 
                              Private f32_3* %285 = OpVariable Private 
                                         f32 %287 = OpConstant 3.674022E-40 
                                       f32_3 %288 = OpConstantComposite %287 %287 %258 
                                       f32_3 %305 = OpConstantComposite %287 %258 %287 
                                       f32_3 %322 = OpConstantComposite %258 %287 %287 
                                         f32 %339 = OpConstant 3.674022E-40 
                                       f32_4 %340 = OpConstantComposite %339 %339 %339 %339 
                                Private f32* %342 = OpVariable Private 
                                         i32 %371 = OpConstant 9 
      UniformConstant read_only TextureCube* %408 = OpVariable UniformConstant 
                    UniformConstant sampler* %410 = OpVariable UniformConstant 
                                             %412 = OpTypeSampledImage %272 
                                         f32 %416 = OpConstant 3.674022E-40 
                                         i32 %426 = OpConstant 8 
        UniformConstant read_only Texture2D* %433 = OpVariable UniformConstant 
                    UniformConstant sampler* %435 = OpVariable UniformConstant 
                              Private f32_4* %442 = OpVariable Private 
        UniformConstant read_only Texture2D* %443 = OpVariable UniformConstant 
                    UniformConstant sampler* %445 = OpVariable UniformConstant 
        UniformConstant read_only Texture2D* %451 = OpVariable UniformConstant 
                    UniformConstant sampler* %453 = OpVariable UniformConstant 
                                         f32 %461 = OpConstant 3.674022E-40 
                                       f32_3 %462 = OpConstantComposite %461 %461 %461 
                                         f32 %464 = OpConstant 3.674022E-40 
                                       f32_3 %465 = OpConstantComposite %464 %464 %464 
                                             %481 = OpTypePointer Uniform %10 
                              Private f32_4* %505 = OpVariable Private 
                                       f32_4 %509 = OpConstantComposite %75 %75 %75 %75 
                                         f32 %528 = OpConstant 3.674022E-40 
                                         f32 %583 = OpConstant 3.674022E-40 
                                Private f32* %586 = OpVariable Private 
                                Private f32* %590 = OpVariable Private 
                                         f32 %635 = OpConstant 3.674022E-40 
                                         f32 %662 = OpConstant 3.674022E-40 
                                         f32 %683 = OpConstant 3.674022E-40 
                                         f32 %690 = OpConstant 3.674022E-40 
                                         f32 %710 = OpConstant 3.674022E-40 
                               Private bool* %719 = OpVariable Private 
                                             %780 = OpTypePointer Output %7 
                               Output f32_4* %781 = OpVariable Output 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_4* %264 = OpVariable Function 
                             Function f32_4* %290 = OpVariable Function 
                             Function f32_4* %307 = OpVariable Function 
                             Function f32_4* %324 = OpVariable Function 
                                 Uniform f32* %22 = OpAccessChain %17 %19 %20 
                                          f32 %23 = OpLoad %22 
                                   Input f32* %27 = OpAccessChain vs_TEXCOORD1 %20 
                                          f32 %28 = OpLoad %27 
                                          f32 %29 = OpFDiv %23 %28 
                                 Private f32* %32 = OpAccessChain %9 %30 
                                                      OpStore %32 %29 
                                        f32_4 %33 = OpLoad %9 
                                        f32_3 %34 = OpVectorShuffle %33 %33 0 0 0 
                                        f32_3 %35 = OpLoad vs_TEXCOORD1 
                                        f32_3 %36 = OpFMul %34 %35 
                                        f32_4 %37 = OpLoad %9 
                                        f32_4 %38 = OpVectorShuffle %37 %36 4 5 6 3 
                                                      OpStore %9 %38 
                                        f32_4 %44 = OpLoad vs_TEXCOORD0 
                                        f32_2 %45 = OpVectorShuffle %44 %44 0 1 
                                        f32_4 %46 = OpLoad vs_TEXCOORD0 
                                        f32_2 %47 = OpVectorShuffle %46 %46 3 3 
                                        f32_2 %48 = OpFDiv %45 %47 
                                        f32_3 %49 = OpLoad %40 
                                        f32_3 %50 = OpVectorShuffle %49 %48 3 4 2 
                                                      OpStore %40 %50 
                          read_only Texture2D %55 = OpLoad %54 
                                      sampler %59 = OpLoad %58 
                   read_only Texture2DSampled %61 = OpSampledImage %55 %59 
                                        f32_3 %62 = OpLoad %40 
                                        f32_2 %63 = OpVectorShuffle %62 %62 0 1 
                                        f32_4 %64 = OpImageSampleImplicitLod %61 %63 
                                          f32 %65 = OpCompositeExtract %64 0 
                                                      OpStore %51 %65 
                                 Uniform f32* %67 = OpAccessChain %17 %66 %30 
                                          f32 %68 = OpLoad %67 
                                          f32 %69 = OpLoad %51 
                                          f32 %70 = OpFMul %68 %69 
                                 Uniform f32* %72 = OpAccessChain %17 %66 %71 
                                          f32 %73 = OpLoad %72 
                                          f32 %74 = OpFAdd %70 %73 
                                                      OpStore %51 %74 
                                          f32 %76 = OpLoad %51 
                                          f32 %77 = OpFDiv %75 %76 
                                                      OpStore %51 %77 
                                          f32 %79 = OpLoad %51 
                                        f32_3 %80 = OpCompositeConstruct %79 %79 %79 
                                        f32_4 %81 = OpLoad %9 
                                        f32_3 %82 = OpVectorShuffle %81 %81 0 1 2 
                                        f32_3 %83 = OpFMul %80 %82 
                                        f32_4 %84 = OpLoad %78 
                                        f32_4 %85 = OpVectorShuffle %84 %83 4 5 6 3 
                                                      OpStore %78 %85 
                                        f32_4 %87 = OpLoad %78 
                                        f32_3 %88 = OpVectorShuffle %87 %87 1 1 1 
                               Uniform f32_4* %91 = OpAccessChain %17 %89 %19 
                                        f32_4 %92 = OpLoad %91 
                                        f32_3 %93 = OpVectorShuffle %92 %92 0 1 2 
                                        f32_3 %94 = OpFMul %88 %93 
                                                      OpStore %86 %94 
                               Uniform f32_4* %96 = OpAccessChain %17 %89 %95 
                                        f32_4 %97 = OpLoad %96 
                                        f32_3 %98 = OpVectorShuffle %97 %97 0 1 2 
                                        f32_4 %99 = OpLoad %78 
                                       f32_3 %100 = OpVectorShuffle %99 %99 0 0 0 
                                       f32_3 %101 = OpFMul %98 %100 
                                       f32_3 %102 = OpLoad %86 
                                       f32_3 %103 = OpFAdd %101 %102 
                                       f32_4 %104 = OpLoad %78 
                                       f32_4 %105 = OpVectorShuffle %104 %103 4 5 2 6 
                                                      OpStore %78 %105 
                              Uniform f32_4* %106 = OpAccessChain %17 %89 %66 
                                       f32_4 %107 = OpLoad %106 
                                       f32_3 %108 = OpVectorShuffle %107 %107 0 1 2 
                                       f32_4 %109 = OpLoad %78 
                                       f32_3 %110 = OpVectorShuffle %109 %109 2 2 2 
                                       f32_3 %111 = OpFMul %108 %110 
                                       f32_4 %112 = OpLoad %78 
                                       f32_3 %113 = OpVectorShuffle %112 %112 0 1 3 
                                       f32_3 %114 = OpFAdd %111 %113 
                                       f32_4 %115 = OpLoad %78 
                                       f32_4 %116 = OpVectorShuffle %115 %114 4 5 2 6 
                                                      OpStore %78 %116 
                                       f32_4 %117 = OpLoad %78 
                                       f32_3 %118 = OpVectorShuffle %117 %117 0 1 3 
                              Uniform f32_4* %119 = OpAccessChain %17 %89 %89 
                                       f32_4 %120 = OpLoad %119 
                                       f32_3 %121 = OpVectorShuffle %120 %120 0 1 2 
                                       f32_3 %122 = OpFAdd %118 %121 
                                       f32_4 %123 = OpLoad %78 
                                       f32_4 %124 = OpVectorShuffle %123 %122 4 5 2 6 
                                                      OpStore %78 %124 
                                       f32_4 %125 = OpLoad %78 
                                       f32_3 %126 = OpVectorShuffle %125 %125 0 1 3 
                              Uniform f32_4* %128 = OpAccessChain %17 %127 
                                       f32_4 %129 = OpLoad %128 
                                       f32_3 %130 = OpVectorShuffle %129 %129 0 1 2 
                                       f32_3 %131 = OpFNegate %130 
                                       f32_3 %132 = OpFAdd %126 %131 
                                                      OpStore %86 %132 
                                       f32_3 %133 = OpLoad %86 
                                       f32_3 %134 = OpLoad %86 
                                         f32 %135 = OpDot %133 %134 
                                Private f32* %136 = OpAccessChain %9 %30 
                                                      OpStore %136 %135 
                                Private f32* %137 = OpAccessChain %9 %30 
                                         f32 %138 = OpLoad %137 
                                         f32 %139 = OpExtInst %1 31 %138 
                                Private f32* %140 = OpAccessChain %9 %30 
                                                      OpStore %140 %139 
                                Private f32* %141 = OpAccessChain %9 %20 
                                         f32 %142 = OpLoad %141 
                                         f32 %143 = OpFNegate %142 
                                         f32 %144 = OpLoad %51 
                                         f32 %145 = OpFMul %143 %144 
                                Private f32* %146 = OpAccessChain %9 %30 
                                         f32 %147 = OpLoad %146 
                                         f32 %148 = OpFAdd %145 %147 
                                Private f32* %149 = OpAccessChain %9 %30 
                                                      OpStore %149 %148 
                                Uniform f32* %151 = OpAccessChain %17 %127 %150 
                                         f32 %152 = OpLoad %151 
                                Private f32* %153 = OpAccessChain %9 %30 
                                         f32 %154 = OpLoad %153 
                                         f32 %155 = OpFMul %152 %154 
                                Private f32* %156 = OpAccessChain %78 %20 
                                         f32 %157 = OpLoad %156 
                                         f32 %158 = OpFAdd %155 %157 
                                Private f32* %159 = OpAccessChain %9 %30 
                                                      OpStore %159 %158 
                                       f32_4 %161 = OpLoad %78 
                                       f32_3 %162 = OpVectorShuffle %161 %161 0 1 3 
                              Uniform f32_4* %164 = OpAccessChain %17 %163 
                                       f32_4 %165 = OpLoad %164 
                                       f32_3 %166 = OpVectorShuffle %165 %165 0 1 2 
                                       f32_3 %167 = OpFNegate %166 
                                       f32_3 %168 = OpFAdd %162 %167 
                                                      OpStore %160 %168 
                                       f32_3 %170 = OpLoad %160 
                                       f32_3 %171 = OpLoad %160 
                                         f32 %172 = OpDot %170 %171 
                                                      OpStore %169 %172 
                                         f32 %174 = OpLoad %169 
                                         f32 %175 = OpExtInst %1 32 %174 
                                                      OpStore %173 %175 
                                       f32_3 %176 = OpLoad %160 
                                         f32 %177 = OpLoad %173 
                                       f32_3 %178 = OpCompositeConstruct %177 %177 %177 
                                       f32_3 %179 = OpFMul %176 %178 
                                                      OpStore %86 %179 
                                         f32 %180 = OpLoad %169 
                                Uniform f32* %181 = OpAccessChain %17 %163 %150 
                                         f32 %182 = OpLoad %181 
                                         f32 %183 = OpFMul %180 %182 
                                                      OpStore %169 %183 
                         read_only Texture2D %185 = OpLoad %184 
                                     sampler %187 = OpLoad %186 
                  read_only Texture2DSampled %188 = OpSampledImage %185 %187 
                                         f32 %189 = OpLoad %169 
                                       f32_2 %190 = OpCompositeConstruct %189 %189 
                                       f32_4 %191 = OpImageSampleImplicitLod %188 %190 
                                         f32 %192 = OpCompositeExtract %191 0 
                                                      OpStore %169 %192 
                                Private f32* %193 = OpAccessChain %9 %30 
                                         f32 %194 = OpLoad %193 
                                Uniform f32* %196 = OpAccessChain %17 %195 %20 
                                         f32 %197 = OpLoad %196 
                                         f32 %198 = OpFMul %194 %197 
                                Uniform f32* %199 = OpAccessChain %17 %195 %150 
                                         f32 %200 = OpLoad %199 
                                         f32 %201 = OpFAdd %198 %200 
                                Private f32* %202 = OpAccessChain %9 %30 
                                                      OpStore %202 %201 
                                Private f32* %203 = OpAccessChain %9 %30 
                                         f32 %204 = OpLoad %203 
                                         f32 %206 = OpExtInst %1 43 %204 %205 %75 
                                Private f32* %207 = OpAccessChain %9 %30 
                                                      OpStore %207 %206 
                                Private f32* %211 = OpAccessChain %9 %30 
                                         f32 %212 = OpLoad %211 
                                        bool %214 = OpFOrdLessThan %212 %213 
                                                      OpStore %210 %214 
                                        bool %215 = OpLoad %210 
                                                      OpSelectionMerge %217 None 
                                                      OpBranchConditional %215 %216 %353 
                                             %216 = OpLabel 
                                Private f32* %219 = OpAccessChain %160 %71 
                                         f32 %220 = OpLoad %219 
                                         f32 %221 = OpExtInst %1 4 %220 
                                Private f32* %222 = OpAccessChain %160 %30 
                                         f32 %223 = OpLoad %222 
                                         f32 %224 = OpExtInst %1 4 %223 
                                         f32 %225 = OpExtInst %1 40 %221 %224 
                                                      OpStore %218 %225 
                                Private f32* %226 = OpAccessChain %160 %20 
                                         f32 %227 = OpLoad %226 
                                         f32 %228 = OpExtInst %1 4 %227 
                                         f32 %229 = OpLoad %218 
                                         f32 %230 = OpExtInst %1 40 %228 %229 
                                                      OpStore %218 %230 
                                         f32 %231 = OpLoad %218 
                                Uniform f32* %233 = OpAccessChain %17 %232 %20 
                                         f32 %234 = OpLoad %233 
                                         f32 %235 = OpFNegate %234 
                                         f32 %236 = OpFAdd %231 %235 
                                                      OpStore %218 %236 
                                         f32 %237 = OpLoad %218 
                                         f32 %239 = OpExtInst %1 40 %237 %238 
                                                      OpStore %218 %239 
                                         f32 %240 = OpLoad %218 
                                Uniform f32* %241 = OpAccessChain %17 %232 %150 
                                         f32 %242 = OpLoad %241 
                                         f32 %243 = OpFMul %240 %242 
                                                      OpStore %218 %243 
                                Uniform f32* %244 = OpAccessChain %17 %232 %71 
                                         f32 %245 = OpLoad %244 
                                         f32 %246 = OpLoad %218 
                                         f32 %247 = OpFDiv %245 %246 
                                                      OpStore %218 %247 
                                         f32 %248 = OpLoad %218 
                                Uniform f32* %249 = OpAccessChain %17 %232 %30 
                                         f32 %250 = OpLoad %249 
                                         f32 %251 = OpFNegate %250 
                                         f32 %252 = OpFAdd %248 %251 
                                                      OpStore %218 %252 
                                         f32 %253 = OpLoad %218 
                                         f32 %254 = OpFNegate %253 
                                         f32 %255 = OpFAdd %254 %75 
                                                      OpStore %218 %255 
                                       f32_3 %257 = OpLoad %160 
                                       f32_3 %260 = OpFAdd %257 %259 
                                       f32_4 %261 = OpLoad %256 
                                       f32_4 %262 = OpVectorShuffle %261 %260 4 5 6 3 
                                                      OpStore %256 %262 
                                       f32_4 %265 = OpLoad %256 
                                       f32_3 %266 = OpVectorShuffle %265 %265 0 1 2 
                                         f32 %267 = OpLoad %218 
                                         f32 %268 = OpCompositeExtract %266 0 
                                         f32 %269 = OpCompositeExtract %266 1 
                                         f32 %270 = OpCompositeExtract %266 2 
                                       f32_4 %271 = OpCompositeConstruct %268 %269 %270 %267 
                                                      OpStore %264 %271 
                       read_only TextureCube %275 = OpLoad %274 
                                     sampler %277 = OpLoad %276 
                read_only TextureCubeSampled %280 = OpSampledImage %275 %277 
                                       f32_4 %281 = OpLoad %264 
                                         f32 %282 = OpCompositeExtract %281 3 
                                         f32 %283 = OpImageSampleDrefImplicitLod %280 %281 %282 
                                Private f32* %284 = OpAccessChain %256 %30 
                                                      OpStore %284 %283 
                                       f32_3 %286 = OpLoad %160 
                                       f32_3 %289 = OpFAdd %286 %288 
                                                      OpStore %285 %289 
                                       f32_3 %291 = OpLoad %285 
                                         f32 %292 = OpLoad %218 
                                         f32 %293 = OpCompositeExtract %291 0 
                                         f32 %294 = OpCompositeExtract %291 1 
                                         f32 %295 = OpCompositeExtract %291 2 
                                       f32_4 %296 = OpCompositeConstruct %293 %294 %295 %292 
                                                      OpStore %290 %296 
                       read_only TextureCube %297 = OpLoad %274 
                                     sampler %298 = OpLoad %276 
                read_only TextureCubeSampled %299 = OpSampledImage %297 %298 
                                       f32_4 %300 = OpLoad %290 
                                         f32 %301 = OpCompositeExtract %300 3 
                                         f32 %302 = OpImageSampleDrefImplicitLod %299 %300 %301 
                                Private f32* %303 = OpAccessChain %256 %71 
                                                      OpStore %303 %302 
                                       f32_3 %304 = OpLoad %160 
                                       f32_3 %306 = OpFAdd %304 %305 
                                                      OpStore %285 %306 
                                       f32_3 %308 = OpLoad %285 
                                         f32 %309 = OpLoad %218 
                                         f32 %310 = OpCompositeExtract %308 0 
                                         f32 %311 = OpCompositeExtract %308 1 
                                         f32 %312 = OpCompositeExtract %308 2 
                                       f32_4 %313 = OpCompositeConstruct %310 %311 %312 %309 
                                                      OpStore %307 %313 
                       read_only TextureCube %314 = OpLoad %274 
                                     sampler %315 = OpLoad %276 
                read_only TextureCubeSampled %316 = OpSampledImage %314 %315 
                                       f32_4 %317 = OpLoad %307 
                                         f32 %318 = OpCompositeExtract %317 3 
                                         f32 %319 = OpImageSampleDrefImplicitLod %316 %317 %318 
                                Private f32* %320 = OpAccessChain %256 %20 
                                                      OpStore %320 %319 
                                       f32_3 %321 = OpLoad %160 
                                       f32_3 %323 = OpFAdd %321 %322 
                                                      OpStore %285 %323 
                                       f32_3 %325 = OpLoad %285 
                                         f32 %326 = OpLoad %218 
                                         f32 %327 = OpCompositeExtract %325 0 
                                         f32 %328 = OpCompositeExtract %325 1 
                                         f32 %329 = OpCompositeExtract %325 2 
                                       f32_4 %330 = OpCompositeConstruct %327 %328 %329 %326 
                                                      OpStore %324 %330 
                       read_only TextureCube %331 = OpLoad %274 
                                     sampler %332 = OpLoad %276 
                read_only TextureCubeSampled %333 = OpSampledImage %331 %332 
                                       f32_4 %334 = OpLoad %324 
                                         f32 %335 = OpCompositeExtract %334 3 
                                         f32 %336 = OpImageSampleDrefImplicitLod %333 %334 %335 
                                Private f32* %337 = OpAccessChain %256 %150 
                                                      OpStore %337 %336 
                                       f32_4 %338 = OpLoad %256 
                                         f32 %341 = OpDot %338 %340 
                                                      OpStore %218 %341 
                                Uniform f32* %343 = OpAccessChain %17 %195 %30 
                                         f32 %344 = OpLoad %343 
                                         f32 %345 = OpFNegate %344 
                                         f32 %346 = OpFAdd %345 %75 
                                                      OpStore %342 %346 
                                         f32 %347 = OpLoad %218 
                                         f32 %348 = OpLoad %342 
                                         f32 %349 = OpFMul %347 %348 
                                Uniform f32* %350 = OpAccessChain %17 %195 %30 
                                         f32 %351 = OpLoad %350 
                                         f32 %352 = OpFAdd %349 %351 
                                                      OpStore %218 %352 
                                                      OpBranch %217 
                                             %353 = OpLabel 
                                                      OpStore %218 %75 
                                                      OpBranch %217 
                                             %217 = OpLabel 
                                         f32 %354 = OpLoad %218 
                                         f32 %355 = OpFNegate %354 
                                         f32 %356 = OpFAdd %355 %75 
                                                      OpStore %342 %356 
                                Private f32* %357 = OpAccessChain %9 %30 
                                         f32 %358 = OpLoad %357 
                                         f32 %359 = OpLoad %342 
                                         f32 %360 = OpFMul %358 %359 
                                         f32 %361 = OpLoad %218 
                                         f32 %362 = OpFAdd %360 %361 
                                Private f32* %363 = OpAccessChain %9 %30 
                                                      OpStore %363 %362 
                                Private f32* %364 = OpAccessChain %9 %30 
                                         f32 %365 = OpLoad %364 
                                         f32 %366 = OpLoad %169 
                                         f32 %367 = OpFMul %365 %366 
                                Private f32* %368 = OpAccessChain %9 %30 
                                                      OpStore %368 %367 
                                       f32_4 %369 = OpLoad %78 
                                       f32_3 %370 = OpVectorShuffle %369 %369 1 1 1 
                              Uniform f32_4* %372 = OpAccessChain %17 %371 %19 
                                       f32_4 %373 = OpLoad %372 
                                       f32_3 %374 = OpVectorShuffle %373 %373 0 1 2 
                                       f32_3 %375 = OpFMul %370 %374 
                                       f32_4 %376 = OpLoad %256 
                                       f32_4 %377 = OpVectorShuffle %376 %375 4 5 6 3 
                                                      OpStore %256 %377 
                              Uniform f32_4* %378 = OpAccessChain %17 %371 %95 
                                       f32_4 %379 = OpLoad %378 
                                       f32_3 %380 = OpVectorShuffle %379 %379 0 1 2 
                                       f32_4 %381 = OpLoad %78 
                                       f32_3 %382 = OpVectorShuffle %381 %381 0 0 0 
                                       f32_3 %383 = OpFMul %380 %382 
                                       f32_4 %384 = OpLoad %256 
                                       f32_3 %385 = OpVectorShuffle %384 %384 0 1 2 
                                       f32_3 %386 = OpFAdd %383 %385 
                                       f32_4 %387 = OpLoad %256 
                                       f32_4 %388 = OpVectorShuffle %387 %386 4 5 6 3 
                                                      OpStore %256 %388 
                              Uniform f32_4* %389 = OpAccessChain %17 %371 %66 
                                       f32_4 %390 = OpLoad %389 
                                       f32_3 %391 = OpVectorShuffle %390 %390 0 1 2 
                                       f32_4 %392 = OpLoad %78 
                                       f32_3 %393 = OpVectorShuffle %392 %392 3 3 3 
                                       f32_3 %394 = OpFMul %391 %393 
                                       f32_4 %395 = OpLoad %256 
                                       f32_3 %396 = OpVectorShuffle %395 %395 0 1 2 
                                       f32_3 %397 = OpFAdd %394 %396 
                                       f32_4 %398 = OpLoad %256 
                                       f32_4 %399 = OpVectorShuffle %398 %397 4 5 6 3 
                                                      OpStore %256 %399 
                                       f32_4 %400 = OpLoad %256 
                                       f32_3 %401 = OpVectorShuffle %400 %400 0 1 2 
                              Uniform f32_4* %402 = OpAccessChain %17 %371 %89 
                                       f32_4 %403 = OpLoad %402 
                                       f32_3 %404 = OpVectorShuffle %403 %403 0 1 2 
                                       f32_3 %405 = OpFAdd %401 %404 
                                       f32_4 %406 = OpLoad %256 
                                       f32_4 %407 = OpVectorShuffle %406 %405 4 5 6 3 
                                                      OpStore %256 %407 
                       read_only TextureCube %409 = OpLoad %408 
                                     sampler %411 = OpLoad %410 
                read_only TextureCubeSampled %413 = OpSampledImage %409 %411 
                                       f32_4 %414 = OpLoad %256 
                                       f32_3 %415 = OpVectorShuffle %414 %414 0 1 2 
                                       f32_4 %417 = OpImageSampleImplicitLod %413 %415 Bias %7 
                                         f32 %418 = OpCompositeExtract %417 3 
                                                      OpStore %169 %418 
                                Private f32* %419 = OpAccessChain %9 %30 
                                         f32 %420 = OpLoad %419 
                                         f32 %421 = OpLoad %169 
                                         f32 %422 = OpFMul %420 %421 
                                Private f32* %423 = OpAccessChain %9 %30 
                                                      OpStore %423 %422 
                                       f32_4 %424 = OpLoad %9 
                                       f32_3 %425 = OpVectorShuffle %424 %424 0 0 0 
                              Uniform f32_4* %427 = OpAccessChain %17 %426 
                                       f32_4 %428 = OpLoad %427 
                                       f32_3 %429 = OpVectorShuffle %428 %428 0 1 2 
                                       f32_3 %430 = OpFMul %425 %429 
                                       f32_4 %431 = OpLoad %256 
                                       f32_4 %432 = OpVectorShuffle %431 %430 4 5 6 3 
                                                      OpStore %256 %432 
                         read_only Texture2D %434 = OpLoad %433 
                                     sampler %436 = OpLoad %435 
                  read_only Texture2DSampled %437 = OpSampledImage %434 %436 
                                       f32_3 %438 = OpLoad %40 
                                       f32_2 %439 = OpVectorShuffle %438 %438 0 1 
                                       f32_4 %440 = OpImageSampleImplicitLod %437 %439 
                                       f32_3 %441 = OpVectorShuffle %440 %440 0 1 2 
                                                      OpStore %285 %441 
                         read_only Texture2D %444 = OpLoad %443 
                                     sampler %446 = OpLoad %445 
                  read_only Texture2DSampled %447 = OpSampledImage %444 %446 
                                       f32_3 %448 = OpLoad %40 
                                       f32_2 %449 = OpVectorShuffle %448 %448 0 1 
                                       f32_4 %450 = OpImageSampleImplicitLod %447 %449 
                                                      OpStore %442 %450 
                         read_only Texture2D %452 = OpLoad %451 
                                     sampler %454 = OpLoad %453 
                  read_only Texture2DSampled %455 = OpSampledImage %452 %454 
                                       f32_3 %456 = OpLoad %40 
                                       f32_2 %457 = OpVectorShuffle %456 %456 0 1 
                                       f32_4 %458 = OpImageSampleImplicitLod %455 %457 
                                       f32_3 %459 = OpVectorShuffle %458 %458 0 1 2 
                                                      OpStore %40 %459 
                                       f32_3 %460 = OpLoad %40 
                                       f32_3 %463 = OpFMul %460 %462 
                                       f32_3 %466 = OpFAdd %463 %465 
                                                      OpStore %40 %466 
                                       f32_3 %467 = OpLoad %40 
                                       f32_3 %468 = OpLoad %40 
                                         f32 %469 = OpDot %467 %468 
                                Private f32* %470 = OpAccessChain %9 %30 
                                                      OpStore %470 %469 
                                Private f32* %471 = OpAccessChain %9 %30 
                                         f32 %472 = OpLoad %471 
                                         f32 %473 = OpExtInst %1 32 %472 
                                Private f32* %474 = OpAccessChain %9 %30 
                                                      OpStore %474 %473 
                                       f32_4 %475 = OpLoad %9 
                                       f32_3 %476 = OpVectorShuffle %475 %475 0 0 0 
                                       f32_3 %477 = OpLoad %40 
                                       f32_3 %478 = OpFMul %476 %477 
                                                      OpStore %40 %478 
                                       f32_4 %479 = OpLoad %78 
                                       f32_3 %480 = OpVectorShuffle %479 %479 0 1 3 
                              Uniform f32_3* %482 = OpAccessChain %17 %95 
                                       f32_3 %483 = OpLoad %482 
                                       f32_3 %484 = OpFNegate %483 
                                       f32_3 %485 = OpFAdd %480 %484 
                                       f32_4 %486 = OpLoad %78 
                                       f32_4 %487 = OpVectorShuffle %486 %485 4 5 6 3 
                                                      OpStore %78 %487 
                                       f32_4 %488 = OpLoad %78 
                                       f32_3 %489 = OpVectorShuffle %488 %488 0 1 2 
                                       f32_4 %490 = OpLoad %78 
                                       f32_3 %491 = OpVectorShuffle %490 %490 0 1 2 
                                         f32 %492 = OpDot %489 %491 
                                Private f32* %493 = OpAccessChain %9 %30 
                                                      OpStore %493 %492 
                                Private f32* %494 = OpAccessChain %9 %30 
                                         f32 %495 = OpLoad %494 
                                         f32 %496 = OpExtInst %1 32 %495 
                                Private f32* %497 = OpAccessChain %9 %30 
                                                      OpStore %497 %496 
                                       f32_4 %498 = OpLoad %9 
                                       f32_3 %499 = OpVectorShuffle %498 %498 0 0 0 
                                       f32_4 %500 = OpLoad %78 
                                       f32_3 %501 = OpVectorShuffle %500 %500 0 1 2 
                                       f32_3 %502 = OpFMul %499 %501 
                                       f32_4 %503 = OpLoad %78 
                                       f32_4 %504 = OpVectorShuffle %503 %502 4 5 6 3 
                                                      OpStore %78 %504 
                                       f32_4 %506 = OpLoad %442 
                                       f32_4 %507 = OpVectorShuffle %506 %506 3 0 1 2 
                                       f32_4 %508 = OpFNegate %507 
                                       f32_4 %510 = OpFAdd %508 %509 
                                                      OpStore %505 %510 
                                       f32_3 %511 = OpLoad %160 
                                       f32_3 %512 = OpFNegate %511 
                                         f32 %513 = OpLoad %173 
                                       f32_3 %514 = OpCompositeConstruct %513 %513 %513 
                                       f32_3 %515 = OpFMul %512 %514 
                                       f32_4 %516 = OpLoad %78 
                                       f32_3 %517 = OpVectorShuffle %516 %516 0 1 2 
                                       f32_3 %518 = OpFNegate %517 
                                       f32_3 %519 = OpFAdd %515 %518 
                                       f32_4 %520 = OpLoad %9 
                                       f32_4 %521 = OpVectorShuffle %520 %519 4 5 6 3 
                                                      OpStore %9 %521 
                                       f32_4 %522 = OpLoad %9 
                                       f32_3 %523 = OpVectorShuffle %522 %522 0 1 2 
                                       f32_4 %524 = OpLoad %9 
                                       f32_3 %525 = OpVectorShuffle %524 %524 0 1 2 
                                         f32 %526 = OpDot %523 %525 
                                                      OpStore %51 %526 
                                         f32 %527 = OpLoad %51 
                                         f32 %529 = OpExtInst %1 40 %527 %528 
                                                      OpStore %51 %529 
                                         f32 %530 = OpLoad %51 
                                         f32 %531 = OpExtInst %1 32 %530 
                                                      OpStore %51 %531 
                                         f32 %532 = OpLoad %51 
                                       f32_3 %533 = OpCompositeConstruct %532 %532 %532 
                                       f32_4 %534 = OpLoad %9 
                                       f32_3 %535 = OpVectorShuffle %534 %534 0 1 2 
                                       f32_3 %536 = OpFMul %533 %535 
                                       f32_4 %537 = OpLoad %9 
                                       f32_4 %538 = OpVectorShuffle %537 %536 4 5 6 3 
                                                      OpStore %9 %538 
                                       f32_3 %539 = OpLoad %40 
                                       f32_4 %540 = OpLoad %78 
                                       f32_3 %541 = OpVectorShuffle %540 %540 0 1 2 
                                       f32_3 %542 = OpFNegate %541 
                                         f32 %543 = OpDot %539 %542 
                                                      OpStore %51 %543 
                                       f32_3 %544 = OpLoad %40 
                                       f32_3 %545 = OpLoad %86 
                                       f32_3 %546 = OpFNegate %545 
                                         f32 %547 = OpDot %544 %546 
                                                      OpStore %173 %547 
                                         f32 %548 = OpLoad %173 
                                         f32 %549 = OpExtInst %1 43 %548 %205 %75 
                                                      OpStore %173 %549 
                                       f32_3 %550 = OpLoad %40 
                                       f32_4 %551 = OpLoad %9 
                                       f32_3 %552 = OpVectorShuffle %551 %551 0 1 2 
                                         f32 %553 = OpDot %550 %552 
                                Private f32* %554 = OpAccessChain %40 %30 
                                                      OpStore %554 %553 
                                Private f32* %555 = OpAccessChain %40 %30 
                                         f32 %556 = OpLoad %555 
                                         f32 %557 = OpExtInst %1 43 %556 %205 %75 
                                Private f32* %558 = OpAccessChain %40 %30 
                                                      OpStore %558 %557 
                                       f32_3 %559 = OpLoad %86 
                                       f32_3 %560 = OpFNegate %559 
                                       f32_4 %561 = OpLoad %9 
                                       f32_3 %562 = OpVectorShuffle %561 %561 0 1 2 
                                         f32 %563 = OpDot %560 %562 
                                Private f32* %564 = OpAccessChain %9 %30 
                                                      OpStore %564 %563 
                                Private f32* %565 = OpAccessChain %9 %30 
                                         f32 %566 = OpLoad %565 
                                         f32 %567 = OpExtInst %1 43 %566 %205 %75 
                                Private f32* %568 = OpAccessChain %9 %30 
                                                      OpStore %568 %567 
                                Private f32* %569 = OpAccessChain %9 %30 
                                         f32 %570 = OpLoad %569 
                                Private f32* %571 = OpAccessChain %9 %30 
                                         f32 %572 = OpLoad %571 
                                         f32 %573 = OpFMul %570 %572 
                                Private f32* %574 = OpAccessChain %160 %30 
                                                      OpStore %574 %573 
                                       f32_3 %575 = OpLoad %160 
                                       f32_2 %576 = OpVectorShuffle %575 %575 0 0 
                                       f32_4 %577 = OpLoad %505 
                                       f32_2 %578 = OpVectorShuffle %577 %577 0 0 
                                         f32 %579 = OpDot %576 %578 
                                Private f32* %580 = OpAccessChain %160 %30 
                                                      OpStore %580 %579 
                                Private f32* %581 = OpAccessChain %160 %30 
                                         f32 %582 = OpLoad %581 
                                         f32 %584 = OpFAdd %582 %583 
                                Private f32* %585 = OpAccessChain %160 %30 
                                                      OpStore %585 %584 
                                         f32 %587 = OpLoad %173 
                                         f32 %588 = OpFNegate %587 
                                         f32 %589 = OpFAdd %588 %75 
                                                      OpStore %586 %589 
                                         f32 %591 = OpLoad %586 
                                         f32 %592 = OpLoad %586 
                                         f32 %593 = OpFMul %591 %592 
                                                      OpStore %590 %593 
                                         f32 %594 = OpLoad %590 
                                         f32 %595 = OpLoad %590 
                                         f32 %596 = OpFMul %594 %595 
                                                      OpStore %590 %596 
                                         f32 %597 = OpLoad %586 
                                         f32 %598 = OpLoad %590 
                                         f32 %599 = OpFMul %597 %598 
                                                      OpStore %586 %599 
                                Private f32* %600 = OpAccessChain %160 %30 
                                         f32 %601 = OpLoad %600 
                                         f32 %602 = OpLoad %586 
                                         f32 %603 = OpFMul %601 %602 
                                         f32 %604 = OpFAdd %603 %75 
                                                      OpStore %586 %604 
                                         f32 %605 = OpLoad %51 
                                         f32 %606 = OpExtInst %1 4 %605 
                                         f32 %607 = OpFNegate %606 
                                         f32 %608 = OpFAdd %607 %75 
                                                      OpStore %590 %608 
                                         f32 %609 = OpLoad %590 
                                         f32 %610 = OpLoad %590 
                                         f32 %611 = OpFMul %609 %610 
                                                      OpStore %169 %611 
                                         f32 %612 = OpLoad %169 
                                         f32 %613 = OpLoad %169 
                                         f32 %614 = OpFMul %612 %613 
                                                      OpStore %169 %614 
                                         f32 %615 = OpLoad %590 
                                         f32 %616 = OpLoad %169 
                                         f32 %617 = OpFMul %615 %616 
                                                      OpStore %590 %617 
                                Private f32* %618 = OpAccessChain %160 %30 
                                         f32 %619 = OpLoad %618 
                                         f32 %620 = OpLoad %590 
                                         f32 %621 = OpFMul %619 %620 
                                         f32 %622 = OpFAdd %621 %75 
                                Private f32* %623 = OpAccessChain %160 %30 
                                                      OpStore %623 %622 
                                Private f32* %624 = OpAccessChain %160 %30 
                                         f32 %625 = OpLoad %624 
                                         f32 %626 = OpLoad %586 
                                         f32 %627 = OpFMul %625 %626 
                                Private f32* %628 = OpAccessChain %160 %30 
                                                      OpStore %628 %627 
                                Private f32* %629 = OpAccessChain %505 %30 
                                         f32 %630 = OpLoad %629 
                                Private f32* %631 = OpAccessChain %505 %30 
                                         f32 %632 = OpLoad %631 
                                         f32 %633 = OpFMul %630 %632 
                                                      OpStore %586 %633 
                                         f32 %634 = OpLoad %586 
                                         f32 %636 = OpExtInst %1 40 %634 %635 
                                                      OpStore %586 %636 
                                         f32 %637 = OpLoad %586 
                                         f32 %638 = OpFNegate %637 
                                         f32 %639 = OpFAdd %638 %75 
                                                      OpStore %590 %639 
                                         f32 %640 = OpLoad %51 
                                         f32 %641 = OpExtInst %1 4 %640 
                                         f32 %642 = OpLoad %590 
                                         f32 %643 = OpFMul %641 %642 
                                         f32 %644 = OpLoad %586 
                                         f32 %645 = OpFAdd %643 %644 
                                                      OpStore %169 %645 
                                         f32 %646 = OpLoad %173 
                                         f32 %647 = OpLoad %590 
                                         f32 %648 = OpFMul %646 %647 
                                         f32 %649 = OpLoad %586 
                                         f32 %650 = OpFAdd %648 %649 
                                                      OpStore %590 %650 
                                         f32 %651 = OpLoad %51 
                                         f32 %652 = OpExtInst %1 4 %651 
                                         f32 %653 = OpLoad %590 
                                         f32 %654 = OpFMul %652 %653 
                                                      OpStore %51 %654 
                                         f32 %655 = OpLoad %173 
                                         f32 %656 = OpLoad %169 
                                         f32 %657 = OpFMul %655 %656 
                                         f32 %658 = OpLoad %51 
                                         f32 %659 = OpFAdd %657 %658 
                                                      OpStore %51 %659 
                                         f32 %660 = OpLoad %51 
                                         f32 %661 = OpFAdd %660 %238 
                                                      OpStore %51 %661 
                                         f32 %663 = OpLoad %51 
                                         f32 %664 = OpFDiv %662 %663 
                                                      OpStore %51 %664 
                                         f32 %665 = OpLoad %586 
                                         f32 %666 = OpLoad %586 
                                         f32 %667 = OpFMul %665 %666 
                                                      OpStore %586 %667 
                                Private f32* %668 = OpAccessChain %40 %30 
                                         f32 %669 = OpLoad %668 
                                         f32 %670 = OpLoad %586 
                                         f32 %671 = OpFMul %669 %670 
                                Private f32* %672 = OpAccessChain %40 %30 
                                         f32 %673 = OpLoad %672 
                                         f32 %674 = OpFNegate %673 
                                         f32 %675 = OpFAdd %671 %674 
                                                      OpStore %590 %675 
                                         f32 %676 = OpLoad %590 
                                Private f32* %677 = OpAccessChain %40 %30 
                                         f32 %678 = OpLoad %677 
                                         f32 %679 = OpFMul %676 %678 
                                         f32 %680 = OpFAdd %679 %75 
                                Private f32* %681 = OpAccessChain %40 %30 
                                                      OpStore %681 %680 
                                         f32 %682 = OpLoad %586 
                                         f32 %684 = OpFMul %682 %683 
                                                      OpStore %586 %684 
                                Private f32* %685 = OpAccessChain %40 %30 
                                         f32 %686 = OpLoad %685 
                                Private f32* %687 = OpAccessChain %40 %30 
                                         f32 %688 = OpLoad %687 
                                         f32 %689 = OpFMul %686 %688 
                                         f32 %691 = OpFAdd %689 %690 
                                Private f32* %692 = OpAccessChain %40 %30 
                                                      OpStore %692 %691 
                                         f32 %693 = OpLoad %586 
                                Private f32* %694 = OpAccessChain %40 %30 
                                         f32 %695 = OpLoad %694 
                                         f32 %696 = OpFDiv %693 %695 
                                                      OpStore %586 %696 
                                         f32 %697 = OpLoad %586 
                                         f32 %698 = OpLoad %51 
                                         f32 %699 = OpFMul %697 %698 
                                Private f32* %700 = OpAccessChain %160 %71 
                                                      OpStore %700 %699 
                                         f32 %701 = OpLoad %173 
                                       f32_2 %702 = OpCompositeConstruct %701 %701 
                                       f32_3 %703 = OpLoad %160 
                                       f32_2 %704 = OpVectorShuffle %703 %703 0 1 
                                       f32_2 %705 = OpFMul %702 %704 
                                       f32_3 %706 = OpLoad %160 
                                       f32_3 %707 = OpVectorShuffle %706 %705 3 4 2 
                                                      OpStore %160 %707 
                                Private f32* %708 = OpAccessChain %160 %71 
                                         f32 %709 = OpLoad %708 
                                         f32 %711 = OpFMul %709 %710 
                                                      OpStore %586 %711 
                                         f32 %712 = OpLoad %586 
                                         f32 %713 = OpExtInst %1 40 %712 %205 
                                                      OpStore %586 %713 
                                       f32_4 %714 = OpLoad %442 
                                       f32_3 %715 = OpVectorShuffle %714 %714 0 1 2 
                                       f32_4 %716 = OpLoad %442 
                                       f32_3 %717 = OpVectorShuffle %716 %716 0 1 2 
                                         f32 %718 = OpDot %715 %717 
                                                      OpStore %51 %718 
                                         f32 %720 = OpLoad %51 
                                        bool %721 = OpFOrdNotEqual %720 %205 
                                                      OpStore %719 %721 
                                        bool %722 = OpLoad %719 
                                         f32 %723 = OpSelect %722 %75 %205 
                                                      OpStore %51 %723 
                                         f32 %724 = OpLoad %51 
                                         f32 %725 = OpLoad %586 
                                         f32 %726 = OpFMul %724 %725 
                                                      OpStore %586 %726 
                                       f32_3 %727 = OpLoad %160 
                                       f32_3 %728 = OpVectorShuffle %727 %727 0 0 0 
                                       f32_4 %729 = OpLoad %256 
                                       f32_3 %730 = OpVectorShuffle %729 %729 0 1 2 
                                       f32_3 %731 = OpFMul %728 %730 
                                                      OpStore %40 %731 
                                       f32_4 %732 = OpLoad %256 
                                       f32_3 %733 = OpVectorShuffle %732 %732 0 1 2 
                                         f32 %734 = OpLoad %586 
                                       f32_3 %735 = OpCompositeConstruct %734 %734 %734 
                                       f32_3 %736 = OpFMul %733 %735 
                                                      OpStore %160 %736 
                                Private f32* %737 = OpAccessChain %9 %30 
                                         f32 %738 = OpLoad %737 
                                         f32 %739 = OpFNegate %738 
                                         f32 %740 = OpFAdd %739 %75 
                                Private f32* %741 = OpAccessChain %9 %30 
                                                      OpStore %741 %740 
                                Private f32* %742 = OpAccessChain %9 %30 
                                         f32 %743 = OpLoad %742 
                                Private f32* %744 = OpAccessChain %9 %30 
                                         f32 %745 = OpLoad %744 
                                         f32 %746 = OpFMul %743 %745 
                                                      OpStore %173 %746 
                                         f32 %747 = OpLoad %173 
                                         f32 %748 = OpLoad %173 
                                         f32 %749 = OpFMul %747 %748 
                                                      OpStore %173 %749 
                                Private f32* %750 = OpAccessChain %9 %30 
                                         f32 %751 = OpLoad %750 
                                         f32 %752 = OpLoad %173 
                                         f32 %753 = OpFMul %751 %752 
                                Private f32* %754 = OpAccessChain %9 %30 
                                                      OpStore %754 %753 
                                       f32_4 %755 = OpLoad %505 
                                       f32_3 %756 = OpVectorShuffle %755 %755 1 2 3 
                                       f32_4 %757 = OpLoad %9 
                                       f32_3 %758 = OpVectorShuffle %757 %757 0 0 0 
                                       f32_3 %759 = OpFMul %756 %758 
                                       f32_4 %760 = OpLoad %442 
                                       f32_3 %761 = OpVectorShuffle %760 %760 0 1 2 
                                       f32_3 %762 = OpFAdd %759 %761 
                                       f32_4 %763 = OpLoad %78 
                                       f32_4 %764 = OpVectorShuffle %763 %762 4 5 6 3 
                                                      OpStore %78 %764 
                                       f32_3 %765 = OpLoad %160 
                                       f32_4 %766 = OpLoad %78 
                                       f32_3 %767 = OpVectorShuffle %766 %766 0 1 2 
                                       f32_3 %768 = OpFMul %765 %767 
                                       f32_4 %769 = OpLoad %9 
                                       f32_4 %770 = OpVectorShuffle %769 %768 4 5 6 3 
                                                      OpStore %9 %770 
                                       f32_3 %771 = OpLoad %285 
                                       f32_3 %772 = OpLoad %40 
                                       f32_3 %773 = OpFMul %771 %772 
                                       f32_4 %774 = OpLoad %9 
                                       f32_3 %775 = OpVectorShuffle %774 %774 0 1 2 
                                       f32_3 %776 = OpFAdd %773 %775 
                                       f32_4 %777 = OpLoad %9 
                                       f32_4 %778 = OpVectorShuffle %777 %776 4 5 6 3 
                                                      OpStore %9 %778 
                                Private f32* %779 = OpAccessChain %9 %150 
                                                      OpStore %779 %75 
                                       f32_4 %782 = OpLoad %9 
                                       f32_4 %783 = OpFNegate %782 
                                       f32_4 %784 = OpExtInst %1 29 %783 
                                                      OpStore %781 %784 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "POINT" "UNITY_HDR_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "POINT" "UNITY_HDR_ON" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
UNITY_LOCATION(0) uniform  sampler2D _CameraDepthTexture;
UNITY_LOCATION(1) uniform  sampler2D _LightTextureB0;
UNITY_LOCATION(2) uniform  sampler2D _CameraGBufferTexture0;
UNITY_LOCATION(3) uniform  sampler2D _CameraGBufferTexture1;
UNITY_LOCATION(4) uniform  sampler2D _CameraGBufferTexture2;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
float u_xlat6;
float u_xlat7;
float u_xlat12;
float u_xlat13;
float u_xlat18;
bool u_xlatb18;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat2 = texture(_CameraDepthTexture, u_xlat1.xy);
    u_xlat18 = _ZBufferParams.x * u_xlat2.x + _ZBufferParams.y;
    u_xlat18 = float(1.0) / u_xlat18;
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat0.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat2.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat0.xyz = u_xlat0.xyz + (-_LightPos.xyz);
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat13 = inversesqrt(u_xlat18);
    u_xlat18 = u_xlat18 * _LightPos.w;
    u_xlat3 = texture(_LightTextureB0, vec2(u_xlat18));
    u_xlat3.xyz = u_xlat3.xxx * _LightColor.xyz;
    u_xlat4.xyz = (-u_xlat0.xyz) * vec3(u_xlat13) + (-u_xlat2.xyz);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat13);
    u_xlat18 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat18 = max(u_xlat18, 0.00100000005);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat4.xyz = vec3(u_xlat18) * u_xlat4.xyz;
    u_xlat5 = texture(_CameraGBufferTexture2, u_xlat1.xy);
    u_xlat5.xyz = u_xlat5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat18 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat5.xyz = vec3(u_xlat18) * u_xlat5.xyz;
    u_xlat18 = dot(u_xlat5.xyz, u_xlat4.xyz);
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
    u_xlat13 = dot((-u_xlat0.xyz), u_xlat4.xyz);
    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
    u_xlat0.x = dot(u_xlat5.xyz, (-u_xlat0.xyz));
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat6 = dot(u_xlat5.xyz, (-u_xlat2.xyz));
    u_xlat2 = texture(_CameraGBufferTexture1, u_xlat1.xy);
    u_xlat4 = texture(_CameraGBufferTexture0, u_xlat1.xy);
    u_xlat5 = (-u_xlat2.wxyz) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat12 = u_xlat5.x * u_xlat5.x;
    u_xlat12 = max(u_xlat12, 0.00200000009);
    u_xlat1.x = u_xlat12 * u_xlat12;
    u_xlat7 = u_xlat18 * u_xlat1.x + (-u_xlat18);
    u_xlat18 = u_xlat7 * u_xlat18 + 1.0;
    u_xlat18 = u_xlat18 * u_xlat18 + 1.00000001e-07;
    u_xlat1.x = u_xlat1.x * 0.318309873;
    u_xlat18 = u_xlat1.x / u_xlat18;
    u_xlat1.x = (-u_xlat12) + 1.0;
    u_xlat7 = abs(u_xlat6) * u_xlat1.x + u_xlat12;
    u_xlat12 = u_xlat0.x * u_xlat1.x + u_xlat12;
    u_xlat12 = u_xlat12 * abs(u_xlat6);
    u_xlat6 = -abs(u_xlat6) + 1.0;
    u_xlat12 = u_xlat0.x * u_xlat7 + u_xlat12;
    u_xlat12 = u_xlat12 + 9.99999975e-06;
    u_xlat12 = 0.5 / u_xlat12;
    u_xlat12 = u_xlat18 * u_xlat12;
    u_xlat12 = u_xlat12 * 3.14159274;
    u_xlat12 = u_xlat0.x * u_xlat12;
    u_xlat12 = max(u_xlat12, 0.0);
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlatb18 = u_xlat18!=0.0;
    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
    u_xlat12 = u_xlat18 * u_xlat12;
    u_xlat1.xyw = u_xlat3.xyz * vec3(u_xlat12);
    u_xlat12 = (-u_xlat13) + 1.0;
    u_xlat18 = u_xlat12 * u_xlat12;
    u_xlat18 = u_xlat18 * u_xlat18;
    u_xlat12 = u_xlat12 * u_xlat18;
    u_xlat2.xyz = u_xlat5.yzw * vec3(u_xlat12) + u_xlat2.xyz;
    u_xlat1.xyw = u_xlat1.xyw * u_xlat2.xyz;
    u_xlat12 = u_xlat6 * u_xlat6;
    u_xlat12 = u_xlat12 * u_xlat12;
    u_xlat6 = u_xlat6 * u_xlat12;
    u_xlat12 = u_xlat13 + u_xlat13;
    u_xlat12 = u_xlat13 * u_xlat12;
    u_xlat12 = u_xlat12 * u_xlat5.x + -0.5;
    u_xlat6 = u_xlat12 * u_xlat6 + 1.0;
    u_xlat18 = (-u_xlat0.x) + 1.0;
    u_xlat13 = u_xlat18 * u_xlat18;
    u_xlat13 = u_xlat13 * u_xlat13;
    u_xlat18 = u_xlat18 * u_xlat13;
    u_xlat12 = u_xlat12 * u_xlat18 + 1.0;
    u_xlat6 = u_xlat6 * u_xlat12;
    u_xlat0.x = u_xlat0.x * u_xlat6;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat3.xyz;
    SV_Target0.xyz = u_xlat4.xyz * u_xlat0.xyz + u_xlat1.xyw;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "POINT" "UNITY_HDR_ON" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 192
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %80 %102 %169 %175 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpMemberDecorate %78 0 BuiltIn 78 
                                                      OpMemberDecorate %78 1 BuiltIn 78 
                                                      OpMemberDecorate %78 2 BuiltIn 78 
                                                      OpDecorate %78 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 102 
                                                      OpDecorate %169 Location 169 
                                                      OpDecorate vs_TEXCOORD1 Location 175 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %16 %17 %18 %6 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 1 
                                              %24 = OpTypePointer Uniform %7 
                                          i32 %28 = OpConstant 0 
                                          i32 %36 = OpConstant 2 
                                          i32 %45 = OpConstant 3 
                               Private f32_4* %49 = OpVariable Private 
                                          u32 %76 = OpConstant 1 
                                              %77 = OpTypeArray %6 %76 
                                              %78 = OpTypeStruct %7 %6 %77 
                                              %79 = OpTypePointer Output %78 
         Output struct {f32_4; f32; f32[1];}* %80 = OpVariable Output 
                                              %82 = OpTypePointer Output %7 
                                              %84 = OpTypePointer Private %6 
                                          u32 %87 = OpConstant 0 
                                              %88 = OpTypePointer Uniform %6 
                               Private f32_4* %93 = OpVariable Private 
                                              %94 = OpTypeVector %6 3 
                                          f32 %97 = OpConstant 3.674022E-40 
                                        f32_3 %98 = OpConstantComposite %97 %97 %97 
                       Output f32_4* vs_TEXCOORD0 = OpVariable Output 
                                             %103 = OpTypeVector %6 2 
                                         f32 %158 = OpConstant 3.674022E-40 
                                         f32 %159 = OpConstant 3.674022E-40 
                                       f32_3 %160 = OpConstantComposite %158 %158 %159 
                                             %168 = OpTypePointer Input %94 
                                Input f32_3* %169 = OpVariable Input 
                                             %174 = OpTypePointer Output %94 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                                         i32 %176 = OpConstant 4 
                                             %186 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %25 = OpAccessChain %21 %23 %23 
                                        f32_4 %26 = OpLoad %25 
                                        f32_4 %27 = OpFMul %13 %26 
                                                      OpStore %9 %27 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %28 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %44 = OpLoad %9 
                               Uniform f32_4* %46 = OpAccessChain %21 %23 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_4 %48 = OpFAdd %44 %47 
                                                      OpStore %9 %48 
                                        f32_4 %50 = OpLoad %9 
                                        f32_4 %51 = OpVectorShuffle %50 %50 1 1 1 1 
                               Uniform f32_4* %52 = OpAccessChain %21 %45 %23 
                                        f32_4 %53 = OpLoad %52 
                                        f32_4 %54 = OpFMul %51 %53 
                                                      OpStore %49 %54 
                               Uniform f32_4* %55 = OpAccessChain %21 %45 %28 
                                        f32_4 %56 = OpLoad %55 
                                        f32_4 %57 = OpLoad %9 
                                        f32_4 %58 = OpVectorShuffle %57 %57 0 0 0 0 
                                        f32_4 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %49 
                                        f32_4 %61 = OpFAdd %59 %60 
                                                      OpStore %49 %61 
                               Uniform f32_4* %62 = OpAccessChain %21 %45 %36 
                                        f32_4 %63 = OpLoad %62 
                                        f32_4 %64 = OpLoad %9 
                                        f32_4 %65 = OpVectorShuffle %64 %64 2 2 2 2 
                                        f32_4 %66 = OpFMul %63 %65 
                                        f32_4 %67 = OpLoad %49 
                                        f32_4 %68 = OpFAdd %66 %67 
                                                      OpStore %49 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %45 %45 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %9 
                                        f32_4 %72 = OpVectorShuffle %71 %71 3 3 3 3 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %49 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %49 %75 
                                        f32_4 %81 = OpLoad %49 
                                Output f32_4* %83 = OpAccessChain %80 %28 
                                                      OpStore %83 %81 
                                 Private f32* %85 = OpAccessChain %49 %76 
                                          f32 %86 = OpLoad %85 
                                 Uniform f32* %89 = OpAccessChain %21 %28 %87 
                                          f32 %90 = OpLoad %89 
                                          f32 %91 = OpFMul %86 %90 
                                 Private f32* %92 = OpAccessChain %49 %76 
                                                      OpStore %92 %91 
                                        f32_4 %95 = OpLoad %49 
                                        f32_3 %96 = OpVectorShuffle %95 %95 0 3 1 
                                        f32_3 %99 = OpFMul %96 %98 
                                       f32_4 %100 = OpLoad %93 
                                       f32_4 %101 = OpVectorShuffle %100 %99 4 1 5 6 
                                                      OpStore %93 %101 
                                       f32_4 %104 = OpLoad %49 
                                       f32_2 %105 = OpVectorShuffle %104 %104 2 3 
                                       f32_4 %106 = OpLoad vs_TEXCOORD0 
                                       f32_4 %107 = OpVectorShuffle %106 %105 0 1 4 5 
                                                      OpStore vs_TEXCOORD0 %107 
                                       f32_4 %108 = OpLoad %93 
                                       f32_2 %109 = OpVectorShuffle %108 %108 2 2 
                                       f32_4 %110 = OpLoad %93 
                                       f32_2 %111 = OpVectorShuffle %110 %110 0 3 
                                       f32_2 %112 = OpFAdd %109 %111 
                                       f32_4 %113 = OpLoad vs_TEXCOORD0 
                                       f32_4 %114 = OpVectorShuffle %113 %112 4 5 2 3 
                                                      OpStore vs_TEXCOORD0 %114 
                                       f32_4 %115 = OpLoad %9 
                                       f32_3 %116 = OpVectorShuffle %115 %115 1 1 1 
                              Uniform f32_4* %117 = OpAccessChain %21 %36 %23 
                                       f32_4 %118 = OpLoad %117 
                                       f32_3 %119 = OpVectorShuffle %118 %118 0 1 2 
                                       f32_3 %120 = OpFMul %116 %119 
                                       f32_4 %121 = OpLoad %49 
                                       f32_4 %122 = OpVectorShuffle %121 %120 4 5 6 3 
                                                      OpStore %49 %122 
                              Uniform f32_4* %123 = OpAccessChain %21 %36 %28 
                                       f32_4 %124 = OpLoad %123 
                                       f32_3 %125 = OpVectorShuffle %124 %124 0 1 2 
                                       f32_4 %126 = OpLoad %9 
                                       f32_3 %127 = OpVectorShuffle %126 %126 0 0 0 
                                       f32_3 %128 = OpFMul %125 %127 
                                       f32_4 %129 = OpLoad %49 
                                       f32_3 %130 = OpVectorShuffle %129 %129 0 1 2 
                                       f32_3 %131 = OpFAdd %128 %130 
                                       f32_4 %132 = OpLoad %49 
                                       f32_4 %133 = OpVectorShuffle %132 %131 4 5 6 3 
                                                      OpStore %49 %133 
                              Uniform f32_4* %134 = OpAccessChain %21 %36 %36 
                                       f32_4 %135 = OpLoad %134 
                                       f32_3 %136 = OpVectorShuffle %135 %135 0 1 2 
                                       f32_4 %137 = OpLoad %9 
                                       f32_3 %138 = OpVectorShuffle %137 %137 2 2 2 
                                       f32_3 %139 = OpFMul %136 %138 
                                       f32_4 %140 = OpLoad %49 
                                       f32_3 %141 = OpVectorShuffle %140 %140 0 1 2 
                                       f32_3 %142 = OpFAdd %139 %141 
                                       f32_4 %143 = OpLoad %9 
                                       f32_4 %144 = OpVectorShuffle %143 %142 4 5 6 3 
                                                      OpStore %9 %144 
                              Uniform f32_4* %145 = OpAccessChain %21 %36 %45 
                                       f32_4 %146 = OpLoad %145 
                                       f32_3 %147 = OpVectorShuffle %146 %146 0 1 2 
                                       f32_4 %148 = OpLoad %9 
                                       f32_3 %149 = OpVectorShuffle %148 %148 3 3 3 
                                       f32_3 %150 = OpFMul %147 %149 
                                       f32_4 %151 = OpLoad %9 
                                       f32_3 %152 = OpVectorShuffle %151 %151 0 1 2 
                                       f32_3 %153 = OpFAdd %150 %152 
                                       f32_4 %154 = OpLoad %9 
                                       f32_4 %155 = OpVectorShuffle %154 %153 4 5 6 3 
                                                      OpStore %9 %155 
                                       f32_4 %156 = OpLoad %9 
                                       f32_3 %157 = OpVectorShuffle %156 %156 0 1 2 
                                       f32_3 %161 = OpFMul %157 %160 
                                       f32_4 %162 = OpLoad %49 
                                       f32_4 %163 = OpVectorShuffle %162 %161 4 5 6 3 
                                                      OpStore %49 %163 
                                       f32_4 %164 = OpLoad %9 
                                       f32_3 %165 = OpVectorShuffle %164 %164 0 1 2 
                                       f32_3 %166 = OpFNegate %165 
                                       f32_3 %167 = OpFMul %166 %160 
                                       f32_3 %170 = OpLoad %169 
                                       f32_3 %171 = OpFAdd %167 %170 
                                       f32_4 %172 = OpLoad %9 
                                       f32_4 %173 = OpVectorShuffle %172 %171 4 5 6 3 
                                                      OpStore %9 %173 
                                Uniform f32* %177 = OpAccessChain %21 %176 
                                         f32 %178 = OpLoad %177 
                                       f32_3 %179 = OpCompositeConstruct %178 %178 %178 
                                       f32_4 %180 = OpLoad %9 
                                       f32_3 %181 = OpVectorShuffle %180 %180 0 1 2 
                                       f32_3 %182 = OpFMul %179 %181 
                                       f32_4 %183 = OpLoad %49 
                                       f32_3 %184 = OpVectorShuffle %183 %183 0 1 2 
                                       f32_3 %185 = OpFAdd %182 %184 
                                                      OpStore vs_TEXCOORD1 %185 
                                 Output f32* %187 = OpAccessChain %80 %28 %76 
                                         f32 %188 = OpLoad %187 
                                         f32 %189 = OpFNegate %188 
                                 Output f32* %190 = OpAccessChain %80 %28 %76 
                                                      OpStore %190 %189 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 506
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %24 %40 %492 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpDecorate %13 ArrayStride 13 
                                                      OpMemberDecorate %14 0 Offset 14 
                                                      OpMemberDecorate %14 1 Offset 14 
                                                      OpMemberDecorate %14 2 Offset 14 
                                                      OpMemberDecorate %14 3 Offset 14 
                                                      OpMemberDecorate %14 4 Offset 14 
                                                      OpMemberDecorate %14 5 Offset 14 
                                                      OpDecorate %14 Block 
                                                      OpDecorate %16 DescriptorSet 16 
                                                      OpDecorate %16 Binding 16 
                                                      OpDecorate vs_TEXCOORD1 Location 24 
                                                      OpDecorate vs_TEXCOORD0 Location 40 
                                                      OpDecorate %52 DescriptorSet 52 
                                                      OpDecorate %52 Binding 52 
                                                      OpDecorate %56 DescriptorSet 56 
                                                      OpDecorate %56 Binding 56 
                                                      OpDecorate %171 DescriptorSet 171 
                                                      OpDecorate %171 Binding 171 
                                                      OpDecorate %173 DescriptorSet 173 
                                                      OpDecorate %173 Binding 173 
                                                      OpDecorate %227 DescriptorSet 227 
                                                      OpDecorate %227 Binding 227 
                                                      OpDecorate %229 DescriptorSet 229 
                                                      OpDecorate %229 Binding 229 
                                                      OpDecorate %283 DescriptorSet 283 
                                                      OpDecorate %283 Binding 283 
                                                      OpDecorate %285 DescriptorSet 285 
                                                      OpDecorate %285 Binding 285 
                                                      OpDecorate %291 DescriptorSet 291 
                                                      OpDecorate %291 Binding 291 
                                                      OpDecorate %293 DescriptorSet 293 
                                                      OpDecorate %293 Binding 293 
                                                      OpDecorate %492 Location 492 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 3 
                                              %11 = OpTypeInt 32 0 
                                          u32 %12 = OpConstant 4 
                                              %13 = OpTypeArray %7 %12 
                                              %14 = OpTypeStruct %10 %7 %7 %13 %7 %7 
                                              %15 = OpTypePointer Uniform %14 
Uniform struct {f32_3; f32_4; f32_4; f32_4[4]; f32_4; f32_4;}* %16 = OpVariable Uniform 
                                              %17 = OpTypeInt 32 1 
                                          i32 %18 = OpConstant 1 
                                          u32 %19 = OpConstant 2 
                                              %20 = OpTypePointer Uniform %6 
                                              %23 = OpTypePointer Input %10 
                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                                              %25 = OpTypePointer Input %6 
                                          u32 %29 = OpConstant 0 
                                              %30 = OpTypePointer Private %6 
                               Private f32_4* %38 = OpVariable Private 
                                              %39 = OpTypePointer Input %7 
                        Input f32_4* vs_TEXCOORD0 = OpVariable Input 
                                              %41 = OpTypeVector %6 2 
                                 Private f32* %49 = OpVariable Private 
                                              %50 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %51 = OpTypePointer UniformConstant %50 
         UniformConstant read_only Texture2D* %52 = OpVariable UniformConstant 
                                              %54 = OpTypeSampler 
                                              %55 = OpTypePointer UniformConstant %54 
                     UniformConstant sampler* %56 = OpVariable UniformConstant 
                                              %58 = OpTypeSampledImage %50 
                                          i32 %64 = OpConstant 2 
                                          u32 %69 = OpConstant 1 
                                          f32 %73 = OpConstant 3.674022E-40 
                               Private f32_4* %83 = OpVariable Private 
                                          i32 %86 = OpConstant 3 
                                              %87 = OpTypePointer Uniform %7 
                                          i32 %94 = OpConstant 0 
                                             %127 = OpTypePointer Uniform %10 
                                         i32 %136 = OpConstant 4 
                                Private f32* %163 = OpVariable Private 
                                         u32 %167 = OpConstant 3 
        UniformConstant read_only Texture2D* %171 = OpVariable UniformConstant 
                    UniformConstant sampler* %173 = OpVariable UniformConstant 
                                             %180 = OpTypePointer Private %10 
                              Private f32_3* %181 = OpVariable Private 
                                         i32 %184 = OpConstant 5 
                              Private f32_4* %189 = OpVariable Private 
                                         f32 %215 = OpConstant 3.674022E-40 
                              Private f32_3* %226 = OpVariable Private 
        UniformConstant read_only Texture2D* %227 = OpVariable UniformConstant 
                    UniformConstant sampler* %229 = OpVariable UniformConstant 
                                         f32 %237 = OpConstant 3.674022E-40 
                                       f32_3 %238 = OpConstantComposite %237 %237 %237 
                                         f32 %240 = OpConstant 3.674022E-40 
                                       f32_3 %241 = OpConstantComposite %240 %240 %240 
                                         f32 %257 = OpConstant 3.674022E-40 
                                Private f32* %277 = OpVariable Private 
        UniformConstant read_only Texture2D* %283 = OpVariable UniformConstant 
                    UniformConstant sampler* %285 = OpVariable UniformConstant 
        UniformConstant read_only Texture2D* %291 = OpVariable UniformConstant 
                    UniformConstant sampler* %293 = OpVariable UniformConstant 
                                       f32_4 %305 = OpConstantComposite %73 %73 %73 %73 
                                Private f32* %307 = OpVariable Private 
                                         f32 %314 = OpConstant 3.674022E-40 
                                Private f32* %316 = OpVariable Private 
                                Private f32* %320 = OpVariable Private 
                                         f32 %334 = OpConstant 3.674022E-40 
                                         f32 %337 = OpConstant 3.674022E-40 
                                         f32 %372 = OpConstant 3.674022E-40 
                                         f32 %374 = OpConstant 3.674022E-40 
                                         f32 %385 = OpConstant 3.674022E-40 
                                             %394 = OpTypeBool 
                                             %395 = OpTypePointer Private %394 
                               Private bool* %396 = OpVariable Private 
                                         f32 %420 = OpConstant 3.674022E-40 
                                             %491 = OpTypePointer Output %7 
                               Output f32_4* %492 = OpVariable Output 
                                             %503 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                 Uniform f32* %21 = OpAccessChain %16 %18 %19 
                                          f32 %22 = OpLoad %21 
                                   Input f32* %26 = OpAccessChain vs_TEXCOORD1 %19 
                                          f32 %27 = OpLoad %26 
                                          f32 %28 = OpFDiv %22 %27 
                                 Private f32* %31 = OpAccessChain %9 %29 
                                                      OpStore %31 %28 
                                        f32_4 %32 = OpLoad %9 
                                        f32_3 %33 = OpVectorShuffle %32 %32 0 0 0 
                                        f32_3 %34 = OpLoad vs_TEXCOORD1 
                                        f32_3 %35 = OpFMul %33 %34 
                                        f32_4 %36 = OpLoad %9 
                                        f32_4 %37 = OpVectorShuffle %36 %35 4 5 6 3 
                                                      OpStore %9 %37 
                                        f32_4 %42 = OpLoad vs_TEXCOORD0 
                                        f32_2 %43 = OpVectorShuffle %42 %42 0 1 
                                        f32_4 %44 = OpLoad vs_TEXCOORD0 
                                        f32_2 %45 = OpVectorShuffle %44 %44 3 3 
                                        f32_2 %46 = OpFDiv %43 %45 
                                        f32_4 %47 = OpLoad %38 
                                        f32_4 %48 = OpVectorShuffle %47 %46 4 5 2 3 
                                                      OpStore %38 %48 
                          read_only Texture2D %53 = OpLoad %52 
                                      sampler %57 = OpLoad %56 
                   read_only Texture2DSampled %59 = OpSampledImage %53 %57 
                                        f32_4 %60 = OpLoad %38 
                                        f32_2 %61 = OpVectorShuffle %60 %60 0 1 
                                        f32_4 %62 = OpImageSampleImplicitLod %59 %61 
                                          f32 %63 = OpCompositeExtract %62 0 
                                                      OpStore %49 %63 
                                 Uniform f32* %65 = OpAccessChain %16 %64 %29 
                                          f32 %66 = OpLoad %65 
                                          f32 %67 = OpLoad %49 
                                          f32 %68 = OpFMul %66 %67 
                                 Uniform f32* %70 = OpAccessChain %16 %64 %69 
                                          f32 %71 = OpLoad %70 
                                          f32 %72 = OpFAdd %68 %71 
                                                      OpStore %49 %72 
                                          f32 %74 = OpLoad %49 
                                          f32 %75 = OpFDiv %73 %74 
                                                      OpStore %49 %75 
                                          f32 %76 = OpLoad %49 
                                        f32_3 %77 = OpCompositeConstruct %76 %76 %76 
                                        f32_4 %78 = OpLoad %9 
                                        f32_3 %79 = OpVectorShuffle %78 %78 0 1 2 
                                        f32_3 %80 = OpFMul %77 %79 
                                        f32_4 %81 = OpLoad %9 
                                        f32_4 %82 = OpVectorShuffle %81 %80 4 5 6 3 
                                                      OpStore %9 %82 
                                        f32_4 %84 = OpLoad %9 
                                        f32_3 %85 = OpVectorShuffle %84 %84 1 1 1 
                               Uniform f32_4* %88 = OpAccessChain %16 %86 %18 
                                        f32_4 %89 = OpLoad %88 
                                        f32_3 %90 = OpVectorShuffle %89 %89 0 1 2 
                                        f32_3 %91 = OpFMul %85 %90 
                                        f32_4 %92 = OpLoad %83 
                                        f32_4 %93 = OpVectorShuffle %92 %91 4 5 6 3 
                                                      OpStore %83 %93 
                               Uniform f32_4* %95 = OpAccessChain %16 %86 %94 
                                        f32_4 %96 = OpLoad %95 
                                        f32_3 %97 = OpVectorShuffle %96 %96 0 1 2 
                                        f32_4 %98 = OpLoad %9 
                                        f32_3 %99 = OpVectorShuffle %98 %98 0 0 0 
                                       f32_3 %100 = OpFMul %97 %99 
                                       f32_4 %101 = OpLoad %83 
                                       f32_3 %102 = OpVectorShuffle %101 %101 0 1 2 
                                       f32_3 %103 = OpFAdd %100 %102 
                                       f32_4 %104 = OpLoad %9 
                                       f32_4 %105 = OpVectorShuffle %104 %103 4 5 2 6 
                                                      OpStore %9 %105 
                              Uniform f32_4* %106 = OpAccessChain %16 %86 %64 
                                       f32_4 %107 = OpLoad %106 
                                       f32_3 %108 = OpVectorShuffle %107 %107 0 1 2 
                                       f32_4 %109 = OpLoad %9 
                                       f32_3 %110 = OpVectorShuffle %109 %109 2 2 2 
                                       f32_3 %111 = OpFMul %108 %110 
                                       f32_4 %112 = OpLoad %9 
                                       f32_3 %113 = OpVectorShuffle %112 %112 0 1 3 
                                       f32_3 %114 = OpFAdd %111 %113 
                                       f32_4 %115 = OpLoad %9 
                                       f32_4 %116 = OpVectorShuffle %115 %114 4 5 6 3 
                                                      OpStore %9 %116 
                                       f32_4 %117 = OpLoad %9 
                                       f32_3 %118 = OpVectorShuffle %117 %117 0 1 2 
                              Uniform f32_4* %119 = OpAccessChain %16 %86 %86 
                                       f32_4 %120 = OpLoad %119 
                                       f32_3 %121 = OpVectorShuffle %120 %120 0 1 2 
                                       f32_3 %122 = OpFAdd %118 %121 
                                       f32_4 %123 = OpLoad %9 
                                       f32_4 %124 = OpVectorShuffle %123 %122 4 5 6 3 
                                                      OpStore %9 %124 
                                       f32_4 %125 = OpLoad %9 
                                       f32_3 %126 = OpVectorShuffle %125 %125 0 1 2 
                              Uniform f32_3* %128 = OpAccessChain %16 %94 
                                       f32_3 %129 = OpLoad %128 
                                       f32_3 %130 = OpFNegate %129 
                                       f32_3 %131 = OpFAdd %126 %130 
                                       f32_4 %132 = OpLoad %83 
                                       f32_4 %133 = OpVectorShuffle %132 %131 4 5 6 3 
                                                      OpStore %83 %133 
                                       f32_4 %134 = OpLoad %9 
                                       f32_3 %135 = OpVectorShuffle %134 %134 0 1 2 
                              Uniform f32_4* %137 = OpAccessChain %16 %136 
                                       f32_4 %138 = OpLoad %137 
                                       f32_3 %139 = OpVectorShuffle %138 %138 0 1 2 
                                       f32_3 %140 = OpFNegate %139 
                                       f32_3 %141 = OpFAdd %135 %140 
                                       f32_4 %142 = OpLoad %9 
                                       f32_4 %143 = OpVectorShuffle %142 %141 4 5 6 3 
                                                      OpStore %9 %143 
                                       f32_4 %144 = OpLoad %83 
                                       f32_3 %145 = OpVectorShuffle %144 %144 0 1 2 
                                       f32_4 %146 = OpLoad %83 
                                       f32_3 %147 = OpVectorShuffle %146 %146 0 1 2 
                                         f32 %148 = OpDot %145 %147 
                                                      OpStore %49 %148 
                                         f32 %149 = OpLoad %49 
                                         f32 %150 = OpExtInst %1 32 %149 
                                                      OpStore %49 %150 
                                         f32 %151 = OpLoad %49 
                                       f32_3 %152 = OpCompositeConstruct %151 %151 %151 
                                       f32_4 %153 = OpLoad %83 
                                       f32_3 %154 = OpVectorShuffle %153 %153 0 1 2 
                                       f32_3 %155 = OpFMul %152 %154 
                                       f32_4 %156 = OpLoad %83 
                                       f32_4 %157 = OpVectorShuffle %156 %155 4 5 6 3 
                                                      OpStore %83 %157 
                                       f32_4 %158 = OpLoad %9 
                                       f32_3 %159 = OpVectorShuffle %158 %158 0 1 2 
                                       f32_4 %160 = OpLoad %9 
                                       f32_3 %161 = OpVectorShuffle %160 %160 0 1 2 
                                         f32 %162 = OpDot %159 %161 
                                                      OpStore %49 %162 
                                         f32 %164 = OpLoad %49 
                                         f32 %165 = OpExtInst %1 32 %164 
                                                      OpStore %163 %165 
                                         f32 %166 = OpLoad %49 
                                Uniform f32* %168 = OpAccessChain %16 %136 %167 
                                         f32 %169 = OpLoad %168 
                                         f32 %170 = OpFMul %166 %169 
                                                      OpStore %49 %170 
                         read_only Texture2D %172 = OpLoad %171 
                                     sampler %174 = OpLoad %173 
                  read_only Texture2DSampled %175 = OpSampledImage %172 %174 
                                         f32 %176 = OpLoad %49 
                                       f32_2 %177 = OpCompositeConstruct %176 %176 
                                       f32_4 %178 = OpImageSampleImplicitLod %175 %177 
                                         f32 %179 = OpCompositeExtract %178 0 
                                                      OpStore %49 %179 
                                         f32 %182 = OpLoad %49 
                                       f32_3 %183 = OpCompositeConstruct %182 %182 %182 
                              Uniform f32_4* %185 = OpAccessChain %16 %184 
                                       f32_4 %186 = OpLoad %185 
                                       f32_3 %187 = OpVectorShuffle %186 %186 0 1 2 
                                       f32_3 %188 = OpFMul %183 %187 
                                                      OpStore %181 %188 
                                       f32_4 %190 = OpLoad %9 
                                       f32_3 %191 = OpVectorShuffle %190 %190 0 1 2 
                                       f32_3 %192 = OpFNegate %191 
                                         f32 %193 = OpLoad %163 
                                       f32_3 %194 = OpCompositeConstruct %193 %193 %193 
                                       f32_3 %195 = OpFMul %192 %194 
                                       f32_4 %196 = OpLoad %83 
                                       f32_3 %197 = OpVectorShuffle %196 %196 0 1 2 
                                       f32_3 %198 = OpFNegate %197 
                                       f32_3 %199 = OpFAdd %195 %198 
                                       f32_4 %200 = OpLoad %189 
                                       f32_4 %201 = OpVectorShuffle %200 %199 4 5 6 3 
                                                      OpStore %189 %201 
                                       f32_4 %202 = OpLoad %9 
                                       f32_3 %203 = OpVectorShuffle %202 %202 0 1 2 
                                         f32 %204 = OpLoad %163 
                                       f32_3 %205 = OpCompositeConstruct %204 %204 %204 
                                       f32_3 %206 = OpFMul %203 %205 
                                       f32_4 %207 = OpLoad %9 
                                       f32_4 %208 = OpVectorShuffle %207 %206 4 5 6 3 
                                                      OpStore %9 %208 
                                       f32_4 %209 = OpLoad %189 
                                       f32_3 %210 = OpVectorShuffle %209 %209 0 1 2 
                                       f32_4 %211 = OpLoad %189 
                                       f32_3 %212 = OpVectorShuffle %211 %211 0 1 2 
                                         f32 %213 = OpDot %210 %212 
                                                      OpStore %49 %213 
                                         f32 %214 = OpLoad %49 
                                         f32 %216 = OpExtInst %1 40 %214 %215 
                                                      OpStore %49 %216 
                                         f32 %217 = OpLoad %49 
                                         f32 %218 = OpExtInst %1 32 %217 
                                                      OpStore %49 %218 
                                         f32 %219 = OpLoad %49 
                                       f32_3 %220 = OpCompositeConstruct %219 %219 %219 
                                       f32_4 %221 = OpLoad %189 
                                       f32_3 %222 = OpVectorShuffle %221 %221 0 1 2 
                                       f32_3 %223 = OpFMul %220 %222 
                                       f32_4 %224 = OpLoad %189 
                                       f32_4 %225 = OpVectorShuffle %224 %223 4 5 6 3 
                                                      OpStore %189 %225 
                         read_only Texture2D %228 = OpLoad %227 
                                     sampler %230 = OpLoad %229 
                  read_only Texture2DSampled %231 = OpSampledImage %228 %230 
                                       f32_4 %232 = OpLoad %38 
                                       f32_2 %233 = OpVectorShuffle %232 %232 0 1 
                                       f32_4 %234 = OpImageSampleImplicitLod %231 %233 
                                       f32_3 %235 = OpVectorShuffle %234 %234 0 1 2 
                                                      OpStore %226 %235 
                                       f32_3 %236 = OpLoad %226 
                                       f32_3 %239 = OpFMul %236 %238 
                                       f32_3 %242 = OpFAdd %239 %241 
                                                      OpStore %226 %242 
                                       f32_3 %243 = OpLoad %226 
                                       f32_3 %244 = OpLoad %226 
                                         f32 %245 = OpDot %243 %244 
                                                      OpStore %49 %245 
                                         f32 %246 = OpLoad %49 
                                         f32 %247 = OpExtInst %1 32 %246 
                                                      OpStore %49 %247 
                                         f32 %248 = OpLoad %49 
                                       f32_3 %249 = OpCompositeConstruct %248 %248 %248 
                                       f32_3 %250 = OpLoad %226 
                                       f32_3 %251 = OpFMul %249 %250 
                                                      OpStore %226 %251 
                                       f32_3 %252 = OpLoad %226 
                                       f32_4 %253 = OpLoad %189 
                                       f32_3 %254 = OpVectorShuffle %253 %253 0 1 2 
                                         f32 %255 = OpDot %252 %254 
                                                      OpStore %49 %255 
                                         f32 %256 = OpLoad %49 
                                         f32 %258 = OpExtInst %1 43 %256 %257 %73 
                                                      OpStore %49 %258 
                                       f32_4 %259 = OpLoad %9 
                                       f32_3 %260 = OpVectorShuffle %259 %259 0 1 2 
                                       f32_3 %261 = OpFNegate %260 
                                       f32_4 %262 = OpLoad %189 
                                       f32_3 %263 = OpVectorShuffle %262 %262 0 1 2 
                                         f32 %264 = OpDot %261 %263 
                                                      OpStore %163 %264 
                                         f32 %265 = OpLoad %163 
                                         f32 %266 = OpExtInst %1 43 %265 %257 %73 
                                                      OpStore %163 %266 
                                       f32_3 %267 = OpLoad %226 
                                       f32_4 %268 = OpLoad %9 
                                       f32_3 %269 = OpVectorShuffle %268 %268 0 1 2 
                                       f32_3 %270 = OpFNegate %269 
                                         f32 %271 = OpDot %267 %270 
                                Private f32* %272 = OpAccessChain %9 %29 
                                                      OpStore %272 %271 
                                Private f32* %273 = OpAccessChain %9 %29 
                                         f32 %274 = OpLoad %273 
                                         f32 %275 = OpExtInst %1 43 %274 %257 %73 
                                Private f32* %276 = OpAccessChain %9 %29 
                                                      OpStore %276 %275 
                                       f32_3 %278 = OpLoad %226 
                                       f32_4 %279 = OpLoad %83 
                                       f32_3 %280 = OpVectorShuffle %279 %279 0 1 2 
                                       f32_3 %281 = OpFNegate %280 
                                         f32 %282 = OpDot %278 %281 
                                                      OpStore %277 %282 
                         read_only Texture2D %284 = OpLoad %283 
                                     sampler %286 = OpLoad %285 
                  read_only Texture2DSampled %287 = OpSampledImage %284 %286 
                                       f32_4 %288 = OpLoad %38 
                                       f32_2 %289 = OpVectorShuffle %288 %288 0 1 
                                       f32_4 %290 = OpImageSampleImplicitLod %287 %289 
                                                      OpStore %83 %290 
                         read_only Texture2D %292 = OpLoad %291 
                                     sampler %294 = OpLoad %293 
                  read_only Texture2DSampled %295 = OpSampledImage %292 %294 
                                       f32_4 %296 = OpLoad %38 
                                       f32_2 %297 = OpVectorShuffle %296 %296 0 1 
                                       f32_4 %298 = OpImageSampleImplicitLod %295 %297 
                                       f32_3 %299 = OpVectorShuffle %298 %298 0 1 2 
                                       f32_4 %300 = OpLoad %38 
                                       f32_4 %301 = OpVectorShuffle %300 %299 4 5 2 6 
                                                      OpStore %38 %301 
                                       f32_4 %302 = OpLoad %83 
                                       f32_4 %303 = OpVectorShuffle %302 %302 3 0 1 2 
                                       f32_4 %304 = OpFNegate %303 
                                       f32_4 %306 = OpFAdd %304 %305 
                                                      OpStore %189 %306 
                                Private f32* %308 = OpAccessChain %189 %29 
                                         f32 %309 = OpLoad %308 
                                Private f32* %310 = OpAccessChain %189 %29 
                                         f32 %311 = OpLoad %310 
                                         f32 %312 = OpFMul %309 %311 
                                                      OpStore %307 %312 
                                         f32 %313 = OpLoad %307 
                                         f32 %315 = OpExtInst %1 40 %313 %314 
                                                      OpStore %307 %315 
                                         f32 %317 = OpLoad %307 
                                         f32 %318 = OpLoad %307 
                                         f32 %319 = OpFMul %317 %318 
                                                      OpStore %316 %319 
                                         f32 %321 = OpLoad %49 
                                         f32 %322 = OpLoad %316 
                                         f32 %323 = OpFMul %321 %322 
                                         f32 %324 = OpLoad %49 
                                         f32 %325 = OpFNegate %324 
                                         f32 %326 = OpFAdd %323 %325 
                                                      OpStore %320 %326 
                                         f32 %327 = OpLoad %320 
                                         f32 %328 = OpLoad %49 
                                         f32 %329 = OpFMul %327 %328 
                                         f32 %330 = OpFAdd %329 %73 
                                                      OpStore %49 %330 
                                         f32 %331 = OpLoad %49 
                                         f32 %332 = OpLoad %49 
                                         f32 %333 = OpFMul %331 %332 
                                         f32 %335 = OpFAdd %333 %334 
                                                      OpStore %49 %335 
                                         f32 %336 = OpLoad %316 
                                         f32 %338 = OpFMul %336 %337 
                                                      OpStore %316 %338 
                                         f32 %339 = OpLoad %316 
                                         f32 %340 = OpLoad %49 
                                         f32 %341 = OpFDiv %339 %340 
                                                      OpStore %49 %341 
                                         f32 %342 = OpLoad %307 
                                         f32 %343 = OpFNegate %342 
                                         f32 %344 = OpFAdd %343 %73 
                                                      OpStore %316 %344 
                                         f32 %345 = OpLoad %277 
                                         f32 %346 = OpExtInst %1 4 %345 
                                         f32 %347 = OpLoad %316 
                                         f32 %348 = OpFMul %346 %347 
                                         f32 %349 = OpLoad %307 
                                         f32 %350 = OpFAdd %348 %349 
                                                      OpStore %320 %350 
                                Private f32* %351 = OpAccessChain %9 %29 
                                         f32 %352 = OpLoad %351 
                                         f32 %353 = OpLoad %316 
                                         f32 %354 = OpFMul %352 %353 
                                         f32 %355 = OpLoad %307 
                                         f32 %356 = OpFAdd %354 %355 
                                                      OpStore %307 %356 
                                         f32 %357 = OpLoad %307 
                                         f32 %358 = OpLoad %277 
                                         f32 %359 = OpExtInst %1 4 %358 
                                         f32 %360 = OpFMul %357 %359 
                                                      OpStore %307 %360 
                                         f32 %361 = OpLoad %277 
                                         f32 %362 = OpExtInst %1 4 %361 
                                         f32 %363 = OpFNegate %362 
                                         f32 %364 = OpFAdd %363 %73 
                                                      OpStore %277 %364 
                                Private f32* %365 = OpAccessChain %9 %29 
                                         f32 %366 = OpLoad %365 
                                         f32 %367 = OpLoad %320 
                                         f32 %368 = OpFMul %366 %367 
                                         f32 %369 = OpLoad %307 
                                         f32 %370 = OpFAdd %368 %369 
                                                      OpStore %307 %370 
                                         f32 %371 = OpLoad %307 
                                         f32 %373 = OpFAdd %371 %372 
                                                      OpStore %307 %373 
                                         f32 %375 = OpLoad %307 
                                         f32 %376 = OpFDiv %374 %375 
                                                      OpStore %307 %376 
                                         f32 %377 = OpLoad %49 
                                         f32 %378 = OpLoad %307 
                                         f32 %379 = OpFMul %377 %378 
                                                      OpStore %307 %379 
                                Private f32* %380 = OpAccessChain %9 %29 
                                         f32 %381 = OpLoad %380 
                                         f32 %382 = OpLoad %307 
                                         f32 %383 = OpFMul %381 %382 
                                                      OpStore %307 %383 
                                         f32 %384 = OpLoad %307 
                                         f32 %386 = OpFMul %384 %385 
                                                      OpStore %307 %386 
                                         f32 %387 = OpLoad %307 
                                         f32 %388 = OpExtInst %1 40 %387 %257 
                                                      OpStore %307 %388 
                                       f32_4 %389 = OpLoad %83 
                                       f32_3 %390 = OpVectorShuffle %389 %389 0 1 2 
                                       f32_4 %391 = OpLoad %83 
                                       f32_3 %392 = OpVectorShuffle %391 %391 0 1 2 
                                         f32 %393 = OpDot %390 %392 
                                                      OpStore %49 %393 
                                         f32 %397 = OpLoad %49 
                                        bool %398 = OpFOrdNotEqual %397 %257 
                                                      OpStore %396 %398 
                                        bool %399 = OpLoad %396 
                                         f32 %400 = OpSelect %399 %73 %257 
                                                      OpStore %49 %400 
                                         f32 %401 = OpLoad %49 
                                         f32 %402 = OpLoad %307 
                                         f32 %403 = OpFMul %401 %402 
                                                      OpStore %307 %403 
                                       f32_3 %404 = OpLoad %181 
                                         f32 %405 = OpLoad %307 
                                       f32_3 %406 = OpCompositeConstruct %405 %405 %405 
                                       f32_3 %407 = OpFMul %404 %406 
                                                      OpStore %226 %407 
                                         f32 %408 = OpLoad %163 
                                         f32 %409 = OpFNegate %408 
                                         f32 %410 = OpFAdd %409 %73 
                                                      OpStore %307 %410 
                                         f32 %411 = OpLoad %163 
                                         f32 %412 = OpLoad %163 
                                         f32 %413 = OpFMul %411 %412 
                                                      OpStore %49 %413 
                                         f32 %414 = OpLoad %49 
                                       f32_2 %415 = OpCompositeConstruct %414 %414 
                                       f32_4 %416 = OpLoad %189 
                                       f32_2 %417 = OpVectorShuffle %416 %416 0 0 
                                         f32 %418 = OpDot %415 %417 
                                                      OpStore %49 %418 
                                         f32 %419 = OpLoad %49 
                                         f32 %421 = OpFAdd %419 %420 
                                                      OpStore %49 %421 
                                         f32 %422 = OpLoad %307 
                                         f32 %423 = OpLoad %307 
                                         f32 %424 = OpFMul %422 %423 
                                                      OpStore %163 %424 
                                         f32 %425 = OpLoad %163 
                                         f32 %426 = OpLoad %163 
                                         f32 %427 = OpFMul %425 %426 
                                                      OpStore %163 %427 
                                         f32 %428 = OpLoad %307 
                                         f32 %429 = OpLoad %163 
                                         f32 %430 = OpFMul %428 %429 
                                                      OpStore %307 %430 
                                       f32_4 %431 = OpLoad %189 
                                       f32_3 %432 = OpVectorShuffle %431 %431 1 2 3 
                                         f32 %433 = OpLoad %307 
                                       f32_3 %434 = OpCompositeConstruct %433 %433 %433 
                                       f32_3 %435 = OpFMul %432 %434 
                                       f32_4 %436 = OpLoad %83 
                                       f32_3 %437 = OpVectorShuffle %436 %436 0 1 2 
                                       f32_3 %438 = OpFAdd %435 %437 
                                       f32_4 %439 = OpLoad %83 
                                       f32_4 %440 = OpVectorShuffle %439 %438 4 5 6 3 
                                                      OpStore %83 %440 
                                       f32_4 %441 = OpLoad %83 
                                       f32_3 %442 = OpVectorShuffle %441 %441 0 1 2 
                                       f32_3 %443 = OpLoad %226 
                                       f32_3 %444 = OpFMul %442 %443 
                                       f32_4 %445 = OpLoad %83 
                                       f32_4 %446 = OpVectorShuffle %445 %444 4 5 6 3 
                                                      OpStore %83 %446 
                                         f32 %447 = OpLoad %277 
                                         f32 %448 = OpLoad %277 
                                         f32 %449 = OpFMul %447 %448 
                                                      OpStore %307 %449 
                                         f32 %450 = OpLoad %307 
                                         f32 %451 = OpLoad %307 
                                         f32 %452 = OpFMul %450 %451 
                                                      OpStore %307 %452 
                                         f32 %453 = OpLoad %277 
                                         f32 %454 = OpLoad %307 
                                         f32 %455 = OpFMul %453 %454 
                                                      OpStore %277 %455 
                                         f32 %456 = OpLoad %49 
                                         f32 %457 = OpLoad %277 
                                         f32 %458 = OpFMul %456 %457 
                                         f32 %459 = OpFAdd %458 %73 
                                                      OpStore %277 %459 
                                Private f32* %460 = OpAccessChain %9 %29 
                                         f32 %461 = OpLoad %460 
                                         f32 %462 = OpFNegate %461 
                                         f32 %463 = OpFAdd %462 %73 
                                                      OpStore %307 %463 
                                         f32 %464 = OpLoad %307 
                                         f32 %465 = OpLoad %307 
                                         f32 %466 = OpFMul %464 %465 
                                                      OpStore %163 %466 
                                         f32 %467 = OpLoad %163 
                                         f32 %468 = OpLoad %163 
                                         f32 %469 = OpFMul %467 %468 
                                                      OpStore %163 %469 
                                         f32 %470 = OpLoad %307 
                                         f32 %471 = OpLoad %163 
                                         f32 %472 = OpFMul %470 %471 
                                                      OpStore %307 %472 
                                         f32 %473 = OpLoad %49 
                                         f32 %474 = OpLoad %307 
                                         f32 %475 = OpFMul %473 %474 
                                         f32 %476 = OpFAdd %475 %73 
                                                      OpStore %307 %476 
                                         f32 %477 = OpLoad %277 
                                         f32 %478 = OpLoad %307 
                                         f32 %479 = OpFMul %477 %478 
                                                      OpStore %277 %479 
                                Private f32* %480 = OpAccessChain %9 %29 
                                         f32 %481 = OpLoad %480 
                                         f32 %482 = OpLoad %277 
                                         f32 %483 = OpFMul %481 %482 
                                Private f32* %484 = OpAccessChain %9 %29 
                                                      OpStore %484 %483 
                                       f32_4 %485 = OpLoad %9 
                                       f32_3 %486 = OpVectorShuffle %485 %485 0 0 0 
                                       f32_3 %487 = OpLoad %181 
                                       f32_3 %488 = OpFMul %486 %487 
                                       f32_4 %489 = OpLoad %9 
                                       f32_4 %490 = OpVectorShuffle %489 %488 4 5 6 3 
                                                      OpStore %9 %490 
                                       f32_4 %493 = OpLoad %38 
                                       f32_3 %494 = OpVectorShuffle %493 %493 0 1 3 
                                       f32_4 %495 = OpLoad %9 
                                       f32_3 %496 = OpVectorShuffle %495 %495 0 1 2 
                                       f32_3 %497 = OpFMul %494 %496 
                                       f32_4 %498 = OpLoad %83 
                                       f32_3 %499 = OpVectorShuffle %498 %498 0 1 2 
                                       f32_3 %500 = OpFAdd %497 %499 
                                       f32_4 %501 = OpLoad %492 
                                       f32_4 %502 = OpVectorShuffle %501 %500 4 5 6 3 
                                                      OpStore %492 %502 
                                 Output f32* %504 = OpAccessChain %492 %167 
                                                      OpStore %504 %73 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "UNITY_HDR_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "UNITY_HDR_ON" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _LightDir;
uniform 	vec4 _LightColor;
UNITY_LOCATION(0) uniform  sampler2D _CameraDepthTexture;
UNITY_LOCATION(1) uniform  sampler2D _CameraGBufferTexture0;
UNITY_LOCATION(2) uniform  sampler2D _CameraGBufferTexture1;
UNITY_LOCATION(3) uniform  sampler2D _CameraGBufferTexture2;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
float u_xlat6;
float u_xlat7;
float u_xlat12;
float u_xlat13;
float u_xlat18;
bool u_xlatb18;
float u_xlat19;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat2 = texture(_CameraDepthTexture, u_xlat1.xy);
    u_xlat18 = _ZBufferParams.x * u_xlat2.x + _ZBufferParams.y;
    u_xlat18 = float(1.0) / u_xlat18;
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat0.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat0.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = (-u_xlat0.xyz) * vec3(u_xlat18) + (-_LightDir.xyz);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = max(u_xlat18, 0.00100000005);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
    u_xlat3 = texture(_CameraGBufferTexture2, u_xlat1.xy);
    u_xlat3.xyz = u_xlat3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz;
    u_xlat18 = dot(u_xlat3.xyz, u_xlat2.xyz);
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
    u_xlat13 = dot((-_LightDir.xyz), u_xlat2.xyz);
    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
    u_xlat2 = texture(_CameraGBufferTexture1, u_xlat1.xy);
    u_xlat4 = texture(_CameraGBufferTexture0, u_xlat1.xy);
    u_xlat5 = (-u_xlat2.wxyz) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat1.x = u_xlat5.x * u_xlat5.x;
    u_xlat1.x = max(u_xlat1.x, 0.00200000009);
    u_xlat7 = u_xlat1.x * u_xlat1.x;
    u_xlat19 = u_xlat18 * u_xlat7 + (-u_xlat18);
    u_xlat18 = u_xlat19 * u_xlat18 + 1.0;
    u_xlat18 = u_xlat18 * u_xlat18 + 1.00000001e-07;
    u_xlat7 = u_xlat7 * 0.318309873;
    u_xlat18 = u_xlat7 / u_xlat18;
    u_xlat0.x = dot(u_xlat3.xyz, (-u_xlat0.xyz));
    u_xlat6 = dot(u_xlat3.xyz, (-_LightDir.xyz));
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
    u_xlat12 = (-u_xlat1.x) + 1.0;
    u_xlat7 = abs(u_xlat0.x) * u_xlat12 + u_xlat1.x;
    u_xlat12 = u_xlat6 * u_xlat12 + u_xlat1.x;
    u_xlat12 = u_xlat12 * abs(u_xlat0.x);
    u_xlat0.x = -abs(u_xlat0.x) + 1.0;
    u_xlat12 = u_xlat6 * u_xlat7 + u_xlat12;
    u_xlat12 = u_xlat12 + 9.99999975e-06;
    u_xlat12 = 0.5 / u_xlat12;
    u_xlat12 = u_xlat18 * u_xlat12;
    u_xlat12 = u_xlat12 * 3.14159274;
    u_xlat12 = u_xlat6 * u_xlat12;
    u_xlat12 = max(u_xlat12, 0.0);
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlatb18 = u_xlat18!=0.0;
    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
    u_xlat12 = u_xlat18 * u_xlat12;
    u_xlat1.xyw = vec3(u_xlat12) * _LightColor.xyz;
    u_xlat12 = (-u_xlat13) + 1.0;
    u_xlat18 = u_xlat12 * u_xlat12;
    u_xlat18 = u_xlat18 * u_xlat18;
    u_xlat12 = u_xlat12 * u_xlat18;
    u_xlat2.xyz = u_xlat5.yzw * vec3(u_xlat12) + u_xlat2.xyz;
    u_xlat1.xyw = u_xlat1.xyw * u_xlat2.xyz;
    u_xlat12 = u_xlat13 + u_xlat13;
    u_xlat12 = u_xlat13 * u_xlat12;
    u_xlat12 = u_xlat12 * u_xlat5.x + -0.5;
    u_xlat18 = u_xlat0.x * u_xlat0.x;
    u_xlat18 = u_xlat18 * u_xlat18;
    u_xlat0.x = u_xlat0.x * u_xlat18;
    u_xlat0.x = u_xlat12 * u_xlat0.x + 1.0;
    u_xlat18 = (-u_xlat6) + 1.0;
    u_xlat13 = u_xlat18 * u_xlat18;
    u_xlat13 = u_xlat13 * u_xlat13;
    u_xlat18 = u_xlat18 * u_xlat13;
    u_xlat12 = u_xlat12 * u_xlat18 + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat12;
    u_xlat0.x = u_xlat6 * u_xlat0.x;
    u_xlat0.xyz = u_xlat0.xxx * _LightColor.xyz;
    SV_Target0.xyz = u_xlat4.xyz * u_xlat0.xyz + u_xlat1.xyw;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "UNITY_HDR_ON" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 192
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %80 %102 %169 %175 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpMemberDecorate %78 0 BuiltIn 78 
                                                      OpMemberDecorate %78 1 BuiltIn 78 
                                                      OpMemberDecorate %78 2 BuiltIn 78 
                                                      OpDecorate %78 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 102 
                                                      OpDecorate %169 Location 169 
                                                      OpDecorate vs_TEXCOORD1 Location 175 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %16 %17 %18 %6 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 1 
                                              %24 = OpTypePointer Uniform %7 
                                          i32 %28 = OpConstant 0 
                                          i32 %36 = OpConstant 2 
                                          i32 %45 = OpConstant 3 
                               Private f32_4* %49 = OpVariable Private 
                                          u32 %76 = OpConstant 1 
                                              %77 = OpTypeArray %6 %76 
                                              %78 = OpTypeStruct %7 %6 %77 
                                              %79 = OpTypePointer Output %78 
         Output struct {f32_4; f32; f32[1];}* %80 = OpVariable Output 
                                              %82 = OpTypePointer Output %7 
                                              %84 = OpTypePointer Private %6 
                                          u32 %87 = OpConstant 0 
                                              %88 = OpTypePointer Uniform %6 
                               Private f32_4* %93 = OpVariable Private 
                                              %94 = OpTypeVector %6 3 
                                          f32 %97 = OpConstant 3.674022E-40 
                                        f32_3 %98 = OpConstantComposite %97 %97 %97 
                       Output f32_4* vs_TEXCOORD0 = OpVariable Output 
                                             %103 = OpTypeVector %6 2 
                                         f32 %158 = OpConstant 3.674022E-40 
                                         f32 %159 = OpConstant 3.674022E-40 
                                       f32_3 %160 = OpConstantComposite %158 %158 %159 
                                             %168 = OpTypePointer Input %94 
                                Input f32_3* %169 = OpVariable Input 
                                             %174 = OpTypePointer Output %94 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                                         i32 %176 = OpConstant 4 
                                             %186 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %25 = OpAccessChain %21 %23 %23 
                                        f32_4 %26 = OpLoad %25 
                                        f32_4 %27 = OpFMul %13 %26 
                                                      OpStore %9 %27 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %28 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %44 = OpLoad %9 
                               Uniform f32_4* %46 = OpAccessChain %21 %23 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_4 %48 = OpFAdd %44 %47 
                                                      OpStore %9 %48 
                                        f32_4 %50 = OpLoad %9 
                                        f32_4 %51 = OpVectorShuffle %50 %50 1 1 1 1 
                               Uniform f32_4* %52 = OpAccessChain %21 %45 %23 
                                        f32_4 %53 = OpLoad %52 
                                        f32_4 %54 = OpFMul %51 %53 
                                                      OpStore %49 %54 
                               Uniform f32_4* %55 = OpAccessChain %21 %45 %28 
                                        f32_4 %56 = OpLoad %55 
                                        f32_4 %57 = OpLoad %9 
                                        f32_4 %58 = OpVectorShuffle %57 %57 0 0 0 0 
                                        f32_4 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %49 
                                        f32_4 %61 = OpFAdd %59 %60 
                                                      OpStore %49 %61 
                               Uniform f32_4* %62 = OpAccessChain %21 %45 %36 
                                        f32_4 %63 = OpLoad %62 
                                        f32_4 %64 = OpLoad %9 
                                        f32_4 %65 = OpVectorShuffle %64 %64 2 2 2 2 
                                        f32_4 %66 = OpFMul %63 %65 
                                        f32_4 %67 = OpLoad %49 
                                        f32_4 %68 = OpFAdd %66 %67 
                                                      OpStore %49 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %45 %45 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %9 
                                        f32_4 %72 = OpVectorShuffle %71 %71 3 3 3 3 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %49 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %49 %75 
                                        f32_4 %81 = OpLoad %49 
                                Output f32_4* %83 = OpAccessChain %80 %28 
                                                      OpStore %83 %81 
                                 Private f32* %85 = OpAccessChain %49 %76 
                                          f32 %86 = OpLoad %85 
                                 Uniform f32* %89 = OpAccessChain %21 %28 %87 
                                          f32 %90 = OpLoad %89 
                                          f32 %91 = OpFMul %86 %90 
                                 Private f32* %92 = OpAccessChain %49 %76 
                                                      OpStore %92 %91 
                                        f32_4 %95 = OpLoad %49 
                                        f32_3 %96 = OpVectorShuffle %95 %95 0 3 1 
                                        f32_3 %99 = OpFMul %96 %98 
                                       f32_4 %100 = OpLoad %93 
                                       f32_4 %101 = OpVectorShuffle %100 %99 4 1 5 6 
                                                      OpStore %93 %101 
                                       f32_4 %104 = OpLoad %49 
                                       f32_2 %105 = OpVectorShuffle %104 %104 2 3 
                                       f32_4 %106 = OpLoad vs_TEXCOORD0 
                                       f32_4 %107 = OpVectorShuffle %106 %105 0 1 4 5 
                                                      OpStore vs_TEXCOORD0 %107 
                                       f32_4 %108 = OpLoad %93 
                                       f32_2 %109 = OpVectorShuffle %108 %108 2 2 
                                       f32_4 %110 = OpLoad %93 
                                       f32_2 %111 = OpVectorShuffle %110 %110 0 3 
                                       f32_2 %112 = OpFAdd %109 %111 
                                       f32_4 %113 = OpLoad vs_TEXCOORD0 
                                       f32_4 %114 = OpVectorShuffle %113 %112 4 5 2 3 
                                                      OpStore vs_TEXCOORD0 %114 
                                       f32_4 %115 = OpLoad %9 
                                       f32_3 %116 = OpVectorShuffle %115 %115 1 1 1 
                              Uniform f32_4* %117 = OpAccessChain %21 %36 %23 
                                       f32_4 %118 = OpLoad %117 
                                       f32_3 %119 = OpVectorShuffle %118 %118 0 1 2 
                                       f32_3 %120 = OpFMul %116 %119 
                                       f32_4 %121 = OpLoad %49 
                                       f32_4 %122 = OpVectorShuffle %121 %120 4 5 6 3 
                                                      OpStore %49 %122 
                              Uniform f32_4* %123 = OpAccessChain %21 %36 %28 
                                       f32_4 %124 = OpLoad %123 
                                       f32_3 %125 = OpVectorShuffle %124 %124 0 1 2 
                                       f32_4 %126 = OpLoad %9 
                                       f32_3 %127 = OpVectorShuffle %126 %126 0 0 0 
                                       f32_3 %128 = OpFMul %125 %127 
                                       f32_4 %129 = OpLoad %49 
                                       f32_3 %130 = OpVectorShuffle %129 %129 0 1 2 
                                       f32_3 %131 = OpFAdd %128 %130 
                                       f32_4 %132 = OpLoad %49 
                                       f32_4 %133 = OpVectorShuffle %132 %131 4 5 6 3 
                                                      OpStore %49 %133 
                              Uniform f32_4* %134 = OpAccessChain %21 %36 %36 
                                       f32_4 %135 = OpLoad %134 
                                       f32_3 %136 = OpVectorShuffle %135 %135 0 1 2 
                                       f32_4 %137 = OpLoad %9 
                                       f32_3 %138 = OpVectorShuffle %137 %137 2 2 2 
                                       f32_3 %139 = OpFMul %136 %138 
                                       f32_4 %140 = OpLoad %49 
                                       f32_3 %141 = OpVectorShuffle %140 %140 0 1 2 
                                       f32_3 %142 = OpFAdd %139 %141 
                                       f32_4 %143 = OpLoad %9 
                                       f32_4 %144 = OpVectorShuffle %143 %142 4 5 6 3 
                                                      OpStore %9 %144 
                              Uniform f32_4* %145 = OpAccessChain %21 %36 %45 
                                       f32_4 %146 = OpLoad %145 
                                       f32_3 %147 = OpVectorShuffle %146 %146 0 1 2 
                                       f32_4 %148 = OpLoad %9 
                                       f32_3 %149 = OpVectorShuffle %148 %148 3 3 3 
                                       f32_3 %150 = OpFMul %147 %149 
                                       f32_4 %151 = OpLoad %9 
                                       f32_3 %152 = OpVectorShuffle %151 %151 0 1 2 
                                       f32_3 %153 = OpFAdd %150 %152 
                                       f32_4 %154 = OpLoad %9 
                                       f32_4 %155 = OpVectorShuffle %154 %153 4 5 6 3 
                                                      OpStore %9 %155 
                                       f32_4 %156 = OpLoad %9 
                                       f32_3 %157 = OpVectorShuffle %156 %156 0 1 2 
                                       f32_3 %161 = OpFMul %157 %160 
                                       f32_4 %162 = OpLoad %49 
                                       f32_4 %163 = OpVectorShuffle %162 %161 4 5 6 3 
                                                      OpStore %49 %163 
                                       f32_4 %164 = OpLoad %9 
                                       f32_3 %165 = OpVectorShuffle %164 %164 0 1 2 
                                       f32_3 %166 = OpFNegate %165 
                                       f32_3 %167 = OpFMul %166 %160 
                                       f32_3 %170 = OpLoad %169 
                                       f32_3 %171 = OpFAdd %167 %170 
                                       f32_4 %172 = OpLoad %9 
                                       f32_4 %173 = OpVectorShuffle %172 %171 4 5 6 3 
                                                      OpStore %9 %173 
                                Uniform f32* %177 = OpAccessChain %21 %176 
                                         f32 %178 = OpLoad %177 
                                       f32_3 %179 = OpCompositeConstruct %178 %178 %178 
                                       f32_4 %180 = OpLoad %9 
                                       f32_3 %181 = OpVectorShuffle %180 %180 0 1 2 
                                       f32_3 %182 = OpFMul %179 %181 
                                       f32_4 %183 = OpLoad %49 
                                       f32_3 %184 = OpVectorShuffle %183 %183 0 1 2 
                                       f32_3 %185 = OpFAdd %182 %184 
                                                      OpStore vs_TEXCOORD1 %185 
                                 Output f32* %187 = OpAccessChain %80 %28 %76 
                                         f32 %188 = OpLoad %187 
                                         f32 %189 = OpFNegate %188 
                                 Output f32* %190 = OpAccessChain %80 %28 %76 
                                                      OpStore %190 %189 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 479
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %24 %40 %464 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpDecorate %13 ArrayStride 13 
                                                      OpMemberDecorate %14 0 Offset 14 
                                                      OpMemberDecorate %14 1 Offset 14 
                                                      OpMemberDecorate %14 2 Offset 14 
                                                      OpMemberDecorate %14 3 Offset 14 
                                                      OpMemberDecorate %14 4 Offset 14 
                                                      OpMemberDecorate %14 5 Offset 14 
                                                      OpDecorate %14 Block 
                                                      OpDecorate %16 DescriptorSet 16 
                                                      OpDecorate %16 Binding 16 
                                                      OpDecorate vs_TEXCOORD1 Location 24 
                                                      OpDecorate vs_TEXCOORD0 Location 40 
                                                      OpDecorate %52 DescriptorSet 52 
                                                      OpDecorate %52 Binding 52 
                                                      OpDecorate %56 DescriptorSet 56 
                                                      OpDecorate %56 Binding 56 
                                                      OpDecorate %181 DescriptorSet 181 
                                                      OpDecorate %181 Binding 181 
                                                      OpDecorate %183 DescriptorSet 183 
                                                      OpDecorate %183 Binding 183 
                                                      OpDecorate %223 DescriptorSet 223 
                                                      OpDecorate %223 Binding 223 
                                                      OpDecorate %225 DescriptorSet 225 
                                                      OpDecorate %225 Binding 225 
                                                      OpDecorate %231 DescriptorSet 231 
                                                      OpDecorate %231 Binding 231 
                                                      OpDecorate %233 DescriptorSet 233 
                                                      OpDecorate %233 Binding 233 
                                                      OpDecorate %464 Location 464 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 3 
                                              %11 = OpTypeInt 32 0 
                                          u32 %12 = OpConstant 4 
                                              %13 = OpTypeArray %7 %12 
                                              %14 = OpTypeStruct %10 %7 %7 %13 %7 %7 
                                              %15 = OpTypePointer Uniform %14 
Uniform struct {f32_3; f32_4; f32_4; f32_4[4]; f32_4; f32_4;}* %16 = OpVariable Uniform 
                                              %17 = OpTypeInt 32 1 
                                          i32 %18 = OpConstant 1 
                                          u32 %19 = OpConstant 2 
                                              %20 = OpTypePointer Uniform %6 
                                              %23 = OpTypePointer Input %10 
                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                                              %25 = OpTypePointer Input %6 
                                          u32 %29 = OpConstant 0 
                                              %30 = OpTypePointer Private %6 
                               Private f32_4* %38 = OpVariable Private 
                                              %39 = OpTypePointer Input %7 
                        Input f32_4* vs_TEXCOORD0 = OpVariable Input 
                                              %41 = OpTypeVector %6 2 
                                 Private f32* %49 = OpVariable Private 
                                              %50 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %51 = OpTypePointer UniformConstant %50 
         UniformConstant read_only Texture2D* %52 = OpVariable UniformConstant 
                                              %54 = OpTypeSampler 
                                              %55 = OpTypePointer UniformConstant %54 
                     UniformConstant sampler* %56 = OpVariable UniformConstant 
                                              %58 = OpTypeSampledImage %50 
                                          i32 %64 = OpConstant 2 
                                          u32 %69 = OpConstant 1 
                                          f32 %73 = OpConstant 3.674022E-40 
                               Private f32_4* %83 = OpVariable Private 
                                          i32 %86 = OpConstant 3 
                                              %87 = OpTypePointer Uniform %7 
                                          i32 %94 = OpConstant 0 
                                             %127 = OpTypePointer Uniform %10 
                                         i32 %147 = OpConstant 4 
                                         f32 %168 = OpConstant 3.674022E-40 
                                             %179 = OpTypePointer Private %10 
                              Private f32_3* %180 = OpVariable Private 
        UniformConstant read_only Texture2D* %181 = OpVariable UniformConstant 
                    UniformConstant sampler* %183 = OpVariable UniformConstant 
                                         f32 %191 = OpConstant 3.674022E-40 
                                       f32_3 %192 = OpConstantComposite %191 %191 %191 
                                         f32 %194 = OpConstant 3.674022E-40 
                                       f32_3 %195 = OpConstantComposite %194 %194 %194 
                                         f32 %211 = OpConstant 3.674022E-40 
                                Private f32* %213 = OpVariable Private 
        UniformConstant read_only Texture2D* %223 = OpVariable UniformConstant 
                    UniformConstant sampler* %225 = OpVariable UniformConstant 
        UniformConstant read_only Texture2D* %231 = OpVariable UniformConstant 
                    UniformConstant sampler* %233 = OpVariable UniformConstant 
                              Private f32_4* %242 = OpVariable Private 
                                       f32_4 %246 = OpConstantComposite %73 %73 %73 %73 
                                Private f32* %248 = OpVariable Private 
                                         f32 %255 = OpConstant 3.674022E-40 
                                Private f32* %257 = OpVariable Private 
                                Private f32* %261 = OpVariable Private 
                                         f32 %275 = OpConstant 3.674022E-40 
                                         f32 %278 = OpConstant 3.674022E-40 
                                Private f32* %289 = OpVariable Private 
                                Private f32* %298 = OpVariable Private 
                                         f32 %333 = OpConstant 3.674022E-40 
                                         f32 %335 = OpConstant 3.674022E-40 
                                         f32 %345 = OpConstant 3.674022E-40 
                                             %354 = OpTypeBool 
                                             %355 = OpTypePointer Private %354 
                               Private bool* %356 = OpVariable Private 
                                         i32 %366 = OpConstant 5 
                                         f32 %383 = OpConstant 3.674022E-40 
                                             %463 = OpTypePointer Output %7 
                               Output f32_4* %464 = OpVariable Output 
                                         u32 %475 = OpConstant 3 
                                             %476 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                 Uniform f32* %21 = OpAccessChain %16 %18 %19 
                                          f32 %22 = OpLoad %21 
                                   Input f32* %26 = OpAccessChain vs_TEXCOORD1 %19 
                                          f32 %27 = OpLoad %26 
                                          f32 %28 = OpFDiv %22 %27 
                                 Private f32* %31 = OpAccessChain %9 %29 
                                                      OpStore %31 %28 
                                        f32_4 %32 = OpLoad %9 
                                        f32_3 %33 = OpVectorShuffle %32 %32 0 0 0 
                                        f32_3 %34 = OpLoad vs_TEXCOORD1 
                                        f32_3 %35 = OpFMul %33 %34 
                                        f32_4 %36 = OpLoad %9 
                                        f32_4 %37 = OpVectorShuffle %36 %35 4 5 6 3 
                                                      OpStore %9 %37 
                                        f32_4 %42 = OpLoad vs_TEXCOORD0 
                                        f32_2 %43 = OpVectorShuffle %42 %42 0 1 
                                        f32_4 %44 = OpLoad vs_TEXCOORD0 
                                        f32_2 %45 = OpVectorShuffle %44 %44 3 3 
                                        f32_2 %46 = OpFDiv %43 %45 
                                        f32_4 %47 = OpLoad %38 
                                        f32_4 %48 = OpVectorShuffle %47 %46 4 5 2 3 
                                                      OpStore %38 %48 
                          read_only Texture2D %53 = OpLoad %52 
                                      sampler %57 = OpLoad %56 
                   read_only Texture2DSampled %59 = OpSampledImage %53 %57 
                                        f32_4 %60 = OpLoad %38 
                                        f32_2 %61 = OpVectorShuffle %60 %60 0 1 
                                        f32_4 %62 = OpImageSampleImplicitLod %59 %61 
                                          f32 %63 = OpCompositeExtract %62 0 
                                                      OpStore %49 %63 
                                 Uniform f32* %65 = OpAccessChain %16 %64 %29 
                                          f32 %66 = OpLoad %65 
                                          f32 %67 = OpLoad %49 
                                          f32 %68 = OpFMul %66 %67 
                                 Uniform f32* %70 = OpAccessChain %16 %64 %69 
                                          f32 %71 = OpLoad %70 
                                          f32 %72 = OpFAdd %68 %71 
                                                      OpStore %49 %72 
                                          f32 %74 = OpLoad %49 
                                          f32 %75 = OpFDiv %73 %74 
                                                      OpStore %49 %75 
                                          f32 %76 = OpLoad %49 
                                        f32_3 %77 = OpCompositeConstruct %76 %76 %76 
                                        f32_4 %78 = OpLoad %9 
                                        f32_3 %79 = OpVectorShuffle %78 %78 0 1 2 
                                        f32_3 %80 = OpFMul %77 %79 
                                        f32_4 %81 = OpLoad %9 
                                        f32_4 %82 = OpVectorShuffle %81 %80 4 5 6 3 
                                                      OpStore %9 %82 
                                        f32_4 %84 = OpLoad %9 
                                        f32_3 %85 = OpVectorShuffle %84 %84 1 1 1 
                               Uniform f32_4* %88 = OpAccessChain %16 %86 %18 
                                        f32_4 %89 = OpLoad %88 
                                        f32_3 %90 = OpVectorShuffle %89 %89 0 1 2 
                                        f32_3 %91 = OpFMul %85 %90 
                                        f32_4 %92 = OpLoad %83 
                                        f32_4 %93 = OpVectorShuffle %92 %91 4 5 6 3 
                                                      OpStore %83 %93 
                               Uniform f32_4* %95 = OpAccessChain %16 %86 %94 
                                        f32_4 %96 = OpLoad %95 
                                        f32_3 %97 = OpVectorShuffle %96 %96 0 1 2 
                                        f32_4 %98 = OpLoad %9 
                                        f32_3 %99 = OpVectorShuffle %98 %98 0 0 0 
                                       f32_3 %100 = OpFMul %97 %99 
                                       f32_4 %101 = OpLoad %83 
                                       f32_3 %102 = OpVectorShuffle %101 %101 0 1 2 
                                       f32_3 %103 = OpFAdd %100 %102 
                                       f32_4 %104 = OpLoad %9 
                                       f32_4 %105 = OpVectorShuffle %104 %103 4 5 2 6 
                                                      OpStore %9 %105 
                              Uniform f32_4* %106 = OpAccessChain %16 %86 %64 
                                       f32_4 %107 = OpLoad %106 
                                       f32_3 %108 = OpVectorShuffle %107 %107 0 1 2 
                                       f32_4 %109 = OpLoad %9 
                                       f32_3 %110 = OpVectorShuffle %109 %109 2 2 2 
                                       f32_3 %111 = OpFMul %108 %110 
                                       f32_4 %112 = OpLoad %9 
                                       f32_3 %113 = OpVectorShuffle %112 %112 0 1 3 
                                       f32_3 %114 = OpFAdd %111 %113 
                                       f32_4 %115 = OpLoad %9 
                                       f32_4 %116 = OpVectorShuffle %115 %114 4 5 6 3 
                                                      OpStore %9 %116 
                                       f32_4 %117 = OpLoad %9 
                                       f32_3 %118 = OpVectorShuffle %117 %117 0 1 2 
                              Uniform f32_4* %119 = OpAccessChain %16 %86 %86 
                                       f32_4 %120 = OpLoad %119 
                                       f32_3 %121 = OpVectorShuffle %120 %120 0 1 2 
                                       f32_3 %122 = OpFAdd %118 %121 
                                       f32_4 %123 = OpLoad %9 
                                       f32_4 %124 = OpVectorShuffle %123 %122 4 5 6 3 
                                                      OpStore %9 %124 
                                       f32_4 %125 = OpLoad %9 
                                       f32_3 %126 = OpVectorShuffle %125 %125 0 1 2 
                              Uniform f32_3* %128 = OpAccessChain %16 %94 
                                       f32_3 %129 = OpLoad %128 
                                       f32_3 %130 = OpFNegate %129 
                                       f32_3 %131 = OpFAdd %126 %130 
                                       f32_4 %132 = OpLoad %9 
                                       f32_4 %133 = OpVectorShuffle %132 %131 4 5 6 3 
                                                      OpStore %9 %133 
                                       f32_4 %134 = OpLoad %9 
                                       f32_3 %135 = OpVectorShuffle %134 %134 0 1 2 
                                       f32_4 %136 = OpLoad %9 
                                       f32_3 %137 = OpVectorShuffle %136 %136 0 1 2 
                                         f32 %138 = OpDot %135 %137 
                                                      OpStore %49 %138 
                                         f32 %139 = OpLoad %49 
                                         f32 %140 = OpExtInst %1 32 %139 
                                                      OpStore %49 %140 
                                       f32_4 %141 = OpLoad %9 
                                       f32_3 %142 = OpVectorShuffle %141 %141 0 1 2 
                                       f32_3 %143 = OpFNegate %142 
                                         f32 %144 = OpLoad %49 
                                       f32_3 %145 = OpCompositeConstruct %144 %144 %144 
                                       f32_3 %146 = OpFMul %143 %145 
                              Uniform f32_4* %148 = OpAccessChain %16 %147 
                                       f32_4 %149 = OpLoad %148 
                                       f32_3 %150 = OpVectorShuffle %149 %149 0 1 2 
                                       f32_3 %151 = OpFNegate %150 
                                       f32_3 %152 = OpFAdd %146 %151 
                                       f32_4 %153 = OpLoad %83 
                                       f32_4 %154 = OpVectorShuffle %153 %152 4 5 6 3 
                                                      OpStore %83 %154 
                                         f32 %155 = OpLoad %49 
                                       f32_3 %156 = OpCompositeConstruct %155 %155 %155 
                                       f32_4 %157 = OpLoad %9 
                                       f32_3 %158 = OpVectorShuffle %157 %157 0 1 2 
                                       f32_3 %159 = OpFMul %156 %158 
                                       f32_4 %160 = OpLoad %9 
                                       f32_4 %161 = OpVectorShuffle %160 %159 4 5 6 3 
                                                      OpStore %9 %161 
                                       f32_4 %162 = OpLoad %83 
                                       f32_3 %163 = OpVectorShuffle %162 %162 0 1 2 
                                       f32_4 %164 = OpLoad %83 
                                       f32_3 %165 = OpVectorShuffle %164 %164 0 1 2 
                                         f32 %166 = OpDot %163 %165 
                                                      OpStore %49 %166 
                                         f32 %167 = OpLoad %49 
                                         f32 %169 = OpExtInst %1 40 %167 %168 
                                                      OpStore %49 %169 
                                         f32 %170 = OpLoad %49 
                                         f32 %171 = OpExtInst %1 32 %170 
                                                      OpStore %49 %171 
                                         f32 %172 = OpLoad %49 
                                       f32_3 %173 = OpCompositeConstruct %172 %172 %172 
                                       f32_4 %174 = OpLoad %83 
                                       f32_3 %175 = OpVectorShuffle %174 %174 0 1 2 
                                       f32_3 %176 = OpFMul %173 %175 
                                       f32_4 %177 = OpLoad %83 
                                       f32_4 %178 = OpVectorShuffle %177 %176 4 5 6 3 
                                                      OpStore %83 %178 
                         read_only Texture2D %182 = OpLoad %181 
                                     sampler %184 = OpLoad %183 
                  read_only Texture2DSampled %185 = OpSampledImage %182 %184 
                                       f32_4 %186 = OpLoad %38 
                                       f32_2 %187 = OpVectorShuffle %186 %186 0 1 
                                       f32_4 %188 = OpImageSampleImplicitLod %185 %187 
                                       f32_3 %189 = OpVectorShuffle %188 %188 0 1 2 
                                                      OpStore %180 %189 
                                       f32_3 %190 = OpLoad %180 
                                       f32_3 %193 = OpFMul %190 %192 
                                       f32_3 %196 = OpFAdd %193 %195 
                                                      OpStore %180 %196 
                                       f32_3 %197 = OpLoad %180 
                                       f32_3 %198 = OpLoad %180 
                                         f32 %199 = OpDot %197 %198 
                                                      OpStore %49 %199 
                                         f32 %200 = OpLoad %49 
                                         f32 %201 = OpExtInst %1 32 %200 
                                                      OpStore %49 %201 
                                         f32 %202 = OpLoad %49 
                                       f32_3 %203 = OpCompositeConstruct %202 %202 %202 
                                       f32_3 %204 = OpLoad %180 
                                       f32_3 %205 = OpFMul %203 %204 
                                                      OpStore %180 %205 
                                       f32_3 %206 = OpLoad %180 
                                       f32_4 %207 = OpLoad %83 
                                       f32_3 %208 = OpVectorShuffle %207 %207 0 1 2 
                                         f32 %209 = OpDot %206 %208 
                                                      OpStore %49 %209 
                                         f32 %210 = OpLoad %49 
                                         f32 %212 = OpExtInst %1 43 %210 %211 %73 
                                                      OpStore %49 %212 
                              Uniform f32_4* %214 = OpAccessChain %16 %147 
                                       f32_4 %215 = OpLoad %214 
                                       f32_3 %216 = OpVectorShuffle %215 %215 0 1 2 
                                       f32_3 %217 = OpFNegate %216 
                                       f32_4 %218 = OpLoad %83 
                                       f32_3 %219 = OpVectorShuffle %218 %218 0 1 2 
                                         f32 %220 = OpDot %217 %219 
                                                      OpStore %213 %220 
                                         f32 %221 = OpLoad %213 
                                         f32 %222 = OpExtInst %1 43 %221 %211 %73 
                                                      OpStore %213 %222 
                         read_only Texture2D %224 = OpLoad %223 
                                     sampler %226 = OpLoad %225 
                  read_only Texture2DSampled %227 = OpSampledImage %224 %226 
                                       f32_4 %228 = OpLoad %38 
                                       f32_2 %229 = OpVectorShuffle %228 %228 0 1 
                                       f32_4 %230 = OpImageSampleImplicitLod %227 %229 
                                                      OpStore %83 %230 
                         read_only Texture2D %232 = OpLoad %231 
                                     sampler %234 = OpLoad %233 
                  read_only Texture2DSampled %235 = OpSampledImage %232 %234 
                                       f32_4 %236 = OpLoad %38 
                                       f32_2 %237 = OpVectorShuffle %236 %236 0 1 
                                       f32_4 %238 = OpImageSampleImplicitLod %235 %237 
                                       f32_3 %239 = OpVectorShuffle %238 %238 0 1 2 
                                       f32_4 %240 = OpLoad %38 
                                       f32_4 %241 = OpVectorShuffle %240 %239 4 5 2 6 
                                                      OpStore %38 %241 
                                       f32_4 %243 = OpLoad %83 
                                       f32_4 %244 = OpVectorShuffle %243 %243 3 0 1 2 
                                       f32_4 %245 = OpFNegate %244 
                                       f32_4 %247 = OpFAdd %245 %246 
                                                      OpStore %242 %247 
                                Private f32* %249 = OpAccessChain %242 %29 
                                         f32 %250 = OpLoad %249 
                                Private f32* %251 = OpAccessChain %242 %29 
                                         f32 %252 = OpLoad %251 
                                         f32 %253 = OpFMul %250 %252 
                                                      OpStore %248 %253 
                                         f32 %254 = OpLoad %248 
                                         f32 %256 = OpExtInst %1 40 %254 %255 
                                                      OpStore %248 %256 
                                         f32 %258 = OpLoad %248 
                                         f32 %259 = OpLoad %248 
                                         f32 %260 = OpFMul %258 %259 
                                                      OpStore %257 %260 
                                         f32 %262 = OpLoad %49 
                                         f32 %263 = OpLoad %257 
                                         f32 %264 = OpFMul %262 %263 
                                         f32 %265 = OpLoad %49 
                                         f32 %266 = OpFNegate %265 
                                         f32 %267 = OpFAdd %264 %266 
                                                      OpStore %261 %267 
                                         f32 %268 = OpLoad %261 
                                         f32 %269 = OpLoad %49 
                                         f32 %270 = OpFMul %268 %269 
                                         f32 %271 = OpFAdd %270 %73 
                                                      OpStore %49 %271 
                                         f32 %272 = OpLoad %49 
                                         f32 %273 = OpLoad %49 
                                         f32 %274 = OpFMul %272 %273 
                                         f32 %276 = OpFAdd %274 %275 
                                                      OpStore %49 %276 
                                         f32 %277 = OpLoad %257 
                                         f32 %279 = OpFMul %277 %278 
                                                      OpStore %257 %279 
                                         f32 %280 = OpLoad %257 
                                         f32 %281 = OpLoad %49 
                                         f32 %282 = OpFDiv %280 %281 
                                                      OpStore %49 %282 
                                       f32_3 %283 = OpLoad %180 
                                       f32_4 %284 = OpLoad %9 
                                       f32_3 %285 = OpVectorShuffle %284 %284 0 1 2 
                                       f32_3 %286 = OpFNegate %285 
                                         f32 %287 = OpDot %283 %286 
                                Private f32* %288 = OpAccessChain %9 %29 
                                                      OpStore %288 %287 
                                       f32_3 %290 = OpLoad %180 
                              Uniform f32_4* %291 = OpAccessChain %16 %147 
                                       f32_4 %292 = OpLoad %291 
                                       f32_3 %293 = OpVectorShuffle %292 %292 0 1 2 
                                       f32_3 %294 = OpFNegate %293 
                                         f32 %295 = OpDot %290 %294 
                                                      OpStore %289 %295 
                                         f32 %296 = OpLoad %289 
                                         f32 %297 = OpExtInst %1 43 %296 %211 %73 
                                                      OpStore %289 %297 
                                         f32 %299 = OpLoad %248 
                                         f32 %300 = OpFNegate %299 
                                         f32 %301 = OpFAdd %300 %73 
                                                      OpStore %298 %301 
                                Private f32* %302 = OpAccessChain %9 %29 
                                         f32 %303 = OpLoad %302 
                                         f32 %304 = OpExtInst %1 4 %303 
                                         f32 %305 = OpLoad %298 
                                         f32 %306 = OpFMul %304 %305 
                                         f32 %307 = OpLoad %248 
                                         f32 %308 = OpFAdd %306 %307 
                                Private f32* %309 = OpAccessChain %180 %29 
                                                      OpStore %309 %308 
                                         f32 %310 = OpLoad %289 
                                         f32 %311 = OpLoad %298 
                                         f32 %312 = OpFMul %310 %311 
                                         f32 %313 = OpLoad %248 
                                         f32 %314 = OpFAdd %312 %313 
                                                      OpStore %298 %314 
                                         f32 %315 = OpLoad %298 
                                Private f32* %316 = OpAccessChain %9 %29 
                                         f32 %317 = OpLoad %316 
                                         f32 %318 = OpExtInst %1 4 %317 
                                         f32 %319 = OpFMul %315 %318 
                                                      OpStore %298 %319 
                                Private f32* %320 = OpAccessChain %9 %29 
                                         f32 %321 = OpLoad %320 
                                         f32 %322 = OpExtInst %1 4 %321 
                                         f32 %323 = OpFNegate %322 
                                         f32 %324 = OpFAdd %323 %73 
                                Private f32* %325 = OpAccessChain %9 %29 
                                                      OpStore %325 %324 
                                         f32 %326 = OpLoad %289 
                                Private f32* %327 = OpAccessChain %180 %29 
                                         f32 %328 = OpLoad %327 
                                         f32 %329 = OpFMul %326 %328 
                                         f32 %330 = OpLoad %298 
                                         f32 %331 = OpFAdd %329 %330 
                                                      OpStore %298 %331 
                                         f32 %332 = OpLoad %298 
                                         f32 %334 = OpFAdd %332 %333 
                                                      OpStore %298 %334 
                                         f32 %336 = OpLoad %298 
                                         f32 %337 = OpFDiv %335 %336 
                                                      OpStore %298 %337 
                                         f32 %338 = OpLoad %49 
                                         f32 %339 = OpLoad %298 
                                         f32 %340 = OpFMul %338 %339 
                                                      OpStore %298 %340 
                                         f32 %341 = OpLoad %289 
                                         f32 %342 = OpLoad %298 
                                         f32 %343 = OpFMul %341 %342 
                                                      OpStore %298 %343 
                                         f32 %344 = OpLoad %298 
                                         f32 %346 = OpFMul %344 %345 
                                                      OpStore %298 %346 
                                         f32 %347 = OpLoad %298 
                                         f32 %348 = OpExtInst %1 40 %347 %211 
                                                      OpStore %298 %348 
                                       f32_4 %349 = OpLoad %83 
                                       f32_3 %350 = OpVectorShuffle %349 %349 0 1 2 
                                       f32_4 %351 = OpLoad %83 
                                       f32_3 %352 = OpVectorShuffle %351 %351 0 1 2 
                                         f32 %353 = OpDot %350 %352 
                                                      OpStore %49 %353 
                                         f32 %357 = OpLoad %49 
                                        bool %358 = OpFOrdNotEqual %357 %211 
                                                      OpStore %356 %358 
                                        bool %359 = OpLoad %356 
                                         f32 %360 = OpSelect %359 %73 %211 
                                                      OpStore %49 %360 
                                         f32 %361 = OpLoad %49 
                                         f32 %362 = OpLoad %298 
                                         f32 %363 = OpFMul %361 %362 
                                                      OpStore %298 %363 
                                         f32 %364 = OpLoad %298 
                                       f32_3 %365 = OpCompositeConstruct %364 %364 %364 
                              Uniform f32_4* %367 = OpAccessChain %16 %366 
                                       f32_4 %368 = OpLoad %367 
                                       f32_3 %369 = OpVectorShuffle %368 %368 0 1 2 
                                       f32_3 %370 = OpFMul %365 %369 
                                                      OpStore %180 %370 
                                         f32 %371 = OpLoad %213 
                                         f32 %372 = OpFNegate %371 
                                         f32 %373 = OpFAdd %372 %73 
                                                      OpStore %298 %373 
                                         f32 %374 = OpLoad %213 
                                         f32 %375 = OpLoad %213 
                                         f32 %376 = OpFMul %374 %375 
                                                      OpStore %49 %376 
                                         f32 %377 = OpLoad %49 
                                       f32_2 %378 = OpCompositeConstruct %377 %377 
                                       f32_4 %379 = OpLoad %242 
                                       f32_2 %380 = OpVectorShuffle %379 %379 0 0 
                                         f32 %381 = OpDot %378 %380 
                                                      OpStore %49 %381 
                                         f32 %382 = OpLoad %49 
                                         f32 %384 = OpFAdd %382 %383 
                                                      OpStore %49 %384 
                                         f32 %385 = OpLoad %298 
                                         f32 %386 = OpLoad %298 
                                         f32 %387 = OpFMul %385 %386 
                                                      OpStore %213 %387 
                                         f32 %388 = OpLoad %213 
                                         f32 %389 = OpLoad %213 
                                         f32 %390 = OpFMul %388 %389 
                                                      OpStore %213 %390 
                                         f32 %391 = OpLoad %298 
                                         f32 %392 = OpLoad %213 
                                         f32 %393 = OpFMul %391 %392 
                                                      OpStore %298 %393 
                                       f32_4 %394 = OpLoad %242 
                                       f32_3 %395 = OpVectorShuffle %394 %394 1 2 3 
                                         f32 %396 = OpLoad %298 
                                       f32_3 %397 = OpCompositeConstruct %396 %396 %396 
                                       f32_3 %398 = OpFMul %395 %397 
                                       f32_4 %399 = OpLoad %83 
                                       f32_3 %400 = OpVectorShuffle %399 %399 0 1 2 
                                       f32_3 %401 = OpFAdd %398 %400 
                                       f32_4 %402 = OpLoad %83 
                                       f32_4 %403 = OpVectorShuffle %402 %401 4 5 6 3 
                                                      OpStore %83 %403 
                                       f32_4 %404 = OpLoad %83 
                                       f32_3 %405 = OpVectorShuffle %404 %404 0 1 2 
                                       f32_3 %406 = OpLoad %180 
                                       f32_3 %407 = OpFMul %405 %406 
                                       f32_4 %408 = OpLoad %83 
                                       f32_4 %409 = OpVectorShuffle %408 %407 4 5 6 3 
                                                      OpStore %83 %409 
                                Private f32* %410 = OpAccessChain %9 %29 
                                         f32 %411 = OpLoad %410 
                                Private f32* %412 = OpAccessChain %9 %29 
                                         f32 %413 = OpLoad %412 
                                         f32 %414 = OpFMul %411 %413 
                                                      OpStore %298 %414 
                                         f32 %415 = OpLoad %298 
                                         f32 %416 = OpLoad %298 
                                         f32 %417 = OpFMul %415 %416 
                                                      OpStore %298 %417 
                                Private f32* %418 = OpAccessChain %9 %29 
                                         f32 %419 = OpLoad %418 
                                         f32 %420 = OpLoad %298 
                                         f32 %421 = OpFMul %419 %420 
                                Private f32* %422 = OpAccessChain %9 %29 
                                                      OpStore %422 %421 
                                         f32 %423 = OpLoad %49 
                                Private f32* %424 = OpAccessChain %9 %29 
                                         f32 %425 = OpLoad %424 
                                         f32 %426 = OpFMul %423 %425 
                                         f32 %427 = OpFAdd %426 %73 
                                Private f32* %428 = OpAccessChain %9 %29 
                                                      OpStore %428 %427 
                                         f32 %429 = OpLoad %289 
                                         f32 %430 = OpFNegate %429 
                                         f32 %431 = OpFAdd %430 %73 
                                                      OpStore %298 %431 
                                         f32 %432 = OpLoad %298 
                                         f32 %433 = OpLoad %298 
                                         f32 %434 = OpFMul %432 %433 
                                                      OpStore %213 %434 
                                         f32 %435 = OpLoad %213 
                                         f32 %436 = OpLoad %213 
                                         f32 %437 = OpFMul %435 %436 
                                                      OpStore %213 %437 
                                         f32 %438 = OpLoad %298 
                                         f32 %439 = OpLoad %213 
                                         f32 %440 = OpFMul %438 %439 
                                                      OpStore %298 %440 
                                         f32 %441 = OpLoad %49 
                                         f32 %442 = OpLoad %298 
                                         f32 %443 = OpFMul %441 %442 
                                         f32 %444 = OpFAdd %443 %73 
                                                      OpStore %298 %444 
                                Private f32* %445 = OpAccessChain %9 %29 
                                         f32 %446 = OpLoad %445 
                                         f32 %447 = OpLoad %298 
                                         f32 %448 = OpFMul %446 %447 
                                Private f32* %449 = OpAccessChain %9 %29 
                                                      OpStore %449 %448 
                                         f32 %450 = OpLoad %289 
                                Private f32* %451 = OpAccessChain %9 %29 
                                         f32 %452 = OpLoad %451 
                                         f32 %453 = OpFMul %450 %452 
                                Private f32* %454 = OpAccessChain %9 %29 
                                                      OpStore %454 %453 
                                       f32_4 %455 = OpLoad %9 
                                       f32_3 %456 = OpVectorShuffle %455 %455 0 0 0 
                              Uniform f32_4* %457 = OpAccessChain %16 %366 
                                       f32_4 %458 = OpLoad %457 
                                       f32_3 %459 = OpVectorShuffle %458 %458 0 1 2 
                                       f32_3 %460 = OpFMul %456 %459 
                                       f32_4 %461 = OpLoad %9 
                                       f32_4 %462 = OpVectorShuffle %461 %460 4 5 6 3 
                                                      OpStore %9 %462 
                                       f32_4 %465 = OpLoad %38 
                                       f32_3 %466 = OpVectorShuffle %465 %465 0 1 3 
                                       f32_4 %467 = OpLoad %9 
                                       f32_3 %468 = OpVectorShuffle %467 %467 0 1 2 
                                       f32_3 %469 = OpFMul %466 %468 
                                       f32_4 %470 = OpLoad %83 
                                       f32_3 %471 = OpVectorShuffle %470 %470 0 1 2 
                                       f32_3 %472 = OpFAdd %469 %471 
                                       f32_4 %473 = OpLoad %464 
                                       f32_4 %474 = OpVectorShuffle %473 %472 4 5 6 3 
                                                      OpStore %464 %474 
                                 Output f32* %477 = OpAccessChain %464 %475 
                                                      OpStore %477 %73 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "SPOT" "UNITY_HDR_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "SPOT" "UNITY_HDR_ON" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
UNITY_LOCATION(0) uniform  sampler2D _CameraDepthTexture;
UNITY_LOCATION(1) uniform  sampler2D _LightTexture0;
UNITY_LOCATION(2) uniform  sampler2D _LightTextureB0;
UNITY_LOCATION(3) uniform  sampler2D _CameraGBufferTexture0;
UNITY_LOCATION(4) uniform  sampler2D _CameraGBufferTexture1;
UNITY_LOCATION(5) uniform  sampler2D _CameraGBufferTexture2;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec2 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
vec4 u_xlat6;
float u_xlat8;
float u_xlat9;
vec3 u_xlat11;
float u_xlat14;
bool u_xlatb14;
float u_xlat15;
float u_xlat21;
float u_xlat22;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat2 = texture(_CameraDepthTexture, u_xlat1.xy);
    u_xlat21 = _ZBufferParams.x * u_xlat2.x + _ZBufferParams.y;
    u_xlat21 = float(1.0) / u_xlat21;
    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat0.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat2.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
    u_xlat3.xyz = (-u_xlat0.xyz) + _LightPos.xyz;
    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat15 = inversesqrt(u_xlat21);
    u_xlat21 = u_xlat21 * _LightPos.w;
    u_xlat4 = texture(_LightTextureB0, vec2(u_xlat21));
    u_xlat11.xyz = u_xlat3.xyz * vec3(u_xlat15) + (-u_xlat2.xyz);
    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz;
    u_xlat21 = dot(u_xlat11.xyz, u_xlat11.xyz);
    u_xlat21 = max(u_xlat21, 0.00100000005);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat11.xyz = vec3(u_xlat21) * u_xlat11.xyz;
    u_xlat5 = texture(_CameraGBufferTexture2, u_xlat1.xy);
    u_xlat5.xyz = u_xlat5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat21 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat5.xyz = vec3(u_xlat21) * u_xlat5.xyz;
    u_xlat21 = dot(u_xlat5.xyz, u_xlat11.xyz);
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
    u_xlat15 = dot(u_xlat3.xyz, u_xlat11.xyz);
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
    u_xlat22 = dot(u_xlat5.xyz, u_xlat3.xyz);
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
    u_xlat2.x = dot(u_xlat5.xyz, (-u_xlat2.xyz));
    u_xlat3 = texture(_CameraGBufferTexture1, u_xlat1.xy);
    u_xlat5 = texture(_CameraGBufferTexture0, u_xlat1.xy);
    u_xlat6 = (-u_xlat3.wxyz) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat1.x = u_xlat6.x * u_xlat6.x;
    u_xlat1.x = max(u_xlat1.x, 0.00200000009);
    u_xlat8 = u_xlat1.x * u_xlat1.x;
    u_xlat9 = u_xlat21 * u_xlat8 + (-u_xlat21);
    u_xlat21 = u_xlat9 * u_xlat21 + 1.0;
    u_xlat21 = u_xlat21 * u_xlat21 + 1.00000001e-07;
    u_xlat8 = u_xlat8 * 0.318309873;
    u_xlat21 = u_xlat8 / u_xlat21;
    u_xlat8 = (-u_xlat1.x) + 1.0;
    u_xlat9 = abs(u_xlat2.x) * u_xlat8 + u_xlat1.x;
    u_xlat1.x = u_xlat22 * u_xlat8 + u_xlat1.x;
    u_xlat1.x = u_xlat1.x * abs(u_xlat2.x);
    u_xlat8 = -abs(u_xlat2.x) + 1.0;
    u_xlat1.x = u_xlat22 * u_xlat9 + u_xlat1.x;
    u_xlat1.x = u_xlat1.x + 9.99999975e-06;
    u_xlat1.x = 0.5 / u_xlat1.x;
    u_xlat21 = u_xlat21 * u_xlat1.x;
    u_xlat21 = u_xlat21 * 3.14159274;
    u_xlat21 = u_xlat22 * u_xlat21;
    u_xlat21 = max(u_xlat21, 0.0);
    u_xlat1.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlatb1 = u_xlat1.x!=0.0;
    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
    u_xlat21 = u_xlat21 * u_xlat1.x;
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyw;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyw * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyw * u_xlat0.zzz + u_xlat2.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyw;
    u_xlat0.xy = u_xlat0.xy / u_xlat0.zz;
    u_xlatb14 = u_xlat0.z<0.0;
    u_xlat14 = u_xlatb14 ? 1.0 : float(0.0);
    u_xlat2 = texture(_LightTexture0, u_xlat0.xy, -8.0);
    u_xlat0.x = u_xlat14 * u_xlat2.w;
    u_xlat0.x = u_xlat4.x * u_xlat0.x;
    u_xlat0.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat2.xyz = u_xlat0.xyz * vec3(u_xlat21);
    u_xlat21 = (-u_xlat15) + 1.0;
    u_xlat1.x = u_xlat21 * u_xlat21;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat21 = u_xlat21 * u_xlat1.x;
    u_xlat3.xyz = u_xlat6.yzw * vec3(u_xlat21) + u_xlat3.xyz;
    u_xlat2.xyz = u_xlat2.xyz * u_xlat3.xyz;
    u_xlat21 = u_xlat8 * u_xlat8;
    u_xlat21 = u_xlat21 * u_xlat21;
    u_xlat21 = u_xlat8 * u_xlat21;
    u_xlat1.x = u_xlat15 + u_xlat15;
    u_xlat1.x = u_xlat15 * u_xlat1.x;
    u_xlat1.x = u_xlat1.x * u_xlat6.x + -0.5;
    u_xlat21 = u_xlat1.x * u_xlat21 + 1.0;
    u_xlat8 = (-u_xlat22) + 1.0;
    u_xlat15 = u_xlat8 * u_xlat8;
    u_xlat15 = u_xlat15 * u_xlat15;
    u_xlat8 = u_xlat8 * u_xlat15;
    u_xlat1.x = u_xlat1.x * u_xlat8 + 1.0;
    u_xlat21 = u_xlat21 * u_xlat1.x;
    u_xlat21 = u_xlat22 * u_xlat21;
    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    SV_Target0.xyz = u_xlat5.xyz * u_xlat0.xyz + u_xlat2.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "SPOT" "UNITY_HDR_ON" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 192
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %80 %102 %169 %175 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpMemberDecorate %78 0 BuiltIn 78 
                                                      OpMemberDecorate %78 1 BuiltIn 78 
                                                      OpMemberDecorate %78 2 BuiltIn 78 
                                                      OpDecorate %78 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 102 
                                                      OpDecorate %169 Location 169 
                                                      OpDecorate vs_TEXCOORD1 Location 175 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %16 %17 %18 %6 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 1 
                                              %24 = OpTypePointer Uniform %7 
                                          i32 %28 = OpConstant 0 
                                          i32 %36 = OpConstant 2 
                                          i32 %45 = OpConstant 3 
                               Private f32_4* %49 = OpVariable Private 
                                          u32 %76 = OpConstant 1 
                                              %77 = OpTypeArray %6 %76 
                                              %78 = OpTypeStruct %7 %6 %77 
                                              %79 = OpTypePointer Output %78 
         Output struct {f32_4; f32; f32[1];}* %80 = OpVariable Output 
                                              %82 = OpTypePointer Output %7 
                                              %84 = OpTypePointer Private %6 
                                          u32 %87 = OpConstant 0 
                                              %88 = OpTypePointer Uniform %6 
                               Private f32_4* %93 = OpVariable Private 
                                              %94 = OpTypeVector %6 3 
                                          f32 %97 = OpConstant 3.674022E-40 
                                        f32_3 %98 = OpConstantComposite %97 %97 %97 
                       Output f32_4* vs_TEXCOORD0 = OpVariable Output 
                                             %103 = OpTypeVector %6 2 
                                         f32 %158 = OpConstant 3.674022E-40 
                                         f32 %159 = OpConstant 3.674022E-40 
                                       f32_3 %160 = OpConstantComposite %158 %158 %159 
                                             %168 = OpTypePointer Input %94 
                                Input f32_3* %169 = OpVariable Input 
                                             %174 = OpTypePointer Output %94 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                                         i32 %176 = OpConstant 4 
                                             %186 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %25 = OpAccessChain %21 %23 %23 
                                        f32_4 %26 = OpLoad %25 
                                        f32_4 %27 = OpFMul %13 %26 
                                                      OpStore %9 %27 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %28 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %44 = OpLoad %9 
                               Uniform f32_4* %46 = OpAccessChain %21 %23 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_4 %48 = OpFAdd %44 %47 
                                                      OpStore %9 %48 
                                        f32_4 %50 = OpLoad %9 
                                        f32_4 %51 = OpVectorShuffle %50 %50 1 1 1 1 
                               Uniform f32_4* %52 = OpAccessChain %21 %45 %23 
                                        f32_4 %53 = OpLoad %52 
                                        f32_4 %54 = OpFMul %51 %53 
                                                      OpStore %49 %54 
                               Uniform f32_4* %55 = OpAccessChain %21 %45 %28 
                                        f32_4 %56 = OpLoad %55 
                                        f32_4 %57 = OpLoad %9 
                                        f32_4 %58 = OpVectorShuffle %57 %57 0 0 0 0 
                                        f32_4 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %49 
                                        f32_4 %61 = OpFAdd %59 %60 
                                                      OpStore %49 %61 
                               Uniform f32_4* %62 = OpAccessChain %21 %45 %36 
                                        f32_4 %63 = OpLoad %62 
                                        f32_4 %64 = OpLoad %9 
                                        f32_4 %65 = OpVectorShuffle %64 %64 2 2 2 2 
                                        f32_4 %66 = OpFMul %63 %65 
                                        f32_4 %67 = OpLoad %49 
                                        f32_4 %68 = OpFAdd %66 %67 
                                                      OpStore %49 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %45 %45 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %9 
                                        f32_4 %72 = OpVectorShuffle %71 %71 3 3 3 3 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %49 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %49 %75 
                                        f32_4 %81 = OpLoad %49 
                                Output f32_4* %83 = OpAccessChain %80 %28 
                                                      OpStore %83 %81 
                                 Private f32* %85 = OpAccessChain %49 %76 
                                          f32 %86 = OpLoad %85 
                                 Uniform f32* %89 = OpAccessChain %21 %28 %87 
                                          f32 %90 = OpLoad %89 
                                          f32 %91 = OpFMul %86 %90 
                                 Private f32* %92 = OpAccessChain %49 %76 
                                                      OpStore %92 %91 
                                        f32_4 %95 = OpLoad %49 
                                        f32_3 %96 = OpVectorShuffle %95 %95 0 3 1 
                                        f32_3 %99 = OpFMul %96 %98 
                                       f32_4 %100 = OpLoad %93 
                                       f32_4 %101 = OpVectorShuffle %100 %99 4 1 5 6 
                                                      OpStore %93 %101 
                                       f32_4 %104 = OpLoad %49 
                                       f32_2 %105 = OpVectorShuffle %104 %104 2 3 
                                       f32_4 %106 = OpLoad vs_TEXCOORD0 
                                       f32_4 %107 = OpVectorShuffle %106 %105 0 1 4 5 
                                                      OpStore vs_TEXCOORD0 %107 
                                       f32_4 %108 = OpLoad %93 
                                       f32_2 %109 = OpVectorShuffle %108 %108 2 2 
                                       f32_4 %110 = OpLoad %93 
                                       f32_2 %111 = OpVectorShuffle %110 %110 0 3 
                                       f32_2 %112 = OpFAdd %109 %111 
                                       f32_4 %113 = OpLoad vs_TEXCOORD0 
                                       f32_4 %114 = OpVectorShuffle %113 %112 4 5 2 3 
                                                      OpStore vs_TEXCOORD0 %114 
                                       f32_4 %115 = OpLoad %9 
                                       f32_3 %116 = OpVectorShuffle %115 %115 1 1 1 
                              Uniform f32_4* %117 = OpAccessChain %21 %36 %23 
                                       f32_4 %118 = OpLoad %117 
                                       f32_3 %119 = OpVectorShuffle %118 %118 0 1 2 
                                       f32_3 %120 = OpFMul %116 %119 
                                       f32_4 %121 = OpLoad %49 
                                       f32_4 %122 = OpVectorShuffle %121 %120 4 5 6 3 
                                                      OpStore %49 %122 
                              Uniform f32_4* %123 = OpAccessChain %21 %36 %28 
                                       f32_4 %124 = OpLoad %123 
                                       f32_3 %125 = OpVectorShuffle %124 %124 0 1 2 
                                       f32_4 %126 = OpLoad %9 
                                       f32_3 %127 = OpVectorShuffle %126 %126 0 0 0 
                                       f32_3 %128 = OpFMul %125 %127 
                                       f32_4 %129 = OpLoad %49 
                                       f32_3 %130 = OpVectorShuffle %129 %129 0 1 2 
                                       f32_3 %131 = OpFAdd %128 %130 
                                       f32_4 %132 = OpLoad %49 
                                       f32_4 %133 = OpVectorShuffle %132 %131 4 5 6 3 
                                                      OpStore %49 %133 
                              Uniform f32_4* %134 = OpAccessChain %21 %36 %36 
                                       f32_4 %135 = OpLoad %134 
                                       f32_3 %136 = OpVectorShuffle %135 %135 0 1 2 
                                       f32_4 %137 = OpLoad %9 
                                       f32_3 %138 = OpVectorShuffle %137 %137 2 2 2 
                                       f32_3 %139 = OpFMul %136 %138 
                                       f32_4 %140 = OpLoad %49 
                                       f32_3 %141 = OpVectorShuffle %140 %140 0 1 2 
                                       f32_3 %142 = OpFAdd %139 %141 
                                       f32_4 %143 = OpLoad %9 
                                       f32_4 %144 = OpVectorShuffle %143 %142 4 5 6 3 
                                                      OpStore %9 %144 
                              Uniform f32_4* %145 = OpAccessChain %21 %36 %45 
                                       f32_4 %146 = OpLoad %145 
                                       f32_3 %147 = OpVectorShuffle %146 %146 0 1 2 
                                       f32_4 %148 = OpLoad %9 
                                       f32_3 %149 = OpVectorShuffle %148 %148 3 3 3 
                                       f32_3 %150 = OpFMul %147 %149 
                                       f32_4 %151 = OpLoad %9 
                                       f32_3 %152 = OpVectorShuffle %151 %151 0 1 2 
                                       f32_3 %153 = OpFAdd %150 %152 
                                       f32_4 %154 = OpLoad %9 
                                       f32_4 %155 = OpVectorShuffle %154 %153 4 5 6 3 
                                                      OpStore %9 %155 
                                       f32_4 %156 = OpLoad %9 
                                       f32_3 %157 = OpVectorShuffle %156 %156 0 1 2 
                                       f32_3 %161 = OpFMul %157 %160 
                                       f32_4 %162 = OpLoad %49 
                                       f32_4 %163 = OpVectorShuffle %162 %161 4 5 6 3 
                                                      OpStore %49 %163 
                                       f32_4 %164 = OpLoad %9 
                                       f32_3 %165 = OpVectorShuffle %164 %164 0 1 2 
                                       f32_3 %166 = OpFNegate %165 
                                       f32_3 %167 = OpFMul %166 %160 
                                       f32_3 %170 = OpLoad %169 
                                       f32_3 %171 = OpFAdd %167 %170 
                                       f32_4 %172 = OpLoad %9 
                                       f32_4 %173 = OpVectorShuffle %172 %171 4 5 6 3 
                                                      OpStore %9 %173 
                                Uniform f32* %177 = OpAccessChain %21 %176 
                                         f32 %178 = OpLoad %177 
                                       f32_3 %179 = OpCompositeConstruct %178 %178 %178 
                                       f32_4 %180 = OpLoad %9 
                                       f32_3 %181 = OpVectorShuffle %180 %180 0 1 2 
                                       f32_3 %182 = OpFMul %179 %181 
                                       f32_4 %183 = OpLoad %49 
                                       f32_3 %184 = OpVectorShuffle %183 %183 0 1 2 
                                       f32_3 %185 = OpFAdd %182 %184 
                                                      OpStore vs_TEXCOORD1 %185 
                                 Output f32* %187 = OpAccessChain %80 %28 %76 
                                         f32 %188 = OpLoad %187 
                                         f32 %189 = OpFNegate %188 
                                 Output f32* %190 = OpAccessChain %80 %28 %76 
                                                      OpStore %190 %189 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 587
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %25 %43 %575 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpDecorate %13 ArrayStride 13 
                                                      OpDecorate %14 ArrayStride 14 
                                                      OpMemberDecorate %15 0 Offset 15 
                                                      OpMemberDecorate %15 1 Offset 15 
                                                      OpMemberDecorate %15 2 Offset 15 
                                                      OpMemberDecorate %15 3 Offset 15 
                                                      OpMemberDecorate %15 4 Offset 15 
                                                      OpMemberDecorate %15 5 Offset 15 
                                                      OpMemberDecorate %15 6 Offset 15 
                                                      OpDecorate %15 Block 
                                                      OpDecorate %17 DescriptorSet 17 
                                                      OpDecorate %17 Binding 17 
                                                      OpDecorate vs_TEXCOORD1 Location 25 
                                                      OpDecorate vs_TEXCOORD0 Location 43 
                                                      OpDecorate %52 DescriptorSet 52 
                                                      OpDecorate %52 Binding 52 
                                                      OpDecorate %56 DescriptorSet 56 
                                                      OpDecorate %56 Binding 56 
                                                      OpDecorate %162 DescriptorSet 162 
                                                      OpDecorate %162 Binding 162 
                                                      OpDecorate %164 DescriptorSet 164 
                                                      OpDecorate %164 Binding 164 
                                                      OpDecorate %200 DescriptorSet 200 
                                                      OpDecorate %200 Binding 200 
                                                      OpDecorate %202 DescriptorSet 202 
                                                      OpDecorate %202 Binding 202 
                                                      OpDecorate %262 DescriptorSet 262 
                                                      OpDecorate %262 Binding 262 
                                                      OpDecorate %264 DescriptorSet 264 
                                                      OpDecorate %264 Binding 264 
                                                      OpDecorate %269 DescriptorSet 269 
                                                      OpDecorate %269 Binding 269 
                                                      OpDecorate %271 DescriptorSet 271 
                                                      OpDecorate %271 Binding 271 
                                                      OpDecorate %452 DescriptorSet 452 
                                                      OpDecorate %452 Binding 452 
                                                      OpDecorate %454 DescriptorSet 454 
                                                      OpDecorate %454 Binding 454 
                                                      OpDecorate %575 Location 575 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 3 
                                              %11 = OpTypeInt 32 0 
                                          u32 %12 = OpConstant 4 
                                              %13 = OpTypeArray %7 %12 
                                              %14 = OpTypeArray %7 %12 
                                              %15 = OpTypeStruct %10 %7 %7 %13 %7 %7 %14 
                                              %16 = OpTypePointer Uniform %15 
Uniform struct {f32_3; f32_4; f32_4; f32_4[4]; f32_4; f32_4; f32_4[4];}* %17 = OpVariable Uniform 
                                              %18 = OpTypeInt 32 1 
                                          i32 %19 = OpConstant 1 
                                          u32 %20 = OpConstant 2 
                                              %21 = OpTypePointer Uniform %6 
                                              %24 = OpTypePointer Input %10 
                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                                              %26 = OpTypePointer Input %6 
                                          u32 %30 = OpConstant 0 
                                              %31 = OpTypePointer Private %6 
                                              %39 = OpTypeVector %6 2 
                                              %40 = OpTypePointer Private %39 
                               Private f32_2* %41 = OpVariable Private 
                                              %42 = OpTypePointer Input %7 
                        Input f32_4* vs_TEXCOORD0 = OpVariable Input 
                                 Private f32* %49 = OpVariable Private 
                                              %50 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %51 = OpTypePointer UniformConstant %50 
         UniformConstant read_only Texture2D* %52 = OpVariable UniformConstant 
                                              %54 = OpTypeSampler 
                                              %55 = OpTypePointer UniformConstant %54 
                     UniformConstant sampler* %56 = OpVariable UniformConstant 
                                              %58 = OpTypeSampledImage %50 
                                          i32 %63 = OpConstant 2 
                                          u32 %68 = OpConstant 1 
                                          f32 %72 = OpConstant 3.674022E-40 
                                              %82 = OpTypePointer Private %10 
                               Private f32_3* %83 = OpVariable Private 
                                          i32 %86 = OpConstant 3 
                                              %87 = OpTypePointer Uniform %7 
                                          i32 %92 = OpConstant 0 
                                             %124 = OpTypePointer Uniform %10 
                              Private f32_4* %138 = OpVariable Private 
                                         i32 %142 = OpConstant 4 
                                Private f32* %154 = OpVariable Private 
                                         u32 %158 = OpConstant 3 
        UniformConstant read_only Texture2D* %162 = OpVariable UniformConstant 
                    UniformConstant sampler* %164 = OpVariable UniformConstant 
                              Private f32_3* %171 = OpVariable Private 
                                         f32 %191 = OpConstant 3.674022E-40 
                              Private f32_4* %199 = OpVariable Private 
        UniformConstant read_only Texture2D* %200 = OpVariable UniformConstant 
                    UniformConstant sampler* %202 = OpVariable UniformConstant 
                                         f32 %212 = OpConstant 3.674022E-40 
                                       f32_3 %213 = OpConstantComposite %212 %212 %212 
                                         f32 %215 = OpConstant 3.674022E-40 
                                       f32_3 %216 = OpConstantComposite %215 %215 %215 
                                         f32 %239 = OpConstant 3.674022E-40 
                                Private f32* %241 = OpVariable Private 
                                Private f32* %248 = OpVariable Private 
        UniformConstant read_only Texture2D* %262 = OpVariable UniformConstant 
                    UniformConstant sampler* %264 = OpVariable UniformConstant 
        UniformConstant read_only Texture2D* %269 = OpVariable UniformConstant 
                    UniformConstant sampler* %271 = OpVariable UniformConstant 
                                       f32_4 %280 = OpConstantComposite %72 %72 %72 %72 
                                         f32 %290 = OpConstant 3.674022E-40 
                                Private f32* %293 = OpVariable Private 
                                Private f32* %299 = OpVariable Private 
                                         f32 %313 = OpConstant 3.674022E-40 
                                         f32 %316 = OpConstant 3.674022E-40 
                                         f32 %361 = OpConstant 3.674022E-40 
                                         f32 %364 = OpConstant 3.674022E-40 
                                         f32 %381 = OpConstant 3.674022E-40 
                                             %393 = OpTypeBool 
                                             %394 = OpTypePointer Private %393 
                               Private bool* %395 = OpVariable Private 
                                         i32 %407 = OpConstant 6 
                               Private bool* %445 = OpVariable Private 
                                Private f32* %449 = OpVariable Private 
        UniformConstant read_only Texture2D* %452 = OpVariable UniformConstant 
                    UniformConstant sampler* %454 = OpVariable UniformConstant 
                                         f32 %459 = OpConstant 3.674022E-40 
                                         i32 %475 = OpConstant 5 
                                         f32 %502 = OpConstant 3.674022E-40 
                                             %574 = OpTypePointer Output %7 
                               Output f32_4* %575 = OpVariable Output 
                                             %584 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                 Uniform f32* %22 = OpAccessChain %17 %19 %20 
                                          f32 %23 = OpLoad %22 
                                   Input f32* %27 = OpAccessChain vs_TEXCOORD1 %20 
                                          f32 %28 = OpLoad %27 
                                          f32 %29 = OpFDiv %23 %28 
                                 Private f32* %32 = OpAccessChain %9 %30 
                                                      OpStore %32 %29 
                                        f32_4 %33 = OpLoad %9 
                                        f32_3 %34 = OpVectorShuffle %33 %33 0 0 0 
                                        f32_3 %35 = OpLoad vs_TEXCOORD1 
                                        f32_3 %36 = OpFMul %34 %35 
                                        f32_4 %37 = OpLoad %9 
                                        f32_4 %38 = OpVectorShuffle %37 %36 4 5 6 3 
                                                      OpStore %9 %38 
                                        f32_4 %44 = OpLoad vs_TEXCOORD0 
                                        f32_2 %45 = OpVectorShuffle %44 %44 0 1 
                                        f32_4 %46 = OpLoad vs_TEXCOORD0 
                                        f32_2 %47 = OpVectorShuffle %46 %46 3 3 
                                        f32_2 %48 = OpFDiv %45 %47 
                                                      OpStore %41 %48 
                          read_only Texture2D %53 = OpLoad %52 
                                      sampler %57 = OpLoad %56 
                   read_only Texture2DSampled %59 = OpSampledImage %53 %57 
                                        f32_2 %60 = OpLoad %41 
                                        f32_4 %61 = OpImageSampleImplicitLod %59 %60 
                                          f32 %62 = OpCompositeExtract %61 0 
                                                      OpStore %49 %62 
                                 Uniform f32* %64 = OpAccessChain %17 %63 %30 
                                          f32 %65 = OpLoad %64 
                                          f32 %66 = OpLoad %49 
                                          f32 %67 = OpFMul %65 %66 
                                 Uniform f32* %69 = OpAccessChain %17 %63 %68 
                                          f32 %70 = OpLoad %69 
                                          f32 %71 = OpFAdd %67 %70 
                                                      OpStore %49 %71 
                                          f32 %73 = OpLoad %49 
                                          f32 %74 = OpFDiv %72 %73 
                                                      OpStore %49 %74 
                                          f32 %75 = OpLoad %49 
                                        f32_3 %76 = OpCompositeConstruct %75 %75 %75 
                                        f32_4 %77 = OpLoad %9 
                                        f32_3 %78 = OpVectorShuffle %77 %77 0 1 2 
                                        f32_3 %79 = OpFMul %76 %78 
                                        f32_4 %80 = OpLoad %9 
                                        f32_4 %81 = OpVectorShuffle %80 %79 4 5 6 3 
                                                      OpStore %9 %81 
                                        f32_4 %84 = OpLoad %9 
                                        f32_3 %85 = OpVectorShuffle %84 %84 1 1 1 
                               Uniform f32_4* %88 = OpAccessChain %17 %86 %19 
                                        f32_4 %89 = OpLoad %88 
                                        f32_3 %90 = OpVectorShuffle %89 %89 0 1 2 
                                        f32_3 %91 = OpFMul %85 %90 
                                                      OpStore %83 %91 
                               Uniform f32_4* %93 = OpAccessChain %17 %86 %92 
                                        f32_4 %94 = OpLoad %93 
                                        f32_3 %95 = OpVectorShuffle %94 %94 0 1 2 
                                        f32_4 %96 = OpLoad %9 
                                        f32_3 %97 = OpVectorShuffle %96 %96 0 0 0 
                                        f32_3 %98 = OpFMul %95 %97 
                                        f32_3 %99 = OpLoad %83 
                                       f32_3 %100 = OpFAdd %98 %99 
                                       f32_4 %101 = OpLoad %9 
                                       f32_4 %102 = OpVectorShuffle %101 %100 4 5 2 6 
                                                      OpStore %9 %102 
                              Uniform f32_4* %103 = OpAccessChain %17 %86 %63 
                                       f32_4 %104 = OpLoad %103 
                                       f32_3 %105 = OpVectorShuffle %104 %104 0 1 2 
                                       f32_4 %106 = OpLoad %9 
                                       f32_3 %107 = OpVectorShuffle %106 %106 2 2 2 
                                       f32_3 %108 = OpFMul %105 %107 
                                       f32_4 %109 = OpLoad %9 
                                       f32_3 %110 = OpVectorShuffle %109 %109 0 1 3 
                                       f32_3 %111 = OpFAdd %108 %110 
                                       f32_4 %112 = OpLoad %9 
                                       f32_4 %113 = OpVectorShuffle %112 %111 4 5 6 3 
                                                      OpStore %9 %113 
                                       f32_4 %114 = OpLoad %9 
                                       f32_3 %115 = OpVectorShuffle %114 %114 0 1 2 
                              Uniform f32_4* %116 = OpAccessChain %17 %86 %86 
                                       f32_4 %117 = OpLoad %116 
                                       f32_3 %118 = OpVectorShuffle %117 %117 0 1 2 
                                       f32_3 %119 = OpFAdd %115 %118 
                                       f32_4 %120 = OpLoad %9 
                                       f32_4 %121 = OpVectorShuffle %120 %119 4 5 6 3 
                                                      OpStore %9 %121 
                                       f32_4 %122 = OpLoad %9 
                                       f32_3 %123 = OpVectorShuffle %122 %122 0 1 2 
                              Uniform f32_3* %125 = OpAccessChain %17 %92 
                                       f32_3 %126 = OpLoad %125 
                                       f32_3 %127 = OpFNegate %126 
                                       f32_3 %128 = OpFAdd %123 %127 
                                                      OpStore %83 %128 
                                       f32_3 %129 = OpLoad %83 
                                       f32_3 %130 = OpLoad %83 
                                         f32 %131 = OpDot %129 %130 
                                                      OpStore %49 %131 
                                         f32 %132 = OpLoad %49 
                                         f32 %133 = OpExtInst %1 32 %132 
                                                      OpStore %49 %133 
                                         f32 %134 = OpLoad %49 
                                       f32_3 %135 = OpCompositeConstruct %134 %134 %134 
                                       f32_3 %136 = OpLoad %83 
                                       f32_3 %137 = OpFMul %135 %136 
                                                      OpStore %83 %137 
                                       f32_4 %139 = OpLoad %9 
                                       f32_3 %140 = OpVectorShuffle %139 %139 0 1 2 
                                       f32_3 %141 = OpFNegate %140 
                              Uniform f32_4* %143 = OpAccessChain %17 %142 
                                       f32_4 %144 = OpLoad %143 
                                       f32_3 %145 = OpVectorShuffle %144 %144 0 1 2 
                                       f32_3 %146 = OpFAdd %141 %145 
                                       f32_4 %147 = OpLoad %138 
                                       f32_4 %148 = OpVectorShuffle %147 %146 4 5 6 3 
                                                      OpStore %138 %148 
                                       f32_4 %149 = OpLoad %138 
                                       f32_3 %150 = OpVectorShuffle %149 %149 0 1 2 
                                       f32_4 %151 = OpLoad %138 
                                       f32_3 %152 = OpVectorShuffle %151 %151 0 1 2 
                                         f32 %153 = OpDot %150 %152 
                                                      OpStore %49 %153 
                                         f32 %155 = OpLoad %49 
                                         f32 %156 = OpExtInst %1 32 %155 
                                                      OpStore %154 %156 
                                         f32 %157 = OpLoad %49 
                                Uniform f32* %159 = OpAccessChain %17 %142 %158 
                                         f32 %160 = OpLoad %159 
                                         f32 %161 = OpFMul %157 %160 
                                                      OpStore %49 %161 
                         read_only Texture2D %163 = OpLoad %162 
                                     sampler %165 = OpLoad %164 
                  read_only Texture2DSampled %166 = OpSampledImage %163 %165 
                                         f32 %167 = OpLoad %49 
                                       f32_2 %168 = OpCompositeConstruct %167 %167 
                                       f32_4 %169 = OpImageSampleImplicitLod %166 %168 
                                         f32 %170 = OpCompositeExtract %169 0 
                                                      OpStore %49 %170 
                                       f32_4 %172 = OpLoad %138 
                                       f32_3 %173 = OpVectorShuffle %172 %172 0 1 2 
                                         f32 %174 = OpLoad %154 
                                       f32_3 %175 = OpCompositeConstruct %174 %174 %174 
                                       f32_3 %176 = OpFMul %173 %175 
                                       f32_3 %177 = OpLoad %83 
                                       f32_3 %178 = OpFNegate %177 
                                       f32_3 %179 = OpFAdd %176 %178 
                                                      OpStore %171 %179 
                                         f32 %180 = OpLoad %154 
                                       f32_3 %181 = OpCompositeConstruct %180 %180 %180 
                                       f32_4 %182 = OpLoad %138 
                                       f32_3 %183 = OpVectorShuffle %182 %182 0 1 2 
                                       f32_3 %184 = OpFMul %181 %183 
                                       f32_4 %185 = OpLoad %138 
                                       f32_4 %186 = OpVectorShuffle %185 %184 4 5 6 3 
                                                      OpStore %138 %186 
                                       f32_3 %187 = OpLoad %171 
                                       f32_3 %188 = OpLoad %171 
                                         f32 %189 = OpDot %187 %188 
                                                      OpStore %154 %189 
                                         f32 %190 = OpLoad %154 
                                         f32 %192 = OpExtInst %1 40 %190 %191 
                                                      OpStore %154 %192 
                                         f32 %193 = OpLoad %154 
                                         f32 %194 = OpExtInst %1 32 %193 
                                                      OpStore %154 %194 
                                         f32 %195 = OpLoad %154 
                                       f32_3 %196 = OpCompositeConstruct %195 %195 %195 
                                       f32_3 %197 = OpLoad %171 
                                       f32_3 %198 = OpFMul %196 %197 
                                                      OpStore %171 %198 
                         read_only Texture2D %201 = OpLoad %200 
                                     sampler %203 = OpLoad %202 
                  read_only Texture2DSampled %204 = OpSampledImage %201 %203 
                                       f32_2 %205 = OpLoad %41 
                                       f32_4 %206 = OpImageSampleImplicitLod %204 %205 
                                       f32_3 %207 = OpVectorShuffle %206 %206 0 1 2 
                                       f32_4 %208 = OpLoad %199 
                                       f32_4 %209 = OpVectorShuffle %208 %207 4 5 6 3 
                                                      OpStore %199 %209 
                                       f32_4 %210 = OpLoad %199 
                                       f32_3 %211 = OpVectorShuffle %210 %210 0 1 2 
                                       f32_3 %214 = OpFMul %211 %213 
                                       f32_3 %217 = OpFAdd %214 %216 
                                       f32_4 %218 = OpLoad %199 
                                       f32_4 %219 = OpVectorShuffle %218 %217 4 5 6 3 
                                                      OpStore %199 %219 
                                       f32_4 %220 = OpLoad %199 
                                       f32_3 %221 = OpVectorShuffle %220 %220 0 1 2 
                                       f32_4 %222 = OpLoad %199 
                                       f32_3 %223 = OpVectorShuffle %222 %222 0 1 2 
                                         f32 %224 = OpDot %221 %223 
                                                      OpStore %154 %224 
                                         f32 %225 = OpLoad %154 
                                         f32 %226 = OpExtInst %1 32 %225 
                                                      OpStore %154 %226 
                                         f32 %227 = OpLoad %154 
                                       f32_3 %228 = OpCompositeConstruct %227 %227 %227 
                                       f32_4 %229 = OpLoad %199 
                                       f32_3 %230 = OpVectorShuffle %229 %229 0 1 2 
                                       f32_3 %231 = OpFMul %228 %230 
                                       f32_4 %232 = OpLoad %199 
                                       f32_4 %233 = OpVectorShuffle %232 %231 4 5 6 3 
                                                      OpStore %199 %233 
                                       f32_4 %234 = OpLoad %199 
                                       f32_3 %235 = OpVectorShuffle %234 %234 0 1 2 
                                       f32_3 %236 = OpLoad %171 
                                         f32 %237 = OpDot %235 %236 
                                                      OpStore %154 %237 
                                         f32 %238 = OpLoad %154 
                                         f32 %240 = OpExtInst %1 43 %238 %239 %72 
                                                      OpStore %154 %240 
                                       f32_4 %242 = OpLoad %138 
                                       f32_3 %243 = OpVectorShuffle %242 %242 0 1 2 
                                       f32_3 %244 = OpLoad %171 
                                         f32 %245 = OpDot %243 %244 
                                                      OpStore %241 %245 
                                         f32 %246 = OpLoad %241 
                                         f32 %247 = OpExtInst %1 43 %246 %239 %72 
                                                      OpStore %241 %247 
                                       f32_4 %249 = OpLoad %199 
                                       f32_3 %250 = OpVectorShuffle %249 %249 0 1 2 
                                       f32_4 %251 = OpLoad %138 
                                       f32_3 %252 = OpVectorShuffle %251 %251 0 1 2 
                                         f32 %253 = OpDot %250 %252 
                                                      OpStore %248 %253 
                                         f32 %254 = OpLoad %248 
                                         f32 %255 = OpExtInst %1 43 %254 %239 %72 
                                                      OpStore %248 %255 
                                       f32_4 %256 = OpLoad %199 
                                       f32_3 %257 = OpVectorShuffle %256 %256 0 1 2 
                                       f32_3 %258 = OpLoad %83 
                                       f32_3 %259 = OpFNegate %258 
                                         f32 %260 = OpDot %257 %259 
                                Private f32* %261 = OpAccessChain %83 %30 
                                                      OpStore %261 %260 
                         read_only Texture2D %263 = OpLoad %262 
                                     sampler %265 = OpLoad %264 
                  read_only Texture2DSampled %266 = OpSampledImage %263 %265 
                                       f32_2 %267 = OpLoad %41 
                                       f32_4 %268 = OpImageSampleImplicitLod %266 %267 
                                                      OpStore %138 %268 
                         read_only Texture2D %270 = OpLoad %269 
                                     sampler %272 = OpLoad %271 
                  read_only Texture2DSampled %273 = OpSampledImage %270 %272 
                                       f32_2 %274 = OpLoad %41 
                                       f32_4 %275 = OpImageSampleImplicitLod %273 %274 
                                       f32_3 %276 = OpVectorShuffle %275 %275 0 1 2 
                                                      OpStore %171 %276 
                                       f32_4 %277 = OpLoad %138 
                                       f32_4 %278 = OpVectorShuffle %277 %277 3 0 1 2 
                                       f32_4 %279 = OpFNegate %278 
                                       f32_4 %281 = OpFAdd %279 %280 
                                                      OpStore %199 %281 
                                Private f32* %282 = OpAccessChain %199 %30 
                                         f32 %283 = OpLoad %282 
                                Private f32* %284 = OpAccessChain %199 %30 
                                         f32 %285 = OpLoad %284 
                                         f32 %286 = OpFMul %283 %285 
                                Private f32* %287 = OpAccessChain %41 %30 
                                                      OpStore %287 %286 
                                Private f32* %288 = OpAccessChain %41 %30 
                                         f32 %289 = OpLoad %288 
                                         f32 %291 = OpExtInst %1 40 %289 %290 
                                Private f32* %292 = OpAccessChain %41 %30 
                                                      OpStore %292 %291 
                                Private f32* %294 = OpAccessChain %41 %30 
                                         f32 %295 = OpLoad %294 
                                Private f32* %296 = OpAccessChain %41 %30 
                                         f32 %297 = OpLoad %296 
                                         f32 %298 = OpFMul %295 %297 
                                                      OpStore %293 %298 
                                         f32 %300 = OpLoad %154 
                                         f32 %301 = OpLoad %293 
                                         f32 %302 = OpFMul %300 %301 
                                         f32 %303 = OpLoad %154 
                                         f32 %304 = OpFNegate %303 
                                         f32 %305 = OpFAdd %302 %304 
                                                      OpStore %299 %305 
                                         f32 %306 = OpLoad %299 
                                         f32 %307 = OpLoad %154 
                                         f32 %308 = OpFMul %306 %307 
                                         f32 %309 = OpFAdd %308 %72 
                                                      OpStore %154 %309 
                                         f32 %310 = OpLoad %154 
                                         f32 %311 = OpLoad %154 
                                         f32 %312 = OpFMul %310 %311 
                                         f32 %314 = OpFAdd %312 %313 
                                                      OpStore %154 %314 
                                         f32 %315 = OpLoad %293 
                                         f32 %317 = OpFMul %315 %316 
                                                      OpStore %293 %317 
                                         f32 %318 = OpLoad %293 
                                         f32 %319 = OpLoad %154 
                                         f32 %320 = OpFDiv %318 %319 
                                                      OpStore %293 %320 
                                Private f32* %321 = OpAccessChain %41 %30 
                                         f32 %322 = OpLoad %321 
                                         f32 %323 = OpFNegate %322 
                                         f32 %324 = OpFAdd %323 %72 
                                                      OpStore %154 %324 
                                Private f32* %325 = OpAccessChain %83 %30 
                                         f32 %326 = OpLoad %325 
                                         f32 %327 = OpExtInst %1 4 %326 
                                         f32 %328 = OpLoad %154 
                                         f32 %329 = OpFMul %327 %328 
                                Private f32* %330 = OpAccessChain %41 %30 
                                         f32 %331 = OpLoad %330 
                                         f32 %332 = OpFAdd %329 %331 
                                                      OpStore %299 %332 
                                         f32 %333 = OpLoad %248 
                                         f32 %334 = OpLoad %154 
                                         f32 %335 = OpFMul %333 %334 
                                Private f32* %336 = OpAccessChain %41 %30 
                                         f32 %337 = OpLoad %336 
                                         f32 %338 = OpFAdd %335 %337 
                                Private f32* %339 = OpAccessChain %41 %30 
                                                      OpStore %339 %338 
                                Private f32* %340 = OpAccessChain %41 %30 
                                         f32 %341 = OpLoad %340 
                                Private f32* %342 = OpAccessChain %83 %30 
                                         f32 %343 = OpLoad %342 
                                         f32 %344 = OpExtInst %1 4 %343 
                                         f32 %345 = OpFMul %341 %344 
                                Private f32* %346 = OpAccessChain %41 %30 
                                                      OpStore %346 %345 
                                Private f32* %347 = OpAccessChain %83 %30 
                                         f32 %348 = OpLoad %347 
                                         f32 %349 = OpExtInst %1 4 %348 
                                         f32 %350 = OpFNegate %349 
                                         f32 %351 = OpFAdd %350 %72 
                                                      OpStore %154 %351 
                                         f32 %352 = OpLoad %248 
                                         f32 %353 = OpLoad %299 
                                         f32 %354 = OpFMul %352 %353 
                                Private f32* %355 = OpAccessChain %41 %30 
                                         f32 %356 = OpLoad %355 
                                         f32 %357 = OpFAdd %354 %356 
                                Private f32* %358 = OpAccessChain %41 %30 
                                                      OpStore %358 %357 
                                Private f32* %359 = OpAccessChain %41 %30 
                                         f32 %360 = OpLoad %359 
                                         f32 %362 = OpFAdd %360 %361 
                                Private f32* %363 = OpAccessChain %41 %30 
                                                      OpStore %363 %362 
                                Private f32* %365 = OpAccessChain %41 %30 
                                         f32 %366 = OpLoad %365 
                                         f32 %367 = OpFDiv %364 %366 
                                Private f32* %368 = OpAccessChain %41 %30 
                                                      OpStore %368 %367 
                                         f32 %369 = OpLoad %293 
                                Private f32* %370 = OpAccessChain %41 %30 
                                         f32 %371 = OpLoad %370 
                                         f32 %372 = OpFMul %369 %371 
                                Private f32* %373 = OpAccessChain %41 %30 
                                                      OpStore %373 %372 
                                         f32 %374 = OpLoad %248 
                                Private f32* %375 = OpAccessChain %41 %30 
                                         f32 %376 = OpLoad %375 
                                         f32 %377 = OpFMul %374 %376 
                                Private f32* %378 = OpAccessChain %41 %30 
                                                      OpStore %378 %377 
                                Private f32* %379 = OpAccessChain %41 %30 
                                         f32 %380 = OpLoad %379 
                                         f32 %382 = OpFMul %380 %381 
                                Private f32* %383 = OpAccessChain %41 %30 
                                                      OpStore %383 %382 
                                Private f32* %384 = OpAccessChain %41 %30 
                                         f32 %385 = OpLoad %384 
                                         f32 %386 = OpExtInst %1 40 %385 %239 
                                Private f32* %387 = OpAccessChain %41 %30 
                                                      OpStore %387 %386 
                                       f32_4 %388 = OpLoad %138 
                                       f32_3 %389 = OpVectorShuffle %388 %388 0 1 2 
                                       f32_4 %390 = OpLoad %138 
                                       f32_3 %391 = OpVectorShuffle %390 %390 0 1 2 
                                         f32 %392 = OpDot %389 %391 
                                                      OpStore %293 %392 
                                         f32 %396 = OpLoad %293 
                                        bool %397 = OpFOrdNotEqual %396 %239 
                                                      OpStore %395 %397 
                                        bool %398 = OpLoad %395 
                                         f32 %399 = OpSelect %398 %72 %239 
                                                      OpStore %293 %399 
                                         f32 %400 = OpLoad %293 
                                Private f32* %401 = OpAccessChain %41 %30 
                                         f32 %402 = OpLoad %401 
                                         f32 %403 = OpFMul %400 %402 
                                Private f32* %404 = OpAccessChain %41 %30 
                                                      OpStore %404 %403 
                                       f32_4 %405 = OpLoad %9 
                                       f32_3 %406 = OpVectorShuffle %405 %405 1 1 1 
                              Uniform f32_4* %408 = OpAccessChain %17 %407 %19 
                                       f32_4 %409 = OpLoad %408 
                                       f32_3 %410 = OpVectorShuffle %409 %409 0 1 3 
                                       f32_3 %411 = OpFMul %406 %410 
                                                      OpStore %83 %411 
                              Uniform f32_4* %412 = OpAccessChain %17 %407 %92 
                                       f32_4 %413 = OpLoad %412 
                                       f32_3 %414 = OpVectorShuffle %413 %413 0 1 3 
                                       f32_4 %415 = OpLoad %9 
                                       f32_3 %416 = OpVectorShuffle %415 %415 0 0 0 
                                       f32_3 %417 = OpFMul %414 %416 
                                       f32_3 %418 = OpLoad %83 
                                       f32_3 %419 = OpFAdd %417 %418 
                                                      OpStore %83 %419 
                              Uniform f32_4* %420 = OpAccessChain %17 %407 %63 
                                       f32_4 %421 = OpLoad %420 
                                       f32_3 %422 = OpVectorShuffle %421 %421 0 1 3 
                                       f32_4 %423 = OpLoad %9 
                                       f32_3 %424 = OpVectorShuffle %423 %423 2 2 2 
                                       f32_3 %425 = OpFMul %422 %424 
                                       f32_3 %426 = OpLoad %83 
                                       f32_3 %427 = OpFAdd %425 %426 
                                       f32_4 %428 = OpLoad %9 
                                       f32_4 %429 = OpVectorShuffle %428 %427 4 5 6 3 
                                                      OpStore %9 %429 
                                       f32_4 %430 = OpLoad %9 
                                       f32_3 %431 = OpVectorShuffle %430 %430 0 1 2 
                              Uniform f32_4* %432 = OpAccessChain %17 %407 %86 
                                       f32_4 %433 = OpLoad %432 
                                       f32_3 %434 = OpVectorShuffle %433 %433 0 1 3 
                                       f32_3 %435 = OpFAdd %431 %434 
                                       f32_4 %436 = OpLoad %9 
                                       f32_4 %437 = OpVectorShuffle %436 %435 4 5 6 3 
                                                      OpStore %9 %437 
                                       f32_4 %438 = OpLoad %9 
                                       f32_2 %439 = OpVectorShuffle %438 %438 0 1 
                                       f32_4 %440 = OpLoad %9 
                                       f32_2 %441 = OpVectorShuffle %440 %440 2 2 
                                       f32_2 %442 = OpFDiv %439 %441 
                                       f32_4 %443 = OpLoad %9 
                                       f32_4 %444 = OpVectorShuffle %443 %442 4 5 2 3 
                                                      OpStore %9 %444 
                                Private f32* %446 = OpAccessChain %9 %20 
                                         f32 %447 = OpLoad %446 
                                        bool %448 = OpFOrdLessThan %447 %239 
                                                      OpStore %445 %448 
                                        bool %450 = OpLoad %445 
                                         f32 %451 = OpSelect %450 %72 %239 
                                                      OpStore %449 %451 
                         read_only Texture2D %453 = OpLoad %452 
                                     sampler %455 = OpLoad %454 
                  read_only Texture2DSampled %456 = OpSampledImage %453 %455 
                                       f32_4 %457 = OpLoad %9 
                                       f32_2 %458 = OpVectorShuffle %457 %457 0 1 
                                       f32_4 %460 = OpImageSampleImplicitLod %456 %458 Bias %7 
                                         f32 %461 = OpCompositeExtract %460 3 
                                Private f32* %462 = OpAccessChain %9 %30 
                                                      OpStore %462 %461 
                                         f32 %463 = OpLoad %449 
                                Private f32* %464 = OpAccessChain %9 %30 
                                         f32 %465 = OpLoad %464 
                                         f32 %466 = OpFMul %463 %465 
                                Private f32* %467 = OpAccessChain %9 %30 
                                                      OpStore %467 %466 
                                         f32 %468 = OpLoad %49 
                                Private f32* %469 = OpAccessChain %9 %30 
                                         f32 %470 = OpLoad %469 
                                         f32 %471 = OpFMul %468 %470 
                                Private f32* %472 = OpAccessChain %9 %30 
                                                      OpStore %472 %471 
                                       f32_4 %473 = OpLoad %9 
                                       f32_3 %474 = OpVectorShuffle %473 %473 0 0 0 
                              Uniform f32_4* %476 = OpAccessChain %17 %475 
                                       f32_4 %477 = OpLoad %476 
                                       f32_3 %478 = OpVectorShuffle %477 %477 0 1 2 
                                       f32_3 %479 = OpFMul %474 %478 
                                       f32_4 %480 = OpLoad %9 
                                       f32_4 %481 = OpVectorShuffle %480 %479 4 5 6 3 
                                                      OpStore %9 %481 
                                       f32_4 %482 = OpLoad %9 
                                       f32_3 %483 = OpVectorShuffle %482 %482 0 1 2 
                                       f32_2 %484 = OpLoad %41 
                                       f32_3 %485 = OpVectorShuffle %484 %484 0 0 0 
                                       f32_3 %486 = OpFMul %483 %485 
                                                      OpStore %83 %486 
                                         f32 %487 = OpLoad %241 
                                         f32 %488 = OpFNegate %487 
                                         f32 %489 = OpFAdd %488 %72 
                                                      OpStore %49 %489 
                                         f32 %490 = OpLoad %241 
                                         f32 %491 = OpLoad %241 
                                         f32 %492 = OpFMul %490 %491 
                                Private f32* %493 = OpAccessChain %41 %30 
                                                      OpStore %493 %492 
                                       f32_2 %494 = OpLoad %41 
                                       f32_2 %495 = OpVectorShuffle %494 %494 0 0 
                                       f32_4 %496 = OpLoad %199 
                                       f32_2 %497 = OpVectorShuffle %496 %496 0 0 
                                         f32 %498 = OpDot %495 %497 
                                Private f32* %499 = OpAccessChain %41 %30 
                                                      OpStore %499 %498 
                                Private f32* %500 = OpAccessChain %41 %30 
                                         f32 %501 = OpLoad %500 
                                         f32 %503 = OpFAdd %501 %502 
                                Private f32* %504 = OpAccessChain %41 %30 
                                                      OpStore %504 %503 
                                         f32 %505 = OpLoad %49 
                                         f32 %506 = OpLoad %49 
                                         f32 %507 = OpFMul %505 %506 
                                                      OpStore %293 %507 
                                         f32 %508 = OpLoad %293 
                                         f32 %509 = OpLoad %293 
                                         f32 %510 = OpFMul %508 %509 
                                                      OpStore %293 %510 
                                         f32 %511 = OpLoad %49 
                                         f32 %512 = OpLoad %293 
                                         f32 %513 = OpFMul %511 %512 
                                                      OpStore %49 %513 
                                       f32_4 %514 = OpLoad %199 
                                       f32_3 %515 = OpVectorShuffle %514 %514 1 2 3 
                                         f32 %516 = OpLoad %49 
                                       f32_3 %517 = OpCompositeConstruct %516 %516 %516 
                                       f32_3 %518 = OpFMul %515 %517 
                                       f32_4 %519 = OpLoad %138 
                                       f32_3 %520 = OpVectorShuffle %519 %519 0 1 2 
                                       f32_3 %521 = OpFAdd %518 %520 
                                       f32_4 %522 = OpLoad %138 
                                       f32_4 %523 = OpVectorShuffle %522 %521 4 5 6 3 
                                                      OpStore %138 %523 
                                       f32_3 %524 = OpLoad %83 
                                       f32_4 %525 = OpLoad %138 
                                       f32_3 %526 = OpVectorShuffle %525 %525 0 1 2 
                                       f32_3 %527 = OpFMul %524 %526 
                                                      OpStore %83 %527 
                                         f32 %528 = OpLoad %154 
                                         f32 %529 = OpLoad %154 
                                         f32 %530 = OpFMul %528 %529 
                                                      OpStore %49 %530 
                                         f32 %531 = OpLoad %49 
                                         f32 %532 = OpLoad %49 
                                         f32 %533 = OpFMul %531 %532 
                                                      OpStore %49 %533 
                                         f32 %534 = OpLoad %154 
                                         f32 %535 = OpLoad %49 
                                         f32 %536 = OpFMul %534 %535 
                                                      OpStore %49 %536 
                                Private f32* %537 = OpAccessChain %41 %30 
                                         f32 %538 = OpLoad %537 
                                         f32 %539 = OpLoad %49 
                                         f32 %540 = OpFMul %538 %539 
                                         f32 %541 = OpFAdd %540 %72 
                                                      OpStore %49 %541 
                                         f32 %542 = OpLoad %248 
                                         f32 %543 = OpFNegate %542 
                                         f32 %544 = OpFAdd %543 %72 
                                                      OpStore %293 %544 
                                         f32 %545 = OpLoad %293 
                                         f32 %546 = OpLoad %293 
                                         f32 %547 = OpFMul %545 %546 
                                                      OpStore %154 %547 
                                         f32 %548 = OpLoad %154 
                                         f32 %549 = OpLoad %154 
                                         f32 %550 = OpFMul %548 %549 
                                                      OpStore %154 %550 
                                         f32 %551 = OpLoad %293 
                                         f32 %552 = OpLoad %154 
                                         f32 %553 = OpFMul %551 %552 
                                                      OpStore %293 %553 
                                Private f32* %554 = OpAccessChain %41 %30 
                                         f32 %555 = OpLoad %554 
                                         f32 %556 = OpLoad %293 
                                         f32 %557 = OpFMul %555 %556 
                                         f32 %558 = OpFAdd %557 %72 
                                Private f32* %559 = OpAccessChain %41 %30 
                                                      OpStore %559 %558 
                                         f32 %560 = OpLoad %49 
                                Private f32* %561 = OpAccessChain %41 %30 
                                         f32 %562 = OpLoad %561 
                                         f32 %563 = OpFMul %560 %562 
                                                      OpStore %49 %563 
                                         f32 %564 = OpLoad %248 
                                         f32 %565 = OpLoad %49 
                                         f32 %566 = OpFMul %564 %565 
                                                      OpStore %49 %566 
                                         f32 %567 = OpLoad %49 
                                       f32_3 %568 = OpCompositeConstruct %567 %567 %567 
                                       f32_4 %569 = OpLoad %9 
                                       f32_3 %570 = OpVectorShuffle %569 %569 0 1 2 
                                       f32_3 %571 = OpFMul %568 %570 
                                       f32_4 %572 = OpLoad %9 
                                       f32_4 %573 = OpVectorShuffle %572 %571 4 5 6 3 
                                                      OpStore %9 %573 
                                       f32_3 %576 = OpLoad %171 
                                       f32_4 %577 = OpLoad %9 
                                       f32_3 %578 = OpVectorShuffle %577 %577 0 1 2 
                                       f32_3 %579 = OpFMul %576 %578 
                                       f32_3 %580 = OpLoad %83 
                                       f32_3 %581 = OpFAdd %579 %580 
                                       f32_4 %582 = OpLoad %575 
                                       f32_4 %583 = OpVectorShuffle %582 %581 4 5 6 3 
                                                      OpStore %575 %583 
                                 Output f32* %585 = OpAccessChain %575 %158 
                                                      OpStore %585 %72 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "POINT_COOKIE" "UNITY_HDR_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "POINT_COOKIE" "UNITY_HDR_ON" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
UNITY_LOCATION(0) uniform  sampler2D _CameraDepthTexture;
UNITY_LOCATION(1) uniform  sampler2D _LightTextureB0;
UNITY_LOCATION(2) uniform  samplerCube _LightTexture0;
UNITY_LOCATION(3) uniform  sampler2D _CameraGBufferTexture0;
UNITY_LOCATION(4) uniform  sampler2D _CameraGBufferTexture1;
UNITY_LOCATION(5) uniform  sampler2D _CameraGBufferTexture2;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec2 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
vec4 u_xlat6;
float u_xlat8;
float u_xlat9;
vec3 u_xlat11;
float u_xlat15;
float u_xlat21;
float u_xlat22;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat2 = texture(_CameraDepthTexture, u_xlat1.xy);
    u_xlat21 = _ZBufferParams.x * u_xlat2.x + _ZBufferParams.y;
    u_xlat21 = float(1.0) / u_xlat21;
    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat0.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat2.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat0.xyz + (-_LightPos.xyz);
    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat15 = inversesqrt(u_xlat21);
    u_xlat21 = u_xlat21 * _LightPos.w;
    u_xlat4 = texture(_LightTextureB0, vec2(u_xlat21));
    u_xlat11.xyz = (-u_xlat3.xyz) * vec3(u_xlat15) + (-u_xlat2.xyz);
    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz;
    u_xlat21 = dot(u_xlat11.xyz, u_xlat11.xyz);
    u_xlat21 = max(u_xlat21, 0.00100000005);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat11.xyz = vec3(u_xlat21) * u_xlat11.xyz;
    u_xlat5 = texture(_CameraGBufferTexture2, u_xlat1.xy);
    u_xlat5.xyz = u_xlat5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat21 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat5.xyz = vec3(u_xlat21) * u_xlat5.xyz;
    u_xlat21 = dot(u_xlat5.xyz, u_xlat11.xyz);
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
    u_xlat15 = dot((-u_xlat3.xyz), u_xlat11.xyz);
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
    u_xlat22 = dot(u_xlat5.xyz, (-u_xlat3.xyz));
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
    u_xlat2.x = dot(u_xlat5.xyz, (-u_xlat2.xyz));
    u_xlat3 = texture(_CameraGBufferTexture1, u_xlat1.xy);
    u_xlat5 = texture(_CameraGBufferTexture0, u_xlat1.xy);
    u_xlat6 = (-u_xlat3.wxyz) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat1.x = u_xlat6.x * u_xlat6.x;
    u_xlat1.x = max(u_xlat1.x, 0.00200000009);
    u_xlat8 = u_xlat1.x * u_xlat1.x;
    u_xlat9 = u_xlat21 * u_xlat8 + (-u_xlat21);
    u_xlat21 = u_xlat9 * u_xlat21 + 1.0;
    u_xlat21 = u_xlat21 * u_xlat21 + 1.00000001e-07;
    u_xlat8 = u_xlat8 * 0.318309873;
    u_xlat21 = u_xlat8 / u_xlat21;
    u_xlat8 = (-u_xlat1.x) + 1.0;
    u_xlat9 = abs(u_xlat2.x) * u_xlat8 + u_xlat1.x;
    u_xlat1.x = u_xlat22 * u_xlat8 + u_xlat1.x;
    u_xlat1.x = u_xlat1.x * abs(u_xlat2.x);
    u_xlat8 = -abs(u_xlat2.x) + 1.0;
    u_xlat1.x = u_xlat22 * u_xlat9 + u_xlat1.x;
    u_xlat1.x = u_xlat1.x + 9.99999975e-06;
    u_xlat1.x = 0.5 / u_xlat1.x;
    u_xlat21 = u_xlat21 * u_xlat1.x;
    u_xlat21 = u_xlat21 * 3.14159274;
    u_xlat21 = u_xlat22 * u_xlat21;
    u_xlat21 = max(u_xlat21, 0.0);
    u_xlat1.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlatb1 = u_xlat1.x!=0.0;
    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
    u_xlat21 = u_xlat21 * u_xlat1.x;
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlat2 = texture(_LightTexture0, u_xlat0.xyz, -8.0);
    u_xlat0.x = u_xlat2.w * u_xlat4.x;
    u_xlat0.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat2.xyz = u_xlat0.xyz * vec3(u_xlat21);
    u_xlat21 = (-u_xlat15) + 1.0;
    u_xlat1.x = u_xlat21 * u_xlat21;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat21 = u_xlat21 * u_xlat1.x;
    u_xlat3.xyz = u_xlat6.yzw * vec3(u_xlat21) + u_xlat3.xyz;
    u_xlat2.xyz = u_xlat2.xyz * u_xlat3.xyz;
    u_xlat21 = u_xlat8 * u_xlat8;
    u_xlat21 = u_xlat21 * u_xlat21;
    u_xlat21 = u_xlat8 * u_xlat21;
    u_xlat1.x = u_xlat15 + u_xlat15;
    u_xlat1.x = u_xlat15 * u_xlat1.x;
    u_xlat1.x = u_xlat1.x * u_xlat6.x + -0.5;
    u_xlat21 = u_xlat1.x * u_xlat21 + 1.0;
    u_xlat8 = (-u_xlat22) + 1.0;
    u_xlat15 = u_xlat8 * u_xlat8;
    u_xlat15 = u_xlat15 * u_xlat15;
    u_xlat8 = u_xlat8 * u_xlat15;
    u_xlat1.x = u_xlat1.x * u_xlat8 + 1.0;
    u_xlat21 = u_xlat21 * u_xlat1.x;
    u_xlat21 = u_xlat22 * u_xlat21;
    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    SV_Target0.xyz = u_xlat5.xyz * u_xlat0.xyz + u_xlat2.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "POINT_COOKIE" "UNITY_HDR_ON" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 192
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %80 %102 %169 %175 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpMemberDecorate %78 0 BuiltIn 78 
                                                      OpMemberDecorate %78 1 BuiltIn 78 
                                                      OpMemberDecorate %78 2 BuiltIn 78 
                                                      OpDecorate %78 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 102 
                                                      OpDecorate %169 Location 169 
                                                      OpDecorate vs_TEXCOORD1 Location 175 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %16 %17 %18 %6 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 1 
                                              %24 = OpTypePointer Uniform %7 
                                          i32 %28 = OpConstant 0 
                                          i32 %36 = OpConstant 2 
                                          i32 %45 = OpConstant 3 
                               Private f32_4* %49 = OpVariable Private 
                                          u32 %76 = OpConstant 1 
                                              %77 = OpTypeArray %6 %76 
                                              %78 = OpTypeStruct %7 %6 %77 
                                              %79 = OpTypePointer Output %78 
         Output struct {f32_4; f32; f32[1];}* %80 = OpVariable Output 
                                              %82 = OpTypePointer Output %7 
                                              %84 = OpTypePointer Private %6 
                                          u32 %87 = OpConstant 0 
                                              %88 = OpTypePointer Uniform %6 
                               Private f32_4* %93 = OpVariable Private 
                                              %94 = OpTypeVector %6 3 
                                          f32 %97 = OpConstant 3.674022E-40 
                                        f32_3 %98 = OpConstantComposite %97 %97 %97 
                       Output f32_4* vs_TEXCOORD0 = OpVariable Output 
                                             %103 = OpTypeVector %6 2 
                                         f32 %158 = OpConstant 3.674022E-40 
                                         f32 %159 = OpConstant 3.674022E-40 
                                       f32_3 %160 = OpConstantComposite %158 %158 %159 
                                             %168 = OpTypePointer Input %94 
                                Input f32_3* %169 = OpVariable Input 
                                             %174 = OpTypePointer Output %94 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                                         i32 %176 = OpConstant 4 
                                             %186 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %25 = OpAccessChain %21 %23 %23 
                                        f32_4 %26 = OpLoad %25 
                                        f32_4 %27 = OpFMul %13 %26 
                                                      OpStore %9 %27 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %28 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %44 = OpLoad %9 
                               Uniform f32_4* %46 = OpAccessChain %21 %23 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_4 %48 = OpFAdd %44 %47 
                                                      OpStore %9 %48 
                                        f32_4 %50 = OpLoad %9 
                                        f32_4 %51 = OpVectorShuffle %50 %50 1 1 1 1 
                               Uniform f32_4* %52 = OpAccessChain %21 %45 %23 
                                        f32_4 %53 = OpLoad %52 
                                        f32_4 %54 = OpFMul %51 %53 
                                                      OpStore %49 %54 
                               Uniform f32_4* %55 = OpAccessChain %21 %45 %28 
                                        f32_4 %56 = OpLoad %55 
                                        f32_4 %57 = OpLoad %9 
                                        f32_4 %58 = OpVectorShuffle %57 %57 0 0 0 0 
                                        f32_4 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %49 
                                        f32_4 %61 = OpFAdd %59 %60 
                                                      OpStore %49 %61 
                               Uniform f32_4* %62 = OpAccessChain %21 %45 %36 
                                        f32_4 %63 = OpLoad %62 
                                        f32_4 %64 = OpLoad %9 
                                        f32_4 %65 = OpVectorShuffle %64 %64 2 2 2 2 
                                        f32_4 %66 = OpFMul %63 %65 
                                        f32_4 %67 = OpLoad %49 
                                        f32_4 %68 = OpFAdd %66 %67 
                                                      OpStore %49 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %45 %45 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %9 
                                        f32_4 %72 = OpVectorShuffle %71 %71 3 3 3 3 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %49 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %49 %75 
                                        f32_4 %81 = OpLoad %49 
                                Output f32_4* %83 = OpAccessChain %80 %28 
                                                      OpStore %83 %81 
                                 Private f32* %85 = OpAccessChain %49 %76 
                                          f32 %86 = OpLoad %85 
                                 Uniform f32* %89 = OpAccessChain %21 %28 %87 
                                          f32 %90 = OpLoad %89 
                                          f32 %91 = OpFMul %86 %90 
                                 Private f32* %92 = OpAccessChain %49 %76 
                                                      OpStore %92 %91 
                                        f32_4 %95 = OpLoad %49 
                                        f32_3 %96 = OpVectorShuffle %95 %95 0 3 1 
                                        f32_3 %99 = OpFMul %96 %98 
                                       f32_4 %100 = OpLoad %93 
                                       f32_4 %101 = OpVectorShuffle %100 %99 4 1 5 6 
                                                      OpStore %93 %101 
                                       f32_4 %104 = OpLoad %49 
                                       f32_2 %105 = OpVectorShuffle %104 %104 2 3 
                                       f32_4 %106 = OpLoad vs_TEXCOORD0 
                                       f32_4 %107 = OpVectorShuffle %106 %105 0 1 4 5 
                                                      OpStore vs_TEXCOORD0 %107 
                                       f32_4 %108 = OpLoad %93 
                                       f32_2 %109 = OpVectorShuffle %108 %108 2 2 
                                       f32_4 %110 = OpLoad %93 
                                       f32_2 %111 = OpVectorShuffle %110 %110 0 3 
                                       f32_2 %112 = OpFAdd %109 %111 
                                       f32_4 %113 = OpLoad vs_TEXCOORD0 
                                       f32_4 %114 = OpVectorShuffle %113 %112 4 5 2 3 
                                                      OpStore vs_TEXCOORD0 %114 
                                       f32_4 %115 = OpLoad %9 
                                       f32_3 %116 = OpVectorShuffle %115 %115 1 1 1 
                              Uniform f32_4* %117 = OpAccessChain %21 %36 %23 
                                       f32_4 %118 = OpLoad %117 
                                       f32_3 %119 = OpVectorShuffle %118 %118 0 1 2 
                                       f32_3 %120 = OpFMul %116 %119 
                                       f32_4 %121 = OpLoad %49 
                                       f32_4 %122 = OpVectorShuffle %121 %120 4 5 6 3 
                                                      OpStore %49 %122 
                              Uniform f32_4* %123 = OpAccessChain %21 %36 %28 
                                       f32_4 %124 = OpLoad %123 
                                       f32_3 %125 = OpVectorShuffle %124 %124 0 1 2 
                                       f32_4 %126 = OpLoad %9 
                                       f32_3 %127 = OpVectorShuffle %126 %126 0 0 0 
                                       f32_3 %128 = OpFMul %125 %127 
                                       f32_4 %129 = OpLoad %49 
                                       f32_3 %130 = OpVectorShuffle %129 %129 0 1 2 
                                       f32_3 %131 = OpFAdd %128 %130 
                                       f32_4 %132 = OpLoad %49 
                                       f32_4 %133 = OpVectorShuffle %132 %131 4 5 6 3 
                                                      OpStore %49 %133 
                              Uniform f32_4* %134 = OpAccessChain %21 %36 %36 
                                       f32_4 %135 = OpLoad %134 
                                       f32_3 %136 = OpVectorShuffle %135 %135 0 1 2 
                                       f32_4 %137 = OpLoad %9 
                                       f32_3 %138 = OpVectorShuffle %137 %137 2 2 2 
                                       f32_3 %139 = OpFMul %136 %138 
                                       f32_4 %140 = OpLoad %49 
                                       f32_3 %141 = OpVectorShuffle %140 %140 0 1 2 
                                       f32_3 %142 = OpFAdd %139 %141 
                                       f32_4 %143 = OpLoad %9 
                                       f32_4 %144 = OpVectorShuffle %143 %142 4 5 6 3 
                                                      OpStore %9 %144 
                              Uniform f32_4* %145 = OpAccessChain %21 %36 %45 
                                       f32_4 %146 = OpLoad %145 
                                       f32_3 %147 = OpVectorShuffle %146 %146 0 1 2 
                                       f32_4 %148 = OpLoad %9 
                                       f32_3 %149 = OpVectorShuffle %148 %148 3 3 3 
                                       f32_3 %150 = OpFMul %147 %149 
                                       f32_4 %151 = OpLoad %9 
                                       f32_3 %152 = OpVectorShuffle %151 %151 0 1 2 
                                       f32_3 %153 = OpFAdd %150 %152 
                                       f32_4 %154 = OpLoad %9 
                                       f32_4 %155 = OpVectorShuffle %154 %153 4 5 6 3 
                                                      OpStore %9 %155 
                                       f32_4 %156 = OpLoad %9 
                                       f32_3 %157 = OpVectorShuffle %156 %156 0 1 2 
                                       f32_3 %161 = OpFMul %157 %160 
                                       f32_4 %162 = OpLoad %49 
                                       f32_4 %163 = OpVectorShuffle %162 %161 4 5 6 3 
                                                      OpStore %49 %163 
                                       f32_4 %164 = OpLoad %9 
                                       f32_3 %165 = OpVectorShuffle %164 %164 0 1 2 
                                       f32_3 %166 = OpFNegate %165 
                                       f32_3 %167 = OpFMul %166 %160 
                                       f32_3 %170 = OpLoad %169 
                                       f32_3 %171 = OpFAdd %167 %170 
                                       f32_4 %172 = OpLoad %9 
                                       f32_4 %173 = OpVectorShuffle %172 %171 4 5 6 3 
                                                      OpStore %9 %173 
                                Uniform f32* %177 = OpAccessChain %21 %176 
                                         f32 %178 = OpLoad %177 
                                       f32_3 %179 = OpCompositeConstruct %178 %178 %178 
                                       f32_4 %180 = OpLoad %9 
                                       f32_3 %181 = OpVectorShuffle %180 %180 0 1 2 
                                       f32_3 %182 = OpFMul %179 %181 
                                       f32_4 %183 = OpLoad %49 
                                       f32_3 %184 = OpVectorShuffle %183 %183 0 1 2 
                                       f32_3 %185 = OpFAdd %182 %184 
                                                      OpStore vs_TEXCOORD1 %185 
                                 Output f32* %187 = OpAccessChain %80 %28 %76 
                                         f32 %188 = OpLoad %187 
                                         f32 %189 = OpFNegate %188 
                                 Output f32* %190 = OpAccessChain %80 %28 %76 
                                                      OpStore %190 %189 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 574
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %25 %43 %562 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpDecorate %13 ArrayStride 13 
                                                      OpDecorate %14 ArrayStride 14 
                                                      OpMemberDecorate %15 0 Offset 15 
                                                      OpMemberDecorate %15 1 Offset 15 
                                                      OpMemberDecorate %15 2 Offset 15 
                                                      OpMemberDecorate %15 3 Offset 15 
                                                      OpMemberDecorate %15 4 Offset 15 
                                                      OpMemberDecorate %15 5 Offset 15 
                                                      OpMemberDecorate %15 6 Offset 15 
                                                      OpDecorate %15 Block 
                                                      OpDecorate %17 DescriptorSet 17 
                                                      OpDecorate %17 Binding 17 
                                                      OpDecorate vs_TEXCOORD1 Location 25 
                                                      OpDecorate vs_TEXCOORD0 Location 43 
                                                      OpDecorate %52 DescriptorSet 52 
                                                      OpDecorate %52 Binding 52 
                                                      OpDecorate %56 DescriptorSet 56 
                                                      OpDecorate %56 Binding 56 
                                                      OpDecorate %162 DescriptorSet 162 
                                                      OpDecorate %162 Binding 162 
                                                      OpDecorate %164 DescriptorSet 164 
                                                      OpDecorate %164 Binding 164 
                                                      OpDecorate %201 DescriptorSet 201 
                                                      OpDecorate %201 Binding 201 
                                                      OpDecorate %203 DescriptorSet 203 
                                                      OpDecorate %203 Binding 203 
                                                      OpDecorate %265 DescriptorSet 265 
                                                      OpDecorate %265 Binding 265 
                                                      OpDecorate %267 DescriptorSet 267 
                                                      OpDecorate %267 Binding 267 
                                                      OpDecorate %272 DescriptorSet 272 
                                                      OpDecorate %272 Binding 272 
                                                      OpDecorate %274 DescriptorSet 274 
                                                      OpDecorate %274 Binding 274 
                                                      OpDecorate %443 DescriptorSet 443 
                                                      OpDecorate %443 Binding 443 
                                                      OpDecorate %445 DescriptorSet 445 
                                                      OpDecorate %445 Binding 445 
                                                      OpDecorate %562 Location 562 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 3 
                                              %11 = OpTypeInt 32 0 
                                          u32 %12 = OpConstant 4 
                                              %13 = OpTypeArray %7 %12 
                                              %14 = OpTypeArray %7 %12 
                                              %15 = OpTypeStruct %10 %7 %7 %13 %7 %7 %14 
                                              %16 = OpTypePointer Uniform %15 
Uniform struct {f32_3; f32_4; f32_4; f32_4[4]; f32_4; f32_4; f32_4[4];}* %17 = OpVariable Uniform 
                                              %18 = OpTypeInt 32 1 
                                          i32 %19 = OpConstant 1 
                                          u32 %20 = OpConstant 2 
                                              %21 = OpTypePointer Uniform %6 
                                              %24 = OpTypePointer Input %10 
                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                                              %26 = OpTypePointer Input %6 
                                          u32 %30 = OpConstant 0 
                                              %31 = OpTypePointer Private %6 
                                              %39 = OpTypeVector %6 2 
                                              %40 = OpTypePointer Private %39 
                               Private f32_2* %41 = OpVariable Private 
                                              %42 = OpTypePointer Input %7 
                        Input f32_4* vs_TEXCOORD0 = OpVariable Input 
                                 Private f32* %49 = OpVariable Private 
                                              %50 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %51 = OpTypePointer UniformConstant %50 
         UniformConstant read_only Texture2D* %52 = OpVariable UniformConstant 
                                              %54 = OpTypeSampler 
                                              %55 = OpTypePointer UniformConstant %54 
                     UniformConstant sampler* %56 = OpVariable UniformConstant 
                                              %58 = OpTypeSampledImage %50 
                                          i32 %63 = OpConstant 2 
                                          u32 %68 = OpConstant 1 
                                          f32 %72 = OpConstant 3.674022E-40 
                                              %82 = OpTypePointer Private %10 
                               Private f32_3* %83 = OpVariable Private 
                                          i32 %86 = OpConstant 3 
                                              %87 = OpTypePointer Uniform %7 
                                          i32 %92 = OpConstant 0 
                                             %124 = OpTypePointer Uniform %10 
                              Private f32_4* %138 = OpVariable Private 
                                         i32 %141 = OpConstant 4 
                                Private f32* %154 = OpVariable Private 
                                         u32 %158 = OpConstant 3 
        UniformConstant read_only Texture2D* %162 = OpVariable UniformConstant 
                    UniformConstant sampler* %164 = OpVariable UniformConstant 
                              Private f32_3* %171 = OpVariable Private 
                                         f32 %192 = OpConstant 3.674022E-40 
                              Private f32_4* %200 = OpVariable Private 
        UniformConstant read_only Texture2D* %201 = OpVariable UniformConstant 
                    UniformConstant sampler* %203 = OpVariable UniformConstant 
                                         f32 %213 = OpConstant 3.674022E-40 
                                       f32_3 %214 = OpConstantComposite %213 %213 %213 
                                         f32 %216 = OpConstant 3.674022E-40 
                                       f32_3 %217 = OpConstantComposite %216 %216 %216 
                                         f32 %240 = OpConstant 3.674022E-40 
                                Private f32* %242 = OpVariable Private 
                                Private f32* %250 = OpVariable Private 
        UniformConstant read_only Texture2D* %265 = OpVariable UniformConstant 
                    UniformConstant sampler* %267 = OpVariable UniformConstant 
        UniformConstant read_only Texture2D* %272 = OpVariable UniformConstant 
                    UniformConstant sampler* %274 = OpVariable UniformConstant 
                                       f32_4 %283 = OpConstantComposite %72 %72 %72 %72 
                                         f32 %293 = OpConstant 3.674022E-40 
                                Private f32* %296 = OpVariable Private 
                                Private f32* %302 = OpVariable Private 
                                         f32 %316 = OpConstant 3.674022E-40 
                                         f32 %319 = OpConstant 3.674022E-40 
                                         f32 %364 = OpConstant 3.674022E-40 
                                         f32 %367 = OpConstant 3.674022E-40 
                                         f32 %384 = OpConstant 3.674022E-40 
                                             %396 = OpTypeBool 
                                             %397 = OpTypePointer Private %396 
                               Private bool* %398 = OpVariable Private 
                                         i32 %410 = OpConstant 6 
                                             %441 = OpTypeImage %6 Cube 0 0 0 1 Unknown 
                                             %442 = OpTypePointer UniformConstant %441 
      UniformConstant read_only TextureCube* %443 = OpVariable UniformConstant 
                    UniformConstant sampler* %445 = OpVariable UniformConstant 
                                             %447 = OpTypeSampledImage %441 
                                         f32 %451 = OpConstant 3.674022E-40 
                                         i32 %462 = OpConstant 5 
                                         f32 %489 = OpConstant 3.674022E-40 
                                             %561 = OpTypePointer Output %7 
                               Output f32_4* %562 = OpVariable Output 
                                             %571 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                 Uniform f32* %22 = OpAccessChain %17 %19 %20 
                                          f32 %23 = OpLoad %22 
                                   Input f32* %27 = OpAccessChain vs_TEXCOORD1 %20 
                                          f32 %28 = OpLoad %27 
                                          f32 %29 = OpFDiv %23 %28 
                                 Private f32* %32 = OpAccessChain %9 %30 
                                                      OpStore %32 %29 
                                        f32_4 %33 = OpLoad %9 
                                        f32_3 %34 = OpVectorShuffle %33 %33 0 0 0 
                                        f32_3 %35 = OpLoad vs_TEXCOORD1 
                                        f32_3 %36 = OpFMul %34 %35 
                                        f32_4 %37 = OpLoad %9 
                                        f32_4 %38 = OpVectorShuffle %37 %36 4 5 6 3 
                                                      OpStore %9 %38 
                                        f32_4 %44 = OpLoad vs_TEXCOORD0 
                                        f32_2 %45 = OpVectorShuffle %44 %44 0 1 
                                        f32_4 %46 = OpLoad vs_TEXCOORD0 
                                        f32_2 %47 = OpVectorShuffle %46 %46 3 3 
                                        f32_2 %48 = OpFDiv %45 %47 
                                                      OpStore %41 %48 
                          read_only Texture2D %53 = OpLoad %52 
                                      sampler %57 = OpLoad %56 
                   read_only Texture2DSampled %59 = OpSampledImage %53 %57 
                                        f32_2 %60 = OpLoad %41 
                                        f32_4 %61 = OpImageSampleImplicitLod %59 %60 
                                          f32 %62 = OpCompositeExtract %61 0 
                                                      OpStore %49 %62 
                                 Uniform f32* %64 = OpAccessChain %17 %63 %30 
                                          f32 %65 = OpLoad %64 
                                          f32 %66 = OpLoad %49 
                                          f32 %67 = OpFMul %65 %66 
                                 Uniform f32* %69 = OpAccessChain %17 %63 %68 
                                          f32 %70 = OpLoad %69 
                                          f32 %71 = OpFAdd %67 %70 
                                                      OpStore %49 %71 
                                          f32 %73 = OpLoad %49 
                                          f32 %74 = OpFDiv %72 %73 
                                                      OpStore %49 %74 
                                          f32 %75 = OpLoad %49 
                                        f32_3 %76 = OpCompositeConstruct %75 %75 %75 
                                        f32_4 %77 = OpLoad %9 
                                        f32_3 %78 = OpVectorShuffle %77 %77 0 1 2 
                                        f32_3 %79 = OpFMul %76 %78 
                                        f32_4 %80 = OpLoad %9 
                                        f32_4 %81 = OpVectorShuffle %80 %79 4 5 6 3 
                                                      OpStore %9 %81 
                                        f32_4 %84 = OpLoad %9 
                                        f32_3 %85 = OpVectorShuffle %84 %84 1 1 1 
                               Uniform f32_4* %88 = OpAccessChain %17 %86 %19 
                                        f32_4 %89 = OpLoad %88 
                                        f32_3 %90 = OpVectorShuffle %89 %89 0 1 2 
                                        f32_3 %91 = OpFMul %85 %90 
                                                      OpStore %83 %91 
                               Uniform f32_4* %93 = OpAccessChain %17 %86 %92 
                                        f32_4 %94 = OpLoad %93 
                                        f32_3 %95 = OpVectorShuffle %94 %94 0 1 2 
                                        f32_4 %96 = OpLoad %9 
                                        f32_3 %97 = OpVectorShuffle %96 %96 0 0 0 
                                        f32_3 %98 = OpFMul %95 %97 
                                        f32_3 %99 = OpLoad %83 
                                       f32_3 %100 = OpFAdd %98 %99 
                                       f32_4 %101 = OpLoad %9 
                                       f32_4 %102 = OpVectorShuffle %101 %100 4 5 2 6 
                                                      OpStore %9 %102 
                              Uniform f32_4* %103 = OpAccessChain %17 %86 %63 
                                       f32_4 %104 = OpLoad %103 
                                       f32_3 %105 = OpVectorShuffle %104 %104 0 1 2 
                                       f32_4 %106 = OpLoad %9 
                                       f32_3 %107 = OpVectorShuffle %106 %106 2 2 2 
                                       f32_3 %108 = OpFMul %105 %107 
                                       f32_4 %109 = OpLoad %9 
                                       f32_3 %110 = OpVectorShuffle %109 %109 0 1 3 
                                       f32_3 %111 = OpFAdd %108 %110 
                                       f32_4 %112 = OpLoad %9 
                                       f32_4 %113 = OpVectorShuffle %112 %111 4 5 6 3 
                                                      OpStore %9 %113 
                                       f32_4 %114 = OpLoad %9 
                                       f32_3 %115 = OpVectorShuffle %114 %114 0 1 2 
                              Uniform f32_4* %116 = OpAccessChain %17 %86 %86 
                                       f32_4 %117 = OpLoad %116 
                                       f32_3 %118 = OpVectorShuffle %117 %117 0 1 2 
                                       f32_3 %119 = OpFAdd %115 %118 
                                       f32_4 %120 = OpLoad %9 
                                       f32_4 %121 = OpVectorShuffle %120 %119 4 5 6 3 
                                                      OpStore %9 %121 
                                       f32_4 %122 = OpLoad %9 
                                       f32_3 %123 = OpVectorShuffle %122 %122 0 1 2 
                              Uniform f32_3* %125 = OpAccessChain %17 %92 
                                       f32_3 %126 = OpLoad %125 
                                       f32_3 %127 = OpFNegate %126 
                                       f32_3 %128 = OpFAdd %123 %127 
                                                      OpStore %83 %128 
                                       f32_3 %129 = OpLoad %83 
                                       f32_3 %130 = OpLoad %83 
                                         f32 %131 = OpDot %129 %130 
                                                      OpStore %49 %131 
                                         f32 %132 = OpLoad %49 
                                         f32 %133 = OpExtInst %1 32 %132 
                                                      OpStore %49 %133 
                                         f32 %134 = OpLoad %49 
                                       f32_3 %135 = OpCompositeConstruct %134 %134 %134 
                                       f32_3 %136 = OpLoad %83 
                                       f32_3 %137 = OpFMul %135 %136 
                                                      OpStore %83 %137 
                                       f32_4 %139 = OpLoad %9 
                                       f32_3 %140 = OpVectorShuffle %139 %139 0 1 2 
                              Uniform f32_4* %142 = OpAccessChain %17 %141 
                                       f32_4 %143 = OpLoad %142 
                                       f32_3 %144 = OpVectorShuffle %143 %143 0 1 2 
                                       f32_3 %145 = OpFNegate %144 
                                       f32_3 %146 = OpFAdd %140 %145 
                                       f32_4 %147 = OpLoad %138 
                                       f32_4 %148 = OpVectorShuffle %147 %146 4 5 6 3 
                                                      OpStore %138 %148 
                                       f32_4 %149 = OpLoad %138 
                                       f32_3 %150 = OpVectorShuffle %149 %149 0 1 2 
                                       f32_4 %151 = OpLoad %138 
                                       f32_3 %152 = OpVectorShuffle %151 %151 0 1 2 
                                         f32 %153 = OpDot %150 %152 
                                                      OpStore %49 %153 
                                         f32 %155 = OpLoad %49 
                                         f32 %156 = OpExtInst %1 32 %155 
                                                      OpStore %154 %156 
                                         f32 %157 = OpLoad %49 
                                Uniform f32* %159 = OpAccessChain %17 %141 %158 
                                         f32 %160 = OpLoad %159 
                                         f32 %161 = OpFMul %157 %160 
                                                      OpStore %49 %161 
                         read_only Texture2D %163 = OpLoad %162 
                                     sampler %165 = OpLoad %164 
                  read_only Texture2DSampled %166 = OpSampledImage %163 %165 
                                         f32 %167 = OpLoad %49 
                                       f32_2 %168 = OpCompositeConstruct %167 %167 
                                       f32_4 %169 = OpImageSampleImplicitLod %166 %168 
                                         f32 %170 = OpCompositeExtract %169 0 
                                                      OpStore %49 %170 
                                       f32_4 %172 = OpLoad %138 
                                       f32_3 %173 = OpVectorShuffle %172 %172 0 1 2 
                                       f32_3 %174 = OpFNegate %173 
                                         f32 %175 = OpLoad %154 
                                       f32_3 %176 = OpCompositeConstruct %175 %175 %175 
                                       f32_3 %177 = OpFMul %174 %176 
                                       f32_3 %178 = OpLoad %83 
                                       f32_3 %179 = OpFNegate %178 
                                       f32_3 %180 = OpFAdd %177 %179 
                                                      OpStore %171 %180 
                                         f32 %181 = OpLoad %154 
                                       f32_3 %182 = OpCompositeConstruct %181 %181 %181 
                                       f32_4 %183 = OpLoad %138 
                                       f32_3 %184 = OpVectorShuffle %183 %183 0 1 2 
                                       f32_3 %185 = OpFMul %182 %184 
                                       f32_4 %186 = OpLoad %138 
                                       f32_4 %187 = OpVectorShuffle %186 %185 4 5 6 3 
                                                      OpStore %138 %187 
                                       f32_3 %188 = OpLoad %171 
                                       f32_3 %189 = OpLoad %171 
                                         f32 %190 = OpDot %188 %189 
                                                      OpStore %154 %190 
                                         f32 %191 = OpLoad %154 
                                         f32 %193 = OpExtInst %1 40 %191 %192 
                                                      OpStore %154 %193 
                                         f32 %194 = OpLoad %154 
                                         f32 %195 = OpExtInst %1 32 %194 
                                                      OpStore %154 %195 
                                         f32 %196 = OpLoad %154 
                                       f32_3 %197 = OpCompositeConstruct %196 %196 %196 
                                       f32_3 %198 = OpLoad %171 
                                       f32_3 %199 = OpFMul %197 %198 
                                                      OpStore %171 %199 
                         read_only Texture2D %202 = OpLoad %201 
                                     sampler %204 = OpLoad %203 
                  read_only Texture2DSampled %205 = OpSampledImage %202 %204 
                                       f32_2 %206 = OpLoad %41 
                                       f32_4 %207 = OpImageSampleImplicitLod %205 %206 
                                       f32_3 %208 = OpVectorShuffle %207 %207 0 1 2 
                                       f32_4 %209 = OpLoad %200 
                                       f32_4 %210 = OpVectorShuffle %209 %208 4 5 6 3 
                                                      OpStore %200 %210 
                                       f32_4 %211 = OpLoad %200 
                                       f32_3 %212 = OpVectorShuffle %211 %211 0 1 2 
                                       f32_3 %215 = OpFMul %212 %214 
                                       f32_3 %218 = OpFAdd %215 %217 
                                       f32_4 %219 = OpLoad %200 
                                       f32_4 %220 = OpVectorShuffle %219 %218 4 5 6 3 
                                                      OpStore %200 %220 
                                       f32_4 %221 = OpLoad %200 
                                       f32_3 %222 = OpVectorShuffle %221 %221 0 1 2 
                                       f32_4 %223 = OpLoad %200 
                                       f32_3 %224 = OpVectorShuffle %223 %223 0 1 2 
                                         f32 %225 = OpDot %222 %224 
                                                      OpStore %154 %225 
                                         f32 %226 = OpLoad %154 
                                         f32 %227 = OpExtInst %1 32 %226 
                                                      OpStore %154 %227 
                                         f32 %228 = OpLoad %154 
                                       f32_3 %229 = OpCompositeConstruct %228 %228 %228 
                                       f32_4 %230 = OpLoad %200 
                                       f32_3 %231 = OpVectorShuffle %230 %230 0 1 2 
                                       f32_3 %232 = OpFMul %229 %231 
                                       f32_4 %233 = OpLoad %200 
                                       f32_4 %234 = OpVectorShuffle %233 %232 4 5 6 3 
                                                      OpStore %200 %234 
                                       f32_4 %235 = OpLoad %200 
                                       f32_3 %236 = OpVectorShuffle %235 %235 0 1 2 
                                       f32_3 %237 = OpLoad %171 
                                         f32 %238 = OpDot %236 %237 
                                                      OpStore %154 %238 
                                         f32 %239 = OpLoad %154 
                                         f32 %241 = OpExtInst %1 43 %239 %240 %72 
                                                      OpStore %154 %241 
                                       f32_4 %243 = OpLoad %138 
                                       f32_3 %244 = OpVectorShuffle %243 %243 0 1 2 
                                       f32_3 %245 = OpFNegate %244 
                                       f32_3 %246 = OpLoad %171 
                                         f32 %247 = OpDot %245 %246 
                                                      OpStore %242 %247 
                                         f32 %248 = OpLoad %242 
                                         f32 %249 = OpExtInst %1 43 %248 %240 %72 
                                                      OpStore %242 %249 
                                       f32_4 %251 = OpLoad %200 
                                       f32_3 %252 = OpVectorShuffle %251 %251 0 1 2 
                                       f32_4 %253 = OpLoad %138 
                                       f32_3 %254 = OpVectorShuffle %253 %253 0 1 2 
                                       f32_3 %255 = OpFNegate %254 
                                         f32 %256 = OpDot %252 %255 
                                                      OpStore %250 %256 
                                         f32 %257 = OpLoad %250 
                                         f32 %258 = OpExtInst %1 43 %257 %240 %72 
                                                      OpStore %250 %258 
                                       f32_4 %259 = OpLoad %200 
                                       f32_3 %260 = OpVectorShuffle %259 %259 0 1 2 
                                       f32_3 %261 = OpLoad %83 
                                       f32_3 %262 = OpFNegate %261 
                                         f32 %263 = OpDot %260 %262 
                                Private f32* %264 = OpAccessChain %83 %30 
                                                      OpStore %264 %263 
                         read_only Texture2D %266 = OpLoad %265 
                                     sampler %268 = OpLoad %267 
                  read_only Texture2DSampled %269 = OpSampledImage %266 %268 
                                       f32_2 %270 = OpLoad %41 
                                       f32_4 %271 = OpImageSampleImplicitLod %269 %270 
                                                      OpStore %138 %271 
                         read_only Texture2D %273 = OpLoad %272 
                                     sampler %275 = OpLoad %274 
                  read_only Texture2DSampled %276 = OpSampledImage %273 %275 
                                       f32_2 %277 = OpLoad %41 
                                       f32_4 %278 = OpImageSampleImplicitLod %276 %277 
                                       f32_3 %279 = OpVectorShuffle %278 %278 0 1 2 
                                                      OpStore %171 %279 
                                       f32_4 %280 = OpLoad %138 
                                       f32_4 %281 = OpVectorShuffle %280 %280 3 0 1 2 
                                       f32_4 %282 = OpFNegate %281 
                                       f32_4 %284 = OpFAdd %282 %283 
                                                      OpStore %200 %284 
                                Private f32* %285 = OpAccessChain %200 %30 
                                         f32 %286 = OpLoad %285 
                                Private f32* %287 = OpAccessChain %200 %30 
                                         f32 %288 = OpLoad %287 
                                         f32 %289 = OpFMul %286 %288 
                                Private f32* %290 = OpAccessChain %41 %30 
                                                      OpStore %290 %289 
                                Private f32* %291 = OpAccessChain %41 %30 
                                         f32 %292 = OpLoad %291 
                                         f32 %294 = OpExtInst %1 40 %292 %293 
                                Private f32* %295 = OpAccessChain %41 %30 
                                                      OpStore %295 %294 
                                Private f32* %297 = OpAccessChain %41 %30 
                                         f32 %298 = OpLoad %297 
                                Private f32* %299 = OpAccessChain %41 %30 
                                         f32 %300 = OpLoad %299 
                                         f32 %301 = OpFMul %298 %300 
                                                      OpStore %296 %301 
                                         f32 %303 = OpLoad %154 
                                         f32 %304 = OpLoad %296 
                                         f32 %305 = OpFMul %303 %304 
                                         f32 %306 = OpLoad %154 
                                         f32 %307 = OpFNegate %306 
                                         f32 %308 = OpFAdd %305 %307 
                                                      OpStore %302 %308 
                                         f32 %309 = OpLoad %302 
                                         f32 %310 = OpLoad %154 
                                         f32 %311 = OpFMul %309 %310 
                                         f32 %312 = OpFAdd %311 %72 
                                                      OpStore %154 %312 
                                         f32 %313 = OpLoad %154 
                                         f32 %314 = OpLoad %154 
                                         f32 %315 = OpFMul %313 %314 
                                         f32 %317 = OpFAdd %315 %316 
                                                      OpStore %154 %317 
                                         f32 %318 = OpLoad %296 
                                         f32 %320 = OpFMul %318 %319 
                                                      OpStore %296 %320 
                                         f32 %321 = OpLoad %296 
                                         f32 %322 = OpLoad %154 
                                         f32 %323 = OpFDiv %321 %322 
                                                      OpStore %296 %323 
                                Private f32* %324 = OpAccessChain %41 %30 
                                         f32 %325 = OpLoad %324 
                                         f32 %326 = OpFNegate %325 
                                         f32 %327 = OpFAdd %326 %72 
                                                      OpStore %154 %327 
                                Private f32* %328 = OpAccessChain %83 %30 
                                         f32 %329 = OpLoad %328 
                                         f32 %330 = OpExtInst %1 4 %329 
                                         f32 %331 = OpLoad %154 
                                         f32 %332 = OpFMul %330 %331 
                                Private f32* %333 = OpAccessChain %41 %30 
                                         f32 %334 = OpLoad %333 
                                         f32 %335 = OpFAdd %332 %334 
                                                      OpStore %302 %335 
                                         f32 %336 = OpLoad %250 
                                         f32 %337 = OpLoad %154 
                                         f32 %338 = OpFMul %336 %337 
                                Private f32* %339 = OpAccessChain %41 %30 
                                         f32 %340 = OpLoad %339 
                                         f32 %341 = OpFAdd %338 %340 
                                Private f32* %342 = OpAccessChain %41 %30 
                                                      OpStore %342 %341 
                                Private f32* %343 = OpAccessChain %41 %30 
                                         f32 %344 = OpLoad %343 
                                Private f32* %345 = OpAccessChain %83 %30 
                                         f32 %346 = OpLoad %345 
                                         f32 %347 = OpExtInst %1 4 %346 
                                         f32 %348 = OpFMul %344 %347 
                                Private f32* %349 = OpAccessChain %41 %30 
                                                      OpStore %349 %348 
                                Private f32* %350 = OpAccessChain %83 %30 
                                         f32 %351 = OpLoad %350 
                                         f32 %352 = OpExtInst %1 4 %351 
                                         f32 %353 = OpFNegate %352 
                                         f32 %354 = OpFAdd %353 %72 
                                                      OpStore %154 %354 
                                         f32 %355 = OpLoad %250 
                                         f32 %356 = OpLoad %302 
                                         f32 %357 = OpFMul %355 %356 
                                Private f32* %358 = OpAccessChain %41 %30 
                                         f32 %359 = OpLoad %358 
                                         f32 %360 = OpFAdd %357 %359 
                                Private f32* %361 = OpAccessChain %41 %30 
                                                      OpStore %361 %360 
                                Private f32* %362 = OpAccessChain %41 %30 
                                         f32 %363 = OpLoad %362 
                                         f32 %365 = OpFAdd %363 %364 
                                Private f32* %366 = OpAccessChain %41 %30 
                                                      OpStore %366 %365 
                                Private f32* %368 = OpAccessChain %41 %30 
                                         f32 %369 = OpLoad %368 
                                         f32 %370 = OpFDiv %367 %369 
                                Private f32* %371 = OpAccessChain %41 %30 
                                                      OpStore %371 %370 
                                         f32 %372 = OpLoad %296 
                                Private f32* %373 = OpAccessChain %41 %30 
                                         f32 %374 = OpLoad %373 
                                         f32 %375 = OpFMul %372 %374 
                                Private f32* %376 = OpAccessChain %41 %30 
                                                      OpStore %376 %375 
                                         f32 %377 = OpLoad %250 
                                Private f32* %378 = OpAccessChain %41 %30 
                                         f32 %379 = OpLoad %378 
                                         f32 %380 = OpFMul %377 %379 
                                Private f32* %381 = OpAccessChain %41 %30 
                                                      OpStore %381 %380 
                                Private f32* %382 = OpAccessChain %41 %30 
                                         f32 %383 = OpLoad %382 
                                         f32 %385 = OpFMul %383 %384 
                                Private f32* %386 = OpAccessChain %41 %30 
                                                      OpStore %386 %385 
                                Private f32* %387 = OpAccessChain %41 %30 
                                         f32 %388 = OpLoad %387 
                                         f32 %389 = OpExtInst %1 40 %388 %240 
                                Private f32* %390 = OpAccessChain %41 %30 
                                                      OpStore %390 %389 
                                       f32_4 %391 = OpLoad %138 
                                       f32_3 %392 = OpVectorShuffle %391 %391 0 1 2 
                                       f32_4 %393 = OpLoad %138 
                                       f32_3 %394 = OpVectorShuffle %393 %393 0 1 2 
                                         f32 %395 = OpDot %392 %394 
                                                      OpStore %296 %395 
                                         f32 %399 = OpLoad %296 
                                        bool %400 = OpFOrdNotEqual %399 %240 
                                                      OpStore %398 %400 
                                        bool %401 = OpLoad %398 
                                         f32 %402 = OpSelect %401 %72 %240 
                                                      OpStore %296 %402 
                                         f32 %403 = OpLoad %296 
                                Private f32* %404 = OpAccessChain %41 %30 
                                         f32 %405 = OpLoad %404 
                                         f32 %406 = OpFMul %403 %405 
                                Private f32* %407 = OpAccessChain %41 %30 
                                                      OpStore %407 %406 
                                       f32_4 %408 = OpLoad %9 
                                       f32_3 %409 = OpVectorShuffle %408 %408 1 1 1 
                              Uniform f32_4* %411 = OpAccessChain %17 %410 %19 
                                       f32_4 %412 = OpLoad %411 
                                       f32_3 %413 = OpVectorShuffle %412 %412 0 1 2 
                                       f32_3 %414 = OpFMul %409 %413 
                                                      OpStore %83 %414 
                              Uniform f32_4* %415 = OpAccessChain %17 %410 %92 
                                       f32_4 %416 = OpLoad %415 
                                       f32_3 %417 = OpVectorShuffle %416 %416 0 1 2 
                                       f32_4 %418 = OpLoad %9 
                                       f32_3 %419 = OpVectorShuffle %418 %418 0 0 0 
                                       f32_3 %420 = OpFMul %417 %419 
                                       f32_3 %421 = OpLoad %83 
                                       f32_3 %422 = OpFAdd %420 %421 
                                                      OpStore %83 %422 
                              Uniform f32_4* %423 = OpAccessChain %17 %410 %63 
                                       f32_4 %424 = OpLoad %423 
                                       f32_3 %425 = OpVectorShuffle %424 %424 0 1 2 
                                       f32_4 %426 = OpLoad %9 
                                       f32_3 %427 = OpVectorShuffle %426 %426 2 2 2 
                                       f32_3 %428 = OpFMul %425 %427 
                                       f32_3 %429 = OpLoad %83 
                                       f32_3 %430 = OpFAdd %428 %429 
                                       f32_4 %431 = OpLoad %9 
                                       f32_4 %432 = OpVectorShuffle %431 %430 4 5 6 3 
                                                      OpStore %9 %432 
                                       f32_4 %433 = OpLoad %9 
                                       f32_3 %434 = OpVectorShuffle %433 %433 0 1 2 
                              Uniform f32_4* %435 = OpAccessChain %17 %410 %86 
                                       f32_4 %436 = OpLoad %435 
                                       f32_3 %437 = OpVectorShuffle %436 %436 0 1 2 
                                       f32_3 %438 = OpFAdd %434 %437 
                                       f32_4 %439 = OpLoad %9 
                                       f32_4 %440 = OpVectorShuffle %439 %438 4 5 6 3 
                                                      OpStore %9 %440 
                       read_only TextureCube %444 = OpLoad %443 
                                     sampler %446 = OpLoad %445 
                read_only TextureCubeSampled %448 = OpSampledImage %444 %446 
                                       f32_4 %449 = OpLoad %9 
                                       f32_3 %450 = OpVectorShuffle %449 %449 0 1 2 
                                       f32_4 %452 = OpImageSampleImplicitLod %448 %450 Bias %7 
                                         f32 %453 = OpCompositeExtract %452 3 
                                Private f32* %454 = OpAccessChain %9 %30 
                                                      OpStore %454 %453 
                                Private f32* %455 = OpAccessChain %9 %30 
                                         f32 %456 = OpLoad %455 
                                         f32 %457 = OpLoad %49 
                                         f32 %458 = OpFMul %456 %457 
                                Private f32* %459 = OpAccessChain %9 %30 
                                                      OpStore %459 %458 
                                       f32_4 %460 = OpLoad %9 
                                       f32_3 %461 = OpVectorShuffle %460 %460 0 0 0 
                              Uniform f32_4* %463 = OpAccessChain %17 %462 
                                       f32_4 %464 = OpLoad %463 
                                       f32_3 %465 = OpVectorShuffle %464 %464 0 1 2 
                                       f32_3 %466 = OpFMul %461 %465 
                                       f32_4 %467 = OpLoad %9 
                                       f32_4 %468 = OpVectorShuffle %467 %466 4 5 6 3 
                                                      OpStore %9 %468 
                                       f32_4 %469 = OpLoad %9 
                                       f32_3 %470 = OpVectorShuffle %469 %469 0 1 2 
                                       f32_2 %471 = OpLoad %41 
                                       f32_3 %472 = OpVectorShuffle %471 %471 0 0 0 
                                       f32_3 %473 = OpFMul %470 %472 
                                                      OpStore %83 %473 
                                         f32 %474 = OpLoad %242 
                                         f32 %475 = OpFNegate %474 
                                         f32 %476 = OpFAdd %475 %72 
                                                      OpStore %49 %476 
                                         f32 %477 = OpLoad %242 
                                         f32 %478 = OpLoad %242 
                                         f32 %479 = OpFMul %477 %478 
                                Private f32* %480 = OpAccessChain %41 %30 
                                                      OpStore %480 %479 
                                       f32_2 %481 = OpLoad %41 
                                       f32_2 %482 = OpVectorShuffle %481 %481 0 0 
                                       f32_4 %483 = OpLoad %200 
                                       f32_2 %484 = OpVectorShuffle %483 %483 0 0 
                                         f32 %485 = OpDot %482 %484 
                                Private f32* %486 = OpAccessChain %41 %30 
                                                      OpStore %486 %485 
                                Private f32* %487 = OpAccessChain %41 %30 
                                         f32 %488 = OpLoad %487 
                                         f32 %490 = OpFAdd %488 %489 
                                Private f32* %491 = OpAccessChain %41 %30 
                                                      OpStore %491 %490 
                                         f32 %492 = OpLoad %49 
                                         f32 %493 = OpLoad %49 
                                         f32 %494 = OpFMul %492 %493 
                                                      OpStore %296 %494 
                                         f32 %495 = OpLoad %296 
                                         f32 %496 = OpLoad %296 
                                         f32 %497 = OpFMul %495 %496 
                                                      OpStore %296 %497 
                                         f32 %498 = OpLoad %49 
                                         f32 %499 = OpLoad %296 
                                         f32 %500 = OpFMul %498 %499 
                                                      OpStore %49 %500 
                                       f32_4 %501 = OpLoad %200 
                                       f32_3 %502 = OpVectorShuffle %501 %501 1 2 3 
                                         f32 %503 = OpLoad %49 
                                       f32_3 %504 = OpCompositeConstruct %503 %503 %503 
                                       f32_3 %505 = OpFMul %502 %504 
                                       f32_4 %506 = OpLoad %138 
                                       f32_3 %507 = OpVectorShuffle %506 %506 0 1 2 
                                       f32_3 %508 = OpFAdd %505 %507 
                                       f32_4 %509 = OpLoad %138 
                                       f32_4 %510 = OpVectorShuffle %509 %508 4 5 6 3 
                                                      OpStore %138 %510 
                                       f32_3 %511 = OpLoad %83 
                                       f32_4 %512 = OpLoad %138 
                                       f32_3 %513 = OpVectorShuffle %512 %512 0 1 2 
                                       f32_3 %514 = OpFMul %511 %513 
                                                      OpStore %83 %514 
                                         f32 %515 = OpLoad %154 
                                         f32 %516 = OpLoad %154 
                                         f32 %517 = OpFMul %515 %516 
                                                      OpStore %49 %517 
                                         f32 %518 = OpLoad %49 
                                         f32 %519 = OpLoad %49 
                                         f32 %520 = OpFMul %518 %519 
                                                      OpStore %49 %520 
                                         f32 %521 = OpLoad %154 
                                         f32 %522 = OpLoad %49 
                                         f32 %523 = OpFMul %521 %522 
                                                      OpStore %49 %523 
                                Private f32* %524 = OpAccessChain %41 %30 
                                         f32 %525 = OpLoad %524 
                                         f32 %526 = OpLoad %49 
                                         f32 %527 = OpFMul %525 %526 
                                         f32 %528 = OpFAdd %527 %72 
                                                      OpStore %49 %528 
                                         f32 %529 = OpLoad %250 
                                         f32 %530 = OpFNegate %529 
                                         f32 %531 = OpFAdd %530 %72 
                                                      OpStore %296 %531 
                                         f32 %532 = OpLoad %296 
                                         f32 %533 = OpLoad %296 
                                         f32 %534 = OpFMul %532 %533 
                                                      OpStore %154 %534 
                                         f32 %535 = OpLoad %154 
                                         f32 %536 = OpLoad %154 
                                         f32 %537 = OpFMul %535 %536 
                                                      OpStore %154 %537 
                                         f32 %538 = OpLoad %296 
                                         f32 %539 = OpLoad %154 
                                         f32 %540 = OpFMul %538 %539 
                                                      OpStore %296 %540 
                                Private f32* %541 = OpAccessChain %41 %30 
                                         f32 %542 = OpLoad %541 
                                         f32 %543 = OpLoad %296 
                                         f32 %544 = OpFMul %542 %543 
                                         f32 %545 = OpFAdd %544 %72 
                                Private f32* %546 = OpAccessChain %41 %30 
                                                      OpStore %546 %545 
                                         f32 %547 = OpLoad %49 
                                Private f32* %548 = OpAccessChain %41 %30 
                                         f32 %549 = OpLoad %548 
                                         f32 %550 = OpFMul %547 %549 
                                                      OpStore %49 %550 
                                         f32 %551 = OpLoad %250 
                                         f32 %552 = OpLoad %49 
                                         f32 %553 = OpFMul %551 %552 
                                                      OpStore %49 %553 
                                         f32 %554 = OpLoad %49 
                                       f32_3 %555 = OpCompositeConstruct %554 %554 %554 
                                       f32_4 %556 = OpLoad %9 
                                       f32_3 %557 = OpVectorShuffle %556 %556 0 1 2 
                                       f32_3 %558 = OpFMul %555 %557 
                                       f32_4 %559 = OpLoad %9 
                                       f32_4 %560 = OpVectorShuffle %559 %558 4 5 6 3 
                                                      OpStore %9 %560 
                                       f32_3 %563 = OpLoad %171 
                                       f32_4 %564 = OpLoad %9 
                                       f32_3 %565 = OpVectorShuffle %564 %564 0 1 2 
                                       f32_3 %566 = OpFMul %563 %565 
                                       f32_3 %567 = OpLoad %83 
                                       f32_3 %568 = OpFAdd %566 %567 
                                       f32_4 %569 = OpLoad %562 
                                       f32_4 %570 = OpVectorShuffle %569 %568 4 5 6 3 
                                                      OpStore %562 %570 
                                 Output f32* %572 = OpAccessChain %562 %158 
                                                      OpStore %572 %72 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL_COOKIE" "UNITY_HDR_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL_COOKIE" "UNITY_HDR_ON" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _LightDir;
uniform 	vec4 _LightColor;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
UNITY_LOCATION(0) uniform  sampler2D _CameraDepthTexture;
UNITY_LOCATION(1) uniform  sampler2D _LightTexture0;
UNITY_LOCATION(2) uniform  sampler2D _CameraGBufferTexture0;
UNITY_LOCATION(3) uniform  sampler2D _CameraGBufferTexture1;
UNITY_LOCATION(4) uniform  sampler2D _CameraGBufferTexture2;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec2 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
vec4 u_xlat6;
float u_xlat8;
float u_xlat9;
float u_xlat15;
float u_xlat21;
float u_xlat22;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat2 = texture(_CameraDepthTexture, u_xlat1.xy);
    u_xlat21 = _ZBufferParams.x * u_xlat2.x + _ZBufferParams.y;
    u_xlat21 = float(1.0) / u_xlat21;
    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat0.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat2.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat3.xyz = (-u_xlat2.xyz) * vec3(u_xlat21) + (-_LightDir.xyz);
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat21 = max(u_xlat21, 0.00100000005);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz;
    u_xlat4 = texture(_CameraGBufferTexture2, u_xlat1.xy);
    u_xlat4.xyz = u_xlat4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat21 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;
    u_xlat21 = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
    u_xlat15 = dot((-_LightDir.xyz), u_xlat3.xyz);
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
    u_xlat3 = texture(_CameraGBufferTexture1, u_xlat1.xy);
    u_xlat5 = texture(_CameraGBufferTexture0, u_xlat1.xy);
    u_xlat6 = (-u_xlat3.wxyz) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat1.x = u_xlat6.x * u_xlat6.x;
    u_xlat1.x = max(u_xlat1.x, 0.00200000009);
    u_xlat8 = u_xlat1.x * u_xlat1.x;
    u_xlat22 = u_xlat21 * u_xlat8 + (-u_xlat21);
    u_xlat21 = u_xlat22 * u_xlat21 + 1.0;
    u_xlat21 = u_xlat21 * u_xlat21 + 1.00000001e-07;
    u_xlat8 = u_xlat8 * 0.318309873;
    u_xlat21 = u_xlat8 / u_xlat21;
    u_xlat8 = dot(u_xlat4.xyz, (-u_xlat2.xyz));
    u_xlat22 = dot(u_xlat4.xyz, (-_LightDir.xyz));
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
    u_xlat2.x = (-u_xlat1.x) + 1.0;
    u_xlat9 = abs(u_xlat8) * u_xlat2.x + u_xlat1.x;
    u_xlat1.x = u_xlat22 * u_xlat2.x + u_xlat1.x;
    u_xlat1.x = u_xlat1.x * abs(u_xlat8);
    u_xlat8 = -abs(u_xlat8) + 1.0;
    u_xlat1.x = u_xlat22 * u_xlat9 + u_xlat1.x;
    u_xlat1.x = u_xlat1.x + 9.99999975e-06;
    u_xlat1.x = 0.5 / u_xlat1.x;
    u_xlat21 = u_xlat21 * u_xlat1.x;
    u_xlat21 = u_xlat21 * 3.14159274;
    u_xlat21 = u_xlat22 * u_xlat21;
    u_xlat21 = max(u_xlat21, 0.0);
    u_xlat1.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlatb1 = u_xlat1.x!=0.0;
    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
    u_xlat21 = u_xlat21 * u_xlat1.x;
    u_xlat2.xy = u_xlat0.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat0.xx + u_xlat2.xy;
    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat0.zz + u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy + hlslcc_mtx4x4unity_WorldToLight[3].xy;
    u_xlat2 = texture(_LightTexture0, u_xlat0.xy, -8.0);
    u_xlat0.xyz = u_xlat2.www * _LightColor.xyz;
    u_xlat2.xyz = u_xlat0.xyz * vec3(u_xlat21);
    u_xlat21 = (-u_xlat15) + 1.0;
    u_xlat1.x = u_xlat21 * u_xlat21;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat21 = u_xlat21 * u_xlat1.x;
    u_xlat3.xyz = u_xlat6.yzw * vec3(u_xlat21) + u_xlat3.xyz;
    u_xlat2.xyz = u_xlat2.xyz * u_xlat3.xyz;
    u_xlat21 = u_xlat15 + u_xlat15;
    u_xlat21 = u_xlat15 * u_xlat21;
    u_xlat21 = u_xlat21 * u_xlat6.x + -0.5;
    u_xlat1.x = u_xlat8 * u_xlat8;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat1.x = u_xlat8 * u_xlat1.x;
    u_xlat1.x = u_xlat21 * u_xlat1.x + 1.0;
    u_xlat8 = (-u_xlat22) + 1.0;
    u_xlat15 = u_xlat8 * u_xlat8;
    u_xlat15 = u_xlat15 * u_xlat15;
    u_xlat8 = u_xlat8 * u_xlat15;
    u_xlat21 = u_xlat21 * u_xlat8 + 1.0;
    u_xlat21 = u_xlat1.x * u_xlat21;
    u_xlat21 = u_xlat22 * u_xlat21;
    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    SV_Target0.xyz = u_xlat5.xyz * u_xlat0.xyz + u_xlat2.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL_COOKIE" "UNITY_HDR_ON" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 192
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %80 %102 %169 %175 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpMemberDecorate %78 0 BuiltIn 78 
                                                      OpMemberDecorate %78 1 BuiltIn 78 
                                                      OpMemberDecorate %78 2 BuiltIn 78 
                                                      OpDecorate %78 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 102 
                                                      OpDecorate %169 Location 169 
                                                      OpDecorate vs_TEXCOORD1 Location 175 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %16 %17 %18 %6 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 1 
                                              %24 = OpTypePointer Uniform %7 
                                          i32 %28 = OpConstant 0 
                                          i32 %36 = OpConstant 2 
                                          i32 %45 = OpConstant 3 
                               Private f32_4* %49 = OpVariable Private 
                                          u32 %76 = OpConstant 1 
                                              %77 = OpTypeArray %6 %76 
                                              %78 = OpTypeStruct %7 %6 %77 
                                              %79 = OpTypePointer Output %78 
         Output struct {f32_4; f32; f32[1];}* %80 = OpVariable Output 
                                              %82 = OpTypePointer Output %7 
                                              %84 = OpTypePointer Private %6 
                                          u32 %87 = OpConstant 0 
                                              %88 = OpTypePointer Uniform %6 
                               Private f32_4* %93 = OpVariable Private 
                                              %94 = OpTypeVector %6 3 
                                          f32 %97 = OpConstant 3.674022E-40 
                                        f32_3 %98 = OpConstantComposite %97 %97 %97 
                       Output f32_4* vs_TEXCOORD0 = OpVariable Output 
                                             %103 = OpTypeVector %6 2 
                                         f32 %158 = OpConstant 3.674022E-40 
                                         f32 %159 = OpConstant 3.674022E-40 
                                       f32_3 %160 = OpConstantComposite %158 %158 %159 
                                             %168 = OpTypePointer Input %94 
                                Input f32_3* %169 = OpVariable Input 
                                             %174 = OpTypePointer Output %94 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                                         i32 %176 = OpConstant 4 
                                             %186 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %25 = OpAccessChain %21 %23 %23 
                                        f32_4 %26 = OpLoad %25 
                                        f32_4 %27 = OpFMul %13 %26 
                                                      OpStore %9 %27 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %28 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %44 = OpLoad %9 
                               Uniform f32_4* %46 = OpAccessChain %21 %23 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_4 %48 = OpFAdd %44 %47 
                                                      OpStore %9 %48 
                                        f32_4 %50 = OpLoad %9 
                                        f32_4 %51 = OpVectorShuffle %50 %50 1 1 1 1 
                               Uniform f32_4* %52 = OpAccessChain %21 %45 %23 
                                        f32_4 %53 = OpLoad %52 
                                        f32_4 %54 = OpFMul %51 %53 
                                                      OpStore %49 %54 
                               Uniform f32_4* %55 = OpAccessChain %21 %45 %28 
                                        f32_4 %56 = OpLoad %55 
                                        f32_4 %57 = OpLoad %9 
                                        f32_4 %58 = OpVectorShuffle %57 %57 0 0 0 0 
                                        f32_4 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %49 
                                        f32_4 %61 = OpFAdd %59 %60 
                                                      OpStore %49 %61 
                               Uniform f32_4* %62 = OpAccessChain %21 %45 %36 
                                        f32_4 %63 = OpLoad %62 
                                        f32_4 %64 = OpLoad %9 
                                        f32_4 %65 = OpVectorShuffle %64 %64 2 2 2 2 
                                        f32_4 %66 = OpFMul %63 %65 
                                        f32_4 %67 = OpLoad %49 
                                        f32_4 %68 = OpFAdd %66 %67 
                                                      OpStore %49 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %45 %45 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %9 
                                        f32_4 %72 = OpVectorShuffle %71 %71 3 3 3 3 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %49 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %49 %75 
                                        f32_4 %81 = OpLoad %49 
                                Output f32_4* %83 = OpAccessChain %80 %28 
                                                      OpStore %83 %81 
                                 Private f32* %85 = OpAccessChain %49 %76 
                                          f32 %86 = OpLoad %85 
                                 Uniform f32* %89 = OpAccessChain %21 %28 %87 
                                          f32 %90 = OpLoad %89 
                                          f32 %91 = OpFMul %86 %90 
                                 Private f32* %92 = OpAccessChain %49 %76 
                                                      OpStore %92 %91 
                                        f32_4 %95 = OpLoad %49 
                                        f32_3 %96 = OpVectorShuffle %95 %95 0 3 1 
                                        f32_3 %99 = OpFMul %96 %98 
                                       f32_4 %100 = OpLoad %93 
                                       f32_4 %101 = OpVectorShuffle %100 %99 4 1 5 6 
                                                      OpStore %93 %101 
                                       f32_4 %104 = OpLoad %49 
                                       f32_2 %105 = OpVectorShuffle %104 %104 2 3 
                                       f32_4 %106 = OpLoad vs_TEXCOORD0 
                                       f32_4 %107 = OpVectorShuffle %106 %105 0 1 4 5 
                                                      OpStore vs_TEXCOORD0 %107 
                                       f32_4 %108 = OpLoad %93 
                                       f32_2 %109 = OpVectorShuffle %108 %108 2 2 
                                       f32_4 %110 = OpLoad %93 
                                       f32_2 %111 = OpVectorShuffle %110 %110 0 3 
                                       f32_2 %112 = OpFAdd %109 %111 
                                       f32_4 %113 = OpLoad vs_TEXCOORD0 
                                       f32_4 %114 = OpVectorShuffle %113 %112 4 5 2 3 
                                                      OpStore vs_TEXCOORD0 %114 
                                       f32_4 %115 = OpLoad %9 
                                       f32_3 %116 = OpVectorShuffle %115 %115 1 1 1 
                              Uniform f32_4* %117 = OpAccessChain %21 %36 %23 
                                       f32_4 %118 = OpLoad %117 
                                       f32_3 %119 = OpVectorShuffle %118 %118 0 1 2 
                                       f32_3 %120 = OpFMul %116 %119 
                                       f32_4 %121 = OpLoad %49 
                                       f32_4 %122 = OpVectorShuffle %121 %120 4 5 6 3 
                                                      OpStore %49 %122 
                              Uniform f32_4* %123 = OpAccessChain %21 %36 %28 
                                       f32_4 %124 = OpLoad %123 
                                       f32_3 %125 = OpVectorShuffle %124 %124 0 1 2 
                                       f32_4 %126 = OpLoad %9 
                                       f32_3 %127 = OpVectorShuffle %126 %126 0 0 0 
                                       f32_3 %128 = OpFMul %125 %127 
                                       f32_4 %129 = OpLoad %49 
                                       f32_3 %130 = OpVectorShuffle %129 %129 0 1 2 
                                       f32_3 %131 = OpFAdd %128 %130 
                                       f32_4 %132 = OpLoad %49 
                                       f32_4 %133 = OpVectorShuffle %132 %131 4 5 6 3 
                                                      OpStore %49 %133 
                              Uniform f32_4* %134 = OpAccessChain %21 %36 %36 
                                       f32_4 %135 = OpLoad %134 
                                       f32_3 %136 = OpVectorShuffle %135 %135 0 1 2 
                                       f32_4 %137 = OpLoad %9 
                                       f32_3 %138 = OpVectorShuffle %137 %137 2 2 2 
                                       f32_3 %139 = OpFMul %136 %138 
                                       f32_4 %140 = OpLoad %49 
                                       f32_3 %141 = OpVectorShuffle %140 %140 0 1 2 
                                       f32_3 %142 = OpFAdd %139 %141 
                                       f32_4 %143 = OpLoad %9 
                                       f32_4 %144 = OpVectorShuffle %143 %142 4 5 6 3 
                                                      OpStore %9 %144 
                              Uniform f32_4* %145 = OpAccessChain %21 %36 %45 
                                       f32_4 %146 = OpLoad %145 
                                       f32_3 %147 = OpVectorShuffle %146 %146 0 1 2 
                                       f32_4 %148 = OpLoad %9 
                                       f32_3 %149 = OpVectorShuffle %148 %148 3 3 3 
                                       f32_3 %150 = OpFMul %147 %149 
                                       f32_4 %151 = OpLoad %9 
                                       f32_3 %152 = OpVectorShuffle %151 %151 0 1 2 
                                       f32_3 %153 = OpFAdd %150 %152 
                                       f32_4 %154 = OpLoad %9 
                                       f32_4 %155 = OpVectorShuffle %154 %153 4 5 6 3 
                                                      OpStore %9 %155 
                                       f32_4 %156 = OpLoad %9 
                                       f32_3 %157 = OpVectorShuffle %156 %156 0 1 2 
                                       f32_3 %161 = OpFMul %157 %160 
                                       f32_4 %162 = OpLoad %49 
                                       f32_4 %163 = OpVectorShuffle %162 %161 4 5 6 3 
                                                      OpStore %49 %163 
                                       f32_4 %164 = OpLoad %9 
                                       f32_3 %165 = OpVectorShuffle %164 %164 0 1 2 
                                       f32_3 %166 = OpFNegate %165 
                                       f32_3 %167 = OpFMul %166 %160 
                                       f32_3 %170 = OpLoad %169 
                                       f32_3 %171 = OpFAdd %167 %170 
                                       f32_4 %172 = OpLoad %9 
                                       f32_4 %173 = OpVectorShuffle %172 %171 4 5 6 3 
                                                      OpStore %9 %173 
                                Uniform f32* %177 = OpAccessChain %21 %176 
                                         f32 %178 = OpLoad %177 
                                       f32_3 %179 = OpCompositeConstruct %178 %178 %178 
                                       f32_4 %180 = OpLoad %9 
                                       f32_3 %181 = OpVectorShuffle %180 %180 0 1 2 
                                       f32_3 %182 = OpFMul %179 %181 
                                       f32_4 %183 = OpLoad %49 
                                       f32_3 %184 = OpVectorShuffle %183 %183 0 1 2 
                                       f32_3 %185 = OpFAdd %182 %184 
                                                      OpStore vs_TEXCOORD1 %185 
                                 Output f32* %187 = OpAccessChain %80 %28 %76 
                                         f32 %188 = OpLoad %187 
                                         f32 %189 = OpFNegate %188 
                                 Output f32* %190 = OpAccessChain %80 %28 %76 
                                                      OpStore %190 %189 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 547
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %25 %41 %533 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpDecorate %13 ArrayStride 13 
                                                      OpDecorate %14 ArrayStride 14 
                                                      OpMemberDecorate %15 0 Offset 15 
                                                      OpMemberDecorate %15 1 Offset 15 
                                                      OpMemberDecorate %15 2 Offset 15 
                                                      OpMemberDecorate %15 3 Offset 15 
                                                      OpMemberDecorate %15 4 Offset 15 
                                                      OpMemberDecorate %15 5 Offset 15 
                                                      OpMemberDecorate %15 6 Offset 15 
                                                      OpDecorate %15 Block 
                                                      OpDecorate %17 DescriptorSet 17 
                                                      OpDecorate %17 Binding 17 
                                                      OpDecorate vs_TEXCOORD1 Location 25 
                                                      OpDecorate vs_TEXCOORD0 Location 41 
                                                      OpDecorate %53 DescriptorSet 53 
                                                      OpDecorate %53 Binding 53 
                                                      OpDecorate %57 DescriptorSet 57 
                                                      OpDecorate %57 Binding 57 
                                                      OpDecorate %172 DescriptorSet 172 
                                                      OpDecorate %172 Binding 172 
                                                      OpDecorate %174 DescriptorSet 174 
                                                      OpDecorate %174 Binding 174 
                                                      OpDecorate %214 DescriptorSet 214 
                                                      OpDecorate %214 Binding 214 
                                                      OpDecorate %216 DescriptorSet 216 
                                                      OpDecorate %216 Binding 216 
                                                      OpDecorate %222 DescriptorSet 222 
                                                      OpDecorate %222 Binding 222 
                                                      OpDecorate %224 DescriptorSet 224 
                                                      OpDecorate %224 Binding 224 
                                                      OpDecorate %406 DescriptorSet 406 
                                                      OpDecorate %406 Binding 406 
                                                      OpDecorate %408 DescriptorSet 408 
                                                      OpDecorate %408 Binding 408 
                                                      OpDecorate %533 Location 533 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 3 
                                              %11 = OpTypeInt 32 0 
                                          u32 %12 = OpConstant 4 
                                              %13 = OpTypeArray %7 %12 
                                              %14 = OpTypeArray %7 %12 
                                              %15 = OpTypeStruct %10 %7 %7 %13 %7 %7 %14 
                                              %16 = OpTypePointer Uniform %15 
Uniform struct {f32_3; f32_4; f32_4; f32_4[4]; f32_4; f32_4; f32_4[4];}* %17 = OpVariable Uniform 
                                              %18 = OpTypeInt 32 1 
                                          i32 %19 = OpConstant 1 
                                          u32 %20 = OpConstant 2 
                                              %21 = OpTypePointer Uniform %6 
                                              %24 = OpTypePointer Input %10 
                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                                              %26 = OpTypePointer Input %6 
                                          u32 %30 = OpConstant 0 
                                              %31 = OpTypePointer Private %6 
                               Private f32_4* %39 = OpVariable Private 
                                              %40 = OpTypePointer Input %7 
                        Input f32_4* vs_TEXCOORD0 = OpVariable Input 
                                              %42 = OpTypeVector %6 2 
                                 Private f32* %50 = OpVariable Private 
                                              %51 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %52 = OpTypePointer UniformConstant %51 
         UniformConstant read_only Texture2D* %53 = OpVariable UniformConstant 
                                              %55 = OpTypeSampler 
                                              %56 = OpTypePointer UniformConstant %55 
                     UniformConstant sampler* %57 = OpVariable UniformConstant 
                                              %59 = OpTypeSampledImage %51 
                                          i32 %65 = OpConstant 2 
                                          u32 %70 = OpConstant 1 
                                          f32 %74 = OpConstant 3.674022E-40 
                                              %84 = OpTypePointer Private %10 
                               Private f32_3* %85 = OpVariable Private 
                                          i32 %88 = OpConstant 3 
                                              %89 = OpTypePointer Uniform %7 
                                          i32 %94 = OpConstant 0 
                                             %126 = OpTypePointer Uniform %10 
                              Private f32_4* %136 = OpVariable Private 
                                         i32 %142 = OpConstant 4 
                                         f32 %160 = OpConstant 3.674022E-40 
                              Private f32_3* %171 = OpVariable Private 
        UniformConstant read_only Texture2D* %172 = OpVariable UniformConstant 
                    UniformConstant sampler* %174 = OpVariable UniformConstant 
                                         f32 %182 = OpConstant 3.674022E-40 
                                       f32_3 %183 = OpConstantComposite %182 %182 %182 
                                         f32 %185 = OpConstant 3.674022E-40 
                                       f32_3 %186 = OpConstantComposite %185 %185 %185 
                                         f32 %202 = OpConstant 3.674022E-40 
                                Private f32* %204 = OpVariable Private 
        UniformConstant read_only Texture2D* %214 = OpVariable UniformConstant 
                    UniformConstant sampler* %216 = OpVariable UniformConstant 
        UniformConstant read_only Texture2D* %222 = OpVariable UniformConstant 
                    UniformConstant sampler* %224 = OpVariable UniformConstant 
                              Private f32_4* %233 = OpVariable Private 
                                       f32_4 %237 = OpConstantComposite %74 %74 %74 %74 
                                Private f32* %239 = OpVariable Private 
                                         f32 %246 = OpConstant 3.674022E-40 
                                Private f32* %248 = OpVariable Private 
                                Private f32* %252 = OpVariable Private 
                                         f32 %266 = OpConstant 3.674022E-40 
                                         f32 %269 = OpConstant 3.674022E-40 
                                Private f32* %279 = OpVariable Private 
                                             %288 = OpTypePointer Private %42 
                              Private f32_2* %289 = OpVariable Private 
                                         f32 %331 = OpConstant 3.674022E-40 
                                         f32 %334 = OpConstant 3.674022E-40 
                                         f32 %347 = OpConstant 3.674022E-40 
                                             %357 = OpTypeBool 
                                             %358 = OpTypePointer Private %357 
                               Private bool* %359 = OpVariable Private 
                                         i32 %372 = OpConstant 6 
        UniformConstant read_only Texture2D* %406 = OpVariable UniformConstant 
                    UniformConstant sampler* %408 = OpVariable UniformConstant 
                                         f32 %413 = OpConstant 3.674022E-40 
                                         u32 %415 = OpConstant 3 
                                         i32 %420 = OpConstant 5 
                                         f32 %444 = OpConstant 3.674022E-40 
                                             %532 = OpTypePointer Output %7 
                               Output f32_4* %533 = OpVariable Output 
                                             %544 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                 Uniform f32* %22 = OpAccessChain %17 %19 %20 
                                          f32 %23 = OpLoad %22 
                                   Input f32* %27 = OpAccessChain vs_TEXCOORD1 %20 
                                          f32 %28 = OpLoad %27 
                                          f32 %29 = OpFDiv %23 %28 
                                 Private f32* %32 = OpAccessChain %9 %30 
                                                      OpStore %32 %29 
                                        f32_4 %33 = OpLoad %9 
                                        f32_3 %34 = OpVectorShuffle %33 %33 0 0 0 
                                        f32_3 %35 = OpLoad vs_TEXCOORD1 
                                        f32_3 %36 = OpFMul %34 %35 
                                        f32_4 %37 = OpLoad %9 
                                        f32_4 %38 = OpVectorShuffle %37 %36 4 5 6 3 
                                                      OpStore %9 %38 
                                        f32_4 %43 = OpLoad vs_TEXCOORD0 
                                        f32_2 %44 = OpVectorShuffle %43 %43 0 1 
                                        f32_4 %45 = OpLoad vs_TEXCOORD0 
                                        f32_2 %46 = OpVectorShuffle %45 %45 3 3 
                                        f32_2 %47 = OpFDiv %44 %46 
                                        f32_4 %48 = OpLoad %39 
                                        f32_4 %49 = OpVectorShuffle %48 %47 4 5 2 3 
                                                      OpStore %39 %49 
                          read_only Texture2D %54 = OpLoad %53 
                                      sampler %58 = OpLoad %57 
                   read_only Texture2DSampled %60 = OpSampledImage %54 %58 
                                        f32_4 %61 = OpLoad %39 
                                        f32_2 %62 = OpVectorShuffle %61 %61 0 1 
                                        f32_4 %63 = OpImageSampleImplicitLod %60 %62 
                                          f32 %64 = OpCompositeExtract %63 0 
                                                      OpStore %50 %64 
                                 Uniform f32* %66 = OpAccessChain %17 %65 %30 
                                          f32 %67 = OpLoad %66 
                                          f32 %68 = OpLoad %50 
                                          f32 %69 = OpFMul %67 %68 
                                 Uniform f32* %71 = OpAccessChain %17 %65 %70 
                                          f32 %72 = OpLoad %71 
                                          f32 %73 = OpFAdd %69 %72 
                                                      OpStore %50 %73 
                                          f32 %75 = OpLoad %50 
                                          f32 %76 = OpFDiv %74 %75 
                                                      OpStore %50 %76 
                                          f32 %77 = OpLoad %50 
                                        f32_3 %78 = OpCompositeConstruct %77 %77 %77 
                                        f32_4 %79 = OpLoad %9 
                                        f32_3 %80 = OpVectorShuffle %79 %79 0 1 2 
                                        f32_3 %81 = OpFMul %78 %80 
                                        f32_4 %82 = OpLoad %9 
                                        f32_4 %83 = OpVectorShuffle %82 %81 4 5 6 3 
                                                      OpStore %9 %83 
                                        f32_4 %86 = OpLoad %9 
                                        f32_3 %87 = OpVectorShuffle %86 %86 1 1 1 
                               Uniform f32_4* %90 = OpAccessChain %17 %88 %19 
                                        f32_4 %91 = OpLoad %90 
                                        f32_3 %92 = OpVectorShuffle %91 %91 0 1 2 
                                        f32_3 %93 = OpFMul %87 %92 
                                                      OpStore %85 %93 
                               Uniform f32_4* %95 = OpAccessChain %17 %88 %94 
                                        f32_4 %96 = OpLoad %95 
                                        f32_3 %97 = OpVectorShuffle %96 %96 0 1 2 
                                        f32_4 %98 = OpLoad %9 
                                        f32_3 %99 = OpVectorShuffle %98 %98 0 0 0 
                                       f32_3 %100 = OpFMul %97 %99 
                                       f32_3 %101 = OpLoad %85 
                                       f32_3 %102 = OpFAdd %100 %101 
                                       f32_4 %103 = OpLoad %9 
                                       f32_4 %104 = OpVectorShuffle %103 %102 4 5 2 6 
                                                      OpStore %9 %104 
                              Uniform f32_4* %105 = OpAccessChain %17 %88 %65 
                                       f32_4 %106 = OpLoad %105 
                                       f32_3 %107 = OpVectorShuffle %106 %106 0 1 2 
                                       f32_4 %108 = OpLoad %9 
                                       f32_3 %109 = OpVectorShuffle %108 %108 2 2 2 
                                       f32_3 %110 = OpFMul %107 %109 
                                       f32_4 %111 = OpLoad %9 
                                       f32_3 %112 = OpVectorShuffle %111 %111 0 1 3 
                                       f32_3 %113 = OpFAdd %110 %112 
                                       f32_4 %114 = OpLoad %9 
                                       f32_4 %115 = OpVectorShuffle %114 %113 4 5 6 3 
                                                      OpStore %9 %115 
                                       f32_4 %116 = OpLoad %9 
                                       f32_3 %117 = OpVectorShuffle %116 %116 0 1 2 
                              Uniform f32_4* %118 = OpAccessChain %17 %88 %88 
                                       f32_4 %119 = OpLoad %118 
                                       f32_3 %120 = OpVectorShuffle %119 %119 0 1 2 
                                       f32_3 %121 = OpFAdd %117 %120 
                                       f32_4 %122 = OpLoad %9 
                                       f32_4 %123 = OpVectorShuffle %122 %121 4 5 6 3 
                                                      OpStore %9 %123 
                                       f32_4 %124 = OpLoad %9 
                                       f32_3 %125 = OpVectorShuffle %124 %124 0 1 2 
                              Uniform f32_3* %127 = OpAccessChain %17 %94 
                                       f32_3 %128 = OpLoad %127 
                                       f32_3 %129 = OpFNegate %128 
                                       f32_3 %130 = OpFAdd %125 %129 
                                                      OpStore %85 %130 
                                       f32_3 %131 = OpLoad %85 
                                       f32_3 %132 = OpLoad %85 
                                         f32 %133 = OpDot %131 %132 
                                                      OpStore %50 %133 
                                         f32 %134 = OpLoad %50 
                                         f32 %135 = OpExtInst %1 32 %134 
                                                      OpStore %50 %135 
                                       f32_3 %137 = OpLoad %85 
                                       f32_3 %138 = OpFNegate %137 
                                         f32 %139 = OpLoad %50 
                                       f32_3 %140 = OpCompositeConstruct %139 %139 %139 
                                       f32_3 %141 = OpFMul %138 %140 
                              Uniform f32_4* %143 = OpAccessChain %17 %142 
                                       f32_4 %144 = OpLoad %143 
                                       f32_3 %145 = OpVectorShuffle %144 %144 0 1 2 
                                       f32_3 %146 = OpFNegate %145 
                                       f32_3 %147 = OpFAdd %141 %146 
                                       f32_4 %148 = OpLoad %136 
                                       f32_4 %149 = OpVectorShuffle %148 %147 4 5 6 3 
                                                      OpStore %136 %149 
                                         f32 %150 = OpLoad %50 
                                       f32_3 %151 = OpCompositeConstruct %150 %150 %150 
                                       f32_3 %152 = OpLoad %85 
                                       f32_3 %153 = OpFMul %151 %152 
                                                      OpStore %85 %153 
                                       f32_4 %154 = OpLoad %136 
                                       f32_3 %155 = OpVectorShuffle %154 %154 0 1 2 
                                       f32_4 %156 = OpLoad %136 
                                       f32_3 %157 = OpVectorShuffle %156 %156 0 1 2 
                                         f32 %158 = OpDot %155 %157 
                                                      OpStore %50 %158 
                                         f32 %159 = OpLoad %50 
                                         f32 %161 = OpExtInst %1 40 %159 %160 
                                                      OpStore %50 %161 
                                         f32 %162 = OpLoad %50 
                                         f32 %163 = OpExtInst %1 32 %162 
                                                      OpStore %50 %163 
                                         f32 %164 = OpLoad %50 
                                       f32_3 %165 = OpCompositeConstruct %164 %164 %164 
                                       f32_4 %166 = OpLoad %136 
                                       f32_3 %167 = OpVectorShuffle %166 %166 0 1 2 
                                       f32_3 %168 = OpFMul %165 %167 
                                       f32_4 %169 = OpLoad %136 
                                       f32_4 %170 = OpVectorShuffle %169 %168 4 5 6 3 
                                                      OpStore %136 %170 
                         read_only Texture2D %173 = OpLoad %172 
                                     sampler %175 = OpLoad %174 
                  read_only Texture2DSampled %176 = OpSampledImage %173 %175 
                                       f32_4 %177 = OpLoad %39 
                                       f32_2 %178 = OpVectorShuffle %177 %177 0 1 
                                       f32_4 %179 = OpImageSampleImplicitLod %176 %178 
                                       f32_3 %180 = OpVectorShuffle %179 %179 0 1 2 
                                                      OpStore %171 %180 
                                       f32_3 %181 = OpLoad %171 
                                       f32_3 %184 = OpFMul %181 %183 
                                       f32_3 %187 = OpFAdd %184 %186 
                                                      OpStore %171 %187 
                                       f32_3 %188 = OpLoad %171 
                                       f32_3 %189 = OpLoad %171 
                                         f32 %190 = OpDot %188 %189 
                                                      OpStore %50 %190 
                                         f32 %191 = OpLoad %50 
                                         f32 %192 = OpExtInst %1 32 %191 
                                                      OpStore %50 %192 
                                         f32 %193 = OpLoad %50 
                                       f32_3 %194 = OpCompositeConstruct %193 %193 %193 
                                       f32_3 %195 = OpLoad %171 
                                       f32_3 %196 = OpFMul %194 %195 
                                                      OpStore %171 %196 
                                       f32_3 %197 = OpLoad %171 
                                       f32_4 %198 = OpLoad %136 
                                       f32_3 %199 = OpVectorShuffle %198 %198 0 1 2 
                                         f32 %200 = OpDot %197 %199 
                                                      OpStore %50 %200 
                                         f32 %201 = OpLoad %50 
                                         f32 %203 = OpExtInst %1 43 %201 %202 %74 
                                                      OpStore %50 %203 
                              Uniform f32_4* %205 = OpAccessChain %17 %142 
                                       f32_4 %206 = OpLoad %205 
                                       f32_3 %207 = OpVectorShuffle %206 %206 0 1 2 
                                       f32_3 %208 = OpFNegate %207 
                                       f32_4 %209 = OpLoad %136 
                                       f32_3 %210 = OpVectorShuffle %209 %209 0 1 2 
                                         f32 %211 = OpDot %208 %210 
                                                      OpStore %204 %211 
                                         f32 %212 = OpLoad %204 
                                         f32 %213 = OpExtInst %1 43 %212 %202 %74 
                                                      OpStore %204 %213 
                         read_only Texture2D %215 = OpLoad %214 
                                     sampler %217 = OpLoad %216 
                  read_only Texture2DSampled %218 = OpSampledImage %215 %217 
                                       f32_4 %219 = OpLoad %39 
                                       f32_2 %220 = OpVectorShuffle %219 %219 0 1 
                                       f32_4 %221 = OpImageSampleImplicitLod %218 %220 
                                                      OpStore %136 %221 
                         read_only Texture2D %223 = OpLoad %222 
                                     sampler %225 = OpLoad %224 
                  read_only Texture2DSampled %226 = OpSampledImage %223 %225 
                                       f32_4 %227 = OpLoad %39 
                                       f32_2 %228 = OpVectorShuffle %227 %227 0 1 
                                       f32_4 %229 = OpImageSampleImplicitLod %226 %228 
                                       f32_3 %230 = OpVectorShuffle %229 %229 0 1 2 
                                       f32_4 %231 = OpLoad %39 
                                       f32_4 %232 = OpVectorShuffle %231 %230 4 5 2 6 
                                                      OpStore %39 %232 
                                       f32_4 %234 = OpLoad %136 
                                       f32_4 %235 = OpVectorShuffle %234 %234 3 0 1 2 
                                       f32_4 %236 = OpFNegate %235 
                                       f32_4 %238 = OpFAdd %236 %237 
                                                      OpStore %233 %238 
                                Private f32* %240 = OpAccessChain %233 %30 
                                         f32 %241 = OpLoad %240 
                                Private f32* %242 = OpAccessChain %233 %30 
                                         f32 %243 = OpLoad %242 
                                         f32 %244 = OpFMul %241 %243 
                                                      OpStore %239 %244 
                                         f32 %245 = OpLoad %239 
                                         f32 %247 = OpExtInst %1 40 %245 %246 
                                                      OpStore %239 %247 
                                         f32 %249 = OpLoad %239 
                                         f32 %250 = OpLoad %239 
                                         f32 %251 = OpFMul %249 %250 
                                                      OpStore %248 %251 
                                         f32 %253 = OpLoad %50 
                                         f32 %254 = OpLoad %248 
                                         f32 %255 = OpFMul %253 %254 
                                         f32 %256 = OpLoad %50 
                                         f32 %257 = OpFNegate %256 
                                         f32 %258 = OpFAdd %255 %257 
                                                      OpStore %252 %258 
                                         f32 %259 = OpLoad %252 
                                         f32 %260 = OpLoad %50 
                                         f32 %261 = OpFMul %259 %260 
                                         f32 %262 = OpFAdd %261 %74 
                                                      OpStore %50 %262 
                                         f32 %263 = OpLoad %50 
                                         f32 %264 = OpLoad %50 
                                         f32 %265 = OpFMul %263 %264 
                                         f32 %267 = OpFAdd %265 %266 
                                                      OpStore %50 %267 
                                         f32 %268 = OpLoad %248 
                                         f32 %270 = OpFMul %268 %269 
                                                      OpStore %248 %270 
                                         f32 %271 = OpLoad %248 
                                         f32 %272 = OpLoad %50 
                                         f32 %273 = OpFDiv %271 %272 
                                                      OpStore %50 %273 
                                       f32_3 %274 = OpLoad %171 
                                       f32_3 %275 = OpLoad %85 
                                       f32_3 %276 = OpFNegate %275 
                                         f32 %277 = OpDot %274 %276 
                                Private f32* %278 = OpAccessChain %85 %30 
                                                      OpStore %278 %277 
                                       f32_3 %280 = OpLoad %171 
                              Uniform f32_4* %281 = OpAccessChain %17 %142 
                                       f32_4 %282 = OpLoad %281 
                                       f32_3 %283 = OpVectorShuffle %282 %282 0 1 2 
                                       f32_3 %284 = OpFNegate %283 
                                         f32 %285 = OpDot %280 %284 
                                                      OpStore %279 %285 
                                         f32 %286 = OpLoad %279 
                                         f32 %287 = OpExtInst %1 43 %286 %202 %74 
                                                      OpStore %279 %287 
                                         f32 %290 = OpLoad %239 
                                         f32 %291 = OpFNegate %290 
                                         f32 %292 = OpFAdd %291 %74 
                                Private f32* %293 = OpAccessChain %289 %30 
                                                      OpStore %293 %292 
                                Private f32* %294 = OpAccessChain %85 %30 
                                         f32 %295 = OpLoad %294 
                                         f32 %296 = OpExtInst %1 4 %295 
                                Private f32* %297 = OpAccessChain %289 %30 
                                         f32 %298 = OpLoad %297 
                                         f32 %299 = OpFMul %296 %298 
                                         f32 %300 = OpLoad %239 
                                         f32 %301 = OpFAdd %299 %300 
                                                      OpStore %248 %301 
                                         f32 %302 = OpLoad %279 
                                Private f32* %303 = OpAccessChain %289 %30 
                                         f32 %304 = OpLoad %303 
                                         f32 %305 = OpFMul %302 %304 
                                         f32 %306 = OpLoad %239 
                                         f32 %307 = OpFAdd %305 %306 
                                Private f32* %308 = OpAccessChain %289 %30 
                                                      OpStore %308 %307 
                                Private f32* %309 = OpAccessChain %289 %30 
                                         f32 %310 = OpLoad %309 
                                Private f32* %311 = OpAccessChain %85 %30 
                                         f32 %312 = OpLoad %311 
                                         f32 %313 = OpExtInst %1 4 %312 
                                         f32 %314 = OpFMul %310 %313 
                                Private f32* %315 = OpAccessChain %289 %30 
                                                      OpStore %315 %314 
                                Private f32* %316 = OpAccessChain %85 %30 
                                         f32 %317 = OpLoad %316 
                                         f32 %318 = OpExtInst %1 4 %317 
                                         f32 %319 = OpFNegate %318 
                                         f32 %320 = OpFAdd %319 %74 
                                Private f32* %321 = OpAccessChain %85 %30 
                                                      OpStore %321 %320 
                                         f32 %322 = OpLoad %279 
                                         f32 %323 = OpLoad %248 
                                         f32 %324 = OpFMul %322 %323 
                                Private f32* %325 = OpAccessChain %289 %30 
                                         f32 %326 = OpLoad %325 
                                         f32 %327 = OpFAdd %324 %326 
                                Private f32* %328 = OpAccessChain %289 %30 
                                                      OpStore %328 %327 
                                Private f32* %329 = OpAccessChain %289 %30 
                                         f32 %330 = OpLoad %329 
                                         f32 %332 = OpFAdd %330 %331 
                                Private f32* %333 = OpAccessChain %289 %30 
                                                      OpStore %333 %332 
                                Private f32* %335 = OpAccessChain %289 %30 
                                         f32 %336 = OpLoad %335 
                                         f32 %337 = OpFDiv %334 %336 
                                Private f32* %338 = OpAccessChain %289 %30 
                                                      OpStore %338 %337 
                                         f32 %339 = OpLoad %50 
                                Private f32* %340 = OpAccessChain %289 %30 
                                         f32 %341 = OpLoad %340 
                                         f32 %342 = OpFMul %339 %341 
                                                      OpStore %50 %342 
                                         f32 %343 = OpLoad %279 
                                         f32 %344 = OpLoad %50 
                                         f32 %345 = OpFMul %343 %344 
                                                      OpStore %50 %345 
                                         f32 %346 = OpLoad %50 
                                         f32 %348 = OpFMul %346 %347 
                                                      OpStore %50 %348 
                                         f32 %349 = OpLoad %50 
                                         f32 %350 = OpExtInst %1 40 %349 %202 
                                                      OpStore %50 %350 
                                       f32_4 %351 = OpLoad %136 
                                       f32_3 %352 = OpVectorShuffle %351 %351 0 1 2 
                                       f32_4 %353 = OpLoad %136 
                                       f32_3 %354 = OpVectorShuffle %353 %353 0 1 2 
                                         f32 %355 = OpDot %352 %354 
                                Private f32* %356 = OpAccessChain %289 %30 
                                                      OpStore %356 %355 
                                Private f32* %360 = OpAccessChain %289 %30 
                                         f32 %361 = OpLoad %360 
                                        bool %362 = OpFOrdNotEqual %361 %202 
                                                      OpStore %359 %362 
                                        bool %363 = OpLoad %359 
                                         f32 %364 = OpSelect %363 %74 %202 
                                Private f32* %365 = OpAccessChain %289 %30 
                                                      OpStore %365 %364 
                                         f32 %366 = OpLoad %50 
                                Private f32* %367 = OpAccessChain %289 %30 
                                         f32 %368 = OpLoad %367 
                                         f32 %369 = OpFMul %366 %368 
                                                      OpStore %50 %369 
                                       f32_4 %370 = OpLoad %9 
                                       f32_2 %371 = OpVectorShuffle %370 %370 1 1 
                              Uniform f32_4* %373 = OpAccessChain %17 %372 %19 
                                       f32_4 %374 = OpLoad %373 
                                       f32_2 %375 = OpVectorShuffle %374 %374 0 1 
                                       f32_2 %376 = OpFMul %371 %375 
                                                      OpStore %289 %376 
                              Uniform f32_4* %377 = OpAccessChain %17 %372 %94 
                                       f32_4 %378 = OpLoad %377 
                                       f32_2 %379 = OpVectorShuffle %378 %378 0 1 
                                       f32_4 %380 = OpLoad %9 
                                       f32_2 %381 = OpVectorShuffle %380 %380 0 0 
                                       f32_2 %382 = OpFMul %379 %381 
                                       f32_2 %383 = OpLoad %289 
                                       f32_2 %384 = OpFAdd %382 %383 
                                       f32_4 %385 = OpLoad %9 
                                       f32_4 %386 = OpVectorShuffle %385 %384 4 5 2 3 
                                                      OpStore %9 %386 
                              Uniform f32_4* %387 = OpAccessChain %17 %372 %65 
                                       f32_4 %388 = OpLoad %387 
                                       f32_2 %389 = OpVectorShuffle %388 %388 0 1 
                                       f32_4 %390 = OpLoad %9 
                                       f32_2 %391 = OpVectorShuffle %390 %390 2 2 
                                       f32_2 %392 = OpFMul %389 %391 
                                       f32_4 %393 = OpLoad %9 
                                       f32_2 %394 = OpVectorShuffle %393 %393 0 1 
                                       f32_2 %395 = OpFAdd %392 %394 
                                       f32_4 %396 = OpLoad %9 
                                       f32_4 %397 = OpVectorShuffle %396 %395 4 5 2 3 
                                                      OpStore %9 %397 
                                       f32_4 %398 = OpLoad %9 
                                       f32_2 %399 = OpVectorShuffle %398 %398 0 1 
                              Uniform f32_4* %400 = OpAccessChain %17 %372 %88 
                                       f32_4 %401 = OpLoad %400 
                                       f32_2 %402 = OpVectorShuffle %401 %401 0 1 
                                       f32_2 %403 = OpFAdd %399 %402 
                                       f32_4 %404 = OpLoad %9 
                                       f32_4 %405 = OpVectorShuffle %404 %403 4 5 2 3 
                                                      OpStore %9 %405 
                         read_only Texture2D %407 = OpLoad %406 
                                     sampler %409 = OpLoad %408 
                  read_only Texture2DSampled %410 = OpSampledImage %407 %409 
                                       f32_4 %411 = OpLoad %9 
                                       f32_2 %412 = OpVectorShuffle %411 %411 0 1 
                                       f32_4 %414 = OpImageSampleImplicitLod %410 %412 Bias %7 
                                         f32 %416 = OpCompositeExtract %414 3 
                                Private f32* %417 = OpAccessChain %9 %30 
                                                      OpStore %417 %416 
                                       f32_4 %418 = OpLoad %9 
                                       f32_3 %419 = OpVectorShuffle %418 %418 0 0 0 
                              Uniform f32_4* %421 = OpAccessChain %17 %420 
                                       f32_4 %422 = OpLoad %421 
                                       f32_3 %423 = OpVectorShuffle %422 %422 0 1 2 
                                       f32_3 %424 = OpFMul %419 %423 
                                       f32_4 %425 = OpLoad %9 
                                       f32_4 %426 = OpVectorShuffle %425 %424 4 5 6 3 
                                                      OpStore %9 %426 
                                       f32_4 %427 = OpLoad %9 
                                       f32_3 %428 = OpVectorShuffle %427 %427 0 1 2 
                                         f32 %429 = OpLoad %50 
                                       f32_3 %430 = OpCompositeConstruct %429 %429 %429 
                                       f32_3 %431 = OpFMul %428 %430 
                                                      OpStore %171 %431 
                                         f32 %432 = OpLoad %204 
                                         f32 %433 = OpFNegate %432 
                                         f32 %434 = OpFAdd %433 %74 
                                                      OpStore %50 %434 
                                         f32 %435 = OpLoad %204 
                                         f32 %436 = OpLoad %204 
                                         f32 %437 = OpFMul %435 %436 
                                                      OpStore %204 %437 
                                         f32 %438 = OpLoad %204 
                                       f32_2 %439 = OpCompositeConstruct %438 %438 
                                       f32_4 %440 = OpLoad %233 
                                       f32_2 %441 = OpVectorShuffle %440 %440 0 0 
                                         f32 %442 = OpDot %439 %441 
                                                      OpStore %204 %442 
                                         f32 %443 = OpLoad %204 
                                         f32 %445 = OpFAdd %443 %444 
                                                      OpStore %204 %445 
                                         f32 %446 = OpLoad %50 
                                         f32 %447 = OpLoad %50 
                                         f32 %448 = OpFMul %446 %447 
                                Private f32* %449 = OpAccessChain %289 %30 
                                                      OpStore %449 %448 
                                Private f32* %450 = OpAccessChain %289 %30 
                                         f32 %451 = OpLoad %450 
                                Private f32* %452 = OpAccessChain %289 %30 
                                         f32 %453 = OpLoad %452 
                                         f32 %454 = OpFMul %451 %453 
                                Private f32* %455 = OpAccessChain %289 %30 
                                                      OpStore %455 %454 
                                         f32 %456 = OpLoad %50 
                                Private f32* %457 = OpAccessChain %289 %30 
                                         f32 %458 = OpLoad %457 
                                         f32 %459 = OpFMul %456 %458 
                                                      OpStore %50 %459 
                                       f32_4 %460 = OpLoad %233 
                                       f32_3 %461 = OpVectorShuffle %460 %460 1 2 3 
                                         f32 %462 = OpLoad %50 
                                       f32_3 %463 = OpCompositeConstruct %462 %462 %462 
                                       f32_3 %464 = OpFMul %461 %463 
                                       f32_4 %465 = OpLoad %136 
                                       f32_3 %466 = OpVectorShuffle %465 %465 0 1 2 
                                       f32_3 %467 = OpFAdd %464 %466 
                                       f32_4 %468 = OpLoad %136 
                                       f32_4 %469 = OpVectorShuffle %468 %467 4 5 6 3 
                                                      OpStore %136 %469 
                                       f32_4 %470 = OpLoad %136 
                                       f32_3 %471 = OpVectorShuffle %470 %470 0 1 2 
                                       f32_3 %472 = OpLoad %171 
                                       f32_3 %473 = OpFMul %471 %472 
                                       f32_4 %474 = OpLoad %136 
                                       f32_4 %475 = OpVectorShuffle %474 %473 4 5 6 3 
                                                      OpStore %136 %475 
                                Private f32* %476 = OpAccessChain %85 %30 
                                         f32 %477 = OpLoad %476 
                                Private f32* %478 = OpAccessChain %85 %30 
                                         f32 %479 = OpLoad %478 
                                         f32 %480 = OpFMul %477 %479 
                                                      OpStore %50 %480 
                                         f32 %481 = OpLoad %50 
                                         f32 %482 = OpLoad %50 
                                         f32 %483 = OpFMul %481 %482 
                                                      OpStore %50 %483 
                                Private f32* %484 = OpAccessChain %85 %30 
                                         f32 %485 = OpLoad %484 
                                         f32 %486 = OpLoad %50 
                                         f32 %487 = OpFMul %485 %486 
                                                      OpStore %50 %487 
                                         f32 %488 = OpLoad %204 
                                         f32 %489 = OpLoad %50 
                                         f32 %490 = OpFMul %488 %489 
                                         f32 %491 = OpFAdd %490 %74 
                                                      OpStore %50 %491 
                                         f32 %492 = OpLoad %279 
                                         f32 %493 = OpFNegate %492 
                                         f32 %494 = OpFAdd %493 %74 
                                Private f32* %495 = OpAccessChain %85 %30 
                                                      OpStore %495 %494 
                                Private f32* %496 = OpAccessChain %85 %30 
                                         f32 %497 = OpLoad %496 
                                Private f32* %498 = OpAccessChain %85 %30 
                                         f32 %499 = OpLoad %498 
                                         f32 %500 = OpFMul %497 %499 
                                Private f32* %501 = OpAccessChain %289 %30 
                                                      OpStore %501 %500 
                                Private f32* %502 = OpAccessChain %289 %30 
                                         f32 %503 = OpLoad %502 
                                Private f32* %504 = OpAccessChain %289 %30 
                                         f32 %505 = OpLoad %504 
                                         f32 %506 = OpFMul %503 %505 
                                Private f32* %507 = OpAccessChain %289 %30 
                                                      OpStore %507 %506 
                                Private f32* %508 = OpAccessChain %85 %30 
                                         f32 %509 = OpLoad %508 
                                Private f32* %510 = OpAccessChain %289 %30 
                                         f32 %511 = OpLoad %510 
                                         f32 %512 = OpFMul %509 %511 
                                Private f32* %513 = OpAccessChain %85 %30 
                                                      OpStore %513 %512 
                                         f32 %514 = OpLoad %204 
                                Private f32* %515 = OpAccessChain %85 %30 
                                         f32 %516 = OpLoad %515 
                                         f32 %517 = OpFMul %514 %516 
                                         f32 %518 = OpFAdd %517 %74 
                                                      OpStore %204 %518 
                                         f32 %519 = OpLoad %50 
                                         f32 %520 = OpLoad %204 
                                         f32 %521 = OpFMul %519 %520 
                                                      OpStore %50 %521 
                                         f32 %522 = OpLoad %279 
                                         f32 %523 = OpLoad %50 
                                         f32 %524 = OpFMul %522 %523 
                                                      OpStore %50 %524 
                                         f32 %525 = OpLoad %50 
                                       f32_3 %526 = OpCompositeConstruct %525 %525 %525 
                                       f32_4 %527 = OpLoad %9 
                                       f32_3 %528 = OpVectorShuffle %527 %527 0 1 2 
                                       f32_3 %529 = OpFMul %526 %528 
                                       f32_4 %530 = OpLoad %9 
                                       f32_4 %531 = OpVectorShuffle %530 %529 4 5 6 3 
                                                      OpStore %9 %531 
                                       f32_4 %534 = OpLoad %39 
                                       f32_3 %535 = OpVectorShuffle %534 %534 0 1 3 
                                       f32_4 %536 = OpLoad %9 
                                       f32_3 %537 = OpVectorShuffle %536 %536 0 1 2 
                                       f32_3 %538 = OpFMul %535 %537 
                                       f32_4 %539 = OpLoad %136 
                                       f32_3 %540 = OpVectorShuffle %539 %539 0 1 2 
                                       f32_3 %541 = OpFAdd %538 %540 
                                       f32_4 %542 = OpLoad %533 
                                       f32_4 %543 = OpVectorShuffle %542 %541 4 5 6 3 
                                                      OpStore %533 %543 
                                 Output f32* %545 = OpAccessChain %533 %415 
                                                      OpStore %545 %74 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "SHADOWS_DEPTH" "SPOT" "UNITY_HDR_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "SHADOWS_DEPTH" "SPOT" "UNITY_HDR_ON" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
UNITY_LOCATION(0) uniform  sampler2D _CameraDepthTexture;
UNITY_LOCATION(1) uniform  sampler2D _LightTexture0;
UNITY_LOCATION(2) uniform  sampler2D _LightTextureB0;
UNITY_LOCATION(3) uniform  sampler2D _CameraGBufferTexture0;
UNITY_LOCATION(4) uniform  sampler2D _CameraGBufferTexture1;
UNITY_LOCATION(5) uniform  sampler2D _CameraGBufferTexture2;
UNITY_LOCATION(6) uniform  sampler2D _ShadowMapTexture;
UNITY_LOCATION(7) uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec2 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
vec3 u_xlat6;
float u_xlat7;
float u_xlat8;
float u_xlat12;
float u_xlat13;
float u_xlat18;
bool u_xlatb18;
float u_xlat19;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat2 = texture(_CameraDepthTexture, u_xlat1.xy);
    u_xlat18 = _ZBufferParams.x * u_xlat2.x + _ZBufferParams.y;
    u_xlat18 = float(1.0) / u_xlat18;
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat18 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
    u_xlat3 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat2.wwww + u_xlat3;
    u_xlat3 = u_xlat3 + hlslcc_mtx4x4unity_WorldToShadow[3];
    u_xlat6.xyz = u_xlat3.xyz / u_xlat3.www;
    vec3 txVec0 = vec3(u_xlat6.xy,u_xlat6.z);
    u_xlat6.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
    u_xlat12 = (-_LightShadowData.x) + 1.0;
    u_xlat6.x = u_xlat6.x * u_xlat12 + _LightShadowData.x;
    u_xlat12 = (-u_xlat6.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat12 + u_xlat6.x;
    u_xlat6.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyw;
    u_xlat6.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyw * u_xlat2.xxx + u_xlat6.xyz;
    u_xlat6.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyw * u_xlat2.www + u_xlat6.xyz;
    u_xlat6.xyz = u_xlat6.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyw;
    u_xlat6.xy = u_xlat6.xy / u_xlat6.zz;
    u_xlatb18 = u_xlat6.z<0.0;
    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
    u_xlat3 = texture(_LightTexture0, u_xlat6.xy, -8.0);
    u_xlat6.x = u_xlat18 * u_xlat3.w;
    u_xlat3.xyz = (-u_xlat2.xyw) + _LightPos.xyz;
    u_xlat2.xyz = u_xlat2.xyw + (-_WorldSpaceCameraPos.xyz);
    u_xlat12 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat18 = u_xlat12 * _LightPos.w;
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat4 = texture(_LightTextureB0, vec2(u_xlat18));
    u_xlat6.x = u_xlat6.x * u_xlat4.x;
    u_xlat0.x = u_xlat0.x * u_xlat6.x;
    u_xlat0.xyw = u_xlat0.xxx * _LightColor.xyz;
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat12) + (-u_xlat2.xyz);
    u_xlat3.xyz = vec3(u_xlat12) * u_xlat3.xyz;
    u_xlat12 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat12 = max(u_xlat12, 0.00100000005);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat4.xyz = vec3(u_xlat12) * u_xlat4.xyz;
    u_xlat5 = texture(_CameraGBufferTexture2, u_xlat1.xy);
    u_xlat5.xyz = u_xlat5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat12 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat5.xyz = vec3(u_xlat12) * u_xlat5.xyz;
    u_xlat12 = dot(u_xlat5.xyz, u_xlat4.xyz);
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
    u_xlat13 = dot(u_xlat3.xyz, u_xlat4.xyz);
    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
    u_xlat19 = dot(u_xlat5.xyz, u_xlat3.xyz);
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
    u_xlat2.x = dot(u_xlat5.xyz, (-u_xlat2.xyz));
    u_xlat3 = texture(_CameraGBufferTexture1, u_xlat1.xy);
    u_xlat4 = texture(_CameraGBufferTexture0, u_xlat1.xy);
    u_xlat5 = (-u_xlat3.wxyz) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat1.x = u_xlat5.x * u_xlat5.x;
    u_xlat1.x = max(u_xlat1.x, 0.00200000009);
    u_xlat7 = u_xlat1.x * u_xlat1.x;
    u_xlat8 = u_xlat12 * u_xlat7 + (-u_xlat12);
    u_xlat12 = u_xlat8 * u_xlat12 + 1.0;
    u_xlat12 = u_xlat12 * u_xlat12 + 1.00000001e-07;
    u_xlat7 = u_xlat7 * 0.318309873;
    u_xlat12 = u_xlat7 / u_xlat12;
    u_xlat7 = (-u_xlat1.x) + 1.0;
    u_xlat8 = abs(u_xlat2.x) * u_xlat7 + u_xlat1.x;
    u_xlat1.x = u_xlat19 * u_xlat7 + u_xlat1.x;
    u_xlat1.x = u_xlat1.x * abs(u_xlat2.x);
    u_xlat7 = -abs(u_xlat2.x) + 1.0;
    u_xlat1.x = u_xlat19 * u_xlat8 + u_xlat1.x;
    u_xlat1.x = u_xlat1.x + 9.99999975e-06;
    u_xlat1.x = 0.5 / u_xlat1.x;
    u_xlat12 = u_xlat12 * u_xlat1.x;
    u_xlat12 = u_xlat12 * 3.14159274;
    u_xlat12 = u_xlat19 * u_xlat12;
    u_xlat12 = max(u_xlat12, 0.0);
    u_xlat1.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlatb1 = u_xlat1.x!=0.0;
    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
    u_xlat12 = u_xlat12 * u_xlat1.x;
    u_xlat2.xyz = u_xlat0.xyw * vec3(u_xlat12);
    u_xlat12 = (-u_xlat13) + 1.0;
    u_xlat1.x = u_xlat12 * u_xlat12;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat12 = u_xlat12 * u_xlat1.x;
    u_xlat3.xyz = u_xlat5.yzw * vec3(u_xlat12) + u_xlat3.xyz;
    u_xlat2.xyz = u_xlat2.xyz * u_xlat3.xyz;
    u_xlat12 = u_xlat7 * u_xlat7;
    u_xlat12 = u_xlat12 * u_xlat12;
    u_xlat12 = u_xlat7 * u_xlat12;
    u_xlat1.x = u_xlat13 + u_xlat13;
    u_xlat1.x = u_xlat13 * u_xlat1.x;
    u_xlat1.x = u_xlat1.x * u_xlat5.x + -0.5;
    u_xlat12 = u_xlat1.x * u_xlat12 + 1.0;
    u_xlat7 = (-u_xlat19) + 1.0;
    u_xlat13 = u_xlat7 * u_xlat7;
    u_xlat13 = u_xlat13 * u_xlat13;
    u_xlat7 = u_xlat7 * u_xlat13;
    u_xlat1.x = u_xlat1.x * u_xlat7 + 1.0;
    u_xlat12 = u_xlat12 * u_xlat1.x;
    u_xlat12 = u_xlat19 * u_xlat12;
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyw;
    SV_Target0.xyz = u_xlat4.xyz * u_xlat0.xyz + u_xlat2.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "SHADOWS_DEPTH" "SPOT" "UNITY_HDR_ON" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 192
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %80 %102 %169 %175 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpMemberDecorate %78 0 BuiltIn 78 
                                                      OpMemberDecorate %78 1 BuiltIn 78 
                                                      OpMemberDecorate %78 2 BuiltIn 78 
                                                      OpDecorate %78 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 102 
                                                      OpDecorate %169 Location 169 
                                                      OpDecorate vs_TEXCOORD1 Location 175 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %16 %17 %18 %6 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 1 
                                              %24 = OpTypePointer Uniform %7 
                                          i32 %28 = OpConstant 0 
                                          i32 %36 = OpConstant 2 
                                          i32 %45 = OpConstant 3 
                               Private f32_4* %49 = OpVariable Private 
                                          u32 %76 = OpConstant 1 
                                              %77 = OpTypeArray %6 %76 
                                              %78 = OpTypeStruct %7 %6 %77 
                                              %79 = OpTypePointer Output %78 
         Output struct {f32_4; f32; f32[1];}* %80 = OpVariable Output 
                                              %82 = OpTypePointer Output %7 
                                              %84 = OpTypePointer Private %6 
                                          u32 %87 = OpConstant 0 
                                              %88 = OpTypePointer Uniform %6 
                               Private f32_4* %93 = OpVariable Private 
                                              %94 = OpTypeVector %6 3 
                                          f32 %97 = OpConstant 3.674022E-40 
                                        f32_3 %98 = OpConstantComposite %97 %97 %97 
                       Output f32_4* vs_TEXCOORD0 = OpVariable Output 
                                             %103 = OpTypeVector %6 2 
                                         f32 %158 = OpConstant 3.674022E-40 
                                         f32 %159 = OpConstant 3.674022E-40 
                                       f32_3 %160 = OpConstantComposite %158 %158 %159 
                                             %168 = OpTypePointer Input %94 
                                Input f32_3* %169 = OpVariable Input 
                                             %174 = OpTypePointer Output %94 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                                         i32 %176 = OpConstant 4 
                                             %186 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %25 = OpAccessChain %21 %23 %23 
                                        f32_4 %26 = OpLoad %25 
                                        f32_4 %27 = OpFMul %13 %26 
                                                      OpStore %9 %27 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %28 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %44 = OpLoad %9 
                               Uniform f32_4* %46 = OpAccessChain %21 %23 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_4 %48 = OpFAdd %44 %47 
                                                      OpStore %9 %48 
                                        f32_4 %50 = OpLoad %9 
                                        f32_4 %51 = OpVectorShuffle %50 %50 1 1 1 1 
                               Uniform f32_4* %52 = OpAccessChain %21 %45 %23 
                                        f32_4 %53 = OpLoad %52 
                                        f32_4 %54 = OpFMul %51 %53 
                                                      OpStore %49 %54 
                               Uniform f32_4* %55 = OpAccessChain %21 %45 %28 
                                        f32_4 %56 = OpLoad %55 
                                        f32_4 %57 = OpLoad %9 
                                        f32_4 %58 = OpVectorShuffle %57 %57 0 0 0 0 
                                        f32_4 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %49 
                                        f32_4 %61 = OpFAdd %59 %60 
                                                      OpStore %49 %61 
                               Uniform f32_4* %62 = OpAccessChain %21 %45 %36 
                                        f32_4 %63 = OpLoad %62 
                                        f32_4 %64 = OpLoad %9 
                                        f32_4 %65 = OpVectorShuffle %64 %64 2 2 2 2 
                                        f32_4 %66 = OpFMul %63 %65 
                                        f32_4 %67 = OpLoad %49 
                                        f32_4 %68 = OpFAdd %66 %67 
                                                      OpStore %49 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %45 %45 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %9 
                                        f32_4 %72 = OpVectorShuffle %71 %71 3 3 3 3 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %49 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %49 %75 
                                        f32_4 %81 = OpLoad %49 
                                Output f32_4* %83 = OpAccessChain %80 %28 
                                                      OpStore %83 %81 
                                 Private f32* %85 = OpAccessChain %49 %76 
                                          f32 %86 = OpLoad %85 
                                 Uniform f32* %89 = OpAccessChain %21 %28 %87 
                                          f32 %90 = OpLoad %89 
                                          f32 %91 = OpFMul %86 %90 
                                 Private f32* %92 = OpAccessChain %49 %76 
                                                      OpStore %92 %91 
                                        f32_4 %95 = OpLoad %49 
                                        f32_3 %96 = OpVectorShuffle %95 %95 0 3 1 
                                        f32_3 %99 = OpFMul %96 %98 
                                       f32_4 %100 = OpLoad %93 
                                       f32_4 %101 = OpVectorShuffle %100 %99 4 1 5 6 
                                                      OpStore %93 %101 
                                       f32_4 %104 = OpLoad %49 
                                       f32_2 %105 = OpVectorShuffle %104 %104 2 3 
                                       f32_4 %106 = OpLoad vs_TEXCOORD0 
                                       f32_4 %107 = OpVectorShuffle %106 %105 0 1 4 5 
                                                      OpStore vs_TEXCOORD0 %107 
                                       f32_4 %108 = OpLoad %93 
                                       f32_2 %109 = OpVectorShuffle %108 %108 2 2 
                                       f32_4 %110 = OpLoad %93 
                                       f32_2 %111 = OpVectorShuffle %110 %110 0 3 
                                       f32_2 %112 = OpFAdd %109 %111 
                                       f32_4 %113 = OpLoad vs_TEXCOORD0 
                                       f32_4 %114 = OpVectorShuffle %113 %112 4 5 2 3 
                                                      OpStore vs_TEXCOORD0 %114 
                                       f32_4 %115 = OpLoad %9 
                                       f32_3 %116 = OpVectorShuffle %115 %115 1 1 1 
                              Uniform f32_4* %117 = OpAccessChain %21 %36 %23 
                                       f32_4 %118 = OpLoad %117 
                                       f32_3 %119 = OpVectorShuffle %118 %118 0 1 2 
                                       f32_3 %120 = OpFMul %116 %119 
                                       f32_4 %121 = OpLoad %49 
                                       f32_4 %122 = OpVectorShuffle %121 %120 4 5 6 3 
                                                      OpStore %49 %122 
                              Uniform f32_4* %123 = OpAccessChain %21 %36 %28 
                                       f32_4 %124 = OpLoad %123 
                                       f32_3 %125 = OpVectorShuffle %124 %124 0 1 2 
                                       f32_4 %126 = OpLoad %9 
                                       f32_3 %127 = OpVectorShuffle %126 %126 0 0 0 
                                       f32_3 %128 = OpFMul %125 %127 
                                       f32_4 %129 = OpLoad %49 
                                       f32_3 %130 = OpVectorShuffle %129 %129 0 1 2 
                                       f32_3 %131 = OpFAdd %128 %130 
                                       f32_4 %132 = OpLoad %49 
                                       f32_4 %133 = OpVectorShuffle %132 %131 4 5 6 3 
                                                      OpStore %49 %133 
                              Uniform f32_4* %134 = OpAccessChain %21 %36 %36 
                                       f32_4 %135 = OpLoad %134 
                                       f32_3 %136 = OpVectorShuffle %135 %135 0 1 2 
                                       f32_4 %137 = OpLoad %9 
                                       f32_3 %138 = OpVectorShuffle %137 %137 2 2 2 
                                       f32_3 %139 = OpFMul %136 %138 
                                       f32_4 %140 = OpLoad %49 
                                       f32_3 %141 = OpVectorShuffle %140 %140 0 1 2 
                                       f32_3 %142 = OpFAdd %139 %141 
                                       f32_4 %143 = OpLoad %9 
                                       f32_4 %144 = OpVectorShuffle %143 %142 4 5 6 3 
                                                      OpStore %9 %144 
                              Uniform f32_4* %145 = OpAccessChain %21 %36 %45 
                                       f32_4 %146 = OpLoad %145 
                                       f32_3 %147 = OpVectorShuffle %146 %146 0 1 2 
                                       f32_4 %148 = OpLoad %9 
                                       f32_3 %149 = OpVectorShuffle %148 %148 3 3 3 
                                       f32_3 %150 = OpFMul %147 %149 
                                       f32_4 %151 = OpLoad %9 
                                       f32_3 %152 = OpVectorShuffle %151 %151 0 1 2 
                                       f32_3 %153 = OpFAdd %150 %152 
                                       f32_4 %154 = OpLoad %9 
                                       f32_4 %155 = OpVectorShuffle %154 %153 4 5 6 3 
                                                      OpStore %9 %155 
                                       f32_4 %156 = OpLoad %9 
                                       f32_3 %157 = OpVectorShuffle %156 %156 0 1 2 
                                       f32_3 %161 = OpFMul %157 %160 
                                       f32_4 %162 = OpLoad %49 
                                       f32_4 %163 = OpVectorShuffle %162 %161 4 5 6 3 
                                                      OpStore %49 %163 
                                       f32_4 %164 = OpLoad %9 
                                       f32_3 %165 = OpVectorShuffle %164 %164 0 1 2 
                                       f32_3 %166 = OpFNegate %165 
                                       f32_3 %167 = OpFMul %166 %160 
                                       f32_3 %170 = OpLoad %169 
                                       f32_3 %171 = OpFAdd %167 %170 
                                       f32_4 %172 = OpLoad %9 
                                       f32_4 %173 = OpVectorShuffle %172 %171 4 5 6 3 
                                                      OpStore %9 %173 
                                Uniform f32* %177 = OpAccessChain %21 %176 
                                         f32 %178 = OpLoad %177 
                                       f32_3 %179 = OpCompositeConstruct %178 %178 %178 
                                       f32_4 %180 = OpLoad %9 
                                       f32_3 %181 = OpVectorShuffle %180 %180 0 1 2 
                                       f32_3 %182 = OpFMul %179 %181 
                                       f32_4 %183 = OpLoad %49 
                                       f32_3 %184 = OpVectorShuffle %183 %183 0 1 2 
                                       f32_3 %185 = OpFAdd %182 %184 
                                                      OpStore vs_TEXCOORD1 %185 
                                 Output f32* %187 = OpAccessChain %80 %28 %76 
                                         f32 %188 = OpLoad %187 
                                         f32 %189 = OpFNegate %188 
                                 Output f32* %190 = OpAccessChain %80 %28 %76 
                                                      OpStore %190 %189 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 722
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %27 %45 %709 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpDecorate %13 ArrayStride 13 
                                                      OpDecorate %15 ArrayStride 15 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpMemberDecorate %17 0 Offset 17 
                                                      OpMemberDecorate %17 1 Offset 17 
                                                      OpMemberDecorate %17 2 Offset 17 
                                                      OpMemberDecorate %17 3 Offset 17 
                                                      OpMemberDecorate %17 4 Offset 17 
                                                      OpMemberDecorate %17 5 Offset 17 
                                                      OpMemberDecorate %17 6 Offset 17 
                                                      OpMemberDecorate %17 7 Offset 17 
                                                      OpMemberDecorate %17 8 Offset 17 
                                                      OpMemberDecorate %17 9 Offset 17 
                                                      OpDecorate %17 Block 
                                                      OpDecorate %19 DescriptorSet 19 
                                                      OpDecorate %19 Binding 19 
                                                      OpDecorate vs_TEXCOORD1 Location 27 
                                                      OpDecorate vs_TEXCOORD0 Location 45 
                                                      OpDecorate %54 DescriptorSet 54 
                                                      OpDecorate %54 Binding 54 
                                                      OpDecorate %58 DescriptorSet 58 
                                                      OpDecorate %58 Binding 58 
                                                      OpDecorate %221 DescriptorSet 221 
                                                      OpDecorate %221 Binding 221 
                                                      OpDecorate %223 DescriptorSet 223 
                                                      OpDecorate %223 Binding 223 
                                                      OpDecorate %300 DescriptorSet 300 
                                                      OpDecorate %300 Binding 300 
                                                      OpDecorate %302 DescriptorSet 302 
                                                      OpDecorate %302 Binding 302 
                                                      OpDecorate %346 DescriptorSet 346 
                                                      OpDecorate %346 Binding 346 
                                                      OpDecorate %348 DescriptorSet 348 
                                                      OpDecorate %348 Binding 348 
                                                      OpDecorate %427 DescriptorSet 427 
                                                      OpDecorate %427 Binding 427 
                                                      OpDecorate %429 DescriptorSet 429 
                                                      OpDecorate %429 Binding 429 
                                                      OpDecorate %477 DescriptorSet 477 
                                                      OpDecorate %477 Binding 477 
                                                      OpDecorate %479 DescriptorSet 479 
                                                      OpDecorate %479 Binding 479 
                                                      OpDecorate %485 DescriptorSet 485 
                                                      OpDecorate %485 Binding 485 
                                                      OpDecorate %487 DescriptorSet 487 
                                                      OpDecorate %487 Binding 487 
                                                      OpDecorate %709 Location 709 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 3 
                                              %11 = OpTypeInt 32 0 
                                          u32 %12 = OpConstant 4 
                                              %13 = OpTypeArray %7 %12 
                                          u32 %14 = OpConstant 16 
                                              %15 = OpTypeArray %7 %14 
                                              %16 = OpTypeArray %7 %12 
                                              %17 = OpTypeStruct %10 %7 %7 %13 %15 %7 %7 %7 %7 %16 
                                              %18 = OpTypePointer Uniform %17 
Uniform struct {f32_3; f32_4; f32_4; f32_4[4]; f32_4[16]; f32_4; f32_4; f32_4; f32_4; f32_4[4];}* %19 = OpVariable Uniform 
                                              %20 = OpTypeInt 32 1 
                                          i32 %21 = OpConstant 1 
                                          u32 %22 = OpConstant 2 
                                              %23 = OpTypePointer Uniform %6 
                                              %26 = OpTypePointer Input %10 
                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                                              %28 = OpTypePointer Input %6 
                                          u32 %32 = OpConstant 0 
                                              %33 = OpTypePointer Private %6 
                                              %41 = OpTypeVector %6 2 
                                              %42 = OpTypePointer Private %41 
                               Private f32_2* %43 = OpVariable Private 
                                              %44 = OpTypePointer Input %7 
                        Input f32_4* vs_TEXCOORD0 = OpVariable Input 
                                 Private f32* %51 = OpVariable Private 
                                              %52 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %53 = OpTypePointer UniformConstant %52 
         UniformConstant read_only Texture2D* %54 = OpVariable UniformConstant 
                                              %56 = OpTypeSampler 
                                              %57 = OpTypePointer UniformConstant %56 
                     UniformConstant sampler* %58 = OpVariable UniformConstant 
                                              %60 = OpTypeSampledImage %52 
                                          i32 %65 = OpConstant 2 
                                          u32 %70 = OpConstant 1 
                                          f32 %74 = OpConstant 3.674022E-40 
                               Private f32_4* %77 = OpVariable Private 
                               Private f32_4* %85 = OpVariable Private 
                                          i32 %88 = OpConstant 3 
                                              %89 = OpTypePointer Uniform %7 
                                          i32 %96 = OpConstant 0 
                                         i32 %129 = OpConstant 6 
                                         u32 %156 = OpConstant 3 
                                         i32 %168 = OpConstant 5 
                                         f32 %178 = OpConstant 3.674022E-40 
                                         i32 %183 = OpConstant 4 
                                             %205 = OpTypePointer Private %10 
                              Private f32_3* %206 = OpVariable Private 
                                             %212 = OpTypePointer Function %10 
        UniformConstant read_only Texture2D* %221 = OpVariable UniformConstant 
                    UniformConstant sampler* %223 = OpVariable UniformConstant 
                                             %225 = OpTypeImage %6 Dim2D 1 0 0 1 Unknown 
                                             %226 = OpTypeSampledImage %225 
                                Private f32* %232 = OpVariable Private 
                                         i32 %259 = OpConstant 9 
                                             %292 = OpTypeBool 
                                             %293 = OpTypePointer Private %292 
                               Private bool* %294 = OpVariable Private 
        UniformConstant read_only Texture2D* %300 = OpVariable UniformConstant 
                    UniformConstant sampler* %302 = OpVariable UniformConstant 
                                         f32 %307 = OpConstant 3.674022E-40 
                                         i32 %319 = OpConstant 7 
                                             %328 = OpTypePointer Uniform %10 
        UniformConstant read_only Texture2D* %346 = OpVariable UniformConstant 
                    UniformConstant sampler* %348 = OpVariable UniformConstant 
                                         i32 %368 = OpConstant 8 
                                Private f32* %375 = OpVariable Private 
                              Private f32_4* %390 = OpVariable Private 
                                         f32 %415 = OpConstant 3.674022E-40 
                              Private f32_3* %426 = OpVariable Private 
        UniformConstant read_only Texture2D* %427 = OpVariable UniformConstant 
                    UniformConstant sampler* %429 = OpVariable UniformConstant 
                                         f32 %436 = OpConstant 3.674022E-40 
                                       f32_3 %437 = OpConstantComposite %436 %436 %436 
                                         f32 %439 = OpConstant 3.674022E-40 
                                       f32_3 %440 = OpConstantComposite %439 %439 %439 
                                Private f32* %464 = OpVariable Private 
        UniformConstant read_only Texture2D* %477 = OpVariable UniformConstant 
                    UniformConstant sampler* %479 = OpVariable UniformConstant 
                              Private f32_3* %484 = OpVariable Private 
        UniformConstant read_only Texture2D* %485 = OpVariable UniformConstant 
                    UniformConstant sampler* %487 = OpVariable UniformConstant 
                                       f32_4 %496 = OpConstantComposite %74 %74 %74 %74 
                                         f32 %506 = OpConstant 3.674022E-40 
                                Private f32* %509 = OpVariable Private 
                                Private f32* %515 = OpVariable Private 
                                         f32 %529 = OpConstant 3.674022E-40 
                                         f32 %532 = OpConstant 3.674022E-40 
                                         f32 %577 = OpConstant 3.674022E-40 
                                         f32 %580 = OpConstant 3.674022E-40 
                                         f32 %593 = OpConstant 3.674022E-40 
                               Private bool* %603 = OpVariable Private 
                                         f32 %634 = OpConstant 3.674022E-40 
                                             %708 = OpTypePointer Output %7 
                               Output f32_4* %709 = OpVariable Output 
                                             %719 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %213 = OpVariable Function 
                                 Uniform f32* %24 = OpAccessChain %19 %21 %22 
                                          f32 %25 = OpLoad %24 
                                   Input f32* %29 = OpAccessChain vs_TEXCOORD1 %22 
                                          f32 %30 = OpLoad %29 
                                          f32 %31 = OpFDiv %25 %30 
                                 Private f32* %34 = OpAccessChain %9 %32 
                                                      OpStore %34 %31 
                                        f32_4 %35 = OpLoad %9 
                                        f32_3 %36 = OpVectorShuffle %35 %35 0 0 0 
                                        f32_3 %37 = OpLoad vs_TEXCOORD1 
                                        f32_3 %38 = OpFMul %36 %37 
                                        f32_4 %39 = OpLoad %9 
                                        f32_4 %40 = OpVectorShuffle %39 %38 4 5 6 3 
                                                      OpStore %9 %40 
                                        f32_4 %46 = OpLoad vs_TEXCOORD0 
                                        f32_2 %47 = OpVectorShuffle %46 %46 0 1 
                                        f32_4 %48 = OpLoad vs_TEXCOORD0 
                                        f32_2 %49 = OpVectorShuffle %48 %48 3 3 
                                        f32_2 %50 = OpFDiv %47 %49 
                                                      OpStore %43 %50 
                          read_only Texture2D %55 = OpLoad %54 
                                      sampler %59 = OpLoad %58 
                   read_only Texture2DSampled %61 = OpSampledImage %55 %59 
                                        f32_2 %62 = OpLoad %43 
                                        f32_4 %63 = OpImageSampleImplicitLod %61 %62 
                                          f32 %64 = OpCompositeExtract %63 0 
                                                      OpStore %51 %64 
                                 Uniform f32* %66 = OpAccessChain %19 %65 %32 
                                          f32 %67 = OpLoad %66 
                                          f32 %68 = OpLoad %51 
                                          f32 %69 = OpFMul %67 %68 
                                 Uniform f32* %71 = OpAccessChain %19 %65 %70 
                                          f32 %72 = OpLoad %71 
                                          f32 %73 = OpFAdd %69 %72 
                                                      OpStore %51 %73 
                                          f32 %75 = OpLoad %51 
                                          f32 %76 = OpFDiv %74 %75 
                                                      OpStore %51 %76 
                                          f32 %78 = OpLoad %51 
                                        f32_3 %79 = OpCompositeConstruct %78 %78 %78 
                                        f32_4 %80 = OpLoad %9 
                                        f32_3 %81 = OpVectorShuffle %80 %80 0 1 2 
                                        f32_3 %82 = OpFMul %79 %81 
                                        f32_4 %83 = OpLoad %77 
                                        f32_4 %84 = OpVectorShuffle %83 %82 4 5 6 3 
                                                      OpStore %77 %84 
                                        f32_4 %86 = OpLoad %77 
                                        f32_3 %87 = OpVectorShuffle %86 %86 1 1 1 
                               Uniform f32_4* %90 = OpAccessChain %19 %88 %21 
                                        f32_4 %91 = OpLoad %90 
                                        f32_3 %92 = OpVectorShuffle %91 %91 0 1 2 
                                        f32_3 %93 = OpFMul %87 %92 
                                        f32_4 %94 = OpLoad %85 
                                        f32_4 %95 = OpVectorShuffle %94 %93 4 5 6 3 
                                                      OpStore %85 %95 
                               Uniform f32_4* %97 = OpAccessChain %19 %88 %96 
                                        f32_4 %98 = OpLoad %97 
                                        f32_3 %99 = OpVectorShuffle %98 %98 0 1 2 
                                       f32_4 %100 = OpLoad %77 
                                       f32_3 %101 = OpVectorShuffle %100 %100 0 0 0 
                                       f32_3 %102 = OpFMul %99 %101 
                                       f32_4 %103 = OpLoad %85 
                                       f32_3 %104 = OpVectorShuffle %103 %103 0 1 2 
                                       f32_3 %105 = OpFAdd %102 %104 
                                       f32_4 %106 = OpLoad %77 
                                       f32_4 %107 = OpVectorShuffle %106 %105 4 5 2 6 
                                                      OpStore %77 %107 
                              Uniform f32_4* %108 = OpAccessChain %19 %88 %65 
                                       f32_4 %109 = OpLoad %108 
                                       f32_3 %110 = OpVectorShuffle %109 %109 0 1 2 
                                       f32_4 %111 = OpLoad %77 
                                       f32_3 %112 = OpVectorShuffle %111 %111 2 2 2 
                                       f32_3 %113 = OpFMul %110 %112 
                                       f32_4 %114 = OpLoad %77 
                                       f32_3 %115 = OpVectorShuffle %114 %114 0 1 3 
                                       f32_3 %116 = OpFAdd %113 %115 
                                       f32_4 %117 = OpLoad %77 
                                       f32_4 %118 = OpVectorShuffle %117 %116 4 5 2 6 
                                                      OpStore %77 %118 
                                       f32_4 %119 = OpLoad %77 
                                       f32_3 %120 = OpVectorShuffle %119 %119 0 1 3 
                              Uniform f32_4* %121 = OpAccessChain %19 %88 %88 
                                       f32_4 %122 = OpLoad %121 
                                       f32_3 %123 = OpVectorShuffle %122 %122 0 1 2 
                                       f32_3 %124 = OpFAdd %120 %123 
                                       f32_4 %125 = OpLoad %77 
                                       f32_4 %126 = OpVectorShuffle %125 %124 4 5 2 6 
                                                      OpStore %77 %126 
                                       f32_4 %127 = OpLoad %77 
                                       f32_3 %128 = OpVectorShuffle %127 %127 0 1 3 
                              Uniform f32_4* %130 = OpAccessChain %19 %129 
                                       f32_4 %131 = OpLoad %130 
                                       f32_3 %132 = OpVectorShuffle %131 %131 0 1 2 
                                       f32_3 %133 = OpFNegate %132 
                                       f32_3 %134 = OpFAdd %128 %133 
                                       f32_4 %135 = OpLoad %85 
                                       f32_4 %136 = OpVectorShuffle %135 %134 4 5 6 3 
                                                      OpStore %85 %136 
                                       f32_4 %137 = OpLoad %85 
                                       f32_3 %138 = OpVectorShuffle %137 %137 0 1 2 
                                       f32_4 %139 = OpLoad %85 
                                       f32_3 %140 = OpVectorShuffle %139 %139 0 1 2 
                                         f32 %141 = OpDot %138 %140 
                                Private f32* %142 = OpAccessChain %9 %32 
                                                      OpStore %142 %141 
                                Private f32* %143 = OpAccessChain %9 %32 
                                         f32 %144 = OpLoad %143 
                                         f32 %145 = OpExtInst %1 31 %144 
                                Private f32* %146 = OpAccessChain %9 %32 
                                                      OpStore %146 %145 
                                Private f32* %147 = OpAccessChain %9 %22 
                                         f32 %148 = OpLoad %147 
                                         f32 %149 = OpFNegate %148 
                                         f32 %150 = OpLoad %51 
                                         f32 %151 = OpFMul %149 %150 
                                Private f32* %152 = OpAccessChain %9 %32 
                                         f32 %153 = OpLoad %152 
                                         f32 %154 = OpFAdd %151 %153 
                                Private f32* %155 = OpAccessChain %9 %32 
                                                      OpStore %155 %154 
                                Uniform f32* %157 = OpAccessChain %19 %129 %156 
                                         f32 %158 = OpLoad %157 
                                Private f32* %159 = OpAccessChain %9 %32 
                                         f32 %160 = OpLoad %159 
                                         f32 %161 = OpFMul %158 %160 
                                Private f32* %162 = OpAccessChain %77 %22 
                                         f32 %163 = OpLoad %162 
                                         f32 %164 = OpFAdd %161 %163 
                                Private f32* %165 = OpAccessChain %9 %32 
                                                      OpStore %165 %164 
                                Private f32* %166 = OpAccessChain %9 %32 
                                         f32 %167 = OpLoad %166 
                                Uniform f32* %169 = OpAccessChain %19 %168 %22 
                                         f32 %170 = OpLoad %169 
                                         f32 %171 = OpFMul %167 %170 
                                Uniform f32* %172 = OpAccessChain %19 %168 %156 
                                         f32 %173 = OpLoad %172 
                                         f32 %174 = OpFAdd %171 %173 
                                Private f32* %175 = OpAccessChain %9 %32 
                                                      OpStore %175 %174 
                                Private f32* %176 = OpAccessChain %9 %32 
                                         f32 %177 = OpLoad %176 
                                         f32 %179 = OpExtInst %1 43 %177 %178 %74 
                                Private f32* %180 = OpAccessChain %9 %32 
                                                      OpStore %180 %179 
                                       f32_4 %181 = OpLoad %77 
                                       f32_4 %182 = OpVectorShuffle %181 %181 1 1 1 1 
                              Uniform f32_4* %184 = OpAccessChain %19 %183 %21 
                                       f32_4 %185 = OpLoad %184 
                                       f32_4 %186 = OpFMul %182 %185 
                                                      OpStore %85 %186 
                              Uniform f32_4* %187 = OpAccessChain %19 %183 %96 
                                       f32_4 %188 = OpLoad %187 
                                       f32_4 %189 = OpLoad %77 
                                       f32_4 %190 = OpVectorShuffle %189 %189 0 0 0 0 
                                       f32_4 %191 = OpFMul %188 %190 
                                       f32_4 %192 = OpLoad %85 
                                       f32_4 %193 = OpFAdd %191 %192 
                                                      OpStore %85 %193 
                              Uniform f32_4* %194 = OpAccessChain %19 %183 %65 
                                       f32_4 %195 = OpLoad %194 
                                       f32_4 %196 = OpLoad %77 
                                       f32_4 %197 = OpVectorShuffle %196 %196 3 3 3 3 
                                       f32_4 %198 = OpFMul %195 %197 
                                       f32_4 %199 = OpLoad %85 
                                       f32_4 %200 = OpFAdd %198 %199 
                                                      OpStore %85 %200 
                                       f32_4 %201 = OpLoad %85 
                              Uniform f32_4* %202 = OpAccessChain %19 %183 %88 
                                       f32_4 %203 = OpLoad %202 
                                       f32_4 %204 = OpFAdd %201 %203 
                                                      OpStore %85 %204 
                                       f32_4 %207 = OpLoad %85 
                                       f32_3 %208 = OpVectorShuffle %207 %207 0 1 2 
                                       f32_4 %209 = OpLoad %85 
                                       f32_3 %210 = OpVectorShuffle %209 %209 3 3 3 
                                       f32_3 %211 = OpFDiv %208 %210 
                                                      OpStore %206 %211 
                                       f32_3 %214 = OpLoad %206 
                                       f32_2 %215 = OpVectorShuffle %214 %214 0 1 
                                Private f32* %216 = OpAccessChain %206 %22 
                                         f32 %217 = OpLoad %216 
                                         f32 %218 = OpCompositeExtract %215 0 
                                         f32 %219 = OpCompositeExtract %215 1 
                                       f32_3 %220 = OpCompositeConstruct %218 %219 %217 
                                                      OpStore %213 %220 
                         read_only Texture2D %222 = OpLoad %221 
                                     sampler %224 = OpLoad %223 
                  read_only Texture2DSampled %227 = OpSampledImage %222 %224 
                                       f32_3 %228 = OpLoad %213 
                                         f32 %229 = OpCompositeExtract %228 2 
                                         f32 %230 = OpImageSampleDrefExplicitLod %227 %228 %229 Lod %6 
                                Private f32* %231 = OpAccessChain %206 %32 
                                                      OpStore %231 %230 
                                Uniform f32* %233 = OpAccessChain %19 %168 %32 
                                         f32 %234 = OpLoad %233 
                                         f32 %235 = OpFNegate %234 
                                         f32 %236 = OpFAdd %235 %74 
                                                      OpStore %232 %236 
                                Private f32* %237 = OpAccessChain %206 %32 
                                         f32 %238 = OpLoad %237 
                                         f32 %239 = OpLoad %232 
                                         f32 %240 = OpFMul %238 %239 
                                Uniform f32* %241 = OpAccessChain %19 %168 %32 
                                         f32 %242 = OpLoad %241 
                                         f32 %243 = OpFAdd %240 %242 
                                Private f32* %244 = OpAccessChain %206 %32 
                                                      OpStore %244 %243 
                                Private f32* %245 = OpAccessChain %206 %32 
                                         f32 %246 = OpLoad %245 
                                         f32 %247 = OpFNegate %246 
                                         f32 %248 = OpFAdd %247 %74 
                                                      OpStore %232 %248 
                                Private f32* %249 = OpAccessChain %9 %32 
                                         f32 %250 = OpLoad %249 
                                         f32 %251 = OpLoad %232 
                                         f32 %252 = OpFMul %250 %251 
                                Private f32* %253 = OpAccessChain %206 %32 
                                         f32 %254 = OpLoad %253 
                                         f32 %255 = OpFAdd %252 %254 
                                Private f32* %256 = OpAccessChain %9 %32 
                                                      OpStore %256 %255 
                                       f32_4 %257 = OpLoad %77 
                                       f32_3 %258 = OpVectorShuffle %257 %257 1 1 1 
                              Uniform f32_4* %260 = OpAccessChain %19 %259 %21 
                                       f32_4 %261 = OpLoad %260 
                                       f32_3 %262 = OpVectorShuffle %261 %261 0 1 3 
                                       f32_3 %263 = OpFMul %258 %262 
                                                      OpStore %206 %263 
                              Uniform f32_4* %264 = OpAccessChain %19 %259 %96 
                                       f32_4 %265 = OpLoad %264 
                                       f32_3 %266 = OpVectorShuffle %265 %265 0 1 3 
                                       f32_4 %267 = OpLoad %77 
                                       f32_3 %268 = OpVectorShuffle %267 %267 0 0 0 
                                       f32_3 %269 = OpFMul %266 %268 
                                       f32_3 %270 = OpLoad %206 
                                       f32_3 %271 = OpFAdd %269 %270 
                                                      OpStore %206 %271 
                              Uniform f32_4* %272 = OpAccessChain %19 %259 %65 
                                       f32_4 %273 = OpLoad %272 
                                       f32_3 %274 = OpVectorShuffle %273 %273 0 1 3 
                                       f32_4 %275 = OpLoad %77 
                                       f32_3 %276 = OpVectorShuffle %275 %275 3 3 3 
                                       f32_3 %277 = OpFMul %274 %276 
                                       f32_3 %278 = OpLoad %206 
                                       f32_3 %279 = OpFAdd %277 %278 
                                                      OpStore %206 %279 
                                       f32_3 %280 = OpLoad %206 
                              Uniform f32_4* %281 = OpAccessChain %19 %259 %88 
                                       f32_4 %282 = OpLoad %281 
                                       f32_3 %283 = OpVectorShuffle %282 %282 0 1 3 
                                       f32_3 %284 = OpFAdd %280 %283 
                                                      OpStore %206 %284 
                                       f32_3 %285 = OpLoad %206 
                                       f32_2 %286 = OpVectorShuffle %285 %285 0 1 
                                       f32_3 %287 = OpLoad %206 
                                       f32_2 %288 = OpVectorShuffle %287 %287 2 2 
                                       f32_2 %289 = OpFDiv %286 %288 
                                       f32_3 %290 = OpLoad %206 
                                       f32_3 %291 = OpVectorShuffle %290 %289 3 4 2 
                                                      OpStore %206 %291 
                                Private f32* %295 = OpAccessChain %206 %22 
                                         f32 %296 = OpLoad %295 
                                        bool %297 = OpFOrdLessThan %296 %178 
                                                      OpStore %294 %297 
                                        bool %298 = OpLoad %294 
                                         f32 %299 = OpSelect %298 %74 %178 
                                                      OpStore %51 %299 
                         read_only Texture2D %301 = OpLoad %300 
                                     sampler %303 = OpLoad %302 
                  read_only Texture2DSampled %304 = OpSampledImage %301 %303 
                                       f32_3 %305 = OpLoad %206 
                                       f32_2 %306 = OpVectorShuffle %305 %305 0 1 
                                       f32_4 %308 = OpImageSampleImplicitLod %304 %306 Bias %7 
                                         f32 %309 = OpCompositeExtract %308 3 
                                Private f32* %310 = OpAccessChain %206 %32 
                                                      OpStore %310 %309 
                                         f32 %311 = OpLoad %51 
                                Private f32* %312 = OpAccessChain %206 %32 
                                         f32 %313 = OpLoad %312 
                                         f32 %314 = OpFMul %311 %313 
                                Private f32* %315 = OpAccessChain %206 %32 
                                                      OpStore %315 %314 
                                       f32_4 %316 = OpLoad %77 
                                       f32_3 %317 = OpVectorShuffle %316 %316 0 1 3 
                                       f32_3 %318 = OpFNegate %317 
                              Uniform f32_4* %320 = OpAccessChain %19 %319 
                                       f32_4 %321 = OpLoad %320 
                                       f32_3 %322 = OpVectorShuffle %321 %321 0 1 2 
                                       f32_3 %323 = OpFAdd %318 %322 
                                       f32_4 %324 = OpLoad %85 
                                       f32_4 %325 = OpVectorShuffle %324 %323 4 5 6 3 
                                                      OpStore %85 %325 
                                       f32_4 %326 = OpLoad %77 
                                       f32_3 %327 = OpVectorShuffle %326 %326 0 1 3 
                              Uniform f32_3* %329 = OpAccessChain %19 %96 
                                       f32_3 %330 = OpLoad %329 
                                       f32_3 %331 = OpFNegate %330 
                                       f32_3 %332 = OpFAdd %327 %331 
                                       f32_4 %333 = OpLoad %77 
                                       f32_4 %334 = OpVectorShuffle %333 %332 4 5 6 3 
                                                      OpStore %77 %334 
                                       f32_4 %335 = OpLoad %85 
                                       f32_3 %336 = OpVectorShuffle %335 %335 0 1 2 
                                       f32_4 %337 = OpLoad %85 
                                       f32_3 %338 = OpVectorShuffle %337 %337 0 1 2 
                                         f32 %339 = OpDot %336 %338 
                                                      OpStore %232 %339 
                                         f32 %340 = OpLoad %232 
                                Uniform f32* %341 = OpAccessChain %19 %319 %156 
                                         f32 %342 = OpLoad %341 
                                         f32 %343 = OpFMul %340 %342 
                                                      OpStore %51 %343 
                                         f32 %344 = OpLoad %232 
                                         f32 %345 = OpExtInst %1 32 %344 
                                                      OpStore %232 %345 
                         read_only Texture2D %347 = OpLoad %346 
                                     sampler %349 = OpLoad %348 
                  read_only Texture2DSampled %350 = OpSampledImage %347 %349 
                                         f32 %351 = OpLoad %51 
                                       f32_2 %352 = OpCompositeConstruct %351 %351 
                                       f32_4 %353 = OpImageSampleImplicitLod %350 %352 
                                         f32 %354 = OpCompositeExtract %353 0 
                                                      OpStore %51 %354 
                                         f32 %355 = OpLoad %51 
                                Private f32* %356 = OpAccessChain %206 %32 
                                         f32 %357 = OpLoad %356 
                                         f32 %358 = OpFMul %355 %357 
                                Private f32* %359 = OpAccessChain %206 %32 
                                                      OpStore %359 %358 
                                Private f32* %360 = OpAccessChain %9 %32 
                                         f32 %361 = OpLoad %360 
                                Private f32* %362 = OpAccessChain %206 %32 
                                         f32 %363 = OpLoad %362 
                                         f32 %364 = OpFMul %361 %363 
                                Private f32* %365 = OpAccessChain %9 %32 
                                                      OpStore %365 %364 
                                       f32_4 %366 = OpLoad %9 
                                       f32_3 %367 = OpVectorShuffle %366 %366 0 0 0 
                              Uniform f32_4* %369 = OpAccessChain %19 %368 
                                       f32_4 %370 = OpLoad %369 
                                       f32_3 %371 = OpVectorShuffle %370 %370 0 1 2 
                                       f32_3 %372 = OpFMul %367 %371 
                                       f32_4 %373 = OpLoad %9 
                                       f32_4 %374 = OpVectorShuffle %373 %372 4 5 2 6 
                                                      OpStore %9 %374 
                                       f32_4 %376 = OpLoad %77 
                                       f32_3 %377 = OpVectorShuffle %376 %376 0 1 2 
                                       f32_4 %378 = OpLoad %77 
                                       f32_3 %379 = OpVectorShuffle %378 %378 0 1 2 
                                         f32 %380 = OpDot %377 %379 
                                                      OpStore %375 %380 
                                         f32 %381 = OpLoad %375 
                                         f32 %382 = OpExtInst %1 32 %381 
                                                      OpStore %375 %382 
                                         f32 %383 = OpLoad %375 
                                       f32_3 %384 = OpCompositeConstruct %383 %383 %383 
                                       f32_4 %385 = OpLoad %77 
                                       f32_3 %386 = OpVectorShuffle %385 %385 0 1 2 
                                       f32_3 %387 = OpFMul %384 %386 
                                       f32_4 %388 = OpLoad %77 
                                       f32_4 %389 = OpVectorShuffle %388 %387 4 5 6 3 
                                                      OpStore %77 %389 
                                       f32_4 %391 = OpLoad %85 
                                       f32_3 %392 = OpVectorShuffle %391 %391 0 1 2 
                                         f32 %393 = OpLoad %232 
                                       f32_3 %394 = OpCompositeConstruct %393 %393 %393 
                                       f32_3 %395 = OpFMul %392 %394 
                                       f32_4 %396 = OpLoad %77 
                                       f32_3 %397 = OpVectorShuffle %396 %396 0 1 2 
                                       f32_3 %398 = OpFNegate %397 
                                       f32_3 %399 = OpFAdd %395 %398 
                                       f32_4 %400 = OpLoad %390 
                                       f32_4 %401 = OpVectorShuffle %400 %399 4 5 6 3 
                                                      OpStore %390 %401 
                                         f32 %402 = OpLoad %232 
                                       f32_3 %403 = OpCompositeConstruct %402 %402 %402 
                                       f32_4 %404 = OpLoad %85 
                                       f32_3 %405 = OpVectorShuffle %404 %404 0 1 2 
                                       f32_3 %406 = OpFMul %403 %405 
                                       f32_4 %407 = OpLoad %85 
                                       f32_4 %408 = OpVectorShuffle %407 %406 4 5 6 3 
                                                      OpStore %85 %408 
                                       f32_4 %409 = OpLoad %390 
                                       f32_3 %410 = OpVectorShuffle %409 %409 0 1 2 
                                       f32_4 %411 = OpLoad %390 
                                       f32_3 %412 = OpVectorShuffle %411 %411 0 1 2 
                                         f32 %413 = OpDot %410 %412 
                                                      OpStore %232 %413 
                                         f32 %414 = OpLoad %232 
                                         f32 %416 = OpExtInst %1 40 %414 %415 
                                                      OpStore %232 %416 
                                         f32 %417 = OpLoad %232 
                                         f32 %418 = OpExtInst %1 32 %417 
                                                      OpStore %232 %418 
                                         f32 %419 = OpLoad %232 
                                       f32_3 %420 = OpCompositeConstruct %419 %419 %419 
                                       f32_4 %421 = OpLoad %390 
                                       f32_3 %422 = OpVectorShuffle %421 %421 0 1 2 
                                       f32_3 %423 = OpFMul %420 %422 
                                       f32_4 %424 = OpLoad %390 
                                       f32_4 %425 = OpVectorShuffle %424 %423 4 5 6 3 
                                                      OpStore %390 %425 
                         read_only Texture2D %428 = OpLoad %427 
                                     sampler %430 = OpLoad %429 
                  read_only Texture2DSampled %431 = OpSampledImage %428 %430 
                                       f32_2 %432 = OpLoad %43 
                                       f32_4 %433 = OpImageSampleImplicitLod %431 %432 
                                       f32_3 %434 = OpVectorShuffle %433 %433 0 1 2 
                                                      OpStore %426 %434 
                                       f32_3 %435 = OpLoad %426 
                                       f32_3 %438 = OpFMul %435 %437 
                                       f32_3 %441 = OpFAdd %438 %440 
                                                      OpStore %426 %441 
                                       f32_3 %442 = OpLoad %426 
                                       f32_3 %443 = OpLoad %426 
                                         f32 %444 = OpDot %442 %443 
                                                      OpStore %232 %444 
                                         f32 %445 = OpLoad %232 
                                         f32 %446 = OpExtInst %1 32 %445 
                                                      OpStore %232 %446 
                                         f32 %447 = OpLoad %232 
                                       f32_3 %448 = OpCompositeConstruct %447 %447 %447 
                                       f32_3 %449 = OpLoad %426 
                                       f32_3 %450 = OpFMul %448 %449 
                                                      OpStore %426 %450 
                                       f32_3 %451 = OpLoad %426 
                                       f32_4 %452 = OpLoad %390 
                                       f32_3 %453 = OpVectorShuffle %452 %452 0 1 2 
                                         f32 %454 = OpDot %451 %453 
                                                      OpStore %232 %454 
                                         f32 %455 = OpLoad %232 
                                         f32 %456 = OpExtInst %1 43 %455 %178 %74 
                                                      OpStore %232 %456 
                                       f32_4 %457 = OpLoad %85 
                                       f32_3 %458 = OpVectorShuffle %457 %457 0 1 2 
                                       f32_4 %459 = OpLoad %390 
                                       f32_3 %460 = OpVectorShuffle %459 %459 0 1 2 
                                         f32 %461 = OpDot %458 %460 
                                                      OpStore %375 %461 
                                         f32 %462 = OpLoad %375 
                                         f32 %463 = OpExtInst %1 43 %462 %178 %74 
                                                      OpStore %375 %463 
                                       f32_3 %465 = OpLoad %426 
                                       f32_4 %466 = OpLoad %85 
                                       f32_3 %467 = OpVectorShuffle %466 %466 0 1 2 
                                         f32 %468 = OpDot %465 %467 
                                                      OpStore %464 %468 
                                         f32 %469 = OpLoad %464 
                                         f32 %470 = OpExtInst %1 43 %469 %178 %74 
                                                      OpStore %464 %470 
                                       f32_3 %471 = OpLoad %426 
                                       f32_4 %472 = OpLoad %77 
                                       f32_3 %473 = OpVectorShuffle %472 %472 0 1 2 
                                       f32_3 %474 = OpFNegate %473 
                                         f32 %475 = OpDot %471 %474 
                                Private f32* %476 = OpAccessChain %77 %32 
                                                      OpStore %476 %475 
                         read_only Texture2D %478 = OpLoad %477 
                                     sampler %480 = OpLoad %479 
                  read_only Texture2DSampled %481 = OpSampledImage %478 %480 
                                       f32_2 %482 = OpLoad %43 
                                       f32_4 %483 = OpImageSampleImplicitLod %481 %482 
                                                      OpStore %85 %483 
                         read_only Texture2D %486 = OpLoad %485 
                                     sampler %488 = OpLoad %487 
                  read_only Texture2DSampled %489 = OpSampledImage %486 %488 
                                       f32_2 %490 = OpLoad %43 
                                       f32_4 %491 = OpImageSampleImplicitLod %489 %490 
                                       f32_3 %492 = OpVectorShuffle %491 %491 0 1 2 
                                                      OpStore %484 %492 
                                       f32_4 %493 = OpLoad %85 
                                       f32_4 %494 = OpVectorShuffle %493 %493 3 0 1 2 
                                       f32_4 %495 = OpFNegate %494 
                                       f32_4 %497 = OpFAdd %495 %496 
                                                      OpStore %390 %497 
                                Private f32* %498 = OpAccessChain %390 %32 
                                         f32 %499 = OpLoad %498 
                                Private f32* %500 = OpAccessChain %390 %32 
                                         f32 %501 = OpLoad %500 
                                         f32 %502 = OpFMul %499 %501 
                                Private f32* %503 = OpAccessChain %43 %32 
                                                      OpStore %503 %502 
                                Private f32* %504 = OpAccessChain %43 %32 
                                         f32 %505 = OpLoad %504 
                                         f32 %507 = OpExtInst %1 40 %505 %506 
                                Private f32* %508 = OpAccessChain %43 %32 
                                                      OpStore %508 %507 
                                Private f32* %510 = OpAccessChain %43 %32 
                                         f32 %511 = OpLoad %510 
                                Private f32* %512 = OpAccessChain %43 %32 
                                         f32 %513 = OpLoad %512 
                                         f32 %514 = OpFMul %511 %513 
                                                      OpStore %509 %514 
                                         f32 %516 = OpLoad %232 
                                         f32 %517 = OpLoad %509 
                                         f32 %518 = OpFMul %516 %517 
                                         f32 %519 = OpLoad %232 
                                         f32 %520 = OpFNegate %519 
                                         f32 %521 = OpFAdd %518 %520 
                                                      OpStore %515 %521 
                                         f32 %522 = OpLoad %515 
                                         f32 %523 = OpLoad %232 
                                         f32 %524 = OpFMul %522 %523 
                                         f32 %525 = OpFAdd %524 %74 
                                                      OpStore %232 %525 
                                         f32 %526 = OpLoad %232 
                                         f32 %527 = OpLoad %232 
                                         f32 %528 = OpFMul %526 %527 
                                         f32 %530 = OpFAdd %528 %529 
                                                      OpStore %232 %530 
                                         f32 %531 = OpLoad %509 
                                         f32 %533 = OpFMul %531 %532 
                                                      OpStore %509 %533 
                                         f32 %534 = OpLoad %509 
                                         f32 %535 = OpLoad %232 
                                         f32 %536 = OpFDiv %534 %535 
                                                      OpStore %232 %536 
                                Private f32* %537 = OpAccessChain %43 %32 
                                         f32 %538 = OpLoad %537 
                                         f32 %539 = OpFNegate %538 
                                         f32 %540 = OpFAdd %539 %74 
                                                      OpStore %509 %540 
                                Private f32* %541 = OpAccessChain %77 %32 
                                         f32 %542 = OpLoad %541 
                                         f32 %543 = OpExtInst %1 4 %542 
                                         f32 %544 = OpLoad %509 
                                         f32 %545 = OpFMul %543 %544 
                                Private f32* %546 = OpAccessChain %43 %32 
                                         f32 %547 = OpLoad %546 
                                         f32 %548 = OpFAdd %545 %547 
                                                      OpStore %515 %548 
                                         f32 %549 = OpLoad %464 
                                         f32 %550 = OpLoad %509 
                                         f32 %551 = OpFMul %549 %550 
                                Private f32* %552 = OpAccessChain %43 %32 
                                         f32 %553 = OpLoad %552 
                                         f32 %554 = OpFAdd %551 %553 
                                Private f32* %555 = OpAccessChain %43 %32 
                                                      OpStore %555 %554 
                                Private f32* %556 = OpAccessChain %43 %32 
                                         f32 %557 = OpLoad %556 
                                Private f32* %558 = OpAccessChain %77 %32 
                                         f32 %559 = OpLoad %558 
                                         f32 %560 = OpExtInst %1 4 %559 
                                         f32 %561 = OpFMul %557 %560 
                                Private f32* %562 = OpAccessChain %43 %32 
                                                      OpStore %562 %561 
                                Private f32* %563 = OpAccessChain %77 %32 
                                         f32 %564 = OpLoad %563 
                                         f32 %565 = OpExtInst %1 4 %564 
                                         f32 %566 = OpFNegate %565 
                                         f32 %567 = OpFAdd %566 %74 
                                                      OpStore %509 %567 
                                         f32 %568 = OpLoad %464 
                                         f32 %569 = OpLoad %515 
                                         f32 %570 = OpFMul %568 %569 
                                Private f32* %571 = OpAccessChain %43 %32 
                                         f32 %572 = OpLoad %571 
                                         f32 %573 = OpFAdd %570 %572 
                                Private f32* %574 = OpAccessChain %43 %32 
                                                      OpStore %574 %573 
                                Private f32* %575 = OpAccessChain %43 %32 
                                         f32 %576 = OpLoad %575 
                                         f32 %578 = OpFAdd %576 %577 
                                Private f32* %579 = OpAccessChain %43 %32 
                                                      OpStore %579 %578 
                                Private f32* %581 = OpAccessChain %43 %32 
                                         f32 %582 = OpLoad %581 
                                         f32 %583 = OpFDiv %580 %582 
                                Private f32* %584 = OpAccessChain %43 %32 
                                                      OpStore %584 %583 
                                         f32 %585 = OpLoad %232 
                                Private f32* %586 = OpAccessChain %43 %32 
                                         f32 %587 = OpLoad %586 
                                         f32 %588 = OpFMul %585 %587 
                                                      OpStore %232 %588 
                                         f32 %589 = OpLoad %464 
                                         f32 %590 = OpLoad %232 
                                         f32 %591 = OpFMul %589 %590 
                                                      OpStore %232 %591 
                                         f32 %592 = OpLoad %232 
                                         f32 %594 = OpFMul %592 %593 
                                                      OpStore %232 %594 
                                         f32 %595 = OpLoad %232 
                                         f32 %596 = OpExtInst %1 40 %595 %178 
                                                      OpStore %232 %596 
                                       f32_4 %597 = OpLoad %85 
                                       f32_3 %598 = OpVectorShuffle %597 %597 0 1 2 
                                       f32_4 %599 = OpLoad %85 
                                       f32_3 %600 = OpVectorShuffle %599 %599 0 1 2 
                                         f32 %601 = OpDot %598 %600 
                                Private f32* %602 = OpAccessChain %43 %32 
                                                      OpStore %602 %601 
                                Private f32* %604 = OpAccessChain %43 %32 
                                         f32 %605 = OpLoad %604 
                                        bool %606 = OpFOrdNotEqual %605 %178 
                                                      OpStore %603 %606 
                                        bool %607 = OpLoad %603 
                                         f32 %608 = OpSelect %607 %74 %178 
                                Private f32* %609 = OpAccessChain %43 %32 
                                                      OpStore %609 %608 
                                         f32 %610 = OpLoad %232 
                                Private f32* %611 = OpAccessChain %43 %32 
                                         f32 %612 = OpLoad %611 
                                         f32 %613 = OpFMul %610 %612 
                                                      OpStore %232 %613 
                                       f32_4 %614 = OpLoad %9 
                                       f32_3 %615 = OpVectorShuffle %614 %614 0 1 3 
                                         f32 %616 = OpLoad %232 
                                       f32_3 %617 = OpCompositeConstruct %616 %616 %616 
                                       f32_3 %618 = OpFMul %615 %617 
                                                      OpStore %426 %618 
                                         f32 %619 = OpLoad %375 
                                         f32 %620 = OpFNegate %619 
                                         f32 %621 = OpFAdd %620 %74 
                                                      OpStore %232 %621 
                                         f32 %622 = OpLoad %375 
                                         f32 %623 = OpLoad %375 
                                         f32 %624 = OpFMul %622 %623 
                                Private f32* %625 = OpAccessChain %43 %32 
                                                      OpStore %625 %624 
                                       f32_2 %626 = OpLoad %43 
                                       f32_2 %627 = OpVectorShuffle %626 %626 0 0 
                                       f32_4 %628 = OpLoad %390 
                                       f32_2 %629 = OpVectorShuffle %628 %628 0 0 
                                         f32 %630 = OpDot %627 %629 
                                Private f32* %631 = OpAccessChain %43 %32 
                                                      OpStore %631 %630 
                                Private f32* %632 = OpAccessChain %43 %32 
                                         f32 %633 = OpLoad %632 
                                         f32 %635 = OpFAdd %633 %634 
                                Private f32* %636 = OpAccessChain %43 %32 
                                                      OpStore %636 %635 
                                         f32 %637 = OpLoad %232 
                                         f32 %638 = OpLoad %232 
                                         f32 %639 = OpFMul %637 %638 
                                                      OpStore %375 %639 
                                         f32 %640 = OpLoad %375 
                                         f32 %641 = OpLoad %375 
                                         f32 %642 = OpFMul %640 %641 
                                                      OpStore %375 %642 
                                         f32 %643 = OpLoad %232 
                                         f32 %644 = OpLoad %375 
                                         f32 %645 = OpFMul %643 %644 
                                                      OpStore %232 %645 
                                       f32_4 %646 = OpLoad %390 
                                       f32_3 %647 = OpVectorShuffle %646 %646 1 2 3 
                                         f32 %648 = OpLoad %232 
                                       f32_3 %649 = OpCompositeConstruct %648 %648 %648 
                                       f32_3 %650 = OpFMul %647 %649 
                                       f32_4 %651 = OpLoad %85 
                                       f32_3 %652 = OpVectorShuffle %651 %651 0 1 2 
                                       f32_3 %653 = OpFAdd %650 %652 
                                       f32_4 %654 = OpLoad %85 
                                       f32_4 %655 = OpVectorShuffle %654 %653 4 5 6 3 
                                                      OpStore %85 %655 
                                       f32_4 %656 = OpLoad %85 
                                       f32_3 %657 = OpVectorShuffle %656 %656 0 1 2 
                                       f32_3 %658 = OpLoad %426 
                                       f32_3 %659 = OpFMul %657 %658 
                                       f32_4 %660 = OpLoad %85 
                                       f32_4 %661 = OpVectorShuffle %660 %659 4 5 6 3 
                                                      OpStore %85 %661 
                                         f32 %662 = OpLoad %509 
                                         f32 %663 = OpLoad %509 
                                         f32 %664 = OpFMul %662 %663 
                                                      OpStore %232 %664 
                                         f32 %665 = OpLoad %232 
                                         f32 %666 = OpLoad %232 
                                         f32 %667 = OpFMul %665 %666 
                                                      OpStore %232 %667 
                                         f32 %668 = OpLoad %509 
                                         f32 %669 = OpLoad %232 
                                         f32 %670 = OpFMul %668 %669 
                                                      OpStore %232 %670 
                                Private f32* %671 = OpAccessChain %43 %32 
                                         f32 %672 = OpLoad %671 
                                         f32 %673 = OpLoad %232 
                                         f32 %674 = OpFMul %672 %673 
                                         f32 %675 = OpFAdd %674 %74 
                                                      OpStore %232 %675 
                                         f32 %676 = OpLoad %464 
                                         f32 %677 = OpFNegate %676 
                                         f32 %678 = OpFAdd %677 %74 
                                                      OpStore %509 %678 
                                         f32 %679 = OpLoad %509 
                                         f32 %680 = OpLoad %509 
                                         f32 %681 = OpFMul %679 %680 
                                                      OpStore %375 %681 
                                         f32 %682 = OpLoad %375 
                                         f32 %683 = OpLoad %375 
                                         f32 %684 = OpFMul %682 %683 
                                                      OpStore %375 %684 
                                         f32 %685 = OpLoad %509 
                                         f32 %686 = OpLoad %375 
                                         f32 %687 = OpFMul %685 %686 
                                                      OpStore %509 %687 
                                Private f32* %688 = OpAccessChain %43 %32 
                                         f32 %689 = OpLoad %688 
                                         f32 %690 = OpLoad %509 
                                         f32 %691 = OpFMul %689 %690 
                                         f32 %692 = OpFAdd %691 %74 
                                Private f32* %693 = OpAccessChain %43 %32 
                                                      OpStore %693 %692 
                                         f32 %694 = OpLoad %232 
                                Private f32* %695 = OpAccessChain %43 %32 
                                         f32 %696 = OpLoad %695 
                                         f32 %697 = OpFMul %694 %696 
                                                      OpStore %232 %697 
                                         f32 %698 = OpLoad %464 
                                         f32 %699 = OpLoad %232 
                                         f32 %700 = OpFMul %698 %699 
                                                      OpStore %232 %700 
                                         f32 %701 = OpLoad %232 
                                       f32_3 %702 = OpCompositeConstruct %701 %701 %701 
                                       f32_4 %703 = OpLoad %9 
                                       f32_3 %704 = OpVectorShuffle %703 %703 0 1 3 
                                       f32_3 %705 = OpFMul %702 %704 
                                       f32_4 %706 = OpLoad %9 
                                       f32_4 %707 = OpVectorShuffle %706 %705 4 5 6 3 
                                                      OpStore %9 %707 
                                       f32_3 %710 = OpLoad %484 
                                       f32_4 %711 = OpLoad %9 
                                       f32_3 %712 = OpVectorShuffle %711 %711 0 1 2 
                                       f32_3 %713 = OpFMul %710 %712 
                                       f32_4 %714 = OpLoad %85 
                                       f32_3 %715 = OpVectorShuffle %714 %714 0 1 2 
                                       f32_3 %716 = OpFAdd %713 %715 
                                       f32_4 %717 = OpLoad %709 
                                       f32_4 %718 = OpVectorShuffle %717 %716 4 5 6 3 
                                                      OpStore %709 %718 
                                 Output f32* %720 = OpAccessChain %709 %156 
                                                      OpStore %720 %74 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "SHADOWS_DEPTH" "SHADOWS_SOFT" "SPOT" "UNITY_HDR_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "SHADOWS_DEPTH" "SHADOWS_SOFT" "SPOT" "UNITY_HDR_ON" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	vec4 _ShadowMapTexture_TexelSize;
UNITY_LOCATION(0) uniform  sampler2D _CameraDepthTexture;
UNITY_LOCATION(1) uniform  sampler2D _LightTexture0;
UNITY_LOCATION(2) uniform  sampler2D _LightTextureB0;
UNITY_LOCATION(3) uniform  sampler2D _CameraGBufferTexture0;
UNITY_LOCATION(4) uniform  sampler2D _CameraGBufferTexture1;
UNITY_LOCATION(5) uniform  sampler2D _CameraGBufferTexture2;
UNITY_LOCATION(6) uniform  sampler2D _ShadowMapTexture;
UNITY_LOCATION(7) uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec3 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
vec4 u_xlat6;
vec4 u_xlat7;
vec4 u_xlat8;
vec4 u_xlat9;
vec3 u_xlat10;
float u_xlat11;
float u_xlat20;
float u_xlat21;
float u_xlat22;
bool u_xlatb22;
vec2 u_xlat25;
float u_xlat30;
bool u_xlatb30;
float u_xlat31;
float u_xlat33;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat2 = texture(_CameraDepthTexture, u_xlat1.xy);
    u_xlat30 = _ZBufferParams.x * u_xlat2.x + _ZBufferParams.y;
    u_xlat30 = float(1.0) / u_xlat30;
    u_xlat2.xyz = vec3(u_xlat30) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat30 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat10.xyz = (-u_xlat2.xyw) + _LightPos.xyz;
    u_xlat21 = dot(u_xlat10.xyz, u_xlat10.xyz);
    u_xlat31 = inversesqrt(u_xlat21);
    u_xlat3.xyz = u_xlat10.xyz * vec3(u_xlat31);
    u_xlat4.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyw;
    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyw * u_xlat2.xxx + u_xlat4.xyz;
    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyw * u_xlat2.www + u_xlat4.xyz;
    u_xlat4.xyz = u_xlat4.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyw;
    u_xlat4.xy = u_xlat4.xy / u_xlat4.zz;
    u_xlat5 = texture(_LightTexture0, u_xlat4.xy, -8.0);
    u_xlatb22 = u_xlat4.z<0.0;
    u_xlat22 = u_xlatb22 ? 1.0 : float(0.0);
    u_xlat22 = u_xlat22 * u_xlat5.w;
    u_xlat21 = u_xlat21 * _LightPos.w;
    u_xlat4 = texture(_LightTextureB0, vec2(u_xlat21));
    u_xlat21 = u_xlat22 * u_xlat4.x;
    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlatb22 = u_xlat0.x<0.99000001;
    if(u_xlatb22){
        u_xlat4 = u_xlat2.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
        u_xlat4 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat2.xxxx + u_xlat4;
        u_xlat4 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat2.wwww + u_xlat4;
        u_xlat4 = u_xlat4 + hlslcc_mtx4x4unity_WorldToShadow[3];
        u_xlat4.xyz = u_xlat4.xyz / u_xlat4.www;
        u_xlat5.xy = u_xlat4.xy * _ShadowMapTexture_TexelSize.zw + vec2(0.5, 0.5);
        u_xlat5.xy = floor(u_xlat5.xy);
        u_xlat4.xy = u_xlat4.xy * _ShadowMapTexture_TexelSize.zw + (-u_xlat5.xy);
        u_xlat6 = u_xlat4.xxyy + vec4(0.5, 1.0, 0.5, 1.0);
        u_xlat7.xw = u_xlat6.xz * u_xlat6.xz;
        u_xlat25.xy = u_xlat7.xw * vec2(0.5, 0.5) + (-u_xlat4.xy);
        u_xlat6.xz = (-u_xlat4.xy) + vec2(1.0, 1.0);
        u_xlat8.xy = min(u_xlat4.xy, vec2(0.0, 0.0));
        u_xlat6.xz = (-u_xlat8.xy) * u_xlat8.xy + u_xlat6.xz;
        u_xlat4.xy = max(u_xlat4.xy, vec2(0.0, 0.0));
        u_xlat4.xy = (-u_xlat4.xy) * u_xlat4.xy + u_xlat6.yw;
        u_xlat8.x = u_xlat25.x;
        u_xlat8.y = u_xlat6.x;
        u_xlat8.z = u_xlat4.x;
        u_xlat8.w = u_xlat7.x;
        u_xlat8 = u_xlat8 * vec4(0.444440007, 0.444440007, 0.444440007, 0.222220004);
        u_xlat7.x = u_xlat25.y;
        u_xlat7.y = u_xlat6.z;
        u_xlat7.z = u_xlat4.y;
        u_xlat6 = u_xlat7 * vec4(0.444440007, 0.444440007, 0.444440007, 0.222220004);
        u_xlat7 = u_xlat8.ywyw + u_xlat8.xzxz;
        u_xlat9 = u_xlat6.yyww + u_xlat6.xxzz;
        u_xlat4.xy = u_xlat8.yw / u_xlat7.zw;
        u_xlat4.xy = u_xlat4.xy + vec2(-1.5, 0.5);
        u_xlat25.xy = u_xlat6.yw / u_xlat9.yw;
        u_xlat25.xy = u_xlat25.xy + vec2(-1.5, 0.5);
        u_xlat6.xy = u_xlat4.xy * _ShadowMapTexture_TexelSize.xx;
        u_xlat6.zw = u_xlat25.xy * _ShadowMapTexture_TexelSize.yy;
        u_xlat7 = u_xlat7 * u_xlat9;
        u_xlat8 = u_xlat5.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat6.xzyz;
        vec3 txVec0 = vec3(u_xlat8.xy,u_xlat4.z);
        u_xlat22 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
        vec3 txVec1 = vec3(u_xlat8.zw,u_xlat4.z);
        u_xlat33 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec1, 0.0);
        u_xlat33 = u_xlat33 * u_xlat7.y;
        u_xlat22 = u_xlat7.x * u_xlat22 + u_xlat33;
        u_xlat5 = u_xlat5.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat6.xwyw;
        vec3 txVec2 = vec3(u_xlat5.xy,u_xlat4.z);
        u_xlat33 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec2, 0.0);
        u_xlat22 = u_xlat7.z * u_xlat33 + u_xlat22;
        vec3 txVec3 = vec3(u_xlat5.zw,u_xlat4.z);
        u_xlat33 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec3, 0.0);
        u_xlat22 = u_xlat7.w * u_xlat33 + u_xlat22;
        u_xlat33 = (-_LightShadowData.x) + 1.0;
        u_xlat22 = u_xlat22 * u_xlat33 + _LightShadowData.x;
    } else {
        u_xlat22 = 1.0;
    }
    u_xlat33 = (-u_xlat22) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat33 + u_xlat22;
    u_xlat0.x = u_xlat0.x * u_xlat21;
    u_xlat4.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat5 = texture(_CameraGBufferTexture0, u_xlat1.xy);
    u_xlat6 = texture(_CameraGBufferTexture1, u_xlat1.xy);
    u_xlat7 = texture(_CameraGBufferTexture2, u_xlat1.xy);
    u_xlat1.xyz = u_xlat7.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat2.xyw + (-_WorldSpaceCameraPos.xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat7 = (-u_xlat6.wxyz) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0.xyz = u_xlat10.xyz * vec3(u_xlat31) + (-u_xlat2.xyz);
    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat30 = max(u_xlat30, 0.00100000005);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
    u_xlat30 = dot(u_xlat1.xyz, (-u_xlat2.xyz));
    u_xlat31 = dot(u_xlat1.xyz, u_xlat3.xyz);
    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat10.x = u_xlat0.x * u_xlat0.x;
    u_xlat10.x = dot(u_xlat10.xx, u_xlat7.xx);
    u_xlat10.x = u_xlat10.x + -0.5;
    u_xlat20 = (-u_xlat31) + 1.0;
    u_xlat11 = u_xlat20 * u_xlat20;
    u_xlat11 = u_xlat11 * u_xlat11;
    u_xlat20 = u_xlat20 * u_xlat11;
    u_xlat20 = u_xlat10.x * u_xlat20 + 1.0;
    u_xlat11 = -abs(u_xlat30) + 1.0;
    u_xlat21 = u_xlat11 * u_xlat11;
    u_xlat21 = u_xlat21 * u_xlat21;
    u_xlat11 = u_xlat11 * u_xlat21;
    u_xlat10.x = u_xlat10.x * u_xlat11 + 1.0;
    u_xlat10.x = u_xlat10.x * u_xlat20;
    u_xlat20 = u_xlat7.x * u_xlat7.x;
    u_xlat20 = max(u_xlat20, 0.00200000009);
    u_xlat11 = (-u_xlat20) + 1.0;
    u_xlat21 = abs(u_xlat30) * u_xlat11 + u_xlat20;
    u_xlat11 = u_xlat31 * u_xlat11 + u_xlat20;
    u_xlat30 = abs(u_xlat30) * u_xlat11;
    u_xlat30 = u_xlat31 * u_xlat21 + u_xlat30;
    u_xlat30 = u_xlat30 + 9.99999975e-06;
    u_xlat30 = 0.5 / u_xlat30;
    u_xlat20 = u_xlat20 * u_xlat20;
    u_xlat11 = u_xlat1.x * u_xlat20 + (-u_xlat1.x);
    u_xlat1.x = u_xlat11 * u_xlat1.x + 1.0;
    u_xlat20 = u_xlat20 * 0.318309873;
    u_xlat1.x = u_xlat1.x * u_xlat1.x + 1.00000001e-07;
    u_xlat20 = u_xlat20 / u_xlat1.x;
    u_xlat20 = u_xlat20 * u_xlat30;
    u_xlat10.y = u_xlat20 * 3.14159274;
    u_xlat10.xy = vec2(u_xlat31) * u_xlat10.xy;
    u_xlat20 = max(u_xlat10.y, 0.0);
    u_xlat30 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlatb30 = u_xlat30!=0.0;
    u_xlat30 = u_xlatb30 ? 1.0 : float(0.0);
    u_xlat20 = u_xlat30 * u_xlat20;
    u_xlat1.xyz = u_xlat10.xxx * u_xlat4.xyz;
    u_xlat10.xyz = u_xlat4.xyz * vec3(u_xlat20);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat31 = u_xlat0.x * u_xlat0.x;
    u_xlat31 = u_xlat31 * u_xlat31;
    u_xlat0.x = u_xlat0.x * u_xlat31;
    u_xlat2.xyz = u_xlat7.yzw * u_xlat0.xxx + u_xlat6.xyz;
    u_xlat0.xyz = u_xlat10.xyz * u_xlat2.xyz;
    SV_Target0.xyz = u_xlat5.xyz * u_xlat1.xyz + u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "SHADOWS_DEPTH" "SHADOWS_SOFT" "SPOT" "UNITY_HDR_ON" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 192
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %80 %102 %169 %175 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpMemberDecorate %78 0 BuiltIn 78 
                                                      OpMemberDecorate %78 1 BuiltIn 78 
                                                      OpMemberDecorate %78 2 BuiltIn 78 
                                                      OpDecorate %78 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 102 
                                                      OpDecorate %169 Location 169 
                                                      OpDecorate vs_TEXCOORD1 Location 175 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %16 %17 %18 %6 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 1 
                                              %24 = OpTypePointer Uniform %7 
                                          i32 %28 = OpConstant 0 
                                          i32 %36 = OpConstant 2 
                                          i32 %45 = OpConstant 3 
                               Private f32_4* %49 = OpVariable Private 
                                          u32 %76 = OpConstant 1 
                                              %77 = OpTypeArray %6 %76 
                                              %78 = OpTypeStruct %7 %6 %77 
                                              %79 = OpTypePointer Output %78 
         Output struct {f32_4; f32; f32[1];}* %80 = OpVariable Output 
                                              %82 = OpTypePointer Output %7 
                                              %84 = OpTypePointer Private %6 
                                          u32 %87 = OpConstant 0 
                                              %88 = OpTypePointer Uniform %6 
                               Private f32_4* %93 = OpVariable Private 
                                              %94 = OpTypeVector %6 3 
                                          f32 %97 = OpConstant 3.674022E-40 
                                        f32_3 %98 = OpConstantComposite %97 %97 %97 
                       Output f32_4* vs_TEXCOORD0 = OpVariable Output 
                                             %103 = OpTypeVector %6 2 
                                         f32 %158 = OpConstant 3.674022E-40 
                                         f32 %159 = OpConstant 3.674022E-40 
                                       f32_3 %160 = OpConstantComposite %158 %158 %159 
                                             %168 = OpTypePointer Input %94 
                                Input f32_3* %169 = OpVariable Input 
                                             %174 = OpTypePointer Output %94 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                                         i32 %176 = OpConstant 4 
                                             %186 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %25 = OpAccessChain %21 %23 %23 
                                        f32_4 %26 = OpLoad %25 
                                        f32_4 %27 = OpFMul %13 %26 
                                                      OpStore %9 %27 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %28 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %44 = OpLoad %9 
                               Uniform f32_4* %46 = OpAccessChain %21 %23 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_4 %48 = OpFAdd %44 %47 
                                                      OpStore %9 %48 
                                        f32_4 %50 = OpLoad %9 
                                        f32_4 %51 = OpVectorShuffle %50 %50 1 1 1 1 
                               Uniform f32_4* %52 = OpAccessChain %21 %45 %23 
                                        f32_4 %53 = OpLoad %52 
                                        f32_4 %54 = OpFMul %51 %53 
                                                      OpStore %49 %54 
                               Uniform f32_4* %55 = OpAccessChain %21 %45 %28 
                                        f32_4 %56 = OpLoad %55 
                                        f32_4 %57 = OpLoad %9 
                                        f32_4 %58 = OpVectorShuffle %57 %57 0 0 0 0 
                                        f32_4 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %49 
                                        f32_4 %61 = OpFAdd %59 %60 
                                                      OpStore %49 %61 
                               Uniform f32_4* %62 = OpAccessChain %21 %45 %36 
                                        f32_4 %63 = OpLoad %62 
                                        f32_4 %64 = OpLoad %9 
                                        f32_4 %65 = OpVectorShuffle %64 %64 2 2 2 2 
                                        f32_4 %66 = OpFMul %63 %65 
                                        f32_4 %67 = OpLoad %49 
                                        f32_4 %68 = OpFAdd %66 %67 
                                                      OpStore %49 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %45 %45 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %9 
                                        f32_4 %72 = OpVectorShuffle %71 %71 3 3 3 3 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %49 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %49 %75 
                                        f32_4 %81 = OpLoad %49 
                                Output f32_4* %83 = OpAccessChain %80 %28 
                                                      OpStore %83 %81 
                                 Private f32* %85 = OpAccessChain %49 %76 
                                          f32 %86 = OpLoad %85 
                                 Uniform f32* %89 = OpAccessChain %21 %28 %87 
                                          f32 %90 = OpLoad %89 
                                          f32 %91 = OpFMul %86 %90 
                                 Private f32* %92 = OpAccessChain %49 %76 
                                                      OpStore %92 %91 
                                        f32_4 %95 = OpLoad %49 
                                        f32_3 %96 = OpVectorShuffle %95 %95 0 3 1 
                                        f32_3 %99 = OpFMul %96 %98 
                                       f32_4 %100 = OpLoad %93 
                                       f32_4 %101 = OpVectorShuffle %100 %99 4 1 5 6 
                                                      OpStore %93 %101 
                                       f32_4 %104 = OpLoad %49 
                                       f32_2 %105 = OpVectorShuffle %104 %104 2 3 
                                       f32_4 %106 = OpLoad vs_TEXCOORD0 
                                       f32_4 %107 = OpVectorShuffle %106 %105 0 1 4 5 
                                                      OpStore vs_TEXCOORD0 %107 
                                       f32_4 %108 = OpLoad %93 
                                       f32_2 %109 = OpVectorShuffle %108 %108 2 2 
                                       f32_4 %110 = OpLoad %93 
                                       f32_2 %111 = OpVectorShuffle %110 %110 0 3 
                                       f32_2 %112 = OpFAdd %109 %111 
                                       f32_4 %113 = OpLoad vs_TEXCOORD0 
                                       f32_4 %114 = OpVectorShuffle %113 %112 4 5 2 3 
                                                      OpStore vs_TEXCOORD0 %114 
                                       f32_4 %115 = OpLoad %9 
                                       f32_3 %116 = OpVectorShuffle %115 %115 1 1 1 
                              Uniform f32_4* %117 = OpAccessChain %21 %36 %23 
                                       f32_4 %118 = OpLoad %117 
                                       f32_3 %119 = OpVectorShuffle %118 %118 0 1 2 
                                       f32_3 %120 = OpFMul %116 %119 
                                       f32_4 %121 = OpLoad %49 
                                       f32_4 %122 = OpVectorShuffle %121 %120 4 5 6 3 
                                                      OpStore %49 %122 
                              Uniform f32_4* %123 = OpAccessChain %21 %36 %28 
                                       f32_4 %124 = OpLoad %123 
                                       f32_3 %125 = OpVectorShuffle %124 %124 0 1 2 
                                       f32_4 %126 = OpLoad %9 
                                       f32_3 %127 = OpVectorShuffle %126 %126 0 0 0 
                                       f32_3 %128 = OpFMul %125 %127 
                                       f32_4 %129 = OpLoad %49 
                                       f32_3 %130 = OpVectorShuffle %129 %129 0 1 2 
                                       f32_3 %131 = OpFAdd %128 %130 
                                       f32_4 %132 = OpLoad %49 
                                       f32_4 %133 = OpVectorShuffle %132 %131 4 5 6 3 
                                                      OpStore %49 %133 
                              Uniform f32_4* %134 = OpAccessChain %21 %36 %36 
                                       f32_4 %135 = OpLoad %134 
                                       f32_3 %136 = OpVectorShuffle %135 %135 0 1 2 
                                       f32_4 %137 = OpLoad %9 
                                       f32_3 %138 = OpVectorShuffle %137 %137 2 2 2 
                                       f32_3 %139 = OpFMul %136 %138 
                                       f32_4 %140 = OpLoad %49 
                                       f32_3 %141 = OpVectorShuffle %140 %140 0 1 2 
                                       f32_3 %142 = OpFAdd %139 %141 
                                       f32_4 %143 = OpLoad %9 
                                       f32_4 %144 = OpVectorShuffle %143 %142 4 5 6 3 
                                                      OpStore %9 %144 
                              Uniform f32_4* %145 = OpAccessChain %21 %36 %45 
                                       f32_4 %146 = OpLoad %145 
                                       f32_3 %147 = OpVectorShuffle %146 %146 0 1 2 
                                       f32_4 %148 = OpLoad %9 
                                       f32_3 %149 = OpVectorShuffle %148 %148 3 3 3 
                                       f32_3 %150 = OpFMul %147 %149 
                                       f32_4 %151 = OpLoad %9 
                                       f32_3 %152 = OpVectorShuffle %151 %151 0 1 2 
                                       f32_3 %153 = OpFAdd %150 %152 
                                       f32_4 %154 = OpLoad %9 
                                       f32_4 %155 = OpVectorShuffle %154 %153 4 5 6 3 
                                                      OpStore %9 %155 
                                       f32_4 %156 = OpLoad %9 
                                       f32_3 %157 = OpVectorShuffle %156 %156 0 1 2 
                                       f32_3 %161 = OpFMul %157 %160 
                                       f32_4 %162 = OpLoad %49 
                                       f32_4 %163 = OpVectorShuffle %162 %161 4 5 6 3 
                                                      OpStore %49 %163 
                                       f32_4 %164 = OpLoad %9 
                                       f32_3 %165 = OpVectorShuffle %164 %164 0 1 2 
                                       f32_3 %166 = OpFNegate %165 
                                       f32_3 %167 = OpFMul %166 %160 
                                       f32_3 %170 = OpLoad %169 
                                       f32_3 %171 = OpFAdd %167 %170 
                                       f32_4 %172 = OpLoad %9 
                                       f32_4 %173 = OpVectorShuffle %172 %171 4 5 6 3 
                                                      OpStore %9 %173 
                                Uniform f32* %177 = OpAccessChain %21 %176 
                                         f32 %178 = OpLoad %177 
                                       f32_3 %179 = OpCompositeConstruct %178 %178 %178 
                                       f32_4 %180 = OpLoad %9 
                                       f32_3 %181 = OpVectorShuffle %180 %180 0 1 2 
                                       f32_3 %182 = OpFMul %179 %181 
                                       f32_4 %183 = OpLoad %49 
                                       f32_3 %184 = OpVectorShuffle %183 %183 0 1 2 
                                       f32_3 %185 = OpFAdd %182 %184 
                                                      OpStore vs_TEXCOORD1 %185 
                                 Output f32* %187 = OpAccessChain %80 %28 %76 
                                         f32 %188 = OpLoad %187 
                                         f32 %189 = OpFNegate %188 
                                 Output f32* %190 = OpAccessChain %80 %28 %76 
                                                      OpStore %190 %189 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 963
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %27 %41 %951 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpDecorate %13 ArrayStride 13 
                                                      OpDecorate %15 ArrayStride 15 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpMemberDecorate %17 0 Offset 17 
                                                      OpMemberDecorate %17 1 Offset 17 
                                                      OpMemberDecorate %17 2 Offset 17 
                                                      OpMemberDecorate %17 3 Offset 17 
                                                      OpMemberDecorate %17 4 Offset 17 
                                                      OpMemberDecorate %17 5 Offset 17 
                                                      OpMemberDecorate %17 6 Offset 17 
                                                      OpMemberDecorate %17 7 Offset 17 
                                                      OpMemberDecorate %17 8 Offset 17 
                                                      OpMemberDecorate %17 9 Offset 17 
                                                      OpMemberDecorate %17 10 Offset 17 
                                                      OpDecorate %17 Block 
                                                      OpDecorate %19 DescriptorSet 19 
                                                      OpDecorate %19 Binding 19 
                                                      OpDecorate vs_TEXCOORD1 Location 27 
                                                      OpDecorate vs_TEXCOORD0 Location 41 
                                                      OpDecorate %53 DescriptorSet 53 
                                                      OpDecorate %53 Binding 53 
                                                      OpDecorate %57 DescriptorSet 57 
                                                      OpDecorate %57 Binding 57 
                                                      OpDecorate %227 DescriptorSet 227 
                                                      OpDecorate %227 Binding 227 
                                                      OpDecorate %229 DescriptorSet 229 
                                                      OpDecorate %229 Binding 229 
                                                      OpDecorate %254 DescriptorSet 254 
                                                      OpDecorate %254 Binding 254 
                                                      OpDecorate %256 DescriptorSet 256 
                                                      OpDecorate %256 Binding 256 
                                                      OpDecorate %508 DescriptorSet 508 
                                                      OpDecorate %508 Binding 508 
                                                      OpDecorate %510 DescriptorSet 510 
                                                      OpDecorate %510 Binding 510 
                                                      OpDecorate %626 DescriptorSet 626 
                                                      OpDecorate %626 Binding 626 
                                                      OpDecorate %628 DescriptorSet 628 
                                                      OpDecorate %628 Binding 628 
                                                      OpDecorate %637 DescriptorSet 637 
                                                      OpDecorate %637 Binding 637 
                                                      OpDecorate %639 DescriptorSet 639 
                                                      OpDecorate %639 Binding 639 
                                                      OpDecorate %645 DescriptorSet 645 
                                                      OpDecorate %645 Binding 645 
                                                      OpDecorate %647 DescriptorSet 647 
                                                      OpDecorate %647 Binding 647 
                                                      OpDecorate %951 Location 951 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 3 
                                               %8 = OpTypePointer Private %7 
                                Private f32_3* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 4 
                                              %11 = OpTypeInt 32 0 
                                          u32 %12 = OpConstant 4 
                                              %13 = OpTypeArray %10 %12 
                                          u32 %14 = OpConstant 16 
                                              %15 = OpTypeArray %10 %14 
                                              %16 = OpTypeArray %10 %12 
                                              %17 = OpTypeStruct %7 %10 %10 %13 %15 %10 %10 %10 %10 %16 %10 
                                              %18 = OpTypePointer Uniform %17 
Uniform struct {f32_3; f32_4; f32_4; f32_4[4]; f32_4[16]; f32_4; f32_4; f32_4; f32_4; f32_4[4]; f32_4;}* %19 = OpVariable Uniform 
                                              %20 = OpTypeInt 32 1 
                                          i32 %21 = OpConstant 1 
                                          u32 %22 = OpConstant 2 
                                              %23 = OpTypePointer Uniform %6 
                                              %26 = OpTypePointer Input %7 
                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                                              %28 = OpTypePointer Input %6 
                                          u32 %32 = OpConstant 0 
                                              %33 = OpTypePointer Private %6 
                               Private f32_3* %39 = OpVariable Private 
                                              %40 = OpTypePointer Input %10 
                        Input f32_4* vs_TEXCOORD0 = OpVariable Input 
                                              %42 = OpTypeVector %6 2 
                                 Private f32* %50 = OpVariable Private 
                                              %51 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %52 = OpTypePointer UniformConstant %51 
         UniformConstant read_only Texture2D* %53 = OpVariable UniformConstant 
                                              %55 = OpTypeSampler 
                                              %56 = OpTypePointer UniformConstant %55 
                     UniformConstant sampler* %57 = OpVariable UniformConstant 
                                              %59 = OpTypeSampledImage %51 
                                          i32 %65 = OpConstant 2 
                                          u32 %70 = OpConstant 1 
                                          f32 %74 = OpConstant 3.674022E-40 
                                              %77 = OpTypePointer Private %10 
                               Private f32_4* %78 = OpVariable Private 
                               Private f32_3* %85 = OpVariable Private 
                                          i32 %88 = OpConstant 3 
                                              %89 = OpTypePointer Uniform %10 
                                          i32 %94 = OpConstant 0 
                                         i32 %126 = OpConstant 6 
                                         u32 %149 = OpConstant 3 
                              Private f32_3* %159 = OpVariable Private 
                                         i32 %163 = OpConstant 7 
                                Private f32* %168 = OpVariable Private 
                                Private f32* %172 = OpVariable Private 
                              Private f32_4* %179 = OpVariable Private 
                                         i32 %182 = OpConstant 9 
                                Private f32* %226 = OpVariable Private 
        UniformConstant read_only Texture2D* %227 = OpVariable UniformConstant 
                    UniformConstant sampler* %229 = OpVariable UniformConstant 
                                         f32 %234 = OpConstant 3.674022E-40 
                                             %237 = OpTypeBool 
                                             %238 = OpTypePointer Private %237 
                               Private bool* %239 = OpVariable Private 
                                         f32 %242 = OpConstant 3.674022E-40 
                                Private f32* %244 = OpVariable Private 
        UniformConstant read_only Texture2D* %254 = OpVariable UniformConstant 
                    UniformConstant sampler* %256 = OpVariable UniformConstant 
                                         i32 %268 = OpConstant 5 
                               Private bool* %280 = OpVariable Private 
                                         f32 %283 = OpConstant 3.674022E-40 
                                         i32 %290 = OpConstant 4 
                              Private f32_4* %319 = OpVariable Private 
                                         i32 %322 = OpConstant 10 
                                         f32 %327 = OpConstant 3.674022E-40 
                                       f32_2 %328 = OpConstantComposite %327 %327 
                              Private f32_4* %349 = OpVariable Private 
                                       f32_4 %352 = OpConstantComposite %327 %74 %327 %74 
                              Private f32_4* %354 = OpVariable Private 
                                             %362 = OpTypePointer Private %42 
                              Private f32_2* %363 = OpVariable Private 
                                       f32_2 %374 = OpConstantComposite %74 %74 
                              Private f32_4* %378 = OpVariable Private 
                                       f32_2 %381 = OpConstantComposite %242 %242 
                                         f32 %425 = OpConstant 3.674022E-40 
                                         f32 %426 = OpConstant 3.674022E-40 
                                       f32_4 %427 = OpConstantComposite %425 %425 %425 %426 
                              Private f32_4* %445 = OpVariable Private 
                                         f32 %460 = OpConstant 3.674022E-40 
                                       f32_2 %461 = OpConstantComposite %460 %327 
                                             %499 = OpTypePointer Function %7 
        UniformConstant read_only Texture2D* %508 = OpVariable UniformConstant 
                    UniformConstant sampler* %510 = OpVariable UniformConstant 
                                             %512 = OpTypeImage %6 Dim2D 1 0 0 1 Unknown 
                                             %513 = OpTypeSampledImage %512 
                                         i32 %619 = OpConstant 8 
        UniformConstant read_only Texture2D* %626 = OpVariable UniformConstant 
                    UniformConstant sampler* %628 = OpVariable UniformConstant 
        UniformConstant read_only Texture2D* %637 = OpVariable UniformConstant 
                    UniformConstant sampler* %639 = OpVariable UniformConstant 
        UniformConstant read_only Texture2D* %645 = OpVariable UniformConstant 
                    UniformConstant sampler* %647 = OpVariable UniformConstant 
                                         f32 %655 = OpConstant 3.674022E-40 
                                       f32_3 %656 = OpConstantComposite %655 %655 %655 
                                         f32 %658 = OpConstant 3.674022E-40 
                                       f32_3 %659 = OpConstantComposite %658 %658 %658 
                                             %675 = OpTypePointer Uniform %7 
                                       f32_4 %702 = OpConstantComposite %74 %74 %74 %74 
                                         f32 %716 = OpConstant 3.674022E-40 
                                         f32 %764 = OpConstant 3.674022E-40 
                                Private f32* %767 = OpVariable Private 
                                Private f32* %771 = OpVariable Private 
                                         f32 %816 = OpConstant 3.674022E-40 
                                         f32 %842 = OpConstant 3.674022E-40 
                                         f32 %864 = OpConstant 3.674022E-40 
                                         f32 %871 = OpConstant 3.674022E-40 
                                         f32 %891 = OpConstant 3.674022E-40 
                               Private bool* %900 = OpVariable Private 
                                             %950 = OpTypePointer Output %10 
                               Output f32_4* %951 = OpVariable Output 
                                             %960 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_3* %500 = OpVariable Function 
                             Function f32_3* %518 = OpVariable Function 
                             Function f32_3* %551 = OpVariable Function 
                             Function f32_3* %571 = OpVariable Function 
                                 Uniform f32* %24 = OpAccessChain %19 %21 %22 
                                          f32 %25 = OpLoad %24 
                                   Input f32* %29 = OpAccessChain vs_TEXCOORD1 %22 
                                          f32 %30 = OpLoad %29 
                                          f32 %31 = OpFDiv %25 %30 
                                 Private f32* %34 = OpAccessChain %9 %32 
                                                      OpStore %34 %31 
                                        f32_3 %35 = OpLoad %9 
                                        f32_3 %36 = OpVectorShuffle %35 %35 0 0 0 
                                        f32_3 %37 = OpLoad vs_TEXCOORD1 
                                        f32_3 %38 = OpFMul %36 %37 
                                                      OpStore %9 %38 
                                        f32_4 %43 = OpLoad vs_TEXCOORD0 
                                        f32_2 %44 = OpVectorShuffle %43 %43 0 1 
                                        f32_4 %45 = OpLoad vs_TEXCOORD0 
                                        f32_2 %46 = OpVectorShuffle %45 %45 3 3 
                                        f32_2 %47 = OpFDiv %44 %46 
                                        f32_3 %48 = OpLoad %39 
                                        f32_3 %49 = OpVectorShuffle %48 %47 3 4 2 
                                                      OpStore %39 %49 
                          read_only Texture2D %54 = OpLoad %53 
                                      sampler %58 = OpLoad %57 
                   read_only Texture2DSampled %60 = OpSampledImage %54 %58 
                                        f32_3 %61 = OpLoad %39 
                                        f32_2 %62 = OpVectorShuffle %61 %61 0 1 
                                        f32_4 %63 = OpImageSampleImplicitLod %60 %62 
                                          f32 %64 = OpCompositeExtract %63 0 
                                                      OpStore %50 %64 
                                 Uniform f32* %66 = OpAccessChain %19 %65 %32 
                                          f32 %67 = OpLoad %66 
                                          f32 %68 = OpLoad %50 
                                          f32 %69 = OpFMul %67 %68 
                                 Uniform f32* %71 = OpAccessChain %19 %65 %70 
                                          f32 %72 = OpLoad %71 
                                          f32 %73 = OpFAdd %69 %72 
                                                      OpStore %50 %73 
                                          f32 %75 = OpLoad %50 
                                          f32 %76 = OpFDiv %74 %75 
                                                      OpStore %50 %76 
                                          f32 %79 = OpLoad %50 
                                        f32_3 %80 = OpCompositeConstruct %79 %79 %79 
                                        f32_3 %81 = OpLoad %9 
                                        f32_3 %82 = OpFMul %80 %81 
                                        f32_4 %83 = OpLoad %78 
                                        f32_4 %84 = OpVectorShuffle %83 %82 4 5 6 3 
                                                      OpStore %78 %84 
                                        f32_4 %86 = OpLoad %78 
                                        f32_3 %87 = OpVectorShuffle %86 %86 1 1 1 
                               Uniform f32_4* %90 = OpAccessChain %19 %88 %21 
                                        f32_4 %91 = OpLoad %90 
                                        f32_3 %92 = OpVectorShuffle %91 %91 0 1 2 
                                        f32_3 %93 = OpFMul %87 %92 
                                                      OpStore %85 %93 
                               Uniform f32_4* %95 = OpAccessChain %19 %88 %94 
                                        f32_4 %96 = OpLoad %95 
                                        f32_3 %97 = OpVectorShuffle %96 %96 0 1 2 
                                        f32_4 %98 = OpLoad %78 
                                        f32_3 %99 = OpVectorShuffle %98 %98 0 0 0 
                                       f32_3 %100 = OpFMul %97 %99 
                                       f32_3 %101 = OpLoad %85 
                                       f32_3 %102 = OpFAdd %100 %101 
                                       f32_4 %103 = OpLoad %78 
                                       f32_4 %104 = OpVectorShuffle %103 %102 4 5 2 6 
                                                      OpStore %78 %104 
                              Uniform f32_4* %105 = OpAccessChain %19 %88 %65 
                                       f32_4 %106 = OpLoad %105 
                                       f32_3 %107 = OpVectorShuffle %106 %106 0 1 2 
                                       f32_4 %108 = OpLoad %78 
                                       f32_3 %109 = OpVectorShuffle %108 %108 2 2 2 
                                       f32_3 %110 = OpFMul %107 %109 
                                       f32_4 %111 = OpLoad %78 
                                       f32_3 %112 = OpVectorShuffle %111 %111 0 1 3 
                                       f32_3 %113 = OpFAdd %110 %112 
                                       f32_4 %114 = OpLoad %78 
                                       f32_4 %115 = OpVectorShuffle %114 %113 4 5 2 6 
                                                      OpStore %78 %115 
                                       f32_4 %116 = OpLoad %78 
                                       f32_3 %117 = OpVectorShuffle %116 %116 0 1 3 
                              Uniform f32_4* %118 = OpAccessChain %19 %88 %88 
                                       f32_4 %119 = OpLoad %118 
                                       f32_3 %120 = OpVectorShuffle %119 %119 0 1 2 
                                       f32_3 %121 = OpFAdd %117 %120 
                                       f32_4 %122 = OpLoad %78 
                                       f32_4 %123 = OpVectorShuffle %122 %121 4 5 2 6 
                                                      OpStore %78 %123 
                                       f32_4 %124 = OpLoad %78 
                                       f32_3 %125 = OpVectorShuffle %124 %124 0 1 3 
                              Uniform f32_4* %127 = OpAccessChain %19 %126 
                                       f32_4 %128 = OpLoad %127 
                                       f32_3 %129 = OpVectorShuffle %128 %128 0 1 2 
                                       f32_3 %130 = OpFNegate %129 
                                       f32_3 %131 = OpFAdd %125 %130 
                                                      OpStore %85 %131 
                                       f32_3 %132 = OpLoad %85 
                                       f32_3 %133 = OpLoad %85 
                                         f32 %134 = OpDot %132 %133 
                                Private f32* %135 = OpAccessChain %9 %32 
                                                      OpStore %135 %134 
                                Private f32* %136 = OpAccessChain %9 %32 
                                         f32 %137 = OpLoad %136 
                                         f32 %138 = OpExtInst %1 31 %137 
                                Private f32* %139 = OpAccessChain %9 %32 
                                                      OpStore %139 %138 
                                Private f32* %140 = OpAccessChain %9 %22 
                                         f32 %141 = OpLoad %140 
                                         f32 %142 = OpFNegate %141 
                                         f32 %143 = OpLoad %50 
                                         f32 %144 = OpFMul %142 %143 
                                Private f32* %145 = OpAccessChain %9 %32 
                                         f32 %146 = OpLoad %145 
                                         f32 %147 = OpFAdd %144 %146 
                                Private f32* %148 = OpAccessChain %9 %32 
                                                      OpStore %148 %147 
                                Uniform f32* %150 = OpAccessChain %19 %126 %149 
                                         f32 %151 = OpLoad %150 
                                Private f32* %152 = OpAccessChain %9 %32 
                                         f32 %153 = OpLoad %152 
                                         f32 %154 = OpFMul %151 %153 
                                Private f32* %155 = OpAccessChain %78 %22 
                                         f32 %156 = OpLoad %155 
                                         f32 %157 = OpFAdd %154 %156 
                                Private f32* %158 = OpAccessChain %9 %32 
                                                      OpStore %158 %157 
                                       f32_4 %160 = OpLoad %78 
                                       f32_3 %161 = OpVectorShuffle %160 %160 0 1 3 
                                       f32_3 %162 = OpFNegate %161 
                              Uniform f32_4* %164 = OpAccessChain %19 %163 
                                       f32_4 %165 = OpLoad %164 
                                       f32_3 %166 = OpVectorShuffle %165 %165 0 1 2 
                                       f32_3 %167 = OpFAdd %162 %166 
                                                      OpStore %159 %167 
                                       f32_3 %169 = OpLoad %159 
                                       f32_3 %170 = OpLoad %159 
                                         f32 %171 = OpDot %169 %170 
                                                      OpStore %168 %171 
                                         f32 %173 = OpLoad %168 
                                         f32 %174 = OpExtInst %1 32 %173 
                                                      OpStore %172 %174 
                                       f32_3 %175 = OpLoad %159 
                                         f32 %176 = OpLoad %172 
                                       f32_3 %177 = OpCompositeConstruct %176 %176 %176 
                                       f32_3 %178 = OpFMul %175 %177 
                                                      OpStore %85 %178 
                                       f32_4 %180 = OpLoad %78 
                                       f32_3 %181 = OpVectorShuffle %180 %180 1 1 1 
                              Uniform f32_4* %183 = OpAccessChain %19 %182 %21 
                                       f32_4 %184 = OpLoad %183 
                                       f32_3 %185 = OpVectorShuffle %184 %184 0 1 3 
                                       f32_3 %186 = OpFMul %181 %185 
                                       f32_4 %187 = OpLoad %179 
                                       f32_4 %188 = OpVectorShuffle %187 %186 4 5 6 3 
                                                      OpStore %179 %188 
                              Uniform f32_4* %189 = OpAccessChain %19 %182 %94 
                                       f32_4 %190 = OpLoad %189 
                                       f32_3 %191 = OpVectorShuffle %190 %190 0 1 3 
                                       f32_4 %192 = OpLoad %78 
                                       f32_3 %193 = OpVectorShuffle %192 %192 0 0 0 
                                       f32_3 %194 = OpFMul %191 %193 
                                       f32_4 %195 = OpLoad %179 
                                       f32_3 %196 = OpVectorShuffle %195 %195 0 1 2 
                                       f32_3 %197 = OpFAdd %194 %196 
                                       f32_4 %198 = OpLoad %179 
                                       f32_4 %199 = OpVectorShuffle %198 %197 4 5 6 3 
                                                      OpStore %179 %199 
                              Uniform f32_4* %200 = OpAccessChain %19 %182 %65 
                                       f32_4 %201 = OpLoad %200 
                                       f32_3 %202 = OpVectorShuffle %201 %201 0 1 3 
                                       f32_4 %203 = OpLoad %78 
                                       f32_3 %204 = OpVectorShuffle %203 %203 3 3 3 
                                       f32_3 %205 = OpFMul %202 %204 
                                       f32_4 %206 = OpLoad %179 
                                       f32_3 %207 = OpVectorShuffle %206 %206 0 1 2 
                                       f32_3 %208 = OpFAdd %205 %207 
                                       f32_4 %209 = OpLoad %179 
                                       f32_4 %210 = OpVectorShuffle %209 %208 4 5 6 3 
                                                      OpStore %179 %210 
                                       f32_4 %211 = OpLoad %179 
                                       f32_3 %212 = OpVectorShuffle %211 %211 0 1 2 
                              Uniform f32_4* %213 = OpAccessChain %19 %182 %88 
                                       f32_4 %214 = OpLoad %213 
                                       f32_3 %215 = OpVectorShuffle %214 %214 0 1 3 
                                       f32_3 %216 = OpFAdd %212 %215 
                                       f32_4 %217 = OpLoad %179 
                                       f32_4 %218 = OpVectorShuffle %217 %216 4 5 6 3 
                                                      OpStore %179 %218 
                                       f32_4 %219 = OpLoad %179 
                                       f32_2 %220 = OpVectorShuffle %219 %219 0 1 
                                       f32_4 %221 = OpLoad %179 
                                       f32_2 %222 = OpVectorShuffle %221 %221 2 2 
                                       f32_2 %223 = OpFDiv %220 %222 
                                       f32_4 %224 = OpLoad %179 
                                       f32_4 %225 = OpVectorShuffle %224 %223 4 5 2 3 
                                                      OpStore %179 %225 
                         read_only Texture2D %228 = OpLoad %227 
                                     sampler %230 = OpLoad %229 
                  read_only Texture2DSampled %231 = OpSampledImage %228 %230 
                                       f32_4 %232 = OpLoad %179 
                                       f32_2 %233 = OpVectorShuffle %232 %232 0 1 
                                       f32_4 %235 = OpImageSampleImplicitLod %231 %233 Bias %10 
                                         f32 %236 = OpCompositeExtract %235 3 
                                                      OpStore %226 %236 
                                Private f32* %240 = OpAccessChain %179 %22 
                                         f32 %241 = OpLoad %240 
                                        bool %243 = OpFOrdLessThan %241 %242 
                                                      OpStore %239 %243 
                                        bool %245 = OpLoad %239 
                                         f32 %246 = OpSelect %245 %74 %242 
                                                      OpStore %244 %246 
                                         f32 %247 = OpLoad %226 
                                         f32 %248 = OpLoad %244 
                                         f32 %249 = OpFMul %247 %248 
                                                      OpStore %226 %249 
                                         f32 %250 = OpLoad %168 
                                Uniform f32* %251 = OpAccessChain %19 %163 %149 
                                         f32 %252 = OpLoad %251 
                                         f32 %253 = OpFMul %250 %252 
                                                      OpStore %168 %253 
                         read_only Texture2D %255 = OpLoad %254 
                                     sampler %257 = OpLoad %256 
                  read_only Texture2DSampled %258 = OpSampledImage %255 %257 
                                         f32 %259 = OpLoad %168 
                                       f32_2 %260 = OpCompositeConstruct %259 %259 
                                       f32_4 %261 = OpImageSampleImplicitLod %258 %260 
                                         f32 %262 = OpCompositeExtract %261 0 
                                                      OpStore %168 %262 
                                         f32 %263 = OpLoad %168 
                                         f32 %264 = OpLoad %226 
                                         f32 %265 = OpFMul %263 %264 
                                                      OpStore %168 %265 
                                Private f32* %266 = OpAccessChain %9 %32 
                                         f32 %267 = OpLoad %266 
                                Uniform f32* %269 = OpAccessChain %19 %268 %22 
                                         f32 %270 = OpLoad %269 
                                         f32 %271 = OpFMul %267 %270 
                                Uniform f32* %272 = OpAccessChain %19 %268 %149 
                                         f32 %273 = OpLoad %272 
                                         f32 %274 = OpFAdd %271 %273 
                                Private f32* %275 = OpAccessChain %9 %32 
                                                      OpStore %275 %274 
                                Private f32* %276 = OpAccessChain %9 %32 
                                         f32 %277 = OpLoad %276 
                                         f32 %278 = OpExtInst %1 43 %277 %242 %74 
                                Private f32* %279 = OpAccessChain %9 %32 
                                                      OpStore %279 %278 
                                Private f32* %281 = OpAccessChain %9 %32 
                                         f32 %282 = OpLoad %281 
                                        bool %284 = OpFOrdLessThan %282 %283 
                                                      OpStore %280 %284 
                                        bool %285 = OpLoad %280 
                                                      OpSelectionMerge %287 None 
                                                      OpBranchConditional %285 %286 %601 
                                             %286 = OpLabel 
                                       f32_4 %288 = OpLoad %78 
                                       f32_4 %289 = OpVectorShuffle %288 %288 1 1 1 1 
                              Uniform f32_4* %291 = OpAccessChain %19 %290 %21 
                                       f32_4 %292 = OpLoad %291 
                                       f32_4 %293 = OpFMul %289 %292 
                                                      OpStore %179 %293 
                              Uniform f32_4* %294 = OpAccessChain %19 %290 %94 
                                       f32_4 %295 = OpLoad %294 
                                       f32_4 %296 = OpLoad %78 
                                       f32_4 %297 = OpVectorShuffle %296 %296 0 0 0 0 
                                       f32_4 %298 = OpFMul %295 %297 
                                       f32_4 %299 = OpLoad %179 
                                       f32_4 %300 = OpFAdd %298 %299 
                                                      OpStore %179 %300 
                              Uniform f32_4* %301 = OpAccessChain %19 %290 %65 
                                       f32_4 %302 = OpLoad %301 
                                       f32_4 %303 = OpLoad %78 
                                       f32_4 %304 = OpVectorShuffle %303 %303 3 3 3 3 
                                       f32_4 %305 = OpFMul %302 %304 
                                       f32_4 %306 = OpLoad %179 
                                       f32_4 %307 = OpFAdd %305 %306 
                                                      OpStore %179 %307 
                                       f32_4 %308 = OpLoad %179 
                              Uniform f32_4* %309 = OpAccessChain %19 %290 %88 
                                       f32_4 %310 = OpLoad %309 
                                       f32_4 %311 = OpFAdd %308 %310 
                                                      OpStore %179 %311 
                                       f32_4 %312 = OpLoad %179 
                                       f32_3 %313 = OpVectorShuffle %312 %312 0 1 2 
                                       f32_4 %314 = OpLoad %179 
                                       f32_3 %315 = OpVectorShuffle %314 %314 3 3 3 
                                       f32_3 %316 = OpFDiv %313 %315 
                                       f32_4 %317 = OpLoad %179 
                                       f32_4 %318 = OpVectorShuffle %317 %316 4 5 6 3 
                                                      OpStore %179 %318 
                                       f32_4 %320 = OpLoad %179 
                                       f32_2 %321 = OpVectorShuffle %320 %320 0 1 
                              Uniform f32_4* %323 = OpAccessChain %19 %322 
                                       f32_4 %324 = OpLoad %323 
                                       f32_2 %325 = OpVectorShuffle %324 %324 2 3 
                                       f32_2 %326 = OpFMul %321 %325 
                                       f32_2 %329 = OpFAdd %326 %328 
                                       f32_4 %330 = OpLoad %319 
                                       f32_4 %331 = OpVectorShuffle %330 %329 4 5 2 3 
                                                      OpStore %319 %331 
                                       f32_4 %332 = OpLoad %319 
                                       f32_2 %333 = OpVectorShuffle %332 %332 0 1 
                                       f32_2 %334 = OpExtInst %1 8 %333 
                                       f32_4 %335 = OpLoad %319 
                                       f32_4 %336 = OpVectorShuffle %335 %334 4 5 2 3 
                                                      OpStore %319 %336 
                                       f32_4 %337 = OpLoad %179 
                                       f32_2 %338 = OpVectorShuffle %337 %337 0 1 
                              Uniform f32_4* %339 = OpAccessChain %19 %322 
                                       f32_4 %340 = OpLoad %339 
                                       f32_2 %341 = OpVectorShuffle %340 %340 2 3 
                                       f32_2 %342 = OpFMul %338 %341 
                                       f32_4 %343 = OpLoad %319 
                                       f32_2 %344 = OpVectorShuffle %343 %343 0 1 
                                       f32_2 %345 = OpFNegate %344 
                                       f32_2 %346 = OpFAdd %342 %345 
                                       f32_4 %347 = OpLoad %179 
                                       f32_4 %348 = OpVectorShuffle %347 %346 4 5 2 3 
                                                      OpStore %179 %348 
                                       f32_4 %350 = OpLoad %179 
                                       f32_4 %351 = OpVectorShuffle %350 %350 0 0 1 1 
                                       f32_4 %353 = OpFAdd %351 %352 
                                                      OpStore %349 %353 
                                       f32_4 %355 = OpLoad %349 
                                       f32_2 %356 = OpVectorShuffle %355 %355 0 2 
                                       f32_4 %357 = OpLoad %349 
                                       f32_2 %358 = OpVectorShuffle %357 %357 0 2 
                                       f32_2 %359 = OpFMul %356 %358 
                                       f32_4 %360 = OpLoad %354 
                                       f32_4 %361 = OpVectorShuffle %360 %359 4 1 2 5 
                                                      OpStore %354 %361 
                                       f32_4 %364 = OpLoad %354 
                                       f32_2 %365 = OpVectorShuffle %364 %364 0 3 
                                       f32_2 %366 = OpFMul %365 %328 
                                       f32_4 %367 = OpLoad %179 
                                       f32_2 %368 = OpVectorShuffle %367 %367 0 1 
                                       f32_2 %369 = OpFNegate %368 
                                       f32_2 %370 = OpFAdd %366 %369 
                                                      OpStore %363 %370 
                                       f32_4 %371 = OpLoad %179 
                                       f32_2 %372 = OpVectorShuffle %371 %371 0 1 
                                       f32_2 %373 = OpFNegate %372 
                                       f32_2 %375 = OpFAdd %373 %374 
                                       f32_4 %376 = OpLoad %349 
                                       f32_4 %377 = OpVectorShuffle %376 %375 4 1 5 3 
                                                      OpStore %349 %377 
                                       f32_4 %379 = OpLoad %179 
                                       f32_2 %380 = OpVectorShuffle %379 %379 0 1 
                                       f32_2 %382 = OpExtInst %1 37 %380 %381 
                                       f32_4 %383 = OpLoad %378 
                                       f32_4 %384 = OpVectorShuffle %383 %382 4 5 2 3 
                                                      OpStore %378 %384 
                                       f32_4 %385 = OpLoad %378 
                                       f32_2 %386 = OpVectorShuffle %385 %385 0 1 
                                       f32_2 %387 = OpFNegate %386 
                                       f32_4 %388 = OpLoad %378 
                                       f32_2 %389 = OpVectorShuffle %388 %388 0 1 
                                       f32_2 %390 = OpFMul %387 %389 
                                       f32_4 %391 = OpLoad %349 
                                       f32_2 %392 = OpVectorShuffle %391 %391 0 2 
                                       f32_2 %393 = OpFAdd %390 %392 
                                       f32_4 %394 = OpLoad %349 
                                       f32_4 %395 = OpVectorShuffle %394 %393 4 1 5 3 
                                                      OpStore %349 %395 
                                       f32_4 %396 = OpLoad %179 
                                       f32_2 %397 = OpVectorShuffle %396 %396 0 1 
                                       f32_2 %398 = OpExtInst %1 40 %397 %381 
                                       f32_4 %399 = OpLoad %179 
                                       f32_4 %400 = OpVectorShuffle %399 %398 4 5 2 3 
                                                      OpStore %179 %400 
                                       f32_4 %401 = OpLoad %179 
                                       f32_2 %402 = OpVectorShuffle %401 %401 0 1 
                                       f32_2 %403 = OpFNegate %402 
                                       f32_4 %404 = OpLoad %179 
                                       f32_2 %405 = OpVectorShuffle %404 %404 0 1 
                                       f32_2 %406 = OpFMul %403 %405 
                                       f32_4 %407 = OpLoad %349 
                                       f32_2 %408 = OpVectorShuffle %407 %407 1 3 
                                       f32_2 %409 = OpFAdd %406 %408 
                                       f32_4 %410 = OpLoad %179 
                                       f32_4 %411 = OpVectorShuffle %410 %409 4 5 2 3 
                                                      OpStore %179 %411 
                                Private f32* %412 = OpAccessChain %363 %32 
                                         f32 %413 = OpLoad %412 
                                Private f32* %414 = OpAccessChain %378 %32 
                                                      OpStore %414 %413 
                                Private f32* %415 = OpAccessChain %349 %32 
                                         f32 %416 = OpLoad %415 
                                Private f32* %417 = OpAccessChain %378 %70 
                                                      OpStore %417 %416 
                                Private f32* %418 = OpAccessChain %179 %32 
                                         f32 %419 = OpLoad %418 
                                Private f32* %420 = OpAccessChain %378 %22 
                                                      OpStore %420 %419 
                                Private f32* %421 = OpAccessChain %354 %32 
                                         f32 %422 = OpLoad %421 
                                Private f32* %423 = OpAccessChain %378 %149 
                                                      OpStore %423 %422 
                                       f32_4 %424 = OpLoad %378 
                                       f32_4 %428 = OpFMul %424 %427 
                                                      OpStore %378 %428 
                                Private f32* %429 = OpAccessChain %363 %70 
                                         f32 %430 = OpLoad %429 
                                Private f32* %431 = OpAccessChain %354 %32 
                                                      OpStore %431 %430 
                                Private f32* %432 = OpAccessChain %349 %22 
                                         f32 %433 = OpLoad %432 
                                Private f32* %434 = OpAccessChain %354 %70 
                                                      OpStore %434 %433 
                                Private f32* %435 = OpAccessChain %179 %70 
                                         f32 %436 = OpLoad %435 
                                Private f32* %437 = OpAccessChain %354 %22 
                                                      OpStore %437 %436 
                                       f32_4 %438 = OpLoad %354 
                                       f32_4 %439 = OpFMul %438 %427 
                                                      OpStore %349 %439 
                                       f32_4 %440 = OpLoad %378 
                                       f32_4 %441 = OpVectorShuffle %440 %440 1 3 1 3 
                                       f32_4 %442 = OpLoad %378 
                                       f32_4 %443 = OpVectorShuffle %442 %442 0 2 0 2 
                                       f32_4 %444 = OpFAdd %441 %443 
                                                      OpStore %354 %444 
                                       f32_4 %446 = OpLoad %349 
                                       f32_4 %447 = OpVectorShuffle %446 %446 1 1 3 3 
                                       f32_4 %448 = OpLoad %349 
                                       f32_4 %449 = OpVectorShuffle %448 %448 0 0 2 2 
                                       f32_4 %450 = OpFAdd %447 %449 
                                                      OpStore %445 %450 
                                       f32_4 %451 = OpLoad %378 
                                       f32_2 %452 = OpVectorShuffle %451 %451 1 3 
                                       f32_4 %453 = OpLoad %354 
                                       f32_2 %454 = OpVectorShuffle %453 %453 2 3 
                                       f32_2 %455 = OpFDiv %452 %454 
                                       f32_4 %456 = OpLoad %179 
                                       f32_4 %457 = OpVectorShuffle %456 %455 4 5 2 3 
                                                      OpStore %179 %457 
                                       f32_4 %458 = OpLoad %179 
                                       f32_2 %459 = OpVectorShuffle %458 %458 0 1 
                                       f32_2 %462 = OpFAdd %459 %461 
                                       f32_4 %463 = OpLoad %179 
                                       f32_4 %464 = OpVectorShuffle %463 %462 4 5 2 3 
                                                      OpStore %179 %464 
                                       f32_4 %465 = OpLoad %349 
                                       f32_2 %466 = OpVectorShuffle %465 %465 1 3 
                                       f32_4 %467 = OpLoad %445 
                                       f32_2 %468 = OpVectorShuffle %467 %467 1 3 
                                       f32_2 %469 = OpFDiv %466 %468 
                                                      OpStore %363 %469 
                                       f32_2 %470 = OpLoad %363 
                                       f32_2 %471 = OpFAdd %470 %461 
                                                      OpStore %363 %471 
                                       f32_4 %472 = OpLoad %179 
                                       f32_2 %473 = OpVectorShuffle %472 %472 0 1 
                              Uniform f32_4* %474 = OpAccessChain %19 %322 
                                       f32_4 %475 = OpLoad %474 
                                       f32_2 %476 = OpVectorShuffle %475 %475 0 0 
                                       f32_2 %477 = OpFMul %473 %476 
                                       f32_4 %478 = OpLoad %349 
                                       f32_4 %479 = OpVectorShuffle %478 %477 4 5 2 3 
                                                      OpStore %349 %479 
                                       f32_2 %480 = OpLoad %363 
                              Uniform f32_4* %481 = OpAccessChain %19 %322 
                                       f32_4 %482 = OpLoad %481 
                                       f32_2 %483 = OpVectorShuffle %482 %482 1 1 
                                       f32_2 %484 = OpFMul %480 %483 
                                       f32_4 %485 = OpLoad %349 
                                       f32_4 %486 = OpVectorShuffle %485 %484 0 1 4 5 
                                                      OpStore %349 %486 
                                       f32_4 %487 = OpLoad %354 
                                       f32_4 %488 = OpLoad %445 
                                       f32_4 %489 = OpFMul %487 %488 
                                                      OpStore %354 %489 
                                       f32_4 %490 = OpLoad %319 
                                       f32_4 %491 = OpVectorShuffle %490 %490 0 1 0 1 
                              Uniform f32_4* %492 = OpAccessChain %19 %322 
                                       f32_4 %493 = OpLoad %492 
                                       f32_4 %494 = OpVectorShuffle %493 %493 0 1 0 1 
                                       f32_4 %495 = OpFMul %491 %494 
                                       f32_4 %496 = OpLoad %349 
                                       f32_4 %497 = OpVectorShuffle %496 %496 0 2 1 2 
                                       f32_4 %498 = OpFAdd %495 %497 
                                                      OpStore %378 %498 
                                       f32_4 %501 = OpLoad %378 
                                       f32_2 %502 = OpVectorShuffle %501 %501 0 1 
                                Private f32* %503 = OpAccessChain %179 %22 
                                         f32 %504 = OpLoad %503 
                                         f32 %505 = OpCompositeExtract %502 0 
                                         f32 %506 = OpCompositeExtract %502 1 
                                       f32_3 %507 = OpCompositeConstruct %505 %506 %504 
                                                      OpStore %500 %507 
                         read_only Texture2D %509 = OpLoad %508 
                                     sampler %511 = OpLoad %510 
                  read_only Texture2DSampled %514 = OpSampledImage %509 %511 
                                       f32_3 %515 = OpLoad %500 
                                         f32 %516 = OpCompositeExtract %515 2 
                                         f32 %517 = OpImageSampleDrefExplicitLod %514 %515 %516 Lod %6 
                                                      OpStore %226 %517 
                                       f32_4 %519 = OpLoad %378 
                                       f32_2 %520 = OpVectorShuffle %519 %519 2 3 
                                Private f32* %521 = OpAccessChain %179 %22 
                                         f32 %522 = OpLoad %521 
                                         f32 %523 = OpCompositeExtract %520 0 
                                         f32 %524 = OpCompositeExtract %520 1 
                                       f32_3 %525 = OpCompositeConstruct %523 %524 %522 
                                                      OpStore %518 %525 
                         read_only Texture2D %526 = OpLoad %508 
                                     sampler %527 = OpLoad %510 
                  read_only Texture2DSampled %528 = OpSampledImage %526 %527 
                                       f32_3 %529 = OpLoad %518 
                                         f32 %530 = OpCompositeExtract %529 2 
                                         f32 %531 = OpImageSampleDrefExplicitLod %528 %529 %530 Lod %6 
                                                      OpStore %244 %531 
                                         f32 %532 = OpLoad %244 
                                Private f32* %533 = OpAccessChain %354 %70 
                                         f32 %534 = OpLoad %533 
                                         f32 %535 = OpFMul %532 %534 
                                                      OpStore %244 %535 
                                Private f32* %536 = OpAccessChain %354 %32 
                                         f32 %537 = OpLoad %536 
                                         f32 %538 = OpLoad %226 
                                         f32 %539 = OpFMul %537 %538 
                                         f32 %540 = OpLoad %244 
                                         f32 %541 = OpFAdd %539 %540 
                                                      OpStore %226 %541 
                                       f32_4 %542 = OpLoad %319 
                                       f32_4 %543 = OpVectorShuffle %542 %542 0 1 0 1 
                              Uniform f32_4* %544 = OpAccessChain %19 %322 
                                       f32_4 %545 = OpLoad %544 
                                       f32_4 %546 = OpVectorShuffle %545 %545 0 1 0 1 
                                       f32_4 %547 = OpFMul %543 %546 
                                       f32_4 %548 = OpLoad %349 
                                       f32_4 %549 = OpVectorShuffle %548 %548 0 3 1 3 
                                       f32_4 %550 = OpFAdd %547 %549 
                                                      OpStore %319 %550 
                                       f32_4 %552 = OpLoad %319 
                                       f32_2 %553 = OpVectorShuffle %552 %552 0 1 
                                Private f32* %554 = OpAccessChain %179 %22 
                                         f32 %555 = OpLoad %554 
                                         f32 %556 = OpCompositeExtract %553 0 
                                         f32 %557 = OpCompositeExtract %553 1 
                                       f32_3 %558 = OpCompositeConstruct %556 %557 %555 
                                                      OpStore %551 %558 
                         read_only Texture2D %559 = OpLoad %508 
                                     sampler %560 = OpLoad %510 
                  read_only Texture2DSampled %561 = OpSampledImage %559 %560 
                                       f32_3 %562 = OpLoad %551 
                                         f32 %563 = OpCompositeExtract %562 2 
                                         f32 %564 = OpImageSampleDrefExplicitLod %561 %562 %563 Lod %6 
                                                      OpStore %244 %564 
                                Private f32* %565 = OpAccessChain %354 %22 
                                         f32 %566 = OpLoad %565 
                                         f32 %567 = OpLoad %244 
                                         f32 %568 = OpFMul %566 %567 
                                         f32 %569 = OpLoad %226 
                                         f32 %570 = OpFAdd %568 %569 
                                                      OpStore %226 %570 
                                       f32_4 %572 = OpLoad %319 
                                       f32_2 %573 = OpVectorShuffle %572 %572 2 3 
                                Private f32* %574 = OpAccessChain %179 %22 
                                         f32 %575 = OpLoad %574 
                                         f32 %576 = OpCompositeExtract %573 0 
                                         f32 %577 = OpCompositeExtract %573 1 
                                       f32_3 %578 = OpCompositeConstruct %576 %577 %575 
                                                      OpStore %571 %578 
                         read_only Texture2D %579 = OpLoad %508 
                                     sampler %580 = OpLoad %510 
                  read_only Texture2DSampled %581 = OpSampledImage %579 %580 
                                       f32_3 %582 = OpLoad %571 
                                         f32 %583 = OpCompositeExtract %582 2 
                                         f32 %584 = OpImageSampleDrefExplicitLod %581 %582 %583 Lod %6 
                                                      OpStore %244 %584 
                                Private f32* %585 = OpAccessChain %354 %149 
                                         f32 %586 = OpLoad %585 
                                         f32 %587 = OpLoad %244 
                                         f32 %588 = OpFMul %586 %587 
                                         f32 %589 = OpLoad %226 
                                         f32 %590 = OpFAdd %588 %589 
                                                      OpStore %226 %590 
                                Uniform f32* %591 = OpAccessChain %19 %268 %32 
                                         f32 %592 = OpLoad %591 
                                         f32 %593 = OpFNegate %592 
                                         f32 %594 = OpFAdd %593 %74 
                                                      OpStore %244 %594 
                                         f32 %595 = OpLoad %226 
                                         f32 %596 = OpLoad %244 
                                         f32 %597 = OpFMul %595 %596 
                                Uniform f32* %598 = OpAccessChain %19 %268 %32 
                                         f32 %599 = OpLoad %598 
                                         f32 %600 = OpFAdd %597 %599 
                                                      OpStore %226 %600 
                                                      OpBranch %287 
                                             %601 = OpLabel 
                                                      OpStore %226 %74 
                                                      OpBranch %287 
                                             %287 = OpLabel 
                                         f32 %602 = OpLoad %226 
                                         f32 %603 = OpFNegate %602 
                                         f32 %604 = OpFAdd %603 %74 
                                                      OpStore %244 %604 
                                Private f32* %605 = OpAccessChain %9 %32 
                                         f32 %606 = OpLoad %605 
                                         f32 %607 = OpLoad %244 
                                         f32 %608 = OpFMul %606 %607 
                                         f32 %609 = OpLoad %226 
                                         f32 %610 = OpFAdd %608 %609 
                                Private f32* %611 = OpAccessChain %9 %32 
                                                      OpStore %611 %610 
                                Private f32* %612 = OpAccessChain %9 %32 
                                         f32 %613 = OpLoad %612 
                                         f32 %614 = OpLoad %168 
                                         f32 %615 = OpFMul %613 %614 
                                Private f32* %616 = OpAccessChain %9 %32 
                                                      OpStore %616 %615 
                                       f32_3 %617 = OpLoad %9 
                                       f32_3 %618 = OpVectorShuffle %617 %617 0 0 0 
                              Uniform f32_4* %620 = OpAccessChain %19 %619 
                                       f32_4 %621 = OpLoad %620 
                                       f32_3 %622 = OpVectorShuffle %621 %621 0 1 2 
                                       f32_3 %623 = OpFMul %618 %622 
                                       f32_4 %624 = OpLoad %179 
                                       f32_4 %625 = OpVectorShuffle %624 %623 4 5 6 3 
                                                      OpStore %179 %625 
                         read_only Texture2D %627 = OpLoad %626 
                                     sampler %629 = OpLoad %628 
                  read_only Texture2DSampled %630 = OpSampledImage %627 %629 
                                       f32_3 %631 = OpLoad %39 
                                       f32_2 %632 = OpVectorShuffle %631 %631 0 1 
                                       f32_4 %633 = OpImageSampleImplicitLod %630 %632 
                                       f32_3 %634 = OpVectorShuffle %633 %633 0 1 2 
                                       f32_4 %635 = OpLoad %319 
                                       f32_4 %636 = OpVectorShuffle %635 %634 4 5 6 3 
                                                      OpStore %319 %636 
                         read_only Texture2D %638 = OpLoad %637 
                                     sampler %640 = OpLoad %639 
                  read_only Texture2DSampled %641 = OpSampledImage %638 %640 
                                       f32_3 %642 = OpLoad %39 
                                       f32_2 %643 = OpVectorShuffle %642 %642 0 1 
                                       f32_4 %644 = OpImageSampleImplicitLod %641 %643 
                                                      OpStore %349 %644 
                         read_only Texture2D %646 = OpLoad %645 
                                     sampler %648 = OpLoad %647 
                  read_only Texture2DSampled %649 = OpSampledImage %646 %648 
                                       f32_3 %650 = OpLoad %39 
                                       f32_2 %651 = OpVectorShuffle %650 %650 0 1 
                                       f32_4 %652 = OpImageSampleImplicitLod %649 %651 
                                       f32_3 %653 = OpVectorShuffle %652 %652 0 1 2 
                                                      OpStore %39 %653 
                                       f32_3 %654 = OpLoad %39 
                                       f32_3 %657 = OpFMul %654 %656 
                                       f32_3 %660 = OpFAdd %657 %659 
                                                      OpStore %39 %660 
                                       f32_3 %661 = OpLoad %39 
                                       f32_3 %662 = OpLoad %39 
                                         f32 %663 = OpDot %661 %662 
                                Private f32* %664 = OpAccessChain %9 %32 
                                                      OpStore %664 %663 
                                Private f32* %665 = OpAccessChain %9 %32 
                                         f32 %666 = OpLoad %665 
                                         f32 %667 = OpExtInst %1 32 %666 
                                Private f32* %668 = OpAccessChain %9 %32 
                                                      OpStore %668 %667 
                                       f32_3 %669 = OpLoad %9 
                                       f32_3 %670 = OpVectorShuffle %669 %669 0 0 0 
                                       f32_3 %671 = OpLoad %39 
                                       f32_3 %672 = OpFMul %670 %671 
                                                      OpStore %39 %672 
                                       f32_4 %673 = OpLoad %78 
                                       f32_3 %674 = OpVectorShuffle %673 %673 0 1 3 
                              Uniform f32_3* %676 = OpAccessChain %19 %94 
                                       f32_3 %677 = OpLoad %676 
                                       f32_3 %678 = OpFNegate %677 
                                       f32_3 %679 = OpFAdd %674 %678 
                                       f32_4 %680 = OpLoad %78 
                                       f32_4 %681 = OpVectorShuffle %680 %679 4 5 6 3 
                                                      OpStore %78 %681 
                                       f32_4 %682 = OpLoad %78 
                                       f32_3 %683 = OpVectorShuffle %682 %682 0 1 2 
                                       f32_4 %684 = OpLoad %78 
                                       f32_3 %685 = OpVectorShuffle %684 %684 0 1 2 
                                         f32 %686 = OpDot %683 %685 
                                Private f32* %687 = OpAccessChain %9 %32 
                                                      OpStore %687 %686 
                                Private f32* %688 = OpAccessChain %9 %32 
                                         f32 %689 = OpLoad %688 
                                         f32 %690 = OpExtInst %1 32 %689 
                                Private f32* %691 = OpAccessChain %9 %32 
                                                      OpStore %691 %690 
                                       f32_3 %692 = OpLoad %9 
                                       f32_3 %693 = OpVectorShuffle %692 %692 0 0 0 
                                       f32_4 %694 = OpLoad %78 
                                       f32_3 %695 = OpVectorShuffle %694 %694 0 1 2 
                                       f32_3 %696 = OpFMul %693 %695 
                                       f32_4 %697 = OpLoad %78 
                                       f32_4 %698 = OpVectorShuffle %697 %696 4 5 6 3 
                                                      OpStore %78 %698 
                                       f32_4 %699 = OpLoad %349 
                                       f32_4 %700 = OpVectorShuffle %699 %699 3 0 1 2 
                                       f32_4 %701 = OpFNegate %700 
                                       f32_4 %703 = OpFAdd %701 %702 
                                                      OpStore %354 %703 
                                       f32_3 %704 = OpLoad %159 
                                         f32 %705 = OpLoad %172 
                                       f32_3 %706 = OpCompositeConstruct %705 %705 %705 
                                       f32_3 %707 = OpFMul %704 %706 
                                       f32_4 %708 = OpLoad %78 
                                       f32_3 %709 = OpVectorShuffle %708 %708 0 1 2 
                                       f32_3 %710 = OpFNegate %709 
                                       f32_3 %711 = OpFAdd %707 %710 
                                                      OpStore %9 %711 
                                       f32_3 %712 = OpLoad %9 
                                       f32_3 %713 = OpLoad %9 
                                         f32 %714 = OpDot %712 %713 
                                                      OpStore %50 %714 
                                         f32 %715 = OpLoad %50 
                                         f32 %717 = OpExtInst %1 40 %715 %716 
                                                      OpStore %50 %717 
                                         f32 %718 = OpLoad %50 
                                         f32 %719 = OpExtInst %1 32 %718 
                                                      OpStore %50 %719 
                                         f32 %720 = OpLoad %50 
                                       f32_3 %721 = OpCompositeConstruct %720 %720 %720 
                                       f32_3 %722 = OpLoad %9 
                                       f32_3 %723 = OpFMul %721 %722 
                                                      OpStore %9 %723 
                                       f32_3 %724 = OpLoad %39 
                                       f32_4 %725 = OpLoad %78 
                                       f32_3 %726 = OpVectorShuffle %725 %725 0 1 2 
                                       f32_3 %727 = OpFNegate %726 
                                         f32 %728 = OpDot %724 %727 
                                                      OpStore %50 %728 
                                       f32_3 %729 = OpLoad %39 
                                       f32_3 %730 = OpLoad %85 
                                         f32 %731 = OpDot %729 %730 
                                                      OpStore %172 %731 
                                         f32 %732 = OpLoad %172 
                                         f32 %733 = OpExtInst %1 43 %732 %242 %74 
                                                      OpStore %172 %733 
                                       f32_3 %734 = OpLoad %39 
                                       f32_3 %735 = OpLoad %9 
                                         f32 %736 = OpDot %734 %735 
                                Private f32* %737 = OpAccessChain %39 %32 
                                                      OpStore %737 %736 
                                Private f32* %738 = OpAccessChain %39 %32 
                                         f32 %739 = OpLoad %738 
                                         f32 %740 = OpExtInst %1 43 %739 %242 %74 
                                Private f32* %741 = OpAccessChain %39 %32 
                                                      OpStore %741 %740 
                                       f32_3 %742 = OpLoad %85 
                                       f32_3 %743 = OpLoad %9 
                                         f32 %744 = OpDot %742 %743 
                                Private f32* %745 = OpAccessChain %9 %32 
                                                      OpStore %745 %744 
                                Private f32* %746 = OpAccessChain %9 %32 
                                         f32 %747 = OpLoad %746 
                                         f32 %748 = OpExtInst %1 43 %747 %242 %74 
                                Private f32* %749 = OpAccessChain %9 %32 
                                                      OpStore %749 %748 
                                Private f32* %750 = OpAccessChain %9 %32 
                                         f32 %751 = OpLoad %750 
                                Private f32* %752 = OpAccessChain %9 %32 
                                         f32 %753 = OpLoad %752 
                                         f32 %754 = OpFMul %751 %753 
                                Private f32* %755 = OpAccessChain %159 %32 
                                                      OpStore %755 %754 
                                       f32_3 %756 = OpLoad %159 
                                       f32_2 %757 = OpVectorShuffle %756 %756 0 0 
                                       f32_4 %758 = OpLoad %354 
                                       f32_2 %759 = OpVectorShuffle %758 %758 0 0 
                                         f32 %760 = OpDot %757 %759 
                                Private f32* %761 = OpAccessChain %159 %32 
                                                      OpStore %761 %760 
                                Private f32* %762 = OpAccessChain %159 %32 
                                         f32 %763 = OpLoad %762 
                                         f32 %765 = OpFAdd %763 %764 
                                Private f32* %766 = OpAccessChain %159 %32 
                                                      OpStore %766 %765 
                                         f32 %768 = OpLoad %172 
                                         f32 %769 = OpFNegate %768 
                                         f32 %770 = OpFAdd %769 %74 
                                                      OpStore %767 %770 
                                         f32 %772 = OpLoad %767 
                                         f32 %773 = OpLoad %767 
                                         f32 %774 = OpFMul %772 %773 
                                                      OpStore %771 %774 
                                         f32 %775 = OpLoad %771 
                                         f32 %776 = OpLoad %771 
                                         f32 %777 = OpFMul %775 %776 
                                                      OpStore %771 %777 
                                         f32 %778 = OpLoad %767 
                                         f32 %779 = OpLoad %771 
                                         f32 %780 = OpFMul %778 %779 
                                                      OpStore %767 %780 
                                Private f32* %781 = OpAccessChain %159 %32 
                                         f32 %782 = OpLoad %781 
                                         f32 %783 = OpLoad %767 
                                         f32 %784 = OpFMul %782 %783 
                                         f32 %785 = OpFAdd %784 %74 
                                                      OpStore %767 %785 
                                         f32 %786 = OpLoad %50 
                                         f32 %787 = OpExtInst %1 4 %786 
                                         f32 %788 = OpFNegate %787 
                                         f32 %789 = OpFAdd %788 %74 
                                                      OpStore %771 %789 
                                         f32 %790 = OpLoad %771 
                                         f32 %791 = OpLoad %771 
                                         f32 %792 = OpFMul %790 %791 
                                                      OpStore %168 %792 
                                         f32 %793 = OpLoad %168 
                                         f32 %794 = OpLoad %168 
                                         f32 %795 = OpFMul %793 %794 
                                                      OpStore %168 %795 
                                         f32 %796 = OpLoad %771 
                                         f32 %797 = OpLoad %168 
                                         f32 %798 = OpFMul %796 %797 
                                                      OpStore %771 %798 
                                Private f32* %799 = OpAccessChain %159 %32 
                                         f32 %800 = OpLoad %799 
                                         f32 %801 = OpLoad %771 
                                         f32 %802 = OpFMul %800 %801 
                                         f32 %803 = OpFAdd %802 %74 
                                Private f32* %804 = OpAccessChain %159 %32 
                                                      OpStore %804 %803 
                                Private f32* %805 = OpAccessChain %159 %32 
                                         f32 %806 = OpLoad %805 
                                         f32 %807 = OpLoad %767 
                                         f32 %808 = OpFMul %806 %807 
                                Private f32* %809 = OpAccessChain %159 %32 
                                                      OpStore %809 %808 
                                Private f32* %810 = OpAccessChain %354 %32 
                                         f32 %811 = OpLoad %810 
                                Private f32* %812 = OpAccessChain %354 %32 
                                         f32 %813 = OpLoad %812 
                                         f32 %814 = OpFMul %811 %813 
                                                      OpStore %767 %814 
                                         f32 %815 = OpLoad %767 
                                         f32 %817 = OpExtInst %1 40 %815 %816 
                                                      OpStore %767 %817 
                                         f32 %818 = OpLoad %767 
                                         f32 %819 = OpFNegate %818 
                                         f32 %820 = OpFAdd %819 %74 
                                                      OpStore %771 %820 
                                         f32 %821 = OpLoad %50 
                                         f32 %822 = OpExtInst %1 4 %821 
                                         f32 %823 = OpLoad %771 
                                         f32 %824 = OpFMul %822 %823 
                                         f32 %825 = OpLoad %767 
                                         f32 %826 = OpFAdd %824 %825 
                                                      OpStore %168 %826 
                                         f32 %827 = OpLoad %172 
                                         f32 %828 = OpLoad %771 
                                         f32 %829 = OpFMul %827 %828 
                                         f32 %830 = OpLoad %767 
                                         f32 %831 = OpFAdd %829 %830 
                                                      OpStore %771 %831 
                                         f32 %832 = OpLoad %50 
                                         f32 %833 = OpExtInst %1 4 %832 
                                         f32 %834 = OpLoad %771 
                                         f32 %835 = OpFMul %833 %834 
                                                      OpStore %50 %835 
                                         f32 %836 = OpLoad %172 
                                         f32 %837 = OpLoad %168 
                                         f32 %838 = OpFMul %836 %837 
                                         f32 %839 = OpLoad %50 
                                         f32 %840 = OpFAdd %838 %839 
                                                      OpStore %50 %840 
                                         f32 %841 = OpLoad %50 
                                         f32 %843 = OpFAdd %841 %842 
                                                      OpStore %50 %843 
                                         f32 %844 = OpLoad %50 
                                         f32 %845 = OpFDiv %327 %844 
                                                      OpStore %50 %845 
                                         f32 %846 = OpLoad %767 
                                         f32 %847 = OpLoad %767 
                                         f32 %848 = OpFMul %846 %847 
                                                      OpStore %767 %848 
                                Private f32* %849 = OpAccessChain %39 %32 
                                         f32 %850 = OpLoad %849 
                                         f32 %851 = OpLoad %767 
                                         f32 %852 = OpFMul %850 %851 
                                Private f32* %853 = OpAccessChain %39 %32 
                                         f32 %854 = OpLoad %853 
                                         f32 %855 = OpFNegate %854 
                                         f32 %856 = OpFAdd %852 %855 
                                                      OpStore %771 %856 
                                         f32 %857 = OpLoad %771 
                                Private f32* %858 = OpAccessChain %39 %32 
                                         f32 %859 = OpLoad %858 
                                         f32 %860 = OpFMul %857 %859 
                                         f32 %861 = OpFAdd %860 %74 
                                Private f32* %862 = OpAccessChain %39 %32 
                                                      OpStore %862 %861 
                                         f32 %863 = OpLoad %767 
                                         f32 %865 = OpFMul %863 %864 
                                                      OpStore %767 %865 
                                Private f32* %866 = OpAccessChain %39 %32 
                                         f32 %867 = OpLoad %866 
                                Private f32* %868 = OpAccessChain %39 %32 
                                         f32 %869 = OpLoad %868 
                                         f32 %870 = OpFMul %867 %869 
                                         f32 %872 = OpFAdd %870 %871 
                                Private f32* %873 = OpAccessChain %39 %32 
                                                      OpStore %873 %872 
                                         f32 %874 = OpLoad %767 
                                Private f32* %875 = OpAccessChain %39 %32 
                                         f32 %876 = OpLoad %875 
                                         f32 %877 = OpFDiv %874 %876 
                                                      OpStore %767 %877 
                                         f32 %878 = OpLoad %767 
                                         f32 %879 = OpLoad %50 
                                         f32 %880 = OpFMul %878 %879 
                                Private f32* %881 = OpAccessChain %159 %70 
                                                      OpStore %881 %880 
                                         f32 %882 = OpLoad %172 
                                       f32_2 %883 = OpCompositeConstruct %882 %882 
                                       f32_3 %884 = OpLoad %159 
                                       f32_2 %885 = OpVectorShuffle %884 %884 0 1 
                                       f32_2 %886 = OpFMul %883 %885 
                                       f32_3 %887 = OpLoad %159 
                                       f32_3 %888 = OpVectorShuffle %887 %886 3 4 2 
                                                      OpStore %159 %888 
                                Private f32* %889 = OpAccessChain %159 %70 
                                         f32 %890 = OpLoad %889 
                                         f32 %892 = OpFMul %890 %891 
                                                      OpStore %767 %892 
                                         f32 %893 = OpLoad %767 
                                         f32 %894 = OpExtInst %1 40 %893 %242 
                                                      OpStore %767 %894 
                                       f32_4 %895 = OpLoad %349 
                                       f32_3 %896 = OpVectorShuffle %895 %895 0 1 2 
                                       f32_4 %897 = OpLoad %349 
                                       f32_3 %898 = OpVectorShuffle %897 %897 0 1 2 
                                         f32 %899 = OpDot %896 %898 
                                                      OpStore %50 %899 
                                         f32 %901 = OpLoad %50 
                                        bool %902 = OpFOrdNotEqual %901 %242 
                                                      OpStore %900 %902 
                                        bool %903 = OpLoad %900 
                                         f32 %904 = OpSelect %903 %74 %242 
                                                      OpStore %50 %904 
                                         f32 %905 = OpLoad %50 
                                         f32 %906 = OpLoad %767 
                                         f32 %907 = OpFMul %905 %906 
                                                      OpStore %767 %907 
                                       f32_3 %908 = OpLoad %159 
                                       f32_3 %909 = OpVectorShuffle %908 %908 0 0 0 
                                       f32_4 %910 = OpLoad %179 
                                       f32_3 %911 = OpVectorShuffle %910 %910 0 1 2 
                                       f32_3 %912 = OpFMul %909 %911 
                                                      OpStore %39 %912 
                                       f32_4 %913 = OpLoad %179 
                                       f32_3 %914 = OpVectorShuffle %913 %913 0 1 2 
                                         f32 %915 = OpLoad %767 
                                       f32_3 %916 = OpCompositeConstruct %915 %915 %915 
                                       f32_3 %917 = OpFMul %914 %916 
                                                      OpStore %159 %917 
                                Private f32* %918 = OpAccessChain %9 %32 
                                         f32 %919 = OpLoad %918 
                                         f32 %920 = OpFNegate %919 
                                         f32 %921 = OpFAdd %920 %74 
                                Private f32* %922 = OpAccessChain %9 %32 
                                                      OpStore %922 %921 
                                Private f32* %923 = OpAccessChain %9 %32 
                                         f32 %924 = OpLoad %923 
                                Private f32* %925 = OpAccessChain %9 %32 
                                         f32 %926 = OpLoad %925 
                                         f32 %927 = OpFMul %924 %926 
                                                      OpStore %172 %927 
                                         f32 %928 = OpLoad %172 
                                         f32 %929 = OpLoad %172 
                                         f32 %930 = OpFMul %928 %929 
                                                      OpStore %172 %930 
                                Private f32* %931 = OpAccessChain %9 %32 
                                         f32 %932 = OpLoad %931 
                                         f32 %933 = OpLoad %172 
                                         f32 %934 = OpFMul %932 %933 
                                Private f32* %935 = OpAccessChain %9 %32 
                                                      OpStore %935 %934 
                                       f32_4 %936 = OpLoad %354 
                                       f32_3 %937 = OpVectorShuffle %936 %936 1 2 3 
                                       f32_3 %938 = OpLoad %9 
                                       f32_3 %939 = OpVectorShuffle %938 %938 0 0 0 
                                       f32_3 %940 = OpFMul %937 %939 
                                       f32_4 %941 = OpLoad %349 
                                       f32_3 %942 = OpVectorShuffle %941 %941 0 1 2 
                                       f32_3 %943 = OpFAdd %940 %942 
                                       f32_4 %944 = OpLoad %78 
                                       f32_4 %945 = OpVectorShuffle %944 %943 4 5 6 3 
                                                      OpStore %78 %945 
                                       f32_3 %946 = OpLoad %159 
                                       f32_4 %947 = OpLoad %78 
                                       f32_3 %948 = OpVectorShuffle %947 %947 0 1 2 
                                       f32_3 %949 = OpFMul %946 %948 
                                                      OpStore %9 %949 
                                       f32_4 %952 = OpLoad %319 
                                       f32_3 %953 = OpVectorShuffle %952 %952 0 1 2 
                                       f32_3 %954 = OpLoad %39 
                                       f32_3 %955 = OpFMul %953 %954 
                                       f32_3 %956 = OpLoad %9 
                                       f32_3 %957 = OpFAdd %955 %956 
                                       f32_4 %958 = OpLoad %951 
                                       f32_4 %959 = OpVectorShuffle %958 %957 4 5 6 3 
                                                      OpStore %951 %959 
                                 Output f32* %961 = OpAccessChain %951 %149 
                                                      OpStore %961 %74 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "UNITY_HDR_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "UNITY_HDR_ON" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightColor;
UNITY_LOCATION(0) uniform  sampler2D _CameraDepthTexture;
UNITY_LOCATION(1) uniform  sampler2D _ShadowMapTexture;
UNITY_LOCATION(2) uniform  sampler2D _CameraGBufferTexture0;
UNITY_LOCATION(3) uniform  sampler2D _CameraGBufferTexture1;
UNITY_LOCATION(4) uniform  sampler2D _CameraGBufferTexture2;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec3 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
vec3 u_xlat6;
float u_xlat12;
float u_xlat13;
bool u_xlatb13;
float u_xlat18;
float u_xlat19;
float u_xlat20;
float u_xlat21;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat2 = texture(_CameraDepthTexture, u_xlat1.xy);
    u_xlat18 = _ZBufferParams.x * u_xlat2.x + _ZBufferParams.y;
    u_xlat18 = float(1.0) / u_xlat18;
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.xyw = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat2.xyw, u_xlat2.xyw);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat18 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat6.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat2.xyz = (-u_xlat3.xyz) * u_xlat6.xxx + (-_LightDir.xyz);
    u_xlat6.xyz = u_xlat6.xxx * u_xlat3.xyz;
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat13 = max(u_xlat13, 0.00100000005);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
    u_xlat3 = texture(_CameraGBufferTexture2, u_xlat1.xy);
    u_xlat3.xyz = u_xlat3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat13 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
    u_xlat13 = dot(u_xlat3.xyz, u_xlat2.xyz);
    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
    u_xlat19 = dot((-_LightDir.xyz), u_xlat2.xyz);
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
    u_xlat2 = texture(_CameraGBufferTexture1, u_xlat1.xy);
    u_xlat4 = (-u_xlat2.wxyz) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat20 = u_xlat4.x * u_xlat4.x;
    u_xlat20 = max(u_xlat20, 0.00200000009);
    u_xlat21 = u_xlat20 * u_xlat20;
    u_xlat5.x = u_xlat13 * u_xlat21 + (-u_xlat13);
    u_xlat13 = u_xlat5.x * u_xlat13 + 1.0;
    u_xlat13 = u_xlat13 * u_xlat13 + 1.00000001e-07;
    u_xlat21 = u_xlat21 * 0.318309873;
    u_xlat13 = u_xlat21 / u_xlat13;
    u_xlat6.x = dot(u_xlat3.xyz, (-u_xlat6.xyz));
    u_xlat12 = dot(u_xlat3.xyz, (-_LightDir.xyz));
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
    u_xlat18 = (-u_xlat20) + 1.0;
    u_xlat3.x = abs(u_xlat6.x) * u_xlat18 + u_xlat20;
    u_xlat18 = u_xlat12 * u_xlat18 + u_xlat20;
    u_xlat18 = u_xlat18 * abs(u_xlat6.x);
    u_xlat6.x = -abs(u_xlat6.x) + 1.0;
    u_xlat18 = u_xlat12 * u_xlat3.x + u_xlat18;
    u_xlat18 = u_xlat18 + 9.99999975e-06;
    u_xlat18 = 0.5 / u_xlat18;
    u_xlat18 = u_xlat13 * u_xlat18;
    u_xlat18 = u_xlat18 * 3.14159274;
    u_xlat18 = u_xlat12 * u_xlat18;
    u_xlat18 = max(u_xlat18, 0.0);
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlatb13 = u_xlat13!=0.0;
    u_xlat13 = u_xlatb13 ? 1.0 : float(0.0);
    u_xlat18 = u_xlat18 * u_xlat13;
    u_xlat3 = texture(_ShadowMapTexture, u_xlat1.xy);
    u_xlat5 = texture(_CameraGBufferTexture0, u_xlat1.xy);
    u_xlat1.x = (-u_xlat3.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat1.x + u_xlat3.x;
    u_xlat1.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat3.xyz = vec3(u_xlat18) * u_xlat1.xyz;
    u_xlat0.x = (-u_xlat19) + 1.0;
    u_xlat18 = u_xlat19 * u_xlat19;
    u_xlat18 = dot(vec2(u_xlat18), u_xlat4.xx);
    u_xlat18 = u_xlat18 + -0.5;
    u_xlat19 = u_xlat0.x * u_xlat0.x;
    u_xlat19 = u_xlat19 * u_xlat19;
    u_xlat0.x = u_xlat0.x * u_xlat19;
    u_xlat2.xyz = u_xlat4.yzw * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz * u_xlat3.xyz;
    u_xlat0.x = u_xlat6.x * u_xlat6.x;
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat0.x = u_xlat6.x * u_xlat0.x;
    u_xlat0.x = u_xlat18 * u_xlat0.x + 1.0;
    u_xlat6.x = (-u_xlat12) + 1.0;
    u_xlat19 = u_xlat6.x * u_xlat6.x;
    u_xlat19 = u_xlat19 * u_xlat19;
    u_xlat6.x = u_xlat6.x * u_xlat19;
    u_xlat6.x = u_xlat18 * u_xlat6.x + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat6.x;
    u_xlat0.x = u_xlat12 * u_xlat0.x;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
    SV_Target0.xyz = u_xlat5.xyz * u_xlat0.xyz + u_xlat2.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "UNITY_HDR_ON" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 192
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %80 %102 %169 %175 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpMemberDecorate %78 0 BuiltIn 78 
                                                      OpMemberDecorate %78 1 BuiltIn 78 
                                                      OpMemberDecorate %78 2 BuiltIn 78 
                                                      OpDecorate %78 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 102 
                                                      OpDecorate %169 Location 169 
                                                      OpDecorate vs_TEXCOORD1 Location 175 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %16 %17 %18 %6 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 1 
                                              %24 = OpTypePointer Uniform %7 
                                          i32 %28 = OpConstant 0 
                                          i32 %36 = OpConstant 2 
                                          i32 %45 = OpConstant 3 
                               Private f32_4* %49 = OpVariable Private 
                                          u32 %76 = OpConstant 1 
                                              %77 = OpTypeArray %6 %76 
                                              %78 = OpTypeStruct %7 %6 %77 
                                              %79 = OpTypePointer Output %78 
         Output struct {f32_4; f32; f32[1];}* %80 = OpVariable Output 
                                              %82 = OpTypePointer Output %7 
                                              %84 = OpTypePointer Private %6 
                                          u32 %87 = OpConstant 0 
                                              %88 = OpTypePointer Uniform %6 
                               Private f32_4* %93 = OpVariable Private 
                                              %94 = OpTypeVector %6 3 
                                          f32 %97 = OpConstant 3.674022E-40 
                                        f32_3 %98 = OpConstantComposite %97 %97 %97 
                       Output f32_4* vs_TEXCOORD0 = OpVariable Output 
                                             %103 = OpTypeVector %6 2 
                                         f32 %158 = OpConstant 3.674022E-40 
                                         f32 %159 = OpConstant 3.674022E-40 
                                       f32_3 %160 = OpConstantComposite %158 %158 %159 
                                             %168 = OpTypePointer Input %94 
                                Input f32_3* %169 = OpVariable Input 
                                             %174 = OpTypePointer Output %94 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                                         i32 %176 = OpConstant 4 
                                             %186 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %25 = OpAccessChain %21 %23 %23 
                                        f32_4 %26 = OpLoad %25 
                                        f32_4 %27 = OpFMul %13 %26 
                                                      OpStore %9 %27 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %28 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %44 = OpLoad %9 
                               Uniform f32_4* %46 = OpAccessChain %21 %23 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_4 %48 = OpFAdd %44 %47 
                                                      OpStore %9 %48 
                                        f32_4 %50 = OpLoad %9 
                                        f32_4 %51 = OpVectorShuffle %50 %50 1 1 1 1 
                               Uniform f32_4* %52 = OpAccessChain %21 %45 %23 
                                        f32_4 %53 = OpLoad %52 
                                        f32_4 %54 = OpFMul %51 %53 
                                                      OpStore %49 %54 
                               Uniform f32_4* %55 = OpAccessChain %21 %45 %28 
                                        f32_4 %56 = OpLoad %55 
                                        f32_4 %57 = OpLoad %9 
                                        f32_4 %58 = OpVectorShuffle %57 %57 0 0 0 0 
                                        f32_4 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %49 
                                        f32_4 %61 = OpFAdd %59 %60 
                                                      OpStore %49 %61 
                               Uniform f32_4* %62 = OpAccessChain %21 %45 %36 
                                        f32_4 %63 = OpLoad %62 
                                        f32_4 %64 = OpLoad %9 
                                        f32_4 %65 = OpVectorShuffle %64 %64 2 2 2 2 
                                        f32_4 %66 = OpFMul %63 %65 
                                        f32_4 %67 = OpLoad %49 
                                        f32_4 %68 = OpFAdd %66 %67 
                                                      OpStore %49 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %45 %45 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %9 
                                        f32_4 %72 = OpVectorShuffle %71 %71 3 3 3 3 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %49 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %49 %75 
                                        f32_4 %81 = OpLoad %49 
                                Output f32_4* %83 = OpAccessChain %80 %28 
                                                      OpStore %83 %81 
                                 Private f32* %85 = OpAccessChain %49 %76 
                                          f32 %86 = OpLoad %85 
                                 Uniform f32* %89 = OpAccessChain %21 %28 %87 
                                          f32 %90 = OpLoad %89 
                                          f32 %91 = OpFMul %86 %90 
                                 Private f32* %92 = OpAccessChain %49 %76 
                                                      OpStore %92 %91 
                                        f32_4 %95 = OpLoad %49 
                                        f32_3 %96 = OpVectorShuffle %95 %95 0 3 1 
                                        f32_3 %99 = OpFMul %96 %98 
                                       f32_4 %100 = OpLoad %93 
                                       f32_4 %101 = OpVectorShuffle %100 %99 4 1 5 6 
                                                      OpStore %93 %101 
                                       f32_4 %104 = OpLoad %49 
                                       f32_2 %105 = OpVectorShuffle %104 %104 2 3 
                                       f32_4 %106 = OpLoad vs_TEXCOORD0 
                                       f32_4 %107 = OpVectorShuffle %106 %105 0 1 4 5 
                                                      OpStore vs_TEXCOORD0 %107 
                                       f32_4 %108 = OpLoad %93 
                                       f32_2 %109 = OpVectorShuffle %108 %108 2 2 
                                       f32_4 %110 = OpLoad %93 
                                       f32_2 %111 = OpVectorShuffle %110 %110 0 3 
                                       f32_2 %112 = OpFAdd %109 %111 
                                       f32_4 %113 = OpLoad vs_TEXCOORD0 
                                       f32_4 %114 = OpVectorShuffle %113 %112 4 5 2 3 
                                                      OpStore vs_TEXCOORD0 %114 
                                       f32_4 %115 = OpLoad %9 
                                       f32_3 %116 = OpVectorShuffle %115 %115 1 1 1 
                              Uniform f32_4* %117 = OpAccessChain %21 %36 %23 
                                       f32_4 %118 = OpLoad %117 
                                       f32_3 %119 = OpVectorShuffle %118 %118 0 1 2 
                                       f32_3 %120 = OpFMul %116 %119 
                                       f32_4 %121 = OpLoad %49 
                                       f32_4 %122 = OpVectorShuffle %121 %120 4 5 6 3 
                                                      OpStore %49 %122 
                              Uniform f32_4* %123 = OpAccessChain %21 %36 %28 
                                       f32_4 %124 = OpLoad %123 
                                       f32_3 %125 = OpVectorShuffle %124 %124 0 1 2 
                                       f32_4 %126 = OpLoad %9 
                                       f32_3 %127 = OpVectorShuffle %126 %126 0 0 0 
                                       f32_3 %128 = OpFMul %125 %127 
                                       f32_4 %129 = OpLoad %49 
                                       f32_3 %130 = OpVectorShuffle %129 %129 0 1 2 
                                       f32_3 %131 = OpFAdd %128 %130 
                                       f32_4 %132 = OpLoad %49 
                                       f32_4 %133 = OpVectorShuffle %132 %131 4 5 6 3 
                                                      OpStore %49 %133 
                              Uniform f32_4* %134 = OpAccessChain %21 %36 %36 
                                       f32_4 %135 = OpLoad %134 
                                       f32_3 %136 = OpVectorShuffle %135 %135 0 1 2 
                                       f32_4 %137 = OpLoad %9 
                                       f32_3 %138 = OpVectorShuffle %137 %137 2 2 2 
                                       f32_3 %139 = OpFMul %136 %138 
                                       f32_4 %140 = OpLoad %49 
                                       f32_3 %141 = OpVectorShuffle %140 %140 0 1 2 
                                       f32_3 %142 = OpFAdd %139 %141 
                                       f32_4 %143 = OpLoad %9 
                                       f32_4 %144 = OpVectorShuffle %143 %142 4 5 6 3 
                                                      OpStore %9 %144 
                              Uniform f32_4* %145 = OpAccessChain %21 %36 %45 
                                       f32_4 %146 = OpLoad %145 
                                       f32_3 %147 = OpVectorShuffle %146 %146 0 1 2 
                                       f32_4 %148 = OpLoad %9 
                                       f32_3 %149 = OpVectorShuffle %148 %148 3 3 3 
                                       f32_3 %150 = OpFMul %147 %149 
                                       f32_4 %151 = OpLoad %9 
                                       f32_3 %152 = OpVectorShuffle %151 %151 0 1 2 
                                       f32_3 %153 = OpFAdd %150 %152 
                                       f32_4 %154 = OpLoad %9 
                                       f32_4 %155 = OpVectorShuffle %154 %153 4 5 6 3 
                                                      OpStore %9 %155 
                                       f32_4 %156 = OpLoad %9 
                                       f32_3 %157 = OpVectorShuffle %156 %156 0 1 2 
                                       f32_3 %161 = OpFMul %157 %160 
                                       f32_4 %162 = OpLoad %49 
                                       f32_4 %163 = OpVectorShuffle %162 %161 4 5 6 3 
                                                      OpStore %49 %163 
                                       f32_4 %164 = OpLoad %9 
                                       f32_3 %165 = OpVectorShuffle %164 %164 0 1 2 
                                       f32_3 %166 = OpFNegate %165 
                                       f32_3 %167 = OpFMul %166 %160 
                                       f32_3 %170 = OpLoad %169 
                                       f32_3 %171 = OpFAdd %167 %170 
                                       f32_4 %172 = OpLoad %9 
                                       f32_4 %173 = OpVectorShuffle %172 %171 4 5 6 3 
                                                      OpStore %9 %173 
                                Uniform f32* %177 = OpAccessChain %21 %176 
                                         f32 %178 = OpLoad %177 
                                       f32_3 %179 = OpCompositeConstruct %178 %178 %178 
                                       f32_4 %180 = OpLoad %9 
                                       f32_3 %181 = OpVectorShuffle %180 %180 0 1 2 
                                       f32_3 %182 = OpFMul %179 %181 
                                       f32_4 %183 = OpLoad %49 
                                       f32_3 %184 = OpVectorShuffle %183 %183 0 1 2 
                                       f32_3 %185 = OpFAdd %182 %184 
                                                      OpStore vs_TEXCOORD1 %185 
                                 Output f32* %187 = OpAccessChain %80 %28 %76 
                                         f32 %188 = OpLoad %187 
                                         f32 %189 = OpFNegate %188 
                                 Output f32* %190 = OpAccessChain %80 %28 %76 
                                                      OpStore %190 %189 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 557
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %24 %38 %545 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpDecorate %13 ArrayStride 13 
                                                      OpMemberDecorate %14 0 Offset 14 
                                                      OpMemberDecorate %14 1 Offset 14 
                                                      OpMemberDecorate %14 2 Offset 14 
                                                      OpMemberDecorate %14 3 Offset 14 
                                                      OpMemberDecorate %14 4 Offset 14 
                                                      OpMemberDecorate %14 5 Offset 14 
                                                      OpMemberDecorate %14 6 Offset 14 
                                                      OpMemberDecorate %14 7 Offset 14 
                                                      OpDecorate %14 Block 
                                                      OpDecorate %16 DescriptorSet 16 
                                                      OpDecorate %16 Binding 16 
                                                      OpDecorate vs_TEXCOORD1 Location 24 
                                                      OpDecorate vs_TEXCOORD0 Location 38 
                                                      OpDecorate %50 DescriptorSet 50 
                                                      OpDecorate %50 Binding 50 
                                                      OpDecorate %54 DescriptorSet 54 
                                                      OpDecorate %54 Binding 54 
                                                      OpDecorate %226 DescriptorSet 226 
                                                      OpDecorate %226 Binding 226 
                                                      OpDecorate %228 DescriptorSet 228 
                                                      OpDecorate %228 Binding 228 
                                                      OpDecorate %267 DescriptorSet 267 
                                                      OpDecorate %267 Binding 267 
                                                      OpDecorate %269 DescriptorSet 269 
                                                      OpDecorate %269 Binding 269 
                                                      OpDecorate %397 DescriptorSet 397 
                                                      OpDecorate %397 Binding 397 
                                                      OpDecorate %399 DescriptorSet 399 
                                                      OpDecorate %399 Binding 399 
                                                      OpDecorate %406 DescriptorSet 406 
                                                      OpDecorate %406 Binding 406 
                                                      OpDecorate %408 DescriptorSet 408 
                                                      OpDecorate %408 Binding 408 
                                                      OpDecorate %545 Location 545 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 3 
                                               %8 = OpTypePointer Private %7 
                                Private f32_3* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 4 
                                              %11 = OpTypeInt 32 0 
                                          u32 %12 = OpConstant 4 
                                              %13 = OpTypeArray %10 %12 
                                              %14 = OpTypeStruct %7 %10 %10 %13 %10 %10 %10 %10 
                                              %15 = OpTypePointer Uniform %14 
Uniform struct {f32_3; f32_4; f32_4; f32_4[4]; f32_4; f32_4; f32_4; f32_4;}* %16 = OpVariable Uniform 
                                              %17 = OpTypeInt 32 1 
                                          i32 %18 = OpConstant 1 
                                          u32 %19 = OpConstant 2 
                                              %20 = OpTypePointer Uniform %6 
                                              %23 = OpTypePointer Input %7 
                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                                              %25 = OpTypePointer Input %6 
                                          u32 %29 = OpConstant 0 
                                              %30 = OpTypePointer Private %6 
                               Private f32_3* %36 = OpVariable Private 
                                              %37 = OpTypePointer Input %10 
                        Input f32_4* vs_TEXCOORD0 = OpVariable Input 
                                              %39 = OpTypeVector %6 2 
                                 Private f32* %47 = OpVariable Private 
                                              %48 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %49 = OpTypePointer UniformConstant %48 
         UniformConstant read_only Texture2D* %50 = OpVariable UniformConstant 
                                              %52 = OpTypeSampler 
                                              %53 = OpTypePointer UniformConstant %52 
                     UniformConstant sampler* %54 = OpVariable UniformConstant 
                                              %56 = OpTypeSampledImage %48 
                                          i32 %62 = OpConstant 2 
                                          u32 %67 = OpConstant 1 
                                          f32 %71 = OpConstant 3.674022E-40 
                                              %74 = OpTypePointer Private %10 
                               Private f32_4* %75 = OpVariable Private 
                               Private f32_3* %82 = OpVariable Private 
                                          i32 %85 = OpConstant 3 
                                              %86 = OpTypePointer Uniform %10 
                                          i32 %91 = OpConstant 0 
                                             %123 = OpTypePointer Uniform %7 
                                         i32 %130 = OpConstant 5 
                                         u32 %157 = OpConstant 3 
                                         i32 %169 = OpConstant 4 
                                         f32 %179 = OpConstant 3.674022E-40 
                              Private f32_3* %182 = OpVariable Private 
                                         i32 %196 = OpConstant 6 
                                Private f32* %208 = OpVariable Private 
                                         f32 %215 = OpConstant 3.674022E-40 
        UniformConstant read_only Texture2D* %226 = OpVariable UniformConstant 
                    UniformConstant sampler* %228 = OpVariable UniformConstant 
                                         f32 %236 = OpConstant 3.674022E-40 
                                       f32_3 %237 = OpConstantComposite %236 %236 %236 
                                         f32 %239 = OpConstant 3.674022E-40 
                                       f32_3 %240 = OpConstantComposite %239 %239 %239 
                                Private f32* %257 = OpVariable Private 
        UniformConstant read_only Texture2D* %267 = OpVariable UniformConstant 
                    UniformConstant sampler* %269 = OpVariable UniformConstant 
                              Private f32_4* %275 = OpVariable Private 
                                       f32_4 %279 = OpConstantComposite %71 %71 %71 %71 
                                Private f32* %281 = OpVariable Private 
                                         f32 %288 = OpConstant 3.674022E-40 
                                Private f32* %290 = OpVariable Private 
                              Private f32_3* %294 = OpVariable Private 
                                         f32 %310 = OpConstant 3.674022E-40 
                                         f32 %313 = OpConstant 3.674022E-40 
                                Private f32* %323 = OpVariable Private 
                                         f32 %366 = OpConstant 3.674022E-40 
                                         f32 %368 = OpConstant 3.674022E-40 
                                         f32 %378 = OpConstant 3.674022E-40 
                                             %387 = OpTypeBool 
                                             %388 = OpTypePointer Private %387 
                               Private bool* %389 = OpVariable Private 
        UniformConstant read_only Texture2D* %397 = OpVariable UniformConstant 
                    UniformConstant sampler* %399 = OpVariable UniformConstant 
        UniformConstant read_only Texture2D* %406 = OpVariable UniformConstant 
                    UniformConstant sampler* %408 = OpVariable UniformConstant 
                                         i32 %429 = OpConstant 7 
                                         f32 %451 = OpConstant 3.674022E-40 
                                             %544 = OpTypePointer Output %10 
                               Output f32_4* %545 = OpVariable Output 
                                             %554 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                 Uniform f32* %21 = OpAccessChain %16 %18 %19 
                                          f32 %22 = OpLoad %21 
                                   Input f32* %26 = OpAccessChain vs_TEXCOORD1 %19 
                                          f32 %27 = OpLoad %26 
                                          f32 %28 = OpFDiv %22 %27 
                                 Private f32* %31 = OpAccessChain %9 %29 
                                                      OpStore %31 %28 
                                        f32_3 %32 = OpLoad %9 
                                        f32_3 %33 = OpVectorShuffle %32 %32 0 0 0 
                                        f32_3 %34 = OpLoad vs_TEXCOORD1 
                                        f32_3 %35 = OpFMul %33 %34 
                                                      OpStore %9 %35 
                                        f32_4 %40 = OpLoad vs_TEXCOORD0 
                                        f32_2 %41 = OpVectorShuffle %40 %40 0 1 
                                        f32_4 %42 = OpLoad vs_TEXCOORD0 
                                        f32_2 %43 = OpVectorShuffle %42 %42 3 3 
                                        f32_2 %44 = OpFDiv %41 %43 
                                        f32_3 %45 = OpLoad %36 
                                        f32_3 %46 = OpVectorShuffle %45 %44 3 4 2 
                                                      OpStore %36 %46 
                          read_only Texture2D %51 = OpLoad %50 
                                      sampler %55 = OpLoad %54 
                   read_only Texture2DSampled %57 = OpSampledImage %51 %55 
                                        f32_3 %58 = OpLoad %36 
                                        f32_2 %59 = OpVectorShuffle %58 %58 0 1 
                                        f32_4 %60 = OpImageSampleImplicitLod %57 %59 
                                          f32 %61 = OpCompositeExtract %60 0 
                                                      OpStore %47 %61 
                                 Uniform f32* %63 = OpAccessChain %16 %62 %29 
                                          f32 %64 = OpLoad %63 
                                          f32 %65 = OpLoad %47 
                                          f32 %66 = OpFMul %64 %65 
                                 Uniform f32* %68 = OpAccessChain %16 %62 %67 
                                          f32 %69 = OpLoad %68 
                                          f32 %70 = OpFAdd %66 %69 
                                                      OpStore %47 %70 
                                          f32 %72 = OpLoad %47 
                                          f32 %73 = OpFDiv %71 %72 
                                                      OpStore %47 %73 
                                          f32 %76 = OpLoad %47 
                                        f32_3 %77 = OpCompositeConstruct %76 %76 %76 
                                        f32_3 %78 = OpLoad %9 
                                        f32_3 %79 = OpFMul %77 %78 
                                        f32_4 %80 = OpLoad %75 
                                        f32_4 %81 = OpVectorShuffle %80 %79 4 5 6 3 
                                                      OpStore %75 %81 
                                        f32_4 %83 = OpLoad %75 
                                        f32_3 %84 = OpVectorShuffle %83 %83 1 1 1 
                               Uniform f32_4* %87 = OpAccessChain %16 %85 %18 
                                        f32_4 %88 = OpLoad %87 
                                        f32_3 %89 = OpVectorShuffle %88 %88 0 1 2 
                                        f32_3 %90 = OpFMul %84 %89 
                                                      OpStore %82 %90 
                               Uniform f32_4* %92 = OpAccessChain %16 %85 %91 
                                        f32_4 %93 = OpLoad %92 
                                        f32_3 %94 = OpVectorShuffle %93 %93 0 1 2 
                                        f32_4 %95 = OpLoad %75 
                                        f32_3 %96 = OpVectorShuffle %95 %95 0 0 0 
                                        f32_3 %97 = OpFMul %94 %96 
                                        f32_3 %98 = OpLoad %82 
                                        f32_3 %99 = OpFAdd %97 %98 
                                       f32_4 %100 = OpLoad %75 
                                       f32_4 %101 = OpVectorShuffle %100 %99 4 5 2 6 
                                                      OpStore %75 %101 
                              Uniform f32_4* %102 = OpAccessChain %16 %85 %62 
                                       f32_4 %103 = OpLoad %102 
                                       f32_3 %104 = OpVectorShuffle %103 %103 0 1 2 
                                       f32_4 %105 = OpLoad %75 
                                       f32_3 %106 = OpVectorShuffle %105 %105 2 2 2 
                                       f32_3 %107 = OpFMul %104 %106 
                                       f32_4 %108 = OpLoad %75 
                                       f32_3 %109 = OpVectorShuffle %108 %108 0 1 3 
                                       f32_3 %110 = OpFAdd %107 %109 
                                       f32_4 %111 = OpLoad %75 
                                       f32_4 %112 = OpVectorShuffle %111 %110 4 5 2 6 
                                                      OpStore %75 %112 
                                       f32_4 %113 = OpLoad %75 
                                       f32_3 %114 = OpVectorShuffle %113 %113 0 1 3 
                              Uniform f32_4* %115 = OpAccessChain %16 %85 %85 
                                       f32_4 %116 = OpLoad %115 
                                       f32_3 %117 = OpVectorShuffle %116 %116 0 1 2 
                                       f32_3 %118 = OpFAdd %114 %117 
                                       f32_4 %119 = OpLoad %75 
                                       f32_4 %120 = OpVectorShuffle %119 %118 4 5 2 6 
                                                      OpStore %75 %120 
                                       f32_4 %121 = OpLoad %75 
                                       f32_3 %122 = OpVectorShuffle %121 %121 0 1 3 
                              Uniform f32_3* %124 = OpAccessChain %16 %91 
                                       f32_3 %125 = OpLoad %124 
                                       f32_3 %126 = OpFNegate %125 
                                       f32_3 %127 = OpFAdd %122 %126 
                                                      OpStore %82 %127 
                                       f32_4 %128 = OpLoad %75 
                                       f32_3 %129 = OpVectorShuffle %128 %128 0 1 3 
                              Uniform f32_4* %131 = OpAccessChain %16 %130 
                                       f32_4 %132 = OpLoad %131 
                                       f32_3 %133 = OpVectorShuffle %132 %132 0 1 2 
                                       f32_3 %134 = OpFNegate %133 
                                       f32_3 %135 = OpFAdd %129 %134 
                                       f32_4 %136 = OpLoad %75 
                                       f32_4 %137 = OpVectorShuffle %136 %135 4 5 2 6 
                                                      OpStore %75 %137 
                                       f32_4 %138 = OpLoad %75 
                                       f32_3 %139 = OpVectorShuffle %138 %138 0 1 3 
                                       f32_4 %140 = OpLoad %75 
                                       f32_3 %141 = OpVectorShuffle %140 %140 0 1 3 
                                         f32 %142 = OpDot %139 %141 
                                Private f32* %143 = OpAccessChain %9 %29 
                                                      OpStore %143 %142 
                                Private f32* %144 = OpAccessChain %9 %29 
                                         f32 %145 = OpLoad %144 
                                         f32 %146 = OpExtInst %1 31 %145 
                                Private f32* %147 = OpAccessChain %9 %29 
                                                      OpStore %147 %146 
                                Private f32* %148 = OpAccessChain %9 %19 
                                         f32 %149 = OpLoad %148 
                                         f32 %150 = OpFNegate %149 
                                         f32 %151 = OpLoad %47 
                                         f32 %152 = OpFMul %150 %151 
                                Private f32* %153 = OpAccessChain %9 %29 
                                         f32 %154 = OpLoad %153 
                                         f32 %155 = OpFAdd %152 %154 
                                Private f32* %156 = OpAccessChain %9 %29 
                                                      OpStore %156 %155 
                                Uniform f32* %158 = OpAccessChain %16 %130 %157 
                                         f32 %159 = OpLoad %158 
                                Private f32* %160 = OpAccessChain %9 %29 
                                         f32 %161 = OpLoad %160 
                                         f32 %162 = OpFMul %159 %161 
                                Private f32* %163 = OpAccessChain %75 %19 
                                         f32 %164 = OpLoad %163 
                                         f32 %165 = OpFAdd %162 %164 
                                Private f32* %166 = OpAccessChain %9 %29 
                                                      OpStore %166 %165 
                                Private f32* %167 = OpAccessChain %9 %29 
                                         f32 %168 = OpLoad %167 
                                Uniform f32* %170 = OpAccessChain %16 %169 %19 
                                         f32 %171 = OpLoad %170 
                                         f32 %172 = OpFMul %168 %171 
                                Uniform f32* %173 = OpAccessChain %16 %169 %157 
                                         f32 %174 = OpLoad %173 
                                         f32 %175 = OpFAdd %172 %174 
                                Private f32* %176 = OpAccessChain %9 %29 
                                                      OpStore %176 %175 
                                Private f32* %177 = OpAccessChain %9 %29 
                                         f32 %178 = OpLoad %177 
                                         f32 %180 = OpExtInst %1 43 %178 %179 %71 
                                Private f32* %181 = OpAccessChain %9 %29 
                                                      OpStore %181 %180 
                                       f32_3 %183 = OpLoad %82 
                                       f32_3 %184 = OpLoad %82 
                                         f32 %185 = OpDot %183 %184 
                                Private f32* %186 = OpAccessChain %182 %29 
                                                      OpStore %186 %185 
                                Private f32* %187 = OpAccessChain %182 %29 
                                         f32 %188 = OpLoad %187 
                                         f32 %189 = OpExtInst %1 32 %188 
                                Private f32* %190 = OpAccessChain %182 %29 
                                                      OpStore %190 %189 
                                       f32_3 %191 = OpLoad %82 
                                       f32_3 %192 = OpFNegate %191 
                                       f32_3 %193 = OpLoad %182 
                                       f32_3 %194 = OpVectorShuffle %193 %193 0 0 0 
                                       f32_3 %195 = OpFMul %192 %194 
                              Uniform f32_4* %197 = OpAccessChain %16 %196 
                                       f32_4 %198 = OpLoad %197 
                                       f32_3 %199 = OpVectorShuffle %198 %198 0 1 2 
                                       f32_3 %200 = OpFNegate %199 
                                       f32_3 %201 = OpFAdd %195 %200 
                                       f32_4 %202 = OpLoad %75 
                                       f32_4 %203 = OpVectorShuffle %202 %201 4 5 6 3 
                                                      OpStore %75 %203 
                                       f32_3 %204 = OpLoad %182 
                                       f32_3 %205 = OpVectorShuffle %204 %204 0 0 0 
                                       f32_3 %206 = OpLoad %82 
                                       f32_3 %207 = OpFMul %205 %206 
                                                      OpStore %182 %207 
                                       f32_4 %209 = OpLoad %75 
                                       f32_3 %210 = OpVectorShuffle %209 %209 0 1 2 
                                       f32_4 %211 = OpLoad %75 
                                       f32_3 %212 = OpVectorShuffle %211 %211 0 1 2 
                                         f32 %213 = OpDot %210 %212 
                                                      OpStore %208 %213 
                                         f32 %214 = OpLoad %208 
                                         f32 %216 = OpExtInst %1 40 %214 %215 
                                                      OpStore %208 %216 
                                         f32 %217 = OpLoad %208 
                                         f32 %218 = OpExtInst %1 32 %217 
                                                      OpStore %208 %218 
                                         f32 %219 = OpLoad %208 
                                       f32_3 %220 = OpCompositeConstruct %219 %219 %219 
                                       f32_4 %221 = OpLoad %75 
                                       f32_3 %222 = OpVectorShuffle %221 %221 0 1 2 
                                       f32_3 %223 = OpFMul %220 %222 
                                       f32_4 %224 = OpLoad %75 
                                       f32_4 %225 = OpVectorShuffle %224 %223 4 5 6 3 
                                                      OpStore %75 %225 
                         read_only Texture2D %227 = OpLoad %226 
                                     sampler %229 = OpLoad %228 
                  read_only Texture2DSampled %230 = OpSampledImage %227 %229 
                                       f32_3 %231 = OpLoad %36 
                                       f32_2 %232 = OpVectorShuffle %231 %231 0 1 
                                       f32_4 %233 = OpImageSampleImplicitLod %230 %232 
                                       f32_3 %234 = OpVectorShuffle %233 %233 0 1 2 
                                                      OpStore %82 %234 
                                       f32_3 %235 = OpLoad %82 
                                       f32_3 %238 = OpFMul %235 %237 
                                       f32_3 %241 = OpFAdd %238 %240 
                                                      OpStore %82 %241 
                                       f32_3 %242 = OpLoad %82 
                                       f32_3 %243 = OpLoad %82 
                                         f32 %244 = OpDot %242 %243 
                                                      OpStore %208 %244 
                                         f32 %245 = OpLoad %208 
                                         f32 %246 = OpExtInst %1 32 %245 
                                                      OpStore %208 %246 
                                         f32 %247 = OpLoad %208 
                                       f32_3 %248 = OpCompositeConstruct %247 %247 %247 
                                       f32_3 %249 = OpLoad %82 
                                       f32_3 %250 = OpFMul %248 %249 
                                                      OpStore %82 %250 
                                       f32_3 %251 = OpLoad %82 
                                       f32_4 %252 = OpLoad %75 
                                       f32_3 %253 = OpVectorShuffle %252 %252 0 1 2 
                                         f32 %254 = OpDot %251 %253 
                                                      OpStore %208 %254 
                                         f32 %255 = OpLoad %208 
                                         f32 %256 = OpExtInst %1 43 %255 %179 %71 
                                                      OpStore %208 %256 
                              Uniform f32_4* %258 = OpAccessChain %16 %196 
                                       f32_4 %259 = OpLoad %258 
                                       f32_3 %260 = OpVectorShuffle %259 %259 0 1 2 
                                       f32_3 %261 = OpFNegate %260 
                                       f32_4 %262 = OpLoad %75 
                                       f32_3 %263 = OpVectorShuffle %262 %262 0 1 2 
                                         f32 %264 = OpDot %261 %263 
                                                      OpStore %257 %264 
                                         f32 %265 = OpLoad %257 
                                         f32 %266 = OpExtInst %1 43 %265 %179 %71 
                                                      OpStore %257 %266 
                         read_only Texture2D %268 = OpLoad %267 
                                     sampler %270 = OpLoad %269 
                  read_only Texture2DSampled %271 = OpSampledImage %268 %270 
                                       f32_3 %272 = OpLoad %36 
                                       f32_2 %273 = OpVectorShuffle %272 %272 0 1 
                                       f32_4 %274 = OpImageSampleImplicitLod %271 %273 
                                                      OpStore %75 %274 
                                       f32_4 %276 = OpLoad %75 
                                       f32_4 %277 = OpVectorShuffle %276 %276 3 0 1 2 
                                       f32_4 %278 = OpFNegate %277 
                                       f32_4 %280 = OpFAdd %278 %279 
                                                      OpStore %275 %280 
                                Private f32* %282 = OpAccessChain %275 %29 
                                         f32 %283 = OpLoad %282 
                                Private f32* %284 = OpAccessChain %275 %29 
                                         f32 %285 = OpLoad %284 
                                         f32 %286 = OpFMul %283 %285 
                                                      OpStore %281 %286 
                                         f32 %287 = OpLoad %281 
                                         f32 %289 = OpExtInst %1 40 %287 %288 
                                                      OpStore %281 %289 
                                         f32 %291 = OpLoad %281 
                                         f32 %292 = OpLoad %281 
                                         f32 %293 = OpFMul %291 %292 
                                                      OpStore %290 %293 
                                         f32 %295 = OpLoad %208 
                                         f32 %296 = OpLoad %290 
                                         f32 %297 = OpFMul %295 %296 
                                         f32 %298 = OpLoad %208 
                                         f32 %299 = OpFNegate %298 
                                         f32 %300 = OpFAdd %297 %299 
                                Private f32* %301 = OpAccessChain %294 %29 
                                                      OpStore %301 %300 
                                Private f32* %302 = OpAccessChain %294 %29 
                                         f32 %303 = OpLoad %302 
                                         f32 %304 = OpLoad %208 
                                         f32 %305 = OpFMul %303 %304 
                                         f32 %306 = OpFAdd %305 %71 
                                                      OpStore %208 %306 
                                         f32 %307 = OpLoad %208 
                                         f32 %308 = OpLoad %208 
                                         f32 %309 = OpFMul %307 %308 
                                         f32 %311 = OpFAdd %309 %310 
                                                      OpStore %208 %311 
                                         f32 %312 = OpLoad %290 
                                         f32 %314 = OpFMul %312 %313 
                                                      OpStore %290 %314 
                                         f32 %315 = OpLoad %290 
                                         f32 %316 = OpLoad %208 
                                         f32 %317 = OpFDiv %315 %316 
                                                      OpStore %208 %317 
                                       f32_3 %318 = OpLoad %82 
                                       f32_3 %319 = OpLoad %182 
                                       f32_3 %320 = OpFNegate %319 
                                         f32 %321 = OpDot %318 %320 
                                Private f32* %322 = OpAccessChain %182 %29 
                                                      OpStore %322 %321 
                                       f32_3 %324 = OpLoad %82 
                              Uniform f32_4* %325 = OpAccessChain %16 %196 
                                       f32_4 %326 = OpLoad %325 
                                       f32_3 %327 = OpVectorShuffle %326 %326 0 1 2 
                                       f32_3 %328 = OpFNegate %327 
                                         f32 %329 = OpDot %324 %328 
                                                      OpStore %323 %329 
                                         f32 %330 = OpLoad %323 
                                         f32 %331 = OpExtInst %1 43 %330 %179 %71 
                                                      OpStore %323 %331 
                                         f32 %332 = OpLoad %281 
                                         f32 %333 = OpFNegate %332 
                                         f32 %334 = OpFAdd %333 %71 
                                                      OpStore %47 %334 
                                Private f32* %335 = OpAccessChain %182 %29 
                                         f32 %336 = OpLoad %335 
                                         f32 %337 = OpExtInst %1 4 %336 
                                         f32 %338 = OpLoad %47 
                                         f32 %339 = OpFMul %337 %338 
                                         f32 %340 = OpLoad %281 
                                         f32 %341 = OpFAdd %339 %340 
                                Private f32* %342 = OpAccessChain %82 %29 
                                                      OpStore %342 %341 
                                         f32 %343 = OpLoad %323 
                                         f32 %344 = OpLoad %47 
                                         f32 %345 = OpFMul %343 %344 
                                         f32 %346 = OpLoad %281 
                                         f32 %347 = OpFAdd %345 %346 
                                                      OpStore %47 %347 
                                         f32 %348 = OpLoad %47 
                                Private f32* %349 = OpAccessChain %182 %29 
                                         f32 %350 = OpLoad %349 
                                         f32 %351 = OpExtInst %1 4 %350 
                                         f32 %352 = OpFMul %348 %351 
                                                      OpStore %47 %352 
                                Private f32* %353 = OpAccessChain %182 %29 
                                         f32 %354 = OpLoad %353 
                                         f32 %355 = OpExtInst %1 4 %354 
                                         f32 %356 = OpFNegate %355 
                                         f32 %357 = OpFAdd %356 %71 
                                Private f32* %358 = OpAccessChain %182 %29 
                                                      OpStore %358 %357 
                                         f32 %359 = OpLoad %323 
                                Private f32* %360 = OpAccessChain %82 %29 
                                         f32 %361 = OpLoad %360 
                                         f32 %362 = OpFMul %359 %361 
                                         f32 %363 = OpLoad %47 
                                         f32 %364 = OpFAdd %362 %363 
                                                      OpStore %47 %364 
                                         f32 %365 = OpLoad %47 
                                         f32 %367 = OpFAdd %365 %366 
                                                      OpStore %47 %367 
                                         f32 %369 = OpLoad %47 
                                         f32 %370 = OpFDiv %368 %369 
                                                      OpStore %47 %370 
                                         f32 %371 = OpLoad %208 
                                         f32 %372 = OpLoad %47 
                                         f32 %373 = OpFMul %371 %372 
                                                      OpStore %47 %373 
                                         f32 %374 = OpLoad %323 
                                         f32 %375 = OpLoad %47 
                                         f32 %376 = OpFMul %374 %375 
                                                      OpStore %47 %376 
                                         f32 %377 = OpLoad %47 
                                         f32 %379 = OpFMul %377 %378 
                                                      OpStore %47 %379 
                                         f32 %380 = OpLoad %47 
                                         f32 %381 = OpExtInst %1 40 %380 %179 
                                                      OpStore %47 %381 
                                       f32_4 %382 = OpLoad %75 
                                       f32_3 %383 = OpVectorShuffle %382 %382 0 1 2 
                                       f32_4 %384 = OpLoad %75 
                                       f32_3 %385 = OpVectorShuffle %384 %384 0 1 2 
                                         f32 %386 = OpDot %383 %385 
                                                      OpStore %208 %386 
                                         f32 %390 = OpLoad %208 
                                        bool %391 = OpFOrdNotEqual %390 %179 
                                                      OpStore %389 %391 
                                        bool %392 = OpLoad %389 
                                         f32 %393 = OpSelect %392 %71 %179 
                                                      OpStore %208 %393 
                                         f32 %394 = OpLoad %47 
                                         f32 %395 = OpLoad %208 
                                         f32 %396 = OpFMul %394 %395 
                                                      OpStore %47 %396 
                         read_only Texture2D %398 = OpLoad %397 
                                     sampler %400 = OpLoad %399 
                  read_only Texture2DSampled %401 = OpSampledImage %398 %400 
                                       f32_3 %402 = OpLoad %36 
                                       f32_2 %403 = OpVectorShuffle %402 %402 0 1 
                                       f32_4 %404 = OpImageSampleImplicitLod %401 %403 
                                         f32 %405 = OpCompositeExtract %404 0 
                                                      OpStore %208 %405 
                         read_only Texture2D %407 = OpLoad %406 
                                     sampler %409 = OpLoad %408 
                  read_only Texture2DSampled %410 = OpSampledImage %407 %409 
                                       f32_3 %411 = OpLoad %36 
                                       f32_2 %412 = OpVectorShuffle %411 %411 0 1 
                                       f32_4 %413 = OpImageSampleImplicitLod %410 %412 
                                       f32_3 %414 = OpVectorShuffle %413 %413 0 1 2 
                                                      OpStore %82 %414 
                                         f32 %415 = OpLoad %208 
                                         f32 %416 = OpFNegate %415 
                                         f32 %417 = OpFAdd %416 %71 
                                Private f32* %418 = OpAccessChain %36 %29 
                                                      OpStore %418 %417 
                                Private f32* %419 = OpAccessChain %9 %29 
                                         f32 %420 = OpLoad %419 
                                Private f32* %421 = OpAccessChain %36 %29 
                                         f32 %422 = OpLoad %421 
                                         f32 %423 = OpFMul %420 %422 
                                         f32 %424 = OpLoad %208 
                                         f32 %425 = OpFAdd %423 %424 
                                Private f32* %426 = OpAccessChain %9 %29 
                                                      OpStore %426 %425 
                                       f32_3 %427 = OpLoad %9 
                                       f32_3 %428 = OpVectorShuffle %427 %427 0 0 0 
                              Uniform f32_4* %430 = OpAccessChain %16 %429 
                                       f32_4 %431 = OpLoad %430 
                                       f32_3 %432 = OpVectorShuffle %431 %431 0 1 2 
                                       f32_3 %433 = OpFMul %428 %432 
                                                      OpStore %36 %433 
                                         f32 %434 = OpLoad %47 
                                       f32_3 %435 = OpCompositeConstruct %434 %434 %434 
                                       f32_3 %436 = OpLoad %36 
                                       f32_3 %437 = OpFMul %435 %436 
                                                      OpStore %294 %437 
                                         f32 %438 = OpLoad %257 
                                         f32 %439 = OpFNegate %438 
                                         f32 %440 = OpFAdd %439 %71 
                                Private f32* %441 = OpAccessChain %9 %29 
                                                      OpStore %441 %440 
                                         f32 %442 = OpLoad %257 
                                         f32 %443 = OpLoad %257 
                                         f32 %444 = OpFMul %442 %443 
                                                      OpStore %47 %444 
                                         f32 %445 = OpLoad %47 
                                       f32_2 %446 = OpCompositeConstruct %445 %445 
                                       f32_4 %447 = OpLoad %275 
                                       f32_2 %448 = OpVectorShuffle %447 %447 0 0 
                                         f32 %449 = OpDot %446 %448 
                                                      OpStore %47 %449 
                                         f32 %450 = OpLoad %47 
                                         f32 %452 = OpFAdd %450 %451 
                                                      OpStore %47 %452 
                                Private f32* %453 = OpAccessChain %9 %29 
                                         f32 %454 = OpLoad %453 
                                Private f32* %455 = OpAccessChain %9 %29 
                                         f32 %456 = OpLoad %455 
                                         f32 %457 = OpFMul %454 %456 
                                                      OpStore %257 %457 
                                         f32 %458 = OpLoad %257 
                                         f32 %459 = OpLoad %257 
                                         f32 %460 = OpFMul %458 %459 
                                                      OpStore %257 %460 
                                Private f32* %461 = OpAccessChain %9 %29 
                                         f32 %462 = OpLoad %461 
                                         f32 %463 = OpLoad %257 
                                         f32 %464 = OpFMul %462 %463 
                                Private f32* %465 = OpAccessChain %9 %29 
                                                      OpStore %465 %464 
                                       f32_4 %466 = OpLoad %275 
                                       f32_3 %467 = OpVectorShuffle %466 %466 1 2 3 
                                       f32_3 %468 = OpLoad %9 
                                       f32_3 %469 = OpVectorShuffle %468 %468 0 0 0 
                                       f32_3 %470 = OpFMul %467 %469 
                                       f32_4 %471 = OpLoad %75 
                                       f32_3 %472 = OpVectorShuffle %471 %471 0 1 2 
                                       f32_3 %473 = OpFAdd %470 %472 
                                       f32_4 %474 = OpLoad %75 
                                       f32_4 %475 = OpVectorShuffle %474 %473 4 5 6 3 
                                                      OpStore %75 %475 
                                       f32_4 %476 = OpLoad %75 
                                       f32_3 %477 = OpVectorShuffle %476 %476 0 1 2 
                                       f32_3 %478 = OpLoad %294 
                                       f32_3 %479 = OpFMul %477 %478 
                                       f32_4 %480 = OpLoad %75 
                                       f32_4 %481 = OpVectorShuffle %480 %479 4 5 6 3 
                                                      OpStore %75 %481 
                                Private f32* %482 = OpAccessChain %182 %29 
                                         f32 %483 = OpLoad %482 
                                Private f32* %484 = OpAccessChain %182 %29 
                                         f32 %485 = OpLoad %484 
                                         f32 %486 = OpFMul %483 %485 
                                Private f32* %487 = OpAccessChain %9 %29 
                                                      OpStore %487 %486 
                                Private f32* %488 = OpAccessChain %9 %29 
                                         f32 %489 = OpLoad %488 
                                Private f32* %490 = OpAccessChain %9 %29 
                                         f32 %491 = OpLoad %490 
                                         f32 %492 = OpFMul %489 %491 
                                Private f32* %493 = OpAccessChain %9 %29 
                                                      OpStore %493 %492 
                                Private f32* %494 = OpAccessChain %182 %29 
                                         f32 %495 = OpLoad %494 
                                Private f32* %496 = OpAccessChain %9 %29 
                                         f32 %497 = OpLoad %496 
                                         f32 %498 = OpFMul %495 %497 
                                Private f32* %499 = OpAccessChain %9 %29 
                                                      OpStore %499 %498 
                                         f32 %500 = OpLoad %47 
                                Private f32* %501 = OpAccessChain %9 %29 
                                         f32 %502 = OpLoad %501 
                                         f32 %503 = OpFMul %500 %502 
                                         f32 %504 = OpFAdd %503 %71 
                                Private f32* %505 = OpAccessChain %9 %29 
                                                      OpStore %505 %504 
                                         f32 %506 = OpLoad %323 
                                         f32 %507 = OpFNegate %506 
                                         f32 %508 = OpFAdd %507 %71 
                                Private f32* %509 = OpAccessChain %182 %29 
                                                      OpStore %509 %508 
                                Private f32* %510 = OpAccessChain %182 %29 
                                         f32 %511 = OpLoad %510 
                                Private f32* %512 = OpAccessChain %182 %29 
                                         f32 %513 = OpLoad %512 
                                         f32 %514 = OpFMul %511 %513 
                                                      OpStore %257 %514 
                                         f32 %515 = OpLoad %257 
                                         f32 %516 = OpLoad %257 
                                         f32 %517 = OpFMul %515 %516 
                                                      OpStore %257 %517 
                                Private f32* %518 = OpAccessChain %182 %29 
                                         f32 %519 = OpLoad %518 
                                         f32 %520 = OpLoad %257 
                                         f32 %521 = OpFMul %519 %520 
                                Private f32* %522 = OpAccessChain %182 %29 
                                                      OpStore %522 %521 
                                         f32 %523 = OpLoad %47 
                                Private f32* %524 = OpAccessChain %182 %29 
                                         f32 %525 = OpLoad %524 
                                         f32 %526 = OpFMul %523 %525 
                                         f32 %527 = OpFAdd %526 %71 
                                Private f32* %528 = OpAccessChain %182 %29 
                                                      OpStore %528 %527 
                                Private f32* %529 = OpAccessChain %9 %29 
                                         f32 %530 = OpLoad %529 
                                Private f32* %531 = OpAccessChain %182 %29 
                                         f32 %532 = OpLoad %531 
                                         f32 %533 = OpFMul %530 %532 
                                Private f32* %534 = OpAccessChain %9 %29 
                                                      OpStore %534 %533 
                                         f32 %535 = OpLoad %323 
                                Private f32* %536 = OpAccessChain %9 %29 
                                         f32 %537 = OpLoad %536 
                                         f32 %538 = OpFMul %535 %537 
                                Private f32* %539 = OpAccessChain %9 %29 
                                                      OpStore %539 %538 
                                       f32_3 %540 = OpLoad %9 
                                       f32_3 %541 = OpVectorShuffle %540 %540 0 0 0 
                                       f32_3 %542 = OpLoad %36 
                                       f32_3 %543 = OpFMul %541 %542 
                                                      OpStore %9 %543 
                                       f32_3 %546 = OpLoad %82 
                                       f32_3 %547 = OpLoad %9 
                                       f32_3 %548 = OpFMul %546 %547 
                                       f32_4 %549 = OpLoad %75 
                                       f32_3 %550 = OpVectorShuffle %549 %549 0 1 2 
                                       f32_3 %551 = OpFAdd %548 %550 
                                       f32_4 %552 = OpLoad %545 
                                       f32_4 %553 = OpVectorShuffle %552 %551 4 5 6 3 
                                                      OpStore %545 %553 
                                 Output f32* %555 = OpAccessChain %545 %157 
                                                      OpStore %555 %71 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "UNITY_HDR_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "UNITY_HDR_ON" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightColor;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
UNITY_LOCATION(0) uniform  sampler2D _CameraDepthTexture;
UNITY_LOCATION(1) uniform  sampler2D _ShadowMapTexture;
UNITY_LOCATION(2) uniform  sampler2D _LightTexture0;
UNITY_LOCATION(3) uniform  sampler2D _CameraGBufferTexture0;
UNITY_LOCATION(4) uniform  sampler2D _CameraGBufferTexture1;
UNITY_LOCATION(5) uniform  sampler2D _CameraGBufferTexture2;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec2 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
vec4 u_xlat6;
vec2 u_xlat7;
float u_xlat8;
float u_xlat9;
float u_xlat15;
float u_xlat21;
float u_xlat22;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat2 = texture(_CameraDepthTexture, u_xlat1.xy);
    u_xlat21 = _ZBufferParams.x * u_xlat2.x + _ZBufferParams.y;
    u_xlat21 = float(1.0) / u_xlat21;
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat21 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat3 = texture(_ShadowMapTexture, u_xlat1.xy);
    u_xlat7.x = (-u_xlat3.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat7.x + u_xlat3.x;
    u_xlat7.xy = u_xlat2.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
    u_xlat7.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat2.xx + u_xlat7.xy;
    u_xlat7.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat2.ww + u_xlat7.xy;
    u_xlat2.xyz = u_xlat2.xyw + (-_WorldSpaceCameraPos.xyz);
    u_xlat7.xy = u_xlat7.xy + hlslcc_mtx4x4unity_WorldToLight[3].xy;
    u_xlat3 = texture(_LightTexture0, u_xlat7.xy, -8.0);
    u_xlat0.x = u_xlat0.x * u_xlat3.w;
    u_xlat0.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat3.xyz = (-u_xlat2.xyz) * vec3(u_xlat21) + (-_LightDir.xyz);
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat21 = max(u_xlat21, 0.00100000005);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz;
    u_xlat4 = texture(_CameraGBufferTexture2, u_xlat1.xy);
    u_xlat4.xyz = u_xlat4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat21 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;
    u_xlat21 = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
    u_xlat15 = dot((-_LightDir.xyz), u_xlat3.xyz);
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
    u_xlat3 = texture(_CameraGBufferTexture1, u_xlat1.xy);
    u_xlat5 = texture(_CameraGBufferTexture0, u_xlat1.xy);
    u_xlat6 = (-u_xlat3.wxyz) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat1.x = u_xlat6.x * u_xlat6.x;
    u_xlat1.x = max(u_xlat1.x, 0.00200000009);
    u_xlat8 = u_xlat1.x * u_xlat1.x;
    u_xlat22 = u_xlat21 * u_xlat8 + (-u_xlat21);
    u_xlat21 = u_xlat22 * u_xlat21 + 1.0;
    u_xlat21 = u_xlat21 * u_xlat21 + 1.00000001e-07;
    u_xlat8 = u_xlat8 * 0.318309873;
    u_xlat21 = u_xlat8 / u_xlat21;
    u_xlat8 = dot(u_xlat4.xyz, (-u_xlat2.xyz));
    u_xlat22 = dot(u_xlat4.xyz, (-_LightDir.xyz));
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
    u_xlat2.x = (-u_xlat1.x) + 1.0;
    u_xlat9 = abs(u_xlat8) * u_xlat2.x + u_xlat1.x;
    u_xlat1.x = u_xlat22 * u_xlat2.x + u_xlat1.x;
    u_xlat1.x = u_xlat1.x * abs(u_xlat8);
    u_xlat8 = -abs(u_xlat8) + 1.0;
    u_xlat1.x = u_xlat22 * u_xlat9 + u_xlat1.x;
    u_xlat1.x = u_xlat1.x + 9.99999975e-06;
    u_xlat1.x = 0.5 / u_xlat1.x;
    u_xlat21 = u_xlat21 * u_xlat1.x;
    u_xlat21 = u_xlat21 * 3.14159274;
    u_xlat21 = u_xlat22 * u_xlat21;
    u_xlat21 = max(u_xlat21, 0.0);
    u_xlat1.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlatb1 = u_xlat1.x!=0.0;
    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
    u_xlat21 = u_xlat21 * u_xlat1.x;
    u_xlat2.xyz = u_xlat0.xyz * vec3(u_xlat21);
    u_xlat21 = (-u_xlat15) + 1.0;
    u_xlat1.x = u_xlat15 * u_xlat15;
    u_xlat1.x = dot(u_xlat1.xx, u_xlat6.xx);
    u_xlat1.x = u_xlat1.x + -0.5;
    u_xlat15 = u_xlat21 * u_xlat21;
    u_xlat15 = u_xlat15 * u_xlat15;
    u_xlat21 = u_xlat21 * u_xlat15;
    u_xlat3.xyz = u_xlat6.yzw * vec3(u_xlat21) + u_xlat3.xyz;
    u_xlat2.xyz = u_xlat2.xyz * u_xlat3.xyz;
    u_xlat21 = u_xlat8 * u_xlat8;
    u_xlat21 = u_xlat21 * u_xlat21;
    u_xlat21 = u_xlat8 * u_xlat21;
    u_xlat21 = u_xlat1.x * u_xlat21 + 1.0;
    u_xlat8 = (-u_xlat22) + 1.0;
    u_xlat15 = u_xlat8 * u_xlat8;
    u_xlat15 = u_xlat15 * u_xlat15;
    u_xlat8 = u_xlat8 * u_xlat15;
    u_xlat1.x = u_xlat1.x * u_xlat8 + 1.0;
    u_xlat21 = u_xlat21 * u_xlat1.x;
    u_xlat21 = u_xlat22 * u_xlat21;
    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    SV_Target0.xyz = u_xlat5.xyz * u_xlat0.xyz + u_xlat2.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "UNITY_HDR_ON" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 192
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %80 %102 %169 %175 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpMemberDecorate %78 0 BuiltIn 78 
                                                      OpMemberDecorate %78 1 BuiltIn 78 
                                                      OpMemberDecorate %78 2 BuiltIn 78 
                                                      OpDecorate %78 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 102 
                                                      OpDecorate %169 Location 169 
                                                      OpDecorate vs_TEXCOORD1 Location 175 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %16 %17 %18 %6 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 1 
                                              %24 = OpTypePointer Uniform %7 
                                          i32 %28 = OpConstant 0 
                                          i32 %36 = OpConstant 2 
                                          i32 %45 = OpConstant 3 
                               Private f32_4* %49 = OpVariable Private 
                                          u32 %76 = OpConstant 1 
                                              %77 = OpTypeArray %6 %76 
                                              %78 = OpTypeStruct %7 %6 %77 
                                              %79 = OpTypePointer Output %78 
         Output struct {f32_4; f32; f32[1];}* %80 = OpVariable Output 
                                              %82 = OpTypePointer Output %7 
                                              %84 = OpTypePointer Private %6 
                                          u32 %87 = OpConstant 0 
                                              %88 = OpTypePointer Uniform %6 
                               Private f32_4* %93 = OpVariable Private 
                                              %94 = OpTypeVector %6 3 
                                          f32 %97 = OpConstant 3.674022E-40 
                                        f32_3 %98 = OpConstantComposite %97 %97 %97 
                       Output f32_4* vs_TEXCOORD0 = OpVariable Output 
                                             %103 = OpTypeVector %6 2 
                                         f32 %158 = OpConstant 3.674022E-40 
                                         f32 %159 = OpConstant 3.674022E-40 
                                       f32_3 %160 = OpConstantComposite %158 %158 %159 
                                             %168 = OpTypePointer Input %94 
                                Input f32_3* %169 = OpVariable Input 
                                             %174 = OpTypePointer Output %94 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                                         i32 %176 = OpConstant 4 
                                             %186 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %25 = OpAccessChain %21 %23 %23 
                                        f32_4 %26 = OpLoad %25 
                                        f32_4 %27 = OpFMul %13 %26 
                                                      OpStore %9 %27 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %28 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %44 = OpLoad %9 
                               Uniform f32_4* %46 = OpAccessChain %21 %23 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_4 %48 = OpFAdd %44 %47 
                                                      OpStore %9 %48 
                                        f32_4 %50 = OpLoad %9 
                                        f32_4 %51 = OpVectorShuffle %50 %50 1 1 1 1 
                               Uniform f32_4* %52 = OpAccessChain %21 %45 %23 
                                        f32_4 %53 = OpLoad %52 
                                        f32_4 %54 = OpFMul %51 %53 
                                                      OpStore %49 %54 
                               Uniform f32_4* %55 = OpAccessChain %21 %45 %28 
                                        f32_4 %56 = OpLoad %55 
                                        f32_4 %57 = OpLoad %9 
                                        f32_4 %58 = OpVectorShuffle %57 %57 0 0 0 0 
                                        f32_4 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %49 
                                        f32_4 %61 = OpFAdd %59 %60 
                                                      OpStore %49 %61 
                               Uniform f32_4* %62 = OpAccessChain %21 %45 %36 
                                        f32_4 %63 = OpLoad %62 
                                        f32_4 %64 = OpLoad %9 
                                        f32_4 %65 = OpVectorShuffle %64 %64 2 2 2 2 
                                        f32_4 %66 = OpFMul %63 %65 
                                        f32_4 %67 = OpLoad %49 
                                        f32_4 %68 = OpFAdd %66 %67 
                                                      OpStore %49 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %45 %45 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %9 
                                        f32_4 %72 = OpVectorShuffle %71 %71 3 3 3 3 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %49 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %49 %75 
                                        f32_4 %81 = OpLoad %49 
                                Output f32_4* %83 = OpAccessChain %80 %28 
                                                      OpStore %83 %81 
                                 Private f32* %85 = OpAccessChain %49 %76 
                                          f32 %86 = OpLoad %85 
                                 Uniform f32* %89 = OpAccessChain %21 %28 %87 
                                          f32 %90 = OpLoad %89 
                                          f32 %91 = OpFMul %86 %90 
                                 Private f32* %92 = OpAccessChain %49 %76 
                                                      OpStore %92 %91 
                                        f32_4 %95 = OpLoad %49 
                                        f32_3 %96 = OpVectorShuffle %95 %95 0 3 1 
                                        f32_3 %99 = OpFMul %96 %98 
                                       f32_4 %100 = OpLoad %93 
                                       f32_4 %101 = OpVectorShuffle %100 %99 4 1 5 6 
                                                      OpStore %93 %101 
                                       f32_4 %104 = OpLoad %49 
                                       f32_2 %105 = OpVectorShuffle %104 %104 2 3 
                                       f32_4 %106 = OpLoad vs_TEXCOORD0 
                                       f32_4 %107 = OpVectorShuffle %106 %105 0 1 4 5 
                                                      OpStore vs_TEXCOORD0 %107 
                                       f32_4 %108 = OpLoad %93 
                                       f32_2 %109 = OpVectorShuffle %108 %108 2 2 
                                       f32_4 %110 = OpLoad %93 
                                       f32_2 %111 = OpVectorShuffle %110 %110 0 3 
                                       f32_2 %112 = OpFAdd %109 %111 
                                       f32_4 %113 = OpLoad vs_TEXCOORD0 
                                       f32_4 %114 = OpVectorShuffle %113 %112 4 5 2 3 
                                                      OpStore vs_TEXCOORD0 %114 
                                       f32_4 %115 = OpLoad %9 
                                       f32_3 %116 = OpVectorShuffle %115 %115 1 1 1 
                              Uniform f32_4* %117 = OpAccessChain %21 %36 %23 
                                       f32_4 %118 = OpLoad %117 
                                       f32_3 %119 = OpVectorShuffle %118 %118 0 1 2 
                                       f32_3 %120 = OpFMul %116 %119 
                                       f32_4 %121 = OpLoad %49 
                                       f32_4 %122 = OpVectorShuffle %121 %120 4 5 6 3 
                                                      OpStore %49 %122 
                              Uniform f32_4* %123 = OpAccessChain %21 %36 %28 
                                       f32_4 %124 = OpLoad %123 
                                       f32_3 %125 = OpVectorShuffle %124 %124 0 1 2 
                                       f32_4 %126 = OpLoad %9 
                                       f32_3 %127 = OpVectorShuffle %126 %126 0 0 0 
                                       f32_3 %128 = OpFMul %125 %127 
                                       f32_4 %129 = OpLoad %49 
                                       f32_3 %130 = OpVectorShuffle %129 %129 0 1 2 
                                       f32_3 %131 = OpFAdd %128 %130 
                                       f32_4 %132 = OpLoad %49 
                                       f32_4 %133 = OpVectorShuffle %132 %131 4 5 6 3 
                                                      OpStore %49 %133 
                              Uniform f32_4* %134 = OpAccessChain %21 %36 %36 
                                       f32_4 %135 = OpLoad %134 
                                       f32_3 %136 = OpVectorShuffle %135 %135 0 1 2 
                                       f32_4 %137 = OpLoad %9 
                                       f32_3 %138 = OpVectorShuffle %137 %137 2 2 2 
                                       f32_3 %139 = OpFMul %136 %138 
                                       f32_4 %140 = OpLoad %49 
                                       f32_3 %141 = OpVectorShuffle %140 %140 0 1 2 
                                       f32_3 %142 = OpFAdd %139 %141 
                                       f32_4 %143 = OpLoad %9 
                                       f32_4 %144 = OpVectorShuffle %143 %142 4 5 6 3 
                                                      OpStore %9 %144 
                              Uniform f32_4* %145 = OpAccessChain %21 %36 %45 
                                       f32_4 %146 = OpLoad %145 
                                       f32_3 %147 = OpVectorShuffle %146 %146 0 1 2 
                                       f32_4 %148 = OpLoad %9 
                                       f32_3 %149 = OpVectorShuffle %148 %148 3 3 3 
                                       f32_3 %150 = OpFMul %147 %149 
                                       f32_4 %151 = OpLoad %9 
                                       f32_3 %152 = OpVectorShuffle %151 %151 0 1 2 
                                       f32_3 %153 = OpFAdd %150 %152 
                                       f32_4 %154 = OpLoad %9 
                                       f32_4 %155 = OpVectorShuffle %154 %153 4 5 6 3 
                                                      OpStore %9 %155 
                                       f32_4 %156 = OpLoad %9 
                                       f32_3 %157 = OpVectorShuffle %156 %156 0 1 2 
                                       f32_3 %161 = OpFMul %157 %160 
                                       f32_4 %162 = OpLoad %49 
                                       f32_4 %163 = OpVectorShuffle %162 %161 4 5 6 3 
                                                      OpStore %49 %163 
                                       f32_4 %164 = OpLoad %9 
                                       f32_3 %165 = OpVectorShuffle %164 %164 0 1 2 
                                       f32_3 %166 = OpFNegate %165 
                                       f32_3 %167 = OpFMul %166 %160 
                                       f32_3 %170 = OpLoad %169 
                                       f32_3 %171 = OpFAdd %167 %170 
                                       f32_4 %172 = OpLoad %9 
                                       f32_4 %173 = OpVectorShuffle %172 %171 4 5 6 3 
                                                      OpStore %9 %173 
                                Uniform f32* %177 = OpAccessChain %21 %176 
                                         f32 %178 = OpLoad %177 
                                       f32_3 %179 = OpCompositeConstruct %178 %178 %178 
                                       f32_4 %180 = OpLoad %9 
                                       f32_3 %181 = OpVectorShuffle %180 %180 0 1 2 
                                       f32_3 %182 = OpFMul %179 %181 
                                       f32_4 %183 = OpLoad %49 
                                       f32_3 %184 = OpVectorShuffle %183 %183 0 1 2 
                                       f32_3 %185 = OpFAdd %182 %184 
                                                      OpStore vs_TEXCOORD1 %185 
                                 Output f32* %187 = OpAccessChain %80 %28 %76 
                                         f32 %188 = OpLoad %187 
                                         f32 %189 = OpFNegate %188 
                                 Output f32* %190 = OpAccessChain %80 %28 %76 
                                                      OpStore %190 %189 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 595
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %25 %40 %582 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpDecorate %13 ArrayStride 13 
                                                      OpDecorate %14 ArrayStride 14 
                                                      OpMemberDecorate %15 0 Offset 15 
                                                      OpMemberDecorate %15 1 Offset 15 
                                                      OpMemberDecorate %15 2 Offset 15 
                                                      OpMemberDecorate %15 3 Offset 15 
                                                      OpMemberDecorate %15 4 Offset 15 
                                                      OpMemberDecorate %15 5 Offset 15 
                                                      OpMemberDecorate %15 6 Offset 15 
                                                      OpMemberDecorate %15 7 Offset 15 
                                                      OpMemberDecorate %15 8 Offset 15 
                                                      OpDecorate %15 Block 
                                                      OpDecorate %17 DescriptorSet 17 
                                                      OpDecorate %17 Binding 17 
                                                      OpDecorate vs_TEXCOORD1 Location 25 
                                                      OpDecorate vs_TEXCOORD0 Location 40 
                                                      OpDecorate %52 DescriptorSet 52 
                                                      OpDecorate %52 Binding 52 
                                                      OpDecorate %56 DescriptorSet 56 
                                                      OpDecorate %56 Binding 56 
                                                      OpDecorate %181 DescriptorSet 181 
                                                      OpDecorate %181 Binding 181 
                                                      OpDecorate %183 DescriptorSet 183 
                                                      OpDecorate %183 Binding 183 
                                                      OpDecorate %241 DescriptorSet 241 
                                                      OpDecorate %241 Binding 241 
                                                      OpDecorate %243 DescriptorSet 243 
                                                      OpDecorate %243 Binding 243 
                                                      OpDecorate %310 DescriptorSet 310 
                                                      OpDecorate %310 Binding 310 
                                                      OpDecorate %312 DescriptorSet 312 
                                                      OpDecorate %312 Binding 312 
                                                      OpDecorate %351 DescriptorSet 351 
                                                      OpDecorate %351 Binding 351 
                                                      OpDecorate %353 DescriptorSet 353 
                                                      OpDecorate %353 Binding 353 
                                                      OpDecorate %359 DescriptorSet 359 
                                                      OpDecorate %359 Binding 359 
                                                      OpDecorate %361 DescriptorSet 361 
                                                      OpDecorate %361 Binding 361 
                                                      OpDecorate %582 Location 582 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 3 
                                               %8 = OpTypePointer Private %7 
                                Private f32_3* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 4 
                                              %11 = OpTypeInt 32 0 
                                          u32 %12 = OpConstant 4 
                                              %13 = OpTypeArray %10 %12 
                                              %14 = OpTypeArray %10 %12 
                                              %15 = OpTypeStruct %7 %10 %10 %13 %10 %10 %10 %10 %14 
                                              %16 = OpTypePointer Uniform %15 
Uniform struct {f32_3; f32_4; f32_4; f32_4[4]; f32_4; f32_4; f32_4; f32_4; f32_4[4];}* %17 = OpVariable Uniform 
                                              %18 = OpTypeInt 32 1 
                                          i32 %19 = OpConstant 1 
                                          u32 %20 = OpConstant 2 
                                              %21 = OpTypePointer Uniform %6 
                                              %24 = OpTypePointer Input %7 
                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                                              %26 = OpTypePointer Input %6 
                                          u32 %30 = OpConstant 0 
                                              %31 = OpTypePointer Private %6 
                                              %37 = OpTypePointer Private %10 
                               Private f32_4* %38 = OpVariable Private 
                                              %39 = OpTypePointer Input %10 
                        Input f32_4* vs_TEXCOORD0 = OpVariable Input 
                                              %41 = OpTypeVector %6 2 
                                 Private f32* %49 = OpVariable Private 
                                              %50 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %51 = OpTypePointer UniformConstant %50 
         UniformConstant read_only Texture2D* %52 = OpVariable UniformConstant 
                                              %54 = OpTypeSampler 
                                              %55 = OpTypePointer UniformConstant %54 
                     UniformConstant sampler* %56 = OpVariable UniformConstant 
                                              %58 = OpTypeSampledImage %50 
                                          i32 %64 = OpConstant 2 
                                          u32 %69 = OpConstant 1 
                                          f32 %73 = OpConstant 3.674022E-40 
                               Private f32_4* %76 = OpVariable Private 
                               Private f32_4* %83 = OpVariable Private 
                                          i32 %86 = OpConstant 3 
                                              %87 = OpTypePointer Uniform %10 
                                          i32 %94 = OpConstant 0 
                                         i32 %127 = OpConstant 5 
                                         u32 %154 = OpConstant 3 
                                         i32 %166 = OpConstant 4 
                                         f32 %176 = OpConstant 3.674022E-40 
                                             %179 = OpTypePointer Private %41 
                              Private f32_2* %180 = OpVariable Private 
        UniformConstant read_only Texture2D* %181 = OpVariable UniformConstant 
                    UniformConstant sampler* %183 = OpVariable UniformConstant 
                                Private f32* %191 = OpVariable Private 
                                         i32 %206 = OpConstant 8 
                                             %229 = OpTypePointer Uniform %7 
        UniformConstant read_only Texture2D* %241 = OpVariable UniformConstant 
                    UniformConstant sampler* %243 = OpVariable UniformConstant 
                                         f32 %247 = OpConstant 3.674022E-40 
                                         i32 %259 = OpConstant 7 
                                         i32 %277 = OpConstant 6 
                                         f32 %298 = OpConstant 3.674022E-40 
                              Private f32_3* %309 = OpVariable Private 
        UniformConstant read_only Texture2D* %310 = OpVariable UniformConstant 
                    UniformConstant sampler* %312 = OpVariable UniformConstant 
                                         f32 %320 = OpConstant 3.674022E-40 
                                       f32_3 %321 = OpConstantComposite %320 %320 %320 
                                         f32 %323 = OpConstant 3.674022E-40 
                                       f32_3 %324 = OpConstantComposite %323 %323 %323 
                                Private f32* %341 = OpVariable Private 
        UniformConstant read_only Texture2D* %351 = OpVariable UniformConstant 
                    UniformConstant sampler* %353 = OpVariable UniformConstant 
        UniformConstant read_only Texture2D* %359 = OpVariable UniformConstant 
                    UniformConstant sampler* %361 = OpVariable UniformConstant 
                              Private f32_4* %370 = OpVariable Private 
                                       f32_4 %374 = OpConstantComposite %73 %73 %73 %73 
                                Private f32* %376 = OpVariable Private 
                                         f32 %383 = OpConstant 3.674022E-40 
                                Private f32* %385 = OpVariable Private 
                                Private f32* %389 = OpVariable Private 
                                         f32 %403 = OpConstant 3.674022E-40 
                                         f32 %406 = OpConstant 3.674022E-40 
                                Private f32* %417 = OpVariable Private 
                                Private f32* %426 = OpVariable Private 
                                         f32 %459 = OpConstant 3.674022E-40 
                                         f32 %461 = OpConstant 3.674022E-40 
                                         f32 %471 = OpConstant 3.674022E-40 
                                             %480 = OpTypeBool 
                                             %481 = OpTypePointer Private %480 
                               Private bool* %482 = OpVariable Private 
                                         f32 %506 = OpConstant 3.674022E-40 
                                             %581 = OpTypePointer Output %10 
                               Output f32_4* %582 = OpVariable Output 
                                             %592 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                 Uniform f32* %22 = OpAccessChain %17 %19 %20 
                                          f32 %23 = OpLoad %22 
                                   Input f32* %27 = OpAccessChain vs_TEXCOORD1 %20 
                                          f32 %28 = OpLoad %27 
                                          f32 %29 = OpFDiv %23 %28 
                                 Private f32* %32 = OpAccessChain %9 %30 
                                                      OpStore %32 %29 
                                        f32_3 %33 = OpLoad %9 
                                        f32_3 %34 = OpVectorShuffle %33 %33 0 0 0 
                                        f32_3 %35 = OpLoad vs_TEXCOORD1 
                                        f32_3 %36 = OpFMul %34 %35 
                                                      OpStore %9 %36 
                                        f32_4 %42 = OpLoad vs_TEXCOORD0 
                                        f32_2 %43 = OpVectorShuffle %42 %42 0 1 
                                        f32_4 %44 = OpLoad vs_TEXCOORD0 
                                        f32_2 %45 = OpVectorShuffle %44 %44 3 3 
                                        f32_2 %46 = OpFDiv %43 %45 
                                        f32_4 %47 = OpLoad %38 
                                        f32_4 %48 = OpVectorShuffle %47 %46 4 5 2 3 
                                                      OpStore %38 %48 
                          read_only Texture2D %53 = OpLoad %52 
                                      sampler %57 = OpLoad %56 
                   read_only Texture2DSampled %59 = OpSampledImage %53 %57 
                                        f32_4 %60 = OpLoad %38 
                                        f32_2 %61 = OpVectorShuffle %60 %60 0 1 
                                        f32_4 %62 = OpImageSampleImplicitLod %59 %61 
                                          f32 %63 = OpCompositeExtract %62 0 
                                                      OpStore %49 %63 
                                 Uniform f32* %65 = OpAccessChain %17 %64 %30 
                                          f32 %66 = OpLoad %65 
                                          f32 %67 = OpLoad %49 
                                          f32 %68 = OpFMul %66 %67 
                                 Uniform f32* %70 = OpAccessChain %17 %64 %69 
                                          f32 %71 = OpLoad %70 
                                          f32 %72 = OpFAdd %68 %71 
                                                      OpStore %49 %72 
                                          f32 %74 = OpLoad %49 
                                          f32 %75 = OpFDiv %73 %74 
                                                      OpStore %49 %75 
                                          f32 %77 = OpLoad %49 
                                        f32_3 %78 = OpCompositeConstruct %77 %77 %77 
                                        f32_3 %79 = OpLoad %9 
                                        f32_3 %80 = OpFMul %78 %79 
                                        f32_4 %81 = OpLoad %76 
                                        f32_4 %82 = OpVectorShuffle %81 %80 4 5 6 3 
                                                      OpStore %76 %82 
                                        f32_4 %84 = OpLoad %76 
                                        f32_3 %85 = OpVectorShuffle %84 %84 1 1 1 
                               Uniform f32_4* %88 = OpAccessChain %17 %86 %19 
                                        f32_4 %89 = OpLoad %88 
                                        f32_3 %90 = OpVectorShuffle %89 %89 0 1 2 
                                        f32_3 %91 = OpFMul %85 %90 
                                        f32_4 %92 = OpLoad %83 
                                        f32_4 %93 = OpVectorShuffle %92 %91 4 5 6 3 
                                                      OpStore %83 %93 
                               Uniform f32_4* %95 = OpAccessChain %17 %86 %94 
                                        f32_4 %96 = OpLoad %95 
                                        f32_3 %97 = OpVectorShuffle %96 %96 0 1 2 
                                        f32_4 %98 = OpLoad %76 
                                        f32_3 %99 = OpVectorShuffle %98 %98 0 0 0 
                                       f32_3 %100 = OpFMul %97 %99 
                                       f32_4 %101 = OpLoad %83 
                                       f32_3 %102 = OpVectorShuffle %101 %101 0 1 2 
                                       f32_3 %103 = OpFAdd %100 %102 
                                       f32_4 %104 = OpLoad %76 
                                       f32_4 %105 = OpVectorShuffle %104 %103 4 5 2 6 
                                                      OpStore %76 %105 
                              Uniform f32_4* %106 = OpAccessChain %17 %86 %64 
                                       f32_4 %107 = OpLoad %106 
                                       f32_3 %108 = OpVectorShuffle %107 %107 0 1 2 
                                       f32_4 %109 = OpLoad %76 
                                       f32_3 %110 = OpVectorShuffle %109 %109 2 2 2 
                                       f32_3 %111 = OpFMul %108 %110 
                                       f32_4 %112 = OpLoad %76 
                                       f32_3 %113 = OpVectorShuffle %112 %112 0 1 3 
                                       f32_3 %114 = OpFAdd %111 %113 
                                       f32_4 %115 = OpLoad %76 
                                       f32_4 %116 = OpVectorShuffle %115 %114 4 5 2 6 
                                                      OpStore %76 %116 
                                       f32_4 %117 = OpLoad %76 
                                       f32_3 %118 = OpVectorShuffle %117 %117 0 1 3 
                              Uniform f32_4* %119 = OpAccessChain %17 %86 %86 
                                       f32_4 %120 = OpLoad %119 
                                       f32_3 %121 = OpVectorShuffle %120 %120 0 1 2 
                                       f32_3 %122 = OpFAdd %118 %121 
                                       f32_4 %123 = OpLoad %76 
                                       f32_4 %124 = OpVectorShuffle %123 %122 4 5 2 6 
                                                      OpStore %76 %124 
                                       f32_4 %125 = OpLoad %76 
                                       f32_3 %126 = OpVectorShuffle %125 %125 0 1 3 
                              Uniform f32_4* %128 = OpAccessChain %17 %127 
                                       f32_4 %129 = OpLoad %128 
                                       f32_3 %130 = OpVectorShuffle %129 %129 0 1 2 
                                       f32_3 %131 = OpFNegate %130 
                                       f32_3 %132 = OpFAdd %126 %131 
                                       f32_4 %133 = OpLoad %83 
                                       f32_4 %134 = OpVectorShuffle %133 %132 4 5 6 3 
                                                      OpStore %83 %134 
                                       f32_4 %135 = OpLoad %83 
                                       f32_3 %136 = OpVectorShuffle %135 %135 0 1 2 
                                       f32_4 %137 = OpLoad %83 
                                       f32_3 %138 = OpVectorShuffle %137 %137 0 1 2 
                                         f32 %139 = OpDot %136 %138 
                                Private f32* %140 = OpAccessChain %9 %30 
                                                      OpStore %140 %139 
                                Private f32* %141 = OpAccessChain %9 %30 
                                         f32 %142 = OpLoad %141 
                                         f32 %143 = OpExtInst %1 31 %142 
                                Private f32* %144 = OpAccessChain %9 %30 
                                                      OpStore %144 %143 
                                Private f32* %145 = OpAccessChain %9 %20 
                                         f32 %146 = OpLoad %145 
                                         f32 %147 = OpFNegate %146 
                                         f32 %148 = OpLoad %49 
                                         f32 %149 = OpFMul %147 %148 
                                Private f32* %150 = OpAccessChain %9 %30 
                                         f32 %151 = OpLoad %150 
                                         f32 %152 = OpFAdd %149 %151 
                                Private f32* %153 = OpAccessChain %9 %30 
                                                      OpStore %153 %152 
                                Uniform f32* %155 = OpAccessChain %17 %127 %154 
                                         f32 %156 = OpLoad %155 
                                Private f32* %157 = OpAccessChain %9 %30 
                                         f32 %158 = OpLoad %157 
                                         f32 %159 = OpFMul %156 %158 
                                Private f32* %160 = OpAccessChain %76 %20 
                                         f32 %161 = OpLoad %160 
                                         f32 %162 = OpFAdd %159 %161 
                                Private f32* %163 = OpAccessChain %9 %30 
                                                      OpStore %163 %162 
                                Private f32* %164 = OpAccessChain %9 %30 
                                         f32 %165 = OpLoad %164 
                                Uniform f32* %167 = OpAccessChain %17 %166 %20 
                                         f32 %168 = OpLoad %167 
                                         f32 %169 = OpFMul %165 %168 
                                Uniform f32* %170 = OpAccessChain %17 %166 %154 
                                         f32 %171 = OpLoad %170 
                                         f32 %172 = OpFAdd %169 %171 
                                Private f32* %173 = OpAccessChain %9 %30 
                                                      OpStore %173 %172 
                                Private f32* %174 = OpAccessChain %9 %30 
                                         f32 %175 = OpLoad %174 
                                         f32 %177 = OpExtInst %1 43 %175 %176 %73 
                                Private f32* %178 = OpAccessChain %9 %30 
                                                      OpStore %178 %177 
                         read_only Texture2D %182 = OpLoad %181 
                                     sampler %184 = OpLoad %183 
                  read_only Texture2DSampled %185 = OpSampledImage %182 %184 
                                       f32_4 %186 = OpLoad %38 
                                       f32_2 %187 = OpVectorShuffle %186 %186 0 1 
                                       f32_4 %188 = OpImageSampleImplicitLod %185 %187 
                                         f32 %189 = OpCompositeExtract %188 0 
                                Private f32* %190 = OpAccessChain %180 %30 
                                                      OpStore %190 %189 
                                Private f32* %192 = OpAccessChain %180 %30 
                                         f32 %193 = OpLoad %192 
                                         f32 %194 = OpFNegate %193 
                                         f32 %195 = OpFAdd %194 %73 
                                                      OpStore %191 %195 
                                Private f32* %196 = OpAccessChain %9 %30 
                                         f32 %197 = OpLoad %196 
                                         f32 %198 = OpLoad %191 
                                         f32 %199 = OpFMul %197 %198 
                                Private f32* %200 = OpAccessChain %180 %30 
                                         f32 %201 = OpLoad %200 
                                         f32 %202 = OpFAdd %199 %201 
                                Private f32* %203 = OpAccessChain %9 %30 
                                                      OpStore %203 %202 
                                       f32_4 %204 = OpLoad %76 
                                       f32_2 %205 = OpVectorShuffle %204 %204 1 1 
                              Uniform f32_4* %207 = OpAccessChain %17 %206 %19 
                                       f32_4 %208 = OpLoad %207 
                                       f32_2 %209 = OpVectorShuffle %208 %208 0 1 
                                       f32_2 %210 = OpFMul %205 %209 
                                                      OpStore %180 %210 
                              Uniform f32_4* %211 = OpAccessChain %17 %206 %94 
                                       f32_4 %212 = OpLoad %211 
                                       f32_2 %213 = OpVectorShuffle %212 %212 0 1 
                                       f32_4 %214 = OpLoad %76 
                                       f32_2 %215 = OpVectorShuffle %214 %214 0 0 
                                       f32_2 %216 = OpFMul %213 %215 
                                       f32_2 %217 = OpLoad %180 
                                       f32_2 %218 = OpFAdd %216 %217 
                                                      OpStore %180 %218 
                              Uniform f32_4* %219 = OpAccessChain %17 %206 %64 
                                       f32_4 %220 = OpLoad %219 
                                       f32_2 %221 = OpVectorShuffle %220 %220 0 1 
                                       f32_4 %222 = OpLoad %76 
                                       f32_2 %223 = OpVectorShuffle %222 %222 3 3 
                                       f32_2 %224 = OpFMul %221 %223 
                                       f32_2 %225 = OpLoad %180 
                                       f32_2 %226 = OpFAdd %224 %225 
                                                      OpStore %180 %226 
                                       f32_4 %227 = OpLoad %76 
                                       f32_3 %228 = OpVectorShuffle %227 %227 0 1 3 
                              Uniform f32_3* %230 = OpAccessChain %17 %94 
                                       f32_3 %231 = OpLoad %230 
                                       f32_3 %232 = OpFNegate %231 
                                       f32_3 %233 = OpFAdd %228 %232 
                                       f32_4 %234 = OpLoad %76 
                                       f32_4 %235 = OpVectorShuffle %234 %233 4 5 6 3 
                                                      OpStore %76 %235 
                                       f32_2 %236 = OpLoad %180 
                              Uniform f32_4* %237 = OpAccessChain %17 %206 %86 
                                       f32_4 %238 = OpLoad %237 
                                       f32_2 %239 = OpVectorShuffle %238 %238 0 1 
                                       f32_2 %240 = OpFAdd %236 %239 
                                                      OpStore %180 %240 
                         read_only Texture2D %242 = OpLoad %241 
                                     sampler %244 = OpLoad %243 
                  read_only Texture2DSampled %245 = OpSampledImage %242 %244 
                                       f32_2 %246 = OpLoad %180 
                                       f32_4 %248 = OpImageSampleImplicitLod %245 %246 Bias %10 
                                         f32 %249 = OpCompositeExtract %248 3 
                                Private f32* %250 = OpAccessChain %180 %30 
                                                      OpStore %250 %249 
                                Private f32* %251 = OpAccessChain %180 %30 
                                         f32 %252 = OpLoad %251 
                                Private f32* %253 = OpAccessChain %9 %30 
                                         f32 %254 = OpLoad %253 
                                         f32 %255 = OpFMul %252 %254 
                                Private f32* %256 = OpAccessChain %9 %30 
                                                      OpStore %256 %255 
                                       f32_3 %257 = OpLoad %9 
                                       f32_3 %258 = OpVectorShuffle %257 %257 0 0 0 
                              Uniform f32_4* %260 = OpAccessChain %17 %259 
                                       f32_4 %261 = OpLoad %260 
                                       f32_3 %262 = OpVectorShuffle %261 %261 0 1 2 
                                       f32_3 %263 = OpFMul %258 %262 
                                                      OpStore %9 %263 
                                       f32_4 %264 = OpLoad %76 
                                       f32_3 %265 = OpVectorShuffle %264 %264 0 1 2 
                                       f32_4 %266 = OpLoad %76 
                                       f32_3 %267 = OpVectorShuffle %266 %266 0 1 2 
                                         f32 %268 = OpDot %265 %267 
                                                      OpStore %49 %268 
                                         f32 %269 = OpLoad %49 
                                         f32 %270 = OpExtInst %1 32 %269 
                                                      OpStore %49 %270 
                                       f32_4 %271 = OpLoad %76 
                                       f32_3 %272 = OpVectorShuffle %271 %271 0 1 2 
                                       f32_3 %273 = OpFNegate %272 
                                         f32 %274 = OpLoad %49 
                                       f32_3 %275 = OpCompositeConstruct %274 %274 %274 
                                       f32_3 %276 = OpFMul %273 %275 
                              Uniform f32_4* %278 = OpAccessChain %17 %277 
                                       f32_4 %279 = OpLoad %278 
                                       f32_3 %280 = OpVectorShuffle %279 %279 0 1 2 
                                       f32_3 %281 = OpFNegate %280 
                                       f32_3 %282 = OpFAdd %276 %281 
                                       f32_4 %283 = OpLoad %83 
                                       f32_4 %284 = OpVectorShuffle %283 %282 4 5 6 3 
                                                      OpStore %83 %284 
                                         f32 %285 = OpLoad %49 
                                       f32_3 %286 = OpCompositeConstruct %285 %285 %285 
                                       f32_4 %287 = OpLoad %76 
                                       f32_3 %288 = OpVectorShuffle %287 %287 0 1 2 
                                       f32_3 %289 = OpFMul %286 %288 
                                       f32_4 %290 = OpLoad %76 
                                       f32_4 %291 = OpVectorShuffle %290 %289 4 5 6 3 
                                                      OpStore %76 %291 
                                       f32_4 %292 = OpLoad %83 
                                       f32_3 %293 = OpVectorShuffle %292 %292 0 1 2 
                                       f32_4 %294 = OpLoad %83 
                                       f32_3 %295 = OpVectorShuffle %294 %294 0 1 2 
                                         f32 %296 = OpDot %293 %295 
                                                      OpStore %49 %296 
                                         f32 %297 = OpLoad %49 
                                         f32 %299 = OpExtInst %1 40 %297 %298 
                                                      OpStore %49 %299 
                                         f32 %300 = OpLoad %49 
                                         f32 %301 = OpExtInst %1 32 %300 
                                                      OpStore %49 %301 
                                         f32 %302 = OpLoad %49 
                                       f32_3 %303 = OpCompositeConstruct %302 %302 %302 
                                       f32_4 %304 = OpLoad %83 
                                       f32_3 %305 = OpVectorShuffle %304 %304 0 1 2 
                                       f32_3 %306 = OpFMul %303 %305 
                                       f32_4 %307 = OpLoad %83 
                                       f32_4 %308 = OpVectorShuffle %307 %306 4 5 6 3 
                                                      OpStore %83 %308 
                         read_only Texture2D %311 = OpLoad %310 
                                     sampler %313 = OpLoad %312 
                  read_only Texture2DSampled %314 = OpSampledImage %311 %313 
                                       f32_4 %315 = OpLoad %38 
                                       f32_2 %316 = OpVectorShuffle %315 %315 0 1 
                                       f32_4 %317 = OpImageSampleImplicitLod %314 %316 
                                       f32_3 %318 = OpVectorShuffle %317 %317 0 1 2 
                                                      OpStore %309 %318 
                                       f32_3 %319 = OpLoad %309 
                                       f32_3 %322 = OpFMul %319 %321 
                                       f32_3 %325 = OpFAdd %322 %324 
                                                      OpStore %309 %325 
                                       f32_3 %326 = OpLoad %309 
                                       f32_3 %327 = OpLoad %309 
                                         f32 %328 = OpDot %326 %327 
                                                      OpStore %49 %328 
                                         f32 %329 = OpLoad %49 
                                         f32 %330 = OpExtInst %1 32 %329 
                                                      OpStore %49 %330 
                                         f32 %331 = OpLoad %49 
                                       f32_3 %332 = OpCompositeConstruct %331 %331 %331 
                                       f32_3 %333 = OpLoad %309 
                                       f32_3 %334 = OpFMul %332 %333 
                                                      OpStore %309 %334 
                                       f32_3 %335 = OpLoad %309 
                                       f32_4 %336 = OpLoad %83 
                                       f32_3 %337 = OpVectorShuffle %336 %336 0 1 2 
                                         f32 %338 = OpDot %335 %337 
                                                      OpStore %49 %338 
                                         f32 %339 = OpLoad %49 
                                         f32 %340 = OpExtInst %1 43 %339 %176 %73 
                                                      OpStore %49 %340 
                              Uniform f32_4* %342 = OpAccessChain %17 %277 
                                       f32_4 %343 = OpLoad %342 
                                       f32_3 %344 = OpVectorShuffle %343 %343 0 1 2 
                                       f32_3 %345 = OpFNegate %344 
                                       f32_4 %346 = OpLoad %83 
                                       f32_3 %347 = OpVectorShuffle %346 %346 0 1 2 
                                         f32 %348 = OpDot %345 %347 
                                                      OpStore %341 %348 
                                         f32 %349 = OpLoad %341 
                                         f32 %350 = OpExtInst %1 43 %349 %176 %73 
                                                      OpStore %341 %350 
                         read_only Texture2D %352 = OpLoad %351 
                                     sampler %354 = OpLoad %353 
                  read_only Texture2DSampled %355 = OpSampledImage %352 %354 
                                       f32_4 %356 = OpLoad %38 
                                       f32_2 %357 = OpVectorShuffle %356 %356 0 1 
                                       f32_4 %358 = OpImageSampleImplicitLod %355 %357 
                                                      OpStore %83 %358 
                         read_only Texture2D %360 = OpLoad %359 
                                     sampler %362 = OpLoad %361 
                  read_only Texture2DSampled %363 = OpSampledImage %360 %362 
                                       f32_4 %364 = OpLoad %38 
                                       f32_2 %365 = OpVectorShuffle %364 %364 0 1 
                                       f32_4 %366 = OpImageSampleImplicitLod %363 %365 
                                       f32_3 %367 = OpVectorShuffle %366 %366 0 1 2 
                                       f32_4 %368 = OpLoad %38 
                                       f32_4 %369 = OpVectorShuffle %368 %367 4 5 2 6 
                                                      OpStore %38 %369 
                                       f32_4 %371 = OpLoad %83 
                                       f32_4 %372 = OpVectorShuffle %371 %371 3 0 1 2 
                                       f32_4 %373 = OpFNegate %372 
                                       f32_4 %375 = OpFAdd %373 %374 
                                                      OpStore %370 %375 
                                Private f32* %377 = OpAccessChain %370 %30 
                                         f32 %378 = OpLoad %377 
                                Private f32* %379 = OpAccessChain %370 %30 
                                         f32 %380 = OpLoad %379 
                                         f32 %381 = OpFMul %378 %380 
                                                      OpStore %376 %381 
                                         f32 %382 = OpLoad %376 
                                         f32 %384 = OpExtInst %1 40 %382 %383 
                                                      OpStore %376 %384 
                                         f32 %386 = OpLoad %376 
                                         f32 %387 = OpLoad %376 
                                         f32 %388 = OpFMul %386 %387 
                                                      OpStore %385 %388 
                                         f32 %390 = OpLoad %49 
                                         f32 %391 = OpLoad %385 
                                         f32 %392 = OpFMul %390 %391 
                                         f32 %393 = OpLoad %49 
                                         f32 %394 = OpFNegate %393 
                                         f32 %395 = OpFAdd %392 %394 
                                                      OpStore %389 %395 
                                         f32 %396 = OpLoad %389 
                                         f32 %397 = OpLoad %49 
                                         f32 %398 = OpFMul %396 %397 
                                         f32 %399 = OpFAdd %398 %73 
                                                      OpStore %49 %399 
                                         f32 %400 = OpLoad %49 
                                         f32 %401 = OpLoad %49 
                                         f32 %402 = OpFMul %400 %401 
                                         f32 %404 = OpFAdd %402 %403 
                                                      OpStore %49 %404 
                                         f32 %405 = OpLoad %385 
                                         f32 %407 = OpFMul %405 %406 
                                                      OpStore %385 %407 
                                         f32 %408 = OpLoad %385 
                                         f32 %409 = OpLoad %49 
                                         f32 %410 = OpFDiv %408 %409 
                                                      OpStore %49 %410 
                                       f32_3 %411 = OpLoad %309 
                                       f32_4 %412 = OpLoad %76 
                                       f32_3 %413 = OpVectorShuffle %412 %412 0 1 2 
                                       f32_3 %414 = OpFNegate %413 
                                         f32 %415 = OpDot %411 %414 
                                Private f32* %416 = OpAccessChain %76 %30 
                                                      OpStore %416 %415 
                                       f32_3 %418 = OpLoad %309 
                              Uniform f32_4* %419 = OpAccessChain %17 %277 
                                       f32_4 %420 = OpLoad %419 
                                       f32_3 %421 = OpVectorShuffle %420 %420 0 1 2 
                                       f32_3 %422 = OpFNegate %421 
                                         f32 %423 = OpDot %418 %422 
                                                      OpStore %417 %423 
                                         f32 %424 = OpLoad %417 
                                         f32 %425 = OpExtInst %1 43 %424 %176 %73 
                                                      OpStore %417 %425 
                                         f32 %427 = OpLoad %376 
                                         f32 %428 = OpFNegate %427 
                                         f32 %429 = OpFAdd %428 %73 
                                                      OpStore %426 %429 
                                Private f32* %430 = OpAccessChain %76 %30 
                                         f32 %431 = OpLoad %430 
                                         f32 %432 = OpExtInst %1 4 %431 
                                         f32 %433 = OpLoad %426 
                                         f32 %434 = OpFMul %432 %433 
                                         f32 %435 = OpLoad %376 
                                         f32 %436 = OpFAdd %434 %435 
                                                      OpStore %385 %436 
                                         f32 %437 = OpLoad %417 
                                         f32 %438 = OpLoad %426 
                                         f32 %439 = OpFMul %437 %438 
                                         f32 %440 = OpLoad %376 
                                         f32 %441 = OpFAdd %439 %440 
                                                      OpStore %426 %441 
                                         f32 %442 = OpLoad %426 
                                Private f32* %443 = OpAccessChain %76 %30 
                                         f32 %444 = OpLoad %443 
                                         f32 %445 = OpExtInst %1 4 %444 
                                         f32 %446 = OpFMul %442 %445 
                                                      OpStore %426 %446 
                                Private f32* %447 = OpAccessChain %76 %30 
                                         f32 %448 = OpLoad %447 
                                         f32 %449 = OpExtInst %1 4 %448 
                                         f32 %450 = OpFNegate %449 
                                         f32 %451 = OpFAdd %450 %73 
                                Private f32* %452 = OpAccessChain %76 %30 
                                                      OpStore %452 %451 
                                         f32 %453 = OpLoad %417 
                                         f32 %454 = OpLoad %385 
                                         f32 %455 = OpFMul %453 %454 
                                         f32 %456 = OpLoad %426 
                                         f32 %457 = OpFAdd %455 %456 
                                                      OpStore %426 %457 
                                         f32 %458 = OpLoad %426 
                                         f32 %460 = OpFAdd %458 %459 
                                                      OpStore %426 %460 
                                         f32 %462 = OpLoad %426 
                                         f32 %463 = OpFDiv %461 %462 
                                                      OpStore %426 %463 
                                         f32 %464 = OpLoad %49 
                                         f32 %465 = OpLoad %426 
                                         f32 %466 = OpFMul %464 %465 
                                                      OpStore %49 %466 
                                         f32 %467 = OpLoad %417 
                                         f32 %468 = OpLoad %49 
                                         f32 %469 = OpFMul %467 %468 
                                                      OpStore %49 %469 
                                         f32 %470 = OpLoad %49 
                                         f32 %472 = OpFMul %470 %471 
                                                      OpStore %49 %472 
                                         f32 %473 = OpLoad %49 
                                         f32 %474 = OpExtInst %1 40 %473 %176 
                                                      OpStore %49 %474 
                                       f32_4 %475 = OpLoad %83 
                                       f32_3 %476 = OpVectorShuffle %475 %475 0 1 2 
                                       f32_4 %477 = OpLoad %83 
                                       f32_3 %478 = OpVectorShuffle %477 %477 0 1 2 
                                         f32 %479 = OpDot %476 %478 
                                                      OpStore %426 %479 
                                         f32 %483 = OpLoad %426 
                                        bool %484 = OpFOrdNotEqual %483 %176 
                                                      OpStore %482 %484 
                                        bool %485 = OpLoad %482 
                                         f32 %486 = OpSelect %485 %73 %176 
                                                      OpStore %426 %486 
                                         f32 %487 = OpLoad %49 
                                         f32 %488 = OpLoad %426 
                                         f32 %489 = OpFMul %487 %488 
                                                      OpStore %49 %489 
                                       f32_3 %490 = OpLoad %9 
                                         f32 %491 = OpLoad %49 
                                       f32_3 %492 = OpCompositeConstruct %491 %491 %491 
                                       f32_3 %493 = OpFMul %490 %492 
                                                      OpStore %309 %493 
                                         f32 %494 = OpLoad %341 
                                         f32 %495 = OpFNegate %494 
                                         f32 %496 = OpFAdd %495 %73 
                                                      OpStore %49 %496 
                                         f32 %497 = OpLoad %341 
                                         f32 %498 = OpLoad %341 
                                         f32 %499 = OpFMul %497 %498 
                                                      OpStore %341 %499 
                                         f32 %500 = OpLoad %341 
                                       f32_2 %501 = OpCompositeConstruct %500 %500 
                                       f32_4 %502 = OpLoad %370 
                                       f32_2 %503 = OpVectorShuffle %502 %502 0 0 
                                         f32 %504 = OpDot %501 %503 
                                                      OpStore %341 %504 
                                         f32 %505 = OpLoad %341 
                                         f32 %507 = OpFAdd %505 %506 
                                                      OpStore %341 %507 
                                         f32 %508 = OpLoad %49 
                                         f32 %509 = OpLoad %49 
                                         f32 %510 = OpFMul %508 %509 
                                                      OpStore %426 %510 
                                         f32 %511 = OpLoad %426 
                                         f32 %512 = OpLoad %426 
                                         f32 %513 = OpFMul %511 %512 
                                                      OpStore %426 %513 
                                         f32 %514 = OpLoad %49 
                                         f32 %515 = OpLoad %426 
                                         f32 %516 = OpFMul %514 %515 
                                                      OpStore %49 %516 
                                       f32_4 %517 = OpLoad %370 
                                       f32_3 %518 = OpVectorShuffle %517 %517 1 2 3 
                                         f32 %519 = OpLoad %49 
                                       f32_3 %520 = OpCompositeConstruct %519 %519 %519 
                                       f32_3 %521 = OpFMul %518 %520 
                                       f32_4 %522 = OpLoad %83 
                                       f32_3 %523 = OpVectorShuffle %522 %522 0 1 2 
                                       f32_3 %524 = OpFAdd %521 %523 
                                       f32_4 %525 = OpLoad %83 
                                       f32_4 %526 = OpVectorShuffle %525 %524 4 5 6 3 
                                                      OpStore %83 %526 
                                       f32_4 %527 = OpLoad %83 
                                       f32_3 %528 = OpVectorShuffle %527 %527 0 1 2 
                                       f32_3 %529 = OpLoad %309 
                                       f32_3 %530 = OpFMul %528 %529 
                                       f32_4 %531 = OpLoad %83 
                                       f32_4 %532 = OpVectorShuffle %531 %530 4 5 6 3 
                                                      OpStore %83 %532 
                                Private f32* %533 = OpAccessChain %76 %30 
                                         f32 %534 = OpLoad %533 
                                Private f32* %535 = OpAccessChain %76 %30 
                                         f32 %536 = OpLoad %535 
                                         f32 %537 = OpFMul %534 %536 
                                                      OpStore %49 %537 
                                         f32 %538 = OpLoad %49 
                                         f32 %539 = OpLoad %49 
                                         f32 %540 = OpFMul %538 %539 
                                                      OpStore %49 %540 
                                Private f32* %541 = OpAccessChain %76 %30 
                                         f32 %542 = OpLoad %541 
                                         f32 %543 = OpLoad %49 
                                         f32 %544 = OpFMul %542 %543 
                                                      OpStore %49 %544 
                                         f32 %545 = OpLoad %341 
                                         f32 %546 = OpLoad %49 
                                         f32 %547 = OpFMul %545 %546 
                                         f32 %548 = OpFAdd %547 %73 
                                                      OpStore %49 %548 
                                         f32 %549 = OpLoad %417 
                                         f32 %550 = OpFNegate %549 
                                         f32 %551 = OpFAdd %550 %73 
                                Private f32* %552 = OpAccessChain %76 %30 
                                                      OpStore %552 %551 
                                Private f32* %553 = OpAccessChain %76 %30 
                                         f32 %554 = OpLoad %553 
                                Private f32* %555 = OpAccessChain %76 %30 
                                         f32 %556 = OpLoad %555 
                                         f32 %557 = OpFMul %554 %556 
                                                      OpStore %426 %557 
                                         f32 %558 = OpLoad %426 
                                         f32 %559 = OpLoad %426 
                                         f32 %560 = OpFMul %558 %559 
                                                      OpStore %426 %560 
                                Private f32* %561 = OpAccessChain %76 %30 
                                         f32 %562 = OpLoad %561 
                                         f32 %563 = OpLoad %426 
                                         f32 %564 = OpFMul %562 %563 
                                Private f32* %565 = OpAccessChain %76 %30 
                                                      OpStore %565 %564 
                                         f32 %566 = OpLoad %341 
                                Private f32* %567 = OpAccessChain %76 %30 
                                         f32 %568 = OpLoad %567 
                                         f32 %569 = OpFMul %566 %568 
                                         f32 %570 = OpFAdd %569 %73 
                                                      OpStore %341 %570 
                                         f32 %571 = OpLoad %49 
                                         f32 %572 = OpLoad %341 
                                         f32 %573 = OpFMul %571 %572 
                                                      OpStore %49 %573 
                                         f32 %574 = OpLoad %417 
                                         f32 %575 = OpLoad %49 
                                         f32 %576 = OpFMul %574 %575 
                                                      OpStore %49 %576 
                                         f32 %577 = OpLoad %49 
                                       f32_3 %578 = OpCompositeConstruct %577 %577 %577 
                                       f32_3 %579 = OpLoad %9 
                                       f32_3 %580 = OpFMul %578 %579 
                                                      OpStore %9 %580 
                                       f32_4 %583 = OpLoad %38 
                                       f32_3 %584 = OpVectorShuffle %583 %583 0 1 3 
                                       f32_3 %585 = OpLoad %9 
                                       f32_3 %586 = OpFMul %584 %585 
                                       f32_4 %587 = OpLoad %83 
                                       f32_3 %588 = OpVectorShuffle %587 %587 0 1 2 
                                       f32_3 %589 = OpFAdd %586 %588 
                                       f32_4 %590 = OpLoad %582 
                                       f32_4 %591 = OpVectorShuffle %590 %589 4 5 6 3 
                                                      OpStore %582 %591 
                                 Output f32* %593 = OpAccessChain %582 %154 
                                                      OpStore %593 %73 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "POINT" "SHADOWS_CUBE" "UNITY_HDR_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "POINT" "SHADOWS_CUBE" "UNITY_HDR_ON" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _LightProjectionParams;
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
UNITY_LOCATION(0) uniform  sampler2D _CameraDepthTexture;
UNITY_LOCATION(1) uniform  sampler2D _LightTextureB0;
UNITY_LOCATION(2) uniform  sampler2D _CameraGBufferTexture0;
UNITY_LOCATION(3) uniform  sampler2D _CameraGBufferTexture1;
UNITY_LOCATION(4) uniform  sampler2D _CameraGBufferTexture2;
UNITY_LOCATION(5) uniform  samplerCube _ShadowMapTexture;
UNITY_LOCATION(6) uniform  samplerCubeShadow hlslcc_zcmp_ShadowMapTexture;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
vec3 u_xlat6;
float u_xlat7;
float u_xlat12;
float u_xlat13;
float u_xlat18;
bool u_xlatb18;
float u_xlat19;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat2 = texture(_CameraDepthTexture, u_xlat1.xy);
    u_xlat18 = _ZBufferParams.x * u_xlat2.x + _ZBufferParams.y;
    u_xlat18 = float(1.0) / u_xlat18;
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat18 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat6.xyz = u_xlat2.xyw + (-_LightPos.xyz);
    u_xlat2.xyz = u_xlat2.xyw + (-_WorldSpaceCameraPos.xyz);
    u_xlat13 = max(abs(u_xlat6.y), abs(u_xlat6.x));
    u_xlat13 = max(abs(u_xlat6.z), u_xlat13);
    u_xlat13 = u_xlat13 + (-_LightProjectionParams.z);
    u_xlat13 = max(u_xlat13, 9.99999975e-06);
    u_xlat13 = u_xlat13 * _LightProjectionParams.w;
    u_xlat13 = _LightProjectionParams.y / u_xlat13;
    u_xlat13 = u_xlat13 + (-_LightProjectionParams.x);
    vec4 txVec0 = vec4(u_xlat6.xyz,u_xlat13);
    u_xlat13 = texture(hlslcc_zcmp_ShadowMapTexture, txVec0);
    u_xlat19 = (-_LightShadowData.x) + 1.0;
    u_xlat13 = u_xlat13 * u_xlat19 + _LightShadowData.x;
    u_xlat19 = (-u_xlat13) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat19 + u_xlat13;
    u_xlat13 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat19 = u_xlat13 * _LightPos.w;
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat3 = texture(_LightTextureB0, vec2(u_xlat19));
    u_xlat0.x = u_xlat0.x * u_xlat3.x;
    u_xlat3.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat4.xyz = (-u_xlat6.xyz) * vec3(u_xlat13) + (-u_xlat2.xyz);
    u_xlat0.xyz = u_xlat6.xyz * vec3(u_xlat13);
    u_xlat18 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat18 = max(u_xlat18, 0.00100000005);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat4.xyz = vec3(u_xlat18) * u_xlat4.xyz;
    u_xlat5 = texture(_CameraGBufferTexture2, u_xlat1.xy);
    u_xlat5.xyz = u_xlat5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat18 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat5.xyz = vec3(u_xlat18) * u_xlat5.xyz;
    u_xlat18 = dot(u_xlat5.xyz, u_xlat4.xyz);
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
    u_xlat13 = dot((-u_xlat0.xyz), u_xlat4.xyz);
    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
    u_xlat0.x = dot(u_xlat5.xyz, (-u_xlat0.xyz));
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat6.x = dot(u_xlat5.xyz, (-u_xlat2.xyz));
    u_xlat2 = texture(_CameraGBufferTexture1, u_xlat1.xy);
    u_xlat4 = texture(_CameraGBufferTexture0, u_xlat1.xy);
    u_xlat5 = (-u_xlat2.wxyz) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat12 = u_xlat5.x * u_xlat5.x;
    u_xlat12 = max(u_xlat12, 0.00200000009);
    u_xlat1.x = u_xlat12 * u_xlat12;
    u_xlat7 = u_xlat18 * u_xlat1.x + (-u_xlat18);
    u_xlat18 = u_xlat7 * u_xlat18 + 1.0;
    u_xlat18 = u_xlat18 * u_xlat18 + 1.00000001e-07;
    u_xlat1.x = u_xlat1.x * 0.318309873;
    u_xlat18 = u_xlat1.x / u_xlat18;
    u_xlat1.x = (-u_xlat12) + 1.0;
    u_xlat7 = abs(u_xlat6.x) * u_xlat1.x + u_xlat12;
    u_xlat12 = u_xlat0.x * u_xlat1.x + u_xlat12;
    u_xlat12 = u_xlat12 * abs(u_xlat6.x);
    u_xlat6.x = -abs(u_xlat6.x) + 1.0;
    u_xlat12 = u_xlat0.x * u_xlat7 + u_xlat12;
    u_xlat12 = u_xlat12 + 9.99999975e-06;
    u_xlat12 = 0.5 / u_xlat12;
    u_xlat12 = u_xlat18 * u_xlat12;
    u_xlat12 = u_xlat12 * 3.14159274;
    u_xlat12 = u_xlat0.x * u_xlat12;
    u_xlat12 = max(u_xlat12, 0.0);
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlatb18 = u_xlat18!=0.0;
    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
    u_xlat12 = u_xlat18 * u_xlat12;
    u_xlat1.xyw = u_xlat3.xyz * vec3(u_xlat12);
    u_xlat12 = (-u_xlat13) + 1.0;
    u_xlat18 = u_xlat13 * u_xlat13;
    u_xlat18 = dot(vec2(u_xlat18), u_xlat5.xx);
    u_xlat18 = u_xlat18 + -0.5;
    u_xlat13 = u_xlat12 * u_xlat12;
    u_xlat13 = u_xlat13 * u_xlat13;
    u_xlat12 = u_xlat12 * u_xlat13;
    u_xlat2.xyz = u_xlat5.yzw * vec3(u_xlat12) + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat1.xyw * u_xlat2.xyz;
    u_xlat12 = u_xlat6.x * u_xlat6.x;
    u_xlat12 = u_xlat12 * u_xlat12;
    u_xlat6.x = u_xlat6.x * u_xlat12;
    u_xlat6.x = u_xlat18 * u_xlat6.x + 1.0;
    u_xlat12 = (-u_xlat0.x) + 1.0;
    u_xlat19 = u_xlat12 * u_xlat12;
    u_xlat19 = u_xlat19 * u_xlat19;
    u_xlat12 = u_xlat12 * u_xlat19;
    u_xlat12 = u_xlat18 * u_xlat12 + 1.0;
    u_xlat6.x = u_xlat6.x * u_xlat12;
    u_xlat0.x = u_xlat0.x * u_xlat6.x;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat3.xyz;
    SV_Target0.xyz = u_xlat4.xyz * u_xlat0.xyz + u_xlat1.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "POINT" "SHADOWS_CUBE" "UNITY_HDR_ON" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 192
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %80 %102 %169 %175 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpMemberDecorate %78 0 BuiltIn 78 
                                                      OpMemberDecorate %78 1 BuiltIn 78 
                                                      OpMemberDecorate %78 2 BuiltIn 78 
                                                      OpDecorate %78 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 102 
                                                      OpDecorate %169 Location 169 
                                                      OpDecorate vs_TEXCOORD1 Location 175 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %16 %17 %18 %6 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 1 
                                              %24 = OpTypePointer Uniform %7 
                                          i32 %28 = OpConstant 0 
                                          i32 %36 = OpConstant 2 
                                          i32 %45 = OpConstant 3 
                               Private f32_4* %49 = OpVariable Private 
                                          u32 %76 = OpConstant 1 
                                              %77 = OpTypeArray %6 %76 
                                              %78 = OpTypeStruct %7 %6 %77 
                                              %79 = OpTypePointer Output %78 
         Output struct {f32_4; f32; f32[1];}* %80 = OpVariable Output 
                                              %82 = OpTypePointer Output %7 
                                              %84 = OpTypePointer Private %6 
                                          u32 %87 = OpConstant 0 
                                              %88 = OpTypePointer Uniform %6 
                               Private f32_4* %93 = OpVariable Private 
                                              %94 = OpTypeVector %6 3 
                                          f32 %97 = OpConstant 3.674022E-40 
                                        f32_3 %98 = OpConstantComposite %97 %97 %97 
                       Output f32_4* vs_TEXCOORD0 = OpVariable Output 
                                             %103 = OpTypeVector %6 2 
                                         f32 %158 = OpConstant 3.674022E-40 
                                         f32 %159 = OpConstant 3.674022E-40 
                                       f32_3 %160 = OpConstantComposite %158 %158 %159 
                                             %168 = OpTypePointer Input %94 
                                Input f32_3* %169 = OpVariable Input 
                                             %174 = OpTypePointer Output %94 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                                         i32 %176 = OpConstant 4 
                                             %186 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %25 = OpAccessChain %21 %23 %23 
                                        f32_4 %26 = OpLoad %25 
                                        f32_4 %27 = OpFMul %13 %26 
                                                      OpStore %9 %27 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %28 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %44 = OpLoad %9 
                               Uniform f32_4* %46 = OpAccessChain %21 %23 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_4 %48 = OpFAdd %44 %47 
                                                      OpStore %9 %48 
                                        f32_4 %50 = OpLoad %9 
                                        f32_4 %51 = OpVectorShuffle %50 %50 1 1 1 1 
                               Uniform f32_4* %52 = OpAccessChain %21 %45 %23 
                                        f32_4 %53 = OpLoad %52 
                                        f32_4 %54 = OpFMul %51 %53 
                                                      OpStore %49 %54 
                               Uniform f32_4* %55 = OpAccessChain %21 %45 %28 
                                        f32_4 %56 = OpLoad %55 
                                        f32_4 %57 = OpLoad %9 
                                        f32_4 %58 = OpVectorShuffle %57 %57 0 0 0 0 
                                        f32_4 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %49 
                                        f32_4 %61 = OpFAdd %59 %60 
                                                      OpStore %49 %61 
                               Uniform f32_4* %62 = OpAccessChain %21 %45 %36 
                                        f32_4 %63 = OpLoad %62 
                                        f32_4 %64 = OpLoad %9 
                                        f32_4 %65 = OpVectorShuffle %64 %64 2 2 2 2 
                                        f32_4 %66 = OpFMul %63 %65 
                                        f32_4 %67 = OpLoad %49 
                                        f32_4 %68 = OpFAdd %66 %67 
                                                      OpStore %49 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %45 %45 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %9 
                                        f32_4 %72 = OpVectorShuffle %71 %71 3 3 3 3 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %49 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %49 %75 
                                        f32_4 %81 = OpLoad %49 
                                Output f32_4* %83 = OpAccessChain %80 %28 
                                                      OpStore %83 %81 
                                 Private f32* %85 = OpAccessChain %49 %76 
                                          f32 %86 = OpLoad %85 
                                 Uniform f32* %89 = OpAccessChain %21 %28 %87 
                                          f32 %90 = OpLoad %89 
                                          f32 %91 = OpFMul %86 %90 
                                 Private f32* %92 = OpAccessChain %49 %76 
                                                      OpStore %92 %91 
                                        f32_4 %95 = OpLoad %49 
                                        f32_3 %96 = OpVectorShuffle %95 %95 0 3 1 
                                        f32_3 %99 = OpFMul %96 %98 
                                       f32_4 %100 = OpLoad %93 
                                       f32_4 %101 = OpVectorShuffle %100 %99 4 1 5 6 
                                                      OpStore %93 %101 
                                       f32_4 %104 = OpLoad %49 
                                       f32_2 %105 = OpVectorShuffle %104 %104 2 3 
                                       f32_4 %106 = OpLoad vs_TEXCOORD0 
                                       f32_4 %107 = OpVectorShuffle %106 %105 0 1 4 5 
                                                      OpStore vs_TEXCOORD0 %107 
                                       f32_4 %108 = OpLoad %93 
                                       f32_2 %109 = OpVectorShuffle %108 %108 2 2 
                                       f32_4 %110 = OpLoad %93 
                                       f32_2 %111 = OpVectorShuffle %110 %110 0 3 
                                       f32_2 %112 = OpFAdd %109 %111 
                                       f32_4 %113 = OpLoad vs_TEXCOORD0 
                                       f32_4 %114 = OpVectorShuffle %113 %112 4 5 2 3 
                                                      OpStore vs_TEXCOORD0 %114 
                                       f32_4 %115 = OpLoad %9 
                                       f32_3 %116 = OpVectorShuffle %115 %115 1 1 1 
                              Uniform f32_4* %117 = OpAccessChain %21 %36 %23 
                                       f32_4 %118 = OpLoad %117 
                                       f32_3 %119 = OpVectorShuffle %118 %118 0 1 2 
                                       f32_3 %120 = OpFMul %116 %119 
                                       f32_4 %121 = OpLoad %49 
                                       f32_4 %122 = OpVectorShuffle %121 %120 4 5 6 3 
                                                      OpStore %49 %122 
                              Uniform f32_4* %123 = OpAccessChain %21 %36 %28 
                                       f32_4 %124 = OpLoad %123 
                                       f32_3 %125 = OpVectorShuffle %124 %124 0 1 2 
                                       f32_4 %126 = OpLoad %9 
                                       f32_3 %127 = OpVectorShuffle %126 %126 0 0 0 
                                       f32_3 %128 = OpFMul %125 %127 
                                       f32_4 %129 = OpLoad %49 
                                       f32_3 %130 = OpVectorShuffle %129 %129 0 1 2 
                                       f32_3 %131 = OpFAdd %128 %130 
                                       f32_4 %132 = OpLoad %49 
                                       f32_4 %133 = OpVectorShuffle %132 %131 4 5 6 3 
                                                      OpStore %49 %133 
                              Uniform f32_4* %134 = OpAccessChain %21 %36 %36 
                                       f32_4 %135 = OpLoad %134 
                                       f32_3 %136 = OpVectorShuffle %135 %135 0 1 2 
                                       f32_4 %137 = OpLoad %9 
                                       f32_3 %138 = OpVectorShuffle %137 %137 2 2 2 
                                       f32_3 %139 = OpFMul %136 %138 
                                       f32_4 %140 = OpLoad %49 
                                       f32_3 %141 = OpVectorShuffle %140 %140 0 1 2 
                                       f32_3 %142 = OpFAdd %139 %141 
                                       f32_4 %143 = OpLoad %9 
                                       f32_4 %144 = OpVectorShuffle %143 %142 4 5 6 3 
                                                      OpStore %9 %144 
                              Uniform f32_4* %145 = OpAccessChain %21 %36 %45 
                                       f32_4 %146 = OpLoad %145 
                                       f32_3 %147 = OpVectorShuffle %146 %146 0 1 2 
                                       f32_4 %148 = OpLoad %9 
                                       f32_3 %149 = OpVectorShuffle %148 %148 3 3 3 
                                       f32_3 %150 = OpFMul %147 %149 
                                       f32_4 %151 = OpLoad %9 
                                       f32_3 %152 = OpVectorShuffle %151 %151 0 1 2 
                                       f32_3 %153 = OpFAdd %150 %152 
                                       f32_4 %154 = OpLoad %9 
                                       f32_4 %155 = OpVectorShuffle %154 %153 4 5 6 3 
                                                      OpStore %9 %155 
                                       f32_4 %156 = OpLoad %9 
                                       f32_3 %157 = OpVectorShuffle %156 %156 0 1 2 
                                       f32_3 %161 = OpFMul %157 %160 
                                       f32_4 %162 = OpLoad %49 
                                       f32_4 %163 = OpVectorShuffle %162 %161 4 5 6 3 
                                                      OpStore %49 %163 
                                       f32_4 %164 = OpLoad %9 
                                       f32_3 %165 = OpVectorShuffle %164 %164 0 1 2 
                                       f32_3 %166 = OpFNegate %165 
                                       f32_3 %167 = OpFMul %166 %160 
                                       f32_3 %170 = OpLoad %169 
                                       f32_3 %171 = OpFAdd %167 %170 
                                       f32_4 %172 = OpLoad %9 
                                       f32_4 %173 = OpVectorShuffle %172 %171 4 5 6 3 
                                                      OpStore %9 %173 
                                Uniform f32* %177 = OpAccessChain %21 %176 
                                         f32 %178 = OpLoad %177 
                                       f32_3 %179 = OpCompositeConstruct %178 %178 %178 
                                       f32_4 %180 = OpLoad %9 
                                       f32_3 %181 = OpVectorShuffle %180 %180 0 1 2 
                                       f32_3 %182 = OpFMul %179 %181 
                                       f32_4 %183 = OpLoad %49 
                                       f32_3 %184 = OpVectorShuffle %183 %183 0 1 2 
                                       f32_3 %185 = OpFAdd %182 %184 
                                                      OpStore vs_TEXCOORD1 %185 
                                 Output f32* %187 = OpAccessChain %80 %28 %76 
                                         f32 %188 = OpLoad %187 
                                         f32 %189 = OpFNegate %188 
                                 Output f32* %190 = OpAccessChain %80 %28 %76 
                                                      OpStore %190 %189 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 634
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %24 %39 %621 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpDecorate %13 ArrayStride 13 
                                                      OpMemberDecorate %14 0 Offset 14 
                                                      OpMemberDecorate %14 1 Offset 14 
                                                      OpMemberDecorate %14 2 Offset 14 
                                                      OpMemberDecorate %14 3 Offset 14 
                                                      OpMemberDecorate %14 4 Offset 14 
                                                      OpMemberDecorate %14 5 Offset 14 
                                                      OpMemberDecorate %14 6 Offset 14 
                                                      OpMemberDecorate %14 7 Offset 14 
                                                      OpMemberDecorate %14 8 Offset 14 
                                                      OpDecorate %14 Block 
                                                      OpDecorate %16 DescriptorSet 16 
                                                      OpDecorate %16 Binding 16 
                                                      OpDecorate vs_TEXCOORD1 Location 24 
                                                      OpDecorate vs_TEXCOORD0 Location 39 
                                                      OpDecorate %51 DescriptorSet 51 
                                                      OpDecorate %51 Binding 51 
                                                      OpDecorate %55 DescriptorSet 55 
                                                      OpDecorate %55 Binding 55 
                                                      OpDecorate %237 DescriptorSet 237 
                                                      OpDecorate %237 Binding 237 
                                                      OpDecorate %239 DescriptorSet 239 
                                                      OpDecorate %239 Binding 239 
                                                      OpDecorate %277 DescriptorSet 277 
                                                      OpDecorate %277 Binding 277 
                                                      OpDecorate %279 DescriptorSet 279 
                                                      OpDecorate %279 Binding 279 
                                                      OpDecorate %349 DescriptorSet 349 
                                                      OpDecorate %349 Binding 349 
                                                      OpDecorate %351 DescriptorSet 351 
                                                      OpDecorate %351 Binding 351 
                                                      OpDecorate %402 DescriptorSet 402 
                                                      OpDecorate %402 Binding 402 
                                                      OpDecorate %404 DescriptorSet 404 
                                                      OpDecorate %404 Binding 404 
                                                      OpDecorate %410 DescriptorSet 410 
                                                      OpDecorate %410 Binding 410 
                                                      OpDecorate %412 DescriptorSet 412 
                                                      OpDecorate %412 Binding 412 
                                                      OpDecorate %621 Location 621 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 3 
                                               %8 = OpTypePointer Private %7 
                                Private f32_3* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 4 
                                              %11 = OpTypeInt 32 0 
                                          u32 %12 = OpConstant 4 
                                              %13 = OpTypeArray %10 %12 
                                              %14 = OpTypeStruct %7 %10 %10 %13 %10 %10 %10 %10 %10 
                                              %15 = OpTypePointer Uniform %14 
Uniform struct {f32_3; f32_4; f32_4; f32_4[4]; f32_4; f32_4; f32_4; f32_4; f32_4;}* %16 = OpVariable Uniform 
                                              %17 = OpTypeInt 32 1 
                                          i32 %18 = OpConstant 1 
                                          u32 %19 = OpConstant 2 
                                              %20 = OpTypePointer Uniform %6 
                                              %23 = OpTypePointer Input %7 
                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                                              %25 = OpTypePointer Input %6 
                                          u32 %29 = OpConstant 0 
                                              %30 = OpTypePointer Private %6 
                                              %36 = OpTypePointer Private %10 
                               Private f32_4* %37 = OpVariable Private 
                                              %38 = OpTypePointer Input %10 
                        Input f32_4* vs_TEXCOORD0 = OpVariable Input 
                                              %40 = OpTypeVector %6 2 
                                 Private f32* %48 = OpVariable Private 
                                              %49 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %50 = OpTypePointer UniformConstant %49 
         UniformConstant read_only Texture2D* %51 = OpVariable UniformConstant 
                                              %53 = OpTypeSampler 
                                              %54 = OpTypePointer UniformConstant %53 
                     UniformConstant sampler* %55 = OpVariable UniformConstant 
                                              %57 = OpTypeSampledImage %49 
                                          i32 %63 = OpConstant 2 
                                          u32 %68 = OpConstant 1 
                                          f32 %72 = OpConstant 3.674022E-40 
                               Private f32_4* %75 = OpVariable Private 
                               Private f32_3* %82 = OpVariable Private 
                                          i32 %85 = OpConstant 3 
                                              %86 = OpTypePointer Uniform %10 
                                          i32 %91 = OpConstant 0 
                                         i32 %123 = OpConstant 6 
                                         u32 %146 = OpConstant 3 
                                         i32 %158 = OpConstant 5 
                                         f32 %168 = OpConstant 3.674022E-40 
                              Private f32_3* %171 = OpVariable Private 
                                         i32 %174 = OpConstant 7 
                                             %182 = OpTypePointer Uniform %7 
                                Private f32* %189 = OpVariable Private 
                                         i32 %203 = OpConstant 4 
                                         f32 %209 = OpConstant 3.674022E-40 
                                             %227 = OpTypePointer Function %10 
                                             %235 = OpTypeImage %6 Cube 0 0 0 1 Unknown 
                                             %236 = OpTypePointer UniformConstant %235 
      UniformConstant read_only TextureCube* %237 = OpVariable UniformConstant 
                    UniformConstant sampler* %239 = OpVariable UniformConstant 
                                             %241 = OpTypeImage %6 Cube 1 0 0 1 Unknown 
                                             %242 = OpTypeSampledImage %241 
                                Private f32* %247 = OpVariable Private 
        UniformConstant read_only Texture2D* %277 = OpVariable UniformConstant 
                    UniformConstant sampler* %279 = OpVariable UniformConstant 
                                         i32 %293 = OpConstant 8 
                              Private f32_4* %315 = OpVariable Private 
                                         f32 %337 = OpConstant 3.674022E-40 
                              Private f32_3* %348 = OpVariable Private 
        UniformConstant read_only Texture2D* %349 = OpVariable UniformConstant 
                    UniformConstant sampler* %351 = OpVariable UniformConstant 
                                         f32 %359 = OpConstant 3.674022E-40 
                                       f32_3 %360 = OpConstantComposite %359 %359 %359 
                                         f32 %362 = OpConstant 3.674022E-40 
                                       f32_3 %363 = OpConstantComposite %362 %362 %362 
        UniformConstant read_only Texture2D* %402 = OpVariable UniformConstant 
                    UniformConstant sampler* %404 = OpVariable UniformConstant 
        UniformConstant read_only Texture2D* %410 = OpVariable UniformConstant 
                    UniformConstant sampler* %412 = OpVariable UniformConstant 
                                       f32_4 %424 = OpConstantComposite %72 %72 %72 %72 
                                Private f32* %426 = OpVariable Private 
                                         f32 %433 = OpConstant 3.674022E-40 
                                Private f32* %435 = OpVariable Private 
                                Private f32* %439 = OpVariable Private 
                                         f32 %453 = OpConstant 3.674022E-40 
                                         f32 %456 = OpConstant 3.674022E-40 
                                         f32 %496 = OpConstant 3.674022E-40 
                                         f32 %507 = OpConstant 3.674022E-40 
                                             %516 = OpTypeBool 
                                             %517 = OpTypePointer Private %516 
                               Private bool* %518 = OpVariable Private 
                                         f32 %542 = OpConstant 3.674022E-40 
                                             %620 = OpTypePointer Output %10 
                               Output f32_4* %621 = OpVariable Output 
                                             %631 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_4* %228 = OpVariable Function 
                                 Uniform f32* %21 = OpAccessChain %16 %18 %19 
                                          f32 %22 = OpLoad %21 
                                   Input f32* %26 = OpAccessChain vs_TEXCOORD1 %19 
                                          f32 %27 = OpLoad %26 
                                          f32 %28 = OpFDiv %22 %27 
                                 Private f32* %31 = OpAccessChain %9 %29 
                                                      OpStore %31 %28 
                                        f32_3 %32 = OpLoad %9 
                                        f32_3 %33 = OpVectorShuffle %32 %32 0 0 0 
                                        f32_3 %34 = OpLoad vs_TEXCOORD1 
                                        f32_3 %35 = OpFMul %33 %34 
                                                      OpStore %9 %35 
                                        f32_4 %41 = OpLoad vs_TEXCOORD0 
                                        f32_2 %42 = OpVectorShuffle %41 %41 0 1 
                                        f32_4 %43 = OpLoad vs_TEXCOORD0 
                                        f32_2 %44 = OpVectorShuffle %43 %43 3 3 
                                        f32_2 %45 = OpFDiv %42 %44 
                                        f32_4 %46 = OpLoad %37 
                                        f32_4 %47 = OpVectorShuffle %46 %45 4 5 2 3 
                                                      OpStore %37 %47 
                          read_only Texture2D %52 = OpLoad %51 
                                      sampler %56 = OpLoad %55 
                   read_only Texture2DSampled %58 = OpSampledImage %52 %56 
                                        f32_4 %59 = OpLoad %37 
                                        f32_2 %60 = OpVectorShuffle %59 %59 0 1 
                                        f32_4 %61 = OpImageSampleImplicitLod %58 %60 
                                          f32 %62 = OpCompositeExtract %61 0 
                                                      OpStore %48 %62 
                                 Uniform f32* %64 = OpAccessChain %16 %63 %29 
                                          f32 %65 = OpLoad %64 
                                          f32 %66 = OpLoad %48 
                                          f32 %67 = OpFMul %65 %66 
                                 Uniform f32* %69 = OpAccessChain %16 %63 %68 
                                          f32 %70 = OpLoad %69 
                                          f32 %71 = OpFAdd %67 %70 
                                                      OpStore %48 %71 
                                          f32 %73 = OpLoad %48 
                                          f32 %74 = OpFDiv %72 %73 
                                                      OpStore %48 %74 
                                          f32 %76 = OpLoad %48 
                                        f32_3 %77 = OpCompositeConstruct %76 %76 %76 
                                        f32_3 %78 = OpLoad %9 
                                        f32_3 %79 = OpFMul %77 %78 
                                        f32_4 %80 = OpLoad %75 
                                        f32_4 %81 = OpVectorShuffle %80 %79 4 5 6 3 
                                                      OpStore %75 %81 
                                        f32_4 %83 = OpLoad %75 
                                        f32_3 %84 = OpVectorShuffle %83 %83 1 1 1 
                               Uniform f32_4* %87 = OpAccessChain %16 %85 %18 
                                        f32_4 %88 = OpLoad %87 
                                        f32_3 %89 = OpVectorShuffle %88 %88 0 1 2 
                                        f32_3 %90 = OpFMul %84 %89 
                                                      OpStore %82 %90 
                               Uniform f32_4* %92 = OpAccessChain %16 %85 %91 
                                        f32_4 %93 = OpLoad %92 
                                        f32_3 %94 = OpVectorShuffle %93 %93 0 1 2 
                                        f32_4 %95 = OpLoad %75 
                                        f32_3 %96 = OpVectorShuffle %95 %95 0 0 0 
                                        f32_3 %97 = OpFMul %94 %96 
                                        f32_3 %98 = OpLoad %82 
                                        f32_3 %99 = OpFAdd %97 %98 
                                       f32_4 %100 = OpLoad %75 
                                       f32_4 %101 = OpVectorShuffle %100 %99 4 5 2 6 
                                                      OpStore %75 %101 
                              Uniform f32_4* %102 = OpAccessChain %16 %85 %63 
                                       f32_4 %103 = OpLoad %102 
                                       f32_3 %104 = OpVectorShuffle %103 %103 0 1 2 
                                       f32_4 %105 = OpLoad %75 
                                       f32_3 %106 = OpVectorShuffle %105 %105 2 2 2 
                                       f32_3 %107 = OpFMul %104 %106 
                                       f32_4 %108 = OpLoad %75 
                                       f32_3 %109 = OpVectorShuffle %108 %108 0 1 3 
                                       f32_3 %110 = OpFAdd %107 %109 
                                       f32_4 %111 = OpLoad %75 
                                       f32_4 %112 = OpVectorShuffle %111 %110 4 5 2 6 
                                                      OpStore %75 %112 
                                       f32_4 %113 = OpLoad %75 
                                       f32_3 %114 = OpVectorShuffle %113 %113 0 1 3 
                              Uniform f32_4* %115 = OpAccessChain %16 %85 %85 
                                       f32_4 %116 = OpLoad %115 
                                       f32_3 %117 = OpVectorShuffle %116 %116 0 1 2 
                                       f32_3 %118 = OpFAdd %114 %117 
                                       f32_4 %119 = OpLoad %75 
                                       f32_4 %120 = OpVectorShuffle %119 %118 4 5 2 6 
                                                      OpStore %75 %120 
                                       f32_4 %121 = OpLoad %75 
                                       f32_3 %122 = OpVectorShuffle %121 %121 0 1 3 
                              Uniform f32_4* %124 = OpAccessChain %16 %123 
                                       f32_4 %125 = OpLoad %124 
                                       f32_3 %126 = OpVectorShuffle %125 %125 0 1 2 
                                       f32_3 %127 = OpFNegate %126 
                                       f32_3 %128 = OpFAdd %122 %127 
                                                      OpStore %82 %128 
                                       f32_3 %129 = OpLoad %82 
                                       f32_3 %130 = OpLoad %82 
                                         f32 %131 = OpDot %129 %130 
                                Private f32* %132 = OpAccessChain %9 %29 
                                                      OpStore %132 %131 
                                Private f32* %133 = OpAccessChain %9 %29 
                                         f32 %134 = OpLoad %133 
                                         f32 %135 = OpExtInst %1 31 %134 
                                Private f32* %136 = OpAccessChain %9 %29 
                                                      OpStore %136 %135 
                                Private f32* %137 = OpAccessChain %9 %19 
                                         f32 %138 = OpLoad %137 
                                         f32 %139 = OpFNegate %138 
                                         f32 %140 = OpLoad %48 
                                         f32 %141 = OpFMul %139 %140 
                                Private f32* %142 = OpAccessChain %9 %29 
                                         f32 %143 = OpLoad %142 
                                         f32 %144 = OpFAdd %141 %143 
                                Private f32* %145 = OpAccessChain %9 %29 
                                                      OpStore %145 %144 
                                Uniform f32* %147 = OpAccessChain %16 %123 %146 
                                         f32 %148 = OpLoad %147 
                                Private f32* %149 = OpAccessChain %9 %29 
                                         f32 %150 = OpLoad %149 
                                         f32 %151 = OpFMul %148 %150 
                                Private f32* %152 = OpAccessChain %75 %19 
                                         f32 %153 = OpLoad %152 
                                         f32 %154 = OpFAdd %151 %153 
                                Private f32* %155 = OpAccessChain %9 %29 
                                                      OpStore %155 %154 
                                Private f32* %156 = OpAccessChain %9 %29 
                                         f32 %157 = OpLoad %156 
                                Uniform f32* %159 = OpAccessChain %16 %158 %19 
                                         f32 %160 = OpLoad %159 
                                         f32 %161 = OpFMul %157 %160 
                                Uniform f32* %162 = OpAccessChain %16 %158 %146 
                                         f32 %163 = OpLoad %162 
                                         f32 %164 = OpFAdd %161 %163 
                                Private f32* %165 = OpAccessChain %9 %29 
                                                      OpStore %165 %164 
                                Private f32* %166 = OpAccessChain %9 %29 
                                         f32 %167 = OpLoad %166 
                                         f32 %169 = OpExtInst %1 43 %167 %168 %72 
                                Private f32* %170 = OpAccessChain %9 %29 
                                                      OpStore %170 %169 
                                       f32_4 %172 = OpLoad %75 
                                       f32_3 %173 = OpVectorShuffle %172 %172 0 1 3 
                              Uniform f32_4* %175 = OpAccessChain %16 %174 
                                       f32_4 %176 = OpLoad %175 
                                       f32_3 %177 = OpVectorShuffle %176 %176 0 1 2 
                                       f32_3 %178 = OpFNegate %177 
                                       f32_3 %179 = OpFAdd %173 %178 
                                                      OpStore %171 %179 
                                       f32_4 %180 = OpLoad %75 
                                       f32_3 %181 = OpVectorShuffle %180 %180 0 1 3 
                              Uniform f32_3* %183 = OpAccessChain %16 %91 
                                       f32_3 %184 = OpLoad %183 
                                       f32_3 %185 = OpFNegate %184 
                                       f32_3 %186 = OpFAdd %181 %185 
                                       f32_4 %187 = OpLoad %75 
                                       f32_4 %188 = OpVectorShuffle %187 %186 4 5 6 3 
                                                      OpStore %75 %188 
                                Private f32* %190 = OpAccessChain %171 %68 
                                         f32 %191 = OpLoad %190 
                                         f32 %192 = OpExtInst %1 4 %191 
                                Private f32* %193 = OpAccessChain %171 %29 
                                         f32 %194 = OpLoad %193 
                                         f32 %195 = OpExtInst %1 4 %194 
                                         f32 %196 = OpExtInst %1 40 %192 %195 
                                                      OpStore %189 %196 
                                Private f32* %197 = OpAccessChain %171 %19 
                                         f32 %198 = OpLoad %197 
                                         f32 %199 = OpExtInst %1 4 %198 
                                         f32 %200 = OpLoad %189 
                                         f32 %201 = OpExtInst %1 40 %199 %200 
                                                      OpStore %189 %201 
                                         f32 %202 = OpLoad %189 
                                Uniform f32* %204 = OpAccessChain %16 %203 %19 
                                         f32 %205 = OpLoad %204 
                                         f32 %206 = OpFNegate %205 
                                         f32 %207 = OpFAdd %202 %206 
                                                      OpStore %189 %207 
                                         f32 %208 = OpLoad %189 
                                         f32 %210 = OpExtInst %1 40 %208 %209 
                                                      OpStore %189 %210 
                                         f32 %211 = OpLoad %189 
                                Uniform f32* %212 = OpAccessChain %16 %203 %146 
                                         f32 %213 = OpLoad %212 
                                         f32 %214 = OpFMul %211 %213 
                                                      OpStore %189 %214 
                                Uniform f32* %215 = OpAccessChain %16 %203 %68 
                                         f32 %216 = OpLoad %215 
                                         f32 %217 = OpLoad %189 
                                         f32 %218 = OpFDiv %216 %217 
                                                      OpStore %189 %218 
                                         f32 %219 = OpLoad %189 
                                Uniform f32* %220 = OpAccessChain %16 %203 %29 
                                         f32 %221 = OpLoad %220 
                                         f32 %222 = OpFNegate %221 
                                         f32 %223 = OpFAdd %219 %222 
                                                      OpStore %189 %223 
                                         f32 %224 = OpLoad %189 
                                         f32 %225 = OpFNegate %224 
                                         f32 %226 = OpFAdd %225 %72 
                                                      OpStore %189 %226 
                                       f32_3 %229 = OpLoad %171 
                                         f32 %230 = OpLoad %189 
                                         f32 %231 = OpCompositeExtract %229 0 
                                         f32 %232 = OpCompositeExtract %229 1 
                                         f32 %233 = OpCompositeExtract %229 2 
                                       f32_4 %234 = OpCompositeConstruct %231 %232 %233 %230 
                                                      OpStore %228 %234 
                       read_only TextureCube %238 = OpLoad %237 
                                     sampler %240 = OpLoad %239 
                read_only TextureCubeSampled %243 = OpSampledImage %238 %240 
                                       f32_4 %244 = OpLoad %228 
                                         f32 %245 = OpCompositeExtract %244 3 
                                         f32 %246 = OpImageSampleDrefImplicitLod %243 %244 %245 
                                                      OpStore %189 %246 
                                Uniform f32* %248 = OpAccessChain %16 %158 %29 
                                         f32 %249 = OpLoad %248 
                                         f32 %250 = OpFNegate %249 
                                         f32 %251 = OpFAdd %250 %72 
                                                      OpStore %247 %251 
                                         f32 %252 = OpLoad %189 
                                         f32 %253 = OpLoad %247 
                                         f32 %254 = OpFMul %252 %253 
                                Uniform f32* %255 = OpAccessChain %16 %158 %29 
                                         f32 %256 = OpLoad %255 
                                         f32 %257 = OpFAdd %254 %256 
                                                      OpStore %189 %257 
                                         f32 %258 = OpLoad %189 
                                         f32 %259 = OpFNegate %258 
                                         f32 %260 = OpFAdd %259 %72 
                                                      OpStore %247 %260 
                                Private f32* %261 = OpAccessChain %9 %29 
                                         f32 %262 = OpLoad %261 
                                         f32 %263 = OpLoad %247 
                                         f32 %264 = OpFMul %262 %263 
                                         f32 %265 = OpLoad %189 
                                         f32 %266 = OpFAdd %264 %265 
                                Private f32* %267 = OpAccessChain %9 %29 
                                                      OpStore %267 %266 
                                       f32_3 %268 = OpLoad %171 
                                       f32_3 %269 = OpLoad %171 
                                         f32 %270 = OpDot %268 %269 
                                                      OpStore %189 %270 
                                         f32 %271 = OpLoad %189 
                                Uniform f32* %272 = OpAccessChain %16 %174 %146 
                                         f32 %273 = OpLoad %272 
                                         f32 %274 = OpFMul %271 %273 
                                                      OpStore %247 %274 
                                         f32 %275 = OpLoad %189 
                                         f32 %276 = OpExtInst %1 32 %275 
                                                      OpStore %189 %276 
                         read_only Texture2D %278 = OpLoad %277 
                                     sampler %280 = OpLoad %279 
                  read_only Texture2DSampled %281 = OpSampledImage %278 %280 
                                         f32 %282 = OpLoad %247 
                                       f32_2 %283 = OpCompositeConstruct %282 %282 
                                       f32_4 %284 = OpImageSampleImplicitLod %281 %283 
                                         f32 %285 = OpCompositeExtract %284 0 
                                                      OpStore %247 %285 
                                Private f32* %286 = OpAccessChain %9 %29 
                                         f32 %287 = OpLoad %286 
                                         f32 %288 = OpLoad %247 
                                         f32 %289 = OpFMul %287 %288 
                                Private f32* %290 = OpAccessChain %9 %29 
                                                      OpStore %290 %289 
                                       f32_3 %291 = OpLoad %9 
                                       f32_3 %292 = OpVectorShuffle %291 %291 0 0 0 
                              Uniform f32_4* %294 = OpAccessChain %16 %293 
                                       f32_4 %295 = OpLoad %294 
                                       f32_3 %296 = OpVectorShuffle %295 %295 0 1 2 
                                       f32_3 %297 = OpFMul %292 %296 
                                                      OpStore %82 %297 
                                       f32_4 %298 = OpLoad %75 
                                       f32_3 %299 = OpVectorShuffle %298 %298 0 1 2 
                                       f32_4 %300 = OpLoad %75 
                                       f32_3 %301 = OpVectorShuffle %300 %300 0 1 2 
                                         f32 %302 = OpDot %299 %301 
                                Private f32* %303 = OpAccessChain %9 %29 
                                                      OpStore %303 %302 
                                Private f32* %304 = OpAccessChain %9 %29 
                                         f32 %305 = OpLoad %304 
                                         f32 %306 = OpExtInst %1 32 %305 
                                Private f32* %307 = OpAccessChain %9 %29 
                                                      OpStore %307 %306 
                                       f32_3 %308 = OpLoad %9 
                                       f32_3 %309 = OpVectorShuffle %308 %308 0 0 0 
                                       f32_4 %310 = OpLoad %75 
                                       f32_3 %311 = OpVectorShuffle %310 %310 0 1 2 
                                       f32_3 %312 = OpFMul %309 %311 
                                       f32_4 %313 = OpLoad %75 
                                       f32_4 %314 = OpVectorShuffle %313 %312 4 5 6 3 
                                                      OpStore %75 %314 
                                       f32_3 %316 = OpLoad %171 
                                       f32_3 %317 = OpFNegate %316 
                                         f32 %318 = OpLoad %189 
                                       f32_3 %319 = OpCompositeConstruct %318 %318 %318 
                                       f32_3 %320 = OpFMul %317 %319 
                                       f32_4 %321 = OpLoad %75 
                                       f32_3 %322 = OpVectorShuffle %321 %321 0 1 2 
                                       f32_3 %323 = OpFNegate %322 
                                       f32_3 %324 = OpFAdd %320 %323 
                                       f32_4 %325 = OpLoad %315 
                                       f32_4 %326 = OpVectorShuffle %325 %324 4 5 6 3 
                                                      OpStore %315 %326 
                                       f32_3 %327 = OpLoad %171 
                                         f32 %328 = OpLoad %189 
                                       f32_3 %329 = OpCompositeConstruct %328 %328 %328 
                                       f32_3 %330 = OpFMul %327 %329 
                                                      OpStore %9 %330 
                                       f32_4 %331 = OpLoad %315 
                                       f32_3 %332 = OpVectorShuffle %331 %331 0 1 2 
                                       f32_4 %333 = OpLoad %315 
                                       f32_3 %334 = OpVectorShuffle %333 %333 0 1 2 
                                         f32 %335 = OpDot %332 %334 
                                                      OpStore %48 %335 
                                         f32 %336 = OpLoad %48 
                                         f32 %338 = OpExtInst %1 40 %336 %337 
                                                      OpStore %48 %338 
                                         f32 %339 = OpLoad %48 
                                         f32 %340 = OpExtInst %1 32 %339 
                                                      OpStore %48 %340 
                                         f32 %341 = OpLoad %48 
                                       f32_3 %342 = OpCompositeConstruct %341 %341 %341 
                                       f32_4 %343 = OpLoad %315 
                                       f32_3 %344 = OpVectorShuffle %343 %343 0 1 2 
                                       f32_3 %345 = OpFMul %342 %344 
                                       f32_4 %346 = OpLoad %315 
                                       f32_4 %347 = OpVectorShuffle %346 %345 4 5 6 3 
                                                      OpStore %315 %347 
                         read_only Texture2D %350 = OpLoad %349 
                                     sampler %352 = OpLoad %351 
                  read_only Texture2DSampled %353 = OpSampledImage %350 %352 
                                       f32_4 %354 = OpLoad %37 
                                       f32_2 %355 = OpVectorShuffle %354 %354 0 1 
                                       f32_4 %356 = OpImageSampleImplicitLod %353 %355 
                                       f32_3 %357 = OpVectorShuffle %356 %356 0 1 2 
                                                      OpStore %348 %357 
                                       f32_3 %358 = OpLoad %348 
                                       f32_3 %361 = OpFMul %358 %360 
                                       f32_3 %364 = OpFAdd %361 %363 
                                                      OpStore %348 %364 
                                       f32_3 %365 = OpLoad %348 
                                       f32_3 %366 = OpLoad %348 
                                         f32 %367 = OpDot %365 %366 
                                                      OpStore %48 %367 
                                         f32 %368 = OpLoad %48 
                                         f32 %369 = OpExtInst %1 32 %368 
                                                      OpStore %48 %369 
                                         f32 %370 = OpLoad %48 
                                       f32_3 %371 = OpCompositeConstruct %370 %370 %370 
                                       f32_3 %372 = OpLoad %348 
                                       f32_3 %373 = OpFMul %371 %372 
                                                      OpStore %348 %373 
                                       f32_3 %374 = OpLoad %348 
                                       f32_4 %375 = OpLoad %315 
                                       f32_3 %376 = OpVectorShuffle %375 %375 0 1 2 
                                         f32 %377 = OpDot %374 %376 
                                                      OpStore %48 %377 
                                         f32 %378 = OpLoad %48 
                                         f32 %379 = OpExtInst %1 43 %378 %168 %72 
                                                      OpStore %48 %379 
                                       f32_3 %380 = OpLoad %9 
                                       f32_3 %381 = OpFNegate %380 
                                       f32_4 %382 = OpLoad %315 
                                       f32_3 %383 = OpVectorShuffle %382 %382 0 1 2 
                                         f32 %384 = OpDot %381 %383 
                                                      OpStore %189 %384 
                                         f32 %385 = OpLoad %189 
                                         f32 %386 = OpExtInst %1 43 %385 %168 %72 
                                                      OpStore %189 %386 
                                       f32_3 %387 = OpLoad %348 
                                       f32_3 %388 = OpLoad %9 
                                       f32_3 %389 = OpFNegate %388 
                                         f32 %390 = OpDot %387 %389 
                                Private f32* %391 = OpAccessChain %9 %29 
                                                      OpStore %391 %390 
                                Private f32* %392 = OpAccessChain %9 %29 
                                         f32 %393 = OpLoad %392 
                                         f32 %394 = OpExtInst %1 43 %393 %168 %72 
                                Private f32* %395 = OpAccessChain %9 %29 
                                                      OpStore %395 %394 
                                       f32_3 %396 = OpLoad %348 
                                       f32_4 %397 = OpLoad %75 
                                       f32_3 %398 = OpVectorShuffle %397 %397 0 1 2 
                                       f32_3 %399 = OpFNegate %398 
                                         f32 %400 = OpDot %396 %399 
                                Private f32* %401 = OpAccessChain %171 %29 
                                                      OpStore %401 %400 
                         read_only Texture2D %403 = OpLoad %402 
                                     sampler %405 = OpLoad %404 
                  read_only Texture2DSampled %406 = OpSampledImage %403 %405 
                                       f32_4 %407 = OpLoad %37 
                                       f32_2 %408 = OpVectorShuffle %407 %407 0 1 
                                       f32_4 %409 = OpImageSampleImplicitLod %406 %408 
                                                      OpStore %75 %409 
                         read_only Texture2D %411 = OpLoad %410 
                                     sampler %413 = OpLoad %412 
                  read_only Texture2DSampled %414 = OpSampledImage %411 %413 
                                       f32_4 %415 = OpLoad %37 
                                       f32_2 %416 = OpVectorShuffle %415 %415 0 1 
                                       f32_4 %417 = OpImageSampleImplicitLod %414 %416 
                                       f32_3 %418 = OpVectorShuffle %417 %417 0 1 2 
                                       f32_4 %419 = OpLoad %37 
                                       f32_4 %420 = OpVectorShuffle %419 %418 4 5 2 6 
                                                      OpStore %37 %420 
                                       f32_4 %421 = OpLoad %75 
                                       f32_4 %422 = OpVectorShuffle %421 %421 3 0 1 2 
                                       f32_4 %423 = OpFNegate %422 
                                       f32_4 %425 = OpFAdd %423 %424 
                                                      OpStore %315 %425 
                                Private f32* %427 = OpAccessChain %315 %29 
                                         f32 %428 = OpLoad %427 
                                Private f32* %429 = OpAccessChain %315 %29 
                                         f32 %430 = OpLoad %429 
                                         f32 %431 = OpFMul %428 %430 
                                                      OpStore %426 %431 
                                         f32 %432 = OpLoad %426 
                                         f32 %434 = OpExtInst %1 40 %432 %433 
                                                      OpStore %426 %434 
                                         f32 %436 = OpLoad %426 
                                         f32 %437 = OpLoad %426 
                                         f32 %438 = OpFMul %436 %437 
                                                      OpStore %435 %438 
                                         f32 %440 = OpLoad %48 
                                         f32 %441 = OpLoad %435 
                                         f32 %442 = OpFMul %440 %441 
                                         f32 %443 = OpLoad %48 
                                         f32 %444 = OpFNegate %443 
                                         f32 %445 = OpFAdd %442 %444 
                                                      OpStore %439 %445 
                                         f32 %446 = OpLoad %439 
                                         f32 %447 = OpLoad %48 
                                         f32 %448 = OpFMul %446 %447 
                                         f32 %449 = OpFAdd %448 %72 
                                                      OpStore %48 %449 
                                         f32 %450 = OpLoad %48 
                                         f32 %451 = OpLoad %48 
                                         f32 %452 = OpFMul %450 %451 
                                         f32 %454 = OpFAdd %452 %453 
                                                      OpStore %48 %454 
                                         f32 %455 = OpLoad %435 
                                         f32 %457 = OpFMul %455 %456 
                                                      OpStore %435 %457 
                                         f32 %458 = OpLoad %435 
                                         f32 %459 = OpLoad %48 
                                         f32 %460 = OpFDiv %458 %459 
                                                      OpStore %48 %460 
                                         f32 %461 = OpLoad %426 
                                         f32 %462 = OpFNegate %461 
                                         f32 %463 = OpFAdd %462 %72 
                                                      OpStore %435 %463 
                                Private f32* %464 = OpAccessChain %171 %29 
                                         f32 %465 = OpLoad %464 
                                         f32 %466 = OpExtInst %1 4 %465 
                                         f32 %467 = OpLoad %435 
                                         f32 %468 = OpFMul %466 %467 
                                         f32 %469 = OpLoad %426 
                                         f32 %470 = OpFAdd %468 %469 
                                                      OpStore %439 %470 
                                Private f32* %471 = OpAccessChain %9 %29 
                                         f32 %472 = OpLoad %471 
                                         f32 %473 = OpLoad %435 
                                         f32 %474 = OpFMul %472 %473 
                                         f32 %475 = OpLoad %426 
                                         f32 %476 = OpFAdd %474 %475 
                                                      OpStore %426 %476 
                                         f32 %477 = OpLoad %426 
                                Private f32* %478 = OpAccessChain %171 %29 
                                         f32 %479 = OpLoad %478 
                                         f32 %480 = OpExtInst %1 4 %479 
                                         f32 %481 = OpFMul %477 %480 
                                                      OpStore %426 %481 
                                Private f32* %482 = OpAccessChain %171 %29 
                                         f32 %483 = OpLoad %482 
                                         f32 %484 = OpExtInst %1 4 %483 
                                         f32 %485 = OpFNegate %484 
                                         f32 %486 = OpFAdd %485 %72 
                                Private f32* %487 = OpAccessChain %171 %29 
                                                      OpStore %487 %486 
                                Private f32* %488 = OpAccessChain %9 %29 
                                         f32 %489 = OpLoad %488 
                                         f32 %490 = OpLoad %439 
                                         f32 %491 = OpFMul %489 %490 
                                         f32 %492 = OpLoad %426 
                                         f32 %493 = OpFAdd %491 %492 
                                                      OpStore %426 %493 
                                         f32 %494 = OpLoad %426 
                                         f32 %495 = OpFAdd %494 %209 
                                                      OpStore %426 %495 
                                         f32 %497 = OpLoad %426 
                                         f32 %498 = OpFDiv %496 %497 
                                                      OpStore %426 %498 
                                         f32 %499 = OpLoad %48 
                                         f32 %500 = OpLoad %426 
                                         f32 %501 = OpFMul %499 %500 
                                                      OpStore %426 %501 
                                Private f32* %502 = OpAccessChain %9 %29 
                                         f32 %503 = OpLoad %502 
                                         f32 %504 = OpLoad %426 
                                         f32 %505 = OpFMul %503 %504 
                                                      OpStore %426 %505 
                                         f32 %506 = OpLoad %426 
                                         f32 %508 = OpFMul %506 %507 
                                                      OpStore %426 %508 
                                         f32 %509 = OpLoad %426 
                                         f32 %510 = OpExtInst %1 40 %509 %168 
                                                      OpStore %426 %510 
                                       f32_4 %511 = OpLoad %75 
                                       f32_3 %512 = OpVectorShuffle %511 %511 0 1 2 
                                       f32_4 %513 = OpLoad %75 
                                       f32_3 %514 = OpVectorShuffle %513 %513 0 1 2 
                                         f32 %515 = OpDot %512 %514 
                                                      OpStore %48 %515 
                                         f32 %519 = OpLoad %48 
                                        bool %520 = OpFOrdNotEqual %519 %168 
                                                      OpStore %518 %520 
                                        bool %521 = OpLoad %518 
                                         f32 %522 = OpSelect %521 %72 %168 
                                                      OpStore %48 %522 
                                         f32 %523 = OpLoad %48 
                                         f32 %524 = OpLoad %426 
                                         f32 %525 = OpFMul %523 %524 
                                                      OpStore %426 %525 
                                       f32_3 %526 = OpLoad %82 
                                         f32 %527 = OpLoad %426 
                                       f32_3 %528 = OpCompositeConstruct %527 %527 %527 
                                       f32_3 %529 = OpFMul %526 %528 
                                                      OpStore %348 %529 
                                         f32 %530 = OpLoad %189 
                                         f32 %531 = OpFNegate %530 
                                         f32 %532 = OpFAdd %531 %72 
                                                      OpStore %426 %532 
                                         f32 %533 = OpLoad %189 
                                         f32 %534 = OpLoad %189 
                                         f32 %535 = OpFMul %533 %534 
                                                      OpStore %48 %535 
                                         f32 %536 = OpLoad %48 
                                       f32_2 %537 = OpCompositeConstruct %536 %536 
                                       f32_4 %538 = OpLoad %315 
                                       f32_2 %539 = OpVectorShuffle %538 %538 0 0 
                                         f32 %540 = OpDot %537 %539 
                                                      OpStore %48 %540 
                                         f32 %541 = OpLoad %48 
                                         f32 %543 = OpFAdd %541 %542 
                                                      OpStore %48 %543 
                                         f32 %544 = OpLoad %426 
                                         f32 %545 = OpLoad %426 
                                         f32 %546 = OpFMul %544 %545 
                                                      OpStore %189 %546 
                                         f32 %547 = OpLoad %189 
                                         f32 %548 = OpLoad %189 
                                         f32 %549 = OpFMul %547 %548 
                                                      OpStore %189 %549 
                                         f32 %550 = OpLoad %426 
                                         f32 %551 = OpLoad %189 
                                         f32 %552 = OpFMul %550 %551 
                                                      OpStore %426 %552 
                                       f32_4 %553 = OpLoad %315 
                                       f32_3 %554 = OpVectorShuffle %553 %553 1 2 3 
                                         f32 %555 = OpLoad %426 
                                       f32_3 %556 = OpCompositeConstruct %555 %555 %555 
                                       f32_3 %557 = OpFMul %554 %556 
                                       f32_4 %558 = OpLoad %75 
                                       f32_3 %559 = OpVectorShuffle %558 %558 0 1 2 
                                       f32_3 %560 = OpFAdd %557 %559 
                                       f32_4 %561 = OpLoad %75 
                                       f32_4 %562 = OpVectorShuffle %561 %560 4 5 6 3 
                                                      OpStore %75 %562 
                                       f32_4 %563 = OpLoad %75 
                                       f32_3 %564 = OpVectorShuffle %563 %563 0 1 2 
                                       f32_3 %565 = OpLoad %348 
                                       f32_3 %566 = OpFMul %564 %565 
                                       f32_4 %567 = OpLoad %75 
                                       f32_4 %568 = OpVectorShuffle %567 %566 4 5 6 3 
                                                      OpStore %75 %568 
                                Private f32* %569 = OpAccessChain %171 %29 
                                         f32 %570 = OpLoad %569 
                                Private f32* %571 = OpAccessChain %171 %29 
                                         f32 %572 = OpLoad %571 
                                         f32 %573 = OpFMul %570 %572 
                                                      OpStore %426 %573 
                                         f32 %574 = OpLoad %426 
                                         f32 %575 = OpLoad %426 
                                         f32 %576 = OpFMul %574 %575 
                                                      OpStore %426 %576 
                                Private f32* %577 = OpAccessChain %171 %29 
                                         f32 %578 = OpLoad %577 
                                         f32 %579 = OpLoad %426 
                                         f32 %580 = OpFMul %578 %579 
                                Private f32* %581 = OpAccessChain %171 %29 
                                                      OpStore %581 %580 
                                         f32 %582 = OpLoad %48 
                                Private f32* %583 = OpAccessChain %171 %29 
                                         f32 %584 = OpLoad %583 
                                         f32 %585 = OpFMul %582 %584 
                                         f32 %586 = OpFAdd %585 %72 
                                Private f32* %587 = OpAccessChain %171 %29 
                                                      OpStore %587 %586 
                                Private f32* %588 = OpAccessChain %9 %29 
                                         f32 %589 = OpLoad %588 
                                         f32 %590 = OpFNegate %589 
                                         f32 %591 = OpFAdd %590 %72 
                                                      OpStore %426 %591 
                                         f32 %592 = OpLoad %426 
                                         f32 %593 = OpLoad %426 
                                         f32 %594 = OpFMul %592 %593 
                                                      OpStore %189 %594 
                                         f32 %595 = OpLoad %189 
                                         f32 %596 = OpLoad %189 
                                         f32 %597 = OpFMul %595 %596 
                                                      OpStore %189 %597 
                                         f32 %598 = OpLoad %426 
                                         f32 %599 = OpLoad %189 
                                         f32 %600 = OpFMul %598 %599 
                                                      OpStore %426 %600 
                                         f32 %601 = OpLoad %48 
                                         f32 %602 = OpLoad %426 
                                         f32 %603 = OpFMul %601 %602 
                                         f32 %604 = OpFAdd %603 %72 
                                                      OpStore %426 %604 
                                Private f32* %605 = OpAccessChain %171 %29 
                                         f32 %606 = OpLoad %605 
                                         f32 %607 = OpLoad %426 
                                         f32 %608 = OpFMul %606 %607 
                                Private f32* %609 = OpAccessChain %171 %29 
                                                      OpStore %609 %608 
                                Private f32* %610 = OpAccessChain %9 %29 
                                         f32 %611 = OpLoad %610 
                                Private f32* %612 = OpAccessChain %171 %29 
                                         f32 %613 = OpLoad %612 
                                         f32 %614 = OpFMul %611 %613 
                                Private f32* %615 = OpAccessChain %9 %29 
                                                      OpStore %615 %614 
                                       f32_3 %616 = OpLoad %9 
                                       f32_3 %617 = OpVectorShuffle %616 %616 0 0 0 
                                       f32_3 %618 = OpLoad %82 
                                       f32_3 %619 = OpFMul %617 %618 
                                                      OpStore %9 %619 
                                       f32_4 %622 = OpLoad %37 
                                       f32_3 %623 = OpVectorShuffle %622 %622 0 1 3 
                                       f32_3 %624 = OpLoad %9 
                                       f32_3 %625 = OpFMul %623 %624 
                                       f32_4 %626 = OpLoad %75 
                                       f32_3 %627 = OpVectorShuffle %626 %626 0 1 2 
                                       f32_3 %628 = OpFAdd %625 %627 
                                       f32_4 %629 = OpLoad %621 
                                       f32_4 %630 = OpVectorShuffle %629 %628 4 5 6 3 
                                                      OpStore %621 %630 
                                 Output f32* %632 = OpAccessChain %621 %146 
                                                      OpStore %632 %72 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "UNITY_HDR_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "UNITY_HDR_ON" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _LightProjectionParams;
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
UNITY_LOCATION(0) uniform  sampler2D _CameraDepthTexture;
UNITY_LOCATION(1) uniform  sampler2D _LightTextureB0;
UNITY_LOCATION(2) uniform  sampler2D _CameraGBufferTexture0;
UNITY_LOCATION(3) uniform  sampler2D _CameraGBufferTexture1;
UNITY_LOCATION(4) uniform  sampler2D _CameraGBufferTexture2;
UNITY_LOCATION(5) uniform  samplerCube _ShadowMapTexture;
UNITY_LOCATION(6) uniform  samplerCubeShadow hlslcc_zcmp_ShadowMapTexture;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec3 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
vec4 u_xlat6;
vec4 u_xlat7;
vec3 u_xlat8;
float u_xlat9;
vec3 u_xlat12;
float u_xlat16;
float u_xlat17;
bool u_xlatb17;
float u_xlat18;
float u_xlat24;
bool u_xlatb24;
float u_xlat25;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat2 = texture(_CameraDepthTexture, u_xlat1.xy);
    u_xlat24 = _ZBufferParams.x * u_xlat2.x + _ZBufferParams.y;
    u_xlat24 = float(1.0) / u_xlat24;
    u_xlat2.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat24 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat8.xyz = u_xlat2.xyw + (-_LightPos.xyz);
    u_xlat17 = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat25 = inversesqrt(u_xlat17);
    u_xlat3.xyz = u_xlat8.xyz * vec3(u_xlat25);
    u_xlat17 = u_xlat17 * _LightPos.w;
    u_xlat4 = texture(_LightTextureB0, vec2(u_xlat17));
    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlatb17 = u_xlat0.x<0.99000001;
    if(u_xlatb17){
        u_xlat17 = max(abs(u_xlat8.y), abs(u_xlat8.x));
        u_xlat17 = max(abs(u_xlat8.z), u_xlat17);
        u_xlat17 = u_xlat17 + (-_LightProjectionParams.z);
        u_xlat17 = max(u_xlat17, 9.99999975e-06);
        u_xlat17 = u_xlat17 * _LightProjectionParams.w;
        u_xlat17 = _LightProjectionParams.y / u_xlat17;
        u_xlat17 = u_xlat17 + (-_LightProjectionParams.x);
        u_xlat12.xyz = u_xlat8.xyz + vec3(0.0078125, 0.0078125, 0.0078125);
        vec4 txVec0 = vec4(u_xlat12.xyz,u_xlat17);
        u_xlat5.x = texture(hlslcc_zcmp_ShadowMapTexture, txVec0);
        u_xlat12.xyz = u_xlat8.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);
        vec4 txVec1 = vec4(u_xlat12.xyz,u_xlat17);
        u_xlat5.y = texture(hlslcc_zcmp_ShadowMapTexture, txVec1);
        u_xlat12.xyz = u_xlat8.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);
        vec4 txVec2 = vec4(u_xlat12.xyz,u_xlat17);
        u_xlat5.z = texture(hlslcc_zcmp_ShadowMapTexture, txVec2);
        u_xlat12.xyz = u_xlat8.xyz + vec3(0.0078125, -0.0078125, -0.0078125);
        vec4 txVec3 = vec4(u_xlat12.xyz,u_xlat17);
        u_xlat5.w = texture(hlslcc_zcmp_ShadowMapTexture, txVec3);
        u_xlat17 = dot(u_xlat5, vec4(0.25, 0.25, 0.25, 0.25));
        u_xlat18 = (-_LightShadowData.x) + 1.0;
        u_xlat17 = u_xlat17 * u_xlat18 + _LightShadowData.x;
    } else {
        u_xlat17 = 1.0;
    }
    u_xlat18 = (-u_xlat17) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat18 + u_xlat17;
    u_xlat0.x = u_xlat0.x * u_xlat4.x;
    u_xlat4.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat5 = texture(_CameraGBufferTexture0, u_xlat1.xy);
    u_xlat6 = texture(_CameraGBufferTexture1, u_xlat1.xy);
    u_xlat7 = texture(_CameraGBufferTexture2, u_xlat1.xy);
    u_xlat1.xyz = u_xlat7.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat2.xyw + (-_WorldSpaceCameraPos.xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat7 = (-u_xlat6.wxyz) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0.xyz = (-u_xlat8.xyz) * vec3(u_xlat25) + (-u_xlat2.xyz);
    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat24 = max(u_xlat24, 0.00100000005);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat0.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    u_xlat24 = dot(u_xlat1.xyz, (-u_xlat2.xyz));
    u_xlat25 = dot(u_xlat1.xyz, (-u_xlat3.xyz));
    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat0.x = dot((-u_xlat3.xyz), u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat8.x = u_xlat0.x + u_xlat0.x;
    u_xlat8.x = u_xlat0.x * u_xlat8.x;
    u_xlat8.x = u_xlat8.x * u_xlat7.x + -0.5;
    u_xlat16 = (-u_xlat25) + 1.0;
    u_xlat9 = u_xlat16 * u_xlat16;
    u_xlat9 = u_xlat9 * u_xlat9;
    u_xlat16 = u_xlat16 * u_xlat9;
    u_xlat16 = u_xlat8.x * u_xlat16 + 1.0;
    u_xlat9 = -abs(u_xlat24) + 1.0;
    u_xlat17 = u_xlat9 * u_xlat9;
    u_xlat17 = u_xlat17 * u_xlat17;
    u_xlat9 = u_xlat9 * u_xlat17;
    u_xlat8.x = u_xlat8.x * u_xlat9 + 1.0;
    u_xlat8.x = u_xlat8.x * u_xlat16;
    u_xlat16 = u_xlat7.x * u_xlat7.x;
    u_xlat16 = max(u_xlat16, 0.00200000009);
    u_xlat9 = (-u_xlat16) + 1.0;
    u_xlat17 = abs(u_xlat24) * u_xlat9 + u_xlat16;
    u_xlat9 = u_xlat25 * u_xlat9 + u_xlat16;
    u_xlat24 = abs(u_xlat24) * u_xlat9;
    u_xlat24 = u_xlat25 * u_xlat17 + u_xlat24;
    u_xlat24 = u_xlat24 + 9.99999975e-06;
    u_xlat24 = 0.5 / u_xlat24;
    u_xlat16 = u_xlat16 * u_xlat16;
    u_xlat9 = u_xlat1.x * u_xlat16 + (-u_xlat1.x);
    u_xlat1.x = u_xlat9 * u_xlat1.x + 1.0;
    u_xlat16 = u_xlat16 * 0.318309873;
    u_xlat1.x = u_xlat1.x * u_xlat1.x + 1.00000001e-07;
    u_xlat16 = u_xlat16 / u_xlat1.x;
    u_xlat16 = u_xlat16 * u_xlat24;
    u_xlat8.y = u_xlat16 * 3.14159274;
    u_xlat8.xy = vec2(u_xlat25) * u_xlat8.xy;
    u_xlat16 = max(u_xlat8.y, 0.0);
    u_xlat24 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlatb24 = u_xlat24!=0.0;
    u_xlat24 = u_xlatb24 ? 1.0 : float(0.0);
    u_xlat16 = u_xlat24 * u_xlat16;
    u_xlat1.xyz = u_xlat8.xxx * u_xlat4.xyz;
    u_xlat8.xyz = u_xlat4.xyz * vec3(u_xlat16);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat25 = u_xlat0.x * u_xlat0.x;
    u_xlat25 = u_xlat25 * u_xlat25;
    u_xlat0.x = u_xlat0.x * u_xlat25;
    u_xlat2.xyz = u_xlat7.yzw * u_xlat0.xxx + u_xlat6.xyz;
    u_xlat0.xyz = u_xlat8.xyz * u_xlat2.xyz;
    SV_Target0.xyz = u_xlat5.xyz * u_xlat1.xyz + u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "UNITY_HDR_ON" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 192
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %80 %102 %169 %175 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpMemberDecorate %78 0 BuiltIn 78 
                                                      OpMemberDecorate %78 1 BuiltIn 78 
                                                      OpMemberDecorate %78 2 BuiltIn 78 
                                                      OpDecorate %78 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 102 
                                                      OpDecorate %169 Location 169 
                                                      OpDecorate vs_TEXCOORD1 Location 175 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %16 %17 %18 %6 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 1 
                                              %24 = OpTypePointer Uniform %7 
                                          i32 %28 = OpConstant 0 
                                          i32 %36 = OpConstant 2 
                                          i32 %45 = OpConstant 3 
                               Private f32_4* %49 = OpVariable Private 
                                          u32 %76 = OpConstant 1 
                                              %77 = OpTypeArray %6 %76 
                                              %78 = OpTypeStruct %7 %6 %77 
                                              %79 = OpTypePointer Output %78 
         Output struct {f32_4; f32; f32[1];}* %80 = OpVariable Output 
                                              %82 = OpTypePointer Output %7 
                                              %84 = OpTypePointer Private %6 
                                          u32 %87 = OpConstant 0 
                                              %88 = OpTypePointer Uniform %6 
                               Private f32_4* %93 = OpVariable Private 
                                              %94 = OpTypeVector %6 3 
                                          f32 %97 = OpConstant 3.674022E-40 
                                        f32_3 %98 = OpConstantComposite %97 %97 %97 
                       Output f32_4* vs_TEXCOORD0 = OpVariable Output 
                                             %103 = OpTypeVector %6 2 
                                         f32 %158 = OpConstant 3.674022E-40 
                                         f32 %159 = OpConstant 3.674022E-40 
                                       f32_3 %160 = OpConstantComposite %158 %158 %159 
                                             %168 = OpTypePointer Input %94 
                                Input f32_3* %169 = OpVariable Input 
                                             %174 = OpTypePointer Output %94 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                                         i32 %176 = OpConstant 4 
                                             %186 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %25 = OpAccessChain %21 %23 %23 
                                        f32_4 %26 = OpLoad %25 
                                        f32_4 %27 = OpFMul %13 %26 
                                                      OpStore %9 %27 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %28 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %44 = OpLoad %9 
                               Uniform f32_4* %46 = OpAccessChain %21 %23 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_4 %48 = OpFAdd %44 %47 
                                                      OpStore %9 %48 
                                        f32_4 %50 = OpLoad %9 
                                        f32_4 %51 = OpVectorShuffle %50 %50 1 1 1 1 
                               Uniform f32_4* %52 = OpAccessChain %21 %45 %23 
                                        f32_4 %53 = OpLoad %52 
                                        f32_4 %54 = OpFMul %51 %53 
                                                      OpStore %49 %54 
                               Uniform f32_4* %55 = OpAccessChain %21 %45 %28 
                                        f32_4 %56 = OpLoad %55 
                                        f32_4 %57 = OpLoad %9 
                                        f32_4 %58 = OpVectorShuffle %57 %57 0 0 0 0 
                                        f32_4 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %49 
                                        f32_4 %61 = OpFAdd %59 %60 
                                                      OpStore %49 %61 
                               Uniform f32_4* %62 = OpAccessChain %21 %45 %36 
                                        f32_4 %63 = OpLoad %62 
                                        f32_4 %64 = OpLoad %9 
                                        f32_4 %65 = OpVectorShuffle %64 %64 2 2 2 2 
                                        f32_4 %66 = OpFMul %63 %65 
                                        f32_4 %67 = OpLoad %49 
                                        f32_4 %68 = OpFAdd %66 %67 
                                                      OpStore %49 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %45 %45 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %9 
                                        f32_4 %72 = OpVectorShuffle %71 %71 3 3 3 3 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %49 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %49 %75 
                                        f32_4 %81 = OpLoad %49 
                                Output f32_4* %83 = OpAccessChain %80 %28 
                                                      OpStore %83 %81 
                                 Private f32* %85 = OpAccessChain %49 %76 
                                          f32 %86 = OpLoad %85 
                                 Uniform f32* %89 = OpAccessChain %21 %28 %87 
                                          f32 %90 = OpLoad %89 
                                          f32 %91 = OpFMul %86 %90 
                                 Private f32* %92 = OpAccessChain %49 %76 
                                                      OpStore %92 %91 
                                        f32_4 %95 = OpLoad %49 
                                        f32_3 %96 = OpVectorShuffle %95 %95 0 3 1 
                                        f32_3 %99 = OpFMul %96 %98 
                                       f32_4 %100 = OpLoad %93 
                                       f32_4 %101 = OpVectorShuffle %100 %99 4 1 5 6 
                                                      OpStore %93 %101 
                                       f32_4 %104 = OpLoad %49 
                                       f32_2 %105 = OpVectorShuffle %104 %104 2 3 
                                       f32_4 %106 = OpLoad vs_TEXCOORD0 
                                       f32_4 %107 = OpVectorShuffle %106 %105 0 1 4 5 
                                                      OpStore vs_TEXCOORD0 %107 
                                       f32_4 %108 = OpLoad %93 
                                       f32_2 %109 = OpVectorShuffle %108 %108 2 2 
                                       f32_4 %110 = OpLoad %93 
                                       f32_2 %111 = OpVectorShuffle %110 %110 0 3 
                                       f32_2 %112 = OpFAdd %109 %111 
                                       f32_4 %113 = OpLoad vs_TEXCOORD0 
                                       f32_4 %114 = OpVectorShuffle %113 %112 4 5 2 3 
                                                      OpStore vs_TEXCOORD0 %114 
                                       f32_4 %115 = OpLoad %9 
                                       f32_3 %116 = OpVectorShuffle %115 %115 1 1 1 
                              Uniform f32_4* %117 = OpAccessChain %21 %36 %23 
                                       f32_4 %118 = OpLoad %117 
                                       f32_3 %119 = OpVectorShuffle %118 %118 0 1 2 
                                       f32_3 %120 = OpFMul %116 %119 
                                       f32_4 %121 = OpLoad %49 
                                       f32_4 %122 = OpVectorShuffle %121 %120 4 5 6 3 
                                                      OpStore %49 %122 
                              Uniform f32_4* %123 = OpAccessChain %21 %36 %28 
                                       f32_4 %124 = OpLoad %123 
                                       f32_3 %125 = OpVectorShuffle %124 %124 0 1 2 
                                       f32_4 %126 = OpLoad %9 
                                       f32_3 %127 = OpVectorShuffle %126 %126 0 0 0 
                                       f32_3 %128 = OpFMul %125 %127 
                                       f32_4 %129 = OpLoad %49 
                                       f32_3 %130 = OpVectorShuffle %129 %129 0 1 2 
                                       f32_3 %131 = OpFAdd %128 %130 
                                       f32_4 %132 = OpLoad %49 
                                       f32_4 %133 = OpVectorShuffle %132 %131 4 5 6 3 
                                                      OpStore %49 %133 
                              Uniform f32_4* %134 = OpAccessChain %21 %36 %36 
                                       f32_4 %135 = OpLoad %134 
                                       f32_3 %136 = OpVectorShuffle %135 %135 0 1 2 
                                       f32_4 %137 = OpLoad %9 
                                       f32_3 %138 = OpVectorShuffle %137 %137 2 2 2 
                                       f32_3 %139 = OpFMul %136 %138 
                                       f32_4 %140 = OpLoad %49 
                                       f32_3 %141 = OpVectorShuffle %140 %140 0 1 2 
                                       f32_3 %142 = OpFAdd %139 %141 
                                       f32_4 %143 = OpLoad %9 
                                       f32_4 %144 = OpVectorShuffle %143 %142 4 5 6 3 
                                                      OpStore %9 %144 
                              Uniform f32_4* %145 = OpAccessChain %21 %36 %45 
                                       f32_4 %146 = OpLoad %145 
                                       f32_3 %147 = OpVectorShuffle %146 %146 0 1 2 
                                       f32_4 %148 = OpLoad %9 
                                       f32_3 %149 = OpVectorShuffle %148 %148 3 3 3 
                                       f32_3 %150 = OpFMul %147 %149 
                                       f32_4 %151 = OpLoad %9 
                                       f32_3 %152 = OpVectorShuffle %151 %151 0 1 2 
                                       f32_3 %153 = OpFAdd %150 %152 
                                       f32_4 %154 = OpLoad %9 
                                       f32_4 %155 = OpVectorShuffle %154 %153 4 5 6 3 
                                                      OpStore %9 %155 
                                       f32_4 %156 = OpLoad %9 
                                       f32_3 %157 = OpVectorShuffle %156 %156 0 1 2 
                                       f32_3 %161 = OpFMul %157 %160 
                                       f32_4 %162 = OpLoad %49 
                                       f32_4 %163 = OpVectorShuffle %162 %161 4 5 6 3 
                                                      OpStore %49 %163 
                                       f32_4 %164 = OpLoad %9 
                                       f32_3 %165 = OpVectorShuffle %164 %164 0 1 2 
                                       f32_3 %166 = OpFNegate %165 
                                       f32_3 %167 = OpFMul %166 %160 
                                       f32_3 %170 = OpLoad %169 
                                       f32_3 %171 = OpFAdd %167 %170 
                                       f32_4 %172 = OpLoad %9 
                                       f32_4 %173 = OpVectorShuffle %172 %171 4 5 6 3 
                                                      OpStore %9 %173 
                                Uniform f32* %177 = OpAccessChain %21 %176 
                                         f32 %178 = OpLoad %177 
                                       f32_3 %179 = OpCompositeConstruct %178 %178 %178 
                                       f32_4 %180 = OpLoad %9 
                                       f32_3 %181 = OpVectorShuffle %180 %180 0 1 2 
                                       f32_3 %182 = OpFMul %179 %181 
                                       f32_4 %183 = OpLoad %49 
                                       f32_3 %184 = OpVectorShuffle %183 %183 0 1 2 
                                       f32_3 %185 = OpFAdd %182 %184 
                                                      OpStore vs_TEXCOORD1 %185 
                                 Output f32* %187 = OpAccessChain %80 %28 %76 
                                         f32 %188 = OpLoad %187 
                                         f32 %189 = OpFNegate %188 
                                 Output f32* %190 = OpAccessChain %80 %28 %76 
                                                      OpStore %190 %189 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 713
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %24 %38 %702 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpDecorate %13 ArrayStride 13 
                                                      OpMemberDecorate %14 0 Offset 14 
                                                      OpMemberDecorate %14 1 Offset 14 
                                                      OpMemberDecorate %14 2 Offset 14 
                                                      OpMemberDecorate %14 3 Offset 14 
                                                      OpMemberDecorate %14 4 Offset 14 
                                                      OpMemberDecorate %14 5 Offset 14 
                                                      OpMemberDecorate %14 6 Offset 14 
                                                      OpMemberDecorate %14 7 Offset 14 
                                                      OpMemberDecorate %14 8 Offset 14 
                                                      OpDecorate %14 Block 
                                                      OpDecorate %16 DescriptorSet 16 
                                                      OpDecorate %16 Binding 16 
                                                      OpDecorate vs_TEXCOORD1 Location 24 
                                                      OpDecorate vs_TEXCOORD0 Location 38 
                                                      OpDecorate %50 DescriptorSet 50 
                                                      OpDecorate %50 Binding 50 
                                                      OpDecorate %54 DescriptorSet 54 
                                                      OpDecorate %54 Binding 54 
                                                      OpDecorate %180 DescriptorSet 180 
                                                      OpDecorate %180 Binding 180 
                                                      OpDecorate %182 DescriptorSet 182 
                                                      OpDecorate %182 Binding 182 
                                                      OpDecorate %270 DescriptorSet 270 
                                                      OpDecorate %270 Binding 270 
                                                      OpDecorate %272 DescriptorSet 272 
                                                      OpDecorate %272 Binding 272 
                                                      OpDecorate %374 DescriptorSet 374 
                                                      OpDecorate %374 Binding 374 
                                                      OpDecorate %376 DescriptorSet 376 
                                                      OpDecorate %376 Binding 376 
                                                      OpDecorate %384 DescriptorSet 384 
                                                      OpDecorate %384 Binding 384 
                                                      OpDecorate %386 DescriptorSet 386 
                                                      OpDecorate %386 Binding 386 
                                                      OpDecorate %392 DescriptorSet 392 
                                                      OpDecorate %392 Binding 392 
                                                      OpDecorate %394 DescriptorSet 394 
                                                      OpDecorate %394 Binding 394 
                                                      OpDecorate %702 Location 702 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 3 
                                               %8 = OpTypePointer Private %7 
                                Private f32_3* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 4 
                                              %11 = OpTypeInt 32 0 
                                          u32 %12 = OpConstant 4 
                                              %13 = OpTypeArray %10 %12 
                                              %14 = OpTypeStruct %7 %10 %10 %13 %10 %10 %10 %10 %10 
                                              %15 = OpTypePointer Uniform %14 
Uniform struct {f32_3; f32_4; f32_4; f32_4[4]; f32_4; f32_4; f32_4; f32_4; f32_4;}* %16 = OpVariable Uniform 
                                              %17 = OpTypeInt 32 1 
                                          i32 %18 = OpConstant 1 
                                          u32 %19 = OpConstant 2 
                                              %20 = OpTypePointer Uniform %6 
                                              %23 = OpTypePointer Input %7 
                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                                              %25 = OpTypePointer Input %6 
                                          u32 %29 = OpConstant 0 
                                              %30 = OpTypePointer Private %6 
                               Private f32_3* %36 = OpVariable Private 
                                              %37 = OpTypePointer Input %10 
                        Input f32_4* vs_TEXCOORD0 = OpVariable Input 
                                              %39 = OpTypeVector %6 2 
                                 Private f32* %47 = OpVariable Private 
                                              %48 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %49 = OpTypePointer UniformConstant %48 
         UniformConstant read_only Texture2D* %50 = OpVariable UniformConstant 
                                              %52 = OpTypeSampler 
                                              %53 = OpTypePointer UniformConstant %52 
                     UniformConstant sampler* %54 = OpVariable UniformConstant 
                                              %56 = OpTypeSampledImage %48 
                                          i32 %62 = OpConstant 2 
                                          u32 %67 = OpConstant 1 
                                          f32 %71 = OpConstant 3.674022E-40 
                                              %74 = OpTypePointer Private %10 
                               Private f32_4* %75 = OpVariable Private 
                               Private f32_3* %82 = OpVariable Private 
                                          i32 %85 = OpConstant 3 
                                              %86 = OpTypePointer Uniform %10 
                                          i32 %91 = OpConstant 0 
                                         i32 %123 = OpConstant 6 
                                         u32 %146 = OpConstant 3 
                              Private f32_3* %156 = OpVariable Private 
                                         i32 %159 = OpConstant 7 
                                Private f32* %165 = OpVariable Private 
                                Private f32* %169 = OpVariable Private 
        UniformConstant read_only Texture2D* %180 = OpVariable UniformConstant 
                    UniformConstant sampler* %182 = OpVariable UniformConstant 
                                         i32 %191 = OpConstant 5 
                                         f32 %201 = OpConstant 3.674022E-40 
                                             %204 = OpTypeBool 
                                             %205 = OpTypePointer Private %204 
                               Private bool* %206 = OpVariable Private 
                                         f32 %209 = OpConstant 3.674022E-40 
                                Private f32* %214 = OpVariable Private 
                                         i32 %228 = OpConstant 4 
                                         f32 %234 = OpConstant 3.674022E-40 
                              Private f32_4* %252 = OpVariable Private 
                                         f32 %254 = OpConstant 3.674022E-40 
                                       f32_3 %255 = OpConstantComposite %254 %254 %254 
                                             %259 = OpTypePointer Function %10 
                                             %268 = OpTypeImage %6 Cube 0 0 0 1 Unknown 
                                             %269 = OpTypePointer UniformConstant %268 
      UniformConstant read_only TextureCube* %270 = OpVariable UniformConstant 
                    UniformConstant sampler* %272 = OpVariable UniformConstant 
                                             %274 = OpTypeImage %6 Cube 1 0 0 1 Unknown 
                                             %275 = OpTypeSampledImage %274 
                              Private f32_3* %281 = OpVariable Private 
                                         f32 %283 = OpConstant 3.674022E-40 
                                       f32_3 %284 = OpConstantComposite %283 %283 %254 
                                       f32_3 %301 = OpConstantComposite %283 %254 %283 
                                       f32_3 %318 = OpConstantComposite %254 %283 %283 
                                         f32 %335 = OpConstant 3.674022E-40 
                                       f32_4 %336 = OpConstantComposite %335 %335 %335 %335 
                                Private f32* %338 = OpVariable Private 
                                         i32 %367 = OpConstant 8 
        UniformConstant read_only Texture2D* %374 = OpVariable UniformConstant 
                    UniformConstant sampler* %376 = OpVariable UniformConstant 
                              Private f32_4* %383 = OpVariable Private 
        UniformConstant read_only Texture2D* %384 = OpVariable UniformConstant 
                    UniformConstant sampler* %386 = OpVariable UniformConstant 
        UniformConstant read_only Texture2D* %392 = OpVariable UniformConstant 
                    UniformConstant sampler* %394 = OpVariable UniformConstant 
                                         f32 %402 = OpConstant 3.674022E-40 
                                       f32_3 %403 = OpConstantComposite %402 %402 %402 
                                         f32 %405 = OpConstant 3.674022E-40 
                                       f32_3 %406 = OpConstantComposite %405 %405 %405 
                                             %422 = OpTypePointer Uniform %7 
                              Private f32_4* %446 = OpVariable Private 
                                       f32_4 %450 = OpConstantComposite %71 %71 %71 %71 
                                         f32 %465 = OpConstant 3.674022E-40 
                                         f32 %515 = OpConstant 3.674022E-40 
                                Private f32* %518 = OpVariable Private 
                                Private f32* %522 = OpVariable Private 
                                         f32 %567 = OpConstant 3.674022E-40 
                                         f32 %594 = OpConstant 3.674022E-40 
                                         f32 %615 = OpConstant 3.674022E-40 
                                         f32 %622 = OpConstant 3.674022E-40 
                                         f32 %642 = OpConstant 3.674022E-40 
                               Private bool* %651 = OpVariable Private 
                                             %701 = OpTypePointer Output %10 
                               Output f32_4* %702 = OpVariable Output 
                                             %710 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_4* %260 = OpVariable Function 
                             Function f32_4* %286 = OpVariable Function 
                             Function f32_4* %303 = OpVariable Function 
                             Function f32_4* %320 = OpVariable Function 
                                 Uniform f32* %21 = OpAccessChain %16 %18 %19 
                                          f32 %22 = OpLoad %21 
                                   Input f32* %26 = OpAccessChain vs_TEXCOORD1 %19 
                                          f32 %27 = OpLoad %26 
                                          f32 %28 = OpFDiv %22 %27 
                                 Private f32* %31 = OpAccessChain %9 %29 
                                                      OpStore %31 %28 
                                        f32_3 %32 = OpLoad %9 
                                        f32_3 %33 = OpVectorShuffle %32 %32 0 0 0 
                                        f32_3 %34 = OpLoad vs_TEXCOORD1 
                                        f32_3 %35 = OpFMul %33 %34 
                                                      OpStore %9 %35 
                                        f32_4 %40 = OpLoad vs_TEXCOORD0 
                                        f32_2 %41 = OpVectorShuffle %40 %40 0 1 
                                        f32_4 %42 = OpLoad vs_TEXCOORD0 
                                        f32_2 %43 = OpVectorShuffle %42 %42 3 3 
                                        f32_2 %44 = OpFDiv %41 %43 
                                        f32_3 %45 = OpLoad %36 
                                        f32_3 %46 = OpVectorShuffle %45 %44 3 4 2 
                                                      OpStore %36 %46 
                          read_only Texture2D %51 = OpLoad %50 
                                      sampler %55 = OpLoad %54 
                   read_only Texture2DSampled %57 = OpSampledImage %51 %55 
                                        f32_3 %58 = OpLoad %36 
                                        f32_2 %59 = OpVectorShuffle %58 %58 0 1 
                                        f32_4 %60 = OpImageSampleImplicitLod %57 %59 
                                          f32 %61 = OpCompositeExtract %60 0 
                                                      OpStore %47 %61 
                                 Uniform f32* %63 = OpAccessChain %16 %62 %29 
                                          f32 %64 = OpLoad %63 
                                          f32 %65 = OpLoad %47 
                                          f32 %66 = OpFMul %64 %65 
                                 Uniform f32* %68 = OpAccessChain %16 %62 %67 
                                          f32 %69 = OpLoad %68 
                                          f32 %70 = OpFAdd %66 %69 
                                                      OpStore %47 %70 
                                          f32 %72 = OpLoad %47 
                                          f32 %73 = OpFDiv %71 %72 
                                                      OpStore %47 %73 
                                          f32 %76 = OpLoad %47 
                                        f32_3 %77 = OpCompositeConstruct %76 %76 %76 
                                        f32_3 %78 = OpLoad %9 
                                        f32_3 %79 = OpFMul %77 %78 
                                        f32_4 %80 = OpLoad %75 
                                        f32_4 %81 = OpVectorShuffle %80 %79 4 5 6 3 
                                                      OpStore %75 %81 
                                        f32_4 %83 = OpLoad %75 
                                        f32_3 %84 = OpVectorShuffle %83 %83 1 1 1 
                               Uniform f32_4* %87 = OpAccessChain %16 %85 %18 
                                        f32_4 %88 = OpLoad %87 
                                        f32_3 %89 = OpVectorShuffle %88 %88 0 1 2 
                                        f32_3 %90 = OpFMul %84 %89 
                                                      OpStore %82 %90 
                               Uniform f32_4* %92 = OpAccessChain %16 %85 %91 
                                        f32_4 %93 = OpLoad %92 
                                        f32_3 %94 = OpVectorShuffle %93 %93 0 1 2 
                                        f32_4 %95 = OpLoad %75 
                                        f32_3 %96 = OpVectorShuffle %95 %95 0 0 0 
                                        f32_3 %97 = OpFMul %94 %96 
                                        f32_3 %98 = OpLoad %82 
                                        f32_3 %99 = OpFAdd %97 %98 
                                       f32_4 %100 = OpLoad %75 
                                       f32_4 %101 = OpVectorShuffle %100 %99 4 5 2 6 
                                                      OpStore %75 %101 
                              Uniform f32_4* %102 = OpAccessChain %16 %85 %62 
                                       f32_4 %103 = OpLoad %102 
                                       f32_3 %104 = OpVectorShuffle %103 %103 0 1 2 
                                       f32_4 %105 = OpLoad %75 
                                       f32_3 %106 = OpVectorShuffle %105 %105 2 2 2 
                                       f32_3 %107 = OpFMul %104 %106 
                                       f32_4 %108 = OpLoad %75 
                                       f32_3 %109 = OpVectorShuffle %108 %108 0 1 3 
                                       f32_3 %110 = OpFAdd %107 %109 
                                       f32_4 %111 = OpLoad %75 
                                       f32_4 %112 = OpVectorShuffle %111 %110 4 5 2 6 
                                                      OpStore %75 %112 
                                       f32_4 %113 = OpLoad %75 
                                       f32_3 %114 = OpVectorShuffle %113 %113 0 1 3 
                              Uniform f32_4* %115 = OpAccessChain %16 %85 %85 
                                       f32_4 %116 = OpLoad %115 
                                       f32_3 %117 = OpVectorShuffle %116 %116 0 1 2 
                                       f32_3 %118 = OpFAdd %114 %117 
                                       f32_4 %119 = OpLoad %75 
                                       f32_4 %120 = OpVectorShuffle %119 %118 4 5 2 6 
                                                      OpStore %75 %120 
                                       f32_4 %121 = OpLoad %75 
                                       f32_3 %122 = OpVectorShuffle %121 %121 0 1 3 
                              Uniform f32_4* %124 = OpAccessChain %16 %123 
                                       f32_4 %125 = OpLoad %124 
                                       f32_3 %126 = OpVectorShuffle %125 %125 0 1 2 
                                       f32_3 %127 = OpFNegate %126 
                                       f32_3 %128 = OpFAdd %122 %127 
                                                      OpStore %82 %128 
                                       f32_3 %129 = OpLoad %82 
                                       f32_3 %130 = OpLoad %82 
                                         f32 %131 = OpDot %129 %130 
                                Private f32* %132 = OpAccessChain %9 %29 
                                                      OpStore %132 %131 
                                Private f32* %133 = OpAccessChain %9 %29 
                                         f32 %134 = OpLoad %133 
                                         f32 %135 = OpExtInst %1 31 %134 
                                Private f32* %136 = OpAccessChain %9 %29 
                                                      OpStore %136 %135 
                                Private f32* %137 = OpAccessChain %9 %19 
                                         f32 %138 = OpLoad %137 
                                         f32 %139 = OpFNegate %138 
                                         f32 %140 = OpLoad %47 
                                         f32 %141 = OpFMul %139 %140 
                                Private f32* %142 = OpAccessChain %9 %29 
                                         f32 %143 = OpLoad %142 
                                         f32 %144 = OpFAdd %141 %143 
                                Private f32* %145 = OpAccessChain %9 %29 
                                                      OpStore %145 %144 
                                Uniform f32* %147 = OpAccessChain %16 %123 %146 
                                         f32 %148 = OpLoad %147 
                                Private f32* %149 = OpAccessChain %9 %29 
                                         f32 %150 = OpLoad %149 
                                         f32 %151 = OpFMul %148 %150 
                                Private f32* %152 = OpAccessChain %75 %19 
                                         f32 %153 = OpLoad %152 
                                         f32 %154 = OpFAdd %151 %153 
                                Private f32* %155 = OpAccessChain %9 %29 
                                                      OpStore %155 %154 
                                       f32_4 %157 = OpLoad %75 
                                       f32_3 %158 = OpVectorShuffle %157 %157 0 1 3 
                              Uniform f32_4* %160 = OpAccessChain %16 %159 
                                       f32_4 %161 = OpLoad %160 
                                       f32_3 %162 = OpVectorShuffle %161 %161 0 1 2 
                                       f32_3 %163 = OpFNegate %162 
                                       f32_3 %164 = OpFAdd %158 %163 
                                                      OpStore %156 %164 
                                       f32_3 %166 = OpLoad %156 
                                       f32_3 %167 = OpLoad %156 
                                         f32 %168 = OpDot %166 %167 
                                                      OpStore %165 %168 
                                         f32 %170 = OpLoad %165 
                                         f32 %171 = OpExtInst %1 32 %170 
                                                      OpStore %169 %171 
                                       f32_3 %172 = OpLoad %156 
                                         f32 %173 = OpLoad %169 
                                       f32_3 %174 = OpCompositeConstruct %173 %173 %173 
                                       f32_3 %175 = OpFMul %172 %174 
                                                      OpStore %82 %175 
                                         f32 %176 = OpLoad %165 
                                Uniform f32* %177 = OpAccessChain %16 %159 %146 
                                         f32 %178 = OpLoad %177 
                                         f32 %179 = OpFMul %176 %178 
                                                      OpStore %165 %179 
                         read_only Texture2D %181 = OpLoad %180 
                                     sampler %183 = OpLoad %182 
                  read_only Texture2DSampled %184 = OpSampledImage %181 %183 
                                         f32 %185 = OpLoad %165 
                                       f32_2 %186 = OpCompositeConstruct %185 %185 
                                       f32_4 %187 = OpImageSampleImplicitLod %184 %186 
                                         f32 %188 = OpCompositeExtract %187 0 
                                                      OpStore %165 %188 
                                Private f32* %189 = OpAccessChain %9 %29 
                                         f32 %190 = OpLoad %189 
                                Uniform f32* %192 = OpAccessChain %16 %191 %19 
                                         f32 %193 = OpLoad %192 
                                         f32 %194 = OpFMul %190 %193 
                                Uniform f32* %195 = OpAccessChain %16 %191 %146 
                                         f32 %196 = OpLoad %195 
                                         f32 %197 = OpFAdd %194 %196 
                                Private f32* %198 = OpAccessChain %9 %29 
                                                      OpStore %198 %197 
                                Private f32* %199 = OpAccessChain %9 %29 
                                         f32 %200 = OpLoad %199 
                                         f32 %202 = OpExtInst %1 43 %200 %201 %71 
                                Private f32* %203 = OpAccessChain %9 %29 
                                                      OpStore %203 %202 
                                Private f32* %207 = OpAccessChain %9 %29 
                                         f32 %208 = OpLoad %207 
                                        bool %210 = OpFOrdLessThan %208 %209 
                                                      OpStore %206 %210 
                                        bool %211 = OpLoad %206 
                                                      OpSelectionMerge %213 None 
                                                      OpBranchConditional %211 %212 %349 
                                             %212 = OpLabel 
                                Private f32* %215 = OpAccessChain %156 %67 
                                         f32 %216 = OpLoad %215 
                                         f32 %217 = OpExtInst %1 4 %216 
                                Private f32* %218 = OpAccessChain %156 %29 
                                         f32 %219 = OpLoad %218 
                                         f32 %220 = OpExtInst %1 4 %219 
                                         f32 %221 = OpExtInst %1 40 %217 %220 
                                                      OpStore %214 %221 
                                Private f32* %222 = OpAccessChain %156 %19 
                                         f32 %223 = OpLoad %222 
                                         f32 %224 = OpExtInst %1 4 %223 
                                         f32 %225 = OpLoad %214 
                                         f32 %226 = OpExtInst %1 40 %224 %225 
                                                      OpStore %214 %226 
                                         f32 %227 = OpLoad %214 
                                Uniform f32* %229 = OpAccessChain %16 %228 %19 
                                         f32 %230 = OpLoad %229 
                                         f32 %231 = OpFNegate %230 
                                         f32 %232 = OpFAdd %227 %231 
                                                      OpStore %214 %232 
                                         f32 %233 = OpLoad %214 
                                         f32 %235 = OpExtInst %1 40 %233 %234 
                                                      OpStore %214 %235 
                                         f32 %236 = OpLoad %214 
                                Uniform f32* %237 = OpAccessChain %16 %228 %146 
                                         f32 %238 = OpLoad %237 
                                         f32 %239 = OpFMul %236 %238 
                                                      OpStore %214 %239 
                                Uniform f32* %240 = OpAccessChain %16 %228 %67 
                                         f32 %241 = OpLoad %240 
                                         f32 %242 = OpLoad %214 
                                         f32 %243 = OpFDiv %241 %242 
                                                      OpStore %214 %243 
                                         f32 %244 = OpLoad %214 
                                Uniform f32* %245 = OpAccessChain %16 %228 %29 
                                         f32 %246 = OpLoad %245 
                                         f32 %247 = OpFNegate %246 
                                         f32 %248 = OpFAdd %244 %247 
                                                      OpStore %214 %248 
                                         f32 %249 = OpLoad %214 
                                         f32 %250 = OpFNegate %249 
                                         f32 %251 = OpFAdd %250 %71 
                                                      OpStore %214 %251 
                                       f32_3 %253 = OpLoad %156 
                                       f32_3 %256 = OpFAdd %253 %255 
                                       f32_4 %257 = OpLoad %252 
                                       f32_4 %258 = OpVectorShuffle %257 %256 4 5 6 3 
                                                      OpStore %252 %258 
                                       f32_4 %261 = OpLoad %252 
                                       f32_3 %262 = OpVectorShuffle %261 %261 0 1 2 
                                         f32 %263 = OpLoad %214 
                                         f32 %264 = OpCompositeExtract %262 0 
                                         f32 %265 = OpCompositeExtract %262 1 
                                         f32 %266 = OpCompositeExtract %262 2 
                                       f32_4 %267 = OpCompositeConstruct %264 %265 %266 %263 
                                                      OpStore %260 %267 
                       read_only TextureCube %271 = OpLoad %270 
                                     sampler %273 = OpLoad %272 
                read_only TextureCubeSampled %276 = OpSampledImage %271 %273 
                                       f32_4 %277 = OpLoad %260 
                                         f32 %278 = OpCompositeExtract %277 3 
                                         f32 %279 = OpImageSampleDrefImplicitLod %276 %277 %278 
                                Private f32* %280 = OpAccessChain %252 %29 
                                                      OpStore %280 %279 
                                       f32_3 %282 = OpLoad %156 
                                       f32_3 %285 = OpFAdd %282 %284 
                                                      OpStore %281 %285 
                                       f32_3 %287 = OpLoad %281 
                                         f32 %288 = OpLoad %214 
                                         f32 %289 = OpCompositeExtract %287 0 
                                         f32 %290 = OpCompositeExtract %287 1 
                                         f32 %291 = OpCompositeExtract %287 2 
                                       f32_4 %292 = OpCompositeConstruct %289 %290 %291 %288 
                                                      OpStore %286 %292 
                       read_only TextureCube %293 = OpLoad %270 
                                     sampler %294 = OpLoad %272 
                read_only TextureCubeSampled %295 = OpSampledImage %293 %294 
                                       f32_4 %296 = OpLoad %286 
                                         f32 %297 = OpCompositeExtract %296 3 
                                         f32 %298 = OpImageSampleDrefImplicitLod %295 %296 %297 
                                Private f32* %299 = OpAccessChain %252 %67 
                                                      OpStore %299 %298 
                                       f32_3 %300 = OpLoad %156 
                                       f32_3 %302 = OpFAdd %300 %301 
                                                      OpStore %281 %302 
                                       f32_3 %304 = OpLoad %281 
                                         f32 %305 = OpLoad %214 
                                         f32 %306 = OpCompositeExtract %304 0 
                                         f32 %307 = OpCompositeExtract %304 1 
                                         f32 %308 = OpCompositeExtract %304 2 
                                       f32_4 %309 = OpCompositeConstruct %306 %307 %308 %305 
                                                      OpStore %303 %309 
                       read_only TextureCube %310 = OpLoad %270 
                                     sampler %311 = OpLoad %272 
                read_only TextureCubeSampled %312 = OpSampledImage %310 %311 
                                       f32_4 %313 = OpLoad %303 
                                         f32 %314 = OpCompositeExtract %313 3 
                                         f32 %315 = OpImageSampleDrefImplicitLod %312 %313 %314 
                                Private f32* %316 = OpAccessChain %252 %19 
                                                      OpStore %316 %315 
                                       f32_3 %317 = OpLoad %156 
                                       f32_3 %319 = OpFAdd %317 %318 
                                                      OpStore %281 %319 
                                       f32_3 %321 = OpLoad %281 
                                         f32 %322 = OpLoad %214 
                                         f32 %323 = OpCompositeExtract %321 0 
                                         f32 %324 = OpCompositeExtract %321 1 
                                         f32 %325 = OpCompositeExtract %321 2 
                                       f32_4 %326 = OpCompositeConstruct %323 %324 %325 %322 
                                                      OpStore %320 %326 
                       read_only TextureCube %327 = OpLoad %270 
                                     sampler %328 = OpLoad %272 
                read_only TextureCubeSampled %329 = OpSampledImage %327 %328 
                                       f32_4 %330 = OpLoad %320 
                                         f32 %331 = OpCompositeExtract %330 3 
                                         f32 %332 = OpImageSampleDrefImplicitLod %329 %330 %331 
                                Private f32* %333 = OpAccessChain %252 %146 
                                                      OpStore %333 %332 
                                       f32_4 %334 = OpLoad %252 
                                         f32 %337 = OpDot %334 %336 
                                                      OpStore %214 %337 
                                Uniform f32* %339 = OpAccessChain %16 %191 %29 
                                         f32 %340 = OpLoad %339 
                                         f32 %341 = OpFNegate %340 
                                         f32 %342 = OpFAdd %341 %71 
                                                      OpStore %338 %342 
                                         f32 %343 = OpLoad %214 
                                         f32 %344 = OpLoad %338 
                                         f32 %345 = OpFMul %343 %344 
                                Uniform f32* %346 = OpAccessChain %16 %191 %29 
                                         f32 %347 = OpLoad %346 
                                         f32 %348 = OpFAdd %345 %347 
                                                      OpStore %214 %348 
                                                      OpBranch %213 
                                             %349 = OpLabel 
                                                      OpStore %214 %71 
                                                      OpBranch %213 
                                             %213 = OpLabel 
                                         f32 %350 = OpLoad %214 
                                         f32 %351 = OpFNegate %350 
                                         f32 %352 = OpFAdd %351 %71 
                                                      OpStore %338 %352 
                                Private f32* %353 = OpAccessChain %9 %29 
                                         f32 %354 = OpLoad %353 
                                         f32 %355 = OpLoad %338 
                                         f32 %356 = OpFMul %354 %355 
                                         f32 %357 = OpLoad %214 
                                         f32 %358 = OpFAdd %356 %357 
                                Private f32* %359 = OpAccessChain %9 %29 
                                                      OpStore %359 %358 
                                Private f32* %360 = OpAccessChain %9 %29 
                                         f32 %361 = OpLoad %360 
                                         f32 %362 = OpLoad %165 
                                         f32 %363 = OpFMul %361 %362 
                                Private f32* %364 = OpAccessChain %9 %29 
                                                      OpStore %364 %363 
                                       f32_3 %365 = OpLoad %9 
                                       f32_3 %366 = OpVectorShuffle %365 %365 0 0 0 
                              Uniform f32_4* %368 = OpAccessChain %16 %367 
                                       f32_4 %369 = OpLoad %368 
                                       f32_3 %370 = OpVectorShuffle %369 %369 0 1 2 
                                       f32_3 %371 = OpFMul %366 %370 
                                       f32_4 %372 = OpLoad %252 
                                       f32_4 %373 = OpVectorShuffle %372 %371 4 5 6 3 
                                                      OpStore %252 %373 
                         read_only Texture2D %375 = OpLoad %374 
                                     sampler %377 = OpLoad %376 
                  read_only Texture2DSampled %378 = OpSampledImage %375 %377 
                                       f32_3 %379 = OpLoad %36 
                                       f32_2 %380 = OpVectorShuffle %379 %379 0 1 
                                       f32_4 %381 = OpImageSampleImplicitLod %378 %380 
                                       f32_3 %382 = OpVectorShuffle %381 %381 0 1 2 
                                                      OpStore %281 %382 
                         read_only Texture2D %385 = OpLoad %384 
                                     sampler %387 = OpLoad %386 
                  read_only Texture2DSampled %388 = OpSampledImage %385 %387 
                                       f32_3 %389 = OpLoad %36 
                                       f32_2 %390 = OpVectorShuffle %389 %389 0 1 
                                       f32_4 %391 = OpImageSampleImplicitLod %388 %390 
                                                      OpStore %383 %391 
                         read_only Texture2D %393 = OpLoad %392 
                                     sampler %395 = OpLoad %394 
                  read_only Texture2DSampled %396 = OpSampledImage %393 %395 
                                       f32_3 %397 = OpLoad %36 
                                       f32_2 %398 = OpVectorShuffle %397 %397 0 1 
                                       f32_4 %399 = OpImageSampleImplicitLod %396 %398 
                                       f32_3 %400 = OpVectorShuffle %399 %399 0 1 2 
                                                      OpStore %36 %400 
                                       f32_3 %401 = OpLoad %36 
                                       f32_3 %404 = OpFMul %401 %403 
                                       f32_3 %407 = OpFAdd %404 %406 
                                                      OpStore %36 %407 
                                       f32_3 %408 = OpLoad %36 
                                       f32_3 %409 = OpLoad %36 
                                         f32 %410 = OpDot %408 %409 
                                Private f32* %411 = OpAccessChain %9 %29 
                                                      OpStore %411 %410 
                                Private f32* %412 = OpAccessChain %9 %29 
                                         f32 %413 = OpLoad %412 
                                         f32 %414 = OpExtInst %1 32 %413 
                                Private f32* %415 = OpAccessChain %9 %29 
                                                      OpStore %415 %414 
                                       f32_3 %416 = OpLoad %9 
                                       f32_3 %417 = OpVectorShuffle %416 %416 0 0 0 
                                       f32_3 %418 = OpLoad %36 
                                       f32_3 %419 = OpFMul %417 %418 
                                                      OpStore %36 %419 
                                       f32_4 %420 = OpLoad %75 
                                       f32_3 %421 = OpVectorShuffle %420 %420 0 1 3 
                              Uniform f32_3* %423 = OpAccessChain %16 %91 
                                       f32_3 %424 = OpLoad %423 
                                       f32_3 %425 = OpFNegate %424 
                                       f32_3 %426 = OpFAdd %421 %425 
                                       f32_4 %427 = OpLoad %75 
                                       f32_4 %428 = OpVectorShuffle %427 %426 4 5 6 3 
                                                      OpStore %75 %428 
                                       f32_4 %429 = OpLoad %75 
                                       f32_3 %430 = OpVectorShuffle %429 %429 0 1 2 
                                       f32_4 %431 = OpLoad %75 
                                       f32_3 %432 = OpVectorShuffle %431 %431 0 1 2 
                                         f32 %433 = OpDot %430 %432 
                                Private f32* %434 = OpAccessChain %9 %29 
                                                      OpStore %434 %433 
                                Private f32* %435 = OpAccessChain %9 %29 
                                         f32 %436 = OpLoad %435 
                                         f32 %437 = OpExtInst %1 32 %436 
                                Private f32* %438 = OpAccessChain %9 %29 
                                                      OpStore %438 %437 
                                       f32_3 %439 = OpLoad %9 
                                       f32_3 %440 = OpVectorShuffle %439 %439 0 0 0 
                                       f32_4 %441 = OpLoad %75 
                                       f32_3 %442 = OpVectorShuffle %441 %441 0 1 2 
                                       f32_3 %443 = OpFMul %440 %442 
                                       f32_4 %444 = OpLoad %75 
                                       f32_4 %445 = OpVectorShuffle %444 %443 4 5 6 3 
                                                      OpStore %75 %445 
                                       f32_4 %447 = OpLoad %383 
                                       f32_4 %448 = OpVectorShuffle %447 %447 3 0 1 2 
                                       f32_4 %449 = OpFNegate %448 
                                       f32_4 %451 = OpFAdd %449 %450 
                                                      OpStore %446 %451 
                                       f32_3 %452 = OpLoad %156 
                                       f32_3 %453 = OpFNegate %452 
                                         f32 %454 = OpLoad %169 
                                       f32_3 %455 = OpCompositeConstruct %454 %454 %454 
                                       f32_3 %456 = OpFMul %453 %455 
                                       f32_4 %457 = OpLoad %75 
                                       f32_3 %458 = OpVectorShuffle %457 %457 0 1 2 
                                       f32_3 %459 = OpFNegate %458 
                                       f32_3 %460 = OpFAdd %456 %459 
                                                      OpStore %9 %460 
                                       f32_3 %461 = OpLoad %9 
                                       f32_3 %462 = OpLoad %9 
                                         f32 %463 = OpDot %461 %462 
                                                      OpStore %47 %463 
                                         f32 %464 = OpLoad %47 
                                         f32 %466 = OpExtInst %1 40 %464 %465 
                                                      OpStore %47 %466 
                                         f32 %467 = OpLoad %47 
                                         f32 %468 = OpExtInst %1 32 %467 
                                                      OpStore %47 %468 
                                         f32 %469 = OpLoad %47 
                                       f32_3 %470 = OpCompositeConstruct %469 %469 %469 
                                       f32_3 %471 = OpLoad %9 
                                       f32_3 %472 = OpFMul %470 %471 
                                                      OpStore %9 %472 
                                       f32_3 %473 = OpLoad %36 
                                       f32_4 %474 = OpLoad %75 
                                       f32_3 %475 = OpVectorShuffle %474 %474 0 1 2 
                                       f32_3 %476 = OpFNegate %475 
                                         f32 %477 = OpDot %473 %476 
                                                      OpStore %47 %477 
                                       f32_3 %478 = OpLoad %36 
                                       f32_3 %479 = OpLoad %82 
                                       f32_3 %480 = OpFNegate %479 
                                         f32 %481 = OpDot %478 %480 
                                                      OpStore %169 %481 
                                         f32 %482 = OpLoad %169 
                                         f32 %483 = OpExtInst %1 43 %482 %201 %71 
                                                      OpStore %169 %483 
                                       f32_3 %484 = OpLoad %36 
                                       f32_3 %485 = OpLoad %9 
                                         f32 %486 = OpDot %484 %485 
                                Private f32* %487 = OpAccessChain %36 %29 
                                                      OpStore %487 %486 
                                Private f32* %488 = OpAccessChain %36 %29 
                                         f32 %489 = OpLoad %488 
                                         f32 %490 = OpExtInst %1 43 %489 %201 %71 
                                Private f32* %491 = OpAccessChain %36 %29 
                                                      OpStore %491 %490 
                                       f32_3 %492 = OpLoad %82 
                                       f32_3 %493 = OpFNegate %492 
                                       f32_3 %494 = OpLoad %9 
                                         f32 %495 = OpDot %493 %494 
                                Private f32* %496 = OpAccessChain %9 %29 
                                                      OpStore %496 %495 
                                Private f32* %497 = OpAccessChain %9 %29 
                                         f32 %498 = OpLoad %497 
                                         f32 %499 = OpExtInst %1 43 %498 %201 %71 
                                Private f32* %500 = OpAccessChain %9 %29 
                                                      OpStore %500 %499 
                                Private f32* %501 = OpAccessChain %9 %29 
                                         f32 %502 = OpLoad %501 
                                Private f32* %503 = OpAccessChain %9 %29 
                                         f32 %504 = OpLoad %503 
                                         f32 %505 = OpFMul %502 %504 
                                Private f32* %506 = OpAccessChain %156 %29 
                                                      OpStore %506 %505 
                                       f32_3 %507 = OpLoad %156 
                                       f32_2 %508 = OpVectorShuffle %507 %507 0 0 
                                       f32_4 %509 = OpLoad %446 
                                       f32_2 %510 = OpVectorShuffle %509 %509 0 0 
                                         f32 %511 = OpDot %508 %510 
                                Private f32* %512 = OpAccessChain %156 %29 
                                                      OpStore %512 %511 
                                Private f32* %513 = OpAccessChain %156 %29 
                                         f32 %514 = OpLoad %513 
                                         f32 %516 = OpFAdd %514 %515 
                                Private f32* %517 = OpAccessChain %156 %29 
                                                      OpStore %517 %516 
                                         f32 %519 = OpLoad %169 
                                         f32 %520 = OpFNegate %519 
                                         f32 %521 = OpFAdd %520 %71 
                                                      OpStore %518 %521 
                                         f32 %523 = OpLoad %518 
                                         f32 %524 = OpLoad %518 
                                         f32 %525 = OpFMul %523 %524 
                                                      OpStore %522 %525 
                                         f32 %526 = OpLoad %522 
                                         f32 %527 = OpLoad %522 
                                         f32 %528 = OpFMul %526 %527 
                                                      OpStore %522 %528 
                                         f32 %529 = OpLoad %518 
                                         f32 %530 = OpLoad %522 
                                         f32 %531 = OpFMul %529 %530 
                                                      OpStore %518 %531 
                                Private f32* %532 = OpAccessChain %156 %29 
                                         f32 %533 = OpLoad %532 
                                         f32 %534 = OpLoad %518 
                                         f32 %535 = OpFMul %533 %534 
                                         f32 %536 = OpFAdd %535 %71 
                                                      OpStore %518 %536 
                                         f32 %537 = OpLoad %47 
                                         f32 %538 = OpExtInst %1 4 %537 
                                         f32 %539 = OpFNegate %538 
                                         f32 %540 = OpFAdd %539 %71 
                                                      OpStore %522 %540 
                                         f32 %541 = OpLoad %522 
                                         f32 %542 = OpLoad %522 
                                         f32 %543 = OpFMul %541 %542 
                                                      OpStore %165 %543 
                                         f32 %544 = OpLoad %165 
                                         f32 %545 = OpLoad %165 
                                         f32 %546 = OpFMul %544 %545 
                                                      OpStore %165 %546 
                                         f32 %547 = OpLoad %522 
                                         f32 %548 = OpLoad %165 
                                         f32 %549 = OpFMul %547 %548 
                                                      OpStore %522 %549 
                                Private f32* %550 = OpAccessChain %156 %29 
                                         f32 %551 = OpLoad %550 
                                         f32 %552 = OpLoad %522 
                                         f32 %553 = OpFMul %551 %552 
                                         f32 %554 = OpFAdd %553 %71 
                                Private f32* %555 = OpAccessChain %156 %29 
                                                      OpStore %555 %554 
                                Private f32* %556 = OpAccessChain %156 %29 
                                         f32 %557 = OpLoad %556 
                                         f32 %558 = OpLoad %518 
                                         f32 %559 = OpFMul %557 %558 
                                Private f32* %560 = OpAccessChain %156 %29 
                                                      OpStore %560 %559 
                                Private f32* %561 = OpAccessChain %446 %29 
                                         f32 %562 = OpLoad %561 
                                Private f32* %563 = OpAccessChain %446 %29 
                                         f32 %564 = OpLoad %563 
                                         f32 %565 = OpFMul %562 %564 
                                                      OpStore %518 %565 
                                         f32 %566 = OpLoad %518 
                                         f32 %568 = OpExtInst %1 40 %566 %567 
                                                      OpStore %518 %568 
                                         f32 %569 = OpLoad %518 
                                         f32 %570 = OpFNegate %569 
                                         f32 %571 = OpFAdd %570 %71 
                                                      OpStore %522 %571 
                                         f32 %572 = OpLoad %47 
                                         f32 %573 = OpExtInst %1 4 %572 
                                         f32 %574 = OpLoad %522 
                                         f32 %575 = OpFMul %573 %574 
                                         f32 %576 = OpLoad %518 
                                         f32 %577 = OpFAdd %575 %576 
                                                      OpStore %165 %577 
                                         f32 %578 = OpLoad %169 
                                         f32 %579 = OpLoad %522 
                                         f32 %580 = OpFMul %578 %579 
                                         f32 %581 = OpLoad %518 
                                         f32 %582 = OpFAdd %580 %581 
                                                      OpStore %522 %582 
                                         f32 %583 = OpLoad %47 
                                         f32 %584 = OpExtInst %1 4 %583 
                                         f32 %585 = OpLoad %522 
                                         f32 %586 = OpFMul %584 %585 
                                                      OpStore %47 %586 
                                         f32 %587 = OpLoad %169 
                                         f32 %588 = OpLoad %165 
                                         f32 %589 = OpFMul %587 %588 
                                         f32 %590 = OpLoad %47 
                                         f32 %591 = OpFAdd %589 %590 
                                                      OpStore %47 %591 
                                         f32 %592 = OpLoad %47 
                                         f32 %593 = OpFAdd %592 %234 
                                                      OpStore %47 %593 
                                         f32 %595 = OpLoad %47 
                                         f32 %596 = OpFDiv %594 %595 
                                                      OpStore %47 %596 
                                         f32 %597 = OpLoad %518 
                                         f32 %598 = OpLoad %518 
                                         f32 %599 = OpFMul %597 %598 
                                                      OpStore %518 %599 
                                Private f32* %600 = OpAccessChain %36 %29 
                                         f32 %601 = OpLoad %600 
                                         f32 %602 = OpLoad %518 
                                         f32 %603 = OpFMul %601 %602 
                                Private f32* %604 = OpAccessChain %36 %29 
                                         f32 %605 = OpLoad %604 
                                         f32 %606 = OpFNegate %605 
                                         f32 %607 = OpFAdd %603 %606 
                                                      OpStore %522 %607 
                                         f32 %608 = OpLoad %522 
                                Private f32* %609 = OpAccessChain %36 %29 
                                         f32 %610 = OpLoad %609 
                                         f32 %611 = OpFMul %608 %610 
                                         f32 %612 = OpFAdd %611 %71 
                                Private f32* %613 = OpAccessChain %36 %29 
                                                      OpStore %613 %612 
                                         f32 %614 = OpLoad %518 
                                         f32 %616 = OpFMul %614 %615 
                                                      OpStore %518 %616 
                                Private f32* %617 = OpAccessChain %36 %29 
                                         f32 %618 = OpLoad %617 
                                Private f32* %619 = OpAccessChain %36 %29 
                                         f32 %620 = OpLoad %619 
                                         f32 %621 = OpFMul %618 %620 
                                         f32 %623 = OpFAdd %621 %622 
                                Private f32* %624 = OpAccessChain %36 %29 
                                                      OpStore %624 %623 
                                         f32 %625 = OpLoad %518 
                                Private f32* %626 = OpAccessChain %36 %29 
                                         f32 %627 = OpLoad %626 
                                         f32 %628 = OpFDiv %625 %627 
                                                      OpStore %518 %628 
                                         f32 %629 = OpLoad %518 
                                         f32 %630 = OpLoad %47 
                                         f32 %631 = OpFMul %629 %630 
                                Private f32* %632 = OpAccessChain %156 %67 
                                                      OpStore %632 %631 
                                         f32 %633 = OpLoad %169 
                                       f32_2 %634 = OpCompositeConstruct %633 %633 
                                       f32_3 %635 = OpLoad %156 
                                       f32_2 %636 = OpVectorShuffle %635 %635 0 1 
                                       f32_2 %637 = OpFMul %634 %636 
                                       f32_3 %638 = OpLoad %156 
                                       f32_3 %639 = OpVectorShuffle %638 %637 3 4 2 
                                                      OpStore %156 %639 
                                Private f32* %640 = OpAccessChain %156 %67 
                                         f32 %641 = OpLoad %640 
                                         f32 %643 = OpFMul %641 %642 
                                                      OpStore %518 %643 
                                         f32 %644 = OpLoad %518 
                                         f32 %645 = OpExtInst %1 40 %644 %201 
                                                      OpStore %518 %645 
                                       f32_4 %646 = OpLoad %383 
                                       f32_3 %647 = OpVectorShuffle %646 %646 0 1 2 
                                       f32_4 %648 = OpLoad %383 
                                       f32_3 %649 = OpVectorShuffle %648 %648 0 1 2 
                                         f32 %650 = OpDot %647 %649 
                                                      OpStore %47 %650 
                                         f32 %652 = OpLoad %47 
                                        bool %653 = OpFOrdNotEqual %652 %201 
                                                      OpStore %651 %653 
                                        bool %654 = OpLoad %651 
                                         f32 %655 = OpSelect %654 %71 %201 
                                                      OpStore %47 %655 
                                         f32 %656 = OpLoad %47 
                                         f32 %657 = OpLoad %518 
                                         f32 %658 = OpFMul %656 %657 
                                                      OpStore %518 %658 
                                       f32_3 %659 = OpLoad %156 
                                       f32_3 %660 = OpVectorShuffle %659 %659 0 0 0 
                                       f32_4 %661 = OpLoad %252 
                                       f32_3 %662 = OpVectorShuffle %661 %661 0 1 2 
                                       f32_3 %663 = OpFMul %660 %662 
                                                      OpStore %36 %663 
                                       f32_4 %664 = OpLoad %252 
                                       f32_3 %665 = OpVectorShuffle %664 %664 0 1 2 
                                         f32 %666 = OpLoad %518 
                                       f32_3 %667 = OpCompositeConstruct %666 %666 %666 
                                       f32_3 %668 = OpFMul %665 %667 
                                                      OpStore %156 %668 
                                Private f32* %669 = OpAccessChain %9 %29 
                                         f32 %670 = OpLoad %669 
                                         f32 %671 = OpFNegate %670 
                                         f32 %672 = OpFAdd %671 %71 
                                Private f32* %673 = OpAccessChain %9 %29 
                                                      OpStore %673 %672 
                                Private f32* %674 = OpAccessChain %9 %29 
                                         f32 %675 = OpLoad %674 
                                Private f32* %676 = OpAccessChain %9 %29 
                                         f32 %677 = OpLoad %676 
                                         f32 %678 = OpFMul %675 %677 
                                                      OpStore %169 %678 
                                         f32 %679 = OpLoad %169 
                                         f32 %680 = OpLoad %169 
                                         f32 %681 = OpFMul %679 %680 
                                                      OpStore %169 %681 
                                Private f32* %682 = OpAccessChain %9 %29 
                                         f32 %683 = OpLoad %682 
                                         f32 %684 = OpLoad %169 
                                         f32 %685 = OpFMul %683 %684 
                                Private f32* %686 = OpAccessChain %9 %29 
                                                      OpStore %686 %685 
                                       f32_4 %687 = OpLoad %446 
                                       f32_3 %688 = OpVectorShuffle %687 %687 1 2 3 
                                       f32_3 %689 = OpLoad %9 
                                       f32_3 %690 = OpVectorShuffle %689 %689 0 0 0 
                                       f32_3 %691 = OpFMul %688 %690 
                                       f32_4 %692 = OpLoad %383 
                                       f32_3 %693 = OpVectorShuffle %692 %692 0 1 2 
                                       f32_3 %694 = OpFAdd %691 %693 
                                       f32_4 %695 = OpLoad %75 
                                       f32_4 %696 = OpVectorShuffle %695 %694 4 5 6 3 
                                                      OpStore %75 %696 
                                       f32_3 %697 = OpLoad %156 
                                       f32_4 %698 = OpLoad %75 
                                       f32_3 %699 = OpVectorShuffle %698 %698 0 1 2 
                                       f32_3 %700 = OpFMul %697 %699 
                                                      OpStore %9 %700 
                                       f32_3 %703 = OpLoad %281 
                                       f32_3 %704 = OpLoad %36 
                                       f32_3 %705 = OpFMul %703 %704 
                                       f32_3 %706 = OpLoad %9 
                                       f32_3 %707 = OpFAdd %705 %706 
                                       f32_4 %708 = OpLoad %702 
                                       f32_4 %709 = OpVectorShuffle %708 %707 4 5 6 3 
                                                      OpStore %702 %709 
                                 Output f32* %711 = OpAccessChain %702 %146 
                                                      OpStore %711 %71 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "UNITY_HDR_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "UNITY_HDR_ON" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _LightProjectionParams;
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
UNITY_LOCATION(0) uniform  sampler2D _CameraDepthTexture;
UNITY_LOCATION(1) uniform  sampler2D _LightTextureB0;
UNITY_LOCATION(2) uniform  samplerCube _LightTexture0;
UNITY_LOCATION(3) uniform  sampler2D _CameraGBufferTexture0;
UNITY_LOCATION(4) uniform  sampler2D _CameraGBufferTexture1;
UNITY_LOCATION(5) uniform  sampler2D _CameraGBufferTexture2;
UNITY_LOCATION(6) uniform  samplerCube _ShadowMapTexture;
UNITY_LOCATION(7) uniform  samplerCubeShadow hlslcc_zcmp_ShadowMapTexture;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
vec3 u_xlat6;
float u_xlat7;
float u_xlat12;
float u_xlat13;
float u_xlat18;
bool u_xlatb18;
float u_xlat19;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat2 = texture(_CameraDepthTexture, u_xlat1.xy);
    u_xlat18 = _ZBufferParams.x * u_xlat2.x + _ZBufferParams.y;
    u_xlat18 = float(1.0) / u_xlat18;
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat18 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat6.xyz = u_xlat2.xyw + (-_LightPos.xyz);
    u_xlat13 = max(abs(u_xlat6.y), abs(u_xlat6.x));
    u_xlat13 = max(abs(u_xlat6.z), u_xlat13);
    u_xlat13 = u_xlat13 + (-_LightProjectionParams.z);
    u_xlat13 = max(u_xlat13, 9.99999975e-06);
    u_xlat13 = u_xlat13 * _LightProjectionParams.w;
    u_xlat13 = _LightProjectionParams.y / u_xlat13;
    u_xlat13 = u_xlat13 + (-_LightProjectionParams.x);
    vec4 txVec0 = vec4(u_xlat6.xyz,u_xlat13);
    u_xlat13 = texture(hlslcc_zcmp_ShadowMapTexture, txVec0);
    u_xlat19 = (-_LightShadowData.x) + 1.0;
    u_xlat13 = u_xlat13 * u_xlat19 + _LightShadowData.x;
    u_xlat19 = (-u_xlat13) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat19 + u_xlat13;
    u_xlat13 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat19 = u_xlat13 * _LightPos.w;
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat3 = texture(_LightTextureB0, vec2(u_xlat19));
    u_xlat0.x = u_xlat0.x * u_xlat3.x;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat2.www + u_xlat3.xyz;
    u_xlat2.xyz = u_xlat2.xyw + (-_WorldSpaceCameraPos.xyz);
    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlat3 = texture(_LightTexture0, u_xlat3.xyz, -8.0);
    u_xlat0.x = u_xlat0.x * u_xlat3.w;
    u_xlat3.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat4.xyz = (-u_xlat6.xyz) * vec3(u_xlat13) + (-u_xlat2.xyz);
    u_xlat0.xyz = u_xlat6.xyz * vec3(u_xlat13);
    u_xlat18 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat18 = max(u_xlat18, 0.00100000005);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat4.xyz = vec3(u_xlat18) * u_xlat4.xyz;
    u_xlat5 = texture(_CameraGBufferTexture2, u_xlat1.xy);
    u_xlat5.xyz = u_xlat5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat18 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat5.xyz = vec3(u_xlat18) * u_xlat5.xyz;
    u_xlat18 = dot(u_xlat5.xyz, u_xlat4.xyz);
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
    u_xlat13 = dot((-u_xlat0.xyz), u_xlat4.xyz);
    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
    u_xlat0.x = dot(u_xlat5.xyz, (-u_xlat0.xyz));
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat6.x = dot(u_xlat5.xyz, (-u_xlat2.xyz));
    u_xlat2 = texture(_CameraGBufferTexture1, u_xlat1.xy);
    u_xlat4 = texture(_CameraGBufferTexture0, u_xlat1.xy);
    u_xlat5 = (-u_xlat2.wxyz) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat12 = u_xlat5.x * u_xlat5.x;
    u_xlat12 = max(u_xlat12, 0.00200000009);
    u_xlat1.x = u_xlat12 * u_xlat12;
    u_xlat7 = u_xlat18 * u_xlat1.x + (-u_xlat18);
    u_xlat18 = u_xlat7 * u_xlat18 + 1.0;
    u_xlat18 = u_xlat18 * u_xlat18 + 1.00000001e-07;
    u_xlat1.x = u_xlat1.x * 0.318309873;
    u_xlat18 = u_xlat1.x / u_xlat18;
    u_xlat1.x = (-u_xlat12) + 1.0;
    u_xlat7 = abs(u_xlat6.x) * u_xlat1.x + u_xlat12;
    u_xlat12 = u_xlat0.x * u_xlat1.x + u_xlat12;
    u_xlat12 = u_xlat12 * abs(u_xlat6.x);
    u_xlat6.x = -abs(u_xlat6.x) + 1.0;
    u_xlat12 = u_xlat0.x * u_xlat7 + u_xlat12;
    u_xlat12 = u_xlat12 + 9.99999975e-06;
    u_xlat12 = 0.5 / u_xlat12;
    u_xlat12 = u_xlat18 * u_xlat12;
    u_xlat12 = u_xlat12 * 3.14159274;
    u_xlat12 = u_xlat0.x * u_xlat12;
    u_xlat12 = max(u_xlat12, 0.0);
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlatb18 = u_xlat18!=0.0;
    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
    u_xlat12 = u_xlat18 * u_xlat12;
    u_xlat1.xyw = u_xlat3.xyz * vec3(u_xlat12);
    u_xlat12 = (-u_xlat13) + 1.0;
    u_xlat18 = u_xlat13 * u_xlat13;
    u_xlat18 = dot(vec2(u_xlat18), u_xlat5.xx);
    u_xlat18 = u_xlat18 + -0.5;
    u_xlat13 = u_xlat12 * u_xlat12;
    u_xlat13 = u_xlat13 * u_xlat13;
    u_xlat12 = u_xlat12 * u_xlat13;
    u_xlat2.xyz = u_xlat5.yzw * vec3(u_xlat12) + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat1.xyw * u_xlat2.xyz;
    u_xlat12 = u_xlat6.x * u_xlat6.x;
    u_xlat12 = u_xlat12 * u_xlat12;
    u_xlat6.x = u_xlat6.x * u_xlat12;
    u_xlat6.x = u_xlat18 * u_xlat6.x + 1.0;
    u_xlat12 = (-u_xlat0.x) + 1.0;
    u_xlat19 = u_xlat12 * u_xlat12;
    u_xlat19 = u_xlat19 * u_xlat19;
    u_xlat12 = u_xlat12 * u_xlat19;
    u_xlat12 = u_xlat18 * u_xlat12 + 1.0;
    u_xlat6.x = u_xlat6.x * u_xlat12;
    u_xlat0.x = u_xlat0.x * u_xlat6.x;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat3.xyz;
    SV_Target0.xyz = u_xlat4.xyz * u_xlat0.xyz + u_xlat1.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "UNITY_HDR_ON" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 192
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %80 %102 %169 %175 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpMemberDecorate %78 0 BuiltIn 78 
                                                      OpMemberDecorate %78 1 BuiltIn 78 
                                                      OpMemberDecorate %78 2 BuiltIn 78 
                                                      OpDecorate %78 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 102 
                                                      OpDecorate %169 Location 169 
                                                      OpDecorate vs_TEXCOORD1 Location 175 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %16 %17 %18 %6 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 1 
                                              %24 = OpTypePointer Uniform %7 
                                          i32 %28 = OpConstant 0 
                                          i32 %36 = OpConstant 2 
                                          i32 %45 = OpConstant 3 
                               Private f32_4* %49 = OpVariable Private 
                                          u32 %76 = OpConstant 1 
                                              %77 = OpTypeArray %6 %76 
                                              %78 = OpTypeStruct %7 %6 %77 
                                              %79 = OpTypePointer Output %78 
         Output struct {f32_4; f32; f32[1];}* %80 = OpVariable Output 
                                              %82 = OpTypePointer Output %7 
                                              %84 = OpTypePointer Private %6 
                                          u32 %87 = OpConstant 0 
                                              %88 = OpTypePointer Uniform %6 
                               Private f32_4* %93 = OpVariable Private 
                                              %94 = OpTypeVector %6 3 
                                          f32 %97 = OpConstant 3.674022E-40 
                                        f32_3 %98 = OpConstantComposite %97 %97 %97 
                       Output f32_4* vs_TEXCOORD0 = OpVariable Output 
                                             %103 = OpTypeVector %6 2 
                                         f32 %158 = OpConstant 3.674022E-40 
                                         f32 %159 = OpConstant 3.674022E-40 
                                       f32_3 %160 = OpConstantComposite %158 %158 %159 
                                             %168 = OpTypePointer Input %94 
                                Input f32_3* %169 = OpVariable Input 
                                             %174 = OpTypePointer Output %94 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                                         i32 %176 = OpConstant 4 
                                             %186 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %25 = OpAccessChain %21 %23 %23 
                                        f32_4 %26 = OpLoad %25 
                                        f32_4 %27 = OpFMul %13 %26 
                                                      OpStore %9 %27 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %28 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %44 = OpLoad %9 
                               Uniform f32_4* %46 = OpAccessChain %21 %23 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_4 %48 = OpFAdd %44 %47 
                                                      OpStore %9 %48 
                                        f32_4 %50 = OpLoad %9 
                                        f32_4 %51 = OpVectorShuffle %50 %50 1 1 1 1 
                               Uniform f32_4* %52 = OpAccessChain %21 %45 %23 
                                        f32_4 %53 = OpLoad %52 
                                        f32_4 %54 = OpFMul %51 %53 
                                                      OpStore %49 %54 
                               Uniform f32_4* %55 = OpAccessChain %21 %45 %28 
                                        f32_4 %56 = OpLoad %55 
                                        f32_4 %57 = OpLoad %9 
                                        f32_4 %58 = OpVectorShuffle %57 %57 0 0 0 0 
                                        f32_4 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %49 
                                        f32_4 %61 = OpFAdd %59 %60 
                                                      OpStore %49 %61 
                               Uniform f32_4* %62 = OpAccessChain %21 %45 %36 
                                        f32_4 %63 = OpLoad %62 
                                        f32_4 %64 = OpLoad %9 
                                        f32_4 %65 = OpVectorShuffle %64 %64 2 2 2 2 
                                        f32_4 %66 = OpFMul %63 %65 
                                        f32_4 %67 = OpLoad %49 
                                        f32_4 %68 = OpFAdd %66 %67 
                                                      OpStore %49 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %45 %45 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %9 
                                        f32_4 %72 = OpVectorShuffle %71 %71 3 3 3 3 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %49 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %49 %75 
                                        f32_4 %81 = OpLoad %49 
                                Output f32_4* %83 = OpAccessChain %80 %28 
                                                      OpStore %83 %81 
                                 Private f32* %85 = OpAccessChain %49 %76 
                                          f32 %86 = OpLoad %85 
                                 Uniform f32* %89 = OpAccessChain %21 %28 %87 
                                          f32 %90 = OpLoad %89 
                                          f32 %91 = OpFMul %86 %90 
                                 Private f32* %92 = OpAccessChain %49 %76 
                                                      OpStore %92 %91 
                                        f32_4 %95 = OpLoad %49 
                                        f32_3 %96 = OpVectorShuffle %95 %95 0 3 1 
                                        f32_3 %99 = OpFMul %96 %98 
                                       f32_4 %100 = OpLoad %93 
                                       f32_4 %101 = OpVectorShuffle %100 %99 4 1 5 6 
                                                      OpStore %93 %101 
                                       f32_4 %104 = OpLoad %49 
                                       f32_2 %105 = OpVectorShuffle %104 %104 2 3 
                                       f32_4 %106 = OpLoad vs_TEXCOORD0 
                                       f32_4 %107 = OpVectorShuffle %106 %105 0 1 4 5 
                                                      OpStore vs_TEXCOORD0 %107 
                                       f32_4 %108 = OpLoad %93 
                                       f32_2 %109 = OpVectorShuffle %108 %108 2 2 
                                       f32_4 %110 = OpLoad %93 
                                       f32_2 %111 = OpVectorShuffle %110 %110 0 3 
                                       f32_2 %112 = OpFAdd %109 %111 
                                       f32_4 %113 = OpLoad vs_TEXCOORD0 
                                       f32_4 %114 = OpVectorShuffle %113 %112 4 5 2 3 
                                                      OpStore vs_TEXCOORD0 %114 
                                       f32_4 %115 = OpLoad %9 
                                       f32_3 %116 = OpVectorShuffle %115 %115 1 1 1 
                              Uniform f32_4* %117 = OpAccessChain %21 %36 %23 
                                       f32_4 %118 = OpLoad %117 
                                       f32_3 %119 = OpVectorShuffle %118 %118 0 1 2 
                                       f32_3 %120 = OpFMul %116 %119 
                                       f32_4 %121 = OpLoad %49 
                                       f32_4 %122 = OpVectorShuffle %121 %120 4 5 6 3 
                                                      OpStore %49 %122 
                              Uniform f32_4* %123 = OpAccessChain %21 %36 %28 
                                       f32_4 %124 = OpLoad %123 
                                       f32_3 %125 = OpVectorShuffle %124 %124 0 1 2 
                                       f32_4 %126 = OpLoad %9 
                                       f32_3 %127 = OpVectorShuffle %126 %126 0 0 0 
                                       f32_3 %128 = OpFMul %125 %127 
                                       f32_4 %129 = OpLoad %49 
                                       f32_3 %130 = OpVectorShuffle %129 %129 0 1 2 
                                       f32_3 %131 = OpFAdd %128 %130 
                                       f32_4 %132 = OpLoad %49 
                                       f32_4 %133 = OpVectorShuffle %132 %131 4 5 6 3 
                                                      OpStore %49 %133 
                              Uniform f32_4* %134 = OpAccessChain %21 %36 %36 
                                       f32_4 %135 = OpLoad %134 
                                       f32_3 %136 = OpVectorShuffle %135 %135 0 1 2 
                                       f32_4 %137 = OpLoad %9 
                                       f32_3 %138 = OpVectorShuffle %137 %137 2 2 2 
                                       f32_3 %139 = OpFMul %136 %138 
                                       f32_4 %140 = OpLoad %49 
                                       f32_3 %141 = OpVectorShuffle %140 %140 0 1 2 
                                       f32_3 %142 = OpFAdd %139 %141 
                                       f32_4 %143 = OpLoad %9 
                                       f32_4 %144 = OpVectorShuffle %143 %142 4 5 6 3 
                                                      OpStore %9 %144 
                              Uniform f32_4* %145 = OpAccessChain %21 %36 %45 
                                       f32_4 %146 = OpLoad %145 
                                       f32_3 %147 = OpVectorShuffle %146 %146 0 1 2 
                                       f32_4 %148 = OpLoad %9 
                                       f32_3 %149 = OpVectorShuffle %148 %148 3 3 3 
                                       f32_3 %150 = OpFMul %147 %149 
                                       f32_4 %151 = OpLoad %9 
                                       f32_3 %152 = OpVectorShuffle %151 %151 0 1 2 
                                       f32_3 %153 = OpFAdd %150 %152 
                                       f32_4 %154 = OpLoad %9 
                                       f32_4 %155 = OpVectorShuffle %154 %153 4 5 6 3 
                                                      OpStore %9 %155 
                                       f32_4 %156 = OpLoad %9 
                                       f32_3 %157 = OpVectorShuffle %156 %156 0 1 2 
                                       f32_3 %161 = OpFMul %157 %160 
                                       f32_4 %162 = OpLoad %49 
                                       f32_4 %163 = OpVectorShuffle %162 %161 4 5 6 3 
                                                      OpStore %49 %163 
                                       f32_4 %164 = OpLoad %9 
                                       f32_3 %165 = OpVectorShuffle %164 %164 0 1 2 
                                       f32_3 %166 = OpFNegate %165 
                                       f32_3 %167 = OpFMul %166 %160 
                                       f32_3 %170 = OpLoad %169 
                                       f32_3 %171 = OpFAdd %167 %170 
                                       f32_4 %172 = OpLoad %9 
                                       f32_4 %173 = OpVectorShuffle %172 %171 4 5 6 3 
                                                      OpStore %9 %173 
                                Uniform f32* %177 = OpAccessChain %21 %176 
                                         f32 %178 = OpLoad %177 
                                       f32_3 %179 = OpCompositeConstruct %178 %178 %178 
                                       f32_4 %180 = OpLoad %9 
                                       f32_3 %181 = OpVectorShuffle %180 %180 0 1 2 
                                       f32_3 %182 = OpFMul %179 %181 
                                       f32_4 %183 = OpLoad %49 
                                       f32_3 %184 = OpVectorShuffle %183 %183 0 1 2 
                                       f32_3 %185 = OpFAdd %182 %184 
                                                      OpStore vs_TEXCOORD1 %185 
                                 Output f32* %187 = OpAccessChain %80 %28 %76 
                                         f32 %188 = OpLoad %187 
                                         f32 %189 = OpFNegate %188 
                                 Output f32* %190 = OpAccessChain %80 %28 %76 
                                                      OpStore %190 %189 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 678
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %25 %40 %665 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpDecorate %13 ArrayStride 13 
                                                      OpDecorate %14 ArrayStride 14 
                                                      OpMemberDecorate %15 0 Offset 15 
                                                      OpMemberDecorate %15 1 Offset 15 
                                                      OpMemberDecorate %15 2 Offset 15 
                                                      OpMemberDecorate %15 3 Offset 15 
                                                      OpMemberDecorate %15 4 Offset 15 
                                                      OpMemberDecorate %15 5 Offset 15 
                                                      OpMemberDecorate %15 6 Offset 15 
                                                      OpMemberDecorate %15 7 Offset 15 
                                                      OpMemberDecorate %15 8 Offset 15 
                                                      OpMemberDecorate %15 9 Offset 15 
                                                      OpDecorate %15 Block 
                                                      OpDecorate %17 DescriptorSet 17 
                                                      OpDecorate %17 Binding 17 
                                                      OpDecorate vs_TEXCOORD1 Location 25 
                                                      OpDecorate vs_TEXCOORD0 Location 40 
                                                      OpDecorate %52 DescriptorSet 52 
                                                      OpDecorate %52 Binding 52 
                                                      OpDecorate %56 DescriptorSet 56 
                                                      OpDecorate %56 Binding 56 
                                                      OpDecorate %229 DescriptorSet 229 
                                                      OpDecorate %229 Binding 229 
                                                      OpDecorate %231 DescriptorSet 231 
                                                      OpDecorate %231 Binding 231 
                                                      OpDecorate %269 DescriptorSet 269 
                                                      OpDecorate %269 Binding 269 
                                                      OpDecorate %271 DescriptorSet 271 
                                                      OpDecorate %271 Binding 271 
                                                      OpDecorate %320 DescriptorSet 320 
                                                      OpDecorate %320 Binding 320 
                                                      OpDecorate %322 DescriptorSet 322 
                                                      OpDecorate %322 Binding 322 
                                                      OpDecorate %393 DescriptorSet 393 
                                                      OpDecorate %393 Binding 393 
                                                      OpDecorate %395 DescriptorSet 395 
                                                      OpDecorate %395 Binding 395 
                                                      OpDecorate %446 DescriptorSet 446 
                                                      OpDecorate %446 Binding 446 
                                                      OpDecorate %448 DescriptorSet 448 
                                                      OpDecorate %448 Binding 448 
                                                      OpDecorate %454 DescriptorSet 454 
                                                      OpDecorate %454 Binding 454 
                                                      OpDecorate %456 DescriptorSet 456 
                                                      OpDecorate %456 Binding 456 
                                                      OpDecorate %665 Location 665 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 3 
                                               %8 = OpTypePointer Private %7 
                                Private f32_3* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 4 
                                              %11 = OpTypeInt 32 0 
                                          u32 %12 = OpConstant 4 
                                              %13 = OpTypeArray %10 %12 
                                              %14 = OpTypeArray %10 %12 
                                              %15 = OpTypeStruct %7 %10 %10 %13 %10 %10 %10 %10 %10 %14 
                                              %16 = OpTypePointer Uniform %15 
Uniform struct {f32_3; f32_4; f32_4; f32_4[4]; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[4];}* %17 = OpVariable Uniform 
                                              %18 = OpTypeInt 32 1 
                                          i32 %19 = OpConstant 1 
                                          u32 %20 = OpConstant 2 
                                              %21 = OpTypePointer Uniform %6 
                                              %24 = OpTypePointer Input %7 
                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                                              %26 = OpTypePointer Input %6 
                                          u32 %30 = OpConstant 0 
                                              %31 = OpTypePointer Private %6 
                                              %37 = OpTypePointer Private %10 
                               Private f32_4* %38 = OpVariable Private 
                                              %39 = OpTypePointer Input %10 
                        Input f32_4* vs_TEXCOORD0 = OpVariable Input 
                                              %41 = OpTypeVector %6 2 
                                 Private f32* %49 = OpVariable Private 
                                              %50 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %51 = OpTypePointer UniformConstant %50 
         UniformConstant read_only Texture2D* %52 = OpVariable UniformConstant 
                                              %54 = OpTypeSampler 
                                              %55 = OpTypePointer UniformConstant %54 
                     UniformConstant sampler* %56 = OpVariable UniformConstant 
                                              %58 = OpTypeSampledImage %50 
                                          i32 %64 = OpConstant 2 
                                          u32 %69 = OpConstant 1 
                                          f32 %73 = OpConstant 3.674022E-40 
                               Private f32_4* %76 = OpVariable Private 
                               Private f32_3* %83 = OpVariable Private 
                                          i32 %86 = OpConstant 3 
                                              %87 = OpTypePointer Uniform %10 
                                          i32 %92 = OpConstant 0 
                                         i32 %124 = OpConstant 6 
                                         u32 %147 = OpConstant 3 
                                         i32 %159 = OpConstant 5 
                                         f32 %169 = OpConstant 3.674022E-40 
                              Private f32_3* %172 = OpVariable Private 
                                         i32 %175 = OpConstant 7 
                                Private f32* %181 = OpVariable Private 
                                         i32 %195 = OpConstant 4 
                                         f32 %201 = OpConstant 3.674022E-40 
                                             %219 = OpTypePointer Function %10 
                                             %227 = OpTypeImage %6 Cube 0 0 0 1 Unknown 
                                             %228 = OpTypePointer UniformConstant %227 
      UniformConstant read_only TextureCube* %229 = OpVariable UniformConstant 
                    UniformConstant sampler* %231 = OpVariable UniformConstant 
                                             %233 = OpTypeImage %6 Cube 1 0 0 1 Unknown 
                                             %234 = OpTypeSampledImage %233 
                                Private f32* %239 = OpVariable Private 
        UniformConstant read_only Texture2D* %269 = OpVariable UniformConstant 
                    UniformConstant sampler* %271 = OpVariable UniformConstant 
                                         i32 %285 = OpConstant 9 
                                             %308 = OpTypePointer Uniform %7 
      UniformConstant read_only TextureCube* %320 = OpVariable UniformConstant 
                    UniformConstant sampler* %322 = OpVariable UniformConstant 
                                             %324 = OpTypeSampledImage %227 
                                         f32 %327 = OpConstant 3.674022E-40 
                                         i32 %337 = OpConstant 8 
                              Private f32_4* %359 = OpVariable Private 
                                         f32 %381 = OpConstant 3.674022E-40 
                              Private f32_3* %392 = OpVariable Private 
        UniformConstant read_only Texture2D* %393 = OpVariable UniformConstant 
                    UniformConstant sampler* %395 = OpVariable UniformConstant 
                                         f32 %403 = OpConstant 3.674022E-40 
                                       f32_3 %404 = OpConstantComposite %403 %403 %403 
                                         f32 %406 = OpConstant 3.674022E-40 
                                       f32_3 %407 = OpConstantComposite %406 %406 %406 
        UniformConstant read_only Texture2D* %446 = OpVariable UniformConstant 
                    UniformConstant sampler* %448 = OpVariable UniformConstant 
        UniformConstant read_only Texture2D* %454 = OpVariable UniformConstant 
                    UniformConstant sampler* %456 = OpVariable UniformConstant 
                                       f32_4 %468 = OpConstantComposite %73 %73 %73 %73 
                                Private f32* %470 = OpVariable Private 
                                         f32 %477 = OpConstant 3.674022E-40 
                                Private f32* %479 = OpVariable Private 
                                Private f32* %483 = OpVariable Private 
                                         f32 %497 = OpConstant 3.674022E-40 
                                         f32 %500 = OpConstant 3.674022E-40 
                                         f32 %540 = OpConstant 3.674022E-40 
                                         f32 %551 = OpConstant 3.674022E-40 
                                             %560 = OpTypeBool 
                                             %561 = OpTypePointer Private %560 
                               Private bool* %562 = OpVariable Private 
                                         f32 %586 = OpConstant 3.674022E-40 
                                             %664 = OpTypePointer Output %10 
                               Output f32_4* %665 = OpVariable Output 
                                             %675 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_4* %220 = OpVariable Function 
                                 Uniform f32* %22 = OpAccessChain %17 %19 %20 
                                          f32 %23 = OpLoad %22 
                                   Input f32* %27 = OpAccessChain vs_TEXCOORD1 %20 
                                          f32 %28 = OpLoad %27 
                                          f32 %29 = OpFDiv %23 %28 
                                 Private f32* %32 = OpAccessChain %9 %30 
                                                      OpStore %32 %29 
                                        f32_3 %33 = OpLoad %9 
                                        f32_3 %34 = OpVectorShuffle %33 %33 0 0 0 
                                        f32_3 %35 = OpLoad vs_TEXCOORD1 
                                        f32_3 %36 = OpFMul %34 %35 
                                                      OpStore %9 %36 
                                        f32_4 %42 = OpLoad vs_TEXCOORD0 
                                        f32_2 %43 = OpVectorShuffle %42 %42 0 1 
                                        f32_4 %44 = OpLoad vs_TEXCOORD0 
                                        f32_2 %45 = OpVectorShuffle %44 %44 3 3 
                                        f32_2 %46 = OpFDiv %43 %45 
                                        f32_4 %47 = OpLoad %38 
                                        f32_4 %48 = OpVectorShuffle %47 %46 4 5 2 3 
                                                      OpStore %38 %48 
                          read_only Texture2D %53 = OpLoad %52 
                                      sampler %57 = OpLoad %56 
                   read_only Texture2DSampled %59 = OpSampledImage %53 %57 
                                        f32_4 %60 = OpLoad %38 
                                        f32_2 %61 = OpVectorShuffle %60 %60 0 1 
                                        f32_4 %62 = OpImageSampleImplicitLod %59 %61 
                                          f32 %63 = OpCompositeExtract %62 0 
                                                      OpStore %49 %63 
                                 Uniform f32* %65 = OpAccessChain %17 %64 %30 
                                          f32 %66 = OpLoad %65 
                                          f32 %67 = OpLoad %49 
                                          f32 %68 = OpFMul %66 %67 
                                 Uniform f32* %70 = OpAccessChain %17 %64 %69 
                                          f32 %71 = OpLoad %70 
                                          f32 %72 = OpFAdd %68 %71 
                                                      OpStore %49 %72 
                                          f32 %74 = OpLoad %49 
                                          f32 %75 = OpFDiv %73 %74 
                                                      OpStore %49 %75 
                                          f32 %77 = OpLoad %49 
                                        f32_3 %78 = OpCompositeConstruct %77 %77 %77 
                                        f32_3 %79 = OpLoad %9 
                                        f32_3 %80 = OpFMul %78 %79 
                                        f32_4 %81 = OpLoad %76 
                                        f32_4 %82 = OpVectorShuffle %81 %80 4 5 6 3 
                                                      OpStore %76 %82 
                                        f32_4 %84 = OpLoad %76 
                                        f32_3 %85 = OpVectorShuffle %84 %84 1 1 1 
                               Uniform f32_4* %88 = OpAccessChain %17 %86 %19 
                                        f32_4 %89 = OpLoad %88 
                                        f32_3 %90 = OpVectorShuffle %89 %89 0 1 2 
                                        f32_3 %91 = OpFMul %85 %90 
                                                      OpStore %83 %91 
                               Uniform f32_4* %93 = OpAccessChain %17 %86 %92 
                                        f32_4 %94 = OpLoad %93 
                                        f32_3 %95 = OpVectorShuffle %94 %94 0 1 2 
                                        f32_4 %96 = OpLoad %76 
                                        f32_3 %97 = OpVectorShuffle %96 %96 0 0 0 
                                        f32_3 %98 = OpFMul %95 %97 
                                        f32_3 %99 = OpLoad %83 
                                       f32_3 %100 = OpFAdd %98 %99 
                                       f32_4 %101 = OpLoad %76 
                                       f32_4 %102 = OpVectorShuffle %101 %100 4 5 2 6 
                                                      OpStore %76 %102 
                              Uniform f32_4* %103 = OpAccessChain %17 %86 %64 
                                       f32_4 %104 = OpLoad %103 
                                       f32_3 %105 = OpVectorShuffle %104 %104 0 1 2 
                                       f32_4 %106 = OpLoad %76 
                                       f32_3 %107 = OpVectorShuffle %106 %106 2 2 2 
                                       f32_3 %108 = OpFMul %105 %107 
                                       f32_4 %109 = OpLoad %76 
                                       f32_3 %110 = OpVectorShuffle %109 %109 0 1 3 
                                       f32_3 %111 = OpFAdd %108 %110 
                                       f32_4 %112 = OpLoad %76 
                                       f32_4 %113 = OpVectorShuffle %112 %111 4 5 2 6 
                                                      OpStore %76 %113 
                                       f32_4 %114 = OpLoad %76 
                                       f32_3 %115 = OpVectorShuffle %114 %114 0 1 3 
                              Uniform f32_4* %116 = OpAccessChain %17 %86 %86 
                                       f32_4 %117 = OpLoad %116 
                                       f32_3 %118 = OpVectorShuffle %117 %117 0 1 2 
                                       f32_3 %119 = OpFAdd %115 %118 
                                       f32_4 %120 = OpLoad %76 
                                       f32_4 %121 = OpVectorShuffle %120 %119 4 5 2 6 
                                                      OpStore %76 %121 
                                       f32_4 %122 = OpLoad %76 
                                       f32_3 %123 = OpVectorShuffle %122 %122 0 1 3 
                              Uniform f32_4* %125 = OpAccessChain %17 %124 
                                       f32_4 %126 = OpLoad %125 
                                       f32_3 %127 = OpVectorShuffle %126 %126 0 1 2 
                                       f32_3 %128 = OpFNegate %127 
                                       f32_3 %129 = OpFAdd %123 %128 
                                                      OpStore %83 %129 
                                       f32_3 %130 = OpLoad %83 
                                       f32_3 %131 = OpLoad %83 
                                         f32 %132 = OpDot %130 %131 
                                Private f32* %133 = OpAccessChain %9 %30 
                                                      OpStore %133 %132 
                                Private f32* %134 = OpAccessChain %9 %30 
                                         f32 %135 = OpLoad %134 
                                         f32 %136 = OpExtInst %1 31 %135 
                                Private f32* %137 = OpAccessChain %9 %30 
                                                      OpStore %137 %136 
                                Private f32* %138 = OpAccessChain %9 %20 
                                         f32 %139 = OpLoad %138 
                                         f32 %140 = OpFNegate %139 
                                         f32 %141 = OpLoad %49 
                                         f32 %142 = OpFMul %140 %141 
                                Private f32* %143 = OpAccessChain %9 %30 
                                         f32 %144 = OpLoad %143 
                                         f32 %145 = OpFAdd %142 %144 
                                Private f32* %146 = OpAccessChain %9 %30 
                                                      OpStore %146 %145 
                                Uniform f32* %148 = OpAccessChain %17 %124 %147 
                                         f32 %149 = OpLoad %148 
                                Private f32* %150 = OpAccessChain %9 %30 
                                         f32 %151 = OpLoad %150 
                                         f32 %152 = OpFMul %149 %151 
                                Private f32* %153 = OpAccessChain %76 %20 
                                         f32 %154 = OpLoad %153 
                                         f32 %155 = OpFAdd %152 %154 
                                Private f32* %156 = OpAccessChain %9 %30 
                                                      OpStore %156 %155 
                                Private f32* %157 = OpAccessChain %9 %30 
                                         f32 %158 = OpLoad %157 
                                Uniform f32* %160 = OpAccessChain %17 %159 %20 
                                         f32 %161 = OpLoad %160 
                                         f32 %162 = OpFMul %158 %161 
                                Uniform f32* %163 = OpAccessChain %17 %159 %147 
                                         f32 %164 = OpLoad %163 
                                         f32 %165 = OpFAdd %162 %164 
                                Private f32* %166 = OpAccessChain %9 %30 
                                                      OpStore %166 %165 
                                Private f32* %167 = OpAccessChain %9 %30 
                                         f32 %168 = OpLoad %167 
                                         f32 %170 = OpExtInst %1 43 %168 %169 %73 
                                Private f32* %171 = OpAccessChain %9 %30 
                                                      OpStore %171 %170 
                                       f32_4 %173 = OpLoad %76 
                                       f32_3 %174 = OpVectorShuffle %173 %173 0 1 3 
                              Uniform f32_4* %176 = OpAccessChain %17 %175 
                                       f32_4 %177 = OpLoad %176 
                                       f32_3 %178 = OpVectorShuffle %177 %177 0 1 2 
                                       f32_3 %179 = OpFNegate %178 
                                       f32_3 %180 = OpFAdd %174 %179 
                                                      OpStore %172 %180 
                                Private f32* %182 = OpAccessChain %172 %69 
                                         f32 %183 = OpLoad %182 
                                         f32 %184 = OpExtInst %1 4 %183 
                                Private f32* %185 = OpAccessChain %172 %30 
                                         f32 %186 = OpLoad %185 
                                         f32 %187 = OpExtInst %1 4 %186 
                                         f32 %188 = OpExtInst %1 40 %184 %187 
                                                      OpStore %181 %188 
                                Private f32* %189 = OpAccessChain %172 %20 
                                         f32 %190 = OpLoad %189 
                                         f32 %191 = OpExtInst %1 4 %190 
                                         f32 %192 = OpLoad %181 
                                         f32 %193 = OpExtInst %1 40 %191 %192 
                                                      OpStore %181 %193 
                                         f32 %194 = OpLoad %181 
                                Uniform f32* %196 = OpAccessChain %17 %195 %20 
                                         f32 %197 = OpLoad %196 
                                         f32 %198 = OpFNegate %197 
                                         f32 %199 = OpFAdd %194 %198 
                                                      OpStore %181 %199 
                                         f32 %200 = OpLoad %181 
                                         f32 %202 = OpExtInst %1 40 %200 %201 
                                                      OpStore %181 %202 
                                         f32 %203 = OpLoad %181 
                                Uniform f32* %204 = OpAccessChain %17 %195 %147 
                                         f32 %205 = OpLoad %204 
                                         f32 %206 = OpFMul %203 %205 
                                                      OpStore %181 %206 
                                Uniform f32* %207 = OpAccessChain %17 %195 %69 
                                         f32 %208 = OpLoad %207 
                                         f32 %209 = OpLoad %181 
                                         f32 %210 = OpFDiv %208 %209 
                                                      OpStore %181 %210 
                                         f32 %211 = OpLoad %181 
                                Uniform f32* %212 = OpAccessChain %17 %195 %30 
                                         f32 %213 = OpLoad %212 
                                         f32 %214 = OpFNegate %213 
                                         f32 %215 = OpFAdd %211 %214 
                                                      OpStore %181 %215 
                                         f32 %216 = OpLoad %181 
                                         f32 %217 = OpFNegate %216 
                                         f32 %218 = OpFAdd %217 %73 
                                                      OpStore %181 %218 
                                       f32_3 %221 = OpLoad %172 
                                         f32 %222 = OpLoad %181 
                                         f32 %223 = OpCompositeExtract %221 0 
                                         f32 %224 = OpCompositeExtract %221 1 
                                         f32 %225 = OpCompositeExtract %221 2 
                                       f32_4 %226 = OpCompositeConstruct %223 %224 %225 %222 
                                                      OpStore %220 %226 
                       read_only TextureCube %230 = OpLoad %229 
                                     sampler %232 = OpLoad %231 
                read_only TextureCubeSampled %235 = OpSampledImage %230 %232 
                                       f32_4 %236 = OpLoad %220 
                                         f32 %237 = OpCompositeExtract %236 3 
                                         f32 %238 = OpImageSampleDrefImplicitLod %235 %236 %237 
                                                      OpStore %181 %238 
                                Uniform f32* %240 = OpAccessChain %17 %159 %30 
                                         f32 %241 = OpLoad %240 
                                         f32 %242 = OpFNegate %241 
                                         f32 %243 = OpFAdd %242 %73 
                                                      OpStore %239 %243 
                                         f32 %244 = OpLoad %181 
                                         f32 %245 = OpLoad %239 
                                         f32 %246 = OpFMul %244 %245 
                                Uniform f32* %247 = OpAccessChain %17 %159 %30 
                                         f32 %248 = OpLoad %247 
                                         f32 %249 = OpFAdd %246 %248 
                                                      OpStore %181 %249 
                                         f32 %250 = OpLoad %181 
                                         f32 %251 = OpFNegate %250 
                                         f32 %252 = OpFAdd %251 %73 
                                                      OpStore %239 %252 
                                Private f32* %253 = OpAccessChain %9 %30 
                                         f32 %254 = OpLoad %253 
                                         f32 %255 = OpLoad %239 
                                         f32 %256 = OpFMul %254 %255 
                                         f32 %257 = OpLoad %181 
                                         f32 %258 = OpFAdd %256 %257 
                                Private f32* %259 = OpAccessChain %9 %30 
                                                      OpStore %259 %258 
                                       f32_3 %260 = OpLoad %172 
                                       f32_3 %261 = OpLoad %172 
                                         f32 %262 = OpDot %260 %261 
                                                      OpStore %181 %262 
                                         f32 %263 = OpLoad %181 
                                Uniform f32* %264 = OpAccessChain %17 %175 %147 
                                         f32 %265 = OpLoad %264 
                                         f32 %266 = OpFMul %263 %265 
                                                      OpStore %239 %266 
                                         f32 %267 = OpLoad %181 
                                         f32 %268 = OpExtInst %1 32 %267 
                                                      OpStore %181 %268 
                         read_only Texture2D %270 = OpLoad %269 
                                     sampler %272 = OpLoad %271 
                  read_only Texture2DSampled %273 = OpSampledImage %270 %272 
                                         f32 %274 = OpLoad %239 
                                       f32_2 %275 = OpCompositeConstruct %274 %274 
                                       f32_4 %276 = OpImageSampleImplicitLod %273 %275 
                                         f32 %277 = OpCompositeExtract %276 0 
                                                      OpStore %239 %277 
                                Private f32* %278 = OpAccessChain %9 %30 
                                         f32 %279 = OpLoad %278 
                                         f32 %280 = OpLoad %239 
                                         f32 %281 = OpFMul %279 %280 
                                Private f32* %282 = OpAccessChain %9 %30 
                                                      OpStore %282 %281 
                                       f32_4 %283 = OpLoad %76 
                                       f32_3 %284 = OpVectorShuffle %283 %283 1 1 1 
                              Uniform f32_4* %286 = OpAccessChain %17 %285 %19 
                                       f32_4 %287 = OpLoad %286 
                                       f32_3 %288 = OpVectorShuffle %287 %287 0 1 2 
                                       f32_3 %289 = OpFMul %284 %288 
                                                      OpStore %83 %289 
                              Uniform f32_4* %290 = OpAccessChain %17 %285 %92 
                                       f32_4 %291 = OpLoad %290 
                                       f32_3 %292 = OpVectorShuffle %291 %291 0 1 2 
                                       f32_4 %293 = OpLoad %76 
                                       f32_3 %294 = OpVectorShuffle %293 %293 0 0 0 
                                       f32_3 %295 = OpFMul %292 %294 
                                       f32_3 %296 = OpLoad %83 
                                       f32_3 %297 = OpFAdd %295 %296 
                                                      OpStore %83 %297 
                              Uniform f32_4* %298 = OpAccessChain %17 %285 %64 
                                       f32_4 %299 = OpLoad %298 
                                       f32_3 %300 = OpVectorShuffle %299 %299 0 1 2 
                                       f32_4 %301 = OpLoad %76 
                                       f32_3 %302 = OpVectorShuffle %301 %301 3 3 3 
                                       f32_3 %303 = OpFMul %300 %302 
                                       f32_3 %304 = OpLoad %83 
                                       f32_3 %305 = OpFAdd %303 %304 
                                                      OpStore %83 %305 
                                       f32_4 %306 = OpLoad %76 
                                       f32_3 %307 = OpVectorShuffle %306 %306 0 1 3 
                              Uniform f32_3* %309 = OpAccessChain %17 %92 
                                       f32_3 %310 = OpLoad %309 
                                       f32_3 %311 = OpFNegate %310 
                                       f32_3 %312 = OpFAdd %307 %311 
                                       f32_4 %313 = OpLoad %76 
                                       f32_4 %314 = OpVectorShuffle %313 %312 4 5 6 3 
                                                      OpStore %76 %314 
                                       f32_3 %315 = OpLoad %83 
                              Uniform f32_4* %316 = OpAccessChain %17 %285 %86 
                                       f32_4 %317 = OpLoad %316 
                                       f32_3 %318 = OpVectorShuffle %317 %317 0 1 2 
                                       f32_3 %319 = OpFAdd %315 %318 
                                                      OpStore %83 %319 
                       read_only TextureCube %321 = OpLoad %320 
                                     sampler %323 = OpLoad %322 
                read_only TextureCubeSampled %325 = OpSampledImage %321 %323 
                                       f32_3 %326 = OpLoad %83 
                                       f32_4 %328 = OpImageSampleImplicitLod %325 %326 Bias %10 
                                         f32 %329 = OpCompositeExtract %328 3 
                                                      OpStore %239 %329 
                                Private f32* %330 = OpAccessChain %9 %30 
                                         f32 %331 = OpLoad %330 
                                         f32 %332 = OpLoad %239 
                                         f32 %333 = OpFMul %331 %332 
                                Private f32* %334 = OpAccessChain %9 %30 
                                                      OpStore %334 %333 
                                       f32_3 %335 = OpLoad %9 
                                       f32_3 %336 = OpVectorShuffle %335 %335 0 0 0 
                              Uniform f32_4* %338 = OpAccessChain %17 %337 
                                       f32_4 %339 = OpLoad %338 
                                       f32_3 %340 = OpVectorShuffle %339 %339 0 1 2 
                                       f32_3 %341 = OpFMul %336 %340 
                                                      OpStore %83 %341 
                                       f32_4 %342 = OpLoad %76 
                                       f32_3 %343 = OpVectorShuffle %342 %342 0 1 2 
                                       f32_4 %344 = OpLoad %76 
                                       f32_3 %345 = OpVectorShuffle %344 %344 0 1 2 
                                         f32 %346 = OpDot %343 %345 
                                Private f32* %347 = OpAccessChain %9 %30 
                                                      OpStore %347 %346 
                                Private f32* %348 = OpAccessChain %9 %30 
                                         f32 %349 = OpLoad %348 
                                         f32 %350 = OpExtInst %1 32 %349 
                                Private f32* %351 = OpAccessChain %9 %30 
                                                      OpStore %351 %350 
                                       f32_3 %352 = OpLoad %9 
                                       f32_3 %353 = OpVectorShuffle %352 %352 0 0 0 
                                       f32_4 %354 = OpLoad %76 
                                       f32_3 %355 = OpVectorShuffle %354 %354 0 1 2 
                                       f32_3 %356 = OpFMul %353 %355 
                                       f32_4 %357 = OpLoad %76 
                                       f32_4 %358 = OpVectorShuffle %357 %356 4 5 6 3 
                                                      OpStore %76 %358 
                                       f32_3 %360 = OpLoad %172 
                                       f32_3 %361 = OpFNegate %360 
                                         f32 %362 = OpLoad %181 
                                       f32_3 %363 = OpCompositeConstruct %362 %362 %362 
                                       f32_3 %364 = OpFMul %361 %363 
                                       f32_4 %365 = OpLoad %76 
                                       f32_3 %366 = OpVectorShuffle %365 %365 0 1 2 
                                       f32_3 %367 = OpFNegate %366 
                                       f32_3 %368 = OpFAdd %364 %367 
                                       f32_4 %369 = OpLoad %359 
                                       f32_4 %370 = OpVectorShuffle %369 %368 4 5 6 3 
                                                      OpStore %359 %370 
                                       f32_3 %371 = OpLoad %172 
                                         f32 %372 = OpLoad %181 
                                       f32_3 %373 = OpCompositeConstruct %372 %372 %372 
                                       f32_3 %374 = OpFMul %371 %373 
                                                      OpStore %9 %374 
                                       f32_4 %375 = OpLoad %359 
                                       f32_3 %376 = OpVectorShuffle %375 %375 0 1 2 
                                       f32_4 %377 = OpLoad %359 
                                       f32_3 %378 = OpVectorShuffle %377 %377 0 1 2 
                                         f32 %379 = OpDot %376 %378 
                                                      OpStore %49 %379 
                                         f32 %380 = OpLoad %49 
                                         f32 %382 = OpExtInst %1 40 %380 %381 
                                                      OpStore %49 %382 
                                         f32 %383 = OpLoad %49 
                                         f32 %384 = OpExtInst %1 32 %383 
                                                      OpStore %49 %384 
                                         f32 %385 = OpLoad %49 
                                       f32_3 %386 = OpCompositeConstruct %385 %385 %385 
                                       f32_4 %387 = OpLoad %359 
                                       f32_3 %388 = OpVectorShuffle %387 %387 0 1 2 
                                       f32_3 %389 = OpFMul %386 %388 
                                       f32_4 %390 = OpLoad %359 
                                       f32_4 %391 = OpVectorShuffle %390 %389 4 5 6 3 
                                                      OpStore %359 %391 
                         read_only Texture2D %394 = OpLoad %393 
                                     sampler %396 = OpLoad %395 
                  read_only Texture2DSampled %397 = OpSampledImage %394 %396 
                                       f32_4 %398 = OpLoad %38 
                                       f32_2 %399 = OpVectorShuffle %398 %398 0 1 
                                       f32_4 %400 = OpImageSampleImplicitLod %397 %399 
                                       f32_3 %401 = OpVectorShuffle %400 %400 0 1 2 
                                                      OpStore %392 %401 
                                       f32_3 %402 = OpLoad %392 
                                       f32_3 %405 = OpFMul %402 %404 
                                       f32_3 %408 = OpFAdd %405 %407 
                                                      OpStore %392 %408 
                                       f32_3 %409 = OpLoad %392 
                                       f32_3 %410 = OpLoad %392 
                                         f32 %411 = OpDot %409 %410 
                                                      OpStore %49 %411 
                                         f32 %412 = OpLoad %49 
                                         f32 %413 = OpExtInst %1 32 %412 
                                                      OpStore %49 %413 
                                         f32 %414 = OpLoad %49 
                                       f32_3 %415 = OpCompositeConstruct %414 %414 %414 
                                       f32_3 %416 = OpLoad %392 
                                       f32_3 %417 = OpFMul %415 %416 
                                                      OpStore %392 %417 
                                       f32_3 %418 = OpLoad %392 
                                       f32_4 %419 = OpLoad %359 
                                       f32_3 %420 = OpVectorShuffle %419 %419 0 1 2 
                                         f32 %421 = OpDot %418 %420 
                                                      OpStore %49 %421 
                                         f32 %422 = OpLoad %49 
                                         f32 %423 = OpExtInst %1 43 %422 %169 %73 
                                                      OpStore %49 %423 
                                       f32_3 %424 = OpLoad %9 
                                       f32_3 %425 = OpFNegate %424 
                                       f32_4 %426 = OpLoad %359 
                                       f32_3 %427 = OpVectorShuffle %426 %426 0 1 2 
                                         f32 %428 = OpDot %425 %427 
                                                      OpStore %181 %428 
                                         f32 %429 = OpLoad %181 
                                         f32 %430 = OpExtInst %1 43 %429 %169 %73 
                                                      OpStore %181 %430 
                                       f32_3 %431 = OpLoad %392 
                                       f32_3 %432 = OpLoad %9 
                                       f32_3 %433 = OpFNegate %432 
                                         f32 %434 = OpDot %431 %433 
                                Private f32* %435 = OpAccessChain %9 %30 
                                                      OpStore %435 %434 
                                Private f32* %436 = OpAccessChain %9 %30 
                                         f32 %437 = OpLoad %436 
                                         f32 %438 = OpExtInst %1 43 %437 %169 %73 
                                Private f32* %439 = OpAccessChain %9 %30 
                                                      OpStore %439 %438 
                                       f32_3 %440 = OpLoad %392 
                                       f32_4 %441 = OpLoad %76 
                                       f32_3 %442 = OpVectorShuffle %441 %441 0 1 2 
                                       f32_3 %443 = OpFNegate %442 
                                         f32 %444 = OpDot %440 %443 
                                Private f32* %445 = OpAccessChain %172 %30 
                                                      OpStore %445 %444 
                         read_only Texture2D %447 = OpLoad %446 
                                     sampler %449 = OpLoad %448 
                  read_only Texture2DSampled %450 = OpSampledImage %447 %449 
                                       f32_4 %451 = OpLoad %38 
                                       f32_2 %452 = OpVectorShuffle %451 %451 0 1 
                                       f32_4 %453 = OpImageSampleImplicitLod %450 %452 
                                                      OpStore %76 %453 
                         read_only Texture2D %455 = OpLoad %454 
                                     sampler %457 = OpLoad %456 
                  read_only Texture2DSampled %458 = OpSampledImage %455 %457 
                                       f32_4 %459 = OpLoad %38 
                                       f32_2 %460 = OpVectorShuffle %459 %459 0 1 
                                       f32_4 %461 = OpImageSampleImplicitLod %458 %460 
                                       f32_3 %462 = OpVectorShuffle %461 %461 0 1 2 
                                       f32_4 %463 = OpLoad %38 
                                       f32_4 %464 = OpVectorShuffle %463 %462 4 5 2 6 
                                                      OpStore %38 %464 
                                       f32_4 %465 = OpLoad %76 
                                       f32_4 %466 = OpVectorShuffle %465 %465 3 0 1 2 
                                       f32_4 %467 = OpFNegate %466 
                                       f32_4 %469 = OpFAdd %467 %468 
                                                      OpStore %359 %469 
                                Private f32* %471 = OpAccessChain %359 %30 
                                         f32 %472 = OpLoad %471 
                                Private f32* %473 = OpAccessChain %359 %30 
                                         f32 %474 = OpLoad %473 
                                         f32 %475 = OpFMul %472 %474 
                                                      OpStore %470 %475 
                                         f32 %476 = OpLoad %470 
                                         f32 %478 = OpExtInst %1 40 %476 %477 
                                                      OpStore %470 %478 
                                         f32 %480 = OpLoad %470 
                                         f32 %481 = OpLoad %470 
                                         f32 %482 = OpFMul %480 %481 
                                                      OpStore %479 %482 
                                         f32 %484 = OpLoad %49 
                                         f32 %485 = OpLoad %479 
                                         f32 %486 = OpFMul %484 %485 
                                         f32 %487 = OpLoad %49 
                                         f32 %488 = OpFNegate %487 
                                         f32 %489 = OpFAdd %486 %488 
                                                      OpStore %483 %489 
                                         f32 %490 = OpLoad %483 
                                         f32 %491 = OpLoad %49 
                                         f32 %492 = OpFMul %490 %491 
                                         f32 %493 = OpFAdd %492 %73 
                                                      OpStore %49 %493 
                                         f32 %494 = OpLoad %49 
                                         f32 %495 = OpLoad %49 
                                         f32 %496 = OpFMul %494 %495 
                                         f32 %498 = OpFAdd %496 %497 
                                                      OpStore %49 %498 
                                         f32 %499 = OpLoad %479 
                                         f32 %501 = OpFMul %499 %500 
                                                      OpStore %479 %501 
                                         f32 %502 = OpLoad %479 
                                         f32 %503 = OpLoad %49 
                                         f32 %504 = OpFDiv %502 %503 
                                                      OpStore %49 %504 
                                         f32 %505 = OpLoad %470 
                                         f32 %506 = OpFNegate %505 
                                         f32 %507 = OpFAdd %506 %73 
                                                      OpStore %479 %507 
                                Private f32* %508 = OpAccessChain %172 %30 
                                         f32 %509 = OpLoad %508 
                                         f32 %510 = OpExtInst %1 4 %509 
                                         f32 %511 = OpLoad %479 
                                         f32 %512 = OpFMul %510 %511 
                                         f32 %513 = OpLoad %470 
                                         f32 %514 = OpFAdd %512 %513 
                                                      OpStore %483 %514 
                                Private f32* %515 = OpAccessChain %9 %30 
                                         f32 %516 = OpLoad %515 
                                         f32 %517 = OpLoad %479 
                                         f32 %518 = OpFMul %516 %517 
                                         f32 %519 = OpLoad %470 
                                         f32 %520 = OpFAdd %518 %519 
                                                      OpStore %470 %520 
                                         f32 %521 = OpLoad %470 
                                Private f32* %522 = OpAccessChain %172 %30 
                                         f32 %523 = OpLoad %522 
                                         f32 %524 = OpExtInst %1 4 %523 
                                         f32 %525 = OpFMul %521 %524 
                                                      OpStore %470 %525 
                                Private f32* %526 = OpAccessChain %172 %30 
                                         f32 %527 = OpLoad %526 
                                         f32 %528 = OpExtInst %1 4 %527 
                                         f32 %529 = OpFNegate %528 
                                         f32 %530 = OpFAdd %529 %73 
                                Private f32* %531 = OpAccessChain %172 %30 
                                                      OpStore %531 %530 
                                Private f32* %532 = OpAccessChain %9 %30 
                                         f32 %533 = OpLoad %532 
                                         f32 %534 = OpLoad %483 
                                         f32 %535 = OpFMul %533 %534 
                                         f32 %536 = OpLoad %470 
                                         f32 %537 = OpFAdd %535 %536 
                                                      OpStore %470 %537 
                                         f32 %538 = OpLoad %470 
                                         f32 %539 = OpFAdd %538 %201 
                                                      OpStore %470 %539 
                                         f32 %541 = OpLoad %470 
                                         f32 %542 = OpFDiv %540 %541 
                                                      OpStore %470 %542 
                                         f32 %543 = OpLoad %49 
                                         f32 %544 = OpLoad %470 
                                         f32 %545 = OpFMul %543 %544 
                                                      OpStore %470 %545 
                                Private f32* %546 = OpAccessChain %9 %30 
                                         f32 %547 = OpLoad %546 
                                         f32 %548 = OpLoad %470 
                                         f32 %549 = OpFMul %547 %548 
                                                      OpStore %470 %549 
                                         f32 %550 = OpLoad %470 
                                         f32 %552 = OpFMul %550 %551 
                                                      OpStore %470 %552 
                                         f32 %553 = OpLoad %470 
                                         f32 %554 = OpExtInst %1 40 %553 %169 
                                                      OpStore %470 %554 
                                       f32_4 %555 = OpLoad %76 
                                       f32_3 %556 = OpVectorShuffle %555 %555 0 1 2 
                                       f32_4 %557 = OpLoad %76 
                                       f32_3 %558 = OpVectorShuffle %557 %557 0 1 2 
                                         f32 %559 = OpDot %556 %558 
                                                      OpStore %49 %559 
                                         f32 %563 = OpLoad %49 
                                        bool %564 = OpFOrdNotEqual %563 %169 
                                                      OpStore %562 %564 
                                        bool %565 = OpLoad %562 
                                         f32 %566 = OpSelect %565 %73 %169 
                                                      OpStore %49 %566 
                                         f32 %567 = OpLoad %49 
                                         f32 %568 = OpLoad %470 
                                         f32 %569 = OpFMul %567 %568 
                                                      OpStore %470 %569 
                                       f32_3 %570 = OpLoad %83 
                                         f32 %571 = OpLoad %470 
                                       f32_3 %572 = OpCompositeConstruct %571 %571 %571 
                                       f32_3 %573 = OpFMul %570 %572 
                                                      OpStore %392 %573 
                                         f32 %574 = OpLoad %181 
                                         f32 %575 = OpFNegate %574 
                                         f32 %576 = OpFAdd %575 %73 
                                                      OpStore %470 %576 
                                         f32 %577 = OpLoad %181 
                                         f32 %578 = OpLoad %181 
                                         f32 %579 = OpFMul %577 %578 
                                                      OpStore %49 %579 
                                         f32 %580 = OpLoad %49 
                                       f32_2 %581 = OpCompositeConstruct %580 %580 
                                       f32_4 %582 = OpLoad %359 
                                       f32_2 %583 = OpVectorShuffle %582 %582 0 0 
                                         f32 %584 = OpDot %581 %583 
                                                      OpStore %49 %584 
                                         f32 %585 = OpLoad %49 
                                         f32 %587 = OpFAdd %585 %586 
                                                      OpStore %49 %587 
                                         f32 %588 = OpLoad %470 
                                         f32 %589 = OpLoad %470 
                                         f32 %590 = OpFMul %588 %589 
                                                      OpStore %181 %590 
                                         f32 %591 = OpLoad %181 
                                         f32 %592 = OpLoad %181 
                                         f32 %593 = OpFMul %591 %592 
                                                      OpStore %181 %593 
                                         f32 %594 = OpLoad %470 
                                         f32 %595 = OpLoad %181 
                                         f32 %596 = OpFMul %594 %595 
                                                      OpStore %470 %596 
                                       f32_4 %597 = OpLoad %359 
                                       f32_3 %598 = OpVectorShuffle %597 %597 1 2 3 
                                         f32 %599 = OpLoad %470 
                                       f32_3 %600 = OpCompositeConstruct %599 %599 %599 
                                       f32_3 %601 = OpFMul %598 %600 
                                       f32_4 %602 = OpLoad %76 
                                       f32_3 %603 = OpVectorShuffle %602 %602 0 1 2 
                                       f32_3 %604 = OpFAdd %601 %603 
                                       f32_4 %605 = OpLoad %76 
                                       f32_4 %606 = OpVectorShuffle %605 %604 4 5 6 3 
                                                      OpStore %76 %606 
                                       f32_4 %607 = OpLoad %76 
                                       f32_3 %608 = OpVectorShuffle %607 %607 0 1 2 
                                       f32_3 %609 = OpLoad %392 
                                       f32_3 %610 = OpFMul %608 %609 
                                       f32_4 %611 = OpLoad %76 
                                       f32_4 %612 = OpVectorShuffle %611 %610 4 5 6 3 
                                                      OpStore %76 %612 
                                Private f32* %613 = OpAccessChain %172 %30 
                                         f32 %614 = OpLoad %613 
                                Private f32* %615 = OpAccessChain %172 %30 
                                         f32 %616 = OpLoad %615 
                                         f32 %617 = OpFMul %614 %616 
                                                      OpStore %470 %617 
                                         f32 %618 = OpLoad %470 
                                         f32 %619 = OpLoad %470 
                                         f32 %620 = OpFMul %618 %619 
                                                      OpStore %470 %620 
                                Private f32* %621 = OpAccessChain %172 %30 
                                         f32 %622 = OpLoad %621 
                                         f32 %623 = OpLoad %470 
                                         f32 %624 = OpFMul %622 %623 
                                Private f32* %625 = OpAccessChain %172 %30 
                                                      OpStore %625 %624 
                                         f32 %626 = OpLoad %49 
                                Private f32* %627 = OpAccessChain %172 %30 
                                         f32 %628 = OpLoad %627 
                                         f32 %629 = OpFMul %626 %628 
                                         f32 %630 = OpFAdd %629 %73 
                                Private f32* %631 = OpAccessChain %172 %30 
                                                      OpStore %631 %630 
                                Private f32* %632 = OpAccessChain %9 %30 
                                         f32 %633 = OpLoad %632 
                                         f32 %634 = OpFNegate %633 
                                         f32 %635 = OpFAdd %634 %73 
                                                      OpStore %470 %635 
                                         f32 %636 = OpLoad %470 
                                         f32 %637 = OpLoad %470 
                                         f32 %638 = OpFMul %636 %637 
                                                      OpStore %181 %638 
                                         f32 %639 = OpLoad %181 
                                         f32 %640 = OpLoad %181 
                                         f32 %641 = OpFMul %639 %640 
                                                      OpStore %181 %641 
                                         f32 %642 = OpLoad %470 
                                         f32 %643 = OpLoad %181 
                                         f32 %644 = OpFMul %642 %643 
                                                      OpStore %470 %644 
                                         f32 %645 = OpLoad %49 
                                         f32 %646 = OpLoad %470 
                                         f32 %647 = OpFMul %645 %646 
                                         f32 %648 = OpFAdd %647 %73 
                                                      OpStore %470 %648 
                                Private f32* %649 = OpAccessChain %172 %30 
                                         f32 %650 = OpLoad %649 
                                         f32 %651 = OpLoad %470 
                                         f32 %652 = OpFMul %650 %651 
                                Private f32* %653 = OpAccessChain %172 %30 
                                                      OpStore %653 %652 
                                Private f32* %654 = OpAccessChain %9 %30 
                                         f32 %655 = OpLoad %654 
                                Private f32* %656 = OpAccessChain %172 %30 
                                         f32 %657 = OpLoad %656 
                                         f32 %658 = OpFMul %655 %657 
                                Private f32* %659 = OpAccessChain %9 %30 
                                                      OpStore %659 %658 
                                       f32_3 %660 = OpLoad %9 
                                       f32_3 %661 = OpVectorShuffle %660 %660 0 0 0 
                                       f32_3 %662 = OpLoad %83 
                                       f32_3 %663 = OpFMul %661 %662 
                                                      OpStore %9 %663 
                                       f32_4 %666 = OpLoad %38 
                                       f32_3 %667 = OpVectorShuffle %666 %666 0 1 3 
                                       f32_3 %668 = OpLoad %9 
                                       f32_3 %669 = OpFMul %667 %668 
                                       f32_4 %670 = OpLoad %76 
                                       f32_3 %671 = OpVectorShuffle %670 %670 0 1 2 
                                       f32_3 %672 = OpFAdd %669 %671 
                                       f32_4 %673 = OpLoad %665 
                                       f32_4 %674 = OpVectorShuffle %673 %672 4 5 6 3 
                                                      OpStore %665 %674 
                                 Output f32* %676 = OpAccessChain %665 %147 
                                                      OpStore %676 %73 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "d3d11 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "UNITY_HDR_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "UNITY_HDR_ON" }
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _LightAsQuad;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.zw;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _LightProjectionParams;
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
UNITY_LOCATION(0) uniform  sampler2D _CameraDepthTexture;
UNITY_LOCATION(1) uniform  sampler2D _LightTextureB0;
UNITY_LOCATION(2) uniform  samplerCube _LightTexture0;
UNITY_LOCATION(3) uniform  sampler2D _CameraGBufferTexture0;
UNITY_LOCATION(4) uniform  sampler2D _CameraGBufferTexture1;
UNITY_LOCATION(5) uniform  sampler2D _CameraGBufferTexture2;
UNITY_LOCATION(6) uniform  samplerCube _ShadowMapTexture;
UNITY_LOCATION(7) uniform  samplerCubeShadow hlslcc_zcmp_ShadowMapTexture;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec3 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
vec4 u_xlat6;
vec4 u_xlat7;
vec3 u_xlat8;
float u_xlat9;
vec3 u_xlat12;
float u_xlat16;
float u_xlat17;
bool u_xlatb17;
float u_xlat18;
float u_xlat24;
bool u_xlatb24;
float u_xlat25;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat2 = texture(_CameraDepthTexture, u_xlat1.xy);
    u_xlat24 = _ZBufferParams.x * u_xlat2.x + _ZBufferParams.y;
    u_xlat24 = float(1.0) / u_xlat24;
    u_xlat2.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat24 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat8.xyz = u_xlat2.xyw + (-_LightPos.xyz);
    u_xlat17 = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat25 = inversesqrt(u_xlat17);
    u_xlat3.xyz = u_xlat8.xyz * vec3(u_xlat25);
    u_xlat17 = u_xlat17 * _LightPos.w;
    u_xlat4 = texture(_LightTextureB0, vec2(u_xlat17));
    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlatb17 = u_xlat0.x<0.99000001;
    if(u_xlatb17){
        u_xlat17 = max(abs(u_xlat8.y), abs(u_xlat8.x));
        u_xlat17 = max(abs(u_xlat8.z), u_xlat17);
        u_xlat17 = u_xlat17 + (-_LightProjectionParams.z);
        u_xlat17 = max(u_xlat17, 9.99999975e-06);
        u_xlat17 = u_xlat17 * _LightProjectionParams.w;
        u_xlat17 = _LightProjectionParams.y / u_xlat17;
        u_xlat17 = u_xlat17 + (-_LightProjectionParams.x);
        u_xlat12.xyz = u_xlat8.xyz + vec3(0.0078125, 0.0078125, 0.0078125);
        vec4 txVec0 = vec4(u_xlat12.xyz,u_xlat17);
        u_xlat5.x = texture(hlslcc_zcmp_ShadowMapTexture, txVec0);
        u_xlat12.xyz = u_xlat8.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);
        vec4 txVec1 = vec4(u_xlat12.xyz,u_xlat17);
        u_xlat5.y = texture(hlslcc_zcmp_ShadowMapTexture, txVec1);
        u_xlat12.xyz = u_xlat8.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);
        vec4 txVec2 = vec4(u_xlat12.xyz,u_xlat17);
        u_xlat5.z = texture(hlslcc_zcmp_ShadowMapTexture, txVec2);
        u_xlat12.xyz = u_xlat8.xyz + vec3(0.0078125, -0.0078125, -0.0078125);
        vec4 txVec3 = vec4(u_xlat12.xyz,u_xlat17);
        u_xlat5.w = texture(hlslcc_zcmp_ShadowMapTexture, txVec3);
        u_xlat17 = dot(u_xlat5, vec4(0.25, 0.25, 0.25, 0.25));
        u_xlat18 = (-_LightShadowData.x) + 1.0;
        u_xlat17 = u_xlat17 * u_xlat18 + _LightShadowData.x;
    } else {
        u_xlat17 = 1.0;
    }
    u_xlat18 = (-u_xlat17) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat18 + u_xlat17;
    u_xlat0.x = u_xlat0.x * u_xlat4.x;
    u_xlat4.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat2.xxx + u_xlat4.xyz;
    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat2.www + u_xlat4.xyz;
    u_xlat4.xyz = u_xlat4.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlat4 = texture(_LightTexture0, u_xlat4.xyz, -8.0);
    u_xlat0.x = u_xlat0.x * u_xlat4.w;
    u_xlat4.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat5 = texture(_CameraGBufferTexture0, u_xlat1.xy);
    u_xlat6 = texture(_CameraGBufferTexture1, u_xlat1.xy);
    u_xlat7 = texture(_CameraGBufferTexture2, u_xlat1.xy);
    u_xlat1.xyz = u_xlat7.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat2.xyw + (-_WorldSpaceCameraPos.xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat7 = (-u_xlat6.wxyz) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0.xyz = (-u_xlat8.xyz) * vec3(u_xlat25) + (-u_xlat2.xyz);
    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat24 = max(u_xlat24, 0.00100000005);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat0.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    u_xlat24 = dot(u_xlat1.xyz, (-u_xlat2.xyz));
    u_xlat25 = dot(u_xlat1.xyz, (-u_xlat3.xyz));
    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat0.x = dot((-u_xlat3.xyz), u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat8.x = u_xlat0.x + u_xlat0.x;
    u_xlat8.x = u_xlat0.x * u_xlat8.x;
    u_xlat8.x = u_xlat8.x * u_xlat7.x + -0.5;
    u_xlat16 = (-u_xlat25) + 1.0;
    u_xlat9 = u_xlat16 * u_xlat16;
    u_xlat9 = u_xlat9 * u_xlat9;
    u_xlat16 = u_xlat16 * u_xlat9;
    u_xlat16 = u_xlat8.x * u_xlat16 + 1.0;
    u_xlat9 = -abs(u_xlat24) + 1.0;
    u_xlat17 = u_xlat9 * u_xlat9;
    u_xlat17 = u_xlat17 * u_xlat17;
    u_xlat9 = u_xlat9 * u_xlat17;
    u_xlat8.x = u_xlat8.x * u_xlat9 + 1.0;
    u_xlat8.x = u_xlat8.x * u_xlat16;
    u_xlat16 = u_xlat7.x * u_xlat7.x;
    u_xlat16 = max(u_xlat16, 0.00200000009);
    u_xlat9 = (-u_xlat16) + 1.0;
    u_xlat17 = abs(u_xlat24) * u_xlat9 + u_xlat16;
    u_xlat9 = u_xlat25 * u_xlat9 + u_xlat16;
    u_xlat24 = abs(u_xlat24) * u_xlat9;
    u_xlat24 = u_xlat25 * u_xlat17 + u_xlat24;
    u_xlat24 = u_xlat24 + 9.99999975e-06;
    u_xlat24 = 0.5 / u_xlat24;
    u_xlat16 = u_xlat16 * u_xlat16;
    u_xlat9 = u_xlat1.x * u_xlat16 + (-u_xlat1.x);
    u_xlat1.x = u_xlat9 * u_xlat1.x + 1.0;
    u_xlat16 = u_xlat16 * 0.318309873;
    u_xlat1.x = u_xlat1.x * u_xlat1.x + 1.00000001e-07;
    u_xlat16 = u_xlat16 / u_xlat1.x;
    u_xlat16 = u_xlat16 * u_xlat24;
    u_xlat8.y = u_xlat16 * 3.14159274;
    u_xlat8.xy = vec2(u_xlat25) * u_xlat8.xy;
    u_xlat16 = max(u_xlat8.y, 0.0);
    u_xlat24 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlatb24 = u_xlat24!=0.0;
    u_xlat24 = u_xlatb24 ? 1.0 : float(0.0);
    u_xlat16 = u_xlat24 * u_xlat16;
    u_xlat1.xyz = u_xlat8.xxx * u_xlat4.xyz;
    u_xlat8.xyz = u_xlat4.xyz * vec3(u_xlat16);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat25 = u_xlat0.x * u_xlat0.x;
    u_xlat25 = u_xlat25 * u_xlat25;
    u_xlat0.x = u_xlat0.x * u_xlat25;
    u_xlat2.xyz = u_xlat7.yzw * u_xlat0.xxx + u_xlat6.xyz;
    u_xlat0.xyz = u_xlat8.xyz * u_xlat2.xyz;
    SV_Target0.xyz = u_xlat5.xyz * u_xlat1.xyz + u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "UNITY_HDR_ON" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 192
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %80 %102 %169 %175 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %16 ArrayStride 16 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpMemberDecorate %19 0 Offset 19 
                                                      OpMemberDecorate %19 1 Offset 19 
                                                      OpMemberDecorate %19 2 Offset 19 
                                                      OpMemberDecorate %19 3 Offset 19 
                                                      OpMemberDecorate %19 4 Offset 19 
                                                      OpDecorate %19 Block 
                                                      OpDecorate %21 DescriptorSet 21 
                                                      OpDecorate %21 Binding 21 
                                                      OpMemberDecorate %78 0 BuiltIn 78 
                                                      OpMemberDecorate %78 1 BuiltIn 78 
                                                      OpMemberDecorate %78 2 BuiltIn 78 
                                                      OpDecorate %78 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 102 
                                                      OpDecorate %169 Location 169 
                                                      OpDecorate vs_TEXCOORD1 Location 175 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %14 = OpTypeInt 32 0 
                                          u32 %15 = OpConstant 4 
                                              %16 = OpTypeArray %7 %15 
                                              %17 = OpTypeArray %7 %15 
                                              %18 = OpTypeArray %7 %15 
                                              %19 = OpTypeStruct %7 %16 %17 %18 %6 
                                              %20 = OpTypePointer Uniform %19 
Uniform struct {f32_4; f32_4[4]; f32_4[4]; f32_4[4]; f32;}* %21 = OpVariable Uniform 
                                              %22 = OpTypeInt 32 1 
                                          i32 %23 = OpConstant 1 
                                              %24 = OpTypePointer Uniform %7 
                                          i32 %28 = OpConstant 0 
                                          i32 %36 = OpConstant 2 
                                          i32 %45 = OpConstant 3 
                               Private f32_4* %49 = OpVariable Private 
                                          u32 %76 = OpConstant 1 
                                              %77 = OpTypeArray %6 %76 
                                              %78 = OpTypeStruct %7 %6 %77 
                                              %79 = OpTypePointer Output %78 
         Output struct {f32_4; f32; f32[1];}* %80 = OpVariable Output 
                                              %82 = OpTypePointer Output %7 
                                              %84 = OpTypePointer Private %6 
                                          u32 %87 = OpConstant 0 
                                              %88 = OpTypePointer Uniform %6 
                               Private f32_4* %93 = OpVariable Private 
                                              %94 = OpTypeVector %6 3 
                                          f32 %97 = OpConstant 3.674022E-40 
                                        f32_3 %98 = OpConstantComposite %97 %97 %97 
                       Output f32_4* vs_TEXCOORD0 = OpVariable Output 
                                             %103 = OpTypeVector %6 2 
                                         f32 %158 = OpConstant 3.674022E-40 
                                         f32 %159 = OpConstant 3.674022E-40 
                                       f32_3 %160 = OpConstantComposite %158 %158 %159 
                                             %168 = OpTypePointer Input %94 
                                Input f32_3* %169 = OpVariable Input 
                                             %174 = OpTypePointer Output %94 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                                         i32 %176 = OpConstant 4 
                                             %186 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %12 = OpLoad %11 
                                        f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                               Uniform f32_4* %25 = OpAccessChain %21 %23 %23 
                                        f32_4 %26 = OpLoad %25 
                                        f32_4 %27 = OpFMul %13 %26 
                                                      OpStore %9 %27 
                               Uniform f32_4* %29 = OpAccessChain %21 %23 %28 
                                        f32_4 %30 = OpLoad %29 
                                        f32_4 %31 = OpLoad %11 
                                        f32_4 %32 = OpVectorShuffle %31 %31 0 0 0 0 
                                        f32_4 %33 = OpFMul %30 %32 
                                        f32_4 %34 = OpLoad %9 
                                        f32_4 %35 = OpFAdd %33 %34 
                                                      OpStore %9 %35 
                               Uniform f32_4* %37 = OpAccessChain %21 %23 %36 
                                        f32_4 %38 = OpLoad %37 
                                        f32_4 %39 = OpLoad %11 
                                        f32_4 %40 = OpVectorShuffle %39 %39 2 2 2 2 
                                        f32_4 %41 = OpFMul %38 %40 
                                        f32_4 %42 = OpLoad %9 
                                        f32_4 %43 = OpFAdd %41 %42 
                                                      OpStore %9 %43 
                                        f32_4 %44 = OpLoad %9 
                               Uniform f32_4* %46 = OpAccessChain %21 %23 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_4 %48 = OpFAdd %44 %47 
                                                      OpStore %9 %48 
                                        f32_4 %50 = OpLoad %9 
                                        f32_4 %51 = OpVectorShuffle %50 %50 1 1 1 1 
                               Uniform f32_4* %52 = OpAccessChain %21 %45 %23 
                                        f32_4 %53 = OpLoad %52 
                                        f32_4 %54 = OpFMul %51 %53 
                                                      OpStore %49 %54 
                               Uniform f32_4* %55 = OpAccessChain %21 %45 %28 
                                        f32_4 %56 = OpLoad %55 
                                        f32_4 %57 = OpLoad %9 
                                        f32_4 %58 = OpVectorShuffle %57 %57 0 0 0 0 
                                        f32_4 %59 = OpFMul %56 %58 
                                        f32_4 %60 = OpLoad %49 
                                        f32_4 %61 = OpFAdd %59 %60 
                                                      OpStore %49 %61 
                               Uniform f32_4* %62 = OpAccessChain %21 %45 %36 
                                        f32_4 %63 = OpLoad %62 
                                        f32_4 %64 = OpLoad %9 
                                        f32_4 %65 = OpVectorShuffle %64 %64 2 2 2 2 
                                        f32_4 %66 = OpFMul %63 %65 
                                        f32_4 %67 = OpLoad %49 
                                        f32_4 %68 = OpFAdd %66 %67 
                                                      OpStore %49 %68 
                               Uniform f32_4* %69 = OpAccessChain %21 %45 %45 
                                        f32_4 %70 = OpLoad %69 
                                        f32_4 %71 = OpLoad %9 
                                        f32_4 %72 = OpVectorShuffle %71 %71 3 3 3 3 
                                        f32_4 %73 = OpFMul %70 %72 
                                        f32_4 %74 = OpLoad %49 
                                        f32_4 %75 = OpFAdd %73 %74 
                                                      OpStore %49 %75 
                                        f32_4 %81 = OpLoad %49 
                                Output f32_4* %83 = OpAccessChain %80 %28 
                                                      OpStore %83 %81 
                                 Private f32* %85 = OpAccessChain %49 %76 
                                          f32 %86 = OpLoad %85 
                                 Uniform f32* %89 = OpAccessChain %21 %28 %87 
                                          f32 %90 = OpLoad %89 
                                          f32 %91 = OpFMul %86 %90 
                                 Private f32* %92 = OpAccessChain %49 %76 
                                                      OpStore %92 %91 
                                        f32_4 %95 = OpLoad %49 
                                        f32_3 %96 = OpVectorShuffle %95 %95 0 3 1 
                                        f32_3 %99 = OpFMul %96 %98 
                                       f32_4 %100 = OpLoad %93 
                                       f32_4 %101 = OpVectorShuffle %100 %99 4 1 5 6 
                                                      OpStore %93 %101 
                                       f32_4 %104 = OpLoad %49 
                                       f32_2 %105 = OpVectorShuffle %104 %104 2 3 
                                       f32_4 %106 = OpLoad vs_TEXCOORD0 
                                       f32_4 %107 = OpVectorShuffle %106 %105 0 1 4 5 
                                                      OpStore vs_TEXCOORD0 %107 
                                       f32_4 %108 = OpLoad %93 
                                       f32_2 %109 = OpVectorShuffle %108 %108 2 2 
                                       f32_4 %110 = OpLoad %93 
                                       f32_2 %111 = OpVectorShuffle %110 %110 0 3 
                                       f32_2 %112 = OpFAdd %109 %111 
                                       f32_4 %113 = OpLoad vs_TEXCOORD0 
                                       f32_4 %114 = OpVectorShuffle %113 %112 4 5 2 3 
                                                      OpStore vs_TEXCOORD0 %114 
                                       f32_4 %115 = OpLoad %9 
                                       f32_3 %116 = OpVectorShuffle %115 %115 1 1 1 
                              Uniform f32_4* %117 = OpAccessChain %21 %36 %23 
                                       f32_4 %118 = OpLoad %117 
                                       f32_3 %119 = OpVectorShuffle %118 %118 0 1 2 
                                       f32_3 %120 = OpFMul %116 %119 
                                       f32_4 %121 = OpLoad %49 
                                       f32_4 %122 = OpVectorShuffle %121 %120 4 5 6 3 
                                                      OpStore %49 %122 
                              Uniform f32_4* %123 = OpAccessChain %21 %36 %28 
                                       f32_4 %124 = OpLoad %123 
                                       f32_3 %125 = OpVectorShuffle %124 %124 0 1 2 
                                       f32_4 %126 = OpLoad %9 
                                       f32_3 %127 = OpVectorShuffle %126 %126 0 0 0 
                                       f32_3 %128 = OpFMul %125 %127 
                                       f32_4 %129 = OpLoad %49 
                                       f32_3 %130 = OpVectorShuffle %129 %129 0 1 2 
                                       f32_3 %131 = OpFAdd %128 %130 
                                       f32_4 %132 = OpLoad %49 
                                       f32_4 %133 = OpVectorShuffle %132 %131 4 5 6 3 
                                                      OpStore %49 %133 
                              Uniform f32_4* %134 = OpAccessChain %21 %36 %36 
                                       f32_4 %135 = OpLoad %134 
                                       f32_3 %136 = OpVectorShuffle %135 %135 0 1 2 
                                       f32_4 %137 = OpLoad %9 
                                       f32_3 %138 = OpVectorShuffle %137 %137 2 2 2 
                                       f32_3 %139 = OpFMul %136 %138 
                                       f32_4 %140 = OpLoad %49 
                                       f32_3 %141 = OpVectorShuffle %140 %140 0 1 2 
                                       f32_3 %142 = OpFAdd %139 %141 
                                       f32_4 %143 = OpLoad %9 
                                       f32_4 %144 = OpVectorShuffle %143 %142 4 5 6 3 
                                                      OpStore %9 %144 
                              Uniform f32_4* %145 = OpAccessChain %21 %36 %45 
                                       f32_4 %146 = OpLoad %145 
                                       f32_3 %147 = OpVectorShuffle %146 %146 0 1 2 
                                       f32_4 %148 = OpLoad %9 
                                       f32_3 %149 = OpVectorShuffle %148 %148 3 3 3 
                                       f32_3 %150 = OpFMul %147 %149 
                                       f32_4 %151 = OpLoad %9 
                                       f32_3 %152 = OpVectorShuffle %151 %151 0 1 2 
                                       f32_3 %153 = OpFAdd %150 %152 
                                       f32_4 %154 = OpLoad %9 
                                       f32_4 %155 = OpVectorShuffle %154 %153 4 5 6 3 
                                                      OpStore %9 %155 
                                       f32_4 %156 = OpLoad %9 
                                       f32_3 %157 = OpVectorShuffle %156 %156 0 1 2 
                                       f32_3 %161 = OpFMul %157 %160 
                                       f32_4 %162 = OpLoad %49 
                                       f32_4 %163 = OpVectorShuffle %162 %161 4 5 6 3 
                                                      OpStore %49 %163 
                                       f32_4 %164 = OpLoad %9 
                                       f32_3 %165 = OpVectorShuffle %164 %164 0 1 2 
                                       f32_3 %166 = OpFNegate %165 
                                       f32_3 %167 = OpFMul %166 %160 
                                       f32_3 %170 = OpLoad %169 
                                       f32_3 %171 = OpFAdd %167 %170 
                                       f32_4 %172 = OpLoad %9 
                                       f32_4 %173 = OpVectorShuffle %172 %171 4 5 6 3 
                                                      OpStore %9 %173 
                                Uniform f32* %177 = OpAccessChain %21 %176 
                                         f32 %178 = OpLoad %177 
                                       f32_3 %179 = OpCompositeConstruct %178 %178 %178 
                                       f32_4 %180 = OpLoad %9 
                                       f32_3 %181 = OpVectorShuffle %180 %180 0 1 2 
                                       f32_3 %182 = OpFMul %179 %181 
                                       f32_4 %183 = OpLoad %49 
                                       f32_3 %184 = OpVectorShuffle %183 %183 0 1 2 
                                       f32_3 %185 = OpFAdd %182 %184 
                                                      OpStore vs_TEXCOORD1 %185 
                                 Output f32* %187 = OpAccessChain %80 %28 %76 
                                         f32 %188 = OpLoad %187 
                                         f32 %189 = OpFNegate %188 
                                 Output f32* %190 = OpAccessChain %80 %28 %76 
                                                      OpStore %190 %189 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 769
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %25 %39 %758 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpDecorate %13 ArrayStride 13 
                                                      OpDecorate %14 ArrayStride 14 
                                                      OpMemberDecorate %15 0 Offset 15 
                                                      OpMemberDecorate %15 1 Offset 15 
                                                      OpMemberDecorate %15 2 Offset 15 
                                                      OpMemberDecorate %15 3 Offset 15 
                                                      OpMemberDecorate %15 4 Offset 15 
                                                      OpMemberDecorate %15 5 Offset 15 
                                                      OpMemberDecorate %15 6 Offset 15 
                                                      OpMemberDecorate %15 7 Offset 15 
                                                      OpMemberDecorate %15 8 Offset 15 
                                                      OpMemberDecorate %15 9 Offset 15 
                                                      OpDecorate %15 Block 
                                                      OpDecorate %17 DescriptorSet 17 
                                                      OpDecorate %17 Binding 17 
                                                      OpDecorate vs_TEXCOORD1 Location 25 
                                                      OpDecorate vs_TEXCOORD0 Location 39 
                                                      OpDecorate %51 DescriptorSet 51 
                                                      OpDecorate %51 Binding 51 
                                                      OpDecorate %55 DescriptorSet 55 
                                                      OpDecorate %55 Binding 55 
                                                      OpDecorate %181 DescriptorSet 181 
                                                      OpDecorate %181 Binding 181 
                                                      OpDecorate %183 DescriptorSet 183 
                                                      OpDecorate %183 Binding 183 
                                                      OpDecorate %271 DescriptorSet 271 
                                                      OpDecorate %271 Binding 271 
                                                      OpDecorate %273 DescriptorSet 273 
                                                      OpDecorate %273 Binding 273 
                                                      OpDecorate %405 DescriptorSet 405 
                                                      OpDecorate %405 Binding 405 
                                                      OpDecorate %407 DescriptorSet 407 
                                                      OpDecorate %407 Binding 407 
                                                      OpDecorate %430 DescriptorSet 430 
                                                      OpDecorate %430 Binding 430 
                                                      OpDecorate %432 DescriptorSet 432 
                                                      OpDecorate %432 Binding 432 
                                                      OpDecorate %440 DescriptorSet 440 
                                                      OpDecorate %440 Binding 440 
                                                      OpDecorate %442 DescriptorSet 442 
                                                      OpDecorate %442 Binding 442 
                                                      OpDecorate %448 DescriptorSet 448 
                                                      OpDecorate %448 Binding 448 
                                                      OpDecorate %450 DescriptorSet 450 
                                                      OpDecorate %450 Binding 450 
                                                      OpDecorate %758 Location 758 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 3 
                                               %8 = OpTypePointer Private %7 
                                Private f32_3* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 4 
                                              %11 = OpTypeInt 32 0 
                                          u32 %12 = OpConstant 4 
                                              %13 = OpTypeArray %10 %12 
                                              %14 = OpTypeArray %10 %12 
                                              %15 = OpTypeStruct %7 %10 %10 %13 %10 %10 %10 %10 %10 %14 
                                              %16 = OpTypePointer Uniform %15 
Uniform struct {f32_3; f32_4; f32_4; f32_4[4]; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4[4];}* %17 = OpVariable Uniform 
                                              %18 = OpTypeInt 32 1 
                                          i32 %19 = OpConstant 1 
                                          u32 %20 = OpConstant 2 
                                              %21 = OpTypePointer Uniform %6 
                                              %24 = OpTypePointer Input %7 
                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                                              %26 = OpTypePointer Input %6 
                                          u32 %30 = OpConstant 0 
                                              %31 = OpTypePointer Private %6 
                               Private f32_3* %37 = OpVariable Private 
                                              %38 = OpTypePointer Input %10 
                        Input f32_4* vs_TEXCOORD0 = OpVariable Input 
                                              %40 = OpTypeVector %6 2 
                                 Private f32* %48 = OpVariable Private 
                                              %49 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %50 = OpTypePointer UniformConstant %49 
         UniformConstant read_only Texture2D* %51 = OpVariable UniformConstant 
                                              %53 = OpTypeSampler 
                                              %54 = OpTypePointer UniformConstant %53 
                     UniformConstant sampler* %55 = OpVariable UniformConstant 
                                              %57 = OpTypeSampledImage %49 
                                          i32 %63 = OpConstant 2 
                                          u32 %68 = OpConstant 1 
                                          f32 %72 = OpConstant 3.674022E-40 
                                              %75 = OpTypePointer Private %10 
                               Private f32_4* %76 = OpVariable Private 
                               Private f32_3* %83 = OpVariable Private 
                                          i32 %86 = OpConstant 3 
                                              %87 = OpTypePointer Uniform %10 
                                          i32 %92 = OpConstant 0 
                                         i32 %124 = OpConstant 6 
                                         u32 %147 = OpConstant 3 
                              Private f32_3* %157 = OpVariable Private 
                                         i32 %160 = OpConstant 7 
                                Private f32* %166 = OpVariable Private 
                                Private f32* %170 = OpVariable Private 
        UniformConstant read_only Texture2D* %181 = OpVariable UniformConstant 
                    UniformConstant sampler* %183 = OpVariable UniformConstant 
                                         i32 %192 = OpConstant 5 
                                         f32 %202 = OpConstant 3.674022E-40 
                                             %205 = OpTypeBool 
                                             %206 = OpTypePointer Private %205 
                               Private bool* %207 = OpVariable Private 
                                         f32 %210 = OpConstant 3.674022E-40 
                                Private f32* %215 = OpVariable Private 
                                         i32 %229 = OpConstant 4 
                                         f32 %235 = OpConstant 3.674022E-40 
                              Private f32_4* %253 = OpVariable Private 
                                         f32 %255 = OpConstant 3.674022E-40 
                                       f32_3 %256 = OpConstantComposite %255 %255 %255 
                                             %260 = OpTypePointer Function %10 
                                             %269 = OpTypeImage %6 Cube 0 0 0 1 Unknown 
                                             %270 = OpTypePointer UniformConstant %269 
      UniformConstant read_only TextureCube* %271 = OpVariable UniformConstant 
                    UniformConstant sampler* %273 = OpVariable UniformConstant 
                                             %275 = OpTypeImage %6 Cube 1 0 0 1 Unknown 
                                             %276 = OpTypeSampledImage %275 
                              Private f32_3* %282 = OpVariable Private 
                                         f32 %284 = OpConstant 3.674022E-40 
                                       f32_3 %285 = OpConstantComposite %284 %284 %255 
                                       f32_3 %302 = OpConstantComposite %284 %255 %284 
                                       f32_3 %319 = OpConstantComposite %255 %284 %284 
                                         f32 %336 = OpConstant 3.674022E-40 
                                       f32_4 %337 = OpConstantComposite %336 %336 %336 %336 
                                Private f32* %339 = OpVariable Private 
                                         i32 %368 = OpConstant 9 
      UniformConstant read_only TextureCube* %405 = OpVariable UniformConstant 
                    UniformConstant sampler* %407 = OpVariable UniformConstant 
                                             %409 = OpTypeSampledImage %269 
                                         f32 %413 = OpConstant 3.674022E-40 
                                         i32 %423 = OpConstant 8 
        UniformConstant read_only Texture2D* %430 = OpVariable UniformConstant 
                    UniformConstant sampler* %432 = OpVariable UniformConstant 
                              Private f32_4* %439 = OpVariable Private 
        UniformConstant read_only Texture2D* %440 = OpVariable UniformConstant 
                    UniformConstant sampler* %442 = OpVariable UniformConstant 
        UniformConstant read_only Texture2D* %448 = OpVariable UniformConstant 
                    UniformConstant sampler* %450 = OpVariable UniformConstant 
                                         f32 %458 = OpConstant 3.674022E-40 
                                       f32_3 %459 = OpConstantComposite %458 %458 %458 
                                         f32 %461 = OpConstant 3.674022E-40 
                                       f32_3 %462 = OpConstantComposite %461 %461 %461 
                                             %478 = OpTypePointer Uniform %7 
                              Private f32_4* %502 = OpVariable Private 
                                       f32_4 %506 = OpConstantComposite %72 %72 %72 %72 
                                         f32 %521 = OpConstant 3.674022E-40 
                                         f32 %571 = OpConstant 3.674022E-40 
                                Private f32* %574 = OpVariable Private 
                                Private f32* %578 = OpVariable Private 
                                         f32 %623 = OpConstant 3.674022E-40 
                                         f32 %650 = OpConstant 3.674022E-40 
                                         f32 %671 = OpConstant 3.674022E-40 
                                         f32 %678 = OpConstant 3.674022E-40 
                                         f32 %698 = OpConstant 3.674022E-40 
                               Private bool* %707 = OpVariable Private 
                                             %757 = OpTypePointer Output %10 
                               Output f32_4* %758 = OpVariable Output 
                                             %766 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                             Function f32_4* %261 = OpVariable Function 
                             Function f32_4* %287 = OpVariable Function 
                             Function f32_4* %304 = OpVariable Function 
                             Function f32_4* %321 = OpVariable Function 
                                 Uniform f32* %22 = OpAccessChain %17 %19 %20 
                                          f32 %23 = OpLoad %22 
                                   Input f32* %27 = OpAccessChain vs_TEXCOORD1 %20 
                                          f32 %28 = OpLoad %27 
                                          f32 %29 = OpFDiv %23 %28 
                                 Private f32* %32 = OpAccessChain %9 %30 
                                                      OpStore %32 %29 
                                        f32_3 %33 = OpLoad %9 
                                        f32_3 %34 = OpVectorShuffle %33 %33 0 0 0 
                                        f32_3 %35 = OpLoad vs_TEXCOORD1 
                                        f32_3 %36 = OpFMul %34 %35 
                                                      OpStore %9 %36 
                                        f32_4 %41 = OpLoad vs_TEXCOORD0 
                                        f32_2 %42 = OpVectorShuffle %41 %41 0 1 
                                        f32_4 %43 = OpLoad vs_TEXCOORD0 
                                        f32_2 %44 = OpVectorShuffle %43 %43 3 3 
                                        f32_2 %45 = OpFDiv %42 %44 
                                        f32_3 %46 = OpLoad %37 
                                        f32_3 %47 = OpVectorShuffle %46 %45 3 4 2 
                                                      OpStore %37 %47 
                          read_only Texture2D %52 = OpLoad %51 
                                      sampler %56 = OpLoad %55 
                   read_only Texture2DSampled %58 = OpSampledImage %52 %56 
                                        f32_3 %59 = OpLoad %37 
                                        f32_2 %60 = OpVectorShuffle %59 %59 0 1 
                                        f32_4 %61 = OpImageSampleImplicitLod %58 %60 
                                          f32 %62 = OpCompositeExtract %61 0 
                                                      OpStore %48 %62 
                                 Uniform f32* %64 = OpAccessChain %17 %63 %30 
                                          f32 %65 = OpLoad %64 
                                          f32 %66 = OpLoad %48 
                                          f32 %67 = OpFMul %65 %66 
                                 Uniform f32* %69 = OpAccessChain %17 %63 %68 
                                          f32 %70 = OpLoad %69 
                                          f32 %71 = OpFAdd %67 %70 
                                                      OpStore %48 %71 
                                          f32 %73 = OpLoad %48 
                                          f32 %74 = OpFDiv %72 %73 
                                                      OpStore %48 %74 
                                          f32 %77 = OpLoad %48 
                                        f32_3 %78 = OpCompositeConstruct %77 %77 %77 
                                        f32_3 %79 = OpLoad %9 
                                        f32_3 %80 = OpFMul %78 %79 
                                        f32_4 %81 = OpLoad %76 
                                        f32_4 %82 = OpVectorShuffle %81 %80 4 5 6 3 
                                                      OpStore %76 %82 
                                        f32_4 %84 = OpLoad %76 
                                        f32_3 %85 = OpVectorShuffle %84 %84 1 1 1 
                               Uniform f32_4* %88 = OpAccessChain %17 %86 %19 
                                        f32_4 %89 = OpLoad %88 
                                        f32_3 %90 = OpVectorShuffle %89 %89 0 1 2 
                                        f32_3 %91 = OpFMul %85 %90 
                                                      OpStore %83 %91 
                               Uniform f32_4* %93 = OpAccessChain %17 %86 %92 
                                        f32_4 %94 = OpLoad %93 
                                        f32_3 %95 = OpVectorShuffle %94 %94 0 1 2 
                                        f32_4 %96 = OpLoad %76 
                                        f32_3 %97 = OpVectorShuffle %96 %96 0 0 0 
                                        f32_3 %98 = OpFMul %95 %97 
                                        f32_3 %99 = OpLoad %83 
                                       f32_3 %100 = OpFAdd %98 %99 
                                       f32_4 %101 = OpLoad %76 
                                       f32_4 %102 = OpVectorShuffle %101 %100 4 5 2 6 
                                                      OpStore %76 %102 
                              Uniform f32_4* %103 = OpAccessChain %17 %86 %63 
                                       f32_4 %104 = OpLoad %103 
                                       f32_3 %105 = OpVectorShuffle %104 %104 0 1 2 
                                       f32_4 %106 = OpLoad %76 
                                       f32_3 %107 = OpVectorShuffle %106 %106 2 2 2 
                                       f32_3 %108 = OpFMul %105 %107 
                                       f32_4 %109 = OpLoad %76 
                                       f32_3 %110 = OpVectorShuffle %109 %109 0 1 3 
                                       f32_3 %111 = OpFAdd %108 %110 
                                       f32_4 %112 = OpLoad %76 
                                       f32_4 %113 = OpVectorShuffle %112 %111 4 5 2 6 
                                                      OpStore %76 %113 
                                       f32_4 %114 = OpLoad %76 
                                       f32_3 %115 = OpVectorShuffle %114 %114 0 1 3 
                              Uniform f32_4* %116 = OpAccessChain %17 %86 %86 
                                       f32_4 %117 = OpLoad %116 
                                       f32_3 %118 = OpVectorShuffle %117 %117 0 1 2 
                                       f32_3 %119 = OpFAdd %115 %118 
                                       f32_4 %120 = OpLoad %76 
                                       f32_4 %121 = OpVectorShuffle %120 %119 4 5 2 6 
                                                      OpStore %76 %121 
                                       f32_4 %122 = OpLoad %76 
                                       f32_3 %123 = OpVectorShuffle %122 %122 0 1 3 
                              Uniform f32_4* %125 = OpAccessChain %17 %124 
                                       f32_4 %126 = OpLoad %125 
                                       f32_3 %127 = OpVectorShuffle %126 %126 0 1 2 
                                       f32_3 %128 = OpFNegate %127 
                                       f32_3 %129 = OpFAdd %123 %128 
                                                      OpStore %83 %129 
                                       f32_3 %130 = OpLoad %83 
                                       f32_3 %131 = OpLoad %83 
                                         f32 %132 = OpDot %130 %131 
                                Private f32* %133 = OpAccessChain %9 %30 
                                                      OpStore %133 %132 
                                Private f32* %134 = OpAccessChain %9 %30 
                                         f32 %135 = OpLoad %134 
                                         f32 %136 = OpExtInst %1 31 %135 
                                Private f32* %137 = OpAccessChain %9 %30 
                                                      OpStore %137 %136 
                                Private f32* %138 = OpAccessChain %9 %20 
                                         f32 %139 = OpLoad %138 
                                         f32 %140 = OpFNegate %139 
                                         f32 %141 = OpLoad %48 
                                         f32 %142 = OpFMul %140 %141 
                                Private f32* %143 = OpAccessChain %9 %30 
                                         f32 %144 = OpLoad %143 
                                         f32 %145 = OpFAdd %142 %144 
                                Private f32* %146 = OpAccessChain %9 %30 
                                                      OpStore %146 %145 
                                Uniform f32* %148 = OpAccessChain %17 %124 %147 
                                         f32 %149 = OpLoad %148 
                                Private f32* %150 = OpAccessChain %9 %30 
                                         f32 %151 = OpLoad %150 
                                         f32 %152 = OpFMul %149 %151 
                                Private f32* %153 = OpAccessChain %76 %20 
                                         f32 %154 = OpLoad %153 
                                         f32 %155 = OpFAdd %152 %154 
                                Private f32* %156 = OpAccessChain %9 %30 
                                                      OpStore %156 %155 
                                       f32_4 %158 = OpLoad %76 
                                       f32_3 %159 = OpVectorShuffle %158 %158 0 1 3 
                              Uniform f32_4* %161 = OpAccessChain %17 %160 
                                       f32_4 %162 = OpLoad %161 
                                       f32_3 %163 = OpVectorShuffle %162 %162 0 1 2 
                                       f32_3 %164 = OpFNegate %163 
                                       f32_3 %165 = OpFAdd %159 %164 
                                                      OpStore %157 %165 
                                       f32_3 %167 = OpLoad %157 
                                       f32_3 %168 = OpLoad %157 
                                         f32 %169 = OpDot %167 %168 
                                                      OpStore %166 %169 
                                         f32 %171 = OpLoad %166 
                                         f32 %172 = OpExtInst %1 32 %171 
                                                      OpStore %170 %172 
                                       f32_3 %173 = OpLoad %157 
                                         f32 %174 = OpLoad %170 
                                       f32_3 %175 = OpCompositeConstruct %174 %174 %174 
                                       f32_3 %176 = OpFMul %173 %175 
                                                      OpStore %83 %176 
                                         f32 %177 = OpLoad %166 
                                Uniform f32* %178 = OpAccessChain %17 %160 %147 
                                         f32 %179 = OpLoad %178 
                                         f32 %180 = OpFMul %177 %179 
                                                      OpStore %166 %180 
                         read_only Texture2D %182 = OpLoad %181 
                                     sampler %184 = OpLoad %183 
                  read_only Texture2DSampled %185 = OpSampledImage %182 %184 
                                         f32 %186 = OpLoad %166 
                                       f32_2 %187 = OpCompositeConstruct %186 %186 
                                       f32_4 %188 = OpImageSampleImplicitLod %185 %187 
                                         f32 %189 = OpCompositeExtract %188 0 
                                                      OpStore %166 %189 
                                Private f32* %190 = OpAccessChain %9 %30 
                                         f32 %191 = OpLoad %190 
                                Uniform f32* %193 = OpAccessChain %17 %192 %20 
                                         f32 %194 = OpLoad %193 
                                         f32 %195 = OpFMul %191 %194 
                                Uniform f32* %196 = OpAccessChain %17 %192 %147 
                                         f32 %197 = OpLoad %196 
                                         f32 %198 = OpFAdd %195 %197 
                                Private f32* %199 = OpAccessChain %9 %30 
                                                      OpStore %199 %198 
                                Private f32* %200 = OpAccessChain %9 %30 
                                         f32 %201 = OpLoad %200 
                                         f32 %203 = OpExtInst %1 43 %201 %202 %72 
                                Private f32* %204 = OpAccessChain %9 %30 
                                                      OpStore %204 %203 
                                Private f32* %208 = OpAccessChain %9 %30 
                                         f32 %209 = OpLoad %208 
                                        bool %211 = OpFOrdLessThan %209 %210 
                                                      OpStore %207 %211 
                                        bool %212 = OpLoad %207 
                                                      OpSelectionMerge %214 None 
                                                      OpBranchConditional %212 %213 %350 
                                             %213 = OpLabel 
                                Private f32* %216 = OpAccessChain %157 %68 
                                         f32 %217 = OpLoad %216 
                                         f32 %218 = OpExtInst %1 4 %217 
                                Private f32* %219 = OpAccessChain %157 %30 
                                         f32 %220 = OpLoad %219 
                                         f32 %221 = OpExtInst %1 4 %220 
                                         f32 %222 = OpExtInst %1 40 %218 %221 
                                                      OpStore %215 %222 
                                Private f32* %223 = OpAccessChain %157 %20 
                                         f32 %224 = OpLoad %223 
                                         f32 %225 = OpExtInst %1 4 %224 
                                         f32 %226 = OpLoad %215 
                                         f32 %227 = OpExtInst %1 40 %225 %226 
                                                      OpStore %215 %227 
                                         f32 %228 = OpLoad %215 
                                Uniform f32* %230 = OpAccessChain %17 %229 %20 
                                         f32 %231 = OpLoad %230 
                                         f32 %232 = OpFNegate %231 
                                         f32 %233 = OpFAdd %228 %232 
                                                      OpStore %215 %233 
                                         f32 %234 = OpLoad %215 
                                         f32 %236 = OpExtInst %1 40 %234 %235 
                                                      OpStore %215 %236 
                                         f32 %237 = OpLoad %215 
                                Uniform f32* %238 = OpAccessChain %17 %229 %147 
                                         f32 %239 = OpLoad %238 
                                         f32 %240 = OpFMul %237 %239 
                                                      OpStore %215 %240 
                                Uniform f32* %241 = OpAccessChain %17 %229 %68 
                                         f32 %242 = OpLoad %241 
                                         f32 %243 = OpLoad %215 
                                         f32 %244 = OpFDiv %242 %243 
                                                      OpStore %215 %244 
                                         f32 %245 = OpLoad %215 
                                Uniform f32* %246 = OpAccessChain %17 %229 %30 
                                         f32 %247 = OpLoad %246 
                                         f32 %248 = OpFNegate %247 
                                         f32 %249 = OpFAdd %245 %248 
                                                      OpStore %215 %249 
                                         f32 %250 = OpLoad %215 
                                         f32 %251 = OpFNegate %250 
                                         f32 %252 = OpFAdd %251 %72 
                                                      OpStore %215 %252 
                                       f32_3 %254 = OpLoad %157 
                                       f32_3 %257 = OpFAdd %254 %256 
                                       f32_4 %258 = OpLoad %253 
                                       f32_4 %259 = OpVectorShuffle %258 %257 4 5 6 3 
                                                      OpStore %253 %259 
                                       f32_4 %262 = OpLoad %253 
                                       f32_3 %263 = OpVectorShuffle %262 %262 0 1 2 
                                         f32 %264 = OpLoad %215 
                                         f32 %265 = OpCompositeExtract %263 0 
                                         f32 %266 = OpCompositeExtract %263 1 
                                         f32 %267 = OpCompositeExtract %263 2 
                                       f32_4 %268 = OpCompositeConstruct %265 %266 %267 %264 
                                                      OpStore %261 %268 
                       read_only TextureCube %272 = OpLoad %271 
                                     sampler %274 = OpLoad %273 
                read_only TextureCubeSampled %277 = OpSampledImage %272 %274 
                                       f32_4 %278 = OpLoad %261 
                                         f32 %279 = OpCompositeExtract %278 3 
                                         f32 %280 = OpImageSampleDrefImplicitLod %277 %278 %279 
                                Private f32* %281 = OpAccessChain %253 %30 
                                                      OpStore %281 %280 
                                       f32_3 %283 = OpLoad %157 
                                       f32_3 %286 = OpFAdd %283 %285 
                                                      OpStore %282 %286 
                                       f32_3 %288 = OpLoad %282 
                                         f32 %289 = OpLoad %215 
                                         f32 %290 = OpCompositeExtract %288 0 
                                         f32 %291 = OpCompositeExtract %288 1 
                                         f32 %292 = OpCompositeExtract %288 2 
                                       f32_4 %293 = OpCompositeConstruct %290 %291 %292 %289 
                                                      OpStore %287 %293 
                       read_only TextureCube %294 = OpLoad %271 
                                     sampler %295 = OpLoad %273 
                read_only TextureCubeSampled %296 = OpSampledImage %294 %295 
                                       f32_4 %297 = OpLoad %287 
                                         f32 %298 = OpCompositeExtract %297 3 
                                         f32 %299 = OpImageSampleDrefImplicitLod %296 %297 %298 
                                Private f32* %300 = OpAccessChain %253 %68 
                                                      OpStore %300 %299 
                                       f32_3 %301 = OpLoad %157 
                                       f32_3 %303 = OpFAdd %301 %302 
                                                      OpStore %282 %303 
                                       f32_3 %305 = OpLoad %282 
                                         f32 %306 = OpLoad %215 
                                         f32 %307 = OpCompositeExtract %305 0 
                                         f32 %308 = OpCompositeExtract %305 1 
                                         f32 %309 = OpCompositeExtract %305 2 
                                       f32_4 %310 = OpCompositeConstruct %307 %308 %309 %306 
                                                      OpStore %304 %310 
                       read_only TextureCube %311 = OpLoad %271 
                                     sampler %312 = OpLoad %273 
                read_only TextureCubeSampled %313 = OpSampledImage %311 %312 
                                       f32_4 %314 = OpLoad %304 
                                         f32 %315 = OpCompositeExtract %314 3 
                                         f32 %316 = OpImageSampleDrefImplicitLod %313 %314 %315 
                                Private f32* %317 = OpAccessChain %253 %20 
                                                      OpStore %317 %316 
                                       f32_3 %318 = OpLoad %157 
                                       f32_3 %320 = OpFAdd %318 %319 
                                                      OpStore %282 %320 
                                       f32_3 %322 = OpLoad %282 
                                         f32 %323 = OpLoad %215 
                                         f32 %324 = OpCompositeExtract %322 0 
                                         f32 %325 = OpCompositeExtract %322 1 
                                         f32 %326 = OpCompositeExtract %322 2 
                                       f32_4 %327 = OpCompositeConstruct %324 %325 %326 %323 
                                                      OpStore %321 %327 
                       read_only TextureCube %328 = OpLoad %271 
                                     sampler %329 = OpLoad %273 
                read_only TextureCubeSampled %330 = OpSampledImage %328 %329 
                                       f32_4 %331 = OpLoad %321 
                                         f32 %332 = OpCompositeExtract %331 3 
                                         f32 %333 = OpImageSampleDrefImplicitLod %330 %331 %332 
                                Private f32* %334 = OpAccessChain %253 %147 
                                                      OpStore %334 %333 
                                       f32_4 %335 = OpLoad %253 
                                         f32 %338 = OpDot %335 %337 
                                                      OpStore %215 %338 
                                Uniform f32* %340 = OpAccessChain %17 %192 %30 
                                         f32 %341 = OpLoad %340 
                                         f32 %342 = OpFNegate %341 
                                         f32 %343 = OpFAdd %342 %72 
                                                      OpStore %339 %343 
                                         f32 %344 = OpLoad %215 
                                         f32 %345 = OpLoad %339 
                                         f32 %346 = OpFMul %344 %345 
                                Uniform f32* %347 = OpAccessChain %17 %192 %30 
                                         f32 %348 = OpLoad %347 
                                         f32 %349 = OpFAdd %346 %348 
                                                      OpStore %215 %349 
                                                      OpBranch %214 
                                             %350 = OpLabel 
                                                      OpStore %215 %72 
                                                      OpBranch %214 
                                             %214 = OpLabel 
                                         f32 %351 = OpLoad %215 
                                         f32 %352 = OpFNegate %351 
                                         f32 %353 = OpFAdd %352 %72 
                                                      OpStore %339 %353 
                                Private f32* %354 = OpAccessChain %9 %30 
                                         f32 %355 = OpLoad %354 
                                         f32 %356 = OpLoad %339 
                                         f32 %357 = OpFMul %355 %356 
                                         f32 %358 = OpLoad %215 
                                         f32 %359 = OpFAdd %357 %358 
                                Private f32* %360 = OpAccessChain %9 %30 
                                                      OpStore %360 %359 
                                Private f32* %361 = OpAccessChain %9 %30 
                                         f32 %362 = OpLoad %361 
                                         f32 %363 = OpLoad %166 
                                         f32 %364 = OpFMul %362 %363 
                                Private f32* %365 = OpAccessChain %9 %30 
                                                      OpStore %365 %364 
                                       f32_4 %366 = OpLoad %76 
                                       f32_3 %367 = OpVectorShuffle %366 %366 1 1 1 
                              Uniform f32_4* %369 = OpAccessChain %17 %368 %19 
                                       f32_4 %370 = OpLoad %369 
                                       f32_3 %371 = OpVectorShuffle %370 %370 0 1 2 
                                       f32_3 %372 = OpFMul %367 %371 
                                       f32_4 %373 = OpLoad %253 
                                       f32_4 %374 = OpVectorShuffle %373 %372 4 5 6 3 
                                                      OpStore %253 %374 
                              Uniform f32_4* %375 = OpAccessChain %17 %368 %92 
                                       f32_4 %376 = OpLoad %375 
                                       f32_3 %377 = OpVectorShuffle %376 %376 0 1 2 
                                       f32_4 %378 = OpLoad %76 
                                       f32_3 %379 = OpVectorShuffle %378 %378 0 0 0 
                                       f32_3 %380 = OpFMul %377 %379 
                                       f32_4 %381 = OpLoad %253 
                                       f32_3 %382 = OpVectorShuffle %381 %381 0 1 2 
                                       f32_3 %383 = OpFAdd %380 %382 
                                       f32_4 %384 = OpLoad %253 
                                       f32_4 %385 = OpVectorShuffle %384 %383 4 5 6 3 
                                                      OpStore %253 %385 
                              Uniform f32_4* %386 = OpAccessChain %17 %368 %63 
                                       f32_4 %387 = OpLoad %386 
                                       f32_3 %388 = OpVectorShuffle %387 %387 0 1 2 
                                       f32_4 %389 = OpLoad %76 
                                       f32_3 %390 = OpVectorShuffle %389 %389 3 3 3 
                                       f32_3 %391 = OpFMul %388 %390 
                                       f32_4 %392 = OpLoad %253 
                                       f32_3 %393 = OpVectorShuffle %392 %392 0 1 2 
                                       f32_3 %394 = OpFAdd %391 %393 
                                       f32_4 %395 = OpLoad %253 
                                       f32_4 %396 = OpVectorShuffle %395 %394 4 5 6 3 
                                                      OpStore %253 %396 
                                       f32_4 %397 = OpLoad %253 
                                       f32_3 %398 = OpVectorShuffle %397 %397 0 1 2 
                              Uniform f32_4* %399 = OpAccessChain %17 %368 %86 
                                       f32_4 %400 = OpLoad %399 
                                       f32_3 %401 = OpVectorShuffle %400 %400 0 1 2 
                                       f32_3 %402 = OpFAdd %398 %401 
                                       f32_4 %403 = OpLoad %253 
                                       f32_4 %404 = OpVectorShuffle %403 %402 4 5 6 3 
                                                      OpStore %253 %404 
                       read_only TextureCube %406 = OpLoad %405 
                                     sampler %408 = OpLoad %407 
                read_only TextureCubeSampled %410 = OpSampledImage %406 %408 
                                       f32_4 %411 = OpLoad %253 
                                       f32_3 %412 = OpVectorShuffle %411 %411 0 1 2 
                                       f32_4 %414 = OpImageSampleImplicitLod %410 %412 Bias %10 
                                         f32 %415 = OpCompositeExtract %414 3 
                                                      OpStore %166 %415 
                                Private f32* %416 = OpAccessChain %9 %30 
                                         f32 %417 = OpLoad %416 
                                         f32 %418 = OpLoad %166 
                                         f32 %419 = OpFMul %417 %418 
                                Private f32* %420 = OpAccessChain %9 %30 
                                                      OpStore %420 %419 
                                       f32_3 %421 = OpLoad %9 
                                       f32_3 %422 = OpVectorShuffle %421 %421 0 0 0 
                              Uniform f32_4* %424 = OpAccessChain %17 %423 
                                       f32_4 %425 = OpLoad %424 
                                       f32_3 %426 = OpVectorShuffle %425 %425 0 1 2 
                                       f32_3 %427 = OpFMul %422 %426 
                                       f32_4 %428 = OpLoad %253 
                                       f32_4 %429 = OpVectorShuffle %428 %427 4 5 6 3 
                                                      OpStore %253 %429 
                         read_only Texture2D %431 = OpLoad %430 
                                     sampler %433 = OpLoad %432 
                  read_only Texture2DSampled %434 = OpSampledImage %431 %433 
                                       f32_3 %435 = OpLoad %37 
                                       f32_2 %436 = OpVectorShuffle %435 %435 0 1 
                                       f32_4 %437 = OpImageSampleImplicitLod %434 %436 
                                       f32_3 %438 = OpVectorShuffle %437 %437 0 1 2 
                                                      OpStore %282 %438 
                         read_only Texture2D %441 = OpLoad %440 
                                     sampler %443 = OpLoad %442 
                  read_only Texture2DSampled %444 = OpSampledImage %441 %443 
                                       f32_3 %445 = OpLoad %37 
                                       f32_2 %446 = OpVectorShuffle %445 %445 0 1 
                                       f32_4 %447 = OpImageSampleImplicitLod %444 %446 
                                                      OpStore %439 %447 
                         read_only Texture2D %449 = OpLoad %448 
                                     sampler %451 = OpLoad %450 
                  read_only Texture2DSampled %452 = OpSampledImage %449 %451 
                                       f32_3 %453 = OpLoad %37 
                                       f32_2 %454 = OpVectorShuffle %453 %453 0 1 
                                       f32_4 %455 = OpImageSampleImplicitLod %452 %454 
                                       f32_3 %456 = OpVectorShuffle %455 %455 0 1 2 
                                                      OpStore %37 %456 
                                       f32_3 %457 = OpLoad %37 
                                       f32_3 %460 = OpFMul %457 %459 
                                       f32_3 %463 = OpFAdd %460 %462 
                                                      OpStore %37 %463 
                                       f32_3 %464 = OpLoad %37 
                                       f32_3 %465 = OpLoad %37 
                                         f32 %466 = OpDot %464 %465 
                                Private f32* %467 = OpAccessChain %9 %30 
                                                      OpStore %467 %466 
                                Private f32* %468 = OpAccessChain %9 %30 
                                         f32 %469 = OpLoad %468 
                                         f32 %470 = OpExtInst %1 32 %469 
                                Private f32* %471 = OpAccessChain %9 %30 
                                                      OpStore %471 %470 
                                       f32_3 %472 = OpLoad %9 
                                       f32_3 %473 = OpVectorShuffle %472 %472 0 0 0 
                                       f32_3 %474 = OpLoad %37 
                                       f32_3 %475 = OpFMul %473 %474 
                                                      OpStore %37 %475 
                                       f32_4 %476 = OpLoad %76 
                                       f32_3 %477 = OpVectorShuffle %476 %476 0 1 3 
                              Uniform f32_3* %479 = OpAccessChain %17 %92 
                                       f32_3 %480 = OpLoad %479 
                                       f32_3 %481 = OpFNegate %480 
                                       f32_3 %482 = OpFAdd %477 %481 
                                       f32_4 %483 = OpLoad %76 
                                       f32_4 %484 = OpVectorShuffle %483 %482 4 5 6 3 
                                                      OpStore %76 %484 
                                       f32_4 %485 = OpLoad %76 
                                       f32_3 %486 = OpVectorShuffle %485 %485 0 1 2 
                                       f32_4 %487 = OpLoad %76 
                                       f32_3 %488 = OpVectorShuffle %487 %487 0 1 2 
                                         f32 %489 = OpDot %486 %488 
                                Private f32* %490 = OpAccessChain %9 %30 
                                                      OpStore %490 %489 
                                Private f32* %491 = OpAccessChain %9 %30 
                                         f32 %492 = OpLoad %491 
                                         f32 %493 = OpExtInst %1 32 %492 
                                Private f32* %494 = OpAccessChain %9 %30 
                                                      OpStore %494 %493 
                                       f32_3 %495 = OpLoad %9 
                                       f32_3 %496 = OpVectorShuffle %495 %495 0 0 0 
                                       f32_4 %497 = OpLoad %76 
                                       f32_3 %498 = OpVectorShuffle %497 %497 0 1 2 
                                       f32_3 %499 = OpFMul %496 %498 
                                       f32_4 %500 = OpLoad %76 
                                       f32_4 %501 = OpVectorShuffle %500 %499 4 5 6 3 
                                                      OpStore %76 %501 
                                       f32_4 %503 = OpLoad %439 
                                       f32_4 %504 = OpVectorShuffle %503 %503 3 0 1 2 
                                       f32_4 %505 = OpFNegate %504 
                                       f32_4 %507 = OpFAdd %505 %506 
                                                      OpStore %502 %507 
                                       f32_3 %508 = OpLoad %157 
                                       f32_3 %509 = OpFNegate %508 
                                         f32 %510 = OpLoad %170 
                                       f32_3 %511 = OpCompositeConstruct %510 %510 %510 
                                       f32_3 %512 = OpFMul %509 %511 
                                       f32_4 %513 = OpLoad %76 
                                       f32_3 %514 = OpVectorShuffle %513 %513 0 1 2 
                                       f32_3 %515 = OpFNegate %514 
                                       f32_3 %516 = OpFAdd %512 %515 
                                                      OpStore %9 %516 
                                       f32_3 %517 = OpLoad %9 
                                       f32_3 %518 = OpLoad %9 
                                         f32 %519 = OpDot %517 %518 
                                                      OpStore %48 %519 
                                         f32 %520 = OpLoad %48 
                                         f32 %522 = OpExtInst %1 40 %520 %521 
                                                      OpStore %48 %522 
                                         f32 %523 = OpLoad %48 
                                         f32 %524 = OpExtInst %1 32 %523 
                                                      OpStore %48 %524 
                                         f32 %525 = OpLoad %48 
                                       f32_3 %526 = OpCompositeConstruct %525 %525 %525 
                                       f32_3 %527 = OpLoad %9 
                                       f32_3 %528 = OpFMul %526 %527 
                                                      OpStore %9 %528 
                                       f32_3 %529 = OpLoad %37 
                                       f32_4 %530 = OpLoad %76 
                                       f32_3 %531 = OpVectorShuffle %530 %530 0 1 2 
                                       f32_3 %532 = OpFNegate %531 
                                         f32 %533 = OpDot %529 %532 
                                                      OpStore %48 %533 
                                       f32_3 %534 = OpLoad %37 
                                       f32_3 %535 = OpLoad %83 
                                       f32_3 %536 = OpFNegate %535 
                                         f32 %537 = OpDot %534 %536 
                                                      OpStore %170 %537 
                                         f32 %538 = OpLoad %170 
                                         f32 %539 = OpExtInst %1 43 %538 %202 %72 
                                                      OpStore %170 %539 
                                       f32_3 %540 = OpLoad %37 
                                       f32_3 %541 = OpLoad %9 
                                         f32 %542 = OpDot %540 %541 
                                Private f32* %543 = OpAccessChain %37 %30 
                                                      OpStore %543 %542 
                                Private f32* %544 = OpAccessChain %37 %30 
                                         f32 %545 = OpLoad %544 
                                         f32 %546 = OpExtInst %1 43 %545 %202 %72 
                                Private f32* %547 = OpAccessChain %37 %30 
                                                      OpStore %547 %546 
                                       f32_3 %548 = OpLoad %83 
                                       f32_3 %549 = OpFNegate %548 
                                       f32_3 %550 = OpLoad %9 
                                         f32 %551 = OpDot %549 %550 
                                Private f32* %552 = OpAccessChain %9 %30 
                                                      OpStore %552 %551 
                                Private f32* %553 = OpAccessChain %9 %30 
                                         f32 %554 = OpLoad %553 
                                         f32 %555 = OpExtInst %1 43 %554 %202 %72 
                                Private f32* %556 = OpAccessChain %9 %30 
                                                      OpStore %556 %555 
                                Private f32* %557 = OpAccessChain %9 %30 
                                         f32 %558 = OpLoad %557 
                                Private f32* %559 = OpAccessChain %9 %30 
                                         f32 %560 = OpLoad %559 
                                         f32 %561 = OpFMul %558 %560 
                                Private f32* %562 = OpAccessChain %157 %30 
                                                      OpStore %562 %561 
                                       f32_3 %563 = OpLoad %157 
                                       f32_2 %564 = OpVectorShuffle %563 %563 0 0 
                                       f32_4 %565 = OpLoad %502 
                                       f32_2 %566 = OpVectorShuffle %565 %565 0 0 
                                         f32 %567 = OpDot %564 %566 
                                Private f32* %568 = OpAccessChain %157 %30 
                                                      OpStore %568 %567 
                                Private f32* %569 = OpAccessChain %157 %30 
                                         f32 %570 = OpLoad %569 
                                         f32 %572 = OpFAdd %570 %571 
                                Private f32* %573 = OpAccessChain %157 %30 
                                                      OpStore %573 %572 
                                         f32 %575 = OpLoad %170 
                                         f32 %576 = OpFNegate %575 
                                         f32 %577 = OpFAdd %576 %72 
                                                      OpStore %574 %577 
                                         f32 %579 = OpLoad %574 
                                         f32 %580 = OpLoad %574 
                                         f32 %581 = OpFMul %579 %580 
                                                      OpStore %578 %581 
                                         f32 %582 = OpLoad %578 
                                         f32 %583 = OpLoad %578 
                                         f32 %584 = OpFMul %582 %583 
                                                      OpStore %578 %584 
                                         f32 %585 = OpLoad %574 
                                         f32 %586 = OpLoad %578 
                                         f32 %587 = OpFMul %585 %586 
                                                      OpStore %574 %587 
                                Private f32* %588 = OpAccessChain %157 %30 
                                         f32 %589 = OpLoad %588 
                                         f32 %590 = OpLoad %574 
                                         f32 %591 = OpFMul %589 %590 
                                         f32 %592 = OpFAdd %591 %72 
                                                      OpStore %574 %592 
                                         f32 %593 = OpLoad %48 
                                         f32 %594 = OpExtInst %1 4 %593 
                                         f32 %595 = OpFNegate %594 
                                         f32 %596 = OpFAdd %595 %72 
                                                      OpStore %578 %596 
                                         f32 %597 = OpLoad %578 
                                         f32 %598 = OpLoad %578 
                                         f32 %599 = OpFMul %597 %598 
                                                      OpStore %166 %599 
                                         f32 %600 = OpLoad %166 
                                         f32 %601 = OpLoad %166 
                                         f32 %602 = OpFMul %600 %601 
                                                      OpStore %166 %602 
                                         f32 %603 = OpLoad %578 
                                         f32 %604 = OpLoad %166 
                                         f32 %605 = OpFMul %603 %604 
                                                      OpStore %578 %605 
                                Private f32* %606 = OpAccessChain %157 %30 
                                         f32 %607 = OpLoad %606 
                                         f32 %608 = OpLoad %578 
                                         f32 %609 = OpFMul %607 %608 
                                         f32 %610 = OpFAdd %609 %72 
                                Private f32* %611 = OpAccessChain %157 %30 
                                                      OpStore %611 %610 
                                Private f32* %612 = OpAccessChain %157 %30 
                                         f32 %613 = OpLoad %612 
                                         f32 %614 = OpLoad %574 
                                         f32 %615 = OpFMul %613 %614 
                                Private f32* %616 = OpAccessChain %157 %30 
                                                      OpStore %616 %615 
                                Private f32* %617 = OpAccessChain %502 %30 
                                         f32 %618 = OpLoad %617 
                                Private f32* %619 = OpAccessChain %502 %30 
                                         f32 %620 = OpLoad %619 
                                         f32 %621 = OpFMul %618 %620 
                                                      OpStore %574 %621 
                                         f32 %622 = OpLoad %574 
                                         f32 %624 = OpExtInst %1 40 %622 %623 
                                                      OpStore %574 %624 
                                         f32 %625 = OpLoad %574 
                                         f32 %626 = OpFNegate %625 
                                         f32 %627 = OpFAdd %626 %72 
                                                      OpStore %578 %627 
                                         f32 %628 = OpLoad %48 
                                         f32 %629 = OpExtInst %1 4 %628 
                                         f32 %630 = OpLoad %578 
                                         f32 %631 = OpFMul %629 %630 
                                         f32 %632 = OpLoad %574 
                                         f32 %633 = OpFAdd %631 %632 
                                                      OpStore %166 %633 
                                         f32 %634 = OpLoad %170 
                                         f32 %635 = OpLoad %578 
                                         f32 %636 = OpFMul %634 %635 
                                         f32 %637 = OpLoad %574 
                                         f32 %638 = OpFAdd %636 %637 
                                                      OpStore %578 %638 
                                         f32 %639 = OpLoad %48 
                                         f32 %640 = OpExtInst %1 4 %639 
                                         f32 %641 = OpLoad %578 
                                         f32 %642 = OpFMul %640 %641 
                                                      OpStore %48 %642 
                                         f32 %643 = OpLoad %170 
                                         f32 %644 = OpLoad %166 
                                         f32 %645 = OpFMul %643 %644 
                                         f32 %646 = OpLoad %48 
                                         f32 %647 = OpFAdd %645 %646 
                                                      OpStore %48 %647 
                                         f32 %648 = OpLoad %48 
                                         f32 %649 = OpFAdd %648 %235 
                                                      OpStore %48 %649 
                                         f32 %651 = OpLoad %48 
                                         f32 %652 = OpFDiv %650 %651 
                                                      OpStore %48 %652 
                                         f32 %653 = OpLoad %574 
                                         f32 %654 = OpLoad %574 
                                         f32 %655 = OpFMul %653 %654 
                                                      OpStore %574 %655 
                                Private f32* %656 = OpAccessChain %37 %30 
                                         f32 %657 = OpLoad %656 
                                         f32 %658 = OpLoad %574 
                                         f32 %659 = OpFMul %657 %658 
                                Private f32* %660 = OpAccessChain %37 %30 
                                         f32 %661 = OpLoad %660 
                                         f32 %662 = OpFNegate %661 
                                         f32 %663 = OpFAdd %659 %662 
                                                      OpStore %578 %663 
                                         f32 %664 = OpLoad %578 
                                Private f32* %665 = OpAccessChain %37 %30 
                                         f32 %666 = OpLoad %665 
                                         f32 %667 = OpFMul %664 %666 
                                         f32 %668 = OpFAdd %667 %72 
                                Private f32* %669 = OpAccessChain %37 %30 
                                                      OpStore %669 %668 
                                         f32 %670 = OpLoad %574 
                                         f32 %672 = OpFMul %670 %671 
                                                      OpStore %574 %672 
                                Private f32* %673 = OpAccessChain %37 %30 
                                         f32 %674 = OpLoad %673 
                                Private f32* %675 = OpAccessChain %37 %30 
                                         f32 %676 = OpLoad %675 
                                         f32 %677 = OpFMul %674 %676 
                                         f32 %679 = OpFAdd %677 %678 
                                Private f32* %680 = OpAccessChain %37 %30 
                                                      OpStore %680 %679 
                                         f32 %681 = OpLoad %574 
                                Private f32* %682 = OpAccessChain %37 %30 
                                         f32 %683 = OpLoad %682 
                                         f32 %684 = OpFDiv %681 %683 
                                                      OpStore %574 %684 
                                         f32 %685 = OpLoad %574 
                                         f32 %686 = OpLoad %48 
                                         f32 %687 = OpFMul %685 %686 
                                Private f32* %688 = OpAccessChain %157 %68 
                                                      OpStore %688 %687 
                                         f32 %689 = OpLoad %170 
                                       f32_2 %690 = OpCompositeConstruct %689 %689 
                                       f32_3 %691 = OpLoad %157 
                                       f32_2 %692 = OpVectorShuffle %691 %691 0 1 
                                       f32_2 %693 = OpFMul %690 %692 
                                       f32_3 %694 = OpLoad %157 
                                       f32_3 %695 = OpVectorShuffle %694 %693 3 4 2 
                                                      OpStore %157 %695 
                                Private f32* %696 = OpAccessChain %157 %68 
                                         f32 %697 = OpLoad %696 
                                         f32 %699 = OpFMul %697 %698 
                                                      OpStore %574 %699 
                                         f32 %700 = OpLoad %574 
                                         f32 %701 = OpExtInst %1 40 %700 %202 
                                                      OpStore %574 %701 
                                       f32_4 %702 = OpLoad %439 
                                       f32_3 %703 = OpVectorShuffle %702 %702 0 1 2 
                                       f32_4 %704 = OpLoad %439 
                                       f32_3 %705 = OpVectorShuffle %704 %704 0 1 2 
                                         f32 %706 = OpDot %703 %705 
                                                      OpStore %48 %706 
                                         f32 %708 = OpLoad %48 
                                        bool %709 = OpFOrdNotEqual %708 %202 
                                                      OpStore %707 %709 
                                        bool %710 = OpLoad %707 
                                         f32 %711 = OpSelect %710 %72 %202 
                                                      OpStore %48 %711 
                                         f32 %712 = OpLoad %48 
                                         f32 %713 = OpLoad %574 
                                         f32 %714 = OpFMul %712 %713 
                                                      OpStore %574 %714 
                                       f32_3 %715 = OpLoad %157 
                                       f32_3 %716 = OpVectorShuffle %715 %715 0 0 0 
                                       f32_4 %717 = OpLoad %253 
                                       f32_3 %718 = OpVectorShuffle %717 %717 0 1 2 
                                       f32_3 %719 = OpFMul %716 %718 
                                                      OpStore %37 %719 
                                       f32_4 %720 = OpLoad %253 
                                       f32_3 %721 = OpVectorShuffle %720 %720 0 1 2 
                                         f32 %722 = OpLoad %574 
                                       f32_3 %723 = OpCompositeConstruct %722 %722 %722 
                                       f32_3 %724 = OpFMul %721 %723 
                                                      OpStore %157 %724 
                                Private f32* %725 = OpAccessChain %9 %30 
                                         f32 %726 = OpLoad %725 
                                         f32 %727 = OpFNegate %726 
                                         f32 %728 = OpFAdd %727 %72 
                                Private f32* %729 = OpAccessChain %9 %30 
                                                      OpStore %729 %728 
                                Private f32* %730 = OpAccessChain %9 %30 
                                         f32 %731 = OpLoad %730 
                                Private f32* %732 = OpAccessChain %9 %30 
                                         f32 %733 = OpLoad %732 
                                         f32 %734 = OpFMul %731 %733 
                                                      OpStore %170 %734 
                                         f32 %735 = OpLoad %170 
                                         f32 %736 = OpLoad %170 
                                         f32 %737 = OpFMul %735 %736 
                                                      OpStore %170 %737 
                                Private f32* %738 = OpAccessChain %9 %30 
                                         f32 %739 = OpLoad %738 
                                         f32 %740 = OpLoad %170 
                                         f32 %741 = OpFMul %739 %740 
                                Private f32* %742 = OpAccessChain %9 %30 
                                                      OpStore %742 %741 
                                       f32_4 %743 = OpLoad %502 
                                       f32_3 %744 = OpVectorShuffle %743 %743 1 2 3 
                                       f32_3 %745 = OpLoad %9 
                                       f32_3 %746 = OpVectorShuffle %745 %745 0 0 0 
                                       f32_3 %747 = OpFMul %744 %746 
                                       f32_4 %748 = OpLoad %439 
                                       f32_3 %749 = OpVectorShuffle %748 %748 0 1 2 
                                       f32_3 %750 = OpFAdd %747 %749 
                                       f32_4 %751 = OpLoad %76 
                                       f32_4 %752 = OpVectorShuffle %751 %750 4 5 6 3 
                                                      OpStore %76 %752 
                                       f32_3 %753 = OpLoad %157 
                                       f32_4 %754 = OpLoad %76 
                                       f32_3 %755 = OpVectorShuffle %754 %754 0 1 2 
                                       f32_3 %756 = OpFMul %753 %755 
                                                      OpStore %9 %756 
                                       f32_3 %759 = OpLoad %282 
                                       f32_3 %760 = OpLoad %37 
                                       f32_3 %761 = OpFMul %759 %760 
                                       f32_3 %762 = OpLoad %9 
                                       f32_3 %763 = OpFAdd %761 %762 
                                       f32_4 %764 = OpLoad %758 
                                       f32_4 %765 = OpVectorShuffle %764 %763 4 5 6 3 
                                                      OpStore %758 %765 
                                 Output f32* %767 = OpAccessChain %758 %147 
                                                      OpStore %767 %72 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
}
Program "fp" {
SubProgram "d3d11 " {
Keywords { "POINT" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "POINT" }
""
}
SubProgram "vulkan " {
Keywords { "POINT" }
""
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" }
""
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" }
""
}
SubProgram "d3d11 " {
Keywords { "SPOT" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "SPOT" }
""
}
SubProgram "vulkan " {
Keywords { "SPOT" }
""
}
SubProgram "d3d11 " {
Keywords { "POINT_COOKIE" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "POINT_COOKIE" }
""
}
SubProgram "vulkan " {
Keywords { "POINT_COOKIE" }
""
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL_COOKIE" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL_COOKIE" }
""
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL_COOKIE" }
""
}
SubProgram "d3d11 " {
Keywords { "SHADOWS_DEPTH" "SPOT" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "SHADOWS_DEPTH" "SPOT" }
""
}
SubProgram "vulkan " {
Keywords { "SHADOWS_DEPTH" "SPOT" }
""
}
SubProgram "d3d11 " {
Keywords { "SHADOWS_DEPTH" "SHADOWS_SOFT" "SPOT" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "SHADOWS_DEPTH" "SHADOWS_SOFT" "SPOT" }
""
}
SubProgram "vulkan " {
Keywords { "SHADOWS_DEPTH" "SHADOWS_SOFT" "SPOT" }
""
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
""
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
""
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
""
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
""
}
SubProgram "d3d11 " {
Keywords { "POINT" "SHADOWS_CUBE" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "POINT" "SHADOWS_CUBE" }
""
}
SubProgram "vulkan " {
Keywords { "POINT" "SHADOWS_CUBE" }
""
}
SubProgram "d3d11 " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
""
}
SubProgram "vulkan " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
""
}
SubProgram "d3d11 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
""
}
SubProgram "vulkan " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
""
}
SubProgram "d3d11 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
""
}
SubProgram "vulkan " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
""
}
SubProgram "d3d11 " {
Keywords { "POINT" "UNITY_HDR_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "POINT" "UNITY_HDR_ON" }
""
}
SubProgram "vulkan " {
Keywords { "POINT" "UNITY_HDR_ON" }
""
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "UNITY_HDR_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "UNITY_HDR_ON" }
""
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "UNITY_HDR_ON" }
""
}
SubProgram "d3d11 " {
Keywords { "SPOT" "UNITY_HDR_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "SPOT" "UNITY_HDR_ON" }
""
}
SubProgram "vulkan " {
Keywords { "SPOT" "UNITY_HDR_ON" }
""
}
SubProgram "d3d11 " {
Keywords { "POINT_COOKIE" "UNITY_HDR_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "POINT_COOKIE" "UNITY_HDR_ON" }
""
}
SubProgram "vulkan " {
Keywords { "POINT_COOKIE" "UNITY_HDR_ON" }
""
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL_COOKIE" "UNITY_HDR_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL_COOKIE" "UNITY_HDR_ON" }
""
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL_COOKIE" "UNITY_HDR_ON" }
""
}
SubProgram "d3d11 " {
Keywords { "SHADOWS_DEPTH" "SPOT" "UNITY_HDR_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "SHADOWS_DEPTH" "SPOT" "UNITY_HDR_ON" }
""
}
SubProgram "vulkan " {
Keywords { "SHADOWS_DEPTH" "SPOT" "UNITY_HDR_ON" }
""
}
SubProgram "d3d11 " {
Keywords { "SHADOWS_DEPTH" "SHADOWS_SOFT" "SPOT" "UNITY_HDR_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "SHADOWS_DEPTH" "SHADOWS_SOFT" "SPOT" "UNITY_HDR_ON" }
""
}
SubProgram "vulkan " {
Keywords { "SHADOWS_DEPTH" "SHADOWS_SOFT" "SPOT" "UNITY_HDR_ON" }
""
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "UNITY_HDR_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "UNITY_HDR_ON" }
""
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "UNITY_HDR_ON" }
""
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "UNITY_HDR_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "UNITY_HDR_ON" }
""
}
SubProgram "vulkan " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "UNITY_HDR_ON" }
""
}
SubProgram "d3d11 " {
Keywords { "POINT" "SHADOWS_CUBE" "UNITY_HDR_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "POINT" "SHADOWS_CUBE" "UNITY_HDR_ON" }
""
}
SubProgram "vulkan " {
Keywords { "POINT" "SHADOWS_CUBE" "UNITY_HDR_ON" }
""
}
SubProgram "d3d11 " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "UNITY_HDR_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "UNITY_HDR_ON" }
""
}
SubProgram "vulkan " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "UNITY_HDR_ON" }
""
}
SubProgram "d3d11 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "UNITY_HDR_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "UNITY_HDR_ON" }
""
}
SubProgram "vulkan " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "UNITY_HDR_ON" }
""
}
SubProgram "d3d11 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "UNITY_HDR_ON" }
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "UNITY_HDR_ON" }
""
}
SubProgram "vulkan " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "UNITY_HDR_ON" }
""
}
}
}
 Pass {
  ZTest Always
  ZWrite Off
  Cull Off
  Stencil {
   ReadMask 0
   CompFront Equal
   PassFront Keep
   FailFront Keep
   ZFailFront Keep
   CompBack Equal
   PassBack Keep
   FailBack Keep
   ZFailBack Keep
  }
  GpuProgramID 129378
Program "vp" {
SubProgram "d3d11 " {
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
"#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in  vec4 in_POSITION0;
in  vec2 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif

#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
UNITY_LOCATION(0) uniform  sampler2D _LightBuffer;
in  vec2 vs_TEXCOORD0;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
void main()
{
    u_xlat0 = texture(_LightBuffer, vs_TEXCOORD0.xy);
    u_xlat0 = log2(u_xlat0);
    SV_Target0 = (-u_xlat0);
    return;
}

#endif
"
}
SubProgram "vulkan " {
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 94
; Schema: 0
                                              OpCapability Shader 
                                       %1 = OpExtInstImport "GLSL.std.450" 
                                              OpMemoryModel Logical GLSL450 
                                              OpEntryPoint Vertex %4 "main" %11 %72 %84 %86 
                                              OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                              OpDecorate %11 Location 11 
                                              OpDecorate %16 ArrayStride 16 
                                              OpDecorate %17 ArrayStride 17 
                                              OpMemberDecorate %18 0 Offset 18 
                                              OpMemberDecorate %18 1 Offset 18 
                                              OpDecorate %18 Block 
                                              OpDecorate %20 DescriptorSet 20 
                                              OpDecorate %20 Binding 20 
                                              OpMemberDecorate %70 0 BuiltIn 70 
                                              OpMemberDecorate %70 1 BuiltIn 70 
                                              OpMemberDecorate %70 2 BuiltIn 70 
                                              OpDecorate %70 Block 
                                              OpDecorate vs_TEXCOORD0 Location 84 
                                              OpDecorate %86 Location 86 
                                       %2 = OpTypeVoid 
                                       %3 = OpTypeFunction %2 
                                       %6 = OpTypeFloat 32 
                                       %7 = OpTypeVector %6 4 
                                       %8 = OpTypePointer Private %7 
                        Private f32_4* %9 = OpVariable Private 
                                      %10 = OpTypePointer Input %7 
                         Input f32_4* %11 = OpVariable Input 
                                      %14 = OpTypeInt 32 0 
                                  u32 %15 = OpConstant 4 
                                      %16 = OpTypeArray %7 %15 
                                      %17 = OpTypeArray %7 %15 
                                      %18 = OpTypeStruct %16 %17 
                                      %19 = OpTypePointer Uniform %18 
Uniform struct {f32_4[4]; f32_4[4];}* %20 = OpVariable Uniform 
                                      %21 = OpTypeInt 32 1 
                                  i32 %22 = OpConstant 0 
                                  i32 %23 = OpConstant 1 
                                      %24 = OpTypePointer Uniform %7 
                                  i32 %35 = OpConstant 2 
                                  i32 %44 = OpConstant 3 
                       Private f32_4* %48 = OpVariable Private 
                                  u32 %68 = OpConstant 1 
                                      %69 = OpTypeArray %6 %68 
                                      %70 = OpTypeStruct %7 %6 %69 
                                      %71 = OpTypePointer Output %70 
 Output struct {f32_4; f32; f32[1];}* %72 = OpVariable Output 
                                      %80 = OpTypePointer Output %7 
                                      %82 = OpTypeVector %6 2 
                                      %83 = OpTypePointer Output %82 
               Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                      %85 = OpTypePointer Input %82 
                         Input f32_2* %86 = OpVariable Input 
                                      %88 = OpTypePointer Output %6 
                                  void %4 = OpFunction None %3 
                                       %5 = OpLabel 
                                f32_4 %12 = OpLoad %11 
                                f32_4 %13 = OpVectorShuffle %12 %12 1 1 1 1 
                       Uniform f32_4* %25 = OpAccessChain %20 %22 %23 
                                f32_4 %26 = OpLoad %25 
                                f32_4 %27 = OpFMul %13 %26 
                                              OpStore %9 %27 
                       Uniform f32_4* %28 = OpAccessChain %20 %22 %22 
                                f32_4 %29 = OpLoad %28 
                                f32_4 %30 = OpLoad %11 
                                f32_4 %31 = OpVectorShuffle %30 %30 0 0 0 0 
                                f32_4 %32 = OpFMul %29 %31 
                                f32_4 %33 = OpLoad %9 
                                f32_4 %34 = OpFAdd %32 %33 
                                              OpStore %9 %34 
                       Uniform f32_4* %36 = OpAccessChain %20 %22 %35 
                                f32_4 %37 = OpLoad %36 
                                f32_4 %38 = OpLoad %11 
                                f32_4 %39 = OpVectorShuffle %38 %38 2 2 2 2 
                                f32_4 %40 = OpFMul %37 %39 
                                f32_4 %41 = OpLoad %9 
                                f32_4 %42 = OpFAdd %40 %41 
                                              OpStore %9 %42 
                                f32_4 %43 = OpLoad %9 
                       Uniform f32_4* %45 = OpAccessChain %20 %22 %44 
                                f32_4 %46 = OpLoad %45 
                                f32_4 %47 = OpFAdd %43 %46 
                                              OpStore %9 %47 
                                f32_4 %49 = OpLoad %9 
                                f32_4 %50 = OpVectorShuffle %49 %49 1 1 1 1 
                       Uniform f32_4* %51 = OpAccessChain %20 %23 %23 
                                f32_4 %52 = OpLoad %51 
                                f32_4 %53 = OpFMul %50 %52 
                                              OpStore %48 %53 
                       Uniform f32_4* %54 = OpAccessChain %20 %23 %22 
                                f32_4 %55 = OpLoad %54 
                                f32_4 %56 = OpLoad %9 
                                f32_4 %57 = OpVectorShuffle %56 %56 0 0 0 0 
                                f32_4 %58 = OpFMul %55 %57 
                                f32_4 %59 = OpLoad %48 
                                f32_4 %60 = OpFAdd %58 %59 
                                              OpStore %48 %60 
                       Uniform f32_4* %61 = OpAccessChain %20 %23 %35 
                                f32_4 %62 = OpLoad %61 
                                f32_4 %63 = OpLoad %9 
                                f32_4 %64 = OpVectorShuffle %63 %63 2 2 2 2 
                                f32_4 %65 = OpFMul %62 %64 
                                f32_4 %66 = OpLoad %48 
                                f32_4 %67 = OpFAdd %65 %66 
                                              OpStore %48 %67 
                       Uniform f32_4* %73 = OpAccessChain %20 %23 %44 
                                f32_4 %74 = OpLoad %73 
                                f32_4 %75 = OpLoad %9 
                                f32_4 %76 = OpVectorShuffle %75 %75 3 3 3 3 
                                f32_4 %77 = OpFMul %74 %76 
                                f32_4 %78 = OpLoad %48 
                                f32_4 %79 = OpFAdd %77 %78 
                        Output f32_4* %81 = OpAccessChain %72 %22 
                                              OpStore %81 %79 
                                f32_2 %87 = OpLoad %86 
                                              OpStore vs_TEXCOORD0 %87 
                          Output f32* %89 = OpAccessChain %72 %22 %68 
                                  f32 %90 = OpLoad %89 
                                  f32 %91 = OpFNegate %90 
                          Output f32* %92 = OpAccessChain %72 %22 %68 
                                              OpStore %92 %91 
                                              OpReturn
                                              OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 32
; Schema: 0
                                             OpCapability Shader 
                                      %1 = OpExtInstImport "GLSL.std.450" 
                                             OpMemoryModel Logical GLSL450 
                                             OpEntryPoint Fragment %4 "main" %22 %28 
                                             OpExecutionMode %4 OriginUpperLeft 
                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                             OpDecorate %12 DescriptorSet 12 
                                             OpDecorate %12 Binding 12 
                                             OpDecorate %16 DescriptorSet 16 
                                             OpDecorate %16 Binding 16 
                                             OpDecorate vs_TEXCOORD0 Location 22 
                                             OpDecorate %28 Location 28 
                                      %2 = OpTypeVoid 
                                      %3 = OpTypeFunction %2 
                                      %6 = OpTypeFloat 32 
                                      %7 = OpTypeVector %6 4 
                                      %8 = OpTypePointer Private %7 
                       Private f32_4* %9 = OpVariable Private 
                                     %10 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                     %11 = OpTypePointer UniformConstant %10 
UniformConstant read_only Texture2D* %12 = OpVariable UniformConstant 
                                     %14 = OpTypeSampler 
                                     %15 = OpTypePointer UniformConstant %14 
            UniformConstant sampler* %16 = OpVariable UniformConstant 
                                     %18 = OpTypeSampledImage %10 
                                     %20 = OpTypeVector %6 2 
                                     %21 = OpTypePointer Input %20 
               Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                     %27 = OpTypePointer Output %7 
                       Output f32_4* %28 = OpVariable Output 
                                 void %4 = OpFunction None %3 
                                      %5 = OpLabel 
                 read_only Texture2D %13 = OpLoad %12 
                             sampler %17 = OpLoad %16 
          read_only Texture2DSampled %19 = OpSampledImage %13 %17 
                               f32_2 %23 = OpLoad vs_TEXCOORD0 
                               f32_4 %24 = OpImageSampleImplicitLod %19 %23 
                                             OpStore %9 %24 
                               f32_4 %25 = OpLoad %9 
                               f32_4 %26 = OpExtInst %1 30 %25 
                                             OpStore %9 %26 
                               f32_4 %29 = OpLoad %9 
                               f32_4 %30 = OpFNegate %29 
                                             OpStore %28 %30 
                                             OpReturn
                                             OpFunctionEnd
"
}
}
Program "fp" {
SubProgram "d3d11 " {
"// shader disassembly not supported on DXBC"
}
SubProgram "glcore " {
""
}
SubProgram "vulkan " {
""
}
}
}
}
}